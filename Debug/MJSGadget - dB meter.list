
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000231e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ee8  080232a8  080232a8  000242a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026190  08026190  00028428  2**0
                  CONTENTS
  4 .ARM          00000008  08026190  08026190  00027190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026198  08026198  00028428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026198  08026198  00027198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802619c  0802619c  0002719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000428  20000000  080261a0  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033a4  20000428  080265c8  00028428  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200037cc  080265c8  000287cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY
 12 .debug_info   000340d3  00000000  00000000  00028450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000938d  00000000  00000000  0005c523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ac0  00000000  00000000  000658b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fba  00000000  00000000  00068370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b84  00000000  00000000  0006a32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041aff  00000000  00000000  0008ceae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a098e  00000000  00000000  000ce9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016f33b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae3c  00000000  00000000  0016f3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017a295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017c811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000428 	.word	0x20000428
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802328c 	.word	0x0802328c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000042c 	.word	0x2000042c
 8000104:	0802328c 	.word	0x0802328c

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080253a4 	.word	0x080253a4
 8000e0c:	080253e4 	.word	0x080253e4
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08025420 	.word	0x08025420
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c fc52 	bl	800ff0c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c fca9 	bl	800ffdc <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c fc5c 	bl	800ff68 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000444 	.word	0x20000444

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00c fbd8 	bl	800ff0c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00c fc07 	bl	800ff84 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00c fbeb 	bl	800ff68 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000028 	.word	0x20000028

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00b fb72 	bl	800eea0 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a08 	.word	0x20000a08

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd96 	bl	8006308 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <setCharges+0x3c>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80037e2:	f002 fdf3 	bl	80063cc <ReadSolarVoltage>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fde9 	bl	80033c0 <__aeabi_i2d>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <setCharges+0x40>)
 80037f2:	f7fe fadf 	bl	8001db4 <__aeabi_ddiv>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0010      	movs	r0, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	f7ff fe79 	bl	80034f4 <__aeabi_d2f>
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <setCharges+0x44>)
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000570 	.word	0x20000570
 8003814:	408f4000 	.word	0x408f4000
 8003818:	20000574 	.word	0x20000574

0800381c <checkEEprom>:
bool checkEEprom(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkEEprom+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkEEprom+0x60>)
 8003826:	220c      	movs	r2, #12
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff65 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkEEprom+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkEEprom+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkEEprom+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkEEprom+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkEEprom+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkEEprom+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000a3c 	.word	0x20000a3c
 800387c:	0808000c 	.word	0x0808000c
 8003880:	20000a48 	.word	0x20000a48
 8003884:	20000a4c 	.word	0x20000a4c

08003888 <checkName>:
bool checkName(){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <checkName+0x5c>)
 8003890:	4815      	ldr	r0, [pc, #84]	@ (80038e8 <checkName+0x60>)
 8003892:	221e      	movs	r2, #30
 8003894:	0019      	movs	r1, r3
 8003896:	f7ff ff2f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e00e      	b.n	80038c0 <checkName+0x38>
    configSum += nameConfig[i];
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <checkName+0x5c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	001a      	movs	r2, r3
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <checkName+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <checkName+0x64>)
 80038b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	d9ec      	bls.n	80038a2 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038c8:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <checkName+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	4193      	sbcs	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <checkName+0x68>)
 80038d4:	701a      	strb	r2, [r3, #0]
  return test;
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <checkName+0x68>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	20000a50 	.word	0x20000a50
 80038e8:	08080090 	.word	0x08080090
 80038ec:	20000a70 	.word	0x20000a70
 80038f0:	20000a74 	.word	0x20000a74

080038f4 <setHIDS>:


void setHIDS(float temp, float humid){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <setHIDS+0x20>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8003904:	4b03      	ldr	r3, [pc, #12]	@ (8003914 <setHIDS+0x20>)
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	605a      	str	r2, [r3, #4]
  if (SSD1306detected) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000a14 	.word	0x20000a14

08003918 <setVOC>:

void setVOC(uint16_t voc){
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	0002      	movs	r2, r0
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8003924:	4b03      	ldr	r3, [pc, #12]	@ (8003934 <setVOC+0x1c>)
 8003926:	1dba      	adds	r2, r7, #6
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	831a      	strh	r2, [r3, #24]
#ifdef SSD1306
  if (SSD1306detected) {
    displayVOC();
  }
#endif
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000a14 	.word	0x20000a14

08003938 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8003944:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <setMic+0x28>)
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	61da      	str	r2, [r3, #28]
  MeasVal.dBApeak = dBmax;
 800394a:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <setMic+0x28>)
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	621a      	str	r2, [r3, #32]
  MeasVal.dBAaverage = dBAavg;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <setMic+0x28>)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24
  if (SSD1306detected) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	20000a14 	.word	0x20000a14

08003964 <setPMsen50>:

void setPMsen50(uint16_t PM2, uint16_t PM10) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	0002      	movs	r2, r0
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	801a      	strh	r2, [r3, #0]
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	1c0a      	adds	r2, r1, #0
 8003974:	801a      	strh	r2, [r3, #0]
  MeasVal.airPM2 = PM2 / 10.0f;
 8003976:	1dbb      	adds	r3, r7, #6
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	0018      	movs	r0, r3
 800397c:	f7fd fe28 	bl	80015d0 <__aeabi_i2f>
 8003980:	1c03      	adds	r3, r0, #0
 8003982:	490d      	ldr	r1, [pc, #52]	@ (80039b8 <setPMsen50+0x54>)
 8003984:	1c18      	adds	r0, r3, #0
 8003986:	f7fd f925 	bl	8000bd4 <__aeabi_fdiv>
 800398a:	1c03      	adds	r3, r0, #0
 800398c:	1c1a      	adds	r2, r3, #0
 800398e:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <setPMsen50+0x58>)
 8003990:	609a      	str	r2, [r3, #8]
  MeasVal.airPM10 = PM10 / 10.0f;
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	0018      	movs	r0, r3
 8003998:	f7fd fe1a 	bl	80015d0 <__aeabi_i2f>
 800399c:	1c03      	adds	r3, r0, #0
 800399e:	4906      	ldr	r1, [pc, #24]	@ (80039b8 <setPMsen50+0x54>)
 80039a0:	1c18      	adds	r0, r3, #0
 80039a2:	f7fd f917 	bl	8000bd4 <__aeabi_fdiv>
 80039a6:	1c03      	adds	r3, r0, #0
 80039a8:	1c1a      	adds	r2, r3, #0
 80039aa:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <setPMsen50+0x58>)
 80039ac:	60da      	str	r2, [r3, #12]
#ifdef SSD1306
  if (SSD1306detected) {
    displayPMs();
  }
#endif
}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b002      	add	sp, #8
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	41200000 	.word	0x41200000
 80039bc:	20000a14 	.word	0x20000a14

080039c0 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t voc, uint16_t nox) {
 80039c0:	b5b0      	push	{r4, r5, r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	0005      	movs	r5, r0
 80039c8:	000c      	movs	r4, r1
 80039ca:	0010      	movs	r0, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	1dbb      	adds	r3, r7, #6
 80039d0:	1c2a      	adds	r2, r5, #0
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	1c22      	adds	r2, r4, #0
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	1cbb      	adds	r3, r7, #2
 80039dc:	1c02      	adds	r2, r0, #0
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	003b      	movs	r3, r7
 80039e2:	1c0a      	adds	r2, r1, #0
 80039e4:	801a      	strh	r2, [r3, #0]
//  Debug("SetPMs entered");
  MeasVal.airPM2 = PM2 / 10.0f;
 80039e6:	1dbb      	adds	r3, r7, #6
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7fd fdf0 	bl	80015d0 <__aeabi_i2f>
 80039f0:	1c03      	adds	r3, r0, #0
 80039f2:	4924      	ldr	r1, [pc, #144]	@ (8003a84 <setPMs+0xc4>)
 80039f4:	1c18      	adds	r0, r3, #0
 80039f6:	f7fd f8ed 	bl	8000bd4 <__aeabi_fdiv>
 80039fa:	1c03      	adds	r3, r0, #0
 80039fc:	1c1a      	adds	r2, r3, #0
 80039fe:	4b22      	ldr	r3, [pc, #136]	@ (8003a88 <setPMs+0xc8>)
 8003a00:	609a      	str	r2, [r3, #8]
  MeasVal.airPM10 = PM10 / 10.0f;
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7fd fde2 	bl	80015d0 <__aeabi_i2f>
 8003a0c:	1c03      	adds	r3, r0, #0
 8003a0e:	491d      	ldr	r1, [pc, #116]	@ (8003a84 <setPMs+0xc4>)
 8003a10:	1c18      	adds	r0, r3, #0
 8003a12:	f7fd f8df 	bl	8000bd4 <__aeabi_fdiv>
 8003a16:	1c03      	adds	r3, r0, #0
 8003a18:	1c1a      	adds	r2, r3, #0
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <setPMs+0xc8>)
 8003a1c:	60da      	str	r2, [r3, #12]
  if (!VOCNOx || usbPluggedIn) {
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <setPMs+0xcc>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2201      	movs	r2, #1
 8003a24:	4053      	eors	r3, r2
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <setPMs+0x74>
 8003a2c:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <setPMs+0xd0>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d011      	beq.n	8003a58 <setPMs+0x98>
    MeasVal.VOCIndex = voc / 10.0f;
 8003a34:	1cbb      	adds	r3, r7, #2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fd fdc9 	bl	80015d0 <__aeabi_i2f>
 8003a3e:	1c03      	adds	r3, r0, #0
 8003a40:	4910      	ldr	r1, [pc, #64]	@ (8003a84 <setPMs+0xc4>)
 8003a42:	1c18      	adds	r0, r3, #0
 8003a44:	f7fd f8c6 	bl	8000bd4 <__aeabi_fdiv>
 8003a48:	1c03      	adds	r3, r0, #0
 8003a4a:	1c18      	adds	r0, r3, #0
 8003a4c:	f7fc fde6 	bl	800061c <__aeabi_f2uiz>
 8003a50:	0003      	movs	r3, r0
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <setPMs+0xc8>)
 8003a56:	831a      	strh	r2, [r3, #24]
  }
  MeasVal.airNOx = nox / 10.0f;
 8003a58:	003b      	movs	r3, r7
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f7fd fdb7 	bl	80015d0 <__aeabi_i2f>
 8003a62:	1c03      	adds	r3, r0, #0
 8003a64:	4907      	ldr	r1, [pc, #28]	@ (8003a84 <setPMs+0xc4>)
 8003a66:	1c18      	adds	r0, r3, #0
 8003a68:	f7fd f8b4 	bl	8000bd4 <__aeabi_fdiv>
 8003a6c:	1c03      	adds	r3, r0, #0
 8003a6e:	1c18      	adds	r0, r3, #0
 8003a70:	f7fc fdd4 	bl	800061c <__aeabi_f2uiz>
 8003a74:	0003      	movs	r3, r0
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <setPMs+0xc8>)
 8003a7a:	835a      	strh	r2, [r3, #26]
    }
//    Debug("calling NOx update");
    displayNOx();
  }
#endif
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bdb0      	pop	{r4, r5, r7, pc}
 8003a84:	41200000 	.word	0x41200000
 8003a88:	20000a14 	.word	0x20000a14
 8003a8c:	20001067 	.word	0x20001067
 8003a90:	20002009 	.word	0x20002009

08003a94 <SetConfigMode>:

void SetConfigMode(){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003a98:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <SetConfigMode+0x30>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4053      	eors	r3, r2
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003aa6:	4a08      	ldr	r2, [pc, #32]	@ (8003ac8 <SetConfigMode+0x34>)
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <SetConfigMode+0x38>)
 8003aaa:	0019      	movs	r1, r3
 8003aac:	2003      	movs	r0, #3
 8003aae:	f00a fdb7 	bl	800e620 <CreateLine>
  }
  ReconfigSet = true;
 8003ab2:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <SetConfigMode+0x30>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003ab8:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <SetConfigMode+0x3c>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000553 	.word	0x20000553
 8003ac8:	080232a8 	.word	0x080232a8
 8003acc:	080232c8 	.word	0x080232c8
 8003ad0:	200001f7 	.word	0x200001f7

08003ad4 <GetReconfigMode>:

bool GetReconfigMode() {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003ad8:	4b02      	ldr	r3, [pc, #8]	@ (8003ae4 <GetReconfigMode+0x10>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	20000553 	.word	0x20000553

08003ae8 <ESP_GetUID>:

void ESP_GetUID(){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003aec:	f00b fa22 	bl	800ef34 <HAL_GetUIDw0>
 8003af0:	0002      	movs	r2, r0
 8003af2:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <ESP_GetUID+0x28>)
 8003af4:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003af6:	f00b fa27 	bl	800ef48 <HAL_GetUIDw1>
 8003afa:	0002      	movs	r2, r0
 8003afc:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <ESP_GetUID+0x28>)
 8003afe:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003b00:	f00b fa2c 	bl	800ef5c <HAL_GetUIDw2>
 8003b04:	0002      	movs	r2, r0
 8003b06:	4b02      	ldr	r3, [pc, #8]	@ (8003b10 <ESP_GetUID+0x28>)
 8003b08:	609a      	str	r2, [r3, #8]
}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000055c 	.word	0x2000055c

08003b14 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <ESP_Init+0x2c>)
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <ESP_Init+0x30>)
 8003b24:	2202      	movs	r2, #2
 8003b26:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003b28:	f7ff ffde 	bl	8003ae8 <ESP_GetUID>
  beurs = checkEEprom();
 8003b2c:	f7ff fe76 	bl	800381c <checkEEprom>
 8003b30:	0003      	movs	r3, r0
 8003b32:	001a      	movs	r2, r3
 8003b34:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <ESP_Init+0x34>)
 8003b36:	701a      	strb	r2, [r3, #0]
}
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000448 	.word	0x20000448
 8003b44:	20000030 	.word	0x20000030
 8003b48:	20000556 	.word	0x20000556

08003b4c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003b4c:	b5b0      	push	{r4, r5, r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	000a      	movs	r2, r1
 8003b56:	1cbb      	adds	r3, r7, #2
 8003b58:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003b5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ba0 <ESP_Send+0x54>)
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	250f      	movs	r5, #15
 8003b60:	197c      	adds	r4, r7, r5
 8003b62:	1cbb      	adds	r3, r7, #2
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0019      	movs	r1, r3
 8003b6a:	f013 fcc3 	bl	80174f4 <HAL_UART_Transmit_DMA>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b72:	197b      	adds	r3, r7, r5
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba4 <ESP_Send+0x58>)
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba8 <ESP_Send+0x5c>)
 8003b7e:	0019      	movs	r1, r3
 8003b80:	2001      	movs	r0, #1
 8003b82:	f00a fd4d 	bl	800e620 <CreateLine>
    return false;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e006      	b.n	8003b98 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a07      	ldr	r2, [pc, #28]	@ (8003bac <ESP_Send+0x60>)
 8003b8e:	4908      	ldr	r1, [pc, #32]	@ (8003bb0 <ESP_Send+0x64>)
 8003b90:	2003      	movs	r0, #3
 8003b92:	f00a fd45 	bl	800e620 <CreateLine>
#endif
  return true;
 8003b96:	2301      	movs	r3, #1
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b004      	add	sp, #16
 8003b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba0:	20000448 	.word	0x20000448
 8003ba4:	080232cc 	.word	0x080232cc
 8003ba8:	080232ec 	.word	0x080232ec
 8003bac:	080232f0 	.word	0x080232f0
 8003bb0:	080232c8 	.word	0x080232c8

08003bb4 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	000a      	movs	r2, r1
 8003bbe:	1cbb      	adds	r3, r7, #2
 8003bc0:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003bc2:	4b45      	ldr	r3, [pc, #276]	@ (8003cd8 <ESP_Receive+0x124>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003bc8:	260f      	movs	r6, #15
 8003bca:	19bb      	adds	r3, r7, r6
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003bd0:	4b42      	ldr	r3, [pc, #264]	@ (8003cdc <ESP_Receive+0x128>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	250e      	movs	r5, #14
 8003bd6:	197c      	adds	r4, r7, r5
 8003bd8:	1cbb      	adds	r3, r7, #2
 8003bda:	881a      	ldrh	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	0019      	movs	r1, r3
 8003be0:	f013 fd18 	bl	8017614 <HAL_UART_Receive_DMA>
 8003be4:	0003      	movs	r3, r0
 8003be6:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003be8:	002c      	movs	r4, r5
 8003bea:	193b      	adds	r3, r7, r4
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d100      	bne.n	8003bf4 <ESP_Receive+0x40>
 8003bf2:	e06c      	b.n	8003cce <ESP_Receive+0x11a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003bf4:	4b39      	ldr	r3, [pc, #228]	@ (8003cdc <ESP_Receive+0x128>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2284      	movs	r2, #132	@ 0x84
 8003bfa:	589b      	ldr	r3, [r3, r2]
 8003bfc:	4a38      	ldr	r2, [pc, #224]	@ (8003ce0 <ESP_Receive+0x12c>)
 8003bfe:	4939      	ldr	r1, [pc, #228]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c00:	2001      	movs	r0, #1
 8003c02:	f00a fd0d 	bl	800e620 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003c06:	193b      	adds	r3, r7, r4
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d008      	beq.n	8003c22 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003c10:	4a35      	ldr	r2, [pc, #212]	@ (8003ce8 <ESP_Receive+0x134>)
 8003c12:	4b34      	ldr	r3, [pc, #208]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c14:	0019      	movs	r1, r3
 8003c16:	2001      	movs	r0, #1
 8003c18:	f00a fd02 	bl	800e620 <CreateLine>
      reset = true;
 8003c1c:	19bb      	adds	r3, r7, r6
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003c22:	230e      	movs	r3, #14
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d005      	beq.n	8003c3a <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003cec <ESP_Receive+0x138>)
 8003c30:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c32:	0019      	movs	r1, r3
 8003c34:	2001      	movs	r0, #1
 8003c36:	f00a fcf3 	bl	800e620 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003c3a:	230e      	movs	r3, #14
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2204      	movs	r2, #4
 8003c42:	4013      	ands	r3, r2
 8003c44:	d005      	beq.n	8003c52 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003c46:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf0 <ESP_Receive+0x13c>)
 8003c48:	4b26      	ldr	r3, [pc, #152]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f00a fce7 	bl	800e620 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003c52:	230e      	movs	r3, #14
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d005      	beq.n	8003c6a <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003c5e:	4a25      	ldr	r2, [pc, #148]	@ (8003cf4 <ESP_Receive+0x140>)
 8003c60:	4b20      	ldr	r3, [pc, #128]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c62:	0019      	movs	r1, r3
 8003c64:	2001      	movs	r0, #1
 8003c66:	f00a fcdb 	bl	800e620 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003c6a:	230e      	movs	r3, #14
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2210      	movs	r2, #16
 8003c72:	4013      	ands	r3, r2
 8003c74:	d005      	beq.n	8003c82 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003c76:	4a20      	ldr	r2, [pc, #128]	@ (8003cf8 <ESP_Receive+0x144>)
 8003c78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f00a fccf 	bl	800e620 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003c82:	230e      	movs	r3, #14
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d005      	beq.n	8003c9a <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cfc <ESP_Receive+0x148>)
 8003c90:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c92:	0019      	movs	r1, r3
 8003c94:	2001      	movs	r0, #1
 8003c96:	f00a fcc3 	bl	800e620 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003c9a:	230e      	movs	r3, #14
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2240      	movs	r2, #64	@ 0x40
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d005      	beq.n	8003cb2 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003ca6:	4a16      	ldr	r2, [pc, #88]	@ (8003d00 <ESP_Receive+0x14c>)
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce4 <ESP_Receive+0x130>)
 8003caa:	0019      	movs	r1, r3
 8003cac:	2001      	movs	r0, #1
 8003cae:	f00a fcb7 	bl	800e620 <CreateLine>
    }
#endif
    if (reset) {
 8003cb2:	230f      	movs	r3, #15
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <ESP_Receive+0x110>
      SetAllREDLED();
 8003cbc:	f009 fc54 	bl	800d568 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003cc0:	f00b fdb7 	bl	800f832 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003cc4:	4b04      	ldr	r3, [pc, #16]	@ (8003cd8 <ESP_Receive+0x124>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
    return false;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <ESP_Receive+0x11c>
  }
  return true;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b005      	add	sp, #20
 8003cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd8:	2000044c 	.word	0x2000044c
 8003cdc:	20000448 	.word	0x20000448
 8003ce0:	08023300 	.word	0x08023300
 8003ce4:	080232ec 	.word	0x080232ec
 8003ce8:	08023330 	.word	0x08023330
 8003cec:	08023354 	.word	0x08023354
 8003cf0:	08023378 	.word	0x08023378
 8003cf4:	0802339c 	.word	0x0802339c
 8003cf8:	080233c0 	.word	0x080233c0
 8003cfc:	080233ec 	.word	0x080233ec
 8003d00:	0802341c 	.word	0x0802341c

08003d04 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <HAL_UART_ErrorCallback+0x34>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d10c      	bne.n	8003d30 <HAL_UART_ErrorCallback+0x2c>
    if (huart->ErrorCode != 4) {
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2284      	movs	r2, #132	@ 0x84
 8003d1a:	589b      	ldr	r3, [r3, r2]
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d007      	beq.n	8003d30 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2284      	movs	r2, #132	@ 0x84
 8003d24:	589b      	ldr	r3, [r3, r2]
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <HAL_UART_ErrorCallback+0x38>)
 8003d28:	4905      	ldr	r1, [pc, #20]	@ (8003d40 <HAL_UART_ErrorCallback+0x3c>)
 8003d2a:	2003      	movs	r0, #3
 8003d2c:	f00a fc78 	bl	800e620 <CreateLine>
    }
  }
}
 8003d30:	46c0      	nop			@ (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000448 	.word	0x20000448
 8003d3c:	0802344c 	.word	0x0802344c
 8003d40:	080232c8 	.word	0x080232c8

08003d44 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e010      	b.n	8003d76 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	001a      	movs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	1898      	adds	r0, r3, r2
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	001a      	movs	r2, r3
 8003d68:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <uint8ArrayToString+0x44>)
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	f01c f9ac 	bl	80200c8 <siprintf>
  for (int i = 0; i < 12; i++)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b0b      	cmp	r3, #11
 8003d7a:	ddeb      	ble.n	8003d54 <uint8ArrayToString+0x10>
  }
}
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b004      	add	sp, #16
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	08023478 	.word	0x08023478

08003d8c <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d8e:	b089      	sub	sp, #36	@ 0x24
 8003d90:	af04      	add	r7, sp, #16
 8003d92:	0002      	movs	r2, r0
 8003d94:	1dfb      	adds	r3, r7, #7
 8003d96:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d98:	4bd4      	ldr	r3, [pc, #848]	@ (80040ec <CreateMessage+0x360>)
 8003d9a:	48d5      	ldr	r0, [pc, #852]	@ (80040f0 <CreateMessage+0x364>)
 8003d9c:	220c      	movs	r2, #12
 8003d9e:	0019      	movs	r1, r3
 8003da0:	f7ff fcaa 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003da4:	4bd3      	ldr	r3, [pc, #844]	@ (80040f4 <CreateMessage+0x368>)
 8003da6:	48d4      	ldr	r0, [pc, #848]	@ (80040f8 <CreateMessage+0x36c>)
 8003da8:	220c      	movs	r2, #12
 8003daa:	0019      	movs	r1, r3
 8003dac:	f7ff fca4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003db0:	4bd2      	ldr	r3, [pc, #840]	@ (80040fc <CreateMessage+0x370>)
 8003db2:	48d3      	ldr	r0, [pc, #844]	@ (8004100 <CreateMessage+0x374>)
 8003db4:	220c      	movs	r2, #12
 8003db6:	0019      	movs	r1, r3
 8003db8:	f7ff fc9e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003dbc:	4bd1      	ldr	r3, [pc, #836]	@ (8004104 <CreateMessage+0x378>)
 8003dbe:	48d2      	ldr	r0, [pc, #840]	@ (8004108 <CreateMessage+0x37c>)
 8003dc0:	220c      	movs	r2, #12
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	f7ff fc98 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003dc8:	4bd0      	ldr	r3, [pc, #832]	@ (800410c <CreateMessage+0x380>)
 8003dca:	48d1      	ldr	r0, [pc, #836]	@ (8004110 <CreateMessage+0x384>)
 8003dcc:	220c      	movs	r2, #12
 8003dce:	0019      	movs	r1, r3
 8003dd0:	f7ff fc92 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003dd4:	4bcf      	ldr	r3, [pc, #828]	@ (8004114 <CreateMessage+0x388>)
 8003dd6:	48d0      	ldr	r0, [pc, #832]	@ (8004118 <CreateMessage+0x38c>)
 8003dd8:	220c      	movs	r2, #12
 8003dda:	0019      	movs	r1, r3
 8003ddc:	f7ff fc8c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003de0:	4bce      	ldr	r3, [pc, #824]	@ (800411c <CreateMessage+0x390>)
 8003de2:	48cf      	ldr	r0, [pc, #828]	@ (8004120 <CreateMessage+0x394>)
 8003de4:	220c      	movs	r2, #12
 8003de6:	0019      	movs	r1, r3
 8003de8:	f7ff fc86 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003dec:	4bcd      	ldr	r3, [pc, #820]	@ (8004124 <CreateMessage+0x398>)
 8003dee:	48ce      	ldr	r0, [pc, #824]	@ (8004128 <CreateMessage+0x39c>)
 8003df0:	220c      	movs	r2, #12
 8003df2:	0019      	movs	r1, r3
 8003df4:	f7ff fc80 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003df8:	4bcc      	ldr	r3, [pc, #816]	@ (800412c <CreateMessage+0x3a0>)
 8003dfa:	48cd      	ldr	r0, [pc, #820]	@ (8004130 <CreateMessage+0x3a4>)
 8003dfc:	220c      	movs	r2, #12
 8003dfe:	0019      	movs	r1, r3
 8003e00:	f7ff fc7a 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003e04:	f7ff fd40 	bl	8003888 <checkName>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d006      	beq.n	8003e1a <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003e0c:	4bc9      	ldr	r3, [pc, #804]	@ (8004134 <CreateMessage+0x3a8>)
 8003e0e:	48ca      	ldr	r0, [pc, #808]	@ (8004138 <CreateMessage+0x3ac>)
 8003e10:	221e      	movs	r2, #30
 8003e12:	0019      	movs	r1, r3
 8003e14:	f7ff fc70 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003e18:	e005      	b.n	8003e26 <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e1a:	4bc6      	ldr	r3, [pc, #792]	@ (8004134 <CreateMessage+0x3a8>)
 8003e1c:	4ac7      	ldr	r2, [pc, #796]	@ (800413c <CreateMessage+0x3b0>)
 8003e1e:	6811      	ldr	r1, [r2, #0]
 8003e20:	6019      	str	r1, [r3, #0]
 8003e22:	7912      	ldrb	r2, [r2, #4]
 8003e24:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e26:	f7ff fcd5 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003e2a:	2390      	movs	r3, #144	@ 0x90
 8003e2c:	00da      	lsls	r2, r3, #3
 8003e2e:	4bc4      	ldr	r3, [pc, #784]	@ (8004140 <CreateMessage+0x3b4>)
 8003e30:	2100      	movs	r1, #0
 8003e32:	0018      	movs	r0, r3
 8003e34:	f01c fa8c 	bl	8020350 <memset>
  uint16_t index = 0;
 8003e38:	260e      	movs	r6, #14
 8003e3a:	19bb      	adds	r3, r7, r6
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e40:	19bb      	adds	r3, r7, r6
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	4bbe      	ldr	r3, [pc, #760]	@ (8004140 <CreateMessage+0x3b4>)
 8003e46:	18d3      	adds	r3, r2, r3
 8003e48:	4abe      	ldr	r2, [pc, #760]	@ (8004144 <CreateMessage+0x3b8>)
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f01c f93b 	bl	80200c8 <siprintf>
  index = strlen(message);
 8003e52:	4bbb      	ldr	r3, [pc, #748]	@ (8004140 <CreateMessage+0x3b4>)
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7fc f989 	bl	800016c <strlen>
 8003e5a:	0002      	movs	r2, r0
 8003e5c:	19bb      	adds	r3, r7, r6
 8003e5e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003e60:	4aa2      	ldr	r2, [pc, #648]	@ (80040ec <CreateMessage+0x360>)
 8003e62:	4bb9      	ldr	r3, [pc, #740]	@ (8004148 <CreateMessage+0x3bc>)
 8003e64:	0011      	movs	r1, r2
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7ff ff6c 	bl	8003d44 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e6c:	19bb      	adds	r3, r7, r6
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	4bb3      	ldr	r3, [pc, #716]	@ (8004140 <CreateMessage+0x3b4>)
 8003e72:	18d4      	adds	r4, r2, r3
 8003e74:	4bb5      	ldr	r3, [pc, #724]	@ (800414c <CreateMessage+0x3c0>)
 8003e76:	689d      	ldr	r5, [r3, #8]
 8003e78:	4bb5      	ldr	r3, [pc, #724]	@ (8004150 <CreateMessage+0x3c4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	1c18      	adds	r0, r3, #0
 8003e7e:	f7ff faf1 	bl	8003464 <__aeabi_f2d>
 8003e82:	0002      	movs	r2, r0
 8003e84:	000b      	movs	r3, r1
 8003e86:	48ab      	ldr	r0, [pc, #684]	@ (8004134 <CreateMessage+0x3a8>)
 8003e88:	49b2      	ldr	r1, [pc, #712]	@ (8004154 <CreateMessage+0x3c8>)
 8003e8a:	9202      	str	r2, [sp, #8]
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	4bae      	ldr	r3, [pc, #696]	@ (8004148 <CreateMessage+0x3bc>)
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	0003      	movs	r3, r0
 8003e94:	002a      	movs	r2, r5
 8003e96:	0020      	movs	r0, r4
 8003e98:	f01c f916 	bl	80200c8 <siprintf>
  index = strlen(message);
 8003e9c:	4ba8      	ldr	r3, [pc, #672]	@ (8004140 <CreateMessage+0x3b4>)
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fc f964 	bl	800016c <strlen>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	19bb      	adds	r3, r7, r6
 8003ea8:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003eaa:	4a92      	ldr	r2, [pc, #584]	@ (80040f4 <CreateMessage+0x368>)
 8003eac:	4ba6      	ldr	r3, [pc, #664]	@ (8004148 <CreateMessage+0x3bc>)
 8003eae:	0011      	movs	r1, r2
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff ff47 	bl	8003d44 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003eb6:	19bb      	adds	r3, r7, r6
 8003eb8:	881a      	ldrh	r2, [r3, #0]
 8003eba:	4ba1      	ldr	r3, [pc, #644]	@ (8004140 <CreateMessage+0x3b4>)
 8003ebc:	18d4      	adds	r4, r2, r3
 8003ebe:	4ba3      	ldr	r3, [pc, #652]	@ (800414c <CreateMessage+0x3c0>)
 8003ec0:	689d      	ldr	r5, [r3, #8]
 8003ec2:	4ba3      	ldr	r3, [pc, #652]	@ (8004150 <CreateMessage+0x3c4>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	1c18      	adds	r0, r3, #0
 8003ec8:	f7ff facc 	bl	8003464 <__aeabi_f2d>
 8003ecc:	0002      	movs	r2, r0
 8003ece:	000b      	movs	r3, r1
 8003ed0:	4898      	ldr	r0, [pc, #608]	@ (8004134 <CreateMessage+0x3a8>)
 8003ed2:	49a1      	ldr	r1, [pc, #644]	@ (8004158 <CreateMessage+0x3cc>)
 8003ed4:	9202      	str	r2, [sp, #8]
 8003ed6:	9303      	str	r3, [sp, #12]
 8003ed8:	4b9b      	ldr	r3, [pc, #620]	@ (8004148 <CreateMessage+0x3bc>)
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	0003      	movs	r3, r0
 8003ede:	002a      	movs	r2, r5
 8003ee0:	0020      	movs	r0, r4
 8003ee2:	f01c f8f1 	bl	80200c8 <siprintf>
  index = strlen(message);
 8003ee6:	4b96      	ldr	r3, [pc, #600]	@ (8004140 <CreateMessage+0x3b4>)
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fc f93f 	bl	800016c <strlen>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	19bb      	adds	r3, r7, r6
 8003ef2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003ef4:	4a81      	ldr	r2, [pc, #516]	@ (80040fc <CreateMessage+0x370>)
 8003ef6:	4b94      	ldr	r3, [pc, #592]	@ (8004148 <CreateMessage+0x3bc>)
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff ff22 	bl	8003d44 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8003f00:	19bb      	adds	r3, r7, r6
 8003f02:	881a      	ldrh	r2, [r3, #0]
 8003f04:	4b8e      	ldr	r3, [pc, #568]	@ (8004140 <CreateMessage+0x3b4>)
 8003f06:	18d4      	adds	r4, r2, r3
 8003f08:	4b90      	ldr	r3, [pc, #576]	@ (800414c <CreateMessage+0x3c0>)
 8003f0a:	689d      	ldr	r5, [r3, #8]
 8003f0c:	4b90      	ldr	r3, [pc, #576]	@ (8004150 <CreateMessage+0x3c4>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	1c18      	adds	r0, r3, #0
 8003f12:	f7ff faa7 	bl	8003464 <__aeabi_f2d>
 8003f16:	0002      	movs	r2, r0
 8003f18:	000b      	movs	r3, r1
 8003f1a:	4886      	ldr	r0, [pc, #536]	@ (8004134 <CreateMessage+0x3a8>)
 8003f1c:	498f      	ldr	r1, [pc, #572]	@ (800415c <CreateMessage+0x3d0>)
 8003f1e:	9202      	str	r2, [sp, #8]
 8003f20:	9303      	str	r3, [sp, #12]
 8003f22:	4b89      	ldr	r3, [pc, #548]	@ (8004148 <CreateMessage+0x3bc>)
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	0003      	movs	r3, r0
 8003f28:	002a      	movs	r2, r5
 8003f2a:	0020      	movs	r0, r4
 8003f2c:	f01c f8cc 	bl	80200c8 <siprintf>
  index = strlen(message);
 8003f30:	4b83      	ldr	r3, [pc, #524]	@ (8004140 <CreateMessage+0x3b4>)
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7fc f91a 	bl	800016c <strlen>
 8003f38:	0002      	movs	r2, r0
 8003f3a:	19bb      	adds	r3, r7, r6
 8003f3c:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003f3e:	4a71      	ldr	r2, [pc, #452]	@ (8004104 <CreateMessage+0x378>)
 8003f40:	4b81      	ldr	r3, [pc, #516]	@ (8004148 <CreateMessage+0x3bc>)
 8003f42:	0011      	movs	r1, r2
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff fefd 	bl	8003d44 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 8003f4a:	19bb      	adds	r3, r7, r6
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004140 <CreateMessage+0x3b4>)
 8003f50:	18d0      	adds	r0, r2, r3
 8003f52:	4b7e      	ldr	r3, [pc, #504]	@ (800414c <CreateMessage+0x3c0>)
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	4b7e      	ldr	r3, [pc, #504]	@ (8004150 <CreateMessage+0x3c4>)
 8003f58:	8b1b      	ldrh	r3, [r3, #24]
 8003f5a:	4c76      	ldr	r4, [pc, #472]	@ (8004134 <CreateMessage+0x3a8>)
 8003f5c:	4980      	ldr	r1, [pc, #512]	@ (8004160 <CreateMessage+0x3d4>)
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	4b79      	ldr	r3, [pc, #484]	@ (8004148 <CreateMessage+0x3bc>)
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	0023      	movs	r3, r4
 8003f66:	f01c f8af 	bl	80200c8 <siprintf>
  index = strlen(message);
 8003f6a:	4b75      	ldr	r3, [pc, #468]	@ (8004140 <CreateMessage+0x3b4>)
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7fc f8fd 	bl	800016c <strlen>
 8003f72:	0002      	movs	r2, r0
 8003f74:	19bb      	adds	r3, r7, r6
 8003f76:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003f78:	1dfb      	adds	r3, r7, #7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4053      	eors	r3, r2
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d100      	bne.n	8003f88 <CreateMessage+0x1fc>
 8003f86:	e0fb      	b.n	8004180 <CreateMessage+0x3f4>
    uint8ArrayToString(Buffer, batteryConfig);
 8003f88:	4a60      	ldr	r2, [pc, #384]	@ (800410c <CreateMessage+0x380>)
 8003f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8004148 <CreateMessage+0x3bc>)
 8003f8c:	0011      	movs	r1, r2
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7ff fed8 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f94:	19bb      	adds	r3, r7, r6
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	4b69      	ldr	r3, [pc, #420]	@ (8004140 <CreateMessage+0x3b4>)
 8003f9a:	18d4      	adds	r4, r2, r3
 8003f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800414c <CreateMessage+0x3c0>)
 8003f9e:	689d      	ldr	r5, [r3, #8]
 8003fa0:	4b70      	ldr	r3, [pc, #448]	@ (8004164 <CreateMessage+0x3d8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	1c18      	adds	r0, r3, #0
 8003fa6:	f7ff fa5d 	bl	8003464 <__aeabi_f2d>
 8003faa:	0002      	movs	r2, r0
 8003fac:	000b      	movs	r3, r1
 8003fae:	4861      	ldr	r0, [pc, #388]	@ (8004134 <CreateMessage+0x3a8>)
 8003fb0:	496d      	ldr	r1, [pc, #436]	@ (8004168 <CreateMessage+0x3dc>)
 8003fb2:	9202      	str	r2, [sp, #8]
 8003fb4:	9303      	str	r3, [sp, #12]
 8003fb6:	4b64      	ldr	r3, [pc, #400]	@ (8004148 <CreateMessage+0x3bc>)
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	0003      	movs	r3, r0
 8003fbc:	002a      	movs	r2, r5
 8003fbe:	0020      	movs	r0, r4
 8003fc0:	f01c f882 	bl	80200c8 <siprintf>
    index = strlen(message);
 8003fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8004140 <CreateMessage+0x3b4>)
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fc f8d0 	bl	800016c <strlen>
 8003fcc:	0002      	movs	r2, r0
 8003fce:	19bb      	adds	r3, r7, r6
 8003fd0:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003fd2:	4a50      	ldr	r2, [pc, #320]	@ (8004114 <CreateMessage+0x388>)
 8003fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8004148 <CreateMessage+0x3bc>)
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff feb3 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003fde:	19bb      	adds	r3, r7, r6
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	4b57      	ldr	r3, [pc, #348]	@ (8004140 <CreateMessage+0x3b4>)
 8003fe4:	18d4      	adds	r4, r2, r3
 8003fe6:	4b59      	ldr	r3, [pc, #356]	@ (800414c <CreateMessage+0x3c0>)
 8003fe8:	689d      	ldr	r5, [r3, #8]
 8003fea:	4b60      	ldr	r3, [pc, #384]	@ (800416c <CreateMessage+0x3e0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	1c18      	adds	r0, r3, #0
 8003ff0:	f7ff fa38 	bl	8003464 <__aeabi_f2d>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	000b      	movs	r3, r1
 8003ff8:	484e      	ldr	r0, [pc, #312]	@ (8004134 <CreateMessage+0x3a8>)
 8003ffa:	495d      	ldr	r1, [pc, #372]	@ (8004170 <CreateMessage+0x3e4>)
 8003ffc:	9202      	str	r2, [sp, #8]
 8003ffe:	9303      	str	r3, [sp, #12]
 8004000:	4b51      	ldr	r3, [pc, #324]	@ (8004148 <CreateMessage+0x3bc>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	0003      	movs	r3, r0
 8004006:	002a      	movs	r2, r5
 8004008:	0020      	movs	r0, r4
 800400a:	f01c f85d 	bl	80200c8 <siprintf>
    index = strlen(message);
 800400e:	4b4c      	ldr	r3, [pc, #304]	@ (8004140 <CreateMessage+0x3b4>)
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc f8ab 	bl	800016c <strlen>
 8004016:	0002      	movs	r2, r0
 8004018:	19bb      	adds	r3, r7, r6
 800401a:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 800401c:	4a3f      	ldr	r2, [pc, #252]	@ (800411c <CreateMessage+0x390>)
 800401e:	4b4a      	ldr	r3, [pc, #296]	@ (8004148 <CreateMessage+0x3bc>)
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff fe8e 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOx);
 8004028:	19bb      	adds	r3, r7, r6
 800402a:	881a      	ldrh	r2, [r3, #0]
 800402c:	4b44      	ldr	r3, [pc, #272]	@ (8004140 <CreateMessage+0x3b4>)
 800402e:	18d0      	adds	r0, r2, r3
 8004030:	4b46      	ldr	r3, [pc, #280]	@ (800414c <CreateMessage+0x3c0>)
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	4b46      	ldr	r3, [pc, #280]	@ (8004150 <CreateMessage+0x3c4>)
 8004036:	8b5b      	ldrh	r3, [r3, #26]
 8004038:	4c3e      	ldr	r4, [pc, #248]	@ (8004134 <CreateMessage+0x3a8>)
 800403a:	494e      	ldr	r1, [pc, #312]	@ (8004174 <CreateMessage+0x3e8>)
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	4b42      	ldr	r3, [pc, #264]	@ (8004148 <CreateMessage+0x3bc>)
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	0023      	movs	r3, r4
 8004044:	f01c f840 	bl	80200c8 <siprintf>
    index = strlen(message);
 8004048:	4b3d      	ldr	r3, [pc, #244]	@ (8004140 <CreateMessage+0x3b4>)
 800404a:	0018      	movs	r0, r3
 800404c:	f7fc f88e 	bl	800016c <strlen>
 8004050:	0002      	movs	r2, r0
 8004052:	19bb      	adds	r3, r7, r6
 8004054:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8004056:	4a33      	ldr	r2, [pc, #204]	@ (8004124 <CreateMessage+0x398>)
 8004058:	4b3b      	ldr	r3, [pc, #236]	@ (8004148 <CreateMessage+0x3bc>)
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fe71 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.airPM2);
 8004062:	19bb      	adds	r3, r7, r6
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	4b36      	ldr	r3, [pc, #216]	@ (8004140 <CreateMessage+0x3b4>)
 8004068:	18d4      	adds	r4, r2, r3
 800406a:	4b38      	ldr	r3, [pc, #224]	@ (800414c <CreateMessage+0x3c0>)
 800406c:	689d      	ldr	r5, [r3, #8]
 800406e:	4b38      	ldr	r3, [pc, #224]	@ (8004150 <CreateMessage+0x3c4>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	1c18      	adds	r0, r3, #0
 8004074:	f7ff f9f6 	bl	8003464 <__aeabi_f2d>
 8004078:	0002      	movs	r2, r0
 800407a:	000b      	movs	r3, r1
 800407c:	482d      	ldr	r0, [pc, #180]	@ (8004134 <CreateMessage+0x3a8>)
 800407e:	493e      	ldr	r1, [pc, #248]	@ (8004178 <CreateMessage+0x3ec>)
 8004080:	9202      	str	r2, [sp, #8]
 8004082:	9303      	str	r3, [sp, #12]
 8004084:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <CreateMessage+0x3bc>)
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	0003      	movs	r3, r0
 800408a:	002a      	movs	r2, r5
 800408c:	0020      	movs	r0, r4
 800408e:	f01c f81b 	bl	80200c8 <siprintf>
    index = strlen(message);
 8004092:	4b2b      	ldr	r3, [pc, #172]	@ (8004140 <CreateMessage+0x3b4>)
 8004094:	0018      	movs	r0, r3
 8004096:	f7fc f869 	bl	800016c <strlen>
 800409a:	0002      	movs	r2, r0
 800409c:	19bb      	adds	r3, r7, r6
 800409e:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 80040a0:	4a22      	ldr	r2, [pc, #136]	@ (800412c <CreateMessage+0x3a0>)
 80040a2:	4b29      	ldr	r3, [pc, #164]	@ (8004148 <CreateMessage+0x3bc>)
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f7ff fe4c 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airPM10);
 80040ac:	19bb      	adds	r3, r7, r6
 80040ae:	881a      	ldrh	r2, [r3, #0]
 80040b0:	4b23      	ldr	r3, [pc, #140]	@ (8004140 <CreateMessage+0x3b4>)
 80040b2:	18d4      	adds	r4, r2, r3
 80040b4:	4b25      	ldr	r3, [pc, #148]	@ (800414c <CreateMessage+0x3c0>)
 80040b6:	689d      	ldr	r5, [r3, #8]
 80040b8:	4b25      	ldr	r3, [pc, #148]	@ (8004150 <CreateMessage+0x3c4>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	1c18      	adds	r0, r3, #0
 80040be:	f7ff f9d1 	bl	8003464 <__aeabi_f2d>
 80040c2:	0002      	movs	r2, r0
 80040c4:	000b      	movs	r3, r1
 80040c6:	481b      	ldr	r0, [pc, #108]	@ (8004134 <CreateMessage+0x3a8>)
 80040c8:	492c      	ldr	r1, [pc, #176]	@ (800417c <CreateMessage+0x3f0>)
 80040ca:	9202      	str	r2, [sp, #8]
 80040cc:	9303      	str	r3, [sp, #12]
 80040ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <CreateMessage+0x3bc>)
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	0003      	movs	r3, r0
 80040d4:	002a      	movs	r2, r5
 80040d6:	0020      	movs	r0, r4
 80040d8:	f01b fff6 	bl	80200c8 <siprintf>
    index = strlen(message);
 80040dc:	4b18      	ldr	r3, [pc, #96]	@ (8004140 <CreateMessage+0x3b4>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f7fc f844 	bl	800016c <strlen>
 80040e4:	0002      	movs	r2, r0
 80040e6:	19bb      	adds	r3, r7, r6
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	e06f      	b.n	80041cc <CreateMessage+0x440>
 80040ec:	20000a78 	.word	0x20000a78
 80040f0:	0808000c 	.word	0x0808000c
 80040f4:	20000a84 	.word	0x20000a84
 80040f8:	08080018 	.word	0x08080018
 80040fc:	20000a90 	.word	0x20000a90
 8004100:	08080048 	.word	0x08080048
 8004104:	20000a9c 	.word	0x20000a9c
 8004108:	08080030 	.word	0x08080030
 800410c:	20000aa8 	.word	0x20000aa8
 8004110:	0808006c 	.word	0x0808006c
 8004114:	20000ab4 	.word	0x20000ab4
 8004118:	08080078 	.word	0x08080078
 800411c:	20000ac0 	.word	0x20000ac0
 8004120:	08080024 	.word	0x08080024
 8004124:	20000acc 	.word	0x20000acc
 8004128:	08080054 	.word	0x08080054
 800412c:	20000ad8 	.word	0x20000ad8
 8004130:	08080060 	.word	0x08080060
 8004134:	20000ae4 	.word	0x20000ae4
 8004138:	08080090 	.word	0x08080090
 800413c:	08025480 	.word	0x08025480
 8004140:	20000578 	.word	0x20000578
 8004144:	08023480 	.word	0x08023480
 8004148:	20000b04 	.word	0x20000b04
 800414c:	2000055c 	.word	0x2000055c
 8004150:	20000a14 	.word	0x20000a14
 8004154:	08023484 	.word	0x08023484
 8004158:	080234d8 	.word	0x080234d8
 800415c:	08023530 	.word	0x08023530
 8004160:	0802358c 	.word	0x0802358c
 8004164:	20000570 	.word	0x20000570
 8004168:	080235e0 	.word	0x080235e0
 800416c:	20000574 	.word	0x20000574
 8004170:	08023640 	.word	0x08023640
 8004174:	080236a0 	.word	0x080236a0
 8004178:	080236f4 	.word	0x080236f4
 800417c:	08023750 	.word	0x08023750

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8004180:	4a21      	ldr	r2, [pc, #132]	@ (8004208 <CreateMessage+0x47c>)
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <CreateMessage+0x480>)
 8004184:	0011      	movs	r1, r2
 8004186:	0018      	movs	r0, r3
 8004188:	f7ff fddc 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 800418c:	260e      	movs	r6, #14
 800418e:	19bb      	adds	r3, r7, r6
 8004190:	881a      	ldrh	r2, [r3, #0]
 8004192:	4b1f      	ldr	r3, [pc, #124]	@ (8004210 <CreateMessage+0x484>)
 8004194:	18d4      	adds	r4, r2, r3
 8004196:	4b1f      	ldr	r3, [pc, #124]	@ (8004214 <CreateMessage+0x488>)
 8004198:	689d      	ldr	r5, [r3, #8]
 800419a:	4b1f      	ldr	r3, [pc, #124]	@ (8004218 <CreateMessage+0x48c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	1c18      	adds	r0, r3, #0
 80041a0:	f7ff f960 	bl	8003464 <__aeabi_f2d>
 80041a4:	0002      	movs	r2, r0
 80041a6:	000b      	movs	r3, r1
 80041a8:	481c      	ldr	r0, [pc, #112]	@ (800421c <CreateMessage+0x490>)
 80041aa:	491d      	ldr	r1, [pc, #116]	@ (8004220 <CreateMessage+0x494>)
 80041ac:	9202      	str	r2, [sp, #8]
 80041ae:	9303      	str	r3, [sp, #12]
 80041b0:	4b16      	ldr	r3, [pc, #88]	@ (800420c <CreateMessage+0x480>)
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	0003      	movs	r3, r0
 80041b6:	002a      	movs	r2, r5
 80041b8:	0020      	movs	r0, r4
 80041ba:	f01b ff85 	bl	80200c8 <siprintf>
    index = strlen(message);
 80041be:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <CreateMessage+0x484>)
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fb ffd3 	bl	800016c <strlen>
 80041c6:	0002      	movs	r2, r0
 80041c8:	19bb      	adds	r3, r7, r6
 80041ca:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  sprintf(&message[index], "]");
 80041cc:	230e      	movs	r3, #14
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	881a      	ldrh	r2, [r3, #0]
 80041d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004210 <CreateMessage+0x484>)
 80041d4:	18d3      	adds	r3, r2, r3
 80041d6:	4a13      	ldr	r2, [pc, #76]	@ (8004224 <CreateMessage+0x498>)
 80041d8:	0011      	movs	r1, r2
 80041da:	0018      	movs	r0, r3
 80041dc:	f01b ff74 	bl	80200c8 <siprintf>
  Debug("Length of datagram: %d", strlen(message));
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <CreateMessage+0x484>)
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7fb ffc2 	bl	800016c <strlen>
 80041e8:	0003      	movs	r3, r0
 80041ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004228 <CreateMessage+0x49c>)
 80041ec:	490f      	ldr	r1, [pc, #60]	@ (800422c <CreateMessage+0x4a0>)
 80041ee:	2003      	movs	r0, #3
 80041f0:	f00a fa16 	bl	800e620 <CreateLine>
  return strlen(message);
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <CreateMessage+0x484>)
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7fb ffb8 	bl	800016c <strlen>
 80041fc:	0003      	movs	r3, r0
 80041fe:	b29b      	uxth	r3, r3
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b005      	add	sp, #20
 8004206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004208:	20000aa8 	.word	0x20000aa8
 800420c:	20000b04 	.word	0x20000b04
 8004210:	20000578 	.word	0x20000578
 8004214:	2000055c 	.word	0x2000055c
 8004218:	20000570 	.word	0x20000570
 800421c:	20000ae4 	.word	0x20000ae4
 8004220:	080237a8 	.word	0x080237a8
 8004224:	08023800 	.word	0x08023800
 8004228:	08023804 	.word	0x08023804
 800422c:	080232c8 	.word	0x080232c8

08004230 <StartProg>:

void StartProg(){
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8004234:	2064      	movs	r0, #100	@ 0x64
 8004236:	f00a fe3d 	bl	800eeb4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800423a:	4b15      	ldr	r3, [pc, #84]	@ (8004290 <StartProg+0x60>)
 800423c:	2200      	movs	r2, #0
 800423e:	2101      	movs	r1, #1
 8004240:	0018      	movs	r0, r3
 8004242:	f00c f8be 	bl	80103c2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004246:	2064      	movs	r0, #100	@ 0x64
 8004248:	f00a fe34 	bl	800eeb4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800424c:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <StartProg+0x60>)
 800424e:	2200      	movs	r2, #0
 8004250:	2102      	movs	r1, #2
 8004252:	0018      	movs	r0, r3
 8004254:	f00c f8b5 	bl	80103c2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004258:	23fa      	movs	r3, #250	@ 0xfa
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	0018      	movs	r0, r3
 800425e:	f00a fe29 	bl	800eeb4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004262:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <StartProg+0x60>)
 8004264:	2201      	movs	r2, #1
 8004266:	2101      	movs	r1, #1
 8004268:	0018      	movs	r0, r3
 800426a:	f00c f8aa 	bl	80103c2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800426e:	23fa      	movs	r3, #250	@ 0xfa
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	0018      	movs	r0, r3
 8004274:	f00a fe1e 	bl	800eeb4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004278:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <StartProg+0x60>)
 800427a:	2201      	movs	r2, #1
 800427c:	2102      	movs	r1, #2
 800427e:	0018      	movs	r0, r3
 8004280:	f00c f89f 	bl	80103c2 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004284:	2028      	movs	r0, #40	@ 0x28
 8004286:	f00a fe15 	bl	800eeb4 <HAL_Delay>
}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	50001c00 	.word	0x50001c00

08004294 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004296:	b0d9      	sub	sp, #356	@ 0x164
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	0008      	movs	r0, r1
 800429e:	0011      	movs	r1, r2
 80042a0:	4ba4      	ldr	r3, [pc, #656]	@ (8004534 <ParseBuffer+0x2a0>)
 80042a2:	24b0      	movs	r4, #176	@ 0xb0
 80042a4:	0064      	lsls	r4, r4, #1
 80042a6:	191b      	adds	r3, r3, r4
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	1c02      	adds	r2, r0, #0
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	4ba2      	ldr	r3, [pc, #648]	@ (8004538 <ParseBuffer+0x2a4>)
 80042b0:	191b      	adds	r3, r3, r4
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	1c0a      	adds	r2, r1, #0
 80042b6:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 80042b8:	2380      	movs	r3, #128	@ 0x80
 80042ba:	005a      	lsls	r2, r3, #1
 80042bc:	2348      	movs	r3, #72	@ 0x48
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2100      	movs	r1, #0
 80042c2:	0018      	movs	r0, r3
 80042c4:	f01c f844 	bl	8020350 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80042c8:	2360      	movs	r3, #96	@ 0x60
 80042ca:	33ff      	adds	r3, #255	@ 0xff
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	2203      	movs	r2, #3
 80042d0:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80042d2:	23ae      	movs	r3, #174	@ 0xae
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2200      	movs	r2, #0
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	e013      	b.n	8004306 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80042de:	20ae      	movs	r0, #174	@ 0xae
 80042e0:	0040      	lsls	r0, r0, #1
 80042e2:	183b      	adds	r3, r7, r0
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	18d2      	adds	r2, r2, r3
 80042ea:	183b      	adds	r3, r7, r0
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	7811      	ldrb	r1, [r2, #0]
 80042f0:	4a92      	ldr	r2, [pc, #584]	@ (800453c <ParseBuffer+0x2a8>)
 80042f2:	24b0      	movs	r4, #176	@ 0xb0
 80042f4:	0064      	lsls	r4, r4, #1
 80042f6:	1912      	adds	r2, r2, r4
 80042f8:	19d2      	adds	r2, r2, r7
 80042fa:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80042fc:	183b      	adds	r3, r7, r0
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	183b      	adds	r3, r7, r0
 8004302:	3201      	adds	r2, #1
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	23ae      	movs	r3, #174	@ 0xae
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	18fa      	adds	r2, r7, r3
 800430c:	4b89      	ldr	r3, [pc, #548]	@ (8004534 <ParseBuffer+0x2a0>)
 800430e:	21b0      	movs	r1, #176	@ 0xb0
 8004310:	0049      	lsls	r1, r1, #1
 8004312:	185b      	adds	r3, r3, r1
 8004314:	19db      	adds	r3, r3, r7
 8004316:	8812      	ldrh	r2, [r2, #0]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d3df      	bcc.n	80042de <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800431e:	4b85      	ldr	r3, [pc, #532]	@ (8004534 <ParseBuffer+0x2a0>)
 8004320:	185b      	adds	r3, r3, r1
 8004322:	19db      	adds	r3, r3, r7
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	4a85      	ldr	r2, [pc, #532]	@ (800453c <ParseBuffer+0x2a8>)
 8004328:	1852      	adds	r2, r2, r1
 800432a:	19d2      	adds	r2, r2, r7
 800432c:	2100      	movs	r1, #0
 800432e:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8004330:	f00a f9f0 	bl	800e714 <GetVerboseLevel>
 8004334:	0003      	movs	r3, r0
 8004336:	2b03      	cmp	r3, #3
 8004338:	d106      	bne.n	8004348 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 800433a:	2348      	movs	r3, #72	@ 0x48
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	4a80      	ldr	r2, [pc, #512]	@ (8004540 <ParseBuffer+0x2ac>)
 8004340:	4980      	ldr	r1, [pc, #512]	@ (8004544 <ParseBuffer+0x2b0>)
 8004342:	2003      	movs	r0, #3
 8004344:	f00a f96c 	bl	800e620 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	26ac      	movs	r6, #172	@ 0xac
 800434c:	0076      	lsls	r6, r6, #1
 800434e:	19ba      	adds	r2, r7, r6
 8004350:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004352:	4b7d      	ldr	r3, [pc, #500]	@ (8004548 <ParseBuffer+0x2b4>)
 8004354:	25b0      	movs	r5, #176	@ 0xb0
 8004356:	006d      	lsls	r5, r5, #1
 8004358:	195b      	adds	r3, r3, r5
 800435a:	19db      	adds	r3, r3, r7
 800435c:	4a7b      	ldr	r2, [pc, #492]	@ (800454c <ParseBuffer+0x2b8>)
 800435e:	8811      	ldrh	r1, [r2, #0]
 8004360:	8019      	strh	r1, [r3, #0]
 8004362:	7892      	ldrb	r2, [r2, #2]
 8004364:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004366:	4b7a      	ldr	r3, [pc, #488]	@ (8004550 <ParseBuffer+0x2bc>)
 8004368:	195b      	adds	r3, r3, r5
 800436a:	19db      	adds	r3, r3, r7
 800436c:	4a79      	ldr	r2, [pc, #484]	@ (8004554 <ParseBuffer+0x2c0>)
 800436e:	6811      	ldr	r1, [r2, #0]
 8004370:	6019      	str	r1, [r3, #0]
 8004372:	8892      	ldrh	r2, [r2, #4]
 8004374:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004376:	4b78      	ldr	r3, [pc, #480]	@ (8004558 <ParseBuffer+0x2c4>)
 8004378:	195b      	adds	r3, r3, r5
 800437a:	19db      	adds	r3, r3, r7
 800437c:	4a77      	ldr	r2, [pc, #476]	@ (800455c <ParseBuffer+0x2c8>)
 800437e:	6811      	ldr	r1, [r2, #0]
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	7912      	ldrb	r2, [r2, #4]
 8004384:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004386:	4b76      	ldr	r3, [pc, #472]	@ (8004560 <ParseBuffer+0x2cc>)
 8004388:	195b      	adds	r3, r3, r5
 800438a:	19db      	adds	r3, r3, r7
 800438c:	4a75      	ldr	r2, [pc, #468]	@ (8004564 <ParseBuffer+0x2d0>)
 800438e:	6811      	ldr	r1, [r2, #0]
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	8892      	ldrh	r2, [r2, #4]
 8004394:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004396:	4b74      	ldr	r3, [pc, #464]	@ (8004568 <ParseBuffer+0x2d4>)
 8004398:	195b      	adds	r3, r3, r5
 800439a:	19db      	adds	r3, r3, r7
 800439c:	223e      	movs	r2, #62	@ 0x3e
 800439e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80043a0:	4b72      	ldr	r3, [pc, #456]	@ (800456c <ParseBuffer+0x2d8>)
 80043a2:	195b      	adds	r3, r3, r5
 80043a4:	19db      	adds	r3, r3, r7
 80043a6:	4a72      	ldr	r2, [pc, #456]	@ (8004570 <ParseBuffer+0x2dc>)
 80043a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043aa:	c313      	stmia	r3!, {r0, r1, r4}
 80043ac:	8811      	ldrh	r1, [r2, #0]
 80043ae:	8019      	strh	r1, [r3, #0]
 80043b0:	7892      	ldrb	r2, [r2, #2]
 80043b2:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80043b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004574 <ParseBuffer+0x2e0>)
 80043b6:	195b      	adds	r3, r3, r5
 80043b8:	19db      	adds	r3, r3, r7
 80043ba:	4a6f      	ldr	r2, [pc, #444]	@ (8004578 <ParseBuffer+0x2e4>)
 80043bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043be:	c313      	stmia	r3!, {r0, r1, r4}
 80043c0:	8812      	ldrh	r2, [r2, #0]
 80043c2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80043c4:	4b5c      	ldr	r3, [pc, #368]	@ (8004538 <ParseBuffer+0x2a4>)
 80043c6:	195b      	adds	r3, r3, r5
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 80043d0:	2344      	movs	r3, #68	@ 0x44
 80043d2:	18fa      	adds	r2, r7, r3
 80043d4:	2348      	movs	r3, #72	@ 0x48
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f01b fff3 	bl	80203c6 <strstr>
 80043e0:	0003      	movs	r3, r0
 80043e2:	19ba      	adds	r2, r7, r6
 80043e4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80043e6:	4b54      	ldr	r3, [pc, #336]	@ (8004538 <ParseBuffer+0x2a4>)
 80043e8:	22b0      	movs	r2, #176	@ 0xb0
 80043ea:	0052      	lsls	r2, r2, #1
 80043ec:	189b      	adds	r3, r3, r2
 80043ee:	19db      	adds	r3, r3, r7
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10c      	bne.n	8004410 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80043f6:	232c      	movs	r3, #44	@ 0x2c
 80043f8:	18fa      	adds	r2, r7, r3
 80043fa:	2348      	movs	r3, #72	@ 0x48
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	0011      	movs	r1, r2
 8004400:	0018      	movs	r0, r3
 8004402:	f01b ffe0 	bl	80203c6 <strstr>
 8004406:	0003      	movs	r3, r0
 8004408:	22ac      	movs	r2, #172	@ 0xac
 800440a:	0052      	lsls	r2, r2, #1
 800440c:	18ba      	adds	r2, r7, r2
 800440e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8004410:	4b49      	ldr	r3, [pc, #292]	@ (8004538 <ParseBuffer+0x2a4>)
 8004412:	22b0      	movs	r2, #176	@ 0xb0
 8004414:	0052      	lsls	r2, r2, #1
 8004416:	189b      	adds	r3, r3, r2
 8004418:	19db      	adds	r3, r3, r7
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d10c      	bne.n	800443a <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8004420:	2328      	movs	r3, #40	@ 0x28
 8004422:	18fa      	adds	r2, r7, r3
 8004424:	2348      	movs	r3, #72	@ 0x48
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	0011      	movs	r1, r2
 800442a:	0018      	movs	r0, r3
 800442c:	f01b ffcb 	bl	80203c6 <strstr>
 8004430:	0003      	movs	r3, r0
 8004432:	22ac      	movs	r2, #172	@ 0xac
 8004434:	0052      	lsls	r2, r2, #1
 8004436:	18ba      	adds	r2, r7, r2
 8004438:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800443a:	4b3f      	ldr	r3, [pc, #252]	@ (8004538 <ParseBuffer+0x2a4>)
 800443c:	22b0      	movs	r2, #176	@ 0xb0
 800443e:	0052      	lsls	r2, r2, #1
 8004440:	189b      	adds	r3, r3, r2
 8004442:	19db      	adds	r3, r3, r7
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b05      	cmp	r3, #5
 8004448:	d10c      	bne.n	8004464 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800444a:	2308      	movs	r3, #8
 800444c:	18fa      	adds	r2, r7, r3
 800444e:	2348      	movs	r3, #72	@ 0x48
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	0011      	movs	r1, r2
 8004454:	0018      	movs	r0, r3
 8004456:	f01b ffb6 	bl	80203c6 <strstr>
 800445a:	0003      	movs	r3, r0
 800445c:	22ac      	movs	r2, #172	@ 0xac
 800445e:	0052      	lsls	r2, r2, #1
 8004460:	18ba      	adds	r2, r7, r2
 8004462:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004464:	233c      	movs	r3, #60	@ 0x3c
 8004466:	18fa      	adds	r2, r7, r3
 8004468:	2448      	movs	r4, #72	@ 0x48
 800446a:	193b      	adds	r3, r7, r4
 800446c:	0011      	movs	r1, r2
 800446e:	0018      	movs	r0, r3
 8004470:	f01b ffa9 	bl	80203c6 <strstr>
 8004474:	0003      	movs	r3, r0
 8004476:	22aa      	movs	r2, #170	@ 0xaa
 8004478:	0052      	lsls	r2, r2, #1
 800447a:	18ba      	adds	r2, r7, r2
 800447c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800447e:	2318      	movs	r3, #24
 8004480:	18fa      	adds	r2, r7, r3
 8004482:	193b      	adds	r3, r7, r4
 8004484:	0011      	movs	r1, r2
 8004486:	0018      	movs	r0, r3
 8004488:	f01b ff9d 	bl	80203c6 <strstr>
 800448c:	0003      	movs	r3, r0
 800448e:	22a8      	movs	r2, #168	@ 0xa8
 8004490:	0052      	lsls	r2, r2, #1
 8004492:	18ba      	adds	r2, r7, r2
 8004494:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004496:	4a39      	ldr	r2, [pc, #228]	@ (800457c <ParseBuffer+0x2e8>)
 8004498:	193b      	adds	r3, r7, r4
 800449a:	0011      	movs	r1, r2
 800449c:	0018      	movs	r0, r3
 800449e:	f01b ff92 	bl	80203c6 <strstr>
 80044a2:	0003      	movs	r3, r0
 80044a4:	22a6      	movs	r2, #166	@ 0xa6
 80044a6:	0052      	lsls	r2, r2, #1
 80044a8:	18ba      	adds	r2, r7, r2
 80044aa:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80044ac:	2334      	movs	r3, #52	@ 0x34
 80044ae:	18fa      	adds	r2, r7, r3
 80044b0:	193b      	adds	r3, r7, r4
 80044b2:	0011      	movs	r1, r2
 80044b4:	0018      	movs	r0, r3
 80044b6:	f01b ff86 	bl	80203c6 <strstr>
 80044ba:	0003      	movs	r3, r0
 80044bc:	22a4      	movs	r2, #164	@ 0xa4
 80044be:	0052      	lsls	r2, r2, #1
 80044c0:	18ba      	adds	r2, r7, r2
 80044c2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80044c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <ParseBuffer+0x2a0>)
 80044c6:	21b0      	movs	r1, #176	@ 0xb0
 80044c8:	0049      	lsls	r1, r1, #1
 80044ca:	185b      	adds	r3, r3, r1
 80044cc:	19db      	adds	r3, r3, r7
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d800      	bhi.n	80044d6 <ParseBuffer+0x242>
 80044d4:	e0c1      	b.n	800465a <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80044d6:	22ac      	movs	r2, #172	@ 0xac
 80044d8:	0052      	lsls	r2, r2, #1
 80044da:	18bb      	adds	r3, r7, r2
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d054      	beq.n	800458c <ParseBuffer+0x2f8>
 80044e2:	18bb      	adds	r3, r7, r2
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b4f      	cmp	r3, #79	@ 0x4f
 80044ea:	d14f      	bne.n	800458c <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80044ec:	2360      	movs	r3, #96	@ 0x60
 80044ee:	33ff      	adds	r3, #255	@ 0xff
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80044f6:	4b22      	ldr	r3, [pc, #136]	@ (8004580 <ParseBuffer+0x2ec>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b12      	cmp	r3, #18
 80044fc:	d146      	bne.n	800458c <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <ParseBuffer+0x2a0>)
 8004500:	185b      	adds	r3, r3, r1
 8004502:	19db      	adds	r3, r3, r7
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	2b2b      	cmp	r3, #43	@ 0x2b
 8004508:	d10b      	bne.n	8004522 <ParseBuffer+0x28e>
 800450a:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <ParseBuffer+0x2a8>)
 800450c:	185b      	adds	r3, r3, r1
 800450e:	19db      	adds	r3, r3, r7
 8004510:	2221      	movs	r2, #33	@ 0x21
 8004512:	5c9b      	ldrb	r3, [r3, r2]
 8004514:	2b32      	cmp	r3, #50	@ 0x32
 8004516:	d104      	bne.n	8004522 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8004518:	193b      	adds	r3, r7, r4
 800451a:	0018      	movs	r0, r3
 800451c:	f002 f916 	bl	800674c <ParseTime>
 8004520:	e034      	b.n	800458c <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 8004522:	4a18      	ldr	r2, [pc, #96]	@ (8004584 <ParseBuffer+0x2f0>)
 8004524:	4b18      	ldr	r3, [pc, #96]	@ (8004588 <ParseBuffer+0x2f4>)
 8004526:	0019      	movs	r1, r3
 8004528:	2001      	movs	r0, #1
 800452a:	f00a f879 	bl	800e620 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800452e:	2306      	movs	r3, #6
 8004530:	e097      	b.n	8004662 <ParseBuffer+0x3ce>
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	fffffea2 	.word	0xfffffea2
 8004538:	fffffea1 	.word	0xfffffea1
 800453c:	fffffee8 	.word	0xfffffee8
 8004540:	0802381c 	.word	0x0802381c
 8004544:	080232c8 	.word	0x080232c8
 8004548:	fffffee4 	.word	0xfffffee4
 800454c:	08023848 	.word	0x08023848
 8004550:	fffffedc 	.word	0xfffffedc
 8004554:	0802384c 	.word	0x0802384c
 8004558:	fffffed4 	.word	0xfffffed4
 800455c:	08023854 	.word	0x08023854
 8004560:	fffffecc 	.word	0xfffffecc
 8004564:	0802385c 	.word	0x0802385c
 8004568:	fffffec8 	.word	0xfffffec8
 800456c:	fffffeb8 	.word	0xfffffeb8
 8004570:	08023864 	.word	0x08023864
 8004574:	fffffea8 	.word	0xfffffea8
 8004578:	08023874 	.word	0x08023874
 800457c:	08025460 	.word	0x08025460
 8004580:	20000a0e 	.word	0x20000a0e
 8004584:	08023834 	.word	0x08023834
 8004588:	080232ec 	.word	0x080232ec
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800458c:	22ac      	movs	r2, #172	@ 0xac
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	18bb      	adds	r3, r7, r2
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <ParseBuffer+0x318>
 8004598:	18bb      	adds	r3, r7, r2
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b72      	cmp	r3, #114	@ 0x72
 80045a0:	d104      	bne.n	80045ac <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 80045a2:	2360      	movs	r3, #96	@ 0x60
 80045a4:	33ff      	adds	r3, #255	@ 0xff
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	2202      	movs	r2, #2
 80045aa:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80045ac:	22ac      	movs	r2, #172	@ 0xac
 80045ae:	0052      	lsls	r2, r2, #1
 80045b0:	18bb      	adds	r3, r7, r2
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <ParseBuffer+0x338>
 80045b8:	18bb      	adds	r3, r7, r2
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b3e      	cmp	r3, #62	@ 0x3e
 80045c0:	d104      	bne.n	80045cc <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 80045c2:	2360      	movs	r3, #96	@ 0x60
 80045c4:	33ff      	adds	r3, #255	@ 0xff
 80045c6:	18fb      	adds	r3, r7, r3
 80045c8:	2205      	movs	r2, #5
 80045ca:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80045cc:	22ac      	movs	r2, #172	@ 0xac
 80045ce:	0052      	lsls	r2, r2, #1
 80045d0:	18bb      	adds	r3, r7, r2
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <ParseBuffer+0x358>
 80045d8:	18bb      	adds	r3, r7, r2
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b2b      	cmp	r3, #43	@ 0x2b
 80045e0:	d104      	bne.n	80045ec <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 80045e2:	2360      	movs	r3, #96	@ 0x60
 80045e4:	33ff      	adds	r3, #255	@ 0xff
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	220b      	movs	r2, #11
 80045ea:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80045ec:	22aa      	movs	r2, #170	@ 0xaa
 80045ee:	0052      	lsls	r2, r2, #1
 80045f0:	18bb      	adds	r3, r7, r2
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <ParseBuffer+0x36e>
 80045f8:	18bb      	adds	r3, r7, r2
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b45      	cmp	r3, #69	@ 0x45
 8004600:	d00a      	beq.n	8004618 <ParseBuffer+0x384>
 8004602:	22a4      	movs	r2, #164	@ 0xa4
 8004604:	0052      	lsls	r2, r2, #1
 8004606:	18bb      	adds	r3, r7, r2
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <ParseBuffer+0x38e>
 800460e:	18bb      	adds	r3, r7, r2
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b46      	cmp	r3, #70	@ 0x46
 8004616:	d104      	bne.n	8004622 <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 8004618:	2360      	movs	r3, #96	@ 0x60
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004622:	22a8      	movs	r2, #168	@ 0xa8
 8004624:	0052      	lsls	r2, r2, #1
 8004626:	18bb      	adds	r3, r7, r2
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <ParseBuffer+0x3aa>
 800462e:	18bb      	adds	r3, r7, r2
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b57      	cmp	r3, #87	@ 0x57
 8004636:	d102      	bne.n	800463e <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004638:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <ParseBuffer+0x3d8>)
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800463e:	22a6      	movs	r2, #166	@ 0xa6
 8004640:	0052      	lsls	r2, r2, #1
 8004642:	18bb      	adds	r3, r7, r2
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <ParseBuffer+0x3c6>
 800464a:	18bb      	adds	r3, r7, r2
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b32      	cmp	r3, #50	@ 0x32
 8004652:	d102      	bne.n	800465a <ParseBuffer+0x3c6>
      beurs = true;
 8004654:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <ParseBuffer+0x3dc>)
 8004656:	2201      	movs	r2, #1
 8004658:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800465a:	2360      	movs	r3, #96	@ 0x60
 800465c:	33ff      	adds	r3, #255	@ 0xff
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	781b      	ldrb	r3, [r3, #0]

}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b059      	add	sp, #356	@ 0x164
 8004668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	20000554 	.word	0x20000554
 8004670:	20000556 	.word	0x20000556

08004674 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800467a:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <PollAwake+0x34>)
 800467c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0018      	movs	r0, r3
 8004682:	f7fb fd73 	bl	800016c <strlen>
 8004686:	0003      	movs	r3, r0
 8004688:	b29a      	uxth	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0011      	movs	r1, r2
 800468e:	0018      	movs	r0, r3
 8004690:	f7ff fa5c 	bl	8003b4c <ESP_Send>
 8004694:	1e03      	subs	r3, r0, #0
 8004696:	d001      	beq.n	800469c <PollAwake+0x28>
    return true;
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <PollAwake+0x2a>
  }
  else{
    return false;
 800469c:	2300      	movs	r3, #0
  }
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b002      	add	sp, #8
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	08023884 	.word	0x08023884

080046ac <RFPower>:

bool RFPower(){
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <RFPower+0x34>)
 80046b4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7fb fd57 	bl	800016c <strlen>
 80046be:	0003      	movs	r3, r0
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	0011      	movs	r1, r2
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7ff fa40 	bl	8003b4c <ESP_Send>
 80046cc:	1e03      	subs	r3, r0, #0
 80046ce:	d001      	beq.n	80046d4 <RFPower+0x28>
    return true;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <RFPower+0x2a>
  }
  else{
    return false;
 80046d4:	2300      	movs	r3, #0
  }
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	0802388c 	.word	0x0802388c

080046e4 <CheckRFPower>:

bool CheckRFPower(){
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80046ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <CheckRFPower+0x34>)
 80046ec:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7fb fd3b 	bl	800016c <strlen>
 80046f6:	0003      	movs	r3, r0
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	0011      	movs	r1, r2
 80046fe:	0018      	movs	r0, r3
 8004700:	f7ff fa24 	bl	8003b4c <ESP_Send>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d001      	beq.n	800470c <CheckRFPower+0x28>
    return true;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800470c:	2300      	movs	r3, #0
  }
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	0802389c 	.word	0x0802389c

0800471c <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004722:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <ATRestore+0x34>)
 8004724:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f7fb fd1f 	bl	800016c <strlen>
 800472e:	0003      	movs	r3, r0
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0011      	movs	r1, r2
 8004736:	0018      	movs	r0, r3
 8004738:	f7ff fa08 	bl	8003b4c <ESP_Send>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d001      	beq.n	8004744 <ATRestore+0x28>
    return true;
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <ATRestore+0x2a>
  }
  else{
    return false;
 8004744:	2300      	movs	r3, #0
  }
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b002      	add	sp, #8
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	080238ac 	.word	0x080238ac

08004754 <CWINIT>:

bool CWINIT(){
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800475a:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <CWINIT+0x34>)
 800475c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0018      	movs	r0, r3
 8004762:	f7fb fd03 	bl	800016c <strlen>
 8004766:	0003      	movs	r3, r0
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	0011      	movs	r1, r2
 800476e:	0018      	movs	r0, r3
 8004770:	f7ff f9ec 	bl	8003b4c <ESP_Send>
 8004774:	1e03      	subs	r3, r0, #0
 8004776:	d001      	beq.n	800477c <CWINIT+0x28>
    return true;
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <CWINIT+0x2a>
  }
  else{
    return false;
 800477c:	2300      	movs	r3, #0
  }
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	080238bc 	.word	0x080238bc

0800478c <CWMODE1>:

bool CWMODE1(){
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004792:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <CWMODE1+0x34>)
 8004794:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0018      	movs	r0, r3
 800479a:	f7fb fce7 	bl	800016c <strlen>
 800479e:	0003      	movs	r3, r0
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0011      	movs	r1, r2
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7ff f9d0 	bl	8003b4c <ESP_Send>
 80047ac:	1e03      	subs	r3, r0, #0
 80047ae:	d001      	beq.n	80047b4 <CWMODE1+0x28>
    return true;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <CWMODE1+0x2a>
  }
  else{
    return false;
 80047b4:	2300      	movs	r3, #0
  }
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b002      	add	sp, #8
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	080238cc 	.word	0x080238cc

080047c4 <CWMODE2>:

bool CWMODE2(){
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <CWMODE2+0x34>)
 80047cc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7fb fccb 	bl	800016c <strlen>
 80047d6:	0003      	movs	r3, r0
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0011      	movs	r1, r2
 80047de:	0018      	movs	r0, r3
 80047e0:	f7ff f9b4 	bl	8003b4c <ESP_Send>
 80047e4:	1e03      	subs	r3, r0, #0
 80047e6:	d001      	beq.n	80047ec <CWMODE2+0x28>
    return true;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <CWMODE2+0x2a>
  }
  else{
    return false;
 80047ec:	2300      	movs	r3, #0
  }
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	080238dc 	.word	0x080238dc

080047fc <CWAUTOCONN>:

bool CWAUTOCONN(){
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <CWAUTOCONN+0x34>)
 8004804:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0018      	movs	r0, r3
 800480a:	f7fb fcaf 	bl	800016c <strlen>
 800480e:	0003      	movs	r3, r0
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	0011      	movs	r1, r2
 8004816:	0018      	movs	r0, r3
 8004818:	f7ff f998 	bl	8003b4c <ESP_Send>
 800481c:	1e03      	subs	r3, r0, #0
 800481e:	d001      	beq.n	8004824 <CWAUTOCONN+0x28>
    return true;
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004824:	2300      	movs	r3, #0
  }
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	b002      	add	sp, #8
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	080238ec 	.word	0x080238ec

08004834 <CWJAP>:

bool CWJAP(){
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004836:	46c6      	mov	lr, r8
 8004838:	b500      	push	{lr}
 800483a:	b0a2      	sub	sp, #136	@ 0x88
 800483c:	af00      	add	r7, sp, #0
 800483e:	466b      	mov	r3, sp
 8004840:	4698      	mov	r8, r3
  beursTest = true;
 8004842:	4b39      	ldr	r3, [pc, #228]	@ (8004928 <CWJAP+0xf4>)
 8004844:	2201      	movs	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004848:	2618      	movs	r6, #24
 800484a:	19bb      	adds	r3, r7, r6
 800484c:	2264      	movs	r2, #100	@ 0x64
 800484e:	2100      	movs	r1, #0
 8004850:	0018      	movs	r0, r3
 8004852:	f01b fd7d 	bl	8020350 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004856:	4b35      	ldr	r3, [pc, #212]	@ (800492c <CWJAP+0xf8>)
 8004858:	4a35      	ldr	r2, [pc, #212]	@ (8004930 <CWJAP+0xfc>)
 800485a:	4936      	ldr	r1, [pc, #216]	@ (8004934 <CWJAP+0x100>)
 800485c:	19b8      	adds	r0, r7, r6
 800485e:	f01b fc33 	bl	80200c8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004862:	19bb      	adds	r3, r7, r6
 8004864:	0018      	movs	r0, r3
 8004866:	f7fb fc81 	bl	800016c <strlen>
 800486a:	0002      	movs	r2, r0
 800486c:	216f      	movs	r1, #111	@ 0x6f
 800486e:	0030      	movs	r0, r6
 8004870:	180b      	adds	r3, r1, r0
 8004872:	19db      	adds	r3, r3, r7
 8004874:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004876:	180b      	adds	r3, r1, r0
 8004878:	19db      	adds	r3, r3, r7
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	1e5a      	subs	r2, r3, #1
 8004880:	2180      	movs	r1, #128	@ 0x80
 8004882:	1879      	adds	r1, r7, r1
 8004884:	600a      	str	r2, [r1, #0]
 8004886:	001a      	movs	r2, r3
 8004888:	60ba      	str	r2, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	60fa      	str	r2, [r7, #12]
 800488e:	68b8      	ldr	r0, [r7, #8]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	0002      	movs	r2, r0
 8004894:	0f52      	lsrs	r2, r2, #29
 8004896:	000e      	movs	r6, r1
 8004898:	00f6      	lsls	r6, r6, #3
 800489a:	617e      	str	r6, [r7, #20]
 800489c:	697e      	ldr	r6, [r7, #20]
 800489e:	4316      	orrs	r6, r2
 80048a0:	617e      	str	r6, [r7, #20]
 80048a2:	0002      	movs	r2, r0
 80048a4:	00d2      	lsls	r2, r2, #3
 80048a6:	613a      	str	r2, [r7, #16]
 80048a8:	001a      	movs	r2, r3
 80048aa:	603a      	str	r2, [r7, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	6838      	ldr	r0, [r7, #0]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	0002      	movs	r2, r0
 80048b6:	0f52      	lsrs	r2, r2, #29
 80048b8:	000e      	movs	r6, r1
 80048ba:	00f5      	lsls	r5, r6, #3
 80048bc:	4315      	orrs	r5, r2
 80048be:	0002      	movs	r2, r0
 80048c0:	00d4      	lsls	r4, r2, #3
 80048c2:	3307      	adds	r3, #7
 80048c4:	08db      	lsrs	r3, r3, #3
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	466a      	mov	r2, sp
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	469d      	mov	sp, r3
 80048ce:	466b      	mov	r3, sp
 80048d0:	3300      	adds	r3, #0
 80048d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80048d4:	246f      	movs	r4, #111	@ 0x6f
 80048d6:	2518      	movs	r5, #24
 80048d8:	1963      	adds	r3, r4, r5
 80048da:	19db      	adds	r3, r3, r7
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	001a      	movs	r2, r3
 80048e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048e4:	2100      	movs	r1, #0
 80048e6:	0018      	movs	r0, r3
 80048e8:	f01b fd32 	bl	8020350 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80048ec:	1963      	adds	r3, r4, r5
 80048ee:	19db      	adds	r3, r3, r7
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	1979      	adds	r1, r7, r5
 80048f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048f6:	0018      	movs	r0, r3
 80048f8:	f01b fd51 	bl	802039e <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80048fc:	1963      	adds	r3, r4, r5
 80048fe:	19db      	adds	r3, r3, r7
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	b29a      	uxth	r2, r3
 8004904:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004906:	0011      	movs	r1, r2
 8004908:	0018      	movs	r0, r3
 800490a:	f7ff f91f 	bl	8003b4c <ESP_Send>
 800490e:	1e03      	subs	r3, r0, #0
 8004910:	d001      	beq.n	8004916 <CWJAP+0xe2>
    return true;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <CWJAP+0xe4>
  }
  else{
    return false;
 8004916:	2300      	movs	r3, #0
 8004918:	46c5      	mov	sp, r8
  }
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	b022      	add	sp, #136	@ 0x88
 8004920:	bc80      	pop	{r7}
 8004922:	46b8      	mov	r8, r7
 8004924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	20000555 	.word	0x20000555
 800492c:	0802546c 	.word	0x0802546c
 8004930:	08025460 	.word	0x08025460
 8004934:	08023900 	.word	0x08023900

08004938 <CWMODE3>:

bool CWMODE3(){
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800493e:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <CWMODE3+0x34>)
 8004940:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f7fb fc11 	bl	800016c <strlen>
 800494a:	0003      	movs	r3, r0
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0011      	movs	r1, r2
 8004952:	0018      	movs	r0, r3
 8004954:	f7ff f8fa 	bl	8003b4c <ESP_Send>
 8004958:	1e03      	subs	r3, r0, #0
 800495a:	d001      	beq.n	8004960 <CWMODE3+0x28>
    return true;
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004960:	2300      	movs	r3, #0
  }
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	08023918 	.word	0x08023918

08004970 <CWSTATE>:

bool CWSTATE(){
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <CWSTATE+0x34>)
 8004978:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0018      	movs	r0, r3
 800497e:	f7fb fbf5 	bl	800016c <strlen>
 8004982:	0003      	movs	r3, r0
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0011      	movs	r1, r2
 800498a:	0018      	movs	r0, r3
 800498c:	f7ff f8de 	bl	8003b4c <ESP_Send>
 8004990:	1e03      	subs	r3, r0, #0
 8004992:	d001      	beq.n	8004998 <CWSTATE+0x28>
    return true;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004998:	2300      	movs	r3, #0
  }
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	08023928 	.word	0x08023928

080049a8 <CWSAP>:

bool CWSAP(){
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80049ae:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <CWSAP+0x34>)
 80049b0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f7fb fbd9 	bl	800016c <strlen>
 80049ba:	0003      	movs	r3, r0
 80049bc:	b29a      	uxth	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0011      	movs	r1, r2
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7ff f8c2 	bl	8003b4c <ESP_Send>
 80049c8:	1e03      	subs	r3, r0, #0
 80049ca:	d001      	beq.n	80049d0 <CWSAP+0x28>
    return true;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <CWSAP+0x2a>
  }
  else{
    return false;
 80049d0:	2300      	movs	r3, #0
  }
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b002      	add	sp, #8
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	08023938 	.word	0x08023938

080049e0 <CIPMUX>:

bool CIPMUX(){
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80049e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <CIPMUX+0x34>)
 80049e8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7fb fbbd 	bl	800016c <strlen>
 80049f2:	0003      	movs	r3, r0
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0011      	movs	r1, r2
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7ff f8a6 	bl	8003b4c <ESP_Send>
 8004a00:	1e03      	subs	r3, r0, #0
 8004a02:	d001      	beq.n	8004a08 <CIPMUX+0x28>
    return true;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <CIPMUX+0x2a>
  }
  else{
    return false;
 8004a08:	2300      	movs	r3, #0
  }
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	0802395c 	.word	0x0802395c

08004a18 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <WEBSERVER+0x34>)
 8004a20:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fb fba1 	bl	800016c <strlen>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	0011      	movs	r1, r2
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7ff f88a 	bl	8003b4c <ESP_Send>
 8004a38:	1e03      	subs	r3, r0, #0
 8004a3a:	d001      	beq.n	8004a40 <WEBSERVER+0x28>
    return true;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004a40:	2300      	movs	r3, #0
  }
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b002      	add	sp, #8
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	0802396c 	.word	0x0802396c

08004a50 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b0c5      	sub	sp, #276	@ 0x114
 8004a54:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004a56:	2380      	movs	r3, #128	@ 0x80
 8004a58:	005a      	lsls	r2, r3, #1
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f01b fc76 	bl	8020350 <memset>
  uint16_t length = CreateMessage(beurs);
 8004a64:	4b22      	ldr	r3, [pc, #136]	@ (8004af0 <HTTPCPOST+0xa0>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	1dfc      	adds	r4, r7, #7
 8004a6a:	34ff      	adds	r4, #255	@ 0xff
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7ff f98d 	bl	8003d8c <CreateMessage>
 8004a72:	0003      	movs	r3, r0
 8004a74:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004a76:	4b1e      	ldr	r3, [pc, #120]	@ (8004af0 <HTTPCPOST+0xa0>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004a7e:	1dfb      	adds	r3, r7, #7
 8004a80:	33ff      	adds	r3, #255	@ 0xff
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	4a1b      	ldr	r2, [pc, #108]	@ (8004af4 <HTTPCPOST+0xa4>)
 8004a86:	491c      	ldr	r1, [pc, #112]	@ (8004af8 <HTTPCPOST+0xa8>)
 8004a88:	1d38      	adds	r0, r7, #4
 8004a8a:	f01b fb1d 	bl	80200c8 <siprintf>
 8004a8e:	e016      	b.n	8004abe <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004a90:	4b1a      	ldr	r3, [pc, #104]	@ (8004afc <HTTPCPOST+0xac>)
 8004a92:	481b      	ldr	r0, [pc, #108]	@ (8004b00 <HTTPCPOST+0xb0>)
 8004a94:	220c      	movs	r2, #12
 8004a96:	0019      	movs	r1, r3
 8004a98:	f7fe fe2e 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004a9c:	4a17      	ldr	r2, [pc, #92]	@ (8004afc <HTTPCPOST+0xac>)
 8004a9e:	4b19      	ldr	r3, [pc, #100]	@ (8004b04 <HTTPCPOST+0xb4>)
 8004aa0:	0011      	movs	r1, r2
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f7ff f94e 	bl	8003d44 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004aa8:	1dfb      	adds	r3, r7, #7
 8004aaa:	33ff      	adds	r3, #255	@ 0xff
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	4c15      	ldr	r4, [pc, #84]	@ (8004b04 <HTTPCPOST+0xb4>)
 8004ab0:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <HTTPCPOST+0xb8>)
 8004ab2:	4916      	ldr	r1, [pc, #88]	@ (8004b0c <HTTPCPOST+0xbc>)
 8004ab4:	1d38      	adds	r0, r7, #4
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	0023      	movs	r3, r4
 8004aba:	f01b fb05 	bl	80200c8 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004abe:	1d3b      	adds	r3, r7, #4
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7fb fb53 	bl	800016c <strlen>
 8004ac6:	0002      	movs	r2, r0
 8004ac8:	1d7b      	adds	r3, r7, #5
 8004aca:	33ff      	adds	r3, #255	@ 0xff
 8004acc:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004ace:	1d7b      	adds	r3, r7, #5
 8004ad0:	33ff      	adds	r3, #255	@ 0xff
 8004ad2:	881a      	ldrh	r2, [r3, #0]
 8004ad4:	1d3b      	adds	r3, r7, #4
 8004ad6:	0011      	movs	r1, r2
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7ff f837 	bl	8003b4c <ESP_Send>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d001      	beq.n	8004ae6 <HTTPCPOST+0x96>
    return true;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004ae6:	2300      	movs	r3, #0
  }
}
 8004ae8:	0018      	movs	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b043      	add	sp, #268	@ 0x10c
 8004aee:	bd90      	pop	{r4, r7, pc}
 8004af0:	20000556 	.word	0x20000556
 8004af4:	08025488 	.word	0x08025488
 8004af8:	08023984 	.word	0x08023984
 8004afc:	20000b20 	.word	0x20000b20
 8004b00:	08080000 	.word	0x08080000
 8004b04:	20000b2c 	.word	0x20000b2c
 8004b08:	080254c4 	.word	0x080254c4
 8004b0c:	080239bc 	.word	0x080239bc

08004b10 <SENDDATA>:

bool SENDDATA(){
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004b16:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <SENDDATA+0x34>)
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fb fb27 	bl	800016c <strlen>
 8004b1e:	0002      	movs	r2, r0
 8004b20:	1dbb      	adds	r3, r7, #6
 8004b22:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004b24:	1dbb      	adds	r3, r7, #6
 8004b26:	881a      	ldrh	r2, [r3, #0]
 8004b28:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <SENDDATA+0x34>)
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff f80d 	bl	8003b4c <ESP_Send>
 8004b32:	1e03      	subs	r3, r0, #0
 8004b34:	d001      	beq.n	8004b3a <SENDDATA+0x2a>
    return true;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <SENDDATA+0x2c>
  }
  else{
    return false;
 8004b3a:	2300      	movs	r3, #0
  }
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b002      	add	sp, #8
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000578 	.word	0x20000578

08004b48 <SLEEP>:

bool SLEEP(){
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <SLEEP+0x34>)
 8004b50:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7fb fb09 	bl	800016c <strlen>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0011      	movs	r1, r2
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7fe fff2 	bl	8003b4c <ESP_Send>
 8004b68:	1e03      	subs	r3, r0, #0
 8004b6a:	d001      	beq.n	8004b70 <SLEEP+0x28>
    return true;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <SLEEP+0x2a>
  }
  else{
    return false;
 8004b70:	2300      	movs	r3, #0
  }
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b002      	add	sp, #8
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	080239fc 	.word	0x080239fc

08004b80 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <CIPSNTPCFG+0x3c>)
 8004b88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fb faed 	bl	800016c <strlen>
 8004b92:	0003      	movs	r3, r0
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	0011      	movs	r1, r2
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fe ffd6 	bl	8003b4c <ESP_Send>
 8004ba0:	1e03      	subs	r3, r0, #0
 8004ba2:	d006      	beq.n	8004bb2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004ba4:	23fa      	movs	r3, #250	@ 0xfa
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f00a f983 	bl	800eeb4 <HAL_Delay>
    return true;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004bb2:	2300      	movs	r3, #0
  }
}
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b002      	add	sp, #8
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	08023a0c 	.word	0x08023a0c

08004bc0 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <CIPSNTPTIME+0x34>)
 8004bc8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fb facd 	bl	800016c <strlen>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0011      	movs	r1, r2
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7fe ffb6 	bl	8003b4c <ESP_Send>
 8004be0:	1e03      	subs	r3, r0, #0
 8004be2:	d001      	beq.n	8004be8 <CIPSNTPTIME+0x28>
    return true;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004be8:	2300      	movs	r3, #0
  }
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b002      	add	sp, #8
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	08023a5c 	.word	0x08023a5c

08004bf8 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <CIPSNTPINTV+0x34>)
 8004c00:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7fb fab1 	bl	800016c <strlen>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0011      	movs	r1, r2
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fe ff9a 	bl	8003b4c <ESP_Send>
 8004c18:	1e03      	subs	r3, r0, #0
 8004c1a:	d001      	beq.n	8004c20 <CIPSNTPINTV+0x28>
    return true;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004c20:	2300      	movs	r3, #0
  }
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b002      	add	sp, #8
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	08023a70 	.word	0x08023a70

08004c30 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004c30:	b5b0      	push	{r4, r5, r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	0002      	movs	r2, r0
 8004c38:	1dfb      	adds	r3, r7, #7
 8004c3a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8004df0 <DMA_ProcessBuffer+0x1c0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	200e      	movs	r0, #14
 8004c46:	183b      	adds	r3, r7, r0
 8004c48:	2180      	movs	r1, #128	@ 0x80
 8004c4a:	0049      	lsls	r1, r1, #1
 8004c4c:	1a8a      	subs	r2, r1, r2
 8004c4e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004c50:	230d      	movs	r3, #13
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2203      	movs	r2, #3
 8004c56:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004c58:	183b      	adds	r3, r7, r0
 8004c5a:	881a      	ldrh	r2, [r3, #0]
 8004c5c:	2380      	movs	r3, #128	@ 0x80
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d903      	bls.n	8004c6c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004c64:	183b      	adds	r3, r7, r0
 8004c66:	2280      	movs	r2, #128	@ 0x80
 8004c68:	0052      	lsls	r2, r2, #1
 8004c6a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004c6c:	4b61      	ldr	r3, [pc, #388]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	001a      	movs	r2, r3
 8004c74:	230e      	movs	r3, #14
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d131      	bne.n	8004ce2 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004c7e:	4b5e      	ldr	r3, [pc, #376]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b14      	cmp	r3, #20
 8004c84:	d91b      	bls.n	8004cbe <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004c86:	4b5c      	ldr	r3, [pc, #368]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dfc <DMA_ProcessBuffer+0x1cc>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d107      	bne.n	8004ca4 <DMA_ProcessBuffer+0x74>
 8004c94:	4b5a      	ldr	r3, [pc, #360]	@ (8004e00 <DMA_ProcessBuffer+0x1d0>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004c9c:	230d      	movs	r3, #13
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004ca4:	4b55      	ldr	r3, [pc, #340]	@ (8004dfc <DMA_ProcessBuffer+0x1cc>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d103      	bne.n	8004cb4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004cac:	4b55      	ldr	r3, [pc, #340]	@ (8004e04 <DMA_ProcessBuffer+0x1d4>)
 8004cae:	220b      	movs	r2, #11
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e016      	b.n	8004ce2 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004cb4:	230d      	movs	r3, #13
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2206      	movs	r2, #6
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e011      	b.n	8004ce2 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004cc8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004cca:	f00a f8e9 	bl	800eea0 <HAL_GetTick>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	33f5      	adds	r3, #245	@ 0xf5
 8004cd2:	33ff      	adds	r3, #255	@ 0xff
 8004cd4:	001a      	movs	r2, r3
 8004cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8004e08 <DMA_ProcessBuffer+0x1d8>)
 8004cd8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004cda:	230d      	movs	r3, #13
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	2204      	movs	r2, #4
 8004ce0:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004ce2:	4b44      	ldr	r3, [pc, #272]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	001a      	movs	r2, r3
 8004cea:	210e      	movs	r1, #14
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <DMA_ProcessBuffer+0xc6>
 8004cf4:	e075      	b.n	8004de2 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004cf6:	4b40      	ldr	r3, [pc, #256]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004cfc:	4b43      	ldr	r3, [pc, #268]	@ (8004e0c <DMA_ProcessBuffer+0x1dc>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b3c      	ldr	r3, [pc, #240]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d109      	bne.n	8004d20 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	4b3e      	ldr	r3, [pc, #248]	@ (8004e0c <DMA_ProcessBuffer+0x1dc>)
 8004d14:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004d16:	230d      	movs	r3, #13
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	220a      	movs	r2, #10
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e060      	b.n	8004de2 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004d20:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <DMA_ProcessBuffer+0x1dc>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	001a      	movs	r2, r3
 8004d28:	210e      	movs	r1, #14
 8004d2a:	187b      	adds	r3, r7, r1
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d009      	beq.n	8004d46 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	4b34      	ldr	r3, [pc, #208]	@ (8004e0c <DMA_ProcessBuffer+0x1dc>)
 8004d3a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004d3c:	230d      	movs	r3, #13
 8004d3e:	18fb      	adds	r3, r7, r3
 8004d40:	220a      	movs	r2, #10
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	e04d      	b.n	8004de2 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004d46:	4b2b      	ldr	r3, [pc, #172]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	210e      	movs	r1, #14
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d917      	bls.n	8004d88 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004d58:	4b26      	ldr	r3, [pc, #152]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	001a      	movs	r2, r3
 8004d60:	4b2b      	ldr	r3, [pc, #172]	@ (8004e10 <DMA_ProcessBuffer+0x1e0>)
 8004d62:	18d0      	adds	r0, r2, r3
 8004d64:	4b23      	ldr	r3, [pc, #140]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	b299      	uxth	r1, r3
 8004d74:	230d      	movs	r3, #13
 8004d76:	18fc      	adds	r4, r7, r3
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	001a      	movs	r2, r3
 8004d7e:	f7ff fa89 	bl	8004294 <ParseBuffer>
 8004d82:	0003      	movs	r3, r0
 8004d84:	7023      	strb	r3, [r4, #0]
 8004d86:	e026      	b.n	8004dd6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004d88:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	001a      	movs	r2, r3
 8004d90:	4b1f      	ldr	r3, [pc, #124]	@ (8004e10 <DMA_ProcessBuffer+0x1e0>)
 8004d92:	18d0      	adds	r0, r2, r3
 8004d94:	4b17      	ldr	r3, [pc, #92]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	b299      	uxth	r1, r3
 8004da4:	250d      	movs	r5, #13
 8004da6:	197c      	adds	r4, r7, r5
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	001a      	movs	r2, r3
 8004dae:	f7ff fa71 	bl	8004294 <ParseBuffer>
 8004db2:	0003      	movs	r3, r0
 8004db4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004db6:	210e      	movs	r1, #14
 8004db8:	187b      	adds	r3, r7, r1
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004dc0:	197c      	adds	r4, r7, r5
 8004dc2:	1dfb      	adds	r3, r7, #7
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	187b      	adds	r3, r7, r1
 8004dc8:	8819      	ldrh	r1, [r3, #0]
 8004dca:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <DMA_ProcessBuffer+0x1e0>)
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7ff fa61 	bl	8004294 <ParseBuffer>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004dd6:	230e      	movs	r3, #14
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004de0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004de2:	230d      	movs	r3, #13
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	781b      	ldrb	r3, [r3, #0]
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b004      	add	sp, #16
 8004dee:	bdb0      	pop	{r4, r5, r7, pc}
 8004df0:	20002310 	.word	0x20002310
 8004df4:	20000b45 	.word	0x20000b45
 8004df8:	20000a0c 	.word	0x20000a0c
 8004dfc:	20000a0e 	.word	0x20000a0e
 8004e00:	20000000 	.word	0x20000000
 8004e04:	20000030 	.word	0x20000030
 8004e08:	20000a08 	.word	0x20000a08
 8004e0c:	20000b46 	.word	0x20000b46
 8004e10:	20000450 	.word	0x20000450

08004e14 <clearDMABuffer>:

void clearDMABuffer(){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004e18:	2380      	movs	r3, #128	@ 0x80
 8004e1a:	005a      	lsls	r2, r3, #1
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <clearDMABuffer+0x18>)
 8004e1e:	2100      	movs	r1, #0
 8004e20:	0018      	movs	r0, r3
 8004e22:	f01b fa95 	bl	8020350 <memset>
}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000450 	.word	0x20000450

08004e30 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	0002      	movs	r2, r0
 8004e38:	1dfb      	adds	r3, r7, #7
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	1dbb      	adds	r3, r7, #6
 8004e3e:	1c0a      	adds	r2, r1, #0
 8004e40:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004e42:	210f      	movs	r1, #15
 8004e44:	187b      	adds	r3, r7, r1
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004e4a:	1dbb      	adds	r3, r7, #6
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004e52:	187b      	adds	r3, r7, r1
 8004e54:	1dfa      	adds	r2, r7, #7
 8004e56:	7812      	ldrb	r2, [r2, #0]
 8004e58:	4251      	negs	r1, r2
 8004e5a:	414a      	adcs	r2, r1
 8004e5c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004e5e:	1dbb      	adds	r3, r7, #6
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d107      	bne.n	8004e76 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004e66:	230f      	movs	r3, #15
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	1dfa      	adds	r2, r7, #7
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	3a02      	subs	r2, #2
 8004e70:	4251      	negs	r1, r2
 8004e72:	414a      	adcs	r2, r1
 8004e74:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004e76:	1dbb      	adds	r3, r7, #6
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d107      	bne.n	8004e8e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004e7e:	230f      	movs	r3, #15
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	1dfa      	adds	r2, r7, #7
 8004e84:	7812      	ldrb	r2, [r2, #0]
 8004e86:	3a05      	subs	r2, #5
 8004e88:	4251      	negs	r1, r2
 8004e8a:	414a      	adcs	r2, r1
 8004e8c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004e8e:	1dbb      	adds	r3, r7, #6
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d107      	bne.n	8004ea6 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004e96:	230f      	movs	r3, #15
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	1dfa      	adds	r2, r7, #7
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	3a0b      	subs	r2, #11
 8004ea0:	4251      	negs	r1, r2
 8004ea2:	414a      	adcs	r2, r1
 8004ea4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004ea6:	230f      	movs	r3, #15
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	781b      	ldrb	r3, [r3, #0]
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	0002      	movs	r2, r0
 8004ebc:	1dfb      	adds	r3, r7, #7
 8004ebe:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004ec8:	1dfb      	adds	r3, r7, #7
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b14      	cmp	r3, #20
 8004ece:	d900      	bls.n	8004ed2 <AT_Send+0x1e>
 8004ed0:	e19e      	b.n	8005210 <AT_Send+0x35c>
 8004ed2:	009a      	lsls	r2, r3, #2
 8004ed4:	4bd2      	ldr	r3, [pc, #840]	@ (8005220 <AT_Send+0x36c>)
 8004ed6:	18d3      	adds	r3, r2, r3
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004edc:	4bd1      	ldr	r3, [pc, #836]	@ (8005224 <AT_Send+0x370>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f009 fb47 	bl	800e574 <TimestampIsReached>
 8004ee6:	1e03      	subs	r3, r0, #0
 8004ee8:	d100      	bne.n	8004eec <AT_Send+0x38>
 8004eea:	e190      	b.n	800520e <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8004eec:	4ace      	ldr	r2, [pc, #824]	@ (8005228 <AT_Send+0x374>)
 8004eee:	4bcf      	ldr	r3, [pc, #828]	@ (800522c <AT_Send+0x378>)
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	2003      	movs	r0, #3
 8004ef4:	f009 fb94 	bl	800e620 <CreateLine>
    ATCommandSend = PollAwake();
 8004ef8:	230f      	movs	r3, #15
 8004efa:	18fc      	adds	r4, r7, r3
 8004efc:	f7ff fbba 	bl	8004674 <PollAwake>
 8004f00:	0003      	movs	r3, r0
 8004f02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f04:	f009 ffcc 	bl	800eea0 <HAL_GetTick>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	3332      	adds	r3, #50	@ 0x32
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	4bc5      	ldr	r3, [pc, #788]	@ (8005224 <AT_Send+0x370>)
 8004f10:	601a      	str	r2, [r3, #0]
  }
  break;
 8004f12:	e17c      	b.n	800520e <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004f14:	4ac6      	ldr	r2, [pc, #792]	@ (8005230 <AT_Send+0x37c>)
 8004f16:	4bc5      	ldr	r3, [pc, #788]	@ (800522c <AT_Send+0x378>)
 8004f18:	0019      	movs	r1, r3
 8004f1a:	2003      	movs	r0, #3
 8004f1c:	f009 fb80 	bl	800e620 <CreateLine>
    ATCommandSend = RFPower();
 8004f20:	230f      	movs	r3, #15
 8004f22:	18fc      	adds	r4, r7, r3
 8004f24:	f7ff fbc2 	bl	80046ac <RFPower>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f2c:	f009 ffb8 	bl	800eea0 <HAL_GetTick>
 8004f30:	0003      	movs	r3, r0
 8004f32:	330a      	adds	r3, #10
 8004f34:	001a      	movs	r2, r3
 8004f36:	4bbb      	ldr	r3, [pc, #748]	@ (8005224 <AT_Send+0x370>)
 8004f38:	601a      	str	r2, [r3, #0]
    break;
 8004f3a:	e169      	b.n	8005210 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004f3c:	4abd      	ldr	r2, [pc, #756]	@ (8005234 <AT_Send+0x380>)
 8004f3e:	4bbb      	ldr	r3, [pc, #748]	@ (800522c <AT_Send+0x378>)
 8004f40:	0019      	movs	r1, r3
 8004f42:	2003      	movs	r0, #3
 8004f44:	f009 fb6c 	bl	800e620 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004f48:	230f      	movs	r3, #15
 8004f4a:	18fc      	adds	r4, r7, r3
 8004f4c:	f7ff fbca 	bl	80046e4 <CheckRFPower>
 8004f50:	0003      	movs	r3, r0
 8004f52:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f54:	f009 ffa4 	bl	800eea0 <HAL_GetTick>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	330a      	adds	r3, #10
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	4bb1      	ldr	r3, [pc, #708]	@ (8005224 <AT_Send+0x370>)
 8004f60:	601a      	str	r2, [r3, #0]
    break;
 8004f62:	e155      	b.n	8005210 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004f64:	4ab4      	ldr	r2, [pc, #720]	@ (8005238 <AT_Send+0x384>)
 8004f66:	4bb1      	ldr	r3, [pc, #708]	@ (800522c <AT_Send+0x378>)
 8004f68:	0019      	movs	r1, r3
 8004f6a:	2003      	movs	r0, #3
 8004f6c:	f009 fb58 	bl	800e620 <CreateLine>
    ATCommandSend = ATRestore();
 8004f70:	230f      	movs	r3, #15
 8004f72:	18fc      	adds	r4, r7, r3
 8004f74:	f7ff fbd2 	bl	800471c <ATRestore>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f7c:	f009 ff90 	bl	800eea0 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	3332      	adds	r3, #50	@ 0x32
 8004f84:	001a      	movs	r2, r3
 8004f86:	4ba7      	ldr	r3, [pc, #668]	@ (8005224 <AT_Send+0x370>)
 8004f88:	601a      	str	r2, [r3, #0]
    break;
 8004f8a:	e141      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004f8c:	4aab      	ldr	r2, [pc, #684]	@ (800523c <AT_Send+0x388>)
 8004f8e:	4ba7      	ldr	r3, [pc, #668]	@ (800522c <AT_Send+0x378>)
 8004f90:	0019      	movs	r1, r3
 8004f92:	2003      	movs	r0, #3
 8004f94:	f009 fb44 	bl	800e620 <CreateLine>
    ATCommandSend = CWINIT();
 8004f98:	230f      	movs	r3, #15
 8004f9a:	18fc      	adds	r4, r7, r3
 8004f9c:	f7ff fbda 	bl	8004754 <CWINIT>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fa4:	f009 ff7c 	bl	800eea0 <HAL_GetTick>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	33f5      	adds	r3, #245	@ 0xf5
 8004fac:	33ff      	adds	r3, #255	@ 0xff
 8004fae:	001a      	movs	r2, r3
 8004fb0:	4b9c      	ldr	r3, [pc, #624]	@ (8005224 <AT_Send+0x370>)
 8004fb2:	601a      	str	r2, [r3, #0]
    break;
 8004fb4:	e12c      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004fb6:	4aa2      	ldr	r2, [pc, #648]	@ (8005240 <AT_Send+0x38c>)
 8004fb8:	4b9c      	ldr	r3, [pc, #624]	@ (800522c <AT_Send+0x378>)
 8004fba:	0019      	movs	r1, r3
 8004fbc:	2003      	movs	r0, #3
 8004fbe:	f009 fb2f 	bl	800e620 <CreateLine>
    ATCommandSend = CWSTATE();
 8004fc2:	230f      	movs	r3, #15
 8004fc4:	18fc      	adds	r4, r7, r3
 8004fc6:	f7ff fcd3 	bl	8004970 <CWSTATE>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fce:	f009 ff67 	bl	800eea0 <HAL_GetTick>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	33f5      	adds	r3, #245	@ 0xf5
 8004fd6:	33ff      	adds	r3, #255	@ 0xff
 8004fd8:	001a      	movs	r2, r3
 8004fda:	4b92      	ldr	r3, [pc, #584]	@ (8005224 <AT_Send+0x370>)
 8004fdc:	601a      	str	r2, [r3, #0]
    break;
 8004fde:	e117      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004fe0:	4a98      	ldr	r2, [pc, #608]	@ (8005244 <AT_Send+0x390>)
 8004fe2:	4b92      	ldr	r3, [pc, #584]	@ (800522c <AT_Send+0x378>)
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	2003      	movs	r0, #3
 8004fe8:	f009 fb1a 	bl	800e620 <CreateLine>
    ATCommandSend = CWMODE1();
 8004fec:	230f      	movs	r3, #15
 8004fee:	18fc      	adds	r4, r7, r3
 8004ff0:	f7ff fbcc 	bl	800478c <CWMODE1>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ff8:	f009 ff52 	bl	800eea0 <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	330a      	adds	r3, #10
 8005000:	001a      	movs	r2, r3
 8005002:	4b88      	ldr	r3, [pc, #544]	@ (8005224 <AT_Send+0x370>)
 8005004:	601a      	str	r2, [r3, #0]
    break;
 8005006:	e103      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8005008:	4a8e      	ldr	r2, [pc, #568]	@ (8005244 <AT_Send+0x390>)
 800500a:	4b88      	ldr	r3, [pc, #544]	@ (800522c <AT_Send+0x378>)
 800500c:	0019      	movs	r1, r3
 800500e:	2003      	movs	r0, #3
 8005010:	f009 fb06 	bl	800e620 <CreateLine>
    ATCommandSend = CWMODE2();
 8005014:	230f      	movs	r3, #15
 8005016:	18fc      	adds	r4, r7, r3
 8005018:	f7ff fbd4 	bl	80047c4 <CWMODE2>
 800501c:	0003      	movs	r3, r0
 800501e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005020:	f009 ff3e 	bl	800eea0 <HAL_GetTick>
 8005024:	0003      	movs	r3, r0
 8005026:	330a      	adds	r3, #10
 8005028:	001a      	movs	r2, r3
 800502a:	4b7e      	ldr	r3, [pc, #504]	@ (8005224 <AT_Send+0x370>)
 800502c:	601a      	str	r2, [r3, #0]
    break;
 800502e:	e0ef      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005030:	4a85      	ldr	r2, [pc, #532]	@ (8005248 <AT_Send+0x394>)
 8005032:	4b7e      	ldr	r3, [pc, #504]	@ (800522c <AT_Send+0x378>)
 8005034:	0019      	movs	r1, r3
 8005036:	2003      	movs	r0, #3
 8005038:	f009 faf2 	bl	800e620 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800503c:	230f      	movs	r3, #15
 800503e:	18fc      	adds	r4, r7, r3
 8005040:	f7ff fbdc 	bl	80047fc <CWAUTOCONN>
 8005044:	0003      	movs	r3, r0
 8005046:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005048:	f009 ff2a 	bl	800eea0 <HAL_GetTick>
 800504c:	0003      	movs	r3, r0
 800504e:	330a      	adds	r3, #10
 8005050:	001a      	movs	r2, r3
 8005052:	4b74      	ldr	r3, [pc, #464]	@ (8005224 <AT_Send+0x370>)
 8005054:	601a      	str	r2, [r3, #0]
    break;
 8005056:	e0db      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005058:	4a7c      	ldr	r2, [pc, #496]	@ (800524c <AT_Send+0x398>)
 800505a:	4b74      	ldr	r3, [pc, #464]	@ (800522c <AT_Send+0x378>)
 800505c:	0019      	movs	r1, r3
 800505e:	2003      	movs	r0, #3
 8005060:	f009 fade 	bl	800e620 <CreateLine>
    ATCommandSend = CWJAP();
 8005064:	230f      	movs	r3, #15
 8005066:	18fc      	adds	r4, r7, r3
 8005068:	f7ff fbe4 	bl	8004834 <CWJAP>
 800506c:	0003      	movs	r3, r0
 800506e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005070:	f009 ff16 	bl	800eea0 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	3332      	adds	r3, #50	@ 0x32
 8005078:	001a      	movs	r2, r3
 800507a:	4b6a      	ldr	r3, [pc, #424]	@ (8005224 <AT_Send+0x370>)
 800507c:	601a      	str	r2, [r3, #0]
    break;
 800507e:	e0c7      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005080:	4a73      	ldr	r2, [pc, #460]	@ (8005250 <AT_Send+0x39c>)
 8005082:	4b6a      	ldr	r3, [pc, #424]	@ (800522c <AT_Send+0x378>)
 8005084:	0019      	movs	r1, r3
 8005086:	2003      	movs	r0, #3
 8005088:	f009 faca 	bl	800e620 <CreateLine>
    ATCommandSend = CWMODE3();
 800508c:	230f      	movs	r3, #15
 800508e:	18fc      	adds	r4, r7, r3
 8005090:	f7ff fc52 	bl	8004938 <CWMODE3>
 8005094:	0003      	movs	r3, r0
 8005096:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005098:	f009 ff02 	bl	800eea0 <HAL_GetTick>
 800509c:	0003      	movs	r3, r0
 800509e:	330a      	adds	r3, #10
 80050a0:	001a      	movs	r2, r3
 80050a2:	4b60      	ldr	r3, [pc, #384]	@ (8005224 <AT_Send+0x370>)
 80050a4:	601a      	str	r2, [r3, #0]
    break;
 80050a6:	e0b3      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80050a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005254 <AT_Send+0x3a0>)
 80050aa:	4b60      	ldr	r3, [pc, #384]	@ (800522c <AT_Send+0x378>)
 80050ac:	0019      	movs	r1, r3
 80050ae:	2003      	movs	r0, #3
 80050b0:	f009 fab6 	bl	800e620 <CreateLine>
    ATCommandSend = CWSAP();
 80050b4:	230f      	movs	r3, #15
 80050b6:	18fc      	adds	r4, r7, r3
 80050b8:	f7ff fc76 	bl	80049a8 <CWSAP>
 80050bc:	0003      	movs	r3, r0
 80050be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050c0:	f009 feee 	bl	800eea0 <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	330a      	adds	r3, #10
 80050c8:	001a      	movs	r2, r3
 80050ca:	4b56      	ldr	r3, [pc, #344]	@ (8005224 <AT_Send+0x370>)
 80050cc:	601a      	str	r2, [r3, #0]
    break;
 80050ce:	e09f      	b.n	8005210 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80050d0:	4a61      	ldr	r2, [pc, #388]	@ (8005258 <AT_Send+0x3a4>)
 80050d2:	4b56      	ldr	r3, [pc, #344]	@ (800522c <AT_Send+0x378>)
 80050d4:	0019      	movs	r1, r3
 80050d6:	2003      	movs	r0, #3
 80050d8:	f009 faa2 	bl	800e620 <CreateLine>
    ATCommandSend = CIPMUX();
 80050dc:	230f      	movs	r3, #15
 80050de:	18fc      	adds	r4, r7, r3
 80050e0:	f7ff fc7e 	bl	80049e0 <CIPMUX>
 80050e4:	0003      	movs	r3, r0
 80050e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050e8:	f009 feda 	bl	800eea0 <HAL_GetTick>
 80050ec:	0003      	movs	r3, r0
 80050ee:	330a      	adds	r3, #10
 80050f0:	001a      	movs	r2, r3
 80050f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005224 <AT_Send+0x370>)
 80050f4:	601a      	str	r2, [r3, #0]
    break;
 80050f6:	e08b      	b.n	8005210 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80050f8:	4a58      	ldr	r2, [pc, #352]	@ (800525c <AT_Send+0x3a8>)
 80050fa:	4b4c      	ldr	r3, [pc, #304]	@ (800522c <AT_Send+0x378>)
 80050fc:	0019      	movs	r1, r3
 80050fe:	2003      	movs	r0, #3
 8005100:	f009 fa8e 	bl	800e620 <CreateLine>
    ATCommandSend = WEBSERVER();
 8005104:	230f      	movs	r3, #15
 8005106:	18fc      	adds	r4, r7, r3
 8005108:	f7ff fc86 	bl	8004a18 <WEBSERVER>
 800510c:	0003      	movs	r3, r0
 800510e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005110:	f009 fec6 	bl	800eea0 <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	330a      	adds	r3, #10
 8005118:	001a      	movs	r2, r3
 800511a:	4b42      	ldr	r3, [pc, #264]	@ (8005224 <AT_Send+0x370>)
 800511c:	601a      	str	r2, [r3, #0]
    break;
 800511e:	e077      	b.n	8005210 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005120:	230f      	movs	r3, #15
 8005122:	18fc      	adds	r4, r7, r3
 8005124:	f7ff fc94 	bl	8004a50 <HTTPCPOST>
 8005128:	0003      	movs	r3, r0
 800512a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800512c:	f009 feb8 	bl	800eea0 <HAL_GetTick>
 8005130:	0003      	movs	r3, r0
 8005132:	33f5      	adds	r3, #245	@ 0xf5
 8005134:	33ff      	adds	r3, #255	@ 0xff
 8005136:	001a      	movs	r2, r3
 8005138:	4b3a      	ldr	r3, [pc, #232]	@ (8005224 <AT_Send+0x370>)
 800513a:	601a      	str	r2, [r3, #0]
    break;
 800513c:	e068      	b.n	8005210 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800513e:	4a48      	ldr	r2, [pc, #288]	@ (8005260 <AT_Send+0x3ac>)
 8005140:	4b3a      	ldr	r3, [pc, #232]	@ (800522c <AT_Send+0x378>)
 8005142:	0019      	movs	r1, r3
 8005144:	2003      	movs	r0, #3
 8005146:	f009 fa6b 	bl	800e620 <CreateLine>
    ATCommandSend = SENDDATA();
 800514a:	230f      	movs	r3, #15
 800514c:	18fc      	adds	r4, r7, r3
 800514e:	f7ff fcdf 	bl	8004b10 <SENDDATA>
 8005152:	0003      	movs	r3, r0
 8005154:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005156:	f009 fea3 	bl	800eea0 <HAL_GetTick>
 800515a:	0003      	movs	r3, r0
 800515c:	33f5      	adds	r3, #245	@ 0xf5
 800515e:	33ff      	adds	r3, #255	@ 0xff
 8005160:	001a      	movs	r2, r3
 8005162:	4b30      	ldr	r3, [pc, #192]	@ (8005224 <AT_Send+0x370>)
 8005164:	601a      	str	r2, [r3, #0]
    break;
 8005166:	e053      	b.n	8005210 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005168:	4a3e      	ldr	r2, [pc, #248]	@ (8005264 <AT_Send+0x3b0>)
 800516a:	4b30      	ldr	r3, [pc, #192]	@ (800522c <AT_Send+0x378>)
 800516c:	0019      	movs	r1, r3
 800516e:	2003      	movs	r0, #3
 8005170:	f009 fa56 	bl	800e620 <CreateLine>
    ATCommandSend = SLEEP();
 8005174:	230f      	movs	r3, #15
 8005176:	18fc      	adds	r4, r7, r3
 8005178:	f7ff fce6 	bl	8004b48 <SLEEP>
 800517c:	0003      	movs	r3, r0
 800517e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005180:	f009 fe8e 	bl	800eea0 <HAL_GetTick>
 8005184:	0003      	movs	r3, r0
 8005186:	330a      	adds	r3, #10
 8005188:	001a      	movs	r2, r3
 800518a:	4b26      	ldr	r3, [pc, #152]	@ (8005224 <AT_Send+0x370>)
 800518c:	601a      	str	r2, [r3, #0]
    break;
 800518e:	e03f      	b.n	8005210 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8005190:	4a35      	ldr	r2, [pc, #212]	@ (8005268 <AT_Send+0x3b4>)
 8005192:	4b26      	ldr	r3, [pc, #152]	@ (800522c <AT_Send+0x378>)
 8005194:	0019      	movs	r1, r3
 8005196:	2003      	movs	r0, #3
 8005198:	f009 fa42 	bl	800e620 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 800519c:	230f      	movs	r3, #15
 800519e:	18fc      	adds	r4, r7, r3
 80051a0:	f7ff fcee 	bl	8004b80 <CIPSNTPCFG>
 80051a4:	0003      	movs	r3, r0
 80051a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051a8:	f009 fe7a 	bl	800eea0 <HAL_GetTick>
 80051ac:	0003      	movs	r3, r0
 80051ae:	330a      	adds	r3, #10
 80051b0:	001a      	movs	r2, r3
 80051b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005224 <AT_Send+0x370>)
 80051b4:	601a      	str	r2, [r3, #0]
    break;
 80051b6:	e02b      	b.n	8005210 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80051b8:	4a2c      	ldr	r2, [pc, #176]	@ (800526c <AT_Send+0x3b8>)
 80051ba:	4b1c      	ldr	r3, [pc, #112]	@ (800522c <AT_Send+0x378>)
 80051bc:	0019      	movs	r1, r3
 80051be:	2003      	movs	r0, #3
 80051c0:	f009 fa2e 	bl	800e620 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80051c4:	230f      	movs	r3, #15
 80051c6:	18fc      	adds	r4, r7, r3
 80051c8:	f7ff fcfa 	bl	8004bc0 <CIPSNTPTIME>
 80051cc:	0003      	movs	r3, r0
 80051ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051d0:	f009 fe66 	bl	800eea0 <HAL_GetTick>
 80051d4:	0003      	movs	r3, r0
 80051d6:	33f5      	adds	r3, #245	@ 0xf5
 80051d8:	33ff      	adds	r3, #255	@ 0xff
 80051da:	001a      	movs	r2, r3
 80051dc:	4b11      	ldr	r3, [pc, #68]	@ (8005224 <AT_Send+0x370>)
 80051de:	601a      	str	r2, [r3, #0]
    break;
 80051e0:	e016      	b.n	8005210 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80051e2:	4a23      	ldr	r2, [pc, #140]	@ (8005270 <AT_Send+0x3bc>)
 80051e4:	4b11      	ldr	r3, [pc, #68]	@ (800522c <AT_Send+0x378>)
 80051e6:	0019      	movs	r1, r3
 80051e8:	2003      	movs	r0, #3
 80051ea:	f009 fa19 	bl	800e620 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80051ee:	230f      	movs	r3, #15
 80051f0:	18fc      	adds	r4, r7, r3
 80051f2:	f7ff fd01 	bl	8004bf8 <CIPSNTPINTV>
 80051f6:	0003      	movs	r3, r0
 80051f8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051fa:	f009 fe51 	bl	800eea0 <HAL_GetTick>
 80051fe:	0003      	movs	r3, r0
 8005200:	330a      	adds	r3, #10
 8005202:	001a      	movs	r2, r3
 8005204:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <AT_Send+0x370>)
 8005206:	601a      	str	r2, [r3, #0]
    break;
 8005208:	e002      	b.n	8005210 <AT_Send+0x35c>

  case AT_END:
    break;
 800520a:	46c0      	nop			@ (mov r8, r8)
 800520c:	e000      	b.n	8005210 <AT_Send+0x35c>
  break;
 800520e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005210:	230f      	movs	r3, #15
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	781b      	ldrb	r3, [r3, #0]
}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b005      	add	sp, #20
 800521c:	bd90      	pop	{r4, r7, pc}
 800521e:	46c0      	nop			@ (mov r8, r8)
 8005220:	080254ec 	.word	0x080254ec
 8005224:	20000a08 	.word	0x20000a08
 8005228:	08023a88 	.word	0x08023a88
 800522c:	080232c8 	.word	0x080232c8
 8005230:	08023a94 	.word	0x08023a94
 8005234:	08023aa8 	.word	0x08023aa8
 8005238:	08023abc 	.word	0x08023abc
 800523c:	08023acc 	.word	0x08023acc
 8005240:	08023ae0 	.word	0x08023ae0
 8005244:	08023af8 	.word	0x08023af8
 8005248:	08023b10 	.word	0x08023b10
 800524c:	08023b28 	.word	0x08023b28
 8005250:	08023b3c 	.word	0x08023b3c
 8005254:	08023b58 	.word	0x08023b58
 8005258:	08023b74 	.word	0x08023b74
 800525c:	08023b90 	.word	0x08023b90
 8005260:	08023bac 	.word	0x08023bac
 8005264:	08023bbc 	.word	0x08023bbc
 8005268:	08023be0 	.word	0x08023be0
 800526c:	08023bf4 	.word	0x08023bf4
 8005270:	08023c0c 	.word	0x08023c0c

08005274 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800527a:	1dfb      	adds	r3, r7, #7
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005280:	4b7d      	ldr	r3, [pc, #500]	@ (8005478 <ESP_WakeTest+0x204>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b05      	cmp	r3, #5
 8005286:	d900      	bls.n	800528a <ESP_WakeTest+0x16>
 8005288:	e0d9      	b.n	800543e <ESP_WakeTest+0x1ca>
 800528a:	009a      	lsls	r2, r3, #2
 800528c:	4b7b      	ldr	r3, [pc, #492]	@ (800547c <ESP_WakeTest+0x208>)
 800528e:	18d3      	adds	r3, r2, r3
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005294:	4b7a      	ldr	r3, [pc, #488]	@ (8005480 <ESP_WakeTest+0x20c>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	4053      	eors	r3, r2
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d036      	beq.n	8005310 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4877      	ldr	r0, [pc, #476]	@ (8005484 <ESP_WakeTest+0x210>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	0019      	movs	r1, r3
 80052ac:	f00b f889 	bl	80103c2 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80052b0:	2032      	movs	r0, #50	@ 0x32
 80052b2:	f009 fdff 	bl	800eeb4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	4872      	ldr	r0, [pc, #456]	@ (8005484 <ESP_WakeTest+0x210>)
 80052bc:	2201      	movs	r2, #1
 80052be:	0019      	movs	r1, r3
 80052c0:	f00b f87f 	bl	80103c2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052c4:	200a      	movs	r0, #10
 80052c6:	f009 fdf5 	bl	800eeb4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005488 <ESP_WakeTest+0x214>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	2101      	movs	r1, #1
 80052d0:	0018      	movs	r0, r3
 80052d2:	f00b f876 	bl	80103c2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052d6:	200a      	movs	r0, #10
 80052d8:	f009 fdec 	bl	800eeb4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005488 <ESP_WakeTest+0x214>)
 80052de:	2201      	movs	r2, #1
 80052e0:	2102      	movs	r1, #2
 80052e2:	0018      	movs	r0, r3
 80052e4:	f00b f86d 	bl	80103c2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052e8:	200a      	movs	r0, #10
 80052ea:	f009 fde3 	bl	800eeb4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052ee:	4b66      	ldr	r3, [pc, #408]	@ (8005488 <ESP_WakeTest+0x214>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	2101      	movs	r1, #1
 80052f4:	0018      	movs	r0, r3
 80052f6:	f00b f864 	bl	80103c2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80052fa:	f009 fdd1 	bl	800eea0 <HAL_GetTick>
 80052fe:	0003      	movs	r3, r0
 8005300:	22af      	movs	r2, #175	@ 0xaf
 8005302:	0092      	lsls	r2, r2, #2
 8005304:	189a      	adds	r2, r3, r2
 8005306:	4b61      	ldr	r3, [pc, #388]	@ (800548c <ESP_WakeTest+0x218>)
 8005308:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800530a:	4b5d      	ldr	r3, [pc, #372]	@ (8005480 <ESP_WakeTest+0x20c>)
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005310:	2380      	movs	r3, #128	@ 0x80
 8005312:	005a      	lsls	r2, r3, #1
 8005314:	4b5e      	ldr	r3, [pc, #376]	@ (8005490 <ESP_WakeTest+0x21c>)
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f7fe fc4b 	bl	8003bb4 <ESP_Receive>
 800531e:	1e03      	subs	r3, r0, #0
 8005320:	d100      	bne.n	8005324 <ESP_WakeTest+0xb0>
 8005322:	e09f      	b.n	8005464 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005324:	4b54      	ldr	r3, [pc, #336]	@ (8005478 <ESP_WakeTest+0x204>)
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
      }
      break;
 800532a:	e09b      	b.n	8005464 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 800532c:	4b57      	ldr	r3, [pc, #348]	@ (800548c <ESP_WakeTest+0x218>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0018      	movs	r0, r3
 8005332:	f009 f91f 	bl	800e574 <TimestampIsReached>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d100      	bne.n	800533c <ESP_WakeTest+0xc8>
 800533a:	e095      	b.n	8005468 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 800533c:	4b55      	ldr	r3, [pc, #340]	@ (8005494 <ESP_WakeTest+0x220>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	1dfc      	adds	r4, r7, #7
 8005342:	0018      	movs	r0, r3
 8005344:	f7ff fdb6 	bl	8004eb4 <AT_Send>
 8005348:	0003      	movs	r3, r0
 800534a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800534c:	1dfb      	adds	r3, r7, #7
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d100      	bne.n	8005356 <ESP_WakeTest+0xe2>
 8005354:	e088      	b.n	8005468 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005356:	4b48      	ldr	r3, [pc, #288]	@ (8005478 <ESP_WakeTest+0x204>)
 8005358:	2202      	movs	r2, #2
 800535a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800535c:	e084      	b.n	8005468 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800535e:	4b4b      	ldr	r3, [pc, #300]	@ (800548c <ESP_WakeTest+0x218>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	0018      	movs	r0, r3
 8005364:	f009 f906 	bl	800e574 <TimestampIsReached>
 8005368:	1e03      	subs	r3, r0, #0
 800536a:	d100      	bne.n	800536e <ESP_WakeTest+0xfa>
 800536c:	e07e      	b.n	800546c <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800536e:	4b4a      	ldr	r3, [pc, #296]	@ (8005498 <ESP_WakeTest+0x224>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	0018      	movs	r0, r3
 8005374:	f7ff fc5c 	bl	8004c30 <DMA_ProcessBuffer>
 8005378:	0003      	movs	r3, r0
 800537a:	001a      	movs	r2, r3
 800537c:	4b47      	ldr	r3, [pc, #284]	@ (800549c <ESP_WakeTest+0x228>)
 800537e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005380:	4b46      	ldr	r3, [pc, #280]	@ (800549c <ESP_WakeTest+0x228>)
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	4b44      	ldr	r3, [pc, #272]	@ (8005498 <ESP_WakeTest+0x224>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	1dbc      	adds	r4, r7, #6
 800538a:	0019      	movs	r1, r3
 800538c:	0010      	movs	r0, r2
 800538e:	f7ff fd4f 	bl	8004e30 <ATCompare>
 8005392:	0003      	movs	r3, r0
 8005394:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005396:	4b41      	ldr	r3, [pc, #260]	@ (800549c <ESP_WakeTest+0x228>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d102      	bne.n	80053a4 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800539e:	4b36      	ldr	r3, [pc, #216]	@ (8005478 <ESP_WakeTest+0x204>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80053a4:	4b3d      	ldr	r3, [pc, #244]	@ (800549c <ESP_WakeTest+0x228>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b07      	cmp	r3, #7
 80053aa:	d104      	bne.n	80053b6 <ESP_WakeTest+0x142>
          StartProg();
 80053ac:	f7fe ff40 	bl	8004230 <StartProg>
          TestState = ESP_TEST_BOOT;
 80053b0:	4b31      	ldr	r3, [pc, #196]	@ (8005478 <ESP_WakeTest+0x204>)
 80053b2:	2205      	movs	r2, #5
 80053b4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80053b6:	4b39      	ldr	r3, [pc, #228]	@ (800549c <ESP_WakeTest+0x228>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d109      	bne.n	80053d2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80053be:	f009 fd6f 	bl	800eea0 <HAL_GetTick>
 80053c2:	0003      	movs	r3, r0
 80053c4:	3332      	adds	r3, #50	@ 0x32
 80053c6:	001a      	movs	r2, r3
 80053c8:	4b30      	ldr	r3, [pc, #192]	@ (800548c <ESP_WakeTest+0x218>)
 80053ca:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80053cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005478 <ESP_WakeTest+0x204>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80053d2:	1dbb      	adds	r3, r7, #6
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d048      	beq.n	800546c <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80053da:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <ESP_WakeTest+0x204>)
 80053dc:	2203      	movs	r2, #3
 80053de:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80053e0:	e044      	b.n	800546c <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80053e2:	4b2f      	ldr	r3, [pc, #188]	@ (80054a0 <ESP_WakeTest+0x22c>)
 80053e4:	22fa      	movs	r2, #250	@ 0xfa
 80053e6:	0112      	lsls	r2, r2, #4
 80053e8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80053ea:	f007 fe9b 	bl	800d124 <Calculate_LED_ON>
 80053ee:	0003      	movs	r3, r0
 80053f0:	001a      	movs	r2, r3
 80053f2:	4b2b      	ldr	r3, [pc, #172]	@ (80054a0 <ESP_WakeTest+0x22c>)
 80053f4:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80053f6:	4b2a      	ldr	r3, [pc, #168]	@ (80054a0 <ESP_WakeTest+0x22c>)
 80053f8:	22fa      	movs	r2, #250	@ 0xfa
 80053fa:	0112      	lsls	r2, r2, #4
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80053fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005478 <ESP_WakeTest+0x204>)
 8005400:	2204      	movs	r2, #4
 8005402:	701a      	strb	r2, [r3, #0]

      break;
 8005404:	e033      	b.n	800546e <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005406:	4b27      	ldr	r3, [pc, #156]	@ (80054a4 <ESP_WakeTest+0x230>)
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800540c:	4b1c      	ldr	r3, [pc, #112]	@ (8005480 <ESP_WakeTest+0x20c>)
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005412:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <ESP_WakeTest+0x214>)
 8005414:	2200      	movs	r2, #0
 8005416:	2101      	movs	r1, #1
 8005418:	0018      	movs	r0, r3
 800541a:	f00a ffd2 	bl	80103c2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800541e:	2380      	movs	r3, #128	@ 0x80
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	4818      	ldr	r0, [pc, #96]	@ (8005484 <ESP_WakeTest+0x210>)
 8005424:	2200      	movs	r2, #0
 8005426:	0019      	movs	r1, r3
 8005428:	f00a ffcb 	bl	80103c2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800542c:	4b16      	ldr	r3, [pc, #88]	@ (8005488 <ESP_WakeTest+0x214>)
 800542e:	2200      	movs	r2, #0
 8005430:	2102      	movs	r1, #2
 8005432:	0018      	movs	r0, r3
 8005434:	f00a ffc5 	bl	80103c2 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005438:	f003 f834 	bl	80084a4 <SetESPMeasurementDone>
      break;
 800543c:	e017      	b.n	800546e <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800543e:	4b0e      	ldr	r3, [pc, #56]	@ (8005478 <ESP_WakeTest+0x204>)
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
      break;
 8005444:	e013      	b.n	800546e <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8005446:	4b16      	ldr	r3, [pc, #88]	@ (80054a0 <ESP_WakeTest+0x22c>)
 8005448:	22fa      	movs	r2, #250	@ 0xfa
 800544a:	0112      	lsls	r2, r2, #4
 800544c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800544e:	4b14      	ldr	r3, [pc, #80]	@ (80054a0 <ESP_WakeTest+0x22c>)
 8005450:	22fa      	movs	r2, #250	@ 0xfa
 8005452:	0112      	lsls	r2, r2, #4
 8005454:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005456:	f007 fe65 	bl	800d124 <Calculate_LED_ON>
 800545a:	0003      	movs	r3, r0
 800545c:	001a      	movs	r2, r3
 800545e:	4b10      	ldr	r3, [pc, #64]	@ (80054a0 <ESP_WakeTest+0x22c>)
 8005460:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005462:	e004      	b.n	800546e <ESP_WakeTest+0x1fa>
      break;
 8005464:	46c0      	nop			@ (mov r8, r8)
 8005466:	e002      	b.n	800546e <ESP_WakeTest+0x1fa>
      break;
 8005468:	46c0      	nop			@ (mov r8, r8)
 800546a:	e000      	b.n	800546e <ESP_WakeTest+0x1fa>
      break;
 800546c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b003      	add	sp, #12
 8005474:	bd90      	pop	{r4, r7, pc}
 8005476:	46c0      	nop			@ (mov r8, r8)
 8005478:	20000a10 	.word	0x20000a10
 800547c:	08025540 	.word	0x08025540
 8005480:	20000550 	.word	0x20000550
 8005484:	50000800 	.word	0x50000800
 8005488:	50001c00 	.word	0x50001c00
 800548c:	20000a08 	.word	0x20000a08
 8005490:	20000450 	.word	0x20000450
 8005494:	20000a0e 	.word	0x20000a0e
 8005498:	20000a0d 	.word	0x20000a0d
 800549c:	20000031 	.word	0x20000031
 80054a0:	40000400 	.word	0x40000400
 80054a4:	20000000 	.word	0x20000000

080054a8 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80054a8:	b5b0      	push	{r4, r5, r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80054ae:	1dfb      	adds	r3, r7, #7
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80054b4:	4be2      	ldr	r3, [pc, #904]	@ (8005840 <ESP_Upkeep+0x398>)
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	4be2      	ldr	r3, [pc, #904]	@ (8005844 <ESP_Upkeep+0x39c>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d024      	beq.n	800550a <ESP_Upkeep+0x62>
 80054c0:	f009 f928 	bl	800e714 <GetVerboseLevel>
 80054c4:	0003      	movs	r3, r0
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d11f      	bne.n	800550a <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80054ca:	4bdd      	ldr	r3, [pc, #884]	@ (8005840 <ESP_Upkeep+0x398>)
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	4bdd      	ldr	r3, [pc, #884]	@ (8005844 <ESP_Upkeep+0x39c>)
 80054d0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80054d2:	4bdc      	ldr	r3, [pc, #880]	@ (8005844 <ESP_Upkeep+0x39c>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d103      	bne.n	80054e2 <ESP_Upkeep+0x3a>
 80054da:	4bdb      	ldr	r3, [pc, #876]	@ (8005848 <ESP_Upkeep+0x3a0>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b0e      	cmp	r3, #14
 80054e0:	d013      	beq.n	800550a <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80054e2:	4bd8      	ldr	r3, [pc, #864]	@ (8005844 <ESP_Upkeep+0x39c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	001d      	movs	r5, r3
 80054e8:	4bd7      	ldr	r3, [pc, #860]	@ (8005848 <ESP_Upkeep+0x3a0>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	0018      	movs	r0, r3
 80054ee:	4bd7      	ldr	r3, [pc, #860]	@ (800584c <ESP_Upkeep+0x3a4>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	001c      	movs	r4, r3
 80054f4:	4bd6      	ldr	r3, [pc, #856]	@ (8005850 <ESP_Upkeep+0x3a8>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	4ad6      	ldr	r2, [pc, #856]	@ (8005854 <ESP_Upkeep+0x3ac>)
 80054fa:	49d7      	ldr	r1, [pc, #860]	@ (8005858 <ESP_Upkeep+0x3b0>)
 80054fc:	9302      	str	r3, [sp, #8]
 80054fe:	9401      	str	r4, [sp, #4]
 8005500:	9000      	str	r0, [sp, #0]
 8005502:	002b      	movs	r3, r5
 8005504:	2003      	movs	r0, #3
 8005506:	f009 f88b 	bl	800e620 <CreateLine>
    }
  }
  switch (EspState) {
 800550a:	4bcd      	ldr	r3, [pc, #820]	@ (8005840 <ESP_Upkeep+0x398>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b0f      	cmp	r3, #15
 8005510:	d901      	bls.n	8005516 <ESP_Upkeep+0x6e>
 8005512:	f000 fc32 	bl	8005d7a <ESP_Upkeep+0x8d2>
 8005516:	009a      	lsls	r2, r3, #2
 8005518:	4bd0      	ldr	r3, [pc, #832]	@ (800585c <ESP_Upkeep+0x3b4>)
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005520:	4bc7      	ldr	r3, [pc, #796]	@ (8005840 <ESP_Upkeep+0x398>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
      break;
 8005526:	f000 fc41 	bl	8005dac <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 800552a:	f003 fa1b 	bl	8008964 <DisableConnectedDevices>
      SetESPIndicator();
 800552e:	f007 ff8b 	bl	800d448 <SetESPIndicator>
      if(!EspTurnedOn){
 8005532:	4bcb      	ldr	r3, [pc, #812]	@ (8005860 <ESP_Upkeep+0x3b8>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2201      	movs	r2, #1
 8005538:	4053      	eors	r3, r2
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d036      	beq.n	80055ae <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	48c7      	ldr	r0, [pc, #796]	@ (8005864 <ESP_Upkeep+0x3bc>)
 8005546:	2200      	movs	r2, #0
 8005548:	0019      	movs	r1, r3
 800554a:	f00a ff3a 	bl	80103c2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800554e:	2001      	movs	r0, #1
 8005550:	f009 fcb0 	bl	800eeb4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005554:	2380      	movs	r3, #128	@ 0x80
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	48c2      	ldr	r0, [pc, #776]	@ (8005864 <ESP_Upkeep+0x3bc>)
 800555a:	2201      	movs	r2, #1
 800555c:	0019      	movs	r1, r3
 800555e:	f00a ff30 	bl	80103c2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005562:	2001      	movs	r0, #1
 8005564:	f009 fca6 	bl	800eeb4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005568:	4bbf      	ldr	r3, [pc, #764]	@ (8005868 <ESP_Upkeep+0x3c0>)
 800556a:	2200      	movs	r2, #0
 800556c:	2101      	movs	r1, #1
 800556e:	0018      	movs	r0, r3
 8005570:	f00a ff27 	bl	80103c2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005574:	2001      	movs	r0, #1
 8005576:	f009 fc9d 	bl	800eeb4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800557a:	4bbb      	ldr	r3, [pc, #748]	@ (8005868 <ESP_Upkeep+0x3c0>)
 800557c:	2201      	movs	r2, #1
 800557e:	2102      	movs	r1, #2
 8005580:	0018      	movs	r0, r3
 8005582:	f00a ff1e 	bl	80103c2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005586:	2001      	movs	r0, #1
 8005588:	f009 fc94 	bl	800eeb4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800558c:	4bb6      	ldr	r3, [pc, #728]	@ (8005868 <ESP_Upkeep+0x3c0>)
 800558e:	2201      	movs	r2, #1
 8005590:	2101      	movs	r1, #1
 8005592:	0018      	movs	r0, r3
 8005594:	f00a ff15 	bl	80103c2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005598:	f009 fc82 	bl	800eea0 <HAL_GetTick>
 800559c:	0003      	movs	r3, r0
 800559e:	22af      	movs	r2, #175	@ 0xaf
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	189a      	adds	r2, r3, r2
 80055a4:	4bb1      	ldr	r3, [pc, #708]	@ (800586c <ESP_Upkeep+0x3c4>)
 80055a6:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80055a8:	4bad      	ldr	r3, [pc, #692]	@ (8005860 <ESP_Upkeep+0x3b8>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80055ae:	2380      	movs	r3, #128	@ 0x80
 80055b0:	005a      	lsls	r2, r3, #1
 80055b2:	4baf      	ldr	r3, [pc, #700]	@ (8005870 <ESP_Upkeep+0x3c8>)
 80055b4:	0011      	movs	r1, r2
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7fe fafc 	bl	8003bb4 <ESP_Receive>
 80055bc:	1e03      	subs	r3, r0, #0
 80055be:	d101      	bne.n	80055c4 <ESP_Upkeep+0x11c>
 80055c0:	f000 fbe7 	bl	8005d92 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80055c4:	4b9e      	ldr	r3, [pc, #632]	@ (8005840 <ESP_Upkeep+0x398>)
 80055c6:	220f      	movs	r2, #15
 80055c8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80055ca:	f009 fc69 	bl	800eea0 <HAL_GetTick>
 80055ce:	0003      	movs	r3, r0
 80055d0:	22fa      	movs	r2, #250	@ 0xfa
 80055d2:	00d2      	lsls	r2, r2, #3
 80055d4:	189a      	adds	r2, r3, r2
 80055d6:	4ba7      	ldr	r3, [pc, #668]	@ (8005874 <ESP_Upkeep+0x3cc>)
 80055d8:	601a      	str	r2, [r3, #0]
      }
      break;
 80055da:	f000 fbda 	bl	8005d92 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80055de:	2001      	movs	r0, #1
 80055e0:	f7ff fb26 	bl	8004c30 <DMA_ProcessBuffer>
 80055e4:	0003      	movs	r3, r0
 80055e6:	001a      	movs	r2, r3
 80055e8:	4ba3      	ldr	r3, [pc, #652]	@ (8005878 <ESP_Upkeep+0x3d0>)
 80055ea:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80055ec:	4ba2      	ldr	r3, [pc, #648]	@ (8005878 <ESP_Upkeep+0x3d0>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	1dbc      	adds	r4, r7, #6
 80055f2:	2101      	movs	r1, #1
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7ff fc1b 	bl	8004e30 <ATCompare>
 80055fa:	0003      	movs	r3, r0
 80055fc:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80055fe:	1dbb      	adds	r3, r7, #6
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <ESP_Upkeep+0x170>
 8005606:	4b9b      	ldr	r3, [pc, #620]	@ (8005874 <ESP_Upkeep+0x3cc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	0018      	movs	r0, r3
 800560c:	f008 ffb2 	bl	800e574 <TimestampIsReached>
 8005610:	1e03      	subs	r3, r0, #0
 8005612:	d101      	bne.n	8005618 <ESP_Upkeep+0x170>
 8005614:	f000 fbbf 	bl	8005d96 <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 8005618:	4b89      	ldr	r3, [pc, #548]	@ (8005840 <ESP_Upkeep+0x398>)
 800561a:	220b      	movs	r2, #11
 800561c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800561e:	f000 fbba 	bl	8005d96 <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8005622:	4b96      	ldr	r3, [pc, #600]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005624:	2209      	movs	r2, #9
 8005626:	2114      	movs	r1, #20
 8005628:	0018      	movs	r0, r3
 800562a:	f01a fe91 	bl	8020350 <memset>
      if(!InitIsDone || WifiReset){
 800562e:	4b94      	ldr	r3, [pc, #592]	@ (8005880 <ESP_Upkeep+0x3d8>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2201      	movs	r2, #1
 8005634:	4053      	eors	r3, r2
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <ESP_Upkeep+0x19c>
 800563c:	4b91      	ldr	r3, [pc, #580]	@ (8005884 <ESP_Upkeep+0x3dc>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01a      	beq.n	800567a <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005644:	4b8d      	ldr	r3, [pc, #564]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005646:	4a90      	ldr	r2, [pc, #576]	@ (8005888 <ESP_Upkeep+0x3e0>)
 8005648:	6811      	ldr	r1, [r2, #0]
 800564a:	6019      	str	r1, [r3, #0]
 800564c:	8891      	ldrh	r1, [r2, #4]
 800564e:	8099      	strh	r1, [r3, #4]
 8005650:	7992      	ldrb	r2, [r2, #6]
 8005652:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005654:	4b7a      	ldr	r3, [pc, #488]	@ (8005840 <ESP_Upkeep+0x398>)
 8005656:	2204      	movs	r2, #4
 8005658:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800565a:	4b8c      	ldr	r3, [pc, #560]	@ (800588c <ESP_Upkeep+0x3e4>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005660:	4b7a      	ldr	r3, [pc, #488]	@ (800584c <ESP_Upkeep+0x3a4>)
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005666:	4b89      	ldr	r3, [pc, #548]	@ (800588c <ESP_Upkeep+0x3e4>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	001a      	movs	r2, r3
 800566c:	4b83      	ldr	r3, [pc, #524]	@ (800587c <ESP_Upkeep+0x3d4>)
 800566e:	5c9a      	ldrb	r2, [r3, r2]
 8005670:	4b75      	ldr	r3, [pc, #468]	@ (8005848 <ESP_Upkeep+0x3a0>)
 8005672:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005674:	4b76      	ldr	r3, [pc, #472]	@ (8005850 <ESP_Upkeep+0x3a8>)
 8005676:	2200      	movs	r2, #0
 8005678:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800567a:	4b81      	ldr	r3, [pc, #516]	@ (8005880 <ESP_Upkeep+0x3d8>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d01f      	beq.n	80056c2 <ESP_Upkeep+0x21a>
 8005682:	4b83      	ldr	r3, [pc, #524]	@ (8005890 <ESP_Upkeep+0x3e8>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2201      	movs	r2, #1
 8005688:	4053      	eors	r3, r2
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d018      	beq.n	80056c2 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005690:	4b7a      	ldr	r3, [pc, #488]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005692:	4a80      	ldr	r2, [pc, #512]	@ (8005894 <ESP_Upkeep+0x3ec>)
 8005694:	6811      	ldr	r1, [r2, #0]
 8005696:	6019      	str	r1, [r3, #0]
 8005698:	8892      	ldrh	r2, [r2, #4]
 800569a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800569c:	4b68      	ldr	r3, [pc, #416]	@ (8005840 <ESP_Upkeep+0x398>)
 800569e:	2204      	movs	r2, #4
 80056a0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056a2:	4b7a      	ldr	r3, [pc, #488]	@ (800588c <ESP_Upkeep+0x3e4>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80056a8:	4b68      	ldr	r3, [pc, #416]	@ (800584c <ESP_Upkeep+0x3a4>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056ae:	4b77      	ldr	r3, [pc, #476]	@ (800588c <ESP_Upkeep+0x3e4>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	001a      	movs	r2, r3
 80056b4:	4b71      	ldr	r3, [pc, #452]	@ (800587c <ESP_Upkeep+0x3d4>)
 80056b6:	5c9a      	ldrb	r2, [r3, r2]
 80056b8:	4b63      	ldr	r3, [pc, #396]	@ (8005848 <ESP_Upkeep+0x3a0>)
 80056ba:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056bc:	4b64      	ldr	r3, [pc, #400]	@ (8005850 <ESP_Upkeep+0x3a8>)
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80056c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005880 <ESP_Upkeep+0x3d8>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d021      	beq.n	800570e <ESP_Upkeep+0x266>
 80056ca:	4b71      	ldr	r3, [pc, #452]	@ (8005890 <ESP_Upkeep+0x3e8>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01d      	beq.n	800570e <ESP_Upkeep+0x266>
 80056d2:	4b71      	ldr	r3, [pc, #452]	@ (8005898 <ESP_Upkeep+0x3f0>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2201      	movs	r2, #1
 80056d8:	4053      	eors	r3, r2
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d016      	beq.n	800570e <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80056e0:	4b6e      	ldr	r3, [pc, #440]	@ (800589c <ESP_Upkeep+0x3f4>)
 80056e2:	881a      	ldrh	r2, [r3, #0]
 80056e4:	4b65      	ldr	r3, [pc, #404]	@ (800587c <ESP_Upkeep+0x3d4>)
 80056e6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80056e8:	4b55      	ldr	r3, [pc, #340]	@ (8005840 <ESP_Upkeep+0x398>)
 80056ea:	2204      	movs	r2, #4
 80056ec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056ee:	4b67      	ldr	r3, [pc, #412]	@ (800588c <ESP_Upkeep+0x3e4>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80056f4:	4b55      	ldr	r3, [pc, #340]	@ (800584c <ESP_Upkeep+0x3a4>)
 80056f6:	2204      	movs	r2, #4
 80056f8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056fa:	4b64      	ldr	r3, [pc, #400]	@ (800588c <ESP_Upkeep+0x3e4>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	001a      	movs	r2, r3
 8005700:	4b5e      	ldr	r3, [pc, #376]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005702:	5c9a      	ldrb	r2, [r3, r2]
 8005704:	4b50      	ldr	r3, [pc, #320]	@ (8005848 <ESP_Upkeep+0x3a0>)
 8005706:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005708:	4b51      	ldr	r3, [pc, #324]	@ (8005850 <ESP_Upkeep+0x3a8>)
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800570e:	4b5c      	ldr	r3, [pc, #368]	@ (8005880 <ESP_Upkeep+0x3d8>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d02c      	beq.n	8005770 <ESP_Upkeep+0x2c8>
 8005716:	4b5e      	ldr	r3, [pc, #376]	@ (8005890 <ESP_Upkeep+0x3e8>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d028      	beq.n	8005770 <ESP_Upkeep+0x2c8>
 800571e:	4b5e      	ldr	r3, [pc, #376]	@ (8005898 <ESP_Upkeep+0x3f0>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d024      	beq.n	8005770 <ESP_Upkeep+0x2c8>
 8005726:	4b5e      	ldr	r3, [pc, #376]	@ (80058a0 <ESP_Upkeep+0x3f8>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	4053      	eors	r3, r2
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01d      	beq.n	8005770 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005734:	4b51      	ldr	r3, [pc, #324]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005736:	4a5b      	ldr	r2, [pc, #364]	@ (80058a4 <ESP_Upkeep+0x3fc>)
 8005738:	8811      	ldrh	r1, [r2, #0]
 800573a:	8019      	strh	r1, [r3, #0]
 800573c:	7892      	ldrb	r2, [r2, #2]
 800573e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005740:	4b3f      	ldr	r3, [pc, #252]	@ (8005840 <ESP_Upkeep+0x398>)
 8005742:	2204      	movs	r2, #4
 8005744:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005746:	4b51      	ldr	r3, [pc, #324]	@ (800588c <ESP_Upkeep+0x3e4>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800574c:	4b3f      	ldr	r3, [pc, #252]	@ (800584c <ESP_Upkeep+0x3a4>)
 800574e:	2202      	movs	r2, #2
 8005750:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005752:	f009 fba5 	bl	800eea0 <HAL_GetTick>
 8005756:	0002      	movs	r2, r0
 8005758:	4b53      	ldr	r3, [pc, #332]	@ (80058a8 <ESP_Upkeep+0x400>)
 800575a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800575c:	4b4b      	ldr	r3, [pc, #300]	@ (800588c <ESP_Upkeep+0x3e4>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	001a      	movs	r2, r3
 8005762:	4b46      	ldr	r3, [pc, #280]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005764:	5c9a      	ldrb	r2, [r3, r2]
 8005766:	4b38      	ldr	r3, [pc, #224]	@ (8005848 <ESP_Upkeep+0x3a0>)
 8005768:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800576a:	4b39      	ldr	r3, [pc, #228]	@ (8005850 <ESP_Upkeep+0x3a8>)
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005770:	4b43      	ldr	r3, [pc, #268]	@ (8005880 <ESP_Upkeep+0x3d8>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d027      	beq.n	80057c8 <ESP_Upkeep+0x320>
 8005778:	4b45      	ldr	r3, [pc, #276]	@ (8005890 <ESP_Upkeep+0x3e8>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d023      	beq.n	80057c8 <ESP_Upkeep+0x320>
 8005780:	4b45      	ldr	r3, [pc, #276]	@ (8005898 <ESP_Upkeep+0x3f0>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01f      	beq.n	80057c8 <ESP_Upkeep+0x320>
 8005788:	4b45      	ldr	r3, [pc, #276]	@ (80058a0 <ESP_Upkeep+0x3f8>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01b      	beq.n	80057c8 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005790:	4b46      	ldr	r3, [pc, #280]	@ (80058ac <ESP_Upkeep+0x404>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b39      	ldr	r3, [pc, #228]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005796:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005798:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <ESP_Upkeep+0x398>)
 800579a:	2204      	movs	r2, #4
 800579c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800579e:	4b3b      	ldr	r3, [pc, #236]	@ (800588c <ESP_Upkeep+0x3e4>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80057a4:	4b29      	ldr	r3, [pc, #164]	@ (800584c <ESP_Upkeep+0x3a4>)
 80057a6:	2205      	movs	r2, #5
 80057a8:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80057aa:	f009 fb79 	bl	800eea0 <HAL_GetTick>
 80057ae:	0002      	movs	r2, r0
 80057b0:	4b3d      	ldr	r3, [pc, #244]	@ (80058a8 <ESP_Upkeep+0x400>)
 80057b2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80057b4:	4b35      	ldr	r3, [pc, #212]	@ (800588c <ESP_Upkeep+0x3e4>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	001a      	movs	r2, r3
 80057ba:	4b30      	ldr	r3, [pc, #192]	@ (800587c <ESP_Upkeep+0x3d4>)
 80057bc:	5c9a      	ldrb	r2, [r3, r2]
 80057be:	4b22      	ldr	r3, [pc, #136]	@ (8005848 <ESP_Upkeep+0x3a0>)
 80057c0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057c2:	4b23      	ldr	r3, [pc, #140]	@ (8005850 <ESP_Upkeep+0x3a8>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80057c8:	4b39      	ldr	r3, [pc, #228]	@ (80058b0 <ESP_Upkeep+0x408>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d100      	bne.n	80057d2 <ESP_Upkeep+0x32a>
 80057d0:	e2e3      	b.n	8005d9a <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80057d2:	4b2a      	ldr	r3, [pc, #168]	@ (800587c <ESP_Upkeep+0x3d4>)
 80057d4:	4a37      	ldr	r2, [pc, #220]	@ (80058b4 <ESP_Upkeep+0x40c>)
 80057d6:	6811      	ldr	r1, [r2, #0]
 80057d8:	6019      	str	r1, [r3, #0]
 80057da:	7912      	ldrb	r2, [r2, #4]
 80057dc:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80057de:	4a36      	ldr	r2, [pc, #216]	@ (80058b8 <ESP_Upkeep+0x410>)
 80057e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005858 <ESP_Upkeep+0x3b0>)
 80057e2:	0019      	movs	r1, r3
 80057e4:	2003      	movs	r0, #3
 80057e6:	f008 ff1b 	bl	800e620 <CreateLine>
        DisableConnectedDevices();
 80057ea:	f003 f8bb 	bl	8008964 <DisableConnectedDevices>
        usblog = false;
 80057ee:	4b33      	ldr	r3, [pc, #204]	@ (80058bc <ESP_Upkeep+0x414>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80057f4:	4b12      	ldr	r3, [pc, #72]	@ (8005840 <ESP_Upkeep+0x398>)
 80057f6:	2204      	movs	r2, #4
 80057f8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057fa:	4b24      	ldr	r3, [pc, #144]	@ (800588c <ESP_Upkeep+0x3e4>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005800:	4b12      	ldr	r3, [pc, #72]	@ (800584c <ESP_Upkeep+0x3a4>)
 8005802:	2203      	movs	r2, #3
 8005804:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005806:	4b21      	ldr	r3, [pc, #132]	@ (800588c <ESP_Upkeep+0x3e4>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	001a      	movs	r2, r3
 800580c:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <ESP_Upkeep+0x3d4>)
 800580e:	5c9a      	ldrb	r2, [r3, r2]
 8005810:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <ESP_Upkeep+0x3a0>)
 8005812:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005814:	4b0e      	ldr	r3, [pc, #56]	@ (8005850 <ESP_Upkeep+0x3a8>)
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
      }
    break;
 800581a:	e2be      	b.n	8005d9a <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 800581c:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <ESP_Upkeep+0x3a0>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	1dfc      	adds	r4, r7, #7
 8005822:	0018      	movs	r0, r3
 8005824:	f7ff fb46 	bl	8004eb4 <AT_Send>
 8005828:	0003      	movs	r3, r0
 800582a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800582c:	1dfb      	adds	r3, r7, #7
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d100      	bne.n	8005836 <ESP_Upkeep+0x38e>
 8005834:	e2b3      	b.n	8005d9e <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005836:	4b02      	ldr	r3, [pc, #8]	@ (8005840 <ESP_Upkeep+0x398>)
 8005838:	2203      	movs	r2, #3
 800583a:	701a      	strb	r2, [r3, #0]
        }
    break;
 800583c:	e2af      	b.n	8005d9e <ESP_Upkeep+0x8f6>
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	20000030 	.word	0x20000030
 8005844:	20000002 	.word	0x20000002
 8005848:	20000a0e 	.word	0x20000a0e
 800584c:	20000a0f 	.word	0x20000a0f
 8005850:	20000a0d 	.word	0x20000a0d
 8005854:	08023c2c 	.word	0x08023c2c
 8005858:	080232c8 	.word	0x080232c8
 800585c:	08025558 	.word	0x08025558
 8005860:	20000550 	.word	0x20000550
 8005864:	50000800 	.word	0x50000800
 8005868:	50001c00 	.word	0x50001c00
 800586c:	20000a08 	.word	0x20000a08
 8005870:	20000450 	.word	0x20000450
 8005874:	20000b48 	.word	0x20000b48
 8005878:	20000032 	.word	0x20000032
 800587c:	200009f8 	.word	0x200009f8
 8005880:	20000551 	.word	0x20000551
 8005884:	20000552 	.word	0x20000552
 8005888:	20000004 	.word	0x20000004
 800588c:	20000a02 	.word	0x20000a02
 8005890:	20000554 	.word	0x20000554
 8005894:	20000014 	.word	0x20000014
 8005898:	20000555 	.word	0x20000555
 800589c:	20000010 	.word	0x20000010
 80058a0:	20000001 	.word	0x20000001
 80058a4:	2000000c 	.word	0x2000000c
 80058a8:	20000568 	.word	0x20000568
 80058ac:	20000024 	.word	0x20000024
 80058b0:	20000553 	.word	0x20000553
 80058b4:	2000001c 	.word	0x2000001c
 80058b8:	08023c58 	.word	0x08023c58
 80058bc:	200001f7 	.word	0x200001f7

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80058c0:	4bc9      	ldr	r3, [pc, #804]	@ (8005be8 <ESP_Upkeep+0x740>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <ESP_Upkeep+0x430>
 80058c8:	4bc8      	ldr	r3, [pc, #800]	@ (8005bec <ESP_Upkeep+0x744>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d003      	beq.n	80058d8 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 80058d0:	4bc7      	ldr	r3, [pc, #796]	@ (8005bf0 <ESP_Upkeep+0x748>)
 80058d2:	220b      	movs	r2, #11
 80058d4:	701a      	strb	r2, [r3, #0]
        break;
 80058d6:	e269      	b.n	8005dac <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80058d8:	4bc6      	ldr	r3, [pc, #792]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	0018      	movs	r0, r3
 80058de:	f008 fe49 	bl	800e574 <TimestampIsReached>
 80058e2:	1e03      	subs	r3, r0, #0
 80058e4:	d100      	bne.n	80058e8 <ESP_Upkeep+0x440>
 80058e6:	e25c      	b.n	8005da2 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80058e8:	4bc3      	ldr	r3, [pc, #780]	@ (8005bf8 <ESP_Upkeep+0x750>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7ff f99f 	bl	8004c30 <DMA_ProcessBuffer>
 80058f2:	0003      	movs	r3, r0
 80058f4:	001a      	movs	r2, r3
 80058f6:	4bc1      	ldr	r3, [pc, #772]	@ (8005bfc <ESP_Upkeep+0x754>)
 80058f8:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80058fa:	4bc0      	ldr	r3, [pc, #768]	@ (8005bfc <ESP_Upkeep+0x754>)
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	4bbe      	ldr	r3, [pc, #760]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	1d7c      	adds	r4, r7, #5
 8005904:	0019      	movs	r1, r3
 8005906:	0010      	movs	r0, r2
 8005908:	f7ff fa92 	bl	8004e30 <ATCompare>
 800590c:	0003      	movs	r3, r0
 800590e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005910:	4bba      	ldr	r3, [pc, #744]	@ (8005bfc <ESP_Upkeep+0x754>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d138      	bne.n	800598a <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005918:	4bb9      	ldr	r3, [pc, #740]	@ (8005c00 <ESP_Upkeep+0x758>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b0f      	cmp	r3, #15
 800591e:	d108      	bne.n	8005932 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005920:	4bb7      	ldr	r3, [pc, #732]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005922:	220e      	movs	r2, #14
 8005924:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005926:	4bb4      	ldr	r3, [pc, #720]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005928:	2202      	movs	r2, #2
 800592a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800592c:	4bb5      	ldr	r3, [pc, #724]	@ (8005c04 <ESP_Upkeep+0x75c>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005932:	4baf      	ldr	r3, [pc, #700]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005934:	2204      	movs	r2, #4
 8005936:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005938:	4bb3      	ldr	r3, [pc, #716]	@ (8005c08 <ESP_Upkeep+0x760>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	b2da      	uxtb	r2, r3
 8005940:	4bb1      	ldr	r3, [pc, #708]	@ (8005c08 <ESP_Upkeep+0x760>)
 8005942:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005944:	4bb0      	ldr	r3, [pc, #704]	@ (8005c08 <ESP_Upkeep+0x760>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d91e      	bls.n	800598a <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800594c:	f009 faa8 	bl	800eea0 <HAL_GetTick>
 8005950:	0003      	movs	r3, r0
 8005952:	4aae      	ldr	r2, [pc, #696]	@ (8005c0c <ESP_Upkeep+0x764>)
 8005954:	189a      	adds	r2, r3, r2
 8005956:	4ba7      	ldr	r3, [pc, #668]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 8005958:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800595a:	4bad      	ldr	r3, [pc, #692]	@ (8005c10 <ESP_Upkeep+0x768>)
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005960:	f7ff fa58 	bl	8004e14 <clearDMABuffer>
            stop = HAL_GetTick();
 8005964:	f009 fa9c 	bl	800eea0 <HAL_GetTick>
 8005968:	0002      	movs	r2, r0
 800596a:	4baa      	ldr	r3, [pc, #680]	@ (8005c14 <ESP_Upkeep+0x76c>)
 800596c:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 800596e:	4ba9      	ldr	r3, [pc, #676]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4ba9      	ldr	r3, [pc, #676]	@ (8005c18 <ESP_Upkeep+0x770>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	4aa8      	ldr	r2, [pc, #672]	@ (8005c1c <ESP_Upkeep+0x774>)
 800597a:	49a9      	ldr	r1, [pc, #676]	@ (8005c20 <ESP_Upkeep+0x778>)
 800597c:	2001      	movs	r0, #1
 800597e:	f008 fe4f 	bl	800e620 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005982:	4b9b      	ldr	r3, [pc, #620]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005984:	220d      	movs	r2, #13
 8005986:	701a      	strb	r2, [r3, #0]
            break;
 8005988:	e210      	b.n	8005dac <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800598a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bfc <ESP_Upkeep+0x754>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b03      	cmp	r3, #3
 8005990:	d106      	bne.n	80059a0 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005992:	f009 fa85 	bl	800eea0 <HAL_GetTick>
 8005996:	0003      	movs	r3, r0
 8005998:	330a      	adds	r3, #10
 800599a:	001a      	movs	r2, r3
 800599c:	4b95      	ldr	r3, [pc, #596]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 800599e:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80059a0:	4b96      	ldr	r3, [pc, #600]	@ (8005bfc <ESP_Upkeep+0x754>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b0a      	cmp	r3, #10
 80059a6:	d106      	bne.n	80059b6 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 80059a8:	f009 fa7a 	bl	800eea0 <HAL_GetTick>
 80059ac:	0003      	movs	r3, r0
 80059ae:	330a      	adds	r3, #10
 80059b0:	001a      	movs	r2, r3
 80059b2:	4b90      	ldr	r3, [pc, #576]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 80059b4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80059b6:	4b91      	ldr	r3, [pc, #580]	@ (8005bfc <ESP_Upkeep+0x754>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b06      	cmp	r3, #6
 80059bc:	d14b      	bne.n	8005a56 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 80059be:	4b99      	ldr	r3, [pc, #612]	@ (8005c24 <ESP_Upkeep+0x77c>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	4b97      	ldr	r3, [pc, #604]	@ (8005c24 <ESP_Upkeep+0x77c>)
 80059c8:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80059ca:	4a97      	ldr	r2, [pc, #604]	@ (8005c28 <ESP_Upkeep+0x780>)
 80059cc:	4b94      	ldr	r3, [pc, #592]	@ (8005c20 <ESP_Upkeep+0x778>)
 80059ce:	0019      	movs	r1, r3
 80059d0:	2001      	movs	r0, #1
 80059d2:	f008 fe25 	bl	800e620 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80059d6:	4b93      	ldr	r3, [pc, #588]	@ (8005c24 <ESP_Upkeep+0x77c>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d924      	bls.n	8005a28 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 80059de:	f009 fa5f 	bl	800eea0 <HAL_GetTick>
 80059e2:	0003      	movs	r3, r0
 80059e4:	4a91      	ldr	r2, [pc, #580]	@ (8005c2c <ESP_Upkeep+0x784>)
 80059e6:	189a      	adds	r2, r3, r2
 80059e8:	4b82      	ldr	r3, [pc, #520]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 80059ea:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80059ec:	4b88      	ldr	r3, [pc, #544]	@ (8005c10 <ESP_Upkeep+0x768>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80059f2:	f7ff fa0f 	bl	8004e14 <clearDMABuffer>
            stop = HAL_GetTick();
 80059f6:	f009 fa53 	bl	800eea0 <HAL_GetTick>
 80059fa:	0002      	movs	r2, r0
 80059fc:	4b85      	ldr	r3, [pc, #532]	@ (8005c14 <ESP_Upkeep+0x76c>)
 80059fe:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005a00:	4b84      	ldr	r3, [pc, #528]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b84      	ldr	r3, [pc, #528]	@ (8005c18 <ESP_Upkeep+0x770>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	4a89      	ldr	r2, [pc, #548]	@ (8005c30 <ESP_Upkeep+0x788>)
 8005a0c:	4984      	ldr	r1, [pc, #528]	@ (8005c20 <ESP_Upkeep+0x778>)
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f008 fe06 	bl	800e620 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005a14:	4b76      	ldr	r3, [pc, #472]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005a16:	220d      	movs	r2, #13
 8005a18:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005a1a:	4b79      	ldr	r3, [pc, #484]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a1c:	2214      	movs	r2, #20
 8005a1e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a20:	4b75      	ldr	r3, [pc, #468]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
            break;
 8005a26:	e1c1      	b.n	8005dac <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005a28:	4b75      	ldr	r3, [pc, #468]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d003      	beq.n	8005a38 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005a30:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005a32:	2204      	movs	r2, #4
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	e00e      	b.n	8005a56 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005a38:	4b71      	ldr	r3, [pc, #452]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a3a:	220e      	movs	r2, #14
 8005a3c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005a3e:	4b71      	ldr	r3, [pc, #452]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	4b6f      	ldr	r3, [pc, #444]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a48:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005a50:	4b67      	ldr	r3, [pc, #412]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005a52:	2204      	movs	r2, #4
 8005a54:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005a56:	1d7b      	adds	r3, r7, #5
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d100      	bne.n	8005a60 <ESP_Upkeep+0x5b8>
 8005a5e:	e1a0      	b.n	8005da2 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005a60:	4b63      	ldr	r3, [pc, #396]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005a62:	2205      	movs	r2, #5
 8005a64:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005a66:	e19c      	b.n	8005da2 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005a68:	4b66      	ldr	r3, [pc, #408]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	4b64      	ldr	r3, [pc, #400]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a72:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005a74:	4b63      	ldr	r3, [pc, #396]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	001a      	movs	r2, r3
 8005a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8005c34 <ESP_Upkeep+0x78c>)
 8005a7c:	5c9a      	ldrb	r2, [r3, r2]
 8005a7e:	4b60      	ldr	r3, [pc, #384]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a80:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005a82:	4b5f      	ldr	r3, [pc, #380]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d102      	bne.n	8005a90 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005a90:	4b5b      	ldr	r3, [pc, #364]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b0e      	cmp	r3, #14
 8005a96:	d102      	bne.n	8005a9e <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005a98:	4b57      	ldr	r3, [pc, #348]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005a9e:	4b58      	ldr	r3, [pc, #352]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b0e      	cmp	r3, #14
 8005aa4:	d006      	beq.n	8005ab4 <ESP_Upkeep+0x60c>
 8005aa6:	4b56      	ldr	r3, [pc, #344]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d002      	beq.n	8005ab4 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005aae:	4b52      	ldr	r3, [pc, #328]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005ab4:	4b52      	ldr	r3, [pc, #328]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b11      	cmp	r3, #17
 8005aba:	d102      	bne.n	8005ac2 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005abc:	4b4e      	ldr	r3, [pc, #312]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005abe:	2205      	movs	r2, #5
 8005ac0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b14      	cmp	r3, #20
 8005ace:	d000      	beq.n	8005ad2 <ESP_Upkeep+0x62a>
 8005ad0:	e169      	b.n	8005da6 <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005ad2:	4b46      	ldr	r3, [pc, #280]	@ (8005bec <ESP_Upkeep+0x744>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d124      	bne.n	8005b24 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005ada:	f009 f9e1 	bl	800eea0 <HAL_GetTick>
 8005ade:	0003      	movs	r3, r0
 8005ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8005c0c <ESP_Upkeep+0x764>)
 8005ae2:	189a      	adds	r2, r3, r2
 8005ae4:	4b43      	ldr	r3, [pc, #268]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 8005ae6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005ae8:	f7ff f994 	bl	8004e14 <clearDMABuffer>
          stop = HAL_GetTick();
 8005aec:	f009 f9d8 	bl	800eea0 <HAL_GetTick>
 8005af0:	0002      	movs	r2, r0
 8005af2:	4b48      	ldr	r3, [pc, #288]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005af4:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005af6:	4b47      	ldr	r3, [pc, #284]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b47      	ldr	r3, [pc, #284]	@ (8005c18 <ESP_Upkeep+0x770>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	4a4d      	ldr	r2, [pc, #308]	@ (8005c38 <ESP_Upkeep+0x790>)
 8005b02:	494e      	ldr	r1, [pc, #312]	@ (8005c3c <ESP_Upkeep+0x794>)
 8005b04:	2002      	movs	r0, #2
 8005b06:	f008 fd8b 	bl	800e620 <CreateLine>
          ResetdBAmax();
 8005b0a:	f002 ff49 	bl	80089a0 <ResetdBAmax>
          sen5xResetMax();
 8005b0e:	f003 fead 	bl	800986c <sen5xResetMax>
          showTime();
 8005b12:	f000 fcdf 	bl	80064d4 <showTime>
          ESPTransmitDone = true;
 8005b16:	4b3e      	ldr	r3, [pc, #248]	@ (8005c10 <ESP_Upkeep+0x768>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005b1c:	4b34      	ldr	r3, [pc, #208]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005b1e:	220d      	movs	r2, #13
 8005b20:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005b22:	e140      	b.n	8005da6 <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005b24:	4b31      	ldr	r3, [pc, #196]	@ (8005bec <ESP_Upkeep+0x744>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d12c      	bne.n	8005b86 <ESP_Upkeep+0x6de>
            setTime = false;
 8005b2c:	4b44      	ldr	r3, [pc, #272]	@ (8005c40 <ESP_Upkeep+0x798>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005b32:	f009 f9b5 	bl	800eea0 <HAL_GetTick>
 8005b36:	0003      	movs	r3, r0
 8005b38:	4a42      	ldr	r2, [pc, #264]	@ (8005c44 <ESP_Upkeep+0x79c>)
 8005b3a:	189a      	adds	r2, r3, r2
 8005b3c:	4b42      	ldr	r3, [pc, #264]	@ (8005c48 <ESP_Upkeep+0x7a0>)
 8005b3e:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005b40:	4b41      	ldr	r3, [pc, #260]	@ (8005c48 <ESP_Upkeep+0x7a0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a41      	ldr	r2, [pc, #260]	@ (8005c4c <ESP_Upkeep+0x7a4>)
 8005b46:	493d      	ldr	r1, [pc, #244]	@ (8005c3c <ESP_Upkeep+0x794>)
 8005b48:	2002      	movs	r0, #2
 8005b4a:	f008 fd69 	bl	800e620 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005b4e:	4b40      	ldr	r3, [pc, #256]	@ (8005c50 <ESP_Upkeep+0x7a8>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b28      	ldr	r3, [pc, #160]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 8005b54:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005b56:	f7ff f95d 	bl	8004e14 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b5a:	f009 f9a1 	bl	800eea0 <HAL_GetTick>
 8005b5e:	0002      	movs	r2, r0
 8005b60:	4b2c      	ldr	r3, [pc, #176]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005b62:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005b64:	4b2b      	ldr	r3, [pc, #172]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b2b      	ldr	r3, [pc, #172]	@ (8005c18 <ESP_Upkeep+0x770>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	4a39      	ldr	r2, [pc, #228]	@ (8005c54 <ESP_Upkeep+0x7ac>)
 8005b70:	4932      	ldr	r1, [pc, #200]	@ (8005c3c <ESP_Upkeep+0x794>)
 8005b72:	2002      	movs	r0, #2
 8005b74:	f008 fd54 	bl	800e620 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b78:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005b7a:	220d      	movs	r2, #13
 8005b7c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bec <ESP_Upkeep+0x744>)
 8005b80:	2202      	movs	r2, #2
 8005b82:	701a      	strb	r2, [r3, #0]
    break;
 8005b84:	e10f      	b.n	8005da6 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005b86:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005b88:	2209      	movs	r2, #9
 8005b8a:	701a      	strb	r2, [r3, #0]
    break;
 8005b8c:	e10b      	b.n	8005da6 <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005b8e:	4b32      	ldr	r3, [pc, #200]	@ (8005c58 <ESP_Upkeep+0x7b0>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005b94:	4b31      	ldr	r3, [pc, #196]	@ (8005c5c <ESP_Upkeep+0x7b4>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	2101      	movs	r1, #1
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f00a fc11 	bl	80103c2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f009 f987 	bl	800eeb4 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005ba6:	2380      	movs	r3, #128	@ 0x80
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	482d      	ldr	r0, [pc, #180]	@ (8005c60 <ESP_Upkeep+0x7b8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	0019      	movs	r1, r3
 8005bb0:	f00a fc07 	bl	80103c2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	f009 f97d 	bl	800eeb4 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005bba:	4b28      	ldr	r3, [pc, #160]	@ (8005c5c <ESP_Upkeep+0x7b4>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f00a fbfe 	bl	80103c2 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005bc8:	2209      	movs	r2, #9
 8005bca:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005bcc:	f002 fea0 	bl	8008910 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f009 f96f 	bl	800eeb4 <HAL_Delay>
      ResetESPIndicator();
 8005bd6:	f007 fc4f 	bl	800d478 <ResetESPIndicator>
      errorcntr = 0;
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <ESP_Upkeep+0x760>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005be0:	4b10      	ldr	r3, [pc, #64]	@ (8005c24 <ESP_Upkeep+0x77c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
      break;
 8005be6:	e0e1      	b.n	8005dac <ESP_Upkeep+0x904>
 8005be8:	20000553 	.word	0x20000553
 8005bec:	20000a0f 	.word	0x20000a0f
 8005bf0:	20000030 	.word	0x20000030
 8005bf4:	20000a08 	.word	0x20000a08
 8005bf8:	20000a0d 	.word	0x20000a0d
 8005bfc:	20000032 	.word	0x20000032
 8005c00:	20000a0e 	.word	0x20000a0e
 8005c04:	20000a02 	.word	0x20000a02
 8005c08:	20000a03 	.word	0x20000a03
 8005c0c:	0003a980 	.word	0x0003a980
 8005c10:	20000558 	.word	0x20000558
 8005c14:	2000056c 	.word	0x2000056c
 8005c18:	20000568 	.word	0x20000568
 8005c1c:	08023c88 	.word	0x08023c88
 8005c20:	080232ec 	.word	0x080232ec
 8005c24:	20000a04 	.word	0x20000a04
 8005c28:	08023cbc 	.word	0x08023cbc
 8005c2c:	0000c350 	.word	0x0000c350
 8005c30:	08023cf8 	.word	0x08023cf8
 8005c34:	200009f8 	.word	0x200009f8
 8005c38:	08023d28 	.word	0x08023d28
 8005c3c:	08023d40 	.word	0x08023d40
 8005c40:	20000001 	.word	0x20000001
 8005c44:	047e7c4f 	.word	0x047e7c4f
 8005c48:	20000028 	.word	0x20000028
 8005c4c:	08023d44 	.word	0x08023d44
 8005c50:	2000002c 	.word	0x2000002c
 8005c54:	08023d88 	.word	0x08023d88
 8005c58:	20000550 	.word	0x20000550
 8005c5c:	50001c00 	.word	0x50001c00
 8005c60:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005c64:	4b54      	ldr	r3, [pc, #336]	@ (8005db8 <ESP_Upkeep+0x910>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f008 fc83 	bl	800e574 <TimestampIsReached>
 8005c6e:	1e03      	subs	r3, r0, #0
 8005c70:	d103      	bne.n	8005c7a <ESP_Upkeep+0x7d2>
 8005c72:	4b52      	ldr	r3, [pc, #328]	@ (8005dbc <ESP_Upkeep+0x914>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d043      	beq.n	8005d02 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005c7a:	4b51      	ldr	r3, [pc, #324]	@ (8005dc0 <ESP_Upkeep+0x918>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005c80:	4b50      	ldr	r3, [pc, #320]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005c88:	4b4f      	ldr	r3, [pc, #316]	@ (8005dc8 <ESP_Upkeep+0x920>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c8e:	4b4f      	ldr	r3, [pc, #316]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005c90:	220b      	movs	r2, #11
 8005c92:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005c94:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d108      	bne.n	8005cae <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8005dd0 <ESP_Upkeep+0x928>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8005dd4 <ESP_Upkeep+0x92c>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005ca8:	4b48      	ldr	r3, [pc, #288]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005caa:	220b      	movs	r2, #11
 8005cac:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005cae:	4b45      	ldr	r3, [pc, #276]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d102      	bne.n	8005cbc <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005cb6:	4b45      	ldr	r3, [pc, #276]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005cb8:	2202      	movs	r2, #2
 8005cba:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005cbc:	4b41      	ldr	r3, [pc, #260]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d108      	bne.n	8005cd6 <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005cc4:	4b41      	ldr	r3, [pc, #260]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005cc6:	220e      	movs	r2, #14
 8005cc8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005cca:	4a43      	ldr	r2, [pc, #268]	@ (8005dd8 <ESP_Upkeep+0x930>)
 8005ccc:	4b43      	ldr	r3, [pc, #268]	@ (8005ddc <ESP_Upkeep+0x934>)
 8005cce:	0019      	movs	r1, r3
 8005cd0:	2002      	movs	r0, #2
 8005cd2:	f008 fca5 	bl	800e620 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d105      	bne.n	8005cea <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005cde:	4b3b      	ldr	r3, [pc, #236]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005ce0:	220b      	movs	r2, #11
 8005ce2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8005de0 <ESP_Upkeep+0x938>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005cea:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <ESP_Upkeep+0x914>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d020      	beq.n	8005d34 <ESP_Upkeep+0x88c>
 8005cf2:	4b34      	ldr	r3, [pc, #208]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d01c      	beq.n	8005d34 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005cfa:	4b34      	ldr	r3, [pc, #208]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005d00:	e018      	b.n	8005d34 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005d02:	4b38      	ldr	r3, [pc, #224]	@ (8005de4 <ESP_Upkeep+0x93c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	0018      	movs	r0, r3
 8005d08:	f008 fc34 	bl	800e574 <TimestampIsReached>
 8005d0c:	1e03      	subs	r3, r0, #0
 8005d0e:	d04c      	beq.n	8005daa <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8005d10:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d148      	bne.n	8005daa <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8005d18:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005d1a:	2205      	movs	r2, #5
 8005d1c:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005d20:	2202      	movs	r2, #2
 8005d22:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005d24:	4b24      	ldr	r3, [pc, #144]	@ (8005db8 <ESP_Upkeep+0x910>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <ESP_Upkeep+0x940>)
 8005d2a:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8005dec <ESP_Upkeep+0x944>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005d32:	e03a      	b.n	8005daa <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005d34:	46c0      	nop			@ (mov r8, r8)
      break;
 8005d36:	e038      	b.n	8005daa <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005d38:	4b2d      	ldr	r3, [pc, #180]	@ (8005df0 <ESP_Upkeep+0x948>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4053      	eors	r3, r2
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8005d46:	4a24      	ldr	r2, [pc, #144]	@ (8005dd8 <ESP_Upkeep+0x930>)
 8005d48:	4b24      	ldr	r3, [pc, #144]	@ (8005ddc <ESP_Upkeep+0x934>)
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	2002      	movs	r0, #2
 8005d4e:	f008 fc67 	bl	800e620 <CreateLine>
        msgdone = true;
 8005d52:	4b27      	ldr	r3, [pc, #156]	@ (8005df0 <ESP_Upkeep+0x948>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005d58:	f017 f8e2 	bl	801cf20 <GetUsbRxPointer>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 f8c0 	bl	8005ee4 <Process_PC_Config>
      break;
 8005d64:	e022      	b.n	8005dac <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005d66:	4a23      	ldr	r2, [pc, #140]	@ (8005df4 <ESP_Upkeep+0x94c>)
 8005d68:	4b23      	ldr	r3, [pc, #140]	@ (8005df8 <ESP_Upkeep+0x950>)
 8005d6a:	0019      	movs	r1, r3
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	f008 fc57 	bl	800e620 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005d72:	4b16      	ldr	r3, [pc, #88]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005d74:	2202      	movs	r2, #2
 8005d76:	701a      	strb	r2, [r3, #0]
      break;
 8005d78:	e018      	b.n	8005dac <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005d7a:	4a20      	ldr	r2, [pc, #128]	@ (8005dfc <ESP_Upkeep+0x954>)
 8005d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005df8 <ESP_Upkeep+0x950>)
 8005d7e:	0019      	movs	r1, r3
 8005d80:	2001      	movs	r0, #1
 8005d82:	f008 fc4d 	bl	800e620 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005d86:	4b11      	ldr	r3, [pc, #68]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005d88:	2207      	movs	r2, #7
 8005d8a:	701a      	strb	r2, [r3, #0]
      break;
 8005d8c:	e00e      	b.n	8005dac <ESP_Upkeep+0x904>
      break;
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	e00c      	b.n	8005dac <ESP_Upkeep+0x904>
      break;
 8005d92:	46c0      	nop			@ (mov r8, r8)
 8005d94:	e00a      	b.n	8005dac <ESP_Upkeep+0x904>
        break;
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	e008      	b.n	8005dac <ESP_Upkeep+0x904>
    break;
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	e006      	b.n	8005dac <ESP_Upkeep+0x904>
    break;
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	e004      	b.n	8005dac <ESP_Upkeep+0x904>
      break;
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	e002      	b.n	8005dac <ESP_Upkeep+0x904>
    break;
 8005da6:	46c0      	nop			@ (mov r8, r8)
 8005da8:	e000      	b.n	8005dac <ESP_Upkeep+0x904>
      break;
 8005daa:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005dac:	4b07      	ldr	r3, [pc, #28]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
}
 8005db0:	0018      	movs	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bdb0      	pop	{r4, r5, r7, pc}
 8005db8:	20000a08 	.word	0x20000a08
 8005dbc:	20000553 	.word	0x20000553
 8005dc0:	20000558 	.word	0x20000558
 8005dc4:	20000a0f 	.word	0x20000a0f
 8005dc8:	20000551 	.word	0x20000551
 8005dcc:	20000030 	.word	0x20000030
 8005dd0:	20000554 	.word	0x20000554
 8005dd4:	20000556 	.word	0x20000556
 8005dd8:	08023da8 	.word	0x08023da8
 8005ddc:	08023d40 	.word	0x08023d40
 8005de0:	20000555 	.word	0x20000555
 8005de4:	20000028 	.word	0x20000028
 8005de8:	2000002c 	.word	0x2000002c
 8005dec:	20000001 	.word	0x20000001
 8005df0:	20000557 	.word	0x20000557
 8005df4:	08023dc0 	.word	0x08023dc0
 8005df8:	080232ec 	.word	0x080232ec
 8005dfc:	08023dd4 	.word	0x08023dd4

08005e00 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005e08:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <I2CSensors_Init+0x30>)
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005e0e:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <I2CSensors_Init+0x34>)
 8005e10:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <I2CSensors_Init+0x38>)
 8005e12:	0011      	movs	r1, r2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f008 fd67 	bl	800e8e8 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005e1a:	4a06      	ldr	r2, [pc, #24]	@ (8005e34 <I2CSensors_Init+0x34>)
 8005e1c:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <I2CSensors_Init+0x38>)
 8005e1e:	0011      	movs	r1, r2
 8005e20:	0018      	movs	r0, r3
 8005e22:	f005 fd19 	bl	800b858 <SGP_Init>
}
 8005e26:	46c0      	nop			@ (mov r8, r8)
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b002      	add	sp, #8
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			@ (mov r8, r8)
 8005e30:	20000b4c 	.word	0x20000b4c
 8005e34:	08005e91 	.word	0x08005e91
 8005e38:	08005e3d 	.word	0x08005e3d

08005e3c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e3c:	b5b0      	push	{r4, r5, r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6039      	str	r1, [r7, #0]
 8005e44:	0011      	movs	r1, r2
 8005e46:	1dfb      	adds	r3, r7, #7
 8005e48:	1c02      	adds	r2, r0, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	1dbb      	adds	r3, r7, #6
 8005e4e:	1c0a      	adds	r2, r1, #0
 8005e50:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e52:	4b0e      	ldr	r3, [pc, #56]	@ (8005e8c <ReadI2C+0x50>)
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	1dfb      	adds	r3, r7, #7
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	18db      	adds	r3, r3, r3
 8005e5e:	b299      	uxth	r1, r3
 8005e60:	1dbb      	adds	r3, r7, #6
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	250f      	movs	r5, #15
 8005e68:	197c      	adds	r4, r7, r5
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	f00a fe8e 	bl	8010b8c <HAL_I2C_Master_Receive_DMA>
 8005e70:	0003      	movs	r3, r0
 8005e72:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e74:	197b      	adds	r3, r7, r5
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <ReadI2C+0x44>
        return false;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e000      	b.n	8005e82 <ReadI2C+0x46>
    }
    return true;
 8005e80:	2301      	movs	r3, #1
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b004      	add	sp, #16
 8005e88:	bdb0      	pop	{r4, r5, r7, pc}
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	20000b4c 	.word	0x20000b4c

08005e90 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e90:	b5b0      	push	{r4, r5, r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6039      	str	r1, [r7, #0]
 8005e98:	0011      	movs	r1, r2
 8005e9a:	1dfb      	adds	r3, r7, #7
 8005e9c:	1c02      	adds	r2, r0, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	1dbb      	adds	r3, r7, #6
 8005ea2:	1c0a      	adds	r2, r1, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <WriteI2C+0x50>)
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	1dfb      	adds	r3, r7, #7
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	18db      	adds	r3, r3, r3
 8005eb2:	b299      	uxth	r1, r3
 8005eb4:	1dbb      	adds	r3, r7, #6
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	250f      	movs	r5, #15
 8005ebc:	197c      	adds	r4, r7, r5
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	f00a fd5e 	bl	8010980 <HAL_I2C_Master_Transmit_DMA>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005ec8:	197b      	adds	r3, r7, r5
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <WriteI2C+0x44>
        return false;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e000      	b.n	8005ed6 <WriteI2C+0x46>
    }
    return true;
 8005ed4:	2301      	movs	r3, #1
}
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b004      	add	sp, #16
 8005edc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ede:	46c0      	nop			@ (mov r8, r8)
 8005ee0:	20000b4c 	.word	0x20000b4c

08005ee4 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b0c3      	sub	sp, #268	@ 0x10c
 8005ee8:	af3e      	add	r7, sp, #248	@ 0xf8
 8005eea:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005eec:	f017 f838 	bl	801cf60 <GetUsbRxDataSize>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b05      	cmp	r3, #5
 8005ef8:	d971      	bls.n	8005fde <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2123      	movs	r1, #35	@ 0x23
 8005efe:	0018      	movs	r0, r3
 8005f00:	f01a fa2e 	bl	8020360 <strchr>
 8005f04:	0003      	movs	r3, r0
 8005f06:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d065      	beq.n	8005fda <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	785a      	ldrb	r2, [r3, #1]
 8005f12:	4b34      	ldr	r3, [pc, #208]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f14:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	789a      	ldrb	r2, [r3, #2]
 8005f1a:	4b32      	ldr	r3, [pc, #200]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f1c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005f1e:	4b31      	ldr	r3, [pc, #196]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	3305      	adds	r3, #5
 8005f24:	001a      	movs	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d351      	bcc.n	8005fd0 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	1cd9      	adds	r1, r3, #3
 8005f30:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	001a      	movs	r2, r3
 8005f36:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe8 <Process_PC_Config+0x104>)
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f01a fae5 	bl	8020508 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005f3e:	4b29      	ldr	r3, [pc, #164]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	3303      	adds	r3, #3
 8005f44:	001a      	movs	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	b21a      	sxth	r2, r3
 8005f50:	4b24      	ldr	r3, [pc, #144]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	3304      	adds	r3, #4
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	18cb      	adds	r3, r1, r3
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	b299      	uxth	r1, r3
 8005f64:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f66:	2381      	movs	r3, #129	@ 0x81
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f6e:	2381      	movs	r3, #129	@ 0x81
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	5ad4      	ldrh	r4, [r2, r3]
 8005f74:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	3303      	adds	r3, #3
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	0011      	movs	r1, r2
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f975 	bl	8006270 <CRC16_ARC>
 8005f86:	0003      	movs	r3, r0
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	d007      	beq.n	8005f9c <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005f8c:	4b15      	ldr	r3, [pc, #84]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f8e:	785a      	ldrb	r2, [r3, #1]
 8005f90:	4b15      	ldr	r3, [pc, #84]	@ (8005fe8 <Process_PC_Config+0x104>)
 8005f92:	0019      	movs	r1, r3
 8005f94:	2001      	movs	r0, #1
 8005f96:	f000 f919 	bl	80061cc <Create_Message>
 8005f9a:	e016      	b.n	8005fca <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005f9c:	4c11      	ldr	r4, [pc, #68]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f9e:	466b      	mov	r3, sp
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	0023      	movs	r3, r4
 8005fa4:	3310      	adds	r3, #16
 8005fa6:	22f4      	movs	r2, #244	@ 0xf4
 8005fa8:	0019      	movs	r1, r3
 8005faa:	f01a faad 	bl	8020508 <memcpy>
 8005fae:	6820      	ldr	r0, [r4, #0]
 8005fb0:	6861      	ldr	r1, [r4, #4]
 8005fb2:	68a2      	ldr	r2, [r4, #8]
 8005fb4:	68e3      	ldr	r3, [r4, #12]
 8005fb6:	f000 f819 	bl	8005fec <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005fba:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005fbc:	7818      	ldrb	r0, [r3, #0]
 8005fbe:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005fc0:	785a      	ldrb	r2, [r3, #1]
 8005fc2:	4b09      	ldr	r3, [pc, #36]	@ (8005fe8 <Process_PC_Config+0x104>)
 8005fc4:	0019      	movs	r1, r3
 8005fc6:	f000 f901 	bl	80061cc <Create_Message>
                }
                ResetUsbRxDataSize();
 8005fca:	f016 ffb1 	bl	801cf30 <ResetUsbRxDataSize>
                return;
 8005fce:	e006      	b.n	8005fde <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f016 ffce 	bl	801cf74 <GetUsbRxNextChunk>
 8005fd8:	e001      	b.n	8005fde <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005fda:	f016 ffa9 	bl	801cf30 <ResetUsbRxDataSize>
        }
    }
}
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b005      	add	sp, #20
 8005fe2:	bd90      	pop	{r4, r7, pc}
 8005fe4:	20000b50 	.word	0x20000b50
 8005fe8:	20000b52 	.word	0x20000b52

08005fec <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005fec:	b084      	sub	sp, #16
 8005fee:	b5b0      	push	{r4, r5, r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	2518      	movs	r5, #24
 8005ff6:	197c      	adds	r4, r7, r5
 8005ff8:	6020      	str	r0, [r4, #0]
 8005ffa:	6061      	str	r1, [r4, #4]
 8005ffc:	60a2      	str	r2, [r4, #8]
 8005ffe:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8006000:	197b      	adds	r3, r7, r5
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2bfe      	cmp	r3, #254	@ 0xfe
 8006006:	d100      	bne.n	800600a <ProcessCmd+0x1e>
 8006008:	e09c      	b.n	8006144 <ProcessCmd+0x158>
 800600a:	dd00      	ble.n	800600e <ProcessCmd+0x22>
 800600c:	e0bc      	b.n	8006188 <ProcessCmd+0x19c>
 800600e:	2b0c      	cmp	r3, #12
 8006010:	dc0a      	bgt.n	8006028 <ProcessCmd+0x3c>
 8006012:	2b00      	cmp	r3, #0
 8006014:	da00      	bge.n	8006018 <ProcessCmd+0x2c>
 8006016:	e0b7      	b.n	8006188 <ProcessCmd+0x19c>
 8006018:	2b0c      	cmp	r3, #12
 800601a:	d900      	bls.n	800601e <ProcessCmd+0x32>
 800601c:	e0b4      	b.n	8006188 <ProcessCmd+0x19c>
 800601e:	009a      	lsls	r2, r3, #2
 8006020:	4b5d      	ldr	r3, [pc, #372]	@ (8006198 <ProcessCmd+0x1ac>)
 8006022:	18d3      	adds	r3, r2, r3
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	469f      	mov	pc, r3
 8006028:	2bfd      	cmp	r3, #253	@ 0xfd
 800602a:	d100      	bne.n	800602e <ProcessCmd+0x42>
 800602c:	e084      	b.n	8006138 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 800602e:	e0ab      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006030:	2118      	movs	r1, #24
 8006032:	187b      	adds	r3, r7, r1
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	001a      	movs	r2, r3
 8006038:	187b      	adds	r3, r7, r1
 800603a:	1c99      	adds	r1, r3, #2
 800603c:	4857      	ldr	r0, [pc, #348]	@ (800619c <ProcessCmd+0x1b0>)
 800603e:	230c      	movs	r3, #12
 8006040:	f7fd fb3e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006044:	e0a0      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006046:	2118      	movs	r1, #24
 8006048:	187b      	adds	r3, r7, r1
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	001a      	movs	r2, r3
 800604e:	187b      	adds	r3, r7, r1
 8006050:	1c99      	adds	r1, r3, #2
 8006052:	4853      	ldr	r0, [pc, #332]	@ (80061a0 <ProcessCmd+0x1b4>)
 8006054:	230c      	movs	r3, #12
 8006056:	f7fd fb33 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800605a:	e095      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800605c:	2118      	movs	r1, #24
 800605e:	187b      	adds	r3, r7, r1
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	001a      	movs	r2, r3
 8006064:	187b      	adds	r3, r7, r1
 8006066:	1c99      	adds	r1, r3, #2
 8006068:	484e      	ldr	r0, [pc, #312]	@ (80061a4 <ProcessCmd+0x1b8>)
 800606a:	230c      	movs	r3, #12
 800606c:	f7fd fb28 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006070:	e08a      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006072:	2118      	movs	r1, #24
 8006074:	187b      	adds	r3, r7, r1
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	001a      	movs	r2, r3
 800607a:	187b      	adds	r3, r7, r1
 800607c:	1c99      	adds	r1, r3, #2
 800607e:	484a      	ldr	r0, [pc, #296]	@ (80061a8 <ProcessCmd+0x1bc>)
 8006080:	230c      	movs	r3, #12
 8006082:	f7fd fb1d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006086:	e07f      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006088:	2118      	movs	r1, #24
 800608a:	187b      	adds	r3, r7, r1
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	001a      	movs	r2, r3
 8006090:	187b      	adds	r3, r7, r1
 8006092:	1c99      	adds	r1, r3, #2
 8006094:	4845      	ldr	r0, [pc, #276]	@ (80061ac <ProcessCmd+0x1c0>)
 8006096:	230c      	movs	r3, #12
 8006098:	f7fd fb12 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800609c:	e074      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800609e:	2118      	movs	r1, #24
 80060a0:	187b      	adds	r3, r7, r1
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	001a      	movs	r2, r3
 80060a6:	187b      	adds	r3, r7, r1
 80060a8:	1c99      	adds	r1, r3, #2
 80060aa:	4841      	ldr	r0, [pc, #260]	@ (80061b0 <ProcessCmd+0x1c4>)
 80060ac:	230c      	movs	r3, #12
 80060ae:	f7fd fb07 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060b2:	e069      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060b4:	2118      	movs	r1, #24
 80060b6:	187b      	adds	r3, r7, r1
 80060b8:	785b      	ldrb	r3, [r3, #1]
 80060ba:	001a      	movs	r2, r3
 80060bc:	187b      	adds	r3, r7, r1
 80060be:	1c99      	adds	r1, r3, #2
 80060c0:	483c      	ldr	r0, [pc, #240]	@ (80061b4 <ProcessCmd+0x1c8>)
 80060c2:	230c      	movs	r3, #12
 80060c4:	f7fd fafc 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060c8:	e05e      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80060ca:	2118      	movs	r1, #24
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	001a      	movs	r2, r3
 80060d2:	187b      	adds	r3, r7, r1
 80060d4:	1c99      	adds	r1, r3, #2
 80060d6:	4838      	ldr	r0, [pc, #224]	@ (80061b8 <ProcessCmd+0x1cc>)
 80060d8:	231e      	movs	r3, #30
 80060da:	f7fd faf1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060de:	e053      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060e0:	2118      	movs	r1, #24
 80060e2:	187b      	adds	r3, r7, r1
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	001a      	movs	r2, r3
 80060e8:	187b      	adds	r3, r7, r1
 80060ea:	1c99      	adds	r1, r3, #2
 80060ec:	4833      	ldr	r0, [pc, #204]	@ (80061bc <ProcessCmd+0x1d0>)
 80060ee:	230c      	movs	r3, #12
 80060f0:	f7fd fae6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060f4:	e048      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060f6:	2118      	movs	r1, #24
 80060f8:	187b      	adds	r3, r7, r1
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	001a      	movs	r2, r3
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	1c99      	adds	r1, r3, #2
 8006102:	482f      	ldr	r0, [pc, #188]	@ (80061c0 <ProcessCmd+0x1d4>)
 8006104:	230c      	movs	r3, #12
 8006106:	f7fd fadb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800610a:	e03d      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800610c:	2118      	movs	r1, #24
 800610e:	187b      	adds	r3, r7, r1
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	001a      	movs	r2, r3
 8006114:	187b      	adds	r3, r7, r1
 8006116:	1c99      	adds	r1, r3, #2
 8006118:	482a      	ldr	r0, [pc, #168]	@ (80061c4 <ProcessCmd+0x1d8>)
 800611a:	230c      	movs	r3, #12
 800611c:	f7fd fad0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006120:	e032      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006122:	2118      	movs	r1, #24
 8006124:	187b      	adds	r3, r7, r1
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	001a      	movs	r2, r3
 800612a:	187b      	adds	r3, r7, r1
 800612c:	1c99      	adds	r1, r3, #2
 800612e:	4826      	ldr	r0, [pc, #152]	@ (80061c8 <ProcessCmd+0x1dc>)
 8006130:	230c      	movs	r3, #12
 8006132:	f7fd fac5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006136:	e027      	b.n	8006188 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006138:	4b18      	ldr	r3, [pc, #96]	@ (800619c <ProcessCmd+0x1b0>)
 800613a:	21ba      	movs	r1, #186	@ 0xba
 800613c:	0018      	movs	r0, r3
 800613e:	f7fd fb04 	bl	800374a <ClearEEprom>
        break;
 8006142:	e021      	b.n	8006188 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006144:	2118      	movs	r1, #24
 8006146:	187b      	adds	r3, r7, r1
 8006148:	789b      	ldrb	r3, [r3, #2]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	b21a      	sxth	r2, r3
 800614e:	187b      	adds	r3, r7, r1
 8006150:	78db      	ldrb	r3, [r3, #3]
 8006152:	b21b      	sxth	r3, r3
 8006154:	4313      	orrs	r3, r2
 8006156:	b21a      	sxth	r2, r3
 8006158:	1dbb      	adds	r3, r7, #6
 800615a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800615c:	1dbb      	adds	r3, r7, #6
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	23c0      	movs	r3, #192	@ 0xc0
 8006162:	015b      	lsls	r3, r3, #5
 8006164:	429a      	cmp	r2, r3
 8006166:	d207      	bcs.n	8006178 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006168:	1dbb      	adds	r3, r7, #6
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	4a0b      	ldr	r2, [pc, #44]	@ (800619c <ProcessCmd+0x1b0>)
 800616e:	0019      	movs	r1, r3
 8006170:	0010      	movs	r0, r2
 8006172:	f7fd faea 	bl	800374a <ClearEEprom>
            break;
 8006176:	e006      	b.n	8006186 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006178:	23c0      	movs	r3, #192	@ 0xc0
 800617a:	015b      	lsls	r3, r3, #5
 800617c:	4a07      	ldr	r2, [pc, #28]	@ (800619c <ProcessCmd+0x1b0>)
 800617e:	0019      	movs	r1, r3
 8006180:	0010      	movs	r0, r2
 8006182:	f7fd fae2 	bl	800374a <ClearEEprom>
            break;
 8006186:	46c0      	nop			@ (mov r8, r8)
}
 8006188:	46c0      	nop			@ (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b002      	add	sp, #8
 800618e:	bcb0      	pop	{r4, r5, r7}
 8006190:	bc08      	pop	{r3}
 8006192:	b004      	add	sp, #16
 8006194:	4718      	bx	r3
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	08025598 	.word	0x08025598
 800619c:	08080000 	.word	0x08080000
 80061a0:	0808000c 	.word	0x0808000c
 80061a4:	08080018 	.word	0x08080018
 80061a8:	08080024 	.word	0x08080024
 80061ac:	08080030 	.word	0x08080030
 80061b0:	0808003c 	.word	0x0808003c
 80061b4:	08080048 	.word	0x08080048
 80061b8:	08080090 	.word	0x08080090
 80061bc:	08080078 	.word	0x08080078
 80061c0:	0808006c 	.word	0x0808006c
 80061c4:	08080060 	.word	0x08080060
 80061c8:	08080054 	.word	0x08080054

080061cc <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80061cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6039      	str	r1, [r7, #0]
 80061d4:	0011      	movs	r1, r2
 80061d6:	1dfb      	adds	r3, r7, #7
 80061d8:	1c02      	adds	r2, r0, #0
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	1dbb      	adds	r3, r7, #6
 80061de:	1c0a      	adds	r2, r1, #0
 80061e0:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80061e2:	2223      	movs	r2, #35	@ 0x23
 80061e4:	4b20      	ldr	r3, [pc, #128]	@ (8006268 <Create_Message+0x9c>)
 80061e6:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80061e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006268 <Create_Message+0x9c>)
 80061ea:	1dfa      	adds	r2, r7, #7
 80061ec:	7812      	ldrb	r2, [r2, #0]
 80061ee:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80061f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <Create_Message+0x9c>)
 80061f2:	1dba      	adds	r2, r7, #6
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80061f8:	1dbb      	adds	r3, r7, #6
 80061fa:	781a      	ldrb	r2, [r3, #0]
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	4b1b      	ldr	r3, [pc, #108]	@ (800626c <Create_Message+0xa0>)
 8006200:	0018      	movs	r0, r3
 8006202:	f01a f981 	bl	8020508 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8006206:	1dbb      	adds	r3, r7, #6
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b29a      	uxth	r2, r3
 800620c:	250e      	movs	r5, #14
 800620e:	197b      	adds	r3, r7, r5
 8006210:	3203      	adds	r2, #3
 8006212:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006214:	260c      	movs	r6, #12
 8006216:	19bc      	adds	r4, r7, r6
 8006218:	197b      	adds	r3, r7, r5
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	4b12      	ldr	r3, [pc, #72]	@ (8006268 <Create_Message+0x9c>)
 800621e:	0011      	movs	r1, r2
 8006220:	0018      	movs	r0, r3
 8006222:	f000 f825 	bl	8006270 <CRC16_ARC>
 8006226:	0003      	movs	r3, r0
 8006228:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800622a:	0030      	movs	r0, r6
 800622c:	183b      	adds	r3, r7, r0
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	0a1b      	lsrs	r3, r3, #8
 8006232:	b29a      	uxth	r2, r3
 8006234:	197b      	adds	r3, r7, r5
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b2d1      	uxtb	r1, r2
 800623a:	4a0b      	ldr	r2, [pc, #44]	@ (8006268 <Create_Message+0x9c>)
 800623c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800623e:	197b      	adds	r3, r7, r5
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	183a      	adds	r2, r7, r0
 8006246:	8812      	ldrh	r2, [r2, #0]
 8006248:	b2d1      	uxtb	r1, r2
 800624a:	4a07      	ldr	r2, [pc, #28]	@ (8006268 <Create_Message+0x9c>)
 800624c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800624e:	197b      	adds	r3, r7, r5
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	3302      	adds	r3, #2
 8006254:	b29a      	uxth	r2, r3
 8006256:	4b04      	ldr	r3, [pc, #16]	@ (8006268 <Create_Message+0x9c>)
 8006258:	0011      	movs	r1, r2
 800625a:	0018      	movs	r0, r3
 800625c:	f016 fe26 	bl	801ceac <CDC_Transmit_FS>
}
 8006260:	46c0      	nop			@ (mov r8, r8)
 8006262:	46bd      	mov	sp, r7
 8006264:	b005      	add	sp, #20
 8006266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006268:	20000c54 	.word	0x20000c54
 800626c:	20000c57 	.word	0x20000c57

08006270 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	000a      	movs	r2, r1
 800627a:	1cbb      	adds	r3, r7, #2
 800627c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800627e:	2316      	movs	r3, #22
 8006280:	18fb      	adds	r3, r7, r3
 8006282:	2200      	movs	r2, #0
 8006284:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e02e      	b.n	80062ea <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	18d3      	adds	r3, r2, r3
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	0019      	movs	r1, r3
 8006296:	2216      	movs	r2, #22
 8006298:	18bb      	adds	r3, r7, r2
 800629a:	18ba      	adds	r2, r7, r2
 800629c:	8812      	ldrh	r2, [r2, #0]
 800629e:	404a      	eors	r2, r1
 80062a0:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e01a      	b.n	80062de <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80062a8:	2116      	movs	r1, #22
 80062aa:	187b      	adds	r3, r7, r1
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	4013      	ands	r3, r2
 80062b2:	d00b      	beq.n	80062cc <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80062b4:	187b      	adds	r3, r7, r1
 80062b6:	187a      	adds	r2, r7, r1
 80062b8:	8812      	ldrh	r2, [r2, #0]
 80062ba:	0852      	lsrs	r2, r2, #1
 80062bc:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80062be:	187b      	adds	r3, r7, r1
 80062c0:	187a      	adds	r2, r7, r1
 80062c2:	8812      	ldrh	r2, [r2, #0]
 80062c4:	490f      	ldr	r1, [pc, #60]	@ (8006304 <CRC16_ARC+0x94>)
 80062c6:	404a      	eors	r2, r1
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	e005      	b.n	80062d8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80062cc:	2216      	movs	r2, #22
 80062ce:	18bb      	adds	r3, r7, r2
 80062d0:	18ba      	adds	r2, r7, r2
 80062d2:	8812      	ldrh	r2, [r2, #0]
 80062d4:	0852      	lsrs	r2, r2, #1
 80062d6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b07      	cmp	r3, #7
 80062e2:	dde1      	ble.n	80062a8 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	3301      	adds	r3, #1
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	1cbb      	adds	r3, r7, #2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	dbcb      	blt.n	800628c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80062f4:	2316      	movs	r3, #22
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	881b      	ldrh	r3, [r3, #0]
}
 80062fa:	0018      	movs	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b006      	add	sp, #24
 8006300:	bd80      	pop	{r7, pc}
 8006302:	46c0      	nop			@ (mov r8, r8)
 8006304:	ffffa001 	.word	0xffffa001

08006308 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 800630c:	4b26      	ldr	r3, [pc, #152]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 800630e:	4a27      	ldr	r2, [pc, #156]	@ (80063ac <ReadBatteryVoltage+0xa4>)
 8006310:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006312:	4b25      	ldr	r3, [pc, #148]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 8006314:	2280      	movs	r2, #128	@ 0x80
 8006316:	0152      	lsls	r2, r2, #5
 8006318:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800631a:	4a23      	ldr	r2, [pc, #140]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 800631c:	4b24      	ldr	r3, [pc, #144]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 800631e:	0011      	movs	r1, r2
 8006320:	0018      	movs	r0, r3
 8006322:	f009 f895 	bl	800f450 <HAL_ADC_ConfigChannel>
 8006326:	1e03      	subs	r3, r0, #0
 8006328:	d001      	beq.n	800632e <ReadBatteryVoltage+0x26>
    Error_Handler();
 800632a:	f002 f803 	bl	8008334 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800632e:	4b20      	ldr	r3, [pc, #128]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 8006330:	0018      	movs	r0, r3
 8006332:	f008 ff91 	bl	800f258 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006336:	4b1e      	ldr	r3, [pc, #120]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 8006338:	2101      	movs	r1, #1
 800633a:	0018      	movs	r0, r3
 800633c:	f008 ffe0 	bl	800f300 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006340:	4b1b      	ldr	r3, [pc, #108]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 8006342:	0018      	movs	r0, r3
 8006344:	f009 f878 	bl	800f438 <HAL_ADC_GetValue>
 8006348:	0002      	movs	r2, r0
 800634a:	4b1a      	ldr	r3, [pc, #104]	@ (80063b4 <ReadBatteryVoltage+0xac>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4353      	muls	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4919      	ldr	r1, [pc, #100]	@ (80063b8 <ReadBatteryVoltage+0xb0>)
 8006354:	0018      	movs	r0, r3
 8006356:	f7f9 ff25 	bl	80001a4 <__udivsi3>
 800635a:	0003      	movs	r3, r0
 800635c:	001a      	movs	r2, r3
 800635e:	4b17      	ldr	r3, [pc, #92]	@ (80063bc <ReadBatteryVoltage+0xb4>)
 8006360:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006362:	4b16      	ldr	r3, [pc, #88]	@ (80063bc <ReadBatteryVoltage+0xb4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	0018      	movs	r0, r3
 8006368:	f7fb f97e 	bl	8001668 <__aeabi_ui2f>
 800636c:	1c03      	adds	r3, r0, #0
 800636e:	4914      	ldr	r1, [pc, #80]	@ (80063c0 <ReadBatteryVoltage+0xb8>)
 8006370:	1c18      	adds	r0, r3, #0
 8006372:	f7fa fc2f 	bl	8000bd4 <__aeabi_fdiv>
 8006376:	1c03      	adds	r3, r0, #0
 8006378:	1c1a      	adds	r2, r3, #0
 800637a:	4b12      	ldr	r3, [pc, #72]	@ (80063c4 <ReadBatteryVoltage+0xbc>)
 800637c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800637e:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 8006380:	4a0a      	ldr	r2, [pc, #40]	@ (80063ac <ReadBatteryVoltage+0xa4>)
 8006382:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006384:	4b08      	ldr	r3, [pc, #32]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 8006386:	4a10      	ldr	r2, [pc, #64]	@ (80063c8 <ReadBatteryVoltage+0xc0>)
 8006388:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800638a:	4a07      	ldr	r2, [pc, #28]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 800638c:	4b08      	ldr	r3, [pc, #32]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 800638e:	0011      	movs	r1, r2
 8006390:	0018      	movs	r0, r3
 8006392:	f009 f85d 	bl	800f450 <HAL_ADC_ConfigChannel>
 8006396:	1e03      	subs	r3, r0, #0
 8006398:	d001      	beq.n	800639e <ReadBatteryVoltage+0x96>
    Error_Handler();
 800639a:	f001 ffcb 	bl	8008334 <Error_Handler>
  }
  return trueValue;
 800639e:	4b09      	ldr	r3, [pc, #36]	@ (80063c4 <ReadBatteryVoltage+0xbc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 }
 80063a2:	1c18      	adds	r0, r3, #0
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20000d5c 	.word	0x20000d5c
 80063ac:	38004000 	.word	0x38004000
 80063b0:	20000d98 	.word	0x20000d98
 80063b4:	20000034 	.word	0x20000034
 80063b8:	00000fff 	.word	0x00000fff
 80063bc:	20000d64 	.word	0x20000d64
 80063c0:	447a0000 	.word	0x447a0000
 80063c4:	20000d68 	.word	0x20000d68
 80063c8:	00001001 	.word	0x00001001

080063cc <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80063d0:	4b21      	ldr	r3, [pc, #132]	@ (8006458 <ReadSolarVoltage+0x8c>)
 80063d2:	4a22      	ldr	r2, [pc, #136]	@ (800645c <ReadSolarVoltage+0x90>)
 80063d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80063d6:	4b20      	ldr	r3, [pc, #128]	@ (8006458 <ReadSolarVoltage+0x8c>)
 80063d8:	2280      	movs	r2, #128	@ 0x80
 80063da:	0152      	lsls	r2, r2, #5
 80063dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80063de:	4a1e      	ldr	r2, [pc, #120]	@ (8006458 <ReadSolarVoltage+0x8c>)
 80063e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006460 <ReadSolarVoltage+0x94>)
 80063e2:	0011      	movs	r1, r2
 80063e4:	0018      	movs	r0, r3
 80063e6:	f009 f833 	bl	800f450 <HAL_ADC_ConfigChannel>
 80063ea:	1e03      	subs	r3, r0, #0
 80063ec:	d001      	beq.n	80063f2 <ReadSolarVoltage+0x26>
    Error_Handler();
 80063ee:	f001 ffa1 	bl	8008334 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80063f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006460 <ReadSolarVoltage+0x94>)
 80063f4:	0018      	movs	r0, r3
 80063f6:	f008 ff2f 	bl	800f258 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80063fa:	4b19      	ldr	r3, [pc, #100]	@ (8006460 <ReadSolarVoltage+0x94>)
 80063fc:	2101      	movs	r1, #1
 80063fe:	0018      	movs	r0, r3
 8006400:	f008 ff7e 	bl	800f300 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006404:	4b16      	ldr	r3, [pc, #88]	@ (8006460 <ReadSolarVoltage+0x94>)
 8006406:	0018      	movs	r0, r3
 8006408:	f009 f816 	bl	800f438 <HAL_ADC_GetValue>
 800640c:	0002      	movs	r2, r0
 800640e:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <ReadSolarVoltage+0x98>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	435a      	muls	r2, r3
 8006414:	0013      	movs	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	189b      	adds	r3, r3, r2
 800641a:	4913      	ldr	r1, [pc, #76]	@ (8006468 <ReadSolarVoltage+0x9c>)
 800641c:	0018      	movs	r0, r3
 800641e:	f7f9 fec1 	bl	80001a4 <__udivsi3>
 8006422:	0003      	movs	r3, r0
 8006424:	001a      	movs	r2, r3
 8006426:	4b11      	ldr	r3, [pc, #68]	@ (800646c <ReadSolarVoltage+0xa0>)
 8006428:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800642a:	4b0b      	ldr	r3, [pc, #44]	@ (8006458 <ReadSolarVoltage+0x8c>)
 800642c:	4a0b      	ldr	r2, [pc, #44]	@ (800645c <ReadSolarVoltage+0x90>)
 800642e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006430:	4b09      	ldr	r3, [pc, #36]	@ (8006458 <ReadSolarVoltage+0x8c>)
 8006432:	4a0f      	ldr	r2, [pc, #60]	@ (8006470 <ReadSolarVoltage+0xa4>)
 8006434:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006436:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <ReadSolarVoltage+0x8c>)
 8006438:	4b09      	ldr	r3, [pc, #36]	@ (8006460 <ReadSolarVoltage+0x94>)
 800643a:	0011      	movs	r1, r2
 800643c:	0018      	movs	r0, r3
 800643e:	f009 f807 	bl	800f450 <HAL_ADC_ConfigChannel>
 8006442:	1e03      	subs	r3, r0, #0
 8006444:	d001      	beq.n	800644a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006446:	f001 ff75 	bl	8008334 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800644a:	4b08      	ldr	r3, [pc, #32]	@ (800646c <ReadSolarVoltage+0xa0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 }
 8006450:	0018      	movs	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	20000d5c 	.word	0x20000d5c
 800645c:	3c008000 	.word	0x3c008000
 8006460:	20000d98 	.word	0x20000d98
 8006464:	20000034 	.word	0x20000034
 8006468:	00000fff 	.word	0x00000fff
 800646c:	20000d6c 	.word	0x20000d6c
 8006470:	00001001 	.word	0x00001001

08006474 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006478:	23a0      	movs	r3, #160	@ 0xa0
 800647a:	05db      	lsls	r3, r3, #23
 800647c:	2180      	movs	r1, #128	@ 0x80
 800647e:	0018      	movs	r0, r3
 8006480:	f009 ff82 	bl	8010388 <HAL_GPIO_ReadPin>
 8006484:	0003      	movs	r3, r0
 8006486:	1e5a      	subs	r2, r3, #1
 8006488:	4193      	sbcs	r3, r2
 800648a:	b2db      	uxtb	r3, r3
}
 800648c:	0018      	movs	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006492:	b580      	push	{r7, lr}
 8006494:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006496:	2380      	movs	r3, #128	@ 0x80
 8006498:	021a      	lsls	r2, r3, #8
 800649a:	23a0      	movs	r3, #160	@ 0xa0
 800649c:	05db      	lsls	r3, r3, #23
 800649e:	0011      	movs	r1, r2
 80064a0:	0018      	movs	r0, r3
 80064a2:	f009 ff71 	bl	8010388 <HAL_GPIO_ReadPin>
 80064a6:	0003      	movs	r3, r0
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	4193      	sbcs	r3, r2
 80064ac:	b2db      	uxtb	r3, r3
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80064b8:	4b05      	ldr	r3, [pc, #20]	@ (80064d0 <UserButton_Pressed+0x1c>)
 80064ba:	2104      	movs	r1, #4
 80064bc:	0018      	movs	r0, r3
 80064be:	f009 ff63 	bl	8010388 <HAL_GPIO_ReadPin>
 80064c2:	0003      	movs	r3, r0
 80064c4:	425a      	negs	r2, r3
 80064c6:	4153      	adcs	r3, r2
 80064c8:	b2db      	uxtb	r3, r3
}
 80064ca:	0018      	movs	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	50000c00 	.word	0x50000c00

080064d4 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80064d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d6:	46d6      	mov	lr, sl
 80064d8:	464f      	mov	r7, r9
 80064da:	4646      	mov	r6, r8
 80064dc:	b5c0      	push	{r6, r7, lr}
 80064de:	b08e      	sub	sp, #56	@ 0x38
 80064e0:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80064e2:	4b21      	ldr	r3, [pc, #132]	@ (8006568 <showTime+0x94>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d036      	beq.n	8006558 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80064ea:	003a      	movs	r2, r7
 80064ec:	1d3b      	adds	r3, r7, #4
 80064ee:	0011      	movs	r1, r2
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 fa2b 	bl	800694c <RTC_GetTime>
  UpdateSystemUptime();
 80064f6:	f000 f83f 	bl	8006578 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064fa:	003b      	movs	r3, r7
 80064fc:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064fe:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006500:	003b      	movs	r3, r7
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006506:	4b19      	ldr	r3, [pc, #100]	@ (800656c <showTime+0x98>)
 8006508:	0092      	lsls	r2, r2, #2
 800650a:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800650c:	003b      	movs	r3, r7
 800650e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006510:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006516:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006518:	1d3b      	adds	r3, r7, #4
 800651a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800651c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800651e:	1d3b      	adds	r3, r7, #4
 8006520:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006522:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006524:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <showTime+0x9c>)
 8006526:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006528:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800652a:	4b11      	ldr	r3, [pc, #68]	@ (8006570 <showTime+0x9c>)
 800652c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800652e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006530:	4b0f      	ldr	r3, [pc, #60]	@ (8006570 <showTime+0x9c>)
 8006532:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006534:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006536:	4b0e      	ldr	r3, [pc, #56]	@ (8006570 <showTime+0x9c>)
 8006538:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800653a:	480e      	ldr	r0, [pc, #56]	@ (8006574 <showTime+0xa0>)
 800653c:	9306      	str	r3, [sp, #24]
 800653e:	4643      	mov	r3, r8
 8006540:	9305      	str	r3, [sp, #20]
 8006542:	4663      	mov	r3, ip
 8006544:	9304      	str	r3, [sp, #16]
 8006546:	9603      	str	r6, [sp, #12]
 8006548:	9502      	str	r5, [sp, #8]
 800654a:	9401      	str	r4, [sp, #4]
 800654c:	9100      	str	r1, [sp, #0]
 800654e:	4653      	mov	r3, sl
 8006550:	4649      	mov	r1, r9
 8006552:	f019 fd49 	bl	801ffe8 <iprintf>
 8006556:	e000      	b.n	800655a <showTime+0x86>
    return;
 8006558:	46c0      	nop			@ (mov r8, r8)
}
 800655a:	46bd      	mov	sp, r7
 800655c:	b006      	add	sp, #24
 800655e:	bce0      	pop	{r5, r6, r7}
 8006560:	46ba      	mov	sl, r7
 8006562:	46b1      	mov	r9, r6
 8006564:	46a8      	mov	r8, r5
 8006566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006568:	20000d7c 	.word	0x20000d7c
 800656c:	20000054 	.word	0x20000054
 8006570:	20000d70 	.word	0x20000d70
 8006574:	08023e50 	.word	0x08023e50

08006578 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800657e:	003a      	movs	r2, r7
 8006580:	1d3b      	adds	r3, r7, #4
 8006582:	0011      	movs	r1, r2
 8006584:	0018      	movs	r0, r3
 8006586:	f000 f9e1 	bl	800694c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800658a:	1d3a      	adds	r2, r7, #4
 800658c:	003b      	movs	r3, r7
 800658e:	0011      	movs	r1, r2
 8006590:	0018      	movs	r0, r3
 8006592:	f000 fba5 	bl	8006ce0 <makeTime>
 8006596:	0002      	movs	r2, r0
 8006598:	4b1e      	ldr	r3, [pc, #120]	@ (8006614 <UpdateSystemUptime+0x9c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	213c      	movs	r1, #60	@ 0x3c
 80065a8:	0018      	movs	r0, r3
 80065aa:	f7f9 fe81 	bl	80002b0 <__aeabi_uidivmod>
 80065ae:	000b      	movs	r3, r1
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	4b19      	ldr	r3, [pc, #100]	@ (8006618 <UpdateSystemUptime+0xa0>)
 80065b4:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	213c      	movs	r1, #60	@ 0x3c
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7f9 fdf2 	bl	80001a4 <__udivsi3>
 80065c0:	0003      	movs	r3, r0
 80065c2:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	213c      	movs	r1, #60	@ 0x3c
 80065c8:	0018      	movs	r0, r3
 80065ca:	f7f9 fe71 	bl	80002b0 <__aeabi_uidivmod>
 80065ce:	000b      	movs	r3, r1
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	4b11      	ldr	r3, [pc, #68]	@ (8006618 <UpdateSystemUptime+0xa0>)
 80065d4:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	213c      	movs	r1, #60	@ 0x3c
 80065da:	0018      	movs	r0, r3
 80065dc:	f7f9 fde2 	bl	80001a4 <__udivsi3>
 80065e0:	0003      	movs	r3, r0
 80065e2:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2118      	movs	r1, #24
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7f9 fe61 	bl	80002b0 <__aeabi_uidivmod>
 80065ee:	000b      	movs	r3, r1
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4b09      	ldr	r3, [pc, #36]	@ (8006618 <UpdateSystemUptime+0xa0>)
 80065f4:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2118      	movs	r1, #24
 80065fa:	0018      	movs	r0, r3
 80065fc:	f7f9 fdd2 	bl	80001a4 <__udivsi3>
 8006600:	0003      	movs	r3, r0
 8006602:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	b29a      	uxth	r2, r3
 8006608:	4b03      	ldr	r3, [pc, #12]	@ (8006618 <UpdateSystemUptime+0xa0>)
 800660a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800660c:	46c0      	nop			@ (mov r8, r8)
 800660e:	46bd      	mov	sp, r7
 8006610:	b008      	add	sp, #32
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20000d7c 	.word	0x20000d7c
 8006618:	20000d70 	.word	0x20000d70

0800661c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800661c:	b590      	push	{r4, r7, lr}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	0008      	movs	r0, r1
 8006626:	0011      	movs	r1, r2
 8006628:	1cfb      	adds	r3, r7, #3
 800662a:	1c02      	adds	r2, r0, #0
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	1cbb      	adds	r3, r7, #2
 8006630:	1c0a      	adds	r2, r1, #0
 8006632:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006634:	230e      	movs	r3, #14
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	2200      	movs	r2, #0
 800663a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800663c:	230f      	movs	r3, #15
 800663e:	18fb      	adds	r3, r7, r3
 8006640:	1cfa      	adds	r2, r7, #3
 8006642:	7812      	ldrb	r2, [r2, #0]
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e015      	b.n	8006674 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006648:	200f      	movs	r0, #15
 800664a:	183b      	adds	r3, r7, r0
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	18d2      	adds	r2, r2, r3
 8006652:	240e      	movs	r4, #14
 8006654:	193b      	adds	r3, r7, r4
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	7811      	ldrb	r1, [r2, #0]
 800665a:	2208      	movs	r2, #8
 800665c:	18ba      	adds	r2, r7, r2
 800665e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006660:	193b      	adds	r3, r7, r4
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	193b      	adds	r3, r7, r4
 8006666:	3201      	adds	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800666a:	183b      	adds	r3, r7, r0
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	183b      	adds	r3, r7, r0
 8006670:	3201      	adds	r2, #1
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	200f      	movs	r0, #15
 8006676:	183a      	adds	r2, r7, r0
 8006678:	1cbb      	adds	r3, r7, #2
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d9e2      	bls.n	8006648 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006682:	230e      	movs	r3, #14
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2208      	movs	r2, #8
 800668a:	18ba      	adds	r2, r7, r2
 800668c:	2100      	movs	r1, #0
 800668e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006690:	1cfb      	adds	r3, r7, #3
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b13      	cmp	r3, #19
 8006696:	d849      	bhi.n	800672c <aBuff2int+0x110>
    if (start == 17) { //month
 8006698:	1cfb      	adds	r3, r7, #3
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b11      	cmp	r3, #17
 800669e:	d122      	bne.n	80066e6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80066a0:	183b      	adds	r3, r7, r0
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e018      	b.n	80066da <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80066a8:	240f      	movs	r4, #15
 80066aa:	193b      	adds	r3, r7, r4
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <aBuff2int+0x128>)
 80066b0:	0092      	lsls	r2, r2, #2
 80066b2:	58d2      	ldr	r2, [r2, r3]
 80066b4:	2308      	movs	r3, #8
 80066b6:	18fb      	adds	r3, r7, r3
 80066b8:	0011      	movs	r1, r2
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7f9 fd4c 	bl	8000158 <strcmp>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d104      	bne.n	80066ce <aBuff2int+0xb2>
          return i+1;
 80066c4:	193b      	adds	r3, r7, r4
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	e035      	b.n	800673a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80066ce:	210f      	movs	r1, #15
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	187b      	adds	r3, r7, r1
 80066d6:	3201      	adds	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	230f      	movs	r3, #15
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b0b      	cmp	r3, #11
 80066e2:	d9e1      	bls.n	80066a8 <aBuff2int+0x8c>
 80066e4:	e022      	b.n	800672c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80066e6:	230f      	movs	r3, #15
 80066e8:	18fb      	adds	r3, r7, r3
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e018      	b.n	8006722 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80066f0:	240f      	movs	r4, #15
 80066f2:	193b      	adds	r3, r7, r4
 80066f4:	781a      	ldrb	r2, [r3, #0]
 80066f6:	4b14      	ldr	r3, [pc, #80]	@ (8006748 <aBuff2int+0x12c>)
 80066f8:	0092      	lsls	r2, r2, #2
 80066fa:	58d2      	ldr	r2, [r2, r3]
 80066fc:	2308      	movs	r3, #8
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	0011      	movs	r1, r2
 8006702:	0018      	movs	r0, r3
 8006704:	f7f9 fd28 	bl	8000158 <strcmp>
 8006708:	1e03      	subs	r3, r0, #0
 800670a:	d104      	bne.n	8006716 <aBuff2int+0xfa>
          return i+1;
 800670c:	193b      	adds	r3, r7, r4
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	b2db      	uxtb	r3, r3
 8006714:	e011      	b.n	800673a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006716:	210f      	movs	r1, #15
 8006718:	187b      	adds	r3, r7, r1
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	187b      	adds	r3, r7, r1
 800671e:	3201      	adds	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	230f      	movs	r3, #15
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b06      	cmp	r3, #6
 800672a:	d9e1      	bls.n	80066f0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800672c:	2308      	movs	r3, #8
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	0018      	movs	r0, r3
 8006732:	f018 f87e 	bl	801e832 <atoi>
 8006736:	0003      	movs	r3, r0
 8006738:	b2db      	uxtb	r3, r3
}
 800673a:	0018      	movs	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	b005      	add	sp, #20
 8006740:	bd90      	pop	{r4, r7, pc}
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	20000054 	.word	0x20000054
 8006748:	20000038 	.word	0x20000038

0800674c <ParseTime>:

void ParseTime(char* buffer) {
 800674c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800674e:	b08b      	sub	sp, #44	@ 0x2c
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006754:	2408      	movs	r4, #8
 8006756:	193a      	adds	r2, r7, r4
 8006758:	260c      	movs	r6, #12
 800675a:	19bb      	adds	r3, r7, r6
 800675c:	0011      	movs	r1, r2
 800675e:	0018      	movs	r0, r3
 8006760:	f000 f8f4 	bl	800694c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2219      	movs	r2, #25
 8006768:	2118      	movs	r1, #24
 800676a:	0018      	movs	r0, r3
 800676c:	f7ff ff56 	bl	800661c <aBuff2int>
 8006770:	0003      	movs	r3, r0
 8006772:	001a      	movs	r2, r3
 8006774:	19bb      	adds	r3, r7, r6
 8006776:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	221c      	movs	r2, #28
 800677c:	211b      	movs	r1, #27
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff ff4c 	bl	800661c <aBuff2int>
 8006784:	0003      	movs	r3, r0
 8006786:	001a      	movs	r2, r3
 8006788:	19bb      	adds	r3, r7, r6
 800678a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	221f      	movs	r2, #31
 8006790:	211e      	movs	r1, #30
 8006792:	0018      	movs	r0, r3
 8006794:	f7ff ff42 	bl	800661c <aBuff2int>
 8006798:	0003      	movs	r3, r0
 800679a:	001a      	movs	r2, r3
 800679c:	19bb      	adds	r3, r7, r6
 800679e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2224      	movs	r2, #36	@ 0x24
 80067a4:	2123      	movs	r1, #35	@ 0x23
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7ff ff38 	bl	800661c <aBuff2int>
 80067ac:	0003      	movs	r3, r0
 80067ae:	001a      	movs	r2, r3
 80067b0:	0025      	movs	r5, r4
 80067b2:	197b      	adds	r3, r7, r5
 80067b4:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2213      	movs	r2, #19
 80067ba:	2111      	movs	r1, #17
 80067bc:	0018      	movs	r0, r3
 80067be:	f7ff ff2d 	bl	800661c <aBuff2int>
 80067c2:	0003      	movs	r3, r0
 80067c4:	001a      	movs	r2, r3
 80067c6:	197b      	adds	r3, r7, r5
 80067c8:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2216      	movs	r2, #22
 80067ce:	2115      	movs	r1, #21
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7ff ff23 	bl	800661c <aBuff2int>
 80067d6:	0003      	movs	r3, r0
 80067d8:	001a      	movs	r2, r3
 80067da:	197b      	adds	r3, r7, r5
 80067dc:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	220f      	movs	r2, #15
 80067e2:	210d      	movs	r1, #13
 80067e4:	0018      	movs	r0, r3
 80067e6:	f7ff ff19 	bl	800661c <aBuff2int>
 80067ea:	0003      	movs	r3, r0
 80067ec:	001a      	movs	r2, r3
 80067ee:	197b      	adds	r3, r7, r5
 80067f0:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80067f2:	19bb      	adds	r3, r7, r6
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	001c      	movs	r4, r3
 80067f8:	19bb      	adds	r3, r7, r6
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	0018      	movs	r0, r3
 80067fe:	19bb      	adds	r3, r7, r6
 8006800:	789b      	ldrb	r3, [r3, #2]
 8006802:	4a1c      	ldr	r2, [pc, #112]	@ (8006874 <ParseTime+0x128>)
 8006804:	491c      	ldr	r1, [pc, #112]	@ (8006878 <ParseTime+0x12c>)
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	9000      	str	r0, [sp, #0]
 800680a:	0023      	movs	r3, r4
 800680c:	2003      	movs	r0, #3
 800680e:	f007 ff07 	bl	800e620 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8006812:	197b      	adds	r3, r7, r5
 8006814:	789b      	ldrb	r3, [r3, #2]
 8006816:	001c      	movs	r4, r3
 8006818:	197b      	adds	r3, r7, r5
 800681a:	785b      	ldrb	r3, [r3, #1]
 800681c:	0018      	movs	r0, r3
 800681e:	197b      	adds	r3, r7, r5
 8006820:	78db      	ldrb	r3, [r3, #3]
 8006822:	4a16      	ldr	r2, [pc, #88]	@ (800687c <ParseTime+0x130>)
 8006824:	4914      	ldr	r1, [pc, #80]	@ (8006878 <ParseTime+0x12c>)
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	9000      	str	r0, [sp, #0]
 800682a:	0023      	movs	r3, r4
 800682c:	2003      	movs	r0, #3
 800682e:	f007 fef7 	bl	800e620 <CreateLine>
  RTC_SetTime(&currentTime);
 8006832:	19bb      	adds	r3, r7, r6
 8006834:	0018      	movs	r0, r3
 8006836:	f000 f825 	bl	8006884 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800683a:	197b      	adds	r3, r7, r5
 800683c:	0018      	movs	r0, r3
 800683e:	f000 f847 	bl	80068d0 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006842:	197b      	adds	r3, r7, r5
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d101      	bne.n	800684e <ParseTime+0x102>
    reset_fanCleaningDone();
 800684a:	f002 fcf9 	bl	8009240 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 800684e:	4b0c      	ldr	r3, [pc, #48]	@ (8006880 <ParseTime+0x134>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006856:	230c      	movs	r3, #12
 8006858:	18fa      	adds	r2, r7, r3
 800685a:	2308      	movs	r3, #8
 800685c:	18fb      	adds	r3, r7, r3
 800685e:	0011      	movs	r1, r2
 8006860:	0018      	movs	r0, r3
 8006862:	f000 fa3d 	bl	8006ce0 <makeTime>
 8006866:	0002      	movs	r2, r0
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <ParseTime+0x134>)
 800686a:	601a      	str	r2, [r3, #0]
  }
}
 800686c:	46c0      	nop			@ (mov r8, r8)
 800686e:	46bd      	mov	sp, r7
 8006870:	b009      	add	sp, #36	@ 0x24
 8006872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006874:	08023ea8 	.word	0x08023ea8
 8006878:	08023ee0 	.word	0x08023ee0
 800687c:	08023ee4 	.word	0x08023ee4
 8006880:	20000d7c 	.word	0x20000d7c

08006884 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800689e:	4b09      	ldr	r3, [pc, #36]	@ (80068c4 <RTC_SetTime+0x40>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	0018      	movs	r0, r3
 80068a8:	f00f fc1a 	bl	80160e0 <HAL_RTC_SetTime>
 80068ac:	1e03      	subs	r3, r0, #0
 80068ae:	d005      	beq.n	80068bc <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80068b0:	4a05      	ldr	r2, [pc, #20]	@ (80068c8 <RTC_SetTime+0x44>)
 80068b2:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <RTC_SetTime+0x48>)
 80068b4:	0019      	movs	r1, r3
 80068b6:	2001      	movs	r0, #1
 80068b8:	f007 feb2 	bl	800e620 <CreateLine>
    }
}
 80068bc:	46c0      	nop			@ (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	b002      	add	sp, #8
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000d78 	.word	0x20000d78
 80068c8:	08023f18 	.word	0x08023f18
 80068cc:	08023f34 	.word	0x08023f34

080068d0 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80068d8:	4b16      	ldr	r3, [pc, #88]	@ (8006934 <RTC_SetDate+0x64>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	0018      	movs	r0, r3
 80068e2:	f00f fd05 	bl	80162f0 <HAL_RTC_SetDate>
 80068e6:	1e03      	subs	r3, r0, #0
 80068e8:	d005      	beq.n	80068f6 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 80068ea:	4a13      	ldr	r2, [pc, #76]	@ (8006938 <RTC_SetDate+0x68>)
 80068ec:	4b13      	ldr	r3, [pc, #76]	@ (800693c <RTC_SetDate+0x6c>)
 80068ee:	0019      	movs	r1, r3
 80068f0:	2001      	movs	r0, #1
 80068f2:	f007 fe95 	bl	800e620 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80068f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006934 <RTC_SetDate+0x64>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2101      	movs	r1, #1
 80068fc:	0018      	movs	r0, r3
 80068fe:	f010 f83d 	bl	801697c <HAL_RTCEx_BKUPRead>
 8006902:	0003      	movs	r3, r0
 8006904:	4a0e      	ldr	r2, [pc, #56]	@ (8006940 <RTC_SetDate+0x70>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d010      	beq.n	800692c <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800690a:	4a0e      	ldr	r2, [pc, #56]	@ (8006944 <RTC_SetDate+0x74>)
 800690c:	4b0e      	ldr	r3, [pc, #56]	@ (8006948 <RTC_SetDate+0x78>)
 800690e:	0019      	movs	r1, r3
 8006910:	2003      	movs	r0, #3
 8006912:	f007 fe85 	bl	800e620 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006916:	f00e fb63 	bl	8014fe0 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800691a:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <RTC_SetDate+0x64>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a08      	ldr	r2, [pc, #32]	@ (8006940 <RTC_SetDate+0x70>)
 8006920:	2101      	movs	r1, #1
 8006922:	0018      	movs	r0, r3
 8006924:	f010 f812 	bl	801694c <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006928:	f00e fb68 	bl	8014ffc <HAL_PWR_DisableBkUpAccess>
    }
}
 800692c:	46c0      	nop			@ (mov r8, r8)
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20000d78 	.word	0x20000d78
 8006938:	08023f38 	.word	0x08023f38
 800693c:	08023f34 	.word	0x08023f34
 8006940:	0000bebe 	.word	0x0000bebe
 8006944:	08023f54 	.word	0x08023f54
 8006948:	08023ee0 	.word	0x08023ee0

0800694c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800694c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006956:	250f      	movs	r5, #15
 8006958:	197b      	adds	r3, r7, r5
 800695a:	2201      	movs	r2, #1
 800695c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800695e:	230e      	movs	r3, #14
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8006966:	260c      	movs	r6, #12
 8006968:	19bc      	adds	r4, r7, r6
 800696a:	f006 ff0d 	bl	800d788 <powerCheck>
 800696e:	0003      	movs	r3, r0
 8006970:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006972:	19bb      	adds	r3, r7, r6
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d104      	bne.n	8006984 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800697a:	197b      	adds	r3, r7, r5
 800697c:	781a      	ldrb	r2, [r3, #0]
 800697e:	197b      	adds	r3, r7, r5
 8006980:	3201      	adds	r2, #1
 8006982:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006984:	230d      	movs	r3, #13
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e039      	b.n	8006a02 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800698e:	4b23      	ldr	r3, [pc, #140]	@ (8006a1c <RTC_GetTime+0xd0>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	0018      	movs	r0, r3
 8006998:	f00f fc4c 	bl	8016234 <HAL_RTC_GetTime>
 800699c:	1e03      	subs	r3, r0, #0
 800699e:	d005      	beq.n	80069ac <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80069a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a20 <RTC_GetTime+0xd4>)
 80069a2:	4b20      	ldr	r3, [pc, #128]	@ (8006a24 <RTC_GetTime+0xd8>)
 80069a4:	0019      	movs	r1, r3
 80069a6:	2001      	movs	r0, #1
 80069a8:	f007 fe3a 	bl	800e620 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80069ac:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <RTC_GetTime+0xd0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	0018      	movs	r0, r3
 80069b6:	f00f fd2f 	bl	8016418 <HAL_RTC_GetDate>
 80069ba:	1e03      	subs	r3, r0, #0
 80069bc:	d005      	beq.n	80069ca <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80069be:	4a1a      	ldr	r2, [pc, #104]	@ (8006a28 <RTC_GetTime+0xdc>)
 80069c0:	4b18      	ldr	r3, [pc, #96]	@ (8006a24 <RTC_GetTime+0xd8>)
 80069c2:	0019      	movs	r1, r3
 80069c4:	2001      	movs	r0, #1
 80069c6:	f007 fe2b 	bl	800e620 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80069ca:	230c      	movs	r3, #12
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d110      	bne.n	80069f6 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	210e      	movs	r1, #14
 80069da:	187a      	adds	r2, r7, r1
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d018      	beq.n	8006a14 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80069e2:	187b      	adds	r3, r7, r1
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	701a      	strb	r2, [r3, #0]
        t++;
 80069ea:	210f      	movs	r1, #15
 80069ec:	187b      	adds	r3, r7, r1
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	187b      	adds	r3, r7, r1
 80069f2:	3201      	adds	r2, #1
 80069f4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80069f6:	210d      	movs	r1, #13
 80069f8:	187b      	adds	r3, r7, r1
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	187b      	adds	r3, r7, r1
 80069fe:	3201      	adds	r2, #1
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	230d      	movs	r3, #13
 8006a04:	18fa      	adds	r2, r7, r3
 8006a06:	230f      	movs	r3, #15
 8006a08:	18fb      	adds	r3, r7, r3
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d3bd      	bcc.n	800698e <RTC_GetTime+0x42>
 8006a12:	e000      	b.n	8006a16 <RTC_GetTime+0xca>
      }
      else {
        return;
 8006a14:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b005      	add	sp, #20
 8006a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a1c:	20000d78 	.word	0x20000d78
 8006a20:	08023f6c 	.word	0x08023f6c
 8006a24:	08023f34 	.word	0x08023f34
 8006a28:	08023f88 	.word	0x08023f88

08006a2c <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a32:	003a      	movs	r2, r7
 8006a34:	1d3b      	adds	r3, r7, #4
 8006a36:	0011      	movs	r1, r2
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f7ff ff87 	bl	800694c <RTC_GetTime>
  return currentDate.WeekDay;
 8006a3e:	003b      	movs	r3, r7
 8006a40:	781b      	ldrb	r3, [r3, #0]
}
 8006a42:	0018      	movs	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b006      	add	sp, #24
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <getPosixTime>:

uint32_t getPosixTime(void) {
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a50:	003a      	movs	r2, r7
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	0011      	movs	r1, r2
 8006a56:	0018      	movs	r0, r3
 8006a58:	f7ff ff78 	bl	800694c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006a5c:	1d3a      	adds	r2, r7, #4
 8006a5e:	003b      	movs	r3, r7
 8006a60:	0011      	movs	r1, r2
 8006a62:	0018      	movs	r0, r3
 8006a64:	f000 f93c 	bl	8006ce0 <makeTime>
 8006a68:	0003      	movs	r3, r0
}
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	b006      	add	sp, #24
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a76:	b08d      	sub	sp, #52	@ 0x34
 8006a78:	af04      	add	r7, sp, #16
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006a7e:	240c      	movs	r4, #12
 8006a80:	193a      	adds	r2, r7, r4
 8006a82:	2508      	movs	r5, #8
 8006a84:	1979      	adds	r1, r7, r5
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f000 f9f3 	bl	8006e74 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a8e:	002a      	movs	r2, r5
 8006a90:	18bb      	adds	r3, r7, r2
 8006a92:	789b      	ldrb	r3, [r3, #2]
 8006a94:	001e      	movs	r6, r3
 8006a96:	18bb      	adds	r3, r7, r2
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	469c      	mov	ip, r3
 8006a9c:	18bb      	adds	r3, r7, r2
 8006a9e:	78db      	ldrb	r3, [r3, #3]
 8006aa0:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006aa2:	0021      	movs	r1, r4
 8006aa4:	187b      	adds	r3, r7, r1
 8006aa6:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006aa8:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006aaa:	187b      	adds	r3, r7, r1
 8006aac:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006aae:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006ab0:	187b      	adds	r3, r7, r1
 8006ab2:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006ab4:	4906      	ldr	r1, [pc, #24]	@ (8006ad0 <getUTCfromPosixTime+0x5c>)
 8006ab6:	6838      	ldr	r0, [r7, #0]
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	9502      	str	r5, [sp, #8]
 8006abc:	9401      	str	r4, [sp, #4]
 8006abe:	9200      	str	r2, [sp, #0]
 8006ac0:	4663      	mov	r3, ip
 8006ac2:	0032      	movs	r2, r6
 8006ac4:	f019 fb00 	bl	80200c8 <siprintf>
}
 8006ac8:	46c0      	nop			@ (mov r8, r8)
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b009      	add	sp, #36	@ 0x24
 8006ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad0:	08023fa4 	.word	0x08023fa4

08006ad4 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006adc:	4b10      	ldr	r3, [pc, #64]	@ (8006b20 <RTC_SetWakeUpTimer+0x4c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f00f fe97 	bl	8016814 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b20 <RTC_SetWakeUpTimer+0x4c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	22ff      	movs	r2, #255	@ 0xff
 8006af0:	401a      	ands	r2, r3
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <RTC_SetWakeUpTimer+0x4c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	490a      	ldr	r1, [pc, #40]	@ (8006b24 <RTC_SetWakeUpTimer+0x50>)
 8006afa:	430a      	orrs	r2, r1
 8006afc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006afe:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <RTC_SetWakeUpTimer+0x54>)
 8006b00:	2280      	movs	r2, #128	@ 0x80
 8006b02:	0352      	lsls	r2, r2, #13
 8006b04:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006b06:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <RTC_SetWakeUpTimer+0x4c>)
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	2204      	movs	r2, #4
 8006b10:	0019      	movs	r1, r3
 8006b12:	f00f fda7 	bl	8016664 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8006b16:	46c0      	nop			@ (mov r8, r8)
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b002      	add	sp, #8
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	20000d78 	.word	0x20000d78
 8006b24:	fffffb7f 	.word	0xfffffb7f
 8006b28:	40010400 	.word	0x40010400

08006b2c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006b30:	4a0b      	ldr	r2, [pc, #44]	@ (8006b60 <Enter_Standby_Mode+0x34>)
 8006b32:	4b0c      	ldr	r3, [pc, #48]	@ (8006b64 <Enter_Standby_Mode+0x38>)
 8006b34:	0019      	movs	r1, r3
 8006b36:	2003      	movs	r0, #3
 8006b38:	f007 fd72 	bl	800e620 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006b3c:	2064      	movs	r0, #100	@ 0x64
 8006b3e:	f008 f9b9 	bl	800eeb4 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006b42:	4b09      	ldr	r3, [pc, #36]	@ (8006b68 <Enter_Standby_Mode+0x3c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f00f fe64 	bl	8016814 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8006b4c:	f000 fe14 	bl	8007778 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8006b50:	f008 f9d4 	bl	800eefc <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8006b54:	f00e fabe 	bl	80150d4 <HAL_PWR_EnterSTANDBYMode>
}
 8006b58:	46c0      	nop			@ (mov r8, r8)
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	08023ff8 	.word	0x08023ff8
 8006b64:	08023ee0 	.word	0x08023ee0
 8006b68:	20000d78 	.word	0x20000d78

08006b6c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	0002      	movs	r2, r0
 8006b74:	1dbb      	adds	r3, r7, #6
 8006b76:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006b78:	4b46      	ldr	r3, [pc, #280]	@ (8006c94 <Enter_Stop_Mode+0x128>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006b80:	f002 fb14 	bl	80091ac <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006b84:	f7ff fbc0 	bl	8006308 <ReadBatteryVoltage>
 8006b88:	1c03      	adds	r3, r0, #0
 8006b8a:	1c18      	adds	r0, r3, #0
 8006b8c:	f7fc fc6a 	bl	8003464 <__aeabi_f2d>
 8006b90:	0002      	movs	r2, r0
 8006b92:	000b      	movs	r3, r1
 8006b94:	4840      	ldr	r0, [pc, #256]	@ (8006c98 <Enter_Stop_Mode+0x12c>)
 8006b96:	4941      	ldr	r1, [pc, #260]	@ (8006c9c <Enter_Stop_Mode+0x130>)
 8006b98:	9200      	str	r2, [sp, #0]
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	0002      	movs	r2, r0
 8006b9e:	2002      	movs	r0, #2
 8006ba0:	f007 fd3e 	bl	800e620 <CreateLine>
  powerDisplay(powerCheck());
 8006ba4:	f006 fdf0 	bl	800d788 <powerCheck>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	0018      	movs	r0, r3
 8006bac:	f006 fe08 	bl	800d7c0 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006bb0:	1dbb      	adds	r3, r7, #6
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8006ca0 <Enter_Stop_Mode+0x134>)
 8006bb6:	493b      	ldr	r1, [pc, #236]	@ (8006ca4 <Enter_Stop_Mode+0x138>)
 8006bb8:	2003      	movs	r0, #3
 8006bba:	f007 fd31 	bl	800e620 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006bbe:	f7ff ff44 	bl	8006a4a <getPosixTime>
 8006bc2:	0002      	movs	r2, r0
 8006bc4:	1dbb      	adds	r3, r7, #6
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	18d3      	adds	r3, r2, r3
 8006bca:	4a37      	ldr	r2, [pc, #220]	@ (8006ca8 <Enter_Stop_Mode+0x13c>)
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7ff ff50 	bl	8006a74 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006bd4:	4b34      	ldr	r3, [pc, #208]	@ (8006ca8 <Enter_Stop_Mode+0x13c>)
 8006bd6:	4a35      	ldr	r2, [pc, #212]	@ (8006cac <Enter_Stop_Mode+0x140>)
 8006bd8:	4930      	ldr	r1, [pc, #192]	@ (8006c9c <Enter_Stop_Mode+0x130>)
 8006bda:	2002      	movs	r0, #2
 8006bdc:	f007 fd20 	bl	800e620 <CreateLine>
  HAL_Delay(100);
 8006be0:	2064      	movs	r0, #100	@ 0x64
 8006be2:	f008 f967 	bl	800eeb4 <HAL_Delay>
  HAL_SuspendTick();
 8006be6:	f008 f989 	bl	800eefc <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006bea:	1dbb      	adds	r3, r7, #6
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f7ff ff70 	bl	8006ad4 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f00e fa10 	bl	801501c <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006bfc:	f001 fa54 	bl	80080a8 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006c00:	1dbb      	adds	r3, r7, #6
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	0018      	movs	r0, r3
 8006c06:	f002 fa5f 	bl	80090c8 <sen5x_enable>
 8006c0a:	1e03      	subs	r3, r0, #0
 8006c0c:	d01c      	beq.n	8006c48 <Enter_Stop_Mode+0xdc>
    showTime();
 8006c0e:	f7ff fc61 	bl	80064d4 <showTime>
    set_light_on_state();
 8006c12:	f002 ffe3 	bl	8009bdc <set_light_on_state>
    if (!userToggle) {
 8006c16:	4b26      	ldr	r3, [pc, #152]	@ (8006cb0 <Enter_Stop_Mode+0x144>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4053      	eors	r3, r2
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d011      	beq.n	8006c48 <Enter_Stop_Mode+0xdc>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006c24:	201c      	movs	r0, #28
 8006c26:	f7ff ff55 	bl	8006ad4 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca0 <Enter_Stop_Mode+0x134>)
 8006c2c:	491d      	ldr	r1, [pc, #116]	@ (8006ca4 <Enter_Stop_Mode+0x138>)
 8006c2e:	231c      	movs	r3, #28
 8006c30:	2003      	movs	r0, #3
 8006c32:	f007 fcf5 	bl	800e620 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006c36:	2101      	movs	r1, #1
 8006c38:	2001      	movs	r0, #1
 8006c3a:	f00e f9ef 	bl	801501c <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006c3e:	f001 fa33 	bl	80080a8 <SystemClock_Config>
      setsen5xReadTimer(0);
 8006c42:	2000      	movs	r0, #0
 8006c44:	f002 fa1e 	bl	8009084 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006c48:	f008 f966 	bl	800ef18 <HAL_ResumeTick>
  showTime();
 8006c4c:	f7ff fc42 	bl	80064d4 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006c50:	f001 fec2 	bl	80089d8 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006c54:	f004 fdf6 	bl	800b844 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f002 fa25 	bl	80090a8 <setsen5xSamplecounter>
  setESPTimeStamp(2500);
 8006c5e:	4b15      	ldr	r3, [pc, #84]	@ (8006cb4 <Enter_Stop_Mode+0x148>)
 8006c60:	0018      	movs	r0, r3
 8006c62:	f7fc fda5 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006c66:	2000      	movs	r0, #0
 8006c68:	f004 fdda 	bl	800b820 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	f007 fe9b 	bl	800e9a8 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006c72:	2000      	movs	r0, #0
 8006c74:	f001 fe9e 	bl	80089b4 <setMICTimeStamp>
  ESPTransmitDone = false;
 8006c78:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb8 <Enter_Stop_Mode+0x14c>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006c7e:	f008 f90f 	bl	800eea0 <HAL_GetTick>
 8006c82:	0003      	movs	r3, r0
 8006c84:	4a0d      	ldr	r2, [pc, #52]	@ (8006cbc <Enter_Stop_Mode+0x150>)
 8006c86:	189a      	adds	r2, r3, r2
 8006c88:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <Enter_Stop_Mode+0x154>)
 8006c8a:	601a      	str	r2, [r3, #0]
}
 8006c8c:	46c0      	nop			@ (mov r8, r8)
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b002      	add	sp, #8
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20001066 	.word	0x20001066
 8006c98:	0802401c 	.word	0x0802401c
 8006c9c:	08024034 	.word	0x08024034
 8006ca0:	08024038 	.word	0x08024038
 8006ca4:	08023ee0 	.word	0x08023ee0
 8006ca8:	20000d80 	.word	0x20000d80
 8006cac:	0802405c 	.word	0x0802405c
 8006cb0:	2000200a 	.word	0x2000200a
 8006cb4:	000009c4 	.word	0x000009c4
 8006cb8:	20000558 	.word	0x20000558
 8006cbc:	000008fc 	.word	0x000008fc
 8006cc0:	20000fc8 	.word	0x20000fc8

08006cc4 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006ccc:	4b03      	ldr	r3, [pc, #12]	@ (8006cdc <InitClock+0x18>)
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	601a      	str	r2, [r3, #0]
}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b002      	add	sp, #8
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	46c0      	nop			@ (mov r8, r8)
 8006cdc:	20000d78 	.word	0x20000d78

08006ce0 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	78db      	ldrb	r3, [r3, #3]
 8006cee:	001a      	movs	r2, r3
 8006cf0:	0013      	movs	r3, r2
 8006cf2:	025b      	lsls	r3, r3, #9
 8006cf4:	189b      	adds	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	189b      	adds	r3, r3, r2
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	189b      	adds	r3, r3, r2
 8006cfe:	011a      	lsls	r2, r3, #4
 8006d00:	1ad2      	subs	r2, r2, r3
 8006d02:	01d3      	lsls	r3, r2, #7
 8006d04:	001a      	movs	r2, r3
 8006d06:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e028      	b.n	8006d60 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a53      	ldr	r2, [pc, #332]	@ (8006e60 <makeTime+0x180>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	db21      	blt.n	8006d5a <makeTime+0x7a>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a52      	ldr	r2, [pc, #328]	@ (8006e64 <makeTime+0x184>)
 8006d1a:	4694      	mov	ip, r2
 8006d1c:	4463      	add	r3, ip
 8006d1e:	001a      	movs	r2, r3
 8006d20:	2303      	movs	r3, #3
 8006d22:	4013      	ands	r3, r2
 8006d24:	d119      	bne.n	8006d5a <makeTime+0x7a>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a4e      	ldr	r2, [pc, #312]	@ (8006e64 <makeTime+0x184>)
 8006d2a:	4694      	mov	ip, r2
 8006d2c:	4463      	add	r3, ip
 8006d2e:	2164      	movs	r1, #100	@ 0x64
 8006d30:	0018      	movs	r0, r3
 8006d32:	f7f9 fba7 	bl	8000484 <__aeabi_idivmod>
 8006d36:	1e0b      	subs	r3, r1, #0
 8006d38:	d10a      	bne.n	8006d50 <makeTime+0x70>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4a49      	ldr	r2, [pc, #292]	@ (8006e64 <makeTime+0x184>)
 8006d3e:	4694      	mov	ip, r2
 8006d40:	4463      	add	r3, ip
 8006d42:	22c8      	movs	r2, #200	@ 0xc8
 8006d44:	0051      	lsls	r1, r2, #1
 8006d46:	0018      	movs	r0, r3
 8006d48:	f7f9 fb9c 	bl	8000484 <__aeabi_idivmod>
 8006d4c:	1e0b      	subs	r3, r1, #0
 8006d4e:	d104      	bne.n	8006d5a <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4a45      	ldr	r2, [pc, #276]	@ (8006e68 <makeTime+0x188>)
 8006d54:	4694      	mov	ip, r2
 8006d56:	4463      	add	r3, ip
 8006d58:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	78db      	ldrb	r3, [r3, #3]
 8006d64:	001a      	movs	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	dbd0      	blt.n	8006d0e <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e03c      	b.n	8006dec <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d125      	bne.n	8006dc4 <makeTime+0xe4>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	78db      	ldrb	r3, [r3, #3]
 8006d7c:	4a39      	ldr	r2, [pc, #228]	@ (8006e64 <makeTime+0x184>)
 8006d7e:	4694      	mov	ip, r2
 8006d80:	4463      	add	r3, ip
 8006d82:	001a      	movs	r2, r3
 8006d84:	2303      	movs	r3, #3
 8006d86:	4013      	ands	r3, r2
 8006d88:	d11c      	bne.n	8006dc4 <makeTime+0xe4>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	78db      	ldrb	r3, [r3, #3]
 8006d8e:	4a35      	ldr	r2, [pc, #212]	@ (8006e64 <makeTime+0x184>)
 8006d90:	4694      	mov	ip, r2
 8006d92:	4463      	add	r3, ip
 8006d94:	2164      	movs	r1, #100	@ 0x64
 8006d96:	0018      	movs	r0, r3
 8006d98:	f7f9 fb74 	bl	8000484 <__aeabi_idivmod>
 8006d9c:	1e0b      	subs	r3, r1, #0
 8006d9e:	d10b      	bne.n	8006db8 <makeTime+0xd8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	78db      	ldrb	r3, [r3, #3]
 8006da4:	4a2f      	ldr	r2, [pc, #188]	@ (8006e64 <makeTime+0x184>)
 8006da6:	4694      	mov	ip, r2
 8006da8:	4463      	add	r3, ip
 8006daa:	22c8      	movs	r2, #200	@ 0xc8
 8006dac:	0051      	lsls	r1, r2, #1
 8006dae:	0018      	movs	r0, r3
 8006db0:	f7f9 fb68 	bl	8000484 <__aeabi_idivmod>
 8006db4:	1e0b      	subs	r3, r1, #0
 8006db6:	d105      	bne.n	8006dc4 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4a2c      	ldr	r2, [pc, #176]	@ (8006e6c <makeTime+0x18c>)
 8006dbc:	4694      	mov	ip, r2
 8006dbe:	4463      	add	r3, ip
 8006dc0:	60bb      	str	r3, [r7, #8]
 8006dc2:	e010      	b.n	8006de6 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4a29      	ldr	r2, [pc, #164]	@ (8006e70 <makeTime+0x190>)
 8006dca:	5cd3      	ldrb	r3, [r2, r3]
 8006dcc:	001a      	movs	r2, r3
 8006dce:	0013      	movs	r3, r2
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	189b      	adds	r3, r3, r2
 8006dd4:	011a      	lsls	r2, r3, #4
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	0113      	lsls	r3, r2, #4
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	01db      	lsls	r3, r3, #7
 8006dde:	001a      	movs	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	189b      	adds	r3, r3, r2
 8006de4:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3301      	adds	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	785b      	ldrb	r3, [r3, #1]
 8006df0:	001a      	movs	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	dbbc      	blt.n	8006d72 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	789b      	ldrb	r3, [r3, #2]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	001a      	movs	r2, r3
 8006e00:	0013      	movs	r3, r2
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	189b      	adds	r3, r3, r2
 8006e06:	011a      	lsls	r2, r3, #4
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	0113      	lsls	r3, r2, #4
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	01db      	lsls	r3, r3, #7
 8006e10:	001a      	movs	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	189b      	adds	r3, r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	001a      	movs	r2, r3
 8006e1e:	0013      	movs	r3, r2
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	011a      	lsls	r2, r3, #4
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	0113      	lsls	r3, r2, #4
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	001a      	movs	r2, r3
 8006e38:	0013      	movs	r3, r2
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	001a      	movs	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	189b      	adds	r3, r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	789b      	ldrb	r3, [r3, #2]
 8006e4c:	001a      	movs	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	189b      	adds	r3, r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006e54:	68bb      	ldr	r3, [r7, #8]
}
 8006e56:	0018      	movs	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b004      	add	sp, #16
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	fffff84f 	.word	0xfffff84f
 8006e64:	000007b2 	.word	0x000007b2
 8006e68:	00015180 	.word	0x00015180
 8006e6c:	00263b80 	.word	0x00263b80
 8006e70:	080255cc 	.word	0x080255cc

08006e74 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b089      	sub	sp, #36	@ 0x24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	213c      	movs	r1, #60	@ 0x3c
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7f9 fa11 	bl	80002b0 <__aeabi_uidivmod>
 8006e8e:	000b      	movs	r3, r1
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	213c      	movs	r1, #60	@ 0x3c
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f7f9 f982 	bl	80001a4 <__udivsi3>
 8006ea0:	0003      	movs	r3, r0
 8006ea2:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	213c      	movs	r1, #60	@ 0x3c
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f7f9 fa01 	bl	80002b0 <__aeabi_uidivmod>
 8006eae:	000b      	movs	r3, r1
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	213c      	movs	r1, #60	@ 0x3c
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7f9 f972 	bl	80001a4 <__udivsi3>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2118      	movs	r1, #24
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f7f9 f9f1 	bl	80002b0 <__aeabi_uidivmod>
 8006ece:	000b      	movs	r3, r1
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2118      	movs	r1, #24
 8006eda:	0018      	movs	r0, r3
 8006edc:	f7f9 f962 	bl	80001a4 <__udivsi3>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	2107      	movs	r1, #7
 8006eea:	0018      	movs	r0, r3
 8006eec:	f7f9 f9e0 	bl	80002b0 <__aeabi_uidivmod>
 8006ef0:	000b      	movs	r3, r1
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006efc:	231f      	movs	r3, #31
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	2200      	movs	r2, #0
 8006f02:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006f08:	e005      	b.n	8006f16 <breakPosixTime+0xa2>
    year++;
 8006f0a:	211f      	movs	r1, #31
 8006f0c:	187b      	adds	r3, r7, r1
 8006f0e:	781a      	ldrb	r2, [r3, #0]
 8006f10:	187b      	adds	r3, r7, r1
 8006f12:	3201      	adds	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006f16:	241f      	movs	r4, #31
 8006f18:	193b      	adds	r3, r7, r4
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4a64      	ldr	r2, [pc, #400]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f1e:	4694      	mov	ip, r2
 8006f20:	4463      	add	r3, ip
 8006f22:	001a      	movs	r2, r3
 8006f24:	2303      	movs	r3, #3
 8006f26:	4013      	ands	r3, r2
 8006f28:	d119      	bne.n	8006f5e <breakPosixTime+0xea>
 8006f2a:	193b      	adds	r3, r7, r4
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	4a60      	ldr	r2, [pc, #384]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f30:	4694      	mov	ip, r2
 8006f32:	4463      	add	r3, ip
 8006f34:	2164      	movs	r1, #100	@ 0x64
 8006f36:	0018      	movs	r0, r3
 8006f38:	f7f9 faa4 	bl	8000484 <__aeabi_idivmod>
 8006f3c:	1e0b      	subs	r3, r1, #0
 8006f3e:	d10b      	bne.n	8006f58 <breakPosixTime+0xe4>
 8006f40:	193b      	adds	r3, r7, r4
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	4a5a      	ldr	r2, [pc, #360]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f46:	4694      	mov	ip, r2
 8006f48:	4463      	add	r3, ip
 8006f4a:	22c8      	movs	r2, #200	@ 0xc8
 8006f4c:	0051      	lsls	r1, r2, #1
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7f9 fa98 	bl	8000484 <__aeabi_idivmod>
 8006f54:	1e0b      	subs	r3, r1, #0
 8006f56:	d102      	bne.n	8006f5e <breakPosixTime+0xea>
 8006f58:	23b7      	movs	r3, #183	@ 0xb7
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	e001      	b.n	8006f62 <breakPosixTime+0xee>
 8006f5e:	236e      	movs	r3, #110	@ 0x6e
 8006f60:	33ff      	adds	r3, #255	@ 0xff
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	18d3      	adds	r3, r2, r3
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d9cc      	bls.n	8006f0a <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	241f      	movs	r4, #31
 8006f74:	193a      	adds	r2, r7, r4
 8006f76:	7812      	ldrb	r2, [r2, #0]
 8006f78:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f80:	4694      	mov	ip, r2
 8006f82:	4463      	add	r3, ip
 8006f84:	001a      	movs	r2, r3
 8006f86:	2303      	movs	r3, #3
 8006f88:	4013      	ands	r3, r2
 8006f8a:	d119      	bne.n	8006fc0 <breakPosixTime+0x14c>
 8006f8c:	193b      	adds	r3, r7, r4
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	4a47      	ldr	r2, [pc, #284]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f92:	4694      	mov	ip, r2
 8006f94:	4463      	add	r3, ip
 8006f96:	2164      	movs	r1, #100	@ 0x64
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f7f9 fa73 	bl	8000484 <__aeabi_idivmod>
 8006f9e:	1e0b      	subs	r3, r1, #0
 8006fa0:	d10b      	bne.n	8006fba <breakPosixTime+0x146>
 8006fa2:	193b      	adds	r3, r7, r4
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	4a42      	ldr	r2, [pc, #264]	@ (80070b0 <breakPosixTime+0x23c>)
 8006fa8:	4694      	mov	ip, r2
 8006faa:	4463      	add	r3, ip
 8006fac:	22c8      	movs	r2, #200	@ 0xc8
 8006fae:	0051      	lsls	r1, r2, #1
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f7f9 fa67 	bl	8000484 <__aeabi_idivmod>
 8006fb6:	1e0b      	subs	r3, r1, #0
 8006fb8:	d102      	bne.n	8006fc0 <breakPosixTime+0x14c>
 8006fba:	23b7      	movs	r3, #183	@ 0xb7
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	e001      	b.n	8006fc4 <breakPosixTime+0x150>
 8006fc0:	236e      	movs	r3, #110	@ 0x6e
 8006fc2:	33ff      	adds	r3, #255	@ 0xff
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	61bb      	str	r3, [r7, #24]

  days=0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
  month=0;
 8006fd6:	211e      	movs	r1, #30
 8006fd8:	187b      	adds	r3, r7, r1
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006fde:	231d      	movs	r3, #29
 8006fe0:	18fb      	adds	r3, r7, r3
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006fe6:	187b      	adds	r3, r7, r1
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e048      	b.n	8007080 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006fee:	231e      	movs	r3, #30
 8006ff0:	18fb      	adds	r3, r7, r3
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d12a      	bne.n	800704e <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006ff8:	241f      	movs	r4, #31
 8006ffa:	193b      	adds	r3, r7, r4
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80070b0 <breakPosixTime+0x23c>)
 8007000:	4694      	mov	ip, r2
 8007002:	4463      	add	r3, ip
 8007004:	001a      	movs	r2, r3
 8007006:	2303      	movs	r3, #3
 8007008:	4013      	ands	r3, r2
 800700a:	d11b      	bne.n	8007044 <breakPosixTime+0x1d0>
 800700c:	193b      	adds	r3, r7, r4
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	4a27      	ldr	r2, [pc, #156]	@ (80070b0 <breakPosixTime+0x23c>)
 8007012:	4694      	mov	ip, r2
 8007014:	4463      	add	r3, ip
 8007016:	2164      	movs	r1, #100	@ 0x64
 8007018:	0018      	movs	r0, r3
 800701a:	f7f9 fa33 	bl	8000484 <__aeabi_idivmod>
 800701e:	1e0b      	subs	r3, r1, #0
 8007020:	d10b      	bne.n	800703a <breakPosixTime+0x1c6>
 8007022:	193b      	adds	r3, r7, r4
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	4a22      	ldr	r2, [pc, #136]	@ (80070b0 <breakPosixTime+0x23c>)
 8007028:	4694      	mov	ip, r2
 800702a:	4463      	add	r3, ip
 800702c:	22c8      	movs	r2, #200	@ 0xc8
 800702e:	0051      	lsls	r1, r2, #1
 8007030:	0018      	movs	r0, r3
 8007032:	f7f9 fa27 	bl	8000484 <__aeabi_idivmod>
 8007036:	1e0b      	subs	r3, r1, #0
 8007038:	d104      	bne.n	8007044 <breakPosixTime+0x1d0>
        monthLength=29;
 800703a:	231d      	movs	r3, #29
 800703c:	18fb      	adds	r3, r7, r3
 800703e:	221d      	movs	r2, #29
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e00c      	b.n	800705e <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8007044:	231d      	movs	r3, #29
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	221c      	movs	r2, #28
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	e007      	b.n	800705e <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800704e:	231e      	movs	r3, #30
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	231d      	movs	r3, #29
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	4916      	ldr	r1, [pc, #88]	@ (80070b4 <breakPosixTime+0x240>)
 800705a:	5c8a      	ldrb	r2, [r1, r2]
 800705c:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800705e:	211d      	movs	r1, #29
 8007060:	187b      	adds	r3, r7, r1
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	429a      	cmp	r2, r3
 8007068:	d310      	bcc.n	800708c <breakPosixTime+0x218>
      time -= monthLength;
 800706a:	187b      	adds	r3, r7, r1
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007074:	211e      	movs	r1, #30
 8007076:	187b      	adds	r3, r7, r1
 8007078:	781a      	ldrb	r2, [r3, #0]
 800707a:	187b      	adds	r3, r7, r1
 800707c:	3201      	adds	r2, #1
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	231e      	movs	r3, #30
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b0b      	cmp	r3, #11
 8007088:	d9b1      	bls.n	8006fee <breakPosixTime+0x17a>
 800708a:	e000      	b.n	800708e <breakPosixTime+0x21a>
    } else {
        break;
 800708c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800708e:	231e      	movs	r3, #30
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	b2da      	uxtb	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	3301      	adds	r3, #1
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	709a      	strb	r2, [r3, #2]
}
 80070a8:	46c0      	nop			@ (mov r8, r8)
 80070aa:	46bd      	mov	sp, r7
 80070ac:	b009      	add	sp, #36	@ 0x24
 80070ae:	bd90      	pop	{r4, r7, pc}
 80070b0:	000007b2 	.word	0x000007b2
 80070b4:	080255cc 	.word	0x080255cc

080070b8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80070be:	003b      	movs	r3, r7
 80070c0:	0018      	movs	r0, r3
 80070c2:	2308      	movs	r3, #8
 80070c4:	001a      	movs	r2, r3
 80070c6:	2100      	movs	r1, #0
 80070c8:	f019 f942 	bl	8020350 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80070cc:	4b30      	ldr	r3, [pc, #192]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070ce:	4a31      	ldr	r2, [pc, #196]	@ (8007194 <MX_ADC_Init+0xdc>)
 80070d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80070d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80070d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070da:	22c0      	movs	r2, #192	@ 0xc0
 80070dc:	0612      	lsls	r2, r2, #24
 80070de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80070e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80070e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80070ec:	4b28      	ldr	r3, [pc, #160]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070ee:	2201      	movs	r2, #1
 80070f0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070f2:	4b27      	ldr	r3, [pc, #156]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80070f8:	4b25      	ldr	r3, [pc, #148]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070fa:	2220      	movs	r2, #32
 80070fc:	2100      	movs	r1, #0
 80070fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007100:	4b23      	ldr	r3, [pc, #140]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007102:	2221      	movs	r2, #33	@ 0x21
 8007104:	2101      	movs	r1, #1
 8007106:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007108:	4b21      	ldr	r3, [pc, #132]	@ (8007190 <MX_ADC_Init+0xd8>)
 800710a:	2200      	movs	r2, #0
 800710c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800710e:	4b20      	ldr	r3, [pc, #128]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007110:	22c2      	movs	r2, #194	@ 0xc2
 8007112:	32ff      	adds	r2, #255	@ 0xff
 8007114:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8007116:	4b1e      	ldr	r3, [pc, #120]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007118:	222c      	movs	r2, #44	@ 0x2c
 800711a:	2100      	movs	r1, #0
 800711c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800711e:	4b1c      	ldr	r3, [pc, #112]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007120:	2204      	movs	r2, #4
 8007122:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007124:	4b1a      	ldr	r3, [pc, #104]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007126:	2200      	movs	r2, #0
 8007128:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800712a:	4b19      	ldr	r3, [pc, #100]	@ (8007190 <MX_ADC_Init+0xd8>)
 800712c:	2200      	movs	r2, #0
 800712e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007130:	4b17      	ldr	r3, [pc, #92]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007132:	2200      	movs	r2, #0
 8007134:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007136:	4b16      	ldr	r3, [pc, #88]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007138:	2200      	movs	r2, #0
 800713a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800713c:	4b14      	ldr	r3, [pc, #80]	@ (8007190 <MX_ADC_Init+0xd8>)
 800713e:	0018      	movs	r0, r3
 8007140:	f007 ff16 	bl	800ef70 <HAL_ADC_Init>
 8007144:	1e03      	subs	r3, r0, #0
 8007146:	d001      	beq.n	800714c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007148:	f001 f8f4 	bl	8008334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800714c:	003b      	movs	r3, r7
 800714e:	4a12      	ldr	r2, [pc, #72]	@ (8007198 <MX_ADC_Init+0xe0>)
 8007150:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007152:	003b      	movs	r3, r7
 8007154:	2280      	movs	r2, #128	@ 0x80
 8007156:	0152      	lsls	r2, r2, #5
 8007158:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800715a:	003a      	movs	r2, r7
 800715c:	4b0c      	ldr	r3, [pc, #48]	@ (8007190 <MX_ADC_Init+0xd8>)
 800715e:	0011      	movs	r1, r2
 8007160:	0018      	movs	r0, r3
 8007162:	f008 f975 	bl	800f450 <HAL_ADC_ConfigChannel>
 8007166:	1e03      	subs	r3, r0, #0
 8007168:	d001      	beq.n	800716e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800716a:	f001 f8e3 	bl	8008334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800716e:	003b      	movs	r3, r7
 8007170:	4a0a      	ldr	r2, [pc, #40]	@ (800719c <MX_ADC_Init+0xe4>)
 8007172:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007174:	003a      	movs	r2, r7
 8007176:	4b06      	ldr	r3, [pc, #24]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007178:	0011      	movs	r1, r2
 800717a:	0018      	movs	r0, r3
 800717c:	f008 f968 	bl	800f450 <HAL_ADC_ConfigChannel>
 8007180:	1e03      	subs	r3, r0, #0
 8007182:	d001      	beq.n	8007188 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007184:	f001 f8d6 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007188:	46c0      	nop			@ (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b002      	add	sp, #8
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000d98 	.word	0x20000d98
 8007194:	40012400 	.word	0x40012400
 8007198:	38004000 	.word	0x38004000
 800719c:	3c008000 	.word	0x3c008000

080071a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b089      	sub	sp, #36	@ 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071a8:	240c      	movs	r4, #12
 80071aa:	193b      	adds	r3, r7, r4
 80071ac:	0018      	movs	r0, r3
 80071ae:	2314      	movs	r3, #20
 80071b0:	001a      	movs	r2, r3
 80071b2:	2100      	movs	r1, #0
 80071b4:	f019 f8cc 	bl	8020350 <memset>
  if(adcHandle->Instance==ADC1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a14      	ldr	r2, [pc, #80]	@ (8007210 <HAL_ADC_MspInit+0x70>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d121      	bne.n	8007206 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80071c2:	4b14      	ldr	r3, [pc, #80]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071c6:	4b13      	ldr	r3, [pc, #76]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071c8:	2180      	movs	r1, #128	@ 0x80
 80071ca:	0089      	lsls	r1, r1, #2
 80071cc:	430a      	orrs	r2, r1
 80071ce:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071d0:	4b10      	ldr	r3, [pc, #64]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071d6:	2104      	movs	r1, #4
 80071d8:	430a      	orrs	r2, r1
 80071da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	2204      	movs	r2, #4
 80071e2:	4013      	ands	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80071e8:	193b      	adds	r3, r7, r4
 80071ea:	2230      	movs	r2, #48	@ 0x30
 80071ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071ee:	193b      	adds	r3, r7, r4
 80071f0:	2203      	movs	r2, #3
 80071f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f4:	193b      	adds	r3, r7, r4
 80071f6:	2200      	movs	r2, #0
 80071f8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071fa:	193b      	adds	r3, r7, r4
 80071fc:	4a06      	ldr	r2, [pc, #24]	@ (8007218 <HAL_ADC_MspInit+0x78>)
 80071fe:	0019      	movs	r1, r3
 8007200:	0010      	movs	r0, r2
 8007202:	f008 ff43 	bl	801008c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007206:	46c0      	nop			@ (mov r8, r8)
 8007208:	46bd      	mov	sp, r7
 800720a:	b009      	add	sp, #36	@ 0x24
 800720c:	bd90      	pop	{r4, r7, pc}
 800720e:	46c0      	nop			@ (mov r8, r8)
 8007210:	40012400 	.word	0x40012400
 8007214:	40021000 	.word	0x40021000
 8007218:	50000800 	.word	0x50000800

0800721c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007222:	4b10      	ldr	r3, [pc, #64]	@ (8007264 <MX_DMA_Init+0x48>)
 8007224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007226:	4b0f      	ldr	r3, [pc, #60]	@ (8007264 <MX_DMA_Init+0x48>)
 8007228:	2101      	movs	r1, #1
 800722a:	430a      	orrs	r2, r1
 800722c:	631a      	str	r2, [r3, #48]	@ 0x30
 800722e:	4b0d      	ldr	r3, [pc, #52]	@ (8007264 <MX_DMA_Init+0x48>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007232:	2201      	movs	r2, #1
 8007234:	4013      	ands	r3, r2
 8007236:	607b      	str	r3, [r7, #4]
 8007238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	200a      	movs	r0, #10
 8007240:	f008 fad2 	bl	800f7e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007244:	200a      	movs	r0, #10
 8007246:	f008 fae4 	bl	800f812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800724a:	2200      	movs	r2, #0
 800724c:	2103      	movs	r1, #3
 800724e:	200b      	movs	r0, #11
 8007250:	f008 faca 	bl	800f7e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007254:	200b      	movs	r0, #11
 8007256:	f008 fadc 	bl	800f812 <HAL_NVIC_EnableIRQ>

}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	46bd      	mov	sp, r7
 800725e:	b002      	add	sp, #8
 8007260:	bd80      	pop	{r7, pc}
 8007262:	46c0      	nop			@ (mov r8, r8)
 8007264:	40021000 	.word	0x40021000

08007268 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b7f      	cmp	r3, #127	@ 0x7f
 8007278:	d901      	bls.n	800727e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800727a:	237f      	movs	r3, #127	@ 0x7f
 800727c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800727e:	2017      	movs	r0, #23
 8007280:	183b      	adds	r3, r7, r0
 8007282:	490d      	ldr	r1, [pc, #52]	@ (80072b8 <accessLUT10log10+0x50>)
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	188a      	adds	r2, r1, r2
 8007288:	7812      	ldrb	r2, [r2, #0]
 800728a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800728c:	0001      	movs	r1, r0
 800728e:	187b      	adds	r3, r7, r1
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2206      	movs	r2, #6
 8007294:	4113      	asrs	r3, r2
 8007296:	001a      	movs	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800729c:	187b      	adds	r3, r7, r1
 800729e:	781a      	ldrb	r2, [r3, #0]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2106      	movs	r1, #6
 80072a6:	408b      	lsls	r3, r1
 80072a8:	1ad2      	subs	r2, r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	601a      	str	r2, [r3, #0]
}
 80072ae:	46c0      	nop			@ (mov r8, r8)
 80072b0:	46bd      	mov	sp, r7
 80072b2:	b006      	add	sp, #24
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	46c0      	nop			@ (mov r8, r8)
 80072b8:	080255d8 	.word	0x080255d8

080072bc <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b090      	sub	sp, #64	@ 0x40
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6138      	str	r0, [r7, #16]
 80072c4:	6179      	str	r1, [r7, #20]
 80072c6:	60fa      	str	r2, [r7, #12]
 80072c8:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80072ca:	2308      	movs	r3, #8
 80072cc:	001a      	movs	r2, r3
 80072ce:	3a20      	subs	r2, #32
 80072d0:	2a00      	cmp	r2, #0
 80072d2:	db03      	blt.n	80072dc <efficient10log10+0x20>
 80072d4:	2101      	movs	r1, #1
 80072d6:	4091      	lsls	r1, r2
 80072d8:	000d      	movs	r5, r1
 80072da:	e008      	b.n	80072ee <efficient10log10+0x32>
 80072dc:	2220      	movs	r2, #32
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	2101      	movs	r1, #1
 80072e2:	40d1      	lsrs	r1, r2
 80072e4:	000a      	movs	r2, r1
 80072e6:	2100      	movs	r1, #0
 80072e8:	4099      	lsls	r1, r3
 80072ea:	000d      	movs	r5, r1
 80072ec:	4315      	orrs	r5, r2
 80072ee:	2201      	movs	r2, #1
 80072f0:	409a      	lsls	r2, r3
 80072f2:	0014      	movs	r4, r2
 80072f4:	2201      	movs	r2, #1
 80072f6:	4252      	negs	r2, r2
 80072f8:	17d3      	asrs	r3, r2, #31
 80072fa:	1912      	adds	r2, r2, r4
 80072fc:	416b      	adcs	r3, r5
 80072fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8007302:	2336      	movs	r3, #54	@ 0x36
 8007304:	2208      	movs	r2, #8
 8007306:	189b      	adds	r3, r3, r2
 8007308:	19db      	adds	r3, r3, r7
 800730a:	2200      	movs	r2, #0
 800730c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800730e:	e017      	b.n	8007340 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	07db      	lsls	r3, r3, #31
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	0852      	lsrs	r2, r2, #1
 8007318:	603a      	str	r2, [r7, #0]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	431a      	orrs	r2, r3
 800731e:	603a      	str	r2, [r7, #0]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	687c      	ldr	r4, [r7, #4]
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	617c      	str	r4, [r7, #20]
        bShift++;
 800732e:	2136      	movs	r1, #54	@ 0x36
 8007330:	2008      	movs	r0, #8
 8007332:	180b      	adds	r3, r1, r0
 8007334:	19db      	adds	r3, r3, r7
 8007336:	881a      	ldrh	r2, [r3, #0]
 8007338:	180b      	adds	r3, r1, r0
 800733a:	19db      	adds	r3, r3, r7
 800733c:	3201      	adds	r2, #1
 800733e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007344:	429a      	cmp	r2, r3
 8007346:	d8e3      	bhi.n	8007310 <efficient10log10+0x54>
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734c:	429a      	cmp	r2, r3
 800734e:	d103      	bne.n	8007358 <efficient10log10+0x9c>
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007354:	429a      	cmp	r2, r3
 8007356:	d8db      	bhi.n	8007310 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	2308      	movs	r3, #8
 800735c:	3b01      	subs	r3, #1
 800735e:	2101      	movs	r1, #1
 8007360:	4099      	lsls	r1, r3
 8007362:	000b      	movs	r3, r1
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007370:	231c      	movs	r3, #28
 8007372:	2408      	movs	r4, #8
 8007374:	191b      	adds	r3, r3, r4
 8007376:	19da      	adds	r2, r3, r7
 8007378:	2320      	movs	r3, #32
 800737a:	191b      	adds	r3, r3, r4
 800737c:	19d9      	adds	r1, r3, r7
 800737e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007380:	0018      	movs	r0, r3
 8007382:	f7ff ff71 	bl	8007268 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007386:	2215      	movs	r2, #21
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800738c:	2036      	movs	r0, #54	@ 0x36
 800738e:	1902      	adds	r2, r0, r4
 8007390:	19d2      	adds	r2, r2, r7
 8007392:	8812      	ldrh	r2, [r2, #0]
 8007394:	2103      	movs	r1, #3
 8007396:	434a      	muls	r2, r1
 8007398:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800739a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800739c:	0021      	movs	r1, r4
 800739e:	1843      	adds	r3, r0, r1
 80073a0:	19db      	adds	r3, r3, r7
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	2201      	movs	r2, #1
 80073a6:	4353      	muls	r3, r2
 80073a8:	2203      	movs	r2, #3
 80073aa:	4113      	asrs	r3, r2
 80073ac:	001a      	movs	r2, r3
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80073b2:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80073b4:	2314      	movs	r3, #20
 80073b6:	185b      	adds	r3, r3, r1
 80073b8:	19da      	adds	r2, r3, r7
 80073ba:	2318      	movs	r3, #24
 80073bc:	185b      	adds	r3, r3, r1
 80073be:	19db      	adds	r3, r3, r7
 80073c0:	0011      	movs	r1, r2
 80073c2:	0018      	movs	r0, r3
 80073c4:	f000 f80a 	bl	80073dc <correctIntFracNumber>
    integerPart[0] = intPart;
 80073c8:	6a3a      	ldr	r2, [r7, #32]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	46c0      	nop			@ (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b010      	add	sp, #64	@ 0x40
 80073da:	bdb0      	pop	{r4, r5, r7, pc}

080073dc <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80073e6:	e00a      	b.n	80073fe <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3b0a      	subs	r3, #10
 80073f8:	001a      	movs	r2, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b09      	cmp	r3, #9
 8007404:	dcf0      	bgt.n	80073e8 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8007406:	e00a      	b.n	800741e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	1e5a      	subs	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	330a      	adds	r3, #10
 8007418:	001a      	movs	r2, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3309      	adds	r3, #9
 8007424:	dbf0      	blt.n	8007408 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	da0f      	bge.n	800744e <correctIntFracNumber+0x72>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dd0b      	ble.n	800744e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3b0a      	subs	r3, #10
 8007446:	001a      	movs	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800744c:	e012      	b.n	8007474 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	dd0e      	ble.n	8007474 <correctIntFracNumber+0x98>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	da0a      	bge.n	8007474 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	1e5a      	subs	r2, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330a      	adds	r3, #10
 800746e:	001a      	movs	r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	46c0      	nop			@ (mov r8, r8)
 8007476:	46bd      	mov	sp, r7
 8007478:	b002      	add	sp, #8
 800747a:	bd80      	pop	{r7, pc}

0800747c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b08b      	sub	sp, #44	@ 0x2c
 8007480:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007482:	2414      	movs	r4, #20
 8007484:	193b      	adds	r3, r7, r4
 8007486:	0018      	movs	r0, r3
 8007488:	2314      	movs	r3, #20
 800748a:	001a      	movs	r2, r3
 800748c:	2100      	movs	r1, #0
 800748e:	f018 ff5f 	bl	8020350 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007492:	4b8a      	ldr	r3, [pc, #552]	@ (80076bc <MX_GPIO_Init+0x240>)
 8007494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007496:	4b89      	ldr	r3, [pc, #548]	@ (80076bc <MX_GPIO_Init+0x240>)
 8007498:	2104      	movs	r1, #4
 800749a:	430a      	orrs	r2, r1
 800749c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800749e:	4b87      	ldr	r3, [pc, #540]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	2204      	movs	r2, #4
 80074a4:	4013      	ands	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80074aa:	4b84      	ldr	r3, [pc, #528]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ae:	4b83      	ldr	r3, [pc, #524]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074b0:	2180      	movs	r1, #128	@ 0x80
 80074b2:	430a      	orrs	r2, r1
 80074b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074b6:	4b81      	ldr	r3, [pc, #516]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	2280      	movs	r2, #128	@ 0x80
 80074bc:	4013      	ands	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c2:	4b7e      	ldr	r3, [pc, #504]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c6:	4b7d      	ldr	r3, [pc, #500]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074c8:	2101      	movs	r1, #1
 80074ca:	430a      	orrs	r2, r1
 80074cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074ce:	4b7b      	ldr	r3, [pc, #492]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d2:	2201      	movs	r2, #1
 80074d4:	4013      	ands	r3, r2
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074da:	4b78      	ldr	r3, [pc, #480]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074de:	4b77      	ldr	r3, [pc, #476]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074e0:	2102      	movs	r1, #2
 80074e2:	430a      	orrs	r2, r1
 80074e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074e6:	4b75      	ldr	r3, [pc, #468]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ea:	2202      	movs	r2, #2
 80074ec:	4013      	ands	r3, r2
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074f2:	4b72      	ldr	r3, [pc, #456]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f6:	4b71      	ldr	r3, [pc, #452]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074f8:	2108      	movs	r1, #8
 80074fa:	430a      	orrs	r2, r1
 80074fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074fe:	4b6f      	ldr	r3, [pc, #444]	@ (80076bc <MX_GPIO_Init+0x240>)
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007502:	2208      	movs	r2, #8
 8007504:	4013      	ands	r3, r2
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800750a:	4b6d      	ldr	r3, [pc, #436]	@ (80076c0 <MX_GPIO_Init+0x244>)
 800750c:	2201      	movs	r2, #1
 800750e:	2101      	movs	r1, #1
 8007510:	0018      	movs	r0, r3
 8007512:	f008 ff56 	bl	80103c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8007516:	4b6a      	ldr	r3, [pc, #424]	@ (80076c0 <MX_GPIO_Init+0x244>)
 8007518:	2200      	movs	r2, #0
 800751a:	2102      	movs	r1, #2
 800751c:	0018      	movs	r0, r3
 800751e:	f008 ff50 	bl	80103c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007522:	4968      	ldr	r1, [pc, #416]	@ (80076c4 <MX_GPIO_Init+0x248>)
 8007524:	4b68      	ldr	r3, [pc, #416]	@ (80076c8 <MX_GPIO_Init+0x24c>)
 8007526:	2201      	movs	r2, #1
 8007528:	0018      	movs	r0, r3
 800752a:	f008 ff4a 	bl	80103c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800752e:	2380      	movs	r3, #128	@ 0x80
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	4866      	ldr	r0, [pc, #408]	@ (80076cc <MX_GPIO_Init+0x250>)
 8007534:	2201      	movs	r2, #1
 8007536:	0019      	movs	r1, r3
 8007538:	f008 ff43 	bl	80103c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800753c:	2380      	movs	r3, #128	@ 0x80
 800753e:	015b      	lsls	r3, r3, #5
 8007540:	4862      	ldr	r0, [pc, #392]	@ (80076cc <MX_GPIO_Init+0x250>)
 8007542:	2200      	movs	r2, #0
 8007544:	0019      	movs	r1, r3
 8007546:	f008 ff3c 	bl	80103c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800754a:	193b      	adds	r3, r7, r4
 800754c:	4a60      	ldr	r2, [pc, #384]	@ (80076d0 <MX_GPIO_Init+0x254>)
 800754e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007550:	193b      	adds	r3, r7, r4
 8007552:	2203      	movs	r2, #3
 8007554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007556:	193b      	adds	r3, r7, r4
 8007558:	2200      	movs	r2, #0
 800755a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800755c:	193b      	adds	r3, r7, r4
 800755e:	4a5b      	ldr	r2, [pc, #364]	@ (80076cc <MX_GPIO_Init+0x250>)
 8007560:	0019      	movs	r1, r3
 8007562:	0010      	movs	r0, r2
 8007564:	f008 fd92 	bl	801008c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007568:	193b      	adds	r3, r7, r4
 800756a:	2203      	movs	r2, #3
 800756c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800756e:	193b      	adds	r3, r7, r4
 8007570:	2201      	movs	r2, #1
 8007572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007574:	193b      	adds	r3, r7, r4
 8007576:	2200      	movs	r2, #0
 8007578:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800757a:	193b      	adds	r3, r7, r4
 800757c:	2200      	movs	r2, #0
 800757e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007580:	193b      	adds	r3, r7, r4
 8007582:	4a4f      	ldr	r2, [pc, #316]	@ (80076c0 <MX_GPIO_Init+0x244>)
 8007584:	0019      	movs	r1, r3
 8007586:	0010      	movs	r0, r2
 8007588:	f008 fd80 	bl	801008c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800758c:	193b      	adds	r3, r7, r4
 800758e:	2270      	movs	r2, #112	@ 0x70
 8007590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007592:	193b      	adds	r3, r7, r4
 8007594:	2203      	movs	r2, #3
 8007596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007598:	193b      	adds	r3, r7, r4
 800759a:	2200      	movs	r2, #0
 800759c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800759e:	193a      	adds	r2, r7, r4
 80075a0:	23a0      	movs	r3, #160	@ 0xa0
 80075a2:	05db      	lsls	r3, r3, #23
 80075a4:	0011      	movs	r1, r2
 80075a6:	0018      	movs	r0, r3
 80075a8:	f008 fd70 	bl	801008c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80075ac:	193b      	adds	r3, r7, r4
 80075ae:	22c0      	movs	r2, #192	@ 0xc0
 80075b0:	0052      	lsls	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075b4:	193b      	adds	r3, r7, r4
 80075b6:	2200      	movs	r2, #0
 80075b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ba:	193b      	adds	r3, r7, r4
 80075bc:	2200      	movs	r2, #0
 80075be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c0:	193a      	adds	r2, r7, r4
 80075c2:	23a0      	movs	r3, #160	@ 0xa0
 80075c4:	05db      	lsls	r3, r3, #23
 80075c6:	0011      	movs	r1, r2
 80075c8:	0018      	movs	r0, r3
 80075ca:	f008 fd5f 	bl	801008c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80075ce:	193b      	adds	r3, r7, r4
 80075d0:	4a3c      	ldr	r2, [pc, #240]	@ (80076c4 <MX_GPIO_Init+0x248>)
 80075d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075d4:	193b      	adds	r3, r7, r4
 80075d6:	2201      	movs	r2, #1
 80075d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	2200      	movs	r2, #0
 80075de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e0:	193b      	adds	r3, r7, r4
 80075e2:	2200      	movs	r2, #0
 80075e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075e6:	193b      	adds	r3, r7, r4
 80075e8:	4a37      	ldr	r2, [pc, #220]	@ (80076c8 <MX_GPIO_Init+0x24c>)
 80075ea:	0019      	movs	r1, r3
 80075ec:	0010      	movs	r0, r2
 80075ee:	f008 fd4d 	bl	801008c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80075f2:	193b      	adds	r3, r7, r4
 80075f4:	4a37      	ldr	r2, [pc, #220]	@ (80076d4 <MX_GPIO_Init+0x258>)
 80075f6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075f8:	193b      	adds	r3, r7, r4
 80075fa:	2203      	movs	r2, #3
 80075fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fe:	193b      	adds	r3, r7, r4
 8007600:	2200      	movs	r2, #0
 8007602:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007604:	193b      	adds	r3, r7, r4
 8007606:	4a30      	ldr	r2, [pc, #192]	@ (80076c8 <MX_GPIO_Init+0x24c>)
 8007608:	0019      	movs	r1, r3
 800760a:	0010      	movs	r0, r2
 800760c:	f008 fd3e 	bl	801008c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007610:	0021      	movs	r1, r4
 8007612:	187b      	adds	r3, r7, r1
 8007614:	2280      	movs	r2, #128	@ 0x80
 8007616:	0092      	lsls	r2, r2, #2
 8007618:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800761a:	000c      	movs	r4, r1
 800761c:	193b      	adds	r3, r7, r4
 800761e:	2200      	movs	r2, #0
 8007620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007622:	193b      	adds	r3, r7, r4
 8007624:	2200      	movs	r2, #0
 8007626:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007628:	193b      	adds	r3, r7, r4
 800762a:	4a28      	ldr	r2, [pc, #160]	@ (80076cc <MX_GPIO_Init+0x250>)
 800762c:	0019      	movs	r1, r3
 800762e:	0010      	movs	r0, r2
 8007630:	f008 fd2c 	bl	801008c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007634:	193b      	adds	r3, r7, r4
 8007636:	2280      	movs	r2, #128	@ 0x80
 8007638:	0212      	lsls	r2, r2, #8
 800763a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800763c:	193b      	adds	r3, r7, r4
 800763e:	2288      	movs	r2, #136	@ 0x88
 8007640:	0352      	lsls	r2, r2, #13
 8007642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007644:	193b      	adds	r3, r7, r4
 8007646:	2200      	movs	r2, #0
 8007648:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800764a:	193a      	adds	r2, r7, r4
 800764c:	23a0      	movs	r3, #160	@ 0xa0
 800764e:	05db      	lsls	r3, r3, #23
 8007650:	0011      	movs	r1, r2
 8007652:	0018      	movs	r0, r3
 8007654:	f008 fd1a 	bl	801008c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007658:	0021      	movs	r1, r4
 800765a:	187b      	adds	r3, r7, r1
 800765c:	22c0      	movs	r2, #192	@ 0xc0
 800765e:	0152      	lsls	r2, r2, #5
 8007660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007662:	000c      	movs	r4, r1
 8007664:	193b      	adds	r3, r7, r4
 8007666:	2201      	movs	r2, #1
 8007668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766a:	193b      	adds	r3, r7, r4
 800766c:	2200      	movs	r2, #0
 800766e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007670:	193b      	adds	r3, r7, r4
 8007672:	2200      	movs	r2, #0
 8007674:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007676:	193b      	adds	r3, r7, r4
 8007678:	4a14      	ldr	r2, [pc, #80]	@ (80076cc <MX_GPIO_Init+0x250>)
 800767a:	0019      	movs	r1, r3
 800767c:	0010      	movs	r0, r2
 800767e:	f008 fd05 	bl	801008c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007682:	0021      	movs	r1, r4
 8007684:	187b      	adds	r3, r7, r1
 8007686:	2204      	movs	r2, #4
 8007688:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800768a:	187b      	adds	r3, r7, r1
 800768c:	2200      	movs	r2, #0
 800768e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007690:	187b      	adds	r3, r7, r1
 8007692:	2201      	movs	r2, #1
 8007694:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007696:	187b      	adds	r3, r7, r1
 8007698:	4a0f      	ldr	r2, [pc, #60]	@ (80076d8 <MX_GPIO_Init+0x25c>)
 800769a:	0019      	movs	r1, r3
 800769c:	0010      	movs	r0, r2
 800769e:	f008 fcf5 	bl	801008c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80076a2:	2200      	movs	r2, #0
 80076a4:	2100      	movs	r1, #0
 80076a6:	2007      	movs	r0, #7
 80076a8:	f008 f89e 	bl	800f7e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80076ac:	2007      	movs	r0, #7
 80076ae:	f008 f8b0 	bl	800f812 <HAL_NVIC_EnableIRQ>

}
 80076b2:	46c0      	nop			@ (mov r8, r8)
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b00b      	add	sp, #44	@ 0x2c
 80076b8:	bd90      	pop	{r4, r7, pc}
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	40021000 	.word	0x40021000
 80076c0:	50001c00 	.word	0x50001c00
 80076c4:	00000301 	.word	0x00000301
 80076c8:	50000400 	.word	0x50000400
 80076cc:	50000800 	.word	0x50000800
 80076d0:	0000200c 	.word	0x0000200c
 80076d4:	0000403e 	.word	0x0000403e
 80076d8:	50000c00 	.word	0x50000c00

080076dc <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2100      	movs	r1, #0
 80076ea:	0018      	movs	r0, r3
 80076ec:	f00f fa44 	bl	8016b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2108      	movs	r1, #8
 80076f4:	0018      	movs	r0, r3
 80076f6:	f00f fa3f 	bl	8016b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	210c      	movs	r1, #12
 80076fe:	0018      	movs	r0, r3
 8007700:	f00f fa3a 	bl	8016b78 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007704:	2380      	movs	r3, #128	@ 0x80
 8007706:	05db      	lsls	r3, r3, #23
 8007708:	22fa      	movs	r2, #250	@ 0xfa
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800770e:	2380      	movs	r3, #128	@ 0x80
 8007710:	05db      	lsls	r3, r3, #23
 8007712:	22fa      	movs	r2, #250	@ 0xfa
 8007714:	0112      	lsls	r2, r2, #4
 8007716:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007718:	2380      	movs	r3, #128	@ 0x80
 800771a:	05db      	lsls	r3, r3, #23
 800771c:	22fa      	movs	r2, #250	@ 0xfa
 800771e:	0112      	lsls	r2, r2, #4
 8007720:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007722:	2380      	movs	r3, #128	@ 0x80
 8007724:	05db      	lsls	r3, r3, #23
 8007726:	22fa      	movs	r2, #250	@ 0xfa
 8007728:	0112      	lsls	r2, r2, #4
 800772a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2100      	movs	r1, #0
 8007730:	0018      	movs	r0, r3
 8007732:	f00f fa21 	bl	8016b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2104      	movs	r1, #4
 800773a:	0018      	movs	r0, r3
 800773c:	f00f fa1c 	bl	8016b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2108      	movs	r1, #8
 8007744:	0018      	movs	r0, r3
 8007746:	f00f fa17 	bl	8016b78 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800774a:	4b0a      	ldr	r3, [pc, #40]	@ (8007774 <GPIO_InitPWMLEDs+0x98>)
 800774c:	22fa      	movs	r2, #250	@ 0xfa
 800774e:	0112      	lsls	r2, r2, #4
 8007750:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007752:	4b08      	ldr	r3, [pc, #32]	@ (8007774 <GPIO_InitPWMLEDs+0x98>)
 8007754:	22fa      	movs	r2, #250	@ 0xfa
 8007756:	0112      	lsls	r2, r2, #4
 8007758:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800775a:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <GPIO_InitPWMLEDs+0x98>)
 800775c:	22fa      	movs	r2, #250	@ 0xfa
 800775e:	0112      	lsls	r2, r2, #4
 8007760:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007762:	4b04      	ldr	r3, [pc, #16]	@ (8007774 <GPIO_InitPWMLEDs+0x98>)
 8007764:	22fa      	movs	r2, #250	@ 0xfa
 8007766:	0112      	lsls	r2, r2, #4
 8007768:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	b002      	add	sp, #8
 8007770:	bd80      	pop	{r7, pc}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	40000400 	.word	0x40000400

08007778 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800777e:	1d3b      	adds	r3, r7, #4
 8007780:	0018      	movs	r0, r3
 8007782:	2314      	movs	r3, #20
 8007784:	001a      	movs	r2, r3
 8007786:	2100      	movs	r1, #0
 8007788:	f018 fde2 	bl	8020350 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800778c:	1d3b      	adds	r3, r7, #4
 800778e:	2205      	movs	r2, #5
 8007790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007792:	1d3b      	adds	r3, r7, #4
 8007794:	2203      	movs	r2, #3
 8007796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007798:	1d3b      	adds	r3, r7, #4
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800779e:	1d3a      	adds	r2, r7, #4
 80077a0:	23a0      	movs	r3, #160	@ 0xa0
 80077a2:	05db      	lsls	r3, r3, #23
 80077a4:	0011      	movs	r1, r2
 80077a6:	0018      	movs	r0, r3
 80077a8:	f008 fc70 	bl	801008c <HAL_GPIO_Init>
}
 80077ac:	46c0      	nop			@ (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b006      	add	sp, #24
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80077b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077ba:	4a1c      	ldr	r2, [pc, #112]	@ (800782c <MX_I2C1_Init+0x78>)
 80077bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80077be:	4b1a      	ldr	r3, [pc, #104]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007830 <MX_I2C1_Init+0x7c>)
 80077c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80077c4:	4b18      	ldr	r3, [pc, #96]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077ca:	4b17      	ldr	r3, [pc, #92]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077d0:	4b15      	ldr	r3, [pc, #84]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80077d6:	4b14      	ldr	r3, [pc, #80]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077d8:	2200      	movs	r2, #0
 80077da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077dc:	4b12      	ldr	r3, [pc, #72]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077de:	2200      	movs	r2, #0
 80077e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077e2:	4b11      	ldr	r3, [pc, #68]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077f0:	0018      	movs	r0, r3
 80077f2:	f008 fe1f 	bl	8010434 <HAL_I2C_Init>
 80077f6:	1e03      	subs	r3, r0, #0
 80077f8:	d001      	beq.n	80077fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80077fa:	f000 fd9b 	bl	8008334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <MX_I2C1_Init+0x74>)
 8007800:	2100      	movs	r1, #0
 8007802:	0018      	movs	r0, r3
 8007804:	f00b f9f0 	bl	8012be8 <HAL_I2CEx_ConfigAnalogFilter>
 8007808:	1e03      	subs	r3, r0, #0
 800780a:	d001      	beq.n	8007810 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800780c:	f000 fd92 	bl	8008334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <MX_I2C1_Init+0x74>)
 8007812:	2100      	movs	r1, #0
 8007814:	0018      	movs	r0, r3
 8007816:	f00b fa33 	bl	8012c80 <HAL_I2CEx_ConfigDigitalFilter>
 800781a:	1e03      	subs	r3, r0, #0
 800781c:	d001      	beq.n	8007822 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800781e:	f000 fd89 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007822:	46c0      	nop			@ (mov r8, r8)
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20000df4 	.word	0x20000df4
 800782c:	40005400 	.word	0x40005400
 8007830:	00503d58 	.word	0x00503d58

08007834 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007838:	4b1b      	ldr	r3, [pc, #108]	@ (80078a8 <MX_I2C2_Init+0x74>)
 800783a:	4a1c      	ldr	r2, [pc, #112]	@ (80078ac <MX_I2C2_Init+0x78>)
 800783c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800783e:	4b1a      	ldr	r3, [pc, #104]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007840:	4a1b      	ldr	r2, [pc, #108]	@ (80078b0 <MX_I2C2_Init+0x7c>)
 8007842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007844:	4b18      	ldr	r3, [pc, #96]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007846:	2200      	movs	r2, #0
 8007848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800784a:	4b17      	ldr	r3, [pc, #92]	@ (80078a8 <MX_I2C2_Init+0x74>)
 800784c:	2201      	movs	r2, #1
 800784e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007850:	4b15      	ldr	r3, [pc, #84]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007852:	2200      	movs	r2, #0
 8007854:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007856:	4b14      	ldr	r3, [pc, #80]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007858:	2200      	movs	r2, #0
 800785a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800785c:	4b12      	ldr	r3, [pc, #72]	@ (80078a8 <MX_I2C2_Init+0x74>)
 800785e:	2200      	movs	r2, #0
 8007860:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007862:	4b11      	ldr	r3, [pc, #68]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007864:	2200      	movs	r2, #0
 8007866:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007868:	4b0f      	ldr	r3, [pc, #60]	@ (80078a8 <MX_I2C2_Init+0x74>)
 800786a:	2200      	movs	r2, #0
 800786c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800786e:	4b0e      	ldr	r3, [pc, #56]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007870:	0018      	movs	r0, r3
 8007872:	f008 fddf 	bl	8010434 <HAL_I2C_Init>
 8007876:	1e03      	subs	r3, r0, #0
 8007878:	d001      	beq.n	800787e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800787a:	f000 fd5b 	bl	8008334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800787e:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007880:	2100      	movs	r1, #0
 8007882:	0018      	movs	r0, r3
 8007884:	f00b f9b0 	bl	8012be8 <HAL_I2CEx_ConfigAnalogFilter>
 8007888:	1e03      	subs	r3, r0, #0
 800788a:	d001      	beq.n	8007890 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800788c:	f000 fd52 	bl	8008334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007890:	4b05      	ldr	r3, [pc, #20]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007892:	2100      	movs	r1, #0
 8007894:	0018      	movs	r0, r3
 8007896:	f00b f9f3 	bl	8012c80 <HAL_I2CEx_ConfigDigitalFilter>
 800789a:	1e03      	subs	r3, r0, #0
 800789c:	d001      	beq.n	80078a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800789e:	f000 fd49 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000e48 	.word	0x20000e48
 80078ac:	40005800 	.word	0x40005800
 80078b0:	00503d58 	.word	0x00503d58

080078b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80078b4:	b590      	push	{r4, r7, lr}
 80078b6:	b08b      	sub	sp, #44	@ 0x2c
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078bc:	2414      	movs	r4, #20
 80078be:	193b      	adds	r3, r7, r4
 80078c0:	0018      	movs	r0, r3
 80078c2:	2314      	movs	r3, #20
 80078c4:	001a      	movs	r2, r3
 80078c6:	2100      	movs	r1, #0
 80078c8:	f018 fd42 	bl	8020350 <memset>
  if(i2cHandle->Instance==I2C1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a5d      	ldr	r2, [pc, #372]	@ (8007a48 <HAL_I2C_MspInit+0x194>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d000      	beq.n	80078d8 <HAL_I2C_MspInit+0x24>
 80078d6:	e083      	b.n	80079e0 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078d8:	4b5c      	ldr	r3, [pc, #368]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80078da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078dc:	4b5b      	ldr	r3, [pc, #364]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80078de:	2102      	movs	r1, #2
 80078e0:	430a      	orrs	r2, r1
 80078e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078e4:	4b59      	ldr	r3, [pc, #356]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	2202      	movs	r2, #2
 80078ea:	4013      	ands	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80078f0:	0021      	movs	r1, r4
 80078f2:	187b      	adds	r3, r7, r1
 80078f4:	22c0      	movs	r2, #192	@ 0xc0
 80078f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078f8:	187b      	adds	r3, r7, r1
 80078fa:	2212      	movs	r2, #18
 80078fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fe:	187b      	adds	r3, r7, r1
 8007900:	2200      	movs	r2, #0
 8007902:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007904:	187b      	adds	r3, r7, r1
 8007906:	2203      	movs	r2, #3
 8007908:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800790a:	187b      	adds	r3, r7, r1
 800790c:	2201      	movs	r2, #1
 800790e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007910:	187b      	adds	r3, r7, r1
 8007912:	4a4f      	ldr	r2, [pc, #316]	@ (8007a50 <HAL_I2C_MspInit+0x19c>)
 8007914:	0019      	movs	r1, r3
 8007916:	0010      	movs	r0, r2
 8007918:	f008 fbb8 	bl	801008c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800791c:	4b4b      	ldr	r3, [pc, #300]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 800791e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007920:	4b4a      	ldr	r3, [pc, #296]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 8007922:	2180      	movs	r1, #128	@ 0x80
 8007924:	0389      	lsls	r1, r1, #14
 8007926:	430a      	orrs	r2, r1
 8007928:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800792a:	4b4a      	ldr	r3, [pc, #296]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 800792c:	4a4a      	ldr	r2, [pc, #296]	@ (8007a58 <HAL_I2C_MspInit+0x1a4>)
 800792e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007930:	4b48      	ldr	r3, [pc, #288]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007932:	2206      	movs	r2, #6
 8007934:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007936:	4b47      	ldr	r3, [pc, #284]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007938:	2200      	movs	r2, #0
 800793a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800793c:	4b45      	ldr	r3, [pc, #276]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 800793e:	2200      	movs	r2, #0
 8007940:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007942:	4b44      	ldr	r3, [pc, #272]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007944:	2280      	movs	r2, #128	@ 0x80
 8007946:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007948:	4b42      	ldr	r3, [pc, #264]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 800794a:	2200      	movs	r2, #0
 800794c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800794e:	4b41      	ldr	r3, [pc, #260]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007950:	2200      	movs	r2, #0
 8007952:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007954:	4b3f      	ldr	r3, [pc, #252]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007956:	2200      	movs	r2, #0
 8007958:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800795a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 800795c:	2200      	movs	r2, #0
 800795e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007960:	4b3c      	ldr	r3, [pc, #240]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007962:	0018      	movs	r0, r3
 8007964:	f007 ff76 	bl	800f854 <HAL_DMA_Init>
 8007968:	1e03      	subs	r3, r0, #0
 800796a:	d001      	beq.n	8007970 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800796c:	f000 fce2 	bl	8008334 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a38      	ldr	r2, [pc, #224]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007974:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007976:	4b37      	ldr	r3, [pc, #220]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800797c:	4b37      	ldr	r3, [pc, #220]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 800797e:	4a38      	ldr	r2, [pc, #224]	@ (8007a60 <HAL_I2C_MspInit+0x1ac>)
 8007980:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007982:	4b36      	ldr	r3, [pc, #216]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 8007984:	2206      	movs	r2, #6
 8007986:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007988:	4b34      	ldr	r3, [pc, #208]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 800798a:	2210      	movs	r2, #16
 800798c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800798e:	4b33      	ldr	r3, [pc, #204]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 8007990:	2200      	movs	r2, #0
 8007992:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007994:	4b31      	ldr	r3, [pc, #196]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 8007996:	2280      	movs	r2, #128	@ 0x80
 8007998:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800799a:	4b30      	ldr	r3, [pc, #192]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 800799c:	2200      	movs	r2, #0
 800799e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079a0:	4b2e      	ldr	r3, [pc, #184]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80079a6:	4b2d      	ldr	r3, [pc, #180]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80079ac:	4b2b      	ldr	r3, [pc, #172]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80079b2:	4b2a      	ldr	r3, [pc, #168]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079b4:	0018      	movs	r0, r3
 80079b6:	f007 ff4d 	bl	800f854 <HAL_DMA_Init>
 80079ba:	1e03      	subs	r3, r0, #0
 80079bc:	d001      	beq.n	80079c2 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80079be:	f000 fcb9 	bl	8008334 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a25      	ldr	r2, [pc, #148]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80079c8:	4b24      	ldr	r3, [pc, #144]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80079ce:	2200      	movs	r2, #0
 80079d0:	2100      	movs	r1, #0
 80079d2:	2017      	movs	r0, #23
 80079d4:	f007 ff08 	bl	800f7e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80079d8:	2017      	movs	r0, #23
 80079da:	f007 ff1a 	bl	800f812 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80079de:	e02e      	b.n	8007a3e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007a64 <HAL_I2C_MspInit+0x1b0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d129      	bne.n	8007a3e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079ea:	4b18      	ldr	r3, [pc, #96]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80079ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ee:	4b17      	ldr	r3, [pc, #92]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80079f0:	2102      	movs	r1, #2
 80079f2:	430a      	orrs	r2, r1
 80079f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079f6:	4b15      	ldr	r3, [pc, #84]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fa:	2202      	movs	r2, #2
 80079fc:	4013      	ands	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007a02:	2114      	movs	r1, #20
 8007a04:	187b      	adds	r3, r7, r1
 8007a06:	22c0      	movs	r2, #192	@ 0xc0
 8007a08:	0112      	lsls	r2, r2, #4
 8007a0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	2212      	movs	r2, #18
 8007a10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a12:	187b      	adds	r3, r7, r1
 8007a14:	2200      	movs	r2, #0
 8007a16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a18:	187b      	adds	r3, r7, r1
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007a1e:	187b      	adds	r3, r7, r1
 8007a20:	2206      	movs	r2, #6
 8007a22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a24:	187b      	adds	r3, r7, r1
 8007a26:	4a0a      	ldr	r2, [pc, #40]	@ (8007a50 <HAL_I2C_MspInit+0x19c>)
 8007a28:	0019      	movs	r1, r3
 8007a2a:	0010      	movs	r0, r2
 8007a2c:	f008 fb2e 	bl	801008c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007a30:	4b06      	ldr	r3, [pc, #24]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 8007a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a34:	4b05      	ldr	r3, [pc, #20]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 8007a36:	2180      	movs	r1, #128	@ 0x80
 8007a38:	03c9      	lsls	r1, r1, #15
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007a3e:	46c0      	nop			@ (mov r8, r8)
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b00b      	add	sp, #44	@ 0x2c
 8007a44:	bd90      	pop	{r4, r7, pc}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	40005400 	.word	0x40005400
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	50000400 	.word	0x50000400
 8007a54:	20000e9c 	.word	0x20000e9c
 8007a58:	40020030 	.word	0x40020030
 8007a5c:	20000ee4 	.word	0x20000ee4
 8007a60:	4002001c 	.word	0x4002001c
 8007a64:	40005800 	.word	0x40005800

08007a68 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007a6c:	4b10      	ldr	r3, [pc, #64]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a6e:	4a11      	ldr	r2, [pc, #68]	@ (8007ab4 <MX_I2S2_Init+0x4c>)
 8007a70:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007a72:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a74:	22c0      	movs	r2, #192	@ 0xc0
 8007a76:	0092      	lsls	r2, r2, #2
 8007a78:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007a80:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a82:	2203      	movs	r2, #3
 8007a84:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007a86:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007a8c:	4b08      	ldr	r3, [pc, #32]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a8e:	22fa      	movs	r2, #250	@ 0xfa
 8007a90:	0192      	lsls	r2, r2, #6
 8007a92:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007a94:	4b06      	ldr	r3, [pc, #24]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007a9a:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f00b f93b 	bl	8012d18 <HAL_I2S_Init>
 8007aa2:	1e03      	subs	r3, r0, #0
 8007aa4:	d001      	beq.n	8007aaa <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007aa6:	f000 fc45 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007aaa:	46c0      	nop			@ (mov r8, r8)
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20000f2c 	.word	0x20000f2c
 8007ab4:	40003800 	.word	0x40003800

08007ab8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b089      	sub	sp, #36	@ 0x24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac0:	240c      	movs	r4, #12
 8007ac2:	193b      	adds	r3, r7, r4
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	2314      	movs	r3, #20
 8007ac8:	001a      	movs	r2, r3
 8007aca:	2100      	movs	r1, #0
 8007acc:	f018 fc40 	bl	8020350 <memset>
  if(i2sHandle->Instance==SPI2)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8007b8c <HAL_I2S_MspInit+0xd4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d154      	bne.n	8007b84 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ada:	4b2d      	ldr	r3, [pc, #180]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ade:	4b2c      	ldr	r3, [pc, #176]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007ae0:	2180      	movs	r1, #128	@ 0x80
 8007ae2:	01c9      	lsls	r1, r1, #7
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ae8:	4b29      	ldr	r3, [pc, #164]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aec:	4b28      	ldr	r3, [pc, #160]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007aee:	2102      	movs	r1, #2
 8007af0:	430a      	orrs	r2, r1
 8007af2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007af4:	4b26      	ldr	r3, [pc, #152]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af8:	2202      	movs	r2, #2
 8007afa:	4013      	ands	r3, r2
 8007afc:	60bb      	str	r3, [r7, #8]
 8007afe:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007b00:	193b      	adds	r3, r7, r4
 8007b02:	22b0      	movs	r2, #176	@ 0xb0
 8007b04:	0212      	lsls	r2, r2, #8
 8007b06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b08:	0021      	movs	r1, r4
 8007b0a:	187b      	adds	r3, r7, r1
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b10:	187b      	adds	r3, r7, r1
 8007b12:	2200      	movs	r2, #0
 8007b14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	2200      	movs	r2, #0
 8007b1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007b1c:	187b      	adds	r3, r7, r1
 8007b1e:	2200      	movs	r2, #0
 8007b20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b22:	187b      	adds	r3, r7, r1
 8007b24:	4a1b      	ldr	r2, [pc, #108]	@ (8007b94 <HAL_I2S_MspInit+0xdc>)
 8007b26:	0019      	movs	r1, r3
 8007b28:	0010      	movs	r0, r2
 8007b2a:	f008 faaf 	bl	801008c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b30:	4a1a      	ldr	r2, [pc, #104]	@ (8007b9c <HAL_I2S_MspInit+0xe4>)
 8007b32:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007b34:	4b18      	ldr	r3, [pc, #96]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b36:	2202      	movs	r2, #2
 8007b38:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b3a:	4b17      	ldr	r3, [pc, #92]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b40:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b46:	4b14      	ldr	r3, [pc, #80]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b48:	2280      	movs	r2, #128	@ 0x80
 8007b4a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007b4c:	4b12      	ldr	r3, [pc, #72]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b4e:	2280      	movs	r2, #128	@ 0x80
 8007b50:	0052      	lsls	r2, r2, #1
 8007b52:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007b54:	4b10      	ldr	r3, [pc, #64]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b56:	2280      	movs	r2, #128	@ 0x80
 8007b58:	00d2      	lsls	r2, r2, #3
 8007b5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b5e:	2220      	movs	r2, #32
 8007b60:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007b68:	4b0b      	ldr	r3, [pc, #44]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	f007 fe72 	bl	800f854 <HAL_DMA_Init>
 8007b70:	1e03      	subs	r3, r0, #0
 8007b72:	d001      	beq.n	8007b78 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007b74:	f000 fbde 	bl	8008334 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a07      	ldr	r2, [pc, #28]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b7e:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007b84:	46c0      	nop			@ (mov r8, r8)
 8007b86:	46bd      	mov	sp, r7
 8007b88:	b009      	add	sp, #36	@ 0x24
 8007b8a:	bd90      	pop	{r4, r7, pc}
 8007b8c:	40003800 	.word	0x40003800
 8007b90:	40021000 	.word	0x40021000
 8007b94:	50000400 	.word	0x50000400
 8007b98:	20000f68 	.word	0x20000f68
 8007b9c:	40020044 	.word	0x40020044

08007ba0 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  testDone = true;
 8007ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8007c20 <SetTestDone+0x80>)
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8007baa:	23fa      	movs	r3, #250	@ 0xfa
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f007 f980 	bl	800eeb4 <HAL_Delay>
  SetDBLED(false, false, true);
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f005 fb2f 	bl	800d21c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007bbe:	4a19      	ldr	r2, [pc, #100]	@ (8007c24 <SetTestDone+0x84>)
 8007bc0:	23fa      	movs	r3, #250	@ 0xfa
 8007bc2:	0119      	lsls	r1, r3, #4
 8007bc4:	23fa      	movs	r3, #250	@ 0xfa
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	0018      	movs	r0, r3
 8007bca:	f005 faf3 	bl	800d1b4 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007bce:	4a15      	ldr	r2, [pc, #84]	@ (8007c24 <SetTestDone+0x84>)
 8007bd0:	23fa      	movs	r3, #250	@ 0xfa
 8007bd2:	0119      	lsls	r1, r3, #4
 8007bd4:	23fa      	movs	r3, #250	@ 0xfa
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f005 fb69 	bl	800d2b0 <SetVocLED>
  HAL_Delay(500);
 8007bde:	23fa      	movs	r3, #250	@ 0xfa
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	0018      	movs	r0, r3
 8007be4:	f007 f966 	bl	800eeb4 <HAL_Delay>
  SetDBLED(false, false, false);
 8007be8:	2200      	movs	r2, #0
 8007bea:	2100      	movs	r1, #0
 8007bec:	2000      	movs	r0, #0
 8007bee:	f005 fb15 	bl	800d21c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007bf2:	23fa      	movs	r3, #250	@ 0xfa
 8007bf4:	011a      	lsls	r2, r3, #4
 8007bf6:	23fa      	movs	r3, #250	@ 0xfa
 8007bf8:	0119      	lsls	r1, r3, #4
 8007bfa:	23fa      	movs	r3, #250	@ 0xfa
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f005 fad8 	bl	800d1b4 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007c04:	23fa      	movs	r3, #250	@ 0xfa
 8007c06:	011a      	lsls	r2, r3, #4
 8007c08:	23fa      	movs	r3, #250	@ 0xfa
 8007c0a:	0119      	lsls	r1, r3, #4
 8007c0c:	23fa      	movs	r3, #250	@ 0xfa
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	0018      	movs	r0, r3
 8007c12:	f005 fb4d 	bl	800d2b0 <SetVocLED>
  InitDone();
 8007c16:	f005 fa21 	bl	800d05c <InitDone>
}
 8007c1a:	46c0      	nop			@ (mov r8, r8)
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	20000fb0 	.word	0x20000fb0
 8007c24:	00000bb8 	.word	0x00000bb8

08007c28 <FlashLEDs>:

void FlashLEDs(){
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007c2e:	1dfb      	adds	r3, r7, #7
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	e021      	b.n	8007c7a <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007c36:	2201      	movs	r2, #1
 8007c38:	2101      	movs	r1, #1
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	f005 faee 	bl	800d21c <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007c40:	4a12      	ldr	r2, [pc, #72]	@ (8007c8c <FlashLEDs+0x64>)
 8007c42:	23fa      	movs	r3, #250	@ 0xfa
 8007c44:	0119      	lsls	r1, r3, #4
 8007c46:	23fa      	movs	r3, #250	@ 0xfa
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	f005 fab2 	bl	800d1b4 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007c50:	4a0e      	ldr	r2, [pc, #56]	@ (8007c8c <FlashLEDs+0x64>)
 8007c52:	23fa      	movs	r3, #250	@ 0xfa
 8007c54:	0119      	lsls	r1, r3, #4
 8007c56:	23fa      	movs	r3, #250	@ 0xfa
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f005 fb28 	bl	800d2b0 <SetVocLED>
    HAL_Delay(250);
 8007c60:	20fa      	movs	r0, #250	@ 0xfa
 8007c62:	f007 f927 	bl	800eeb4 <HAL_Delay>
    SetLEDsOff();
 8007c66:	f005 fc63 	bl	800d530 <SetLEDsOff>
    HAL_Delay(250);
 8007c6a:	20fa      	movs	r0, #250	@ 0xfa
 8007c6c:	f007 f922 	bl	800eeb4 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007c70:	1dfb      	adds	r3, r7, #7
 8007c72:	781a      	ldrb	r2, [r3, #0]
 8007c74:	1dfb      	adds	r3, r7, #7
 8007c76:	3201      	adds	r2, #1
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	1dfb      	adds	r3, r7, #7
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d9d9      	bls.n	8007c36 <FlashLEDs+0xe>
  }
}
 8007c82:	46c0      	nop			@ (mov r8, r8)
 8007c84:	46c0      	nop			@ (mov r8, r8)
 8007c86:	46bd      	mov	sp, r7
 8007c88:	b002      	add	sp, #8
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	00000bb8 	.word	0x00000bb8

08007c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c96:	f007 f89d 	bl	800edd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c9a:	f000 fa05 	bl	80080a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c9e:	f7ff fbed 	bl	800747c <MX_GPIO_Init>
  MX_DMA_Init();
 8007ca2:	f7ff fabb 	bl	800721c <MX_DMA_Init>
  MX_I2C1_Init();
 8007ca6:	f7ff fd85 	bl	80077b4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007caa:	f7ff fedd 	bl	8007a68 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007cae:	f006 fac5 	bl	800e23c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007cb2:	f7ff fdbf 	bl	8007834 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007cb6:	f006 f8b9 	bl	800de2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8007cba:	f006 f92b 	bl	800df14 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007cbe:	f006 faf1 	bl	800e2a4 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007cc2:	f7ff f9f9 	bl	80070b8 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007cc6:	f015 f851 	bl	801cd6c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007cca:	f001 f943 	bl	8008f54 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007cce:	f006 fa7f 	bl	800e1d0 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007cd2:	f006 f99d 	bl	800e010 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007cd6:	4acd      	ldr	r2, [pc, #820]	@ (800800c <main+0x37c>)
 8007cd8:	4bcd      	ldr	r3, [pc, #820]	@ (8008010 <main+0x380>)
 8007cda:	0011      	movs	r1, r2
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7ff fcfd 	bl	80076dc <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8007ce2:	f006 fd21 	bl	800e728 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8007ce6:	f005 ff2b 	bl	800db40 <Battery_Upkeep>
 8007cea:	0003      	movs	r3, r0
 8007cec:	001a      	movs	r2, r3
 8007cee:	4bc9      	ldr	r3, [pc, #804]	@ (8008014 <main+0x384>)
 8007cf0:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8007cf2:	4bc8      	ldr	r3, [pc, #800]	@ (8008014 <main+0x384>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d113      	bne.n	8007d22 <main+0x92>
    SetAllREDLED();
 8007cfa:	f005 fc35 	bl	800d568 <SetAllREDLED>
    Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007cfe:	f7fe fb03 	bl	8006308 <ReadBatteryVoltage>
 8007d02:	1c03      	adds	r3, r0, #0
 8007d04:	1c18      	adds	r0, r3, #0
 8007d06:	f7fb fbad 	bl	8003464 <__aeabi_f2d>
 8007d0a:	0002      	movs	r2, r0
 8007d0c:	000b      	movs	r3, r1
 8007d0e:	48c2      	ldr	r0, [pc, #776]	@ (8008018 <main+0x388>)
 8007d10:	49c2      	ldr	r1, [pc, #776]	@ (800801c <main+0x38c>)
 8007d12:	9200      	str	r2, [sp, #0]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	0002      	movs	r2, r0
 8007d18:	2002      	movs	r0, #2
 8007d1a:	f006 fc81 	bl	800e620 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8007d1e:	f7fe ff05 	bl	8006b2c <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8007d22:	f7fe fbc7 	bl	80064b4 <UserButton_Pressed>
 8007d26:	1e03      	subs	r3, r0, #0
 8007d28:	d004      	beq.n	8007d34 <main+0xa4>
    EnableESPProg();
 8007d2a:	f015 f8ef 	bl	801cf0c <EnableESPProg>
    ESP_Programming = true;
 8007d2e:	4bbc      	ldr	r3, [pc, #752]	@ (8008020 <main+0x390>)
 8007d30:	2201      	movs	r2, #1
 8007d32:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007d34:	2003      	movs	r0, #3
 8007d36:	f006 fcdd 	bl	800e6f4 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007d3a:	49ba      	ldr	r1, [pc, #744]	@ (8008024 <main+0x394>)
 8007d3c:	4bba      	ldr	r3, [pc, #744]	@ (8008028 <main+0x398>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	0018      	movs	r0, r3
 8007d42:	f00f fb79 	bl	8017438 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007d46:	4bb9      	ldr	r3, [pc, #740]	@ (800802c <main+0x39c>)
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f7fe ffbb 	bl	8006cc4 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007d4e:	4ab8      	ldr	r2, [pc, #736]	@ (8008030 <main+0x3a0>)
 8007d50:	49b8      	ldr	r1, [pc, #736]	@ (8008034 <main+0x3a4>)
 8007d52:	48b9      	ldr	r0, [pc, #740]	@ (8008038 <main+0x3a8>)
 8007d54:	230b      	movs	r3, #11
 8007d56:	f004 faf7 	bl	800c348 <soundInit>
 8007d5a:	0003      	movs	r3, r0
 8007d5c:	001a      	movs	r2, r3
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4053      	eors	r3, r2
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8007d68:	4ab4      	ldr	r2, [pc, #720]	@ (800803c <main+0x3ac>)
 8007d6a:	4bb5      	ldr	r3, [pc, #724]	@ (8008040 <main+0x3b0>)
 8007d6c:	21fb      	movs	r1, #251	@ 0xfb
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f006 fd0e 	bl	800e790 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007d74:	4bb3      	ldr	r3, [pc, #716]	@ (8008044 <main+0x3b4>)
 8007d76:	4ab4      	ldr	r2, [pc, #720]	@ (8008048 <main+0x3b8>)
 8007d78:	49ae      	ldr	r1, [pc, #696]	@ (8008034 <main+0x3a4>)
 8007d7a:	48b4      	ldr	r0, [pc, #720]	@ (800804c <main+0x3bc>)
 8007d7c:	f000 fb9c 	bl	80084b8 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 8007d80:	f007 f88e 	bl	800eea0 <HAL_GetTick>
 8007d84:	0003      	movs	r3, r0
 8007d86:	4ab2      	ldr	r2, [pc, #712]	@ (8008050 <main+0x3c0>)
 8007d88:	189a      	adds	r2, r3, r2
 8007d8a:	4bb2      	ldr	r3, [pc, #712]	@ (8008054 <main+0x3c4>)
 8007d8c:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8007d8e:	f7fe fb71 	bl	8006474 <Check_USB_PowerOn>
 8007d92:	0003      	movs	r3, r0
 8007d94:	1e5a      	subs	r2, r3, #1
 8007d96:	4193      	sbcs	r3, r2
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4053      	eors	r3, r2
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	1c1a      	adds	r2, r3, #0
 8007da2:	2301      	movs	r3, #1
 8007da4:	4013      	ands	r3, r2
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	4bab      	ldr	r3, [pc, #684]	@ (8008058 <main+0x3c8>)
 8007daa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007dac:	4bab      	ldr	r3, [pc, #684]	@ (800805c <main+0x3cc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	0018      	movs	r0, r3
 8007db2:	f006 fbdf 	bl	800e574 <TimestampIsReached>
 8007db6:	1e03      	subs	r3, r0, #0
 8007db8:	d00e      	beq.n	8007dd8 <main+0x148>
      charge = Battery_Upkeep();
 8007dba:	f005 fec1 	bl	800db40 <Battery_Upkeep>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	001a      	movs	r2, r3
 8007dc2:	4b94      	ldr	r3, [pc, #592]	@ (8008014 <main+0x384>)
 8007dc4:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007dc6:	f007 f86b 	bl	800eea0 <HAL_GetTick>
 8007dca:	0003      	movs	r3, r0
 8007dcc:	4aa4      	ldr	r2, [pc, #656]	@ (8008060 <main+0x3d0>)
 8007dce:	189a      	adds	r2, r3, r2
 8007dd0:	4ba2      	ldr	r3, [pc, #648]	@ (800805c <main+0x3cc>)
 8007dd2:	601a      	str	r2, [r3, #0]
        showTime();
 8007dd4:	f7fe fb7e 	bl	80064d4 <showTime>
    }
    configCheck();
 8007dd8:	f005 fd3a 	bl	800d850 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007ddc:	4ba1      	ldr	r3, [pc, #644]	@ (8008064 <main+0x3d4>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007de2:	4b8c      	ldr	r3, [pc, #560]	@ (8008014 <main+0x384>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d003      	beq.n	8007df2 <main+0x162>
 8007dea:	4b8a      	ldr	r3, [pc, #552]	@ (8008014 <main+0x384>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <main+0x16c>
          FlashLEDs();
 8007df2:	f7ff ff19 	bl	8007c28 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007df6:	4b9c      	ldr	r3, [pc, #624]	@ (8008068 <main+0x3d8>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007dfc:	4b85      	ldr	r3, [pc, #532]	@ (8008014 <main+0x384>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d109      	bne.n	8007e18 <main+0x188>
 8007e04:	4b99      	ldr	r3, [pc, #612]	@ (800806c <main+0x3dc>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b09      	cmp	r3, #9
 8007e0a:	d105      	bne.n	8007e18 <main+0x188>
          batteryEmpty = true;
 8007e0c:	4b98      	ldr	r3, [pc, #608]	@ (8008070 <main+0x3e0>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007e12:	f7fe fe8b 	bl	8006b2c <Enter_Standby_Mode>
 8007e16:	e002      	b.n	8007e1e <main+0x18e>
        }
        else{
          batteryEmpty = false;
 8007e18:	4b95      	ldr	r3, [pc, #596]	@ (8008070 <main+0x3e0>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007e1e:	4b95      	ldr	r3, [pc, #596]	@ (8008074 <main+0x3e4>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d100      	bne.n	8007e28 <main+0x198>
 8007e26:	e0b0      	b.n	8007f8a <main+0x2fa>
 8007e28:	4b7d      	ldr	r3, [pc, #500]	@ (8008020 <main+0x390>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	4053      	eors	r3, r2
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d100      	bne.n	8007e38 <main+0x1a8>
 8007e36:	e0a8      	b.n	8007f8a <main+0x2fa>
 8007e38:	4b8d      	ldr	r3, [pc, #564]	@ (8008070 <main+0x3e0>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	4053      	eors	r3, r2
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d100      	bne.n	8007e48 <main+0x1b8>
 8007e46:	e0a0      	b.n	8007f8a <main+0x2fa>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8007e48:	4b83      	ldr	r3, [pc, #524]	@ (8008058 <main+0x3c8>)
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8008078 <main+0x3e8>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d026      	beq.n	8007ea2 <main+0x212>
        Info("USB power state change detected");
 8007e54:	4a89      	ldr	r2, [pc, #548]	@ (800807c <main+0x3ec>)
 8007e56:	4b71      	ldr	r3, [pc, #452]	@ (800801c <main+0x38c>)
 8007e58:	0019      	movs	r1, r3
 8007e5a:	2002      	movs	r0, #2
 8007e5c:	f006 fbe0 	bl	800e620 <CreateLine>
        if (IsSGPPresent() && !usbPluggedIn) {
 8007e60:	f000 fab0 	bl	80083c4 <IsSGPPresent>
 8007e64:	1e03      	subs	r3, r0, #0
 8007e66:	d009      	beq.n	8007e7c <main+0x1ec>
 8007e68:	4b83      	ldr	r3, [pc, #524]	@ (8008078 <main+0x3e8>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	4053      	eors	r3, r2
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <main+0x1ec>
          SetVOCSensorDIS_ENA(true);
 8007e76:	2001      	movs	r0, #1
 8007e78:	f000 faae 	bl	80083d8 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8007e7c:	4b80      	ldr	r3, [pc, #512]	@ (8008080 <main+0x3f0>)
 8007e7e:	791b      	ldrb	r3, [r3, #4]
 8007e80:	2b34      	cmp	r3, #52	@ 0x34
 8007e82:	d003      	beq.n	8007e8c <main+0x1fc>
 8007e84:	4b7e      	ldr	r3, [pc, #504]	@ (8008080 <main+0x3f0>)
 8007e86:	791b      	ldrb	r3, [r3, #4]
 8007e88:	2b35      	cmp	r3, #53	@ 0x35
 8007e8a:	d106      	bne.n	8007e9a <main+0x20a>
 8007e8c:	4b7a      	ldr	r3, [pc, #488]	@ (8008078 <main+0x3e8>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <main+0x20a>
          SetVOCSensorDIS_ENA(false);
 8007e94:	2000      	movs	r0, #0
 8007e96:	f000 fa9f 	bl	80083d8 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8007e9a:	4b77      	ldr	r3, [pc, #476]	@ (8008078 <main+0x3e8>)
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	4b6e      	ldr	r3, [pc, #440]	@ (8008058 <main+0x3c8>)
 8007ea0:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007ea2:	4b78      	ldr	r3, [pc, #480]	@ (8008084 <main+0x3f4>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d00d      	beq.n	8007ec6 <main+0x236>
 8007eaa:	4b76      	ldr	r3, [pc, #472]	@ (8008084 <main+0x3f4>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d009      	beq.n	8007ec6 <main+0x236>
 8007eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8008068 <main+0x3d8>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d005      	beq.n	8007ec6 <main+0x236>
        HIDSstate = HIDS_Upkeep();
 8007eba:	f006 fed5 	bl	800ec68 <HIDS_Upkeep>
 8007ebe:	0003      	movs	r3, r0
 8007ec0:	001a      	movs	r2, r3
 8007ec2:	4b71      	ldr	r3, [pc, #452]	@ (8008088 <main+0x3f8>)
 8007ec4:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007ec6:	4b70      	ldr	r3, [pc, #448]	@ (8008088 <main+0x3f8>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d00d      	beq.n	8007eea <main+0x25a>
 8007ece:	4b6e      	ldr	r3, [pc, #440]	@ (8008088 <main+0x3f8>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d009      	beq.n	8007eea <main+0x25a>
 8007ed6:	4b64      	ldr	r3, [pc, #400]	@ (8008068 <main+0x3d8>)
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <main+0x25a>
        SGPstate = SGP_Upkeep();
 8007ede:	f004 f899 	bl	800c014 <SGP_Upkeep>
 8007ee2:	0003      	movs	r3, r0
 8007ee4:	001a      	movs	r2, r3
 8007ee6:	4b67      	ldr	r3, [pc, #412]	@ (8008084 <main+0x3f4>)
 8007ee8:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007eea:	4b5f      	ldr	r3, [pc, #380]	@ (8008068 <main+0x3d8>)
 8007eec:	78db      	ldrb	r3, [r3, #3]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <main+0x26e>
        MICstate = Mic_Upkeep();
 8007ef2:	f000 ff1b 	bl	8008d2c <Mic_Upkeep>
 8007ef6:	0003      	movs	r3, r0
 8007ef8:	001a      	movs	r2, r3
 8007efa:	4b64      	ldr	r3, [pc, #400]	@ (800808c <main+0x3fc>)
 8007efc:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007efe:	4b45      	ldr	r3, [pc, #276]	@ (8008014 <main+0x384>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d803      	bhi.n	8007f0e <main+0x27e>
 8007f06:	4b57      	ldr	r3, [pc, #348]	@ (8008064 <main+0x3d4>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d016      	beq.n	8007f3c <main+0x2ac>
 8007f0e:	4b56      	ldr	r3, [pc, #344]	@ (8008068 <main+0x3d8>)
 8007f10:	789b      	ldrb	r3, [r3, #2]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d012      	beq.n	8007f3c <main+0x2ac>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8007f16:	f001 f8ab 	bl	8009070 <sen5x_Get_sen5x_enable_state>
 8007f1a:	0003      	movs	r3, r0
 8007f1c:	001a      	movs	r2, r3
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4053      	eors	r3, r2
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d006      	beq.n	8007f36 <main+0x2a6>
 8007f28:	4b53      	ldr	r3, [pc, #332]	@ (8008078 <main+0x3e8>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <main+0x2a6>
          sen5x_enable(0);
 8007f30:	2000      	movs	r0, #0
 8007f32:	f001 f8c9 	bl	80090c8 <sen5x_enable>
        }
        sen5x_statemachine();
 8007f36:	f001 fe8f 	bl	8009c58 <sen5x_statemachine>
 8007f3a:	e020      	b.n	8007f7e <main+0x2ee>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007f3c:	4b35      	ldr	r3, [pc, #212]	@ (8008014 <main+0x384>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d81c      	bhi.n	8007f7e <main+0x2ee>
 8007f44:	4b47      	ldr	r3, [pc, #284]	@ (8008064 <main+0x3d4>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	4053      	eors	r3, r2
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d015      	beq.n	8007f7e <main+0x2ee>
 8007f52:	4b45      	ldr	r3, [pc, #276]	@ (8008068 <main+0x3d8>)
 8007f54:	789b      	ldrb	r3, [r3, #2]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d011      	beq.n	8007f7e <main+0x2ee>
        Info("Battery level insufficient for sen5x operation");
 8007f5a:	4a4d      	ldr	r2, [pc, #308]	@ (8008090 <main+0x400>)
 8007f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800801c <main+0x38c>)
 8007f5e:	0019      	movs	r1, r3
 8007f60:	2002      	movs	r0, #2
 8007f62:	f006 fb5d 	bl	800e620 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8007f66:	4b40      	ldr	r3, [pc, #256]	@ (8008068 <main+0x3d8>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8007f6c:	4b49      	ldr	r3, [pc, #292]	@ (8008094 <main+0x404>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8007f72:	4b49      	ldr	r3, [pc, #292]	@ (8008098 <main+0x408>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <main+0x2ee>
          sen5x_Power_Off();
 8007f7a:	f001 f917 	bl	80091ac <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8007f7e:	f7fd fa93 	bl	80054a8 <ESP_Upkeep>
 8007f82:	0003      	movs	r3, r0
 8007f84:	001a      	movs	r2, r3
 8007f86:	4b39      	ldr	r3, [pc, #228]	@ (800806c <main+0x3dc>)
 8007f88:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8008074 <main+0x3e4>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4053      	eors	r3, r2
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00f      	beq.n	8007fb8 <main+0x328>
 8007f98:	4b21      	ldr	r3, [pc, #132]	@ (8008020 <main+0x390>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4053      	eors	r3, r2
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d008      	beq.n	8007fb8 <main+0x328>
 8007fa6:	4b32      	ldr	r3, [pc, #200]	@ (8008070 <main+0x3e0>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2201      	movs	r2, #1
 8007fac:	4053      	eors	r3, r2
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <main+0x328>
      Device_Test();  // for device with startup time
 8007fb4:	f000 fbc6 	bl	8008744 <Device_Test>
    }
    if (!usbPluggedIn) {
 8007fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8008078 <main+0x3e8>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	4053      	eors	r3, r2
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d100      	bne.n	8007fc8 <main+0x338>
 8007fc6:	e6f1      	b.n	8007dac <main+0x11c>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007fc8:	4b34      	ldr	r3, [pc, #208]	@ (800809c <main+0x40c>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	4053      	eors	r3, r2
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d100      	bne.n	8007fd8 <main+0x348>
 8007fd6:	e6e9      	b.n	8007dac <main+0x11c>
 8007fd8:	f000 fc32 	bl	8008840 <AllDevicesReady>
 8007fdc:	1e03      	subs	r3, r0, #0
 8007fde:	d100      	bne.n	8007fe2 <main+0x352>
 8007fe0:	e6e4      	b.n	8007dac <main+0x11c>
 8007fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80080a0 <main+0x410>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d100      	bne.n	8007fec <main+0x35c>
 8007fea:	e6df      	b.n	8007dac <main+0x11c>
        EnabledConnectedDevices();
 8007fec:	f000 fc90 	bl	8008910 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80080a4 <main+0x414>)
 8007ff2:	789b      	ldrb	r3, [r3, #2]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <main+0x36e>
 8007ff8:	23d7      	movs	r3, #215	@ 0xd7
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	e001      	b.n	8008002 <main+0x372>
 8007ffe:	23dc      	movs	r3, #220	@ 0xdc
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	0018      	movs	r0, r3
 8008004:	f7fe fdb2 	bl	8006b6c <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8008008:	e6d0      	b.n	8007dac <main+0x11c>
 800800a:	46c0      	nop			@ (mov r8, r8)
 800800c:	20002068 	.word	0x20002068
 8008010:	20002028 	.word	0x20002028
 8008014:	20000fcc 	.word	0x20000fcc
 8008018:	0802407c 	.word	0x0802407c
 800801c:	08024094 	.word	0x08024094
 8008020:	20000fb1 	.word	0x20000fb1
 8008024:	20000fb8 	.word	0x20000fb8
 8008028:	200021a0 	.word	0x200021a0
 800802c:	20001040 	.word	0x20001040
 8008030:	200020a8 	.word	0x200020a8
 8008034:	20000f2c 	.word	0x20000f2c
 8008038:	20000f68 	.word	0x20000f68
 800803c:	08024098 	.word	0x08024098
 8008040:	080256a8 	.word	0x080256a8
 8008044:	20002258 	.word	0x20002258
 8008048:	20000d98 	.word	0x20000d98
 800804c:	20000df4 	.word	0x20000df4
 8008050:	000061a8 	.word	0x000061a8
 8008054:	20000fc8 	.word	0x20000fc8
 8008058:	20000fb3 	.word	0x20000fb3
 800805c:	20000088 	.word	0x20000088
 8008060:	0000c350 	.word	0x0000c350
 8008064:	20000084 	.word	0x20000084
 8008068:	20000fd0 	.word	0x20000fd0
 800806c:	20000fb7 	.word	0x20000fb7
 8008070:	20000fb2 	.word	0x20000fb2
 8008074:	20000fb0 	.word	0x20000fb0
 8008078:	20002009 	.word	0x20002009
 800807c:	080240ac 	.word	0x080240ac
 8008080:	2000106c 	.word	0x2000106c
 8008084:	20000fb4 	.word	0x20000fb4
 8008088:	20000fb5 	.word	0x20000fb5
 800808c:	20000fb6 	.word	0x20000fb6
 8008090:	080240cc 	.word	0x080240cc
 8008094:	20001067 	.word	0x20001067
 8008098:	20001066 	.word	0x20001066
 800809c:	2000200a 	.word	0x2000200a
 80080a0:	20000558 	.word	0x20000558
 80080a4:	20000fd4 	.word	0x20000fd4

080080a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080a8:	b590      	push	{r4, r7, lr}
 80080aa:	b09d      	sub	sp, #116	@ 0x74
 80080ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80080ae:	2438      	movs	r4, #56	@ 0x38
 80080b0:	193b      	adds	r3, r7, r4
 80080b2:	0018      	movs	r0, r3
 80080b4:	2338      	movs	r3, #56	@ 0x38
 80080b6:	001a      	movs	r2, r3
 80080b8:	2100      	movs	r1, #0
 80080ba:	f018 f949 	bl	8020350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080be:	2324      	movs	r3, #36	@ 0x24
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	0018      	movs	r0, r3
 80080c4:	2314      	movs	r3, #20
 80080c6:	001a      	movs	r2, r3
 80080c8:	2100      	movs	r1, #0
 80080ca:	f018 f941 	bl	8020350 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080ce:	003b      	movs	r3, r7
 80080d0:	0018      	movs	r0, r3
 80080d2:	2324      	movs	r3, #36	@ 0x24
 80080d4:	001a      	movs	r2, r3
 80080d6:	2100      	movs	r1, #0
 80080d8:	f018 f93a 	bl	8020350 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080dc:	4b34      	ldr	r3, [pc, #208]	@ (80081b0 <SystemClock_Config+0x108>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a34      	ldr	r2, [pc, #208]	@ (80081b4 <SystemClock_Config+0x10c>)
 80080e2:	401a      	ands	r2, r3
 80080e4:	4b32      	ldr	r3, [pc, #200]	@ (80081b0 <SystemClock_Config+0x108>)
 80080e6:	2180      	movs	r1, #128	@ 0x80
 80080e8:	0109      	lsls	r1, r1, #4
 80080ea:	430a      	orrs	r2, r1
 80080ec:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80080ee:	f00c ff77 	bl	8014fe0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80080f2:	4b31      	ldr	r3, [pc, #196]	@ (80081b8 <SystemClock_Config+0x110>)
 80080f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f6:	4a2f      	ldr	r2, [pc, #188]	@ (80081b4 <SystemClock_Config+0x10c>)
 80080f8:	401a      	ands	r2, r3
 80080fa:	4b2f      	ldr	r3, [pc, #188]	@ (80081b8 <SystemClock_Config+0x110>)
 80080fc:	2180      	movs	r1, #128	@ 0x80
 80080fe:	0149      	lsls	r1, r1, #5
 8008100:	430a      	orrs	r2, r1
 8008102:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008104:	193b      	adds	r3, r7, r4
 8008106:	2226      	movs	r2, #38	@ 0x26
 8008108:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800810a:	193b      	adds	r3, r7, r4
 800810c:	2280      	movs	r2, #128	@ 0x80
 800810e:	0052      	lsls	r2, r2, #1
 8008110:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008112:	0021      	movs	r1, r4
 8008114:	187b      	adds	r3, r7, r1
 8008116:	2201      	movs	r2, #1
 8008118:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800811a:	187b      	adds	r3, r7, r1
 800811c:	2210      	movs	r2, #16
 800811e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008120:	187b      	adds	r3, r7, r1
 8008122:	2201      	movs	r2, #1
 8008124:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008126:	187b      	adds	r3, r7, r1
 8008128:	2200      	movs	r2, #0
 800812a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800812c:	187b      	adds	r3, r7, r1
 800812e:	0018      	movs	r0, r3
 8008130:	f00c ffe6 	bl	8015100 <HAL_RCC_OscConfig>
 8008134:	1e03      	subs	r3, r0, #0
 8008136:	d001      	beq.n	800813c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008138:	f000 f8fc 	bl	8008334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800813c:	2124      	movs	r1, #36	@ 0x24
 800813e:	187b      	adds	r3, r7, r1
 8008140:	220f      	movs	r2, #15
 8008142:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008144:	187b      	adds	r3, r7, r1
 8008146:	2201      	movs	r2, #1
 8008148:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800814a:	187b      	adds	r3, r7, r1
 800814c:	2200      	movs	r2, #0
 800814e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008150:	187b      	adds	r3, r7, r1
 8008152:	2200      	movs	r2, #0
 8008154:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008156:	187b      	adds	r3, r7, r1
 8008158:	2200      	movs	r2, #0
 800815a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800815c:	187b      	adds	r3, r7, r1
 800815e:	2100      	movs	r1, #0
 8008160:	0018      	movs	r0, r3
 8008162:	f00d fba1 	bl	80158a8 <HAL_RCC_ClockConfig>
 8008166:	1e03      	subs	r3, r0, #0
 8008168:	d001      	beq.n	800816e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800816a:	f000 f8e3 	bl	8008334 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800816e:	003b      	movs	r3, r7
 8008170:	226d      	movs	r2, #109	@ 0x6d
 8008172:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008174:	003b      	movs	r3, r7
 8008176:	2200      	movs	r2, #0
 8008178:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800817a:	003b      	movs	r3, r7
 800817c:	2200      	movs	r2, #0
 800817e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008180:	003b      	movs	r3, r7
 8008182:	2200      	movs	r2, #0
 8008184:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008186:	003b      	movs	r3, r7
 8008188:	2280      	movs	r2, #128	@ 0x80
 800818a:	0252      	lsls	r2, r2, #9
 800818c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800818e:	003b      	movs	r3, r7
 8008190:	2280      	movs	r2, #128	@ 0x80
 8008192:	04d2      	lsls	r2, r2, #19
 8008194:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008196:	003b      	movs	r3, r7
 8008198:	0018      	movs	r0, r3
 800819a:	f00d fda9 	bl	8015cf0 <HAL_RCCEx_PeriphCLKConfig>
 800819e:	1e03      	subs	r3, r0, #0
 80081a0:	d001      	beq.n	80081a6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80081a2:	f000 f8c7 	bl	8008334 <Error_Handler>
  }
}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b01d      	add	sp, #116	@ 0x74
 80081ac:	bd90      	pop	{r4, r7, pc}
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	40007000 	.word	0x40007000
 80081b4:	ffffe7ff 	.word	0xffffe7ff
 80081b8:	40021000 	.word	0x40021000

080081bc <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 80081c0:	4b2f      	ldr	r3, [pc, #188]	@ (8008280 <check_cli_command+0xc4>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	3b61      	subs	r3, #97	@ 0x61
 80081c6:	2b13      	cmp	r3, #19
 80081c8:	d830      	bhi.n	800822c <check_cli_command+0x70>
 80081ca:	009a      	lsls	r2, r3, #2
 80081cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008284 <check_cli_command+0xc8>)
 80081ce:	18d3      	adds	r3, r2, r3
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80081d4:	4b2c      	ldr	r3, [pc, #176]	@ (8008288 <check_cli_command+0xcc>)
 80081d6:	0018      	movs	r0, r3
 80081d8:	f017 ff6c 	bl	80200b4 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80081dc:	2003      	movs	r0, #3
 80081de:	f006 fa89 	bl	800e6f4 <SetVerboseLevel>
      break;
 80081e2:	e04a      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 80081e4:	f7fb fada 	bl	800379c <forceNTPupdate>
    break;
 80081e8:	e047      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 80081ea:	4b28      	ldr	r3, [pc, #160]	@ (800828c <check_cli_command+0xd0>)
 80081ec:	0018      	movs	r0, r3
 80081ee:	f017 ff61 	bl	80200b4 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 80081f2:	2002      	movs	r0, #2
 80081f4:	f006 fa7e 	bl	800e6f4 <SetVerboseLevel>
      break;
 80081f8:	e03f      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 80081fa:	4b25      	ldr	r3, [pc, #148]	@ (8008290 <check_cli_command+0xd4>)
 80081fc:	0018      	movs	r0, r3
 80081fe:	f017 ff59 	bl	80200b4 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8008202:	2001      	movs	r0, #1
 8008204:	f006 fa76 	bl	800e6f4 <SetVerboseLevel>
      break;
 8008208:	e037      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800820a:	4b22      	ldr	r3, [pc, #136]	@ (8008294 <check_cli_command+0xd8>)
 800820c:	0018      	movs	r0, r3
 800820e:	f017 ff51 	bl	80200b4 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8008212:	2000      	movs	r0, #0
 8008214:	f006 fa6e 	bl	800e6f4 <SetVerboseLevel>
      break;
 8008218:	e02f      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800821a:	f006 fe41 	bl	800eea0 <HAL_GetTick>
 800821e:	0002      	movs	r2, r0
 8008220:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <check_cli_command+0xdc>)
 8008222:	601a      	str	r2, [r3, #0]
      break;
 8008224:	e029      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8008226:	f7fe f955 	bl	80064d4 <showTime>
      break;
 800822a:	e026      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800822c:	4a1b      	ldr	r2, [pc, #108]	@ (800829c <check_cli_command+0xe0>)
 800822e:	4b1c      	ldr	r3, [pc, #112]	@ (80082a0 <check_cli_command+0xe4>)
 8008230:	0019      	movs	r1, r3
 8008232:	2001      	movs	r0, #1
 8008234:	f006 f9f4 	bl	800e620 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008238:	4b1a      	ldr	r3, [pc, #104]	@ (80082a4 <check_cli_command+0xe8>)
 800823a:	0018      	movs	r0, r3
 800823c:	f017 ff3a 	bl	80200b4 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8008240:	4b19      	ldr	r3, [pc, #100]	@ (80082a8 <check_cli_command+0xec>)
 8008242:	0018      	movs	r0, r3
 8008244:	f017 ff36 	bl	80200b4 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8008248:	4b18      	ldr	r3, [pc, #96]	@ (80082ac <check_cli_command+0xf0>)
 800824a:	0018      	movs	r0, r3
 800824c:	f017 ff32 	bl	80200b4 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8008250:	4b17      	ldr	r3, [pc, #92]	@ (80082b0 <check_cli_command+0xf4>)
 8008252:	0018      	movs	r0, r3
 8008254:	f017 ff2e 	bl	80200b4 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8008258:	4b16      	ldr	r3, [pc, #88]	@ (80082b4 <check_cli_command+0xf8>)
 800825a:	0018      	movs	r0, r3
 800825c:	f017 ff2a 	bl	80200b4 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008260:	4b15      	ldr	r3, [pc, #84]	@ (80082b8 <check_cli_command+0xfc>)
 8008262:	0018      	movs	r0, r3
 8008264:	f017 ff26 	bl	80200b4 <puts>
      printf("s - Start particle measurement\r\n");
 8008268:	4b14      	ldr	r3, [pc, #80]	@ (80082bc <check_cli_command+0x100>)
 800826a:	0018      	movs	r0, r3
 800826c:	f017 ff22 	bl	80200b4 <puts>
      printf("t - Show actual systemtime\r\n");
 8008270:	4b13      	ldr	r3, [pc, #76]	@ (80082c0 <check_cli_command+0x104>)
 8008272:	0018      	movs	r0, r3
 8008274:	f017 ff1e 	bl	80200b4 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 8008278:	46c0      	nop			@ (mov r8, r8)
  }
}
 800827a:	46c0      	nop			@ (mov r8, r8)
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000fb8 	.word	0x20000fb8
 8008284:	08025658 	.word	0x08025658
 8008288:	080240fc 	.word	0x080240fc
 800828c:	08024118 	.word	0x08024118
 8008290:	08024134 	.word	0x08024134
 8008294:	08024154 	.word	0x08024154
 8008298:	20001088 	.word	0x20001088
 800829c:	08024170 	.word	0x08024170
 80082a0:	080241a0 	.word	0x080241a0
 80082a4:	080241a4 	.word	0x080241a4
 80082a8:	080241bc 	.word	0x080241bc
 80082ac:	080241dc 	.word	0x080241dc
 80082b0:	08024200 	.word	0x08024200
 80082b4:	08024220 	.word	0x08024220
 80082b8:	08024244 	.word	0x08024244
 80082bc:	08024264 	.word	0x08024264
 80082c0:	08024284 	.word	0x08024284

080082c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80082cc:	4908      	ldr	r1, [pc, #32]	@ (80082f0 <HAL_UART_RxCpltCallback+0x2c>)
 80082ce:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <HAL_UART_RxCpltCallback+0x30>)
 80082d0:	2201      	movs	r2, #1
 80082d2:	0018      	movs	r0, r3
 80082d4:	f00f f8b0 	bl	8017438 <HAL_UART_Receive_IT>
  check_cli_command();
 80082d8:	f7ff ff70 	bl	80081bc <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80082dc:	4904      	ldr	r1, [pc, #16]	@ (80082f0 <HAL_UART_RxCpltCallback+0x2c>)
 80082de:	4b05      	ldr	r3, [pc, #20]	@ (80082f4 <HAL_UART_RxCpltCallback+0x30>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	0018      	movs	r0, r3
 80082e4:	f00f f8a8 	bl	8017438 <HAL_UART_Receive_IT>
}
 80082e8:	46c0      	nop			@ (mov r8, r8)
 80082ea:	46bd      	mov	sp, r7
 80082ec:	b002      	add	sp, #8
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20000fb8 	.word	0x20000fb8
 80082f4:	200021a0 	.word	0x200021a0

080082f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	0002      	movs	r2, r0
 8008300:	1dbb      	adds	r3, r7, #6
 8008302:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008304:	1dbb      	adds	r3, r7, #6
 8008306:	881a      	ldrh	r2, [r3, #0]
 8008308:	2380      	movs	r3, #128	@ 0x80
 800830a:	021b      	lsls	r3, r3, #8
 800830c:	429a      	cmp	r2, r3
 800830e:	d10b      	bne.n	8008328 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008310:	f005 fc2a 	bl	800db68 <setuserToggle>
    if (GetPMSensorPresence()) {
 8008314:	f000 f84c 	bl	80083b0 <GetPMSensorPresence>
 8008318:	1e03      	subs	r3, r0, #0
 800831a:	d005      	beq.n	8008328 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800831c:	4b04      	ldr	r3, [pc, #16]	@ (8008330 <HAL_GPIO_EXTI_Callback+0x38>)
 800831e:	2201      	movs	r2, #1
 8008320:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 8008322:	2064      	movs	r0, #100	@ 0x64
 8008324:	f000 feae 	bl	8009084 <setsen5xReadTimer>
    }
  }
}
 8008328:	46c0      	nop			@ (mov r8, r8)
 800832a:	46bd      	mov	sp, r7
 800832c:	b002      	add	sp, #8
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000fd0 	.word	0x20000fd0

08008334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008338:	b672      	cpsid	i
}
 800833a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800833c:	4a05      	ldr	r2, [pc, #20]	@ (8008354 <Error_Handler+0x20>)
 800833e:	4b06      	ldr	r3, [pc, #24]	@ (8008358 <Error_Handler+0x24>)
 8008340:	0019      	movs	r1, r3
 8008342:	2001      	movs	r0, #1
 8008344:	f006 f96c 	bl	800e620 <CreateLine>
    HAL_Delay(2500);
 8008348:	4b04      	ldr	r3, [pc, #16]	@ (800835c <Error_Handler+0x28>)
 800834a:	0018      	movs	r0, r3
 800834c:	f006 fdb2 	bl	800eeb4 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008350:	46c0      	nop			@ (mov r8, r8)
 8008352:	e7f3      	b.n	800833c <Error_Handler+0x8>
 8008354:	080242a0 	.word	0x080242a0
 8008358:	080241a0 	.word	0x080241a0
 800835c:	000009c4 	.word	0x000009c4

08008360 <testInit>:
#include "statusCheck.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008364:	4b10      	ldr	r3, [pc, #64]	@ (80083a8 <testInit+0x48>)
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800836a:	4b0f      	ldr	r3, [pc, #60]	@ (80083a8 <testInit+0x48>)
 800836c:	2200      	movs	r2, #0
 800836e:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008370:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <testInit+0x48>)
 8008372:	2200      	movs	r2, #0
 8008374:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 8008376:	4b0c      	ldr	r3, [pc, #48]	@ (80083a8 <testInit+0x48>)
 8008378:	2200      	movs	r2, #0
 800837a:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 800837c:	4b0a      	ldr	r3, [pc, #40]	@ (80083a8 <testInit+0x48>)
 800837e:	2200      	movs	r2, #0
 8008380:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 8008382:	4b09      	ldr	r3, [pc, #36]	@ (80083a8 <testInit+0x48>)
 8008384:	2200      	movs	r2, #0
 8008386:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 8008388:	4b08      	ldr	r3, [pc, #32]	@ (80083ac <testInit+0x4c>)
 800838a:	2201      	movs	r2, #1
 800838c:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800838e:	4b07      	ldr	r3, [pc, #28]	@ (80083ac <testInit+0x4c>)
 8008390:	2201      	movs	r2, #1
 8008392:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 8008394:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <testInit+0x4c>)
 8008396:	2201      	movs	r2, #1
 8008398:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800839a:	4b04      	ldr	r3, [pc, #16]	@ (80083ac <testInit+0x4c>)
 800839c:	2201      	movs	r2, #1
 800839e:	70da      	strb	r2, [r3, #3]
}
 80083a0:	46c0      	nop			@ (mov r8, r8)
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	46c0      	nop			@ (mov r8, r8)
 80083a8:	20000fd4 	.word	0x20000fd4
 80083ac:	20000fd0 	.word	0x20000fd0

080083b0 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 80083b0:	b580      	push	{r7, lr}
 80083b2:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 80083b4:	4b02      	ldr	r3, [pc, #8]	@ (80083c0 <GetPMSensorPresence+0x10>)
 80083b6:	789b      	ldrb	r3, [r3, #2]
}
 80083b8:	0018      	movs	r0, r3
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	46c0      	nop			@ (mov r8, r8)
 80083c0:	20000fd4 	.word	0x20000fd4

080083c4 <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 80083c8:	4b02      	ldr	r3, [pc, #8]	@ (80083d4 <IsSGPPresent+0x10>)
 80083ca:	785b      	ldrb	r3, [r3, #1]
}
 80083cc:	0018      	movs	r0, r3
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	46c0      	nop			@ (mov r8, r8)
 80083d4:	20000fd4 	.word	0x20000fd4

080083d8 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	0002      	movs	r2, r0
 80083e0:	1dfb      	adds	r3, r7, #7
 80083e2:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 80083e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008414 <SetVOCSensorDIS_ENA+0x3c>)
 80083e6:	1dfa      	adds	r2, r7, #7
 80083e8:	7812      	ldrb	r2, [r2, #0]
 80083ea:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 80083ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008418 <SetVOCSensorDIS_ENA+0x40>)
 80083ee:	1dfa      	adds	r2, r7, #7
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 80083f4:	1dfb      	adds	r3, r7, #7
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <SetVOCSensorDIS_ENA+0x28>
 80083fc:	4b07      	ldr	r3, [pc, #28]	@ (800841c <SetVOCSensorDIS_ENA+0x44>)
 80083fe:	e000      	b.n	8008402 <SetVOCSensorDIS_ENA+0x2a>
 8008400:	4b07      	ldr	r3, [pc, #28]	@ (8008420 <SetVOCSensorDIS_ENA+0x48>)
 8008402:	4a08      	ldr	r2, [pc, #32]	@ (8008424 <SetVOCSensorDIS_ENA+0x4c>)
 8008404:	4908      	ldr	r1, [pc, #32]	@ (8008428 <SetVOCSensorDIS_ENA+0x50>)
 8008406:	2003      	movs	r0, #3
 8008408:	f006 f90a 	bl	800e620 <CreateLine>
}
 800840c:	46c0      	nop			@ (mov r8, r8)
 800840e:	46bd      	mov	sp, r7
 8008410:	b002      	add	sp, #8
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20000fd4 	.word	0x20000fd4
 8008418:	20000fd0 	.word	0x20000fd0
 800841c:	080242cc 	.word	0x080242cc
 8008420:	080242d4 	.word	0x080242d4
 8008424:	080242e0 	.word	0x080242e0
 8008428:	080242f4 	.word	0x080242f4

0800842c <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008430:	4b02      	ldr	r3, [pc, #8]	@ (800843c <IsPMSensorEnabled+0x10>)
 8008432:	789b      	ldrb	r3, [r3, #2]
}
 8008434:	0018      	movs	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	46c0      	nop			@ (mov r8, r8)
 800843c:	20000fd0 	.word	0x20000fd0

08008440 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	0002      	movs	r2, r0
 8008448:	1dfb      	adds	r3, r7, #7
 800844a:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800844c:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <SetVOCSensorStatus+0x34>)
 800844e:	795b      	ldrb	r3, [r3, #5]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 8008454:	4b08      	ldr	r3, [pc, #32]	@ (8008478 <SetVOCSensorStatus+0x38>)
 8008456:	1dfa      	adds	r2, r7, #7
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	705a      	strb	r2, [r3, #1]
  }
  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
 800845c:	1dfb      	adds	r3, r7, #7
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	4a06      	ldr	r2, [pc, #24]	@ (800847c <SetVOCSensorStatus+0x3c>)
 8008462:	4907      	ldr	r1, [pc, #28]	@ (8008480 <SetVOCSensorStatus+0x40>)
 8008464:	2003      	movs	r0, #3
 8008466:	f006 f8db 	bl	800e620 <CreateLine>
}
 800846a:	46c0      	nop			@ (mov r8, r8)
 800846c:	46bd      	mov	sp, r7
 800846e:	b002      	add	sp, #8
 8008470:	bd80      	pop	{r7, pc}
 8008472:	46c0      	nop			@ (mov r8, r8)
 8008474:	20000fd4 	.word	0x20000fd4
 8008478:	20000fd0 	.word	0x20000fd0
 800847c:	080242f8 	.word	0x080242f8
 8008480:	080242f4 	.word	0x080242f4

08008484 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	0002      	movs	r2, r0
 800848c:	1dfb      	adds	r3, r7, #7
 800848e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 8008490:	4b03      	ldr	r3, [pc, #12]	@ (80084a0 <SetPMSensorStatus+0x1c>)
 8008492:	1dfa      	adds	r2, r7, #7
 8008494:	7812      	ldrb	r2, [r2, #0]
 8008496:	709a      	strb	r2, [r3, #2]
}
 8008498:	46c0      	nop			@ (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b002      	add	sp, #8
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000fd0 	.word	0x20000fd0

080084a4 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 80084a8:	4b02      	ldr	r3, [pc, #8]	@ (80084b4 <SetESPMeasurementDone+0x10>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	711a      	strb	r2, [r3, #4]
}
 80084ae:	46c0      	nop			@ (mov r8, r8)
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000fd4 	.word	0x20000fd4

080084b8 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  testInit();
 80084c6:	f7ff ff4b 	bl	8008360 <testInit>
  I2CSensors_Init(sensorI2C);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	0018      	movs	r0, r3
 80084ce:	f7fd fc97 	bl	8005e00 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 80084d2:	f006 fad7 	bl	800ea84 <HIDS_DeviceConnected>
 80084d6:	0003      	movs	r3, r0
 80084d8:	001a      	movs	r2, r3
 80084da:	2301      	movs	r3, #1
 80084dc:	4053      	eors	r3, r2
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00c      	beq.n	80084fe <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 80084e4:	4a7f      	ldr	r2, [pc, #508]	@ (80086e4 <Device_Init+0x22c>)
 80084e6:	4b80      	ldr	r3, [pc, #512]	@ (80086e8 <Device_Init+0x230>)
 80084e8:	0019      	movs	r1, r3
 80084ea:	2001      	movs	r0, #1
 80084ec:	f006 f898 	bl	800e620 <CreateLine>
     SensorProbe.HT_Present = false;
 80084f0:	4b7e      	ldr	r3, [pc, #504]	@ (80086ec <Device_Init+0x234>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 80084f6:	4b7e      	ldr	r3, [pc, #504]	@ (80086f0 <Device_Init+0x238>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e008      	b.n	8008510 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 80084fe:	4b7b      	ldr	r3, [pc, #492]	@ (80086ec <Device_Init+0x234>)
 8008500:	2201      	movs	r2, #1
 8008502:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008504:	4a7b      	ldr	r2, [pc, #492]	@ (80086f4 <Device_Init+0x23c>)
 8008506:	4b7c      	ldr	r3, [pc, #496]	@ (80086f8 <Device_Init+0x240>)
 8008508:	0019      	movs	r1, r3
 800850a:	2003      	movs	r0, #3
 800850c:	f006 f888 	bl	800e620 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008510:	f003 fb76 	bl	800bc00 <SGP_DeviceConnected>
 8008514:	0003      	movs	r3, r0
 8008516:	001a      	movs	r2, r3
 8008518:	2301      	movs	r3, #1
 800851a:	4053      	eors	r3, r2
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00c      	beq.n	800853c <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8008522:	4b72      	ldr	r3, [pc, #456]	@ (80086ec <Device_Init+0x234>)
 8008524:	2200      	movs	r2, #0
 8008526:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008528:	4a74      	ldr	r2, [pc, #464]	@ (80086fc <Device_Init+0x244>)
 800852a:	4b6f      	ldr	r3, [pc, #444]	@ (80086e8 <Device_Init+0x230>)
 800852c:	0019      	movs	r1, r3
 800852e:	2001      	movs	r0, #1
 8008530:	f006 f876 	bl	800e620 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008534:	4b6e      	ldr	r3, [pc, #440]	@ (80086f0 <Device_Init+0x238>)
 8008536:	2200      	movs	r2, #0
 8008538:	705a      	strb	r2, [r3, #1]
 800853a:	e00b      	b.n	8008554 <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800853c:	4b6b      	ldr	r3, [pc, #428]	@ (80086ec <Device_Init+0x234>)
 800853e:	2201      	movs	r2, #1
 8008540:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 8008542:	4b6a      	ldr	r3, [pc, #424]	@ (80086ec <Device_Init+0x234>)
 8008544:	2201      	movs	r2, #1
 8008546:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008548:	4a6d      	ldr	r2, [pc, #436]	@ (8008700 <Device_Init+0x248>)
 800854a:	4b6b      	ldr	r3, [pc, #428]	@ (80086f8 <Device_Init+0x240>)
 800854c:	0019      	movs	r1, r3
 800854e:	2003      	movs	r0, #3
 8008550:	f006 f866 	bl	800e620 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8008554:	4b65      	ldr	r3, [pc, #404]	@ (80086ec <Device_Init+0x234>)
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d009      	beq.n	8008570 <Device_Init+0xb8>
 800855c:	4b63      	ldr	r3, [pc, #396]	@ (80086ec <Device_Init+0x234>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 8008564:	2200      	movs	r2, #0
 8008566:	2101      	movs	r1, #1
 8008568:	2000      	movs	r0, #0
 800856a:	f004 fe57 	bl	800d21c <SetDBLED>
 800856e:	e018      	b.n	80085a2 <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008570:	2200      	movs	r2, #0
 8008572:	2100      	movs	r1, #0
 8008574:	2001      	movs	r0, #1
 8008576:	f004 fe51 	bl	800d21c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800857a:	4b62      	ldr	r3, [pc, #392]	@ (8008704 <Device_Init+0x24c>)
 800857c:	2200      	movs	r2, #0
 800857e:	2101      	movs	r1, #1
 8008580:	0018      	movs	r0, r3
 8008582:	f007 ff1e 	bl	80103c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8008586:	2380      	movs	r3, #128	@ 0x80
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	485e      	ldr	r0, [pc, #376]	@ (8008704 <Device_Init+0x24c>)
 800858c:	2201      	movs	r2, #1
 800858e:	0019      	movs	r1, r3
 8008590:	f007 ff17 	bl	80103c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8008594:	2380      	movs	r3, #128	@ 0x80
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	485a      	ldr	r0, [pc, #360]	@ (8008704 <Device_Init+0x24c>)
 800859a:	2201      	movs	r2, #1
 800859c:	0019      	movs	r1, r3
 800859e:	f007 ff10 	bl	80103c2 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 80085a2:	4b53      	ldr	r3, [pc, #332]	@ (80086f0 <Device_Init+0x238>)
 80085a4:	78db      	ldrb	r3, [r3, #3]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d028      	beq.n	80085fc <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 80085aa:	4a57      	ldr	r2, [pc, #348]	@ (8008708 <Device_Init+0x250>)
 80085ac:	4b57      	ldr	r3, [pc, #348]	@ (800870c <Device_Init+0x254>)
 80085ae:	0019      	movs	r1, r3
 80085b0:	2002      	movs	r0, #2
 80085b2:	f006 f835 	bl	800e620 <CreateLine>
    if (!enableMicrophone(true)) {
 80085b6:	2001      	movs	r0, #1
 80085b8:	f003 ff2e 	bl	800c418 <enableMicrophone>
 80085bc:	0003      	movs	r3, r0
 80085be:	001a      	movs	r2, r3
 80085c0:	2301      	movs	r3, #1
 80085c2:	4053      	eors	r3, r2
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 80085ca:	4a51      	ldr	r2, [pc, #324]	@ (8008710 <Device_Init+0x258>)
 80085cc:	4b46      	ldr	r3, [pc, #280]	@ (80086e8 <Device_Init+0x230>)
 80085ce:	0019      	movs	r1, r3
 80085d0:	2001      	movs	r0, #1
 80085d2:	f006 f825 	bl	800e620 <CreateLine>
      SensorProbe.MIC_Present = false;
 80085d6:	4b45      	ldr	r3, [pc, #276]	@ (80086ec <Device_Init+0x234>)
 80085d8:	2200      	movs	r2, #0
 80085da:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 80085dc:	4b44      	ldr	r3, [pc, #272]	@ (80086f0 <Device_Init+0x238>)
 80085de:	2200      	movs	r2, #0
 80085e0:	70da      	strb	r2, [r3, #3]
 80085e2:	e00b      	b.n	80085fc <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 80085e4:	4b41      	ldr	r3, [pc, #260]	@ (80086ec <Device_Init+0x234>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80085ea:	4b41      	ldr	r3, [pc, #260]	@ (80086f0 <Device_Init+0x238>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 80085f0:	4a48      	ldr	r2, [pc, #288]	@ (8008714 <Device_Init+0x25c>)
 80085f2:	4b41      	ldr	r3, [pc, #260]	@ (80086f8 <Device_Init+0x240>)
 80085f4:	0019      	movs	r1, r3
 80085f6:	2003      	movs	r0, #3
 80085f8:	f006 f812 	bl	800e620 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 80085fc:	f000 fe2a 	bl	8009254 <probe_sen5x>
 8008600:	1e03      	subs	r3, r0, #0
 8008602:	d122      	bne.n	800864a <Device_Init+0x192>
    Debug("PM sensor initialised.");
 8008604:	4a44      	ldr	r2, [pc, #272]	@ (8008718 <Device_Init+0x260>)
 8008606:	4b3c      	ldr	r3, [pc, #240]	@ (80086f8 <Device_Init+0x240>)
 8008608:	0019      	movs	r1, r3
 800860a:	2003      	movs	r0, #3
 800860c:	f006 f808 	bl	800e620 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8008610:	4b36      	ldr	r3, [pc, #216]	@ (80086ec <Device_Init+0x234>)
 8008612:	2201      	movs	r2, #1
 8008614:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8008616:	4b36      	ldr	r3, [pc, #216]	@ (80086f0 <Device_Init+0x238>)
 8008618:	2201      	movs	r2, #1
 800861a:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800861c:	4b3f      	ldr	r3, [pc, #252]	@ (800871c <Device_Init+0x264>)
 800861e:	791b      	ldrb	r3, [r3, #4]
 8008620:	2b34      	cmp	r3, #52	@ 0x34
 8008622:	d003      	beq.n	800862c <Device_Init+0x174>
 8008624:	4b3d      	ldr	r3, [pc, #244]	@ (800871c <Device_Init+0x264>)
 8008626:	791b      	ldrb	r3, [r3, #4]
 8008628:	2b35      	cmp	r3, #53	@ 0x35
 800862a:	d11c      	bne.n	8008666 <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800862c:	4a3c      	ldr	r2, [pc, #240]	@ (8008720 <Device_Init+0x268>)
 800862e:	4b37      	ldr	r3, [pc, #220]	@ (800870c <Device_Init+0x254>)
 8008630:	0019      	movs	r1, r3
 8008632:	2002      	movs	r0, #2
 8008634:	f005 fff4 	bl	800e620 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008638:	4b2d      	ldr	r3, [pc, #180]	@ (80086f0 <Device_Init+0x238>)
 800863a:	2200      	movs	r2, #0
 800863c:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800863e:	4b2b      	ldr	r3, [pc, #172]	@ (80086ec <Device_Init+0x234>)
 8008640:	2200      	movs	r2, #0
 8008642:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 8008644:	f003 fcc0 	bl	800bfc8 <SGP_SoftReset>
 8008648:	e00d      	b.n	8008666 <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800864a:	f000 fdaf 	bl	80091ac <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800864e:	4a35      	ldr	r2, [pc, #212]	@ (8008724 <Device_Init+0x26c>)
 8008650:	4b29      	ldr	r3, [pc, #164]	@ (80086f8 <Device_Init+0x240>)
 8008652:	0019      	movs	r1, r3
 8008654:	2003      	movs	r0, #3
 8008656:	f005 ffe3 	bl	800e620 <CreateLine>
    SensorProbe.PM_Present = false;
 800865a:	4b24      	ldr	r3, [pc, #144]	@ (80086ec <Device_Init+0x234>)
 800865c:	2200      	movs	r2, #0
 800865e:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008660:	4b23      	ldr	r3, [pc, #140]	@ (80086f0 <Device_Init+0x238>)
 8008662:	2200      	movs	r2, #0
 8008664:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 8008666:	4b21      	ldr	r3, [pc, #132]	@ (80086ec <Device_Init+0x234>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <Device_Init+0x1ba>
 800866e:	4b2e      	ldr	r3, [pc, #184]	@ (8008728 <Device_Init+0x270>)
 8008670:	e000      	b.n	8008674 <Device_Init+0x1bc>
 8008672:	4b2e      	ldr	r3, [pc, #184]	@ (800872c <Device_Init+0x274>)
 8008674:	4a2e      	ldr	r2, [pc, #184]	@ (8008730 <Device_Init+0x278>)
 8008676:	4925      	ldr	r1, [pc, #148]	@ (800870c <Device_Init+0x254>)
 8008678:	2002      	movs	r0, #2
 800867a:	f005 ffd1 	bl	800e620 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800867e:	4b1b      	ldr	r3, [pc, #108]	@ (80086ec <Device_Init+0x234>)
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <Device_Init+0x1d2>
 8008686:	4b28      	ldr	r3, [pc, #160]	@ (8008728 <Device_Init+0x270>)
 8008688:	e000      	b.n	800868c <Device_Init+0x1d4>
 800868a:	4b28      	ldr	r3, [pc, #160]	@ (800872c <Device_Init+0x274>)
 800868c:	4a29      	ldr	r2, [pc, #164]	@ (8008734 <Device_Init+0x27c>)
 800868e:	491f      	ldr	r1, [pc, #124]	@ (800870c <Device_Init+0x254>)
 8008690:	2002      	movs	r0, #2
 8008692:	f005 ffc5 	bl	800e620 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 8008696:	4b15      	ldr	r3, [pc, #84]	@ (80086ec <Device_Init+0x234>)
 8008698:	789b      	ldrb	r3, [r3, #2]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <Device_Init+0x1ea>
 800869e:	4b22      	ldr	r3, [pc, #136]	@ (8008728 <Device_Init+0x270>)
 80086a0:	e000      	b.n	80086a4 <Device_Init+0x1ec>
 80086a2:	4b22      	ldr	r3, [pc, #136]	@ (800872c <Device_Init+0x274>)
 80086a4:	4a24      	ldr	r2, [pc, #144]	@ (8008738 <Device_Init+0x280>)
 80086a6:	4919      	ldr	r1, [pc, #100]	@ (800870c <Device_Init+0x254>)
 80086a8:	2002      	movs	r0, #2
 80086aa:	f005 ffb9 	bl	800e620 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 80086ae:	4b0f      	ldr	r3, [pc, #60]	@ (80086ec <Device_Init+0x234>)
 80086b0:	78db      	ldrb	r3, [r3, #3]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <Device_Init+0x202>
 80086b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008728 <Device_Init+0x270>)
 80086b8:	e000      	b.n	80086bc <Device_Init+0x204>
 80086ba:	4b1c      	ldr	r3, [pc, #112]	@ (800872c <Device_Init+0x274>)
 80086bc:	4a1f      	ldr	r2, [pc, #124]	@ (800873c <Device_Init+0x284>)
 80086be:	4913      	ldr	r1, [pc, #76]	@ (800870c <Device_Init+0x254>)
 80086c0:	2002      	movs	r0, #2
 80086c2:	f005 ffad 	bl	800e620 <CreateLine>
  ESP_Init(espUart);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	0018      	movs	r0, r3
 80086ca:	f7fb fa23 	bl	8003b14 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 80086ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008740 <Device_Init+0x288>)
 80086d0:	4b09      	ldr	r3, [pc, #36]	@ (80086f8 <Device_Init+0x240>)
 80086d2:	0019      	movs	r1, r3
 80086d4:	2003      	movs	r0, #3
 80086d6:	f005 ffa3 	bl	800e620 <CreateLine>
}
 80086da:	46c0      	nop			@ (mov r8, r8)
 80086dc:	46bd      	mov	sp, r7
 80086de:	b004      	add	sp, #16
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	46c0      	nop			@ (mov r8, r8)
 80086e4:	08024328 	.word	0x08024328
 80086e8:	08024358 	.word	0x08024358
 80086ec:	20000fd4 	.word	0x20000fd4
 80086f0:	20000fd0 	.word	0x20000fd0
 80086f4:	0802435c 	.word	0x0802435c
 80086f8:	080242f4 	.word	0x080242f4
 80086fc:	08024388 	.word	0x08024388
 8008700:	080243a4 	.word	0x080243a4
 8008704:	50000400 	.word	0x50000400
 8008708:	080243bc 	.word	0x080243bc
 800870c:	080243e0 	.word	0x080243e0
 8008710:	080243e4 	.word	0x080243e4
 8008714:	08024410 	.word	0x08024410
 8008718:	0802443c 	.word	0x0802443c
 800871c:	2000106c 	.word	0x2000106c
 8008720:	08024454 	.word	0x08024454
 8008724:	080244a4 	.word	0x080244a4
 8008728:	080244c8 	.word	0x080244c8
 800872c:	080244cc 	.word	0x080244cc
 8008730:	080244d0 	.word	0x080244d0
 8008734:	080244ec 	.word	0x080244ec
 8008738:	08024508 	.word	0x08024508
 800873c:	08024524 	.word	0x08024524
 8008740:	08024540 	.word	0x08024540

08008744 <Device_Test>:

void Device_Test(){
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008748:	4b34      	ldr	r3, [pc, #208]	@ (800881c <Device_Test+0xd8>)
 800874a:	78db      	ldrb	r3, [r3, #3]
 800874c:	2201      	movs	r2, #1
 800874e:	4053      	eors	r3, r2
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d027      	beq.n	80087a6 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 8008756:	f000 fab9 	bl	8008ccc <MIC_TestMeasurementDone>
 800875a:	1e03      	subs	r3, r0, #0
 800875c:	d011      	beq.n	8008782 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800875e:	4b2f      	ldr	r3, [pc, #188]	@ (800881c <Device_Test+0xd8>)
 8008760:	2201      	movs	r2, #1
 8008762:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008764:	4b2e      	ldr	r3, [pc, #184]	@ (8008820 <Device_Test+0xdc>)
 8008766:	2201      	movs	r2, #1
 8008768:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800876a:	f004 fcdb 	bl	800d124 <Calculate_LED_ON>
 800876e:	0003      	movs	r3, r0
 8008770:	0019      	movs	r1, r3
 8008772:	23fa      	movs	r3, #250	@ 0xfa
 8008774:	011a      	lsls	r2, r3, #4
 8008776:	23fa      	movs	r3, #250	@ 0xfa
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	0018      	movs	r0, r3
 800877c:	f004 fd1a 	bl	800d1b4 <SetStatusLED>
 8008780:	e011      	b.n	80087a6 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 8008782:	f003 fe25 	bl	800c3d0 <micSettlingComplete>
 8008786:	1e03      	subs	r3, r0, #0
 8008788:	d00d      	beq.n	80087a6 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800878a:	4b25      	ldr	r3, [pc, #148]	@ (8008820 <Device_Test+0xdc>)
 800878c:	2201      	movs	r2, #1
 800878e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 8008790:	f004 fcc8 	bl	800d124 <Calculate_LED_ON>
 8008794:	0003      	movs	r3, r0
 8008796:	0018      	movs	r0, r3
 8008798:	23fa      	movs	r3, #250	@ 0xfa
 800879a:	011a      	lsls	r2, r3, #4
 800879c:	23fa      	movs	r3, #250	@ 0xfa
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	0019      	movs	r1, r3
 80087a2:	f004 fd07 	bl	800d1b4 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 80087a6:	4b1d      	ldr	r3, [pc, #116]	@ (800881c <Device_Test+0xd8>)
 80087a8:	791b      	ldrb	r3, [r3, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	4053      	eors	r3, r2
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 80087b4:	f7fc fd5e 	bl	8005274 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 80087b8:	4b18      	ldr	r3, [pc, #96]	@ (800881c <Device_Test+0xd8>)
 80087ba:	791b      	ldrb	r3, [r3, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <Device_Test+0x84>
 80087c0:	4b16      	ldr	r3, [pc, #88]	@ (800881c <Device_Test+0xd8>)
 80087c2:	78db      	ldrb	r3, [r3, #3]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <Device_Test+0x92>
 80087c8:	4b16      	ldr	r3, [pc, #88]	@ (8008824 <Device_Test+0xe0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	0018      	movs	r0, r3
 80087ce:	f005 fed1 	bl	800e574 <TimestampIsReached>
 80087d2:	1e03      	subs	r3, r0, #0
 80087d4:	d01f      	beq.n	8008816 <Device_Test+0xd2>
    Info("Test completed");
 80087d6:	4a14      	ldr	r2, [pc, #80]	@ (8008828 <Device_Test+0xe4>)
 80087d8:	4b14      	ldr	r3, [pc, #80]	@ (800882c <Device_Test+0xe8>)
 80087da:	0019      	movs	r1, r3
 80087dc:	2002      	movs	r0, #2
 80087de:	f005 ff1f 	bl	800e620 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 80087e2:	4b0e      	ldr	r3, [pc, #56]	@ (800881c <Device_Test+0xd8>)
 80087e4:	791b      	ldrb	r3, [r3, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <Device_Test+0xaa>
 80087ea:	4b11      	ldr	r3, [pc, #68]	@ (8008830 <Device_Test+0xec>)
 80087ec:	e000      	b.n	80087f0 <Device_Test+0xac>
 80087ee:	4b11      	ldr	r3, [pc, #68]	@ (8008834 <Device_Test+0xf0>)
 80087f0:	4a11      	ldr	r2, [pc, #68]	@ (8008838 <Device_Test+0xf4>)
 80087f2:	490e      	ldr	r1, [pc, #56]	@ (800882c <Device_Test+0xe8>)
 80087f4:	2002      	movs	r0, #2
 80087f6:	f005 ff13 	bl	800e620 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 80087fa:	4b08      	ldr	r3, [pc, #32]	@ (800881c <Device_Test+0xd8>)
 80087fc:	78db      	ldrb	r3, [r3, #3]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <Device_Test+0xc2>
 8008802:	4b0b      	ldr	r3, [pc, #44]	@ (8008830 <Device_Test+0xec>)
 8008804:	e000      	b.n	8008808 <Device_Test+0xc4>
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <Device_Test+0xf0>)
 8008808:	4a0c      	ldr	r2, [pc, #48]	@ (800883c <Device_Test+0xf8>)
 800880a:	4908      	ldr	r1, [pc, #32]	@ (800882c <Device_Test+0xe8>)
 800880c:	2002      	movs	r0, #2
 800880e:	f005 ff07 	bl	800e620 <CreateLine>
    SetTestDone();
 8008812:	f7ff f9c5 	bl	8007ba0 <SetTestDone>
  }
}
 8008816:	46c0      	nop			@ (mov r8, r8)
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000fd4 	.word	0x20000fd4
 8008820:	20000fd0 	.word	0x20000fd0
 8008824:	20000fc8 	.word	0x20000fc8
 8008828:	08024564 	.word	0x08024564
 800882c:	080243e0 	.word	0x080243e0
 8008830:	08024574 	.word	0x08024574
 8008834:	0802457c 	.word	0x0802457c
 8008838:	08024584 	.word	0x08024584
 800883c:	08024598 	.word	0x08024598

08008840 <AllDevicesReady>:

bool AllDevicesReady() {
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8008844:	4b2a      	ldr	r3, [pc, #168]	@ (80088f0 <AllDevicesReady+0xb0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	0018      	movs	r0, r3
 800884a:	f005 fe93 	bl	800e574 <TimestampIsReached>
 800884e:	1e03      	subs	r3, r0, #0
 8008850:	d04a      	beq.n	80088e8 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8008852:	4b28      	ldr	r3, [pc, #160]	@ (80088f4 <AllDevicesReady+0xb4>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b06      	cmp	r3, #6
 8008858:	d102      	bne.n	8008860 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800885a:	4b27      	ldr	r3, [pc, #156]	@ (80088f8 <AllDevicesReady+0xb8>)
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8008860:	4b26      	ldr	r3, [pc, #152]	@ (80088fc <AllDevicesReady+0xbc>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b07      	cmp	r3, #7
 8008866:	d006      	beq.n	8008876 <AllDevicesReady+0x36>
 8008868:	4b25      	ldr	r3, [pc, #148]	@ (8008900 <AllDevicesReady+0xc0>)
 800886a:	795b      	ldrb	r3, [r3, #5]
 800886c:	2201      	movs	r2, #1
 800886e:	4053      	eors	r3, r2
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 8008876:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <AllDevicesReady+0xb8>)
 8008878:	2200      	movs	r2, #0
 800887a:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800887c:	4b21      	ldr	r3, [pc, #132]	@ (8008904 <AllDevicesReady+0xc4>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d102      	bne.n	800888a <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 8008884:	4b1c      	ldr	r3, [pc, #112]	@ (80088f8 <AllDevicesReady+0xb8>)
 8008886:	2200      	movs	r2, #0
 8008888:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800888a:	4b1f      	ldr	r3, [pc, #124]	@ (8008908 <AllDevicesReady+0xc8>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b03      	cmp	r3, #3
 8008890:	d102      	bne.n	8008898 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 8008892:	4b19      	ldr	r3, [pc, #100]	@ (80088f8 <AllDevicesReady+0xb8>)
 8008894:	2200      	movs	r2, #0
 8008896:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008898:	4b1c      	ldr	r3, [pc, #112]	@ (800890c <AllDevicesReady+0xcc>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b09      	cmp	r3, #9
 800889e:	d123      	bne.n	80088e8 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088a0:	4b15      	ldr	r3, [pc, #84]	@ (80088f8 <AllDevicesReady+0xb8>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	2201      	movs	r2, #1
 80088a6:	4053      	eors	r3, r2
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d016      	beq.n	80088dc <AllDevicesReady+0x9c>
 80088ae:	4b12      	ldr	r3, [pc, #72]	@ (80088f8 <AllDevicesReady+0xb8>)
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	2201      	movs	r2, #1
 80088b4:	4053      	eors	r3, r2
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00f      	beq.n	80088dc <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80088bc:	4b0e      	ldr	r3, [pc, #56]	@ (80088f8 <AllDevicesReady+0xb8>)
 80088be:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088c0:	2201      	movs	r2, #1
 80088c2:	4053      	eors	r3, r2
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d008      	beq.n	80088dc <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80088ca:	4b0b      	ldr	r3, [pc, #44]	@ (80088f8 <AllDevicesReady+0xb8>)
 80088cc:	78db      	ldrb	r3, [r3, #3]
 80088ce:	2201      	movs	r2, #1
 80088d0:	4053      	eors	r3, r2
 80088d2:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <AllDevicesReady+0x9c>
 80088d8:	2301      	movs	r3, #1
 80088da:	e000      	b.n	80088de <AllDevicesReady+0x9e>
 80088dc:	2300      	movs	r3, #0
 80088de:	1c1a      	adds	r2, r3, #0
 80088e0:	2301      	movs	r3, #1
 80088e2:	4013      	ands	r3, r2
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	e000      	b.n	80088ea <AllDevicesReady+0xaa>
    }
  }
  return false;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	0018      	movs	r0, r3
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20000fc8 	.word	0x20000fc8
 80088f4:	20000fb5 	.word	0x20000fb5
 80088f8:	20000fd0 	.word	0x20000fd0
 80088fc:	20000fb4 	.word	0x20000fb4
 8008900:	20000fd4 	.word	0x20000fd4
 8008904:	2000008d 	.word	0x2000008d
 8008908:	20000fb6 	.word	0x20000fb6
 800890c:	20000fb7 	.word	0x20000fb7

08008910 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008914:	4b11      	ldr	r3, [pc, #68]	@ (800895c <EnabledConnectedDevices+0x4c>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800891c:	4b10      	ldr	r3, [pc, #64]	@ (8008960 <EnabledConnectedDevices+0x50>)
 800891e:	2201      	movs	r2, #1
 8008920:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 8008922:	4b0e      	ldr	r3, [pc, #56]	@ (800895c <EnabledConnectedDevices+0x4c>)
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d006      	beq.n	8008938 <EnabledConnectedDevices+0x28>
 800892a:	4b0c      	ldr	r3, [pc, #48]	@ (800895c <EnabledConnectedDevices+0x4c>)
 800892c:	795b      	ldrb	r3, [r3, #5]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 8008932:	4b0b      	ldr	r3, [pc, #44]	@ (8008960 <EnabledConnectedDevices+0x50>)
 8008934:	2201      	movs	r2, #1
 8008936:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008938:	4b08      	ldr	r3, [pc, #32]	@ (800895c <EnabledConnectedDevices+0x4c>)
 800893a:	789b      	ldrb	r3, [r3, #2]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 8008940:	4b07      	ldr	r3, [pc, #28]	@ (8008960 <EnabledConnectedDevices+0x50>)
 8008942:	2201      	movs	r2, #1
 8008944:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8008946:	4b05      	ldr	r3, [pc, #20]	@ (800895c <EnabledConnectedDevices+0x4c>)
 8008948:	78db      	ldrb	r3, [r3, #3]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 800894e:	4b04      	ldr	r3, [pc, #16]	@ (8008960 <EnabledConnectedDevices+0x50>)
 8008950:	2201      	movs	r2, #1
 8008952:	70da      	strb	r2, [r3, #3]
  }
}
 8008954:	46c0      	nop			@ (mov r8, r8)
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	46c0      	nop			@ (mov r8, r8)
 800895c:	20000fd4 	.word	0x20000fd4
 8008960:	20000fd0 	.word	0x20000fd0

08008964 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8008968:	4a0a      	ldr	r2, [pc, #40]	@ (8008994 <DisableConnectedDevices+0x30>)
 800896a:	4b0b      	ldr	r3, [pc, #44]	@ (8008998 <DisableConnectedDevices+0x34>)
 800896c:	0019      	movs	r1, r3
 800896e:	2003      	movs	r0, #3
 8008970:	f005 fe56 	bl	800e620 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 8008974:	4b09      	ldr	r3, [pc, #36]	@ (800899c <DisableConnectedDevices+0x38>)
 8008976:	2200      	movs	r2, #0
 8008978:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800897a:	4b08      	ldr	r3, [pc, #32]	@ (800899c <DisableConnectedDevices+0x38>)
 800897c:	2200      	movs	r2, #0
 800897e:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8008980:	4b06      	ldr	r3, [pc, #24]	@ (800899c <DisableConnectedDevices+0x38>)
 8008982:	2200      	movs	r2, #0
 8008984:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 8008986:	4b05      	ldr	r3, [pc, #20]	@ (800899c <DisableConnectedDevices+0x38>)
 8008988:	2200      	movs	r2, #0
 800898a:	70da      	strb	r2, [r3, #3]
}
 800898c:	46c0      	nop			@ (mov r8, r8)
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	46c0      	nop			@ (mov r8, r8)
 8008994:	080245ac 	.word	0x080245ac
 8008998:	080242f4 	.word	0x080242f4
 800899c:	20000fd0 	.word	0x20000fd0

080089a0 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 80089a4:	4b02      	ldr	r3, [pc, #8]	@ (80089b0 <ResetdBAmax+0x10>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
}
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20001020 	.word	0x20001020

080089b4 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80089bc:	f006 fa70 	bl	800eea0 <HAL_GetTick>
 80089c0:	0002      	movs	r2, r0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	18d2      	adds	r2, r2, r3
 80089c6:	4b03      	ldr	r3, [pc, #12]	@ (80089d4 <setMICTimeStamp+0x20>)
 80089c8:	601a      	str	r2, [r3, #0]
}
 80089ca:	46c0      	nop			@ (mov r8, r8)
 80089cc:	46bd      	mov	sp, r7
 80089ce:	b002      	add	sp, #8
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	46c0      	nop			@ (mov r8, r8)
 80089d4:	20001028 	.word	0x20001028

080089d8 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  counter = 0;
 80089dc:	4b05      	ldr	r3, [pc, #20]	@ (80089f4 <ResetDBACalculator+0x1c>)
 80089de:	2200      	movs	r2, #0
 80089e0:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80089e2:	4b05      	ldr	r3, [pc, #20]	@ (80089f8 <ResetDBACalculator+0x20>)
 80089e4:	2201      	movs	r2, #1
 80089e6:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80089e8:	4b04      	ldr	r3, [pc, #16]	@ (80089fc <ResetDBACalculator+0x24>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	701a      	strb	r2, [r3, #0]
}
 80089ee:	46c0      	nop			@ (mov r8, r8)
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20001024 	.word	0x20001024
 80089f8:	2000008c 	.word	0x2000008c
 80089fc:	20001025 	.word	0x20001025

08008a00 <MIC_Print>:

void MIC_Print(void) {
 8008a00:	b5b0      	push	{r4, r5, r7, lr}
 8008a02:	b08a      	sub	sp, #40	@ 0x28
 8008a04:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8008a06:	4b9f      	ldr	r3, [pc, #636]	@ (8008c84 <MIC_Print+0x284>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b9f      	ldr	r3, [pc, #636]	@ (8008c88 <MIC_Print+0x288>)
 8008a0c:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8008c8c <MIC_Print+0x28c>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	001a      	movs	r2, r3
 8008a14:	4b9c      	ldr	r3, [pc, #624]	@ (8008c88 <MIC_Print+0x288>)
 8008a16:	6819      	ldr	r1, [r3, #0]
 8008a18:	4b9d      	ldr	r3, [pc, #628]	@ (8008c90 <MIC_Print+0x290>)
 8008a1a:	0092      	lsls	r2, r2, #2
 8008a1c:	50d1      	str	r1, [r2, r3]
  counter++;
 8008a1e:	4b9b      	ldr	r3, [pc, #620]	@ (8008c8c <MIC_Print+0x28c>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	4b99      	ldr	r3, [pc, #612]	@ (8008c8c <MIC_Print+0x28c>)
 8008a28:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008a2a:	4b98      	ldr	r3, [pc, #608]	@ (8008c8c <MIC_Print+0x28c>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b09      	cmp	r3, #9
 8008a30:	d80b      	bhi.n	8008a4a <MIC_Print+0x4a>
 8008a32:	4b98      	ldr	r3, [pc, #608]	@ (8008c94 <MIC_Print+0x294>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2201      	movs	r2, #1
 8008a38:	4053      	eors	r3, r2
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <MIC_Print+0x4a>
    denominator = counter;
 8008a40:	4b92      	ldr	r3, [pc, #584]	@ (8008c8c <MIC_Print+0x28c>)
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	4b94      	ldr	r3, [pc, #592]	@ (8008c98 <MIC_Print+0x298>)
 8008a46:	701a      	strb	r2, [r3, #0]
 8008a48:	e005      	b.n	8008a56 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008a4a:	4b93      	ldr	r3, [pc, #588]	@ (8008c98 <MIC_Print+0x298>)
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008a50:	4b90      	ldr	r3, [pc, #576]	@ (8008c94 <MIC_Print+0x294>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8008a56:	4b91      	ldr	r3, [pc, #580]	@ (8008c9c <MIC_Print+0x29c>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008a5c:	230f      	movs	r3, #15
 8008a5e:	18fb      	adds	r3, r7, r3
 8008a60:	2200      	movs	r2, #0
 8008a62:	701a      	strb	r2, [r3, #0]
 8008a64:	e042      	b.n	8008aec <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 8008a66:	240f      	movs	r4, #15
 8008a68:	193b      	adds	r3, r7, r4
 8008a6a:	781a      	ldrb	r2, [r3, #0]
 8008a6c:	4b88      	ldr	r3, [pc, #544]	@ (8008c90 <MIC_Print+0x290>)
 8008a6e:	0092      	lsls	r2, r2, #2
 8008a70:	58d2      	ldr	r2, [r2, r3]
 8008a72:	4b8a      	ldr	r3, [pc, #552]	@ (8008c9c <MIC_Print+0x29c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	1c19      	adds	r1, r3, #0
 8008a78:	1c10      	adds	r0, r2, #0
 8008a7a:	f7f7 ff21 	bl	80008c0 <__aeabi_fadd>
 8008a7e:	1c03      	adds	r3, r0, #0
 8008a80:	1c1a      	adds	r2, r3, #0
 8008a82:	4b86      	ldr	r3, [pc, #536]	@ (8008c9c <MIC_Print+0x29c>)
 8008a84:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008a86:	193b      	adds	r3, r7, r4
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	4b81      	ldr	r3, [pc, #516]	@ (8008c90 <MIC_Print+0x290>)
 8008a8c:	0092      	lsls	r2, r2, #2
 8008a8e:	58d2      	ldr	r2, [r2, r3]
 8008a90:	4b83      	ldr	r3, [pc, #524]	@ (8008ca0 <MIC_Print+0x2a0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	1c19      	adds	r1, r3, #0
 8008a96:	1c10      	adds	r0, r2, #0
 8008a98:	f7f7 fd5e 	bl	8000558 <__aeabi_fcmpgt>
 8008a9c:	1e03      	subs	r3, r0, #0
 8008a9e:	d006      	beq.n	8008aae <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008aa0:	193b      	adds	r3, r7, r4
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	4b7a      	ldr	r3, [pc, #488]	@ (8008c90 <MIC_Print+0x290>)
 8008aa6:	0092      	lsls	r2, r2, #2
 8008aa8:	58d2      	ldr	r2, [r2, r3]
 8008aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8008ca0 <MIC_Print+0x2a0>)
 8008aac:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008aae:	4b7b      	ldr	r3, [pc, #492]	@ (8008c9c <MIC_Print+0x29c>)
 8008ab0:	681c      	ldr	r4, [r3, #0]
 8008ab2:	4b79      	ldr	r3, [pc, #484]	@ (8008c98 <MIC_Print+0x298>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f7f8 fdd6 	bl	8001668 <__aeabi_ui2f>
 8008abc:	1c03      	adds	r3, r0, #0
 8008abe:	1c19      	adds	r1, r3, #0
 8008ac0:	1c20      	adds	r0, r4, #0
 8008ac2:	f7f8 f887 	bl	8000bd4 <__aeabi_fdiv>
 8008ac6:	1c03      	adds	r3, r0, #0
 8008ac8:	1c1a      	adds	r2, r3, #0
 8008aca:	4b76      	ldr	r3, [pc, #472]	@ (8008ca4 <MIC_Print+0x2a4>)
 8008acc:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 8008ace:	4b6e      	ldr	r3, [pc, #440]	@ (8008c88 <MIC_Print+0x288>)
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	4b73      	ldr	r3, [pc, #460]	@ (8008ca0 <MIC_Print+0x2a0>)
 8008ad4:	6819      	ldr	r1, [r3, #0]
 8008ad6:	4b73      	ldr	r3, [pc, #460]	@ (8008ca4 <MIC_Print+0x2a4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	1c1a      	adds	r2, r3, #0
 8008adc:	f7fa ff2c 	bl	8003938 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008ae0:	210f      	movs	r1, #15
 8008ae2:	187b      	adds	r3, r7, r1
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	187b      	adds	r3, r7, r1
 8008ae8:	3201      	adds	r2, #1
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	4b6a      	ldr	r3, [pc, #424]	@ (8008c98 <MIC_Print+0x298>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	220f      	movs	r2, #15
 8008af2:	18ba      	adds	r2, r7, r2
 8008af4:	7812      	ldrb	r2, [r2, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d3b5      	bcc.n	8008a66 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008afa:	4b63      	ldr	r3, [pc, #396]	@ (8008c88 <MIC_Print+0x288>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	1c18      	adds	r0, r3, #0
 8008b00:	f7fa fcb0 	bl	8003464 <__aeabi_f2d>
 8008b04:	6038      	str	r0, [r7, #0]
 8008b06:	6079      	str	r1, [r7, #4]
 8008b08:	4b65      	ldr	r3, [pc, #404]	@ (8008ca0 <MIC_Print+0x2a0>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	1c18      	adds	r0, r3, #0
 8008b0e:	f7fa fca9 	bl	8003464 <__aeabi_f2d>
 8008b12:	0004      	movs	r4, r0
 8008b14:	000d      	movs	r5, r1
 8008b16:	4b63      	ldr	r3, [pc, #396]	@ (8008ca4 <MIC_Print+0x2a4>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	1c18      	adds	r0, r3, #0
 8008b1c:	f7fa fca2 	bl	8003464 <__aeabi_f2d>
 8008b20:	0002      	movs	r2, r0
 8008b22:	000b      	movs	r3, r1
 8008b24:	4960      	ldr	r1, [pc, #384]	@ (8008ca8 <MIC_Print+0x2a8>)
 8008b26:	9204      	str	r2, [sp, #16]
 8008b28:	9305      	str	r3, [sp, #20]
 8008b2a:	9402      	str	r4, [sp, #8]
 8008b2c:	9503      	str	r5, [sp, #12]
 8008b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8008cac <MIC_Print+0x2ac>)
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	0008      	movs	r0, r1
 8008b38:	f017 fa56 	bl	801ffe8 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008b3c:	4b53      	ldr	r3, [pc, #332]	@ (8008c8c <MIC_Print+0x28c>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b0a      	cmp	r3, #10
 8008b42:	d902      	bls.n	8008b4a <MIC_Print+0x14a>
    counter = 0;
 8008b44:	4b51      	ldr	r3, [pc, #324]	@ (8008c8c <MIC_Print+0x28c>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8008c88 <MIC_Print+0x288>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4958      	ldr	r1, [pc, #352]	@ (8008cb0 <MIC_Print+0x2b0>)
 8008b50:	1c18      	adds	r0, r3, #0
 8008b52:	f7f7 fd0b 	bl	800056c <__aeabi_fcmpge>
 8008b56:	1e03      	subs	r3, r0, #0
 8008b58:	d004      	beq.n	8008b64 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	2001      	movs	r0, #1
 8008b60:	f004 fb5c 	bl	800d21c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008b64:	4b48      	ldr	r3, [pc, #288]	@ (8008c88 <MIC_Print+0x288>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4952      	ldr	r1, [pc, #328]	@ (8008cb4 <MIC_Print+0x2b4>)
 8008b6a:	1c18      	adds	r0, r3, #0
 8008b6c:	f7f7 fcfe 	bl	800056c <__aeabi_fcmpge>
 8008b70:	1e03      	subs	r3, r0, #0
 8008b72:	d00c      	beq.n	8008b8e <MIC_Print+0x18e>
 8008b74:	4b44      	ldr	r3, [pc, #272]	@ (8008c88 <MIC_Print+0x288>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	494d      	ldr	r1, [pc, #308]	@ (8008cb0 <MIC_Print+0x2b0>)
 8008b7a:	1c18      	adds	r0, r3, #0
 8008b7c:	f7f7 fcd8 	bl	8000530 <__aeabi_fcmplt>
 8008b80:	1e03      	subs	r3, r0, #0
 8008b82:	d004      	beq.n	8008b8e <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 8008b84:	2200      	movs	r2, #0
 8008b86:	2100      	movs	r1, #0
 8008b88:	2001      	movs	r0, #1
 8008b8a:	f004 fb47 	bl	800d21c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c88 <MIC_Print+0x288>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4949      	ldr	r1, [pc, #292]	@ (8008cb8 <MIC_Print+0x2b8>)
 8008b94:	1c18      	adds	r0, r3, #0
 8008b96:	f7f7 fce9 	bl	800056c <__aeabi_fcmpge>
 8008b9a:	1e03      	subs	r3, r0, #0
 8008b9c:	d00c      	beq.n	8008bb8 <MIC_Print+0x1b8>
 8008b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c88 <MIC_Print+0x288>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4944      	ldr	r1, [pc, #272]	@ (8008cb4 <MIC_Print+0x2b4>)
 8008ba4:	1c18      	adds	r0, r3, #0
 8008ba6:	f7f7 fcc3 	bl	8000530 <__aeabi_fcmplt>
 8008baa:	1e03      	subs	r3, r0, #0
 8008bac:	d004      	beq.n	8008bb8 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	f004 fb32 	bl	800d21c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008bb8:	4b33      	ldr	r3, [pc, #204]	@ (8008c88 <MIC_Print+0x288>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	493f      	ldr	r1, [pc, #252]	@ (8008cbc <MIC_Print+0x2bc>)
 8008bbe:	1c18      	adds	r0, r3, #0
 8008bc0:	f7f7 fcd4 	bl	800056c <__aeabi_fcmpge>
 8008bc4:	1e03      	subs	r3, r0, #0
 8008bc6:	d00c      	beq.n	8008be2 <MIC_Print+0x1e2>
 8008bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8008c88 <MIC_Print+0x288>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	493a      	ldr	r1, [pc, #232]	@ (8008cb8 <MIC_Print+0x2b8>)
 8008bce:	1c18      	adds	r0, r3, #0
 8008bd0:	f7f7 fcae 	bl	8000530 <__aeabi_fcmplt>
 8008bd4:	1e03      	subs	r3, r0, #0
 8008bd6:	d004      	beq.n	8008be2 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2101      	movs	r1, #1
 8008bdc:	2000      	movs	r0, #0
 8008bde:	f004 fb1d 	bl	800d21c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008be2:	4b29      	ldr	r3, [pc, #164]	@ (8008c88 <MIC_Print+0x288>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4936      	ldr	r1, [pc, #216]	@ (8008cc0 <MIC_Print+0x2c0>)
 8008be8:	1c18      	adds	r0, r3, #0
 8008bea:	f7f7 fcbf 	bl	800056c <__aeabi_fcmpge>
 8008bee:	1e03      	subs	r3, r0, #0
 8008bf0:	d00c      	beq.n	8008c0c <MIC_Print+0x20c>
 8008bf2:	4b25      	ldr	r3, [pc, #148]	@ (8008c88 <MIC_Print+0x288>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4931      	ldr	r1, [pc, #196]	@ (8008cbc <MIC_Print+0x2bc>)
 8008bf8:	1c18      	adds	r0, r3, #0
 8008bfa:	f7f7 fc99 	bl	8000530 <__aeabi_fcmplt>
 8008bfe:	1e03      	subs	r3, r0, #0
 8008c00:	d004      	beq.n	8008c0c <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 8008c02:	2201      	movs	r2, #1
 8008c04:	2101      	movs	r1, #1
 8008c06:	2000      	movs	r0, #0
 8008c08:	f004 fb08 	bl	800d21c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8008c88 <MIC_Print+0x288>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	492c      	ldr	r1, [pc, #176]	@ (8008cc4 <MIC_Print+0x2c4>)
 8008c12:	1c18      	adds	r0, r3, #0
 8008c14:	f7f7 fcaa 	bl	800056c <__aeabi_fcmpge>
 8008c18:	1e03      	subs	r3, r0, #0
 8008c1a:	d00c      	beq.n	8008c36 <MIC_Print+0x236>
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8008c88 <MIC_Print+0x288>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4927      	ldr	r1, [pc, #156]	@ (8008cc0 <MIC_Print+0x2c0>)
 8008c22:	1c18      	adds	r0, r3, #0
 8008c24:	f7f7 fc84 	bl	8000530 <__aeabi_fcmplt>
 8008c28:	1e03      	subs	r3, r0, #0
 8008c2a:	d004      	beq.n	8008c36 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	2100      	movs	r1, #0
 8008c30:	2000      	movs	r0, #0
 8008c32:	f004 faf3 	bl	800d21c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008c36:	4b14      	ldr	r3, [pc, #80]	@ (8008c88 <MIC_Print+0x288>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4923      	ldr	r1, [pc, #140]	@ (8008cc8 <MIC_Print+0x2c8>)
 8008c3c:	1c18      	adds	r0, r3, #0
 8008c3e:	f7f7 fc95 	bl	800056c <__aeabi_fcmpge>
 8008c42:	1e03      	subs	r3, r0, #0
 8008c44:	d00c      	beq.n	8008c60 <MIC_Print+0x260>
 8008c46:	4b10      	ldr	r3, [pc, #64]	@ (8008c88 <MIC_Print+0x288>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	491e      	ldr	r1, [pc, #120]	@ (8008cc4 <MIC_Print+0x2c4>)
 8008c4c:	1c18      	adds	r0, r3, #0
 8008c4e:	f7f7 fc6f 	bl	8000530 <__aeabi_fcmplt>
 8008c52:	1e03      	subs	r3, r0, #0
 8008c54:	d004      	beq.n	8008c60 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 8008c56:	2201      	movs	r2, #1
 8008c58:	2100      	movs	r1, #0
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	f004 fade 	bl	800d21c <SetDBLED>
  }
  if(dBA < 35){//off
 8008c60:	4b09      	ldr	r3, [pc, #36]	@ (8008c88 <MIC_Print+0x288>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4918      	ldr	r1, [pc, #96]	@ (8008cc8 <MIC_Print+0x2c8>)
 8008c66:	1c18      	adds	r0, r3, #0
 8008c68:	f7f7 fc62 	bl	8000530 <__aeabi_fcmplt>
 8008c6c:	1e03      	subs	r3, r0, #0
 8008c6e:	d100      	bne.n	8008c72 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 8008c70:	e004      	b.n	8008c7c <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 8008c72:	2200      	movs	r2, #0
 8008c74:	2100      	movs	r1, #0
 8008c76:	2000      	movs	r0, #0
 8008c78:	f004 fad0 	bl	800d21c <SetDBLED>
}
 8008c7c:	46c0      	nop			@ (mov r8, r8)
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b004      	add	sp, #16
 8008c82:	bdb0      	pop	{r4, r5, r7, pc}
 8008c84:	2000101c 	.word	0x2000101c
 8008c88:	20000fe8 	.word	0x20000fe8
 8008c8c:	20001024 	.word	0x20001024
 8008c90:	20000fec 	.word	0x20000fec
 8008c94:	20001025 	.word	0x20001025
 8008c98:	2000008c 	.word	0x2000008c
 8008c9c:	20001018 	.word	0x20001018
 8008ca0:	20001020 	.word	0x20001020
 8008ca4:	20001014 	.word	0x20001014
 8008ca8:	080245c0 	.word	0x080245c0
 8008cac:	20000fdc 	.word	0x20000fdc
 8008cb0:	42b40000 	.word	0x42b40000
 8008cb4:	42a00000 	.word	0x42a00000
 8008cb8:	428c0000 	.word	0x428c0000
 8008cbc:	42700000 	.word	0x42700000
 8008cc0:	42480000 	.word	0x42480000
 8008cc4:	42200000 	.word	0x42200000
 8008cc8:	420c0000 	.word	0x420c0000

08008ccc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008cd2:	4b11      	ldr	r3, [pc, #68]	@ (8008d18 <MIC_TestMeasurementDone+0x4c>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	4a10      	ldr	r2, [pc, #64]	@ (8008d1c <MIC_TestMeasurementDone+0x50>)
 8008cda:	4911      	ldr	r1, [pc, #68]	@ (8008d20 <MIC_TestMeasurementDone+0x54>)
 8008cdc:	2002      	movs	r0, #2
 8008cde:	f005 fc9f 	bl	800e620 <CreateLine>
  if(DataReady) {
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <MIC_TestMeasurementDone+0x4c>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d010      	beq.n	8008d0e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008cec:	1dfb      	adds	r3, r7, #7
 8008cee:	4a0d      	ldr	r2, [pc, #52]	@ (8008d24 <MIC_TestMeasurementDone+0x58>)
 8008cf0:	7812      	ldrb	r2, [r2, #0]
 8008cf2:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8008d24 <MIC_TestMeasurementDone+0x58>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8008d28 <MIC_TestMeasurementDone+0x5c>)
 8008cfc:	4908      	ldr	r1, [pc, #32]	@ (8008d20 <MIC_TestMeasurementDone+0x54>)
 8008cfe:	2002      	movs	r0, #2
 8008d00:	f005 fc8e 	bl	800e620 <CreateLine>
    ResetMICIndicator();
 8008d04:	f004 fb78 	bl	800d3f8 <ResetMICIndicator>
    return Check;
 8008d08:	1dfb      	adds	r3, r7, #7
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	e000      	b.n	8008d10 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	0018      	movs	r0, r3
 8008d12:	46bd      	mov	sp, r7
 8008d14:	b002      	add	sp, #8
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	2000116d 	.word	0x2000116d
 8008d1c:	08024608 	.word	0x08024608
 8008d20:	08024634 	.word	0x08024634
 8008d24:	2000116e 	.word	0x2000116e
 8008d28:	08024638 	.word	0x08024638

08008d2c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008d32:	4b78      	ldr	r3, [pc, #480]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d100      	bne.n	8008d3c <Mic_Upkeep+0x10>
 8008d3a:	e0b8      	b.n	8008eae <Mic_Upkeep+0x182>
 8008d3c:	dd00      	ble.n	8008d40 <Mic_Upkeep+0x14>
 8008d3e:	e0d3      	b.n	8008ee8 <Mic_Upkeep+0x1bc>
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d037      	beq.n	8008db4 <Mic_Upkeep+0x88>
 8008d44:	dd00      	ble.n	8008d48 <Mic_Upkeep+0x1c>
 8008d46:	e0cf      	b.n	8008ee8 <Mic_Upkeep+0x1bc>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <Mic_Upkeep+0x26>
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d014      	beq.n	8008d7a <Mic_Upkeep+0x4e>
 8008d50:	e0ca      	b.n	8008ee8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008d52:	2001      	movs	r0, #1
 8008d54:	f003 fb60 	bl	800c418 <enableMicrophone>
 8008d58:	0003      	movs	r3, r0
 8008d5a:	001a      	movs	r2, r3
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	4053      	eors	r3, r2
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d005      	beq.n	8008d72 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008d66:	4a6c      	ldr	r2, [pc, #432]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008d68:	4b6c      	ldr	r3, [pc, #432]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008d6a:	217f      	movs	r1, #127	@ 0x7f
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	f005 fd0f 	bl	800e790 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008d72:	4b68      	ldr	r3, [pc, #416]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008d74:	2201      	movs	r2, #1
 8008d76:	701a      	strb	r2, [r3, #0]
    break;
 8008d78:	e0c5      	b.n	8008f06 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008d7a:	f003 fb29 	bl	800c3d0 <micSettlingComplete>
 8008d7e:	1e03      	subs	r3, r0, #0
 8008d80:	d105      	bne.n	8008d8e <Mic_Upkeep+0x62>
 8008d82:	4b67      	ldr	r3, [pc, #412]	@ (8008f20 <Mic_Upkeep+0x1f4>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d100      	bne.n	8008d8e <Mic_Upkeep+0x62>
 8008d8c:	e0b6      	b.n	8008efc <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008d8e:	f003 fbad 	bl	800c4ec <startSPLcalculation>
 8008d92:	0003      	movs	r3, r0
 8008d94:	001a      	movs	r2, r3
 8008d96:	2301      	movs	r3, #1
 8008d98:	4053      	eors	r3, r2
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008da0:	4a5d      	ldr	r2, [pc, #372]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008da2:	4b5e      	ldr	r3, [pc, #376]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008da4:	2188      	movs	r1, #136	@ 0x88
 8008da6:	0018      	movs	r0, r3
 8008da8:	f005 fcf2 	bl	800e790 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008dac:	4b59      	ldr	r3, [pc, #356]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008dae:	2202      	movs	r2, #2
 8008db0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008db2:	e0a3      	b.n	8008efc <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008db4:	4b5b      	ldr	r3, [pc, #364]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	2101      	movs	r1, #1
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f003 f9ea 	bl	800c194 <getSoundData>
 8008dc0:	1e03      	subs	r3, r0, #0
 8008dc2:	d100      	bne.n	8008dc6 <Mic_Upkeep+0x9a>
 8008dc4:	e09c      	b.n	8008f00 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008dc6:	f003 fae3 	bl	800c390 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008dca:	4b56      	ldr	r3, [pc, #344]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	001a      	movs	r2, r3
 8008dd0:	4b54      	ldr	r3, [pc, #336]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	4954      	ldr	r1, [pc, #336]	@ (8008f28 <Mic_Upkeep+0x1fc>)
 8008dd6:	0038      	movs	r0, r7
 8008dd8:	f017 f976 	bl	80200c8 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008ddc:	4b51      	ldr	r3, [pc, #324]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008dde:	89db      	ldrh	r3, [r3, #14]
 8008de0:	001a      	movs	r2, r3
 8008de2:	4b50      	ldr	r3, [pc, #320]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008de4:	7c1b      	ldrb	r3, [r3, #16]
 8008de6:	4951      	ldr	r1, [pc, #324]	@ (8008f2c <Mic_Upkeep+0x200>)
 8008de8:	4851      	ldr	r0, [pc, #324]	@ (8008f30 <Mic_Upkeep+0x204>)
 8008dea:	f017 f96d 	bl	80200c8 <siprintf>
      dBValue = atof(dBbuffer);
 8008dee:	003b      	movs	r3, r7
 8008df0:	0018      	movs	r0, r3
 8008df2:	f015 fd19 	bl	801e828 <atof>
 8008df6:	0002      	movs	r2, r0
 8008df8:	000b      	movs	r3, r1
 8008dfa:	0010      	movs	r0, r2
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	f7fa fb79 	bl	80034f4 <__aeabi_d2f>
 8008e02:	1c02      	adds	r2, r0, #0
 8008e04:	4b4b      	ldr	r3, [pc, #300]	@ (8008f34 <Mic_Upkeep+0x208>)
 8008e06:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008e08:	4b4a      	ldr	r3, [pc, #296]	@ (8008f34 <Mic_Upkeep+0x208>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	494a      	ldr	r1, [pc, #296]	@ (8008f38 <Mic_Upkeep+0x20c>)
 8008e0e:	1c18      	adds	r0, r3, #0
 8008e10:	f7f8 f8c6 	bl	8000fa0 <__aeabi_fmul>
 8008e14:	1c03      	adds	r3, r0, #0
 8008e16:	1c18      	adds	r0, r3, #0
 8008e18:	f7fa fb24 	bl	8003464 <__aeabi_f2d>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4b47      	ldr	r3, [pc, #284]	@ (8008f3c <Mic_Upkeep+0x210>)
 8008e20:	f7f8 fc64 	bl	80016ec <__aeabi_dadd>
 8008e24:	0002      	movs	r2, r0
 8008e26:	000b      	movs	r3, r1
 8008e28:	0010      	movs	r0, r2
 8008e2a:	0019      	movs	r1, r3
 8008e2c:	f7fa fa8c 	bl	8003348 <__aeabi_d2iz>
 8008e30:	0003      	movs	r3, r0
 8008e32:	0018      	movs	r0, r3
 8008e34:	f7fa fac4 	bl	80033c0 <__aeabi_i2d>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4b41      	ldr	r3, [pc, #260]	@ (8008f40 <Mic_Upkeep+0x214>)
 8008e3c:	f7f8 ffba 	bl	8001db4 <__aeabi_ddiv>
 8008e40:	0002      	movs	r2, r0
 8008e42:	000b      	movs	r3, r1
 8008e44:	0010      	movs	r0, r2
 8008e46:	0019      	movs	r1, r3
 8008e48:	f7fa fb54 	bl	80034f4 <__aeabi_d2f>
 8008e4c:	1c02      	adds	r2, r0, #0
 8008e4e:	4b39      	ldr	r3, [pc, #228]	@ (8008f34 <Mic_Upkeep+0x208>)
 8008e50:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008e52:	f7ff fdd5 	bl	8008a00 <MIC_Print>
      if (!startSPLcalculation()) {
 8008e56:	f003 fb49 	bl	800c4ec <startSPLcalculation>
 8008e5a:	0003      	movs	r3, r0
 8008e5c:	001a      	movs	r2, r3
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4053      	eors	r3, r2
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e68:	4a2b      	ldr	r2, [pc, #172]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008e6c:	2198      	movs	r1, #152	@ 0x98
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f005 fc8e 	bl	800e790 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008e74:	2000      	movs	r0, #0
 8008e76:	f003 facf 	bl	800c418 <enableMicrophone>
 8008e7a:	0003      	movs	r3, r0
 8008e7c:	001a      	movs	r2, r3
 8008e7e:	2301      	movs	r3, #1
 8008e80:	4053      	eors	r3, r2
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d005      	beq.n	8008e94 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e88:	4a23      	ldr	r2, [pc, #140]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008e8a:	4b24      	ldr	r3, [pc, #144]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008e8c:	219b      	movs	r1, #155	@ 0x9b
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f005 fc7e 	bl	800e790 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008e94:	f006 f804 	bl	800eea0 <HAL_GetTick>
 8008e98:	0003      	movs	r3, r0
 8008e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8008f44 <Mic_Upkeep+0x218>)
 8008e9c:	189a      	adds	r2, r3, r2
 8008e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f48 <Mic_Upkeep+0x21c>)
 8008ea0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008ea8:	f004 faa6 	bl	800d3f8 <ResetMICIndicator>
    }
    break;
 8008eac:	e028      	b.n	8008f00 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008eae:	4b26      	ldr	r3, [pc, #152]	@ (8008f48 <Mic_Upkeep+0x21c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f005 fb5e 	bl	800e574 <TimestampIsReached>
 8008eb8:	1e03      	subs	r3, r0, #0
 8008eba:	d023      	beq.n	8008f04 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008ebc:	2001      	movs	r0, #1
 8008ebe:	f003 faab 	bl	800c418 <enableMicrophone>
 8008ec2:	0003      	movs	r3, r0
 8008ec4:	001a      	movs	r2, r3
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4053      	eors	r3, r2
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008ed0:	4a11      	ldr	r2, [pc, #68]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008ed2:	4b12      	ldr	r3, [pc, #72]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008ed4:	21a6      	movs	r1, #166	@ 0xa6
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f005 fc5a 	bl	800e790 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008edc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008ede:	2201      	movs	r2, #1
 8008ee0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008ee2:	f004 fa47 	bl	800d374 <SetMICIndicator>
    }
    break;
 8008ee6:	e00d      	b.n	8008f04 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008ee8:	4a18      	ldr	r2, [pc, #96]	@ (8008f4c <Mic_Upkeep+0x220>)
 8008eea:	4b19      	ldr	r3, [pc, #100]	@ (8008f50 <Mic_Upkeep+0x224>)
 8008eec:	0019      	movs	r1, r3
 8008eee:	2003      	movs	r0, #3
 8008ef0:	f005 fb96 	bl	800e620 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008ef4:	4b07      	ldr	r3, [pc, #28]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
    break;
 8008efa:	e004      	b.n	8008f06 <Mic_Upkeep+0x1da>
    break;
 8008efc:	46c0      	nop			@ (mov r8, r8)
 8008efe:	e002      	b.n	8008f06 <Mic_Upkeep+0x1da>
    break;
 8008f00:	46c0      	nop			@ (mov r8, r8)
 8008f02:	e000      	b.n	8008f06 <Mic_Upkeep+0x1da>
    break;
 8008f04:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008f06:	4b03      	ldr	r3, [pc, #12]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
}
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	b002      	add	sp, #8
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	46c0      	nop			@ (mov r8, r8)
 8008f14:	2000103e 	.word	0x2000103e
 8008f18:	08024650 	.word	0x08024650
 8008f1c:	080256b0 	.word	0x080256b0
 8008f20:	2000116d 	.word	0x2000116d
 8008f24:	2000102c 	.word	0x2000102c
 8008f28:	0802466c 	.word	0x0802466c
 8008f2c:	08024674 	.word	0x08024674
 8008f30:	20000fdc 	.word	0x20000fdc
 8008f34:	2000101c 	.word	0x2000101c
 8008f38:	42c80000 	.word	0x42c80000
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	40590000 	.word	0x40590000
 8008f44:	000002f3 	.word	0x000002f3
 8008f48:	20001028 	.word	0x20001028
 8008f4c:	0802467c 	.word	0x0802467c
 8008f50:	0802469c 	.word	0x0802469c

08008f54 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008f5a:	1d3b      	adds	r3, r7, #4
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	2314      	movs	r3, #20
 8008f60:	001a      	movs	r2, r3
 8008f62:	2100      	movs	r1, #0
 8008f64:	f017 f9f4 	bl	8020350 <memset>
  RTC_DateTypeDef sDate = {0};
 8008f68:	003b      	movs	r3, r7
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f70:	4a2e      	ldr	r2, [pc, #184]	@ (800902c <MX_RTC_Init+0xd8>)
 8008f72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008f74:	4b2c      	ldr	r3, [pc, #176]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f7c:	227f      	movs	r2, #127	@ 0x7f
 8008f7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008f80:	4b29      	ldr	r3, [pc, #164]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f82:	22ff      	movs	r2, #255	@ 0xff
 8008f84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008f86:	4b28      	ldr	r3, [pc, #160]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008f8c:	4b26      	ldr	r3, [pc, #152]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008f92:	4b25      	ldr	r3, [pc, #148]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008f98:	4b23      	ldr	r3, [pc, #140]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008f9e:	4b22      	ldr	r3, [pc, #136]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f00d f801 	bl	8015fa8 <HAL_RTC_Init>
 8008fa6:	1e03      	subs	r3, r0, #0
 8008fa8:	d001      	beq.n	8008fae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008faa:	f7ff f9c3 	bl	8008334 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008fae:	1d3b      	adds	r3, r7, #4
 8008fb0:	220d      	movs	r2, #13
 8008fb2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008fb4:	1d3b      	adds	r3, r7, #4
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008fba:	1d3b      	adds	r3, r7, #4
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008fc0:	1d3b      	adds	r3, r7, #4
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008fc6:	1d3b      	adds	r3, r7, #4
 8008fc8:	2200      	movs	r2, #0
 8008fca:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008fcc:	1d39      	adds	r1, r7, #4
 8008fce:	4b16      	ldr	r3, [pc, #88]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f00d f884 	bl	80160e0 <HAL_RTC_SetTime>
 8008fd8:	1e03      	subs	r3, r0, #0
 8008fda:	d001      	beq.n	8008fe0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008fdc:	f7ff f9aa 	bl	8008334 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008fe0:	003b      	movs	r3, r7
 8008fe2:	2206      	movs	r2, #6
 8008fe4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008fe6:	003b      	movs	r3, r7
 8008fe8:	2211      	movs	r2, #17
 8008fea:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008fec:	003b      	movs	r3, r7
 8008fee:	2217      	movs	r2, #23
 8008ff0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008ff2:	003b      	movs	r3, r7
 8008ff4:	2218      	movs	r2, #24
 8008ff6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008ff8:	0039      	movs	r1, r7
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	0018      	movs	r0, r3
 8009000:	f00d f976 	bl	80162f0 <HAL_RTC_SetDate>
 8009004:	1e03      	subs	r3, r0, #0
 8009006:	d001      	beq.n	800900c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8009008:	f7ff f994 	bl	8008334 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800900c:	4b06      	ldr	r3, [pc, #24]	@ (8009028 <MX_RTC_Init+0xd4>)
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	0018      	movs	r0, r3
 8009014:	f00d fb26 	bl	8016664 <HAL_RTCEx_SetWakeUpTimer_IT>
 8009018:	1e03      	subs	r3, r0, #0
 800901a:	d001      	beq.n	8009020 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800901c:	f7ff f98a 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009020:	46c0      	nop			@ (mov r8, r8)
 8009022:	46bd      	mov	sp, r7
 8009024:	b006      	add	sp, #24
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20001040 	.word	0x20001040
 800902c:	40002800 	.word	0x40002800

08009030 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a0a      	ldr	r2, [pc, #40]	@ (8009068 <HAL_RTC_MspInit+0x38>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d10e      	bne.n	8009060 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009042:	4b0a      	ldr	r3, [pc, #40]	@ (800906c <HAL_RTC_MspInit+0x3c>)
 8009044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009046:	4b09      	ldr	r3, [pc, #36]	@ (800906c <HAL_RTC_MspInit+0x3c>)
 8009048:	2180      	movs	r1, #128	@ 0x80
 800904a:	02c9      	lsls	r1, r1, #11
 800904c:	430a      	orrs	r2, r1
 800904e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8009050:	2200      	movs	r2, #0
 8009052:	2100      	movs	r1, #0
 8009054:	2002      	movs	r0, #2
 8009056:	f006 fbc7 	bl	800f7e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800905a:	2002      	movs	r0, #2
 800905c:	f006 fbd9 	bl	800f812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009060:	46c0      	nop			@ (mov r8, r8)
 8009062:	46bd      	mov	sp, r7
 8009064:	b002      	add	sp, #8
 8009066:	bd80      	pop	{r7, pc}
 8009068:	40002800 	.word	0x40002800
 800906c:	40021000 	.word	0x40021000

08009070 <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoxi;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8009074:	4b02      	ldr	r3, [pc, #8]	@ (8009080 <sen5x_Get_sen5x_enable_state+0x10>)
 8009076:	781b      	ldrb	r3, [r3, #0]
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	46c0      	nop			@ (mov r8, r8)
 8009080:	20001068 	.word	0x20001068

08009084 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800908c:	f005 ff08 	bl	800eea0 <HAL_GetTick>
 8009090:	0002      	movs	r2, r0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	18d2      	adds	r2, r2, r3
 8009096:	4b03      	ldr	r3, [pc, #12]	@ (80090a4 <setsen5xReadTimer+0x20>)
 8009098:	601a      	str	r2, [r3, #0]
}
 800909a:	46c0      	nop			@ (mov r8, r8)
 800909c:	46bd      	mov	sp, r7
 800909e:	b002      	add	sp, #8
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	46c0      	nop			@ (mov r8, r8)
 80090a4:	20001088 	.word	0x20001088

080090a8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	0002      	movs	r2, r0
 80090b0:	1dfb      	adds	r3, r7, #7
 80090b2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 80090b4:	4b03      	ldr	r3, [pc, #12]	@ (80090c4 <setsen5xSamplecounter+0x1c>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	701a      	strb	r2, [r3, #0]
}
 80090ba:	46c0      	nop			@ (mov r8, r8)
 80090bc:	46bd      	mov	sp, r7
 80090be:	b002      	add	sp, #8
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	46c0      	nop			@ (mov r8, r8)
 80090c4:	20001074 	.word	0x20001074

080090c8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 80090d0:	f7ff f9ac 	bl	800842c <IsPMSensorEnabled>
 80090d4:	1e03      	subs	r3, r0, #0
 80090d6:	d02c      	beq.n	8009132 <sen5x_enable+0x6a>
    sen5x_Enable = !sen5x_Enable;
 80090d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009150 <sen5x_enable+0x88>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	1e5a      	subs	r2, r3, #1
 80090de:	4193      	sbcs	r3, r2
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2201      	movs	r2, #1
 80090e4:	4053      	eors	r3, r2
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	1c1a      	adds	r2, r3, #0
 80090ea:	2301      	movs	r3, #1
 80090ec:	4013      	ands	r3, r2
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	4b17      	ldr	r3, [pc, #92]	@ (8009150 <sen5x_enable+0x88>)
 80090f2:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 80090f4:	4b16      	ldr	r3, [pc, #88]	@ (8009150 <sen5x_enable+0x88>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <sen5x_enable+0x3c>
      setsen5xReadTimer(0);
 80090fc:	2000      	movs	r0, #0
 80090fe:	f7ff ffc1 	bl	8009084 <setsen5xReadTimer>
 8009102:	e009      	b.n	8009118 <sen5x_enable+0x50>
    }
    else {
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 8009104:	f005 fecc 	bl	800eea0 <HAL_GetTick>
 8009108:	0002      	movs	r2, r0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2164      	movs	r1, #100	@ 0x64
 800910e:	434b      	muls	r3, r1
 8009110:	18d3      	adds	r3, r2, r3
 8009112:	0018      	movs	r0, r3
 8009114:	f7ff ffb6 	bl	8009084 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is : %s", sen5x_Enable?"enabled":"disabled");
 8009118:	4b0d      	ldr	r3, [pc, #52]	@ (8009150 <sen5x_enable+0x88>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <sen5x_enable+0x5c>
 8009120:	4b0c      	ldr	r3, [pc, #48]	@ (8009154 <sen5x_enable+0x8c>)
 8009122:	e000      	b.n	8009126 <sen5x_enable+0x5e>
 8009124:	4b0c      	ldr	r3, [pc, #48]	@ (8009158 <sen5x_enable+0x90>)
 8009126:	4a0d      	ldr	r2, [pc, #52]	@ (800915c <sen5x_enable+0x94>)
 8009128:	490d      	ldr	r1, [pc, #52]	@ (8009160 <sen5x_enable+0x98>)
 800912a:	2002      	movs	r0, #2
 800912c:	f005 fa78 	bl	800e620 <CreateLine>
 8009130:	e005      	b.n	800913e <sen5x_enable+0x76>
  }
  else {
    Info("sen5x measurement is disabled");
 8009132:	4a0c      	ldr	r2, [pc, #48]	@ (8009164 <sen5x_enable+0x9c>)
 8009134:	4b0a      	ldr	r3, [pc, #40]	@ (8009160 <sen5x_enable+0x98>)
 8009136:	0019      	movs	r1, r3
 8009138:	2002      	movs	r0, #2
 800913a:	f005 fa71 	bl	800e620 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800913e:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <sen5x_enable+0xa0>)
 8009140:	2201      	movs	r2, #1
 8009142:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8009144:	4b02      	ldr	r3, [pc, #8]	@ (8009150 <sen5x_enable+0x88>)
 8009146:	781b      	ldrb	r3, [r3, #0]
}
 8009148:	0018      	movs	r0, r3
 800914a:	46bd      	mov	sp, r7
 800914c:	b002      	add	sp, #8
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20001068 	.word	0x20001068
 8009154:	080246a0 	.word	0x080246a0
 8009158:	080246a8 	.word	0x080246a8
 800915c:	080246b4 	.word	0x080246b4
 8009160:	080246d4 	.word	0x080246d4
 8009164:	080246d8 	.word	0x080246d8
 8009168:	2000008d 	.word	0x2000008d

0800916c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8009170:	2380      	movs	r3, #128	@ 0x80
 8009172:	015b      	lsls	r3, r3, #5
 8009174:	4809      	ldr	r0, [pc, #36]	@ (800919c <sen5x_Power_On+0x30>)
 8009176:	2201      	movs	r2, #1
 8009178:	0019      	movs	r1, r3
 800917a:	f007 f922 	bl	80103c2 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800917e:	4a08      	ldr	r2, [pc, #32]	@ (80091a0 <sen5x_Power_On+0x34>)
 8009180:	4b08      	ldr	r3, [pc, #32]	@ (80091a4 <sen5x_Power_On+0x38>)
 8009182:	0019      	movs	r1, r3
 8009184:	2003      	movs	r0, #3
 8009186:	f005 fa4b 	bl	800e620 <CreateLine>
  HAL_Delay(100);
 800918a:	2064      	movs	r0, #100	@ 0x64
 800918c:	f005 fe92 	bl	800eeb4 <HAL_Delay>
    Info("Display SSD1306 is detected on I2C2");
    SSD1306detected = true;
  }
  displayCreateStyle();
#endif
  sen5x_On = true;
 8009190:	4b05      	ldr	r3, [pc, #20]	@ (80091a8 <sen5x_Power_On+0x3c>)
 8009192:	2201      	movs	r2, #1
 8009194:	701a      	strb	r2, [r3, #0]
}
 8009196:	46c0      	nop			@ (mov r8, r8)
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	50000800 	.word	0x50000800
 80091a0:	080246f8 	.word	0x080246f8
 80091a4:	08024714 	.word	0x08024714
 80091a8:	20001066 	.word	0x20001066

080091ac <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 80091b0:	4b18      	ldr	r3, [pc, #96]	@ (8009214 <sen5x_Power_Off+0x68>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d006      	beq.n	80091c6 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 80091b8:	4a17      	ldr	r2, [pc, #92]	@ (8009218 <sen5x_Power_Off+0x6c>)
 80091ba:	4b18      	ldr	r3, [pc, #96]	@ (800921c <sen5x_Power_Off+0x70>)
 80091bc:	0019      	movs	r1, r3
 80091be:	2003      	movs	r0, #3
 80091c0:	f005 fa2e 	bl	800e620 <CreateLine>
      Debug("executing sen5x_Power_Off");
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
      sen5x_On = false;
    }
  }
}
 80091c4:	e022      	b.n	800920c <sen5x_Power_Off+0x60>
    if (SSD1306detected && (usbPluggedIn || userToggle)) {
 80091c6:	4b16      	ldr	r3, [pc, #88]	@ (8009220 <sen5x_Power_Off+0x74>)
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00e      	beq.n	80091ec <sen5x_Power_Off+0x40>
 80091ce:	4b15      	ldr	r3, [pc, #84]	@ (8009224 <sen5x_Power_Off+0x78>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d103      	bne.n	80091de <sen5x_Power_Off+0x32>
 80091d6:	4b14      	ldr	r3, [pc, #80]	@ (8009228 <sen5x_Power_Off+0x7c>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d006      	beq.n	80091ec <sen5x_Power_Off+0x40>
      Info("Display detected and USB power or userToggle enabled");
 80091de:	4a13      	ldr	r2, [pc, #76]	@ (800922c <sen5x_Power_Off+0x80>)
 80091e0:	4b13      	ldr	r3, [pc, #76]	@ (8009230 <sen5x_Power_Off+0x84>)
 80091e2:	0019      	movs	r1, r3
 80091e4:	2002      	movs	r0, #2
 80091e6:	f005 fa1b 	bl	800e620 <CreateLine>
}
 80091ea:	e00f      	b.n	800920c <sen5x_Power_Off+0x60>
      Debug("executing sen5x_Power_Off");
 80091ec:	4a11      	ldr	r2, [pc, #68]	@ (8009234 <sen5x_Power_Off+0x88>)
 80091ee:	4b0b      	ldr	r3, [pc, #44]	@ (800921c <sen5x_Power_Off+0x70>)
 80091f0:	0019      	movs	r1, r3
 80091f2:	2003      	movs	r0, #3
 80091f4:	f005 fa14 	bl	800e620 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80091f8:	2380      	movs	r3, #128	@ 0x80
 80091fa:	015b      	lsls	r3, r3, #5
 80091fc:	480e      	ldr	r0, [pc, #56]	@ (8009238 <sen5x_Power_Off+0x8c>)
 80091fe:	2200      	movs	r2, #0
 8009200:	0019      	movs	r1, r3
 8009202:	f007 f8de 	bl	80103c2 <HAL_GPIO_WritePin>
      sen5x_On = false;
 8009206:	4b0d      	ldr	r3, [pc, #52]	@ (800923c <sen5x_Power_Off+0x90>)
 8009208:	2200      	movs	r2, #0
 800920a:	701a      	strb	r2, [r3, #0]
}
 800920c:	46c0      	nop			@ (mov r8, r8)
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	46c0      	nop			@ (mov r8, r8)
 8009214:	20001067 	.word	0x20001067
 8009218:	08024718 	.word	0x08024718
 800921c:	08024714 	.word	0x08024714
 8009220:	20001064 	.word	0x20001064
 8009224:	20002009 	.word	0x20002009
 8009228:	2000200a 	.word	0x2000200a
 800922c:	08024748 	.word	0x08024748
 8009230:	080246d4 	.word	0x080246d4
 8009234:	08024780 	.word	0x08024780
 8009238:	50000800 	.word	0x50000800
 800923c:	20001066 	.word	0x20001066

08009240 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8009244:	4b02      	ldr	r3, [pc, #8]	@ (8009250 <reset_fanCleaningDone+0x10>)
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
}
 800924a:	46c0      	nop			@ (mov r8, r8)
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20001065 	.word	0x20001065

08009254 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8009254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009256:	b093      	sub	sp, #76	@ 0x4c
 8009258:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800925a:	2436      	movs	r4, #54	@ 0x36
 800925c:	193b      	adds	r3, r7, r4
 800925e:	2200      	movs	r2, #0
 8009260:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8009262:	2335      	movs	r3, #53	@ 0x35
 8009264:	18fb      	adds	r3, r7, r3
 8009266:	2220      	movs	r2, #32
 8009268:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800926a:	2334      	movs	r3, #52	@ 0x34
 800926c:	18fb      	adds	r3, r7, r3
 800926e:	2220      	movs	r2, #32
 8009270:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8009272:	f7ff ff7b 	bl	800916c <sen5x_Power_On>
  error = sen5x_device_reset();
 8009276:	0025      	movs	r5, r4
 8009278:	193c      	adds	r4, r7, r4
 800927a:	f001 f975 	bl	800a568 <sen5x_device_reset>
 800927e:	0003      	movs	r3, r0
 8009280:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009282:	002c      	movs	r4, r5
 8009284:	193b      	adds	r3, r7, r4
 8009286:	2200      	movs	r2, #0
 8009288:	5e9b      	ldrsh	r3, [r3, r2]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00b      	beq.n	80092a6 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800928e:	193b      	adds	r3, r7, r4
 8009290:	2200      	movs	r2, #0
 8009292:	5e9b      	ldrsh	r3, [r3, r2]
 8009294:	4a6d      	ldr	r2, [pc, #436]	@ (800944c <probe_sen5x+0x1f8>)
 8009296:	496e      	ldr	r1, [pc, #440]	@ (8009450 <probe_sen5x+0x1fc>)
 8009298:	2001      	movs	r0, #1
 800929a:	f005 f9c1 	bl	800e620 <CreateLine>
      return error;
 800929e:	193b      	adds	r3, r7, r4
 80092a0:	2200      	movs	r2, #0
 80092a2:	5e9b      	ldrsh	r3, [r3, r2]
 80092a4:	e0cd      	b.n	8009442 <probe_sen5x+0x1ee>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 80092a6:	2536      	movs	r5, #54	@ 0x36
 80092a8:	197c      	adds	r4, r7, r5
 80092aa:	2335      	movs	r3, #53	@ 0x35
 80092ac:	18fb      	adds	r3, r7, r3
 80092ae:	781a      	ldrb	r2, [r3, #0]
 80092b0:	230c      	movs	r3, #12
 80092b2:	18fb      	adds	r3, r7, r3
 80092b4:	0011      	movs	r1, r2
 80092b6:	0018      	movs	r0, r3
 80092b8:	f001 f842 	bl	800a340 <sen5x_get_serial_number>
 80092bc:	0003      	movs	r3, r0
 80092be:	8023      	strh	r3, [r4, #0]
  if (error) {
 80092c0:	197b      	adds	r3, r7, r5
 80092c2:	2200      	movs	r2, #0
 80092c4:	5e9b      	ldrsh	r3, [r3, r2]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 80092ca:	197b      	adds	r3, r7, r5
 80092cc:	2200      	movs	r2, #0
 80092ce:	5e9a      	ldrsh	r2, [r3, r2]
 80092d0:	4b60      	ldr	r3, [pc, #384]	@ (8009454 <probe_sen5x+0x200>)
 80092d2:	0011      	movs	r1, r2
 80092d4:	0018      	movs	r0, r3
 80092d6:	f016 fe87 	bl	801ffe8 <iprintf>
      return error;
 80092da:	197b      	adds	r3, r7, r5
 80092dc:	2200      	movs	r2, #0
 80092de:	5e9b      	ldrsh	r3, [r3, r2]
 80092e0:	e0af      	b.n	8009442 <probe_sen5x+0x1ee>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 80092e2:	230c      	movs	r3, #12
 80092e4:	18fa      	adds	r2, r7, r3
 80092e6:	4b5c      	ldr	r3, [pc, #368]	@ (8009458 <probe_sen5x+0x204>)
 80092e8:	0011      	movs	r1, r2
 80092ea:	0018      	movs	r0, r3
 80092ec:	f016 fe7c 	bl	801ffe8 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 80092f0:	2536      	movs	r5, #54	@ 0x36
 80092f2:	197c      	adds	r4, r7, r5
 80092f4:	2334      	movs	r3, #52	@ 0x34
 80092f6:	18fb      	adds	r3, r7, r3
 80092f8:	781a      	ldrb	r2, [r3, #0]
 80092fa:	4b58      	ldr	r3, [pc, #352]	@ (800945c <probe_sen5x+0x208>)
 80092fc:	0011      	movs	r1, r2
 80092fe:	0018      	movs	r0, r3
 8009300:	f000 ffc8 	bl	800a294 <sen5x_get_product_name>
 8009304:	0003      	movs	r3, r0
 8009306:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009308:	197b      	adds	r3, r7, r5
 800930a:	2200      	movs	r2, #0
 800930c:	5e9b      	ldrsh	r3, [r3, r2]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8009312:	197b      	adds	r3, r7, r5
 8009314:	2200      	movs	r2, #0
 8009316:	5e9a      	ldrsh	r2, [r3, r2]
 8009318:	4b51      	ldr	r3, [pc, #324]	@ (8009460 <probe_sen5x+0x20c>)
 800931a:	0011      	movs	r1, r2
 800931c:	0018      	movs	r0, r3
 800931e:	f016 fe63 	bl	801ffe8 <iprintf>
      return error;
 8009322:	197b      	adds	r3, r7, r5
 8009324:	2200      	movs	r2, #0
 8009326:	5e9b      	ldrsh	r3, [r3, r2]
 8009328:	e08b      	b.n	8009442 <probe_sen5x+0x1ee>
  } else {
      printf("Product name: %s\r\n", product_name);
 800932a:	4a4c      	ldr	r2, [pc, #304]	@ (800945c <probe_sen5x+0x208>)
 800932c:	4b4d      	ldr	r3, [pc, #308]	@ (8009464 <probe_sen5x+0x210>)
 800932e:	0011      	movs	r1, r2
 8009330:	0018      	movs	r0, r3
 8009332:	f016 fe59 	bl	801ffe8 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8009336:	2636      	movs	r6, #54	@ 0x36
 8009338:	19bc      	adds	r4, r7, r6
 800933a:	2308      	movs	r3, #8
 800933c:	18fd      	adds	r5, r7, r3
 800933e:	2309      	movs	r3, #9
 8009340:	18fa      	adds	r2, r7, r3
 8009342:	230a      	movs	r3, #10
 8009344:	18f9      	adds	r1, r7, r3
 8009346:	230b      	movs	r3, #11
 8009348:	18f8      	adds	r0, r7, r3
 800934a:	1d7b      	adds	r3, r7, #5
 800934c:	9302      	str	r3, [sp, #8]
 800934e:	1dbb      	adds	r3, r7, #6
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	1dfb      	adds	r3, r7, #7
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	002b      	movs	r3, r5
 8009358:	f001 f848 	bl	800a3ec <sen5x_get_version>
 800935c:	0003      	movs	r3, r0
 800935e:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8009360:	19bb      	adds	r3, r7, r6
 8009362:	2200      	movs	r2, #0
 8009364:	5e9b      	ldrsh	r3, [r3, r2]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800936a:	19bb      	adds	r3, r7, r6
 800936c:	2200      	movs	r2, #0
 800936e:	5e9a      	ldrsh	r2, [r3, r2]
 8009370:	4b3d      	ldr	r3, [pc, #244]	@ (8009468 <probe_sen5x+0x214>)
 8009372:	0011      	movs	r1, r2
 8009374:	0018      	movs	r0, r3
 8009376:	f016 fe37 	bl	801ffe8 <iprintf>
      return error;
 800937a:	19bb      	adds	r3, r7, r6
 800937c:	2200      	movs	r2, #0
 800937e:	5e9b      	ldrsh	r3, [r3, r2]
 8009380:	e05f      	b.n	8009442 <probe_sen5x+0x1ee>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8009382:	230b      	movs	r3, #11
 8009384:	18fb      	adds	r3, r7, r3
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	0019      	movs	r1, r3
 800938a:	230a      	movs	r3, #10
 800938c:	18fb      	adds	r3, r7, r3
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	001a      	movs	r2, r3
 8009392:	2308      	movs	r3, #8
 8009394:	18fb      	adds	r3, r7, r3
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	001c      	movs	r4, r3
 800939a:	1dfb      	adds	r3, r7, #7
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	4833      	ldr	r0, [pc, #204]	@ (800946c <probe_sen5x+0x218>)
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	0023      	movs	r3, r4
 80093a4:	f016 fe20 	bl	801ffe8 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 80093a8:	2300      	movs	r3, #0
 80093aa:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 80093ac:	262e      	movs	r6, #46	@ 0x2e
 80093ae:	19bb      	adds	r3, r7, r6
 80093b0:	2200      	movs	r2, #0
 80093b2:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 80093b4:	232c      	movs	r3, #44	@ 0x2c
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	2200      	movs	r2, #0
 80093ba:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 80093bc:	492c      	ldr	r1, [pc, #176]	@ (8009470 <probe_sen5x+0x21c>)
 80093be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093c0:	f7f7 fdee 	bl	8000fa0 <__aeabi_fmul>
 80093c4:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 80093c6:	1c18      	adds	r0, r3, #0
 80093c8:	f7f8 f8e2 	bl	8001590 <__aeabi_f2iz>
 80093cc:	0003      	movs	r3, r0
 80093ce:	b218      	sxth	r0, r3
 80093d0:	2536      	movs	r5, #54	@ 0x36
 80093d2:	197c      	adds	r4, r7, r5
 80093d4:	232c      	movs	r3, #44	@ 0x2c
 80093d6:	18fb      	adds	r3, r7, r3
 80093d8:	881a      	ldrh	r2, [r3, #0]
 80093da:	19bb      	adds	r3, r7, r6
 80093dc:	2100      	movs	r1, #0
 80093de:	5e5b      	ldrsh	r3, [r3, r1]
 80093e0:	0019      	movs	r1, r3
 80093e2:	f000 fef3 	bl	800a1cc <sen5x_set_temperature_offset_parameters>
 80093e6:	0003      	movs	r3, r0
 80093e8:	8023      	strh	r3, [r4, #0]
  if (error) {
 80093ea:	197b      	adds	r3, r7, r5
 80093ec:	2200      	movs	r2, #0
 80093ee:	5e9b      	ldrsh	r3, [r3, r2]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 80093f4:	197b      	adds	r3, r7, r5
 80093f6:	2200      	movs	r2, #0
 80093f8:	5e9b      	ldrsh	r3, [r3, r2]
 80093fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009474 <probe_sen5x+0x220>)
 80093fc:	4914      	ldr	r1, [pc, #80]	@ (8009450 <probe_sen5x+0x1fc>)
 80093fe:	2001      	movs	r0, #1
 8009400:	f005 f90e 	bl	800e620 <CreateLine>
      return error;
 8009404:	197b      	adds	r3, r7, r5
 8009406:	2200      	movs	r2, #0
 8009408:	5e9b      	ldrsh	r3, [r3, r2]
 800940a:	e01a      	b.n	8009442 <probe_sen5x+0x1ee>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800940c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800940e:	f7fa f829 	bl	8003464 <__aeabi_f2d>
 8009412:	0002      	movs	r2, r0
 8009414:	000b      	movs	r3, r1
 8009416:	4818      	ldr	r0, [pc, #96]	@ (8009478 <probe_sen5x+0x224>)
 8009418:	4918      	ldr	r1, [pc, #96]	@ (800947c <probe_sen5x+0x228>)
 800941a:	9200      	str	r2, [sp, #0]
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	0002      	movs	r2, r0
 8009420:	2002      	movs	r0, #2
 8009422:	f005 f8fd 	bl	800e620 <CreateLine>
  }
  sen5x_Power_Off();
 8009426:	f7ff fec1 	bl	80091ac <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800942a:	f005 fd39 	bl	800eea0 <HAL_GetTick>
 800942e:	0003      	movs	r3, r0
 8009430:	22fa      	movs	r2, #250	@ 0xfa
 8009432:	00d2      	lsls	r2, r2, #3
 8009434:	189a      	adds	r2, r3, r2
 8009436:	4b12      	ldr	r3, [pc, #72]	@ (8009480 <probe_sen5x+0x22c>)
 8009438:	601a      	str	r2, [r3, #0]
  return error;
 800943a:	2336      	movs	r3, #54	@ 0x36
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	2200      	movs	r2, #0
 8009440:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009442:	0018      	movs	r0, r3
 8009444:	46bd      	mov	sp, r7
 8009446:	b00f      	add	sp, #60	@ 0x3c
 8009448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800944a:	46c0      	nop			@ (mov r8, r8)
 800944c:	0802479c 	.word	0x0802479c
 8009450:	080247c8 	.word	0x080247c8
 8009454:	080247cc 	.word	0x080247cc
 8009458:	080247fc 	.word	0x080247fc
 800945c:	2000106c 	.word	0x2000106c
 8009460:	08024810 	.word	0x08024810
 8009464:	08024840 	.word	0x08024840
 8009468:	08024854 	.word	0x08024854
 800946c:	08024880 	.word	0x08024880
 8009470:	43480000 	.word	0x43480000
 8009474:	080248a4 	.word	0x080248a4
 8009478:	080248e4 	.word	0x080248e4
 800947c:	080246d4 	.word	0x080246d4
 8009480:	20001088 	.word	0x20001088

08009484 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8009484:	b590      	push	{r4, r7, lr}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800948a:	1dbb      	adds	r3, r7, #6
 800948c:	2200      	movs	r2, #0
 800948e:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 8009490:	4b1b      	ldr	r3, [pc, #108]	@ (8009500 <sen5x_lightup_measurement+0x7c>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 8009498:	4a1a      	ldr	r2, [pc, #104]	@ (8009504 <sen5x_lightup_measurement+0x80>)
 800949a:	4b1b      	ldr	r3, [pc, #108]	@ (8009508 <sen5x_lightup_measurement+0x84>)
 800949c:	0019      	movs	r1, r3
 800949e:	2002      	movs	r0, #2
 80094a0:	f005 f8be 	bl	800e620 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80094a4:	1dbc      	adds	r4, r7, #6
 80094a6:	f000 fd1d 	bl	8009ee4 <sen5x_start_measurement_without_pm>
 80094aa:	0003      	movs	r3, r0
 80094ac:	8023      	strh	r3, [r4, #0]
 80094ae:	e00a      	b.n	80094c6 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 80094b0:	4a16      	ldr	r2, [pc, #88]	@ (800950c <sen5x_lightup_measurement+0x88>)
 80094b2:	4b15      	ldr	r3, [pc, #84]	@ (8009508 <sen5x_lightup_measurement+0x84>)
 80094b4:	0019      	movs	r1, r3
 80094b6:	2002      	movs	r0, #2
 80094b8:	f005 f8b2 	bl	800e620 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 80094bc:	1dbc      	adds	r4, r7, #6
 80094be:	f000 fce3 	bl	8009e88 <sen5x_start_measurement>
 80094c2:	0003      	movs	r3, r0
 80094c4:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 80094c6:	1dbb      	adds	r3, r7, #6
 80094c8:	2200      	movs	r2, #0
 80094ca:	5e9b      	ldrsh	r3, [r3, r2]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d008      	beq.n	80094e2 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 80094d0:	1dbb      	adds	r3, r7, #6
 80094d2:	2200      	movs	r2, #0
 80094d4:	5e9b      	ldrsh	r3, [r3, r2]
 80094d6:	4a0e      	ldr	r2, [pc, #56]	@ (8009510 <sen5x_lightup_measurement+0x8c>)
 80094d8:	490e      	ldr	r1, [pc, #56]	@ (8009514 <sen5x_lightup_measurement+0x90>)
 80094da:	2001      	movs	r0, #1
 80094dc:	f005 f8a0 	bl	800e620 <CreateLine>
 80094e0:	e007      	b.n	80094f2 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 80094e2:	f7fc fff7 	bl	80064d4 <showTime>
    Info("sen5x_start_measurement executed");
 80094e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009518 <sen5x_lightup_measurement+0x94>)
 80094e8:	4b07      	ldr	r3, [pc, #28]	@ (8009508 <sen5x_lightup_measurement+0x84>)
 80094ea:	0019      	movs	r1, r3
 80094ec:	2002      	movs	r0, #2
 80094ee:	f005 f897 	bl	800e620 <CreateLine>
  }
  return error;
 80094f2:	1dbb      	adds	r3, r7, #6
 80094f4:	2200      	movs	r2, #0
 80094f6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80094f8:	0018      	movs	r0, r3
 80094fa:	46bd      	mov	sp, r7
 80094fc:	b003      	add	sp, #12
 80094fe:	bd90      	pop	{r4, r7, pc}
 8009500:	20001067 	.word	0x20001067
 8009504:	0802491c 	.word	0x0802491c
 8009508:	080246d4 	.word	0x080246d4
 800950c:	08024948 	.word	0x08024948
 8009510:	08024968 	.word	0x08024968
 8009514:	080247c8 	.word	0x080247c8
 8009518:	08024998 	.word	0x08024998

0800951c <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800951c:	b590      	push	{r4, r7, lr}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
  int16_t error = 0;
 8009522:	1dbb      	adds	r3, r7, #6
 8009524:	2200      	movs	r2, #0
 8009526:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009528:	4b21      	ldr	r3, [pc, #132]	@ (80095b0 <sen5x_extinguish_measurement+0x94>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01e      	beq.n	800956e <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 8009530:	4a20      	ldr	r2, [pc, #128]	@ (80095b4 <sen5x_extinguish_measurement+0x98>)
 8009532:	4b21      	ldr	r3, [pc, #132]	@ (80095b8 <sen5x_extinguish_measurement+0x9c>)
 8009534:	0019      	movs	r1, r3
 8009536:	2002      	movs	r0, #2
 8009538:	f005 f872 	bl	800e620 <CreateLine>
    Info("PM measurement is disabled");
 800953c:	4a1f      	ldr	r2, [pc, #124]	@ (80095bc <sen5x_extinguish_measurement+0xa0>)
 800953e:	4b1e      	ldr	r3, [pc, #120]	@ (80095b8 <sen5x_extinguish_measurement+0x9c>)
 8009540:	0019      	movs	r1, r3
 8009542:	2002      	movs	r0, #2
 8009544:	f005 f86c 	bl	800e620 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009548:	1dbc      	adds	r4, r7, #6
 800954a:	f000 fccb 	bl	8009ee4 <sen5x_start_measurement_without_pm>
 800954e:	0003      	movs	r3, r0
 8009550:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009552:	1dbb      	adds	r3, r7, #6
 8009554:	2200      	movs	r2, #0
 8009556:	5e9b      	ldrsh	r3, [r3, r2]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d022      	beq.n	80095a2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800955c:	1dbb      	adds	r3, r7, #6
 800955e:	2200      	movs	r2, #0
 8009560:	5e9b      	ldrsh	r3, [r3, r2]
 8009562:	4a17      	ldr	r2, [pc, #92]	@ (80095c0 <sen5x_extinguish_measurement+0xa4>)
 8009564:	4917      	ldr	r1, [pc, #92]	@ (80095c4 <sen5x_extinguish_measurement+0xa8>)
 8009566:	2001      	movs	r0, #1
 8009568:	f005 f85a 	bl	800e620 <CreateLine>
 800956c:	e019      	b.n	80095a2 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800956e:	1dbc      	adds	r4, r7, #6
 8009570:	f000 fce6 	bl	8009f40 <sen5x_stop_measurement>
 8009574:	0003      	movs	r3, r0
 8009576:	8023      	strh	r3, [r4, #0]
    showTime();
 8009578:	f7fc ffac 	bl	80064d4 <showTime>
    Info("sen5x_stop_measurement executed");
 800957c:	4a12      	ldr	r2, [pc, #72]	@ (80095c8 <sen5x_extinguish_measurement+0xac>)
 800957e:	4b0e      	ldr	r3, [pc, #56]	@ (80095b8 <sen5x_extinguish_measurement+0x9c>)
 8009580:	0019      	movs	r1, r3
 8009582:	2002      	movs	r0, #2
 8009584:	f005 f84c 	bl	800e620 <CreateLine>
    if (error) {
 8009588:	1dbb      	adds	r3, r7, #6
 800958a:	2200      	movs	r2, #0
 800958c:	5e9b      	ldrsh	r3, [r3, r2]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 8009592:	1dbb      	adds	r3, r7, #6
 8009594:	2200      	movs	r2, #0
 8009596:	5e9b      	ldrsh	r3, [r3, r2]
 8009598:	4a0c      	ldr	r2, [pc, #48]	@ (80095cc <sen5x_extinguish_measurement+0xb0>)
 800959a:	490a      	ldr	r1, [pc, #40]	@ (80095c4 <sen5x_extinguish_measurement+0xa8>)
 800959c:	2001      	movs	r0, #1
 800959e:	f005 f83f 	bl	800e620 <CreateLine>
    }
  }
  return error;
 80095a2:	1dbb      	adds	r3, r7, #6
 80095a4:	2200      	movs	r2, #0
 80095a6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80095a8:	0018      	movs	r0, r3
 80095aa:	46bd      	mov	sp, r7
 80095ac:	b003      	add	sp, #12
 80095ae:	bd90      	pop	{r4, r7, pc}
 80095b0:	20001067 	.word	0x20001067
 80095b4:	080249bc 	.word	0x080249bc
 80095b8:	080246d4 	.word	0x080246d4
 80095bc:	080249f4 	.word	0x080249f4
 80095c0:	08024a10 	.word	0x08024a10
 80095c4:	080247c8 	.word	0x080247c8
 80095c8:	08024a50 	.word	0x08024a50
 80095cc:	08024a70 	.word	0x08024a70

080095d0 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 80095d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d2:	b08d      	sub	sp, #52	@ 0x34
 80095d4:	af04      	add	r7, sp, #16
 80095d6:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 80095d8:	261e      	movs	r6, #30
 80095da:	19bb      	adds	r3, r7, r6
 80095dc:	2200      	movs	r2, #0
 80095de:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 80095e0:	19bc      	adds	r4, r7, r6
 80095e2:	2316      	movs	r3, #22
 80095e4:	18fd      	adds	r5, r7, r3
 80095e6:	2318      	movs	r3, #24
 80095e8:	18fa      	adds	r2, r7, r3
 80095ea:	231a      	movs	r3, #26
 80095ec:	18f9      	adds	r1, r7, r3
 80095ee:	231c      	movs	r3, #28
 80095f0:	18f8      	adds	r0, r7, r3
 80095f2:	230e      	movs	r3, #14
 80095f4:	18fb      	adds	r3, r7, r3
 80095f6:	9303      	str	r3, [sp, #12]
 80095f8:	2310      	movs	r3, #16
 80095fa:	18fb      	adds	r3, r7, r3
 80095fc:	9302      	str	r3, [sp, #8]
 80095fe:	2312      	movs	r3, #18
 8009600:	18fb      	adds	r3, r7, r3
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	2314      	movs	r3, #20
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	002b      	movs	r3, r5
 800960c:	f000 fd1a 	bl	800a044 <sen5x_read_measured_values>
 8009610:	0003      	movs	r3, r0
 8009612:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009614:	19bb      	adds	r3, r7, r6
 8009616:	2200      	movs	r2, #0
 8009618:	5e9b      	ldrsh	r3, [r3, r2]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <sen5x_read_measurement+0x56>
    return error;
 800961e:	19bb      	adds	r3, r7, r6
 8009620:	2200      	movs	r2, #0
 8009622:	5e9b      	ldrsh	r3, [r3, r2]
 8009624:	e02c      	b.n	8009680 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8009626:	231c      	movs	r3, #28
 8009628:	18fb      	adds	r3, r7, r3
 800962a:	881a      	ldrh	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009630:	231a      	movs	r3, #26
 8009632:	18fb      	adds	r3, r7, r3
 8009634:	881a      	ldrh	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800963a:	2318      	movs	r3, #24
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	881a      	ldrh	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8009644:	2316      	movs	r3, #22
 8009646:	18fb      	adds	r3, r7, r3
 8009648:	881a      	ldrh	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800964e:	2314      	movs	r3, #20
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	2200      	movs	r2, #0
 8009654:	5e9a      	ldrsh	r2, [r3, r2]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800965a:	2312      	movs	r3, #18
 800965c:	18fb      	adds	r3, r7, r3
 800965e:	2200      	movs	r2, #0
 8009660:	5e9a      	ldrsh	r2, [r3, r2]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8009666:	2310      	movs	r3, #16
 8009668:	18fb      	adds	r3, r7, r3
 800966a:	2200      	movs	r2, #0
 800966c:	5e9a      	ldrsh	r2, [r3, r2]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 8009672:	230e      	movs	r3, #14
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	2200      	movs	r2, #0
 8009678:	5e9a      	ldrsh	r2, [r3, r2]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	81da      	strh	r2, [r3, #14]
  return 0;
 800967e:	2300      	movs	r3, #0
}
 8009680:	0018      	movs	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	b009      	add	sp, #36	@ 0x24
 8009686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009688 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800968c:	4b69      	ldr	r3, [pc, #420]	@ (8009834 <sen5x_printvalues+0x1ac>)
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	4a69      	ldr	r2, [pc, #420]	@ (8009838 <sen5x_printvalues+0x1b0>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d013      	beq.n	80096be <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 8009696:	4b67      	ldr	r3, [pc, #412]	@ (8009834 <sen5x_printvalues+0x1ac>)
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	0018      	movs	r0, r3
 800969c:	f7f7 ff98 	bl	80015d0 <__aeabi_i2f>
 80096a0:	1c03      	adds	r3, r0, #0
 80096a2:	4966      	ldr	r1, [pc, #408]	@ (800983c <sen5x_printvalues+0x1b4>)
 80096a4:	1c18      	adds	r0, r3, #0
 80096a6:	f7f7 fa95 	bl	8000bd4 <__aeabi_fdiv>
 80096aa:	1c03      	adds	r3, r0, #0
 80096ac:	1c18      	adds	r0, r3, #0
 80096ae:	f7f9 fed9 	bl	8003464 <__aeabi_f2d>
 80096b2:	0002      	movs	r2, r0
 80096b4:	000b      	movs	r3, r1
 80096b6:	4962      	ldr	r1, [pc, #392]	@ (8009840 <sen5x_printvalues+0x1b8>)
 80096b8:	0008      	movs	r0, r1
 80096ba:	f016 fc95 	bl	801ffe8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 80096be:	4b5d      	ldr	r3, [pc, #372]	@ (8009834 <sen5x_printvalues+0x1ac>)
 80096c0:	885b      	ldrh	r3, [r3, #2]
 80096c2:	4a5d      	ldr	r2, [pc, #372]	@ (8009838 <sen5x_printvalues+0x1b0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d013      	beq.n	80096f0 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 80096c8:	4b5a      	ldr	r3, [pc, #360]	@ (8009834 <sen5x_printvalues+0x1ac>)
 80096ca:	885b      	ldrh	r3, [r3, #2]
 80096cc:	0018      	movs	r0, r3
 80096ce:	f7f7 ff7f 	bl	80015d0 <__aeabi_i2f>
 80096d2:	1c03      	adds	r3, r0, #0
 80096d4:	4959      	ldr	r1, [pc, #356]	@ (800983c <sen5x_printvalues+0x1b4>)
 80096d6:	1c18      	adds	r0, r3, #0
 80096d8:	f7f7 fa7c 	bl	8000bd4 <__aeabi_fdiv>
 80096dc:	1c03      	adds	r3, r0, #0
 80096de:	1c18      	adds	r0, r3, #0
 80096e0:	f7f9 fec0 	bl	8003464 <__aeabi_f2d>
 80096e4:	0002      	movs	r2, r0
 80096e6:	000b      	movs	r3, r1
 80096e8:	4956      	ldr	r1, [pc, #344]	@ (8009844 <sen5x_printvalues+0x1bc>)
 80096ea:	0008      	movs	r0, r1
 80096ec:	f016 fc7c 	bl	801ffe8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 80096f0:	4b50      	ldr	r3, [pc, #320]	@ (8009834 <sen5x_printvalues+0x1ac>)
 80096f2:	889b      	ldrh	r3, [r3, #4]
 80096f4:	4a50      	ldr	r2, [pc, #320]	@ (8009838 <sen5x_printvalues+0x1b0>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d013      	beq.n	8009722 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 80096fa:	4b4e      	ldr	r3, [pc, #312]	@ (8009834 <sen5x_printvalues+0x1ac>)
 80096fc:	889b      	ldrh	r3, [r3, #4]
 80096fe:	0018      	movs	r0, r3
 8009700:	f7f7 ff66 	bl	80015d0 <__aeabi_i2f>
 8009704:	1c03      	adds	r3, r0, #0
 8009706:	494d      	ldr	r1, [pc, #308]	@ (800983c <sen5x_printvalues+0x1b4>)
 8009708:	1c18      	adds	r0, r3, #0
 800970a:	f7f7 fa63 	bl	8000bd4 <__aeabi_fdiv>
 800970e:	1c03      	adds	r3, r0, #0
 8009710:	1c18      	adds	r0, r3, #0
 8009712:	f7f9 fea7 	bl	8003464 <__aeabi_f2d>
 8009716:	0002      	movs	r2, r0
 8009718:	000b      	movs	r3, r1
 800971a:	494b      	ldr	r1, [pc, #300]	@ (8009848 <sen5x_printvalues+0x1c0>)
 800971c:	0008      	movs	r0, r1
 800971e:	f016 fc63 	bl	801ffe8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009722:	4b44      	ldr	r3, [pc, #272]	@ (8009834 <sen5x_printvalues+0x1ac>)
 8009724:	88db      	ldrh	r3, [r3, #6]
 8009726:	4a44      	ldr	r2, [pc, #272]	@ (8009838 <sen5x_printvalues+0x1b0>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d013      	beq.n	8009754 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800972c:	4b41      	ldr	r3, [pc, #260]	@ (8009834 <sen5x_printvalues+0x1ac>)
 800972e:	88db      	ldrh	r3, [r3, #6]
 8009730:	0018      	movs	r0, r3
 8009732:	f7f7 ff4d 	bl	80015d0 <__aeabi_i2f>
 8009736:	1c03      	adds	r3, r0, #0
 8009738:	4940      	ldr	r1, [pc, #256]	@ (800983c <sen5x_printvalues+0x1b4>)
 800973a:	1c18      	adds	r0, r3, #0
 800973c:	f7f7 fa4a 	bl	8000bd4 <__aeabi_fdiv>
 8009740:	1c03      	adds	r3, r0, #0
 8009742:	1c18      	adds	r0, r3, #0
 8009744:	f7f9 fe8e 	bl	8003464 <__aeabi_f2d>
 8009748:	0002      	movs	r2, r0
 800974a:	000b      	movs	r3, r1
 800974c:	493f      	ldr	r1, [pc, #252]	@ (800984c <sen5x_printvalues+0x1c4>)
 800974e:	0008      	movs	r0, r1
 8009750:	f016 fc4a 	bl	801ffe8 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 8009754:	4b37      	ldr	r3, [pc, #220]	@ (8009834 <sen5x_printvalues+0x1ac>)
 8009756:	2208      	movs	r2, #8
 8009758:	5e9b      	ldrsh	r3, [r3, r2]
 800975a:	4a3d      	ldr	r2, [pc, #244]	@ (8009850 <sen5x_printvalues+0x1c8>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d014      	beq.n	800978a <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009760:	4b34      	ldr	r3, [pc, #208]	@ (8009834 <sen5x_printvalues+0x1ac>)
 8009762:	2208      	movs	r2, #8
 8009764:	5e9b      	ldrsh	r3, [r3, r2]
 8009766:	0018      	movs	r0, r3
 8009768:	f7f7 ff32 	bl	80015d0 <__aeabi_i2f>
 800976c:	1c03      	adds	r3, r0, #0
 800976e:	4939      	ldr	r1, [pc, #228]	@ (8009854 <sen5x_printvalues+0x1cc>)
 8009770:	1c18      	adds	r0, r3, #0
 8009772:	f7f7 fa2f 	bl	8000bd4 <__aeabi_fdiv>
 8009776:	1c03      	adds	r3, r0, #0
 8009778:	1c18      	adds	r0, r3, #0
 800977a:	f7f9 fe73 	bl	8003464 <__aeabi_f2d>
 800977e:	0002      	movs	r2, r0
 8009780:	000b      	movs	r3, r1
 8009782:	4935      	ldr	r1, [pc, #212]	@ (8009858 <sen5x_printvalues+0x1d0>)
 8009784:	0008      	movs	r0, r1
 8009786:	f016 fc2f 	bl	801ffe8 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800978a:	4b2a      	ldr	r3, [pc, #168]	@ (8009834 <sen5x_printvalues+0x1ac>)
 800978c:	220a      	movs	r2, #10
 800978e:	5e9b      	ldrsh	r3, [r3, r2]
 8009790:	4a2f      	ldr	r2, [pc, #188]	@ (8009850 <sen5x_printvalues+0x1c8>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d014      	beq.n	80097c0 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8009796:	4b27      	ldr	r3, [pc, #156]	@ (8009834 <sen5x_printvalues+0x1ac>)
 8009798:	220a      	movs	r2, #10
 800979a:	5e9b      	ldrsh	r3, [r3, r2]
 800979c:	0018      	movs	r0, r3
 800979e:	f7f7 ff17 	bl	80015d0 <__aeabi_i2f>
 80097a2:	1c03      	adds	r3, r0, #0
 80097a4:	492d      	ldr	r1, [pc, #180]	@ (800985c <sen5x_printvalues+0x1d4>)
 80097a6:	1c18      	adds	r0, r3, #0
 80097a8:	f7f7 fa14 	bl	8000bd4 <__aeabi_fdiv>
 80097ac:	1c03      	adds	r3, r0, #0
 80097ae:	1c18      	adds	r0, r3, #0
 80097b0:	f7f9 fe58 	bl	8003464 <__aeabi_f2d>
 80097b4:	0002      	movs	r2, r0
 80097b6:	000b      	movs	r3, r1
 80097b8:	4929      	ldr	r1, [pc, #164]	@ (8009860 <sen5x_printvalues+0x1d8>)
 80097ba:	0008      	movs	r0, r1
 80097bc:	f016 fc14 	bl	801ffe8 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 80097c0:	4b1c      	ldr	r3, [pc, #112]	@ (8009834 <sen5x_printvalues+0x1ac>)
 80097c2:	220c      	movs	r2, #12
 80097c4:	5e9b      	ldrsh	r3, [r3, r2]
 80097c6:	4a22      	ldr	r2, [pc, #136]	@ (8009850 <sen5x_printvalues+0x1c8>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d014      	beq.n	80097f6 <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 80097cc:	4b19      	ldr	r3, [pc, #100]	@ (8009834 <sen5x_printvalues+0x1ac>)
 80097ce:	220c      	movs	r2, #12
 80097d0:	5e9b      	ldrsh	r3, [r3, r2]
 80097d2:	0018      	movs	r0, r3
 80097d4:	f7f7 fefc 	bl	80015d0 <__aeabi_i2f>
 80097d8:	1c03      	adds	r3, r0, #0
 80097da:	4918      	ldr	r1, [pc, #96]	@ (800983c <sen5x_printvalues+0x1b4>)
 80097dc:	1c18      	adds	r0, r3, #0
 80097de:	f7f7 f9f9 	bl	8000bd4 <__aeabi_fdiv>
 80097e2:	1c03      	adds	r3, r0, #0
 80097e4:	1c18      	adds	r0, r3, #0
 80097e6:	f7f9 fe3d 	bl	8003464 <__aeabi_f2d>
 80097ea:	0002      	movs	r2, r0
 80097ec:	000b      	movs	r3, r1
 80097ee:	491d      	ldr	r1, [pc, #116]	@ (8009864 <sen5x_printvalues+0x1dc>)
 80097f0:	0008      	movs	r0, r1
 80097f2:	f016 fbf9 	bl	801ffe8 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 80097f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009834 <sen5x_printvalues+0x1ac>)
 80097f8:	220e      	movs	r2, #14
 80097fa:	5e9b      	ldrsh	r3, [r3, r2]
 80097fc:	4a14      	ldr	r2, [pc, #80]	@ (8009850 <sen5x_printvalues+0x1c8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d014      	beq.n	800982c <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8009802:	4b0c      	ldr	r3, [pc, #48]	@ (8009834 <sen5x_printvalues+0x1ac>)
 8009804:	220e      	movs	r2, #14
 8009806:	5e9b      	ldrsh	r3, [r3, r2]
 8009808:	0018      	movs	r0, r3
 800980a:	f7f7 fee1 	bl	80015d0 <__aeabi_i2f>
 800980e:	1c03      	adds	r3, r0, #0
 8009810:	490a      	ldr	r1, [pc, #40]	@ (800983c <sen5x_printvalues+0x1b4>)
 8009812:	1c18      	adds	r0, r3, #0
 8009814:	f7f7 f9de 	bl	8000bd4 <__aeabi_fdiv>
 8009818:	1c03      	adds	r3, r0, #0
 800981a:	1c18      	adds	r0, r3, #0
 800981c:	f7f9 fe22 	bl	8003464 <__aeabi_f2d>
 8009820:	0002      	movs	r2, r0
 8009822:	000b      	movs	r3, r1
 8009824:	4910      	ldr	r1, [pc, #64]	@ (8009868 <sen5x_printvalues+0x1e0>)
 8009826:	0008      	movs	r0, r1
 8009828:	f016 fbde 	bl	801ffe8 <iprintf>
  }
}
 800982c:	46c0      	nop			@ (mov r8, r8)
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	46c0      	nop			@ (mov r8, r8)
 8009834:	2000108c 	.word	0x2000108c
 8009838:	0000ffff 	.word	0x0000ffff
 800983c:	41200000 	.word	0x41200000
 8009840:	08024aa0 	.word	0x08024aa0
 8009844:	08024acc 	.word	0x08024acc
 8009848:	08024af8 	.word	0x08024af8
 800984c:	08024b24 	.word	0x08024b24
 8009850:	00007fff 	.word	0x00007fff
 8009854:	42c80000 	.word	0x42c80000
 8009858:	08024b50 	.word	0x08024b50
 800985c:	43480000 	.word	0x43480000
 8009860:	08024b74 	.word	0x08024b74
 8009864:	08024b9c 	.word	0x08024b9c
 8009868:	08024bb4 	.word	0x08024bb4

0800986c <sen5xResetMax>:

void sen5xResetMax() {
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  pm2p5max = 0;
 8009870:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <sen5xResetMax+0x24>)
 8009872:	2200      	movs	r2, #0
 8009874:	801a      	strh	r2, [r3, #0]
  pm10p0max = 0;
 8009876:	4b07      	ldr	r3, [pc, #28]	@ (8009894 <sen5xResetMax+0x28>)
 8009878:	2200      	movs	r2, #0
 800987a:	801a      	strh	r2, [r3, #0]
  s5xvocimax = 0;
 800987c:	4b06      	ldr	r3, [pc, #24]	@ (8009898 <sen5xResetMax+0x2c>)
 800987e:	2200      	movs	r2, #0
 8009880:	801a      	strh	r2, [r3, #0]
  s5xnoximax = 0;
 8009882:	4b06      	ldr	r3, [pc, #24]	@ (800989c <sen5xResetMax+0x30>)
 8009884:	2200      	movs	r2, #0
 8009886:	801a      	strh	r2, [r3, #0]
}
 8009888:	46c0      	nop			@ (mov r8, r8)
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	46c0      	nop			@ (mov r8, r8)
 8009890:	20001076 	.word	0x20001076
 8009894:	20001078 	.word	0x20001078
 8009898:	2000107a 	.word	0x2000107a
 800989c:	2000107c 	.word	0x2000107c

080098a0 <sen5xStoreMax>:

void sen5xStoreMax() {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
  bool updateflag = false;
 80098a6:	1dfb      	adds	r3, r7, #7
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
  if ((sen5x_data.mass_concentration_pm2p5 != 0xFFFF) && (sen5x_data.mass_concentration_pm2p5 > pm2p5max)) {
 80098ac:	4b2a      	ldr	r3, [pc, #168]	@ (8009958 <sen5xStoreMax+0xb8>)
 80098ae:	885b      	ldrh	r3, [r3, #2]
 80098b0:	4a2a      	ldr	r2, [pc, #168]	@ (800995c <sen5xStoreMax+0xbc>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00c      	beq.n	80098d0 <sen5xStoreMax+0x30>
 80098b6:	4b28      	ldr	r3, [pc, #160]	@ (8009958 <sen5xStoreMax+0xb8>)
 80098b8:	885a      	ldrh	r2, [r3, #2]
 80098ba:	4b29      	ldr	r3, [pc, #164]	@ (8009960 <sen5xStoreMax+0xc0>)
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d906      	bls.n	80098d0 <sen5xStoreMax+0x30>
    pm2p5max = sen5x_data.mass_concentration_pm2p5;
 80098c2:	4b25      	ldr	r3, [pc, #148]	@ (8009958 <sen5xStoreMax+0xb8>)
 80098c4:	885a      	ldrh	r2, [r3, #2]
 80098c6:	4b26      	ldr	r3, [pc, #152]	@ (8009960 <sen5xStoreMax+0xc0>)
 80098c8:	801a      	strh	r2, [r3, #0]
    updateflag = true;
 80098ca:	1dfb      	adds	r3, r7, #7
 80098cc:	2201      	movs	r2, #1
 80098ce:	701a      	strb	r2, [r3, #0]
  }
  if ((sen5x_data.mass_concentration_pm10p0 != 0xFFFF) && (sen5x_data.mass_concentration_pm10p0 > pm10p0max)) {
 80098d0:	4b21      	ldr	r3, [pc, #132]	@ (8009958 <sen5xStoreMax+0xb8>)
 80098d2:	88db      	ldrh	r3, [r3, #6]
 80098d4:	4a21      	ldr	r2, [pc, #132]	@ (800995c <sen5xStoreMax+0xbc>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00c      	beq.n	80098f4 <sen5xStoreMax+0x54>
 80098da:	4b1f      	ldr	r3, [pc, #124]	@ (8009958 <sen5xStoreMax+0xb8>)
 80098dc:	88da      	ldrh	r2, [r3, #6]
 80098de:	4b21      	ldr	r3, [pc, #132]	@ (8009964 <sen5xStoreMax+0xc4>)
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d906      	bls.n	80098f4 <sen5xStoreMax+0x54>
    pm10p0max = sen5x_data.mass_concentration_pm10p0;
 80098e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009958 <sen5xStoreMax+0xb8>)
 80098e8:	88da      	ldrh	r2, [r3, #6]
 80098ea:	4b1e      	ldr	r3, [pc, #120]	@ (8009964 <sen5xStoreMax+0xc4>)
 80098ec:	801a      	strh	r2, [r3, #0]
    updateflag = true;
 80098ee:	1dfb      	adds	r3, r7, #7
 80098f0:	2201      	movs	r2, #1
 80098f2:	701a      	strb	r2, [r3, #0]
  }
  if ((sen5x_data.voc_index != 0x7fff) && (sen5x_data.voc_index > s5xvocimax)) {
 80098f4:	4b18      	ldr	r3, [pc, #96]	@ (8009958 <sen5xStoreMax+0xb8>)
 80098f6:	220c      	movs	r2, #12
 80098f8:	5e9b      	ldrsh	r3, [r3, r2]
 80098fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009968 <sen5xStoreMax+0xc8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d010      	beq.n	8009922 <sen5xStoreMax+0x82>
 8009900:	4b15      	ldr	r3, [pc, #84]	@ (8009958 <sen5xStoreMax+0xb8>)
 8009902:	220c      	movs	r2, #12
 8009904:	5e9b      	ldrsh	r3, [r3, r2]
 8009906:	001a      	movs	r2, r3
 8009908:	4b18      	ldr	r3, [pc, #96]	@ (800996c <sen5xStoreMax+0xcc>)
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	429a      	cmp	r2, r3
 800990e:	dd08      	ble.n	8009922 <sen5xStoreMax+0x82>
    s5xvocimax = sen5x_data.voc_index;
 8009910:	4b11      	ldr	r3, [pc, #68]	@ (8009958 <sen5xStoreMax+0xb8>)
 8009912:	220c      	movs	r2, #12
 8009914:	5e9b      	ldrsh	r3, [r3, r2]
 8009916:	b29a      	uxth	r2, r3
 8009918:	4b14      	ldr	r3, [pc, #80]	@ (800996c <sen5xStoreMax+0xcc>)
 800991a:	801a      	strh	r2, [r3, #0]
    updateflag = true;
 800991c:	1dfb      	adds	r3, r7, #7
 800991e:	2201      	movs	r2, #1
 8009920:	701a      	strb	r2, [r3, #0]
  }
  if ((sen5x_data.nox_index != 0x7fff) && (sen5x_data.nox_index > s5xnoximax)) {
 8009922:	4b0d      	ldr	r3, [pc, #52]	@ (8009958 <sen5xStoreMax+0xb8>)
 8009924:	220e      	movs	r2, #14
 8009926:	5e9b      	ldrsh	r3, [r3, r2]
 8009928:	4a0f      	ldr	r2, [pc, #60]	@ (8009968 <sen5xStoreMax+0xc8>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d010      	beq.n	8009950 <sen5xStoreMax+0xb0>
 800992e:	4b0a      	ldr	r3, [pc, #40]	@ (8009958 <sen5xStoreMax+0xb8>)
 8009930:	220e      	movs	r2, #14
 8009932:	5e9b      	ldrsh	r3, [r3, r2]
 8009934:	001a      	movs	r2, r3
 8009936:	4b0e      	ldr	r3, [pc, #56]	@ (8009970 <sen5xStoreMax+0xd0>)
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	dd08      	ble.n	8009950 <sen5xStoreMax+0xb0>
    s5xnoximax = sen5x_data.nox_index;
 800993e:	4b06      	ldr	r3, [pc, #24]	@ (8009958 <sen5xStoreMax+0xb8>)
 8009940:	220e      	movs	r2, #14
 8009942:	5e9b      	ldrsh	r3, [r3, r2]
 8009944:	b29a      	uxth	r2, r3
 8009946:	4b0a      	ldr	r3, [pc, #40]	@ (8009970 <sen5xStoreMax+0xd0>)
 8009948:	801a      	strh	r2, [r3, #0]
    updateflag = true;
 800994a:	1dfb      	adds	r3, r7, #7
 800994c:	2201      	movs	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]
    else {
      setPMsen50(pm2p5max, pm10p0max);
    }
*/
  }
}
 8009950:	46c0      	nop			@ (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b002      	add	sp, #8
 8009956:	bd80      	pop	{r7, pc}
 8009958:	2000108c 	.word	0x2000108c
 800995c:	0000ffff 	.word	0x0000ffff
 8009960:	20001076 	.word	0x20001076
 8009964:	20001078 	.word	0x20001078
 8009968:	00007fff 	.word	0x00007fff
 800996c:	2000107a 	.word	0x2000107a
 8009970:	2000107c 	.word	0x2000107c

08009974 <sen5xStore>:

void sen5xStore() {
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009978:	4b29      	ldr	r3, [pc, #164]	@ (8009a20 <sen5xStore+0xac>)
 800997a:	885b      	ldrh	r3, [r3, #2]
 800997c:	4a29      	ldr	r2, [pc, #164]	@ (8009a24 <sen5xStore+0xb0>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d003      	beq.n	800998a <sen5xStore+0x16>
    pm2p5 = sen5x_data.mass_concentration_pm2p5;
 8009982:	4b27      	ldr	r3, [pc, #156]	@ (8009a20 <sen5xStore+0xac>)
 8009984:	885a      	ldrh	r2, [r3, #2]
 8009986:	4b28      	ldr	r3, [pc, #160]	@ (8009a28 <sen5xStore+0xb4>)
 8009988:	801a      	strh	r2, [r3, #0]
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800998a:	4b25      	ldr	r3, [pc, #148]	@ (8009a20 <sen5xStore+0xac>)
 800998c:	88db      	ldrh	r3, [r3, #6]
 800998e:	4a25      	ldr	r2, [pc, #148]	@ (8009a24 <sen5xStore+0xb0>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d003      	beq.n	800999c <sen5xStore+0x28>
    pm10p0 = sen5x_data.mass_concentration_pm10p0;
 8009994:	4b22      	ldr	r3, [pc, #136]	@ (8009a20 <sen5xStore+0xac>)
 8009996:	88da      	ldrh	r2, [r3, #6]
 8009998:	4b24      	ldr	r3, [pc, #144]	@ (8009a2c <sen5xStore+0xb8>)
 800999a:	801a      	strh	r2, [r3, #0]
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800999c:	4b20      	ldr	r3, [pc, #128]	@ (8009a20 <sen5xStore+0xac>)
 800999e:	220c      	movs	r2, #12
 80099a0:	5e9b      	ldrsh	r3, [r3, r2]
 80099a2:	4a23      	ldr	r2, [pc, #140]	@ (8009a30 <sen5xStore+0xbc>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d010      	beq.n	80099ca <sen5xStore+0x56>
    s5xvoci = sen5x_data.voc_index;
 80099a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009a20 <sen5xStore+0xac>)
 80099aa:	220c      	movs	r2, #12
 80099ac:	5e9b      	ldrsh	r3, [r3, r2]
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	4b20      	ldr	r3, [pc, #128]	@ (8009a34 <sen5xStore+0xc0>)
 80099b2:	801a      	strh	r2, [r3, #0]
    SetVOCindicator(s5xvoci/10);
 80099b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009a34 <sen5xStore+0xc0>)
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	210a      	movs	r1, #10
 80099ba:	0018      	movs	r0, r3
 80099bc:	f7f6 fbf2 	bl	80001a4 <__udivsi3>
 80099c0:	0003      	movs	r3, r0
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	0018      	movs	r0, r3
 80099c6:	f003 fdfd 	bl	800d5c4 <SetVOCindicator>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 80099ca:	4b15      	ldr	r3, [pc, #84]	@ (8009a20 <sen5xStore+0xac>)
 80099cc:	220e      	movs	r2, #14
 80099ce:	5e9b      	ldrsh	r3, [r3, r2]
 80099d0:	4a17      	ldr	r2, [pc, #92]	@ (8009a30 <sen5xStore+0xbc>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d005      	beq.n	80099e2 <sen5xStore+0x6e>
    s5xnoxi = sen5x_data.nox_index;
 80099d6:	4b12      	ldr	r3, [pc, #72]	@ (8009a20 <sen5xStore+0xac>)
 80099d8:	220e      	movs	r2, #14
 80099da:	5e9b      	ldrsh	r3, [r3, r2]
 80099dc:	b29a      	uxth	r2, r3
 80099de:	4b16      	ldr	r3, [pc, #88]	@ (8009a38 <sen5xStore+0xc4>)
 80099e0:	801a      	strh	r2, [r3, #0]
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 80099e2:	4b16      	ldr	r3, [pc, #88]	@ (8009a3c <sen5xStore+0xc8>)
 80099e4:	791b      	ldrb	r3, [r3, #4]
 80099e6:	2b34      	cmp	r3, #52	@ 0x34
 80099e8:	d003      	beq.n	80099f2 <sen5xStore+0x7e>
 80099ea:	4b14      	ldr	r3, [pc, #80]	@ (8009a3c <sen5xStore+0xc8>)
 80099ec:	791b      	ldrb	r3, [r3, #4]
 80099ee:	2b35      	cmp	r3, #53	@ 0x35
 80099f0:	d10a      	bne.n	8009a08 <sen5xStore+0x94>
    setPMs(pm2p5, pm10p0, s5xvoci, s5xnoxi);
 80099f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a28 <sen5xStore+0xb4>)
 80099f4:	8818      	ldrh	r0, [r3, #0]
 80099f6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a2c <sen5xStore+0xb8>)
 80099f8:	8819      	ldrh	r1, [r3, #0]
 80099fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009a34 <sen5xStore+0xc0>)
 80099fc:	881a      	ldrh	r2, [r3, #0]
 80099fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009a38 <sen5xStore+0xc4>)
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	f7f9 ffdd 	bl	80039c0 <setPMs>
 8009a06:	e008      	b.n	8009a1a <sen5xStore+0xa6>
//    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
  }
  else {
    setPMsen50(pm2p5, pm10p0);
 8009a08:	4b07      	ldr	r3, [pc, #28]	@ (8009a28 <sen5xStore+0xb4>)
 8009a0a:	881a      	ldrh	r2, [r3, #0]
 8009a0c:	4b07      	ldr	r3, [pc, #28]	@ (8009a2c <sen5xStore+0xb8>)
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	0019      	movs	r1, r3
 8009a12:	0010      	movs	r0, r2
 8009a14:	f7f9 ffa6 	bl	8003964 <setPMsen50>
  }
}
 8009a18:	46c0      	nop			@ (mov r8, r8)
 8009a1a:	46c0      	nop			@ (mov r8, r8)
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	2000108c 	.word	0x2000108c
 8009a24:	0000ffff 	.word	0x0000ffff
 8009a28:	2000107e 	.word	0x2000107e
 8009a2c:	20001080 	.word	0x20001080
 8009a30:	00007fff 	.word	0x00007fff
 8009a34:	20001082 	.word	0x20001082
 8009a38:	20001084 	.word	0x20001084
 8009a3c:	2000106c 	.word	0x2000106c

08009a40 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009a40:	b590      	push	{r4, r7, lr}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	6039      	str	r1, [r7, #0]
 8009a48:	0011      	movs	r1, r2
 8009a4a:	1dfb      	adds	r3, r7, #7
 8009a4c:	1c02      	adds	r2, r0, #0
 8009a4e:	701a      	strb	r2, [r3, #0]
 8009a50:	1d3b      	adds	r3, r7, #4
 8009a52:	1c0a      	adds	r2, r1, #0
 8009a54:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8009a56:	1dfb      	adds	r3, r7, #7
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	18db      	adds	r3, r3, r3
 8009a5e:	b299      	uxth	r1, r3
 8009a60:	1d3b      	adds	r3, r7, #4
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	4805      	ldr	r0, [pc, #20]	@ (8009a7c <sensirion_i2c_hal_read+0x3c>)
 8009a68:	2464      	movs	r4, #100	@ 0x64
 8009a6a:	9400      	str	r4, [sp, #0]
 8009a6c:	f006 fe80 	bl	8010770 <HAL_I2C_Master_Receive>
 8009a70:	0003      	movs	r3, r0
 8009a72:	b25b      	sxtb	r3, r3
}
 8009a74:	0018      	movs	r0, r3
 8009a76:	46bd      	mov	sp, r7
 8009a78:	b003      	add	sp, #12
 8009a7a:	bd90      	pop	{r4, r7, pc}
 8009a7c:	20000e48 	.word	0x20000e48

08009a80 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009a80:	b590      	push	{r4, r7, lr}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	6039      	str	r1, [r7, #0]
 8009a88:	0011      	movs	r1, r2
 8009a8a:	1dfb      	adds	r3, r7, #7
 8009a8c:	1c02      	adds	r2, r0, #0
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	1d3b      	adds	r3, r7, #4
 8009a92:	1c0a      	adds	r2, r1, #0
 8009a94:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009a96:	1dfb      	adds	r3, r7, #7
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	18db      	adds	r3, r3, r3
 8009a9e:	b299      	uxth	r1, r3
 8009aa0:	1d3b      	adds	r3, r7, #4
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	683a      	ldr	r2, [r7, #0]
 8009aa6:	4805      	ldr	r0, [pc, #20]	@ (8009abc <sensirion_i2c_hal_write+0x3c>)
 8009aa8:	2464      	movs	r4, #100	@ 0x64
 8009aaa:	9400      	str	r4, [sp, #0]
 8009aac:	f006 fd58 	bl	8010560 <HAL_I2C_Master_Transmit>
 8009ab0:	0003      	movs	r3, r0
 8009ab2:	b25b      	sxtb	r3, r3
}
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	b003      	add	sp, #12
 8009aba:	bd90      	pop	{r4, r7, pc}
 8009abc:	20000e48 	.word	0x20000e48

08009ac0 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	22fa      	movs	r2, #250	@ 0xfa
 8009acc:	0091      	lsls	r1, r2, #2
 8009ace:	0018      	movs	r0, r3
 8009ad0:	f7f6 fb68 	bl	80001a4 <__udivsi3>
 8009ad4:	0003      	movs	r3, r0
 8009ad6:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	22fa      	movs	r2, #250	@ 0xfa
 8009adc:	0091      	lsls	r1, r2, #2
 8009ade:	0018      	movs	r0, r3
 8009ae0:	f7f6 fbe6 	bl	80002b0 <__aeabi_uidivmod>
 8009ae4:	1e0b      	subs	r3, r1, #0
 8009ae6:	d002      	beq.n	8009aee <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3301      	adds	r3, #1
 8009aec:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	0018      	movs	r0, r3
 8009af2:	f005 f9df 	bl	800eeb4 <HAL_Delay>
}
 8009af6:	46c0      	nop			@ (mov r8, r8)
 8009af8:	46bd      	mov	sp, r7
 8009afa:	b004      	add	sp, #16
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8009b0a:	1d3b      	adds	r3, r7, #4
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f000 fcd9 	bl	800a4c4 <sen5x_read_device_status>
 8009b12:	1e03      	subs	r3, r0, #0
 8009b14:	d007      	beq.n	8009b26 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009b16:	4a28      	ldr	r2, [pc, #160]	@ (8009bb8 <sen5x_check_for_errors+0xb8>)
 8009b18:	4b28      	ldr	r3, [pc, #160]	@ (8009bbc <sen5x_check_for_errors+0xbc>)
 8009b1a:	0019      	movs	r1, r3
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	f004 fd7f 	bl	800e620 <CreateLine>
    return 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e043      	b.n	8009bae <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <sen5x_check_for_errors+0x30>
    return 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e03e      	b.n	8009bae <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	2380      	movs	r3, #128	@ 0x80
 8009b34:	039b      	lsls	r3, r3, #14
 8009b36:	4013      	ands	r3, r2
 8009b38:	d005      	beq.n	8009b46 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 8009b3a:	4a21      	ldr	r2, [pc, #132]	@ (8009bc0 <sen5x_check_for_errors+0xc0>)
 8009b3c:	4b21      	ldr	r3, [pc, #132]	@ (8009bc4 <sen5x_check_for_errors+0xc4>)
 8009b3e:	0019      	movs	r1, r3
 8009b40:	2003      	movs	r0, #3
 8009b42:	f004 fd6d 	bl	800e620 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	2380      	movs	r3, #128	@ 0x80
 8009b4a:	031b      	lsls	r3, r3, #12
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	d005      	beq.n	8009b5c <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009b50:	4a1d      	ldr	r2, [pc, #116]	@ (8009bc8 <sen5x_check_for_errors+0xc8>)
 8009b52:	4b1c      	ldr	r3, [pc, #112]	@ (8009bc4 <sen5x_check_for_errors+0xc4>)
 8009b54:	0019      	movs	r1, r3
 8009b56:	2003      	movs	r0, #3
 8009b58:	f004 fd62 	bl	800e620 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2280      	movs	r2, #128	@ 0x80
 8009b60:	4013      	ands	r3, r2
 8009b62:	d005      	beq.n	8009b70 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009b64:	4a19      	ldr	r2, [pc, #100]	@ (8009bcc <sen5x_check_for_errors+0xcc>)
 8009b66:	4b17      	ldr	r3, [pc, #92]	@ (8009bc4 <sen5x_check_for_errors+0xc4>)
 8009b68:	0019      	movs	r1, r3
 8009b6a:	2003      	movs	r0, #3
 8009b6c:	f004 fd58 	bl	800e620 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2240      	movs	r2, #64	@ 0x40
 8009b74:	4013      	ands	r3, r2
 8009b76:	d005      	beq.n	8009b84 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009b78:	4a15      	ldr	r2, [pc, #84]	@ (8009bd0 <sen5x_check_for_errors+0xd0>)
 8009b7a:	4b12      	ldr	r3, [pc, #72]	@ (8009bc4 <sen5x_check_for_errors+0xc4>)
 8009b7c:	0019      	movs	r1, r3
 8009b7e:	2003      	movs	r0, #3
 8009b80:	f004 fd4e 	bl	800e620 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2220      	movs	r2, #32
 8009b88:	4013      	ands	r3, r2
 8009b8a:	d005      	beq.n	8009b98 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009b8c:	4a11      	ldr	r2, [pc, #68]	@ (8009bd4 <sen5x_check_for_errors+0xd4>)
 8009b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc4 <sen5x_check_for_errors+0xc4>)
 8009b90:	0019      	movs	r1, r3
 8009b92:	2003      	movs	r0, #3
 8009b94:	f004 fd44 	bl	800e620 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2210      	movs	r2, #16
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	d005      	beq.n	8009bac <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8009bd8 <sen5x_check_for_errors+0xd8>)
 8009ba2:	4b08      	ldr	r3, [pc, #32]	@ (8009bc4 <sen5x_check_for_errors+0xc4>)
 8009ba4:	0019      	movs	r1, r3
 8009ba6:	2003      	movs	r0, #3
 8009ba8:	f004 fd3a 	bl	800e620 <CreateLine>
  }
  return 1;
 8009bac:	2301      	movs	r3, #1
}
 8009bae:	0018      	movs	r0, r3
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	b002      	add	sp, #8
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	46c0      	nop			@ (mov r8, r8)
 8009bb8:	08024bcc 	.word	0x08024bcc
 8009bbc:	080247c8 	.word	0x080247c8
 8009bc0:	08024bf8 	.word	0x08024bf8
 8009bc4:	08024714 	.word	0x08024714
 8009bc8:	08024c18 	.word	0x08024c18
 8009bcc:	08024c34 	.word	0x08024c34
 8009bd0:	08024c58 	.word	0x08024c58
 8009bd4:	08024c78 	.word	0x08024c78
 8009bd8:	08024c8c 	.word	0x08024c8c

08009bdc <set_light_on_state>:

void set_light_on_state(void) {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009be0:	4b15      	ldr	r3, [pc, #84]	@ (8009c38 <set_light_on_state+0x5c>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2201      	movs	r2, #1
 8009be6:	4053      	eors	r3, r2
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d008      	beq.n	8009c00 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009bee:	f7ff fabd 	bl	800916c <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009bf2:	4a12      	ldr	r2, [pc, #72]	@ (8009c3c <set_light_on_state+0x60>)
 8009bf4:	4b12      	ldr	r3, [pc, #72]	@ (8009c40 <set_light_on_state+0x64>)
 8009bf6:	0019      	movs	r1, r3
 8009bf8:	2003      	movs	r0, #3
 8009bfa:	f004 fd11 	bl	800e620 <CreateLine>
 8009bfe:	e00a      	b.n	8009c16 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009c00:	f005 f94e 	bl	800eea0 <HAL_GetTick>
 8009c04:	0002      	movs	r2, r0
 8009c06:	4b0f      	ldr	r3, [pc, #60]	@ (8009c44 <set_light_on_state+0x68>)
 8009c08:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8009c48 <set_light_on_state+0x6c>)
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c40 <set_light_on_state+0x64>)
 8009c0e:	0019      	movs	r1, r3
 8009c10:	2003      	movs	r0, #3
 8009c12:	f004 fd05 	bl	800e620 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009c16:	f7ff fc35 	bl	8009484 <sen5x_lightup_measurement>
 8009c1a:	1e03      	subs	r3, r0, #0
 8009c1c:	d005      	beq.n	8009c2a <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8009c4c <set_light_on_state+0x70>)
 8009c20:	4b0b      	ldr	r3, [pc, #44]	@ (8009c50 <set_light_on_state+0x74>)
 8009c22:	0019      	movs	r1, r3
 8009c24:	2001      	movs	r0, #1
 8009c26:	f004 fcfb 	bl	800e620 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c54 <set_light_on_state+0x78>)
 8009c2c:	2203      	movs	r2, #3
 8009c2e:	701a      	strb	r2, [r3, #0]
}
 8009c30:	46c0      	nop			@ (mov r8, r8)
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	46c0      	nop			@ (mov r8, r8)
 8009c38:	20001066 	.word	0x20001066
 8009c3c:	08024cc8 	.word	0x08024cc8
 8009c40:	08024714 	.word	0x08024714
 8009c44:	20001088 	.word	0x20001088
 8009c48:	08024cf4 	.word	0x08024cf4
 8009c4c:	08024d0c 	.word	0x08024d0c
 8009c50:	080247c8 	.word	0x080247c8
 8009c54:	2000008d 	.word	0x2000008d

08009c58 <sen5x_statemachine>:

void sen5x_statemachine() {
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009c5e:	1dfb      	adds	r3, r7, #7
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009c64:	4b75      	ldr	r3, [pc, #468]	@ (8009e3c <sen5x_statemachine+0x1e4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	0018      	movs	r0, r3
 8009c6a:	f004 fc83 	bl	800e574 <TimestampIsReached>
 8009c6e:	1e03      	subs	r3, r0, #0
 8009c70:	d100      	bne.n	8009c74 <sen5x_statemachine+0x1c>
 8009c72:	e0df      	b.n	8009e34 <sen5x_statemachine+0x1dc>
    switch (PMsamplesState) {
 8009c74:	4b72      	ldr	r3, [pc, #456]	@ (8009e40 <sen5x_statemachine+0x1e8>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b05      	cmp	r3, #5
 8009c7a:	d900      	bls.n	8009c7e <sen5x_statemachine+0x26>
 8009c7c:	e0da      	b.n	8009e34 <sen5x_statemachine+0x1dc>
 8009c7e:	009a      	lsls	r2, r3, #2
 8009c80:	4b70      	ldr	r3, [pc, #448]	@ (8009e44 <sen5x_statemachine+0x1ec>)
 8009c82:	18d3      	adds	r3, r2, r3
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009c88:	4a6f      	ldr	r2, [pc, #444]	@ (8009e48 <sen5x_statemachine+0x1f0>)
 8009c8a:	4b70      	ldr	r3, [pc, #448]	@ (8009e4c <sen5x_statemachine+0x1f4>)
 8009c8c:	0019      	movs	r1, r3
 8009c8e:	2001      	movs	r0, #1
 8009c90:	f004 fcc6 	bl	800e620 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009c94:	f005 f904 	bl	800eea0 <HAL_GetTick>
 8009c98:	0003      	movs	r3, r0
 8009c9a:	4a6d      	ldr	r2, [pc, #436]	@ (8009e50 <sen5x_statemachine+0x1f8>)
 8009c9c:	189a      	adds	r2, r3, r2
 8009c9e:	4b67      	ldr	r3, [pc, #412]	@ (8009e3c <sen5x_statemachine+0x1e4>)
 8009ca0:	601a      	str	r2, [r3, #0]
      break;
 8009ca2:	e0c7      	b.n	8009e34 <sen5x_statemachine+0x1dc>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009ca4:	f005 f8fc 	bl	800eea0 <HAL_GetTick>
 8009ca8:	0003      	movs	r3, r0
 8009caa:	4a6a      	ldr	r2, [pc, #424]	@ (8009e54 <sen5x_statemachine+0x1fc>)
 8009cac:	189a      	adds	r2, r3, r2
 8009cae:	4b63      	ldr	r3, [pc, #396]	@ (8009e3c <sen5x_statemachine+0x1e4>)
 8009cb0:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009cb2:	f7ff ff93 	bl	8009bdc <set_light_on_state>
      break;
 8009cb6:	e0bd      	b.n	8009e34 <sen5x_statemachine+0x1dc>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 8009cb8:	4b61      	ldr	r3, [pc, #388]	@ (8009e40 <sen5x_statemachine+0x1e8>)
 8009cba:	2202      	movs	r2, #2
 8009cbc:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009cbe:	4b66      	ldr	r3, [pc, #408]	@ (8009e58 <sen5x_statemachine+0x200>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b05      	cmp	r3, #5
 8009cc4:	d905      	bls.n	8009cd2 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009cc6:	4b5e      	ldr	r3, [pc, #376]	@ (8009e40 <sen5x_statemachine+0x1e8>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009ccc:	f7ff fa6e 	bl	80091ac <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009cd0:	e0ad      	b.n	8009e2e <sen5x_statemachine+0x1d6>
        if (sen5x_check_for_errors()) {
 8009cd2:	f7ff ff15 	bl	8009b00 <sen5x_check_for_errors>
 8009cd6:	1e03      	subs	r3, r0, #0
 8009cd8:	d100      	bne.n	8009cdc <sen5x_statemachine+0x84>
 8009cda:	e0a8      	b.n	8009e2e <sen5x_statemachine+0x1d6>
          if (sen5x_device_reset()) {
 8009cdc:	f000 fc44 	bl	800a568 <sen5x_device_reset>
 8009ce0:	1e03      	subs	r3, r0, #0
 8009ce2:	d006      	beq.n	8009cf2 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8009e5c <sen5x_statemachine+0x204>)
 8009ce6:	4b59      	ldr	r3, [pc, #356]	@ (8009e4c <sen5x_statemachine+0x1f4>)
 8009ce8:	0019      	movs	r1, r3
 8009cea:	2001      	movs	r0, #1
 8009cec:	f004 fc98 	bl	800e620 <CreateLine>
 8009cf0:	e005      	b.n	8009cfe <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8009e60 <sen5x_statemachine+0x208>)
 8009cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8009e64 <sen5x_statemachine+0x20c>)
 8009cf6:	0019      	movs	r1, r3
 8009cf8:	2002      	movs	r0, #2
 8009cfa:	f004 fc91 	bl	800e620 <CreateLine>
          sen5xErrors++;
 8009cfe:	4b56      	ldr	r3, [pc, #344]	@ (8009e58 <sen5x_statemachine+0x200>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	3301      	adds	r3, #1
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	4b54      	ldr	r3, [pc, #336]	@ (8009e58 <sen5x_statemachine+0x200>)
 8009d08:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009d0a:	f005 f8c9 	bl	800eea0 <HAL_GetTick>
 8009d0e:	0003      	movs	r3, r0
 8009d10:	3396      	adds	r3, #150	@ 0x96
 8009d12:	001a      	movs	r2, r3
 8009d14:	4b49      	ldr	r3, [pc, #292]	@ (8009e3c <sen5x_statemachine+0x1e4>)
 8009d16:	601a      	str	r2, [r3, #0]
      break;
 8009d18:	e089      	b.n	8009e2e <sen5x_statemachine+0x1d6>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009d1a:	1dfb      	adds	r3, r7, #7
 8009d1c:	0018      	movs	r0, r3
 8009d1e:	f000 f93f 	bl	8009fa0 <sen5x_read_data_ready>
      if (data_ready) {
 8009d22:	1dfb      	adds	r3, r7, #7
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d028      	beq.n	8009d7c <sen5x_statemachine+0x124>
        SetPMIndicator();
 8009d2a:	f003 fbbb 	bl	800d4a4 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8009e68 <sen5x_statemachine+0x210>)
 8009d30:	0018      	movs	r0, r3
 8009d32:	f7ff fc4d 	bl	80095d0 <sen5x_read_measurement>
 8009d36:	1e03      	subs	r3, r0, #0
 8009d38:	d005      	beq.n	8009d46 <sen5x_statemachine+0xee>
          Error("Error executing sen5x_read_measured_values()");
 8009d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8009e6c <sen5x_statemachine+0x214>)
 8009d3c:	4b43      	ldr	r3, [pc, #268]	@ (8009e4c <sen5x_statemachine+0x1f4>)
 8009d3e:	0019      	movs	r1, r3
 8009d40:	2001      	movs	r0, #1
 8009d42:	f004 fc6d 	bl	800e620 <CreateLine>
        }
        sen5xSamples++;
 8009d46:	4b4a      	ldr	r3, [pc, #296]	@ (8009e70 <sen5x_statemachine+0x218>)
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	4b48      	ldr	r3, [pc, #288]	@ (8009e70 <sen5x_statemachine+0x218>)
 8009d50:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 8009d52:	4b47      	ldr	r3, [pc, #284]	@ (8009e70 <sen5x_statemachine+0x218>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2b1f      	cmp	r3, #31
 8009d58:	d102      	bne.n	8009d60 <sen5x_statemachine+0x108>
          sen5xSamples = 0;  // enable display on serial
 8009d5a:	4b45      	ldr	r3, [pc, #276]	@ (8009e70 <sen5x_statemachine+0x218>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009d60:	4b43      	ldr	r3, [pc, #268]	@ (8009e70 <sen5x_statemachine+0x218>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d901      	bls.n	8009d6c <sen5x_statemachine+0x114>
          sen5xStoreMax();
 8009d68:	f7ff fd9a 	bl	80098a0 <sen5xStoreMax>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009d6c:	4b40      	ldr	r3, [pc, #256]	@ (8009e70 <sen5x_statemachine+0x218>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d103      	bne.n	8009d7c <sen5x_statemachine+0x124>
          sen5xStore();
 8009d74:	f7ff fdfe 	bl	8009974 <sen5xStore>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009d78:	f7ff fc86 	bl	8009688 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8009e74 <sen5x_statemachine+0x21c>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d103      	bne.n	8009d8c <sen5x_statemachine+0x134>
 8009d84:	4b3a      	ldr	r3, [pc, #232]	@ (8009e70 <sen5x_statemachine+0x218>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d952      	bls.n	8009e32 <sen5x_statemachine+0x1da>
        PMsamplesState = CLEAN_FAN;
 8009d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8009e40 <sen5x_statemachine+0x1e8>)
 8009d8e:	2204      	movs	r2, #4
 8009d90:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009d92:	e04e      	b.n	8009e32 <sen5x_statemachine+0x1da>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009d94:	f7fc fe4a 	bl	8006a2c <RTC_GetWeekday>
 8009d98:	0003      	movs	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d118      	bne.n	8009dd0 <sen5x_statemachine+0x178>
 8009d9e:	4b36      	ldr	r3, [pc, #216]	@ (8009e78 <sen5x_statemachine+0x220>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2201      	movs	r2, #1
 8009da4:	4053      	eors	r3, r2
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d011      	beq.n	8009dd0 <sen5x_statemachine+0x178>
        sen5x_start_fan_cleaning();
 8009dac:	f000 f9de 	bl	800a16c <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009db0:	4a32      	ldr	r2, [pc, #200]	@ (8009e7c <sen5x_statemachine+0x224>)
 8009db2:	4b2c      	ldr	r3, [pc, #176]	@ (8009e64 <sen5x_statemachine+0x20c>)
 8009db4:	0019      	movs	r1, r3
 8009db6:	2002      	movs	r0, #2
 8009db8:	f004 fc32 	bl	800e620 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 8009dbc:	f005 f870 	bl	800eea0 <HAL_GetTick>
 8009dc0:	0003      	movs	r3, r0
 8009dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8009e80 <sen5x_statemachine+0x228>)
 8009dc4:	189a      	adds	r2, r3, r2
 8009dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8009e3c <sen5x_statemachine+0x1e4>)
 8009dc8:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009dca:	4b2b      	ldr	r3, [pc, #172]	@ (8009e78 <sen5x_statemachine+0x220>)
 8009dcc:	2201      	movs	r2, #1
 8009dce:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8009e40 <sen5x_statemachine+0x1e8>)
 8009dd2:	2205      	movs	r2, #5
 8009dd4:	701a      	strb	r2, [r3, #0]
      break;
 8009dd6:	e02d      	b.n	8009e34 <sen5x_statemachine+0x1dc>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn) {
 8009dd8:	4b26      	ldr	r3, [pc, #152]	@ (8009e74 <sen5x_statemachine+0x21c>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	4053      	eors	r3, r2
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d015      	beq.n	8009e12 <sen5x_statemachine+0x1ba>
        if (sen5x_extinguish_measurement()) {
 8009de6:	f7ff fb99 	bl	800951c <sen5x_extinguish_measurement>
 8009dea:	1e03      	subs	r3, r0, #0
 8009dec:	d005      	beq.n	8009dfa <sen5x_statemachine+0x1a2>
          Error("Error executing sen5x_extinguish_measurement()");
 8009dee:	4a25      	ldr	r2, [pc, #148]	@ (8009e84 <sen5x_statemachine+0x22c>)
 8009df0:	4b16      	ldr	r3, [pc, #88]	@ (8009e4c <sen5x_statemachine+0x1f4>)
 8009df2:	0019      	movs	r1, r3
 8009df4:	2001      	movs	r0, #1
 8009df6:	f004 fc13 	bl	800e620 <CreateLine>
        }
        sen5xSamples = 0;
 8009dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8009e70 <sen5x_statemachine+0x218>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009e00:	f7ff f9d4 	bl	80091ac <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009e04:	2000      	movs	r0, #0
 8009e06:	f7fe fb3d 	bl	8008484 <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 8009e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e40 <sen5x_statemachine+0x1e8>)
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	701a      	strb	r2, [r3, #0]
 8009e10:	e002      	b.n	8009e18 <sen5x_statemachine+0x1c0>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009e12:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <sen5x_statemachine+0x1e8>)
 8009e14:	2203      	movs	r2, #3
 8009e16:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 8009e18:	f003 fb6a 	bl	800d4f0 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009e1c:	f005 f840 	bl	800eea0 <HAL_GetTick>
 8009e20:	0003      	movs	r3, r0
 8009e22:	22fa      	movs	r2, #250	@ 0xfa
 8009e24:	0092      	lsls	r2, r2, #2
 8009e26:	189a      	adds	r2, r3, r2
 8009e28:	4b04      	ldr	r3, [pc, #16]	@ (8009e3c <sen5x_statemachine+0x1e4>)
 8009e2a:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009e2c:	e002      	b.n	8009e34 <sen5x_statemachine+0x1dc>
      break;
 8009e2e:	46c0      	nop			@ (mov r8, r8)
 8009e30:	e000      	b.n	8009e34 <sen5x_statemachine+0x1dc>
      break;
 8009e32:	46c0      	nop			@ (mov r8, r8)
}
 8009e34:	46c0      	nop			@ (mov r8, r8)
 8009e36:	46bd      	mov	sp, r7
 8009e38:	b002      	add	sp, #8
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20001088 	.word	0x20001088
 8009e40:	2000008d 	.word	0x2000008d
 8009e44:	080256bc 	.word	0x080256bc
 8009e48:	08024d38 	.word	0x08024d38
 8009e4c:	080247c8 	.word	0x080247c8
 8009e50:	002fefd8 	.word	0x002fefd8
 8009e54:	00005910 	.word	0x00005910
 8009e58:	20001075 	.word	0x20001075
 8009e5c:	08024d68 	.word	0x08024d68
 8009e60:	08024d80 	.word	0x08024d80
 8009e64:	080246d4 	.word	0x080246d4
 8009e68:	2000108c 	.word	0x2000108c
 8009e6c:	08024d98 	.word	0x08024d98
 8009e70:	20001074 	.word	0x20001074
 8009e74:	20002009 	.word	0x20002009
 8009e78:	20001065 	.word	0x20001065
 8009e7c:	08024dc8 	.word	0x08024dc8
 8009e80:	00002710 	.word	0x00002710
 8009e84:	08024de0 	.word	0x08024de0

08009e88 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009e88:	b590      	push	{r4, r7, lr}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009e8e:	1dbb      	adds	r3, r7, #6
 8009e90:	2200      	movs	r2, #0
 8009e92:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009e94:	1dbc      	adds	r4, r7, #6
 8009e96:	1dbb      	adds	r3, r7, #6
 8009e98:	8819      	ldrh	r1, [r3, #0]
 8009e9a:	003b      	movs	r3, r7
 8009e9c:	2221      	movs	r2, #33	@ 0x21
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f001 fb56 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 8009ea4:	0003      	movs	r3, r0
 8009ea6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009ea8:	1d3c      	adds	r4, r7, #4
 8009eaa:	1dbb      	adds	r3, r7, #6
 8009eac:	881a      	ldrh	r2, [r3, #0]
 8009eae:	003b      	movs	r3, r7
 8009eb0:	0019      	movs	r1, r3
 8009eb2:	2069      	movs	r0, #105	@ 0x69
 8009eb4:	f001 fbd0 	bl	800b658 <sensirion_i2c_write_data>
 8009eb8:	0003      	movs	r3, r0
 8009eba:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ebc:	1d3b      	adds	r3, r7, #4
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	5e9b      	ldrsh	r3, [r3, r2]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <sen5x_start_measurement+0x46>
        return error;
 8009ec6:	1d3b      	adds	r3, r7, #4
 8009ec8:	2200      	movs	r2, #0
 8009eca:	5e9b      	ldrsh	r3, [r3, r2]
 8009ecc:	e004      	b.n	8009ed8 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009ece:	4b04      	ldr	r3, [pc, #16]	@ (8009ee0 <sen5x_start_measurement+0x58>)
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f7ff fdf5 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	0018      	movs	r0, r3
 8009eda:	46bd      	mov	sp, r7
 8009edc:	b003      	add	sp, #12
 8009ede:	bd90      	pop	{r4, r7, pc}
 8009ee0:	0000c350 	.word	0x0000c350

08009ee4 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 8009ee4:	b590      	push	{r4, r7, lr}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009eea:	1dbb      	adds	r3, r7, #6
 8009eec:	2200      	movs	r2, #0
 8009eee:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 8009ef0:	1dbc      	adds	r4, r7, #6
 8009ef2:	1dbb      	adds	r3, r7, #6
 8009ef4:	8819      	ldrh	r1, [r3, #0]
 8009ef6:	003b      	movs	r3, r7
 8009ef8:	2237      	movs	r2, #55	@ 0x37
 8009efa:	0018      	movs	r0, r3
 8009efc:	f001 fb28 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 8009f00:	0003      	movs	r3, r0
 8009f02:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009f04:	1d3c      	adds	r4, r7, #4
 8009f06:	1dbb      	adds	r3, r7, #6
 8009f08:	881a      	ldrh	r2, [r3, #0]
 8009f0a:	003b      	movs	r3, r7
 8009f0c:	0019      	movs	r1, r3
 8009f0e:	2069      	movs	r0, #105	@ 0x69
 8009f10:	f001 fba2 	bl	800b658 <sensirion_i2c_write_data>
 8009f14:	0003      	movs	r3, r0
 8009f16:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f18:	1d3b      	adds	r3, r7, #4
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	5e9b      	ldrsh	r3, [r3, r2]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <sen5x_start_measurement_without_pm+0x46>
        return error;
 8009f22:	1d3b      	adds	r3, r7, #4
 8009f24:	2200      	movs	r2, #0
 8009f26:	5e9b      	ldrsh	r3, [r3, r2]
 8009f28:	e004      	b.n	8009f34 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009f2a:	4b04      	ldr	r3, [pc, #16]	@ (8009f3c <sen5x_start_measurement_without_pm+0x58>)
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7ff fdc7 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	0018      	movs	r0, r3
 8009f36:	46bd      	mov	sp, r7
 8009f38:	b003      	add	sp, #12
 8009f3a:	bd90      	pop	{r4, r7, pc}
 8009f3c:	0000c350 	.word	0x0000c350

08009f40 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 8009f40:	b590      	push	{r4, r7, lr}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009f46:	1dbb      	adds	r3, r7, #6
 8009f48:	2200      	movs	r2, #0
 8009f4a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009f4c:	1dbc      	adds	r4, r7, #6
 8009f4e:	2382      	movs	r3, #130	@ 0x82
 8009f50:	005a      	lsls	r2, r3, #1
 8009f52:	1dbb      	adds	r3, r7, #6
 8009f54:	8819      	ldrh	r1, [r3, #0]
 8009f56:	003b      	movs	r3, r7
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f001 faf9 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 8009f5e:	0003      	movs	r3, r0
 8009f60:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009f62:	1d3c      	adds	r4, r7, #4
 8009f64:	1dbb      	adds	r3, r7, #6
 8009f66:	881a      	ldrh	r2, [r3, #0]
 8009f68:	003b      	movs	r3, r7
 8009f6a:	0019      	movs	r1, r3
 8009f6c:	2069      	movs	r0, #105	@ 0x69
 8009f6e:	f001 fb73 	bl	800b658 <sensirion_i2c_write_data>
 8009f72:	0003      	movs	r3, r0
 8009f74:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f76:	1d3b      	adds	r3, r7, #4
 8009f78:	2200      	movs	r2, #0
 8009f7a:	5e9b      	ldrsh	r3, [r3, r2]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <sen5x_stop_measurement+0x48>
        return error;
 8009f80:	1d3b      	adds	r3, r7, #4
 8009f82:	2200      	movs	r2, #0
 8009f84:	5e9b      	ldrsh	r3, [r3, r2]
 8009f86:	e004      	b.n	8009f92 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009f88:	4b04      	ldr	r3, [pc, #16]	@ (8009f9c <sen5x_stop_measurement+0x5c>)
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f7ff fd98 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	0018      	movs	r0, r3
 8009f94:	46bd      	mov	sp, r7
 8009f96:	b003      	add	sp, #12
 8009f98:	bd90      	pop	{r4, r7, pc}
 8009f9a:	46c0      	nop			@ (mov r8, r8)
 8009f9c:	00030d40 	.word	0x00030d40

08009fa0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009fa8:	250e      	movs	r5, #14
 8009faa:	197b      	adds	r3, r7, r5
 8009fac:	2200      	movs	r2, #0
 8009fae:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009fb0:	197c      	adds	r4, r7, r5
 8009fb2:	4a22      	ldr	r2, [pc, #136]	@ (800a03c <sen5x_read_data_ready+0x9c>)
 8009fb4:	197b      	adds	r3, r7, r5
 8009fb6:	8819      	ldrh	r1, [r3, #0]
 8009fb8:	2308      	movs	r3, #8
 8009fba:	18fb      	adds	r3, r7, r3
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	f001 fac7 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 8009fc2:	0003      	movs	r3, r0
 8009fc4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009fc6:	260c      	movs	r6, #12
 8009fc8:	19bc      	adds	r4, r7, r6
 8009fca:	197b      	adds	r3, r7, r5
 8009fcc:	881a      	ldrh	r2, [r3, #0]
 8009fce:	2308      	movs	r3, #8
 8009fd0:	18fb      	adds	r3, r7, r3
 8009fd2:	0019      	movs	r1, r3
 8009fd4:	2069      	movs	r0, #105	@ 0x69
 8009fd6:	f001 fb3f 	bl	800b658 <sensirion_i2c_write_data>
 8009fda:	0003      	movs	r3, r0
 8009fdc:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009fde:	19bb      	adds	r3, r7, r6
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	5e9b      	ldrsh	r3, [r3, r2]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d003      	beq.n	8009ff0 <sen5x_read_data_ready+0x50>
        return error;
 8009fe8:	19bb      	adds	r3, r7, r6
 8009fea:	2200      	movs	r2, #0
 8009fec:	5e9b      	ldrsh	r3, [r3, r2]
 8009fee:	e020      	b.n	800a032 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009ff0:	4b13      	ldr	r3, [pc, #76]	@ (800a040 <sen5x_read_data_ready+0xa0>)
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	f7ff fd64 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009ff8:	250c      	movs	r5, #12
 8009ffa:	197c      	adds	r4, r7, r5
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	18fb      	adds	r3, r7, r3
 800a000:	2202      	movs	r2, #2
 800a002:	0019      	movs	r1, r3
 800a004:	2069      	movs	r0, #105	@ 0x69
 800a006:	f001 fb3f 	bl	800b688 <sensirion_i2c_read_data_inplace>
 800a00a:	0003      	movs	r3, r0
 800a00c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a00e:	197b      	adds	r3, r7, r5
 800a010:	2200      	movs	r2, #0
 800a012:	5e9b      	ldrsh	r3, [r3, r2]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <sen5x_read_data_ready+0x80>
        return error;
 800a018:	197b      	adds	r3, r7, r5
 800a01a:	2200      	movs	r2, #0
 800a01c:	5e9b      	ldrsh	r3, [r3, r2]
 800a01e:	e008      	b.n	800a032 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800a020:	2308      	movs	r3, #8
 800a022:	18fb      	adds	r3, r7, r3
 800a024:	785b      	ldrb	r3, [r3, #1]
 800a026:	1e5a      	subs	r2, r3, #1
 800a028:	4193      	sbcs	r3, r2
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a030:	2300      	movs	r3, #0
}
 800a032:	0018      	movs	r0, r3
 800a034:	46bd      	mov	sp, r7
 800a036:	b005      	add	sp, #20
 800a038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a03a:	46c0      	nop			@ (mov r8, r8)
 800a03c:	00000202 	.word	0x00000202
 800a040:	00004e20 	.word	0x00004e20

0800a044 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800a044:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a046:	b08d      	sub	sp, #52	@ 0x34
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800a052:	252e      	movs	r5, #46	@ 0x2e
 800a054:	197b      	adds	r3, r7, r5
 800a056:	2200      	movs	r2, #0
 800a058:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800a05a:	197c      	adds	r4, r7, r5
 800a05c:	23f1      	movs	r3, #241	@ 0xf1
 800a05e:	009a      	lsls	r2, r3, #2
 800a060:	197b      	adds	r3, r7, r5
 800a062:	8819      	ldrh	r1, [r3, #0]
 800a064:	2314      	movs	r3, #20
 800a066:	18fb      	adds	r3, r7, r3
 800a068:	0018      	movs	r0, r3
 800a06a:	f001 fa71 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 800a06e:	0003      	movs	r3, r0
 800a070:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a072:	262c      	movs	r6, #44	@ 0x2c
 800a074:	19bc      	adds	r4, r7, r6
 800a076:	197b      	adds	r3, r7, r5
 800a078:	881a      	ldrh	r2, [r3, #0]
 800a07a:	2314      	movs	r3, #20
 800a07c:	18fb      	adds	r3, r7, r3
 800a07e:	0019      	movs	r1, r3
 800a080:	2069      	movs	r0, #105	@ 0x69
 800a082:	f001 fae9 	bl	800b658 <sensirion_i2c_write_data>
 800a086:	0003      	movs	r3, r0
 800a088:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a08a:	19bb      	adds	r3, r7, r6
 800a08c:	2200      	movs	r2, #0
 800a08e:	5e9b      	ldrsh	r3, [r3, r2]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <sen5x_read_measured_values+0x58>
        return error;
 800a094:	19bb      	adds	r3, r7, r6
 800a096:	2200      	movs	r2, #0
 800a098:	5e9b      	ldrsh	r3, [r3, r2]
 800a09a:	e060      	b.n	800a15e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a09c:	4b32      	ldr	r3, [pc, #200]	@ (800a168 <sen5x_read_measured_values+0x124>)
 800a09e:	0018      	movs	r0, r3
 800a0a0:	f7ff fd0e 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800a0a4:	252c      	movs	r5, #44	@ 0x2c
 800a0a6:	197c      	adds	r4, r7, r5
 800a0a8:	2314      	movs	r3, #20
 800a0aa:	18fb      	adds	r3, r7, r3
 800a0ac:	2210      	movs	r2, #16
 800a0ae:	0019      	movs	r1, r3
 800a0b0:	2069      	movs	r0, #105	@ 0x69
 800a0b2:	f001 fae9 	bl	800b688 <sensirion_i2c_read_data_inplace>
 800a0b6:	0003      	movs	r3, r0
 800a0b8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a0ba:	197b      	adds	r3, r7, r5
 800a0bc:	2200      	movs	r2, #0
 800a0be:	5e9b      	ldrsh	r3, [r3, r2]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d003      	beq.n	800a0cc <sen5x_read_measured_values+0x88>
        return error;
 800a0c4:	197b      	adds	r3, r7, r5
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	5e9b      	ldrsh	r3, [r3, r2]
 800a0ca:	e048      	b.n	800a15e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800a0cc:	2414      	movs	r4, #20
 800a0ce:	193b      	adds	r3, r7, r4
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f000 fa79 	bl	800a5c8 <sensirion_common_bytes_to_uint16_t>
 800a0d6:	0003      	movs	r3, r0
 800a0d8:	001a      	movs	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800a0de:	193b      	adds	r3, r7, r4
 800a0e0:	3302      	adds	r3, #2
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f000 fa70 	bl	800a5c8 <sensirion_common_bytes_to_uint16_t>
 800a0e8:	0003      	movs	r3, r0
 800a0ea:	001a      	movs	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800a0f0:	193b      	adds	r3, r7, r4
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	f000 fa67 	bl	800a5c8 <sensirion_common_bytes_to_uint16_t>
 800a0fa:	0003      	movs	r3, r0
 800a0fc:	001a      	movs	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800a102:	193b      	adds	r3, r7, r4
 800a104:	3306      	adds	r3, #6
 800a106:	0018      	movs	r0, r3
 800a108:	f000 fa5e 	bl	800a5c8 <sensirion_common_bytes_to_uint16_t>
 800a10c:	0003      	movs	r3, r0
 800a10e:	001a      	movs	r2, r3
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800a114:	193b      	adds	r3, r7, r4
 800a116:	3308      	adds	r3, #8
 800a118:	0018      	movs	r0, r3
 800a11a:	f000 fa81 	bl	800a620 <sensirion_common_bytes_to_int16_t>
 800a11e:	0003      	movs	r3, r0
 800a120:	001a      	movs	r2, r3
 800a122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a124:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800a126:	193b      	adds	r3, r7, r4
 800a128:	330a      	adds	r3, #10
 800a12a:	0018      	movs	r0, r3
 800a12c:	f000 fa78 	bl	800a620 <sensirion_common_bytes_to_int16_t>
 800a130:	0003      	movs	r3, r0
 800a132:	001a      	movs	r2, r3
 800a134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a136:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800a138:	193b      	adds	r3, r7, r4
 800a13a:	330c      	adds	r3, #12
 800a13c:	0018      	movs	r0, r3
 800a13e:	f000 fa6f 	bl	800a620 <sensirion_common_bytes_to_int16_t>
 800a142:	0003      	movs	r3, r0
 800a144:	001a      	movs	r2, r3
 800a146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a148:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800a14a:	193b      	adds	r3, r7, r4
 800a14c:	330e      	adds	r3, #14
 800a14e:	0018      	movs	r0, r3
 800a150:	f000 fa66 	bl	800a620 <sensirion_common_bytes_to_int16_t>
 800a154:	0003      	movs	r3, r0
 800a156:	001a      	movs	r2, r3
 800a158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a15a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	0018      	movs	r0, r3
 800a160:	46bd      	mov	sp, r7
 800a162:	b00d      	add	sp, #52	@ 0x34
 800a164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a166:	46c0      	nop			@ (mov r8, r8)
 800a168:	00004e20 	.word	0x00004e20

0800a16c <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800a16c:	b590      	push	{r4, r7, lr}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a172:	1dbb      	adds	r3, r7, #6
 800a174:	2200      	movs	r2, #0
 800a176:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800a178:	1dbc      	adds	r4, r7, #6
 800a17a:	4a12      	ldr	r2, [pc, #72]	@ (800a1c4 <sen5x_start_fan_cleaning+0x58>)
 800a17c:	1dbb      	adds	r3, r7, #6
 800a17e:	8819      	ldrh	r1, [r3, #0]
 800a180:	003b      	movs	r3, r7
 800a182:	0018      	movs	r0, r3
 800a184:	f001 f9e4 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 800a188:	0003      	movs	r3, r0
 800a18a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a18c:	1d3c      	adds	r4, r7, #4
 800a18e:	1dbb      	adds	r3, r7, #6
 800a190:	881a      	ldrh	r2, [r3, #0]
 800a192:	003b      	movs	r3, r7
 800a194:	0019      	movs	r1, r3
 800a196:	2069      	movs	r0, #105	@ 0x69
 800a198:	f001 fa5e 	bl	800b658 <sensirion_i2c_write_data>
 800a19c:	0003      	movs	r3, r0
 800a19e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1a0:	1d3b      	adds	r3, r7, #4
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <sen5x_start_fan_cleaning+0x46>
        return error;
 800a1aa:	1d3b      	adds	r3, r7, #4
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	5e9b      	ldrsh	r3, [r3, r2]
 800a1b0:	e004      	b.n	800a1bc <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a1b2:	4b05      	ldr	r3, [pc, #20]	@ (800a1c8 <sen5x_start_fan_cleaning+0x5c>)
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	f7ff fc83 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	0018      	movs	r0, r3
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	b003      	add	sp, #12
 800a1c2:	bd90      	pop	{r4, r7, pc}
 800a1c4:	00005607 	.word	0x00005607
 800a1c8:	00004e20 	.word	0x00004e20

0800a1cc <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	0004      	movs	r4, r0
 800a1d4:	0008      	movs	r0, r1
 800a1d6:	0011      	movs	r1, r2
 800a1d8:	1dbb      	adds	r3, r7, #6
 800a1da:	1c22      	adds	r2, r4, #0
 800a1dc:	801a      	strh	r2, [r3, #0]
 800a1de:	1d3b      	adds	r3, r7, #4
 800a1e0:	1c02      	adds	r2, r0, #0
 800a1e2:	801a      	strh	r2, [r3, #0]
 800a1e4:	1cbb      	adds	r3, r7, #2
 800a1e6:	1c0a      	adds	r2, r1, #0
 800a1e8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a1ea:	2516      	movs	r5, #22
 800a1ec:	197b      	adds	r3, r7, r5
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a1f2:	197c      	adds	r4, r7, r5
 800a1f4:	4a25      	ldr	r2, [pc, #148]	@ (800a28c <sen5x_set_temperature_offset_parameters+0xc0>)
 800a1f6:	197b      	adds	r3, r7, r5
 800a1f8:	8819      	ldrh	r1, [r3, #0]
 800a1fa:	2608      	movs	r6, #8
 800a1fc:	19bb      	adds	r3, r7, r6
 800a1fe:	0018      	movs	r0, r3
 800a200:	f001 f9a6 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 800a204:	0003      	movs	r3, r0
 800a206:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a208:	197c      	adds	r4, r7, r5
 800a20a:	1dbb      	adds	r3, r7, #6
 800a20c:	2200      	movs	r2, #0
 800a20e:	5e9a      	ldrsh	r2, [r3, r2]
 800a210:	197b      	adds	r3, r7, r5
 800a212:	8819      	ldrh	r1, [r3, #0]
 800a214:	19bb      	adds	r3, r7, r6
 800a216:	0018      	movs	r0, r3
 800a218:	f001 fa05 	bl	800b626 <sensirion_i2c_add_int16_t_to_buffer>
 800a21c:	0003      	movs	r3, r0
 800a21e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a220:	197c      	adds	r4, r7, r5
 800a222:	1d3b      	adds	r3, r7, #4
 800a224:	2200      	movs	r2, #0
 800a226:	5e9a      	ldrsh	r2, [r3, r2]
 800a228:	197b      	adds	r3, r7, r5
 800a22a:	8819      	ldrh	r1, [r3, #0]
 800a22c:	19bb      	adds	r3, r7, r6
 800a22e:	0018      	movs	r0, r3
 800a230:	f001 f9f9 	bl	800b626 <sensirion_i2c_add_int16_t_to_buffer>
 800a234:	0003      	movs	r3, r0
 800a236:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a238:	197c      	adds	r4, r7, r5
 800a23a:	1cbb      	adds	r3, r7, #2
 800a23c:	881a      	ldrh	r2, [r3, #0]
 800a23e:	197b      	adds	r3, r7, r5
 800a240:	8819      	ldrh	r1, [r3, #0]
 800a242:	19bb      	adds	r3, r7, r6
 800a244:	0018      	movs	r0, r3
 800a246:	f001 f9af 	bl	800b5a8 <sensirion_i2c_add_uint16_t_to_buffer>
 800a24a:	0003      	movs	r3, r0
 800a24c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a24e:	2214      	movs	r2, #20
 800a250:	18bc      	adds	r4, r7, r2
 800a252:	197b      	adds	r3, r7, r5
 800a254:	881a      	ldrh	r2, [r3, #0]
 800a256:	19bb      	adds	r3, r7, r6
 800a258:	0019      	movs	r1, r3
 800a25a:	2069      	movs	r0, #105	@ 0x69
 800a25c:	f001 f9fc 	bl	800b658 <sensirion_i2c_write_data>
 800a260:	0003      	movs	r3, r0
 800a262:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a264:	2214      	movs	r2, #20
 800a266:	18bb      	adds	r3, r7, r2
 800a268:	2100      	movs	r1, #0
 800a26a:	5e5b      	ldrsh	r3, [r3, r1]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a270:	18bb      	adds	r3, r7, r2
 800a272:	2200      	movs	r2, #0
 800a274:	5e9b      	ldrsh	r3, [r3, r2]
 800a276:	e004      	b.n	800a282 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a278:	4b05      	ldr	r3, [pc, #20]	@ (800a290 <sen5x_set_temperature_offset_parameters+0xc4>)
 800a27a:	0018      	movs	r0, r3
 800a27c:	f7ff fc20 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a280:	2300      	movs	r3, #0
}
 800a282:	0018      	movs	r0, r3
 800a284:	46bd      	mov	sp, r7
 800a286:	b007      	add	sp, #28
 800a288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a28a:	46c0      	nop			@ (mov r8, r8)
 800a28c:	000060b2 	.word	0x000060b2
 800a290:	00004e20 	.word	0x00004e20

0800a294 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a296:	b091      	sub	sp, #68	@ 0x44
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	000a      	movs	r2, r1
 800a29e:	1cfb      	adds	r3, r7, #3
 800a2a0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a2a2:	253e      	movs	r5, #62	@ 0x3e
 800a2a4:	197b      	adds	r3, r7, r5
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a2aa:	197c      	adds	r4, r7, r5
 800a2ac:	4a22      	ldr	r2, [pc, #136]	@ (800a338 <sen5x_get_product_name+0xa4>)
 800a2ae:	197b      	adds	r3, r7, r5
 800a2b0:	8819      	ldrh	r1, [r3, #0]
 800a2b2:	230c      	movs	r3, #12
 800a2b4:	18fb      	adds	r3, r7, r3
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	f001 f94a 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 800a2bc:	0003      	movs	r3, r0
 800a2be:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a2c0:	263c      	movs	r6, #60	@ 0x3c
 800a2c2:	19bc      	adds	r4, r7, r6
 800a2c4:	197b      	adds	r3, r7, r5
 800a2c6:	881a      	ldrh	r2, [r3, #0]
 800a2c8:	230c      	movs	r3, #12
 800a2ca:	18fb      	adds	r3, r7, r3
 800a2cc:	0019      	movs	r1, r3
 800a2ce:	2069      	movs	r0, #105	@ 0x69
 800a2d0:	f001 f9c2 	bl	800b658 <sensirion_i2c_write_data>
 800a2d4:	0003      	movs	r3, r0
 800a2d6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2d8:	19bb      	adds	r3, r7, r6
 800a2da:	2200      	movs	r2, #0
 800a2dc:	5e9b      	ldrsh	r3, [r3, r2]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <sen5x_get_product_name+0x56>
        return error;
 800a2e2:	19bb      	adds	r3, r7, r6
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	5e9b      	ldrsh	r3, [r3, r2]
 800a2e8:	e021      	b.n	800a32e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a2ea:	4b14      	ldr	r3, [pc, #80]	@ (800a33c <sen5x_get_product_name+0xa8>)
 800a2ec:	0018      	movs	r0, r3
 800a2ee:	f7ff fbe7 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a2f2:	253c      	movs	r5, #60	@ 0x3c
 800a2f4:	197c      	adds	r4, r7, r5
 800a2f6:	230c      	movs	r3, #12
 800a2f8:	18fb      	adds	r3, r7, r3
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	0019      	movs	r1, r3
 800a2fe:	2069      	movs	r0, #105	@ 0x69
 800a300:	f001 f9c2 	bl	800b688 <sensirion_i2c_read_data_inplace>
 800a304:	0003      	movs	r3, r0
 800a306:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a308:	197b      	adds	r3, r7, r5
 800a30a:	2200      	movs	r2, #0
 800a30c:	5e9b      	ldrsh	r3, [r3, r2]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <sen5x_get_product_name+0x86>
        return error;
 800a312:	197b      	adds	r3, r7, r5
 800a314:	2200      	movs	r2, #0
 800a316:	5e9b      	ldrsh	r3, [r3, r2]
 800a318:	e009      	b.n	800a32e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a31a:	1cfb      	adds	r3, r7, #3
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b29a      	uxth	r2, r3
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	230c      	movs	r3, #12
 800a324:	18fb      	adds	r3, r7, r3
 800a326:	0018      	movs	r0, r3
 800a328:	f000 f988 	bl	800a63c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	0018      	movs	r0, r3
 800a330:	46bd      	mov	sp, r7
 800a332:	b011      	add	sp, #68	@ 0x44
 800a334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a336:	46c0      	nop			@ (mov r8, r8)
 800a338:	0000d014 	.word	0x0000d014
 800a33c:	0000c350 	.word	0x0000c350

0800a340 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a342:	b091      	sub	sp, #68	@ 0x44
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	000a      	movs	r2, r1
 800a34a:	1cfb      	adds	r3, r7, #3
 800a34c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a34e:	253e      	movs	r5, #62	@ 0x3e
 800a350:	197b      	adds	r3, r7, r5
 800a352:	2200      	movs	r2, #0
 800a354:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a356:	197c      	adds	r4, r7, r5
 800a358:	4a22      	ldr	r2, [pc, #136]	@ (800a3e4 <sen5x_get_serial_number+0xa4>)
 800a35a:	197b      	adds	r3, r7, r5
 800a35c:	8819      	ldrh	r1, [r3, #0]
 800a35e:	230c      	movs	r3, #12
 800a360:	18fb      	adds	r3, r7, r3
 800a362:	0018      	movs	r0, r3
 800a364:	f001 f8f4 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 800a368:	0003      	movs	r3, r0
 800a36a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a36c:	263c      	movs	r6, #60	@ 0x3c
 800a36e:	19bc      	adds	r4, r7, r6
 800a370:	197b      	adds	r3, r7, r5
 800a372:	881a      	ldrh	r2, [r3, #0]
 800a374:	230c      	movs	r3, #12
 800a376:	18fb      	adds	r3, r7, r3
 800a378:	0019      	movs	r1, r3
 800a37a:	2069      	movs	r0, #105	@ 0x69
 800a37c:	f001 f96c 	bl	800b658 <sensirion_i2c_write_data>
 800a380:	0003      	movs	r3, r0
 800a382:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a384:	19bb      	adds	r3, r7, r6
 800a386:	2200      	movs	r2, #0
 800a388:	5e9b      	ldrsh	r3, [r3, r2]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <sen5x_get_serial_number+0x56>
        return error;
 800a38e:	19bb      	adds	r3, r7, r6
 800a390:	2200      	movs	r2, #0
 800a392:	5e9b      	ldrsh	r3, [r3, r2]
 800a394:	e021      	b.n	800a3da <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a396:	4b14      	ldr	r3, [pc, #80]	@ (800a3e8 <sen5x_get_serial_number+0xa8>)
 800a398:	0018      	movs	r0, r3
 800a39a:	f7ff fb91 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a39e:	253c      	movs	r5, #60	@ 0x3c
 800a3a0:	197c      	adds	r4, r7, r5
 800a3a2:	230c      	movs	r3, #12
 800a3a4:	18fb      	adds	r3, r7, r3
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	0019      	movs	r1, r3
 800a3aa:	2069      	movs	r0, #105	@ 0x69
 800a3ac:	f001 f96c 	bl	800b688 <sensirion_i2c_read_data_inplace>
 800a3b0:	0003      	movs	r3, r0
 800a3b2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3b4:	197b      	adds	r3, r7, r5
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	5e9b      	ldrsh	r3, [r3, r2]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <sen5x_get_serial_number+0x86>
        return error;
 800a3be:	197b      	adds	r3, r7, r5
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	5e9b      	ldrsh	r3, [r3, r2]
 800a3c4:	e009      	b.n	800a3da <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a3c6:	1cfb      	adds	r3, r7, #3
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	6879      	ldr	r1, [r7, #4]
 800a3ce:	230c      	movs	r3, #12
 800a3d0:	18fb      	adds	r3, r7, r3
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f000 f932 	bl	800a63c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	0018      	movs	r0, r3
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	b011      	add	sp, #68	@ 0x44
 800a3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e2:	46c0      	nop			@ (mov r8, r8)
 800a3e4:	0000d033 	.word	0x0000d033
 800a3e8:	0000c350 	.word	0x0000c350

0800a3ec <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ee:	b089      	sub	sp, #36	@ 0x24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a3fa:	251e      	movs	r5, #30
 800a3fc:	197b      	adds	r3, r7, r5
 800a3fe:	2200      	movs	r2, #0
 800a400:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a402:	197c      	adds	r4, r7, r5
 800a404:	23d1      	movs	r3, #209	@ 0xd1
 800a406:	021a      	lsls	r2, r3, #8
 800a408:	197b      	adds	r3, r7, r5
 800a40a:	8819      	ldrh	r1, [r3, #0]
 800a40c:	2310      	movs	r3, #16
 800a40e:	18fb      	adds	r3, r7, r3
 800a410:	0018      	movs	r0, r3
 800a412:	f001 f89d 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 800a416:	0003      	movs	r3, r0
 800a418:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a41a:	261c      	movs	r6, #28
 800a41c:	19bc      	adds	r4, r7, r6
 800a41e:	197b      	adds	r3, r7, r5
 800a420:	881a      	ldrh	r2, [r3, #0]
 800a422:	2310      	movs	r3, #16
 800a424:	18fb      	adds	r3, r7, r3
 800a426:	0019      	movs	r1, r3
 800a428:	2069      	movs	r0, #105	@ 0x69
 800a42a:	f001 f915 	bl	800b658 <sensirion_i2c_write_data>
 800a42e:	0003      	movs	r3, r0
 800a430:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a432:	19bb      	adds	r3, r7, r6
 800a434:	2200      	movs	r2, #0
 800a436:	5e9b      	ldrsh	r3, [r3, r2]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d003      	beq.n	800a444 <sen5x_get_version+0x58>
        return error;
 800a43c:	19bb      	adds	r3, r7, r6
 800a43e:	2200      	movs	r2, #0
 800a440:	5e9b      	ldrsh	r3, [r3, r2]
 800a442:	e038      	b.n	800a4b6 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a444:	4b1e      	ldr	r3, [pc, #120]	@ (800a4c0 <sen5x_get_version+0xd4>)
 800a446:	0018      	movs	r0, r3
 800a448:	f7ff fb3a 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a44c:	251c      	movs	r5, #28
 800a44e:	197c      	adds	r4, r7, r5
 800a450:	2310      	movs	r3, #16
 800a452:	18fb      	adds	r3, r7, r3
 800a454:	2208      	movs	r2, #8
 800a456:	0019      	movs	r1, r3
 800a458:	2069      	movs	r0, #105	@ 0x69
 800a45a:	f001 f915 	bl	800b688 <sensirion_i2c_read_data_inplace>
 800a45e:	0003      	movs	r3, r0
 800a460:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a462:	197b      	adds	r3, r7, r5
 800a464:	2200      	movs	r2, #0
 800a466:	5e9b      	ldrsh	r3, [r3, r2]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <sen5x_get_version+0x88>
        return error;
 800a46c:	197b      	adds	r3, r7, r5
 800a46e:	2200      	movs	r2, #0
 800a470:	5e9b      	ldrsh	r3, [r3, r2]
 800a472:	e020      	b.n	800a4b6 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a474:	2110      	movs	r1, #16
 800a476:	187b      	adds	r3, r7, r1
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a47e:	187b      	adds	r3, r7, r1
 800a480:	785a      	ldrb	r2, [r3, #1]
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a486:	187b      	adds	r3, r7, r1
 800a488:	789b      	ldrb	r3, [r3, #2]
 800a48a:	1e5a      	subs	r2, r3, #1
 800a48c:	4193      	sbcs	r3, r2
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a494:	187b      	adds	r3, r7, r1
 800a496:	78da      	ldrb	r2, [r3, #3]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a49c:	187b      	adds	r3, r7, r1
 800a49e:	791a      	ldrb	r2, [r3, #4]
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a4a4:	187b      	adds	r3, r7, r1
 800a4a6:	795a      	ldrb	r2, [r3, #5]
 800a4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4aa:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a4ac:	187b      	adds	r3, r7, r1
 800a4ae:	799a      	ldrb	r2, [r3, #6]
 800a4b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4b2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	b009      	add	sp, #36	@ 0x24
 800a4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4be:	46c0      	nop			@ (mov r8, r8)
 800a4c0:	00004e20 	.word	0x00004e20

0800a4c4 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a4cc:	2516      	movs	r5, #22
 800a4ce:	197b      	adds	r3, r7, r5
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a4d4:	197c      	adds	r4, r7, r5
 800a4d6:	4a22      	ldr	r2, [pc, #136]	@ (800a560 <sen5x_read_device_status+0x9c>)
 800a4d8:	197b      	adds	r3, r7, r5
 800a4da:	8819      	ldrh	r1, [r3, #0]
 800a4dc:	230c      	movs	r3, #12
 800a4de:	18fb      	adds	r3, r7, r3
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f001 f835 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 800a4e6:	0003      	movs	r3, r0
 800a4e8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a4ea:	2614      	movs	r6, #20
 800a4ec:	19bc      	adds	r4, r7, r6
 800a4ee:	197b      	adds	r3, r7, r5
 800a4f0:	881a      	ldrh	r2, [r3, #0]
 800a4f2:	230c      	movs	r3, #12
 800a4f4:	18fb      	adds	r3, r7, r3
 800a4f6:	0019      	movs	r1, r3
 800a4f8:	2069      	movs	r0, #105	@ 0x69
 800a4fa:	f001 f8ad 	bl	800b658 <sensirion_i2c_write_data>
 800a4fe:	0003      	movs	r3, r0
 800a500:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a502:	19bb      	adds	r3, r7, r6
 800a504:	2200      	movs	r2, #0
 800a506:	5e9b      	ldrsh	r3, [r3, r2]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <sen5x_read_device_status+0x50>
        return error;
 800a50c:	19bb      	adds	r3, r7, r6
 800a50e:	2200      	movs	r2, #0
 800a510:	5e9b      	ldrsh	r3, [r3, r2]
 800a512:	e020      	b.n	800a556 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a514:	4b13      	ldr	r3, [pc, #76]	@ (800a564 <sen5x_read_device_status+0xa0>)
 800a516:	0018      	movs	r0, r3
 800a518:	f7ff fad2 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a51c:	2514      	movs	r5, #20
 800a51e:	197c      	adds	r4, r7, r5
 800a520:	230c      	movs	r3, #12
 800a522:	18fb      	adds	r3, r7, r3
 800a524:	2204      	movs	r2, #4
 800a526:	0019      	movs	r1, r3
 800a528:	2069      	movs	r0, #105	@ 0x69
 800a52a:	f001 f8ad 	bl	800b688 <sensirion_i2c_read_data_inplace>
 800a52e:	0003      	movs	r3, r0
 800a530:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a532:	197b      	adds	r3, r7, r5
 800a534:	2200      	movs	r2, #0
 800a536:	5e9b      	ldrsh	r3, [r3, r2]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <sen5x_read_device_status+0x80>
        return error;
 800a53c:	197b      	adds	r3, r7, r5
 800a53e:	2200      	movs	r2, #0
 800a540:	5e9b      	ldrsh	r3, [r3, r2]
 800a542:	e008      	b.n	800a556 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a544:	230c      	movs	r3, #12
 800a546:	18fb      	adds	r3, r7, r3
 800a548:	0018      	movs	r0, r3
 800a54a:	f000 f850 	bl	800a5ee <sensirion_common_bytes_to_uint32_t>
 800a54e:	0002      	movs	r2, r0
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a554:	2300      	movs	r3, #0
}
 800a556:	0018      	movs	r0, r3
 800a558:	46bd      	mov	sp, r7
 800a55a:	b007      	add	sp, #28
 800a55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a55e:	46c0      	nop			@ (mov r8, r8)
 800a560:	0000d206 	.word	0x0000d206
 800a564:	00004e20 	.word	0x00004e20

0800a568 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a568:	b590      	push	{r4, r7, lr}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a56e:	1dbb      	adds	r3, r7, #6
 800a570:	2200      	movs	r2, #0
 800a572:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a574:	1dbc      	adds	r4, r7, #6
 800a576:	4a12      	ldr	r2, [pc, #72]	@ (800a5c0 <sen5x_device_reset+0x58>)
 800a578:	1dbb      	adds	r3, r7, #6
 800a57a:	8819      	ldrh	r1, [r3, #0]
 800a57c:	003b      	movs	r3, r7
 800a57e:	0018      	movs	r0, r3
 800a580:	f000 ffe6 	bl	800b550 <sensirion_i2c_add_command_to_buffer>
 800a584:	0003      	movs	r3, r0
 800a586:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a588:	1d3c      	adds	r4, r7, #4
 800a58a:	1dbb      	adds	r3, r7, #6
 800a58c:	881a      	ldrh	r2, [r3, #0]
 800a58e:	003b      	movs	r3, r7
 800a590:	0019      	movs	r1, r3
 800a592:	2069      	movs	r0, #105	@ 0x69
 800a594:	f001 f860 	bl	800b658 <sensirion_i2c_write_data>
 800a598:	0003      	movs	r3, r0
 800a59a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a59c:	1d3b      	adds	r3, r7, #4
 800a59e:	2200      	movs	r2, #0
 800a5a0:	5e9b      	ldrsh	r3, [r3, r2]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <sen5x_device_reset+0x46>
        return error;
 800a5a6:	1d3b      	adds	r3, r7, #4
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	5e9b      	ldrsh	r3, [r3, r2]
 800a5ac:	e004      	b.n	800a5b8 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a5ae:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <sen5x_device_reset+0x5c>)
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f7ff fa85 	bl	8009ac0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	b003      	add	sp, #12
 800a5be:	bd90      	pop	{r4, r7, pc}
 800a5c0:	0000d304 	.word	0x0000d304
 800a5c4:	00030d40 	.word	0x00030d40

0800a5c8 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	021b      	lsls	r3, r3, #8
 800a5d6:	b21a      	sxth	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	b21b      	sxth	r3, r3
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	b21b      	sxth	r3, r3
 800a5e4:	b29b      	uxth	r3, r3
}
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	b002      	add	sp, #8
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	061a      	lsls	r2, r3, #24
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	3301      	adds	r3, #1
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	041b      	lsls	r3, r3, #16
 800a604:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	3302      	adds	r3, #2
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a60e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	3203      	adds	r2, #3
 800a614:	7812      	ldrb	r2, [r2, #0]
 800a616:	4313      	orrs	r3, r2
}
 800a618:	0018      	movs	r0, r3
 800a61a:	46bd      	mov	sp, r7
 800a61c:	b002      	add	sp, #8
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	0018      	movs	r0, r3
 800a62c:	f7ff ffcc 	bl	800a5c8 <sensirion_common_bytes_to_uint16_t>
 800a630:	0003      	movs	r3, r0
 800a632:	b21b      	sxth	r3, r3
}
 800a634:	0018      	movs	r0, r3
 800a636:	46bd      	mov	sp, r7
 800a638:	b002      	add	sp, #8
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	1dbb      	adds	r3, r7, #6
 800a648:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a64a:	2316      	movs	r3, #22
 800a64c:	18fb      	adds	r3, r7, r3
 800a64e:	2200      	movs	r2, #0
 800a650:	801a      	strh	r2, [r3, #0]
 800a652:	e00f      	b.n	800a674 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a654:	2016      	movs	r0, #22
 800a656:	183b      	adds	r3, r7, r0
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	18d2      	adds	r2, r2, r3
 800a65e:	183b      	adds	r3, r7, r0
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	68b9      	ldr	r1, [r7, #8]
 800a664:	18cb      	adds	r3, r1, r3
 800a666:	7812      	ldrb	r2, [r2, #0]
 800a668:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a66a:	183b      	adds	r3, r7, r0
 800a66c:	881a      	ldrh	r2, [r3, #0]
 800a66e:	183b      	adds	r3, r7, r0
 800a670:	3201      	adds	r2, #1
 800a672:	801a      	strh	r2, [r3, #0]
 800a674:	2316      	movs	r3, #22
 800a676:	18fa      	adds	r2, r7, r3
 800a678:	1dbb      	adds	r3, r7, #6
 800a67a:	8812      	ldrh	r2, [r2, #0]
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d3e8      	bcc.n	800a654 <sensirion_common_copy_bytes+0x18>
    }
}
 800a682:	46c0      	nop			@ (mov r8, r8)
 800a684:	46c0      	nop			@ (mov r8, r8)
 800a686:	46bd      	mov	sp, r7
 800a688:	b006      	add	sp, #24
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d113      	bne.n	800a6d2 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	22fe      	movs	r2, #254	@ 0xfe
 800a6ae:	0592      	lsls	r2, r2, #22
 800a6b0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4a1a      	ldr	r2, [pc, #104]	@ (800a720 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a6b6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	4a1a      	ldr	r2, [pc, #104]	@ (800a724 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a6bc:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	4a19      	ldr	r2, [pc, #100]	@ (800a728 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a6c2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4a19      	ldr	r2, [pc, #100]	@ (800a72c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a6c8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4a18      	ldr	r2, [pc, #96]	@ (800a730 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a6ce:	61da      	str	r2, [r3, #28]
 800a6d0:	e011      	b.n	800a6f6 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	4a17      	ldr	r2, [pc, #92]	@ (800a734 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a6d6:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4a17      	ldr	r2, [pc, #92]	@ (800a738 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a6dc:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	4a16      	ldr	r2, [pc, #88]	@ (800a73c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a6e2:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4a16      	ldr	r2, [pc, #88]	@ (800a740 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a6e8:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4a15      	ldr	r2, [pc, #84]	@ (800a744 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a6ee:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4a15      	ldr	r2, [pc, #84]	@ (800a748 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a6f4:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4a14      	ldr	r2, [pc, #80]	@ (800a74c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a6fa:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4a14      	ldr	r2, [pc, #80]	@ (800a750 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a700:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	4a12      	ldr	r2, [pc, #72]	@ (800a750 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a706:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4a12      	ldr	r2, [pc, #72]	@ (800a754 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a70c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	0018      	movs	r0, r3
 800a712:	f000 f833 	bl	800a77c <GasIndexAlgorithm_reset>
}
 800a716:	46c0      	nop			@ (mov r8, r8)
 800a718:	46bd      	mov	sp, r7
 800a71a:	b004      	add	sp, #16
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	46c0      	nop			@ (mov r8, r8)
 800a720:	00002710 	.word	0x00002710
 800a724:	44340000 	.word	0x44340000
 800a728:	46859800 	.word	0x46859800
 800a72c:	46a05000 	.word	0x46a05000
 800a730:	41f00000 	.word	0x41f00000
 800a734:	42c80000 	.word	0x42c80000
 800a738:	00004e20 	.word	0x00004e20
 800a73c:	43340000 	.word	0x43340000
 800a740:	4528c000 	.word	0x4528c000
 800a744:	45a32000 	.word	0x45a32000
 800a748:	43aa0000 	.word	0x43aa0000
 800a74c:	43660000 	.word	0x43660000
 800a750:	41400000 	.word	0x41400000
 800a754:	42480000 	.word	0x42480000

0800a758 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a762:	4a05      	ldr	r2, [pc, #20]	@ (800a778 <GasIndexAlgorithm_init+0x20>)
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	0018      	movs	r0, r3
 800a76a:	f7ff ff8f 	bl	800a68c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a76e:	46c0      	nop			@ (mov r8, r8)
 800a770:	46bd      	mov	sp, r7
 800a772:	b002      	add	sp, #8
 800a774:	bd80      	pop	{r7, pc}
 800a776:	46c0      	nop			@ (mov r8, r8)
 800a778:	44610000 	.word	0x44610000

0800a77c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	0018      	movs	r0, r3
 800a79a:	f000 f805 	bl	800a7a8 <GasIndexAlgorithm__init_instances>
}
 800a79e:	46c0      	nop			@ (mov r8, r8)
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	b002      	add	sp, #8
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a7a8:	b590      	push	{r4, r7, lr}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	0018      	movs	r0, r3
 800a7b4:	f000 f8e8 	bl	800a988 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	0018      	movs	r0, r3
 800a7bc:	f000 f9a6 	bl	800ab0c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a7c0:	1c04      	adds	r4, r0, #0
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	f000 f9ab 	bl	800ab20 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a7ca:	1c02      	adds	r2, r0, #0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	1c21      	adds	r1, r4, #0
 800a7d0:	0018      	movs	r0, r3
 800a7d2:	f000 fc3b 	bl	800b04c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d107      	bne.n	800a7ee <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a7de:	23fe      	movs	r3, #254	@ 0xfe
 800a7e0:	059b      	lsls	r3, r3, #22
 800a7e2:	4a0a      	ldr	r2, [pc, #40]	@ (800a80c <GasIndexAlgorithm__init_instances+0x64>)
 800a7e4:	490a      	ldr	r1, [pc, #40]	@ (800a810 <GasIndexAlgorithm__init_instances+0x68>)
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fc86 	bl	800b0f8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a7ec:	e005      	b.n	800a7fa <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a7ee:	4b09      	ldr	r3, [pc, #36]	@ (800a814 <GasIndexAlgorithm__init_instances+0x6c>)
 800a7f0:	4a09      	ldr	r2, [pc, #36]	@ (800a818 <GasIndexAlgorithm__init_instances+0x70>)
 800a7f2:	490a      	ldr	r1, [pc, #40]	@ (800a81c <GasIndexAlgorithm__init_instances+0x74>)
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fc7f 	bl	800b0f8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	0018      	movs	r0, r3
 800a7fe:	f000 fd35 	bl	800b26c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a802:	46c0      	nop			@ (mov r8, r8)
 800a804:	46bd      	mov	sp, r7
 800a806:	b003      	add	sp, #12
 800a808:	bd90      	pop	{r4, r7, pc}
 800a80a:	46c0      	nop			@ (mov r8, r8)
 800a80c:	bc257a78 	.word	0xbc257a78
 800a810:	44198000 	.word	0x44198000
 800a814:	42c80000 	.word	0x42c80000
 800a818:	bbd4fdf4 	.word	0xbbd4fdf4
 800a81c:	43550000 	.word	0x43550000

0800a820 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a820:	b590      	push	{r4, r7, lr}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a830:	4952      	ldr	r1, [pc, #328]	@ (800a97c <GasIndexAlgorithm_process+0x15c>)
 800a832:	1c18      	adds	r0, r3, #0
 800a834:	f7f5 fe86 	bl	8000544 <__aeabi_fcmple>
 800a838:	1e03      	subs	r3, r0, #0
 800a83a:	d00c      	beq.n	800a856 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	1c19      	adds	r1, r3, #0
 800a846:	1c10      	adds	r0, r2, #0
 800a848:	f7f6 f83a 	bl	80008c0 <__aeabi_fadd>
 800a84c:	1c03      	adds	r3, r0, #0
 800a84e:	1c1a      	adds	r2, r3, #0
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	631a      	str	r2, [r3, #48]	@ 0x30
 800a854:	e080      	b.n	800a958 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dd25      	ble.n	800a8a8 <GasIndexAlgorithm_process+0x88>
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	4a48      	ldr	r2, [pc, #288]	@ (800a980 <GasIndexAlgorithm_process+0x160>)
 800a860:	4293      	cmp	r3, r2
 800a862:	dc21      	bgt.n	800a8a8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	dc04      	bgt.n	800a878 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	3301      	adds	r3, #1
 800a874:	60bb      	str	r3, [r7, #8]
 800a876:	e00d      	b.n	800a894 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	4a41      	ldr	r2, [pc, #260]	@ (800a984 <GasIndexAlgorithm_process+0x164>)
 800a87e:	4694      	mov	ip, r2
 800a880:	4463      	add	r3, ip
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	429a      	cmp	r2, r3
 800a886:	dd05      	ble.n	800a894 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	4a3d      	ldr	r2, [pc, #244]	@ (800a984 <GasIndexAlgorithm_process+0x164>)
 800a88e:	4694      	mov	ip, r2
 800a890:	4463      	add	r3, ip
 800a892:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	0018      	movs	r0, r3
 800a89e:	f7f6 fe97 	bl	80015d0 <__aeabi_i2f>
 800a8a2:	1c02      	adds	r2, r0, #0
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	0018      	movs	r0, r3
 800a8b4:	f000 f945 	bl	800ab42 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a8b8:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a8ba:	d014      	beq.n	800a8e6 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	1c11      	adds	r1, r2, #0
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	f000 fbd1 	bl	800b06c <GasIndexAlgorithm__mox_model__process>
 800a8ca:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	1c11      	adds	r1, r2, #0
 800a8d8:	0018      	movs	r0, r3
 800a8da:	f000 fc25 	bl	800b128 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a8de:	1c02      	adds	r2, r0, #0
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a8e4:	e003      	b.n	800a8ee <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	1c11      	adds	r1, r2, #0
 800a8f6:	0018      	movs	r0, r3
 800a8f8:	f000 fcec 	bl	800b2d4 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a8fc:	1c02      	adds	r2, r0, #0
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a906:	21fc      	movs	r1, #252	@ 0xfc
 800a908:	0589      	lsls	r1, r1, #22
 800a90a:	1c18      	adds	r0, r3, #0
 800a90c:	f7f5 fe10 	bl	8000530 <__aeabi_fcmplt>
 800a910:	1e03      	subs	r3, r0, #0
 800a912:	d003      	beq.n	800a91c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	22fc      	movs	r2, #252	@ 0xfc
 800a918:	0592      	lsls	r2, r2, #22
 800a91a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a920:	2100      	movs	r1, #0
 800a922:	1c18      	adds	r0, r3, #0
 800a924:	f7f5 fe18 	bl	8000558 <__aeabi_fcmpgt>
 800a928:	1e03      	subs	r3, r0, #0
 800a92a:	d015      	beq.n	800a958 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	1c11      	adds	r1, r2, #0
 800a934:	0018      	movs	r0, r3
 800a936:	f000 fa4f 	bl	800add8 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	0018      	movs	r0, r3
 800a93e:	f000 f8e5 	bl	800ab0c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a942:	1c04      	adds	r4, r0, #0
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	0018      	movs	r0, r3
 800a948:	f000 f8ea 	bl	800ab20 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a94c:	1c02      	adds	r2, r0, #0
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1c21      	adds	r1, r4, #0
 800a952:	0018      	movs	r0, r3
 800a954:	f000 fb7a 	bl	800b04c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95c:	21fc      	movs	r1, #252	@ 0xfc
 800a95e:	0589      	lsls	r1, r1, #22
 800a960:	1c18      	adds	r0, r3, #0
 800a962:	f7f5 ffad 	bl	80008c0 <__aeabi_fadd>
 800a966:	1c03      	adds	r3, r0, #0
 800a968:	1c18      	adds	r0, r3, #0
 800a96a:	f7f6 fe11 	bl	8001590 <__aeabi_f2iz>
 800a96e:	0002      	movs	r2, r0
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
    return;
 800a974:	46c0      	nop			@ (mov r8, r8)
}
 800a976:	46bd      	mov	sp, r7
 800a978:	b005      	add	sp, #20
 800a97a:	bd90      	pop	{r4, r7, pc}
 800a97c:	42340000 	.word	0x42340000
 800a980:	0000fde7 	.word	0x0000fde7
 800a984:	00007fff 	.word	0x00007fff

0800a988 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a988:	b5b0      	push	{r4, r5, r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	223c      	movs	r2, #60	@ 0x3c
 800a994:	2100      	movs	r1, #0
 800a996:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	4952      	ldr	r1, [pc, #328]	@ (800aafc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a9b2:	1c18      	adds	r0, r3, #0
 800a9b4:	f7f6 f90e 	bl	8000bd4 <__aeabi_fdiv>
 800a9b8:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a9ba:	2188      	movs	r1, #136	@ 0x88
 800a9bc:	05c9      	lsls	r1, r1, #23
 800a9be:	1c18      	adds	r0, r3, #0
 800a9c0:	f7f6 faee 	bl	8000fa0 <__aeabi_fmul>
 800a9c4:	1c03      	adds	r3, r0, #0
 800a9c6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	494a      	ldr	r1, [pc, #296]	@ (800aafc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a9d2:	1c18      	adds	r0, r3, #0
 800a9d4:	f7f6 f8fe 	bl	8000bd4 <__aeabi_fdiv>
 800a9d8:	1c03      	adds	r3, r0, #0
 800a9da:	1c19      	adds	r1, r3, #0
 800a9dc:	1c20      	adds	r0, r4, #0
 800a9de:	f7f5 ff6f 	bl	80008c0 <__aeabi_fadd>
 800a9e2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a9e4:	1c19      	adds	r1, r3, #0
 800a9e6:	1c28      	adds	r0, r5, #0
 800a9e8:	f7f6 f8f4 	bl	8000bd4 <__aeabi_fdiv>
 800a9ec:	1c03      	adds	r3, r0, #0
 800a9ee:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	4940      	ldr	r1, [pc, #256]	@ (800aafc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a9fa:	1c18      	adds	r0, r3, #0
 800a9fc:	f7f6 f8ea 	bl	8000bd4 <__aeabi_fdiv>
 800aa00:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800aa02:	2185      	movs	r1, #133	@ 0x85
 800aa04:	05c9      	lsls	r1, r1, #23
 800aa06:	1c18      	adds	r0, r3, #0
 800aa08:	f7f6 faca 	bl	8000fa0 <__aeabi_fmul>
 800aa0c:	1c03      	adds	r3, r0, #0
 800aa0e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	4938      	ldr	r1, [pc, #224]	@ (800aafc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800aa1a:	1c18      	adds	r0, r3, #0
 800aa1c:	f7f6 f8da 	bl	8000bd4 <__aeabi_fdiv>
 800aa20:	1c03      	adds	r3, r0, #0
 800aa22:	1c19      	adds	r1, r3, #0
 800aa24:	1c20      	adds	r0, r4, #0
 800aa26:	f7f5 ff4b 	bl	80008c0 <__aeabi_fadd>
 800aa2a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800aa2c:	1c19      	adds	r1, r3, #0
 800aa2e:	1c28      	adds	r0, r5, #0
 800aa30:	f7f6 f8d0 	bl	8000bd4 <__aeabi_fdiv>
 800aa34:	1c03      	adds	r3, r0, #0
 800aa36:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d118      	bne.n	800aa76 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800aa48:	2188      	movs	r1, #136	@ 0x88
 800aa4a:	05c9      	lsls	r1, r1, #23
 800aa4c:	1c18      	adds	r0, r3, #0
 800aa4e:	f7f6 faa7 	bl	8000fa0 <__aeabi_fmul>
 800aa52:	1c03      	adds	r3, r0, #0
 800aa54:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800aa5a:	4929      	ldr	r1, [pc, #164]	@ (800ab00 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800aa5c:	1c18      	adds	r0, r3, #0
 800aa5e:	f7f5 ff2f 	bl	80008c0 <__aeabi_fadd>
 800aa62:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800aa64:	1c19      	adds	r1, r3, #0
 800aa66:	1c20      	adds	r0, r4, #0
 800aa68:	f7f6 f8b4 	bl	8000bd4 <__aeabi_fdiv>
 800aa6c:	1c03      	adds	r3, r0, #0
 800aa6e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	655a      	str	r2, [r3, #84]	@ 0x54
 800aa74:	e017      	b.n	800aaa6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800aa7a:	2188      	movs	r1, #136	@ 0x88
 800aa7c:	05c9      	lsls	r1, r1, #23
 800aa7e:	1c18      	adds	r0, r3, #0
 800aa80:	f7f6 fa8e 	bl	8000fa0 <__aeabi_fmul>
 800aa84:	1c03      	adds	r3, r0, #0
 800aa86:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800aa8c:	491d      	ldr	r1, [pc, #116]	@ (800ab04 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800aa8e:	1c18      	adds	r0, r3, #0
 800aa90:	f7f5 ff16 	bl	80008c0 <__aeabi_fadd>
 800aa94:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800aa96:	1c19      	adds	r1, r3, #0
 800aa98:	1c20      	adds	r0, r4, #0
 800aa9a:	f7f6 f89b 	bl	8000bd4 <__aeabi_fdiv>
 800aa9e:	1c03      	adds	r3, r0, #0
 800aaa0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800aaaa:	2185      	movs	r1, #133	@ 0x85
 800aaac:	05c9      	lsls	r1, r1, #23
 800aaae:	1c18      	adds	r0, r3, #0
 800aab0:	f7f6 fa76 	bl	8000fa0 <__aeabi_fmul>
 800aab4:	1c03      	adds	r3, r0, #0
 800aab6:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	4912      	ldr	r1, [pc, #72]	@ (800ab08 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800aabe:	1c18      	adds	r0, r3, #0
 800aac0:	f7f5 fefe 	bl	80008c0 <__aeabi_fadd>
 800aac4:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800aac6:	1c19      	adds	r1, r3, #0
 800aac8:	1c20      	adds	r0, r4, #0
 800aaca:	f7f6 f883 	bl	8000bd4 <__aeabi_fdiv>
 800aace:	1c03      	adds	r3, r0, #0
 800aad0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800aaf4:	46c0      	nop			@ (mov r8, r8)
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	b002      	add	sp, #8
 800aafa:	bdb0      	pop	{r4, r5, r7, pc}
 800aafc:	45610000 	.word	0x45610000
 800ab00:	44960000 	.word	0x44960000
 800ab04:	41a00000 	.word	0x41a00000
 800ab08:	451c4000 	.word	0x451c4000

0800ab0c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800ab18:	1c18      	adds	r0, r3, #0
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	b002      	add	sp, #8
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800ab30:	1c19      	adds	r1, r3, #0
 800ab32:	1c10      	adds	r0, r2, #0
 800ab34:	f7f5 fec4 	bl	80008c0 <__aeabi_fadd>
 800ab38:	1c03      	adds	r3, r0, #0
}
 800ab3a:	1c18      	adds	r0, r3, #0
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	b002      	add	sp, #8
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	223c      	movs	r2, #60	@ 0x3c
 800ab4e:	5c9b      	ldrb	r3, [r3, r2]
}
 800ab50:	0018      	movs	r0, r3
 800ab52:	46bd      	mov	sp, r7
 800ab54:	b002      	add	sp, #8
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800ab58:	b5b0      	push	{r4, r5, r7, lr}
 800ab5a:	b08c      	sub	sp, #48	@ 0x30
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800ab64:	1c19      	adds	r1, r3, #0
 800ab66:	4895      	ldr	r0, [pc, #596]	@ (800adbc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800ab68:	f7f6 fb58 	bl	800121c <__aeabi_fsub>
 800ab6c:	1c03      	adds	r3, r0, #0
 800ab6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab74:	1c19      	adds	r1, r3, #0
 800ab76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab78:	f7f5 fcee 	bl	8000558 <__aeabi_fcmpgt>
 800ab7c:	1e03      	subs	r3, r0, #0
 800ab7e:	d00b      	beq.n	800ab98 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ab88:	1c19      	adds	r1, r3, #0
 800ab8a:	1c10      	adds	r0, r2, #0
 800ab8c:	f7f5 fe98 	bl	80008c0 <__aeabi_fadd>
 800ab90:	1c03      	adds	r3, r0, #0
 800ab92:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab9c:	1c19      	adds	r1, r3, #0
 800ab9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aba0:	f7f5 fcda 	bl	8000558 <__aeabi_fcmpgt>
 800aba4:	1e03      	subs	r3, r0, #0
 800aba6:	d00b      	beq.n	800abc0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800abb0:	1c19      	adds	r1, r3, #0
 800abb2:	1c10      	adds	r0, r2, #0
 800abb4:	f7f5 fe84 	bl	80008c0 <__aeabi_fadd>
 800abb8:	1c03      	adds	r3, r0, #0
 800abba:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6959      	ldr	r1, [r3, #20]
 800abc4:	4a7e      	ldr	r2, [pc, #504]	@ (800adc0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	0018      	movs	r0, r3
 800abca:	f000 f9f1 	bl	800afb0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	1c11      	adds	r1, r2, #0
 800abd6:	0018      	movs	r0, r3
 800abd8:	f000 f9fa 	bl	800afd0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800abdc:	1c03      	adds	r3, r0, #0
 800abde:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800abec:	1c19      	adds	r1, r3, #0
 800abee:	1c10      	adds	r0, r2, #0
 800abf0:	f7f6 fb14 	bl	800121c <__aeabi_fsub>
 800abf4:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800abf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abf8:	1c18      	adds	r0, r3, #0
 800abfa:	f7f6 f9d1 	bl	8000fa0 <__aeabi_fmul>
 800abfe:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ac00:	1c19      	adds	r1, r3, #0
 800ac02:	1c20      	adds	r0, r4, #0
 800ac04:	f7f5 fe5c 	bl	80008c0 <__aeabi_fadd>
 800ac08:	1c03      	adds	r3, r0, #0
 800ac0a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ac14:	1c19      	adds	r1, r3, #0
 800ac16:	486b      	ldr	r0, [pc, #428]	@ (800adc4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ac18:	f7f6 fb00 	bl	800121c <__aeabi_fsub>
 800ac1c:	1c03      	adds	r3, r0, #0
 800ac1e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	1c11      	adds	r1, r2, #0
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f000 f9d1 	bl	800afd0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ac2e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ac30:	1c19      	adds	r1, r3, #0
 800ac32:	1c28      	adds	r0, r5, #0
 800ac34:	f7f6 f9b4 	bl	8000fa0 <__aeabi_fmul>
 800ac38:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800ac3a:	1c19      	adds	r1, r3, #0
 800ac3c:	1c20      	adds	r0, r4, #0
 800ac3e:	f7f5 fe3f 	bl	80008c0 <__aeabi_fadd>
 800ac42:	1c03      	adds	r3, r0, #0
 800ac44:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ac46:	4a60      	ldr	r2, [pc, #384]	@ (800adc8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ac48:	6a39      	ldr	r1, [r7, #32]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	f000 f9af 	bl	800afb0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	1c11      	adds	r1, r2, #0
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f000 f9b8 	bl	800afd0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ac60:	1c03      	adds	r3, r0, #0
 800ac62:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800ac64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac66:	69f8      	ldr	r0, [r7, #28]
 800ac68:	f7f6 f99a 	bl	8000fa0 <__aeabi_fmul>
 800ac6c:	1c03      	adds	r3, r0, #0
 800ac6e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6999      	ldr	r1, [r3, #24]
 800ac78:	4a51      	ldr	r2, [pc, #324]	@ (800adc0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	f000 f997 	bl	800afb0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	1c11      	adds	r1, r2, #0
 800ac8a:	0018      	movs	r0, r3
 800ac8c:	f000 f9a0 	bl	800afd0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ac90:	1c03      	adds	r3, r0, #0
 800ac92:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800aca0:	1c19      	adds	r1, r3, #0
 800aca2:	1c10      	adds	r0, r2, #0
 800aca4:	f7f6 faba 	bl	800121c <__aeabi_fsub>
 800aca8:	1c03      	adds	r3, r0, #0
 800acaa:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800acac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acae:	69b8      	ldr	r0, [r7, #24]
 800acb0:	f7f6 fab4 	bl	800121c <__aeabi_fsub>
 800acb4:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800acb6:	1c19      	adds	r1, r3, #0
 800acb8:	1c28      	adds	r0, r5, #0
 800acba:	f7f6 f971 	bl	8000fa0 <__aeabi_fmul>
 800acbe:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800acc0:	1c19      	adds	r1, r3, #0
 800acc2:	1c20      	adds	r0, r4, #0
 800acc4:	f7f5 fdfc 	bl	80008c0 <__aeabi_fadd>
 800acc8:	1c03      	adds	r3, r0, #0
 800acca:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800acd4:	1c19      	adds	r1, r3, #0
 800acd6:	483b      	ldr	r0, [pc, #236]	@ (800adc4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800acd8:	f7f6 faa0 	bl	800121c <__aeabi_fsub>
 800acdc:	1c03      	adds	r3, r0, #0
 800acde:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	1c11      	adds	r1, r2, #0
 800ace8:	0018      	movs	r0, r3
 800acea:	f000 f971 	bl	800afd0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800acee:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800acf0:	1c19      	adds	r1, r3, #0
 800acf2:	1c28      	adds	r0, r5, #0
 800acf4:	f7f6 f954 	bl	8000fa0 <__aeabi_fmul>
 800acf8:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800acfa:	1c19      	adds	r1, r3, #0
 800acfc:	1c20      	adds	r0, r4, #0
 800acfe:	f7f5 fddf 	bl	80008c0 <__aeabi_fadd>
 800ad02:	1c03      	adds	r3, r0, #0
 800ad04:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ad06:	4a30      	ldr	r2, [pc, #192]	@ (800adc8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ad08:	6939      	ldr	r1, [r7, #16]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	f000 f94f 	bl	800afb0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	1c11      	adds	r1, r2, #0
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	f000 f958 	bl	800afd0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ad20:	1c03      	adds	r3, r0, #0
 800ad22:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800ad24:	6979      	ldr	r1, [r7, #20]
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f7f6 f93a 	bl	8000fa0 <__aeabi_fmul>
 800ad2c:	1c03      	adds	r3, r0, #0
 800ad2e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	4923      	ldr	r1, [pc, #140]	@ (800adcc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800ad3e:	1c18      	adds	r0, r3, #0
 800ad40:	f7f5 ff48 	bl	8000bd4 <__aeabi_fdiv>
 800ad44:	1c03      	adds	r3, r0, #0
 800ad46:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800ad48:	69f9      	ldr	r1, [r7, #28]
 800ad4a:	20fe      	movs	r0, #254	@ 0xfe
 800ad4c:	0580      	lsls	r0, r0, #22
 800ad4e:	f7f6 fa65 	bl	800121c <__aeabi_fsub>
 800ad52:	1c03      	adds	r3, r0, #0
 800ad54:	491e      	ldr	r1, [pc, #120]	@ (800add0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ad56:	1c18      	adds	r0, r3, #0
 800ad58:	f7f6 f922 	bl	8000fa0 <__aeabi_fmul>
 800ad5c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ad5e:	491d      	ldr	r1, [pc, #116]	@ (800add4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800ad60:	1c18      	adds	r0, r3, #0
 800ad62:	f7f6 fa5b 	bl	800121c <__aeabi_fsub>
 800ad66:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800ad68:	1c19      	adds	r1, r3, #0
 800ad6a:	1c28      	adds	r0, r5, #0
 800ad6c:	f7f6 f918 	bl	8000fa0 <__aeabi_fmul>
 800ad70:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ad72:	1c19      	adds	r1, r3, #0
 800ad74:	1c20      	adds	r0, r4, #0
 800ad76:	f7f5 fda3 	bl	80008c0 <__aeabi_fadd>
 800ad7a:	1c03      	adds	r3, r0, #0
 800ad7c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad86:	2100      	movs	r1, #0
 800ad88:	1c18      	adds	r0, r3, #0
 800ad8a:	f7f5 fbd1 	bl	8000530 <__aeabi_fcmplt>
 800ad8e:	1e03      	subs	r3, r0, #0
 800ad90:	d002      	beq.n	800ad98 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ada0:	1c19      	adds	r1, r3, #0
 800ada2:	1c10      	adds	r0, r2, #0
 800ada4:	f7f5 fbd8 	bl	8000558 <__aeabi_fcmpgt>
 800ada8:	1e03      	subs	r3, r0, #0
 800adaa:	d100      	bne.n	800adae <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800adac:	e002      	b.n	800adb4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800adb4:	46c0      	nop			@ (mov r8, r8)
 800adb6:	46bd      	mov	sp, r7
 800adb8:	b00c      	add	sp, #48	@ 0x30
 800adba:	bdb0      	pop	{r4, r5, r7, pc}
 800adbc:	46fffe00 	.word	0x46fffe00
 800adc0:	3c23d70a 	.word	0x3c23d70a
 800adc4:	43ff0000 	.word	0x43ff0000
 800adc8:	3db851ec 	.word	0x3db851ec
 800adcc:	42700000 	.word	0x42700000
 800add0:	3fa66666 	.word	0x3fa66666
 800add4:	3e99999a 	.word	0x3e99999a

0800add8 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800add8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adda:	b087      	sub	sp, #28
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	223c      	movs	r2, #60	@ 0x3c
 800ade6:	5c9b      	ldrb	r3, [r3, r2]
 800ade8:	2201      	movs	r2, #1
 800adea:	4053      	eors	r3, r2
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00a      	beq.n	800ae08 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	223c      	movs	r2, #60	@ 0x3c
 800adf6:	2101      	movs	r1, #1
 800adf8:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800ae06:	e0c8      	b.n	800af9a <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae0c:	4965      	ldr	r1, [pc, #404]	@ (800afa4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800ae0e:	1c18      	adds	r0, r3, #0
 800ae10:	f7f5 fbac 	bl	800056c <__aeabi_fcmpge>
 800ae14:	1e03      	subs	r3, r0, #0
 800ae16:	d107      	bne.n	800ae28 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ae1c:	4962      	ldr	r1, [pc, #392]	@ (800afa8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800ae1e:	1c18      	adds	r0, r3, #0
 800ae20:	f7f5 fb90 	bl	8000544 <__aeabi_fcmple>
 800ae24:	1e03      	subs	r3, r0, #0
 800ae26:	d00e      	beq.n	800ae46 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ae30:	1c19      	adds	r1, r3, #0
 800ae32:	1c10      	adds	r0, r2, #0
 800ae34:	f7f5 fd44 	bl	80008c0 <__aeabi_fadd>
 800ae38:	1c03      	adds	r3, r0, #0
 800ae3a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae4a:	1c19      	adds	r1, r3, #0
 800ae4c:	6838      	ldr	r0, [r7, #0]
 800ae4e:	f7f6 f9e5 	bl	800121c <__aeabi_fsub>
 800ae52:	1c03      	adds	r3, r0, #0
 800ae54:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	0018      	movs	r0, r3
 800ae5a:	f7ff fe7d 	bl	800ab58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae62:	1c19      	adds	r1, r3, #0
 800ae64:	6838      	ldr	r0, [r7, #0]
 800ae66:	f7f6 f9d9 	bl	800121c <__aeabi_fsub>
 800ae6a:	1c03      	adds	r3, r0, #0
 800ae6c:	2185      	movs	r1, #133	@ 0x85
 800ae6e:	05c9      	lsls	r1, r1, #23
 800ae70:	1c18      	adds	r0, r3, #0
 800ae72:	f7f5 feaf 	bl	8000bd4 <__aeabi_fdiv>
 800ae76:	1c03      	adds	r3, r0, #0
 800ae78:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f7f5 fb57 	bl	8000530 <__aeabi_fcmplt>
 800ae82:	1e03      	subs	r3, r0, #0
 800ae84:	d008      	beq.n	800ae98 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	1c18      	adds	r0, r3, #0
 800ae8e:	f7f6 f9c5 	bl	800121c <__aeabi_fsub>
 800ae92:	1c03      	adds	r3, r0, #0
 800ae94:	617b      	str	r3, [r7, #20]
 800ae96:	e007      	b.n	800aea8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae9c:	1c19      	adds	r1, r3, #0
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7f5 fd0e 	bl	80008c0 <__aeabi_fadd>
 800aea4:	1c03      	adds	r3, r0, #0
 800aea6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800aea8:	23fe      	movs	r3, #254	@ 0xfe
 800aeaa:	059b      	lsls	r3, r3, #22
 800aeac:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800aeae:	493f      	ldr	r1, [pc, #252]	@ (800afac <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800aeb0:	6978      	ldr	r0, [r7, #20]
 800aeb2:	f7f5 fb51 	bl	8000558 <__aeabi_fcmpgt>
 800aeb6:	1e03      	subs	r3, r0, #0
 800aeb8:	d010      	beq.n	800aedc <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800aeba:	493c      	ldr	r1, [pc, #240]	@ (800afac <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800aebc:	6978      	ldr	r0, [r7, #20]
 800aebe:	f7f5 fe89 	bl	8000bd4 <__aeabi_fdiv>
 800aec2:	1c03      	adds	r3, r0, #0
 800aec4:	1c1c      	adds	r4, r3, #0
 800aec6:	4939      	ldr	r1, [pc, #228]	@ (800afac <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800aec8:	6978      	ldr	r0, [r7, #20]
 800aeca:	f7f5 fe83 	bl	8000bd4 <__aeabi_fdiv>
 800aece:	1c03      	adds	r3, r0, #0
 800aed0:	1c19      	adds	r1, r3, #0
 800aed2:	1c20      	adds	r0, r4, #0
 800aed4:	f7f6 f864 	bl	8000fa0 <__aeabi_fmul>
 800aed8:	1c03      	adds	r3, r0, #0
 800aeda:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800aee0:	1c19      	adds	r1, r3, #0
 800aee2:	2085      	movs	r0, #133	@ 0x85
 800aee4:	05c0      	lsls	r0, r0, #23
 800aee6:	f7f6 f999 	bl	800121c <__aeabi_fsub>
 800aeea:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800aeec:	6939      	ldr	r1, [r7, #16]
 800aeee:	1c18      	adds	r0, r3, #0
 800aef0:	f7f6 f856 	bl	8000fa0 <__aeabi_fmul>
 800aef4:	1c03      	adds	r3, r0, #0
 800aef6:	1c18      	adds	r0, r3, #0
 800aef8:	f017 fff4 	bl	8022ee4 <sqrtf>
 800aefc:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800af06:	2185      	movs	r1, #133	@ 0x85
 800af08:	05c9      	lsls	r1, r1, #23
 800af0a:	6938      	ldr	r0, [r7, #16]
 800af0c:	f7f6 f848 	bl	8000fa0 <__aeabi_fmul>
 800af10:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800af12:	1c19      	adds	r1, r3, #0
 800af14:	1c28      	adds	r0, r5, #0
 800af16:	f7f5 fe5d 	bl	8000bd4 <__aeabi_fdiv>
 800af1a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800af1c:	1c19      	adds	r1, r3, #0
 800af1e:	1c20      	adds	r0, r4, #0
 800af20:	f7f6 f83e 	bl	8000fa0 <__aeabi_fmul>
 800af24:	1c03      	adds	r3, r0, #0
 800af26:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	1c18      	adds	r0, r3, #0
 800af30:	f7f6 f836 	bl	8000fa0 <__aeabi_fmul>
 800af34:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800af36:	6939      	ldr	r1, [r7, #16]
 800af38:	1c18      	adds	r0, r3, #0
 800af3a:	f7f5 fe4b 	bl	8000bd4 <__aeabi_fdiv>
 800af3e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800af40:	68f9      	ldr	r1, [r7, #12]
 800af42:	1c18      	adds	r0, r3, #0
 800af44:	f7f6 f82c 	bl	8000fa0 <__aeabi_fmul>
 800af48:	1c03      	adds	r3, r0, #0
             sqrtf(
 800af4a:	1c19      	adds	r1, r3, #0
 800af4c:	1c20      	adds	r0, r4, #0
 800af4e:	f7f5 fcb7 	bl	80008c0 <__aeabi_fadd>
 800af52:	1c03      	adds	r3, r0, #0
 800af54:	1c18      	adds	r0, r3, #0
 800af56:	f017 ffc5 	bl	8022ee4 <sqrtf>
 800af5a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800af5c:	1c19      	adds	r1, r3, #0
 800af5e:	1c30      	adds	r0, r6, #0
 800af60:	f7f6 f81e 	bl	8000fa0 <__aeabi_fmul>
 800af64:	1c03      	adds	r3, r0, #0
 800af66:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af74:	68f9      	ldr	r1, [r7, #12]
 800af76:	1c18      	adds	r0, r3, #0
 800af78:	f7f6 f812 	bl	8000fa0 <__aeabi_fmul>
 800af7c:	1c03      	adds	r3, r0, #0
 800af7e:	2182      	movs	r1, #130	@ 0x82
 800af80:	05c9      	lsls	r1, r1, #23
 800af82:	1c18      	adds	r0, r3, #0
 800af84:	f7f5 fe26 	bl	8000bd4 <__aeabi_fdiv>
 800af88:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800af8a:	1c19      	adds	r1, r3, #0
 800af8c:	1c20      	adds	r0, r4, #0
 800af8e:	f7f5 fc97 	bl	80008c0 <__aeabi_fadd>
 800af92:	1c03      	adds	r3, r0, #0
 800af94:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800af9a:	46c0      	nop			@ (mov r8, r8)
 800af9c:	46bd      	mov	sp, r7
 800af9e:	b007      	add	sp, #28
 800afa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa2:	46c0      	nop			@ (mov r8, r8)
 800afa4:	42c80000 	.word	0x42c80000
 800afa8:	c2c80000 	.word	0xc2c80000
 800afac:	44b40000 	.word	0x44b40000

0800afb0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afc8:	46c0      	nop			@ (mov r8, r8)
 800afca:	46bd      	mov	sp, r7
 800afcc:	b004      	add	sp, #16
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800afd0:	b590      	push	{r4, r7, lr}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afe2:	1c19      	adds	r1, r3, #0
 800afe4:	6838      	ldr	r0, [r7, #0]
 800afe6:	f7f6 f919 	bl	800121c <__aeabi_fsub>
 800afea:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800afec:	1c19      	adds	r1, r3, #0
 800afee:	1c20      	adds	r0, r4, #0
 800aff0:	f7f5 ffd6 	bl	8000fa0 <__aeabi_fmul>
 800aff4:	1c03      	adds	r3, r0, #0
 800aff6:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800aff8:	4912      	ldr	r1, [pc, #72]	@ (800b044 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f7f5 fa98 	bl	8000530 <__aeabi_fcmplt>
 800b000:	1e03      	subs	r3, r0, #0
 800b002:	d002      	beq.n	800b00a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800b004:	23fe      	movs	r3, #254	@ 0xfe
 800b006:	059b      	lsls	r3, r3, #22
 800b008:	e018      	b.n	800b03c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800b00a:	490f      	ldr	r1, [pc, #60]	@ (800b048 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7f5 faa3 	bl	8000558 <__aeabi_fcmpgt>
 800b012:	1e03      	subs	r3, r0, #0
 800b014:	d001      	beq.n	800b01a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800b016:	2300      	movs	r3, #0
 800b018:	e010      	b.n	800b03c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	1c18      	adds	r0, r3, #0
 800b01e:	f017 ff39 	bl	8022e94 <expf>
 800b022:	1c03      	adds	r3, r0, #0
 800b024:	21fe      	movs	r1, #254	@ 0xfe
 800b026:	0589      	lsls	r1, r1, #22
 800b028:	1c18      	adds	r0, r3, #0
 800b02a:	f7f5 fc49 	bl	80008c0 <__aeabi_fadd>
 800b02e:	1c03      	adds	r3, r0, #0
 800b030:	1c19      	adds	r1, r3, #0
 800b032:	20fe      	movs	r0, #254	@ 0xfe
 800b034:	0580      	lsls	r0, r0, #22
 800b036:	f7f5 fdcd 	bl	8000bd4 <__aeabi_fdiv>
 800b03a:	1c03      	adds	r3, r0, #0
    }
}
 800b03c:	1c18      	adds	r0, r3, #0
 800b03e:	46bd      	mov	sp, r7
 800b040:	b005      	add	sp, #20
 800b042:	bd90      	pop	{r4, r7, pc}
 800b044:	c2480000 	.word	0xc2480000
 800b048:	42480000 	.word	0x42480000

0800b04c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b064:	46c0      	nop			@ (mov r8, r8)
 800b066:	46bd      	mov	sp, r7
 800b068:	b004      	add	sp, #16
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800b06c:	b590      	push	{r4, r7, lr}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d114      	bne.n	800b0a8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b082:	1c19      	adds	r1, r3, #0
 800b084:	6838      	ldr	r0, [r7, #0]
 800b086:	f7f6 f8c9 	bl	800121c <__aeabi_fsub>
 800b08a:	1c03      	adds	r3, r0, #0
 800b08c:	4918      	ldr	r1, [pc, #96]	@ (800b0f0 <GasIndexAlgorithm__mox_model__process+0x84>)
 800b08e:	1c18      	adds	r0, r3, #0
 800b090:	f7f5 fda0 	bl	8000bd4 <__aeabi_fdiv>
 800b094:	1c03      	adds	r3, r0, #0
 800b096:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800b09c:	1c19      	adds	r1, r3, #0
 800b09e:	1c10      	adds	r0, r2, #0
 800b0a0:	f7f5 ff7e 	bl	8000fa0 <__aeabi_fmul>
 800b0a4:	1c03      	adds	r3, r0, #0
 800b0a6:	e01f      	b.n	800b0e8 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0ac:	1c19      	adds	r1, r3, #0
 800b0ae:	6838      	ldr	r0, [r7, #0]
 800b0b0:	f7f6 f8b4 	bl	800121c <__aeabi_fsub>
 800b0b4:	1c03      	adds	r3, r0, #0
 800b0b6:	1c1a      	adds	r2, r3, #0
 800b0b8:	2380      	movs	r3, #128	@ 0x80
 800b0ba:	061b      	lsls	r3, r3, #24
 800b0bc:	4053      	eors	r3, r2
 800b0be:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0c4:	490b      	ldr	r1, [pc, #44]	@ (800b0f4 <GasIndexAlgorithm__mox_model__process+0x88>)
 800b0c6:	1c18      	adds	r0, r3, #0
 800b0c8:	f7f5 fbfa 	bl	80008c0 <__aeabi_fadd>
 800b0cc:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b0ce:	1c19      	adds	r1, r3, #0
 800b0d0:	1c20      	adds	r0, r4, #0
 800b0d2:	f7f5 fd7f 	bl	8000bd4 <__aeabi_fdiv>
 800b0d6:	1c03      	adds	r3, r0, #0
 800b0d8:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800b0de:	1c19      	adds	r1, r3, #0
 800b0e0:	1c10      	adds	r0, r2, #0
 800b0e2:	f7f5 ff5d 	bl	8000fa0 <__aeabi_fmul>
 800b0e6:	1c03      	adds	r3, r0, #0
    }
}
 800b0e8:	1c18      	adds	r0, r3, #0
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	b003      	add	sp, #12
 800b0ee:	bd90      	pop	{r4, r7, pc}
 800b0f0:	44fa0000 	.word	0x44fa0000
 800b0f4:	435c0000 	.word	0x435c0000

0800b0f8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
 800b104:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2180      	movs	r1, #128	@ 0x80
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2184      	movs	r1, #132	@ 0x84
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2188      	movs	r1, #136	@ 0x88
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	505a      	str	r2, [r3, r1]
}
 800b11e:	46c0      	nop			@ (mov r8, r8)
 800b120:	46bd      	mov	sp, r7
 800b122:	b004      	add	sp, #16
 800b124:	bd80      	pop	{r7, pc}
	...

0800b128 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2280      	movs	r2, #128	@ 0x80
 800b136:	589c      	ldr	r4, [r3, r2]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2284      	movs	r2, #132	@ 0x84
 800b13c:	589b      	ldr	r3, [r3, r2]
 800b13e:	1c19      	adds	r1, r3, #0
 800b140:	6838      	ldr	r0, [r7, #0]
 800b142:	f7f6 f86b 	bl	800121c <__aeabi_fsub>
 800b146:	1c03      	adds	r3, r0, #0
 800b148:	1c19      	adds	r1, r3, #0
 800b14a:	1c20      	adds	r0, r4, #0
 800b14c:	f7f5 ff28 	bl	8000fa0 <__aeabi_fmul>
 800b150:	1c03      	adds	r3, r0, #0
 800b152:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800b154:	4940      	ldr	r1, [pc, #256]	@ (800b258 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800b156:	68b8      	ldr	r0, [r7, #8]
 800b158:	f7f5 f9ea 	bl	8000530 <__aeabi_fcmplt>
 800b15c:	1e03      	subs	r3, r0, #0
 800b15e:	d001      	beq.n	800b164 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800b160:	4b3e      	ldr	r3, [pc, #248]	@ (800b25c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b162:	e075      	b.n	800b250 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800b164:	493e      	ldr	r1, [pc, #248]	@ (800b260 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800b166:	68b8      	ldr	r0, [r7, #8]
 800b168:	f7f5 f9f6 	bl	8000558 <__aeabi_fcmpgt>
 800b16c:	1e03      	subs	r3, r0, #0
 800b16e:	d001      	beq.n	800b174 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800b170:	2300      	movs	r3, #0
 800b172:	e06d      	b.n	800b250 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800b174:	2100      	movs	r1, #0
 800b176:	6838      	ldr	r0, [r7, #0]
 800b178:	f7f5 f9f8 	bl	800056c <__aeabi_fcmpge>
 800b17c:	1e03      	subs	r3, r0, #0
 800b17e:	d047      	beq.n	800b210 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2288      	movs	r2, #136	@ 0x88
 800b184:	589b      	ldr	r3, [r3, r2]
 800b186:	21fe      	movs	r1, #254	@ 0xfe
 800b188:	0589      	lsls	r1, r1, #22
 800b18a:	1c18      	adds	r0, r3, #0
 800b18c:	f7f5 f9ca 	bl	8000524 <__aeabi_fcmpeq>
 800b190:	1e03      	subs	r3, r0, #0
 800b192:	d00e      	beq.n	800b1b2 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	1c19      	adds	r1, r3, #0
 800b19a:	20fe      	movs	r0, #254	@ 0xfe
 800b19c:	0580      	lsls	r0, r0, #22
 800b19e:	f7f6 f83d 	bl	800121c <__aeabi_fsub>
 800b1a2:	1c03      	adds	r3, r0, #0
 800b1a4:	492f      	ldr	r1, [pc, #188]	@ (800b264 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800b1a6:	1c18      	adds	r0, r3, #0
 800b1a8:	f7f5 fefa 	bl	8000fa0 <__aeabi_fmul>
 800b1ac:	1c03      	adds	r3, r0, #0
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	e012      	b.n	800b1d8 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	492c      	ldr	r1, [pc, #176]	@ (800b268 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800b1b8:	1c18      	adds	r0, r3, #0
 800b1ba:	f7f5 fef1 	bl	8000fa0 <__aeabi_fmul>
 800b1be:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b1c0:	1c19      	adds	r1, r3, #0
 800b1c2:	4826      	ldr	r0, [pc, #152]	@ (800b25c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b1c4:	f7f6 f82a 	bl	800121c <__aeabi_fsub>
 800b1c8:	1c03      	adds	r3, r0, #0
 800b1ca:	2181      	movs	r1, #129	@ 0x81
 800b1cc:	05c9      	lsls	r1, r1, #23
 800b1ce:	1c18      	adds	r0, r3, #0
 800b1d0:	f7f5 fd00 	bl	8000bd4 <__aeabi_fdiv>
 800b1d4:	1c03      	adds	r3, r0, #0
 800b1d6:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b1d8:	4920      	ldr	r1, [pc, #128]	@ (800b25c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f7f5 fb70 	bl	80008c0 <__aeabi_fadd>
 800b1e0:	1c03      	adds	r3, r0, #0
 800b1e2:	1c1c      	adds	r4, r3, #0
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	1c18      	adds	r0, r3, #0
 800b1e8:	f017 fe54 	bl	8022e94 <expf>
 800b1ec:	1c03      	adds	r3, r0, #0
 800b1ee:	21fe      	movs	r1, #254	@ 0xfe
 800b1f0:	0589      	lsls	r1, r1, #22
 800b1f2:	1c18      	adds	r0, r3, #0
 800b1f4:	f7f5 fb64 	bl	80008c0 <__aeabi_fadd>
 800b1f8:	1c03      	adds	r3, r0, #0
 800b1fa:	1c19      	adds	r1, r3, #0
 800b1fc:	1c20      	adds	r0, r4, #0
 800b1fe:	f7f5 fce9 	bl	8000bd4 <__aeabi_fdiv>
 800b202:	1c03      	adds	r3, r0, #0
 800b204:	68f9      	ldr	r1, [r7, #12]
 800b206:	1c18      	adds	r0, r3, #0
 800b208:	f7f6 f808 	bl	800121c <__aeabi_fsub>
 800b20c:	1c03      	adds	r3, r0, #0
 800b20e:	e01f      	b.n	800b250 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2188      	movs	r1, #136	@ 0x88
 800b218:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b21a:	1c19      	adds	r1, r3, #0
 800b21c:	1c10      	adds	r0, r2, #0
 800b21e:	f7f5 fcd9 	bl	8000bd4 <__aeabi_fdiv>
 800b222:	1c03      	adds	r3, r0, #0
 800b224:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	1c18      	adds	r0, r3, #0
 800b22a:	f017 fe33 	bl	8022e94 <expf>
 800b22e:	1c03      	adds	r3, r0, #0
 800b230:	21fe      	movs	r1, #254	@ 0xfe
 800b232:	0589      	lsls	r1, r1, #22
 800b234:	1c18      	adds	r0, r3, #0
 800b236:	f7f5 fb43 	bl	80008c0 <__aeabi_fadd>
 800b23a:	1c03      	adds	r3, r0, #0
 800b23c:	1c19      	adds	r1, r3, #0
 800b23e:	4807      	ldr	r0, [pc, #28]	@ (800b25c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b240:	f7f5 fcc8 	bl	8000bd4 <__aeabi_fdiv>
 800b244:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b246:	1c19      	adds	r1, r3, #0
 800b248:	1c20      	adds	r0, r4, #0
 800b24a:	f7f5 fea9 	bl	8000fa0 <__aeabi_fmul>
 800b24e:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b250:	1c18      	adds	r0, r3, #0
 800b252:	46bd      	mov	sp, r7
 800b254:	b005      	add	sp, #20
 800b256:	bd90      	pop	{r4, r7, pc}
 800b258:	c2480000 	.word	0xc2480000
 800b25c:	43fa0000 	.word	0x43fa0000
 800b260:	42480000 	.word	0x42480000
 800b264:	3f8041ab 	.word	0x3f8041ab
 800b268:	40a00000 	.word	0x40a00000

0800b26c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b26c:	b590      	push	{r4, r7, lr}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	4913      	ldr	r1, [pc, #76]	@ (800b2cc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b27e:	1c18      	adds	r0, r3, #0
 800b280:	f7f5 fb1e 	bl	80008c0 <__aeabi_fadd>
 800b284:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b286:	1c19      	adds	r1, r3, #0
 800b288:	1c20      	adds	r0, r4, #0
 800b28a:	f7f5 fca3 	bl	8000bd4 <__aeabi_fdiv>
 800b28e:	1c03      	adds	r3, r0, #0
 800b290:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	228c      	movs	r2, #140	@ 0x8c
 800b296:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	490b      	ldr	r1, [pc, #44]	@ (800b2d0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b2a2:	1c18      	adds	r0, r3, #0
 800b2a4:	f7f5 fb0c 	bl	80008c0 <__aeabi_fadd>
 800b2a8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b2aa:	1c19      	adds	r1, r3, #0
 800b2ac:	1c20      	adds	r0, r4, #0
 800b2ae:	f7f5 fc91 	bl	8000bd4 <__aeabi_fdiv>
 800b2b2:	1c03      	adds	r3, r0, #0
 800b2b4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2290      	movs	r2, #144	@ 0x90
 800b2ba:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2294      	movs	r2, #148	@ 0x94
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	5499      	strb	r1, [r3, r2]
}
 800b2c4:	46c0      	nop			@ (mov r8, r8)
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	b003      	add	sp, #12
 800b2ca:	bd90      	pop	{r4, r7, pc}
 800b2cc:	41a00000 	.word	0x41a00000
 800b2d0:	43fa0000 	.word	0x43fa0000

0800b2d4 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b2d4:	b590      	push	{r4, r7, lr}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2294      	movs	r2, #148	@ 0x94
 800b2e2:	5c9b      	ldrb	r3, [r3, r2]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	4053      	eors	r3, r2
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00f      	beq.n	800b30e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2198      	movs	r1, #152	@ 0x98
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	219c      	movs	r1, #156	@ 0x9c
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	21a0      	movs	r1, #160	@ 0xa0
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2294      	movs	r2, #148	@ 0x94
 800b30a:	2101      	movs	r1, #1
 800b30c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	228c      	movs	r2, #140	@ 0x8c
 800b312:	589b      	ldr	r3, [r3, r2]
 800b314:	1c19      	adds	r1, r3, #0
 800b316:	20fe      	movs	r0, #254	@ 0xfe
 800b318:	0580      	lsls	r0, r0, #22
 800b31a:	f7f5 ff7f 	bl	800121c <__aeabi_fsub>
 800b31e:	1c03      	adds	r3, r0, #0
 800b320:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2298      	movs	r2, #152	@ 0x98
 800b326:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b328:	1c19      	adds	r1, r3, #0
 800b32a:	f7f5 fe39 	bl	8000fa0 <__aeabi_fmul>
 800b32e:	1c03      	adds	r3, r0, #0
 800b330:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	228c      	movs	r2, #140	@ 0x8c
 800b336:	589b      	ldr	r3, [r3, r2]
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	1c18      	adds	r0, r3, #0
 800b33c:	f7f5 fe30 	bl	8000fa0 <__aeabi_fmul>
 800b340:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b342:	1c19      	adds	r1, r3, #0
 800b344:	1c20      	adds	r0, r4, #0
 800b346:	f7f5 fabb 	bl	80008c0 <__aeabi_fadd>
 800b34a:	1c03      	adds	r3, r0, #0
 800b34c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2298      	movs	r2, #152	@ 0x98
 800b352:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2290      	movs	r2, #144	@ 0x90
 800b358:	589b      	ldr	r3, [r3, r2]
 800b35a:	1c19      	adds	r1, r3, #0
 800b35c:	20fe      	movs	r0, #254	@ 0xfe
 800b35e:	0580      	lsls	r0, r0, #22
 800b360:	f7f5 ff5c 	bl	800121c <__aeabi_fsub>
 800b364:	1c03      	adds	r3, r0, #0
 800b366:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	229c      	movs	r2, #156	@ 0x9c
 800b36c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b36e:	1c19      	adds	r1, r3, #0
 800b370:	f7f5 fe16 	bl	8000fa0 <__aeabi_fmul>
 800b374:	1c03      	adds	r3, r0, #0
 800b376:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2290      	movs	r2, #144	@ 0x90
 800b37c:	589b      	ldr	r3, [r3, r2]
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	1c18      	adds	r0, r3, #0
 800b382:	f7f5 fe0d 	bl	8000fa0 <__aeabi_fmul>
 800b386:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b388:	1c19      	adds	r1, r3, #0
 800b38a:	1c20      	adds	r0, r4, #0
 800b38c:	f7f5 fa98 	bl	80008c0 <__aeabi_fadd>
 800b390:	1c03      	adds	r3, r0, #0
 800b392:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	229c      	movs	r2, #156	@ 0x9c
 800b398:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2298      	movs	r2, #152	@ 0x98
 800b39e:	589a      	ldr	r2, [r3, r2]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	219c      	movs	r1, #156	@ 0x9c
 800b3a4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b3a6:	1c19      	adds	r1, r3, #0
 800b3a8:	1c10      	adds	r0, r2, #0
 800b3aa:	f7f5 ff37 	bl	800121c <__aeabi_fsub>
 800b3ae:	1c03      	adds	r3, r0, #0
 800b3b0:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	6978      	ldr	r0, [r7, #20]
 800b3b6:	f7f5 f8bb 	bl	8000530 <__aeabi_fcmplt>
 800b3ba:	1e03      	subs	r3, r0, #0
 800b3bc:	d004      	beq.n	800b3c8 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2280      	movs	r2, #128	@ 0x80
 800b3c2:	0612      	lsls	r2, r2, #24
 800b3c4:	4053      	eors	r3, r2
 800b3c6:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b3c8:	4923      	ldr	r1, [pc, #140]	@ (800b458 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b3ca:	6978      	ldr	r0, [r7, #20]
 800b3cc:	f7f5 fde8 	bl	8000fa0 <__aeabi_fmul>
 800b3d0:	1c03      	adds	r3, r0, #0
 800b3d2:	1c18      	adds	r0, r3, #0
 800b3d4:	f017 fd5e 	bl	8022e94 <expf>
 800b3d8:	1c03      	adds	r3, r0, #0
 800b3da:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b3dc:	491f      	ldr	r1, [pc, #124]	@ (800b45c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b3de:	6938      	ldr	r0, [r7, #16]
 800b3e0:	f7f5 fdde 	bl	8000fa0 <__aeabi_fmul>
 800b3e4:	1c03      	adds	r3, r0, #0
 800b3e6:	491e      	ldr	r1, [pc, #120]	@ (800b460 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b3e8:	1c18      	adds	r0, r3, #0
 800b3ea:	f7f5 fa69 	bl	80008c0 <__aeabi_fadd>
 800b3ee:	1c03      	adds	r3, r0, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	685c      	ldr	r4, [r3, #4]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	68f9      	ldr	r1, [r7, #12]
 800b3fc:	1c18      	adds	r0, r3, #0
 800b3fe:	f7f5 fa5f 	bl	80008c0 <__aeabi_fadd>
 800b402:	1c03      	adds	r3, r0, #0
 800b404:	1c19      	adds	r1, r3, #0
 800b406:	1c20      	adds	r0, r4, #0
 800b408:	f7f5 fbe4 	bl	8000bd4 <__aeabi_fdiv>
 800b40c:	1c03      	adds	r3, r0, #0
 800b40e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b410:	68b9      	ldr	r1, [r7, #8]
 800b412:	20fe      	movs	r0, #254	@ 0xfe
 800b414:	0580      	lsls	r0, r0, #22
 800b416:	f7f5 ff01 	bl	800121c <__aeabi_fsub>
 800b41a:	1c03      	adds	r3, r0, #0
 800b41c:	1c18      	adds	r0, r3, #0
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	22a0      	movs	r2, #160	@ 0xa0
 800b422:	589b      	ldr	r3, [r3, r2]
 800b424:	1c19      	adds	r1, r3, #0
 800b426:	f7f5 fdbb 	bl	8000fa0 <__aeabi_fmul>
 800b42a:	1c03      	adds	r3, r0, #0
 800b42c:	1c1c      	adds	r4, r3, #0
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	68b8      	ldr	r0, [r7, #8]
 800b432:	f7f5 fdb5 	bl	8000fa0 <__aeabi_fmul>
 800b436:	1c03      	adds	r3, r0, #0
 800b438:	1c19      	adds	r1, r3, #0
 800b43a:	1c20      	adds	r0, r4, #0
 800b43c:	f7f5 fa40 	bl	80008c0 <__aeabi_fadd>
 800b440:	1c03      	adds	r3, r0, #0
 800b442:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	22a0      	movs	r2, #160	@ 0xa0
 800b448:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	22a0      	movs	r2, #160	@ 0xa0
 800b44e:	589b      	ldr	r3, [r3, r2]
}
 800b450:	1c18      	adds	r0, r3, #0
 800b452:	46bd      	mov	sp, r7
 800b454:	b007      	add	sp, #28
 800b456:	bd90      	pop	{r4, r7, pc}
 800b458:	be4ccccd 	.word	0xbe4ccccd
 800b45c:	43f00000 	.word	0x43f00000
 800b460:	41a00000 	.word	0x41a00000

0800b464 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	000a      	movs	r2, r1
 800b46e:	1cbb      	adds	r3, r7, #2
 800b470:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b472:	230d      	movs	r3, #13
 800b474:	18fb      	adds	r3, r7, r3
 800b476:	22ff      	movs	r2, #255	@ 0xff
 800b478:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b47a:	230e      	movs	r3, #14
 800b47c:	18fb      	adds	r3, r7, r3
 800b47e:	2200      	movs	r2, #0
 800b480:	801a      	strh	r2, [r3, #0]
 800b482:	e037      	b.n	800b4f4 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b484:	230e      	movs	r3, #14
 800b486:	18fb      	adds	r3, r7, r3
 800b488:	881b      	ldrh	r3, [r3, #0]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	18d3      	adds	r3, r2, r3
 800b48e:	7819      	ldrb	r1, [r3, #0]
 800b490:	220d      	movs	r2, #13
 800b492:	18bb      	adds	r3, r7, r2
 800b494:	18ba      	adds	r2, r7, r2
 800b496:	7812      	ldrb	r2, [r2, #0]
 800b498:	404a      	eors	r2, r1
 800b49a:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b49c:	230c      	movs	r3, #12
 800b49e:	18fb      	adds	r3, r7, r3
 800b4a0:	2208      	movs	r2, #8
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	e01b      	b.n	800b4de <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b4a6:	210d      	movs	r1, #13
 800b4a8:	187b      	adds	r3, r7, r1
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	b25b      	sxtb	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	da09      	bge.n	800b4c6 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b4b2:	187b      	adds	r3, r7, r1
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	005b      	lsls	r3, r3, #1
 800b4b8:	b25b      	sxtb	r3, r3
 800b4ba:	2231      	movs	r2, #49	@ 0x31
 800b4bc:	4053      	eors	r3, r2
 800b4be:	b25a      	sxtb	r2, r3
 800b4c0:	187b      	adds	r3, r7, r1
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	e005      	b.n	800b4d2 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b4c6:	230d      	movs	r3, #13
 800b4c8:	18fa      	adds	r2, r7, r3
 800b4ca:	18fb      	adds	r3, r7, r3
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	18db      	adds	r3, r3, r3
 800b4d0:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b4d2:	220c      	movs	r2, #12
 800b4d4:	18bb      	adds	r3, r7, r2
 800b4d6:	18ba      	adds	r2, r7, r2
 800b4d8:	7812      	ldrb	r2, [r2, #0]
 800b4da:	3a01      	subs	r2, #1
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	230c      	movs	r3, #12
 800b4e0:	18fb      	adds	r3, r7, r3
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1de      	bne.n	800b4a6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b4e8:	220e      	movs	r2, #14
 800b4ea:	18bb      	adds	r3, r7, r2
 800b4ec:	18ba      	adds	r2, r7, r2
 800b4ee:	8812      	ldrh	r2, [r2, #0]
 800b4f0:	3201      	adds	r2, #1
 800b4f2:	801a      	strh	r2, [r3, #0]
 800b4f4:	230e      	movs	r3, #14
 800b4f6:	18fa      	adds	r2, r7, r3
 800b4f8:	1cbb      	adds	r3, r7, #2
 800b4fa:	8812      	ldrh	r2, [r2, #0]
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d3c0      	bcc.n	800b484 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b502:	230d      	movs	r3, #13
 800b504:	18fb      	adds	r3, r7, r3
 800b506:	781b      	ldrb	r3, [r3, #0]
}
 800b508:	0018      	movs	r0, r3
 800b50a:	46bd      	mov	sp, r7
 800b50c:	b004      	add	sp, #16
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	0008      	movs	r0, r1
 800b51a:	0011      	movs	r1, r2
 800b51c:	1cbb      	adds	r3, r7, #2
 800b51e:	1c02      	adds	r2, r0, #0
 800b520:	801a      	strh	r2, [r3, #0]
 800b522:	1c7b      	adds	r3, r7, #1
 800b524:	1c0a      	adds	r2, r1, #0
 800b526:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b528:	1cbb      	adds	r3, r7, #2
 800b52a:	881a      	ldrh	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	0011      	movs	r1, r2
 800b530:	0018      	movs	r0, r3
 800b532:	f7ff ff97 	bl	800b464 <sensirion_i2c_generate_crc>
 800b536:	0003      	movs	r3, r0
 800b538:	001a      	movs	r2, r3
 800b53a:	1c7b      	adds	r3, r7, #1
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	4293      	cmp	r3, r2
 800b540:	d001      	beq.n	800b546 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e000      	b.n	800b548 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b546:	2300      	movs	r3, #0
}
 800b548:	0018      	movs	r0, r3
 800b54a:	46bd      	mov	sp, r7
 800b54c:	b002      	add	sp, #8
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	0008      	movs	r0, r1
 800b55a:	0011      	movs	r1, r2
 800b55c:	1cbb      	adds	r3, r7, #2
 800b55e:	1c02      	adds	r2, r0, #0
 800b560:	801a      	strh	r2, [r3, #0]
 800b562:	003b      	movs	r3, r7
 800b564:	1c0a      	adds	r2, r1, #0
 800b566:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b568:	003b      	movs	r3, r7
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	0a1b      	lsrs	r3, r3, #8
 800b56e:	b299      	uxth	r1, r3
 800b570:	1cbb      	adds	r3, r7, #2
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	1cba      	adds	r2, r7, #2
 800b576:	1c58      	adds	r0, r3, #1
 800b578:	8010      	strh	r0, [r2, #0]
 800b57a:	001a      	movs	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	189b      	adds	r3, r3, r2
 800b580:	b2ca      	uxtb	r2, r1
 800b582:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b584:	1cbb      	adds	r3, r7, #2
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	1cba      	adds	r2, r7, #2
 800b58a:	1c59      	adds	r1, r3, #1
 800b58c:	8011      	strh	r1, [r2, #0]
 800b58e:	001a      	movs	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	189b      	adds	r3, r3, r2
 800b594:	003a      	movs	r2, r7
 800b596:	8812      	ldrh	r2, [r2, #0]
 800b598:	b2d2      	uxtb	r2, r2
 800b59a:	701a      	strb	r2, [r3, #0]
    return offset;
 800b59c:	1cbb      	adds	r3, r7, #2
 800b59e:	881b      	ldrh	r3, [r3, #0]
}
 800b5a0:	0018      	movs	r0, r3
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	b002      	add	sp, #8
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b5a8:	b590      	push	{r4, r7, lr}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	0008      	movs	r0, r1
 800b5b2:	0011      	movs	r1, r2
 800b5b4:	1cbb      	adds	r3, r7, #2
 800b5b6:	1c02      	adds	r2, r0, #0
 800b5b8:	801a      	strh	r2, [r3, #0]
 800b5ba:	003b      	movs	r3, r7
 800b5bc:	1c0a      	adds	r2, r1, #0
 800b5be:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b5c0:	003b      	movs	r3, r7
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	0a1b      	lsrs	r3, r3, #8
 800b5c6:	b299      	uxth	r1, r3
 800b5c8:	1cbb      	adds	r3, r7, #2
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	1cba      	adds	r2, r7, #2
 800b5ce:	1c58      	adds	r0, r3, #1
 800b5d0:	8010      	strh	r0, [r2, #0]
 800b5d2:	001a      	movs	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	189b      	adds	r3, r3, r2
 800b5d8:	b2ca      	uxtb	r2, r1
 800b5da:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b5dc:	1cbb      	adds	r3, r7, #2
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	1cba      	adds	r2, r7, #2
 800b5e2:	1c59      	adds	r1, r3, #1
 800b5e4:	8011      	strh	r1, [r2, #0]
 800b5e6:	001a      	movs	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	189b      	adds	r3, r3, r2
 800b5ec:	003a      	movs	r2, r7
 800b5ee:	8812      	ldrh	r2, [r2, #0]
 800b5f0:	b2d2      	uxtb	r2, r2
 800b5f2:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b5f4:	1cbb      	adds	r3, r7, #2
 800b5f6:	881b      	ldrh	r3, [r3, #0]
 800b5f8:	3b02      	subs	r3, #2
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b5fe:	1cbb      	adds	r3, r7, #2
 800b600:	881b      	ldrh	r3, [r3, #0]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	18d4      	adds	r4, r2, r3
 800b606:	2102      	movs	r1, #2
 800b608:	f7ff ff2c 	bl	800b464 <sensirion_i2c_generate_crc>
 800b60c:	0003      	movs	r3, r0
 800b60e:	7023      	strb	r3, [r4, #0]
    offset++;
 800b610:	1cbb      	adds	r3, r7, #2
 800b612:	881a      	ldrh	r2, [r3, #0]
 800b614:	1cbb      	adds	r3, r7, #2
 800b616:	3201      	adds	r2, #1
 800b618:	801a      	strh	r2, [r3, #0]

    return offset;
 800b61a:	1cbb      	adds	r3, r7, #2
 800b61c:	881b      	ldrh	r3, [r3, #0]
}
 800b61e:	0018      	movs	r0, r3
 800b620:	46bd      	mov	sp, r7
 800b622:	b003      	add	sp, #12
 800b624:	bd90      	pop	{r4, r7, pc}

0800b626 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b626:	b580      	push	{r7, lr}
 800b628:	b082      	sub	sp, #8
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	0008      	movs	r0, r1
 800b630:	0011      	movs	r1, r2
 800b632:	1cbb      	adds	r3, r7, #2
 800b634:	1c02      	adds	r2, r0, #0
 800b636:	801a      	strh	r2, [r3, #0]
 800b638:	003b      	movs	r3, r7
 800b63a:	1c0a      	adds	r2, r1, #0
 800b63c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b63e:	003b      	movs	r3, r7
 800b640:	881a      	ldrh	r2, [r3, #0]
 800b642:	1cbb      	adds	r3, r7, #2
 800b644:	8819      	ldrh	r1, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	0018      	movs	r0, r3
 800b64a:	f7ff ffad 	bl	800b5a8 <sensirion_i2c_add_uint16_t_to_buffer>
 800b64e:	0003      	movs	r3, r0
}
 800b650:	0018      	movs	r0, r3
 800b652:	46bd      	mov	sp, r7
 800b654:	b002      	add	sp, #8
 800b656:	bd80      	pop	{r7, pc}

0800b658 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6039      	str	r1, [r7, #0]
 800b660:	0011      	movs	r1, r2
 800b662:	1dfb      	adds	r3, r7, #7
 800b664:	1c02      	adds	r2, r0, #0
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	1d3b      	adds	r3, r7, #4
 800b66a:	1c0a      	adds	r2, r1, #0
 800b66c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b66e:	1d3b      	adds	r3, r7, #4
 800b670:	881a      	ldrh	r2, [r3, #0]
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	1dfb      	adds	r3, r7, #7
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	0018      	movs	r0, r3
 800b67a:	f7fe fa01 	bl	8009a80 <sensirion_i2c_hal_write>
 800b67e:	0003      	movs	r3, r0
}
 800b680:	0018      	movs	r0, r3
 800b682:	46bd      	mov	sp, r7
 800b684:	b002      	add	sp, #8
 800b686:	bd80      	pop	{r7, pc}

0800b688 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b688:	b5b0      	push	{r4, r5, r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6039      	str	r1, [r7, #0]
 800b690:	0011      	movs	r1, r2
 800b692:	1dfb      	adds	r3, r7, #7
 800b694:	1c02      	adds	r2, r0, #0
 800b696:	701a      	strb	r2, [r3, #0]
 800b698:	1d3b      	adds	r3, r7, #4
 800b69a:	1c0a      	adds	r2, r1, #0
 800b69c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b69e:	1d3b      	adds	r3, r7, #4
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	085b      	lsrs	r3, r3, #1
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	220a      	movs	r2, #10
 800b6a8:	18ba      	adds	r2, r7, r2
 800b6aa:	1c19      	adds	r1, r3, #0
 800b6ac:	1c0b      	adds	r3, r1, #0
 800b6ae:	18db      	adds	r3, r3, r3
 800b6b0:	185b      	adds	r3, r3, r1
 800b6b2:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b6b4:	1d3b      	adds	r3, r7, #4
 800b6b6:	881b      	ldrh	r3, [r3, #0]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b6c2:	2304      	movs	r3, #4
 800b6c4:	e06b      	b.n	800b79e <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b6c6:	230a      	movs	r3, #10
 800b6c8:	18fb      	adds	r3, r7, r3
 800b6ca:	881a      	ldrh	r2, [r3, #0]
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	1dfb      	adds	r3, r7, #7
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	f7fe f9b4 	bl	8009a40 <sensirion_i2c_hal_read>
 800b6d8:	0003      	movs	r3, r0
 800b6da:	001a      	movs	r2, r3
 800b6dc:	2108      	movs	r1, #8
 800b6de:	187b      	adds	r3, r7, r1
 800b6e0:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b6e2:	000a      	movs	r2, r1
 800b6e4:	18bb      	adds	r3, r7, r2
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	5e5b      	ldrsh	r3, [r3, r1]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d003      	beq.n	800b6f6 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b6ee:	18bb      	adds	r3, r7, r2
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	5e9b      	ldrsh	r3, [r3, r2]
 800b6f4:	e053      	b.n	800b79e <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b6f6:	230e      	movs	r3, #14
 800b6f8:	18fb      	adds	r3, r7, r3
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	801a      	strh	r2, [r3, #0]
 800b6fe:	230c      	movs	r3, #12
 800b700:	18fb      	adds	r3, r7, r3
 800b702:	2200      	movs	r2, #0
 800b704:	801a      	strh	r2, [r3, #0]
 800b706:	e041      	b.n	800b78c <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b708:	210e      	movs	r1, #14
 800b70a:	187b      	adds	r3, r7, r1
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b712:	187b      	adds	r3, r7, r1
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	3302      	adds	r3, #2
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	001a      	movs	r2, r3
 800b720:	2102      	movs	r1, #2
 800b722:	f7ff fef5 	bl	800b510 <sensirion_i2c_check_crc>
 800b726:	0003      	movs	r3, r0
 800b728:	001a      	movs	r2, r3
 800b72a:	2108      	movs	r1, #8
 800b72c:	187b      	adds	r3, r7, r1
 800b72e:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b730:	000a      	movs	r2, r1
 800b732:	18bb      	adds	r3, r7, r2
 800b734:	2100      	movs	r1, #0
 800b736:	5e5b      	ldrsh	r3, [r3, r1]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b73c:	18bb      	adds	r3, r7, r2
 800b73e:	2200      	movs	r2, #0
 800b740:	5e9b      	ldrsh	r3, [r3, r2]
 800b742:	e02c      	b.n	800b79e <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b744:	240e      	movs	r4, #14
 800b746:	193b      	adds	r3, r7, r4
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	18d2      	adds	r2, r2, r3
 800b74e:	250c      	movs	r5, #12
 800b750:	197b      	adds	r3, r7, r5
 800b752:	881b      	ldrh	r3, [r3, #0]
 800b754:	1979      	adds	r1, r7, r5
 800b756:	1c58      	adds	r0, r3, #1
 800b758:	8008      	strh	r0, [r1, #0]
 800b75a:	0019      	movs	r1, r3
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	185b      	adds	r3, r3, r1
 800b760:	7812      	ldrb	r2, [r2, #0]
 800b762:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b764:	193b      	adds	r3, r7, r4
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	18d2      	adds	r2, r2, r3
 800b76e:	197b      	adds	r3, r7, r5
 800b770:	881b      	ldrh	r3, [r3, #0]
 800b772:	1979      	adds	r1, r7, r5
 800b774:	1c58      	adds	r0, r3, #1
 800b776:	8008      	strh	r0, [r1, #0]
 800b778:	0019      	movs	r1, r3
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	185b      	adds	r3, r3, r1
 800b77e:	7812      	ldrb	r2, [r2, #0]
 800b780:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b782:	193b      	adds	r3, r7, r4
 800b784:	193a      	adds	r2, r7, r4
 800b786:	8812      	ldrh	r2, [r2, #0]
 800b788:	3203      	adds	r2, #3
 800b78a:	801a      	strh	r2, [r3, #0]
 800b78c:	230e      	movs	r3, #14
 800b78e:	18fa      	adds	r2, r7, r3
 800b790:	230a      	movs	r3, #10
 800b792:	18fb      	adds	r3, r7, r3
 800b794:	8812      	ldrh	r2, [r2, #0]
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d3b5      	bcc.n	800b708 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	0018      	movs	r0, r3
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	b004      	add	sp, #16
 800b7a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b7a8 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b7a8:	b590      	push	{r4, r7, lr}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6039      	str	r1, [r7, #0]
 800b7b0:	0011      	movs	r1, r2
 800b7b2:	1dfb      	adds	r3, r7, #7
 800b7b4:	1c02      	adds	r2, r0, #0
 800b7b6:	701a      	strb	r2, [r3, #0]
 800b7b8:	1dbb      	adds	r3, r7, #6
 800b7ba:	1c0a      	adds	r2, r1, #0
 800b7bc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b7be:	4b08      	ldr	r3, [pc, #32]	@ (800b7e0 <ReadRegister+0x38>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d008      	beq.n	800b7d8 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b7c6:	4b06      	ldr	r3, [pc, #24]	@ (800b7e0 <ReadRegister+0x38>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	1dba      	adds	r2, r7, #6
 800b7cc:	7814      	ldrb	r4, [r2, #0]
 800b7ce:	6839      	ldr	r1, [r7, #0]
 800b7d0:	1dfa      	adds	r2, r7, #7
 800b7d2:	7810      	ldrb	r0, [r2, #0]
 800b7d4:	0022      	movs	r2, r4
 800b7d6:	4798      	blx	r3
  }
}
 800b7d8:	46c0      	nop			@ (mov r8, r8)
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	b003      	add	sp, #12
 800b7de:	bd90      	pop	{r4, r7, pc}
 800b7e0:	200010a0 	.word	0x200010a0

0800b7e4 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b7e4:	b590      	push	{r4, r7, lr}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6039      	str	r1, [r7, #0]
 800b7ec:	0011      	movs	r1, r2
 800b7ee:	1dfb      	adds	r3, r7, #7
 800b7f0:	1c02      	adds	r2, r0, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	1dbb      	adds	r3, r7, #6
 800b7f6:	1c0a      	adds	r2, r1, #0
 800b7f8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b7fa:	4b08      	ldr	r3, [pc, #32]	@ (800b81c <WriteRegister+0x38>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d008      	beq.n	800b814 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b802:	4b06      	ldr	r3, [pc, #24]	@ (800b81c <WriteRegister+0x38>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	1dba      	adds	r2, r7, #6
 800b808:	7814      	ldrb	r4, [r2, #0]
 800b80a:	6839      	ldr	r1, [r7, #0]
 800b80c:	1dfa      	adds	r2, r7, #7
 800b80e:	7810      	ldrb	r0, [r2, #0]
 800b810:	0022      	movs	r2, r4
 800b812:	4798      	blx	r3
  }
}
 800b814:	46c0      	nop			@ (mov r8, r8)
 800b816:	46bd      	mov	sp, r7
 800b818:	b003      	add	sp, #12
 800b81a:	bd90      	pop	{r4, r7, pc}
 800b81c:	200010a4 	.word	0x200010a4

0800b820 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b828:	f003 fb3a 	bl	800eea0 <HAL_GetTick>
 800b82c:	0002      	movs	r2, r0
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	18d2      	adds	r2, r2, r3
 800b832:	4b03      	ldr	r3, [pc, #12]	@ (800b840 <setSGP40TimeStamp+0x20>)
 800b834:	601a      	str	r2, [r3, #0]
}
 800b836:	46c0      	nop			@ (mov r8, r8)
 800b838:	46bd      	mov	sp, r7
 800b83a:	b002      	add	sp, #8
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	46c0      	nop			@ (mov r8, r8)
 800b840:	200010b4 	.word	0x200010b4

0800b844 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b844:	b580      	push	{r7, lr}
 800b846:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b848:	4b02      	ldr	r3, [pc, #8]	@ (800b854 <ResetSGP40samplecounter+0x10>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	701a      	strb	r2, [r3, #0]
}
 800b84e:	46c0      	nop			@ (mov r8, r8)
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	200010b2 	.word	0x200010b2

0800b858 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b862:	4b07      	ldr	r3, [pc, #28]	@ (800b880 <SGP_Init+0x28>)
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b868:	4b06      	ldr	r3, [pc, #24]	@ (800b884 <SGP_Init+0x2c>)
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b86e:	4b06      	ldr	r3, [pc, #24]	@ (800b888 <SGP_Init+0x30>)
 800b870:	2100      	movs	r1, #0
 800b872:	0018      	movs	r0, r3
 800b874:	f7fe ff70 	bl	800a758 <GasIndexAlgorithm_init>
}
 800b878:	46c0      	nop			@ (mov r8, r8)
 800b87a:	46bd      	mov	sp, r7
 800b87c:	b002      	add	sp, #8
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	200010a0 	.word	0x200010a0
 800b884:	200010a4 	.word	0x200010a4
 800b888:	200010bc 	.word	0x200010bc

0800b88c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800b890:	4b07      	ldr	r3, [pc, #28]	@ (800b8b0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800b898:	4b06      	ldr	r3, [pc, #24]	@ (800b8b4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b89a:	22fe      	movs	r2, #254	@ 0xfe
 800b89c:	0592      	lsls	r2, r2, #22
 800b89e:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800b8a0:	e002      	b.n	800b8a8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800b8a2:	4b04      	ldr	r3, [pc, #16]	@ (800b8b4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b8a4:	4a04      	ldr	r2, [pc, #16]	@ (800b8b8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800b8a6:	605a      	str	r2, [r3, #4]
}
 800b8a8:	46c0      	nop			@ (mov r8, r8)
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	46c0      	nop			@ (mov r8, r8)
 800b8b0:	20002009 	.word	0x20002009
 800b8b4:	200010bc 	.word	0x200010bc
 800b8b8:	44610000 	.word	0x44610000

0800b8bc <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b8c0:	4b13      	ldr	r3, [pc, #76]	@ (800b910 <SGP_StartMeasurement+0x54>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00d      	beq.n	800b8e4 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b8c8:	4b12      	ldr	r3, [pc, #72]	@ (800b914 <SGP_StartMeasurement+0x58>)
 800b8ca:	2208      	movs	r2, #8
 800b8cc:	0019      	movs	r1, r3
 800b8ce:	2059      	movs	r0, #89	@ 0x59
 800b8d0:	f7ff ff88 	bl	800b7e4 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b8d4:	f003 fae4 	bl	800eea0 <HAL_GetTick>
 800b8d8:	0003      	movs	r3, r0
 800b8da:	331e      	adds	r3, #30
 800b8dc:	001a      	movs	r2, r3
 800b8de:	4b0e      	ldr	r3, [pc, #56]	@ (800b918 <SGP_StartMeasurement+0x5c>)
 800b8e0:	601a      	str	r2, [r3, #0]
 800b8e2:	e00c      	b.n	800b8fe <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b8e4:	4b0d      	ldr	r3, [pc, #52]	@ (800b91c <SGP_StartMeasurement+0x60>)
 800b8e6:	2208      	movs	r2, #8
 800b8e8:	0019      	movs	r1, r3
 800b8ea:	2059      	movs	r0, #89	@ 0x59
 800b8ec:	f7ff ff7a 	bl	800b7e4 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b8f0:	f003 fad6 	bl	800eea0 <HAL_GetTick>
 800b8f4:	0003      	movs	r3, r0
 800b8f6:	33aa      	adds	r3, #170	@ 0xaa
 800b8f8:	001a      	movs	r2, r3
 800b8fa:	4b09      	ldr	r3, [pc, #36]	@ (800b920 <SGP_StartMeasurement+0x64>)
 800b8fc:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b8fe:	4b09      	ldr	r3, [pc, #36]	@ (800b924 <SGP_StartMeasurement+0x68>)
 800b900:	2200      	movs	r2, #0
 800b902:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b904:	4b08      	ldr	r3, [pc, #32]	@ (800b928 <SGP_StartMeasurement+0x6c>)
 800b906:	2200      	movs	r2, #0
 800b908:	701a      	strb	r2, [r3, #0]
}
 800b90a:	46c0      	nop			@ (mov r8, r8)
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	20001164 	.word	0x20001164
 800b914:	200000a0 	.word	0x200000a0
 800b918:	200000b4 	.word	0x200000b4
 800b91c:	20000098 	.word	0x20000098
 800b920:	200000ac 	.word	0x200000ac
 800b924:	200010b8 	.word	0x200010b8
 800b928:	200010b9 	.word	0x200010b9

0800b92c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b92c:	b580      	push	{r7, lr}
 800b92e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b930:	4b04      	ldr	r3, [pc, #16]	@ (800b944 <SGP_HeatedUp+0x18>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	0018      	movs	r0, r3
 800b936:	f002 fe1d 	bl	800e574 <TimestampIsReached>
 800b93a:	0003      	movs	r3, r0
}
 800b93c:	0018      	movs	r0, r3
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	46c0      	nop			@ (mov r8, r8)
 800b944:	200000ac 	.word	0x200000ac

0800b948 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b94c:	4b04      	ldr	r3, [pc, #16]	@ (800b960 <SGP_MeasurementReady+0x18>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	0018      	movs	r0, r3
 800b952:	f002 fe0f 	bl	800e574 <TimestampIsReached>
 800b956:	0003      	movs	r3, r0
}
 800b958:	0018      	movs	r0, r3
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	46c0      	nop			@ (mov r8, r8)
 800b960:	200000b4 	.word	0x200000b4

0800b964 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b964:	b580      	push	{r7, lr}
 800b966:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b968:	4b04      	ldr	r3, [pc, #16]	@ (800b97c <SGP_MeasurementDone+0x18>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	0018      	movs	r0, r3
 800b96e:	f002 fe01 	bl	800e574 <TimestampIsReached>
 800b972:	0003      	movs	r3, r0
}
 800b974:	0018      	movs	r0, r3
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	46c0      	nop			@ (mov r8, r8)
 800b97c:	200000b0 	.word	0x200000b0

0800b980 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b984:	4b04      	ldr	r3, [pc, #16]	@ (800b998 <SGP_TurnHeaterOff+0x18>)
 800b986:	2202      	movs	r2, #2
 800b988:	0019      	movs	r1, r3
 800b98a:	2059      	movs	r0, #89	@ 0x59
 800b98c:	f7ff ff2a 	bl	800b7e4 <WriteRegister>
}
 800b990:	46c0      	nop			@ (mov r8, r8)
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	46c0      	nop			@ (mov r8, r8)
 800b998:	20000090 	.word	0x20000090

0800b99c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af02      	add	r7, sp, #8
 800b9a2:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b9a4:	f7ff ffc2 	bl	800b92c <SGP_HeatedUp>
 800b9a8:	1e03      	subs	r3, r0, #0
 800b9aa:	d032      	beq.n	800ba12 <SGP_GetMeasurementValues+0x76>
 800b9ac:	4b7e      	ldr	r3, [pc, #504]	@ (800bba8 <SGP_GetMeasurementValues+0x20c>)
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	4053      	eors	r3, r2
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d02b      	beq.n	800ba12 <SGP_GetMeasurementValues+0x76>
 800b9ba:	4b7c      	ldr	r3, [pc, #496]	@ (800bbac <SGP_GetMeasurementValues+0x210>)
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	4053      	eors	r3, r2
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d024      	beq.n	800ba12 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800b9c8:	4b77      	ldr	r3, [pc, #476]	@ (800bba8 <SGP_GetMeasurementValues+0x20c>)
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b9ce:	4b78      	ldr	r3, [pc, #480]	@ (800bbb0 <SGP_GetMeasurementValues+0x214>)
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00d      	beq.n	800b9f2 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b9d6:	4b77      	ldr	r3, [pc, #476]	@ (800bbb4 <SGP_GetMeasurementValues+0x218>)
 800b9d8:	2208      	movs	r2, #8
 800b9da:	0019      	movs	r1, r3
 800b9dc:	2059      	movs	r0, #89	@ 0x59
 800b9de:	f7ff ff01 	bl	800b7e4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b9e2:	f003 fa5d 	bl	800eea0 <HAL_GetTick>
 800b9e6:	0003      	movs	r3, r0
 800b9e8:	331e      	adds	r3, #30
 800b9ea:	001a      	movs	r2, r3
 800b9ec:	4b72      	ldr	r3, [pc, #456]	@ (800bbb8 <SGP_GetMeasurementValues+0x21c>)
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	e00c      	b.n	800ba0c <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b9f2:	4b72      	ldr	r3, [pc, #456]	@ (800bbbc <SGP_GetMeasurementValues+0x220>)
 800b9f4:	2208      	movs	r2, #8
 800b9f6:	0019      	movs	r1, r3
 800b9f8:	2059      	movs	r0, #89	@ 0x59
 800b9fa:	f7ff fef3 	bl	800b7e4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b9fe:	f003 fa4f 	bl	800eea0 <HAL_GetTick>
 800ba02:	0003      	movs	r3, r0
 800ba04:	331e      	adds	r3, #30
 800ba06:	001a      	movs	r2, r3
 800ba08:	4b6b      	ldr	r3, [pc, #428]	@ (800bbb8 <SGP_GetMeasurementValues+0x21c>)
 800ba0a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800ba0c:	4b67      	ldr	r3, [pc, #412]	@ (800bbac <SGP_GetMeasurementValues+0x210>)
 800ba0e:	2201      	movs	r2, #1
 800ba10:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800ba12:	4b65      	ldr	r3, [pc, #404]	@ (800bba8 <SGP_GetMeasurementValues+0x20c>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d100      	bne.n	800ba1c <SGP_GetMeasurementValues+0x80>
 800ba1a:	e0a8      	b.n	800bb6e <SGP_GetMeasurementValues+0x1d2>
 800ba1c:	f7ff ff94 	bl	800b948 <SGP_MeasurementReady>
 800ba20:	1e03      	subs	r3, r0, #0
 800ba22:	d100      	bne.n	800ba26 <SGP_GetMeasurementValues+0x8a>
 800ba24:	e0a3      	b.n	800bb6e <SGP_GetMeasurementValues+0x1d2>
 800ba26:	4b66      	ldr	r3, [pc, #408]	@ (800bbc0 <SGP_GetMeasurementValues+0x224>)
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	4053      	eors	r3, r2
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d100      	bne.n	800ba36 <SGP_GetMeasurementValues+0x9a>
 800ba34:	e09b      	b.n	800bb6e <SGP_GetMeasurementValues+0x1d2>
    MeasurementIsReady = true;
 800ba36:	4b62      	ldr	r3, [pc, #392]	@ (800bbc0 <SGP_GetMeasurementValues+0x224>)
 800ba38:	2201      	movs	r2, #1
 800ba3a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800ba3c:	4b61      	ldr	r3, [pc, #388]	@ (800bbc4 <SGP_GetMeasurementValues+0x228>)
 800ba3e:	2203      	movs	r2, #3
 800ba40:	0019      	movs	r1, r3
 800ba42:	2059      	movs	r0, #89	@ 0x59
 800ba44:	f7ff feb0 	bl	800b7a8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800ba48:	4b5e      	ldr	r3, [pc, #376]	@ (800bbc4 <SGP_GetMeasurementValues+0x228>)
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	2103      	movs	r1, #3
 800ba4e:	0018      	movs	r0, r3
 800ba50:	f000 f916 	bl	800bc80 <CheckCRC>
 800ba54:	0003      	movs	r3, r0
 800ba56:	001a      	movs	r2, r3
 800ba58:	2301      	movs	r3, #1
 800ba5a:	4053      	eors	r3, r2
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d02a      	beq.n	800bab8 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800ba62:	4a59      	ldr	r2, [pc, #356]	@ (800bbc8 <SGP_GetMeasurementValues+0x22c>)
 800ba64:	4b59      	ldr	r3, [pc, #356]	@ (800bbcc <SGP_GetMeasurementValues+0x230>)
 800ba66:	0019      	movs	r1, r3
 800ba68:	2001      	movs	r0, #1
 800ba6a:	f002 fdd9 	bl	800e620 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800ba6e:	4a58      	ldr	r2, [pc, #352]	@ (800bbd0 <SGP_GetMeasurementValues+0x234>)
 800ba70:	4b58      	ldr	r3, [pc, #352]	@ (800bbd4 <SGP_GetMeasurementValues+0x238>)
 800ba72:	0019      	movs	r1, r3
 800ba74:	2002      	movs	r0, #2
 800ba76:	f002 fdd3 	bl	800e620 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ba7a:	230f      	movs	r3, #15
 800ba7c:	18fb      	adds	r3, r7, r3
 800ba7e:	2200      	movs	r2, #0
 800ba80:	701a      	strb	r2, [r3, #0]
 800ba82:	e012      	b.n	800baaa <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800ba84:	240f      	movs	r4, #15
 800ba86:	193b      	adds	r3, r7, r4
 800ba88:	7818      	ldrb	r0, [r3, #0]
 800ba8a:	193b      	adds	r3, r7, r4
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	4a4d      	ldr	r2, [pc, #308]	@ (800bbc4 <SGP_GetMeasurementValues+0x228>)
 800ba90:	5cd3      	ldrb	r3, [r2, r3]
 800ba92:	4a51      	ldr	r2, [pc, #324]	@ (800bbd8 <SGP_GetMeasurementValues+0x23c>)
 800ba94:	4951      	ldr	r1, [pc, #324]	@ (800bbdc <SGP_GetMeasurementValues+0x240>)
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	0003      	movs	r3, r0
 800ba9a:	2003      	movs	r0, #3
 800ba9c:	f002 fdc0 	bl	800e620 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800baa0:	193b      	adds	r3, r7, r4
 800baa2:	781a      	ldrb	r2, [r3, #0]
 800baa4:	193b      	adds	r3, r7, r4
 800baa6:	3201      	adds	r2, #1
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	230f      	movs	r3, #15
 800baac:	18fb      	adds	r3, r7, r3
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d9e7      	bls.n	800ba84 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800bab4:	2300      	movs	r3, #0
 800bab6:	e072      	b.n	800bb9e <SGP_GetMeasurementValues+0x202>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800bab8:	f003 f9f2 	bl	800eea0 <HAL_GetTick>
 800babc:	0003      	movs	r3, r0
 800babe:	22fa      	movs	r2, #250	@ 0xfa
 800bac0:	0092      	lsls	r2, r2, #2
 800bac2:	189a      	adds	r2, r3, r2
 800bac4:	4b46      	ldr	r3, [pc, #280]	@ (800bbe0 <SGP_GetMeasurementValues+0x244>)
 800bac6:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800bac8:	f7ff ff5a 	bl	800b980 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800bacc:	4b45      	ldr	r3, [pc, #276]	@ (800bbe4 <SGP_GetMeasurementValues+0x248>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	3301      	adds	r3, #1
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	4b43      	ldr	r3, [pc, #268]	@ (800bbe4 <SGP_GetMeasurementValues+0x248>)
 800bad6:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800bad8:	4b42      	ldr	r3, [pc, #264]	@ (800bbe4 <SGP_GetMeasurementValues+0x248>)
 800bada:	781a      	ldrb	r2, [r3, #0]
 800badc:	4b42      	ldr	r3, [pc, #264]	@ (800bbe8 <SGP_GetMeasurementValues+0x24c>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d344      	bcc.n	800bb6e <SGP_GetMeasurementValues+0x1d2>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800bae4:	4b37      	ldr	r3, [pc, #220]	@ (800bbc4 <SGP_GetMeasurementValues+0x228>)
 800bae6:	785b      	ldrb	r3, [r3, #1]
 800bae8:	021b      	lsls	r3, r3, #8
 800baea:	b21a      	sxth	r2, r3
 800baec:	4b35      	ldr	r3, [pc, #212]	@ (800bbc4 <SGP_GetMeasurementValues+0x228>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	b21b      	sxth	r3, r3
 800baf2:	4313      	orrs	r3, r2
 800baf4:	b21a      	sxth	r2, r3
 800baf6:	240c      	movs	r4, #12
 800baf8:	193b      	adds	r3, r7, r4
 800bafa:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800bb00:	193b      	adds	r3, r7, r4
 800bb02:	8819      	ldrh	r1, [r3, #0]
 800bb04:	2308      	movs	r3, #8
 800bb06:	18fa      	adds	r2, r7, r3
 800bb08:	4b38      	ldr	r3, [pc, #224]	@ (800bbec <SGP_GetMeasurementValues+0x250>)
 800bb0a:	0018      	movs	r0, r3
 800bb0c:	f7fe fe88 	bl	800a820 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800bb10:	4b37      	ldr	r3, [pc, #220]	@ (800bbf0 <SGP_GetMeasurementValues+0x254>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	3301      	adds	r3, #1
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	4b35      	ldr	r3, [pc, #212]	@ (800bbf0 <SGP_GetMeasurementValues+0x254>)
 800bb1a:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800bb1c:	4b34      	ldr	r3, [pc, #208]	@ (800bbf0 <SGP_GetMeasurementValues+0x254>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d10d      	bne.n	800bb40 <SGP_GetMeasurementValues+0x1a4>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800bb24:	193b      	adds	r3, r7, r4
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	4a32      	ldr	r2, [pc, #200]	@ (800bbf4 <SGP_GetMeasurementValues+0x258>)
 800bb2a:	492c      	ldr	r1, [pc, #176]	@ (800bbdc <SGP_GetMeasurementValues+0x240>)
 800bb2c:	2003      	movs	r0, #3
 800bb2e:	f002 fd77 	bl	800e620 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	4a30      	ldr	r2, [pc, #192]	@ (800bbf8 <SGP_GetMeasurementValues+0x25c>)
 800bb36:	4929      	ldr	r1, [pc, #164]	@ (800bbdc <SGP_GetMeasurementValues+0x240>)
 800bb38:	2003      	movs	r0, #3
 800bb3a:	f002 fd71 	bl	800e620 <CreateLine>
 800bb3e:	e006      	b.n	800bb4e <SGP_GetMeasurementValues+0x1b2>
      }
      else {
        if (sgp40samplecounter == 11) {
 800bb40:	4b2b      	ldr	r3, [pc, #172]	@ (800bbf0 <SGP_GetMeasurementValues+0x254>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	2b0b      	cmp	r3, #11
 800bb46:	d102      	bne.n	800bb4e <SGP_GetMeasurementValues+0x1b2>
          sgp40samplecounter = 0;
 800bb48:	4b29      	ldr	r3, [pc, #164]	@ (800bbf0 <SGP_GetMeasurementValues+0x254>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	0018      	movs	r0, r3
 800bb54:	f001 fd36 	bl	800d5c4 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800bb58:	4b22      	ldr	r3, [pc, #136]	@ (800bbe4 <SGP_GetMeasurementValues+0x248>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800bb5e:	4b14      	ldr	r3, [pc, #80]	@ (800bbb0 <SGP_GetMeasurementValues+0x214>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bb64:	4b11      	ldr	r3, [pc, #68]	@ (800bbac <SGP_GetMeasurementValues+0x210>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	701a      	strb	r2, [r3, #0]
      return true;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e017      	b.n	800bb9e <SGP_GetMeasurementValues+0x202>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bb6e:	f7ff fef9 	bl	800b964 <SGP_MeasurementDone>
 800bb72:	1e03      	subs	r3, r0, #0
 800bb74:	d012      	beq.n	800bb9c <SGP_GetMeasurementValues+0x200>
 800bb76:	4b0c      	ldr	r3, [pc, #48]	@ (800bba8 <SGP_GetMeasurementValues+0x20c>)
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00e      	beq.n	800bb9c <SGP_GetMeasurementValues+0x200>
 800bb7e:	4b10      	ldr	r3, [pc, #64]	@ (800bbc0 <SGP_GetMeasurementValues+0x224>)
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00a      	beq.n	800bb9c <SGP_GetMeasurementValues+0x200>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bb86:	4a1d      	ldr	r2, [pc, #116]	@ (800bbfc <SGP_GetMeasurementValues+0x260>)
 800bb88:	4b14      	ldr	r3, [pc, #80]	@ (800bbdc <SGP_GetMeasurementValues+0x240>)
 800bb8a:	0019      	movs	r1, r3
 800bb8c:	2003      	movs	r0, #3
 800bb8e:	f002 fd47 	bl	800e620 <CreateLine>
    SGP_StartMeasurement();
 800bb92:	f7ff fe93 	bl	800b8bc <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800bb96:	4b05      	ldr	r3, [pc, #20]	@ (800bbac <SGP_GetMeasurementValues+0x210>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	0018      	movs	r0, r3
 800bba0:	46bd      	mov	sp, r7
 800bba2:	b005      	add	sp, #20
 800bba4:	bd90      	pop	{r4, r7, pc}
 800bba6:	46c0      	nop			@ (mov r8, r8)
 800bba8:	200010b8 	.word	0x200010b8
 800bbac:	20001165 	.word	0x20001165
 800bbb0:	20001164 	.word	0x20001164
 800bbb4:	200000a0 	.word	0x200000a0
 800bbb8:	200000b4 	.word	0x200000b4
 800bbbc:	20000098 	.word	0x20000098
 800bbc0:	200010b9 	.word	0x200010b9
 800bbc4:	200010a8 	.word	0x200010a8
 800bbc8:	08024e10 	.word	0x08024e10
 800bbcc:	08024e38 	.word	0x08024e38
 800bbd0:	08024e3c 	.word	0x08024e3c
 800bbd4:	08024e5c 	.word	0x08024e5c
 800bbd8:	08024e60 	.word	0x08024e60
 800bbdc:	08024e80 	.word	0x08024e80
 800bbe0:	200000b0 	.word	0x200000b0
 800bbe4:	200010b1 	.word	0x200010b1
 800bbe8:	200000aa 	.word	0x200000aa
 800bbec:	200010bc 	.word	0x200010bc
 800bbf0:	200010b2 	.word	0x200010b2
 800bbf4:	08024e84 	.word	0x08024e84
 800bbf8:	08024ea0 	.word	0x08024ea0
 800bbfc:	08024ebc 	.word	0x08024ebc

0800bc00 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bc06:	4b1a      	ldr	r3, [pc, #104]	@ (800bc70 <SGP_DeviceConnected+0x70>)
 800bc08:	2202      	movs	r2, #2
 800bc0a:	0019      	movs	r1, r3
 800bc0c:	2059      	movs	r0, #89	@ 0x59
 800bc0e:	f7ff fde9 	bl	800b7e4 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bc12:	2001      	movs	r0, #1
 800bc14:	f003 f94e 	bl	800eeb4 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bc18:	4b16      	ldr	r3, [pc, #88]	@ (800bc74 <SGP_DeviceConnected+0x74>)
 800bc1a:	2209      	movs	r2, #9
 800bc1c:	0019      	movs	r1, r3
 800bc1e:	2059      	movs	r0, #89	@ 0x59
 800bc20:	f7ff fdc2 	bl	800b7a8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc24:	1dfb      	adds	r3, r7, #7
 800bc26:	2200      	movs	r2, #0
 800bc28:	701a      	strb	r2, [r3, #0]
 800bc2a:	e011      	b.n	800bc50 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bc2c:	1dfb      	adds	r3, r7, #7
 800bc2e:	7818      	ldrb	r0, [r3, #0]
 800bc30:	1dfb      	adds	r3, r7, #7
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	4a0f      	ldr	r2, [pc, #60]	@ (800bc74 <SGP_DeviceConnected+0x74>)
 800bc36:	5cd3      	ldrb	r3, [r2, r3]
 800bc38:	4a0f      	ldr	r2, [pc, #60]	@ (800bc78 <SGP_DeviceConnected+0x78>)
 800bc3a:	4910      	ldr	r1, [pc, #64]	@ (800bc7c <SGP_DeviceConnected+0x7c>)
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	0003      	movs	r3, r0
 800bc40:	2002      	movs	r0, #2
 800bc42:	f002 fced 	bl	800e620 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc46:	1dfb      	adds	r3, r7, #7
 800bc48:	781a      	ldrb	r2, [r3, #0]
 800bc4a:	1dfb      	adds	r3, r7, #7
 800bc4c:	3201      	adds	r2, #1
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	1dfb      	adds	r3, r7, #7
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	2b08      	cmp	r3, #8
 800bc56:	d9e9      	bls.n	800bc2c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bc58:	4b06      	ldr	r3, [pc, #24]	@ (800bc74 <SGP_DeviceConnected+0x74>)
 800bc5a:	2203      	movs	r2, #3
 800bc5c:	2109      	movs	r1, #9
 800bc5e:	0018      	movs	r0, r3
 800bc60:	f000 f80e 	bl	800bc80 <CheckCRC>
 800bc64:	0003      	movs	r3, r0
}
 800bc66:	0018      	movs	r0, r3
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	b002      	add	sp, #8
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	46c0      	nop			@ (mov r8, r8)
 800bc70:	20000094 	.word	0x20000094
 800bc74:	200010a8 	.word	0x200010a8
 800bc78:	08024edc 	.word	0x08024edc
 800bc7c:	08024e5c 	.word	0x08024e5c

0800bc80 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc82:	b08f      	sub	sp, #60	@ 0x3c
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc88:	0008      	movs	r0, r1
 800bc8a:	0011      	movs	r1, r2
 800bc8c:	2323      	movs	r3, #35	@ 0x23
 800bc8e:	18fb      	adds	r3, r7, r3
 800bc90:	1c02      	adds	r2, r0, #0
 800bc92:	701a      	strb	r2, [r3, #0]
 800bc94:	2322      	movs	r3, #34	@ 0x22
 800bc96:	18fb      	adds	r3, r7, r3
 800bc98:	1c0a      	adds	r2, r1, #0
 800bc9a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bc9c:	2317      	movs	r3, #23
 800bc9e:	2220      	movs	r2, #32
 800bca0:	189b      	adds	r3, r3, r2
 800bca2:	19db      	adds	r3, r3, r7
 800bca4:	2200      	movs	r2, #0
 800bca6:	701a      	strb	r2, [r3, #0]
 800bca8:	e09f      	b.n	800bdea <CheckCRC+0x16a>
 800bcaa:	466b      	mov	r3, sp
 800bcac:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bcae:	2322      	movs	r3, #34	@ 0x22
 800bcb0:	18fb      	adds	r3, r7, r3
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	001a      	movs	r2, r3
 800bcb6:	3a01      	subs	r2, #1
 800bcb8:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcba:	60bb      	str	r3, [r7, #8]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	60fa      	str	r2, [r7, #12]
 800bcc0:	68b8      	ldr	r0, [r7, #8]
 800bcc2:	68f9      	ldr	r1, [r7, #12]
 800bcc4:	0002      	movs	r2, r0
 800bcc6:	0f52      	lsrs	r2, r2, #29
 800bcc8:	000c      	movs	r4, r1
 800bcca:	00e4      	lsls	r4, r4, #3
 800bccc:	61fc      	str	r4, [r7, #28]
 800bcce:	69fc      	ldr	r4, [r7, #28]
 800bcd0:	4314      	orrs	r4, r2
 800bcd2:	61fc      	str	r4, [r7, #28]
 800bcd4:	0002      	movs	r2, r0
 800bcd6:	00d2      	lsls	r2, r2, #3
 800bcd8:	61ba      	str	r2, [r7, #24]
 800bcda:	603b      	str	r3, [r7, #0]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	6838      	ldr	r0, [r7, #0]
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	0002      	movs	r2, r0
 800bce6:	0f52      	lsrs	r2, r2, #29
 800bce8:	000c      	movs	r4, r1
 800bcea:	00e4      	lsls	r4, r4, #3
 800bcec:	617c      	str	r4, [r7, #20]
 800bcee:	697c      	ldr	r4, [r7, #20]
 800bcf0:	4314      	orrs	r4, r2
 800bcf2:	617c      	str	r4, [r7, #20]
 800bcf4:	0002      	movs	r2, r0
 800bcf6:	00d2      	lsls	r2, r2, #3
 800bcf8:	613a      	str	r2, [r7, #16]
 800bcfa:	3307      	adds	r3, #7
 800bcfc:	08db      	lsrs	r3, r3, #3
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	466a      	mov	r2, sp
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	469d      	mov	sp, r3
 800bd06:	466b      	mov	r3, sp
 800bd08:	3300      	adds	r3, #0
 800bd0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd0c:	2316      	movs	r3, #22
 800bd0e:	2220      	movs	r2, #32
 800bd10:	189b      	adds	r3, r3, r2
 800bd12:	19db      	adds	r3, r3, r7
 800bd14:	2200      	movs	r2, #0
 800bd16:	701a      	strb	r2, [r3, #0]
 800bd18:	e01e      	b.n	800bd58 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bd1a:	2317      	movs	r3, #23
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	189b      	adds	r3, r3, r2
 800bd20:	19db      	adds	r3, r3, r7
 800bd22:	781a      	ldrb	r2, [r3, #0]
 800bd24:	2116      	movs	r1, #22
 800bd26:	2320      	movs	r3, #32
 800bd28:	18cb      	adds	r3, r1, r3
 800bd2a:	19db      	adds	r3, r3, r7
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	18d3      	adds	r3, r2, r3
 800bd30:	001a      	movs	r2, r3
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd34:	189a      	adds	r2, r3, r2
 800bd36:	0008      	movs	r0, r1
 800bd38:	2320      	movs	r3, #32
 800bd3a:	18cb      	adds	r3, r1, r3
 800bd3c:	19db      	adds	r3, r3, r7
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	7811      	ldrb	r1, [r2, #0]
 800bd42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd44:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd46:	2320      	movs	r3, #32
 800bd48:	18c3      	adds	r3, r0, r3
 800bd4a:	19db      	adds	r3, r3, r7
 800bd4c:	781a      	ldrb	r2, [r3, #0]
 800bd4e:	2320      	movs	r3, #32
 800bd50:	18c3      	adds	r3, r0, r3
 800bd52:	19db      	adds	r3, r3, r7
 800bd54:	3201      	adds	r2, #1
 800bd56:	701a      	strb	r2, [r3, #0]
 800bd58:	2316      	movs	r3, #22
 800bd5a:	2220      	movs	r2, #32
 800bd5c:	189b      	adds	r3, r3, r2
 800bd5e:	19da      	adds	r2, r3, r7
 800bd60:	2322      	movs	r3, #34	@ 0x22
 800bd62:	18fb      	adds	r3, r7, r3
 800bd64:	7812      	ldrb	r2, [r2, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d3d6      	bcc.n	800bd1a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bd6c:	2417      	movs	r4, #23
 800bd6e:	2320      	movs	r3, #32
 800bd70:	18e3      	adds	r3, r4, r3
 800bd72:	19db      	adds	r3, r3, r7
 800bd74:	781a      	ldrb	r2, [r3, #0]
 800bd76:	2322      	movs	r3, #34	@ 0x22
 800bd78:	18fb      	adds	r3, r7, r3
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	18d3      	adds	r3, r2, r3
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd82:	18d2      	adds	r2, r2, r3
 800bd84:	250b      	movs	r5, #11
 800bd86:	2320      	movs	r3, #32
 800bd88:	18eb      	adds	r3, r5, r3
 800bd8a:	19db      	adds	r3, r3, r7
 800bd8c:	7812      	ldrb	r2, [r2, #0]
 800bd8e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800bd90:	2322      	movs	r3, #34	@ 0x22
 800bd92:	18fb      	adds	r3, r7, r3
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	3b01      	subs	r3, #1
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9c:	0011      	movs	r1, r2
 800bd9e:	0018      	movs	r0, r3
 800bda0:	f000 f838 	bl	800be14 <CalculateCRC>
 800bda4:	0003      	movs	r3, r0
 800bda6:	001a      	movs	r2, r3
 800bda8:	2320      	movs	r3, #32
 800bdaa:	18eb      	adds	r3, r5, r3
 800bdac:	19db      	adds	r3, r3, r7
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00c      	beq.n	800bdce <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800bdb4:	2320      	movs	r3, #32
 800bdb6:	18e3      	adds	r3, r4, r3
 800bdb8:	19db      	adds	r3, r3, r7
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	4a13      	ldr	r2, [pc, #76]	@ (800be0c <CheckCRC+0x18c>)
 800bdc0:	4913      	ldr	r1, [pc, #76]	@ (800be10 <CheckCRC+0x190>)
 800bdc2:	2001      	movs	r0, #1
 800bdc4:	f002 fc2c 	bl	800e620 <CreateLine>
      return false;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	46b5      	mov	sp, r6
 800bdcc:	e019      	b.n	800be02 <CheckCRC+0x182>
 800bdce:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bdd0:	2217      	movs	r2, #23
 800bdd2:	2320      	movs	r3, #32
 800bdd4:	18d3      	adds	r3, r2, r3
 800bdd6:	19db      	adds	r3, r3, r7
 800bdd8:	2120      	movs	r1, #32
 800bdda:	1852      	adds	r2, r2, r1
 800bddc:	19d1      	adds	r1, r2, r7
 800bdde:	2222      	movs	r2, #34	@ 0x22
 800bde0:	18ba      	adds	r2, r7, r2
 800bde2:	7809      	ldrb	r1, [r1, #0]
 800bde4:	7812      	ldrb	r2, [r2, #0]
 800bde6:	188a      	adds	r2, r1, r2
 800bde8:	701a      	strb	r2, [r3, #0]
 800bdea:	2317      	movs	r3, #23
 800bdec:	2220      	movs	r2, #32
 800bdee:	189b      	adds	r3, r3, r2
 800bdf0:	19da      	adds	r2, r3, r7
 800bdf2:	2323      	movs	r3, #35	@ 0x23
 800bdf4:	18fb      	adds	r3, r7, r3
 800bdf6:	7812      	ldrb	r2, [r2, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d200      	bcs.n	800be00 <CheckCRC+0x180>
 800bdfe:	e754      	b.n	800bcaa <CheckCRC+0x2a>
    }
  }
  return true;
 800be00:	2301      	movs	r3, #1
}
 800be02:	0018      	movs	r0, r3
 800be04:	46bd      	mov	sp, r7
 800be06:	b00f      	add	sp, #60	@ 0x3c
 800be08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be0a:	46c0      	nop			@ (mov r8, r8)
 800be0c:	08024efc 	.word	0x08024efc
 800be10:	08024e38 	.word	0x08024e38

0800be14 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	000a      	movs	r2, r1
 800be1e:	1cfb      	adds	r3, r7, #3
 800be20:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800be22:	230f      	movs	r3, #15
 800be24:	18fb      	adds	r3, r7, r3
 800be26:	22ff      	movs	r2, #255	@ 0xff
 800be28:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800be2a:	230e      	movs	r3, #14
 800be2c:	18fb      	adds	r3, r7, r3
 800be2e:	2200      	movs	r2, #0
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	e037      	b.n	800bea4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800be34:	230e      	movs	r3, #14
 800be36:	18fb      	adds	r3, r7, r3
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	18d3      	adds	r3, r2, r3
 800be3e:	7819      	ldrb	r1, [r3, #0]
 800be40:	220f      	movs	r2, #15
 800be42:	18bb      	adds	r3, r7, r2
 800be44:	18ba      	adds	r2, r7, r2
 800be46:	7812      	ldrb	r2, [r2, #0]
 800be48:	404a      	eors	r2, r1
 800be4a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800be4c:	230d      	movs	r3, #13
 800be4e:	18fb      	adds	r3, r7, r3
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	e01b      	b.n	800be8e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800be56:	210f      	movs	r1, #15
 800be58:	187b      	adds	r3, r7, r1
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	b25b      	sxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	da09      	bge.n	800be76 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800be62:	187b      	adds	r3, r7, r1
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	b25b      	sxtb	r3, r3
 800be6a:	2231      	movs	r2, #49	@ 0x31
 800be6c:	4053      	eors	r3, r2
 800be6e:	b25a      	sxtb	r2, r3
 800be70:	187b      	adds	r3, r7, r1
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	e005      	b.n	800be82 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800be76:	230f      	movs	r3, #15
 800be78:	18fa      	adds	r2, r7, r3
 800be7a:	18fb      	adds	r3, r7, r3
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	18db      	adds	r3, r3, r3
 800be80:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800be82:	210d      	movs	r1, #13
 800be84:	187b      	adds	r3, r7, r1
 800be86:	781a      	ldrb	r2, [r3, #0]
 800be88:	187b      	adds	r3, r7, r1
 800be8a:	3201      	adds	r2, #1
 800be8c:	701a      	strb	r2, [r3, #0]
 800be8e:	230d      	movs	r3, #13
 800be90:	18fb      	adds	r3, r7, r3
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b07      	cmp	r3, #7
 800be96:	d9de      	bls.n	800be56 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800be98:	210e      	movs	r1, #14
 800be9a:	187b      	adds	r3, r7, r1
 800be9c:	781a      	ldrb	r2, [r3, #0]
 800be9e:	187b      	adds	r3, r7, r1
 800bea0:	3201      	adds	r2, #1
 800bea2:	701a      	strb	r2, [r3, #0]
 800bea4:	230e      	movs	r3, #14
 800bea6:	18fa      	adds	r2, r7, r3
 800bea8:	1cfb      	adds	r3, r7, #3
 800beaa:	7812      	ldrb	r2, [r2, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d3c0      	bcc.n	800be34 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800beb2:	230f      	movs	r3, #15
 800beb4:	18fb      	adds	r3, r7, r3
 800beb6:	781b      	ldrb	r3, [r3, #0]
}
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	b004      	add	sp, #16
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4936      	ldr	r1, [pc, #216]	@ (800bfa8 <SGP_SetHT+0xe8>)
 800bed0:	1c18      	adds	r0, r3, #0
 800bed2:	f7f4 fcf5 	bl	80008c0 <__aeabi_fadd>
 800bed6:	1c03      	adds	r3, r0, #0
 800bed8:	4934      	ldr	r1, [pc, #208]	@ (800bfac <SGP_SetHT+0xec>)
 800beda:	1c18      	adds	r0, r3, #0
 800bedc:	f7f4 fe7a 	bl	8000bd4 <__aeabi_fdiv>
 800bee0:	1c03      	adds	r3, r0, #0
 800bee2:	4933      	ldr	r1, [pc, #204]	@ (800bfb0 <SGP_SetHT+0xf0>)
 800bee4:	1c18      	adds	r0, r3, #0
 800bee6:	f7f5 f85b 	bl	8000fa0 <__aeabi_fmul>
 800beea:	1c03      	adds	r3, r0, #0
 800beec:	1c18      	adds	r0, r3, #0
 800beee:	f7f4 fb95 	bl	800061c <__aeabi_f2uiz>
 800bef2:	0003      	movs	r3, r0
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	4b2f      	ldr	r3, [pc, #188]	@ (800bfb4 <SGP_SetHT+0xf4>)
 800bef8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	492e      	ldr	r1, [pc, #184]	@ (800bfb8 <SGP_SetHT+0xf8>)
 800bf00:	1c18      	adds	r0, r3, #0
 800bf02:	f7f4 fe67 	bl	8000bd4 <__aeabi_fdiv>
 800bf06:	1c03      	adds	r3, r0, #0
 800bf08:	4929      	ldr	r1, [pc, #164]	@ (800bfb0 <SGP_SetHT+0xf0>)
 800bf0a:	1c18      	adds	r0, r3, #0
 800bf0c:	f7f5 f848 	bl	8000fa0 <__aeabi_fmul>
 800bf10:	1c03      	adds	r3, r0, #0
 800bf12:	1c18      	adds	r0, r3, #0
 800bf14:	f7f4 fb82 	bl	800061c <__aeabi_f2uiz>
 800bf18:	0003      	movs	r3, r0
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	4b27      	ldr	r3, [pc, #156]	@ (800bfbc <SGP_SetHT+0xfc>)
 800bf1e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800bf20:	4b26      	ldr	r3, [pc, #152]	@ (800bfbc <SGP_SetHT+0xfc>)
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	0a1b      	lsrs	r3, r3, #8
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	4b25      	ldr	r3, [pc, #148]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf2c:	709a      	strb	r2, [r3, #2]
 800bf2e:	4b24      	ldr	r3, [pc, #144]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf30:	789a      	ldrb	r2, [r3, #2]
 800bf32:	210c      	movs	r1, #12
 800bf34:	187b      	adds	r3, r7, r1
 800bf36:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bf38:	4b20      	ldr	r3, [pc, #128]	@ (800bfbc <SGP_SetHT+0xfc>)
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	4b20      	ldr	r3, [pc, #128]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf40:	70da      	strb	r2, [r3, #3]
 800bf42:	4b1f      	ldr	r3, [pc, #124]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf44:	78da      	ldrb	r2, [r3, #3]
 800bf46:	187b      	adds	r3, r7, r1
 800bf48:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bf4a:	187b      	adds	r3, r7, r1
 800bf4c:	2102      	movs	r1, #2
 800bf4e:	0018      	movs	r0, r3
 800bf50:	f7ff ff60 	bl	800be14 <CalculateCRC>
 800bf54:	0003      	movs	r3, r0
 800bf56:	001a      	movs	r2, r3
 800bf58:	4b19      	ldr	r3, [pc, #100]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf5a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800bf5c:	4b15      	ldr	r3, [pc, #84]	@ (800bfb4 <SGP_SetHT+0xf4>)
 800bf5e:	881b      	ldrh	r3, [r3, #0]
 800bf60:	0a1b      	lsrs	r3, r3, #8
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	4b16      	ldr	r3, [pc, #88]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf68:	715a      	strb	r2, [r3, #5]
 800bf6a:	4b15      	ldr	r3, [pc, #84]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf6c:	795a      	ldrb	r2, [r3, #5]
 800bf6e:	2108      	movs	r1, #8
 800bf70:	187b      	adds	r3, r7, r1
 800bf72:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bf74:	4b0f      	ldr	r3, [pc, #60]	@ (800bfb4 <SGP_SetHT+0xf4>)
 800bf76:	881b      	ldrh	r3, [r3, #0]
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	4b11      	ldr	r3, [pc, #68]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf7c:	719a      	strb	r2, [r3, #6]
 800bf7e:	4b10      	ldr	r3, [pc, #64]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf80:	799a      	ldrb	r2, [r3, #6]
 800bf82:	187b      	adds	r3, r7, r1
 800bf84:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bf86:	187b      	adds	r3, r7, r1
 800bf88:	2102      	movs	r1, #2
 800bf8a:	0018      	movs	r0, r3
 800bf8c:	f7ff ff42 	bl	800be14 <CalculateCRC>
 800bf90:	0003      	movs	r3, r0
 800bf92:	001a      	movs	r2, r3
 800bf94:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc0 <SGP_SetHT+0x100>)
 800bf96:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800bf98:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc4 <SGP_SetHT+0x104>)
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	701a      	strb	r2, [r3, #0]
}
 800bf9e:	46c0      	nop			@ (mov r8, r8)
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	b004      	add	sp, #16
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	46c0      	nop			@ (mov r8, r8)
 800bfa8:	42340000 	.word	0x42340000
 800bfac:	432f0000 	.word	0x432f0000
 800bfb0:	477fff00 	.word	0x477fff00
 800bfb4:	20001162 	.word	0x20001162
 800bfb8:	42c80000 	.word	0x42c80000
 800bfbc:	20001160 	.word	0x20001160
 800bfc0:	200000a0 	.word	0x200000a0
 800bfc4:	20001164 	.word	0x20001164

0800bfc8 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800bfcc:	4a09      	ldr	r2, [pc, #36]	@ (800bff4 <SGP_SoftReset+0x2c>)
 800bfce:	4b0a      	ldr	r3, [pc, #40]	@ (800bff8 <SGP_SoftReset+0x30>)
 800bfd0:	0019      	movs	r1, r3
 800bfd2:	2003      	movs	r0, #3
 800bfd4:	f002 fb24 	bl	800e620 <CreateLine>
  SGP_TurnHeaterOff();
 800bfd8:	f7ff fcd2 	bl	800b980 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800bfdc:	200a      	movs	r0, #10
 800bfde:	f002 ff69 	bl	800eeb4 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bfe2:	4b06      	ldr	r3, [pc, #24]	@ (800bffc <SGP_SoftReset+0x34>)
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	0019      	movs	r1, r3
 800bfe8:	2059      	movs	r0, #89	@ 0x59
 800bfea:	f7ff fbfb 	bl	800b7e4 <WriteRegister>
}
 800bfee:	46c0      	nop			@ (mov r8, r8)
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	08024fa4 	.word	0x08024fa4
 800bff8:	08024e80 	.word	0x08024e80
 800bffc:	200000a8 	.word	0x200000a8

0800c000 <ResetVOCresult>:

void ResetVOCresult(void) {
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c004:	4b02      	ldr	r3, [pc, #8]	@ (800c010 <ResetVOCresult+0x10>)
 800c006:	2200      	movs	r2, #0
 800c008:	601a      	str	r2, [r3, #0]
}
 800c00a:	46c0      	nop			@ (mov r8, r8)
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	20001168 	.word	0x20001168

0800c014 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c018:	4b37      	ldr	r3, [pc, #220]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	2b07      	cmp	r3, #7
 800c01e:	d85f      	bhi.n	800c0e0 <SGP_Upkeep+0xcc>
 800c020:	009a      	lsls	r2, r3, #2
 800c022:	4b36      	ldr	r3, [pc, #216]	@ (800c0fc <SGP_Upkeep+0xe8>)
 800c024:	18d3      	adds	r3, r2, r3
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c02a:	4a35      	ldr	r2, [pc, #212]	@ (800c100 <SGP_Upkeep+0xec>)
 800c02c:	4b35      	ldr	r3, [pc, #212]	@ (800c104 <SGP_Upkeep+0xf0>)
 800c02e:	0019      	movs	r1, r3
 800c030:	2003      	movs	r0, #3
 800c032:	f002 faf5 	bl	800e620 <CreateLine>
    break;
 800c036:	e05a      	b.n	800c0ee <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c038:	f7ff ffe2 	bl	800c000 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c03c:	4b2e      	ldr	r3, [pc, #184]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c03e:	2201      	movs	r2, #1
 800c040:	701a      	strb	r2, [r3, #0]
    break;
 800c042:	e054      	b.n	800c0ee <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c044:	f7ff fc3a 	bl	800b8bc <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c048:	f001 f966 	bl	800d318 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c04c:	4b2a      	ldr	r3, [pc, #168]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c04e:	2202      	movs	r2, #2
 800c050:	701a      	strb	r2, [r3, #0]
    break;
 800c052:	e04c      	b.n	800c0ee <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c054:	4b2c      	ldr	r3, [pc, #176]	@ (800c108 <SGP_Upkeep+0xf4>)
 800c056:	0018      	movs	r0, r3
 800c058:	f7ff fca0 	bl	800b99c <SGP_GetMeasurementValues>
 800c05c:	1e03      	subs	r3, r0, #0
 800c05e:	d043      	beq.n	800c0e8 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c060:	4b25      	ldr	r3, [pc, #148]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c062:	2203      	movs	r2, #3
 800c064:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c066:	e03f      	b.n	800c0e8 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c068:	4b27      	ldr	r3, [pc, #156]	@ (800c108 <SGP_Upkeep+0xf4>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	0018      	movs	r0, r3
 800c070:	f7f7 fc52 	bl	8003918 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c074:	4b20      	ldr	r3, [pc, #128]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c076:	2206      	movs	r2, #6
 800c078:	701a      	strb	r2, [r3, #0]
    break;
 800c07a:	e038      	b.n	800c0ee <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c07c:	4b1e      	ldr	r3, [pc, #120]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c07e:	2207      	movs	r2, #7
 800c080:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c082:	4b22      	ldr	r3, [pc, #136]	@ (800c10c <SGP_Upkeep+0xf8>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d112      	bne.n	800c0b0 <SGP_Upkeep+0x9c>
 800c08a:	4b21      	ldr	r3, [pc, #132]	@ (800c110 <SGP_Upkeep+0xfc>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	2201      	movs	r2, #1
 800c090:	4053      	eors	r3, r2
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00b      	beq.n	800c0b0 <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800c098:	4b1e      	ldr	r3, [pc, #120]	@ (800c114 <SGP_Upkeep+0x100>)
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d004      	beq.n	800c0aa <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c0a0:	f7ff ff92 	bl	800bfc8 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	f7fc f9cb 	bl	8008440 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c0aa:	4b1a      	ldr	r3, [pc, #104]	@ (800c114 <SGP_Upkeep+0x100>)
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c0b0:	f002 fef6 	bl	800eea0 <HAL_GetTick>
 800c0b4:	0003      	movs	r3, r0
 800c0b6:	22c8      	movs	r2, #200	@ 0xc8
 800c0b8:	0092      	lsls	r2, r2, #2
 800c0ba:	189a      	adds	r2, r3, r2
 800c0bc:	4b16      	ldr	r3, [pc, #88]	@ (800c118 <SGP_Upkeep+0x104>)
 800c0be:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c0c0:	f001 f942 	bl	800d348 <ResetMeasurementIndicator>
  break;
 800c0c4:	e013      	b.n	800c0ee <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c0c6:	4b14      	ldr	r3, [pc, #80]	@ (800c118 <SGP_Upkeep+0x104>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	0018      	movs	r0, r3
 800c0cc:	f002 fa52 	bl	800e574 <TimestampIsReached>
 800c0d0:	1e03      	subs	r3, r0, #0
 800c0d2:	d00b      	beq.n	800c0ec <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c0d4:	f7ff fbda 	bl	800b88c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c0d8:	4b07      	ldr	r3, [pc, #28]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0de:	e005      	b.n	800c0ec <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c0e0:	4b05      	ldr	r3, [pc, #20]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	701a      	strb	r2, [r3, #0]
    break;
 800c0e6:	e002      	b.n	800c0ee <SGP_Upkeep+0xda>
    break;
 800c0e8:	46c0      	nop			@ (mov r8, r8)
 800c0ea:	e000      	b.n	800c0ee <SGP_Upkeep+0xda>
    break;
 800c0ec:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c0ee:	4b02      	ldr	r3, [pc, #8]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
}
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	2000116c 	.word	0x2000116c
 800c0fc:	080256d4 	.word	0x080256d4
 800c100:	08024fbc 	.word	0x08024fbc
 800c104:	08024e80 	.word	0x08024e80
 800c108:	20001168 	.word	0x20001168
 800c10c:	200010b2 	.word	0x200010b2
 800c110:	20002009 	.word	0x20002009
 800c114:	2000109c 	.word	0x2000109c
 800c118:	200010b4 	.word	0x200010b4

0800c11c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	0002      	movs	r2, r0
 800c124:	1dfb      	adds	r3, r7, #7
 800c126:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c128:	1dfb      	adds	r3, r7, #7
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c12e:	d809      	bhi.n	800c144 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c130:	1dfb      	adds	r3, r7, #7
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	001a      	movs	r2, r3
 800c136:	231f      	movs	r3, #31
 800c138:	401a      	ands	r2, r3
 800c13a:	4b04      	ldr	r3, [pc, #16]	@ (800c14c <__NVIC_EnableIRQ+0x30>)
 800c13c:	2101      	movs	r1, #1
 800c13e:	4091      	lsls	r1, r2
 800c140:	000a      	movs	r2, r1
 800c142:	601a      	str	r2, [r3, #0]
  }
}
 800c144:	46c0      	nop			@ (mov r8, r8)
 800c146:	46bd      	mov	sp, r7
 800c148:	b002      	add	sp, #8
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	e000e100 	.word	0xe000e100

0800c150 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	0002      	movs	r2, r0
 800c158:	1dfb      	adds	r3, r7, #7
 800c15a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c15c:	1dfb      	adds	r3, r7, #7
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2b7f      	cmp	r3, #127	@ 0x7f
 800c162:	d810      	bhi.n	800c186 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c164:	1dfb      	adds	r3, r7, #7
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	001a      	movs	r2, r3
 800c16a:	231f      	movs	r3, #31
 800c16c:	4013      	ands	r3, r2
 800c16e:	4908      	ldr	r1, [pc, #32]	@ (800c190 <__NVIC_DisableIRQ+0x40>)
 800c170:	2201      	movs	r2, #1
 800c172:	409a      	lsls	r2, r3
 800c174:	0013      	movs	r3, r2
 800c176:	2280      	movs	r2, #128	@ 0x80
 800c178:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c17a:	f3bf 8f4f 	dsb	sy
}
 800c17e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c180:	f3bf 8f6f 	isb	sy
}
 800c184:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c186:	46c0      	nop			@ (mov r8, r8)
 800c188:	46bd      	mov	sp, r7
 800c18a:	b002      	add	sp, #8
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	46c0      	nop			@ (mov r8, r8)
 800c190:	e000e100 	.word	0xe000e100

0800c194 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c194:	b5b0      	push	{r4, r5, r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af02      	add	r7, sp, #8
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	0008      	movs	r0, r1
 800c19e:	0011      	movs	r1, r2
 800c1a0:	1cfb      	adds	r3, r7, #3
 800c1a2:	1c02      	adds	r2, r0, #0
 800c1a4:	701a      	strb	r2, [r3, #0]
 800c1a6:	1cbb      	adds	r3, r7, #2
 800c1a8:	1c0a      	adds	r2, r1, #0
 800c1aa:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c1ac:	4b5b      	ldr	r3, [pc, #364]	@ (800c31c <getSoundData+0x188>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4053      	eors	r3, r2
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d107      	bne.n	800c1cc <getSoundData+0x38>
 800c1bc:	4b58      	ldr	r3, [pc, #352]	@ (800c320 <getSoundData+0x18c>)
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	4053      	eors	r3, r2
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <getSoundData+0x3c>
    {
        return false;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	e0a0      	b.n	800c312 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c1d0:	4b54      	ldr	r3, [pc, #336]	@ (800c324 <getSoundData+0x190>)
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d005      	beq.n	800c1e6 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c1da:	4b53      	ldr	r3, [pc, #332]	@ (800c328 <getSoundData+0x194>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	b25b      	sxtb	r3, r3
 800c1e0:	0018      	movs	r0, r3
 800c1e2:	f7ff ffb5 	bl	800c150 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c1e6:	f3bf 8f4f 	dsb	sy
}
 800c1ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c1ec:	f3bf 8f6f 	isb	sy
}
 800c1f0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c1f2:	1cfb      	adds	r3, r7, #3
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d04c      	beq.n	800c294 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c1fa:	4b4c      	ldr	r3, [pc, #304]	@ (800c32c <getSoundData+0x198>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d11b      	bne.n	800c23a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c20e:	2300      	movs	r3, #0
 800c210:	617b      	str	r3, [r7, #20]
 800c212:	e00e      	b.n	800c232 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	18d3      	adds	r3, r2, r3
 800c21a:	3302      	adds	r3, #2
 800c21c:	2200      	movs	r2, #0
 800c21e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	18d3      	adds	r3, r2, r3
 800c226:	3308      	adds	r3, #8
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	3301      	adds	r3, #1
 800c230:	617b      	str	r3, [r7, #20]
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	2b05      	cmp	r3, #5
 800c236:	d9ed      	bls.n	800c214 <getSoundData+0x80>
 800c238:	e02c      	b.n	800c294 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	1c59      	adds	r1, r3, #1
 800c240:	4b3b      	ldr	r3, [pc, #236]	@ (800c330 <getSoundData+0x19c>)
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	4b3b      	ldr	r3, [pc, #236]	@ (800c334 <getSoundData+0x1a0>)
 800c246:	681c      	ldr	r4, [r3, #0]
 800c248:	4b38      	ldr	r3, [pc, #224]	@ (800c32c <getSoundData+0x198>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	0023      	movs	r3, r4
 800c250:	f000 fde8 	bl	800ce24 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c254:	2300      	movs	r3, #0
 800c256:	613b      	str	r3, [r7, #16]
 800c258:	e019      	b.n	800c28e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	18d3      	adds	r3, r2, r3
 800c260:	1c98      	adds	r0, r3, #2
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	3308      	adds	r3, #8
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c26a:	4b33      	ldr	r3, [pc, #204]	@ (800c338 <getSoundData+0x1a4>)
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	0092      	lsls	r2, r2, #2
 800c270:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c272:	4b32      	ldr	r3, [pc, #200]	@ (800c33c <getSoundData+0x1a8>)
 800c274:	693a      	ldr	r2, [r7, #16]
 800c276:	0092      	lsls	r2, r2, #2
 800c278:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c27a:	4b2c      	ldr	r3, [pc, #176]	@ (800c32c <getSoundData+0x198>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	0013      	movs	r3, r2
 800c282:	0022      	movs	r2, r4
 800c284:	f000 fdce 	bl	800ce24 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	3301      	adds	r3, #1
 800c28c:	613b      	str	r3, [r7, #16]
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	2b05      	cmp	r3, #5
 800c292:	d9e2      	bls.n	800c25a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c294:	1cbb      	adds	r3, r7, #2
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d028      	beq.n	800c2ee <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c29c:	240e      	movs	r4, #14
 800c29e:	193b      	adds	r3, r7, r4
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c2a4:	250d      	movs	r5, #13
 800c2a6:	197b      	adds	r3, r7, r5
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c2ac:	4b24      	ldr	r3, [pc, #144]	@ (800c340 <getSoundData+0x1ac>)
 800c2ae:	6818      	ldr	r0, [r3, #0]
 800c2b0:	4924      	ldr	r1, [pc, #144]	@ (800c344 <getSoundData+0x1b0>)
 800c2b2:	197b      	adds	r3, r7, r5
 800c2b4:	193a      	adds	r2, r7, r4
 800c2b6:	f000 fe59 	bl	800cf6c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c2ba:	193b      	adds	r3, r7, r4
 800c2bc:	881a      	ldrh	r2, [r3, #0]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	21ff      	movs	r1, #255	@ 0xff
 800c2c2:	4011      	ands	r1, r2
 800c2c4:	000c      	movs	r4, r1
 800c2c6:	7b99      	ldrb	r1, [r3, #14]
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	4001      	ands	r1, r0
 800c2cc:	1c08      	adds	r0, r1, #0
 800c2ce:	1c21      	adds	r1, r4, #0
 800c2d0:	4301      	orrs	r1, r0
 800c2d2:	7399      	strb	r1, [r3, #14]
 800c2d4:	0a12      	lsrs	r2, r2, #8
 800c2d6:	b290      	uxth	r0, r2
 800c2d8:	7bda      	ldrb	r2, [r3, #15]
 800c2da:	2100      	movs	r1, #0
 800c2dc:	400a      	ands	r2, r1
 800c2de:	1c11      	adds	r1, r2, #0
 800c2e0:	1c02      	adds	r2, r0, #0
 800c2e2:	430a      	orrs	r2, r1
 800c2e4:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c2e6:	197b      	adds	r3, r7, r5
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c2ee:	f000 f86f 	bl	800c3d0 <micSettlingComplete>
 800c2f2:	0003      	movs	r3, r0
 800c2f4:	001a      	movs	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c324 <getSoundData+0x190>)
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b00      	cmp	r3, #0
 800c302:	d005      	beq.n	800c310 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c304:	4b08      	ldr	r3, [pc, #32]	@ (800c328 <getSoundData+0x194>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	b25b      	sxtb	r3, r3
 800c30a:	0018      	movs	r0, r3
 800c30c:	f7ff ff06 	bl	800c11c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c310:	2301      	movs	r3, #1
}
 800c312:	0018      	movs	r0, r3
 800c314:	46bd      	mov	sp, r7
 800c316:	b006      	add	sp, #24
 800c318:	bdb0      	pop	{r4, r5, r7, pc}
 800c31a:	46c0      	nop			@ (mov r8, r8)
 800c31c:	2000116e 	.word	0x2000116e
 800c320:	20001171 	.word	0x20001171
 800c324:	20001170 	.word	0x20001170
 800c328:	20001bc0 	.word	0x20001bc0
 800c32c:	20001bfc 	.word	0x20001bfc
 800c330:	20001bc4 	.word	0x20001bc4
 800c334:	20001bc8 	.word	0x20001bc8
 800c338:	20001bcc 	.word	0x20001bcc
 800c33c:	20001be4 	.word	0x20001be4
 800c340:	20001178 	.word	0x20001178
 800c344:	3b5c7333 	.word	0x3b5c7333

0800c348 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	001a      	movs	r2, r3
 800c356:	1cfb      	adds	r3, r7, #3
 800c358:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c35a:	4b09      	ldr	r3, [pc, #36]	@ (800c380 <soundInit+0x38>)
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c360:	4b08      	ldr	r3, [pc, #32]	@ (800c384 <soundInit+0x3c>)
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c366:	4b08      	ldr	r3, [pc, #32]	@ (800c388 <soundInit+0x40>)
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c36c:	4b07      	ldr	r3, [pc, #28]	@ (800c38c <soundInit+0x44>)
 800c36e:	2200      	movs	r2, #0
 800c370:	569a      	ldrsb	r2, [r3, r2]
 800c372:	4b06      	ldr	r3, [pc, #24]	@ (800c38c <soundInit+0x44>)
 800c374:	701a      	strb	r2, [r3, #0]

    return true;
 800c376:	2301      	movs	r3, #1
}
 800c378:	0018      	movs	r0, r3
 800c37a:	46bd      	mov	sp, r7
 800c37c:	b004      	add	sp, #16
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	20001bb8 	.word	0x20001bb8
 800c384:	20001bb4 	.word	0x20001bb4
 800c388:	20001bbc 	.word	0x20001bbc
 800c38c:	20001bc0 	.word	0x20001bc0

0800c390 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c394:	4b02      	ldr	r3, [pc, #8]	@ (800c3a0 <clearMaximumAmplitude+0x10>)
 800c396:	2200      	movs	r2, #0
 800c398:	601a      	str	r2, [r3, #0]
}
 800c39a:	46c0      	nop			@ (mov r8, r8)
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	20001178 	.word	0x20001178

0800c3a4 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c3a8:	4b08      	ldr	r3, [pc, #32]	@ (800c3cc <startMicSettlingPeriod+0x28>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c3b2:	4b06      	ldr	r3, [pc, #24]	@ (800c3cc <startMicSettlingPeriod+0x28>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	f00a fb36 	bl	8016a28 <HAL_TIM_Base_Start>
 800c3bc:	1e03      	subs	r3, r0, #0
 800c3be:	d001      	beq.n	800c3c4 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	e000      	b.n	800c3c6 <startMicSettlingPeriod+0x22>
    }
    return true;
 800c3c4:	2301      	movs	r3, #1
}
 800c3c6:	0018      	movs	r0, r3
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	20001bb4 	.word	0x20001bb4

0800c3d0 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c3d6:	4b0e      	ldr	r3, [pc, #56]	@ (800c410 <micSettlingComplete+0x40>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	401a      	ands	r2, r3
 800c3e2:	1dfb      	adds	r3, r7, #7
 800c3e4:	3a01      	subs	r2, #1
 800c3e6:	4251      	negs	r1, r2
 800c3e8:	414a      	adcs	r2, r1
 800c3ea:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c3ec:	1dfb      	adds	r3, r7, #7
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d007      	beq.n	800c404 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c3f4:	4b06      	ldr	r3, [pc, #24]	@ (800c410 <micSettlingComplete+0x40>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	f00a fb5f 	bl	8016abc <HAL_TIM_Base_Stop>
      DataReady = true;
 800c3fe:	4b05      	ldr	r3, [pc, #20]	@ (800c414 <micSettlingComplete+0x44>)
 800c400:	2201      	movs	r2, #1
 800c402:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c404:	1dfb      	adds	r3, r7, #7
 800c406:	781b      	ldrb	r3, [r3, #0]
}
 800c408:	0018      	movs	r0, r3
 800c40a:	46bd      	mov	sp, r7
 800c40c:	b002      	add	sp, #8
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	20001bb4 	.word	0x20001bb4
 800c414:	2000116d 	.word	0x2000116d

0800c418 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	0002      	movs	r2, r0
 800c420:	1dfb      	adds	r3, r7, #7
 800c422:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c424:	4b29      	ldr	r3, [pc, #164]	@ (800c4cc <enableMicrophone+0xb4>)
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	1dfa      	adds	r2, r7, #7
 800c42c:	7812      	ldrb	r2, [r2, #0]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d101      	bne.n	800c436 <enableMicrophone+0x1e>
    {
        return true;
 800c432:	2301      	movs	r3, #1
 800c434:	e045      	b.n	800c4c2 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c436:	1dfb      	adds	r3, r7, #7
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d025      	beq.n	800c48a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c43e:	f7ff ffb1 	bl	800c3a4 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c442:	4b23      	ldr	r3, [pc, #140]	@ (800c4d0 <enableMicrophone+0xb8>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2280      	movs	r2, #128	@ 0x80
 800c448:	0092      	lsls	r2, r2, #2
 800c44a:	4922      	ldr	r1, [pc, #136]	@ (800c4d4 <enableMicrophone+0xbc>)
 800c44c:	0018      	movs	r0, r3
 800c44e:	f006 fd55 	bl	8012efc <HAL_I2S_Receive_DMA>
 800c452:	1e03      	subs	r3, r0, #0
 800c454:	d001      	beq.n	800c45a <enableMicrophone+0x42>
        {
            return false;
 800c456:	2300      	movs	r3, #0
 800c458:	e033      	b.n	800c4c2 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c45a:	f7ff ff99 	bl	800c390 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c45e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4d8 <enableMicrophone+0xc0>)
 800c460:	2200      	movs	r2, #0
 800c462:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c464:	4b1d      	ldr	r3, [pc, #116]	@ (800c4dc <enableMicrophone+0xc4>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	b25b      	sxtb	r3, r3
 800c46a:	0018      	movs	r0, r3
 800c46c:	f7ff fe56 	bl	800c11c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c470:	4b1b      	ldr	r3, [pc, #108]	@ (800c4e0 <enableMicrophone+0xc8>)
 800c472:	2201      	movs	r2, #1
 800c474:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c476:	4b15      	ldr	r3, [pc, #84]	@ (800c4cc <enableMicrophone+0xb4>)
 800c478:	2201      	movs	r2, #1
 800c47a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c47c:	4b19      	ldr	r3, [pc, #100]	@ (800c4e4 <enableMicrophone+0xcc>)
 800c47e:	2200      	movs	r2, #0
 800c480:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c482:	4b19      	ldr	r3, [pc, #100]	@ (800c4e8 <enableMicrophone+0xd0>)
 800c484:	2200      	movs	r2, #0
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	e01a      	b.n	800c4c0 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c48a:	4b14      	ldr	r3, [pc, #80]	@ (800c4dc <enableMicrophone+0xc4>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	b25b      	sxtb	r3, r3
 800c490:	0018      	movs	r0, r3
 800c492:	f7ff fe5d 	bl	800c150 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c496:	4b12      	ldr	r3, [pc, #72]	@ (800c4e0 <enableMicrophone+0xc8>)
 800c498:	2200      	movs	r2, #0
 800c49a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c49c:	4b11      	ldr	r3, [pc, #68]	@ (800c4e4 <enableMicrophone+0xcc>)
 800c49e:	2200      	movs	r2, #0
 800c4a0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c4a2:	4b11      	ldr	r3, [pc, #68]	@ (800c4e8 <enableMicrophone+0xd0>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c4a8:	4b09      	ldr	r3, [pc, #36]	@ (800c4d0 <enableMicrophone+0xb8>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	0018      	movs	r0, r3
 800c4ae:	f006 fde7 	bl	8013080 <HAL_I2S_DMAStop>
 800c4b2:	1e03      	subs	r3, r0, #0
 800c4b4:	d001      	beq.n	800c4ba <enableMicrophone+0xa2>
        {
            return false;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e003      	b.n	800c4c2 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c4ba:	4b04      	ldr	r3, [pc, #16]	@ (800c4cc <enableMicrophone+0xb4>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c4c0:	2301      	movs	r3, #1
}
 800c4c2:	0018      	movs	r0, r3
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	b002      	add	sp, #8
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	46c0      	nop			@ (mov r8, r8)
 800c4cc:	2000116e 	.word	0x2000116e
 800c4d0:	20001bb8 	.word	0x20001bb8
 800c4d4:	200011b4 	.word	0x200011b4
 800c4d8:	20001174 	.word	0x20001174
 800c4dc:	20001bc0 	.word	0x20001bc0
 800c4e0:	20001170 	.word	0x20001170
 800c4e4:	2000116f 	.word	0x2000116f
 800c4e8:	20001171 	.word	0x20001171

0800c4ec <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c524 <startSPLcalculation+0x38>)
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	4053      	eors	r3, r2
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d001      	beq.n	800c504 <startSPLcalculation+0x18>
    {
        return false;
 800c500:	2300      	movs	r3, #0
 800c502:	e00c      	b.n	800c51e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c504:	4b08      	ldr	r3, [pc, #32]	@ (800c528 <startSPLcalculation+0x3c>)
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <startSPLcalculation+0x26>
    {
        return true;
 800c50e:	2301      	movs	r3, #1
 800c510:	e005      	b.n	800c51e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c512:	f000 fb63 	bl	800cbdc <resetSPLstate>
    SPLcalcEnabled = true;
 800c516:	4b04      	ldr	r3, [pc, #16]	@ (800c528 <startSPLcalculation+0x3c>)
 800c518:	2201      	movs	r2, #1
 800c51a:	701a      	strb	r2, [r3, #0]
    return true;
 800c51c:	2301      	movs	r3, #1
}
 800c51e:	0018      	movs	r0, r3
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	2000116e 	.word	0x2000116e
 800c528:	2000116f 	.word	0x2000116f

0800c52c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c534:	4b05      	ldr	r3, [pc, #20]	@ (800c54c <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d102      	bne.n	800c544 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c53e:	2000      	movs	r0, #0
 800c540:	f000 f81a 	bl	800c578 <processHalfDMAbuffer>
  }
}
 800c544:	46c0      	nop			@ (mov r8, r8)
 800c546:	46bd      	mov	sp, r7
 800c548:	b002      	add	sp, #8
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	20001bb8 	.word	0x20001bb8

0800c550 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c558:	4b06      	ldr	r3, [pc, #24]	@ (800c574 <HAL_I2S_RxCpltCallback+0x24>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d104      	bne.n	800c56c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c562:	2380      	movs	r3, #128	@ 0x80
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	0018      	movs	r0, r3
 800c568:	f000 f806 	bl	800c578 <processHalfDMAbuffer>
  }
}
 800c56c:	46c0      	nop			@ (mov r8, r8)
 800c56e:	46bd      	mov	sp, r7
 800c570:	b002      	add	sp, #8
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20001bb8 	.word	0x20001bb8

0800c578 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	005a      	lsls	r2, r3, #1
 800c584:	4b15      	ldr	r3, [pc, #84]	@ (800c5dc <processHalfDMAbuffer+0x64>)
 800c586:	18d3      	adds	r3, r2, r3
 800c588:	4a15      	ldr	r2, [pc, #84]	@ (800c5e0 <processHalfDMAbuffer+0x68>)
 800c58a:	2180      	movs	r1, #128	@ 0x80
 800c58c:	0089      	lsls	r1, r1, #2
 800c58e:	0018      	movs	r0, r3
 800c590:	f000 fd35 	bl	800cffe <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c594:	4b13      	ldr	r3, [pc, #76]	@ (800c5e4 <processHalfDMAbuffer+0x6c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	425a      	negs	r2, r3
 800c59a:	4153      	adcs	r3, r2
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	4b11      	ldr	r3, [pc, #68]	@ (800c5e4 <processHalfDMAbuffer+0x6c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2109      	movs	r1, #9
 800c5a4:	4299      	cmp	r1, r3
 800c5a6:	419b      	sbcs	r3, r3
 800c5a8:	425b      	negs	r3, r3
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	480c      	ldr	r0, [pc, #48]	@ (800c5e0 <processHalfDMAbuffer+0x68>)
 800c5ae:	2180      	movs	r1, #128	@ 0x80
 800c5b0:	f000 fb46 	bl	800cc40 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c5b4:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e4 <processHalfDMAbuffer+0x6c>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b09      	cmp	r3, #9
 800c5ba:	d804      	bhi.n	800c5c6 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c5bc:	4b09      	ldr	r3, [pc, #36]	@ (800c5e4 <processHalfDMAbuffer+0x6c>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	1c5a      	adds	r2, r3, #1
 800c5c2:	4b08      	ldr	r3, [pc, #32]	@ (800c5e4 <processHalfDMAbuffer+0x6c>)
 800c5c4:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c5c6:	4b08      	ldr	r3, [pc, #32]	@ (800c5e8 <processHalfDMAbuffer+0x70>)
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d001      	beq.n	800c5d4 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c5d0:	f000 f826 	bl	800c620 <calculateSPLQ31>
    }
}
 800c5d4:	46c0      	nop			@ (mov r8, r8)
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	b002      	add	sp, #8
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	200011b4 	.word	0x200011b4
 800c5e0:	200019b4 	.word	0x200019b4
 800c5e4:	20001174 	.word	0x20001174
 800c5e8:	2000116f 	.word	0x2000116f

0800c5ec <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c5f4:	4b07      	ldr	r3, [pc, #28]	@ (800c614 <HAL_I2S_ErrorCallback+0x28>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d106      	bne.n	800c60c <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c5fe:	4a06      	ldr	r2, [pc, #24]	@ (800c618 <HAL_I2S_ErrorCallback+0x2c>)
 800c600:	239e      	movs	r3, #158	@ 0x9e
 800c602:	0059      	lsls	r1, r3, #1
 800c604:	4b05      	ldr	r3, [pc, #20]	@ (800c61c <HAL_I2S_ErrorCallback+0x30>)
 800c606:	0018      	movs	r0, r3
 800c608:	f002 f8c2 	bl	800e790 <errorHandler>
  }
}
 800c60c:	46c0      	nop			@ (mov r8, r8)
 800c60e:	46bd      	mov	sp, r7
 800c610:	b002      	add	sp, #8
 800c612:	bd80      	pop	{r7, pc}
 800c614:	20001bb8 	.word	0x20001bb8
 800c618:	08024fe4 	.word	0x08024fe4
 800c61c:	080257c4 	.word	0x080257c4

0800c620 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c622:	b0b3      	sub	sp, #204	@ 0xcc
 800c624:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c626:	4ae2      	ldr	r2, [pc, #904]	@ (800c9b0 <calculateSPLQ31+0x390>)
 800c628:	2338      	movs	r3, #56	@ 0x38
 800c62a:	2030      	movs	r0, #48	@ 0x30
 800c62c:	181b      	adds	r3, r3, r0
 800c62e:	19d9      	adds	r1, r3, r7
 800c630:	2334      	movs	r3, #52	@ 0x34
 800c632:	181b      	adds	r3, r3, r0
 800c634:	19d8      	adds	r0, r3, r7
 800c636:	2380      	movs	r3, #128	@ 0x80
 800c638:	f000 fc36 	bl	800cea8 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c63c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c63e:	2b00      	cmp	r3, #0
 800c640:	da00      	bge.n	800c644 <calculateSPLQ31+0x24>
 800c642:	3301      	adds	r3, #1
 800c644:	105b      	asrs	r3, r3, #1
 800c646:	001a      	movs	r2, r3
 800c648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	da00      	bge.n	800c650 <calculateSPLQ31+0x30>
 800c64e:	3301      	adds	r3, #1
 800c650:	105b      	asrs	r3, r3, #1
 800c652:	18d3      	adds	r3, r2, r3
 800c654:	2188      	movs	r1, #136	@ 0x88
 800c656:	187a      	adds	r2, r7, r1
 800c658:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c65a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c65c:	187b      	adds	r3, r7, r1
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	3304      	adds	r3, #4
 800c664:	2284      	movs	r2, #132	@ 0x84
 800c666:	18b9      	adds	r1, r7, r2
 800c668:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c66a:	18bb      	adds	r3, r7, r2
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4ad1      	ldr	r2, [pc, #836]	@ (800c9b4 <calculateSPLQ31+0x394>)
 800c670:	0019      	movs	r1, r3
 800c672:	0010      	movs	r0, r2
 800c674:	f000 fc58 	bl	800cf28 <getPo2factor>
 800c678:	0003      	movs	r3, r0
 800c67a:	2280      	movs	r2, #128	@ 0x80
 800c67c:	18ba      	adds	r2, r7, r2
 800c67e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c680:	2300      	movs	r3, #0
 800c682:	2284      	movs	r2, #132	@ 0x84
 800c684:	2130      	movs	r1, #48	@ 0x30
 800c686:	1852      	adds	r2, r2, r1
 800c688:	19d2      	adds	r2, r2, r7
 800c68a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c68c:	2300      	movs	r3, #0
 800c68e:	2280      	movs	r2, #128	@ 0x80
 800c690:	1852      	adds	r2, r2, r1
 800c692:	19d2      	adds	r2, r2, r7
 800c694:	6013      	str	r3, [r2, #0]
 800c696:	e032      	b.n	800c6fe <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c698:	4ac5      	ldr	r2, [pc, #788]	@ (800c9b0 <calculateSPLQ31+0x390>)
 800c69a:	2680      	movs	r6, #128	@ 0x80
 800c69c:	2330      	movs	r3, #48	@ 0x30
 800c69e:	18f1      	adds	r1, r6, r3
 800c6a0:	19cb      	adds	r3, r1, r7
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	589a      	ldr	r2, [r3, r2]
 800c6a8:	2188      	movs	r1, #136	@ 0x88
 800c6aa:	1879      	adds	r1, r7, r1
 800c6ac:	680b      	ldr	r3, [r1, #0]
 800c6ae:	1ad2      	subs	r2, r2, r3
 800c6b0:	2180      	movs	r1, #128	@ 0x80
 800c6b2:	1879      	adds	r1, r7, r1
 800c6b4:	680b      	ldr	r3, [r1, #0]
 800c6b6:	409a      	lsls	r2, r3
 800c6b8:	0011      	movs	r1, r2
 800c6ba:	4abf      	ldr	r2, [pc, #764]	@ (800c9b8 <calculateSPLQ31+0x398>)
 800c6bc:	2084      	movs	r0, #132	@ 0x84
 800c6be:	2330      	movs	r3, #48	@ 0x30
 800c6c0:	18c3      	adds	r3, r0, r3
 800c6c2:	19db      	adds	r3, r3, r7
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c6ca:	2230      	movs	r2, #48	@ 0x30
 800c6cc:	1883      	adds	r3, r0, r2
 800c6ce:	19db      	adds	r3, r3, r7
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	49b8      	ldr	r1, [pc, #736]	@ (800c9b8 <calculateSPLQ31+0x398>)
 800c6d6:	009a      	lsls	r2, r3, #2
 800c6d8:	2300      	movs	r3, #0
 800c6da:	5053      	str	r3, [r2, r1]
        count += 2;
 800c6dc:	2230      	movs	r2, #48	@ 0x30
 800c6de:	1883      	adds	r3, r0, r2
 800c6e0:	19db      	adds	r3, r3, r7
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3302      	adds	r3, #2
 800c6e6:	0011      	movs	r1, r2
 800c6e8:	1882      	adds	r2, r0, r2
 800c6ea:	19d2      	adds	r2, r2, r7
 800c6ec:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c6ee:	000a      	movs	r2, r1
 800c6f0:	18b3      	adds	r3, r6, r2
 800c6f2:	19db      	adds	r3, r3, r7
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	18b2      	adds	r2, r6, r2
 800c6fa:	19d2      	adds	r2, r2, r7
 800c6fc:	6013      	str	r3, [r2, #0]
 800c6fe:	2380      	movs	r3, #128	@ 0x80
 800c700:	2630      	movs	r6, #48	@ 0x30
 800c702:	199b      	adds	r3, r3, r6
 800c704:	19db      	adds	r3, r3, r7
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b7f      	cmp	r3, #127	@ 0x7f
 800c70a:	d9c5      	bls.n	800c698 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c70c:	4bab      	ldr	r3, [pc, #684]	@ (800c9bc <calculateSPLQ31+0x39c>)
 800c70e:	6818      	ldr	r0, [r3, #0]
 800c710:	49a9      	ldr	r1, [pc, #676]	@ (800c9b8 <calculateSPLQ31+0x398>)
 800c712:	2301      	movs	r3, #1
 800c714:	2200      	movs	r2, #0
 800c716:	f011 fa4d 	bl	801dbb4 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c71a:	4aa9      	ldr	r2, [pc, #676]	@ (800c9c0 <calculateSPLQ31+0x3a0>)
 800c71c:	2338      	movs	r3, #56	@ 0x38
 800c71e:	199b      	adds	r3, r3, r6
 800c720:	19d9      	adds	r1, r3, r7
 800c722:	2334      	movs	r3, #52	@ 0x34
 800c724:	199b      	adds	r3, r3, r6
 800c726:	19d8      	adds	r0, r3, r7
 800c728:	237e      	movs	r3, #126	@ 0x7e
 800c72a:	f000 fbbd 	bl	800cea8 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c72e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c730:	2380      	movs	r3, #128	@ 0x80
 800c732:	061b      	lsls	r3, r3, #24
 800c734:	429a      	cmp	r2, r3
 800c736:	d101      	bne.n	800c73c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c738:	4b9e      	ldr	r3, [pc, #632]	@ (800c9b4 <calculateSPLQ31+0x394>)
 800c73a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c73c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c73e:	2380      	movs	r3, #128	@ 0x80
 800c740:	061b      	lsls	r3, r3, #24
 800c742:	429a      	cmp	r2, r3
 800c744:	d101      	bne.n	800c74a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c746:	4b9b      	ldr	r3, [pc, #620]	@ (800c9b4 <calculateSPLQ31+0x394>)
 800c748:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c74a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c74c:	17da      	asrs	r2, r3, #31
 800c74e:	189b      	adds	r3, r3, r2
 800c750:	4053      	eors	r3, r2
 800c752:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c756:	17da      	asrs	r2, r3, #31
 800c758:	189b      	adds	r3, r3, r2
 800c75a:	4053      	eors	r3, r2
 800c75c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c75e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c762:	429a      	cmp	r2, r3
 800c764:	dd01      	ble.n	800c76a <calculateSPLQ31+0x14a>
    {
        max = min;
 800c766:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c768:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c76a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c76c:	3304      	adds	r3, #4
 800c76e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c770:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c772:	4a90      	ldr	r2, [pc, #576]	@ (800c9b4 <calculateSPLQ31+0x394>)
 800c774:	0019      	movs	r1, r3
 800c776:	0010      	movs	r0, r2
 800c778:	f000 fbd6 	bl	800cf28 <getPo2factor>
 800c77c:	0003      	movs	r3, r0
 800c77e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c780:	2302      	movs	r3, #2
 800c782:	22ac      	movs	r2, #172	@ 0xac
 800c784:	18ba      	adds	r2, r7, r2
 800c786:	6013      	str	r3, [r2, #0]
 800c788:	e012      	b.n	800c7b0 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c78a:	4a8b      	ldr	r2, [pc, #556]	@ (800c9b8 <calculateSPLQ31+0x398>)
 800c78c:	20ac      	movs	r0, #172	@ 0xac
 800c78e:	183b      	adds	r3, r7, r0
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	589a      	ldr	r2, [r3, r2]
 800c796:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c798:	409a      	lsls	r2, r3
 800c79a:	0011      	movs	r1, r2
 800c79c:	4a86      	ldr	r2, [pc, #536]	@ (800c9b8 <calculateSPLQ31+0x398>)
 800c79e:	183b      	adds	r3, r7, r0
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c7a6:	183b      	adds	r3, r7, r0
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	183a      	adds	r2, r7, r0
 800c7ae:	6013      	str	r3, [r2, #0]
 800c7b0:	23ac      	movs	r3, #172	@ 0xac
 800c7b2:	18fb      	adds	r3, r7, r3
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7b8:	d9e7      	bls.n	800c78a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c7ba:	4b7d      	ldr	r3, [pc, #500]	@ (800c9b0 <calculateSPLQ31+0x390>)
 800c7bc:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c7be:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c7c0:	4b7d      	ldr	r3, [pc, #500]	@ (800c9b8 <calculateSPLQ31+0x398>)
 800c7c2:	2240      	movs	r2, #64	@ 0x40
 800c7c4:	0018      	movs	r0, r3
 800c7c6:	f011 ff9f 	bl	801e708 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c7ca:	2330      	movs	r3, #48	@ 0x30
 800c7cc:	18fb      	adds	r3, r7, r3
 800c7ce:	0018      	movs	r0, r3
 800c7d0:	2330      	movs	r3, #48	@ 0x30
 800c7d2:	001a      	movs	r2, r3
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	f013 fdbb 	bl	8020350 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2300      	movs	r3, #0
 800c7de:	21a0      	movs	r1, #160	@ 0xa0
 800c7e0:	1879      	adds	r1, r7, r1
 800c7e2:	600a      	str	r2, [r1, #0]
 800c7e4:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	229c      	movs	r2, #156	@ 0x9c
 800c7ea:	18ba      	adds	r2, r7, r2
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	e05b      	b.n	800c8a8 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c7f0:	269c      	movs	r6, #156	@ 0x9c
 800c7f2:	19bb      	adds	r3, r7, r6
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	009a      	lsls	r2, r3, #2
 800c7f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7fa:	189b      	adds	r3, r3, r2
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	613b      	str	r3, [r7, #16]
 800c800:	17db      	asrs	r3, r3, #31
 800c802:	617b      	str	r3, [r7, #20]
 800c804:	4b6f      	ldr	r3, [pc, #444]	@ (800c9c4 <calculateSPLQ31+0x3a4>)
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	19bb      	adds	r3, r7, r6
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	18d3      	adds	r3, r2, r3
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	60bb      	str	r3, [r7, #8]
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6938      	ldr	r0, [r7, #16]
 800c81e:	6979      	ldr	r1, [r7, #20]
 800c820:	f7f3 fece 	bl	80005c0 <__aeabi_lmul>
 800c824:	0002      	movs	r2, r0
 800c826:	000b      	movs	r3, r1
 800c828:	0010      	movs	r0, r2
 800c82a:	0019      	movs	r1, r3
 800c82c:	23a0      	movs	r3, #160	@ 0xa0
 800c82e:	18fa      	adds	r2, r7, r3
 800c830:	6853      	ldr	r3, [r2, #4]
 800c832:	6812      	ldr	r2, [r2, #0]
 800c834:	1812      	adds	r2, r2, r0
 800c836:	414b      	adcs	r3, r1
 800c838:	21a0      	movs	r1, #160	@ 0xa0
 800c83a:	1879      	adds	r1, r7, r1
 800c83c:	600a      	str	r2, [r1, #0]
 800c83e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c840:	4b61      	ldr	r3, [pc, #388]	@ (800c9c8 <calculateSPLQ31+0x3a8>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	19bb      	adds	r3, r7, r6
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	18d3      	adds	r3, r2, r3
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2b06      	cmp	r3, #6
 800c84e:	d025      	beq.n	800c89c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c850:	4b5d      	ldr	r3, [pc, #372]	@ (800c9c8 <calculateSPLQ31+0x3a8>)
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	19bb      	adds	r3, r7, r6
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	18d3      	adds	r3, r2, r3
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2230      	movs	r2, #48	@ 0x30
 800c85e:	18ba      	adds	r2, r7, r2
 800c860:	00db      	lsls	r3, r3, #3
 800c862:	18d3      	adds	r3, r2, r3
 800c864:	6818      	ldr	r0, [r3, #0]
 800c866:	6859      	ldr	r1, [r3, #4]
 800c868:	19bb      	adds	r3, r7, r6
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	009a      	lsls	r2, r3, #2
 800c86e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c870:	189b      	adds	r3, r3, r2
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	603b      	str	r3, [r7, #0]
 800c876:	17db      	asrs	r3, r3, #31
 800c878:	607b      	str	r3, [r7, #4]
 800c87a:	4b53      	ldr	r3, [pc, #332]	@ (800c9c8 <calculateSPLQ31+0x3a8>)
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	19be      	adds	r6, r7, r6
 800c880:	6833      	ldr	r3, [r6, #0]
 800c882:	18d3      	adds	r3, r2, r3
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	001e      	movs	r6, r3
 800c888:	683a      	ldr	r2, [r7, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	1880      	adds	r0, r0, r2
 800c88e:	4159      	adcs	r1, r3
 800c890:	2330      	movs	r3, #48	@ 0x30
 800c892:	18fa      	adds	r2, r7, r3
 800c894:	00f3      	lsls	r3, r6, #3
 800c896:	18d3      	adds	r3, r2, r3
 800c898:	6018      	str	r0, [r3, #0]
 800c89a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c89c:	229c      	movs	r2, #156	@ 0x9c
 800c89e:	18bb      	adds	r3, r7, r2
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	18ba      	adds	r2, r7, r2
 800c8a6:	6013      	str	r3, [r2, #0]
 800c8a8:	239c      	movs	r3, #156	@ 0x9c
 800c8aa:	18fb      	adds	r3, r7, r3
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b3f      	cmp	r3, #63	@ 0x3f
 800c8b0:	d99e      	bls.n	800c7f0 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c8b2:	2380      	movs	r3, #128	@ 0x80
 800c8b4:	18fb      	adds	r3, r7, r3
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	001a      	movs	r2, r3
 800c8bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	18d3      	adds	r3, r2, r3
 800c8c2:	3b22      	subs	r3, #34	@ 0x22
 800c8c4:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c8c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8c8:	17da      	asrs	r2, r3, #31
 800c8ca:	189b      	adds	r3, r3, r2
 800c8cc:	4053      	eors	r3, r2
 800c8ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c8d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	da62      	bge.n	800c99c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c8d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8d8:	3b20      	subs	r3, #32
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	db05      	blt.n	800c8ea <calculateSPLQ31+0x2ca>
 800c8de:	22a0      	movs	r2, #160	@ 0xa0
 800c8e0:	18ba      	adds	r2, r7, r2
 800c8e2:	6812      	ldr	r2, [r2, #0]
 800c8e4:	409a      	lsls	r2, r3
 800c8e6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8e8:	e010      	b.n	800c90c <calculateSPLQ31+0x2ec>
 800c8ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8ec:	2220      	movs	r2, #32
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	22a0      	movs	r2, #160	@ 0xa0
 800c8f2:	18ba      	adds	r2, r7, r2
 800c8f4:	6812      	ldr	r2, [r2, #0]
 800c8f6:	40da      	lsrs	r2, r3
 800c8f8:	0013      	movs	r3, r2
 800c8fa:	22a4      	movs	r2, #164	@ 0xa4
 800c8fc:	18ba      	adds	r2, r7, r2
 800c8fe:	6811      	ldr	r1, [r2, #0]
 800c900:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c902:	4091      	lsls	r1, r2
 800c904:	6279      	str	r1, [r7, #36]	@ 0x24
 800c906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c908:	431a      	orrs	r2, r3
 800c90a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c90c:	21a0      	movs	r1, #160	@ 0xa0
 800c90e:	187b      	adds	r3, r7, r1
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c914:	409a      	lsls	r2, r3
 800c916:	623a      	str	r2, [r7, #32]
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c91c:	187a      	adds	r2, r7, r1
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c922:	2300      	movs	r3, #0
 800c924:	2298      	movs	r2, #152	@ 0x98
 800c926:	18ba      	adds	r2, r7, r2
 800c928:	6013      	str	r3, [r2, #0]
 800c92a:	e031      	b.n	800c990 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c92c:	2330      	movs	r3, #48	@ 0x30
 800c92e:	18fa      	adds	r2, r7, r3
 800c930:	2398      	movs	r3, #152	@ 0x98
 800c932:	18fb      	adds	r3, r7, r3
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	18d3      	adds	r3, r2, r3
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c940:	3920      	subs	r1, #32
 800c942:	2900      	cmp	r1, #0
 800c944:	db03      	blt.n	800c94e <calculateSPLQ31+0x32e>
 800c946:	0010      	movs	r0, r2
 800c948:	4088      	lsls	r0, r1
 800c94a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c94c:	e00c      	b.n	800c968 <calculateSPLQ31+0x348>
 800c94e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c950:	2020      	movs	r0, #32
 800c952:	1a41      	subs	r1, r0, r1
 800c954:	0010      	movs	r0, r2
 800c956:	40c8      	lsrs	r0, r1
 800c958:	0001      	movs	r1, r0
 800c95a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c95c:	001c      	movs	r4, r3
 800c95e:	4084      	lsls	r4, r0
 800c960:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c962:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c964:	4308      	orrs	r0, r1
 800c966:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c968:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c96a:	0013      	movs	r3, r2
 800c96c:	408b      	lsls	r3, r1
 800c96e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c970:	2330      	movs	r3, #48	@ 0x30
 800c972:	18fa      	adds	r2, r7, r3
 800c974:	2098      	movs	r0, #152	@ 0x98
 800c976:	183b      	adds	r3, r7, r0
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	18d3      	adds	r3, r2, r3
 800c97e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c982:	6019      	str	r1, [r3, #0]
 800c984:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c986:	183b      	adds	r3, r7, r0
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3301      	adds	r3, #1
 800c98c:	183a      	adds	r2, r7, r0
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	2398      	movs	r3, #152	@ 0x98
 800c992:	18fb      	adds	r3, r7, r3
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b05      	cmp	r3, #5
 800c998:	d9c8      	bls.n	800c92c <calculateSPLQ31+0x30c>
 800c99a:	e06b      	b.n	800ca74 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c99c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c99e:	3b20      	subs	r3, #32
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	db13      	blt.n	800c9cc <calculateSPLQ31+0x3ac>
 800c9a4:	22a4      	movs	r2, #164	@ 0xa4
 800c9a6:	18ba      	adds	r2, r7, r2
 800c9a8:	6812      	ldr	r2, [r2, #0]
 800c9aa:	40da      	lsrs	r2, r3
 800c9ac:	61ba      	str	r2, [r7, #24]
 800c9ae:	e01e      	b.n	800c9ee <calculateSPLQ31+0x3ce>
 800c9b0:	200019b4 	.word	0x200019b4
 800c9b4:	7fffffff 	.word	0x7fffffff
 800c9b8:	20001c00 	.word	0x20001c00
 800c9bc:	200000b8 	.word	0x200000b8
 800c9c0:	20001c08 	.word	0x20001c08
 800c9c4:	200000bc 	.word	0x200000bc
 800c9c8:	200000c8 	.word	0x200000c8
 800c9cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ce:	2220      	movs	r2, #32
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	22a4      	movs	r2, #164	@ 0xa4
 800c9d4:	18ba      	adds	r2, r7, r2
 800c9d6:	6812      	ldr	r2, [r2, #0]
 800c9d8:	409a      	lsls	r2, r3
 800c9da:	0013      	movs	r3, r2
 800c9dc:	22a0      	movs	r2, #160	@ 0xa0
 800c9de:	18ba      	adds	r2, r7, r2
 800c9e0:	6811      	ldr	r1, [r2, #0]
 800c9e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9e4:	40d1      	lsrs	r1, r2
 800c9e6:	61b9      	str	r1, [r7, #24]
 800c9e8:	69ba      	ldr	r2, [r7, #24]
 800c9ea:	431a      	orrs	r2, r3
 800c9ec:	61ba      	str	r2, [r7, #24]
 800c9ee:	23a4      	movs	r3, #164	@ 0xa4
 800c9f0:	18fb      	adds	r3, r7, r3
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9f6:	40da      	lsrs	r2, r3
 800c9f8:	61fa      	str	r2, [r7, #28]
 800c9fa:	69ba      	ldr	r2, [r7, #24]
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	21a0      	movs	r1, #160	@ 0xa0
 800ca00:	1879      	adds	r1, r7, r1
 800ca02:	600a      	str	r2, [r1, #0]
 800ca04:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca06:	2300      	movs	r3, #0
 800ca08:	2294      	movs	r2, #148	@ 0x94
 800ca0a:	18ba      	adds	r2, r7, r2
 800ca0c:	6013      	str	r3, [r2, #0]
 800ca0e:	e02c      	b.n	800ca6a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800ca10:	2330      	movs	r3, #48	@ 0x30
 800ca12:	18fa      	adds	r2, r7, r3
 800ca14:	2394      	movs	r3, #148	@ 0x94
 800ca16:	18fb      	adds	r3, r7, r3
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	18d3      	adds	r3, r2, r3
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca24:	3920      	subs	r1, #32
 800ca26:	2900      	cmp	r1, #0
 800ca28:	db03      	blt.n	800ca32 <calculateSPLQ31+0x412>
 800ca2a:	0018      	movs	r0, r3
 800ca2c:	40c8      	lsrs	r0, r1
 800ca2e:	0004      	movs	r4, r0
 800ca30:	e00a      	b.n	800ca48 <calculateSPLQ31+0x428>
 800ca32:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca34:	2020      	movs	r0, #32
 800ca36:	1a41      	subs	r1, r0, r1
 800ca38:	0018      	movs	r0, r3
 800ca3a:	4088      	lsls	r0, r1
 800ca3c:	0001      	movs	r1, r0
 800ca3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca40:	0016      	movs	r6, r2
 800ca42:	40c6      	lsrs	r6, r0
 800ca44:	0034      	movs	r4, r6
 800ca46:	430c      	orrs	r4, r1
 800ca48:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca4a:	40cb      	lsrs	r3, r1
 800ca4c:	001d      	movs	r5, r3
 800ca4e:	2330      	movs	r3, #48	@ 0x30
 800ca50:	18fa      	adds	r2, r7, r3
 800ca52:	2194      	movs	r1, #148	@ 0x94
 800ca54:	187b      	adds	r3, r7, r1
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	18d3      	adds	r3, r2, r3
 800ca5c:	601c      	str	r4, [r3, #0]
 800ca5e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca60:	187b      	adds	r3, r7, r1
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3301      	adds	r3, #1
 800ca66:	187a      	adds	r2, r7, r1
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	2394      	movs	r3, #148	@ 0x94
 800ca6c:	18fb      	adds	r3, r7, r3
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b05      	cmp	r3, #5
 800ca72:	d9cd      	bls.n	800ca10 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ca74:	230f      	movs	r3, #15
 800ca76:	425d      	negs	r5, r3
 800ca78:	2305      	movs	r3, #5
 800ca7a:	425e      	negs	r6, r3
 800ca7c:	4b4a      	ldr	r3, [pc, #296]	@ (800cba8 <calculateSPLQ31+0x588>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	4b4a      	ldr	r3, [pc, #296]	@ (800cbac <calculateSPLQ31+0x58c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	21a0      	movs	r1, #160	@ 0xa0
 800ca8a:	1879      	adds	r1, r7, r1
 800ca8c:	6808      	ldr	r0, [r1, #0]
 800ca8e:	6849      	ldr	r1, [r1, #4]
 800ca90:	4c47      	ldr	r4, [pc, #284]	@ (800cbb0 <calculateSPLQ31+0x590>)
 800ca92:	9403      	str	r4, [sp, #12]
 800ca94:	4c47      	ldr	r4, [pc, #284]	@ (800cbb4 <calculateSPLQ31+0x594>)
 800ca96:	9402      	str	r4, [sp, #8]
 800ca98:	9301      	str	r3, [sp, #4]
 800ca9a:	9200      	str	r2, [sp, #0]
 800ca9c:	0033      	movs	r3, r6
 800ca9e:	002a      	movs	r2, r5
 800caa0:	f000 fa86 	bl	800cfb0 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800caa4:	2300      	movs	r3, #0
 800caa6:	2290      	movs	r2, #144	@ 0x90
 800caa8:	18ba      	adds	r2, r7, r2
 800caaa:	6013      	str	r3, [r2, #0]
 800caac:	e026      	b.n	800cafc <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800caae:	2330      	movs	r3, #48	@ 0x30
 800cab0:	18fa      	adds	r2, r7, r3
 800cab2:	2490      	movs	r4, #144	@ 0x90
 800cab4:	193b      	adds	r3, r7, r4
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	18d3      	adds	r3, r2, r3
 800cabc:	6818      	ldr	r0, [r3, #0]
 800cabe:	6859      	ldr	r1, [r3, #4]
 800cac0:	230f      	movs	r3, #15
 800cac2:	425d      	negs	r5, r3
 800cac4:	2305      	movs	r3, #5
 800cac6:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800cac8:	193b      	adds	r3, r7, r4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	009a      	lsls	r2, r3, #2
 800cace:	4b3a      	ldr	r3, [pc, #232]	@ (800cbb8 <calculateSPLQ31+0x598>)
 800cad0:	18d3      	adds	r3, r2, r3
 800cad2:	193a      	adds	r2, r7, r4
 800cad4:	6812      	ldr	r2, [r2, #0]
 800cad6:	0094      	lsls	r4, r2, #2
 800cad8:	4a38      	ldr	r2, [pc, #224]	@ (800cbbc <calculateSPLQ31+0x59c>)
 800cada:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cadc:	9203      	str	r2, [sp, #12]
 800cade:	9302      	str	r3, [sp, #8]
 800cae0:	2300      	movs	r3, #0
 800cae2:	9301      	str	r3, [sp, #4]
 800cae4:	2300      	movs	r3, #0
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	0033      	movs	r3, r6
 800caea:	002a      	movs	r2, r5
 800caec:	f000 fa60 	bl	800cfb0 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800caf0:	2490      	movs	r4, #144	@ 0x90
 800caf2:	193b      	adds	r3, r7, r4
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3301      	adds	r3, #1
 800caf8:	193a      	adds	r2, r7, r4
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	2390      	movs	r3, #144	@ 0x90
 800cafe:	18fb      	adds	r3, r7, r3
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b05      	cmp	r3, #5
 800cb04:	d9d3      	bls.n	800caae <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800cb06:	4b2b      	ldr	r3, [pc, #172]	@ (800cbb4 <calculateSPLQ31+0x594>)
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	4b2d      	ldr	r3, [pc, #180]	@ (800cbc0 <calculateSPLQ31+0x5a0>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	18d2      	adds	r2, r2, r3
 800cb10:	4b2b      	ldr	r3, [pc, #172]	@ (800cbc0 <calculateSPLQ31+0x5a0>)
 800cb12:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800cb14:	4b26      	ldr	r3, [pc, #152]	@ (800cbb0 <calculateSPLQ31+0x590>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	4b2a      	ldr	r3, [pc, #168]	@ (800cbc4 <calculateSPLQ31+0x5a4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	18d2      	adds	r2, r2, r3
 800cb1e:	4b29      	ldr	r3, [pc, #164]	@ (800cbc4 <calculateSPLQ31+0x5a4>)
 800cb20:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb22:	2300      	movs	r3, #0
 800cb24:	228c      	movs	r2, #140	@ 0x8c
 800cb26:	18ba      	adds	r2, r7, r2
 800cb28:	6013      	str	r3, [r2, #0]
 800cb2a:	e025      	b.n	800cb78 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cb2c:	4b22      	ldr	r3, [pc, #136]	@ (800cbb8 <calculateSPLQ31+0x598>)
 800cb2e:	208c      	movs	r0, #140	@ 0x8c
 800cb30:	183a      	adds	r2, r7, r0
 800cb32:	6812      	ldr	r2, [r2, #0]
 800cb34:	0092      	lsls	r2, r2, #2
 800cb36:	58d2      	ldr	r2, [r2, r3]
 800cb38:	4b23      	ldr	r3, [pc, #140]	@ (800cbc8 <calculateSPLQ31+0x5a8>)
 800cb3a:	1839      	adds	r1, r7, r0
 800cb3c:	6809      	ldr	r1, [r1, #0]
 800cb3e:	0089      	lsls	r1, r1, #2
 800cb40:	58cb      	ldr	r3, [r1, r3]
 800cb42:	18d1      	adds	r1, r2, r3
 800cb44:	4b20      	ldr	r3, [pc, #128]	@ (800cbc8 <calculateSPLQ31+0x5a8>)
 800cb46:	183a      	adds	r2, r7, r0
 800cb48:	6812      	ldr	r2, [r2, #0]
 800cb4a:	0092      	lsls	r2, r2, #2
 800cb4c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cb4e:	4b1b      	ldr	r3, [pc, #108]	@ (800cbbc <calculateSPLQ31+0x59c>)
 800cb50:	183a      	adds	r2, r7, r0
 800cb52:	6812      	ldr	r2, [r2, #0]
 800cb54:	0092      	lsls	r2, r2, #2
 800cb56:	58d2      	ldr	r2, [r2, r3]
 800cb58:	4b1c      	ldr	r3, [pc, #112]	@ (800cbcc <calculateSPLQ31+0x5ac>)
 800cb5a:	1839      	adds	r1, r7, r0
 800cb5c:	6809      	ldr	r1, [r1, #0]
 800cb5e:	0089      	lsls	r1, r1, #2
 800cb60:	58cb      	ldr	r3, [r1, r3]
 800cb62:	18d1      	adds	r1, r2, r3
 800cb64:	4b19      	ldr	r3, [pc, #100]	@ (800cbcc <calculateSPLQ31+0x5ac>)
 800cb66:	183a      	adds	r2, r7, r0
 800cb68:	6812      	ldr	r2, [r2, #0]
 800cb6a:	0092      	lsls	r2, r2, #2
 800cb6c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb6e:	183b      	adds	r3, r7, r0
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3301      	adds	r3, #1
 800cb74:	183a      	adds	r2, r7, r0
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	238c      	movs	r3, #140	@ 0x8c
 800cb7a:	18fb      	adds	r3, r7, r3
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b05      	cmp	r3, #5
 800cb80:	d9d4      	bls.n	800cb2c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800cb82:	4b13      	ldr	r3, [pc, #76]	@ (800cbd0 <calculateSPLQ31+0x5b0>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	1c5a      	adds	r2, r3, #1
 800cb88:	4b11      	ldr	r3, [pc, #68]	@ (800cbd0 <calculateSPLQ31+0x5b0>)
 800cb8a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cb8c:	4b10      	ldr	r3, [pc, #64]	@ (800cbd0 <calculateSPLQ31+0x5b0>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b0f      	cmp	r3, #15
 800cb92:	d905      	bls.n	800cba0 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cb94:	4b0f      	ldr	r3, [pc, #60]	@ (800cbd4 <calculateSPLQ31+0x5b4>)
 800cb96:	2201      	movs	r2, #1
 800cb98:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cb9a:	4b0f      	ldr	r3, [pc, #60]	@ (800cbd8 <calculateSPLQ31+0x5b8>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	701a      	strb	r2, [r3, #0]
    }
}
 800cba0:	46c0      	nop			@ (mov r8, r8)
 800cba2:	46bd      	mov	sp, r7
 800cba4:	b02f      	add	sp, #188	@ 0xbc
 800cba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cba8:	200000c0 	.word	0x200000c0
 800cbac:	200000c4 	.word	0x200000c4
 800cbb0:	20001180 	.word	0x20001180
 800cbb4:	2000117c 	.word	0x2000117c
 800cbb8:	20001184 	.word	0x20001184
 800cbbc:	2000119c 	.word	0x2000119c
 800cbc0:	20001bc4 	.word	0x20001bc4
 800cbc4:	20001bc8 	.word	0x20001bc8
 800cbc8:	20001bcc 	.word	0x20001bcc
 800cbcc:	20001be4 	.word	0x20001be4
 800cbd0:	20001bfc 	.word	0x20001bfc
 800cbd4:	20001171 	.word	0x20001171
 800cbd8:	2000116f 	.word	0x2000116f

0800cbdc <resetSPLstate>:

static void resetSPLstate(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cbe2:	4b11      	ldr	r3, [pc, #68]	@ (800cc28 <resetSPLstate+0x4c>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cbe8:	4b10      	ldr	r3, [pc, #64]	@ (800cc2c <resetSPLstate+0x50>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cbee:	4b10      	ldr	r3, [pc, #64]	@ (800cc30 <resetSPLstate+0x54>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	607b      	str	r3, [r7, #4]
 800cbf8:	e00c      	b.n	800cc14 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cbfa:	4b0e      	ldr	r3, [pc, #56]	@ (800cc34 <resetSPLstate+0x58>)
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	0092      	lsls	r2, r2, #2
 800cc00:	2100      	movs	r1, #0
 800cc02:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cc04:	4b0c      	ldr	r3, [pc, #48]	@ (800cc38 <resetSPLstate+0x5c>)
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	0092      	lsls	r2, r2, #2
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	3301      	adds	r3, #1
 800cc12:	607b      	str	r3, [r7, #4]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b05      	cmp	r3, #5
 800cc18:	d9ef      	bls.n	800cbfa <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cc1a:	4b08      	ldr	r3, [pc, #32]	@ (800cc3c <resetSPLstate+0x60>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	701a      	strb	r2, [r3, #0]
}
 800cc20:	46c0      	nop			@ (mov r8, r8)
 800cc22:	46bd      	mov	sp, r7
 800cc24:	b002      	add	sp, #8
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	20001bc4 	.word	0x20001bc4
 800cc2c:	20001bc8 	.word	0x20001bc8
 800cc30:	20001bfc 	.word	0x20001bfc
 800cc34:	20001bcc 	.word	0x20001bcc
 800cc38:	20001be4 	.word	0x20001be4
 800cc3c:	20001171 	.word	0x20001171

0800cc40 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cc40:	b5b0      	push	{r4, r5, r7, lr}
 800cc42:	b090      	sub	sp, #64	@ 0x40
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	0019      	movs	r1, r3
 800cc4c:	1dfb      	adds	r3, r7, #7
 800cc4e:	701a      	strb	r2, [r3, #0]
 800cc50:	1dbb      	adds	r3, r7, #6
 800cc52:	1c0a      	adds	r2, r1, #0
 800cc54:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800cc56:	1dfb      	adds	r3, r7, #7
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d005      	beq.n	800cc6a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cc5e:	4b3b      	ldr	r3, [pc, #236]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cc60:	2200      	movs	r2, #0
 800cc62:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cc64:	4b3a      	ldr	r3, [pc, #232]	@ (800cd50 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc66:	2200      	movs	r2, #0
 800cc68:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800cc72:	2305      	movs	r3, #5
 800cc74:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cc76:	2300      	movs	r3, #0
 800cc78:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc7a:	e040      	b.n	800ccfe <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cc7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	18d3      	adds	r3, r2, r3
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc88:	409a      	lsls	r2, r3
 800cc8a:	0013      	movs	r3, r2
 800cc8c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800cc8e:	4b30      	ldr	r3, [pc, #192]	@ (800cd50 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	425a      	negs	r2, r3
 800cc94:	4b2e      	ldr	r3, [pc, #184]	@ (800cd50 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc96:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cc98:	2418      	movs	r4, #24
 800cc9a:	193a      	adds	r2, r7, r4
 800cc9c:	492c      	ldr	r1, [pc, #176]	@ (800cd50 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc9e:	231c      	movs	r3, #28
 800cca0:	18f8      	adds	r0, r7, r3
 800cca2:	2301      	movs	r3, #1
 800cca4:	f011 fd88 	bl	801e7b8 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cca8:	2514      	movs	r5, #20
 800ccaa:	197a      	adds	r2, r7, r5
 800ccac:	1939      	adds	r1, r7, r4
 800ccae:	4829      	ldr	r0, [pc, #164]	@ (800cd54 <getFilteredMaxAmplitudeQ31+0x114>)
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	f011 fd4f 	bl	801e754 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800ccb6:	2410      	movs	r4, #16
 800ccb8:	193a      	adds	r2, r7, r4
 800ccba:	4924      	ldr	r1, [pc, #144]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccbc:	4826      	ldr	r0, [pc, #152]	@ (800cd58 <getFilteredMaxAmplitudeQ31+0x118>)
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	f011 fd48 	bl	801e754 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800ccc4:	4a21      	ldr	r2, [pc, #132]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccc6:	1939      	adds	r1, r7, r4
 800ccc8:	1978      	adds	r0, r7, r5
 800ccca:	2301      	movs	r3, #1
 800cccc:	f011 fd74 	bl	801e7b8 <arm_add_q31>

        lastData = fx;
 800ccd0:	69fa      	ldr	r2, [r7, #28]
 800ccd2:	4b1f      	ldr	r3, [pc, #124]	@ (800cd50 <getFilteredMaxAmplitudeQ31+0x110>)
 800ccd4:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800ccd6:	4b1d      	ldr	r3, [pc, #116]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	da03      	bge.n	800cce8 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800cce0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cce6:	e007      	b.n	800ccf8 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800cce8:	4b18      	ldr	r3, [pc, #96]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	dd02      	ble.n	800ccf8 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800ccf2:	4b16      	ldr	r3, [pc, #88]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800ccf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d3ba      	bcc.n	800cc7c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800cd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd08:	17da      	asrs	r2, r3, #31
 800cd0a:	189b      	adds	r3, r3, r2
 800cd0c:	4053      	eors	r3, r2
 800cd0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800cd10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd12:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800cd14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d200      	bcs.n	800cd1e <getFilteredMaxAmplitudeQ31+0xde>
 800cd1c:	0013      	movs	r3, r2
 800cd1e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cd20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd24:	40da      	lsrs	r2, r3
 800cd26:	0013      	movs	r3, r2
 800cd28:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cd2a:	1dbb      	adds	r3, r7, #6
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d007      	beq.n	800cd42 <getFilteredMaxAmplitudeQ31+0x102>
 800cd32:	4b0a      	ldr	r3, [pc, #40]	@ (800cd5c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6a3a      	ldr	r2, [r7, #32]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d902      	bls.n	800cd42 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cd3c:	4b07      	ldr	r3, [pc, #28]	@ (800cd5c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd3e:	6a3a      	ldr	r2, [r7, #32]
 800cd40:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cd42:	6a3b      	ldr	r3, [r7, #32]
}
 800cd44:	0018      	movs	r0, r3
 800cd46:	46bd      	mov	sp, r7
 800cd48:	b010      	add	sp, #64	@ 0x40
 800cd4a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd4c:	20002000 	.word	0x20002000
 800cd50:	20002004 	.word	0x20002004
 800cd54:	080257bc 	.word	0x080257bc
 800cd58:	080257c0 	.word	0x080257c0
 800cd5c:	20001178 	.word	0x20001178

0800cd60 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cd6c:	4913      	ldr	r1, [pc, #76]	@ (800cdbc <floatToIntAndFrac2dp+0x5c>)
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f7f4 f916 	bl	8000fa0 <__aeabi_fmul>
 800cd74:	1c03      	adds	r3, r0, #0
 800cd76:	1c18      	adds	r0, r3, #0
 800cd78:	f016 f952 	bl	8023020 <roundf>
 800cd7c:	1c03      	adds	r3, r0, #0
 800cd7e:	1c18      	adds	r0, r3, #0
 800cd80:	f7f3 fc4c 	bl	800061c <__aeabi_f2uiz>
 800cd84:	0003      	movs	r3, r0
 800cd86:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	2164      	movs	r1, #100	@ 0x64
 800cd8c:	0018      	movs	r0, r3
 800cd8e:	f7f3 fa09 	bl	80001a4 <__udivsi3>
 800cd92:	0003      	movs	r3, r0
 800cd94:	001a      	movs	r2, r3
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	2164      	movs	r1, #100	@ 0x64
 800cda6:	434b      	muls	r3, r1
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	701a      	strb	r2, [r3, #0]
}
 800cdb2:	46c0      	nop			@ (mov r8, r8)
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	b006      	add	sp, #24
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	46c0      	nop			@ (mov r8, r8)
 800cdbc:	42c80000 	.word	0x42c80000

0800cdc0 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800cdcc:	4914      	ldr	r1, [pc, #80]	@ (800ce20 <floatToIntAndFrac1dp+0x60>)
 800cdce:	68f8      	ldr	r0, [r7, #12]
 800cdd0:	f7f4 f8e6 	bl	8000fa0 <__aeabi_fmul>
 800cdd4:	1c03      	adds	r3, r0, #0
 800cdd6:	1c18      	adds	r0, r3, #0
 800cdd8:	f016 f922 	bl	8023020 <roundf>
 800cddc:	1c03      	adds	r3, r0, #0
 800cdde:	1c18      	adds	r0, r3, #0
 800cde0:	f7f3 fc1c 	bl	800061c <__aeabi_f2uiz>
 800cde4:	0003      	movs	r3, r0
 800cde6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	210a      	movs	r1, #10
 800cdec:	0018      	movs	r0, r3
 800cdee:	f7f3 f9d9 	bl	80001a4 <__udivsi3>
 800cdf2:	0003      	movs	r3, r0
 800cdf4:	001a      	movs	r2, r3
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	b2da      	uxtb	r2, r3
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	1c19      	adds	r1, r3, #0
 800ce06:	0089      	lsls	r1, r1, #2
 800ce08:	18cb      	adds	r3, r1, r3
 800ce0a:	18db      	adds	r3, r3, r3
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	701a      	strb	r2, [r3, #0]
}
 800ce16:	46c0      	nop			@ (mov r8, r8)
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	b006      	add	sp, #24
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	46c0      	nop			@ (mov r8, r8)
 800ce20:	41200000 	.word	0x41200000

0800ce24 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
 800ce30:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7f4 fbcc 	bl	80015d0 <__aeabi_i2f>
 800ce38:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce3a:	6838      	ldr	r0, [r7, #0]
 800ce3c:	f7f4 fbc8 	bl	80015d0 <__aeabi_i2f>
 800ce40:	1c03      	adds	r3, r0, #0
 800ce42:	4918      	ldr	r1, [pc, #96]	@ (800cea4 <sumToIntAverage+0x80>)
 800ce44:	1c18      	adds	r0, r3, #0
 800ce46:	f7f3 fec5 	bl	8000bd4 <__aeabi_fdiv>
 800ce4a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce4c:	1c19      	adds	r1, r3, #0
 800ce4e:	1c20      	adds	r0, r4, #0
 800ce50:	f7f3 fd36 	bl	80008c0 <__aeabi_fadd>
 800ce54:	1c03      	adds	r3, r0, #0
 800ce56:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce5a:	f7f4 fc05 	bl	8001668 <__aeabi_ui2f>
 800ce5e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce60:	1c19      	adds	r1, r3, #0
 800ce62:	1c20      	adds	r0, r4, #0
 800ce64:	f7f3 feb6 	bl	8000bd4 <__aeabi_fdiv>
 800ce68:	1c03      	adds	r3, r0, #0
 800ce6a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	2310      	movs	r3, #16
 800ce74:	18f9      	adds	r1, r7, r3
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	1c18      	adds	r0, r3, #0
 800ce7a:	f7ff ffa1 	bl	800cdc0 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	2bff      	cmp	r3, #255	@ 0xff
 800ce82:	d906      	bls.n	800ce92 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	22ff      	movs	r2, #255	@ 0xff
 800ce88:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	2209      	movs	r2, #9
 800ce8e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ce90:	e003      	b.n	800ce9a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	b2da      	uxtb	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	701a      	strb	r2, [r3, #0]
}
 800ce9a:	46c0      	nop			@ (mov r8, r8)
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	b007      	add	sp, #28
 800cea0:	bd90      	pop	{r4, r7, pc}
 800cea2:	46c0      	nop			@ (mov r8, r8)
 800cea4:	41200000 	.word	0x41200000

0800cea8 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2280      	movs	r2, #128	@ 0x80
 800ceba:	0612      	lsls	r2, r2, #24
 800cebc:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	4a18      	ldr	r2, [pc, #96]	@ (800cf24 <findMinMax+0x7c>)
 800cec2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cec4:	2300      	movs	r3, #0
 800cec6:	617b      	str	r3, [r7, #20]
 800cec8:	e022      	b.n	800cf10 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	18d3      	adds	r3, r2, r3
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	da06      	bge.n	800ceea <findMinMax+0x42>
        {
            min[0] = array[i];
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	18d3      	adds	r3, r2, r3
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	18d3      	adds	r3, r2, r3
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	dd06      	ble.n	800cf0a <findMinMax+0x62>
        {
            max[0] = array[i];
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	18d3      	adds	r3, r2, r3
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	617b      	str	r3, [r7, #20]
 800cf10:	697a      	ldr	r2, [r7, #20]
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d3d8      	bcc.n	800ceca <findMinMax+0x22>
        }
    }
}
 800cf18:	46c0      	nop			@ (mov r8, r8)
 800cf1a:	46c0      	nop			@ (mov r8, r8)
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	b006      	add	sp, #24
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	46c0      	nop			@ (mov r8, r8)
 800cf24:	7fffffff 	.word	0x7fffffff

0800cf28 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d302      	bcc.n	800cf44 <getPo2factor+0x1c>
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d107      	bne.n	800cf54 <getPo2factor+0x2c>
    {
        return 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	e00d      	b.n	800cf64 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	085b      	lsrs	r3, r3, #1
 800cf4c:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	3301      	adds	r3, #1
 800cf52:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d2f5      	bcs.n	800cf48 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800cf62:	68fb      	ldr	r3, [r7, #12]
}
 800cf64:	0018      	movs	r0, r3
 800cf66:	46bd      	mov	sp, r7
 800cf68:	b004      	add	sp, #16
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	f7f4 fb74 	bl	8001668 <__aeabi_ui2f>
 800cf80:	1c03      	adds	r3, r0, #0
 800cf82:	1c19      	adds	r1, r3, #0
 800cf84:	68b8      	ldr	r0, [r7, #8]
 800cf86:	f7f4 f80b 	bl	8000fa0 <__aeabi_fmul>
 800cf8a:	1c03      	adds	r3, r0, #0
 800cf8c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	2310      	movs	r3, #16
 800cf96:	18f9      	adds	r1, r7, r3
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	1c18      	adds	r0, r3, #0
 800cf9c:	f7ff fee0 	bl	800cd60 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	801a      	strh	r2, [r3, #0]
}
 800cfa8:	46c0      	nop			@ (mov r8, r8)
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	b006      	add	sp, #24
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60b8      	str	r0, [r7, #8]
 800cfb8:	60f9      	str	r1, [r7, #12]
 800cfba:	607a      	str	r2, [r7, #4]
 800cfbc:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc0:	6a3a      	ldr	r2, [r7, #32]
 800cfc2:	68b8      	ldr	r0, [r7, #8]
 800cfc4:	68f9      	ldr	r1, [r7, #12]
 800cfc6:	f7fa f979 	bl	80072bc <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	18d2      	adds	r2, r2, r3
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	18d2      	adds	r2, r2, r3
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800cfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	18d2      	adds	r2, r2, r3
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	18d2      	adds	r2, r2, r3
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe8:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800cfea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	0011      	movs	r1, r2
 800cff0:	0018      	movs	r0, r3
 800cff2:	f7fa f9f3 	bl	80073dc <correctIntFracNumber>
}
 800cff6:	46c0      	nop			@ (mov r8, r8)
 800cff8:	46bd      	mov	sp, r7
 800cffa:	b004      	add	sp, #16
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b086      	sub	sp, #24
 800d002:	af00      	add	r7, sp, #0
 800d004:	60f8      	str	r0, [r7, #12]
 800d006:	60b9      	str	r1, [r7, #8]
 800d008:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d00e:	2300      	movs	r3, #0
 800d010:	613b      	str	r3, [r7, #16]
 800d012:	e019      	b.n	800d048 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	18d3      	adds	r3, r2, r3
 800d01c:	881b      	ldrh	r3, [r3, #0]
 800d01e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	3201      	adds	r2, #1
 800d024:	0052      	lsls	r2, r2, #1
 800d026:	68f9      	ldr	r1, [r7, #12]
 800d028:	188a      	adds	r2, r1, r2
 800d02a:	8812      	ldrh	r2, [r2, #0]
 800d02c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d02e:	0019      	movs	r1, r3
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d038:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d03a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	3301      	adds	r3, #1
 800d040:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	3304      	adds	r3, #4
 800d046:	613b      	str	r3, [r7, #16]
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d3e1      	bcc.n	800d014 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d050:	46c0      	nop			@ (mov r8, r8)
 800d052:	46c0      	nop			@ (mov r8, r8)
 800d054:	46bd      	mov	sp, r7
 800d056:	b006      	add	sp, #24
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d05c:	b580      	push	{r7, lr}
 800d05e:	af00      	add	r7, sp, #0
  init = false;
 800d060:	4b02      	ldr	r3, [pc, #8]	@ (800d06c <InitDone+0x10>)
 800d062:	2200      	movs	r2, #0
 800d064:	701a      	strb	r2, [r3, #0]
}
 800d066:	46c0      	nop			@ (mov r8, r8)
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	200000cc 	.word	0x200000cc

0800d070 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d076:	f7f9 f947 	bl	8006308 <ReadBatteryVoltage>
 800d07a:	1c02      	adds	r2, r0, #0
 800d07c:	4b25      	ldr	r3, [pc, #148]	@ (800d114 <batteryChargeCheck+0xa4>)
 800d07e:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800d080:	4b24      	ldr	r3, [pc, #144]	@ (800d114 <batteryChargeCheck+0xa4>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4924      	ldr	r1, [pc, #144]	@ (800d118 <batteryChargeCheck+0xa8>)
 800d086:	1c18      	adds	r0, r3, #0
 800d088:	f7f3 fa52 	bl	8000530 <__aeabi_fcmplt>
 800d08c:	1e03      	subs	r3, r0, #0
 800d08e:	d002      	beq.n	800d096 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d090:	1dfb      	adds	r3, r7, #7
 800d092:	2200      	movs	r2, #0
 800d094:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800d096:	4b1f      	ldr	r3, [pc, #124]	@ (800d114 <batteryChargeCheck+0xa4>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	491f      	ldr	r1, [pc, #124]	@ (800d118 <batteryChargeCheck+0xa8>)
 800d09c:	1c18      	adds	r0, r3, #0
 800d09e:	f7f3 fa65 	bl	800056c <__aeabi_fcmpge>
 800d0a2:	1e03      	subs	r3, r0, #0
 800d0a4:	d00d      	beq.n	800d0c2 <batteryChargeCheck+0x52>
 800d0a6:	4b1b      	ldr	r3, [pc, #108]	@ (800d114 <batteryChargeCheck+0xa4>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	1c18      	adds	r0, r3, #0
 800d0ac:	f7f6 f9da 	bl	8003464 <__aeabi_f2d>
 800d0b0:	4a1a      	ldr	r2, [pc, #104]	@ (800d11c <batteryChargeCheck+0xac>)
 800d0b2:	4b1b      	ldr	r3, [pc, #108]	@ (800d120 <batteryChargeCheck+0xb0>)
 800d0b4:	f7f3 fa02 	bl	80004bc <__aeabi_dcmplt>
 800d0b8:	1e03      	subs	r3, r0, #0
 800d0ba:	d002      	beq.n	800d0c2 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d0bc:	1dfb      	adds	r3, r7, #7
 800d0be:	2201      	movs	r2, #1
 800d0c0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800d0c2:	4b14      	ldr	r3, [pc, #80]	@ (800d114 <batteryChargeCheck+0xa4>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	1c18      	adds	r0, r3, #0
 800d0c8:	f7f6 f9cc 	bl	8003464 <__aeabi_f2d>
 800d0cc:	4a13      	ldr	r2, [pc, #76]	@ (800d11c <batteryChargeCheck+0xac>)
 800d0ce:	4b14      	ldr	r3, [pc, #80]	@ (800d120 <batteryChargeCheck+0xb0>)
 800d0d0:	f7f3 fa12 	bl	80004f8 <__aeabi_dcmpge>
 800d0d4:	1e03      	subs	r3, r0, #0
 800d0d6:	d00b      	beq.n	800d0f0 <batteryChargeCheck+0x80>
 800d0d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d114 <batteryChargeCheck+0xa4>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2181      	movs	r1, #129	@ 0x81
 800d0de:	05c9      	lsls	r1, r1, #23
 800d0e0:	1c18      	adds	r0, r3, #0
 800d0e2:	f7f3 fa25 	bl	8000530 <__aeabi_fcmplt>
 800d0e6:	1e03      	subs	r3, r0, #0
 800d0e8:	d002      	beq.n	800d0f0 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d0ea:	1dfb      	adds	r3, r7, #7
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800d0f0:	4b08      	ldr	r3, [pc, #32]	@ (800d114 <batteryChargeCheck+0xa4>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2181      	movs	r1, #129	@ 0x81
 800d0f6:	05c9      	lsls	r1, r1, #23
 800d0f8:	1c18      	adds	r0, r3, #0
 800d0fa:	f7f3 fa37 	bl	800056c <__aeabi_fcmpge>
 800d0fe:	1e03      	subs	r3, r0, #0
 800d100:	d002      	beq.n	800d108 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d102:	1dfb      	adds	r3, r7, #7
 800d104:	2203      	movs	r2, #3
 800d106:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d108:	1dfb      	adds	r3, r7, #7
 800d10a:	781b      	ldrb	r3, [r3, #0]
}
 800d10c:	0018      	movs	r0, r3
 800d10e:	46bd      	mov	sp, r7
 800d110:	b002      	add	sp, #8
 800d112:	bd80      	pop	{r7, pc}
 800d114:	20002018 	.word	0x20002018
 800d118:	40600000 	.word	0x40600000
 800d11c:	9999999a 	.word	0x9999999a
 800d120:	400d9999 	.word	0x400d9999

0800d124 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d124:	b5b0      	push	{r4, r5, r7, lr}
 800d126:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d128:	f7f9 f950 	bl	80063cc <ReadSolarVoltage>
 800d12c:	0003      	movs	r3, r0
 800d12e:	001a      	movs	r2, r3
 800d130:	4b1a      	ldr	r3, [pc, #104]	@ (800d19c <Calculate_LED_ON+0x78>)
 800d132:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d134:	4b19      	ldr	r3, [pc, #100]	@ (800d19c <Calculate_LED_ON+0x78>)
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	4a19      	ldr	r2, [pc, #100]	@ (800d1a0 <Calculate_LED_ON+0x7c>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d802      	bhi.n	800d144 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d13e:	4b17      	ldr	r3, [pc, #92]	@ (800d19c <Calculate_LED_ON+0x78>)
 800d140:	4a18      	ldr	r2, [pc, #96]	@ (800d1a4 <Calculate_LED_ON+0x80>)
 800d142:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d144:	4b15      	ldr	r3, [pc, #84]	@ (800d19c <Calculate_LED_ON+0x78>)
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	4a17      	ldr	r2, [pc, #92]	@ (800d1a8 <Calculate_LED_ON+0x84>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d902      	bls.n	800d154 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d14e:	4b13      	ldr	r3, [pc, #76]	@ (800d19c <Calculate_LED_ON+0x78>)
 800d150:	4a15      	ldr	r2, [pc, #84]	@ (800d1a8 <Calculate_LED_ON+0x84>)
 800d152:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d154:	4b11      	ldr	r3, [pc, #68]	@ (800d19c <Calculate_LED_ON+0x78>)
 800d156:	881b      	ldrh	r3, [r3, #0]
 800d158:	0018      	movs	r0, r3
 800d15a:	f7f6 f931 	bl	80033c0 <__aeabi_i2d>
 800d15e:	0004      	movs	r4, r0
 800d160:	000d      	movs	r5, r1
 800d162:	4b0e      	ldr	r3, [pc, #56]	@ (800d19c <Calculate_LED_ON+0x78>)
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	001a      	movs	r2, r3
 800d168:	4b10      	ldr	r3, [pc, #64]	@ (800d1ac <Calculate_LED_ON+0x88>)
 800d16a:	1a9b      	subs	r3, r3, r2
 800d16c:	0018      	movs	r0, r3
 800d16e:	f7f6 f927 	bl	80033c0 <__aeabi_i2d>
 800d172:	2200      	movs	r2, #0
 800d174:	4b0e      	ldr	r3, [pc, #56]	@ (800d1b0 <Calculate_LED_ON+0x8c>)
 800d176:	f7f5 fa61 	bl	800263c <__aeabi_dmul>
 800d17a:	0002      	movs	r2, r0
 800d17c:	000b      	movs	r3, r1
 800d17e:	0020      	movs	r0, r4
 800d180:	0029      	movs	r1, r5
 800d182:	f7f4 fab3 	bl	80016ec <__aeabi_dadd>
 800d186:	0002      	movs	r2, r0
 800d188:	000b      	movs	r3, r1
 800d18a:	0010      	movs	r0, r2
 800d18c:	0019      	movs	r1, r3
 800d18e:	f7f3 fa5d 	bl	800064c <__aeabi_d2uiz>
 800d192:	0003      	movs	r3, r0
 800d194:	b29b      	uxth	r3, r3
}
 800d196:	0018      	movs	r0, r3
 800d198:	46bd      	mov	sp, r7
 800d19a:	bdb0      	pop	{r4, r5, r7, pc}
 800d19c:	2000201c 	.word	0x2000201c
 800d1a0:	00000b53 	.word	0x00000b53
 800d1a4:	00000b54 	.word	0x00000b54
 800d1a8:	0000125c 	.word	0x0000125c
 800d1ac:	00000dee 	.word	0x00000dee
 800d1b0:	3ff80000 	.word	0x3ff80000

0800d1b4 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d1b4:	b590      	push	{r4, r7, lr}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	0004      	movs	r4, r0
 800d1bc:	0008      	movs	r0, r1
 800d1be:	0011      	movs	r1, r2
 800d1c0:	1dbb      	adds	r3, r7, #6
 800d1c2:	1c22      	adds	r2, r4, #0
 800d1c4:	801a      	strh	r2, [r3, #0]
 800d1c6:	1d3b      	adds	r3, r7, #4
 800d1c8:	1c02      	adds	r2, r0, #0
 800d1ca:	801a      	strh	r2, [r3, #0]
 800d1cc:	1cbb      	adds	r3, r7, #2
 800d1ce:	1c0a      	adds	r2, r1, #0
 800d1d0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d1d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d210 <SetStatusLED+0x5c>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d107      	bne.n	800d1ea <SetStatusLED+0x36>
 800d1da:	4b0e      	ldr	r3, [pc, #56]	@ (800d214 <SetStatusLED+0x60>)
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d103      	bne.n	800d1ea <SetStatusLED+0x36>
 800d1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d218 <SetStatusLED+0x64>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00e      	beq.n	800d208 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d1ea:	2380      	movs	r3, #128	@ 0x80
 800d1ec:	05db      	lsls	r3, r3, #23
 800d1ee:	1dba      	adds	r2, r7, #6
 800d1f0:	8812      	ldrh	r2, [r2, #0]
 800d1f2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d1f4:	2380      	movs	r3, #128	@ 0x80
 800d1f6:	05db      	lsls	r3, r3, #23
 800d1f8:	1d3a      	adds	r2, r7, #4
 800d1fa:	8812      	ldrh	r2, [r2, #0]
 800d1fc:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d1fe:	2380      	movs	r3, #128	@ 0x80
 800d200:	05db      	lsls	r3, r3, #23
 800d202:	1cba      	adds	r2, r7, #2
 800d204:	8812      	ldrh	r2, [r2, #0]
 800d206:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d208:	46c0      	nop			@ (mov r8, r8)
 800d20a:	46bd      	mov	sp, r7
 800d20c:	b003      	add	sp, #12
 800d20e:	bd90      	pop	{r4, r7, pc}
 800d210:	20002009 	.word	0x20002009
 800d214:	200000cc 	.word	0x200000cc
 800d218:	2000200a 	.word	0x2000200a

0800d21c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d21c:	b590      	push	{r4, r7, lr}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	0004      	movs	r4, r0
 800d224:	0008      	movs	r0, r1
 800d226:	0011      	movs	r1, r2
 800d228:	1dfb      	adds	r3, r7, #7
 800d22a:	1c22      	adds	r2, r4, #0
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	1dbb      	adds	r3, r7, #6
 800d230:	1c02      	adds	r2, r0, #0
 800d232:	701a      	strb	r2, [r3, #0]
 800d234:	1d7b      	adds	r3, r7, #5
 800d236:	1c0a      	adds	r2, r1, #0
 800d238:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d23a:	4b19      	ldr	r3, [pc, #100]	@ (800d2a0 <SetDBLED+0x84>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d107      	bne.n	800d252 <SetDBLED+0x36>
 800d242:	4b18      	ldr	r3, [pc, #96]	@ (800d2a4 <SetDBLED+0x88>)
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d103      	bne.n	800d252 <SetDBLED+0x36>
 800d24a:	4b17      	ldr	r3, [pc, #92]	@ (800d2a8 <SetDBLED+0x8c>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d022      	beq.n	800d298 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d252:	1dfb      	adds	r3, r7, #7
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	2201      	movs	r2, #1
 800d258:	4053      	eors	r3, r2
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	001a      	movs	r2, r3
 800d25e:	4b13      	ldr	r3, [pc, #76]	@ (800d2ac <SetDBLED+0x90>)
 800d260:	2101      	movs	r1, #1
 800d262:	0018      	movs	r0, r3
 800d264:	f003 f8ad 	bl	80103c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d268:	1dbb      	adds	r3, r7, #6
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2201      	movs	r2, #1
 800d26e:	4053      	eors	r3, r2
 800d270:	b2db      	uxtb	r3, r3
 800d272:	001a      	movs	r2, r3
 800d274:	2380      	movs	r3, #128	@ 0x80
 800d276:	005b      	lsls	r3, r3, #1
 800d278:	480c      	ldr	r0, [pc, #48]	@ (800d2ac <SetDBLED+0x90>)
 800d27a:	0019      	movs	r1, r3
 800d27c:	f003 f8a1 	bl	80103c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d280:	1d7b      	adds	r3, r7, #5
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	2201      	movs	r2, #1
 800d286:	4053      	eors	r3, r2
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	001a      	movs	r2, r3
 800d28c:	2380      	movs	r3, #128	@ 0x80
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4806      	ldr	r0, [pc, #24]	@ (800d2ac <SetDBLED+0x90>)
 800d292:	0019      	movs	r1, r3
 800d294:	f003 f895 	bl	80103c2 <HAL_GPIO_WritePin>
  }
}
 800d298:	46c0      	nop			@ (mov r8, r8)
 800d29a:	46bd      	mov	sp, r7
 800d29c:	b003      	add	sp, #12
 800d29e:	bd90      	pop	{r4, r7, pc}
 800d2a0:	20002009 	.word	0x20002009
 800d2a4:	200000cc 	.word	0x200000cc
 800d2a8:	2000200a 	.word	0x2000200a
 800d2ac:	50000400 	.word	0x50000400

0800d2b0 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d2b0:	b590      	push	{r4, r7, lr}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	0004      	movs	r4, r0
 800d2b8:	0008      	movs	r0, r1
 800d2ba:	0011      	movs	r1, r2
 800d2bc:	1dbb      	adds	r3, r7, #6
 800d2be:	1c22      	adds	r2, r4, #0
 800d2c0:	801a      	strh	r2, [r3, #0]
 800d2c2:	1d3b      	adds	r3, r7, #4
 800d2c4:	1c02      	adds	r2, r0, #0
 800d2c6:	801a      	strh	r2, [r3, #0]
 800d2c8:	1cbb      	adds	r3, r7, #2
 800d2ca:	1c0a      	adds	r2, r1, #0
 800d2cc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800d308 <SetVocLED+0x58>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d107      	bne.n	800d2e6 <SetVocLED+0x36>
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d30c <SetVocLED+0x5c>)
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d103      	bne.n	800d2e6 <SetVocLED+0x36>
 800d2de:	4b0c      	ldr	r3, [pc, #48]	@ (800d310 <SetVocLED+0x60>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00b      	beq.n	800d2fe <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d2e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d314 <SetVocLED+0x64>)
 800d2e8:	1dba      	adds	r2, r7, #6
 800d2ea:	8812      	ldrh	r2, [r2, #0]
 800d2ec:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d2ee:	4b09      	ldr	r3, [pc, #36]	@ (800d314 <SetVocLED+0x64>)
 800d2f0:	1d3a      	adds	r2, r7, #4
 800d2f2:	8812      	ldrh	r2, [r2, #0]
 800d2f4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d2f6:	4b07      	ldr	r3, [pc, #28]	@ (800d314 <SetVocLED+0x64>)
 800d2f8:	1cba      	adds	r2, r7, #2
 800d2fa:	8812      	ldrh	r2, [r2, #0]
 800d2fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d2fe:	46c0      	nop			@ (mov r8, r8)
 800d300:	46bd      	mov	sp, r7
 800d302:	b003      	add	sp, #12
 800d304:	bd90      	pop	{r4, r7, pc}
 800d306:	46c0      	nop			@ (mov r8, r8)
 800d308:	20002009 	.word	0x20002009
 800d30c:	200000cc 	.word	0x200000cc
 800d310:	2000200a 	.word	0x2000200a
 800d314:	40000400 	.word	0x40000400

0800d318 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d318:	b580      	push	{r7, lr}
 800d31a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d31c:	4b08      	ldr	r3, [pc, #32]	@ (800d340 <SetMeasurementIndicator+0x28>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d103      	bne.n	800d32c <SetMeasurementIndicator+0x14>
 800d324:	4b07      	ldr	r3, [pc, #28]	@ (800d344 <SetMeasurementIndicator+0x2c>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d006      	beq.n	800d33a <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d32c:	f7ff fefa 	bl	800d124 <Calculate_LED_ON>
 800d330:	0003      	movs	r3, r0
 800d332:	001a      	movs	r2, r3
 800d334:	2380      	movs	r3, #128	@ 0x80
 800d336:	05db      	lsls	r3, r3, #23
 800d338:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d33a:	46c0      	nop			@ (mov r8, r8)
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	20002009 	.word	0x20002009
 800d344:	2000200a 	.word	0x2000200a

0800d348 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d348:	b580      	push	{r7, lr}
 800d34a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d34c:	4b07      	ldr	r3, [pc, #28]	@ (800d36c <ResetMeasurementIndicator+0x24>)
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d103      	bne.n	800d35c <ResetMeasurementIndicator+0x14>
 800d354:	4b06      	ldr	r3, [pc, #24]	@ (800d370 <ResetMeasurementIndicator+0x28>)
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d004      	beq.n	800d366 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d35c:	2380      	movs	r3, #128	@ 0x80
 800d35e:	05db      	lsls	r3, r3, #23
 800d360:	22fa      	movs	r2, #250	@ 0xfa
 800d362:	0112      	lsls	r2, r2, #4
 800d364:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d366:	46c0      	nop			@ (mov r8, r8)
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	20002009 	.word	0x20002009
 800d370:	2000200a 	.word	0x2000200a

0800d374 <SetMICIndicator>:
void SetMICIndicator(){
 800d374:	b580      	push	{r7, lr}
 800d376:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d378:	4b19      	ldr	r3, [pc, #100]	@ (800d3e0 <SetMICIndicator+0x6c>)
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d103      	bne.n	800d388 <SetMICIndicator+0x14>
 800d380:	4b18      	ldr	r3, [pc, #96]	@ (800d3e4 <SetMICIndicator+0x70>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d007      	beq.n	800d398 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d388:	f7ff fecc 	bl	800d124 <Calculate_LED_ON>
 800d38c:	0003      	movs	r3, r0
 800d38e:	001a      	movs	r2, r3
 800d390:	2380      	movs	r3, #128	@ 0x80
 800d392:	05db      	lsls	r3, r3, #23
 800d394:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800d396:	e01f      	b.n	800d3d8 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800d398:	4b13      	ldr	r3, [pc, #76]	@ (800d3e8 <SetMICIndicator+0x74>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	1c18      	adds	r0, r3, #0
 800d39e:	f7f6 f861 	bl	8003464 <__aeabi_f2d>
 800d3a2:	4a12      	ldr	r2, [pc, #72]	@ (800d3ec <SetMICIndicator+0x78>)
 800d3a4:	4b12      	ldr	r3, [pc, #72]	@ (800d3f0 <SetMICIndicator+0x7c>)
 800d3a6:	f7f3 f89d 	bl	80004e4 <__aeabi_dcmpgt>
 800d3aa:	1e03      	subs	r3, r0, #0
 800d3ac:	d00a      	beq.n	800d3c4 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d3ae:	f7ff feb9 	bl	800d124 <Calculate_LED_ON>
 800d3b2:	0003      	movs	r3, r0
 800d3b4:	001a      	movs	r2, r3
 800d3b6:	2380      	movs	r3, #128	@ 0x80
 800d3b8:	05db      	lsls	r3, r3, #23
 800d3ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800d3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f4 <SetMICIndicator+0x80>)
 800d3be:	2202      	movs	r2, #2
 800d3c0:	701a      	strb	r2, [r3, #0]
}
 800d3c2:	e009      	b.n	800d3d8 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d3c4:	f7ff feae 	bl	800d124 <Calculate_LED_ON>
 800d3c8:	0003      	movs	r3, r0
 800d3ca:	001a      	movs	r2, r3
 800d3cc:	2380      	movs	r3, #128	@ 0x80
 800d3ce:	05db      	lsls	r3, r3, #23
 800d3d0:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800d3d2:	4b08      	ldr	r3, [pc, #32]	@ (800d3f4 <SetMICIndicator+0x80>)
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	701a      	strb	r2, [r3, #0]
}
 800d3d8:	46c0      	nop			@ (mov r8, r8)
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	46c0      	nop			@ (mov r8, r8)
 800d3e0:	20002009 	.word	0x20002009
 800d3e4:	2000200a 	.word	0x2000200a
 800d3e8:	20002018 	.word	0x20002018
 800d3ec:	9999999a 	.word	0x9999999a
 800d3f0:	400d9999 	.word	0x400d9999
 800d3f4:	2000200c 	.word	0x2000200c

0800d3f8 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d43c <ResetMICIndicator+0x44>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d103      	bne.n	800d40c <ResetMICIndicator+0x14>
 800d404:	4b0e      	ldr	r3, [pc, #56]	@ (800d440 <ResetMICIndicator+0x48>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d005      	beq.n	800d418 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d40c:	2380      	movs	r3, #128	@ 0x80
 800d40e:	05db      	lsls	r3, r3, #23
 800d410:	22fa      	movs	r2, #250	@ 0xfa
 800d412:	0112      	lsls	r2, r2, #4
 800d414:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d416:	e00e      	b.n	800d436 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800d418:	4b0a      	ldr	r3, [pc, #40]	@ (800d444 <ResetMICIndicator+0x4c>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d105      	bne.n	800d42c <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800d420:	2380      	movs	r3, #128	@ 0x80
 800d422:	05db      	lsls	r3, r3, #23
 800d424:	22fa      	movs	r2, #250	@ 0xfa
 800d426:	0112      	lsls	r2, r2, #4
 800d428:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d42a:	e004      	b.n	800d436 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800d42c:	2380      	movs	r3, #128	@ 0x80
 800d42e:	05db      	lsls	r3, r3, #23
 800d430:	22fa      	movs	r2, #250	@ 0xfa
 800d432:	0112      	lsls	r2, r2, #4
 800d434:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d436:	46c0      	nop			@ (mov r8, r8)
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	20002009 	.word	0x20002009
 800d440:	2000200a 	.word	0x2000200a
 800d444:	2000200c 	.word	0x2000200c

0800d448 <SetESPIndicator>:
void SetESPIndicator(){
 800d448:	b580      	push	{r7, lr}
 800d44a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d44c:	4b08      	ldr	r3, [pc, #32]	@ (800d470 <SetESPIndicator+0x28>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d103      	bne.n	800d45c <SetESPIndicator+0x14>
 800d454:	4b07      	ldr	r3, [pc, #28]	@ (800d474 <SetESPIndicator+0x2c>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d006      	beq.n	800d46a <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d45c:	f7ff fe62 	bl	800d124 <Calculate_LED_ON>
 800d460:	0003      	movs	r3, r0
 800d462:	001a      	movs	r2, r3
 800d464:	2380      	movs	r3, #128	@ 0x80
 800d466:	05db      	lsls	r3, r3, #23
 800d468:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d46a:	46c0      	nop			@ (mov r8, r8)
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	20002009 	.word	0x20002009
 800d474:	2000200a 	.word	0x2000200a

0800d478 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d478:	b580      	push	{r7, lr}
 800d47a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d47c:	4b07      	ldr	r3, [pc, #28]	@ (800d49c <ResetESPIndicator+0x24>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d103      	bne.n	800d48c <ResetESPIndicator+0x14>
 800d484:	4b06      	ldr	r3, [pc, #24]	@ (800d4a0 <ResetESPIndicator+0x28>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d004      	beq.n	800d496 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d48c:	2380      	movs	r3, #128	@ 0x80
 800d48e:	05db      	lsls	r3, r3, #23
 800d490:	22fa      	movs	r2, #250	@ 0xfa
 800d492:	0112      	lsls	r2, r2, #4
 800d494:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d496:	46c0      	nop			@ (mov r8, r8)
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	20002009 	.word	0x20002009
 800d4a0:	2000200a 	.word	0x2000200a

0800d4a4 <SetPMIndicator>:

void SetPMIndicator() {
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800d4e8 <SetPMIndicator+0x44>)
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d103      	bne.n	800d4b8 <SetPMIndicator+0x14>
 800d4b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d4ec <SetPMIndicator+0x48>)
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d014      	beq.n	800d4e2 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d4b8:	f7ff fe34 	bl	800d124 <Calculate_LED_ON>
 800d4bc:	0003      	movs	r3, r0
 800d4be:	001a      	movs	r2, r3
 800d4c0:	2380      	movs	r3, #128	@ 0x80
 800d4c2:	05db      	lsls	r3, r3, #23
 800d4c4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d4c6:	f7ff fe2d 	bl	800d124 <Calculate_LED_ON>
 800d4ca:	0003      	movs	r3, r0
 800d4cc:	001a      	movs	r2, r3
 800d4ce:	2380      	movs	r3, #128	@ 0x80
 800d4d0:	05db      	lsls	r3, r3, #23
 800d4d2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d4d4:	f7ff fe26 	bl	800d124 <Calculate_LED_ON>
 800d4d8:	0003      	movs	r3, r0
 800d4da:	001a      	movs	r2, r3
 800d4dc:	2380      	movs	r3, #128	@ 0x80
 800d4de:	05db      	lsls	r3, r3, #23
 800d4e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d4e2:	46c0      	nop			@ (mov r8, r8)
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	20002009 	.word	0x20002009
 800d4ec:	2000200a 	.word	0x2000200a

0800d4f0 <ResetPMIndicator>:

void ResetPMIndicator() {
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d528 <ResetPMIndicator+0x38>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d103      	bne.n	800d504 <ResetPMIndicator+0x14>
 800d4fc:	4b0b      	ldr	r3, [pc, #44]	@ (800d52c <ResetPMIndicator+0x3c>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00e      	beq.n	800d522 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d504:	2380      	movs	r3, #128	@ 0x80
 800d506:	05db      	lsls	r3, r3, #23
 800d508:	22fa      	movs	r2, #250	@ 0xfa
 800d50a:	0112      	lsls	r2, r2, #4
 800d50c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d50e:	2380      	movs	r3, #128	@ 0x80
 800d510:	05db      	lsls	r3, r3, #23
 800d512:	22fa      	movs	r2, #250	@ 0xfa
 800d514:	0112      	lsls	r2, r2, #4
 800d516:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d518:	2380      	movs	r3, #128	@ 0x80
 800d51a:	05db      	lsls	r3, r3, #23
 800d51c:	22fa      	movs	r2, #250	@ 0xfa
 800d51e:	0112      	lsls	r2, r2, #4
 800d520:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d522:	46c0      	nop			@ (mov r8, r8)
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	20002009 	.word	0x20002009
 800d52c:	2000200a 	.word	0x2000200a

0800d530 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d530:	b580      	push	{r7, lr}
 800d532:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d534:	23fa      	movs	r3, #250	@ 0xfa
 800d536:	011a      	lsls	r2, r3, #4
 800d538:	23fa      	movs	r3, #250	@ 0xfa
 800d53a:	0119      	lsls	r1, r3, #4
 800d53c:	23fa      	movs	r3, #250	@ 0xfa
 800d53e:	011b      	lsls	r3, r3, #4
 800d540:	0018      	movs	r0, r3
 800d542:	f7ff fe37 	bl	800d1b4 <SetStatusLED>
  SetDBLED(false,false,false);
 800d546:	2200      	movs	r2, #0
 800d548:	2100      	movs	r1, #0
 800d54a:	2000      	movs	r0, #0
 800d54c:	f7ff fe66 	bl	800d21c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d550:	23fa      	movs	r3, #250	@ 0xfa
 800d552:	011a      	lsls	r2, r3, #4
 800d554:	23fa      	movs	r3, #250	@ 0xfa
 800d556:	0119      	lsls	r1, r3, #4
 800d558:	23fa      	movs	r3, #250	@ 0xfa
 800d55a:	011b      	lsls	r3, r3, #4
 800d55c:	0018      	movs	r0, r3
 800d55e:	f7ff fea7 	bl	800d2b0 <SetVocLED>
return;
 800d562:	46c0      	nop			@ (mov r8, r8)
}
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <SetAllREDLED>:

void SetAllREDLED() {
 800d568:	b580      	push	{r7, lr}
 800d56a:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = 0;
 800d56c:	2380      	movs	r3, #128	@ 0x80
 800d56e:	05db      	lsls	r3, r3, #23
 800d570:	2200      	movs	r2, #0
 800d572:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800d574:	2380      	movs	r3, #128	@ 0x80
 800d576:	05db      	lsls	r3, r3, #23
 800d578:	22fa      	movs	r2, #250	@ 0xfa
 800d57a:	0112      	lsls	r2, r2, #4
 800d57c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800d57e:	2380      	movs	r3, #128	@ 0x80
 800d580:	05db      	lsls	r3, r3, #23
 800d582:	22fa      	movs	r2, #250	@ 0xfa
 800d584:	0112      	lsls	r2, r2, #4
 800d586:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 0;
 800d588:	4b0c      	ldr	r3, [pc, #48]	@ (800d5bc <SetAllREDLED+0x54>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800d58e:	4b0b      	ldr	r3, [pc, #44]	@ (800d5bc <SetAllREDLED+0x54>)
 800d590:	22fa      	movs	r2, #250	@ 0xfa
 800d592:	0112      	lsls	r2, r2, #4
 800d594:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800d596:	4b09      	ldr	r3, [pc, #36]	@ (800d5bc <SetAllREDLED+0x54>)
 800d598:	22fa      	movs	r2, #250	@ 0xfa
 800d59a:	0112      	lsls	r2, r2, #4
 800d59c:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 800d59e:	4b08      	ldr	r3, [pc, #32]	@ (800d5c0 <SetAllREDLED+0x58>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	2101      	movs	r1, #1
 800d5a4:	0018      	movs	r0, r3
 800d5a6:	f002 ff0c 	bl	80103c2 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800d5aa:	23fa      	movs	r3, #250	@ 0xfa
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	0018      	movs	r0, r3
 800d5b0:	f001 fc80 	bl	800eeb4 <HAL_Delay>
}
 800d5b4:	46c0      	nop			@ (mov r8, r8)
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	46c0      	nop			@ (mov r8, r8)
 800d5bc:	40000400 	.word	0x40000400
 800d5c0:	50000400 	.word	0x50000400

0800d5c4 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800d5c4:	b5b0      	push	{r4, r5, r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	0002      	movs	r2, r0
 800d5cc:	1dbb      	adds	r3, r7, #6
 800d5ce:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800d5d0:	1dbb      	adds	r3, r7, #6
 800d5d2:	881b      	ldrh	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d05a      	beq.n	800d68e <SetVOCindicator+0xca>
 800d5d8:	1dbb      	adds	r3, r7, #6
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	2b64      	cmp	r3, #100	@ 0x64
 800d5de:	d856      	bhi.n	800d68e <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800d5e0:	1dbb      	adds	r3, r7, #6
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	0018      	movs	r0, r3
 800d5e6:	f7f5 feeb 	bl	80033c0 <__aeabi_i2d>
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	4b5f      	ldr	r3, [pc, #380]	@ (800d76c <SetVOCindicator+0x1a8>)
 800d5ee:	f7f4 fbe1 	bl	8001db4 <__aeabi_ddiv>
 800d5f2:	0002      	movs	r2, r0
 800d5f4:	000b      	movs	r3, r1
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	495d      	ldr	r1, [pc, #372]	@ (800d770 <SetVOCindicator+0x1ac>)
 800d5fa:	f7f5 fae7 	bl	8002bcc <__aeabi_dsub>
 800d5fe:	0002      	movs	r2, r0
 800d600:	000b      	movs	r3, r1
 800d602:	0014      	movs	r4, r2
 800d604:	001d      	movs	r5, r3
 800d606:	4b5b      	ldr	r3, [pc, #364]	@ (800d774 <SetVOCindicator+0x1b0>)
 800d608:	881b      	ldrh	r3, [r3, #0]
 800d60a:	0018      	movs	r0, r3
 800d60c:	f7f5 fed8 	bl	80033c0 <__aeabi_i2d>
 800d610:	0002      	movs	r2, r0
 800d612:	000b      	movs	r3, r1
 800d614:	0020      	movs	r0, r4
 800d616:	0029      	movs	r1, r5
 800d618:	f7f5 f810 	bl	800263c <__aeabi_dmul>
 800d61c:	0002      	movs	r2, r0
 800d61e:	000b      	movs	r3, r1
 800d620:	0010      	movs	r0, r2
 800d622:	0019      	movs	r1, r3
 800d624:	f7f3 f812 	bl	800064c <__aeabi_d2uiz>
 800d628:	0003      	movs	r3, r0
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	4b52      	ldr	r3, [pc, #328]	@ (800d778 <SetVOCindicator+0x1b4>)
 800d62e:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800d630:	1dbb      	adds	r3, r7, #6
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	0018      	movs	r0, r3
 800d636:	f7f5 fec3 	bl	80033c0 <__aeabi_i2d>
 800d63a:	2200      	movs	r2, #0
 800d63c:	4b4b      	ldr	r3, [pc, #300]	@ (800d76c <SetVOCindicator+0x1a8>)
 800d63e:	f7f4 fbb9 	bl	8001db4 <__aeabi_ddiv>
 800d642:	0002      	movs	r2, r0
 800d644:	000b      	movs	r3, r1
 800d646:	0014      	movs	r4, r2
 800d648:	001d      	movs	r5, r3
 800d64a:	4b4a      	ldr	r3, [pc, #296]	@ (800d774 <SetVOCindicator+0x1b0>)
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	0018      	movs	r0, r3
 800d650:	f7f5 feb6 	bl	80033c0 <__aeabi_i2d>
 800d654:	0002      	movs	r2, r0
 800d656:	000b      	movs	r3, r1
 800d658:	0020      	movs	r0, r4
 800d65a:	0029      	movs	r1, r5
 800d65c:	f7f4 ffee 	bl	800263c <__aeabi_dmul>
 800d660:	0002      	movs	r2, r0
 800d662:	000b      	movs	r3, r1
 800d664:	0010      	movs	r0, r2
 800d666:	0019      	movs	r1, r3
 800d668:	f7f2 fff0 	bl	800064c <__aeabi_d2uiz>
 800d66c:	0003      	movs	r3, r0
 800d66e:	b29a      	uxth	r2, r3
 800d670:	4b42      	ldr	r3, [pc, #264]	@ (800d77c <SetVOCindicator+0x1b8>)
 800d672:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800d674:	4b3f      	ldr	r3, [pc, #252]	@ (800d774 <SetVOCindicator+0x1b0>)
 800d676:	881a      	ldrh	r2, [r3, #0]
 800d678:	4b41      	ldr	r3, [pc, #260]	@ (800d780 <SetVOCindicator+0x1bc>)
 800d67a:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d67c:	4b40      	ldr	r3, [pc, #256]	@ (800d780 <SetVOCindicator+0x1bc>)
 800d67e:	8818      	ldrh	r0, [r3, #0]
 800d680:	4b3d      	ldr	r3, [pc, #244]	@ (800d778 <SetVOCindicator+0x1b4>)
 800d682:	8819      	ldrh	r1, [r3, #0]
 800d684:	4b3d      	ldr	r3, [pc, #244]	@ (800d77c <SetVOCindicator+0x1b8>)
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	001a      	movs	r2, r3
 800d68a:	f7ff fe11 	bl	800d2b0 <SetVocLED>
  }
  if(VOCi > 100){
 800d68e:	1dbb      	adds	r3, r7, #6
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	2b64      	cmp	r3, #100	@ 0x64
 800d694:	d966      	bls.n	800d764 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800d696:	1dbb      	adds	r3, r7, #6
 800d698:	881b      	ldrh	r3, [r3, #0]
 800d69a:	0018      	movs	r0, r3
 800d69c:	f7f5 fe90 	bl	80033c0 <__aeabi_i2d>
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	4b32      	ldr	r3, [pc, #200]	@ (800d76c <SetVOCindicator+0x1a8>)
 800d6a4:	f7f5 fa92 	bl	8002bcc <__aeabi_dsub>
 800d6a8:	0002      	movs	r2, r0
 800d6aa:	000b      	movs	r3, r1
 800d6ac:	0010      	movs	r0, r2
 800d6ae:	0019      	movs	r1, r3
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	4b34      	ldr	r3, [pc, #208]	@ (800d784 <SetVOCindicator+0x1c0>)
 800d6b4:	f7f4 fb7e 	bl	8001db4 <__aeabi_ddiv>
 800d6b8:	0002      	movs	r2, r0
 800d6ba:	000b      	movs	r3, r1
 800d6bc:	0014      	movs	r4, r2
 800d6be:	001d      	movs	r5, r3
 800d6c0:	4b2c      	ldr	r3, [pc, #176]	@ (800d774 <SetVOCindicator+0x1b0>)
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	0018      	movs	r0, r3
 800d6c6:	f7f5 fe7b 	bl	80033c0 <__aeabi_i2d>
 800d6ca:	0002      	movs	r2, r0
 800d6cc:	000b      	movs	r3, r1
 800d6ce:	0020      	movs	r0, r4
 800d6d0:	0029      	movs	r1, r5
 800d6d2:	f7f4 ffb3 	bl	800263c <__aeabi_dmul>
 800d6d6:	0002      	movs	r2, r0
 800d6d8:	000b      	movs	r3, r1
 800d6da:	0010      	movs	r0, r2
 800d6dc:	0019      	movs	r1, r3
 800d6de:	f7f2 ffb5 	bl	800064c <__aeabi_d2uiz>
 800d6e2:	0003      	movs	r3, r0
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	4b24      	ldr	r3, [pc, #144]	@ (800d778 <SetVOCindicator+0x1b4>)
 800d6e8:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800d6ea:	1dbb      	adds	r3, r7, #6
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	0018      	movs	r0, r3
 800d6f0:	f7f5 fe66 	bl	80033c0 <__aeabi_i2d>
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	4b1d      	ldr	r3, [pc, #116]	@ (800d76c <SetVOCindicator+0x1a8>)
 800d6f8:	f7f5 fa68 	bl	8002bcc <__aeabi_dsub>
 800d6fc:	0002      	movs	r2, r0
 800d6fe:	000b      	movs	r3, r1
 800d700:	0010      	movs	r0, r2
 800d702:	0019      	movs	r1, r3
 800d704:	2200      	movs	r2, #0
 800d706:	4b1f      	ldr	r3, [pc, #124]	@ (800d784 <SetVOCindicator+0x1c0>)
 800d708:	f7f4 fb54 	bl	8001db4 <__aeabi_ddiv>
 800d70c:	0002      	movs	r2, r0
 800d70e:	000b      	movs	r3, r1
 800d710:	2000      	movs	r0, #0
 800d712:	4917      	ldr	r1, [pc, #92]	@ (800d770 <SetVOCindicator+0x1ac>)
 800d714:	f7f5 fa5a 	bl	8002bcc <__aeabi_dsub>
 800d718:	0002      	movs	r2, r0
 800d71a:	000b      	movs	r3, r1
 800d71c:	0014      	movs	r4, r2
 800d71e:	001d      	movs	r5, r3
 800d720:	4b14      	ldr	r3, [pc, #80]	@ (800d774 <SetVOCindicator+0x1b0>)
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	0018      	movs	r0, r3
 800d726:	f7f5 fe4b 	bl	80033c0 <__aeabi_i2d>
 800d72a:	0002      	movs	r2, r0
 800d72c:	000b      	movs	r3, r1
 800d72e:	0020      	movs	r0, r4
 800d730:	0029      	movs	r1, r5
 800d732:	f7f4 ff83 	bl	800263c <__aeabi_dmul>
 800d736:	0002      	movs	r2, r0
 800d738:	000b      	movs	r3, r1
 800d73a:	0010      	movs	r0, r2
 800d73c:	0019      	movs	r1, r3
 800d73e:	f7f2 ff85 	bl	800064c <__aeabi_d2uiz>
 800d742:	0003      	movs	r3, r0
 800d744:	b29a      	uxth	r2, r3
 800d746:	4b0e      	ldr	r3, [pc, #56]	@ (800d780 <SetVOCindicator+0x1bc>)
 800d748:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800d74a:	4b0a      	ldr	r3, [pc, #40]	@ (800d774 <SetVOCindicator+0x1b0>)
 800d74c:	881a      	ldrh	r2, [r3, #0]
 800d74e:	4b0b      	ldr	r3, [pc, #44]	@ (800d77c <SetVOCindicator+0x1b8>)
 800d750:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d752:	4b0b      	ldr	r3, [pc, #44]	@ (800d780 <SetVOCindicator+0x1bc>)
 800d754:	8818      	ldrh	r0, [r3, #0]
 800d756:	4b08      	ldr	r3, [pc, #32]	@ (800d778 <SetVOCindicator+0x1b4>)
 800d758:	8819      	ldrh	r1, [r3, #0]
 800d75a:	4b08      	ldr	r3, [pc, #32]	@ (800d77c <SetVOCindicator+0x1b8>)
 800d75c:	881b      	ldrh	r3, [r3, #0]
 800d75e:	001a      	movs	r2, r3
 800d760:	f7ff fda6 	bl	800d2b0 <SetVocLED>
  }

}
 800d764:	46c0      	nop			@ (mov r8, r8)
 800d766:	46bd      	mov	sp, r7
 800d768:	b002      	add	sp, #8
 800d76a:	bdb0      	pop	{r4, r5, r7, pc}
 800d76c:	40590000 	.word	0x40590000
 800d770:	3ff00000 	.word	0x3ff00000
 800d774:	200000ce 	.word	0x200000ce
 800d778:	2000201e 	.word	0x2000201e
 800d77c:	20002020 	.word	0x20002020
 800d780:	20002022 	.word	0x20002022
 800d784:	40790000 	.word	0x40790000

0800d788 <powerCheck>:

Battery_Status powerCheck(){
 800d788:	b590      	push	{r4, r7, lr}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800d78e:	f7f8 fe71 	bl	8006474 <Check_USB_PowerOn>
 800d792:	0003      	movs	r3, r0
 800d794:	001a      	movs	r2, r3
 800d796:	2301      	movs	r3, #1
 800d798:	4053      	eors	r3, r2
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d005      	beq.n	800d7ac <powerCheck+0x24>
    status = batteryChargeCheck();
 800d7a0:	1dfc      	adds	r4, r7, #7
 800d7a2:	f7ff fc65 	bl	800d070 <batteryChargeCheck>
 800d7a6:	0003      	movs	r3, r0
 800d7a8:	7023      	strb	r3, [r4, #0]
 800d7aa:	e002      	b.n	800d7b2 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800d7ac:	1dfb      	adds	r3, r7, #7
 800d7ae:	2204      	movs	r2, #4
 800d7b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800d7b2:	1dfb      	adds	r3, r7, #7
 800d7b4:	781b      	ldrb	r3, [r3, #0]
}
 800d7b6:	0018      	movs	r0, r3
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	b003      	add	sp, #12
 800d7bc:	bd90      	pop	{r4, r7, pc}
	...

0800d7c0 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	0002      	movs	r2, r0
 800d7c8:	1dfb      	adds	r3, r7, #7
 800d7ca:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d7cc:	1dfb      	adds	r3, r7, #7
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b04      	cmp	r3, #4
 800d7d2:	d105      	bne.n	800d7e0 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800d7d4:	4a18      	ldr	r2, [pc, #96]	@ (800d838 <powerDisplay+0x78>)
 800d7d6:	4b19      	ldr	r3, [pc, #100]	@ (800d83c <powerDisplay+0x7c>)
 800d7d8:	0019      	movs	r1, r3
 800d7da:	2003      	movs	r0, #3
 800d7dc:	f000 ff20 	bl	800e620 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d7e0:	1dfb      	adds	r3, r7, #7
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	2b03      	cmp	r3, #3
 800d7e6:	d105      	bne.n	800d7f4 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d7e8:	4a15      	ldr	r2, [pc, #84]	@ (800d840 <powerDisplay+0x80>)
 800d7ea:	4b14      	ldr	r3, [pc, #80]	@ (800d83c <powerDisplay+0x7c>)
 800d7ec:	0019      	movs	r1, r3
 800d7ee:	2003      	movs	r0, #3
 800d7f0:	f000 ff16 	bl	800e620 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d7f4:	1dfb      	adds	r3, r7, #7
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	d105      	bne.n	800d808 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d7fc:	4a11      	ldr	r2, [pc, #68]	@ (800d844 <powerDisplay+0x84>)
 800d7fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d83c <powerDisplay+0x7c>)
 800d800:	0019      	movs	r1, r3
 800d802:	2003      	movs	r0, #3
 800d804:	f000 ff0c 	bl	800e620 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d808:	1dfb      	adds	r3, r7, #7
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d105      	bne.n	800d81c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d810:	4a0d      	ldr	r2, [pc, #52]	@ (800d848 <powerDisplay+0x88>)
 800d812:	4b0a      	ldr	r3, [pc, #40]	@ (800d83c <powerDisplay+0x7c>)
 800d814:	0019      	movs	r1, r3
 800d816:	2003      	movs	r0, #3
 800d818:	f000 ff02 	bl	800e620 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d81c:	1dfb      	adds	r3, r7, #7
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d105      	bne.n	800d830 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d824:	4a09      	ldr	r2, [pc, #36]	@ (800d84c <powerDisplay+0x8c>)
 800d826:	4b05      	ldr	r3, [pc, #20]	@ (800d83c <powerDisplay+0x7c>)
 800d828:	0019      	movs	r1, r3
 800d82a:	2003      	movs	r0, #3
 800d82c:	f000 fef8 	bl	800e620 <CreateLine>
  }
}
 800d830:	46c0      	nop			@ (mov r8, r8)
 800d832:	46bd      	mov	sp, r7
 800d834:	b002      	add	sp, #8
 800d836:	bd80      	pop	{r7, pc}
 800d838:	08025004 	.word	0x08025004
 800d83c:	08025028 	.word	0x08025028
 800d840:	0802502c 	.word	0x0802502c
 800d844:	08025044 	.word	0x08025044
 800d848:	08025064 	.word	0x08025064
 800d84c:	0802507c 	.word	0x0802507c

0800d850 <configCheck>:

void configCheck(){
 800d850:	b590      	push	{r4, r7, lr}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d856:	f7f8 fe1c 	bl	8006492 <BootButton_Pressed>
 800d85a:	1e03      	subs	r3, r0, #0
 800d85c:	d007      	beq.n	800d86e <configCheck+0x1e>
 800d85e:	f7f8 fe29 	bl	80064b4 <UserButton_Pressed>
 800d862:	1e03      	subs	r3, r0, #0
 800d864:	d003      	beq.n	800d86e <configCheck+0x1e>
    configSet = true;
 800d866:	4ba4      	ldr	r3, [pc, #656]	@ (800daf8 <configCheck+0x2a8>)
 800d868:	2201      	movs	r2, #1
 800d86a:	701a      	strb	r2, [r3, #0]
 800d86c:	e00a      	b.n	800d884 <configCheck+0x34>
  }
  else{
    configSet = false;
 800d86e:	4ba2      	ldr	r3, [pc, #648]	@ (800daf8 <configCheck+0x2a8>)
 800d870:	2200      	movs	r2, #0
 800d872:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d874:	f001 fb14 	bl	800eea0 <HAL_GetTick>
 800d878:	0003      	movs	r3, r0
 800d87a:	22fa      	movs	r2, #250	@ 0xfa
 800d87c:	00d2      	lsls	r2, r2, #3
 800d87e:	189a      	adds	r2, r3, r2
 800d880:	4b9e      	ldr	r3, [pc, #632]	@ (800dafc <configCheck+0x2ac>)
 800d882:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d884:	4b9c      	ldr	r3, [pc, #624]	@ (800daf8 <configCheck+0x2a8>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00d      	beq.n	800d8a8 <configCheck+0x58>
 800d88c:	4b9b      	ldr	r3, [pc, #620]	@ (800dafc <configCheck+0x2ac>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	0018      	movs	r0, r3
 800d892:	f000 fe6f 	bl	800e574 <TimestampIsReached>
 800d896:	1e03      	subs	r3, r0, #0
 800d898:	d006      	beq.n	800d8a8 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d89a:	f7f6 f8fb 	bl	8003a94 <SetConfigMode>
    SetDBLED(true, true, true);
 800d89e:	2201      	movs	r2, #1
 800d8a0:	2101      	movs	r1, #1
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	f7ff fcba 	bl	800d21c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld && !GetReconfigMode()){
 800d8a8:	f7f8 fdf3 	bl	8006492 <BootButton_Pressed>
 800d8ac:	0003      	movs	r3, r0
 800d8ae:	001a      	movs	r2, r3
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	4053      	eors	r3, r2
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d03a      	beq.n	800d930 <configCheck+0xe0>
 800d8ba:	f7f8 fdfb 	bl	80064b4 <UserButton_Pressed>
 800d8be:	1e03      	subs	r3, r0, #0
 800d8c0:	d036      	beq.n	800d930 <configCheck+0xe0>
 800d8c2:	4b8f      	ldr	r3, [pc, #572]	@ (800db00 <configCheck+0x2b0>)
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	4053      	eors	r3, r2
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d02f      	beq.n	800d930 <configCheck+0xe0>
 800d8d0:	f7f6 f900 	bl	8003ad4 <GetReconfigMode>
 800d8d4:	0003      	movs	r3, r0
 800d8d6:	001a      	movs	r2, r3
 800d8d8:	2301      	movs	r3, #1
 800d8da:	4053      	eors	r3, r2
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d026      	beq.n	800d930 <configCheck+0xe0>
    SetLEDsOff();
 800d8e2:	f7ff fe25 	bl	800d530 <SetLEDsOff>
    Debug("userToggle flipped");
 800d8e6:	4a87      	ldr	r2, [pc, #540]	@ (800db04 <configCheck+0x2b4>)
 800d8e8:	4b87      	ldr	r3, [pc, #540]	@ (800db08 <configCheck+0x2b8>)
 800d8ea:	0019      	movs	r1, r3
 800d8ec:	2003      	movs	r0, #3
 800d8ee:	f000 fe97 	bl	800e620 <CreateLine>
    userToggle = !userToggle;
 800d8f2:	4b86      	ldr	r3, [pc, #536]	@ (800db0c <configCheck+0x2bc>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	1e5a      	subs	r2, r3, #1
 800d8f8:	4193      	sbcs	r3, r2
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	4053      	eors	r3, r2
 800d900:	b2db      	uxtb	r3, r3
 800d902:	1c1a      	adds	r2, r3, #0
 800d904:	2301      	movs	r3, #1
 800d906:	4013      	ands	r3, r2
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	4b80      	ldr	r3, [pc, #512]	@ (800db0c <configCheck+0x2bc>)
 800d90c:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d90e:	4b7f      	ldr	r3, [pc, #508]	@ (800db0c <configCheck+0x2bc>)
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d001      	beq.n	800d91a <configCheck+0xca>
      EnabledConnectedDevices();
 800d916:	f7fa fffb 	bl	8008910 <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d91a:	4b79      	ldr	r3, [pc, #484]	@ (800db00 <configCheck+0x2b0>)
 800d91c:	2201      	movs	r2, #1
 800d91e:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d920:	f001 fabe 	bl	800eea0 <HAL_GetTick>
 800d924:	0003      	movs	r3, r0
 800d926:	22fa      	movs	r2, #250	@ 0xfa
 800d928:	00d2      	lsls	r2, r2, #3
 800d92a:	189a      	adds	r2, r3, r2
 800d92c:	4b78      	ldr	r3, [pc, #480]	@ (800db10 <configCheck+0x2c0>)
 800d92e:	601a      	str	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && buttonHeld&& TimestampIsReached(UserbuttonStamp)) {
 800d930:	f7f8 fdaf 	bl	8006492 <BootButton_Pressed>
 800d934:	0003      	movs	r3, r0
 800d936:	001a      	movs	r2, r3
 800d938:	2301      	movs	r3, #1
 800d93a:	4053      	eors	r3, r2
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d100      	bne.n	800d944 <configCheck+0xf4>
 800d942:	e0a4      	b.n	800da8e <configCheck+0x23e>
 800d944:	4b6e      	ldr	r3, [pc, #440]	@ (800db00 <configCheck+0x2b0>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d100      	bne.n	800d94e <configCheck+0xfe>
 800d94c:	e09f      	b.n	800da8e <configCheck+0x23e>
 800d94e:	4b70      	ldr	r3, [pc, #448]	@ (800db10 <configCheck+0x2c0>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	0018      	movs	r0, r3
 800d954:	f000 fe0e 	bl	800e574 <TimestampIsReached>
 800d958:	1e03      	subs	r3, r0, #0
 800d95a:	d100      	bne.n	800d95e <configCheck+0x10e>
 800d95c:	e097      	b.n	800da8e <configCheck+0x23e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d95e:	f7fa fd27 	bl	80083b0 <GetPMSensorPresence>
 800d962:	1e03      	subs	r3, r0, #0
 800d964:	d100      	bne.n	800d968 <configCheck+0x118>
 800d966:	e082      	b.n	800da6e <configCheck+0x21e>
 800d968:	4b6a      	ldr	r3, [pc, #424]	@ (800db14 <configCheck+0x2c4>)
 800d96a:	791b      	ldrb	r3, [r3, #4]
 800d96c:	2b34      	cmp	r3, #52	@ 0x34
 800d96e:	d004      	beq.n	800d97a <configCheck+0x12a>
 800d970:	4b68      	ldr	r3, [pc, #416]	@ (800db14 <configCheck+0x2c4>)
 800d972:	791b      	ldrb	r3, [r3, #4]
 800d974:	2b35      	cmp	r3, #53	@ 0x35
 800d976:	d000      	beq.n	800d97a <configCheck+0x12a>
 800d978:	e079      	b.n	800da6e <configCheck+0x21e>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d97a:	4b67      	ldr	r3, [pc, #412]	@ (800db18 <configCheck+0x2c8>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	1e5a      	subs	r2, r3, #1
 800d980:	4193      	sbcs	r3, r2
 800d982:	b2db      	uxtb	r3, r3
 800d984:	2201      	movs	r2, #1
 800d986:	4053      	eors	r3, r2
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	1c1a      	adds	r2, r3, #0
 800d98c:	2301      	movs	r3, #1
 800d98e:	4013      	ands	r3, r2
 800d990:	b2da      	uxtb	r2, r3
 800d992:	4b61      	ldr	r3, [pc, #388]	@ (800db18 <configCheck+0x2c8>)
 800d994:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800d996:	4b60      	ldr	r3, [pc, #384]	@ (800db18 <configCheck+0x2c8>)
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d005      	beq.n	800d9aa <configCheck+0x15a>
 800d99e:	1dbc      	adds	r4, r7, #6
 800d9a0:	f7ff fbc0 	bl	800d124 <Calculate_LED_ON>
 800d9a4:	0003      	movs	r3, r0
 800d9a6:	8023      	strh	r3, [r4, #0]
 800d9a8:	e003      	b.n	800d9b2 <configCheck+0x162>
        else color = 4000;
 800d9aa:	1dbb      	adds	r3, r7, #6
 800d9ac:	22fa      	movs	r2, #250	@ 0xfa
 800d9ae:	0112      	lsls	r2, r2, #4
 800d9b0:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800d9b2:	4b59      	ldr	r3, [pc, #356]	@ (800db18 <configCheck+0x2c8>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <configCheck+0x16e>
 800d9ba:	4b58      	ldr	r3, [pc, #352]	@ (800db1c <configCheck+0x2cc>)
 800d9bc:	e000      	b.n	800d9c0 <configCheck+0x170>
 800d9be:	4b58      	ldr	r3, [pc, #352]	@ (800db20 <configCheck+0x2d0>)
 800d9c0:	4a58      	ldr	r2, [pc, #352]	@ (800db24 <configCheck+0x2d4>)
 800d9c2:	4959      	ldr	r1, [pc, #356]	@ (800db28 <configCheck+0x2d8>)
 800d9c4:	2002      	movs	r0, #2
 800d9c6:	f000 fe2b 	bl	800e620 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d9ca:	1d7b      	adds	r3, r7, #5
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	701a      	strb	r2, [r3, #0]
 800d9d0:	e028      	b.n	800da24 <configCheck+0x1d4>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800d9d2:	f7ff fba7 	bl	800d124 <Calculate_LED_ON>
 800d9d6:	0003      	movs	r3, r0
 800d9d8:	001a      	movs	r2, r3
 800d9da:	4b54      	ldr	r3, [pc, #336]	@ (800db2c <configCheck+0x2dc>)
 800d9dc:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800d9de:	4b53      	ldr	r3, [pc, #332]	@ (800db2c <configCheck+0x2dc>)
 800d9e0:	1dba      	adds	r2, r7, #6
 800d9e2:	8812      	ldrh	r2, [r2, #0]
 800d9e4:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800d9e6:	4b51      	ldr	r3, [pc, #324]	@ (800db2c <configCheck+0x2dc>)
 800d9e8:	1dba      	adds	r2, r7, #6
 800d9ea:	8812      	ldrh	r2, [r2, #0]
 800d9ec:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d9ee:	23c8      	movs	r3, #200	@ 0xc8
 800d9f0:	005b      	lsls	r3, r3, #1
 800d9f2:	0018      	movs	r0, r3
 800d9f4:	f001 fa5e 	bl	800eeb4 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800d9f8:	4b4c      	ldr	r3, [pc, #304]	@ (800db2c <configCheck+0x2dc>)
 800d9fa:	22fa      	movs	r2, #250	@ 0xfa
 800d9fc:	0112      	lsls	r2, r2, #4
 800d9fe:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800da00:	4b4a      	ldr	r3, [pc, #296]	@ (800db2c <configCheck+0x2dc>)
 800da02:	22fa      	movs	r2, #250	@ 0xfa
 800da04:	0112      	lsls	r2, r2, #4
 800da06:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800da08:	4b48      	ldr	r3, [pc, #288]	@ (800db2c <configCheck+0x2dc>)
 800da0a:	22fa      	movs	r2, #250	@ 0xfa
 800da0c:	0112      	lsls	r2, r2, #4
 800da0e:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800da10:	23c8      	movs	r3, #200	@ 0xc8
 800da12:	005b      	lsls	r3, r3, #1
 800da14:	0018      	movs	r0, r3
 800da16:	f001 fa4d 	bl	800eeb4 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800da1a:	1d7b      	adds	r3, r7, #5
 800da1c:	781a      	ldrb	r2, [r3, #0]
 800da1e:	1d7b      	adds	r3, r7, #5
 800da20:	3201      	adds	r2, #1
 800da22:	701a      	strb	r2, [r3, #0]
 800da24:	1d7b      	adds	r3, r7, #5
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d9d2      	bls.n	800d9d2 <configCheck+0x182>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800da2c:	4b37      	ldr	r3, [pc, #220]	@ (800db0c <configCheck+0x2bc>)
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	1e5a      	subs	r2, r3, #1
 800da32:	4193      	sbcs	r3, r2
 800da34:	b2db      	uxtb	r3, r3
 800da36:	2201      	movs	r2, #1
 800da38:	4053      	eors	r3, r2
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	1c1a      	adds	r2, r3, #0
 800da3e:	2301      	movs	r3, #1
 800da40:	4013      	ands	r3, r2
 800da42:	b2da      	uxtb	r2, r3
 800da44:	4b31      	ldr	r3, [pc, #196]	@ (800db0c <configCheck+0x2bc>)
 800da46:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800da48:	4b30      	ldr	r3, [pc, #192]	@ (800db0c <configCheck+0x2bc>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d001      	beq.n	800da54 <configCheck+0x204>
 800da50:	4b32      	ldr	r3, [pc, #200]	@ (800db1c <configCheck+0x2cc>)
 800da52:	e000      	b.n	800da56 <configCheck+0x206>
 800da54:	4b32      	ldr	r3, [pc, #200]	@ (800db20 <configCheck+0x2d0>)
 800da56:	4a36      	ldr	r2, [pc, #216]	@ (800db30 <configCheck+0x2e0>)
 800da58:	4933      	ldr	r1, [pc, #204]	@ (800db28 <configCheck+0x2d8>)
 800da5a:	2002      	movs	r0, #2
 800da5c:	f000 fde0 	bl	800e620 <CreateLine>
      if (usbPluggedIn) {
 800da60:	4b34      	ldr	r3, [pc, #208]	@ (800db34 <configCheck+0x2e4>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d009      	beq.n	800da7c <configCheck+0x22c>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800da68:	f7fc f8b8 	bl	8009bdc <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800da6c:	e006      	b.n	800da7c <configCheck+0x22c>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800da6e:	4a32      	ldr	r2, [pc, #200]	@ (800db38 <configCheck+0x2e8>)
 800da70:	4b2d      	ldr	r3, [pc, #180]	@ (800db28 <configCheck+0x2d8>)
 800da72:	0019      	movs	r1, r3
 800da74:	2002      	movs	r0, #2
 800da76:	f000 fdd3 	bl	800e620 <CreateLine>
 800da7a:	e000      	b.n	800da7e <configCheck+0x22e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800da7c:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800da7e:	46c0      	nop			@ (mov r8, r8)
 800da80:	f7f8 fd18 	bl	80064b4 <UserButton_Pressed>
 800da84:	1e03      	subs	r3, r0, #0
 800da86:	d1fb      	bne.n	800da80 <configCheck+0x230>
    }
    buttonHeld = false;
 800da88:	4b1d      	ldr	r3, [pc, #116]	@ (800db00 <configCheck+0x2b0>)
 800da8a:	2200      	movs	r2, #0
 800da8c:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800da8e:	f7f8 fd00 	bl	8006492 <BootButton_Pressed>
 800da92:	0003      	movs	r3, r0
 800da94:	001a      	movs	r2, r3
 800da96:	2301      	movs	r3, #1
 800da98:	4053      	eors	r3, r2
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00b      	beq.n	800dab8 <configCheck+0x268>
 800daa0:	f7f8 fd08 	bl	80064b4 <UserButton_Pressed>
 800daa4:	0003      	movs	r3, r0
 800daa6:	001a      	movs	r2, r3
 800daa8:	2301      	movs	r3, #1
 800daaa:	4053      	eors	r3, r2
 800daac:	b2db      	uxtb	r3, r3
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d002      	beq.n	800dab8 <configCheck+0x268>
    buttonHeld = false;
 800dab2:	4b13      	ldr	r3, [pc, #76]	@ (800db00 <configCheck+0x2b0>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800dab8:	f7f8 fcdc 	bl	8006474 <Check_USB_PowerOn>
 800dabc:	1e03      	subs	r3, r0, #0
 800dabe:	d003      	beq.n	800dac8 <configCheck+0x278>
    usbPluggedIn = true;
 800dac0:	4b1c      	ldr	r3, [pc, #112]	@ (800db34 <configCheck+0x2e4>)
 800dac2:	2201      	movs	r2, #1
 800dac4:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800dac6:	e012      	b.n	800daee <configCheck+0x29e>
    if(!userToggle && !init){
 800dac8:	4b10      	ldr	r3, [pc, #64]	@ (800db0c <configCheck+0x2bc>)
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	2201      	movs	r2, #1
 800dace:	4053      	eors	r3, r2
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d008      	beq.n	800dae8 <configCheck+0x298>
 800dad6:	4b19      	ldr	r3, [pc, #100]	@ (800db3c <configCheck+0x2ec>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2201      	movs	r2, #1
 800dadc:	4053      	eors	r3, r2
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <configCheck+0x298>
      SetLEDsOff();
 800dae4:	f7ff fd24 	bl	800d530 <SetLEDsOff>
    usbPluggedIn = false;
 800dae8:	4b12      	ldr	r3, [pc, #72]	@ (800db34 <configCheck+0x2e4>)
 800daea:	2200      	movs	r2, #0
 800daec:	701a      	strb	r2, [r3, #0]
}
 800daee:	46c0      	nop			@ (mov r8, r8)
 800daf0:	46bd      	mov	sp, r7
 800daf2:	b003      	add	sp, #12
 800daf4:	bd90      	pop	{r4, r7, pc}
 800daf6:	46c0      	nop			@ (mov r8, r8)
 800daf8:	20002008 	.word	0x20002008
 800dafc:	20002010 	.word	0x20002010
 800db00:	2000200b 	.word	0x2000200b
 800db04:	080250a0 	.word	0x080250a0
 800db08:	08025028 	.word	0x08025028
 800db0c:	2000200a 	.word	0x2000200a
 800db10:	20002014 	.word	0x20002014
 800db14:	2000106c 	.word	0x2000106c
 800db18:	20001067 	.word	0x20001067
 800db1c:	080250b4 	.word	0x080250b4
 800db20:	080250bc 	.word	0x080250bc
 800db24:	080250c8 	.word	0x080250c8
 800db28:	080250e8 	.word	0x080250e8
 800db2c:	40000400 	.word	0x40000400
 800db30:	080250ec 	.word	0x080250ec
 800db34:	20002009 	.word	0x20002009
 800db38:	08025104 	.word	0x08025104
 800db3c:	200000cc 	.word	0x200000cc

0800db40 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800db40:	b590      	push	{r4, r7, lr}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800db46:	1dfc      	adds	r4, r7, #7
 800db48:	f7ff fe1e 	bl	800d788 <powerCheck>
 800db4c:	0003      	movs	r3, r0
 800db4e:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800db50:	1dfb      	adds	r3, r7, #7
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	0018      	movs	r0, r3
 800db56:	f7ff fe33 	bl	800d7c0 <powerDisplay>
  return status;
 800db5a:	1dfb      	adds	r3, r7, #7
 800db5c:	781b      	ldrb	r3, [r3, #0]
}
 800db5e:	0018      	movs	r0, r3
 800db60:	46bd      	mov	sp, r7
 800db62:	b003      	add	sp, #12
 800db64:	bd90      	pop	{r4, r7, pc}
	...

0800db68 <setuserToggle>:

void setuserToggle(void) {
 800db68:	b580      	push	{r7, lr}
 800db6a:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800db6c:	f7ff fe0c 	bl	800d788 <powerCheck>
 800db70:	0003      	movs	r3, r0
 800db72:	2b04      	cmp	r3, #4
 800db74:	d002      	beq.n	800db7c <setuserToggle+0x14>
    userToggle = true;
 800db76:	4b03      	ldr	r3, [pc, #12]	@ (800db84 <setuserToggle+0x1c>)
 800db78:	2201      	movs	r2, #1
 800db7a:	701a      	strb	r2, [r3, #0]
  }
}
 800db7c:	46c0      	nop			@ (mov r8, r8)
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	46c0      	nop			@ (mov r8, r8)
 800db84:	2000200a 	.word	0x2000200a

0800db88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800db8c:	4b07      	ldr	r3, [pc, #28]	@ (800dbac <HAL_MspInit+0x24>)
 800db8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db90:	4b06      	ldr	r3, [pc, #24]	@ (800dbac <HAL_MspInit+0x24>)
 800db92:	2101      	movs	r1, #1
 800db94:	430a      	orrs	r2, r1
 800db96:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800db98:	4b04      	ldr	r3, [pc, #16]	@ (800dbac <HAL_MspInit+0x24>)
 800db9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db9c:	4b03      	ldr	r3, [pc, #12]	@ (800dbac <HAL_MspInit+0x24>)
 800db9e:	2180      	movs	r1, #128	@ 0x80
 800dba0:	0549      	lsls	r1, r1, #21
 800dba2:	430a      	orrs	r2, r1
 800dba4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dba6:	46c0      	nop			@ (mov r8, r8)
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	40021000 	.word	0x40021000

0800dbb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800dbb4:	46c0      	nop			@ (mov r8, r8)
 800dbb6:	e7fd      	b.n	800dbb4 <NMI_Handler+0x4>

0800dbb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dbbc:	46c0      	nop			@ (mov r8, r8)
 800dbbe:	e7fd      	b.n	800dbbc <HardFault_Handler+0x4>

0800dbc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800dbc4:	46c0      	nop			@ (mov r8, r8)
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dbce:	46c0      	nop			@ (mov r8, r8)
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dbd8:	f001 f950 	bl	800ee7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service ();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800dbdc:	46c0      	nop			@ (mov r8, r8)
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
	...

0800dbe4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800dbe8:	4b03      	ldr	r3, [pc, #12]	@ (800dbf8 <RTC_IRQHandler+0x14>)
 800dbea:	0018      	movs	r0, r3
 800dbec:	f008 fe76 	bl	80168dc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800dbf0:	46c0      	nop			@ (mov r8, r8)
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	46c0      	nop			@ (mov r8, r8)
 800dbf8:	20001040 	.word	0x20001040

0800dbfc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800dc00:	2380      	movs	r3, #128	@ 0x80
 800dc02:	021b      	lsls	r3, r3, #8
 800dc04:	0018      	movs	r0, r3
 800dc06:	f002 fbf9 	bl	80103fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800dc0a:	46c0      	nop			@ (mov r8, r8)
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dc14:	4b05      	ldr	r3, [pc, #20]	@ (800dc2c <DMA1_Channel2_3_IRQHandler+0x1c>)
 800dc16:	0018      	movs	r0, r3
 800dc18:	f001 ff81 	bl	800fb1e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800dc1c:	4b04      	ldr	r3, [pc, #16]	@ (800dc30 <DMA1_Channel2_3_IRQHandler+0x20>)
 800dc1e:	0018      	movs	r0, r3
 800dc20:	f001 ff7d 	bl	800fb1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800dc24:	46c0      	nop			@ (mov r8, r8)
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	46c0      	nop			@ (mov r8, r8)
 800dc2c:	20000ee4 	.word	0x20000ee4
 800dc30:	20000e9c 	.word	0x20000e9c

0800dc34 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800dc38:	4b07      	ldr	r3, [pc, #28]	@ (800dc58 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800dc3a:	0018      	movs	r0, r3
 800dc3c:	f001 ff6f 	bl	800fb1e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800dc40:	4b06      	ldr	r3, [pc, #24]	@ (800dc5c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800dc42:	0018      	movs	r0, r3
 800dc44:	f001 ff6b 	bl	800fb1e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800dc48:	4b05      	ldr	r3, [pc, #20]	@ (800dc60 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800dc4a:	0018      	movs	r0, r3
 800dc4c:	f001 ff67 	bl	800fb1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800dc50:	46c0      	nop			@ (mov r8, r8)
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	46c0      	nop			@ (mov r8, r8)
 800dc58:	20000f68 	.word	0x20000f68
 800dc5c:	20002310 	.word	0x20002310
 800dc60:	20002358 	.word	0x20002358

0800dc64 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800dc68:	4b03      	ldr	r3, [pc, #12]	@ (800dc78 <USART4_5_IRQHandler+0x14>)
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	f009 fd30 	bl	80176d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800dc70:	46c0      	nop			@ (mov r8, r8)
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	46c0      	nop			@ (mov r8, r8)
 800dc78:	20002258 	.word	0x20002258

0800dc7c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800dc80:	4b09      	ldr	r3, [pc, #36]	@ (800dca8 <I2C1_IRQHandler+0x2c>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	699a      	ldr	r2, [r3, #24]
 800dc86:	23e0      	movs	r3, #224	@ 0xe0
 800dc88:	00db      	lsls	r3, r3, #3
 800dc8a:	4013      	ands	r3, r2
 800dc8c:	d004      	beq.n	800dc98 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800dc8e:	4b06      	ldr	r3, [pc, #24]	@ (800dca8 <I2C1_IRQHandler+0x2c>)
 800dc90:	0018      	movs	r0, r3
 800dc92:	f003 f89b 	bl	8010dcc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800dc96:	e003      	b.n	800dca0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800dc98:	4b03      	ldr	r3, [pc, #12]	@ (800dca8 <I2C1_IRQHandler+0x2c>)
 800dc9a:	0018      	movs	r0, r3
 800dc9c:	f003 f87c 	bl	8010d98 <HAL_I2C_EV_IRQHandler>
}
 800dca0:	46c0      	nop			@ (mov r8, r8)
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	46c0      	nop			@ (mov r8, r8)
 800dca8:	20000df4 	.word	0x20000df4

0800dcac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800dcb0:	4b03      	ldr	r3, [pc, #12]	@ (800dcc0 <USART1_IRQHandler+0x14>)
 800dcb2:	0018      	movs	r0, r3
 800dcb4:	f009 fd0c 	bl	80176d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800dcb8:	46c0      	nop			@ (mov r8, r8)
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	46c0      	nop			@ (mov r8, r8)
 800dcc0:	200021a0 	.word	0x200021a0

0800dcc4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800dcc8:	4b03      	ldr	r3, [pc, #12]	@ (800dcd8 <USB_IRQHandler+0x14>)
 800dcca:	0018      	movs	r0, r3
 800dccc:	f005 fc5c 	bl	8013588 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800dcd0:	46c0      	nop			@ (mov r8, r8)
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	46c0      	nop			@ (mov r8, r8)
 800dcd8:	2000316c 	.word	0x2000316c

0800dcdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	af00      	add	r7, sp, #0
  return 1;
 800dce0:	2301      	movs	r3, #1
}
 800dce2:	0018      	movs	r0, r3
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <_kill>:

int _kill(int pid, int sig)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800dcf2:	f012 fbd1 	bl	8020498 <__errno>
 800dcf6:	0003      	movs	r3, r0
 800dcf8:	2216      	movs	r2, #22
 800dcfa:	601a      	str	r2, [r3, #0]
  return -1;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	425b      	negs	r3, r3
}
 800dd00:	0018      	movs	r0, r3
 800dd02:	46bd      	mov	sp, r7
 800dd04:	b002      	add	sp, #8
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <_exit>:

void _exit (int status)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dd10:	2301      	movs	r3, #1
 800dd12:	425a      	negs	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	0011      	movs	r1, r2
 800dd18:	0018      	movs	r0, r3
 800dd1a:	f7ff ffe5 	bl	800dce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800dd1e:	46c0      	nop			@ (mov r8, r8)
 800dd20:	e7fd      	b.n	800dd1e <_exit+0x16>

0800dd22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b086      	sub	sp, #24
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	60f8      	str	r0, [r7, #12]
 800dd2a:	60b9      	str	r1, [r7, #8]
 800dd2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd2e:	2300      	movs	r3, #0
 800dd30:	617b      	str	r3, [r7, #20]
 800dd32:	e00a      	b.n	800dd4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800dd34:	e000      	b.n	800dd38 <_read+0x16>
 800dd36:	bf00      	nop
 800dd38:	0001      	movs	r1, r0
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	1c5a      	adds	r2, r3, #1
 800dd3e:	60ba      	str	r2, [r7, #8]
 800dd40:	b2ca      	uxtb	r2, r1
 800dd42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	3301      	adds	r3, #1
 800dd48:	617b      	str	r3, [r7, #20]
 800dd4a:	697a      	ldr	r2, [r7, #20]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	dbf0      	blt.n	800dd34 <_read+0x12>
  }

  return len;
 800dd52:	687b      	ldr	r3, [r7, #4]
}
 800dd54:	0018      	movs	r0, r3
 800dd56:	46bd      	mov	sp, r7
 800dd58:	b006      	add	sp, #24
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <_close>:
  }
  return len;
}

int _close(int file)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800dd64:	2301      	movs	r3, #1
 800dd66:	425b      	negs	r3, r3
}
 800dd68:	0018      	movs	r0, r3
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	b002      	add	sp, #8
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	2280      	movs	r2, #128	@ 0x80
 800dd7e:	0192      	lsls	r2, r2, #6
 800dd80:	605a      	str	r2, [r3, #4]
  return 0;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	0018      	movs	r0, r3
 800dd86:	46bd      	mov	sp, r7
 800dd88:	b002      	add	sp, #8
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <_isatty>:

int _isatty(int file)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800dd94:	2301      	movs	r3, #1
}
 800dd96:	0018      	movs	r0, r3
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	b002      	add	sp, #8
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b084      	sub	sp, #16
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	60f8      	str	r0, [r7, #12]
 800dda6:	60b9      	str	r1, [r7, #8]
 800dda8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	0018      	movs	r0, r3
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	b004      	add	sp, #16
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b086      	sub	sp, #24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ddbc:	4a14      	ldr	r2, [pc, #80]	@ (800de10 <_sbrk+0x5c>)
 800ddbe:	4b15      	ldr	r3, [pc, #84]	@ (800de14 <_sbrk+0x60>)
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ddc8:	4b13      	ldr	r3, [pc, #76]	@ (800de18 <_sbrk+0x64>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d102      	bne.n	800ddd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ddd0:	4b11      	ldr	r3, [pc, #68]	@ (800de18 <_sbrk+0x64>)
 800ddd2:	4a12      	ldr	r2, [pc, #72]	@ (800de1c <_sbrk+0x68>)
 800ddd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ddd6:	4b10      	ldr	r3, [pc, #64]	@ (800de18 <_sbrk+0x64>)
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	18d3      	adds	r3, r2, r3
 800ddde:	693a      	ldr	r2, [r7, #16]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d207      	bcs.n	800ddf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dde4:	f012 fb58 	bl	8020498 <__errno>
 800dde8:	0003      	movs	r3, r0
 800ddea:	220c      	movs	r2, #12
 800ddec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	425b      	negs	r3, r3
 800ddf2:	e009      	b.n	800de08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ddf4:	4b08      	ldr	r3, [pc, #32]	@ (800de18 <_sbrk+0x64>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ddfa:	4b07      	ldr	r3, [pc, #28]	@ (800de18 <_sbrk+0x64>)
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	18d2      	adds	r2, r2, r3
 800de02:	4b05      	ldr	r3, [pc, #20]	@ (800de18 <_sbrk+0x64>)
 800de04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800de06:	68fb      	ldr	r3, [r7, #12]
}
 800de08:	0018      	movs	r0, r3
 800de0a:	46bd      	mov	sp, r7
 800de0c:	b006      	add	sp, #24
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	20005000 	.word	0x20005000
 800de14:	00000400 	.word	0x00000400
 800de18:	20002024 	.word	0x20002024
 800de1c:	200037d0 	.word	0x200037d0

0800de20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800de24:	46c0      	nop			@ (mov r8, r8)
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
	...

0800de2c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de32:	2310      	movs	r3, #16
 800de34:	18fb      	adds	r3, r7, r3
 800de36:	0018      	movs	r0, r3
 800de38:	2308      	movs	r3, #8
 800de3a:	001a      	movs	r2, r3
 800de3c:	2100      	movs	r1, #0
 800de3e:	f012 fa87 	bl	8020350 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800de42:	003b      	movs	r3, r7
 800de44:	0018      	movs	r0, r3
 800de46:	2310      	movs	r3, #16
 800de48:	001a      	movs	r2, r3
 800de4a:	2100      	movs	r1, #0
 800de4c:	f012 fa80 	bl	8020350 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800de50:	4b2e      	ldr	r3, [pc, #184]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800de52:	2280      	movs	r2, #128	@ 0x80
 800de54:	05d2      	lsls	r2, r2, #23
 800de56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800de58:	4b2c      	ldr	r3, [pc, #176]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de5e:	4b2b      	ldr	r3, [pc, #172]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800de60:	2200      	movs	r2, #0
 800de62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800de64:	4b29      	ldr	r3, [pc, #164]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800de66:	4a2a      	ldr	r2, [pc, #168]	@ (800df10 <MX_TIM2_Init+0xe4>)
 800de68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de6a:	4b28      	ldr	r3, [pc, #160]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de70:	4b26      	ldr	r3, [pc, #152]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800de72:	2200      	movs	r2, #0
 800de74:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800de76:	4b25      	ldr	r3, [pc, #148]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800de78:	0018      	movs	r0, r3
 800de7a:	f008 fe3d 	bl	8016af8 <HAL_TIM_PWM_Init>
 800de7e:	1e03      	subs	r3, r0, #0
 800de80:	d001      	beq.n	800de86 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800de82:	f7fa fa57 	bl	8008334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de86:	2110      	movs	r1, #16
 800de88:	187b      	adds	r3, r7, r1
 800de8a:	2200      	movs	r2, #0
 800de8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de8e:	187b      	adds	r3, r7, r1
 800de90:	2200      	movs	r2, #0
 800de92:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800de94:	187a      	adds	r2, r7, r1
 800de96:	4b1d      	ldr	r3, [pc, #116]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800de98:	0011      	movs	r1, r2
 800de9a:	0018      	movs	r0, r3
 800de9c:	f009 f94a 	bl	8017134 <HAL_TIMEx_MasterConfigSynchronization>
 800dea0:	1e03      	subs	r3, r0, #0
 800dea2:	d001      	beq.n	800dea8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800dea4:	f7fa fa46 	bl	8008334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dea8:	003b      	movs	r3, r7
 800deaa:	2260      	movs	r2, #96	@ 0x60
 800deac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800deae:	003b      	movs	r3, r7
 800deb0:	2200      	movs	r2, #0
 800deb2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800deb4:	003b      	movs	r3, r7
 800deb6:	2200      	movs	r2, #0
 800deb8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800deba:	003b      	movs	r3, r7
 800debc:	2200      	movs	r2, #0
 800debe:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dec0:	0039      	movs	r1, r7
 800dec2:	4b12      	ldr	r3, [pc, #72]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800dec4:	2200      	movs	r2, #0
 800dec6:	0018      	movs	r0, r3
 800dec8:	f008 fee8 	bl	8016c9c <HAL_TIM_PWM_ConfigChannel>
 800decc:	1e03      	subs	r3, r0, #0
 800dece:	d001      	beq.n	800ded4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800ded0:	f7fa fa30 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ded4:	0039      	movs	r1, r7
 800ded6:	4b0d      	ldr	r3, [pc, #52]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800ded8:	2208      	movs	r2, #8
 800deda:	0018      	movs	r0, r3
 800dedc:	f008 fede 	bl	8016c9c <HAL_TIM_PWM_ConfigChannel>
 800dee0:	1e03      	subs	r3, r0, #0
 800dee2:	d001      	beq.n	800dee8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800dee4:	f7fa fa26 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dee8:	0039      	movs	r1, r7
 800deea:	4b08      	ldr	r3, [pc, #32]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800deec:	220c      	movs	r2, #12
 800deee:	0018      	movs	r0, r3
 800def0:	f008 fed4 	bl	8016c9c <HAL_TIM_PWM_ConfigChannel>
 800def4:	1e03      	subs	r3, r0, #0
 800def6:	d001      	beq.n	800defc <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800def8:	f7fa fa1c 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800defc:	4b03      	ldr	r3, [pc, #12]	@ (800df0c <MX_TIM2_Init+0xe0>)
 800defe:	0018      	movs	r0, r3
 800df00:	f000 f8fe 	bl	800e100 <HAL_TIM_MspPostInit>

}
 800df04:	46c0      	nop			@ (mov r8, r8)
 800df06:	46bd      	mov	sp, r7
 800df08:	b006      	add	sp, #24
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	20002028 	.word	0x20002028
 800df10:	0000ffff 	.word	0x0000ffff

0800df14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df1a:	2310      	movs	r3, #16
 800df1c:	18fb      	adds	r3, r7, r3
 800df1e:	0018      	movs	r0, r3
 800df20:	2308      	movs	r3, #8
 800df22:	001a      	movs	r2, r3
 800df24:	2100      	movs	r1, #0
 800df26:	f012 fa13 	bl	8020350 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df2a:	003b      	movs	r3, r7
 800df2c:	0018      	movs	r0, r3
 800df2e:	2310      	movs	r3, #16
 800df30:	001a      	movs	r2, r3
 800df32:	2100      	movs	r1, #0
 800df34:	f012 fa0c 	bl	8020350 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800df38:	4b32      	ldr	r3, [pc, #200]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800df3a:	4a33      	ldr	r2, [pc, #204]	@ (800e008 <MX_TIM3_Init+0xf4>)
 800df3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800df3e:	4b31      	ldr	r3, [pc, #196]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800df40:	2200      	movs	r2, #0
 800df42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df44:	4b2f      	ldr	r3, [pc, #188]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800df46:	2200      	movs	r2, #0
 800df48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800df4a:	4b2e      	ldr	r3, [pc, #184]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800df4c:	4a2f      	ldr	r2, [pc, #188]	@ (800e00c <MX_TIM3_Init+0xf8>)
 800df4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df50:	4b2c      	ldr	r3, [pc, #176]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800df52:	2200      	movs	r2, #0
 800df54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df56:	4b2b      	ldr	r3, [pc, #172]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800df58:	2200      	movs	r2, #0
 800df5a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800df5c:	4b29      	ldr	r3, [pc, #164]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800df5e:	0018      	movs	r0, r3
 800df60:	f008 fdca 	bl	8016af8 <HAL_TIM_PWM_Init>
 800df64:	1e03      	subs	r3, r0, #0
 800df66:	d001      	beq.n	800df6c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800df68:	f7fa f9e4 	bl	8008334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df6c:	2110      	movs	r1, #16
 800df6e:	187b      	adds	r3, r7, r1
 800df70:	2200      	movs	r2, #0
 800df72:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df74:	187b      	adds	r3, r7, r1
 800df76:	2200      	movs	r2, #0
 800df78:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800df7a:	187a      	adds	r2, r7, r1
 800df7c:	4b21      	ldr	r3, [pc, #132]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800df7e:	0011      	movs	r1, r2
 800df80:	0018      	movs	r0, r3
 800df82:	f009 f8d7 	bl	8017134 <HAL_TIMEx_MasterConfigSynchronization>
 800df86:	1e03      	subs	r3, r0, #0
 800df88:	d001      	beq.n	800df8e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800df8a:	f7fa f9d3 	bl	8008334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800df8e:	003b      	movs	r3, r7
 800df90:	2260      	movs	r2, #96	@ 0x60
 800df92:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800df94:	003b      	movs	r3, r7
 800df96:	2200      	movs	r2, #0
 800df98:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800df9a:	003b      	movs	r3, r7
 800df9c:	2200      	movs	r2, #0
 800df9e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dfa0:	003b      	movs	r3, r7
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dfa6:	0039      	movs	r1, r7
 800dfa8:	4b16      	ldr	r3, [pc, #88]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	0018      	movs	r0, r3
 800dfae:	f008 fe75 	bl	8016c9c <HAL_TIM_PWM_ConfigChannel>
 800dfb2:	1e03      	subs	r3, r0, #0
 800dfb4:	d001      	beq.n	800dfba <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800dfb6:	f7fa f9bd 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800dfba:	4b12      	ldr	r3, [pc, #72]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800dfbc:	2104      	movs	r1, #4
 800dfbe:	0018      	movs	r0, r3
 800dfc0:	f009 f916 	bl	80171f0 <HAL_TIMEx_RemapConfig>
 800dfc4:	1e03      	subs	r3, r0, #0
 800dfc6:	d001      	beq.n	800dfcc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800dfc8:	f7fa f9b4 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dfcc:	0039      	movs	r1, r7
 800dfce:	4b0d      	ldr	r3, [pc, #52]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800dfd0:	2204      	movs	r2, #4
 800dfd2:	0018      	movs	r0, r3
 800dfd4:	f008 fe62 	bl	8016c9c <HAL_TIM_PWM_ConfigChannel>
 800dfd8:	1e03      	subs	r3, r0, #0
 800dfda:	d001      	beq.n	800dfe0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800dfdc:	f7fa f9aa 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dfe0:	0039      	movs	r1, r7
 800dfe2:	4b08      	ldr	r3, [pc, #32]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800dfe4:	2208      	movs	r2, #8
 800dfe6:	0018      	movs	r0, r3
 800dfe8:	f008 fe58 	bl	8016c9c <HAL_TIM_PWM_ConfigChannel>
 800dfec:	1e03      	subs	r3, r0, #0
 800dfee:	d001      	beq.n	800dff4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800dff0:	f7fa f9a0 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800dff4:	4b03      	ldr	r3, [pc, #12]	@ (800e004 <MX_TIM3_Init+0xf0>)
 800dff6:	0018      	movs	r0, r3
 800dff8:	f000 f882 	bl	800e100 <HAL_TIM_MspPostInit>

}
 800dffc:	46c0      	nop			@ (mov r8, r8)
 800dffe:	46bd      	mov	sp, r7
 800e000:	b006      	add	sp, #24
 800e002:	bd80      	pop	{r7, pc}
 800e004:	20002068 	.word	0x20002068
 800e008:	40000400 	.word	0x40000400
 800e00c:	0000ffff 	.word	0x0000ffff

0800e010 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e016:	003b      	movs	r3, r7
 800e018:	0018      	movs	r0, r3
 800e01a:	2308      	movs	r3, #8
 800e01c:	001a      	movs	r2, r3
 800e01e:	2100      	movs	r1, #0
 800e020:	f012 f996 	bl	8020350 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e024:	4b15      	ldr	r3, [pc, #84]	@ (800e07c <MX_TIM6_Init+0x6c>)
 800e026:	4a16      	ldr	r2, [pc, #88]	@ (800e080 <MX_TIM6_Init+0x70>)
 800e028:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800e02a:	4b14      	ldr	r3, [pc, #80]	@ (800e07c <MX_TIM6_Init+0x6c>)
 800e02c:	220a      	movs	r2, #10
 800e02e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e030:	4b12      	ldr	r3, [pc, #72]	@ (800e07c <MX_TIM6_Init+0x6c>)
 800e032:	2200      	movs	r2, #0
 800e034:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800e036:	4b11      	ldr	r3, [pc, #68]	@ (800e07c <MX_TIM6_Init+0x6c>)
 800e038:	4a12      	ldr	r2, [pc, #72]	@ (800e084 <MX_TIM6_Init+0x74>)
 800e03a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e03c:	4b0f      	ldr	r3, [pc, #60]	@ (800e07c <MX_TIM6_Init+0x6c>)
 800e03e:	2200      	movs	r2, #0
 800e040:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e042:	4b0e      	ldr	r3, [pc, #56]	@ (800e07c <MX_TIM6_Init+0x6c>)
 800e044:	0018      	movs	r0, r3
 800e046:	f008 fcaf 	bl	80169a8 <HAL_TIM_Base_Init>
 800e04a:	1e03      	subs	r3, r0, #0
 800e04c:	d001      	beq.n	800e052 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e04e:	f7fa f971 	bl	8008334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e052:	003b      	movs	r3, r7
 800e054:	2200      	movs	r2, #0
 800e056:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e058:	003b      	movs	r3, r7
 800e05a:	2200      	movs	r2, #0
 800e05c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e05e:	003a      	movs	r2, r7
 800e060:	4b06      	ldr	r3, [pc, #24]	@ (800e07c <MX_TIM6_Init+0x6c>)
 800e062:	0011      	movs	r1, r2
 800e064:	0018      	movs	r0, r3
 800e066:	f009 f865 	bl	8017134 <HAL_TIMEx_MasterConfigSynchronization>
 800e06a:	1e03      	subs	r3, r0, #0
 800e06c:	d001      	beq.n	800e072 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800e06e:	f7fa f961 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e072:	46c0      	nop			@ (mov r8, r8)
 800e074:	46bd      	mov	sp, r7
 800e076:	b002      	add	sp, #8
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	46c0      	nop			@ (mov r8, r8)
 800e07c:	200020a8 	.word	0x200020a8
 800e080:	40001000 	.word	0x40001000
 800e084:	0000ffff 	.word	0x0000ffff

0800e088 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	2380      	movs	r3, #128	@ 0x80
 800e096:	05db      	lsls	r3, r3, #23
 800e098:	429a      	cmp	r2, r3
 800e09a:	d106      	bne.n	800e0aa <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e09c:	4b0a      	ldr	r3, [pc, #40]	@ (800e0c8 <HAL_TIM_PWM_MspInit+0x40>)
 800e09e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0a0:	4b09      	ldr	r3, [pc, #36]	@ (800e0c8 <HAL_TIM_PWM_MspInit+0x40>)
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	430a      	orrs	r2, r1
 800e0a6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800e0a8:	e00a      	b.n	800e0c0 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a07      	ldr	r2, [pc, #28]	@ (800e0cc <HAL_TIM_PWM_MspInit+0x44>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d105      	bne.n	800e0c0 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e0b4:	4b04      	ldr	r3, [pc, #16]	@ (800e0c8 <HAL_TIM_PWM_MspInit+0x40>)
 800e0b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0b8:	4b03      	ldr	r3, [pc, #12]	@ (800e0c8 <HAL_TIM_PWM_MspInit+0x40>)
 800e0ba:	2102      	movs	r1, #2
 800e0bc:	430a      	orrs	r2, r1
 800e0be:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e0c0:	46c0      	nop			@ (mov r8, r8)
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	b002      	add	sp, #8
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	40021000 	.word	0x40021000
 800e0cc:	40000400 	.word	0x40000400

0800e0d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a06      	ldr	r2, [pc, #24]	@ (800e0f8 <HAL_TIM_Base_MspInit+0x28>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d105      	bne.n	800e0ee <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e0e2:	4b06      	ldr	r3, [pc, #24]	@ (800e0fc <HAL_TIM_Base_MspInit+0x2c>)
 800e0e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0e6:	4b05      	ldr	r3, [pc, #20]	@ (800e0fc <HAL_TIM_Base_MspInit+0x2c>)
 800e0e8:	2110      	movs	r1, #16
 800e0ea:	430a      	orrs	r2, r1
 800e0ec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800e0ee:	46c0      	nop			@ (mov r8, r8)
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	b002      	add	sp, #8
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	46c0      	nop			@ (mov r8, r8)
 800e0f8:	40001000 	.word	0x40001000
 800e0fc:	40021000 	.word	0x40021000

0800e100 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e100:	b590      	push	{r4, r7, lr}
 800e102:	b08b      	sub	sp, #44	@ 0x2c
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e108:	2414      	movs	r4, #20
 800e10a:	193b      	adds	r3, r7, r4
 800e10c:	0018      	movs	r0, r3
 800e10e:	2314      	movs	r3, #20
 800e110:	001a      	movs	r2, r3
 800e112:	2100      	movs	r1, #0
 800e114:	f012 f91c 	bl	8020350 <memset>
  if(timHandle->Instance==TIM2)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	2380      	movs	r3, #128	@ 0x80
 800e11e:	05db      	lsls	r3, r3, #23
 800e120:	429a      	cmp	r2, r3
 800e122:	d123      	bne.n	800e16c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e124:	4b27      	ldr	r3, [pc, #156]	@ (800e1c4 <HAL_TIM_MspPostInit+0xc4>)
 800e126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e128:	4b26      	ldr	r3, [pc, #152]	@ (800e1c4 <HAL_TIM_MspPostInit+0xc4>)
 800e12a:	2101      	movs	r1, #1
 800e12c:	430a      	orrs	r2, r1
 800e12e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e130:	4b24      	ldr	r3, [pc, #144]	@ (800e1c4 <HAL_TIM_MspPostInit+0xc4>)
 800e132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e134:	2201      	movs	r2, #1
 800e136:	4013      	ands	r3, r2
 800e138:	613b      	str	r3, [r7, #16]
 800e13a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800e13c:	0021      	movs	r1, r4
 800e13e:	187b      	adds	r3, r7, r1
 800e140:	220d      	movs	r2, #13
 800e142:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e144:	187b      	adds	r3, r7, r1
 800e146:	2202      	movs	r2, #2
 800e148:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e14a:	187b      	adds	r3, r7, r1
 800e14c:	2200      	movs	r2, #0
 800e14e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e150:	187b      	adds	r3, r7, r1
 800e152:	2200      	movs	r2, #0
 800e154:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800e156:	187b      	adds	r3, r7, r1
 800e158:	2202      	movs	r2, #2
 800e15a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e15c:	187a      	adds	r2, r7, r1
 800e15e:	23a0      	movs	r3, #160	@ 0xa0
 800e160:	05db      	lsls	r3, r3, #23
 800e162:	0011      	movs	r1, r2
 800e164:	0018      	movs	r0, r3
 800e166:	f001 ff91 	bl	801008c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e16a:	e027      	b.n	800e1bc <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a15      	ldr	r2, [pc, #84]	@ (800e1c8 <HAL_TIM_MspPostInit+0xc8>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d122      	bne.n	800e1bc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e176:	4b13      	ldr	r3, [pc, #76]	@ (800e1c4 <HAL_TIM_MspPostInit+0xc4>)
 800e178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e17a:	4b12      	ldr	r3, [pc, #72]	@ (800e1c4 <HAL_TIM_MspPostInit+0xc4>)
 800e17c:	2104      	movs	r1, #4
 800e17e:	430a      	orrs	r2, r1
 800e180:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e182:	4b10      	ldr	r3, [pc, #64]	@ (800e1c4 <HAL_TIM_MspPostInit+0xc4>)
 800e184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e186:	2204      	movs	r2, #4
 800e188:	4013      	ands	r3, r2
 800e18a:	60fb      	str	r3, [r7, #12]
 800e18c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800e18e:	2114      	movs	r1, #20
 800e190:	187b      	adds	r3, r7, r1
 800e192:	22e0      	movs	r2, #224	@ 0xe0
 800e194:	0052      	lsls	r2, r2, #1
 800e196:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e198:	187b      	adds	r3, r7, r1
 800e19a:	2202      	movs	r2, #2
 800e19c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e19e:	187b      	adds	r3, r7, r1
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1a4:	187b      	adds	r3, r7, r1
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e1aa:	187b      	adds	r3, r7, r1
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e1b0:	187b      	adds	r3, r7, r1
 800e1b2:	4a06      	ldr	r2, [pc, #24]	@ (800e1cc <HAL_TIM_MspPostInit+0xcc>)
 800e1b4:	0019      	movs	r1, r3
 800e1b6:	0010      	movs	r0, r2
 800e1b8:	f001 ff68 	bl	801008c <HAL_GPIO_Init>
}
 800e1bc:	46c0      	nop			@ (mov r8, r8)
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	b00b      	add	sp, #44	@ 0x2c
 800e1c2:	bd90      	pop	{r4, r7, pc}
 800e1c4:	40021000 	.word	0x40021000
 800e1c8:	40000400 	.word	0x40000400
 800e1cc:	50000800 	.word	0x50000800

0800e1d0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e1d4:	4b17      	ldr	r3, [pc, #92]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e1d6:	4a18      	ldr	r2, [pc, #96]	@ (800e238 <MX_LPUART1_UART_Init+0x68>)
 800e1d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800e1da:	4b16      	ldr	r3, [pc, #88]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e1dc:	22e1      	movs	r2, #225	@ 0xe1
 800e1de:	0252      	lsls	r2, r2, #9
 800e1e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e1e2:	4b14      	ldr	r3, [pc, #80]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e1e8:	4b12      	ldr	r3, [pc, #72]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e1ee:	4b11      	ldr	r3, [pc, #68]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e1f4:	4b0f      	ldr	r3, [pc, #60]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e1f6:	220c      	movs	r2, #12
 800e1f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e1fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e200:	4b0c      	ldr	r3, [pc, #48]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e202:	2200      	movs	r2, #0
 800e204:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800e206:	4b0b      	ldr	r3, [pc, #44]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e208:	2218      	movs	r2, #24
 800e20a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e20c:	4b09      	ldr	r3, [pc, #36]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e20e:	2280      	movs	r2, #128	@ 0x80
 800e210:	0212      	lsls	r2, r2, #8
 800e212:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800e214:	4b07      	ldr	r3, [pc, #28]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e216:	2280      	movs	r2, #128	@ 0x80
 800e218:	0152      	lsls	r2, r2, #5
 800e21a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e21c:	4b05      	ldr	r3, [pc, #20]	@ (800e234 <MX_LPUART1_UART_Init+0x64>)
 800e21e:	0018      	movs	r0, r3
 800e220:	f009 f804 	bl	801722c <HAL_UART_Init>
 800e224:	1e03      	subs	r3, r0, #0
 800e226:	d001      	beq.n	800e22c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e228:	f7fa f884 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e22c:	46c0      	nop			@ (mov r8, r8)
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	46c0      	nop			@ (mov r8, r8)
 800e234:	200020e8 	.word	0x200020e8
 800e238:	40004800 	.word	0x40004800

0800e23c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e240:	4b16      	ldr	r3, [pc, #88]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e242:	4a17      	ldr	r2, [pc, #92]	@ (800e2a0 <MX_USART1_UART_Init+0x64>)
 800e244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e246:	4b15      	ldr	r3, [pc, #84]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e248:	22e1      	movs	r2, #225	@ 0xe1
 800e24a:	0252      	lsls	r2, r2, #9
 800e24c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e24e:	4b13      	ldr	r3, [pc, #76]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e250:	2200      	movs	r2, #0
 800e252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e254:	4b11      	ldr	r3, [pc, #68]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e256:	2200      	movs	r2, #0
 800e258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e25a:	4b10      	ldr	r3, [pc, #64]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e25c:	2200      	movs	r2, #0
 800e25e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e260:	4b0e      	ldr	r3, [pc, #56]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e262:	220c      	movs	r2, #12
 800e264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e266:	4b0d      	ldr	r3, [pc, #52]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e268:	2200      	movs	r2, #0
 800e26a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e26c:	4b0b      	ldr	r3, [pc, #44]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e26e:	2200      	movs	r2, #0
 800e270:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e272:	4b0a      	ldr	r3, [pc, #40]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e274:	2200      	movs	r2, #0
 800e276:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e278:	4b08      	ldr	r3, [pc, #32]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e27a:	2208      	movs	r2, #8
 800e27c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e27e:	4b07      	ldr	r3, [pc, #28]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e280:	2280      	movs	r2, #128	@ 0x80
 800e282:	0212      	lsls	r2, r2, #8
 800e284:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e286:	4b05      	ldr	r3, [pc, #20]	@ (800e29c <MX_USART1_UART_Init+0x60>)
 800e288:	0018      	movs	r0, r3
 800e28a:	f008 ffcf 	bl	801722c <HAL_UART_Init>
 800e28e:	1e03      	subs	r3, r0, #0
 800e290:	d001      	beq.n	800e296 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e292:	f7fa f84f 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e296:	46c0      	nop			@ (mov r8, r8)
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	200021a0 	.word	0x200021a0
 800e2a0:	40013800 	.word	0x40013800

0800e2a4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e2a8:	4b14      	ldr	r3, [pc, #80]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2aa:	4a15      	ldr	r2, [pc, #84]	@ (800e300 <MX_USART4_UART_Init+0x5c>)
 800e2ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e2ae:	4b13      	ldr	r3, [pc, #76]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2b0:	22e1      	movs	r2, #225	@ 0xe1
 800e2b2:	0252      	lsls	r2, r2, #9
 800e2b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e2b6:	4b11      	ldr	r3, [pc, #68]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e2bc:	4b0f      	ldr	r3, [pc, #60]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2be:	2200      	movs	r2, #0
 800e2c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e2c2:	4b0e      	ldr	r3, [pc, #56]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e2c8:	4b0c      	ldr	r3, [pc, #48]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2ca:	220c      	movs	r2, #12
 800e2cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e2d4:	4b09      	ldr	r3, [pc, #36]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e2da:	4b08      	ldr	r3, [pc, #32]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e2e0:	4b06      	ldr	r3, [pc, #24]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e2e6:	4b05      	ldr	r3, [pc, #20]	@ (800e2fc <MX_USART4_UART_Init+0x58>)
 800e2e8:	0018      	movs	r0, r3
 800e2ea:	f008 ff9f 	bl	801722c <HAL_UART_Init>
 800e2ee:	1e03      	subs	r3, r0, #0
 800e2f0:	d001      	beq.n	800e2f6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e2f2:	f7fa f81f 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e2f6:	46c0      	nop			@ (mov r8, r8)
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	20002258 	.word	0x20002258
 800e300:	40004c00 	.word	0x40004c00

0800e304 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e304:	b590      	push	{r4, r7, lr}
 800e306:	b08d      	sub	sp, #52	@ 0x34
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e30c:	241c      	movs	r4, #28
 800e30e:	193b      	adds	r3, r7, r4
 800e310:	0018      	movs	r0, r3
 800e312:	2314      	movs	r3, #20
 800e314:	001a      	movs	r2, r3
 800e316:	2100      	movs	r1, #0
 800e318:	f012 f81a 	bl	8020350 <memset>
  if(uartHandle->Instance==LPUART1)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a8b      	ldr	r2, [pc, #556]	@ (800e550 <HAL_UART_MspInit+0x24c>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d129      	bne.n	800e37a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e326:	4b8b      	ldr	r3, [pc, #556]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e32a:	4b8a      	ldr	r3, [pc, #552]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e32c:	2180      	movs	r1, #128	@ 0x80
 800e32e:	02c9      	lsls	r1, r1, #11
 800e330:	430a      	orrs	r2, r1
 800e332:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e334:	4b87      	ldr	r3, [pc, #540]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e338:	4b86      	ldr	r3, [pc, #536]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e33a:	2104      	movs	r1, #4
 800e33c:	430a      	orrs	r2, r1
 800e33e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e340:	4b84      	ldr	r3, [pc, #528]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e344:	2204      	movs	r2, #4
 800e346:	4013      	ands	r3, r2
 800e348:	61bb      	str	r3, [r7, #24]
 800e34a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e34c:	0021      	movs	r1, r4
 800e34e:	187b      	adds	r3, r7, r1
 800e350:	2203      	movs	r2, #3
 800e352:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e354:	187b      	adds	r3, r7, r1
 800e356:	2202      	movs	r2, #2
 800e358:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e35a:	187b      	adds	r3, r7, r1
 800e35c:	2200      	movs	r2, #0
 800e35e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e360:	187b      	adds	r3, r7, r1
 800e362:	2203      	movs	r2, #3
 800e364:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e366:	187b      	adds	r3, r7, r1
 800e368:	2206      	movs	r2, #6
 800e36a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e36c:	187b      	adds	r3, r7, r1
 800e36e:	4a7a      	ldr	r2, [pc, #488]	@ (800e558 <HAL_UART_MspInit+0x254>)
 800e370:	0019      	movs	r1, r3
 800e372:	0010      	movs	r0, r2
 800e374:	f001 fe8a 	bl	801008c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e378:	e0e5      	b.n	800e546 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a77      	ldr	r2, [pc, #476]	@ (800e55c <HAL_UART_MspInit+0x258>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d133      	bne.n	800e3ec <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e384:	4b73      	ldr	r3, [pc, #460]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e388:	4b72      	ldr	r3, [pc, #456]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e38a:	2180      	movs	r1, #128	@ 0x80
 800e38c:	01c9      	lsls	r1, r1, #7
 800e38e:	430a      	orrs	r2, r1
 800e390:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e392:	4b70      	ldr	r3, [pc, #448]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e396:	4b6f      	ldr	r3, [pc, #444]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e398:	2101      	movs	r1, #1
 800e39a:	430a      	orrs	r2, r1
 800e39c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e39e:	4b6d      	ldr	r3, [pc, #436]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	4013      	ands	r3, r2
 800e3a6:	617b      	str	r3, [r7, #20]
 800e3a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e3aa:	211c      	movs	r1, #28
 800e3ac:	187b      	adds	r3, r7, r1
 800e3ae:	22c0      	movs	r2, #192	@ 0xc0
 800e3b0:	00d2      	lsls	r2, r2, #3
 800e3b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3b4:	187b      	adds	r3, r7, r1
 800e3b6:	2202      	movs	r2, #2
 800e3b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3ba:	187b      	adds	r3, r7, r1
 800e3bc:	2200      	movs	r2, #0
 800e3be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3c0:	187b      	adds	r3, r7, r1
 800e3c2:	2203      	movs	r2, #3
 800e3c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e3c6:	187b      	adds	r3, r7, r1
 800e3c8:	2204      	movs	r2, #4
 800e3ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3cc:	187a      	adds	r2, r7, r1
 800e3ce:	23a0      	movs	r3, #160	@ 0xa0
 800e3d0:	05db      	lsls	r3, r3, #23
 800e3d2:	0011      	movs	r1, r2
 800e3d4:	0018      	movs	r0, r3
 800e3d6:	f001 fe59 	bl	801008c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2100      	movs	r1, #0
 800e3de:	201b      	movs	r0, #27
 800e3e0:	f001 fa02 	bl	800f7e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e3e4:	201b      	movs	r0, #27
 800e3e6:	f001 fa14 	bl	800f812 <HAL_NVIC_EnableIRQ>
}
 800e3ea:	e0ac      	b.n	800e546 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a5b      	ldr	r2, [pc, #364]	@ (800e560 <HAL_UART_MspInit+0x25c>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d000      	beq.n	800e3f8 <HAL_UART_MspInit+0xf4>
 800e3f6:	e0a6      	b.n	800e546 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e3f8:	4b56      	ldr	r3, [pc, #344]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e3fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3fc:	4b55      	ldr	r3, [pc, #340]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e3fe:	2180      	movs	r1, #128	@ 0x80
 800e400:	0309      	lsls	r1, r1, #12
 800e402:	430a      	orrs	r2, r1
 800e404:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e406:	4b53      	ldr	r3, [pc, #332]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e40a:	4b52      	ldr	r3, [pc, #328]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e40c:	2101      	movs	r1, #1
 800e40e:	430a      	orrs	r2, r1
 800e410:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e412:	4b50      	ldr	r3, [pc, #320]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e416:	2201      	movs	r2, #1
 800e418:	4013      	ands	r3, r2
 800e41a:	613b      	str	r3, [r7, #16]
 800e41c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e41e:	4b4d      	ldr	r3, [pc, #308]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e422:	4b4c      	ldr	r3, [pc, #304]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e424:	2104      	movs	r1, #4
 800e426:	430a      	orrs	r2, r1
 800e428:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e42a:	4b4a      	ldr	r3, [pc, #296]	@ (800e554 <HAL_UART_MspInit+0x250>)
 800e42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e42e:	2204      	movs	r2, #4
 800e430:	4013      	ands	r3, r2
 800e432:	60fb      	str	r3, [r7, #12]
 800e434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e436:	241c      	movs	r4, #28
 800e438:	193b      	adds	r3, r7, r4
 800e43a:	2202      	movs	r2, #2
 800e43c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e43e:	193b      	adds	r3, r7, r4
 800e440:	2202      	movs	r2, #2
 800e442:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e444:	193b      	adds	r3, r7, r4
 800e446:	2200      	movs	r2, #0
 800e448:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e44a:	193b      	adds	r3, r7, r4
 800e44c:	2203      	movs	r2, #3
 800e44e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e450:	193b      	adds	r3, r7, r4
 800e452:	2206      	movs	r2, #6
 800e454:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e456:	193a      	adds	r2, r7, r4
 800e458:	23a0      	movs	r3, #160	@ 0xa0
 800e45a:	05db      	lsls	r3, r3, #23
 800e45c:	0011      	movs	r1, r2
 800e45e:	0018      	movs	r0, r3
 800e460:	f001 fe14 	bl	801008c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e464:	0021      	movs	r1, r4
 800e466:	187b      	adds	r3, r7, r1
 800e468:	2280      	movs	r2, #128	@ 0x80
 800e46a:	00d2      	lsls	r2, r2, #3
 800e46c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e46e:	187b      	adds	r3, r7, r1
 800e470:	2202      	movs	r2, #2
 800e472:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e474:	187b      	adds	r3, r7, r1
 800e476:	2200      	movs	r2, #0
 800e478:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e47a:	187b      	adds	r3, r7, r1
 800e47c:	2203      	movs	r2, #3
 800e47e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e480:	187b      	adds	r3, r7, r1
 800e482:	2206      	movs	r2, #6
 800e484:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e486:	187b      	adds	r3, r7, r1
 800e488:	4a33      	ldr	r2, [pc, #204]	@ (800e558 <HAL_UART_MspInit+0x254>)
 800e48a:	0019      	movs	r1, r3
 800e48c:	0010      	movs	r0, r2
 800e48e:	f001 fdfd 	bl	801008c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e492:	4b34      	ldr	r3, [pc, #208]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e494:	4a34      	ldr	r2, [pc, #208]	@ (800e568 <HAL_UART_MspInit+0x264>)
 800e496:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e498:	4b32      	ldr	r3, [pc, #200]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e49a:	220c      	movs	r2, #12
 800e49c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e49e:	4b31      	ldr	r3, [pc, #196]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e4a4:	4b2f      	ldr	r3, [pc, #188]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e4aa:	4b2e      	ldr	r3, [pc, #184]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4ac:	2280      	movs	r2, #128	@ 0x80
 800e4ae:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e4b0:	4b2c      	ldr	r3, [pc, #176]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e4b6:	4b2b      	ldr	r3, [pc, #172]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e4bc:	4b29      	ldr	r3, [pc, #164]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4be:	2220      	movs	r2, #32
 800e4c0:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e4c2:	4b28      	ldr	r3, [pc, #160]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e4c8:	4b26      	ldr	r3, [pc, #152]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4ca:	0018      	movs	r0, r3
 800e4cc:	f001 f9c2 	bl	800f854 <HAL_DMA_Init>
 800e4d0:	1e03      	subs	r3, r0, #0
 800e4d2:	d001      	beq.n	800e4d8 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e4d4:	f7f9 ff2e 	bl	8008334 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4a22      	ldr	r2, [pc, #136]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800e4de:	4b21      	ldr	r3, [pc, #132]	@ (800e564 <HAL_UART_MspInit+0x260>)
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e4e4:	4b21      	ldr	r3, [pc, #132]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e4e6:	4a22      	ldr	r2, [pc, #136]	@ (800e570 <HAL_UART_MspInit+0x26c>)
 800e4e8:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e4ea:	4b20      	ldr	r3, [pc, #128]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e4ec:	220c      	movs	r2, #12
 800e4ee:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e4f0:	4b1e      	ldr	r3, [pc, #120]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e4f2:	2210      	movs	r2, #16
 800e4f4:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e4f6:	4b1d      	ldr	r3, [pc, #116]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e4fc:	4b1b      	ldr	r3, [pc, #108]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e4fe:	2280      	movs	r2, #128	@ 0x80
 800e500:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e502:	4b1a      	ldr	r3, [pc, #104]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e504:	2200      	movs	r2, #0
 800e506:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e508:	4b18      	ldr	r3, [pc, #96]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e50e:	4b17      	ldr	r3, [pc, #92]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e510:	2200      	movs	r2, #0
 800e512:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e514:	4b15      	ldr	r3, [pc, #84]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e516:	2200      	movs	r2, #0
 800e518:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e51a:	4b14      	ldr	r3, [pc, #80]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e51c:	0018      	movs	r0, r3
 800e51e:	f001 f999 	bl	800f854 <HAL_DMA_Init>
 800e522:	1e03      	subs	r3, r0, #0
 800e524:	d001      	beq.n	800e52a <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e526:	f7f9 ff05 	bl	8008334 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4a0f      	ldr	r2, [pc, #60]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e52e:	671a      	str	r2, [r3, #112]	@ 0x70
 800e530:	4b0e      	ldr	r3, [pc, #56]	@ (800e56c <HAL_UART_MspInit+0x268>)
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e536:	2200      	movs	r2, #0
 800e538:	2100      	movs	r1, #0
 800e53a:	200e      	movs	r0, #14
 800e53c:	f001 f954 	bl	800f7e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e540:	200e      	movs	r0, #14
 800e542:	f001 f966 	bl	800f812 <HAL_NVIC_EnableIRQ>
}
 800e546:	46c0      	nop			@ (mov r8, r8)
 800e548:	46bd      	mov	sp, r7
 800e54a:	b00d      	add	sp, #52	@ 0x34
 800e54c:	bd90      	pop	{r4, r7, pc}
 800e54e:	46c0      	nop			@ (mov r8, r8)
 800e550:	40004800 	.word	0x40004800
 800e554:	40021000 	.word	0x40021000
 800e558:	50000800 	.word	0x50000800
 800e55c:	40013800 	.word	0x40013800
 800e560:	40004c00 	.word	0x40004c00
 800e564:	20002310 	.word	0x20002310
 800e568:	4002006c 	.word	0x4002006c
 800e56c:	20002358 	.word	0x20002358
 800e570:	40020080 	.word	0x40020080

0800e574 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e57c:	f000 fc90 	bl	800eea0 <HAL_GetTick>
 800e580:	0003      	movs	r3, r0
 800e582:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e584:	4b1c      	ldr	r3, [pc, #112]	@ (800e5f8 <TimestampIsReached+0x84>)
 800e586:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e588:	697a      	ldr	r2, [r7, #20]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d307      	bcc.n	800e5a0 <TimestampIsReached+0x2c>
 800e590:	697a      	ldr	r2, [r7, #20]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	1ad3      	subs	r3, r2, r3
 800e596:	693a      	ldr	r2, [r7, #16]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d901      	bls.n	800e5a0 <TimestampIsReached+0x2c>
 800e59c:	2201      	movs	r2, #1
 800e59e:	e000      	b.n	800e5a2 <TimestampIsReached+0x2e>
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	230f      	movs	r3, #15
 800e5a4:	18fb      	adds	r3, r7, r3
 800e5a6:	701a      	strb	r2, [r3, #0]
 800e5a8:	781a      	ldrb	r2, [r3, #0]
 800e5aa:	2101      	movs	r1, #1
 800e5ac:	400a      	ands	r2, r1
 800e5ae:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e5b0:	697a      	ldr	r2, [r7, #20]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d207      	bcs.n	800e5c8 <TimestampIsReached+0x54>
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	1ad3      	subs	r3, r2, r3
 800e5be:	693a      	ldr	r2, [r7, #16]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d201      	bcs.n	800e5c8 <TimestampIsReached+0x54>
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	e000      	b.n	800e5ca <TimestampIsReached+0x56>
 800e5c8:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e5ca:	200e      	movs	r0, #14
 800e5cc:	183b      	adds	r3, r7, r0
 800e5ce:	701a      	strb	r2, [r3, #0]
 800e5d0:	781a      	ldrb	r2, [r3, #0]
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	400a      	ands	r2, r1
 800e5d6:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e5d8:	230f      	movs	r3, #15
 800e5da:	18fb      	adds	r3, r7, r3
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d103      	bne.n	800e5ea <TimestampIsReached+0x76>
 800e5e2:	183b      	adds	r3, r7, r0
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d001      	beq.n	800e5ee <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e000      	b.n	800e5f0 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e5ee:	2300      	movs	r3, #0
}
 800e5f0:	0018      	movs	r0, r3
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	b006      	add	sp, #24
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	7fffffff 	.word	0x7fffffff

0800e5fc <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e604:	f000 fc4c 	bl	800eea0 <HAL_GetTick>
 800e608:	0002      	movs	r2, r0
 800e60a:	4904      	ldr	r1, [pc, #16]	@ (800e61c <AddTimestamp+0x20>)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	0018      	movs	r0, r3
 800e610:	f011 fd5a 	bl	80200c8 <siprintf>
}
 800e614:	46c0      	nop			@ (mov r8, r8)
 800e616:	46bd      	mov	sp, r7
 800e618:	b002      	add	sp, #8
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	08025138 	.word	0x08025138

0800e620 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e620:	b40c      	push	{r2, r3}
 800e622:	b5b0      	push	{r4, r5, r7, lr}
 800e624:	b0a4      	sub	sp, #144	@ 0x90
 800e626:	af00      	add	r7, sp, #0
 800e628:	0002      	movs	r2, r0
 800e62a:	6039      	str	r1, [r7, #0]
 800e62c:	1dfb      	adds	r3, r7, #7
 800e62e:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e630:	4b23      	ldr	r3, [pc, #140]	@ (800e6c0 <CreateLine+0xa0>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	1dfa      	adds	r2, r7, #7
 800e636:	7812      	ldrb	r2, [r2, #0]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d839      	bhi.n	800e6b0 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e63c:	683a      	ldr	r2, [r7, #0]
 800e63e:	4921      	ldr	r1, [pc, #132]	@ (800e6c4 <CreateLine+0xa4>)
 800e640:	240c      	movs	r4, #12
 800e642:	193b      	adds	r3, r7, r4
 800e644:	0018      	movs	r0, r3
 800e646:	f011 fd3f 	bl	80200c8 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e64a:	4b1d      	ldr	r3, [pc, #116]	@ (800e6c0 <CreateLine+0xa0>)
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d909      	bls.n	800e666 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e652:	193b      	adds	r3, r7, r4
 800e654:	0018      	movs	r0, r3
 800e656:	f7f1 fd89 	bl	800016c <strlen>
 800e65a:	0002      	movs	r2, r0
 800e65c:	193b      	adds	r3, r7, r4
 800e65e:	189b      	adds	r3, r3, r2
 800e660:	0018      	movs	r0, r3
 800e662:	f7ff ffcb 	bl	800e5fc <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e666:	240c      	movs	r4, #12
 800e668:	193b      	adds	r3, r7, r4
 800e66a:	0018      	movs	r0, r3
 800e66c:	f7f1 fd7e 	bl	800016c <strlen>
 800e670:	0003      	movs	r3, r0
 800e672:	218c      	movs	r1, #140	@ 0x8c
 800e674:	187a      	adds	r2, r7, r1
 800e676:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e678:	239c      	movs	r3, #156	@ 0x9c
 800e67a:	2508      	movs	r5, #8
 800e67c:	195b      	adds	r3, r3, r5
 800e67e:	19db      	adds	r3, r3, r7
 800e680:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e682:	193a      	adds	r2, r7, r4
 800e684:	187b      	adds	r3, r7, r1
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	18d0      	adds	r0, r2, r3
 800e68a:	187b      	adds	r3, r7, r1
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2280      	movs	r2, #128	@ 0x80
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	0019      	movs	r1, r3
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	2298      	movs	r2, #152	@ 0x98
 800e698:	1952      	adds	r2, r2, r5
 800e69a:	19d2      	adds	r2, r2, r7
 800e69c:	6812      	ldr	r2, [r2, #0]
 800e69e:	f011 fdab 	bl	80201f8 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e6a2:	193a      	adds	r2, r7, r4
 800e6a4:	4b08      	ldr	r3, [pc, #32]	@ (800e6c8 <CreateLine+0xa8>)
 800e6a6:	0011      	movs	r1, r2
 800e6a8:	0018      	movs	r0, r3
 800e6aa:	f011 fc9d 	bl	801ffe8 <iprintf>
 800e6ae:	e000      	b.n	800e6b2 <CreateLine+0x92>
    return;
 800e6b0:	46c0      	nop			@ (mov r8, r8)
}
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	b024      	add	sp, #144	@ 0x90
 800e6b6:	bcb0      	pop	{r4, r5, r7}
 800e6b8:	bc08      	pop	{r3}
 800e6ba:	b002      	add	sp, #8
 800e6bc:	4718      	bx	r3
 800e6be:	46c0      	nop			@ (mov r8, r8)
 800e6c0:	200000d4 	.word	0x200000d4
 800e6c4:	08025144 	.word	0x08025144
 800e6c8:	08025148 	.word	0x08025148

0800e6cc <_write>:

int _write(int fd, void *buf, size_t count) {
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	68b9      	ldr	r1, [r7, #8]
 800e6de:	4804      	ldr	r0, [pc, #16]	@ (800e6f0 <_write+0x24>)
 800e6e0:	2364      	movs	r3, #100	@ 0x64
 800e6e2:	f008 fe09 	bl	80172f8 <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800e6e6:	687b      	ldr	r3, [r7, #4]
}
 800e6e8:	0018      	movs	r0, r3
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	b004      	add	sp, #16
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	200021a0 	.word	0x200021a0

0800e6f4 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	0002      	movs	r2, r0
 800e6fc:	1dfb      	adds	r3, r7, #7
 800e6fe:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e700:	4b03      	ldr	r3, [pc, #12]	@ (800e710 <SetVerboseLevel+0x1c>)
 800e702:	1dfa      	adds	r2, r7, #7
 800e704:	7812      	ldrb	r2, [r2, #0]
 800e706:	701a      	strb	r2, [r3, #0]
}
 800e708:	46c0      	nop			@ (mov r8, r8)
 800e70a:	46bd      	mov	sp, r7
 800e70c:	b002      	add	sp, #8
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	200000d4 	.word	0x200000d4

0800e714 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e714:	b580      	push	{r7, lr}
 800e716:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e718:	4b02      	ldr	r3, [pc, #8]	@ (800e724 <GetVerboseLevel+0x10>)
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	0018      	movs	r0, r3
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	46c0      	nop			@ (mov r8, r8)
 800e724:	200000d4 	.word	0x200000d4

0800e728 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e72e:	4a0f      	ldr	r2, [pc, #60]	@ (800e76c <BinaryReleaseInfo+0x44>)
 800e730:	4b0f      	ldr	r3, [pc, #60]	@ (800e770 <BinaryReleaseInfo+0x48>)
 800e732:	0019      	movs	r1, r3
 800e734:	2002      	movs	r0, #2
 800e736:	f7ff ff73 	bl	800e620 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800e73a:	480e      	ldr	r0, [pc, #56]	@ (800e774 <BinaryReleaseInfo+0x4c>)
 800e73c:	4a0e      	ldr	r2, [pc, #56]	@ (800e778 <BinaryReleaseInfo+0x50>)
 800e73e:	490c      	ldr	r1, [pc, #48]	@ (800e770 <BinaryReleaseInfo+0x48>)
 800e740:	4b0e      	ldr	r3, [pc, #56]	@ (800e77c <BinaryReleaseInfo+0x54>)
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	0003      	movs	r3, r0
 800e746:	2002      	movs	r0, #2
 800e748:	f7ff ff6a 	bl	800e620 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800e74c:	4b0c      	ldr	r3, [pc, #48]	@ (800e780 <BinaryReleaseInfo+0x58>)
 800e74e:	4a0d      	ldr	r2, [pc, #52]	@ (800e784 <BinaryReleaseInfo+0x5c>)
 800e750:	4907      	ldr	r1, [pc, #28]	@ (800e770 <BinaryReleaseInfo+0x48>)
 800e752:	2002      	movs	r0, #2
 800e754:	f7ff ff64 	bl	800e620 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800e758:	4b0b      	ldr	r3, [pc, #44]	@ (800e788 <BinaryReleaseInfo+0x60>)
 800e75a:	4a0c      	ldr	r2, [pc, #48]	@ (800e78c <BinaryReleaseInfo+0x64>)
 800e75c:	4904      	ldr	r1, [pc, #16]	@ (800e770 <BinaryReleaseInfo+0x48>)
 800e75e:	2002      	movs	r0, #2
 800e760:	f7ff ff5e 	bl	800e620 <CreateLine>
}
 800e764:	46c0      	nop			@ (mov r8, r8)
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	46c0      	nop			@ (mov r8, r8)
 800e76c:	08025150 	.word	0x08025150
 800e770:	0802517c 	.word	0x0802517c
 800e774:	08025180 	.word	0x08025180
 800e778:	0802518c 	.word	0x0802518c
 800e77c:	080251a0 	.word	0x080251a0
 800e780:	080251ac 	.word	0x080251ac
 800e784:	080251b8 	.word	0x080251b8
 800e788:	080251c0 	.word	0x080251c0
 800e78c:	080251c8 	.word	0x080251c8

0800e790 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	68f9      	ldr	r1, [r7, #12]
 800e7a2:	4803      	ldr	r0, [pc, #12]	@ (800e7b0 <errorHandler+0x20>)
 800e7a4:	f011 fc20 	bl	801ffe8 <iprintf>
//    while (true)
//    {
//    }
}
 800e7a8:	46c0      	nop			@ (mov r8, r8)
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	b004      	add	sp, #16
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	080251e0 	.word	0x080251e0

0800e7b4 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e7b4:	b590      	push	{r4, r7, lr}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6039      	str	r1, [r7, #0]
 800e7bc:	0011      	movs	r1, r2
 800e7be:	1dfb      	adds	r3, r7, #7
 800e7c0:	1c02      	adds	r2, r0, #0
 800e7c2:	701a      	strb	r2, [r3, #0]
 800e7c4:	1dbb      	adds	r3, r7, #6
 800e7c6:	1c0a      	adds	r2, r1, #0
 800e7c8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800e7ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f4 <ReadRegister+0x40>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00a      	beq.n	800e7e8 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800e7d2:	4b08      	ldr	r3, [pc, #32]	@ (800e7f4 <ReadRegister+0x40>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	1dba      	adds	r2, r7, #6
 800e7d8:	7814      	ldrb	r4, [r2, #0]
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	1dfa      	adds	r2, r7, #7
 800e7de:	7810      	ldrb	r0, [r2, #0]
 800e7e0:	0022      	movs	r2, r4
 800e7e2:	4798      	blx	r3
 800e7e4:	0003      	movs	r3, r0
 800e7e6:	e000      	b.n	800e7ea <ReadRegister+0x36>
	}
	return false;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	0018      	movs	r0, r3
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	b003      	add	sp, #12
 800e7f0:	bd90      	pop	{r4, r7, pc}
 800e7f2:	46c0      	nop			@ (mov r8, r8)
 800e7f4:	200023a8 	.word	0x200023a8

0800e7f8 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e7f8:	b590      	push	{r4, r7, lr}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6039      	str	r1, [r7, #0]
 800e800:	0011      	movs	r1, r2
 800e802:	1dfb      	adds	r3, r7, #7
 800e804:	1c02      	adds	r2, r0, #0
 800e806:	701a      	strb	r2, [r3, #0]
 800e808:	1dbb      	adds	r3, r7, #6
 800e80a:	1c0a      	adds	r2, r1, #0
 800e80c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e80e:	4b0a      	ldr	r3, [pc, #40]	@ (800e838 <WriteRegister+0x40>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00a      	beq.n	800e82c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800e816:	4b08      	ldr	r3, [pc, #32]	@ (800e838 <WriteRegister+0x40>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	1dba      	adds	r2, r7, #6
 800e81c:	7814      	ldrb	r4, [r2, #0]
 800e81e:	6839      	ldr	r1, [r7, #0]
 800e820:	1dfa      	adds	r2, r7, #7
 800e822:	7810      	ldrb	r0, [r2, #0]
 800e824:	0022      	movs	r2, r4
 800e826:	4798      	blx	r3
 800e828:	0003      	movs	r3, r0
 800e82a:	e000      	b.n	800e82e <WriteRegister+0x36>
  }
  return false;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	0018      	movs	r0, r3
 800e830:	46bd      	mov	sp, r7
 800e832:	b003      	add	sp, #12
 800e834:	bd90      	pop	{r4, r7, pc}
 800e836:	46c0      	nop			@ (mov r8, r8)
 800e838:	200023ac 	.word	0x200023ac

0800e83c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	000a      	movs	r2, r1
 800e846:	1cfb      	adds	r3, r7, #3
 800e848:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e84a:	230f      	movs	r3, #15
 800e84c:	18fb      	adds	r3, r7, r3
 800e84e:	22ff      	movs	r2, #255	@ 0xff
 800e850:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e852:	230e      	movs	r3, #14
 800e854:	18fb      	adds	r3, r7, r3
 800e856:	2200      	movs	r2, #0
 800e858:	701a      	strb	r2, [r3, #0]
 800e85a:	e037      	b.n	800e8cc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e85c:	230e      	movs	r3, #14
 800e85e:	18fb      	adds	r3, r7, r3
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	18d3      	adds	r3, r2, r3
 800e866:	7819      	ldrb	r1, [r3, #0]
 800e868:	220f      	movs	r2, #15
 800e86a:	18bb      	adds	r3, r7, r2
 800e86c:	18ba      	adds	r2, r7, r2
 800e86e:	7812      	ldrb	r2, [r2, #0]
 800e870:	404a      	eors	r2, r1
 800e872:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e874:	230d      	movs	r3, #13
 800e876:	18fb      	adds	r3, r7, r3
 800e878:	2200      	movs	r2, #0
 800e87a:	701a      	strb	r2, [r3, #0]
 800e87c:	e01b      	b.n	800e8b6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e87e:	210f      	movs	r1, #15
 800e880:	187b      	adds	r3, r7, r1
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	b25b      	sxtb	r3, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	da09      	bge.n	800e89e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e88a:	187b      	adds	r3, r7, r1
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	005b      	lsls	r3, r3, #1
 800e890:	b25b      	sxtb	r3, r3
 800e892:	2231      	movs	r2, #49	@ 0x31
 800e894:	4053      	eors	r3, r2
 800e896:	b25a      	sxtb	r2, r3
 800e898:	187b      	adds	r3, r7, r1
 800e89a:	701a      	strb	r2, [r3, #0]
 800e89c:	e005      	b.n	800e8aa <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e89e:	230f      	movs	r3, #15
 800e8a0:	18fa      	adds	r2, r7, r3
 800e8a2:	18fb      	adds	r3, r7, r3
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	18db      	adds	r3, r3, r3
 800e8a8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e8aa:	210d      	movs	r1, #13
 800e8ac:	187b      	adds	r3, r7, r1
 800e8ae:	781a      	ldrb	r2, [r3, #0]
 800e8b0:	187b      	adds	r3, r7, r1
 800e8b2:	3201      	adds	r2, #1
 800e8b4:	701a      	strb	r2, [r3, #0]
 800e8b6:	230d      	movs	r3, #13
 800e8b8:	18fb      	adds	r3, r7, r3
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	2b07      	cmp	r3, #7
 800e8be:	d9de      	bls.n	800e87e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e8c0:	210e      	movs	r1, #14
 800e8c2:	187b      	adds	r3, r7, r1
 800e8c4:	781a      	ldrb	r2, [r3, #0]
 800e8c6:	187b      	adds	r3, r7, r1
 800e8c8:	3201      	adds	r2, #1
 800e8ca:	701a      	strb	r2, [r3, #0]
 800e8cc:	230e      	movs	r3, #14
 800e8ce:	18fa      	adds	r2, r7, r3
 800e8d0:	1cfb      	adds	r3, r7, #3
 800e8d2:	7812      	ldrb	r2, [r2, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d3c0      	bcc.n	800e85c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e8da:	230f      	movs	r3, #15
 800e8dc:	18fb      	adds	r3, r7, r3
 800e8de:	781b      	ldrb	r3, [r3, #0]
}
 800e8e0:	0018      	movs	r0, r3
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	b004      	add	sp, #16
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e91c <HIDS_Init+0x34>)
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e8f8:	4b09      	ldr	r3, [pc, #36]	@ (800e920 <HIDS_Init+0x38>)
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e8fe:	4b09      	ldr	r3, [pc, #36]	@ (800e924 <HIDS_Init+0x3c>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	0018      	movs	r0, r3
 800e904:	f000 f840 	bl	800e988 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e908:	4b07      	ldr	r3, [pc, #28]	@ (800e928 <HIDS_Init+0x40>)
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	0018      	movs	r0, r3
 800e90e:	f000 f82b 	bl	800e968 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e912:	46c0      	nop			@ (mov r8, r8)
 800e914:	46bd      	mov	sp, r7
 800e916:	b002      	add	sp, #8
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	46c0      	nop			@ (mov r8, r8)
 800e91c:	200023a8 	.word	0x200023a8
 800e920:	200023ac 	.word	0x200023ac
 800e924:	200000d6 	.word	0x200000d6
 800e928:	200000d5 	.word	0x200000d5

0800e92c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e92c:	b580      	push	{r7, lr}
 800e92e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e930:	f000 fab6 	bl	800eea0 <HAL_GetTick>
 800e934:	0002      	movs	r2, r0
 800e936:	4b08      	ldr	r3, [pc, #32]	@ (800e958 <HIDS_StartMeasurement+0x2c>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	18d2      	adds	r2, r2, r3
 800e93c:	4b07      	ldr	r3, [pc, #28]	@ (800e95c <HIDS_StartMeasurement+0x30>)
 800e93e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e940:	4b07      	ldr	r3, [pc, #28]	@ (800e960 <HIDS_StartMeasurement+0x34>)
 800e942:	2201      	movs	r2, #1
 800e944:	0019      	movs	r1, r3
 800e946:	2044      	movs	r0, #68	@ 0x44
 800e948:	f7ff ff56 	bl	800e7f8 <WriteRegister>
  MeasurementDone = false;
 800e94c:	4b05      	ldr	r3, [pc, #20]	@ (800e964 <HIDS_StartMeasurement+0x38>)
 800e94e:	2200      	movs	r2, #0
 800e950:	701a      	strb	r2, [r3, #0]
}
 800e952:	46c0      	nop			@ (mov r8, r8)
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	200000dc 	.word	0x200000dc
 800e95c:	200000d8 	.word	0x200000d8
 800e960:	200000d6 	.word	0x200000d6
 800e964:	200023be 	.word	0x200023be

0800e968 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	0002      	movs	r2, r0
 800e970:	1dfb      	adds	r3, r7, #7
 800e972:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e974:	4b03      	ldr	r3, [pc, #12]	@ (800e984 <HIDS_SetHeaterMode+0x1c>)
 800e976:	1dfa      	adds	r2, r7, #7
 800e978:	7812      	ldrb	r2, [r2, #0]
 800e97a:	701a      	strb	r2, [r3, #0]
}
 800e97c:	46c0      	nop			@ (mov r8, r8)
 800e97e:	46bd      	mov	sp, r7
 800e980:	b002      	add	sp, #8
 800e982:	bd80      	pop	{r7, pc}
 800e984:	200000d5 	.word	0x200000d5

0800e988 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	0002      	movs	r2, r0
 800e990:	1dfb      	adds	r3, r7, #7
 800e992:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e994:	4b03      	ldr	r3, [pc, #12]	@ (800e9a4 <HIDS_SetMeasurementMode+0x1c>)
 800e996:	1dfa      	adds	r2, r7, #7
 800e998:	7812      	ldrb	r2, [r2, #0]
 800e99a:	701a      	strb	r2, [r3, #0]
}
 800e99c:	46c0      	nop			@ (mov r8, r8)
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	b002      	add	sp, #8
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	200000d6 	.word	0x200000d6

0800e9a8 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e9b0:	f000 fa76 	bl	800eea0 <HAL_GetTick>
 800e9b4:	0002      	movs	r2, r0
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	18d2      	adds	r2, r2, r3
 800e9ba:	4b03      	ldr	r3, [pc, #12]	@ (800e9c8 <setHIDSTimeStamp+0x20>)
 800e9bc:	601a      	str	r2, [r3, #0]
}
 800e9be:	46c0      	nop			@ (mov r8, r8)
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	b002      	add	sp, #8
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	46c0      	nop			@ (mov r8, r8)
 800e9c8:	200023c0 	.word	0x200023c0

0800e9cc <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800e9cc:	b590      	push	{r4, r7, lr}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	781a      	ldrb	r2, [r3, #0]
 800e9d8:	210c      	movs	r1, #12
 800e9da:	187b      	adds	r3, r7, r1
 800e9dc:	701a      	strb	r2, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	785a      	ldrb	r2, [r3, #1]
 800e9e2:	187b      	adds	r3, r7, r1
 800e9e4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800e9e6:	240f      	movs	r4, #15
 800e9e8:	193b      	adds	r3, r7, r4
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	7892      	ldrb	r2, [r2, #2]
 800e9ee:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800e9f0:	187b      	adds	r3, r7, r1
 800e9f2:	2102      	movs	r1, #2
 800e9f4:	0018      	movs	r0, r3
 800e9f6:	f7ff ff21 	bl	800e83c <CalculateCRC>
 800e9fa:	0003      	movs	r3, r0
 800e9fc:	001a      	movs	r2, r3
 800e9fe:	193b      	adds	r3, r7, r4
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d007      	beq.n	800ea16 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800ea06:	4a1a      	ldr	r2, [pc, #104]	@ (800ea70 <CheckCRC+0xa4>)
 800ea08:	4b1a      	ldr	r3, [pc, #104]	@ (800ea74 <CheckCRC+0xa8>)
 800ea0a:	0019      	movs	r1, r3
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	f7ff fe07 	bl	800e620 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800ea12:	2300      	movs	r3, #0
 800ea14:	e027      	b.n	800ea66 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	78da      	ldrb	r2, [r3, #3]
 800ea1a:	2108      	movs	r1, #8
 800ea1c:	187b      	adds	r3, r7, r1
 800ea1e:	701a      	strb	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	791a      	ldrb	r2, [r3, #4]
 800ea24:	187b      	adds	r3, r7, r1
 800ea26:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800ea28:	240e      	movs	r4, #14
 800ea2a:	193b      	adds	r3, r7, r4
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	7952      	ldrb	r2, [r2, #5]
 800ea30:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800ea32:	187b      	adds	r3, r7, r1
 800ea34:	2102      	movs	r1, #2
 800ea36:	0018      	movs	r0, r3
 800ea38:	f7ff ff00 	bl	800e83c <CalculateCRC>
 800ea3c:	0003      	movs	r3, r0
 800ea3e:	001a      	movs	r2, r3
 800ea40:	193b      	adds	r3, r7, r4
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d00d      	beq.n	800ea64 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800ea48:	4a0b      	ldr	r2, [pc, #44]	@ (800ea78 <CheckCRC+0xac>)
 800ea4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ea74 <CheckCRC+0xa8>)
 800ea4c:	0019      	movs	r1, r3
 800ea4e:	2001      	movs	r0, #1
 800ea50:	f7ff fde6 	bl	800e620 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800ea54:	4a09      	ldr	r2, [pc, #36]	@ (800ea7c <CheckCRC+0xb0>)
 800ea56:	4b0a      	ldr	r3, [pc, #40]	@ (800ea80 <CheckCRC+0xb4>)
 800ea58:	217c      	movs	r1, #124	@ 0x7c
 800ea5a:	0018      	movs	r0, r3
 800ea5c:	f7ff fe98 	bl	800e790 <errorHandler>
		return false;
 800ea60:	2300      	movs	r3, #0
 800ea62:	e000      	b.n	800ea66 <CheckCRC+0x9a>
	}
	return true;
 800ea64:	2301      	movs	r3, #1
}
 800ea66:	0018      	movs	r0, r3
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	b005      	add	sp, #20
 800ea6c:	bd90      	pop	{r4, r7, pc}
 800ea6e:	46c0      	nop			@ (mov r8, r8)
 800ea70:	0802522c 	.word	0x0802522c
 800ea74:	08025254 	.word	0x08025254
 800ea78:	08025258 	.word	0x08025258
 800ea7c:	08025284 	.word	0x08025284
 800ea80:	0802581c 	.word	0x0802581c

0800ea84 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800ea8a:	1dbb      	adds	r3, r7, #6
 800ea8c:	2289      	movs	r2, #137	@ 0x89
 800ea8e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800ea90:	1dbb      	adds	r3, r7, #6
 800ea92:	2201      	movs	r2, #1
 800ea94:	0019      	movs	r1, r3
 800ea96:	2044      	movs	r0, #68	@ 0x44
 800ea98:	f7ff feae 	bl	800e7f8 <WriteRegister>
	HAL_Delay(30);
 800ea9c:	201e      	movs	r0, #30
 800ea9e:	f000 fa09 	bl	800eeb4 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800eaa2:	4b14      	ldr	r3, [pc, #80]	@ (800eaf4 <HIDS_DeviceConnected+0x70>)
 800eaa4:	2206      	movs	r2, #6
 800eaa6:	0019      	movs	r1, r3
 800eaa8:	2044      	movs	r0, #68	@ 0x44
 800eaaa:	f7ff fe83 	bl	800e7b4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800eaae:	1dfb      	adds	r3, r7, #7
 800eab0:	2200      	movs	r2, #0
 800eab2:	701a      	strb	r2, [r3, #0]
 800eab4:	e011      	b.n	800eada <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800eab6:	1dfb      	adds	r3, r7, #7
 800eab8:	7818      	ldrb	r0, [r3, #0]
 800eaba:	1dfb      	adds	r3, r7, #7
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	4a0d      	ldr	r2, [pc, #52]	@ (800eaf4 <HIDS_DeviceConnected+0x70>)
 800eac0:	5cd3      	ldrb	r3, [r2, r3]
 800eac2:	4a0d      	ldr	r2, [pc, #52]	@ (800eaf8 <HIDS_DeviceConnected+0x74>)
 800eac4:	490d      	ldr	r1, [pc, #52]	@ (800eafc <HIDS_DeviceConnected+0x78>)
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	0003      	movs	r3, r0
 800eaca:	2002      	movs	r0, #2
 800eacc:	f7ff fda8 	bl	800e620 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800ead0:	1dfb      	adds	r3, r7, #7
 800ead2:	781a      	ldrb	r2, [r3, #0]
 800ead4:	1dfb      	adds	r3, r7, #7
 800ead6:	3201      	adds	r2, #1
 800ead8:	701a      	strb	r2, [r3, #0]
 800eada:	1dfb      	adds	r3, r7, #7
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	2b05      	cmp	r3, #5
 800eae0:	d9e9      	bls.n	800eab6 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800eae2:	4b04      	ldr	r3, [pc, #16]	@ (800eaf4 <HIDS_DeviceConnected+0x70>)
 800eae4:	0018      	movs	r0, r3
 800eae6:	f7ff ff71 	bl	800e9cc <CheckCRC>
 800eaea:	0003      	movs	r3, r0
}
 800eaec:	0018      	movs	r0, r3
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	b002      	add	sp, #8
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	200023b0 	.word	0x200023b0
 800eaf8:	0802529c 	.word	0x0802529c
 800eafc:	08025228 	.word	0x08025228

0800eb00 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800eb00:	b580      	push	{r7, lr}
 800eb02:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800eb04:	4b04      	ldr	r3, [pc, #16]	@ (800eb18 <HIDS_MeasurementReady+0x18>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	0018      	movs	r0, r3
 800eb0a:	f7ff fd33 	bl	800e574 <TimestampIsReached>
 800eb0e:	0003      	movs	r3, r0
}
 800eb10:	0018      	movs	r0, r3
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	46c0      	nop			@ (mov r8, r8)
 800eb18:	200000d8 	.word	0x200000d8

0800eb1c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800eb26:	4b41      	ldr	r3, [pc, #260]	@ (800ec2c <HIDS_GetMeasurementValues+0x110>)
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <HIDS_GetMeasurementValues+0x16>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e077      	b.n	800ec22 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 800eb32:	f7ff ffe5 	bl	800eb00 <HIDS_MeasurementReady>
 800eb36:	0003      	movs	r3, r0
 800eb38:	001a      	movs	r2, r3
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	4053      	eors	r3, r2
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d001      	beq.n	800eb48 <HIDS_GetMeasurementValues+0x2c>
 800eb44:	2300      	movs	r3, #0
 800eb46:	e06c      	b.n	800ec22 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800eb48:	4b39      	ldr	r3, [pc, #228]	@ (800ec30 <HIDS_GetMeasurementValues+0x114>)
 800eb4a:	2206      	movs	r2, #6
 800eb4c:	0019      	movs	r1, r3
 800eb4e:	2044      	movs	r0, #68	@ 0x44
 800eb50:	f7ff fe30 	bl	800e7b4 <ReadRegister>
 800eb54:	0003      	movs	r3, r0
 800eb56:	001a      	movs	r2, r3
 800eb58:	2301      	movs	r3, #1
 800eb5a:	4053      	eors	r3, r2
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d005      	beq.n	800eb6e <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800eb62:	4a34      	ldr	r2, [pc, #208]	@ (800ec34 <HIDS_GetMeasurementValues+0x118>)
 800eb64:	4b34      	ldr	r3, [pc, #208]	@ (800ec38 <HIDS_GetMeasurementValues+0x11c>)
 800eb66:	0019      	movs	r1, r3
 800eb68:	2001      	movs	r0, #1
 800eb6a:	f7ff fd59 	bl	800e620 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800eb6e:	4b30      	ldr	r3, [pc, #192]	@ (800ec30 <HIDS_GetMeasurementValues+0x114>)
 800eb70:	0018      	movs	r0, r3
 800eb72:	f7ff ff2b 	bl	800e9cc <CheckCRC>
 800eb76:	0003      	movs	r3, r0
 800eb78:	001a      	movs	r2, r3
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	4053      	eors	r3, r2
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d001      	beq.n	800eb88 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800eb84:	2300      	movs	r3, #0
 800eb86:	e04c      	b.n	800ec22 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800eb88:	4b29      	ldr	r3, [pc, #164]	@ (800ec30 <HIDS_GetMeasurementValues+0x114>)
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	021b      	lsls	r3, r3, #8
 800eb8e:	4a28      	ldr	r2, [pc, #160]	@ (800ec30 <HIDS_GetMeasurementValues+0x114>)
 800eb90:	7852      	ldrb	r2, [r2, #1]
 800eb92:	4313      	orrs	r3, r2
 800eb94:	22af      	movs	r2, #175	@ 0xaf
 800eb96:	4353      	muls	r3, r2
 800eb98:	0018      	movs	r0, r3
 800eb9a:	f7f4 fc11 	bl	80033c0 <__aeabi_i2d>
 800eb9e:	2200      	movs	r2, #0
 800eba0:	4b26      	ldr	r3, [pc, #152]	@ (800ec3c <HIDS_GetMeasurementValues+0x120>)
 800eba2:	f7f3 f907 	bl	8001db4 <__aeabi_ddiv>
 800eba6:	0002      	movs	r2, r0
 800eba8:	000b      	movs	r3, r1
 800ebaa:	0010      	movs	r0, r2
 800ebac:	0019      	movs	r1, r3
 800ebae:	f7f4 fca1 	bl	80034f4 <__aeabi_d2f>
 800ebb2:	1c03      	adds	r3, r0, #0
 800ebb4:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800ebb6:	4922      	ldr	r1, [pc, #136]	@ (800ec40 <HIDS_GetMeasurementValues+0x124>)
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f7f2 fb2f 	bl	800121c <__aeabi_fsub>
 800ebbe:	1c03      	adds	r3, r0, #0
 800ebc0:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ebc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ec30 <HIDS_GetMeasurementValues+0x114>)
 800ebc4:	78db      	ldrb	r3, [r3, #3]
 800ebc6:	021b      	lsls	r3, r3, #8
 800ebc8:	4a19      	ldr	r2, [pc, #100]	@ (800ec30 <HIDS_GetMeasurementValues+0x114>)
 800ebca:	7912      	ldrb	r2, [r2, #4]
 800ebcc:	431a      	orrs	r2, r3
 800ebce:	0013      	movs	r3, r2
 800ebd0:	015b      	lsls	r3, r3, #5
 800ebd2:	1a9b      	subs	r3, r3, r2
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	189b      	adds	r3, r3, r2
 800ebd8:	0018      	movs	r0, r3
 800ebda:	f7f4 fbf1 	bl	80033c0 <__aeabi_i2d>
 800ebde:	2200      	movs	r2, #0
 800ebe0:	4b16      	ldr	r3, [pc, #88]	@ (800ec3c <HIDS_GetMeasurementValues+0x120>)
 800ebe2:	f7f3 f8e7 	bl	8001db4 <__aeabi_ddiv>
 800ebe6:	0002      	movs	r2, r0
 800ebe8:	000b      	movs	r3, r1
 800ebea:	0010      	movs	r0, r2
 800ebec:	0019      	movs	r1, r3
 800ebee:	f7f4 fc81 	bl	80034f4 <__aeabi_d2f>
 800ebf2:	1c03      	adds	r3, r0, #0
 800ebf4:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800ebf6:	4913      	ldr	r1, [pc, #76]	@ (800ec44 <HIDS_GetMeasurementValues+0x128>)
 800ebf8:	68b8      	ldr	r0, [r7, #8]
 800ebfa:	f7f2 fb0f 	bl	800121c <__aeabi_fsub>
 800ebfe:	1c03      	adds	r3, r0, #0
 800ec00:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	0011      	movs	r1, r2
 800ec14:	0018      	movs	r0, r3
 800ec16:	f7fd f953 	bl	800bec0 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 800ec1a:	4b04      	ldr	r3, [pc, #16]	@ (800ec2c <HIDS_GetMeasurementValues+0x110>)
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800ec20:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800ec22:	0018      	movs	r0, r3
 800ec24:	46bd      	mov	sp, r7
 800ec26:	b004      	add	sp, #16
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	46c0      	nop			@ (mov r8, r8)
 800ec2c:	200023be 	.word	0x200023be
 800ec30:	200023b8 	.word	0x200023b8
 800ec34:	080252bc 	.word	0x080252bc
 800ec38:	08025254 	.word	0x08025254
 800ec3c:	40efffe0 	.word	0x40efffe0
 800ec40:	42340000 	.word	0x42340000
 800ec44:	40c00000 	.word	0x40c00000

0800ec48 <ResetHIDSresults>:

void ResetHIDSresults() {
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	af00      	add	r7, sp, #0
  humid = 0.0;
 800ec4c:	4b04      	ldr	r3, [pc, #16]	@ (800ec60 <ResetHIDSresults+0x18>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800ec52:	4b04      	ldr	r3, [pc, #16]	@ (800ec64 <ResetHIDSresults+0x1c>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	601a      	str	r2, [r3, #0]
}
 800ec58:	46c0      	nop			@ (mov r8, r8)
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	46c0      	nop			@ (mov r8, r8)
 800ec60:	200023a0 	.word	0x200023a0
 800ec64:	200023a4 	.word	0x200023a4

0800ec68 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800ec68:	b5b0      	push	{r4, r5, r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800ec6e:	4b3b      	ldr	r3, [pc, #236]	@ (800ed5c <HIDS_Upkeep+0xf4>)
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	2b06      	cmp	r3, #6
 800ec74:	d865      	bhi.n	800ed42 <HIDS_Upkeep+0xda>
 800ec76:	009a      	lsls	r2, r3, #2
 800ec78:	4b39      	ldr	r3, [pc, #228]	@ (800ed60 <HIDS_Upkeep+0xf8>)
 800ec7a:	18d3      	adds	r3, r2, r3
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800ec80:	4a38      	ldr	r2, [pc, #224]	@ (800ed64 <HIDS_Upkeep+0xfc>)
 800ec82:	4b39      	ldr	r3, [pc, #228]	@ (800ed68 <HIDS_Upkeep+0x100>)
 800ec84:	0019      	movs	r1, r3
 800ec86:	2003      	movs	r0, #3
 800ec88:	f7ff fcca 	bl	800e620 <CreateLine>
      break;
 800ec8c:	e060      	b.n	800ed50 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800ec8e:	f7ff ffdb 	bl	800ec48 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800ec92:	4b32      	ldr	r3, [pc, #200]	@ (800ed5c <HIDS_Upkeep+0xf4>)
 800ec94:	2201      	movs	r2, #1
 800ec96:	701a      	strb	r2, [r3, #0]
      break;
 800ec98:	e05a      	b.n	800ed50 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800ec9a:	f7fe fb3d 	bl	800d318 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800ec9e:	f7ff fe45 	bl	800e92c <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800eca2:	4b2e      	ldr	r3, [pc, #184]	@ (800ed5c <HIDS_Upkeep+0xf4>)
 800eca4:	2202      	movs	r2, #2
 800eca6:	701a      	strb	r2, [r3, #0]
      break;
 800eca8:	e052      	b.n	800ed50 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800ecaa:	4a30      	ldr	r2, [pc, #192]	@ (800ed6c <HIDS_Upkeep+0x104>)
 800ecac:	4b30      	ldr	r3, [pc, #192]	@ (800ed70 <HIDS_Upkeep+0x108>)
 800ecae:	0011      	movs	r1, r2
 800ecb0:	0018      	movs	r0, r3
 800ecb2:	f7ff ff33 	bl	800eb1c <HIDS_GetMeasurementValues>
 800ecb6:	1e03      	subs	r3, r0, #0
 800ecb8:	d047      	beq.n	800ed4a <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800ecba:	4b28      	ldr	r3, [pc, #160]	@ (800ed5c <HIDS_Upkeep+0xf4>)
 800ecbc:	2203      	movs	r2, #3
 800ecbe:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ecc0:	e043      	b.n	800ed4a <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800ecc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ed70 <HIDS_Upkeep+0x108>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	1c18      	adds	r0, r3, #0
 800ecc8:	f7f4 fbcc 	bl	8003464 <__aeabi_f2d>
 800eccc:	0004      	movs	r4, r0
 800ecce:	000d      	movs	r5, r1
 800ecd0:	4b26      	ldr	r3, [pc, #152]	@ (800ed6c <HIDS_Upkeep+0x104>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	1c18      	adds	r0, r3, #0
 800ecd6:	f7f4 fbc5 	bl	8003464 <__aeabi_f2d>
 800ecda:	0002      	movs	r2, r0
 800ecdc:	000b      	movs	r3, r1
 800ecde:	4825      	ldr	r0, [pc, #148]	@ (800ed74 <HIDS_Upkeep+0x10c>)
 800ece0:	4921      	ldr	r1, [pc, #132]	@ (800ed68 <HIDS_Upkeep+0x100>)
 800ece2:	9202      	str	r2, [sp, #8]
 800ece4:	9303      	str	r3, [sp, #12]
 800ece6:	9400      	str	r4, [sp, #0]
 800ece8:	9501      	str	r5, [sp, #4]
 800ecea:	0002      	movs	r2, r0
 800ecec:	2003      	movs	r0, #3
 800ecee:	f7ff fc97 	bl	800e620 <CreateLine>
      setHIDS(temp, humid);
 800ecf2:	4b1e      	ldr	r3, [pc, #120]	@ (800ed6c <HIDS_Upkeep+0x104>)
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	4b1e      	ldr	r3, [pc, #120]	@ (800ed70 <HIDS_Upkeep+0x108>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	1c19      	adds	r1, r3, #0
 800ecfc:	1c10      	adds	r0, r2, #0
 800ecfe:	f7f4 fdf9 	bl	80038f4 <setHIDS>
      ResetMeasurementIndicator();
 800ed02:	f7fe fb21 	bl	800d348 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800ed06:	f000 f8cb 	bl	800eea0 <HAL_GetTick>
 800ed0a:	0004      	movs	r4, r0
 800ed0c:	f7fe fd3c 	bl	800d788 <powerCheck>
 800ed10:	0003      	movs	r3, r0
 800ed12:	2b04      	cmp	r3, #4
 800ed14:	d101      	bne.n	800ed1a <HIDS_Upkeep+0xb2>
 800ed16:	4b18      	ldr	r3, [pc, #96]	@ (800ed78 <HIDS_Upkeep+0x110>)
 800ed18:	e001      	b.n	800ed1e <HIDS_Upkeep+0xb6>
 800ed1a:	23fa      	movs	r3, #250	@ 0xfa
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	191a      	adds	r2, r3, r4
 800ed20:	4b16      	ldr	r3, [pc, #88]	@ (800ed7c <HIDS_Upkeep+0x114>)
 800ed22:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800ed24:	4b0d      	ldr	r3, [pc, #52]	@ (800ed5c <HIDS_Upkeep+0xf4>)
 800ed26:	2206      	movs	r2, #6
 800ed28:	701a      	strb	r2, [r3, #0]
      break;
 800ed2a:	e011      	b.n	800ed50 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800ed2c:	4b13      	ldr	r3, [pc, #76]	@ (800ed7c <HIDS_Upkeep+0x114>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	0018      	movs	r0, r3
 800ed32:	f7ff fc1f 	bl	800e574 <TimestampIsReached>
 800ed36:	1e03      	subs	r3, r0, #0
 800ed38:	d009      	beq.n	800ed4e <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800ed3a:	4b08      	ldr	r3, [pc, #32]	@ (800ed5c <HIDS_Upkeep+0xf4>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ed40:	e005      	b.n	800ed4e <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800ed42:	4b06      	ldr	r3, [pc, #24]	@ (800ed5c <HIDS_Upkeep+0xf4>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	701a      	strb	r2, [r3, #0]
      break;
 800ed48:	e002      	b.n	800ed50 <HIDS_Upkeep+0xe8>
      break;
 800ed4a:	46c0      	nop			@ (mov r8, r8)
 800ed4c:	e000      	b.n	800ed50 <HIDS_Upkeep+0xe8>
      break;
 800ed4e:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800ed50:	4b02      	ldr	r3, [pc, #8]	@ (800ed5c <HIDS_Upkeep+0xf4>)
 800ed52:	781b      	ldrb	r3, [r3, #0]
}
 800ed54:	0018      	movs	r0, r3
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bdb0      	pop	{r4, r5, r7, pc}
 800ed5a:	46c0      	nop			@ (mov r8, r8)
 800ed5c:	200023c4 	.word	0x200023c4
 800ed60:	08025800 	.word	0x08025800
 800ed64:	080252f0 	.word	0x080252f0
 800ed68:	08025324 	.word	0x08025324
 800ed6c:	200023a4 	.word	0x200023a4
 800ed70:	200023a0 	.word	0x200023a0
 800ed74:	08025328 	.word	0x08025328
 800ed78:	00002710 	.word	0x00002710
 800ed7c:	200023c0 	.word	0x200023c0

0800ed80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800ed80:	480d      	ldr	r0, [pc, #52]	@ (800edb8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800ed82:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ed84:	f7ff f84c 	bl	800de20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ed88:	480c      	ldr	r0, [pc, #48]	@ (800edbc <LoopForever+0x6>)
  ldr r1, =_edata
 800ed8a:	490d      	ldr	r1, [pc, #52]	@ (800edc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ed8c:	4a0d      	ldr	r2, [pc, #52]	@ (800edc4 <LoopForever+0xe>)
  movs r3, #0
 800ed8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ed90:	e002      	b.n	800ed98 <LoopCopyDataInit>

0800ed92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ed92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ed94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ed96:	3304      	adds	r3, #4

0800ed98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ed98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ed9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ed9c:	d3f9      	bcc.n	800ed92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ed9e:	4a0a      	ldr	r2, [pc, #40]	@ (800edc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800eda0:	4c0a      	ldr	r4, [pc, #40]	@ (800edcc <LoopForever+0x16>)
  movs r3, #0
 800eda2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eda4:	e001      	b.n	800edaa <LoopFillZerobss>

0800eda6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800eda6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800eda8:	3204      	adds	r2, #4

0800edaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800edaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800edac:	d3fb      	bcc.n	800eda6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800edae:	f011 fb79 	bl	80204a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800edb2:	f7f8 ff6d 	bl	8007c90 <main>

0800edb6 <LoopForever>:

LoopForever:
    b LoopForever
 800edb6:	e7fe      	b.n	800edb6 <LoopForever>
   ldr   r0, =_estack
 800edb8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800edbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800edc0:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 800edc4:	080261a0 	.word	0x080261a0
  ldr r2, =_sbss
 800edc8:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 800edcc:	200037cc 	.word	0x200037cc

0800edd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800edd0:	e7fe      	b.n	800edd0 <ADC1_COMP_IRQHandler>
	...

0800edd4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800edda:	1dfb      	adds	r3, r7, #7
 800eddc:	2200      	movs	r2, #0
 800edde:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ede0:	4b0b      	ldr	r3, [pc, #44]	@ (800ee10 <HAL_Init+0x3c>)
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	4b0a      	ldr	r3, [pc, #40]	@ (800ee10 <HAL_Init+0x3c>)
 800ede6:	2140      	movs	r1, #64	@ 0x40
 800ede8:	430a      	orrs	r2, r1
 800edea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800edec:	2003      	movs	r0, #3
 800edee:	f000 f811 	bl	800ee14 <HAL_InitTick>
 800edf2:	1e03      	subs	r3, r0, #0
 800edf4:	d003      	beq.n	800edfe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800edf6:	1dfb      	adds	r3, r7, #7
 800edf8:	2201      	movs	r2, #1
 800edfa:	701a      	strb	r2, [r3, #0]
 800edfc:	e001      	b.n	800ee02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800edfe:	f7fe fec3 	bl	800db88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ee02:	1dfb      	adds	r3, r7, #7
 800ee04:	781b      	ldrb	r3, [r3, #0]
}
 800ee06:	0018      	movs	r0, r3
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	b002      	add	sp, #8
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	46c0      	nop			@ (mov r8, r8)
 800ee10:	40022000 	.word	0x40022000

0800ee14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ee14:	b590      	push	{r4, r7, lr}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ee1c:	4b14      	ldr	r3, [pc, #80]	@ (800ee70 <HAL_InitTick+0x5c>)
 800ee1e:	681c      	ldr	r4, [r3, #0]
 800ee20:	4b14      	ldr	r3, [pc, #80]	@ (800ee74 <HAL_InitTick+0x60>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	0019      	movs	r1, r3
 800ee26:	23fa      	movs	r3, #250	@ 0xfa
 800ee28:	0098      	lsls	r0, r3, #2
 800ee2a:	f7f1 f9bb 	bl	80001a4 <__udivsi3>
 800ee2e:	0003      	movs	r3, r0
 800ee30:	0019      	movs	r1, r3
 800ee32:	0020      	movs	r0, r4
 800ee34:	f7f1 f9b6 	bl	80001a4 <__udivsi3>
 800ee38:	0003      	movs	r3, r0
 800ee3a:	0018      	movs	r0, r3
 800ee3c:	f000 fcfd 	bl	800f83a <HAL_SYSTICK_Config>
 800ee40:	1e03      	subs	r3, r0, #0
 800ee42:	d001      	beq.n	800ee48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800ee44:	2301      	movs	r3, #1
 800ee46:	e00f      	b.n	800ee68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2b03      	cmp	r3, #3
 800ee4c:	d80b      	bhi.n	800ee66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ee4e:	6879      	ldr	r1, [r7, #4]
 800ee50:	2301      	movs	r3, #1
 800ee52:	425b      	negs	r3, r3
 800ee54:	2200      	movs	r2, #0
 800ee56:	0018      	movs	r0, r3
 800ee58:	f000 fcc6 	bl	800f7e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ee5c:	4b06      	ldr	r3, [pc, #24]	@ (800ee78 <HAL_InitTick+0x64>)
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ee62:	2300      	movs	r3, #0
 800ee64:	e000      	b.n	800ee68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800ee66:	2301      	movs	r3, #1
}
 800ee68:	0018      	movs	r0, r3
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	b003      	add	sp, #12
 800ee6e:	bd90      	pop	{r4, r7, pc}
 800ee70:	200000d0 	.word	0x200000d0
 800ee74:	200000e4 	.word	0x200000e4
 800ee78:	200000e0 	.word	0x200000e0

0800ee7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ee80:	4b05      	ldr	r3, [pc, #20]	@ (800ee98 <HAL_IncTick+0x1c>)
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	001a      	movs	r2, r3
 800ee86:	4b05      	ldr	r3, [pc, #20]	@ (800ee9c <HAL_IncTick+0x20>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	18d2      	adds	r2, r2, r3
 800ee8c:	4b03      	ldr	r3, [pc, #12]	@ (800ee9c <HAL_IncTick+0x20>)
 800ee8e:	601a      	str	r2, [r3, #0]
}
 800ee90:	46c0      	nop			@ (mov r8, r8)
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	46c0      	nop			@ (mov r8, r8)
 800ee98:	200000e4 	.word	0x200000e4
 800ee9c:	200023c8 	.word	0x200023c8

0800eea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	af00      	add	r7, sp, #0
  return uwTick;
 800eea4:	4b02      	ldr	r3, [pc, #8]	@ (800eeb0 <HAL_GetTick+0x10>)
 800eea6:	681b      	ldr	r3, [r3, #0]
}
 800eea8:	0018      	movs	r0, r3
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	46c0      	nop			@ (mov r8, r8)
 800eeb0:	200023c8 	.word	0x200023c8

0800eeb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800eebc:	f7ff fff0 	bl	800eea0 <HAL_GetTick>
 800eec0:	0003      	movs	r3, r0
 800eec2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	3301      	adds	r3, #1
 800eecc:	d005      	beq.n	800eeda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800eece:	4b0a      	ldr	r3, [pc, #40]	@ (800eef8 <HAL_Delay+0x44>)
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	001a      	movs	r2, r3
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	189b      	adds	r3, r3, r2
 800eed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800eeda:	46c0      	nop			@ (mov r8, r8)
 800eedc:	f7ff ffe0 	bl	800eea0 <HAL_GetTick>
 800eee0:	0002      	movs	r2, r0
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	1ad3      	subs	r3, r2, r3
 800eee6:	68fa      	ldr	r2, [r7, #12]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d8f7      	bhi.n	800eedc <HAL_Delay+0x28>
  {
  }
}
 800eeec:	46c0      	nop			@ (mov r8, r8)
 800eeee:	46c0      	nop			@ (mov r8, r8)
 800eef0:	46bd      	mov	sp, r7
 800eef2:	b004      	add	sp, #16
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	46c0      	nop			@ (mov r8, r8)
 800eef8:	200000e4 	.word	0x200000e4

0800eefc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ef00:	4b04      	ldr	r3, [pc, #16]	@ (800ef14 <HAL_SuspendTick+0x18>)
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	4b03      	ldr	r3, [pc, #12]	@ (800ef14 <HAL_SuspendTick+0x18>)
 800ef06:	2102      	movs	r1, #2
 800ef08:	438a      	bics	r2, r1
 800ef0a:	601a      	str	r2, [r3, #0]
}
 800ef0c:	46c0      	nop			@ (mov r8, r8)
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	46c0      	nop			@ (mov r8, r8)
 800ef14:	e000e010 	.word	0xe000e010

0800ef18 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800ef1c:	4b04      	ldr	r3, [pc, #16]	@ (800ef30 <HAL_ResumeTick+0x18>)
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	4b03      	ldr	r3, [pc, #12]	@ (800ef30 <HAL_ResumeTick+0x18>)
 800ef22:	2102      	movs	r1, #2
 800ef24:	430a      	orrs	r2, r1
 800ef26:	601a      	str	r2, [r3, #0]
}
 800ef28:	46c0      	nop			@ (mov r8, r8)
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	46c0      	nop			@ (mov r8, r8)
 800ef30:	e000e010 	.word	0xe000e010

0800ef34 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800ef38:	4b02      	ldr	r3, [pc, #8]	@ (800ef44 <HAL_GetUIDw0+0x10>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
}
 800ef3c:	0018      	movs	r0, r3
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	46c0      	nop			@ (mov r8, r8)
 800ef44:	1ff80050 	.word	0x1ff80050

0800ef48 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800ef4c:	4b02      	ldr	r3, [pc, #8]	@ (800ef58 <HAL_GetUIDw1+0x10>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
}
 800ef50:	0018      	movs	r0, r3
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	46c0      	nop			@ (mov r8, r8)
 800ef58:	1ff80054 	.word	0x1ff80054

0800ef5c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800ef60:	4b02      	ldr	r3, [pc, #8]	@ (800ef6c <HAL_GetUIDw2+0x10>)
 800ef62:	681b      	ldr	r3, [r3, #0]
}
 800ef64:	0018      	movs	r0, r3
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	46c0      	nop			@ (mov r8, r8)
 800ef6c:	1ff80064 	.word	0x1ff80064

0800ef70 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d101      	bne.n	800ef82 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e159      	b.n	800f236 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d10a      	bne.n	800efa0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2250      	movs	r2, #80	@ 0x50
 800ef94:	2100      	movs	r1, #0
 800ef96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	0018      	movs	r0, r3
 800ef9c:	f7f8 f900 	bl	80071a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efa4:	2210      	movs	r2, #16
 800efa6:	4013      	ands	r3, r2
 800efa8:	2b10      	cmp	r3, #16
 800efaa:	d005      	beq.n	800efb8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	2204      	movs	r2, #4
 800efb4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800efb6:	d00b      	beq.n	800efd0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efbc:	2210      	movs	r2, #16
 800efbe:	431a      	orrs	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2250      	movs	r2, #80	@ 0x50
 800efc8:	2100      	movs	r1, #0
 800efca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800efcc:	2301      	movs	r3, #1
 800efce:	e132      	b.n	800f236 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efd4:	4a9a      	ldr	r2, [pc, #616]	@ (800f240 <HAL_ADC_Init+0x2d0>)
 800efd6:	4013      	ands	r3, r2
 800efd8:	2202      	movs	r2, #2
 800efda:	431a      	orrs	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	2203      	movs	r2, #3
 800efe8:	4013      	ands	r3, r2
 800efea:	2b01      	cmp	r3, #1
 800efec:	d108      	bne.n	800f000 <HAL_ADC_Init+0x90>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2201      	movs	r2, #1
 800eff6:	4013      	ands	r3, r2
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d101      	bne.n	800f000 <HAL_ADC_Init+0x90>
 800effc:	2301      	movs	r3, #1
 800effe:	e000      	b.n	800f002 <HAL_ADC_Init+0x92>
 800f000:	2300      	movs	r3, #0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d149      	bne.n	800f09a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	685a      	ldr	r2, [r3, #4]
 800f00a:	23c0      	movs	r3, #192	@ 0xc0
 800f00c:	061b      	lsls	r3, r3, #24
 800f00e:	429a      	cmp	r2, r3
 800f010:	d00b      	beq.n	800f02a <HAL_ADC_Init+0xba>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	685a      	ldr	r2, [r3, #4]
 800f016:	2380      	movs	r3, #128	@ 0x80
 800f018:	05db      	lsls	r3, r3, #23
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d005      	beq.n	800f02a <HAL_ADC_Init+0xba>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685a      	ldr	r2, [r3, #4]
 800f022:	2380      	movs	r3, #128	@ 0x80
 800f024:	061b      	lsls	r3, r3, #24
 800f026:	429a      	cmp	r2, r3
 800f028:	d111      	bne.n	800f04e <HAL_ADC_Init+0xde>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	691a      	ldr	r2, [r3, #16]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	0092      	lsls	r2, r2, #2
 800f036:	0892      	lsrs	r2, r2, #2
 800f038:	611a      	str	r2, [r3, #16]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	6919      	ldr	r1, [r3, #16]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685a      	ldr	r2, [r3, #4]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	430a      	orrs	r2, r1
 800f04a:	611a      	str	r2, [r3, #16]
 800f04c:	e014      	b.n	800f078 <HAL_ADC_Init+0x108>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	691a      	ldr	r2, [r3, #16]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	0092      	lsls	r2, r2, #2
 800f05a:	0892      	lsrs	r2, r2, #2
 800f05c:	611a      	str	r2, [r3, #16]
 800f05e:	4b79      	ldr	r3, [pc, #484]	@ (800f244 <HAL_ADC_Init+0x2d4>)
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	4b78      	ldr	r3, [pc, #480]	@ (800f244 <HAL_ADC_Init+0x2d4>)
 800f064:	4978      	ldr	r1, [pc, #480]	@ (800f248 <HAL_ADC_Init+0x2d8>)
 800f066:	400a      	ands	r2, r1
 800f068:	601a      	str	r2, [r3, #0]
 800f06a:	4b76      	ldr	r3, [pc, #472]	@ (800f244 <HAL_ADC_Init+0x2d4>)
 800f06c:	6819      	ldr	r1, [r3, #0]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	685a      	ldr	r2, [r3, #4]
 800f072:	4b74      	ldr	r3, [pc, #464]	@ (800f244 <HAL_ADC_Init+0x2d4>)
 800f074:	430a      	orrs	r2, r1
 800f076:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68da      	ldr	r2, [r3, #12]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2118      	movs	r1, #24
 800f084:	438a      	bics	r2, r1
 800f086:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68d9      	ldr	r1, [r3, #12]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	689a      	ldr	r2, [r3, #8]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	430a      	orrs	r2, r1
 800f098:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800f09a:	4b6a      	ldr	r3, [pc, #424]	@ (800f244 <HAL_ADC_Init+0x2d4>)
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	4b69      	ldr	r3, [pc, #420]	@ (800f244 <HAL_ADC_Init+0x2d4>)
 800f0a0:	496a      	ldr	r1, [pc, #424]	@ (800f24c <HAL_ADC_Init+0x2dc>)
 800f0a2:	400a      	ands	r2, r1
 800f0a4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800f0a6:	4b67      	ldr	r3, [pc, #412]	@ (800f244 <HAL_ADC_Init+0x2d4>)
 800f0a8:	6819      	ldr	r1, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0ae:	065a      	lsls	r2, r3, #25
 800f0b0:	4b64      	ldr	r3, [pc, #400]	@ (800f244 <HAL_ADC_Init+0x2d4>)
 800f0b2:	430a      	orrs	r2, r1
 800f0b4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	689a      	ldr	r2, [r3, #8]
 800f0bc:	2380      	movs	r3, #128	@ 0x80
 800f0be:	055b      	lsls	r3, r3, #21
 800f0c0:	4013      	ands	r3, r2
 800f0c2:	d108      	bne.n	800f0d6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	689a      	ldr	r2, [r3, #8]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2180      	movs	r1, #128	@ 0x80
 800f0d0:	0549      	lsls	r1, r1, #21
 800f0d2:	430a      	orrs	r2, r1
 800f0d4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	68da      	ldr	r2, [r3, #12]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	495b      	ldr	r1, [pc, #364]	@ (800f250 <HAL_ADC_Init+0x2e0>)
 800f0e2:	400a      	ands	r2, r1
 800f0e4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68d9      	ldr	r1, [r3, #12]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	d101      	bne.n	800f0fc <HAL_ADC_Init+0x18c>
 800f0f8:	2304      	movs	r3, #4
 800f0fa:	e000      	b.n	800f0fe <HAL_ADC_Init+0x18e>
 800f0fc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f0fe:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2020      	movs	r0, #32
 800f104:	5c1b      	ldrb	r3, [r3, r0]
 800f106:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f108:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	202c      	movs	r0, #44	@ 0x2c
 800f10e:	5c1b      	ldrb	r3, [r3, r0]
 800f110:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f112:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f118:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	699b      	ldr	r3, [r3, #24]
 800f11e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800f120:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	69db      	ldr	r3, [r3, #28]
 800f126:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f128:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	430a      	orrs	r2, r1
 800f130:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f136:	23c2      	movs	r3, #194	@ 0xc2
 800f138:	33ff      	adds	r3, #255	@ 0xff
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d00b      	beq.n	800f156 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	68d9      	ldr	r1, [r3, #12]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f14c:	431a      	orrs	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	430a      	orrs	r2, r1
 800f154:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2221      	movs	r2, #33	@ 0x21
 800f15a:	5c9b      	ldrb	r3, [r3, r2]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d11a      	bne.n	800f196 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2220      	movs	r2, #32
 800f164:	5c9b      	ldrb	r3, [r3, r2]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d109      	bne.n	800f17e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	68da      	ldr	r2, [r3, #12]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	2180      	movs	r1, #128	@ 0x80
 800f176:	0249      	lsls	r1, r1, #9
 800f178:	430a      	orrs	r2, r1
 800f17a:	60da      	str	r2, [r3, #12]
 800f17c:	e00b      	b.n	800f196 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f182:	2220      	movs	r2, #32
 800f184:	431a      	orrs	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f18e:	2201      	movs	r2, #1
 800f190:	431a      	orrs	r2, r3
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d11f      	bne.n	800f1de <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	691a      	ldr	r2, [r3, #16]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	492a      	ldr	r1, [pc, #168]	@ (800f254 <HAL_ADC_Init+0x2e4>)
 800f1aa:	400a      	ands	r2, r1
 800f1ac:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	6919      	ldr	r1, [r3, #16]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f1bc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800f1c2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	430a      	orrs	r2, r1
 800f1ca:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	691a      	ldr	r2, [r3, #16]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2101      	movs	r1, #1
 800f1d8:	430a      	orrs	r2, r1
 800f1da:	611a      	str	r2, [r3, #16]
 800f1dc:	e00e      	b.n	800f1fc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	4013      	ands	r3, r2
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d107      	bne.n	800f1fc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	691a      	ldr	r2, [r3, #16]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2101      	movs	r1, #1
 800f1f8:	438a      	bics	r2, r1
 800f1fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	695a      	ldr	r2, [r3, #20]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2107      	movs	r1, #7
 800f208:	438a      	bics	r2, r1
 800f20a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6959      	ldr	r1, [r3, #20]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	430a      	orrs	r2, r1
 800f21c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2200      	movs	r2, #0
 800f222:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f228:	2203      	movs	r2, #3
 800f22a:	4393      	bics	r3, r2
 800f22c:	2201      	movs	r2, #1
 800f22e:	431a      	orrs	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f234:	2300      	movs	r3, #0
}
 800f236:	0018      	movs	r0, r3
 800f238:	46bd      	mov	sp, r7
 800f23a:	b002      	add	sp, #8
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	46c0      	nop			@ (mov r8, r8)
 800f240:	fffffefd 	.word	0xfffffefd
 800f244:	40012708 	.word	0x40012708
 800f248:	ffc3ffff 	.word	0xffc3ffff
 800f24c:	fdffffff 	.word	0xfdffffff
 800f250:	fffe0219 	.word	0xfffe0219
 800f254:	fffffc03 	.word	0xfffffc03

0800f258 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f258:	b590      	push	{r4, r7, lr}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f260:	230f      	movs	r3, #15
 800f262:	18fb      	adds	r3, r7, r3
 800f264:	2200      	movs	r2, #0
 800f266:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	2204      	movs	r2, #4
 800f270:	4013      	ands	r3, r2
 800f272:	d138      	bne.n	800f2e6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2250      	movs	r2, #80	@ 0x50
 800f278:	5c9b      	ldrb	r3, [r3, r2]
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d101      	bne.n	800f282 <HAL_ADC_Start+0x2a>
 800f27e:	2302      	movs	r3, #2
 800f280:	e038      	b.n	800f2f4 <HAL_ADC_Start+0x9c>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2250      	movs	r2, #80	@ 0x50
 800f286:	2101      	movs	r1, #1
 800f288:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	69db      	ldr	r3, [r3, #28]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d007      	beq.n	800f2a2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f292:	230f      	movs	r3, #15
 800f294:	18fc      	adds	r4, r7, r3
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	0018      	movs	r0, r3
 800f29a:	f000 f95f 	bl	800f55c <ADC_Enable>
 800f29e:	0003      	movs	r3, r0
 800f2a0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f2a2:	230f      	movs	r3, #15
 800f2a4:	18fb      	adds	r3, r7, r3
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d120      	bne.n	800f2ee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2b0:	4a12      	ldr	r2, [pc, #72]	@ (800f2fc <HAL_ADC_Start+0xa4>)
 800f2b2:	4013      	ands	r3, r2
 800f2b4:	2280      	movs	r2, #128	@ 0x80
 800f2b6:	0052      	lsls	r2, r2, #1
 800f2b8:	431a      	orrs	r2, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2250      	movs	r2, #80	@ 0x50
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	221c      	movs	r2, #28
 800f2d2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	689a      	ldr	r2, [r3, #8]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2104      	movs	r1, #4
 800f2e0:	430a      	orrs	r2, r1
 800f2e2:	609a      	str	r2, [r3, #8]
 800f2e4:	e003      	b.n	800f2ee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f2e6:	230f      	movs	r3, #15
 800f2e8:	18fb      	adds	r3, r7, r3
 800f2ea:	2202      	movs	r2, #2
 800f2ec:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f2ee:	230f      	movs	r3, #15
 800f2f0:	18fb      	adds	r3, r7, r3
 800f2f2:	781b      	ldrb	r3, [r3, #0]
}
 800f2f4:	0018      	movs	r0, r3
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	b005      	add	sp, #20
 800f2fa:	bd90      	pop	{r4, r7, pc}
 800f2fc:	fffff0fe 	.word	0xfffff0fe

0800f300 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f30a:	2300      	movs	r3, #0
 800f30c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f30e:	2300      	movs	r3, #0
 800f310:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	695b      	ldr	r3, [r3, #20]
 800f316:	2b08      	cmp	r3, #8
 800f318:	d102      	bne.n	800f320 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f31a:	2308      	movs	r3, #8
 800f31c:	60fb      	str	r3, [r7, #12]
 800f31e:	e014      	b.n	800f34a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	2201      	movs	r2, #1
 800f328:	4013      	ands	r3, r2
 800f32a:	2b01      	cmp	r3, #1
 800f32c:	d10b      	bne.n	800f346 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f332:	2220      	movs	r2, #32
 800f334:	431a      	orrs	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2250      	movs	r2, #80	@ 0x50
 800f33e:	2100      	movs	r1, #0
 800f340:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f342:	2301      	movs	r3, #1
 800f344:	e072      	b.n	800f42c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f346:	230c      	movs	r3, #12
 800f348:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f34a:	f7ff fda9 	bl	800eea0 <HAL_GetTick>
 800f34e:	0003      	movs	r3, r0
 800f350:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f352:	e01f      	b.n	800f394 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	3301      	adds	r3, #1
 800f358:	d01c      	beq.n	800f394 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d007      	beq.n	800f370 <HAL_ADC_PollForConversion+0x70>
 800f360:	f7ff fd9e 	bl	800eea0 <HAL_GetTick>
 800f364:	0002      	movs	r2, r0
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	1ad3      	subs	r3, r2, r3
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d211      	bcs.n	800f394 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	68fa      	ldr	r2, [r7, #12]
 800f378:	4013      	ands	r3, r2
 800f37a:	d10b      	bne.n	800f394 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f380:	2204      	movs	r2, #4
 800f382:	431a      	orrs	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2250      	movs	r2, #80	@ 0x50
 800f38c:	2100      	movs	r1, #0
 800f38e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f390:	2303      	movs	r3, #3
 800f392:	e04b      	b.n	800f42c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	4013      	ands	r3, r2
 800f39e:	d0d9      	beq.n	800f354 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3a4:	2280      	movs	r2, #128	@ 0x80
 800f3a6:	0092      	lsls	r2, r2, #2
 800f3a8:	431a      	orrs	r2, r3
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	68da      	ldr	r2, [r3, #12]
 800f3b4:	23c0      	movs	r3, #192	@ 0xc0
 800f3b6:	011b      	lsls	r3, r3, #4
 800f3b8:	4013      	ands	r3, r2
 800f3ba:	d12e      	bne.n	800f41a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2220      	movs	r2, #32
 800f3c0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d129      	bne.n	800f41a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2208      	movs	r2, #8
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	2b08      	cmp	r3, #8
 800f3d2:	d122      	bne.n	800f41a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	689b      	ldr	r3, [r3, #8]
 800f3da:	2204      	movs	r2, #4
 800f3dc:	4013      	ands	r3, r2
 800f3de:	d110      	bne.n	800f402 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	685a      	ldr	r2, [r3, #4]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	210c      	movs	r1, #12
 800f3ec:	438a      	bics	r2, r1
 800f3ee:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3f4:	4a0f      	ldr	r2, [pc, #60]	@ (800f434 <HAL_ADC_PollForConversion+0x134>)
 800f3f6:	4013      	ands	r3, r2
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	431a      	orrs	r2, r3
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	655a      	str	r2, [r3, #84]	@ 0x54
 800f400:	e00b      	b.n	800f41a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f406:	2220      	movs	r2, #32
 800f408:	431a      	orrs	r2, r3
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f412:	2201      	movs	r2, #1
 800f414:	431a      	orrs	r2, r3
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	699b      	ldr	r3, [r3, #24]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d103      	bne.n	800f42a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	220c      	movs	r2, #12
 800f428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	0018      	movs	r0, r3
 800f42e:	46bd      	mov	sp, r7
 800f430:	b004      	add	sp, #16
 800f432:	bd80      	pop	{r7, pc}
 800f434:	fffffefe 	.word	0xfffffefe

0800f438 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f446:	0018      	movs	r0, r3
 800f448:	46bd      	mov	sp, r7
 800f44a:	b002      	add	sp, #8
 800f44c:	bd80      	pop	{r7, pc}
	...

0800f450 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2250      	movs	r2, #80	@ 0x50
 800f45e:	5c9b      	ldrb	r3, [r3, r2]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d101      	bne.n	800f468 <HAL_ADC_ConfigChannel+0x18>
 800f464:	2302      	movs	r3, #2
 800f466:	e06c      	b.n	800f542 <HAL_ADC_ConfigChannel+0xf2>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2250      	movs	r2, #80	@ 0x50
 800f46c:	2101      	movs	r1, #1
 800f46e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	689b      	ldr	r3, [r3, #8]
 800f476:	2204      	movs	r2, #4
 800f478:	4013      	ands	r3, r2
 800f47a:	d00b      	beq.n	800f494 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f480:	2220      	movs	r2, #32
 800f482:	431a      	orrs	r2, r3
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2250      	movs	r2, #80	@ 0x50
 800f48c:	2100      	movs	r1, #0
 800f48e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f490:	2301      	movs	r3, #1
 800f492:	e056      	b.n	800f542 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	4a2c      	ldr	r2, [pc, #176]	@ (800f54c <HAL_ADC_ConfigChannel+0xfc>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d028      	beq.n	800f4f0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	035b      	lsls	r3, r3, #13
 800f4aa:	0b5a      	lsrs	r2, r3, #13
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	430a      	orrs	r2, r1
 800f4b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	2380      	movs	r3, #128	@ 0x80
 800f4ba:	02db      	lsls	r3, r3, #11
 800f4bc:	4013      	ands	r3, r2
 800f4be:	d009      	beq.n	800f4d4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f4c0:	4b23      	ldr	r3, [pc, #140]	@ (800f550 <HAL_ADC_ConfigChannel+0x100>)
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	4b22      	ldr	r3, [pc, #136]	@ (800f550 <HAL_ADC_ConfigChannel+0x100>)
 800f4c6:	2180      	movs	r1, #128	@ 0x80
 800f4c8:	0409      	lsls	r1, r1, #16
 800f4ca:	430a      	orrs	r2, r1
 800f4cc:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f4ce:	200a      	movs	r0, #10
 800f4d0:	f000 f8ac 	bl	800f62c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	681a      	ldr	r2, [r3, #0]
 800f4d8:	2380      	movs	r3, #128	@ 0x80
 800f4da:	029b      	lsls	r3, r3, #10
 800f4dc:	4013      	ands	r3, r2
 800f4de:	d02b      	beq.n	800f538 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f4e0:	4b1b      	ldr	r3, [pc, #108]	@ (800f550 <HAL_ADC_ConfigChannel+0x100>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	4b1a      	ldr	r3, [pc, #104]	@ (800f550 <HAL_ADC_ConfigChannel+0x100>)
 800f4e6:	2180      	movs	r1, #128	@ 0x80
 800f4e8:	03c9      	lsls	r1, r1, #15
 800f4ea:	430a      	orrs	r2, r1
 800f4ec:	601a      	str	r2, [r3, #0]
 800f4ee:	e023      	b.n	800f538 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	035b      	lsls	r3, r3, #13
 800f4fc:	0b5b      	lsrs	r3, r3, #13
 800f4fe:	43d9      	mvns	r1, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	400a      	ands	r2, r1
 800f506:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	2380      	movs	r3, #128	@ 0x80
 800f50e:	02db      	lsls	r3, r3, #11
 800f510:	4013      	ands	r3, r2
 800f512:	d005      	beq.n	800f520 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f514:	4b0e      	ldr	r3, [pc, #56]	@ (800f550 <HAL_ADC_ConfigChannel+0x100>)
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	4b0d      	ldr	r3, [pc, #52]	@ (800f550 <HAL_ADC_ConfigChannel+0x100>)
 800f51a:	490e      	ldr	r1, [pc, #56]	@ (800f554 <HAL_ADC_ConfigChannel+0x104>)
 800f51c:	400a      	ands	r2, r1
 800f51e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	2380      	movs	r3, #128	@ 0x80
 800f526:	029b      	lsls	r3, r3, #10
 800f528:	4013      	ands	r3, r2
 800f52a:	d005      	beq.n	800f538 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f52c:	4b08      	ldr	r3, [pc, #32]	@ (800f550 <HAL_ADC_ConfigChannel+0x100>)
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	4b07      	ldr	r3, [pc, #28]	@ (800f550 <HAL_ADC_ConfigChannel+0x100>)
 800f532:	4909      	ldr	r1, [pc, #36]	@ (800f558 <HAL_ADC_ConfigChannel+0x108>)
 800f534:	400a      	ands	r2, r1
 800f536:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2250      	movs	r2, #80	@ 0x50
 800f53c:	2100      	movs	r1, #0
 800f53e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	0018      	movs	r0, r3
 800f544:	46bd      	mov	sp, r7
 800f546:	b002      	add	sp, #8
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	46c0      	nop			@ (mov r8, r8)
 800f54c:	00001001 	.word	0x00001001
 800f550:	40012708 	.word	0x40012708
 800f554:	ff7fffff 	.word	0xff7fffff
 800f558:	ffbfffff 	.word	0xffbfffff

0800f55c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f564:	2300      	movs	r3, #0
 800f566:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	2203      	movs	r2, #3
 800f570:	4013      	ands	r3, r2
 800f572:	2b01      	cmp	r3, #1
 800f574:	d108      	bne.n	800f588 <ADC_Enable+0x2c>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2201      	movs	r2, #1
 800f57e:	4013      	ands	r3, r2
 800f580:	2b01      	cmp	r3, #1
 800f582:	d101      	bne.n	800f588 <ADC_Enable+0x2c>
 800f584:	2301      	movs	r3, #1
 800f586:	e000      	b.n	800f58a <ADC_Enable+0x2e>
 800f588:	2300      	movs	r3, #0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d146      	bne.n	800f61c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	4a24      	ldr	r2, [pc, #144]	@ (800f628 <ADC_Enable+0xcc>)
 800f596:	4013      	ands	r3, r2
 800f598:	d00d      	beq.n	800f5b6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f59e:	2210      	movs	r2, #16
 800f5a0:	431a      	orrs	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	431a      	orrs	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e033      	b.n	800f61e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	689a      	ldr	r2, [r3, #8]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2101      	movs	r1, #1
 800f5c2:	430a      	orrs	r2, r1
 800f5c4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f5c6:	2001      	movs	r0, #1
 800f5c8:	f000 f830 	bl	800f62c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f5cc:	f7ff fc68 	bl	800eea0 <HAL_GetTick>
 800f5d0:	0003      	movs	r3, r0
 800f5d2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f5d4:	e01b      	b.n	800f60e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f5d6:	f7ff fc63 	bl	800eea0 <HAL_GetTick>
 800f5da:	0002      	movs	r2, r0
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	1ad3      	subs	r3, r2, r3
 800f5e0:	2b0a      	cmp	r3, #10
 800f5e2:	d914      	bls.n	800f60e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	4013      	ands	r3, r2
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d00d      	beq.n	800f60e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5f6:	2210      	movs	r2, #16
 800f5f8:	431a      	orrs	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f602:	2201      	movs	r2, #1
 800f604:	431a      	orrs	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f60a:	2301      	movs	r3, #1
 800f60c:	e007      	b.n	800f61e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2201      	movs	r2, #1
 800f616:	4013      	ands	r3, r2
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d1dc      	bne.n	800f5d6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	0018      	movs	r0, r3
 800f620:	46bd      	mov	sp, r7
 800f622:	b004      	add	sp, #16
 800f624:	bd80      	pop	{r7, pc}
 800f626:	46c0      	nop			@ (mov r8, r8)
 800f628:	80000017 	.word	0x80000017

0800f62c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f634:	4b0b      	ldr	r3, [pc, #44]	@ (800f664 <ADC_DelayMicroSecond+0x38>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	490b      	ldr	r1, [pc, #44]	@ (800f668 <ADC_DelayMicroSecond+0x3c>)
 800f63a:	0018      	movs	r0, r3
 800f63c:	f7f0 fdb2 	bl	80001a4 <__udivsi3>
 800f640:	0003      	movs	r3, r0
 800f642:	001a      	movs	r2, r3
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4353      	muls	r3, r2
 800f648:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f64a:	e002      	b.n	800f652 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	3b01      	subs	r3, #1
 800f650:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d1f9      	bne.n	800f64c <ADC_DelayMicroSecond+0x20>
  }
}
 800f658:	46c0      	nop			@ (mov r8, r8)
 800f65a:	46c0      	nop			@ (mov r8, r8)
 800f65c:	46bd      	mov	sp, r7
 800f65e:	b004      	add	sp, #16
 800f660:	bd80      	pop	{r7, pc}
 800f662:	46c0      	nop			@ (mov r8, r8)
 800f664:	200000d0 	.word	0x200000d0
 800f668:	000f4240 	.word	0x000f4240

0800f66c <__NVIC_EnableIRQ>:
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	0002      	movs	r2, r0
 800f674:	1dfb      	adds	r3, r7, #7
 800f676:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f678:	1dfb      	adds	r3, r7, #7
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f67e:	d809      	bhi.n	800f694 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f680:	1dfb      	adds	r3, r7, #7
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	001a      	movs	r2, r3
 800f686:	231f      	movs	r3, #31
 800f688:	401a      	ands	r2, r3
 800f68a:	4b04      	ldr	r3, [pc, #16]	@ (800f69c <__NVIC_EnableIRQ+0x30>)
 800f68c:	2101      	movs	r1, #1
 800f68e:	4091      	lsls	r1, r2
 800f690:	000a      	movs	r2, r1
 800f692:	601a      	str	r2, [r3, #0]
}
 800f694:	46c0      	nop			@ (mov r8, r8)
 800f696:	46bd      	mov	sp, r7
 800f698:	b002      	add	sp, #8
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	e000e100 	.word	0xe000e100

0800f6a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f6a0:	b590      	push	{r4, r7, lr}
 800f6a2:	b083      	sub	sp, #12
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	0002      	movs	r2, r0
 800f6a8:	6039      	str	r1, [r7, #0]
 800f6aa:	1dfb      	adds	r3, r7, #7
 800f6ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f6ae:	1dfb      	adds	r3, r7, #7
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6b4:	d828      	bhi.n	800f708 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f6b6:	4a2f      	ldr	r2, [pc, #188]	@ (800f774 <__NVIC_SetPriority+0xd4>)
 800f6b8:	1dfb      	adds	r3, r7, #7
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	b25b      	sxtb	r3, r3
 800f6be:	089b      	lsrs	r3, r3, #2
 800f6c0:	33c0      	adds	r3, #192	@ 0xc0
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	589b      	ldr	r3, [r3, r2]
 800f6c6:	1dfa      	adds	r2, r7, #7
 800f6c8:	7812      	ldrb	r2, [r2, #0]
 800f6ca:	0011      	movs	r1, r2
 800f6cc:	2203      	movs	r2, #3
 800f6ce:	400a      	ands	r2, r1
 800f6d0:	00d2      	lsls	r2, r2, #3
 800f6d2:	21ff      	movs	r1, #255	@ 0xff
 800f6d4:	4091      	lsls	r1, r2
 800f6d6:	000a      	movs	r2, r1
 800f6d8:	43d2      	mvns	r2, r2
 800f6da:	401a      	ands	r2, r3
 800f6dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	019b      	lsls	r3, r3, #6
 800f6e2:	22ff      	movs	r2, #255	@ 0xff
 800f6e4:	401a      	ands	r2, r3
 800f6e6:	1dfb      	adds	r3, r7, #7
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	0018      	movs	r0, r3
 800f6ec:	2303      	movs	r3, #3
 800f6ee:	4003      	ands	r3, r0
 800f6f0:	00db      	lsls	r3, r3, #3
 800f6f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f6f4:	481f      	ldr	r0, [pc, #124]	@ (800f774 <__NVIC_SetPriority+0xd4>)
 800f6f6:	1dfb      	adds	r3, r7, #7
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	b25b      	sxtb	r3, r3
 800f6fc:	089b      	lsrs	r3, r3, #2
 800f6fe:	430a      	orrs	r2, r1
 800f700:	33c0      	adds	r3, #192	@ 0xc0
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f706:	e031      	b.n	800f76c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f708:	4a1b      	ldr	r2, [pc, #108]	@ (800f778 <__NVIC_SetPriority+0xd8>)
 800f70a:	1dfb      	adds	r3, r7, #7
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	0019      	movs	r1, r3
 800f710:	230f      	movs	r3, #15
 800f712:	400b      	ands	r3, r1
 800f714:	3b08      	subs	r3, #8
 800f716:	089b      	lsrs	r3, r3, #2
 800f718:	3306      	adds	r3, #6
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	18d3      	adds	r3, r2, r3
 800f71e:	3304      	adds	r3, #4
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	1dfa      	adds	r2, r7, #7
 800f724:	7812      	ldrb	r2, [r2, #0]
 800f726:	0011      	movs	r1, r2
 800f728:	2203      	movs	r2, #3
 800f72a:	400a      	ands	r2, r1
 800f72c:	00d2      	lsls	r2, r2, #3
 800f72e:	21ff      	movs	r1, #255	@ 0xff
 800f730:	4091      	lsls	r1, r2
 800f732:	000a      	movs	r2, r1
 800f734:	43d2      	mvns	r2, r2
 800f736:	401a      	ands	r2, r3
 800f738:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	019b      	lsls	r3, r3, #6
 800f73e:	22ff      	movs	r2, #255	@ 0xff
 800f740:	401a      	ands	r2, r3
 800f742:	1dfb      	adds	r3, r7, #7
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	0018      	movs	r0, r3
 800f748:	2303      	movs	r3, #3
 800f74a:	4003      	ands	r3, r0
 800f74c:	00db      	lsls	r3, r3, #3
 800f74e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f750:	4809      	ldr	r0, [pc, #36]	@ (800f778 <__NVIC_SetPriority+0xd8>)
 800f752:	1dfb      	adds	r3, r7, #7
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	001c      	movs	r4, r3
 800f758:	230f      	movs	r3, #15
 800f75a:	4023      	ands	r3, r4
 800f75c:	3b08      	subs	r3, #8
 800f75e:	089b      	lsrs	r3, r3, #2
 800f760:	430a      	orrs	r2, r1
 800f762:	3306      	adds	r3, #6
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	18c3      	adds	r3, r0, r3
 800f768:	3304      	adds	r3, #4
 800f76a:	601a      	str	r2, [r3, #0]
}
 800f76c:	46c0      	nop			@ (mov r8, r8)
 800f76e:	46bd      	mov	sp, r7
 800f770:	b003      	add	sp, #12
 800f772:	bd90      	pop	{r4, r7, pc}
 800f774:	e000e100 	.word	0xe000e100
 800f778:	e000ed00 	.word	0xe000ed00

0800f77c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f780:	f3bf 8f4f 	dsb	sy
}
 800f784:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f786:	4b04      	ldr	r3, [pc, #16]	@ (800f798 <__NVIC_SystemReset+0x1c>)
 800f788:	4a04      	ldr	r2, [pc, #16]	@ (800f79c <__NVIC_SystemReset+0x20>)
 800f78a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f78c:	f3bf 8f4f 	dsb	sy
}
 800f790:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f792:	46c0      	nop			@ (mov r8, r8)
 800f794:	e7fd      	b.n	800f792 <__NVIC_SystemReset+0x16>
 800f796:	46c0      	nop			@ (mov r8, r8)
 800f798:	e000ed00 	.word	0xe000ed00
 800f79c:	05fa0004 	.word	0x05fa0004

0800f7a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	1e5a      	subs	r2, r3, #1
 800f7ac:	2380      	movs	r3, #128	@ 0x80
 800f7ae:	045b      	lsls	r3, r3, #17
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d301      	bcc.n	800f7b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e010      	b.n	800f7da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f7e4 <SysTick_Config+0x44>)
 800f7ba:	687a      	ldr	r2, [r7, #4]
 800f7bc:	3a01      	subs	r2, #1
 800f7be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	425b      	negs	r3, r3
 800f7c4:	2103      	movs	r1, #3
 800f7c6:	0018      	movs	r0, r3
 800f7c8:	f7ff ff6a 	bl	800f6a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f7cc:	4b05      	ldr	r3, [pc, #20]	@ (800f7e4 <SysTick_Config+0x44>)
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f7d2:	4b04      	ldr	r3, [pc, #16]	@ (800f7e4 <SysTick_Config+0x44>)
 800f7d4:	2207      	movs	r2, #7
 800f7d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	0018      	movs	r0, r3
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	b002      	add	sp, #8
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	46c0      	nop			@ (mov r8, r8)
 800f7e4:	e000e010 	.word	0xe000e010

0800f7e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60b9      	str	r1, [r7, #8]
 800f7f0:	607a      	str	r2, [r7, #4]
 800f7f2:	210f      	movs	r1, #15
 800f7f4:	187b      	adds	r3, r7, r1
 800f7f6:	1c02      	adds	r2, r0, #0
 800f7f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	187b      	adds	r3, r7, r1
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	b25b      	sxtb	r3, r3
 800f802:	0011      	movs	r1, r2
 800f804:	0018      	movs	r0, r3
 800f806:	f7ff ff4b 	bl	800f6a0 <__NVIC_SetPriority>
}
 800f80a:	46c0      	nop			@ (mov r8, r8)
 800f80c:	46bd      	mov	sp, r7
 800f80e:	b004      	add	sp, #16
 800f810:	bd80      	pop	{r7, pc}

0800f812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f812:	b580      	push	{r7, lr}
 800f814:	b082      	sub	sp, #8
 800f816:	af00      	add	r7, sp, #0
 800f818:	0002      	movs	r2, r0
 800f81a:	1dfb      	adds	r3, r7, #7
 800f81c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f81e:	1dfb      	adds	r3, r7, #7
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	b25b      	sxtb	r3, r3
 800f824:	0018      	movs	r0, r3
 800f826:	f7ff ff21 	bl	800f66c <__NVIC_EnableIRQ>
}
 800f82a:	46c0      	nop			@ (mov r8, r8)
 800f82c:	46bd      	mov	sp, r7
 800f82e:	b002      	add	sp, #8
 800f830:	bd80      	pop	{r7, pc}

0800f832 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f836:	f7ff ffa1 	bl	800f77c <__NVIC_SystemReset>

0800f83a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b082      	sub	sp, #8
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	0018      	movs	r0, r3
 800f846:	f7ff ffab 	bl	800f7a0 <SysTick_Config>
 800f84a:	0003      	movs	r3, r0
}
 800f84c:	0018      	movs	r0, r3
 800f84e:	46bd      	mov	sp, r7
 800f850:	b002      	add	sp, #8
 800f852:	bd80      	pop	{r7, pc}

0800f854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d101      	bne.n	800f866 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f862:	2301      	movs	r3, #1
 800f864:	e061      	b.n	800f92a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a32      	ldr	r2, [pc, #200]	@ (800f934 <HAL_DMA_Init+0xe0>)
 800f86c:	4694      	mov	ip, r2
 800f86e:	4463      	add	r3, ip
 800f870:	2114      	movs	r1, #20
 800f872:	0018      	movs	r0, r3
 800f874:	f7f0 fc96 	bl	80001a4 <__udivsi3>
 800f878:	0003      	movs	r3, r0
 800f87a:	009a      	lsls	r2, r3, #2
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4a2d      	ldr	r2, [pc, #180]	@ (800f938 <HAL_DMA_Init+0xe4>)
 800f884:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2225      	movs	r2, #37	@ 0x25
 800f88a:	2102      	movs	r1, #2
 800f88c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	4a28      	ldr	r2, [pc, #160]	@ (800f93c <HAL_DMA_Init+0xe8>)
 800f89a:	4013      	ands	r3, r2
 800f89c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f8a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	691b      	ldr	r3, [r3, #16]
 800f8ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f8b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	699b      	ldr	r3, [r3, #24]
 800f8b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f8be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6a1b      	ldr	r3, [r3, #32]
 800f8c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f8c6:	68fa      	ldr	r2, [r7, #12]
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	689a      	ldr	r2, [r3, #8]
 800f8d8:	2380      	movs	r3, #128	@ 0x80
 800f8da:	01db      	lsls	r3, r3, #7
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d018      	beq.n	800f912 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f8e0:	4b17      	ldr	r3, [pc, #92]	@ (800f940 <HAL_DMA_Init+0xec>)
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8e8:	211c      	movs	r1, #28
 800f8ea:	400b      	ands	r3, r1
 800f8ec:	210f      	movs	r1, #15
 800f8ee:	4099      	lsls	r1, r3
 800f8f0:	000b      	movs	r3, r1
 800f8f2:	43d9      	mvns	r1, r3
 800f8f4:	4b12      	ldr	r3, [pc, #72]	@ (800f940 <HAL_DMA_Init+0xec>)
 800f8f6:	400a      	ands	r2, r1
 800f8f8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f8fa:	4b11      	ldr	r3, [pc, #68]	@ (800f940 <HAL_DMA_Init+0xec>)
 800f8fc:	6819      	ldr	r1, [r3, #0]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f906:	201c      	movs	r0, #28
 800f908:	4003      	ands	r3, r0
 800f90a:	409a      	lsls	r2, r3
 800f90c:	4b0c      	ldr	r3, [pc, #48]	@ (800f940 <HAL_DMA_Init+0xec>)
 800f90e:	430a      	orrs	r2, r1
 800f910:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2225      	movs	r2, #37	@ 0x25
 800f91c:	2101      	movs	r1, #1
 800f91e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2224      	movs	r2, #36	@ 0x24
 800f924:	2100      	movs	r1, #0
 800f926:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	0018      	movs	r0, r3
 800f92c:	46bd      	mov	sp, r7
 800f92e:	b004      	add	sp, #16
 800f930:	bd80      	pop	{r7, pc}
 800f932:	46c0      	nop			@ (mov r8, r8)
 800f934:	bffdfff8 	.word	0xbffdfff8
 800f938:	40020000 	.word	0x40020000
 800f93c:	ffff800f 	.word	0xffff800f
 800f940:	400200a8 	.word	0x400200a8

0800f944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b086      	sub	sp, #24
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]
 800f950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f952:	2317      	movs	r3, #23
 800f954:	18fb      	adds	r3, r7, r3
 800f956:	2200      	movs	r2, #0
 800f958:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2224      	movs	r2, #36	@ 0x24
 800f95e:	5c9b      	ldrb	r3, [r3, r2]
 800f960:	2b01      	cmp	r3, #1
 800f962:	d101      	bne.n	800f968 <HAL_DMA_Start_IT+0x24>
 800f964:	2302      	movs	r3, #2
 800f966:	e04f      	b.n	800fa08 <HAL_DMA_Start_IT+0xc4>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2224      	movs	r2, #36	@ 0x24
 800f96c:	2101      	movs	r1, #1
 800f96e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2225      	movs	r2, #37	@ 0x25
 800f974:	5c9b      	ldrb	r3, [r3, r2]
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d13a      	bne.n	800f9f2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2225      	movs	r2, #37	@ 0x25
 800f980:	2102      	movs	r1, #2
 800f982:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2200      	movs	r2, #0
 800f988:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2101      	movs	r1, #1
 800f996:	438a      	bics	r2, r1
 800f998:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	68b9      	ldr	r1, [r7, #8]
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f000 f976 	bl	800fc92 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d008      	beq.n	800f9c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	210e      	movs	r1, #14
 800f9ba:	430a      	orrs	r2, r1
 800f9bc:	601a      	str	r2, [r3, #0]
 800f9be:	e00f      	b.n	800f9e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2104      	movs	r1, #4
 800f9cc:	438a      	bics	r2, r1
 800f9ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	210a      	movs	r1, #10
 800f9dc:	430a      	orrs	r2, r1
 800f9de:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	681a      	ldr	r2, [r3, #0]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2101      	movs	r1, #1
 800f9ec:	430a      	orrs	r2, r1
 800f9ee:	601a      	str	r2, [r3, #0]
 800f9f0:	e007      	b.n	800fa02 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	2224      	movs	r2, #36	@ 0x24
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f9fa:	2317      	movs	r3, #23
 800f9fc:	18fb      	adds	r3, r7, r3
 800f9fe:	2202      	movs	r2, #2
 800fa00:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800fa02:	2317      	movs	r3, #23
 800fa04:	18fb      	adds	r3, r7, r3
 800fa06:	781b      	ldrb	r3, [r3, #0]
}
 800fa08:	0018      	movs	r0, r3
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	b006      	add	sp, #24
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa18:	230f      	movs	r3, #15
 800fa1a:	18fb      	adds	r3, r7, r3
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2225      	movs	r2, #37	@ 0x25
 800fa24:	5c9b      	ldrb	r3, [r3, r2]
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b02      	cmp	r3, #2
 800fa2a:	d008      	beq.n	800fa3e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2204      	movs	r2, #4
 800fa30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2224      	movs	r2, #36	@ 0x24
 800fa36:	2100      	movs	r1, #0
 800fa38:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e024      	b.n	800fa88 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	210e      	movs	r1, #14
 800fa4a:	438a      	bics	r2, r1
 800fa4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2101      	movs	r1, #1
 800fa5a:	438a      	bics	r2, r1
 800fa5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa62:	221c      	movs	r2, #28
 800fa64:	401a      	ands	r2, r3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa6a:	2101      	movs	r1, #1
 800fa6c:	4091      	lsls	r1, r2
 800fa6e:	000a      	movs	r2, r1
 800fa70:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2225      	movs	r2, #37	@ 0x25
 800fa76:	2101      	movs	r1, #1
 800fa78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2224      	movs	r2, #36	@ 0x24
 800fa7e:	2100      	movs	r1, #0
 800fa80:	5499      	strb	r1, [r3, r2]

    return status;
 800fa82:	230f      	movs	r3, #15
 800fa84:	18fb      	adds	r3, r7, r3
 800fa86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa88:	0018      	movs	r0, r3
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	b004      	add	sp, #16
 800fa8e:	bd80      	pop	{r7, pc}

0800fa90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa98:	210f      	movs	r1, #15
 800fa9a:	187b      	adds	r3, r7, r1
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2225      	movs	r2, #37	@ 0x25
 800faa4:	5c9b      	ldrb	r3, [r3, r2]
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	2b02      	cmp	r3, #2
 800faaa:	d006      	beq.n	800faba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2204      	movs	r2, #4
 800fab0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800fab2:	187b      	adds	r3, r7, r1
 800fab4:	2201      	movs	r2, #1
 800fab6:	701a      	strb	r2, [r3, #0]
 800fab8:	e02a      	b.n	800fb10 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	210e      	movs	r1, #14
 800fac6:	438a      	bics	r2, r1
 800fac8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2101      	movs	r1, #1
 800fad6:	438a      	bics	r2, r1
 800fad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fade:	221c      	movs	r2, #28
 800fae0:	401a      	ands	r2, r3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fae6:	2101      	movs	r1, #1
 800fae8:	4091      	lsls	r1, r2
 800faea:	000a      	movs	r2, r1
 800faec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2225      	movs	r2, #37	@ 0x25
 800faf2:	2101      	movs	r1, #1
 800faf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2224      	movs	r2, #36	@ 0x24
 800fafa:	2100      	movs	r1, #0
 800fafc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d004      	beq.n	800fb10 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	0010      	movs	r0, r2
 800fb0e:	4798      	blx	r3
    }
  }
  return status;
 800fb10:	230f      	movs	r3, #15
 800fb12:	18fb      	adds	r3, r7, r3
 800fb14:	781b      	ldrb	r3, [r3, #0]
}
 800fb16:	0018      	movs	r0, r3
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	b004      	add	sp, #16
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b084      	sub	sp, #16
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb3a:	221c      	movs	r2, #28
 800fb3c:	4013      	ands	r3, r2
 800fb3e:	2204      	movs	r2, #4
 800fb40:	409a      	lsls	r2, r3
 800fb42:	0013      	movs	r3, r2
 800fb44:	68fa      	ldr	r2, [r7, #12]
 800fb46:	4013      	ands	r3, r2
 800fb48:	d026      	beq.n	800fb98 <HAL_DMA_IRQHandler+0x7a>
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	2204      	movs	r2, #4
 800fb4e:	4013      	ands	r3, r2
 800fb50:	d022      	beq.n	800fb98 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2220      	movs	r2, #32
 800fb5a:	4013      	ands	r3, r2
 800fb5c:	d107      	bne.n	800fb6e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2104      	movs	r1, #4
 800fb6a:	438a      	bics	r2, r1
 800fb6c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb72:	221c      	movs	r2, #28
 800fb74:	401a      	ands	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb7a:	2104      	movs	r1, #4
 800fb7c:	4091      	lsls	r1, r2
 800fb7e:	000a      	movs	r2, r1
 800fb80:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d100      	bne.n	800fb8c <HAL_DMA_IRQHandler+0x6e>
 800fb8a:	e071      	b.n	800fc70 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	0010      	movs	r0, r2
 800fb94:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800fb96:	e06b      	b.n	800fc70 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb9c:	221c      	movs	r2, #28
 800fb9e:	4013      	ands	r3, r2
 800fba0:	2202      	movs	r2, #2
 800fba2:	409a      	lsls	r2, r3
 800fba4:	0013      	movs	r3, r2
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	4013      	ands	r3, r2
 800fbaa:	d02d      	beq.n	800fc08 <HAL_DMA_IRQHandler+0xea>
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	2202      	movs	r2, #2
 800fbb0:	4013      	ands	r3, r2
 800fbb2:	d029      	beq.n	800fc08 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2220      	movs	r2, #32
 800fbbc:	4013      	ands	r3, r2
 800fbbe:	d10b      	bne.n	800fbd8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	210a      	movs	r1, #10
 800fbcc:	438a      	bics	r2, r1
 800fbce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2225      	movs	r2, #37	@ 0x25
 800fbd4:	2101      	movs	r1, #1
 800fbd6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbdc:	221c      	movs	r2, #28
 800fbde:	401a      	ands	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbe4:	2102      	movs	r1, #2
 800fbe6:	4091      	lsls	r1, r2
 800fbe8:	000a      	movs	r2, r1
 800fbea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2224      	movs	r2, #36	@ 0x24
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d039      	beq.n	800fc70 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	0010      	movs	r0, r2
 800fc04:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800fc06:	e033      	b.n	800fc70 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc0c:	221c      	movs	r2, #28
 800fc0e:	4013      	ands	r3, r2
 800fc10:	2208      	movs	r2, #8
 800fc12:	409a      	lsls	r2, r3
 800fc14:	0013      	movs	r3, r2
 800fc16:	68fa      	ldr	r2, [r7, #12]
 800fc18:	4013      	ands	r3, r2
 800fc1a:	d02a      	beq.n	800fc72 <HAL_DMA_IRQHandler+0x154>
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	2208      	movs	r2, #8
 800fc20:	4013      	ands	r3, r2
 800fc22:	d026      	beq.n	800fc72 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	210e      	movs	r1, #14
 800fc30:	438a      	bics	r2, r1
 800fc32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc38:	221c      	movs	r2, #28
 800fc3a:	401a      	ands	r2, r3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc40:	2101      	movs	r1, #1
 800fc42:	4091      	lsls	r1, r2
 800fc44:	000a      	movs	r2, r1
 800fc46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2225      	movs	r2, #37	@ 0x25
 800fc52:	2101      	movs	r1, #1
 800fc54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2224      	movs	r2, #36	@ 0x24
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d005      	beq.n	800fc72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	0010      	movs	r0, r2
 800fc6e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800fc70:	46c0      	nop			@ (mov r8, r8)
 800fc72:	46c0      	nop			@ (mov r8, r8)
}
 800fc74:	46bd      	mov	sp, r7
 800fc76:	b004      	add	sp, #16
 800fc78:	bd80      	pop	{r7, pc}

0800fc7a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800fc7a:	b580      	push	{r7, lr}
 800fc7c:	b082      	sub	sp, #8
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2225      	movs	r2, #37	@ 0x25
 800fc86:	5c9b      	ldrb	r3, [r3, r2]
 800fc88:	b2db      	uxtb	r3, r3
}
 800fc8a:	0018      	movs	r0, r3
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	b002      	add	sp, #8
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b084      	sub	sp, #16
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	60f8      	str	r0, [r7, #12]
 800fc9a:	60b9      	str	r1, [r7, #8]
 800fc9c:	607a      	str	r2, [r7, #4]
 800fc9e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fca4:	221c      	movs	r2, #28
 800fca6:	401a      	ands	r2, r3
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcac:	2101      	movs	r1, #1
 800fcae:	4091      	lsls	r1, r2
 800fcb0:	000a      	movs	r2, r1
 800fcb2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	683a      	ldr	r2, [r7, #0]
 800fcba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	2b10      	cmp	r3, #16
 800fcc2:	d108      	bne.n	800fcd6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	68ba      	ldr	r2, [r7, #8]
 800fcd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800fcd4:	e007      	b.n	800fce6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	68ba      	ldr	r2, [r7, #8]
 800fcdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	60da      	str	r2, [r3, #12]
}
 800fce6:	46c0      	nop			@ (mov r8, r8)
 800fce8:	46bd      	mov	sp, r7
 800fcea:	b004      	add	sp, #16
 800fcec:	bd80      	pop	{r7, pc}
	...

0800fcf0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800fcf8:	f7ff f8d2 	bl	800eea0 <HAL_GetTick>
 800fcfc:	0003      	movs	r3, r0
 800fcfe:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fd00:	e00f      	b.n	800fd22 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	3301      	adds	r3, #1
 800fd06:	d00c      	beq.n	800fd22 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d007      	beq.n	800fd1e <FLASH_WaitForLastOperation+0x2e>
 800fd0e:	f7ff f8c7 	bl	800eea0 <HAL_GetTick>
 800fd12:	0002      	movs	r2, r0
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d201      	bcs.n	800fd22 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fd1e:	2303      	movs	r3, #3
 800fd20:	e052      	b.n	800fdc8 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fd22:	4b2b      	ldr	r3, [pc, #172]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fd24:	699b      	ldr	r3, [r3, #24]
 800fd26:	2201      	movs	r2, #1
 800fd28:	4013      	ands	r3, r2
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d0e9      	beq.n	800fd02 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fd2e:	4b28      	ldr	r3, [pc, #160]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fd30:	699b      	ldr	r3, [r3, #24]
 800fd32:	2202      	movs	r2, #2
 800fd34:	4013      	ands	r3, r2
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	d102      	bne.n	800fd40 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fd3a:	4b25      	ldr	r3, [pc, #148]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fd3c:	2202      	movs	r2, #2
 800fd3e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fd40:	4b23      	ldr	r3, [pc, #140]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fd42:	699a      	ldr	r2, [r3, #24]
 800fd44:	2380      	movs	r3, #128	@ 0x80
 800fd46:	005b      	lsls	r3, r3, #1
 800fd48:	401a      	ands	r2, r3
 800fd4a:	2380      	movs	r3, #128	@ 0x80
 800fd4c:	005b      	lsls	r3, r3, #1
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d035      	beq.n	800fdbe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fd52:	4b1f      	ldr	r3, [pc, #124]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fd54:	699a      	ldr	r2, [r3, #24]
 800fd56:	2380      	movs	r3, #128	@ 0x80
 800fd58:	009b      	lsls	r3, r3, #2
 800fd5a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fd5c:	2380      	movs	r3, #128	@ 0x80
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d02c      	beq.n	800fdbe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fd64:	4b1a      	ldr	r3, [pc, #104]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fd66:	699a      	ldr	r2, [r3, #24]
 800fd68:	2380      	movs	r3, #128	@ 0x80
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fd6e:	2380      	movs	r3, #128	@ 0x80
 800fd70:	00db      	lsls	r3, r3, #3
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d023      	beq.n	800fdbe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fd76:	4b16      	ldr	r3, [pc, #88]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fd78:	699a      	ldr	r2, [r3, #24]
 800fd7a:	2380      	movs	r3, #128	@ 0x80
 800fd7c:	011b      	lsls	r3, r3, #4
 800fd7e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fd80:	2380      	movs	r3, #128	@ 0x80
 800fd82:	011b      	lsls	r3, r3, #4
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d01a      	beq.n	800fdbe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fd88:	4b11      	ldr	r3, [pc, #68]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fd8a:	699a      	ldr	r2, [r3, #24]
 800fd8c:	2380      	movs	r3, #128	@ 0x80
 800fd8e:	019b      	lsls	r3, r3, #6
 800fd90:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fd92:	2380      	movs	r3, #128	@ 0x80
 800fd94:	019b      	lsls	r3, r3, #6
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d011      	beq.n	800fdbe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fd9a:	4b0d      	ldr	r3, [pc, #52]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fd9c:	699a      	ldr	r2, [r3, #24]
 800fd9e:	2380      	movs	r3, #128	@ 0x80
 800fda0:	029b      	lsls	r3, r3, #10
 800fda2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fda4:	2380      	movs	r3, #128	@ 0x80
 800fda6:	029b      	lsls	r3, r3, #10
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d008      	beq.n	800fdbe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800fdac:	4b08      	ldr	r3, [pc, #32]	@ (800fdd0 <FLASH_WaitForLastOperation+0xe0>)
 800fdae:	699a      	ldr	r2, [r3, #24]
 800fdb0:	2380      	movs	r3, #128	@ 0x80
 800fdb2:	025b      	lsls	r3, r3, #9
 800fdb4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fdb6:	2380      	movs	r3, #128	@ 0x80
 800fdb8:	025b      	lsls	r3, r3, #9
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d103      	bne.n	800fdc6 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800fdbe:	f000 f809 	bl	800fdd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e000      	b.n	800fdc8 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	0018      	movs	r0, r3
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	b004      	add	sp, #16
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	40022000 	.word	0x40022000

0800fdd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fdde:	4b49      	ldr	r3, [pc, #292]	@ (800ff04 <FLASH_SetErrorCode+0x130>)
 800fde0:	699a      	ldr	r2, [r3, #24]
 800fde2:	2380      	movs	r3, #128	@ 0x80
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	401a      	ands	r2, r3
 800fde8:	2380      	movs	r3, #128	@ 0x80
 800fdea:	005b      	lsls	r3, r3, #1
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d10a      	bne.n	800fe06 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fdf0:	4b45      	ldr	r3, [pc, #276]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fdf2:	695b      	ldr	r3, [r3, #20]
 800fdf4:	2202      	movs	r2, #2
 800fdf6:	431a      	orrs	r2, r3
 800fdf8:	4b43      	ldr	r3, [pc, #268]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fdfa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2280      	movs	r2, #128	@ 0x80
 800fe00:	0052      	lsls	r2, r2, #1
 800fe02:	4313      	orrs	r3, r2
 800fe04:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800fe06:	4b3f      	ldr	r3, [pc, #252]	@ (800ff04 <FLASH_SetErrorCode+0x130>)
 800fe08:	699a      	ldr	r2, [r3, #24]
 800fe0a:	2380      	movs	r3, #128	@ 0x80
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	401a      	ands	r2, r3
 800fe10:	2380      	movs	r3, #128	@ 0x80
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d10a      	bne.n	800fe2e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fe18:	4b3b      	ldr	r3, [pc, #236]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fe1a:	695b      	ldr	r3, [r3, #20]
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	431a      	orrs	r2, r3
 800fe20:	4b39      	ldr	r3, [pc, #228]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fe22:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2280      	movs	r2, #128	@ 0x80
 800fe28:	0092      	lsls	r2, r2, #2
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800fe2e:	4b35      	ldr	r3, [pc, #212]	@ (800ff04 <FLASH_SetErrorCode+0x130>)
 800fe30:	699a      	ldr	r2, [r3, #24]
 800fe32:	2380      	movs	r3, #128	@ 0x80
 800fe34:	00db      	lsls	r3, r3, #3
 800fe36:	401a      	ands	r2, r3
 800fe38:	2380      	movs	r3, #128	@ 0x80
 800fe3a:	00db      	lsls	r3, r3, #3
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d10a      	bne.n	800fe56 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800fe40:	4b31      	ldr	r3, [pc, #196]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fe42:	695b      	ldr	r3, [r3, #20]
 800fe44:	2208      	movs	r2, #8
 800fe46:	431a      	orrs	r2, r3
 800fe48:	4b2f      	ldr	r3, [pc, #188]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fe4a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2280      	movs	r2, #128	@ 0x80
 800fe50:	00d2      	lsls	r2, r2, #3
 800fe52:	4313      	orrs	r3, r2
 800fe54:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800fe56:	4b2b      	ldr	r3, [pc, #172]	@ (800ff04 <FLASH_SetErrorCode+0x130>)
 800fe58:	699a      	ldr	r2, [r3, #24]
 800fe5a:	2380      	movs	r3, #128	@ 0x80
 800fe5c:	011b      	lsls	r3, r3, #4
 800fe5e:	401a      	ands	r2, r3
 800fe60:	2380      	movs	r3, #128	@ 0x80
 800fe62:	011b      	lsls	r3, r3, #4
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d10a      	bne.n	800fe7e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800fe68:	4b27      	ldr	r3, [pc, #156]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fe6a:	695b      	ldr	r3, [r3, #20]
 800fe6c:	2204      	movs	r2, #4
 800fe6e:	431a      	orrs	r2, r3
 800fe70:	4b25      	ldr	r3, [pc, #148]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fe72:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2280      	movs	r2, #128	@ 0x80
 800fe78:	0112      	lsls	r2, r2, #4
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800fe7e:	4b21      	ldr	r3, [pc, #132]	@ (800ff04 <FLASH_SetErrorCode+0x130>)
 800fe80:	699a      	ldr	r2, [r3, #24]
 800fe82:	2380      	movs	r3, #128	@ 0x80
 800fe84:	019b      	lsls	r3, r3, #6
 800fe86:	401a      	ands	r2, r3
 800fe88:	2380      	movs	r3, #128	@ 0x80
 800fe8a:	019b      	lsls	r3, r3, #6
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d10a      	bne.n	800fea6 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fe90:	4b1d      	ldr	r3, [pc, #116]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fe92:	695b      	ldr	r3, [r3, #20]
 800fe94:	2210      	movs	r2, #16
 800fe96:	431a      	orrs	r2, r3
 800fe98:	4b1b      	ldr	r3, [pc, #108]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fe9a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2280      	movs	r2, #128	@ 0x80
 800fea0:	0192      	lsls	r2, r2, #6
 800fea2:	4313      	orrs	r3, r2
 800fea4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800fea6:	4b17      	ldr	r3, [pc, #92]	@ (800ff04 <FLASH_SetErrorCode+0x130>)
 800fea8:	699a      	ldr	r2, [r3, #24]
 800feaa:	2380      	movs	r3, #128	@ 0x80
 800feac:	029b      	lsls	r3, r3, #10
 800feae:	401a      	ands	r2, r3
 800feb0:	2380      	movs	r3, #128	@ 0x80
 800feb2:	029b      	lsls	r3, r3, #10
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d109      	bne.n	800fecc <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800feb8:	4b13      	ldr	r3, [pc, #76]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800feba:	695b      	ldr	r3, [r3, #20]
 800febc:	2220      	movs	r2, #32
 800febe:	431a      	orrs	r2, r3
 800fec0:	4b11      	ldr	r3, [pc, #68]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fec2:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2220      	movs	r2, #32
 800fec8:	4313      	orrs	r3, r2
 800feca:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800fecc:	4b0d      	ldr	r3, [pc, #52]	@ (800ff04 <FLASH_SetErrorCode+0x130>)
 800fece:	699a      	ldr	r2, [r3, #24]
 800fed0:	2380      	movs	r3, #128	@ 0x80
 800fed2:	025b      	lsls	r3, r3, #9
 800fed4:	401a      	ands	r2, r3
 800fed6:	2380      	movs	r3, #128	@ 0x80
 800fed8:	025b      	lsls	r3, r3, #9
 800feda:	429a      	cmp	r2, r3
 800fedc:	d10a      	bne.n	800fef4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800fede:	4b0a      	ldr	r3, [pc, #40]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fee0:	695b      	ldr	r3, [r3, #20]
 800fee2:	2240      	movs	r2, #64	@ 0x40
 800fee4:	431a      	orrs	r2, r3
 800fee6:	4b08      	ldr	r3, [pc, #32]	@ (800ff08 <FLASH_SetErrorCode+0x134>)
 800fee8:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2280      	movs	r2, #128	@ 0x80
 800feee:	0252      	lsls	r2, r2, #9
 800fef0:	4313      	orrs	r3, r2
 800fef2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800fef4:	4b03      	ldr	r3, [pc, #12]	@ (800ff04 <FLASH_SetErrorCode+0x130>)
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	619a      	str	r2, [r3, #24]
}  
 800fefa:	46c0      	nop			@ (mov r8, r8)
 800fefc:	46bd      	mov	sp, r7
 800fefe:	b002      	add	sp, #8
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	46c0      	nop			@ (mov r8, r8)
 800ff04:	40022000 	.word	0x40022000
 800ff08:	200023cc 	.word	0x200023cc

0800ff0c <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ff12:	4b12      	ldr	r3, [pc, #72]	@ (800ff5c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	2201      	movs	r2, #1
 800ff18:	4013      	ands	r3, r2
 800ff1a:	d019      	beq.n	800ff50 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ff20:	607b      	str	r3, [r7, #4]
  return(result);
 800ff22:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800ff24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff26:	b672      	cpsid	i
}
 800ff28:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800ff2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ff5c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff2c:	4a0c      	ldr	r2, [pc, #48]	@ (800ff60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800ff2e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800ff30:	4b0a      	ldr	r3, [pc, #40]	@ (800ff5c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff32:	4a0c      	ldr	r2, [pc, #48]	@ (800ff64 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800ff34:	60da      	str	r2, [r3, #12]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	f383 8810 	msr	PRIMASK, r3
}
 800ff40:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ff42:	4b06      	ldr	r3, [pc, #24]	@ (800ff5c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	2201      	movs	r2, #1
 800ff48:	4013      	ands	r3, r2
 800ff4a:	d001      	beq.n	800ff50 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e000      	b.n	800ff52 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	0018      	movs	r0, r3
 800ff54:	46bd      	mov	sp, r7
 800ff56:	b004      	add	sp, #16
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	46c0      	nop			@ (mov r8, r8)
 800ff5c:	40022000 	.word	0x40022000
 800ff60:	89abcdef 	.word	0x89abcdef
 800ff64:	02030405 	.word	0x02030405

0800ff68 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800ff6c:	4b04      	ldr	r3, [pc, #16]	@ (800ff80 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ff6e:	685a      	ldr	r2, [r3, #4]
 800ff70:	4b03      	ldr	r3, [pc, #12]	@ (800ff80 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ff72:	2101      	movs	r1, #1
 800ff74:	430a      	orrs	r2, r1
 800ff76:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800ff78:	2300      	movs	r3, #0
}
 800ff7a:	0018      	movs	r0, r3
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	40022000 	.word	0x40022000

0800ff84 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800ff84:	b5b0      	push	{r4, r5, r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ff8c:	250f      	movs	r5, #15
 800ff8e:	197b      	adds	r3, r7, r5
 800ff90:	2200      	movs	r2, #0
 800ff92:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ff94:	197c      	adds	r4, r7, r5
 800ff96:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ff98:	0018      	movs	r0, r3
 800ff9a:	f7ff fea9 	bl	800fcf0 <FLASH_WaitForLastOperation>
 800ff9e:	0003      	movs	r3, r0
 800ffa0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ffa2:	0029      	movs	r1, r5
 800ffa4:	187b      	adds	r3, r7, r1
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d10c      	bne.n	800ffc6 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ffac:	4b0a      	ldr	r3, [pc, #40]	@ (800ffd8 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800ffae:	2200      	movs	r2, #0
 800ffb0:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ffb8:	187c      	adds	r4, r7, r1
 800ffba:	4b06      	ldr	r3, [pc, #24]	@ (800ffd4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ffbc:	0018      	movs	r0, r3
 800ffbe:	f7ff fe97 	bl	800fcf0 <FLASH_WaitForLastOperation>
 800ffc2:	0003      	movs	r3, r0
 800ffc4:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800ffc6:	230f      	movs	r3, #15
 800ffc8:	18fb      	adds	r3, r7, r3
 800ffca:	781b      	ldrb	r3, [r3, #0]
}  
 800ffcc:	0018      	movs	r0, r3
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	b004      	add	sp, #16
 800ffd2:	bdb0      	pop	{r4, r5, r7, pc}
 800ffd4:	0000c350 	.word	0x0000c350
 800ffd8:	200023cc 	.word	0x200023cc

0800ffdc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800ffdc:	b5b0      	push	{r4, r5, r7, lr}
 800ffde:	b086      	sub	sp, #24
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ffe8:	2317      	movs	r3, #23
 800ffea:	18fb      	adds	r3, r7, r3
 800ffec:	2201      	movs	r2, #1
 800ffee:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fff0:	4b24      	ldr	r3, [pc, #144]	@ (8010084 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fff2:	7c1b      	ldrb	r3, [r3, #16]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d101      	bne.n	800fffc <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800fff8:	2302      	movs	r3, #2
 800fffa:	e03e      	b.n	801007a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800fffc:	4b21      	ldr	r3, [pc, #132]	@ (8010084 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fffe:	2201      	movs	r2, #1
 8010000:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010002:	2517      	movs	r5, #23
 8010004:	197c      	adds	r4, r7, r5
 8010006:	4b20      	ldr	r3, [pc, #128]	@ (8010088 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8010008:	0018      	movs	r0, r3
 801000a:	f7ff fe71 	bl	800fcf0 <FLASH_WaitForLastOperation>
 801000e:	0003      	movs	r3, r0
 8010010:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8010012:	197b      	adds	r3, r7, r5
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d129      	bne.n	801006e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801001a:	4b1a      	ldr	r3, [pc, #104]	@ (8010084 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801001c:	2200      	movs	r2, #0
 801001e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2b02      	cmp	r3, #2
 8010024:	d103      	bne.n	801002e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	601a      	str	r2, [r3, #0]
 801002c:	e013      	b.n	8010056 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2b01      	cmp	r3, #1
 8010032:	d104      	bne.n	801003e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	b292      	uxth	r2, r2
 801003a:	801a      	strh	r2, [r3, #0]
 801003c:	e00b      	b.n	8010056 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d104      	bne.n	801004e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	b2d2      	uxtb	r2, r2
 801004a:	701a      	strb	r2, [r3, #0]
 801004c:	e003      	b.n	8010056 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 801004e:	2317      	movs	r3, #23
 8010050:	18fb      	adds	r3, r7, r3
 8010052:	2201      	movs	r2, #1
 8010054:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8010056:	2217      	movs	r2, #23
 8010058:	18bb      	adds	r3, r7, r2
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d106      	bne.n	801006e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010060:	18bc      	adds	r4, r7, r2
 8010062:	4b09      	ldr	r3, [pc, #36]	@ (8010088 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8010064:	0018      	movs	r0, r3
 8010066:	f7ff fe43 	bl	800fcf0 <FLASH_WaitForLastOperation>
 801006a:	0003      	movs	r3, r0
 801006c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801006e:	4b05      	ldr	r3, [pc, #20]	@ (8010084 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010070:	2200      	movs	r2, #0
 8010072:	741a      	strb	r2, [r3, #16]

  return status;
 8010074:	2317      	movs	r3, #23
 8010076:	18fb      	adds	r3, r7, r3
 8010078:	781b      	ldrb	r3, [r3, #0]
}
 801007a:	0018      	movs	r0, r3
 801007c:	46bd      	mov	sp, r7
 801007e:	b006      	add	sp, #24
 8010080:	bdb0      	pop	{r4, r5, r7, pc}
 8010082:	46c0      	nop			@ (mov r8, r8)
 8010084:	200023cc 	.word	0x200023cc
 8010088:	0000c350 	.word	0x0000c350

0801008c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8010096:	2300      	movs	r3, #0
 8010098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801009a:	2300      	movs	r3, #0
 801009c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 801009e:	2300      	movs	r3, #0
 80100a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80100a2:	e155      	b.n	8010350 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2101      	movs	r1, #1
 80100aa:	697a      	ldr	r2, [r7, #20]
 80100ac:	4091      	lsls	r1, r2
 80100ae:	000a      	movs	r2, r1
 80100b0:	4013      	ands	r3, r2
 80100b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d100      	bne.n	80100bc <HAL_GPIO_Init+0x30>
 80100ba:	e146      	b.n	801034a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	2203      	movs	r2, #3
 80100c2:	4013      	ands	r3, r2
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d005      	beq.n	80100d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	2203      	movs	r2, #3
 80100ce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	d130      	bne.n	8010136 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	005b      	lsls	r3, r3, #1
 80100de:	2203      	movs	r2, #3
 80100e0:	409a      	lsls	r2, r3
 80100e2:	0013      	movs	r3, r2
 80100e4:	43da      	mvns	r2, r3
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	4013      	ands	r3, r2
 80100ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	68da      	ldr	r2, [r3, #12]
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	005b      	lsls	r3, r3, #1
 80100f4:	409a      	lsls	r2, r3
 80100f6:	0013      	movs	r3, r2
 80100f8:	693a      	ldr	r2, [r7, #16]
 80100fa:	4313      	orrs	r3, r2
 80100fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	693a      	ldr	r2, [r7, #16]
 8010102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801010a:	2201      	movs	r2, #1
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	409a      	lsls	r2, r3
 8010110:	0013      	movs	r3, r2
 8010112:	43da      	mvns	r2, r3
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	4013      	ands	r3, r2
 8010118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	091b      	lsrs	r3, r3, #4
 8010120:	2201      	movs	r2, #1
 8010122:	401a      	ands	r2, r3
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	409a      	lsls	r2, r3
 8010128:	0013      	movs	r3, r2
 801012a:	693a      	ldr	r2, [r7, #16]
 801012c:	4313      	orrs	r3, r2
 801012e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	693a      	ldr	r2, [r7, #16]
 8010134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	2203      	movs	r2, #3
 801013c:	4013      	ands	r3, r2
 801013e:	2b03      	cmp	r3, #3
 8010140:	d017      	beq.n	8010172 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	2203      	movs	r2, #3
 801014e:	409a      	lsls	r2, r3
 8010150:	0013      	movs	r3, r2
 8010152:	43da      	mvns	r2, r3
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	4013      	ands	r3, r2
 8010158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	689a      	ldr	r2, [r3, #8]
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	409a      	lsls	r2, r3
 8010164:	0013      	movs	r3, r2
 8010166:	693a      	ldr	r2, [r7, #16]
 8010168:	4313      	orrs	r3, r2
 801016a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	693a      	ldr	r2, [r7, #16]
 8010170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	2203      	movs	r2, #3
 8010178:	4013      	ands	r3, r2
 801017a:	2b02      	cmp	r3, #2
 801017c:	d123      	bne.n	80101c6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	08da      	lsrs	r2, r3, #3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	3208      	adds	r2, #8
 8010186:	0092      	lsls	r2, r2, #2
 8010188:	58d3      	ldr	r3, [r2, r3]
 801018a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	2207      	movs	r2, #7
 8010190:	4013      	ands	r3, r2
 8010192:	009b      	lsls	r3, r3, #2
 8010194:	220f      	movs	r2, #15
 8010196:	409a      	lsls	r2, r3
 8010198:	0013      	movs	r3, r2
 801019a:	43da      	mvns	r2, r3
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	4013      	ands	r3, r2
 80101a0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	691a      	ldr	r2, [r3, #16]
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	2107      	movs	r1, #7
 80101aa:	400b      	ands	r3, r1
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	409a      	lsls	r2, r3
 80101b0:	0013      	movs	r3, r2
 80101b2:	693a      	ldr	r2, [r7, #16]
 80101b4:	4313      	orrs	r3, r2
 80101b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	08da      	lsrs	r2, r3, #3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	3208      	adds	r2, #8
 80101c0:	0092      	lsls	r2, r2, #2
 80101c2:	6939      	ldr	r1, [r7, #16]
 80101c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	2203      	movs	r2, #3
 80101d2:	409a      	lsls	r2, r3
 80101d4:	0013      	movs	r3, r2
 80101d6:	43da      	mvns	r2, r3
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	4013      	ands	r3, r2
 80101dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	2203      	movs	r2, #3
 80101e4:	401a      	ands	r2, r3
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	409a      	lsls	r2, r3
 80101ec:	0013      	movs	r3, r2
 80101ee:	693a      	ldr	r2, [r7, #16]
 80101f0:	4313      	orrs	r3, r2
 80101f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	693a      	ldr	r2, [r7, #16]
 80101f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	685a      	ldr	r2, [r3, #4]
 80101fe:	23c0      	movs	r3, #192	@ 0xc0
 8010200:	029b      	lsls	r3, r3, #10
 8010202:	4013      	ands	r3, r2
 8010204:	d100      	bne.n	8010208 <HAL_GPIO_Init+0x17c>
 8010206:	e0a0      	b.n	801034a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010208:	4b57      	ldr	r3, [pc, #348]	@ (8010368 <HAL_GPIO_Init+0x2dc>)
 801020a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801020c:	4b56      	ldr	r3, [pc, #344]	@ (8010368 <HAL_GPIO_Init+0x2dc>)
 801020e:	2101      	movs	r1, #1
 8010210:	430a      	orrs	r2, r1
 8010212:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8010214:	4a55      	ldr	r2, [pc, #340]	@ (801036c <HAL_GPIO_Init+0x2e0>)
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	089b      	lsrs	r3, r3, #2
 801021a:	3302      	adds	r3, #2
 801021c:	009b      	lsls	r3, r3, #2
 801021e:	589b      	ldr	r3, [r3, r2]
 8010220:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	2203      	movs	r2, #3
 8010226:	4013      	ands	r3, r2
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	220f      	movs	r2, #15
 801022c:	409a      	lsls	r2, r3
 801022e:	0013      	movs	r3, r2
 8010230:	43da      	mvns	r2, r3
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	4013      	ands	r3, r2
 8010236:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	23a0      	movs	r3, #160	@ 0xa0
 801023c:	05db      	lsls	r3, r3, #23
 801023e:	429a      	cmp	r2, r3
 8010240:	d01f      	beq.n	8010282 <HAL_GPIO_Init+0x1f6>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	4a4a      	ldr	r2, [pc, #296]	@ (8010370 <HAL_GPIO_Init+0x2e4>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d019      	beq.n	801027e <HAL_GPIO_Init+0x1f2>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4a49      	ldr	r2, [pc, #292]	@ (8010374 <HAL_GPIO_Init+0x2e8>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d013      	beq.n	801027a <HAL_GPIO_Init+0x1ee>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	4a48      	ldr	r2, [pc, #288]	@ (8010378 <HAL_GPIO_Init+0x2ec>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d00d      	beq.n	8010276 <HAL_GPIO_Init+0x1ea>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	4a47      	ldr	r2, [pc, #284]	@ (801037c <HAL_GPIO_Init+0x2f0>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d007      	beq.n	8010272 <HAL_GPIO_Init+0x1e6>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4a46      	ldr	r2, [pc, #280]	@ (8010380 <HAL_GPIO_Init+0x2f4>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d101      	bne.n	801026e <HAL_GPIO_Init+0x1e2>
 801026a:	2305      	movs	r3, #5
 801026c:	e00a      	b.n	8010284 <HAL_GPIO_Init+0x1f8>
 801026e:	2306      	movs	r3, #6
 8010270:	e008      	b.n	8010284 <HAL_GPIO_Init+0x1f8>
 8010272:	2304      	movs	r3, #4
 8010274:	e006      	b.n	8010284 <HAL_GPIO_Init+0x1f8>
 8010276:	2303      	movs	r3, #3
 8010278:	e004      	b.n	8010284 <HAL_GPIO_Init+0x1f8>
 801027a:	2302      	movs	r3, #2
 801027c:	e002      	b.n	8010284 <HAL_GPIO_Init+0x1f8>
 801027e:	2301      	movs	r3, #1
 8010280:	e000      	b.n	8010284 <HAL_GPIO_Init+0x1f8>
 8010282:	2300      	movs	r3, #0
 8010284:	697a      	ldr	r2, [r7, #20]
 8010286:	2103      	movs	r1, #3
 8010288:	400a      	ands	r2, r1
 801028a:	0092      	lsls	r2, r2, #2
 801028c:	4093      	lsls	r3, r2
 801028e:	693a      	ldr	r2, [r7, #16]
 8010290:	4313      	orrs	r3, r2
 8010292:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010294:	4935      	ldr	r1, [pc, #212]	@ (801036c <HAL_GPIO_Init+0x2e0>)
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	089b      	lsrs	r3, r3, #2
 801029a:	3302      	adds	r3, #2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	693a      	ldr	r2, [r7, #16]
 80102a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80102a2:	4b38      	ldr	r3, [pc, #224]	@ (8010384 <HAL_GPIO_Init+0x2f8>)
 80102a4:	689b      	ldr	r3, [r3, #8]
 80102a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	43da      	mvns	r2, r3
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	4013      	ands	r3, r2
 80102b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	685a      	ldr	r2, [r3, #4]
 80102b6:	2380      	movs	r3, #128	@ 0x80
 80102b8:	035b      	lsls	r3, r3, #13
 80102ba:	4013      	ands	r3, r2
 80102bc:	d003      	beq.n	80102c6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80102be:	693a      	ldr	r2, [r7, #16]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	4313      	orrs	r3, r2
 80102c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80102c6:	4b2f      	ldr	r3, [pc, #188]	@ (8010384 <HAL_GPIO_Init+0x2f8>)
 80102c8:	693a      	ldr	r2, [r7, #16]
 80102ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80102cc:	4b2d      	ldr	r3, [pc, #180]	@ (8010384 <HAL_GPIO_Init+0x2f8>)
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	43da      	mvns	r2, r3
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	4013      	ands	r3, r2
 80102da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	685a      	ldr	r2, [r3, #4]
 80102e0:	2380      	movs	r3, #128	@ 0x80
 80102e2:	039b      	lsls	r3, r3, #14
 80102e4:	4013      	ands	r3, r2
 80102e6:	d003      	beq.n	80102f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80102e8:	693a      	ldr	r2, [r7, #16]
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	4313      	orrs	r3, r2
 80102ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80102f0:	4b24      	ldr	r3, [pc, #144]	@ (8010384 <HAL_GPIO_Init+0x2f8>)
 80102f2:	693a      	ldr	r2, [r7, #16]
 80102f4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80102f6:	4b23      	ldr	r3, [pc, #140]	@ (8010384 <HAL_GPIO_Init+0x2f8>)
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	43da      	mvns	r2, r3
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	4013      	ands	r3, r2
 8010304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	685a      	ldr	r2, [r3, #4]
 801030a:	2380      	movs	r3, #128	@ 0x80
 801030c:	029b      	lsls	r3, r3, #10
 801030e:	4013      	ands	r3, r2
 8010310:	d003      	beq.n	801031a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	4313      	orrs	r3, r2
 8010318:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801031a:	4b1a      	ldr	r3, [pc, #104]	@ (8010384 <HAL_GPIO_Init+0x2f8>)
 801031c:	693a      	ldr	r2, [r7, #16]
 801031e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010320:	4b18      	ldr	r3, [pc, #96]	@ (8010384 <HAL_GPIO_Init+0x2f8>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	43da      	mvns	r2, r3
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	4013      	ands	r3, r2
 801032e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	685a      	ldr	r2, [r3, #4]
 8010334:	2380      	movs	r3, #128	@ 0x80
 8010336:	025b      	lsls	r3, r3, #9
 8010338:	4013      	ands	r3, r2
 801033a:	d003      	beq.n	8010344 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 801033c:	693a      	ldr	r2, [r7, #16]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	4313      	orrs	r3, r2
 8010342:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010344:	4b0f      	ldr	r3, [pc, #60]	@ (8010384 <HAL_GPIO_Init+0x2f8>)
 8010346:	693a      	ldr	r2, [r7, #16]
 8010348:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	3301      	adds	r3, #1
 801034e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	681a      	ldr	r2, [r3, #0]
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	40da      	lsrs	r2, r3
 8010358:	1e13      	subs	r3, r2, #0
 801035a:	d000      	beq.n	801035e <HAL_GPIO_Init+0x2d2>
 801035c:	e6a2      	b.n	80100a4 <HAL_GPIO_Init+0x18>
  }
}
 801035e:	46c0      	nop			@ (mov r8, r8)
 8010360:	46c0      	nop			@ (mov r8, r8)
 8010362:	46bd      	mov	sp, r7
 8010364:	b006      	add	sp, #24
 8010366:	bd80      	pop	{r7, pc}
 8010368:	40021000 	.word	0x40021000
 801036c:	40010000 	.word	0x40010000
 8010370:	50000400 	.word	0x50000400
 8010374:	50000800 	.word	0x50000800
 8010378:	50000c00 	.word	0x50000c00
 801037c:	50001000 	.word	0x50001000
 8010380:	50001c00 	.word	0x50001c00
 8010384:	40010400 	.word	0x40010400

08010388 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	000a      	movs	r2, r1
 8010392:	1cbb      	adds	r3, r7, #2
 8010394:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	691b      	ldr	r3, [r3, #16]
 801039a:	1cba      	adds	r2, r7, #2
 801039c:	8812      	ldrh	r2, [r2, #0]
 801039e:	4013      	ands	r3, r2
 80103a0:	d004      	beq.n	80103ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80103a2:	230f      	movs	r3, #15
 80103a4:	18fb      	adds	r3, r7, r3
 80103a6:	2201      	movs	r2, #1
 80103a8:	701a      	strb	r2, [r3, #0]
 80103aa:	e003      	b.n	80103b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80103ac:	230f      	movs	r3, #15
 80103ae:	18fb      	adds	r3, r7, r3
 80103b0:	2200      	movs	r2, #0
 80103b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80103b4:	230f      	movs	r3, #15
 80103b6:	18fb      	adds	r3, r7, r3
 80103b8:	781b      	ldrb	r3, [r3, #0]
}
 80103ba:	0018      	movs	r0, r3
 80103bc:	46bd      	mov	sp, r7
 80103be:	b004      	add	sp, #16
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b082      	sub	sp, #8
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	0008      	movs	r0, r1
 80103cc:	0011      	movs	r1, r2
 80103ce:	1cbb      	adds	r3, r7, #2
 80103d0:	1c02      	adds	r2, r0, #0
 80103d2:	801a      	strh	r2, [r3, #0]
 80103d4:	1c7b      	adds	r3, r7, #1
 80103d6:	1c0a      	adds	r2, r1, #0
 80103d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80103da:	1c7b      	adds	r3, r7, #1
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d004      	beq.n	80103ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80103e2:	1cbb      	adds	r3, r7, #2
 80103e4:	881a      	ldrh	r2, [r3, #0]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80103ea:	e003      	b.n	80103f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80103ec:	1cbb      	adds	r3, r7, #2
 80103ee:	881a      	ldrh	r2, [r3, #0]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80103f4:	46c0      	nop			@ (mov r8, r8)
 80103f6:	46bd      	mov	sp, r7
 80103f8:	b002      	add	sp, #8
 80103fa:	bd80      	pop	{r7, pc}

080103fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	0002      	movs	r2, r0
 8010404:	1dbb      	adds	r3, r7, #6
 8010406:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010408:	4b09      	ldr	r3, [pc, #36]	@ (8010430 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801040a:	695b      	ldr	r3, [r3, #20]
 801040c:	1dba      	adds	r2, r7, #6
 801040e:	8812      	ldrh	r2, [r2, #0]
 8010410:	4013      	ands	r3, r2
 8010412:	d008      	beq.n	8010426 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010414:	4b06      	ldr	r3, [pc, #24]	@ (8010430 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8010416:	1dba      	adds	r2, r7, #6
 8010418:	8812      	ldrh	r2, [r2, #0]
 801041a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801041c:	1dbb      	adds	r3, r7, #6
 801041e:	881b      	ldrh	r3, [r3, #0]
 8010420:	0018      	movs	r0, r3
 8010422:	f7f7 ff69 	bl	80082f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8010426:	46c0      	nop			@ (mov r8, r8)
 8010428:	46bd      	mov	sp, r7
 801042a:	b002      	add	sp, #8
 801042c:	bd80      	pop	{r7, pc}
 801042e:	46c0      	nop			@ (mov r8, r8)
 8010430:	40010400 	.word	0x40010400

08010434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d101      	bne.n	8010446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010442:	2301      	movs	r3, #1
 8010444:	e082      	b.n	801054c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2241      	movs	r2, #65	@ 0x41
 801044a:	5c9b      	ldrb	r3, [r3, r2]
 801044c:	b2db      	uxtb	r3, r3
 801044e:	2b00      	cmp	r3, #0
 8010450:	d107      	bne.n	8010462 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2240      	movs	r2, #64	@ 0x40
 8010456:	2100      	movs	r1, #0
 8010458:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	0018      	movs	r0, r3
 801045e:	f7f7 fa29 	bl	80078b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2241      	movs	r2, #65	@ 0x41
 8010466:	2124      	movs	r1, #36	@ 0x24
 8010468:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	681a      	ldr	r2, [r3, #0]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2101      	movs	r1, #1
 8010476:	438a      	bics	r2, r1
 8010478:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	685a      	ldr	r2, [r3, #4]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4934      	ldr	r1, [pc, #208]	@ (8010554 <HAL_I2C_Init+0x120>)
 8010484:	400a      	ands	r2, r1
 8010486:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	689a      	ldr	r2, [r3, #8]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4931      	ldr	r1, [pc, #196]	@ (8010558 <HAL_I2C_Init+0x124>)
 8010494:	400a      	ands	r2, r1
 8010496:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d108      	bne.n	80104b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	689a      	ldr	r2, [r3, #8]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2180      	movs	r1, #128	@ 0x80
 80104aa:	0209      	lsls	r1, r1, #8
 80104ac:	430a      	orrs	r2, r1
 80104ae:	609a      	str	r2, [r3, #8]
 80104b0:	e007      	b.n	80104c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	689a      	ldr	r2, [r3, #8]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	2184      	movs	r1, #132	@ 0x84
 80104bc:	0209      	lsls	r1, r1, #8
 80104be:	430a      	orrs	r2, r1
 80104c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d104      	bne.n	80104d4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	2280      	movs	r2, #128	@ 0x80
 80104d0:	0112      	lsls	r2, r2, #4
 80104d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	685a      	ldr	r2, [r3, #4]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	491f      	ldr	r1, [pc, #124]	@ (801055c <HAL_I2C_Init+0x128>)
 80104e0:	430a      	orrs	r2, r1
 80104e2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	68da      	ldr	r2, [r3, #12]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	491a      	ldr	r1, [pc, #104]	@ (8010558 <HAL_I2C_Init+0x124>)
 80104f0:	400a      	ands	r2, r1
 80104f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	691a      	ldr	r2, [r3, #16]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	695b      	ldr	r3, [r3, #20]
 80104fc:	431a      	orrs	r2, r3
 80104fe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	699b      	ldr	r3, [r3, #24]
 8010504:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	430a      	orrs	r2, r1
 801050c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	69d9      	ldr	r1, [r3, #28]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6a1a      	ldr	r2, [r3, #32]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	430a      	orrs	r2, r1
 801051c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2101      	movs	r1, #1
 801052a:	430a      	orrs	r2, r1
 801052c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2241      	movs	r2, #65	@ 0x41
 8010538:	2120      	movs	r1, #32
 801053a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2200      	movs	r2, #0
 8010540:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2242      	movs	r2, #66	@ 0x42
 8010546:	2100      	movs	r1, #0
 8010548:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801054a:	2300      	movs	r3, #0
}
 801054c:	0018      	movs	r0, r3
 801054e:	46bd      	mov	sp, r7
 8010550:	b002      	add	sp, #8
 8010552:	bd80      	pop	{r7, pc}
 8010554:	f0ffffff 	.word	0xf0ffffff
 8010558:	ffff7fff 	.word	0xffff7fff
 801055c:	02008000 	.word	0x02008000

08010560 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010560:	b590      	push	{r4, r7, lr}
 8010562:	b089      	sub	sp, #36	@ 0x24
 8010564:	af02      	add	r7, sp, #8
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	0008      	movs	r0, r1
 801056a:	607a      	str	r2, [r7, #4]
 801056c:	0019      	movs	r1, r3
 801056e:	230a      	movs	r3, #10
 8010570:	18fb      	adds	r3, r7, r3
 8010572:	1c02      	adds	r2, r0, #0
 8010574:	801a      	strh	r2, [r3, #0]
 8010576:	2308      	movs	r3, #8
 8010578:	18fb      	adds	r3, r7, r3
 801057a:	1c0a      	adds	r2, r1, #0
 801057c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2241      	movs	r2, #65	@ 0x41
 8010582:	5c9b      	ldrb	r3, [r3, r2]
 8010584:	b2db      	uxtb	r3, r3
 8010586:	2b20      	cmp	r3, #32
 8010588:	d000      	beq.n	801058c <HAL_I2C_Master_Transmit+0x2c>
 801058a:	e0e7      	b.n	801075c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2240      	movs	r2, #64	@ 0x40
 8010590:	5c9b      	ldrb	r3, [r3, r2]
 8010592:	2b01      	cmp	r3, #1
 8010594:	d101      	bne.n	801059a <HAL_I2C_Master_Transmit+0x3a>
 8010596:	2302      	movs	r3, #2
 8010598:	e0e1      	b.n	801075e <HAL_I2C_Master_Transmit+0x1fe>
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2240      	movs	r2, #64	@ 0x40
 801059e:	2101      	movs	r1, #1
 80105a0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80105a2:	f7fe fc7d 	bl	800eea0 <HAL_GetTick>
 80105a6:	0003      	movs	r3, r0
 80105a8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80105aa:	2380      	movs	r3, #128	@ 0x80
 80105ac:	0219      	lsls	r1, r3, #8
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	2319      	movs	r3, #25
 80105b6:	2201      	movs	r2, #1
 80105b8:	f001 ff98 	bl	80124ec <I2C_WaitOnFlagUntilTimeout>
 80105bc:	1e03      	subs	r3, r0, #0
 80105be:	d001      	beq.n	80105c4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80105c0:	2301      	movs	r3, #1
 80105c2:	e0cc      	b.n	801075e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2241      	movs	r2, #65	@ 0x41
 80105c8:	2121      	movs	r1, #33	@ 0x21
 80105ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	2242      	movs	r2, #66	@ 0x42
 80105d0:	2110      	movs	r1, #16
 80105d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2200      	movs	r2, #0
 80105d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2208      	movs	r2, #8
 80105e4:	18ba      	adds	r2, r7, r2
 80105e6:	8812      	ldrh	r2, [r2, #0]
 80105e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2200      	movs	r2, #0
 80105ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	2bff      	cmp	r3, #255	@ 0xff
 80105f8:	d911      	bls.n	801061e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	22ff      	movs	r2, #255	@ 0xff
 80105fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010604:	b2da      	uxtb	r2, r3
 8010606:	2380      	movs	r3, #128	@ 0x80
 8010608:	045c      	lsls	r4, r3, #17
 801060a:	230a      	movs	r3, #10
 801060c:	18fb      	adds	r3, r7, r3
 801060e:	8819      	ldrh	r1, [r3, #0]
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	4b55      	ldr	r3, [pc, #340]	@ (8010768 <HAL_I2C_Master_Transmit+0x208>)
 8010614:	9300      	str	r3, [sp, #0]
 8010616:	0023      	movs	r3, r4
 8010618:	f002 f9ba 	bl	8012990 <I2C_TransferConfig>
 801061c:	e075      	b.n	801070a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010622:	b29a      	uxth	r2, r3
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801062c:	b2da      	uxtb	r2, r3
 801062e:	2380      	movs	r3, #128	@ 0x80
 8010630:	049c      	lsls	r4, r3, #18
 8010632:	230a      	movs	r3, #10
 8010634:	18fb      	adds	r3, r7, r3
 8010636:	8819      	ldrh	r1, [r3, #0]
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	4b4b      	ldr	r3, [pc, #300]	@ (8010768 <HAL_I2C_Master_Transmit+0x208>)
 801063c:	9300      	str	r3, [sp, #0]
 801063e:	0023      	movs	r3, r4
 8010640:	f002 f9a6 	bl	8012990 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010644:	e061      	b.n	801070a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010646:	697a      	ldr	r2, [r7, #20]
 8010648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	0018      	movs	r0, r3
 801064e:	f001 ff9b 	bl	8012588 <I2C_WaitOnTXISFlagUntilTimeout>
 8010652:	1e03      	subs	r3, r0, #0
 8010654:	d001      	beq.n	801065a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8010656:	2301      	movs	r3, #1
 8010658:	e081      	b.n	801075e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801065e:	781a      	ldrb	r2, [r3, #0]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801066a:	1c5a      	adds	r2, r3, #1
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010674:	b29b      	uxth	r3, r3
 8010676:	3b01      	subs	r3, #1
 8010678:	b29a      	uxth	r2, r3
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010682:	3b01      	subs	r3, #1
 8010684:	b29a      	uxth	r2, r3
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801068e:	b29b      	uxth	r3, r3
 8010690:	2b00      	cmp	r3, #0
 8010692:	d03a      	beq.n	801070a <HAL_I2C_Master_Transmit+0x1aa>
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010698:	2b00      	cmp	r3, #0
 801069a:	d136      	bne.n	801070a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801069c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801069e:	68f8      	ldr	r0, [r7, #12]
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	0013      	movs	r3, r2
 80106a6:	2200      	movs	r2, #0
 80106a8:	2180      	movs	r1, #128	@ 0x80
 80106aa:	f001 ff1f 	bl	80124ec <I2C_WaitOnFlagUntilTimeout>
 80106ae:	1e03      	subs	r3, r0, #0
 80106b0:	d001      	beq.n	80106b6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80106b2:	2301      	movs	r3, #1
 80106b4:	e053      	b.n	801075e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	2bff      	cmp	r3, #255	@ 0xff
 80106be:	d911      	bls.n	80106e4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	22ff      	movs	r2, #255	@ 0xff
 80106c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106ca:	b2da      	uxtb	r2, r3
 80106cc:	2380      	movs	r3, #128	@ 0x80
 80106ce:	045c      	lsls	r4, r3, #17
 80106d0:	230a      	movs	r3, #10
 80106d2:	18fb      	adds	r3, r7, r3
 80106d4:	8819      	ldrh	r1, [r3, #0]
 80106d6:	68f8      	ldr	r0, [r7, #12]
 80106d8:	2300      	movs	r3, #0
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	0023      	movs	r3, r4
 80106de:	f002 f957 	bl	8012990 <I2C_TransferConfig>
 80106e2:	e012      	b.n	801070a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106f2:	b2da      	uxtb	r2, r3
 80106f4:	2380      	movs	r3, #128	@ 0x80
 80106f6:	049c      	lsls	r4, r3, #18
 80106f8:	230a      	movs	r3, #10
 80106fa:	18fb      	adds	r3, r7, r3
 80106fc:	8819      	ldrh	r1, [r3, #0]
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	2300      	movs	r3, #0
 8010702:	9300      	str	r3, [sp, #0]
 8010704:	0023      	movs	r3, r4
 8010706:	f002 f943 	bl	8012990 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801070e:	b29b      	uxth	r3, r3
 8010710:	2b00      	cmp	r3, #0
 8010712:	d198      	bne.n	8010646 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010714:	697a      	ldr	r2, [r7, #20]
 8010716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	0018      	movs	r0, r3
 801071c:	f001 ff7a 	bl	8012614 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010720:	1e03      	subs	r3, r0, #0
 8010722:	d001      	beq.n	8010728 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8010724:	2301      	movs	r3, #1
 8010726:	e01a      	b.n	801075e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	2220      	movs	r2, #32
 801072e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	685a      	ldr	r2, [r3, #4]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	490c      	ldr	r1, [pc, #48]	@ (801076c <HAL_I2C_Master_Transmit+0x20c>)
 801073c:	400a      	ands	r2, r1
 801073e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2241      	movs	r2, #65	@ 0x41
 8010744:	2120      	movs	r1, #32
 8010746:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2242      	movs	r2, #66	@ 0x42
 801074c:	2100      	movs	r1, #0
 801074e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2240      	movs	r2, #64	@ 0x40
 8010754:	2100      	movs	r1, #0
 8010756:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010758:	2300      	movs	r3, #0
 801075a:	e000      	b.n	801075e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 801075c:	2302      	movs	r3, #2
  }
}
 801075e:	0018      	movs	r0, r3
 8010760:	46bd      	mov	sp, r7
 8010762:	b007      	add	sp, #28
 8010764:	bd90      	pop	{r4, r7, pc}
 8010766:	46c0      	nop			@ (mov r8, r8)
 8010768:	80002000 	.word	0x80002000
 801076c:	fe00e800 	.word	0xfe00e800

08010770 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8010770:	b590      	push	{r4, r7, lr}
 8010772:	b089      	sub	sp, #36	@ 0x24
 8010774:	af02      	add	r7, sp, #8
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	0008      	movs	r0, r1
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	0019      	movs	r1, r3
 801077e:	230a      	movs	r3, #10
 8010780:	18fb      	adds	r3, r7, r3
 8010782:	1c02      	adds	r2, r0, #0
 8010784:	801a      	strh	r2, [r3, #0]
 8010786:	2308      	movs	r3, #8
 8010788:	18fb      	adds	r3, r7, r3
 801078a:	1c0a      	adds	r2, r1, #0
 801078c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2241      	movs	r2, #65	@ 0x41
 8010792:	5c9b      	ldrb	r3, [r3, r2]
 8010794:	b2db      	uxtb	r3, r3
 8010796:	2b20      	cmp	r3, #32
 8010798:	d000      	beq.n	801079c <HAL_I2C_Master_Receive+0x2c>
 801079a:	e0e8      	b.n	801096e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2240      	movs	r2, #64	@ 0x40
 80107a0:	5c9b      	ldrb	r3, [r3, r2]
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d101      	bne.n	80107aa <HAL_I2C_Master_Receive+0x3a>
 80107a6:	2302      	movs	r3, #2
 80107a8:	e0e2      	b.n	8010970 <HAL_I2C_Master_Receive+0x200>
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2240      	movs	r2, #64	@ 0x40
 80107ae:	2101      	movs	r1, #1
 80107b0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80107b2:	f7fe fb75 	bl	800eea0 <HAL_GetTick>
 80107b6:	0003      	movs	r3, r0
 80107b8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80107ba:	2380      	movs	r3, #128	@ 0x80
 80107bc:	0219      	lsls	r1, r3, #8
 80107be:	68f8      	ldr	r0, [r7, #12]
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	9300      	str	r3, [sp, #0]
 80107c4:	2319      	movs	r3, #25
 80107c6:	2201      	movs	r2, #1
 80107c8:	f001 fe90 	bl	80124ec <I2C_WaitOnFlagUntilTimeout>
 80107cc:	1e03      	subs	r3, r0, #0
 80107ce:	d001      	beq.n	80107d4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80107d0:	2301      	movs	r3, #1
 80107d2:	e0cd      	b.n	8010970 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2241      	movs	r2, #65	@ 0x41
 80107d8:	2122      	movs	r1, #34	@ 0x22
 80107da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2242      	movs	r2, #66	@ 0x42
 80107e0:	2110      	movs	r1, #16
 80107e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2200      	movs	r2, #0
 80107e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2208      	movs	r2, #8
 80107f4:	18ba      	adds	r2, r7, r2
 80107f6:	8812      	ldrh	r2, [r2, #0]
 80107f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010804:	b29b      	uxth	r3, r3
 8010806:	2bff      	cmp	r3, #255	@ 0xff
 8010808:	d911      	bls.n	801082e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	22ff      	movs	r2, #255	@ 0xff
 801080e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010814:	b2da      	uxtb	r2, r3
 8010816:	2380      	movs	r3, #128	@ 0x80
 8010818:	045c      	lsls	r4, r3, #17
 801081a:	230a      	movs	r3, #10
 801081c:	18fb      	adds	r3, r7, r3
 801081e:	8819      	ldrh	r1, [r3, #0]
 8010820:	68f8      	ldr	r0, [r7, #12]
 8010822:	4b55      	ldr	r3, [pc, #340]	@ (8010978 <HAL_I2C_Master_Receive+0x208>)
 8010824:	9300      	str	r3, [sp, #0]
 8010826:	0023      	movs	r3, r4
 8010828:	f002 f8b2 	bl	8012990 <I2C_TransferConfig>
 801082c:	e076      	b.n	801091c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010832:	b29a      	uxth	r2, r3
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801083c:	b2da      	uxtb	r2, r3
 801083e:	2380      	movs	r3, #128	@ 0x80
 8010840:	049c      	lsls	r4, r3, #18
 8010842:	230a      	movs	r3, #10
 8010844:	18fb      	adds	r3, r7, r3
 8010846:	8819      	ldrh	r1, [r3, #0]
 8010848:	68f8      	ldr	r0, [r7, #12]
 801084a:	4b4b      	ldr	r3, [pc, #300]	@ (8010978 <HAL_I2C_Master_Receive+0x208>)
 801084c:	9300      	str	r3, [sp, #0]
 801084e:	0023      	movs	r3, r4
 8010850:	f002 f89e 	bl	8012990 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010854:	e062      	b.n	801091c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010856:	697a      	ldr	r2, [r7, #20]
 8010858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	0018      	movs	r0, r3
 801085e:	f001 ff1d 	bl	801269c <I2C_WaitOnRXNEFlagUntilTimeout>
 8010862:	1e03      	subs	r3, r0, #0
 8010864:	d001      	beq.n	801086a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8010866:	2301      	movs	r3, #1
 8010868:	e082      	b.n	8010970 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010874:	b2d2      	uxtb	r2, r2
 8010876:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801087c:	1c5a      	adds	r2, r3, #1
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010886:	3b01      	subs	r3, #1
 8010888:	b29a      	uxth	r2, r3
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010892:	b29b      	uxth	r3, r3
 8010894:	3b01      	subs	r3, #1
 8010896:	b29a      	uxth	r2, r3
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d03a      	beq.n	801091c <HAL_I2C_Master_Receive+0x1ac>
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d136      	bne.n	801091c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80108ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108b0:	68f8      	ldr	r0, [r7, #12]
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	0013      	movs	r3, r2
 80108b8:	2200      	movs	r2, #0
 80108ba:	2180      	movs	r1, #128	@ 0x80
 80108bc:	f001 fe16 	bl	80124ec <I2C_WaitOnFlagUntilTimeout>
 80108c0:	1e03      	subs	r3, r0, #0
 80108c2:	d001      	beq.n	80108c8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80108c4:	2301      	movs	r3, #1
 80108c6:	e053      	b.n	8010970 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	2bff      	cmp	r3, #255	@ 0xff
 80108d0:	d911      	bls.n	80108f6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	22ff      	movs	r2, #255	@ 0xff
 80108d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108dc:	b2da      	uxtb	r2, r3
 80108de:	2380      	movs	r3, #128	@ 0x80
 80108e0:	045c      	lsls	r4, r3, #17
 80108e2:	230a      	movs	r3, #10
 80108e4:	18fb      	adds	r3, r7, r3
 80108e6:	8819      	ldrh	r1, [r3, #0]
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	2300      	movs	r3, #0
 80108ec:	9300      	str	r3, [sp, #0]
 80108ee:	0023      	movs	r3, r4
 80108f0:	f002 f84e 	bl	8012990 <I2C_TransferConfig>
 80108f4:	e012      	b.n	801091c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010904:	b2da      	uxtb	r2, r3
 8010906:	2380      	movs	r3, #128	@ 0x80
 8010908:	049c      	lsls	r4, r3, #18
 801090a:	230a      	movs	r3, #10
 801090c:	18fb      	adds	r3, r7, r3
 801090e:	8819      	ldrh	r1, [r3, #0]
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	2300      	movs	r3, #0
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	0023      	movs	r3, r4
 8010918:	f002 f83a 	bl	8012990 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010920:	b29b      	uxth	r3, r3
 8010922:	2b00      	cmp	r3, #0
 8010924:	d197      	bne.n	8010856 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010926:	697a      	ldr	r2, [r7, #20]
 8010928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	0018      	movs	r0, r3
 801092e:	f001 fe71 	bl	8012614 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010932:	1e03      	subs	r3, r0, #0
 8010934:	d001      	beq.n	801093a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8010936:	2301      	movs	r3, #1
 8010938:	e01a      	b.n	8010970 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2220      	movs	r2, #32
 8010940:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	685a      	ldr	r2, [r3, #4]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	490b      	ldr	r1, [pc, #44]	@ (801097c <HAL_I2C_Master_Receive+0x20c>)
 801094e:	400a      	ands	r2, r1
 8010950:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2241      	movs	r2, #65	@ 0x41
 8010956:	2120      	movs	r1, #32
 8010958:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2242      	movs	r2, #66	@ 0x42
 801095e:	2100      	movs	r1, #0
 8010960:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2240      	movs	r2, #64	@ 0x40
 8010966:	2100      	movs	r1, #0
 8010968:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801096a:	2300      	movs	r3, #0
 801096c:	e000      	b.n	8010970 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 801096e:	2302      	movs	r3, #2
  }
}
 8010970:	0018      	movs	r0, r3
 8010972:	46bd      	mov	sp, r7
 8010974:	b007      	add	sp, #28
 8010976:	bd90      	pop	{r4, r7, pc}
 8010978:	80002400 	.word	0x80002400
 801097c:	fe00e800 	.word	0xfe00e800

08010980 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8010980:	b5b0      	push	{r4, r5, r7, lr}
 8010982:	b088      	sub	sp, #32
 8010984:	af02      	add	r7, sp, #8
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	0008      	movs	r0, r1
 801098a:	607a      	str	r2, [r7, #4]
 801098c:	0019      	movs	r1, r3
 801098e:	230a      	movs	r3, #10
 8010990:	18fb      	adds	r3, r7, r3
 8010992:	1c02      	adds	r2, r0, #0
 8010994:	801a      	strh	r2, [r3, #0]
 8010996:	2308      	movs	r3, #8
 8010998:	18fb      	adds	r3, r7, r3
 801099a:	1c0a      	adds	r2, r1, #0
 801099c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2241      	movs	r2, #65	@ 0x41
 80109a2:	5c9b      	ldrb	r3, [r3, r2]
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	2b20      	cmp	r3, #32
 80109a8:	d000      	beq.n	80109ac <HAL_I2C_Master_Transmit_DMA+0x2c>
 80109aa:	e0dd      	b.n	8010b68 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	699a      	ldr	r2, [r3, #24]
 80109b2:	2380      	movs	r3, #128	@ 0x80
 80109b4:	021b      	lsls	r3, r3, #8
 80109b6:	401a      	ands	r2, r3
 80109b8:	2380      	movs	r3, #128	@ 0x80
 80109ba:	021b      	lsls	r3, r3, #8
 80109bc:	429a      	cmp	r2, r3
 80109be:	d101      	bne.n	80109c4 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80109c0:	2302      	movs	r3, #2
 80109c2:	e0d2      	b.n	8010b6a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2240      	movs	r2, #64	@ 0x40
 80109c8:	5c9b      	ldrb	r3, [r3, r2]
 80109ca:	2b01      	cmp	r3, #1
 80109cc:	d101      	bne.n	80109d2 <HAL_I2C_Master_Transmit_DMA+0x52>
 80109ce:	2302      	movs	r3, #2
 80109d0:	e0cb      	b.n	8010b6a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2240      	movs	r2, #64	@ 0x40
 80109d6:	2101      	movs	r1, #1
 80109d8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2241      	movs	r2, #65	@ 0x41
 80109de:	2121      	movs	r1, #33	@ 0x21
 80109e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2242      	movs	r2, #66	@ 0x42
 80109e6:	2110      	movs	r1, #16
 80109e8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2200      	movs	r2, #0
 80109ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2208      	movs	r2, #8
 80109fa:	18ba      	adds	r2, r7, r2
 80109fc:	8812      	ldrh	r2, [r2, #0]
 80109fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	4a5c      	ldr	r2, [pc, #368]	@ (8010b74 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8010a04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	4a5b      	ldr	r2, [pc, #364]	@ (8010b78 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8010a0a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	2bff      	cmp	r3, #255	@ 0xff
 8010a14:	d906      	bls.n	8010a24 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	22ff      	movs	r2, #255	@ 0xff
 8010a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010a1c:	2380      	movs	r3, #128	@ 0x80
 8010a1e:	045b      	lsls	r3, r3, #17
 8010a20:	617b      	str	r3, [r7, #20]
 8010a22:	e007      	b.n	8010a34 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010a2e:	2380      	movs	r3, #128	@ 0x80
 8010a30:	049b      	lsls	r3, r3, #18
 8010a32:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d100      	bne.n	8010a3e <HAL_I2C_Master_Transmit_DMA+0xbe>
 8010a3c:	e078      	b.n	8010b30 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d023      	beq.n	8010a8e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a4a:	4a4c      	ldr	r2, [pc, #304]	@ (8010b7c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8010a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a52:	4a4b      	ldr	r2, [pc, #300]	@ (8010b80 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010a54:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a62:	2200      	movs	r2, #0
 8010a64:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010a6a:	6879      	ldr	r1, [r7, #4]
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	3328      	adds	r3, #40	@ 0x28
 8010a72:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010a78:	2513      	movs	r5, #19
 8010a7a:	197c      	adds	r4, r7, r5
 8010a7c:	f7fe ff62 	bl	800f944 <HAL_DMA_Start_IT>
 8010a80:	0003      	movs	r3, r0
 8010a82:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010a84:	197b      	adds	r3, r7, r5
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d13d      	bne.n	8010b08 <HAL_I2C_Master_Transmit_DMA+0x188>
 8010a8c:	e013      	b.n	8010ab6 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2241      	movs	r2, #65	@ 0x41
 8010a92:	2120      	movs	r1, #32
 8010a94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2242      	movs	r2, #66	@ 0x42
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010aa2:	2280      	movs	r2, #128	@ 0x80
 8010aa4:	431a      	orrs	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2240      	movs	r2, #64	@ 0x40
 8010aae:	2100      	movs	r1, #0
 8010ab0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e059      	b.n	8010b6a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010aba:	b2da      	uxtb	r2, r3
 8010abc:	697c      	ldr	r4, [r7, #20]
 8010abe:	230a      	movs	r3, #10
 8010ac0:	18fb      	adds	r3, r7, r3
 8010ac2:	8819      	ldrh	r1, [r3, #0]
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8010b84 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010ac8:	9300      	str	r3, [sp, #0]
 8010aca:	0023      	movs	r3, r4
 8010acc:	f001 ff60 	bl	8012990 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ada:	1ad3      	subs	r3, r2, r3
 8010adc:	b29a      	uxth	r2, r3
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2240      	movs	r2, #64	@ 0x40
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2110      	movs	r1, #16
 8010aee:	0018      	movs	r0, r3
 8010af0:	f001 ff88 	bl	8012a04 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2180      	movs	r1, #128	@ 0x80
 8010b00:	01c9      	lsls	r1, r1, #7
 8010b02:	430a      	orrs	r2, r1
 8010b04:	601a      	str	r2, [r3, #0]
 8010b06:	e02d      	b.n	8010b64 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	2241      	movs	r2, #65	@ 0x41
 8010b0c:	2120      	movs	r1, #32
 8010b0e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2242      	movs	r2, #66	@ 0x42
 8010b14:	2100      	movs	r1, #0
 8010b16:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b1c:	2210      	movs	r2, #16
 8010b1e:	431a      	orrs	r2, r3
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2240      	movs	r2, #64	@ 0x40
 8010b28:	2100      	movs	r1, #0
 8010b2a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e01c      	b.n	8010b6a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	4a15      	ldr	r2, [pc, #84]	@ (8010b88 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010b34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	2380      	movs	r3, #128	@ 0x80
 8010b3e:	049c      	lsls	r4, r3, #18
 8010b40:	230a      	movs	r3, #10
 8010b42:	18fb      	adds	r3, r7, r3
 8010b44:	8819      	ldrh	r1, [r3, #0]
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	4b0e      	ldr	r3, [pc, #56]	@ (8010b84 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	0023      	movs	r3, r4
 8010b4e:	f001 ff1f 	bl	8012990 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2240      	movs	r2, #64	@ 0x40
 8010b56:	2100      	movs	r1, #0
 8010b58:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2101      	movs	r1, #1
 8010b5e:	0018      	movs	r0, r3
 8010b60:	f001 ff50 	bl	8012a04 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010b64:	2300      	movs	r3, #0
 8010b66:	e000      	b.n	8010b6a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010b68:	2302      	movs	r3, #2
  }
}
 8010b6a:	0018      	movs	r0, r3
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	b006      	add	sp, #24
 8010b70:	bdb0      	pop	{r4, r5, r7, pc}
 8010b72:	46c0      	nop			@ (mov r8, r8)
 8010b74:	ffff0000 	.word	0xffff0000
 8010b78:	08011385 	.word	0x08011385
 8010b7c:	0801233d 	.word	0x0801233d
 8010b80:	0801247d 	.word	0x0801247d
 8010b84:	80002000 	.word	0x80002000
 8010b88:	08010f31 	.word	0x08010f31

08010b8c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010b8c:	b5b0      	push	{r4, r5, r7, lr}
 8010b8e:	b088      	sub	sp, #32
 8010b90:	af02      	add	r7, sp, #8
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	0008      	movs	r0, r1
 8010b96:	607a      	str	r2, [r7, #4]
 8010b98:	0019      	movs	r1, r3
 8010b9a:	230a      	movs	r3, #10
 8010b9c:	18fb      	adds	r3, r7, r3
 8010b9e:	1c02      	adds	r2, r0, #0
 8010ba0:	801a      	strh	r2, [r3, #0]
 8010ba2:	2308      	movs	r3, #8
 8010ba4:	18fb      	adds	r3, r7, r3
 8010ba6:	1c0a      	adds	r2, r1, #0
 8010ba8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2241      	movs	r2, #65	@ 0x41
 8010bae:	5c9b      	ldrb	r3, [r3, r2]
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	2b20      	cmp	r3, #32
 8010bb4:	d000      	beq.n	8010bb8 <HAL_I2C_Master_Receive_DMA+0x2c>
 8010bb6:	e0dd      	b.n	8010d74 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	699a      	ldr	r2, [r3, #24]
 8010bbe:	2380      	movs	r3, #128	@ 0x80
 8010bc0:	021b      	lsls	r3, r3, #8
 8010bc2:	401a      	ands	r2, r3
 8010bc4:	2380      	movs	r3, #128	@ 0x80
 8010bc6:	021b      	lsls	r3, r3, #8
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d101      	bne.n	8010bd0 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010bcc:	2302      	movs	r3, #2
 8010bce:	e0d2      	b.n	8010d76 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2240      	movs	r2, #64	@ 0x40
 8010bd4:	5c9b      	ldrb	r3, [r3, r2]
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d101      	bne.n	8010bde <HAL_I2C_Master_Receive_DMA+0x52>
 8010bda:	2302      	movs	r3, #2
 8010bdc:	e0cb      	b.n	8010d76 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2240      	movs	r2, #64	@ 0x40
 8010be2:	2101      	movs	r1, #1
 8010be4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2241      	movs	r2, #65	@ 0x41
 8010bea:	2122      	movs	r1, #34	@ 0x22
 8010bec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2242      	movs	r2, #66	@ 0x42
 8010bf2:	2110      	movs	r1, #16
 8010bf4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2208      	movs	r2, #8
 8010c06:	18ba      	adds	r2, r7, r2
 8010c08:	8812      	ldrh	r2, [r2, #0]
 8010c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	4a5c      	ldr	r2, [pc, #368]	@ (8010d80 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010c10:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	4a5b      	ldr	r2, [pc, #364]	@ (8010d84 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010c16:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	2bff      	cmp	r3, #255	@ 0xff
 8010c20:	d906      	bls.n	8010c30 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	22ff      	movs	r2, #255	@ 0xff
 8010c26:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010c28:	2380      	movs	r3, #128	@ 0x80
 8010c2a:	045b      	lsls	r3, r3, #17
 8010c2c:	617b      	str	r3, [r7, #20]
 8010c2e:	e007      	b.n	8010c40 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c34:	b29a      	uxth	r2, r3
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010c3a:	2380      	movs	r3, #128	@ 0x80
 8010c3c:	049b      	lsls	r3, r3, #18
 8010c3e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d100      	bne.n	8010c4a <HAL_I2C_Master_Receive_DMA+0xbe>
 8010c48:	e078      	b.n	8010d3c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d023      	beq.n	8010c9a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c56:	4a4c      	ldr	r2, [pc, #304]	@ (8010d88 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010c58:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c5e:	4a4b      	ldr	r2, [pc, #300]	@ (8010d8c <HAL_I2C_Master_Receive_DMA+0x200>)
 8010c60:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c66:	2200      	movs	r2, #0
 8010c68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c6e:	2200      	movs	r2, #0
 8010c70:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	3324      	adds	r3, #36	@ 0x24
 8010c7c:	0019      	movs	r1, r3
 8010c7e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010c84:	2513      	movs	r5, #19
 8010c86:	197c      	adds	r4, r7, r5
 8010c88:	f7fe fe5c 	bl	800f944 <HAL_DMA_Start_IT>
 8010c8c:	0003      	movs	r3, r0
 8010c8e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010c90:	197b      	adds	r3, r7, r5
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d13d      	bne.n	8010d14 <HAL_I2C_Master_Receive_DMA+0x188>
 8010c98:	e013      	b.n	8010cc2 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2241      	movs	r2, #65	@ 0x41
 8010c9e:	2120      	movs	r1, #32
 8010ca0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	2242      	movs	r2, #66	@ 0x42
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cae:	2280      	movs	r2, #128	@ 0x80
 8010cb0:	431a      	orrs	r2, r3
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2240      	movs	r2, #64	@ 0x40
 8010cba:	2100      	movs	r1, #0
 8010cbc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	e059      	b.n	8010d76 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010cc6:	b2da      	uxtb	r2, r3
 8010cc8:	697c      	ldr	r4, [r7, #20]
 8010cca:	230a      	movs	r3, #10
 8010ccc:	18fb      	adds	r3, r7, r3
 8010cce:	8819      	ldrh	r1, [r3, #0]
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8010d90 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010cd4:	9300      	str	r3, [sp, #0]
 8010cd6:	0023      	movs	r3, r4
 8010cd8:	f001 fe5a 	bl	8012990 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	b29a      	uxth	r2, r3
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2240      	movs	r2, #64	@ 0x40
 8010cf2:	2100      	movs	r1, #0
 8010cf4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2110      	movs	r1, #16
 8010cfa:	0018      	movs	r0, r3
 8010cfc:	f001 fe82 	bl	8012a04 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2180      	movs	r1, #128	@ 0x80
 8010d0c:	0209      	lsls	r1, r1, #8
 8010d0e:	430a      	orrs	r2, r1
 8010d10:	601a      	str	r2, [r3, #0]
 8010d12:	e02d      	b.n	8010d70 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	2241      	movs	r2, #65	@ 0x41
 8010d18:	2120      	movs	r1, #32
 8010d1a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	2242      	movs	r2, #66	@ 0x42
 8010d20:	2100      	movs	r1, #0
 8010d22:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d28:	2210      	movs	r2, #16
 8010d2a:	431a      	orrs	r2, r3
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2240      	movs	r2, #64	@ 0x40
 8010d34:	2100      	movs	r1, #0
 8010d36:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	e01c      	b.n	8010d76 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	4a15      	ldr	r2, [pc, #84]	@ (8010d94 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010d40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d46:	b2da      	uxtb	r2, r3
 8010d48:	2380      	movs	r3, #128	@ 0x80
 8010d4a:	049c      	lsls	r4, r3, #18
 8010d4c:	230a      	movs	r3, #10
 8010d4e:	18fb      	adds	r3, r7, r3
 8010d50:	8819      	ldrh	r1, [r3, #0]
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	4b0e      	ldr	r3, [pc, #56]	@ (8010d90 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	0023      	movs	r3, r4
 8010d5a:	f001 fe19 	bl	8012990 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	2240      	movs	r2, #64	@ 0x40
 8010d62:	2100      	movs	r1, #0
 8010d64:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2101      	movs	r1, #1
 8010d6a:	0018      	movs	r0, r3
 8010d6c:	f001 fe4a 	bl	8012a04 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010d70:	2300      	movs	r3, #0
 8010d72:	e000      	b.n	8010d76 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010d74:	2302      	movs	r3, #2
  }
}
 8010d76:	0018      	movs	r0, r3
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	b006      	add	sp, #24
 8010d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8010d7e:	46c0      	nop			@ (mov r8, r8)
 8010d80:	ffff0000 	.word	0xffff0000
 8010d84:	08011385 	.word	0x08011385
 8010d88:	080123dd 	.word	0x080123dd
 8010d8c:	0801247d 	.word	0x0801247d
 8010d90:	80002400 	.word	0x80002400
 8010d94:	08010f31 	.word	0x08010f31

08010d98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	699b      	ldr	r3, [r3, #24]
 8010da6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d005      	beq.n	8010dc4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dbc:	68ba      	ldr	r2, [r7, #8]
 8010dbe:	68f9      	ldr	r1, [r7, #12]
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	4798      	blx	r3
  }
}
 8010dc4:	46c0      	nop			@ (mov r8, r8)
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	b004      	add	sp, #16
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b086      	sub	sp, #24
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	699b      	ldr	r3, [r3, #24]
 8010dda:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010de4:	697a      	ldr	r2, [r7, #20]
 8010de6:	2380      	movs	r3, #128	@ 0x80
 8010de8:	005b      	lsls	r3, r3, #1
 8010dea:	4013      	ands	r3, r2
 8010dec:	d00e      	beq.n	8010e0c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	2280      	movs	r2, #128	@ 0x80
 8010df2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010df4:	d00a      	beq.n	8010e0c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	431a      	orrs	r2, r3
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2280      	movs	r2, #128	@ 0x80
 8010e08:	0052      	lsls	r2, r2, #1
 8010e0a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010e0c:	697a      	ldr	r2, [r7, #20]
 8010e0e:	2380      	movs	r3, #128	@ 0x80
 8010e10:	00db      	lsls	r3, r3, #3
 8010e12:	4013      	ands	r3, r2
 8010e14:	d00e      	beq.n	8010e34 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	2280      	movs	r2, #128	@ 0x80
 8010e1a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010e1c:	d00a      	beq.n	8010e34 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e22:	2208      	movs	r2, #8
 8010e24:	431a      	orrs	r2, r3
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2280      	movs	r2, #128	@ 0x80
 8010e30:	00d2      	lsls	r2, r2, #3
 8010e32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010e34:	697a      	ldr	r2, [r7, #20]
 8010e36:	2380      	movs	r3, #128	@ 0x80
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	4013      	ands	r3, r2
 8010e3c:	d00e      	beq.n	8010e5c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	2280      	movs	r2, #128	@ 0x80
 8010e42:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010e44:	d00a      	beq.n	8010e5c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e4a:	2202      	movs	r2, #2
 8010e4c:	431a      	orrs	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	2280      	movs	r2, #128	@ 0x80
 8010e58:	0092      	lsls	r2, r2, #2
 8010e5a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e60:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	220b      	movs	r2, #11
 8010e66:	4013      	ands	r3, r2
 8010e68:	d005      	beq.n	8010e76 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010e6a:	68fa      	ldr	r2, [r7, #12]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	0011      	movs	r1, r2
 8010e70:	0018      	movs	r0, r3
 8010e72:	f001 f915 	bl	80120a0 <I2C_ITError>
  }
}
 8010e76:	46c0      	nop			@ (mov r8, r8)
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	b006      	add	sp, #24
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b082      	sub	sp, #8
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010e86:	46c0      	nop			@ (mov r8, r8)
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	b002      	add	sp, #8
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b082      	sub	sp, #8
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010e96:	46c0      	nop			@ (mov r8, r8)
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	b002      	add	sp, #8
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b082      	sub	sp, #8
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010ea6:	46c0      	nop			@ (mov r8, r8)
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	b002      	add	sp, #8
 8010eac:	bd80      	pop	{r7, pc}

08010eae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b082      	sub	sp, #8
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010eb6:	46c0      	nop			@ (mov r8, r8)
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	b002      	add	sp, #8
 8010ebc:	bd80      	pop	{r7, pc}

08010ebe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010ebe:	b580      	push	{r7, lr}
 8010ec0:	b082      	sub	sp, #8
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
 8010ec6:	0008      	movs	r0, r1
 8010ec8:	0011      	movs	r1, r2
 8010eca:	1cfb      	adds	r3, r7, #3
 8010ecc:	1c02      	adds	r2, r0, #0
 8010ece:	701a      	strb	r2, [r3, #0]
 8010ed0:	003b      	movs	r3, r7
 8010ed2:	1c0a      	adds	r2, r1, #0
 8010ed4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010ed6:	46c0      	nop			@ (mov r8, r8)
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	b002      	add	sp, #8
 8010edc:	bd80      	pop	{r7, pc}

08010ede <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b082      	sub	sp, #8
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010ee6:	46c0      	nop			@ (mov r8, r8)
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	b002      	add	sp, #8
 8010eec:	bd80      	pop	{r7, pc}

08010eee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	b082      	sub	sp, #8
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010ef6:	46c0      	nop			@ (mov r8, r8)
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	b002      	add	sp, #8
 8010efc:	bd80      	pop	{r7, pc}

08010efe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b082      	sub	sp, #8
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010f06:	46c0      	nop			@ (mov r8, r8)
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	b002      	add	sp, #8
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b082      	sub	sp, #8
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010f16:	46c0      	nop			@ (mov r8, r8)
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	b002      	add	sp, #8
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b082      	sub	sp, #8
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010f26:	46c0      	nop			@ (mov r8, r8)
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	b002      	add	sp, #8
 8010f2c:	bd80      	pop	{r7, pc}
	...

08010f30 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010f30:	b590      	push	{r4, r7, lr}
 8010f32:	b089      	sub	sp, #36	@ 0x24
 8010f34:	af02      	add	r7, sp, #8
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2240      	movs	r2, #64	@ 0x40
 8010f44:	5c9b      	ldrb	r3, [r3, r2]
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d101      	bne.n	8010f4e <I2C_Master_ISR_IT+0x1e>
 8010f4a:	2302      	movs	r3, #2
 8010f4c:	e113      	b.n	8011176 <I2C_Master_ISR_IT+0x246>
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2240      	movs	r2, #64	@ 0x40
 8010f52:	2101      	movs	r1, #1
 8010f54:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	2210      	movs	r2, #16
 8010f5a:	4013      	ands	r3, r2
 8010f5c:	d012      	beq.n	8010f84 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2210      	movs	r2, #16
 8010f62:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f64:	d00e      	beq.n	8010f84 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2210      	movs	r2, #16
 8010f6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f72:	2204      	movs	r2, #4
 8010f74:	431a      	orrs	r2, r3
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	0018      	movs	r0, r3
 8010f7e:	f001 f9ba 	bl	80122f6 <I2C_Flush_TXDR>
 8010f82:	e0e5      	b.n	8011150 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	2204      	movs	r2, #4
 8010f88:	4013      	ands	r3, r2
 8010f8a:	d021      	beq.n	8010fd0 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2204      	movs	r2, #4
 8010f90:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010f92:	d01d      	beq.n	8010fd0 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2204      	movs	r2, #4
 8010f98:	4393      	bics	r3, r2
 8010f9a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fa6:	b2d2      	uxtb	r2, r2
 8010fa8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fae:	1c5a      	adds	r2, r3, #1
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	3b01      	subs	r3, #1
 8010fc8:	b29a      	uxth	r2, r3
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010fce:	e0bf      	b.n	8011150 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	2202      	movs	r2, #2
 8010fd4:	4013      	ands	r3, r2
 8010fd6:	d01c      	beq.n	8011012 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2202      	movs	r2, #2
 8010fdc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010fde:	d018      	beq.n	8011012 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fe4:	781a      	ldrb	r2, [r3, #0]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff0:	1c5a      	adds	r2, r3, #1
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ffa:	3b01      	subs	r3, #1
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011006:	b29b      	uxth	r3, r3
 8011008:	3b01      	subs	r3, #1
 801100a:	b29a      	uxth	r2, r3
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011010:	e09e      	b.n	8011150 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	2280      	movs	r2, #128	@ 0x80
 8011016:	4013      	ands	r3, r2
 8011018:	d100      	bne.n	801101c <I2C_Master_ISR_IT+0xec>
 801101a:	e069      	b.n	80110f0 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2240      	movs	r2, #64	@ 0x40
 8011020:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8011022:	d065      	beq.n	80110f0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011028:	b29b      	uxth	r3, r3
 801102a:	2b00      	cmp	r3, #0
 801102c:	d04a      	beq.n	80110c4 <I2C_Master_ISR_IT+0x194>
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011032:	2b00      	cmp	r3, #0
 8011034:	d146      	bne.n	80110c4 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	b29a      	uxth	r2, r3
 801103e:	2112      	movs	r1, #18
 8011040:	187b      	adds	r3, r7, r1
 8011042:	0592      	lsls	r2, r2, #22
 8011044:	0d92      	lsrs	r2, r2, #22
 8011046:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801104c:	b29b      	uxth	r3, r3
 801104e:	2bff      	cmp	r3, #255	@ 0xff
 8011050:	d910      	bls.n	8011074 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	22ff      	movs	r2, #255	@ 0xff
 8011056:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801105c:	b2da      	uxtb	r2, r3
 801105e:	2380      	movs	r3, #128	@ 0x80
 8011060:	045c      	lsls	r4, r3, #17
 8011062:	187b      	adds	r3, r7, r1
 8011064:	8819      	ldrh	r1, [r3, #0]
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	2300      	movs	r3, #0
 801106a:	9300      	str	r3, [sp, #0]
 801106c:	0023      	movs	r3, r4
 801106e:	f001 fc8f 	bl	8012990 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011072:	e03c      	b.n	80110ee <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011078:	b29a      	uxth	r2, r3
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011082:	4a3f      	ldr	r2, [pc, #252]	@ (8011180 <I2C_Master_ISR_IT+0x250>)
 8011084:	4293      	cmp	r3, r2
 8011086:	d00e      	beq.n	80110a6 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801108c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011092:	2312      	movs	r3, #18
 8011094:	18fb      	adds	r3, r7, r3
 8011096:	8819      	ldrh	r1, [r3, #0]
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	2300      	movs	r3, #0
 801109c:	9300      	str	r3, [sp, #0]
 801109e:	0023      	movs	r3, r4
 80110a0:	f001 fc76 	bl	8012990 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110a4:	e023      	b.n	80110ee <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110aa:	b2da      	uxtb	r2, r3
 80110ac:	2380      	movs	r3, #128	@ 0x80
 80110ae:	049c      	lsls	r4, r3, #18
 80110b0:	2312      	movs	r3, #18
 80110b2:	18fb      	adds	r3, r7, r3
 80110b4:	8819      	ldrh	r1, [r3, #0]
 80110b6:	68f8      	ldr	r0, [r7, #12]
 80110b8:	2300      	movs	r3, #0
 80110ba:	9300      	str	r3, [sp, #0]
 80110bc:	0023      	movs	r3, r4
 80110be:	f001 fc67 	bl	8012990 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110c2:	e014      	b.n	80110ee <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	685a      	ldr	r2, [r3, #4]
 80110ca:	2380      	movs	r3, #128	@ 0x80
 80110cc:	049b      	lsls	r3, r3, #18
 80110ce:	401a      	ands	r2, r3
 80110d0:	2380      	movs	r3, #128	@ 0x80
 80110d2:	049b      	lsls	r3, r3, #18
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d004      	beq.n	80110e2 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	0018      	movs	r0, r3
 80110dc:	f000 fcf4 	bl	8011ac8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80110e0:	e036      	b.n	8011150 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2140      	movs	r1, #64	@ 0x40
 80110e6:	0018      	movs	r0, r3
 80110e8:	f000 ffda 	bl	80120a0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80110ec:	e030      	b.n	8011150 <I2C_Master_ISR_IT+0x220>
 80110ee:	e02f      	b.n	8011150 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	2240      	movs	r2, #64	@ 0x40
 80110f4:	4013      	ands	r3, r2
 80110f6:	d02b      	beq.n	8011150 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2240      	movs	r2, #64	@ 0x40
 80110fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80110fe:	d027      	beq.n	8011150 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011104:	b29b      	uxth	r3, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	d11d      	bne.n	8011146 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	685a      	ldr	r2, [r3, #4]
 8011110:	2380      	movs	r3, #128	@ 0x80
 8011112:	049b      	lsls	r3, r3, #18
 8011114:	401a      	ands	r2, r3
 8011116:	2380      	movs	r3, #128	@ 0x80
 8011118:	049b      	lsls	r3, r3, #18
 801111a:	429a      	cmp	r2, r3
 801111c:	d018      	beq.n	8011150 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011122:	4a17      	ldr	r2, [pc, #92]	@ (8011180 <I2C_Master_ISR_IT+0x250>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d109      	bne.n	801113c <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	685a      	ldr	r2, [r3, #4]
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2180      	movs	r1, #128	@ 0x80
 8011134:	01c9      	lsls	r1, r1, #7
 8011136:	430a      	orrs	r2, r1
 8011138:	605a      	str	r2, [r3, #4]
 801113a:	e009      	b.n	8011150 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	0018      	movs	r0, r3
 8011140:	f000 fcc2 	bl	8011ac8 <I2C_ITMasterSeqCplt>
 8011144:	e004      	b.n	8011150 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2140      	movs	r1, #64	@ 0x40
 801114a:	0018      	movs	r0, r3
 801114c:	f000 ffa8 	bl	80120a0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	2220      	movs	r2, #32
 8011154:	4013      	ands	r3, r2
 8011156:	d009      	beq.n	801116c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2220      	movs	r2, #32
 801115c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801115e:	d005      	beq.n	801116c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8011160:	697a      	ldr	r2, [r7, #20]
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	0011      	movs	r1, r2
 8011166:	0018      	movs	r0, r3
 8011168:	f000 fd54 	bl	8011c14 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2240      	movs	r2, #64	@ 0x40
 8011170:	2100      	movs	r1, #0
 8011172:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011174:	2300      	movs	r3, #0
}
 8011176:	0018      	movs	r0, r3
 8011178:	46bd      	mov	sp, r7
 801117a:	b007      	add	sp, #28
 801117c:	bd90      	pop	{r4, r7, pc}
 801117e:	46c0      	nop			@ (mov r8, r8)
 8011180:	ffff0000 	.word	0xffff0000

08011184 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b086      	sub	sp, #24
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011194:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2240      	movs	r2, #64	@ 0x40
 801119e:	5c9b      	ldrb	r3, [r3, r2]
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	d101      	bne.n	80111a8 <I2C_Slave_ISR_IT+0x24>
 80111a4:	2302      	movs	r3, #2
 80111a6:	e0e6      	b.n	8011376 <I2C_Slave_ISR_IT+0x1f2>
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	2240      	movs	r2, #64	@ 0x40
 80111ac:	2101      	movs	r1, #1
 80111ae:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	2220      	movs	r2, #32
 80111b4:	4013      	ands	r3, r2
 80111b6:	d009      	beq.n	80111cc <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2220      	movs	r2, #32
 80111bc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80111be:	d005      	beq.n	80111cc <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80111c0:	693a      	ldr	r2, [r7, #16]
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	0011      	movs	r1, r2
 80111c6:	0018      	movs	r0, r3
 80111c8:	f000 fdf2 	bl	8011db0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	2210      	movs	r2, #16
 80111d0:	4013      	ands	r3, r2
 80111d2:	d052      	beq.n	801127a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2210      	movs	r2, #16
 80111d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80111da:	d04e      	beq.n	801127a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d12d      	bne.n	8011242 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2241      	movs	r2, #65	@ 0x41
 80111ea:	5c9b      	ldrb	r3, [r3, r2]
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	2b28      	cmp	r3, #40	@ 0x28
 80111f0:	d10b      	bne.n	801120a <I2C_Slave_ISR_IT+0x86>
 80111f2:	697a      	ldr	r2, [r7, #20]
 80111f4:	2380      	movs	r3, #128	@ 0x80
 80111f6:	049b      	lsls	r3, r3, #18
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d106      	bne.n	801120a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80111fc:	693a      	ldr	r2, [r7, #16]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	0011      	movs	r1, r2
 8011202:	0018      	movs	r0, r3
 8011204:	f000 fef4 	bl	8011ff0 <I2C_ITListenCplt>
 8011208:	e036      	b.n	8011278 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2241      	movs	r2, #65	@ 0x41
 801120e:	5c9b      	ldrb	r3, [r3, r2]
 8011210:	b2db      	uxtb	r3, r3
 8011212:	2b29      	cmp	r3, #41	@ 0x29
 8011214:	d110      	bne.n	8011238 <I2C_Slave_ISR_IT+0xb4>
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	4a59      	ldr	r2, [pc, #356]	@ (8011380 <I2C_Slave_ISR_IT+0x1fc>)
 801121a:	4293      	cmp	r3, r2
 801121c:	d00c      	beq.n	8011238 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2210      	movs	r2, #16
 8011224:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	0018      	movs	r0, r3
 801122a:	f001 f864 	bl	80122f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	0018      	movs	r0, r3
 8011232:	f000 fc8b 	bl	8011b4c <I2C_ITSlaveSeqCplt>
 8011236:	e01f      	b.n	8011278 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2210      	movs	r2, #16
 801123e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011240:	e091      	b.n	8011366 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2210      	movs	r2, #16
 8011248:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801124e:	2204      	movs	r2, #4
 8011250:	431a      	orrs	r2, r3
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d005      	beq.n	8011268 <I2C_Slave_ISR_IT+0xe4>
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	2380      	movs	r3, #128	@ 0x80
 8011260:	045b      	lsls	r3, r3, #17
 8011262:	429a      	cmp	r2, r3
 8011264:	d000      	beq.n	8011268 <I2C_Slave_ISR_IT+0xe4>
 8011266:	e07e      	b.n	8011366 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	0011      	movs	r1, r2
 8011270:	0018      	movs	r0, r3
 8011272:	f000 ff15 	bl	80120a0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011276:	e076      	b.n	8011366 <I2C_Slave_ISR_IT+0x1e2>
 8011278:	e075      	b.n	8011366 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	2204      	movs	r2, #4
 801127e:	4013      	ands	r3, r2
 8011280:	d02f      	beq.n	80112e2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2204      	movs	r2, #4
 8011286:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011288:	d02b      	beq.n	80112e2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801128e:	b29b      	uxth	r3, r3
 8011290:	2b00      	cmp	r3, #0
 8011292:	d018      	beq.n	80112c6 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801129e:	b2d2      	uxtb	r2, r2
 80112a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112a6:	1c5a      	adds	r2, r3, #1
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112b0:	3b01      	subs	r3, #1
 80112b2:	b29a      	uxth	r2, r3
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112bc:	b29b      	uxth	r3, r3
 80112be:	3b01      	subs	r3, #1
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d14c      	bne.n	801136a <I2C_Slave_ISR_IT+0x1e6>
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	4a2b      	ldr	r2, [pc, #172]	@ (8011380 <I2C_Slave_ISR_IT+0x1fc>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d048      	beq.n	801136a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	0018      	movs	r0, r3
 80112dc:	f000 fc36 	bl	8011b4c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80112e0:	e043      	b.n	801136a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	2208      	movs	r2, #8
 80112e6:	4013      	ands	r3, r2
 80112e8:	d00a      	beq.n	8011300 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2208      	movs	r2, #8
 80112ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80112f0:	d006      	beq.n	8011300 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80112f2:	693a      	ldr	r2, [r7, #16]
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	0011      	movs	r1, r2
 80112f8:	0018      	movs	r0, r3
 80112fa:	f000 fb41 	bl	8011980 <I2C_ITAddrCplt>
 80112fe:	e035      	b.n	801136c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	2202      	movs	r2, #2
 8011304:	4013      	ands	r3, r2
 8011306:	d031      	beq.n	801136c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2202      	movs	r2, #2
 801130c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801130e:	d02d      	beq.n	801136c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011314:	b29b      	uxth	r3, r3
 8011316:	2b00      	cmp	r3, #0
 8011318:	d018      	beq.n	801134c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801131e:	781a      	ldrb	r2, [r3, #0]
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801132a:	1c5a      	adds	r2, r3, #1
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011334:	b29b      	uxth	r3, r3
 8011336:	3b01      	subs	r3, #1
 8011338:	b29a      	uxth	r2, r3
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011342:	3b01      	subs	r3, #1
 8011344:	b29a      	uxth	r2, r3
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	851a      	strh	r2, [r3, #40]	@ 0x28
 801134a:	e00f      	b.n	801136c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801134c:	697a      	ldr	r2, [r7, #20]
 801134e:	2380      	movs	r3, #128	@ 0x80
 8011350:	045b      	lsls	r3, r3, #17
 8011352:	429a      	cmp	r2, r3
 8011354:	d002      	beq.n	801135c <I2C_Slave_ISR_IT+0x1d8>
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d107      	bne.n	801136c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	0018      	movs	r0, r3
 8011360:	f000 fbf4 	bl	8011b4c <I2C_ITSlaveSeqCplt>
 8011364:	e002      	b.n	801136c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8011366:	46c0      	nop			@ (mov r8, r8)
 8011368:	e000      	b.n	801136c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801136a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	2240      	movs	r2, #64	@ 0x40
 8011370:	2100      	movs	r1, #0
 8011372:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011374:	2300      	movs	r3, #0
}
 8011376:	0018      	movs	r0, r3
 8011378:	46bd      	mov	sp, r7
 801137a:	b006      	add	sp, #24
 801137c:	bd80      	pop	{r7, pc}
 801137e:	46c0      	nop			@ (mov r8, r8)
 8011380:	ffff0000 	.word	0xffff0000

08011384 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011384:	b590      	push	{r4, r7, lr}
 8011386:	b089      	sub	sp, #36	@ 0x24
 8011388:	af02      	add	r7, sp, #8
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2240      	movs	r2, #64	@ 0x40
 8011394:	5c9b      	ldrb	r3, [r3, r2]
 8011396:	2b01      	cmp	r3, #1
 8011398:	d101      	bne.n	801139e <I2C_Master_ISR_DMA+0x1a>
 801139a:	2302      	movs	r3, #2
 801139c:	e0e7      	b.n	801156e <I2C_Master_ISR_DMA+0x1ea>
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2240      	movs	r2, #64	@ 0x40
 80113a2:	2101      	movs	r1, #1
 80113a4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	2210      	movs	r2, #16
 80113aa:	4013      	ands	r3, r2
 80113ac:	d017      	beq.n	80113de <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2210      	movs	r2, #16
 80113b2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113b4:	d013      	beq.n	80113de <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2210      	movs	r2, #16
 80113bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113c2:	2204      	movs	r2, #4
 80113c4:	431a      	orrs	r2, r3
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2120      	movs	r1, #32
 80113ce:	0018      	movs	r0, r3
 80113d0:	f001 fb18 	bl	8012a04 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	0018      	movs	r0, r3
 80113d8:	f000 ff8d 	bl	80122f6 <I2C_Flush_TXDR>
 80113dc:	e0c2      	b.n	8011564 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2280      	movs	r2, #128	@ 0x80
 80113e2:	4013      	ands	r3, r2
 80113e4:	d100      	bne.n	80113e8 <I2C_Master_ISR_DMA+0x64>
 80113e6:	e07c      	b.n	80114e2 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2240      	movs	r2, #64	@ 0x40
 80113ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80113ee:	d100      	bne.n	80113f2 <I2C_Master_ISR_DMA+0x6e>
 80113f0:	e077      	b.n	80114e2 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	2140      	movs	r1, #64	@ 0x40
 80113fe:	438a      	bics	r2, r1
 8011400:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011406:	b29b      	uxth	r3, r3
 8011408:	2b00      	cmp	r3, #0
 801140a:	d055      	beq.n	80114b8 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	b29a      	uxth	r2, r3
 8011414:	2312      	movs	r3, #18
 8011416:	18fb      	adds	r3, r7, r3
 8011418:	0592      	lsls	r2, r2, #22
 801141a:	0d92      	lsrs	r2, r2, #22
 801141c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011422:	b29b      	uxth	r3, r3
 8011424:	2bff      	cmp	r3, #255	@ 0xff
 8011426:	d906      	bls.n	8011436 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	22ff      	movs	r2, #255	@ 0xff
 801142c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801142e:	2380      	movs	r3, #128	@ 0x80
 8011430:	045b      	lsls	r3, r3, #17
 8011432:	617b      	str	r3, [r7, #20]
 8011434:	e010      	b.n	8011458 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801143a:	b29a      	uxth	r2, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011444:	4a4c      	ldr	r2, [pc, #304]	@ (8011578 <I2C_Master_ISR_DMA+0x1f4>)
 8011446:	4293      	cmp	r3, r2
 8011448:	d003      	beq.n	8011452 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801144e:	617b      	str	r3, [r7, #20]
 8011450:	e002      	b.n	8011458 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011452:	2380      	movs	r3, #128	@ 0x80
 8011454:	049b      	lsls	r3, r3, #18
 8011456:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801145c:	b2da      	uxtb	r2, r3
 801145e:	697c      	ldr	r4, [r7, #20]
 8011460:	2312      	movs	r3, #18
 8011462:	18fb      	adds	r3, r7, r3
 8011464:	8819      	ldrh	r1, [r3, #0]
 8011466:	68f8      	ldr	r0, [r7, #12]
 8011468:	2300      	movs	r3, #0
 801146a:	9300      	str	r3, [sp, #0]
 801146c:	0023      	movs	r3, r4
 801146e:	f001 fa8f 	bl	8012990 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011476:	b29a      	uxth	r2, r3
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801147c:	1ad3      	subs	r3, r2, r3
 801147e:	b29a      	uxth	r2, r3
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2241      	movs	r2, #65	@ 0x41
 8011488:	5c9b      	ldrb	r3, [r3, r2]
 801148a:	b2db      	uxtb	r3, r3
 801148c:	2b22      	cmp	r3, #34	@ 0x22
 801148e:	d109      	bne.n	80114a4 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2180      	movs	r1, #128	@ 0x80
 801149c:	0209      	lsls	r1, r1, #8
 801149e:	430a      	orrs	r2, r1
 80114a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80114a2:	e05f      	b.n	8011564 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2180      	movs	r1, #128	@ 0x80
 80114b0:	01c9      	lsls	r1, r1, #7
 80114b2:	430a      	orrs	r2, r1
 80114b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80114b6:	e055      	b.n	8011564 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	685a      	ldr	r2, [r3, #4]
 80114be:	2380      	movs	r3, #128	@ 0x80
 80114c0:	049b      	lsls	r3, r3, #18
 80114c2:	401a      	ands	r2, r3
 80114c4:	2380      	movs	r3, #128	@ 0x80
 80114c6:	049b      	lsls	r3, r3, #18
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d004      	beq.n	80114d6 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	0018      	movs	r0, r3
 80114d0:	f000 fafa 	bl	8011ac8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80114d4:	e046      	b.n	8011564 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2140      	movs	r1, #64	@ 0x40
 80114da:	0018      	movs	r0, r3
 80114dc:	f000 fde0 	bl	80120a0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80114e0:	e040      	b.n	8011564 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	2240      	movs	r2, #64	@ 0x40
 80114e6:	4013      	ands	r3, r2
 80114e8:	d02c      	beq.n	8011544 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2240      	movs	r2, #64	@ 0x40
 80114ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80114f0:	d028      	beq.n	8011544 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d11d      	bne.n	8011538 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	685a      	ldr	r2, [r3, #4]
 8011502:	2380      	movs	r3, #128	@ 0x80
 8011504:	049b      	lsls	r3, r3, #18
 8011506:	401a      	ands	r2, r3
 8011508:	2380      	movs	r3, #128	@ 0x80
 801150a:	049b      	lsls	r3, r3, #18
 801150c:	429a      	cmp	r2, r3
 801150e:	d028      	beq.n	8011562 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011514:	4a18      	ldr	r2, [pc, #96]	@ (8011578 <I2C_Master_ISR_DMA+0x1f4>)
 8011516:	4293      	cmp	r3, r2
 8011518:	d109      	bne.n	801152e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	685a      	ldr	r2, [r3, #4]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	2180      	movs	r1, #128	@ 0x80
 8011526:	01c9      	lsls	r1, r1, #7
 8011528:	430a      	orrs	r2, r1
 801152a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 801152c:	e019      	b.n	8011562 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	0018      	movs	r0, r3
 8011532:	f000 fac9 	bl	8011ac8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8011536:	e014      	b.n	8011562 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2140      	movs	r1, #64	@ 0x40
 801153c:	0018      	movs	r0, r3
 801153e:	f000 fdaf 	bl	80120a0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011542:	e00e      	b.n	8011562 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	2220      	movs	r2, #32
 8011548:	4013      	ands	r3, r2
 801154a:	d00b      	beq.n	8011564 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2220      	movs	r2, #32
 8011550:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011552:	d007      	beq.n	8011564 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	0011      	movs	r1, r2
 801155a:	0018      	movs	r0, r3
 801155c:	f000 fb5a 	bl	8011c14 <I2C_ITMasterCplt>
 8011560:	e000      	b.n	8011564 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011562:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2240      	movs	r2, #64	@ 0x40
 8011568:	2100      	movs	r1, #0
 801156a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801156c:	2300      	movs	r3, #0
}
 801156e:	0018      	movs	r0, r3
 8011570:	46bd      	mov	sp, r7
 8011572:	b007      	add	sp, #28
 8011574:	bd90      	pop	{r4, r7, pc}
 8011576:	46c0      	nop			@ (mov r8, r8)
 8011578:	ffff0000 	.word	0xffff0000

0801157c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 801157c:	b590      	push	{r4, r7, lr}
 801157e:	b089      	sub	sp, #36	@ 0x24
 8011580:	af02      	add	r7, sp, #8
 8011582:	60f8      	str	r0, [r7, #12]
 8011584:	60b9      	str	r1, [r7, #8]
 8011586:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8011588:	4b88      	ldr	r3, [pc, #544]	@ (80117ac <I2C_Mem_ISR_DMA+0x230>)
 801158a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	2240      	movs	r2, #64	@ 0x40
 8011590:	5c9b      	ldrb	r3, [r3, r2]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d101      	bne.n	801159a <I2C_Mem_ISR_DMA+0x1e>
 8011596:	2302      	movs	r3, #2
 8011598:	e104      	b.n	80117a4 <I2C_Mem_ISR_DMA+0x228>
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2240      	movs	r2, #64	@ 0x40
 801159e:	2101      	movs	r1, #1
 80115a0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	2210      	movs	r2, #16
 80115a6:	4013      	ands	r3, r2
 80115a8:	d017      	beq.n	80115da <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2210      	movs	r2, #16
 80115ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80115b0:	d013      	beq.n	80115da <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	2210      	movs	r2, #16
 80115b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115be:	2204      	movs	r2, #4
 80115c0:	431a      	orrs	r2, r3
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	2120      	movs	r1, #32
 80115ca:	0018      	movs	r0, r3
 80115cc:	f001 fa1a 	bl	8012a04 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	0018      	movs	r0, r3
 80115d4:	f000 fe8f 	bl	80122f6 <I2C_Flush_TXDR>
 80115d8:	e0df      	b.n	801179a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	2202      	movs	r2, #2
 80115de:	4013      	ands	r3, r2
 80115e0:	d00d      	beq.n	80115fe <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2202      	movs	r2, #2
 80115e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80115e8:	d009      	beq.n	80115fe <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80115f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	2201      	movs	r2, #1
 80115f8:	4252      	negs	r2, r2
 80115fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80115fc:	e0cd      	b.n	801179a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	2280      	movs	r2, #128	@ 0x80
 8011602:	4013      	ands	r3, r2
 8011604:	d05e      	beq.n	80116c4 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2240      	movs	r2, #64	@ 0x40
 801160a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801160c:	d05a      	beq.n	80116c4 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2110      	movs	r1, #16
 8011612:	0018      	movs	r0, r3
 8011614:	f001 f9f6 	bl	8012a04 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801161c:	b29b      	uxth	r3, r3
 801161e:	2b00      	cmp	r3, #0
 8011620:	d04a      	beq.n	80116b8 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011626:	b29b      	uxth	r3, r3
 8011628:	2bff      	cmp	r3, #255	@ 0xff
 801162a:	d910      	bls.n	801164e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	22ff      	movs	r2, #255	@ 0xff
 8011630:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011636:	b299      	uxth	r1, r3
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801163c:	b2da      	uxtb	r2, r3
 801163e:	2380      	movs	r3, #128	@ 0x80
 8011640:	045b      	lsls	r3, r3, #17
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	2400      	movs	r4, #0
 8011646:	9400      	str	r4, [sp, #0]
 8011648:	f001 f9a2 	bl	8012990 <I2C_TransferConfig>
 801164c:	e011      	b.n	8011672 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011652:	b29a      	uxth	r2, r3
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801165c:	b299      	uxth	r1, r3
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011662:	b2da      	uxtb	r2, r3
 8011664:	2380      	movs	r3, #128	@ 0x80
 8011666:	049b      	lsls	r3, r3, #18
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	2400      	movs	r4, #0
 801166c:	9400      	str	r4, [sp, #0]
 801166e:	f001 f98f 	bl	8012990 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011676:	b29a      	uxth	r2, r3
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	b29a      	uxth	r2, r3
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	2241      	movs	r2, #65	@ 0x41
 8011688:	5c9b      	ldrb	r3, [r3, r2]
 801168a:	b2db      	uxtb	r3, r3
 801168c:	2b22      	cmp	r3, #34	@ 0x22
 801168e:	d109      	bne.n	80116a4 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2180      	movs	r1, #128	@ 0x80
 801169c:	0209      	lsls	r1, r1, #8
 801169e:	430a      	orrs	r2, r1
 80116a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80116a2:	e07a      	b.n	801179a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	681a      	ldr	r2, [r3, #0]
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2180      	movs	r1, #128	@ 0x80
 80116b0:	01c9      	lsls	r1, r1, #7
 80116b2:	430a      	orrs	r2, r1
 80116b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80116b6:	e070      	b.n	801179a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2140      	movs	r1, #64	@ 0x40
 80116bc:	0018      	movs	r0, r3
 80116be:	f000 fcef 	bl	80120a0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80116c2:	e06a      	b.n	801179a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	2240      	movs	r2, #64	@ 0x40
 80116c8:	4013      	ands	r3, r2
 80116ca:	d058      	beq.n	801177e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2240      	movs	r2, #64	@ 0x40
 80116d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80116d2:	d054      	beq.n	801177e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2241      	movs	r2, #65	@ 0x41
 80116d8:	5c9b      	ldrb	r3, [r3, r2]
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	2b22      	cmp	r3, #34	@ 0x22
 80116de:	d101      	bne.n	80116e4 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80116e0:	4b33      	ldr	r3, [pc, #204]	@ (80117b0 <I2C_Mem_ISR_DMA+0x234>)
 80116e2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	2bff      	cmp	r3, #255	@ 0xff
 80116ec:	d911      	bls.n	8011712 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	22ff      	movs	r2, #255	@ 0xff
 80116f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116f8:	b299      	uxth	r1, r3
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116fe:	b2da      	uxtb	r2, r3
 8011700:	2380      	movs	r3, #128	@ 0x80
 8011702:	045c      	lsls	r4, r3, #17
 8011704:	68f8      	ldr	r0, [r7, #12]
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	9300      	str	r3, [sp, #0]
 801170a:	0023      	movs	r3, r4
 801170c:	f001 f940 	bl	8012990 <I2C_TransferConfig>
 8011710:	e012      	b.n	8011738 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011716:	b29a      	uxth	r2, r3
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011720:	b299      	uxth	r1, r3
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011726:	b2da      	uxtb	r2, r3
 8011728:	2380      	movs	r3, #128	@ 0x80
 801172a:	049c      	lsls	r4, r3, #18
 801172c:	68f8      	ldr	r0, [r7, #12]
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	9300      	str	r3, [sp, #0]
 8011732:	0023      	movs	r3, r4
 8011734:	f001 f92c 	bl	8012990 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801173c:	b29a      	uxth	r2, r3
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011742:	1ad3      	subs	r3, r2, r3
 8011744:	b29a      	uxth	r2, r3
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2241      	movs	r2, #65	@ 0x41
 801174e:	5c9b      	ldrb	r3, [r3, r2]
 8011750:	b2db      	uxtb	r3, r3
 8011752:	2b22      	cmp	r3, #34	@ 0x22
 8011754:	d109      	bne.n	801176a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	2180      	movs	r1, #128	@ 0x80
 8011762:	0209      	lsls	r1, r1, #8
 8011764:	430a      	orrs	r2, r1
 8011766:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011768:	e017      	b.n	801179a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2180      	movs	r1, #128	@ 0x80
 8011776:	01c9      	lsls	r1, r1, #7
 8011778:	430a      	orrs	r2, r1
 801177a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801177c:	e00d      	b.n	801179a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	2220      	movs	r2, #32
 8011782:	4013      	ands	r3, r2
 8011784:	d009      	beq.n	801179a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2220      	movs	r2, #32
 801178a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801178c:	d005      	beq.n	801179a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801178e:	68ba      	ldr	r2, [r7, #8]
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	0011      	movs	r1, r2
 8011794:	0018      	movs	r0, r3
 8011796:	f000 fa3d 	bl	8011c14 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2240      	movs	r2, #64	@ 0x40
 801179e:	2100      	movs	r1, #0
 80117a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80117a2:	2300      	movs	r3, #0
}
 80117a4:	0018      	movs	r0, r3
 80117a6:	46bd      	mov	sp, r7
 80117a8:	b007      	add	sp, #28
 80117aa:	bd90      	pop	{r4, r7, pc}
 80117ac:	80002000 	.word	0x80002000
 80117b0:	80002400 	.word	0x80002400

080117b4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b088      	sub	sp, #32
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	60f8      	str	r0, [r7, #12]
 80117bc:	60b9      	str	r1, [r7, #8]
 80117be:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117c4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80117c6:	2300      	movs	r3, #0
 80117c8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2240      	movs	r2, #64	@ 0x40
 80117ce:	5c9b      	ldrb	r3, [r3, r2]
 80117d0:	2b01      	cmp	r3, #1
 80117d2:	d101      	bne.n	80117d8 <I2C_Slave_ISR_DMA+0x24>
 80117d4:	2302      	movs	r3, #2
 80117d6:	e0cd      	b.n	8011974 <I2C_Slave_ISR_DMA+0x1c0>
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	2240      	movs	r2, #64	@ 0x40
 80117dc:	2101      	movs	r1, #1
 80117de:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	2220      	movs	r2, #32
 80117e4:	4013      	ands	r3, r2
 80117e6:	d009      	beq.n	80117fc <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2220      	movs	r2, #32
 80117ec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80117ee:	d005      	beq.n	80117fc <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80117f0:	68ba      	ldr	r2, [r7, #8]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	0011      	movs	r1, r2
 80117f6:	0018      	movs	r0, r3
 80117f8:	f000 fada 	bl	8011db0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	2210      	movs	r2, #16
 8011800:	4013      	ands	r3, r2
 8011802:	d100      	bne.n	8011806 <I2C_Slave_ISR_DMA+0x52>
 8011804:	e0a3      	b.n	801194e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2210      	movs	r2, #16
 801180a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801180c:	d100      	bne.n	8011810 <I2C_Slave_ISR_DMA+0x5c>
 801180e:	e09e      	b.n	801194e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	2380      	movs	r3, #128	@ 0x80
 8011814:	01db      	lsls	r3, r3, #7
 8011816:	4013      	ands	r3, r2
 8011818:	d105      	bne.n	8011826 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801181a:	687a      	ldr	r2, [r7, #4]
 801181c:	2380      	movs	r3, #128	@ 0x80
 801181e:	021b      	lsls	r3, r3, #8
 8011820:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011822:	d100      	bne.n	8011826 <I2C_Slave_ISR_DMA+0x72>
 8011824:	e08c      	b.n	8011940 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00c      	beq.n	8011848 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	2380      	movs	r3, #128	@ 0x80
 8011832:	021b      	lsls	r3, r3, #8
 8011834:	4013      	ands	r3, r2
 8011836:	d007      	beq.n	8011848 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d101      	bne.n	8011848 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011844:	2301      	movs	r3, #1
 8011846:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801184c:	2b00      	cmp	r3, #0
 801184e:	d00c      	beq.n	801186a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	2380      	movs	r3, #128	@ 0x80
 8011854:	01db      	lsls	r3, r3, #7
 8011856:	4013      	ands	r3, r2
 8011858:	d007      	beq.n	801186a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d101      	bne.n	801186a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8011866:	2301      	movs	r3, #1
 8011868:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801186a:	69fb      	ldr	r3, [r7, #28]
 801186c:	2b01      	cmp	r3, #1
 801186e:	d12d      	bne.n	80118cc <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2241      	movs	r2, #65	@ 0x41
 8011874:	5c9b      	ldrb	r3, [r3, r2]
 8011876:	b2db      	uxtb	r3, r3
 8011878:	2b28      	cmp	r3, #40	@ 0x28
 801187a:	d10b      	bne.n	8011894 <I2C_Slave_ISR_DMA+0xe0>
 801187c:	69ba      	ldr	r2, [r7, #24]
 801187e:	2380      	movs	r3, #128	@ 0x80
 8011880:	049b      	lsls	r3, r3, #18
 8011882:	429a      	cmp	r2, r3
 8011884:	d106      	bne.n	8011894 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8011886:	68ba      	ldr	r2, [r7, #8]
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	0011      	movs	r1, r2
 801188c:	0018      	movs	r0, r3
 801188e:	f000 fbaf 	bl	8011ff0 <I2C_ITListenCplt>
 8011892:	e054      	b.n	801193e <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2241      	movs	r2, #65	@ 0x41
 8011898:	5c9b      	ldrb	r3, [r3, r2]
 801189a:	b2db      	uxtb	r3, r3
 801189c:	2b29      	cmp	r3, #41	@ 0x29
 801189e:	d110      	bne.n	80118c2 <I2C_Slave_ISR_DMA+0x10e>
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	4a36      	ldr	r2, [pc, #216]	@ (801197c <I2C_Slave_ISR_DMA+0x1c8>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d00c      	beq.n	80118c2 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	2210      	movs	r2, #16
 80118ae:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	0018      	movs	r0, r3
 80118b4:	f000 fd1f 	bl	80122f6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	0018      	movs	r0, r3
 80118bc:	f000 f946 	bl	8011b4c <I2C_ITSlaveSeqCplt>
 80118c0:	e03d      	b.n	801193e <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2210      	movs	r2, #16
 80118c8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80118ca:	e03e      	b.n	801194a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2210      	movs	r2, #16
 80118d2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118d8:	2204      	movs	r2, #4
 80118da:	431a      	orrs	r2, r3
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80118e0:	2317      	movs	r3, #23
 80118e2:	18fb      	adds	r3, r7, r3
 80118e4:	68fa      	ldr	r2, [r7, #12]
 80118e6:	2141      	movs	r1, #65	@ 0x41
 80118e8:	5c52      	ldrb	r2, [r2, r1]
 80118ea:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d004      	beq.n	80118fc <I2C_Slave_ISR_DMA+0x148>
 80118f2:	69ba      	ldr	r2, [r7, #24]
 80118f4:	2380      	movs	r3, #128	@ 0x80
 80118f6:	045b      	lsls	r3, r3, #17
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d126      	bne.n	801194a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80118fc:	2217      	movs	r2, #23
 80118fe:	18bb      	adds	r3, r7, r2
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	2b21      	cmp	r3, #33	@ 0x21
 8011904:	d003      	beq.n	801190e <I2C_Slave_ISR_DMA+0x15a>
 8011906:	18bb      	adds	r3, r7, r2
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	2b29      	cmp	r3, #41	@ 0x29
 801190c:	d103      	bne.n	8011916 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2221      	movs	r2, #33	@ 0x21
 8011912:	631a      	str	r2, [r3, #48]	@ 0x30
 8011914:	e00b      	b.n	801192e <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011916:	2217      	movs	r2, #23
 8011918:	18bb      	adds	r3, r7, r2
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	2b22      	cmp	r3, #34	@ 0x22
 801191e:	d003      	beq.n	8011928 <I2C_Slave_ISR_DMA+0x174>
 8011920:	18bb      	adds	r3, r7, r2
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	2b2a      	cmp	r3, #42	@ 0x2a
 8011926:	d102      	bne.n	801192e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2222      	movs	r2, #34	@ 0x22
 801192c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	0011      	movs	r1, r2
 8011936:	0018      	movs	r0, r3
 8011938:	f000 fbb2 	bl	80120a0 <I2C_ITError>
      if (treatdmanack == 1U)
 801193c:	e005      	b.n	801194a <I2C_Slave_ISR_DMA+0x196>
 801193e:	e004      	b.n	801194a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2210      	movs	r2, #16
 8011946:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011948:	e00f      	b.n	801196a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 801194a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801194c:	e00d      	b.n	801196a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	2208      	movs	r2, #8
 8011952:	4013      	ands	r3, r2
 8011954:	d009      	beq.n	801196a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2208      	movs	r2, #8
 801195a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801195c:	d005      	beq.n	801196a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801195e:	68ba      	ldr	r2, [r7, #8]
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	0011      	movs	r1, r2
 8011964:	0018      	movs	r0, r3
 8011966:	f000 f80b 	bl	8011980 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	2240      	movs	r2, #64	@ 0x40
 801196e:	2100      	movs	r1, #0
 8011970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011972:	2300      	movs	r3, #0
}
 8011974:	0018      	movs	r0, r3
 8011976:	46bd      	mov	sp, r7
 8011978:	b008      	add	sp, #32
 801197a:	bd80      	pop	{r7, pc}
 801197c:	ffff0000 	.word	0xffff0000

08011980 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011980:	b5b0      	push	{r4, r5, r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2241      	movs	r2, #65	@ 0x41
 801198e:	5c9b      	ldrb	r3, [r3, r2]
 8011990:	b2db      	uxtb	r3, r3
 8011992:	001a      	movs	r2, r3
 8011994:	2328      	movs	r3, #40	@ 0x28
 8011996:	4013      	ands	r3, r2
 8011998:	2b28      	cmp	r3, #40	@ 0x28
 801199a:	d000      	beq.n	801199e <I2C_ITAddrCplt+0x1e>
 801199c:	e088      	b.n	8011ab0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	699b      	ldr	r3, [r3, #24]
 80119a4:	0c1b      	lsrs	r3, r3, #16
 80119a6:	b2da      	uxtb	r2, r3
 80119a8:	250f      	movs	r5, #15
 80119aa:	197b      	adds	r3, r7, r5
 80119ac:	2101      	movs	r1, #1
 80119ae:	400a      	ands	r2, r1
 80119b0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	699b      	ldr	r3, [r3, #24]
 80119b8:	0c1b      	lsrs	r3, r3, #16
 80119ba:	b29a      	uxth	r2, r3
 80119bc:	200c      	movs	r0, #12
 80119be:	183b      	adds	r3, r7, r0
 80119c0:	21fe      	movs	r1, #254	@ 0xfe
 80119c2:	400a      	ands	r2, r1
 80119c4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	689b      	ldr	r3, [r3, #8]
 80119cc:	b29a      	uxth	r2, r3
 80119ce:	240a      	movs	r4, #10
 80119d0:	193b      	adds	r3, r7, r4
 80119d2:	0592      	lsls	r2, r2, #22
 80119d4:	0d92      	lsrs	r2, r2, #22
 80119d6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	b29a      	uxth	r2, r3
 80119e0:	2308      	movs	r3, #8
 80119e2:	18fb      	adds	r3, r7, r3
 80119e4:	21fe      	movs	r1, #254	@ 0xfe
 80119e6:	400a      	ands	r2, r1
 80119e8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	2b02      	cmp	r3, #2
 80119f0:	d148      	bne.n	8011a84 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80119f2:	0021      	movs	r1, r4
 80119f4:	187b      	adds	r3, r7, r1
 80119f6:	881b      	ldrh	r3, [r3, #0]
 80119f8:	09db      	lsrs	r3, r3, #7
 80119fa:	b29a      	uxth	r2, r3
 80119fc:	183b      	adds	r3, r7, r0
 80119fe:	881b      	ldrh	r3, [r3, #0]
 8011a00:	4053      	eors	r3, r2
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	001a      	movs	r2, r3
 8011a06:	2306      	movs	r3, #6
 8011a08:	4013      	ands	r3, r2
 8011a0a:	d120      	bne.n	8011a4e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8011a0c:	183b      	adds	r3, r7, r0
 8011a0e:	187a      	adds	r2, r7, r1
 8011a10:	8812      	ldrh	r2, [r2, #0]
 8011a12:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a18:	1c5a      	adds	r2, r3, #1
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	d14c      	bne.n	8011ac0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	2208      	movs	r2, #8
 8011a32:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2240      	movs	r2, #64	@ 0x40
 8011a38:	2100      	movs	r1, #0
 8011a3a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a3c:	183b      	adds	r3, r7, r0
 8011a3e:	881a      	ldrh	r2, [r3, #0]
 8011a40:	197b      	adds	r3, r7, r5
 8011a42:	7819      	ldrb	r1, [r3, #0]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	0018      	movs	r0, r3
 8011a48:	f7ff fa39 	bl	8010ebe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011a4c:	e038      	b.n	8011ac0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011a4e:	240c      	movs	r4, #12
 8011a50:	193b      	adds	r3, r7, r4
 8011a52:	2208      	movs	r2, #8
 8011a54:	18ba      	adds	r2, r7, r2
 8011a56:	8812      	ldrh	r2, [r2, #0]
 8011a58:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011a5a:	2380      	movs	r3, #128	@ 0x80
 8011a5c:	021a      	lsls	r2, r3, #8
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	0011      	movs	r1, r2
 8011a62:	0018      	movs	r0, r3
 8011a64:	f001 f85c 	bl	8012b20 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2240      	movs	r2, #64	@ 0x40
 8011a6c:	2100      	movs	r1, #0
 8011a6e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a70:	193b      	adds	r3, r7, r4
 8011a72:	881a      	ldrh	r2, [r3, #0]
 8011a74:	230f      	movs	r3, #15
 8011a76:	18fb      	adds	r3, r7, r3
 8011a78:	7819      	ldrb	r1, [r3, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	0018      	movs	r0, r3
 8011a7e:	f7ff fa1e 	bl	8010ebe <HAL_I2C_AddrCallback>
}
 8011a82:	e01d      	b.n	8011ac0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011a84:	2380      	movs	r3, #128	@ 0x80
 8011a86:	021a      	lsls	r2, r3, #8
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	0011      	movs	r1, r2
 8011a8c:	0018      	movs	r0, r3
 8011a8e:	f001 f847 	bl	8012b20 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2240      	movs	r2, #64	@ 0x40
 8011a96:	2100      	movs	r1, #0
 8011a98:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a9a:	230c      	movs	r3, #12
 8011a9c:	18fb      	adds	r3, r7, r3
 8011a9e:	881a      	ldrh	r2, [r3, #0]
 8011aa0:	230f      	movs	r3, #15
 8011aa2:	18fb      	adds	r3, r7, r3
 8011aa4:	7819      	ldrb	r1, [r3, #0]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	0018      	movs	r0, r3
 8011aaa:	f7ff fa08 	bl	8010ebe <HAL_I2C_AddrCallback>
}
 8011aae:	e007      	b.n	8011ac0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2208      	movs	r2, #8
 8011ab6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2240      	movs	r2, #64	@ 0x40
 8011abc:	2100      	movs	r1, #0
 8011abe:	5499      	strb	r1, [r3, r2]
}
 8011ac0:	46c0      	nop			@ (mov r8, r8)
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	b004      	add	sp, #16
 8011ac6:	bdb0      	pop	{r4, r5, r7, pc}

08011ac8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2242      	movs	r2, #66	@ 0x42
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2241      	movs	r2, #65	@ 0x41
 8011adc:	5c9b      	ldrb	r3, [r3, r2]
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	2b21      	cmp	r3, #33	@ 0x21
 8011ae2:	d117      	bne.n	8011b14 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2241      	movs	r2, #65	@ 0x41
 8011ae8:	2120      	movs	r1, #32
 8011aea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2211      	movs	r2, #17
 8011af0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2200      	movs	r2, #0
 8011af6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2101      	movs	r1, #1
 8011afc:	0018      	movs	r0, r3
 8011afe:	f001 f80f 	bl	8012b20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2240      	movs	r2, #64	@ 0x40
 8011b06:	2100      	movs	r1, #0
 8011b08:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	0018      	movs	r0, r3
 8011b0e:	f7ff f9b6 	bl	8010e7e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011b12:	e016      	b.n	8011b42 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2241      	movs	r2, #65	@ 0x41
 8011b18:	2120      	movs	r1, #32
 8011b1a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2212      	movs	r2, #18
 8011b20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2200      	movs	r2, #0
 8011b26:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2102      	movs	r1, #2
 8011b2c:	0018      	movs	r0, r3
 8011b2e:	f000 fff7 	bl	8012b20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2240      	movs	r2, #64	@ 0x40
 8011b36:	2100      	movs	r1, #0
 8011b38:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	0018      	movs	r0, r3
 8011b3e:	f7ff f9a6 	bl	8010e8e <HAL_I2C_MasterRxCpltCallback>
}
 8011b42:	46c0      	nop			@ (mov r8, r8)
 8011b44:	46bd      	mov	sp, r7
 8011b46:	b002      	add	sp, #8
 8011b48:	bd80      	pop	{r7, pc}
	...

08011b4c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2242      	movs	r2, #66	@ 0x42
 8011b60:	2100      	movs	r1, #0
 8011b62:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011b64:	68fa      	ldr	r2, [r7, #12]
 8011b66:	2380      	movs	r3, #128	@ 0x80
 8011b68:	01db      	lsls	r3, r3, #7
 8011b6a:	4013      	ands	r3, r2
 8011b6c:	d008      	beq.n	8011b80 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4924      	ldr	r1, [pc, #144]	@ (8011c0c <I2C_ITSlaveSeqCplt+0xc0>)
 8011b7a:	400a      	ands	r2, r1
 8011b7c:	601a      	str	r2, [r3, #0]
 8011b7e:	e00c      	b.n	8011b9a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011b80:	68fa      	ldr	r2, [r7, #12]
 8011b82:	2380      	movs	r3, #128	@ 0x80
 8011b84:	021b      	lsls	r3, r3, #8
 8011b86:	4013      	ands	r3, r2
 8011b88:	d007      	beq.n	8011b9a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	491e      	ldr	r1, [pc, #120]	@ (8011c10 <I2C_ITSlaveSeqCplt+0xc4>)
 8011b96:	400a      	ands	r2, r1
 8011b98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2241      	movs	r2, #65	@ 0x41
 8011b9e:	5c9b      	ldrb	r3, [r3, r2]
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	2b29      	cmp	r3, #41	@ 0x29
 8011ba4:	d114      	bne.n	8011bd0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2241      	movs	r2, #65	@ 0x41
 8011baa:	2128      	movs	r1, #40	@ 0x28
 8011bac:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2221      	movs	r2, #33	@ 0x21
 8011bb2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2101      	movs	r1, #1
 8011bb8:	0018      	movs	r0, r3
 8011bba:	f000 ffb1 	bl	8012b20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2240      	movs	r2, #64	@ 0x40
 8011bc2:	2100      	movs	r1, #0
 8011bc4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	0018      	movs	r0, r3
 8011bca:	f7ff f968 	bl	8010e9e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011bce:	e019      	b.n	8011c04 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2241      	movs	r2, #65	@ 0x41
 8011bd4:	5c9b      	ldrb	r3, [r3, r2]
 8011bd6:	b2db      	uxtb	r3, r3
 8011bd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bda:	d113      	bne.n	8011c04 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2241      	movs	r2, #65	@ 0x41
 8011be0:	2128      	movs	r1, #40	@ 0x28
 8011be2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2222      	movs	r2, #34	@ 0x22
 8011be8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2102      	movs	r1, #2
 8011bee:	0018      	movs	r0, r3
 8011bf0:	f000 ff96 	bl	8012b20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2240      	movs	r2, #64	@ 0x40
 8011bf8:	2100      	movs	r1, #0
 8011bfa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	0018      	movs	r0, r3
 8011c00:	f7ff f955 	bl	8010eae <HAL_I2C_SlaveRxCpltCallback>
}
 8011c04:	46c0      	nop			@ (mov r8, r8)
 8011c06:	46bd      	mov	sp, r7
 8011c08:	b004      	add	sp, #16
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	ffffbfff 	.word	0xffffbfff
 8011c10:	ffff7fff 	.word	0xffff7fff

08011c14 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b086      	sub	sp, #24
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	2220      	movs	r2, #32
 8011c28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2241      	movs	r2, #65	@ 0x41
 8011c2e:	5c9b      	ldrb	r3, [r3, r2]
 8011c30:	b2db      	uxtb	r3, r3
 8011c32:	2b21      	cmp	r3, #33	@ 0x21
 8011c34:	d108      	bne.n	8011c48 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2101      	movs	r1, #1
 8011c3a:	0018      	movs	r0, r3
 8011c3c:	f000 ff70 	bl	8012b20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2211      	movs	r2, #17
 8011c44:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c46:	e00d      	b.n	8011c64 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2241      	movs	r2, #65	@ 0x41
 8011c4c:	5c9b      	ldrb	r3, [r3, r2]
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	2b22      	cmp	r3, #34	@ 0x22
 8011c52:	d107      	bne.n	8011c64 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2102      	movs	r1, #2
 8011c58:	0018      	movs	r0, r3
 8011c5a:	f000 ff61 	bl	8012b20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2212      	movs	r2, #18
 8011c62:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	685a      	ldr	r2, [r3, #4]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	494e      	ldr	r1, [pc, #312]	@ (8011da8 <I2C_ITMasterCplt+0x194>)
 8011c70:	400a      	ands	r2, r1
 8011c72:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2200      	movs	r2, #0
 8011c78:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4a4b      	ldr	r2, [pc, #300]	@ (8011dac <I2C_ITMasterCplt+0x198>)
 8011c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	2210      	movs	r2, #16
 8011c84:	4013      	ands	r3, r2
 8011c86:	d009      	beq.n	8011c9c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2210      	movs	r2, #16
 8011c8e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c94:	2204      	movs	r2, #4
 8011c96:	431a      	orrs	r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2241      	movs	r2, #65	@ 0x41
 8011ca0:	5c9b      	ldrb	r3, [r3, r2]
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	2b60      	cmp	r3, #96	@ 0x60
 8011ca6:	d109      	bne.n	8011cbc <I2C_ITMasterCplt+0xa8>
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	2204      	movs	r2, #4
 8011cac:	4013      	ands	r3, r2
 8011cae:	d005      	beq.n	8011cbc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011cba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	0018      	movs	r0, r3
 8011cc0:	f000 fb19 	bl	80122f6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cc8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2241      	movs	r2, #65	@ 0x41
 8011cce:	5c9b      	ldrb	r3, [r3, r2]
 8011cd0:	b2db      	uxtb	r3, r3
 8011cd2:	2b60      	cmp	r3, #96	@ 0x60
 8011cd4:	d002      	beq.n	8011cdc <I2C_ITMasterCplt+0xc8>
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d007      	beq.n	8011cec <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	0011      	movs	r1, r2
 8011ce4:	0018      	movs	r0, r3
 8011ce6:	f000 f9db 	bl	80120a0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011cea:	e058      	b.n	8011d9e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2241      	movs	r2, #65	@ 0x41
 8011cf0:	5c9b      	ldrb	r3, [r3, r2]
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	2b21      	cmp	r3, #33	@ 0x21
 8011cf6:	d126      	bne.n	8011d46 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2241      	movs	r2, #65	@ 0x41
 8011cfc:	2120      	movs	r1, #32
 8011cfe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2242      	movs	r2, #66	@ 0x42
 8011d0a:	5c9b      	ldrb	r3, [r3, r2]
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	2b40      	cmp	r3, #64	@ 0x40
 8011d10:	d10c      	bne.n	8011d2c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2242      	movs	r2, #66	@ 0x42
 8011d16:	2100      	movs	r1, #0
 8011d18:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2240      	movs	r2, #64	@ 0x40
 8011d1e:	2100      	movs	r1, #0
 8011d20:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	0018      	movs	r0, r3
 8011d26:	f7ff f8e2 	bl	8010eee <HAL_I2C_MemTxCpltCallback>
}
 8011d2a:	e038      	b.n	8011d9e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2242      	movs	r2, #66	@ 0x42
 8011d30:	2100      	movs	r1, #0
 8011d32:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2240      	movs	r2, #64	@ 0x40
 8011d38:	2100      	movs	r1, #0
 8011d3a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	0018      	movs	r0, r3
 8011d40:	f7ff f89d 	bl	8010e7e <HAL_I2C_MasterTxCpltCallback>
}
 8011d44:	e02b      	b.n	8011d9e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2241      	movs	r2, #65	@ 0x41
 8011d4a:	5c9b      	ldrb	r3, [r3, r2]
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	2b22      	cmp	r3, #34	@ 0x22
 8011d50:	d125      	bne.n	8011d9e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2241      	movs	r2, #65	@ 0x41
 8011d56:	2120      	movs	r1, #32
 8011d58:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2242      	movs	r2, #66	@ 0x42
 8011d64:	5c9b      	ldrb	r3, [r3, r2]
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	2b40      	cmp	r3, #64	@ 0x40
 8011d6a:	d10c      	bne.n	8011d86 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2242      	movs	r2, #66	@ 0x42
 8011d70:	2100      	movs	r1, #0
 8011d72:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2240      	movs	r2, #64	@ 0x40
 8011d78:	2100      	movs	r1, #0
 8011d7a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	0018      	movs	r0, r3
 8011d80:	f7ff f8bd 	bl	8010efe <HAL_I2C_MemRxCpltCallback>
}
 8011d84:	e00b      	b.n	8011d9e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2242      	movs	r2, #66	@ 0x42
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2240      	movs	r2, #64	@ 0x40
 8011d92:	2100      	movs	r1, #0
 8011d94:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	0018      	movs	r0, r3
 8011d9a:	f7ff f878 	bl	8010e8e <HAL_I2C_MasterRxCpltCallback>
}
 8011d9e:	46c0      	nop			@ (mov r8, r8)
 8011da0:	46bd      	mov	sp, r7
 8011da2:	b006      	add	sp, #24
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	46c0      	nop			@ (mov r8, r8)
 8011da8:	fe00e800 	.word	0xfe00e800
 8011dac:	ffff0000 	.word	0xffff0000

08011db0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b086      	sub	sp, #24
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011dc6:	200f      	movs	r0, #15
 8011dc8:	183b      	adds	r3, r7, r0
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	2141      	movs	r1, #65	@ 0x41
 8011dce:	5c52      	ldrb	r2, [r2, r1]
 8011dd0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	2220      	movs	r2, #32
 8011dd8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011dda:	183b      	adds	r3, r7, r0
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	2b21      	cmp	r3, #33	@ 0x21
 8011de0:	d003      	beq.n	8011dea <I2C_ITSlaveCplt+0x3a>
 8011de2:	183b      	adds	r3, r7, r0
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	2b29      	cmp	r3, #41	@ 0x29
 8011de8:	d109      	bne.n	8011dfe <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011dea:	4a7b      	ldr	r2, [pc, #492]	@ (8011fd8 <I2C_ITSlaveCplt+0x228>)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	0011      	movs	r1, r2
 8011df0:	0018      	movs	r0, r3
 8011df2:	f000 fe95 	bl	8012b20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2221      	movs	r2, #33	@ 0x21
 8011dfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8011dfc:	e011      	b.n	8011e22 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011dfe:	220f      	movs	r2, #15
 8011e00:	18bb      	adds	r3, r7, r2
 8011e02:	781b      	ldrb	r3, [r3, #0]
 8011e04:	2b22      	cmp	r3, #34	@ 0x22
 8011e06:	d003      	beq.n	8011e10 <I2C_ITSlaveCplt+0x60>
 8011e08:	18bb      	adds	r3, r7, r2
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e0e:	d108      	bne.n	8011e22 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011e10:	4a72      	ldr	r2, [pc, #456]	@ (8011fdc <I2C_ITSlaveCplt+0x22c>)
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	0011      	movs	r1, r2
 8011e16:	0018      	movs	r0, r3
 8011e18:	f000 fe82 	bl	8012b20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2222      	movs	r2, #34	@ 0x22
 8011e20:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	685a      	ldr	r2, [r3, #4]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2180      	movs	r1, #128	@ 0x80
 8011e2e:	0209      	lsls	r1, r1, #8
 8011e30:	430a      	orrs	r2, r1
 8011e32:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	685a      	ldr	r2, [r3, #4]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4968      	ldr	r1, [pc, #416]	@ (8011fe0 <I2C_ITSlaveCplt+0x230>)
 8011e40:	400a      	ands	r2, r1
 8011e42:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	0018      	movs	r0, r3
 8011e48:	f000 fa55 	bl	80122f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011e4c:	693a      	ldr	r2, [r7, #16]
 8011e4e:	2380      	movs	r3, #128	@ 0x80
 8011e50:	01db      	lsls	r3, r3, #7
 8011e52:	4013      	ands	r3, r2
 8011e54:	d013      	beq.n	8011e7e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	681a      	ldr	r2, [r3, #0]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	4960      	ldr	r1, [pc, #384]	@ (8011fe4 <I2C_ITSlaveCplt+0x234>)
 8011e62:	400a      	ands	r2, r1
 8011e64:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d01f      	beq.n	8011eae <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011e7c:	e017      	b.n	8011eae <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011e7e:	693a      	ldr	r2, [r7, #16]
 8011e80:	2380      	movs	r3, #128	@ 0x80
 8011e82:	021b      	lsls	r3, r3, #8
 8011e84:	4013      	ands	r3, r2
 8011e86:	d012      	beq.n	8011eae <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	681a      	ldr	r2, [r3, #0]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4955      	ldr	r1, [pc, #340]	@ (8011fe8 <I2C_ITSlaveCplt+0x238>)
 8011e94:	400a      	ands	r2, r1
 8011e96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d006      	beq.n	8011eae <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	2204      	movs	r2, #4
 8011eb2:	4013      	ands	r3, r2
 8011eb4:	d020      	beq.n	8011ef8 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	2204      	movs	r2, #4
 8011eba:	4393      	bics	r3, r2
 8011ebc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ec8:	b2d2      	uxtb	r2, r2
 8011eca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ed0:	1c5a      	adds	r2, r3, #1
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d00c      	beq.n	8011ef8 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d005      	beq.n	8011f0e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f06:	2204      	movs	r2, #4
 8011f08:	431a      	orrs	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2242      	movs	r2, #66	@ 0x42
 8011f12:	2100      	movs	r1, #0
 8011f14:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d013      	beq.n	8011f4c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	0011      	movs	r1, r2
 8011f2c:	0018      	movs	r0, r3
 8011f2e:	f000 f8b7 	bl	80120a0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2241      	movs	r2, #65	@ 0x41
 8011f36:	5c9b      	ldrb	r3, [r3, r2]
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	2b28      	cmp	r3, #40	@ 0x28
 8011f3c:	d147      	bne.n	8011fce <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011f3e:	697a      	ldr	r2, [r7, #20]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	0011      	movs	r1, r2
 8011f44:	0018      	movs	r0, r3
 8011f46:	f000 f853 	bl	8011ff0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011f4a:	e040      	b.n	8011fce <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f50:	4a26      	ldr	r2, [pc, #152]	@ (8011fec <I2C_ITSlaveCplt+0x23c>)
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d016      	beq.n	8011f84 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	0018      	movs	r0, r3
 8011f5a:	f7ff fdf7 	bl	8011b4c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	4a22      	ldr	r2, [pc, #136]	@ (8011fec <I2C_ITSlaveCplt+0x23c>)
 8011f62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2241      	movs	r2, #65	@ 0x41
 8011f68:	2120      	movs	r1, #32
 8011f6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2240      	movs	r2, #64	@ 0x40
 8011f76:	2100      	movs	r1, #0
 8011f78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	0018      	movs	r0, r3
 8011f7e:	f7fe ffae 	bl	8010ede <HAL_I2C_ListenCpltCallback>
}
 8011f82:	e024      	b.n	8011fce <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2241      	movs	r2, #65	@ 0x41
 8011f88:	5c9b      	ldrb	r3, [r3, r2]
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	2b22      	cmp	r3, #34	@ 0x22
 8011f8e:	d10f      	bne.n	8011fb0 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2241      	movs	r2, #65	@ 0x41
 8011f94:	2120      	movs	r1, #32
 8011f96:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2240      	movs	r2, #64	@ 0x40
 8011fa2:	2100      	movs	r1, #0
 8011fa4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	0018      	movs	r0, r3
 8011faa:	f7fe ff80 	bl	8010eae <HAL_I2C_SlaveRxCpltCallback>
}
 8011fae:	e00e      	b.n	8011fce <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2241      	movs	r2, #65	@ 0x41
 8011fb4:	2120      	movs	r1, #32
 8011fb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2240      	movs	r2, #64	@ 0x40
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	0018      	movs	r0, r3
 8011fca:	f7fe ff68 	bl	8010e9e <HAL_I2C_SlaveTxCpltCallback>
}
 8011fce:	46c0      	nop			@ (mov r8, r8)
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	b006      	add	sp, #24
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	46c0      	nop			@ (mov r8, r8)
 8011fd8:	00008001 	.word	0x00008001
 8011fdc:	00008002 	.word	0x00008002
 8011fe0:	fe00e800 	.word	0xfe00e800
 8011fe4:	ffffbfff 	.word	0xffffbfff
 8011fe8:	ffff7fff 	.word	0xffff7fff
 8011fec:	ffff0000 	.word	0xffff0000

08011ff0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4a26      	ldr	r2, [pc, #152]	@ (8012098 <I2C_ITListenCplt+0xa8>)
 8011ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2200      	movs	r2, #0
 8012004:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2241      	movs	r2, #65	@ 0x41
 801200a:	2120      	movs	r1, #32
 801200c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2242      	movs	r2, #66	@ 0x42
 8012012:	2100      	movs	r1, #0
 8012014:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2200      	movs	r2, #0
 801201a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	2204      	movs	r2, #4
 8012020:	4013      	ands	r3, r2
 8012022:	d022      	beq.n	801206a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801202e:	b2d2      	uxtb	r2, r2
 8012030:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012036:	1c5a      	adds	r2, r3, #1
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012040:	2b00      	cmp	r3, #0
 8012042:	d012      	beq.n	801206a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012048:	3b01      	subs	r3, #1
 801204a:	b29a      	uxth	r2, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012054:	b29b      	uxth	r3, r3
 8012056:	3b01      	subs	r3, #1
 8012058:	b29a      	uxth	r2, r3
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012062:	2204      	movs	r2, #4
 8012064:	431a      	orrs	r2, r3
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801206a:	4a0c      	ldr	r2, [pc, #48]	@ (801209c <I2C_ITListenCplt+0xac>)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	0011      	movs	r1, r2
 8012070:	0018      	movs	r0, r3
 8012072:	f000 fd55 	bl	8012b20 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	2210      	movs	r2, #16
 801207c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2240      	movs	r2, #64	@ 0x40
 8012082:	2100      	movs	r1, #0
 8012084:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	0018      	movs	r0, r3
 801208a:	f7fe ff28 	bl	8010ede <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801208e:	46c0      	nop			@ (mov r8, r8)
 8012090:	46bd      	mov	sp, r7
 8012092:	b002      	add	sp, #8
 8012094:	bd80      	pop	{r7, pc}
 8012096:	46c0      	nop			@ (mov r8, r8)
 8012098:	ffff0000 	.word	0xffff0000
 801209c:	00008003 	.word	0x00008003

080120a0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80120aa:	200f      	movs	r0, #15
 80120ac:	183b      	adds	r3, r7, r0
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	2141      	movs	r1, #65	@ 0x41
 80120b2:	5c52      	ldrb	r2, [r2, r1]
 80120b4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2242      	movs	r2, #66	@ 0x42
 80120ba:	2100      	movs	r1, #0
 80120bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4a72      	ldr	r2, [pc, #456]	@ (801228c <I2C_ITError+0x1ec>)
 80120c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	431a      	orrs	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80120d6:	183b      	adds	r3, r7, r0
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	2b28      	cmp	r3, #40	@ 0x28
 80120dc:	d007      	beq.n	80120ee <I2C_ITError+0x4e>
 80120de:	183b      	adds	r3, r7, r0
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	2b29      	cmp	r3, #41	@ 0x29
 80120e4:	d003      	beq.n	80120ee <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80120e6:	183b      	adds	r3, r7, r0
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80120ec:	d10c      	bne.n	8012108 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2103      	movs	r1, #3
 80120f2:	0018      	movs	r0, r3
 80120f4:	f000 fd14 	bl	8012b20 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2241      	movs	r2, #65	@ 0x41
 80120fc:	2128      	movs	r1, #40	@ 0x28
 80120fe:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	4a63      	ldr	r2, [pc, #396]	@ (8012290 <I2C_ITError+0x1f0>)
 8012104:	635a      	str	r2, [r3, #52]	@ 0x34
 8012106:	e032      	b.n	801216e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012108:	4a62      	ldr	r2, [pc, #392]	@ (8012294 <I2C_ITError+0x1f4>)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	0011      	movs	r1, r2
 801210e:	0018      	movs	r0, r3
 8012110:	f000 fd06 	bl	8012b20 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	0018      	movs	r0, r3
 8012118:	f000 f8ed 	bl	80122f6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2241      	movs	r2, #65	@ 0x41
 8012120:	5c9b      	ldrb	r3, [r3, r2]
 8012122:	b2db      	uxtb	r3, r3
 8012124:	2b60      	cmp	r3, #96	@ 0x60
 8012126:	d01f      	beq.n	8012168 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2241      	movs	r2, #65	@ 0x41
 801212c:	2120      	movs	r1, #32
 801212e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	699b      	ldr	r3, [r3, #24]
 8012136:	2220      	movs	r2, #32
 8012138:	4013      	ands	r3, r2
 801213a:	2b20      	cmp	r3, #32
 801213c:	d114      	bne.n	8012168 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	699b      	ldr	r3, [r3, #24]
 8012144:	2210      	movs	r2, #16
 8012146:	4013      	ands	r3, r2
 8012148:	2b10      	cmp	r3, #16
 801214a:	d109      	bne.n	8012160 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2210      	movs	r2, #16
 8012152:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012158:	2204      	movs	r2, #4
 801215a:	431a      	orrs	r2, r3
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2220      	movs	r2, #32
 8012166:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2200      	movs	r2, #0
 801216c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012172:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012178:	2b00      	cmp	r3, #0
 801217a:	d03b      	beq.n	80121f4 <I2C_ITError+0x154>
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	2b11      	cmp	r3, #17
 8012180:	d002      	beq.n	8012188 <I2C_ITError+0xe8>
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	2b21      	cmp	r3, #33	@ 0x21
 8012186:	d135      	bne.n	80121f4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	681a      	ldr	r2, [r3, #0]
 801218e:	2380      	movs	r3, #128	@ 0x80
 8012190:	01db      	lsls	r3, r3, #7
 8012192:	401a      	ands	r2, r3
 8012194:	2380      	movs	r3, #128	@ 0x80
 8012196:	01db      	lsls	r3, r3, #7
 8012198:	429a      	cmp	r2, r3
 801219a:	d107      	bne.n	80121ac <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	493c      	ldr	r1, [pc, #240]	@ (8012298 <I2C_ITError+0x1f8>)
 80121a8:	400a      	ands	r2, r1
 80121aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121b0:	0018      	movs	r0, r3
 80121b2:	f7fd fd62 	bl	800fc7a <HAL_DMA_GetState>
 80121b6:	0003      	movs	r3, r0
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d016      	beq.n	80121ea <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121c0:	4a36      	ldr	r2, [pc, #216]	@ (801229c <I2C_ITError+0x1fc>)
 80121c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2240      	movs	r2, #64	@ 0x40
 80121c8:	2100      	movs	r1, #0
 80121ca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121d0:	0018      	movs	r0, r3
 80121d2:	f7fd fc5d 	bl	800fa90 <HAL_DMA_Abort_IT>
 80121d6:	1e03      	subs	r3, r0, #0
 80121d8:	d051      	beq.n	801227e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121e4:	0018      	movs	r0, r3
 80121e6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80121e8:	e049      	b.n	801227e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	0018      	movs	r0, r3
 80121ee:	f000 f859 	bl	80122a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80121f2:	e044      	b.n	801227e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d03b      	beq.n	8012274 <I2C_ITError+0x1d4>
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	2b12      	cmp	r3, #18
 8012200:	d002      	beq.n	8012208 <I2C_ITError+0x168>
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	2b22      	cmp	r3, #34	@ 0x22
 8012206:	d135      	bne.n	8012274 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	2380      	movs	r3, #128	@ 0x80
 8012210:	021b      	lsls	r3, r3, #8
 8012212:	401a      	ands	r2, r3
 8012214:	2380      	movs	r3, #128	@ 0x80
 8012216:	021b      	lsls	r3, r3, #8
 8012218:	429a      	cmp	r2, r3
 801221a:	d107      	bne.n	801222c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	491e      	ldr	r1, [pc, #120]	@ (80122a0 <I2C_ITError+0x200>)
 8012228:	400a      	ands	r2, r1
 801222a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012230:	0018      	movs	r0, r3
 8012232:	f7fd fd22 	bl	800fc7a <HAL_DMA_GetState>
 8012236:	0003      	movs	r3, r0
 8012238:	2b01      	cmp	r3, #1
 801223a:	d016      	beq.n	801226a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012240:	4a16      	ldr	r2, [pc, #88]	@ (801229c <I2C_ITError+0x1fc>)
 8012242:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2240      	movs	r2, #64	@ 0x40
 8012248:	2100      	movs	r1, #0
 801224a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012250:	0018      	movs	r0, r3
 8012252:	f7fd fc1d 	bl	800fa90 <HAL_DMA_Abort_IT>
 8012256:	1e03      	subs	r3, r0, #0
 8012258:	d013      	beq.n	8012282 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801225e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012264:	0018      	movs	r0, r3
 8012266:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012268:	e00b      	b.n	8012282 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	0018      	movs	r0, r3
 801226e:	f000 f819 	bl	80122a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012272:	e006      	b.n	8012282 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	0018      	movs	r0, r3
 8012278:	f000 f814 	bl	80122a4 <I2C_TreatErrorCallback>
  }
}
 801227c:	e002      	b.n	8012284 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801227e:	46c0      	nop			@ (mov r8, r8)
 8012280:	e000      	b.n	8012284 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012282:	46c0      	nop			@ (mov r8, r8)
}
 8012284:	46c0      	nop			@ (mov r8, r8)
 8012286:	46bd      	mov	sp, r7
 8012288:	b004      	add	sp, #16
 801228a:	bd80      	pop	{r7, pc}
 801228c:	ffff0000 	.word	0xffff0000
 8012290:	08011185 	.word	0x08011185
 8012294:	00008003 	.word	0x00008003
 8012298:	ffffbfff 	.word	0xffffbfff
 801229c:	080124af 	.word	0x080124af
 80122a0:	ffff7fff 	.word	0xffff7fff

080122a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2241      	movs	r2, #65	@ 0x41
 80122b0:	5c9b      	ldrb	r3, [r3, r2]
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	2b60      	cmp	r3, #96	@ 0x60
 80122b6:	d10f      	bne.n	80122d8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2241      	movs	r2, #65	@ 0x41
 80122bc:	2120      	movs	r1, #32
 80122be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2200      	movs	r2, #0
 80122c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2240      	movs	r2, #64	@ 0x40
 80122ca:	2100      	movs	r1, #0
 80122cc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	0018      	movs	r0, r3
 80122d2:	f7fe fe24 	bl	8010f1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80122d6:	e00a      	b.n	80122ee <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2240      	movs	r2, #64	@ 0x40
 80122e2:	2100      	movs	r1, #0
 80122e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	0018      	movs	r0, r3
 80122ea:	f7fe fe10 	bl	8010f0e <HAL_I2C_ErrorCallback>
}
 80122ee:	46c0      	nop			@ (mov r8, r8)
 80122f0:	46bd      	mov	sp, r7
 80122f2:	b002      	add	sp, #8
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b082      	sub	sp, #8
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	699b      	ldr	r3, [r3, #24]
 8012304:	2202      	movs	r2, #2
 8012306:	4013      	ands	r3, r2
 8012308:	2b02      	cmp	r3, #2
 801230a:	d103      	bne.n	8012314 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2200      	movs	r2, #0
 8012312:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	699b      	ldr	r3, [r3, #24]
 801231a:	2201      	movs	r2, #1
 801231c:	4013      	ands	r3, r2
 801231e:	2b01      	cmp	r3, #1
 8012320:	d007      	beq.n	8012332 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	699a      	ldr	r2, [r3, #24]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2101      	movs	r1, #1
 801232e:	430a      	orrs	r2, r1
 8012330:	619a      	str	r2, [r3, #24]
  }
}
 8012332:	46c0      	nop			@ (mov r8, r8)
 8012334:	46bd      	mov	sp, r7
 8012336:	b002      	add	sp, #8
 8012338:	bd80      	pop	{r7, pc}
	...

0801233c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012348:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4920      	ldr	r1, [pc, #128]	@ (80123d8 <I2C_DMAMasterTransmitCplt+0x9c>)
 8012356:	400a      	ands	r2, r1
 8012358:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801235e:	b29b      	uxth	r3, r3
 8012360:	2b00      	cmp	r3, #0
 8012362:	d105      	bne.n	8012370 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	2120      	movs	r1, #32
 8012368:	0018      	movs	r0, r3
 801236a:	f000 fb4b 	bl	8012a04 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801236e:	e02e      	b.n	80123ce <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012374:	68fa      	ldr	r2, [r7, #12]
 8012376:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012378:	189a      	adds	r2, r3, r2
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012382:	b29b      	uxth	r3, r3
 8012384:	2bff      	cmp	r3, #255	@ 0xff
 8012386:	d903      	bls.n	8012390 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	22ff      	movs	r2, #255	@ 0xff
 801238c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801238e:	e004      	b.n	801239a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012394:	b29a      	uxth	r2, r3
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123a2:	0019      	movs	r1, r3
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	3328      	adds	r3, #40	@ 0x28
 80123aa:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80123b0:	f7fd fac8 	bl	800f944 <HAL_DMA_Start_IT>
 80123b4:	1e03      	subs	r3, r0, #0
 80123b6:	d005      	beq.n	80123c4 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	2110      	movs	r1, #16
 80123bc:	0018      	movs	r0, r3
 80123be:	f7ff fe6f 	bl	80120a0 <I2C_ITError>
}
 80123c2:	e004      	b.n	80123ce <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2140      	movs	r1, #64	@ 0x40
 80123c8:	0018      	movs	r0, r3
 80123ca:	f000 fb1b 	bl	8012a04 <I2C_Enable_IRQ>
}
 80123ce:	46c0      	nop			@ (mov r8, r8)
 80123d0:	46bd      	mov	sp, r7
 80123d2:	b004      	add	sp, #16
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	46c0      	nop			@ (mov r8, r8)
 80123d8:	ffffbfff 	.word	0xffffbfff

080123dc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123e8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	681a      	ldr	r2, [r3, #0]
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	4920      	ldr	r1, [pc, #128]	@ (8012478 <I2C_DMAMasterReceiveCplt+0x9c>)
 80123f6:	400a      	ands	r2, r1
 80123f8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80123fe:	b29b      	uxth	r3, r3
 8012400:	2b00      	cmp	r3, #0
 8012402:	d105      	bne.n	8012410 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	2120      	movs	r1, #32
 8012408:	0018      	movs	r0, r3
 801240a:	f000 fafb 	bl	8012a04 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801240e:	e02e      	b.n	801246e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012418:	189a      	adds	r2, r3, r2
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012422:	b29b      	uxth	r3, r3
 8012424:	2bff      	cmp	r3, #255	@ 0xff
 8012426:	d903      	bls.n	8012430 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	22ff      	movs	r2, #255	@ 0xff
 801242c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801242e:	e004      	b.n	801243a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012434:	b29a      	uxth	r2, r3
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	3324      	adds	r3, #36	@ 0x24
 8012444:	0019      	movs	r1, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801244a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012450:	f7fd fa78 	bl	800f944 <HAL_DMA_Start_IT>
 8012454:	1e03      	subs	r3, r0, #0
 8012456:	d005      	beq.n	8012464 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2110      	movs	r1, #16
 801245c:	0018      	movs	r0, r3
 801245e:	f7ff fe1f 	bl	80120a0 <I2C_ITError>
}
 8012462:	e004      	b.n	801246e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2140      	movs	r1, #64	@ 0x40
 8012468:	0018      	movs	r0, r3
 801246a:	f000 facb 	bl	8012a04 <I2C_Enable_IRQ>
}
 801246e:	46c0      	nop			@ (mov r8, r8)
 8012470:	46bd      	mov	sp, r7
 8012472:	b004      	add	sp, #16
 8012474:	bd80      	pop	{r7, pc}
 8012476:	46c0      	nop			@ (mov r8, r8)
 8012478:	ffff7fff 	.word	0xffff7fff

0801247c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012488:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	685a      	ldr	r2, [r3, #4]
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	2180      	movs	r1, #128	@ 0x80
 8012496:	0209      	lsls	r1, r1, #8
 8012498:	430a      	orrs	r2, r1
 801249a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2110      	movs	r1, #16
 80124a0:	0018      	movs	r0, r3
 80124a2:	f7ff fdfd 	bl	80120a0 <I2C_ITError>
}
 80124a6:	46c0      	nop			@ (mov r8, r8)
 80124a8:	46bd      	mov	sp, r7
 80124aa:	b004      	add	sp, #16
 80124ac:	bd80      	pop	{r7, pc}

080124ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b084      	sub	sp, #16
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d003      	beq.n	80124cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124c8:	2200      	movs	r2, #0
 80124ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d003      	beq.n	80124dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124d8:	2200      	movs	r2, #0
 80124da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	0018      	movs	r0, r3
 80124e0:	f7ff fee0 	bl	80122a4 <I2C_TreatErrorCallback>
}
 80124e4:	46c0      	nop			@ (mov r8, r8)
 80124e6:	46bd      	mov	sp, r7
 80124e8:	b004      	add	sp, #16
 80124ea:	bd80      	pop	{r7, pc}

080124ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	603b      	str	r3, [r7, #0]
 80124f8:	1dfb      	adds	r3, r7, #7
 80124fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80124fc:	e030      	b.n	8012560 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	3301      	adds	r3, #1
 8012502:	d02d      	beq.n	8012560 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012504:	f7fc fccc 	bl	800eea0 <HAL_GetTick>
 8012508:	0002      	movs	r2, r0
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	1ad3      	subs	r3, r2, r3
 801250e:	683a      	ldr	r2, [r7, #0]
 8012510:	429a      	cmp	r2, r3
 8012512:	d302      	bcc.n	801251a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d122      	bne.n	8012560 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	699b      	ldr	r3, [r3, #24]
 8012520:	68ba      	ldr	r2, [r7, #8]
 8012522:	4013      	ands	r3, r2
 8012524:	68ba      	ldr	r2, [r7, #8]
 8012526:	1ad3      	subs	r3, r2, r3
 8012528:	425a      	negs	r2, r3
 801252a:	4153      	adcs	r3, r2
 801252c:	b2db      	uxtb	r3, r3
 801252e:	001a      	movs	r2, r3
 8012530:	1dfb      	adds	r3, r7, #7
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	429a      	cmp	r2, r3
 8012536:	d113      	bne.n	8012560 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801253c:	2220      	movs	r2, #32
 801253e:	431a      	orrs	r2, r3
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2241      	movs	r2, #65	@ 0x41
 8012548:	2120      	movs	r1, #32
 801254a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	2242      	movs	r2, #66	@ 0x42
 8012550:	2100      	movs	r1, #0
 8012552:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2240      	movs	r2, #64	@ 0x40
 8012558:	2100      	movs	r1, #0
 801255a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 801255c:	2301      	movs	r3, #1
 801255e:	e00f      	b.n	8012580 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	699b      	ldr	r3, [r3, #24]
 8012566:	68ba      	ldr	r2, [r7, #8]
 8012568:	4013      	ands	r3, r2
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	425a      	negs	r2, r3
 8012570:	4153      	adcs	r3, r2
 8012572:	b2db      	uxtb	r3, r3
 8012574:	001a      	movs	r2, r3
 8012576:	1dfb      	adds	r3, r7, #7
 8012578:	781b      	ldrb	r3, [r3, #0]
 801257a:	429a      	cmp	r2, r3
 801257c:	d0bf      	beq.n	80124fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801257e:	2300      	movs	r3, #0
}
 8012580:	0018      	movs	r0, r3
 8012582:	46bd      	mov	sp, r7
 8012584:	b004      	add	sp, #16
 8012586:	bd80      	pop	{r7, pc}

08012588 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b084      	sub	sp, #16
 801258c:	af00      	add	r7, sp, #0
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012594:	e032      	b.n	80125fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	68b9      	ldr	r1, [r7, #8]
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	0018      	movs	r0, r3
 801259e:	f000 f8ff 	bl	80127a0 <I2C_IsErrorOccurred>
 80125a2:	1e03      	subs	r3, r0, #0
 80125a4:	d001      	beq.n	80125aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80125a6:	2301      	movs	r3, #1
 80125a8:	e030      	b.n	801260c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	3301      	adds	r3, #1
 80125ae:	d025      	beq.n	80125fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125b0:	f7fc fc76 	bl	800eea0 <HAL_GetTick>
 80125b4:	0002      	movs	r2, r0
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	1ad3      	subs	r3, r2, r3
 80125ba:	68ba      	ldr	r2, [r7, #8]
 80125bc:	429a      	cmp	r2, r3
 80125be:	d302      	bcc.n	80125c6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d11a      	bne.n	80125fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	699b      	ldr	r3, [r3, #24]
 80125cc:	2202      	movs	r2, #2
 80125ce:	4013      	ands	r3, r2
 80125d0:	2b02      	cmp	r3, #2
 80125d2:	d013      	beq.n	80125fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125d8:	2220      	movs	r2, #32
 80125da:	431a      	orrs	r2, r3
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	2241      	movs	r2, #65	@ 0x41
 80125e4:	2120      	movs	r1, #32
 80125e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	2242      	movs	r2, #66	@ 0x42
 80125ec:	2100      	movs	r1, #0
 80125ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2240      	movs	r2, #64	@ 0x40
 80125f4:	2100      	movs	r1, #0
 80125f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80125f8:	2301      	movs	r3, #1
 80125fa:	e007      	b.n	801260c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	699b      	ldr	r3, [r3, #24]
 8012602:	2202      	movs	r2, #2
 8012604:	4013      	ands	r3, r2
 8012606:	2b02      	cmp	r3, #2
 8012608:	d1c5      	bne.n	8012596 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801260a:	2300      	movs	r3, #0
}
 801260c:	0018      	movs	r0, r3
 801260e:	46bd      	mov	sp, r7
 8012610:	b004      	add	sp, #16
 8012612:	bd80      	pop	{r7, pc}

08012614 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af00      	add	r7, sp, #0
 801261a:	60f8      	str	r0, [r7, #12]
 801261c:	60b9      	str	r1, [r7, #8]
 801261e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012620:	e02f      	b.n	8012682 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	68b9      	ldr	r1, [r7, #8]
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	0018      	movs	r0, r3
 801262a:	f000 f8b9 	bl	80127a0 <I2C_IsErrorOccurred>
 801262e:	1e03      	subs	r3, r0, #0
 8012630:	d001      	beq.n	8012636 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012632:	2301      	movs	r3, #1
 8012634:	e02d      	b.n	8012692 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012636:	f7fc fc33 	bl	800eea0 <HAL_GetTick>
 801263a:	0002      	movs	r2, r0
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	1ad3      	subs	r3, r2, r3
 8012640:	68ba      	ldr	r2, [r7, #8]
 8012642:	429a      	cmp	r2, r3
 8012644:	d302      	bcc.n	801264c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d11a      	bne.n	8012682 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	699b      	ldr	r3, [r3, #24]
 8012652:	2220      	movs	r2, #32
 8012654:	4013      	ands	r3, r2
 8012656:	2b20      	cmp	r3, #32
 8012658:	d013      	beq.n	8012682 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801265e:	2220      	movs	r2, #32
 8012660:	431a      	orrs	r2, r3
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	2241      	movs	r2, #65	@ 0x41
 801266a:	2120      	movs	r1, #32
 801266c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	2242      	movs	r2, #66	@ 0x42
 8012672:	2100      	movs	r1, #0
 8012674:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2240      	movs	r2, #64	@ 0x40
 801267a:	2100      	movs	r1, #0
 801267c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801267e:	2301      	movs	r3, #1
 8012680:	e007      	b.n	8012692 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	699b      	ldr	r3, [r3, #24]
 8012688:	2220      	movs	r2, #32
 801268a:	4013      	ands	r3, r2
 801268c:	2b20      	cmp	r3, #32
 801268e:	d1c8      	bne.n	8012622 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012690:	2300      	movs	r3, #0
}
 8012692:	0018      	movs	r0, r3
 8012694:	46bd      	mov	sp, r7
 8012696:	b004      	add	sp, #16
 8012698:	bd80      	pop	{r7, pc}
	...

0801269c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80126a8:	e06b      	b.n	8012782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80126aa:	687a      	ldr	r2, [r7, #4]
 80126ac:	68b9      	ldr	r1, [r7, #8]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	0018      	movs	r0, r3
 80126b2:	f000 f875 	bl	80127a0 <I2C_IsErrorOccurred>
 80126b6:	1e03      	subs	r3, r0, #0
 80126b8:	d001      	beq.n	80126be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80126ba:	2301      	movs	r3, #1
 80126bc:	e069      	b.n	8012792 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	699b      	ldr	r3, [r3, #24]
 80126c4:	2220      	movs	r2, #32
 80126c6:	4013      	ands	r3, r2
 80126c8:	2b20      	cmp	r3, #32
 80126ca:	d138      	bne.n	801273e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	699b      	ldr	r3, [r3, #24]
 80126d2:	2204      	movs	r2, #4
 80126d4:	4013      	ands	r3, r2
 80126d6:	2b04      	cmp	r3, #4
 80126d8:	d105      	bne.n	80126e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d001      	beq.n	80126e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80126e2:	2300      	movs	r3, #0
 80126e4:	e055      	b.n	8012792 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	699b      	ldr	r3, [r3, #24]
 80126ec:	2210      	movs	r2, #16
 80126ee:	4013      	ands	r3, r2
 80126f0:	2b10      	cmp	r3, #16
 80126f2:	d107      	bne.n	8012704 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2210      	movs	r2, #16
 80126fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	2204      	movs	r2, #4
 8012700:	645a      	str	r2, [r3, #68]	@ 0x44
 8012702:	e002      	b.n	801270a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	2200      	movs	r2, #0
 8012708:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	2220      	movs	r2, #32
 8012710:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	685a      	ldr	r2, [r3, #4]
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	491f      	ldr	r1, [pc, #124]	@ (801279c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801271e:	400a      	ands	r2, r1
 8012720:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2241      	movs	r2, #65	@ 0x41
 8012726:	2120      	movs	r1, #32
 8012728:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	2242      	movs	r2, #66	@ 0x42
 801272e:	2100      	movs	r1, #0
 8012730:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	2240      	movs	r2, #64	@ 0x40
 8012736:	2100      	movs	r1, #0
 8012738:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801273a:	2301      	movs	r3, #1
 801273c:	e029      	b.n	8012792 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801273e:	f7fc fbaf 	bl	800eea0 <HAL_GetTick>
 8012742:	0002      	movs	r2, r0
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	1ad3      	subs	r3, r2, r3
 8012748:	68ba      	ldr	r2, [r7, #8]
 801274a:	429a      	cmp	r2, r3
 801274c:	d302      	bcc.n	8012754 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d116      	bne.n	8012782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	699b      	ldr	r3, [r3, #24]
 801275a:	2204      	movs	r2, #4
 801275c:	4013      	ands	r3, r2
 801275e:	2b04      	cmp	r3, #4
 8012760:	d00f      	beq.n	8012782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012766:	2220      	movs	r2, #32
 8012768:	431a      	orrs	r2, r3
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	2241      	movs	r2, #65	@ 0x41
 8012772:	2120      	movs	r1, #32
 8012774:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2240      	movs	r2, #64	@ 0x40
 801277a:	2100      	movs	r1, #0
 801277c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801277e:	2301      	movs	r3, #1
 8012780:	e007      	b.n	8012792 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	2204      	movs	r2, #4
 801278a:	4013      	ands	r3, r2
 801278c:	2b04      	cmp	r3, #4
 801278e:	d18c      	bne.n	80126aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012790:	2300      	movs	r3, #0
}
 8012792:	0018      	movs	r0, r3
 8012794:	46bd      	mov	sp, r7
 8012796:	b004      	add	sp, #16
 8012798:	bd80      	pop	{r7, pc}
 801279a:	46c0      	nop			@ (mov r8, r8)
 801279c:	fe00e800 	.word	0xfe00e800

080127a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b08a      	sub	sp, #40	@ 0x28
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	60b9      	str	r1, [r7, #8]
 80127aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80127ac:	2327      	movs	r3, #39	@ 0x27
 80127ae:	18fb      	adds	r3, r7, r3
 80127b0:	2200      	movs	r2, #0
 80127b2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	699b      	ldr	r3, [r3, #24]
 80127ba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80127bc:	2300      	movs	r3, #0
 80127be:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	2210      	movs	r2, #16
 80127c8:	4013      	ands	r3, r2
 80127ca:	d100      	bne.n	80127ce <I2C_IsErrorOccurred+0x2e>
 80127cc:	e079      	b.n	80128c2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	2210      	movs	r2, #16
 80127d4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80127d6:	e057      	b.n	8012888 <I2C_IsErrorOccurred+0xe8>
 80127d8:	2227      	movs	r2, #39	@ 0x27
 80127da:	18bb      	adds	r3, r7, r2
 80127dc:	18ba      	adds	r2, r7, r2
 80127de:	7812      	ldrb	r2, [r2, #0]
 80127e0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	3301      	adds	r3, #1
 80127e6:	d04f      	beq.n	8012888 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80127e8:	f7fc fb5a 	bl	800eea0 <HAL_GetTick>
 80127ec:	0002      	movs	r2, r0
 80127ee:	69fb      	ldr	r3, [r7, #28]
 80127f0:	1ad3      	subs	r3, r2, r3
 80127f2:	68ba      	ldr	r2, [r7, #8]
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d302      	bcc.n	80127fe <I2C_IsErrorOccurred+0x5e>
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d144      	bne.n	8012888 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	685a      	ldr	r2, [r3, #4]
 8012804:	2380      	movs	r3, #128	@ 0x80
 8012806:	01db      	lsls	r3, r3, #7
 8012808:	4013      	ands	r3, r2
 801280a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801280c:	2013      	movs	r0, #19
 801280e:	183b      	adds	r3, r7, r0
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	2142      	movs	r1, #66	@ 0x42
 8012814:	5c52      	ldrb	r2, [r2, r1]
 8012816:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	699a      	ldr	r2, [r3, #24]
 801281e:	2380      	movs	r3, #128	@ 0x80
 8012820:	021b      	lsls	r3, r3, #8
 8012822:	401a      	ands	r2, r3
 8012824:	2380      	movs	r3, #128	@ 0x80
 8012826:	021b      	lsls	r3, r3, #8
 8012828:	429a      	cmp	r2, r3
 801282a:	d126      	bne.n	801287a <I2C_IsErrorOccurred+0xda>
 801282c:	697a      	ldr	r2, [r7, #20]
 801282e:	2380      	movs	r3, #128	@ 0x80
 8012830:	01db      	lsls	r3, r3, #7
 8012832:	429a      	cmp	r2, r3
 8012834:	d021      	beq.n	801287a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8012836:	183b      	adds	r3, r7, r0
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	2b20      	cmp	r3, #32
 801283c:	d01d      	beq.n	801287a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	685a      	ldr	r2, [r3, #4]
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2180      	movs	r1, #128	@ 0x80
 801284a:	01c9      	lsls	r1, r1, #7
 801284c:	430a      	orrs	r2, r1
 801284e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012850:	f7fc fb26 	bl	800eea0 <HAL_GetTick>
 8012854:	0003      	movs	r3, r0
 8012856:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012858:	e00f      	b.n	801287a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801285a:	f7fc fb21 	bl	800eea0 <HAL_GetTick>
 801285e:	0002      	movs	r2, r0
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	1ad3      	subs	r3, r2, r3
 8012864:	2b19      	cmp	r3, #25
 8012866:	d908      	bls.n	801287a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8012868:	6a3b      	ldr	r3, [r7, #32]
 801286a:	2220      	movs	r2, #32
 801286c:	4313      	orrs	r3, r2
 801286e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012870:	2327      	movs	r3, #39	@ 0x27
 8012872:	18fb      	adds	r3, r7, r3
 8012874:	2201      	movs	r2, #1
 8012876:	701a      	strb	r2, [r3, #0]

              break;
 8012878:	e006      	b.n	8012888 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	699b      	ldr	r3, [r3, #24]
 8012880:	2220      	movs	r2, #32
 8012882:	4013      	ands	r3, r2
 8012884:	2b20      	cmp	r3, #32
 8012886:	d1e8      	bne.n	801285a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	699b      	ldr	r3, [r3, #24]
 801288e:	2220      	movs	r2, #32
 8012890:	4013      	ands	r3, r2
 8012892:	2b20      	cmp	r3, #32
 8012894:	d004      	beq.n	80128a0 <I2C_IsErrorOccurred+0x100>
 8012896:	2327      	movs	r3, #39	@ 0x27
 8012898:	18fb      	adds	r3, r7, r3
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d09b      	beq.n	80127d8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80128a0:	2327      	movs	r3, #39	@ 0x27
 80128a2:	18fb      	adds	r3, r7, r3
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d103      	bne.n	80128b2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	2220      	movs	r2, #32
 80128b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80128b2:	6a3b      	ldr	r3, [r7, #32]
 80128b4:	2204      	movs	r2, #4
 80128b6:	4313      	orrs	r3, r2
 80128b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80128ba:	2327      	movs	r3, #39	@ 0x27
 80128bc:	18fb      	adds	r3, r7, r3
 80128be:	2201      	movs	r2, #1
 80128c0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	699b      	ldr	r3, [r3, #24]
 80128c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80128ca:	69ba      	ldr	r2, [r7, #24]
 80128cc:	2380      	movs	r3, #128	@ 0x80
 80128ce:	005b      	lsls	r3, r3, #1
 80128d0:	4013      	ands	r3, r2
 80128d2:	d00c      	beq.n	80128ee <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80128d4:	6a3b      	ldr	r3, [r7, #32]
 80128d6:	2201      	movs	r2, #1
 80128d8:	4313      	orrs	r3, r2
 80128da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2280      	movs	r2, #128	@ 0x80
 80128e2:	0052      	lsls	r2, r2, #1
 80128e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80128e6:	2327      	movs	r3, #39	@ 0x27
 80128e8:	18fb      	adds	r3, r7, r3
 80128ea:	2201      	movs	r2, #1
 80128ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80128ee:	69ba      	ldr	r2, [r7, #24]
 80128f0:	2380      	movs	r3, #128	@ 0x80
 80128f2:	00db      	lsls	r3, r3, #3
 80128f4:	4013      	ands	r3, r2
 80128f6:	d00c      	beq.n	8012912 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80128f8:	6a3b      	ldr	r3, [r7, #32]
 80128fa:	2208      	movs	r2, #8
 80128fc:	4313      	orrs	r3, r2
 80128fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	2280      	movs	r2, #128	@ 0x80
 8012906:	00d2      	lsls	r2, r2, #3
 8012908:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801290a:	2327      	movs	r3, #39	@ 0x27
 801290c:	18fb      	adds	r3, r7, r3
 801290e:	2201      	movs	r2, #1
 8012910:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012912:	69ba      	ldr	r2, [r7, #24]
 8012914:	2380      	movs	r3, #128	@ 0x80
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	4013      	ands	r3, r2
 801291a:	d00c      	beq.n	8012936 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801291c:	6a3b      	ldr	r3, [r7, #32]
 801291e:	2202      	movs	r2, #2
 8012920:	4313      	orrs	r3, r2
 8012922:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	2280      	movs	r2, #128	@ 0x80
 801292a:	0092      	lsls	r2, r2, #2
 801292c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801292e:	2327      	movs	r3, #39	@ 0x27
 8012930:	18fb      	adds	r3, r7, r3
 8012932:	2201      	movs	r2, #1
 8012934:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8012936:	2327      	movs	r3, #39	@ 0x27
 8012938:	18fb      	adds	r3, r7, r3
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d01d      	beq.n	801297c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	0018      	movs	r0, r3
 8012944:	f7ff fcd7 	bl	80122f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	685a      	ldr	r2, [r3, #4]
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	490e      	ldr	r1, [pc, #56]	@ (801298c <I2C_IsErrorOccurred+0x1ec>)
 8012954:	400a      	ands	r2, r1
 8012956:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801295c:	6a3b      	ldr	r3, [r7, #32]
 801295e:	431a      	orrs	r2, r3
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2241      	movs	r2, #65	@ 0x41
 8012968:	2120      	movs	r1, #32
 801296a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2242      	movs	r2, #66	@ 0x42
 8012970:	2100      	movs	r1, #0
 8012972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2240      	movs	r2, #64	@ 0x40
 8012978:	2100      	movs	r1, #0
 801297a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801297c:	2327      	movs	r3, #39	@ 0x27
 801297e:	18fb      	adds	r3, r7, r3
 8012980:	781b      	ldrb	r3, [r3, #0]
}
 8012982:	0018      	movs	r0, r3
 8012984:	46bd      	mov	sp, r7
 8012986:	b00a      	add	sp, #40	@ 0x28
 8012988:	bd80      	pop	{r7, pc}
 801298a:	46c0      	nop			@ (mov r8, r8)
 801298c:	fe00e800 	.word	0xfe00e800

08012990 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012990:	b590      	push	{r4, r7, lr}
 8012992:	b087      	sub	sp, #28
 8012994:	af00      	add	r7, sp, #0
 8012996:	60f8      	str	r0, [r7, #12]
 8012998:	0008      	movs	r0, r1
 801299a:	0011      	movs	r1, r2
 801299c:	607b      	str	r3, [r7, #4]
 801299e:	240a      	movs	r4, #10
 80129a0:	193b      	adds	r3, r7, r4
 80129a2:	1c02      	adds	r2, r0, #0
 80129a4:	801a      	strh	r2, [r3, #0]
 80129a6:	2009      	movs	r0, #9
 80129a8:	183b      	adds	r3, r7, r0
 80129aa:	1c0a      	adds	r2, r1, #0
 80129ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129ae:	193b      	adds	r3, r7, r4
 80129b0:	881b      	ldrh	r3, [r3, #0]
 80129b2:	059b      	lsls	r3, r3, #22
 80129b4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80129b6:	183b      	adds	r3, r7, r0
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	0419      	lsls	r1, r3, #16
 80129bc:	23ff      	movs	r3, #255	@ 0xff
 80129be:	041b      	lsls	r3, r3, #16
 80129c0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129c2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129ca:	4313      	orrs	r3, r2
 80129cc:	005b      	lsls	r3, r3, #1
 80129ce:	085b      	lsrs	r3, r3, #1
 80129d0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129da:	0d51      	lsrs	r1, r2, #21
 80129dc:	2280      	movs	r2, #128	@ 0x80
 80129de:	00d2      	lsls	r2, r2, #3
 80129e0:	400a      	ands	r2, r1
 80129e2:	4907      	ldr	r1, [pc, #28]	@ (8012a00 <I2C_TransferConfig+0x70>)
 80129e4:	430a      	orrs	r2, r1
 80129e6:	43d2      	mvns	r2, r2
 80129e8:	401a      	ands	r2, r3
 80129ea:	0011      	movs	r1, r2
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	697a      	ldr	r2, [r7, #20]
 80129f2:	430a      	orrs	r2, r1
 80129f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80129f6:	46c0      	nop			@ (mov r8, r8)
 80129f8:	46bd      	mov	sp, r7
 80129fa:	b007      	add	sp, #28
 80129fc:	bd90      	pop	{r4, r7, pc}
 80129fe:	46c0      	nop			@ (mov r8, r8)
 8012a00:	03ff63ff 	.word	0x03ff63ff

08012a04 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	000a      	movs	r2, r1
 8012a0e:	1cbb      	adds	r3, r7, #2
 8012a10:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012a12:	2300      	movs	r3, #0
 8012a14:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8012b14 <I2C_Enable_IRQ+0x110>)
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	d035      	beq.n	8012a8c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012a24:	4b3c      	ldr	r3, [pc, #240]	@ (8012b18 <I2C_Enable_IRQ+0x114>)
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d030      	beq.n	8012a8c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8012b1c <I2C_Enable_IRQ+0x118>)
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d02b      	beq.n	8012a8c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012a34:	1cbb      	adds	r3, r7, #2
 8012a36:	2200      	movs	r2, #0
 8012a38:	5e9b      	ldrsh	r3, [r3, r2]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	da03      	bge.n	8012a46 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	22b8      	movs	r2, #184	@ 0xb8
 8012a42:	4313      	orrs	r3, r2
 8012a44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012a46:	1cbb      	adds	r3, r7, #2
 8012a48:	881b      	ldrh	r3, [r3, #0]
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	4013      	ands	r3, r2
 8012a4e:	d003      	beq.n	8012a58 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	22f2      	movs	r2, #242	@ 0xf2
 8012a54:	4313      	orrs	r3, r2
 8012a56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012a58:	1cbb      	adds	r3, r7, #2
 8012a5a:	881b      	ldrh	r3, [r3, #0]
 8012a5c:	2202      	movs	r2, #2
 8012a5e:	4013      	ands	r3, r2
 8012a60:	d003      	beq.n	8012a6a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	22f4      	movs	r2, #244	@ 0xf4
 8012a66:	4313      	orrs	r3, r2
 8012a68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012a6a:	1cbb      	adds	r3, r7, #2
 8012a6c:	881b      	ldrh	r3, [r3, #0]
 8012a6e:	2b10      	cmp	r3, #16
 8012a70:	d103      	bne.n	8012a7a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	2290      	movs	r2, #144	@ 0x90
 8012a76:	4313      	orrs	r3, r2
 8012a78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012a7a:	1cbb      	adds	r3, r7, #2
 8012a7c:	881b      	ldrh	r3, [r3, #0]
 8012a7e:	2b20      	cmp	r3, #32
 8012a80:	d13c      	bne.n	8012afc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	2220      	movs	r2, #32
 8012a86:	4313      	orrs	r3, r2
 8012a88:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012a8a:	e037      	b.n	8012afc <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012a8c:	1cbb      	adds	r3, r7, #2
 8012a8e:	2200      	movs	r2, #0
 8012a90:	5e9b      	ldrsh	r3, [r3, r2]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	da03      	bge.n	8012a9e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	22b8      	movs	r2, #184	@ 0xb8
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012a9e:	1cbb      	adds	r3, r7, #2
 8012aa0:	881b      	ldrh	r3, [r3, #0]
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	4013      	ands	r3, r2
 8012aa6:	d003      	beq.n	8012ab0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	22f2      	movs	r2, #242	@ 0xf2
 8012aac:	4313      	orrs	r3, r2
 8012aae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012ab0:	1cbb      	adds	r3, r7, #2
 8012ab2:	881b      	ldrh	r3, [r3, #0]
 8012ab4:	2202      	movs	r2, #2
 8012ab6:	4013      	ands	r3, r2
 8012ab8:	d003      	beq.n	8012ac2 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	22f4      	movs	r2, #244	@ 0xf4
 8012abe:	4313      	orrs	r3, r2
 8012ac0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012ac2:	1cbb      	adds	r3, r7, #2
 8012ac4:	881b      	ldrh	r3, [r3, #0]
 8012ac6:	2b10      	cmp	r3, #16
 8012ac8:	d103      	bne.n	8012ad2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2290      	movs	r2, #144	@ 0x90
 8012ace:	4313      	orrs	r3, r2
 8012ad0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012ad2:	1cbb      	adds	r3, r7, #2
 8012ad4:	881b      	ldrh	r3, [r3, #0]
 8012ad6:	2b20      	cmp	r3, #32
 8012ad8:	d103      	bne.n	8012ae2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	2260      	movs	r2, #96	@ 0x60
 8012ade:	4313      	orrs	r3, r2
 8012ae0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8012b1c <I2C_Enable_IRQ+0x118>)
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d007      	beq.n	8012afc <I2C_Enable_IRQ+0xf8>
 8012aec:	1cbb      	adds	r3, r7, #2
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	2b40      	cmp	r3, #64	@ 0x40
 8012af2:	d103      	bne.n	8012afc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	2240      	movs	r2, #64	@ 0x40
 8012af8:	4313      	orrs	r3, r2
 8012afa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	6819      	ldr	r1, [r3, #0]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	68fa      	ldr	r2, [r7, #12]
 8012b08:	430a      	orrs	r2, r1
 8012b0a:	601a      	str	r2, [r3, #0]
}
 8012b0c:	46c0      	nop			@ (mov r8, r8)
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	b004      	add	sp, #16
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	08011385 	.word	0x08011385
 8012b18:	080117b5 	.word	0x080117b5
 8012b1c:	0801157d 	.word	0x0801157d

08012b20 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b084      	sub	sp, #16
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	000a      	movs	r2, r1
 8012b2a:	1cbb      	adds	r3, r7, #2
 8012b2c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012b32:	1cbb      	adds	r3, r7, #2
 8012b34:	881b      	ldrh	r3, [r3, #0]
 8012b36:	2201      	movs	r2, #1
 8012b38:	4013      	ands	r3, r2
 8012b3a:	d010      	beq.n	8012b5e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	2242      	movs	r2, #66	@ 0x42
 8012b40:	4313      	orrs	r3, r2
 8012b42:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2241      	movs	r2, #65	@ 0x41
 8012b48:	5c9b      	ldrb	r3, [r3, r2]
 8012b4a:	b2db      	uxtb	r3, r3
 8012b4c:	001a      	movs	r2, r3
 8012b4e:	2328      	movs	r3, #40	@ 0x28
 8012b50:	4013      	ands	r3, r2
 8012b52:	2b28      	cmp	r3, #40	@ 0x28
 8012b54:	d003      	beq.n	8012b5e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	22b0      	movs	r2, #176	@ 0xb0
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012b5e:	1cbb      	adds	r3, r7, #2
 8012b60:	881b      	ldrh	r3, [r3, #0]
 8012b62:	2202      	movs	r2, #2
 8012b64:	4013      	ands	r3, r2
 8012b66:	d010      	beq.n	8012b8a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	2244      	movs	r2, #68	@ 0x44
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2241      	movs	r2, #65	@ 0x41
 8012b74:	5c9b      	ldrb	r3, [r3, r2]
 8012b76:	b2db      	uxtb	r3, r3
 8012b78:	001a      	movs	r2, r3
 8012b7a:	2328      	movs	r3, #40	@ 0x28
 8012b7c:	4013      	ands	r3, r2
 8012b7e:	2b28      	cmp	r3, #40	@ 0x28
 8012b80:	d003      	beq.n	8012b8a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	22b0      	movs	r2, #176	@ 0xb0
 8012b86:	4313      	orrs	r3, r2
 8012b88:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012b8a:	1cbb      	adds	r3, r7, #2
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	5e9b      	ldrsh	r3, [r3, r2]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	da03      	bge.n	8012b9c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	22b8      	movs	r2, #184	@ 0xb8
 8012b98:	4313      	orrs	r3, r2
 8012b9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012b9c:	1cbb      	adds	r3, r7, #2
 8012b9e:	881b      	ldrh	r3, [r3, #0]
 8012ba0:	2b10      	cmp	r3, #16
 8012ba2:	d103      	bne.n	8012bac <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2290      	movs	r2, #144	@ 0x90
 8012ba8:	4313      	orrs	r3, r2
 8012baa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012bac:	1cbb      	adds	r3, r7, #2
 8012bae:	881b      	ldrh	r3, [r3, #0]
 8012bb0:	2b20      	cmp	r3, #32
 8012bb2:	d103      	bne.n	8012bbc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	2220      	movs	r2, #32
 8012bb8:	4313      	orrs	r3, r2
 8012bba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012bbc:	1cbb      	adds	r3, r7, #2
 8012bbe:	881b      	ldrh	r3, [r3, #0]
 8012bc0:	2b40      	cmp	r3, #64	@ 0x40
 8012bc2:	d103      	bne.n	8012bcc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2240      	movs	r2, #64	@ 0x40
 8012bc8:	4313      	orrs	r3, r2
 8012bca:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	43d9      	mvns	r1, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	400a      	ands	r2, r1
 8012bdc:	601a      	str	r2, [r3, #0]
}
 8012bde:	46c0      	nop			@ (mov r8, r8)
 8012be0:	46bd      	mov	sp, r7
 8012be2:	b004      	add	sp, #16
 8012be4:	bd80      	pop	{r7, pc}
	...

08012be8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2241      	movs	r2, #65	@ 0x41
 8012bf6:	5c9b      	ldrb	r3, [r3, r2]
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	2b20      	cmp	r3, #32
 8012bfc:	d138      	bne.n	8012c70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2240      	movs	r2, #64	@ 0x40
 8012c02:	5c9b      	ldrb	r3, [r3, r2]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d101      	bne.n	8012c0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012c08:	2302      	movs	r3, #2
 8012c0a:	e032      	b.n	8012c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2240      	movs	r2, #64	@ 0x40
 8012c10:	2101      	movs	r1, #1
 8012c12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2241      	movs	r2, #65	@ 0x41
 8012c18:	2124      	movs	r1, #36	@ 0x24
 8012c1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	681a      	ldr	r2, [r3, #0]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2101      	movs	r1, #1
 8012c28:	438a      	bics	r2, r1
 8012c2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	4911      	ldr	r1, [pc, #68]	@ (8012c7c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012c38:	400a      	ands	r2, r1
 8012c3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	6819      	ldr	r1, [r3, #0]
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	683a      	ldr	r2, [r7, #0]
 8012c48:	430a      	orrs	r2, r1
 8012c4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2101      	movs	r1, #1
 8012c58:	430a      	orrs	r2, r1
 8012c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2241      	movs	r2, #65	@ 0x41
 8012c60:	2120      	movs	r1, #32
 8012c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2240      	movs	r2, #64	@ 0x40
 8012c68:	2100      	movs	r1, #0
 8012c6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	e000      	b.n	8012c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012c70:	2302      	movs	r3, #2
  }
}
 8012c72:	0018      	movs	r0, r3
 8012c74:	46bd      	mov	sp, r7
 8012c76:	b002      	add	sp, #8
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	46c0      	nop			@ (mov r8, r8)
 8012c7c:	ffffefff 	.word	0xffffefff

08012c80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2241      	movs	r2, #65	@ 0x41
 8012c8e:	5c9b      	ldrb	r3, [r3, r2]
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	2b20      	cmp	r3, #32
 8012c94:	d139      	bne.n	8012d0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2240      	movs	r2, #64	@ 0x40
 8012c9a:	5c9b      	ldrb	r3, [r3, r2]
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d101      	bne.n	8012ca4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012ca0:	2302      	movs	r3, #2
 8012ca2:	e033      	b.n	8012d0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2240      	movs	r2, #64	@ 0x40
 8012ca8:	2101      	movs	r1, #1
 8012caa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2241      	movs	r2, #65	@ 0x41
 8012cb0:	2124      	movs	r1, #36	@ 0x24
 8012cb2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	2101      	movs	r1, #1
 8012cc0:	438a      	bics	r2, r1
 8012cc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	4a11      	ldr	r2, [pc, #68]	@ (8012d14 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012cd0:	4013      	ands	r3, r2
 8012cd2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	021b      	lsls	r3, r3, #8
 8012cd8:	68fa      	ldr	r2, [r7, #12]
 8012cda:	4313      	orrs	r3, r2
 8012cdc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	68fa      	ldr	r2, [r7, #12]
 8012ce4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	2101      	movs	r1, #1
 8012cf2:	430a      	orrs	r2, r1
 8012cf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2241      	movs	r2, #65	@ 0x41
 8012cfa:	2120      	movs	r1, #32
 8012cfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2240      	movs	r2, #64	@ 0x40
 8012d02:	2100      	movs	r1, #0
 8012d04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012d06:	2300      	movs	r3, #0
 8012d08:	e000      	b.n	8012d0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012d0a:	2302      	movs	r3, #2
  }
}
 8012d0c:	0018      	movs	r0, r3
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	b004      	add	sp, #16
 8012d12:	bd80      	pop	{r7, pc}
 8012d14:	fffff0ff 	.word	0xfffff0ff

08012d18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b088      	sub	sp, #32
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d101      	bne.n	8012d2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012d26:	2301      	movs	r3, #1
 8012d28:	e0e1      	b.n	8012eee <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2235      	movs	r2, #53	@ 0x35
 8012d2e:	5c9b      	ldrb	r3, [r3, r2]
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d107      	bne.n	8012d46 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2234      	movs	r2, #52	@ 0x34
 8012d3a:	2100      	movs	r1, #0
 8012d3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	0018      	movs	r0, r3
 8012d42:	f7f4 feb9 	bl	8007ab8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2235      	movs	r2, #53	@ 0x35
 8012d4a:	2102      	movs	r1, #2
 8012d4c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	69da      	ldr	r2, [r3, #28]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	4967      	ldr	r1, [pc, #412]	@ (8012ef8 <HAL_I2S_Init+0x1e0>)
 8012d5a:	400a      	ands	r2, r1
 8012d5c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	2202      	movs	r2, #2
 8012d64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	695b      	ldr	r3, [r3, #20]
 8012d6a:	2b02      	cmp	r3, #2
 8012d6c:	d073      	beq.n	8012e56 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	68db      	ldr	r3, [r3, #12]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d102      	bne.n	8012d7c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012d76:	2310      	movs	r3, #16
 8012d78:	617b      	str	r3, [r7, #20]
 8012d7a:	e001      	b.n	8012d80 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012d7c:	2320      	movs	r3, #32
 8012d7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	689b      	ldr	r3, [r3, #8]
 8012d84:	2b20      	cmp	r3, #32
 8012d86:	d802      	bhi.n	8012d8e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	005b      	lsls	r3, r3, #1
 8012d8c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012d8e:	f002 fed3 	bl	8015b38 <HAL_RCC_GetSysClockFreq>
 8012d92:	0003      	movs	r3, r0
 8012d94:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	691a      	ldr	r2, [r3, #16]
 8012d9a:	2380      	movs	r3, #128	@ 0x80
 8012d9c:	009b      	lsls	r3, r3, #2
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d131      	bne.n	8012e06 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d016      	beq.n	8012dd8 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	009b      	lsls	r3, r3, #2
 8012dae:	0019      	movs	r1, r3
 8012db0:	68f8      	ldr	r0, [r7, #12]
 8012db2:	f7ed f9f7 	bl	80001a4 <__udivsi3>
 8012db6:	0003      	movs	r3, r0
 8012db8:	001a      	movs	r2, r3
 8012dba:	0013      	movs	r3, r2
 8012dbc:	009b      	lsls	r3, r3, #2
 8012dbe:	189b      	adds	r3, r3, r2
 8012dc0:	005b      	lsls	r3, r3, #1
 8012dc2:	001a      	movs	r2, r3
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	695b      	ldr	r3, [r3, #20]
 8012dc8:	0019      	movs	r1, r3
 8012dca:	0010      	movs	r0, r2
 8012dcc:	f7ed f9ea 	bl	80001a4 <__udivsi3>
 8012dd0:	0003      	movs	r3, r0
 8012dd2:	3305      	adds	r3, #5
 8012dd4:	613b      	str	r3, [r7, #16]
 8012dd6:	e02a      	b.n	8012e2e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	00db      	lsls	r3, r3, #3
 8012ddc:	0019      	movs	r1, r3
 8012dde:	68f8      	ldr	r0, [r7, #12]
 8012de0:	f7ed f9e0 	bl	80001a4 <__udivsi3>
 8012de4:	0003      	movs	r3, r0
 8012de6:	001a      	movs	r2, r3
 8012de8:	0013      	movs	r3, r2
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	189b      	adds	r3, r3, r2
 8012dee:	005b      	lsls	r3, r3, #1
 8012df0:	001a      	movs	r2, r3
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	695b      	ldr	r3, [r3, #20]
 8012df6:	0019      	movs	r1, r3
 8012df8:	0010      	movs	r0, r2
 8012dfa:	f7ed f9d3 	bl	80001a4 <__udivsi3>
 8012dfe:	0003      	movs	r3, r0
 8012e00:	3305      	adds	r3, #5
 8012e02:	613b      	str	r3, [r7, #16]
 8012e04:	e013      	b.n	8012e2e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012e06:	6979      	ldr	r1, [r7, #20]
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f7ed f9cb 	bl	80001a4 <__udivsi3>
 8012e0e:	0003      	movs	r3, r0
 8012e10:	001a      	movs	r2, r3
 8012e12:	0013      	movs	r3, r2
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	189b      	adds	r3, r3, r2
 8012e18:	005b      	lsls	r3, r3, #1
 8012e1a:	001a      	movs	r2, r3
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	695b      	ldr	r3, [r3, #20]
 8012e20:	0019      	movs	r1, r3
 8012e22:	0010      	movs	r0, r2
 8012e24:	f7ed f9be 	bl	80001a4 <__udivsi3>
 8012e28:	0003      	movs	r3, r0
 8012e2a:	3305      	adds	r3, #5
 8012e2c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	210a      	movs	r1, #10
 8012e32:	0018      	movs	r0, r3
 8012e34:	f7ed f9b6 	bl	80001a4 <__udivsi3>
 8012e38:	0003      	movs	r3, r0
 8012e3a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	4013      	ands	r3, r2
 8012e42:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012e44:	693a      	ldr	r2, [r7, #16]
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	1ad3      	subs	r3, r2, r3
 8012e4a:	085b      	lsrs	r3, r3, #1
 8012e4c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012e4e:	69bb      	ldr	r3, [r7, #24]
 8012e50:	021b      	lsls	r3, r3, #8
 8012e52:	61bb      	str	r3, [r7, #24]
 8012e54:	e003      	b.n	8012e5e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012e56:	2302      	movs	r3, #2
 8012e58:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012e5e:	69fb      	ldr	r3, [r7, #28]
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d902      	bls.n	8012e6a <HAL_I2S_Init+0x152>
 8012e64:	69fb      	ldr	r3, [r7, #28]
 8012e66:	2bff      	cmp	r3, #255	@ 0xff
 8012e68:	d907      	bls.n	8012e7a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e6e:	2210      	movs	r2, #16
 8012e70:	431a      	orrs	r2, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012e76:	2301      	movs	r3, #1
 8012e78:	e039      	b.n	8012eee <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	691a      	ldr	r2, [r3, #16]
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	431a      	orrs	r2, r3
 8012e82:	0011      	movs	r1, r2
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	69fa      	ldr	r2, [r7, #28]
 8012e8a:	430a      	orrs	r2, r1
 8012e8c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	69db      	ldr	r3, [r3, #28]
 8012e94:	4a18      	ldr	r2, [pc, #96]	@ (8012ef8 <HAL_I2S_Init+0x1e0>)
 8012e96:	401a      	ands	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	6859      	ldr	r1, [r3, #4]
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	689b      	ldr	r3, [r3, #8]
 8012ea0:	4319      	orrs	r1, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	68db      	ldr	r3, [r3, #12]
 8012ea6:	4319      	orrs	r1, r3
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	699b      	ldr	r3, [r3, #24]
 8012eac:	430b      	orrs	r3, r1
 8012eae:	431a      	orrs	r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2180      	movs	r1, #128	@ 0x80
 8012eb6:	0109      	lsls	r1, r1, #4
 8012eb8:	430a      	orrs	r2, r1
 8012eba:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	689b      	ldr	r3, [r3, #8]
 8012ec0:	2b30      	cmp	r3, #48	@ 0x30
 8012ec2:	d003      	beq.n	8012ecc <HAL_I2S_Init+0x1b4>
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	689b      	ldr	r3, [r3, #8]
 8012ec8:	2bb0      	cmp	r3, #176	@ 0xb0
 8012eca:	d108      	bne.n	8012ede <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	69da      	ldr	r2, [r3, #28]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	2180      	movs	r1, #128	@ 0x80
 8012ed8:	0149      	lsls	r1, r1, #5
 8012eda:	430a      	orrs	r2, r1
 8012edc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2235      	movs	r2, #53	@ 0x35
 8012ee8:	2101      	movs	r1, #1
 8012eea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012eec:	2300      	movs	r3, #0
}
 8012eee:	0018      	movs	r0, r3
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	b008      	add	sp, #32
 8012ef4:	bd80      	pop	{r7, pc}
 8012ef6:	46c0      	nop			@ (mov r8, r8)
 8012ef8:	fffff040 	.word	0xfffff040

08012efc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b086      	sub	sp, #24
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	60f8      	str	r0, [r7, #12]
 8012f04:	60b9      	str	r1, [r7, #8]
 8012f06:	1dbb      	adds	r3, r7, #6
 8012f08:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d003      	beq.n	8012f18 <HAL_I2S_Receive_DMA+0x1c>
 8012f10:	1dbb      	adds	r3, r7, #6
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d101      	bne.n	8012f1c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012f18:	2301      	movs	r3, #1
 8012f1a:	e0a6      	b.n	801306a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	2234      	movs	r2, #52	@ 0x34
 8012f20:	5c9b      	ldrb	r3, [r3, r2]
 8012f22:	b2db      	uxtb	r3, r3
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d101      	bne.n	8012f2c <HAL_I2S_Receive_DMA+0x30>
 8012f28:	2302      	movs	r3, #2
 8012f2a:	e09e      	b.n	801306a <HAL_I2S_Receive_DMA+0x16e>
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2234      	movs	r2, #52	@ 0x34
 8012f30:	2101      	movs	r1, #1
 8012f32:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2235      	movs	r2, #53	@ 0x35
 8012f38:	5c9b      	ldrb	r3, [r3, r2]
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	2b01      	cmp	r3, #1
 8012f3e:	d005      	beq.n	8012f4c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	2234      	movs	r2, #52	@ 0x34
 8012f44:	2100      	movs	r1, #0
 8012f46:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012f48:	2302      	movs	r3, #2
 8012f4a:	e08e      	b.n	801306a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2235      	movs	r2, #53	@ 0x35
 8012f50:	2104      	movs	r1, #4
 8012f52:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	2200      	movs	r2, #0
 8012f58:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	68ba      	ldr	r2, [r7, #8]
 8012f5e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	69db      	ldr	r3, [r3, #28]
 8012f66:	2207      	movs	r2, #7
 8012f68:	4013      	ands	r3, r2
 8012f6a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012f6c:	697b      	ldr	r3, [r7, #20]
 8012f6e:	2b03      	cmp	r3, #3
 8012f70:	d002      	beq.n	8012f78 <HAL_I2S_Receive_DMA+0x7c>
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	2b05      	cmp	r3, #5
 8012f76:	d10c      	bne.n	8012f92 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012f78:	1dbb      	adds	r3, r7, #6
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	18db      	adds	r3, r3, r3
 8012f7e:	b29a      	uxth	r2, r3
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012f84:	1dbb      	adds	r3, r7, #6
 8012f86:	881b      	ldrh	r3, [r3, #0]
 8012f88:	18db      	adds	r3, r3, r3
 8012f8a:	b29a      	uxth	r2, r3
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012f90:	e007      	b.n	8012fa2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	1dba      	adds	r2, r7, #6
 8012f96:	8812      	ldrh	r2, [r2, #0]
 8012f98:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	1dba      	adds	r2, r7, #6
 8012f9e:	8812      	ldrh	r2, [r2, #0]
 8012fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fa6:	4a33      	ldr	r2, [pc, #204]	@ (8013074 <HAL_I2S_Receive_DMA+0x178>)
 8012fa8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fae:	4a32      	ldr	r2, [pc, #200]	@ (8013078 <HAL_I2S_Receive_DMA+0x17c>)
 8012fb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fb6:	4a31      	ldr	r2, [pc, #196]	@ (801307c <HAL_I2S_Receive_DMA+0x180>)
 8012fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	69da      	ldr	r2, [r3, #28]
 8012fc0:	23c0      	movs	r3, #192	@ 0xc0
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	401a      	ands	r2, r3
 8012fc6:	23c0      	movs	r3, #192	@ 0xc0
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d10a      	bne.n	8012fe4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012fce:	2300      	movs	r3, #0
 8012fd0:	613b      	str	r3, [r7, #16]
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	613b      	str	r3, [r7, #16]
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	689b      	ldr	r3, [r3, #8]
 8012fe0:	613b      	str	r3, [r7, #16]
 8012fe2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	330c      	adds	r3, #12
 8012fee:	0019      	movs	r1, r3
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff4:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ffa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012ffc:	f7fc fca2 	bl	800f944 <HAL_DMA_Start_IT>
 8013000:	1e03      	subs	r3, r0, #0
 8013002:	d00f      	beq.n	8013024 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013008:	2208      	movs	r2, #8
 801300a:	431a      	orrs	r2, r3
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2235      	movs	r2, #53	@ 0x35
 8013014:	2101      	movs	r1, #1
 8013016:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	2234      	movs	r2, #52	@ 0x34
 801301c:	2100      	movs	r1, #0
 801301e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013020:	2301      	movs	r3, #1
 8013022:	e022      	b.n	801306a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	69da      	ldr	r2, [r3, #28]
 801302a:	2380      	movs	r3, #128	@ 0x80
 801302c:	00db      	lsls	r3, r3, #3
 801302e:	4013      	ands	r3, r2
 8013030:	d108      	bne.n	8013044 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	69da      	ldr	r2, [r3, #28]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	2180      	movs	r1, #128	@ 0x80
 801303e:	00c9      	lsls	r1, r1, #3
 8013040:	430a      	orrs	r2, r1
 8013042:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	685b      	ldr	r3, [r3, #4]
 801304a:	2201      	movs	r2, #1
 801304c:	4013      	ands	r3, r2
 801304e:	d107      	bne.n	8013060 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	685a      	ldr	r2, [r3, #4]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2101      	movs	r1, #1
 801305c:	430a      	orrs	r2, r1
 801305e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	2234      	movs	r2, #52	@ 0x34
 8013064:	2100      	movs	r1, #0
 8013066:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8013068:	2300      	movs	r3, #0
}
 801306a:	0018      	movs	r0, r3
 801306c:	46bd      	mov	sp, r7
 801306e:	b006      	add	sp, #24
 8013070:	bd80      	pop	{r7, pc}
 8013072:	46c0      	nop			@ (mov r8, r8)
 8013074:	0801325d 	.word	0x0801325d
 8013078:	08013219 	.word	0x08013219
 801307c:	0801327b 	.word	0x0801327b

08013080 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b086      	sub	sp, #24
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013088:	2317      	movs	r3, #23
 801308a:	18fb      	adds	r3, r7, r3
 801308c:	2200      	movs	r2, #0
 801308e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	685a      	ldr	r2, [r3, #4]
 8013094:	2380      	movs	r3, #128	@ 0x80
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	429a      	cmp	r2, r3
 801309a:	d003      	beq.n	80130a4 <HAL_I2S_DMAStop+0x24>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d158      	bne.n	8013156 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d010      	beq.n	80130ce <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130b0:	0018      	movs	r0, r3
 80130b2:	f7fc fcad 	bl	800fa10 <HAL_DMA_Abort>
 80130b6:	1e03      	subs	r3, r0, #0
 80130b8:	d009      	beq.n	80130ce <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130be:	2208      	movs	r2, #8
 80130c0:	431a      	orrs	r2, r3
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80130c6:	2317      	movs	r3, #23
 80130c8:	18fb      	adds	r3, r7, r3
 80130ca:	2201      	movs	r2, #1
 80130cc:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	2364      	movs	r3, #100	@ 0x64
 80130d2:	2201      	movs	r2, #1
 80130d4:	2102      	movs	r1, #2
 80130d6:	f000 f8f7 	bl	80132c8 <I2S_WaitFlagStateUntilTimeout>
 80130da:	1e03      	subs	r3, r0, #0
 80130dc:	d00d      	beq.n	80130fa <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130e2:	2201      	movs	r2, #1
 80130e4:	431a      	orrs	r2, r3
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2235      	movs	r2, #53	@ 0x35
 80130ee:	2101      	movs	r1, #1
 80130f0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80130f2:	2317      	movs	r3, #23
 80130f4:	18fb      	adds	r3, r7, r3
 80130f6:	2201      	movs	r2, #1
 80130f8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	2364      	movs	r3, #100	@ 0x64
 80130fe:	2200      	movs	r2, #0
 8013100:	2180      	movs	r1, #128	@ 0x80
 8013102:	f000 f8e1 	bl	80132c8 <I2S_WaitFlagStateUntilTimeout>
 8013106:	1e03      	subs	r3, r0, #0
 8013108:	d00d      	beq.n	8013126 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801310e:	2201      	movs	r2, #1
 8013110:	431a      	orrs	r2, r3
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2235      	movs	r2, #53	@ 0x35
 801311a:	2101      	movs	r1, #1
 801311c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801311e:	2317      	movs	r3, #23
 8013120:	18fb      	adds	r3, r7, r3
 8013122:	2201      	movs	r2, #1
 8013124:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	69da      	ldr	r2, [r3, #28]
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	4938      	ldr	r1, [pc, #224]	@ (8013214 <HAL_I2S_DMAStop+0x194>)
 8013132:	400a      	ands	r2, r1
 8013134:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8013136:	2300      	movs	r3, #0
 8013138:	613b      	str	r3, [r7, #16]
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	689b      	ldr	r3, [r3, #8]
 8013140:	613b      	str	r3, [r7, #16]
 8013142:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	685a      	ldr	r2, [r3, #4]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	2102      	movs	r1, #2
 8013150:	438a      	bics	r2, r1
 8013152:	605a      	str	r2, [r3, #4]
 8013154:	e053      	b.n	80131fe <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	685a      	ldr	r2, [r3, #4]
 801315a:	23c0      	movs	r3, #192	@ 0xc0
 801315c:	009b      	lsls	r3, r3, #2
 801315e:	429a      	cmp	r2, r3
 8013160:	d005      	beq.n	801316e <HAL_I2S_DMAStop+0xee>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	685a      	ldr	r2, [r3, #4]
 8013166:	2380      	movs	r3, #128	@ 0x80
 8013168:	005b      	lsls	r3, r3, #1
 801316a:	429a      	cmp	r2, r3
 801316c:	d147      	bne.n	80131fe <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013172:	2b00      	cmp	r3, #0
 8013174:	d010      	beq.n	8013198 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801317a:	0018      	movs	r0, r3
 801317c:	f7fc fc48 	bl	800fa10 <HAL_DMA_Abort>
 8013180:	1e03      	subs	r3, r0, #0
 8013182:	d009      	beq.n	8013198 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013188:	2208      	movs	r2, #8
 801318a:	431a      	orrs	r2, r3
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8013190:	2317      	movs	r3, #23
 8013192:	18fb      	adds	r3, r7, r3
 8013194:	2201      	movs	r2, #1
 8013196:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	69da      	ldr	r2, [r3, #28]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	491c      	ldr	r1, [pc, #112]	@ (8013214 <HAL_I2S_DMAStop+0x194>)
 80131a4:	400a      	ands	r2, r1
 80131a6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80131a8:	2300      	movs	r3, #0
 80131aa:	60fb      	str	r3, [r7, #12]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	60fb      	str	r3, [r7, #12]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	689b      	ldr	r3, [r3, #8]
 80131ba:	60fb      	str	r3, [r7, #12]
 80131bc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	685a      	ldr	r2, [r3, #4]
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	2101      	movs	r1, #1
 80131ca:	438a      	bics	r2, r1
 80131cc:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	685a      	ldr	r2, [r3, #4]
 80131d2:	2380      	movs	r3, #128	@ 0x80
 80131d4:	005b      	lsls	r3, r3, #1
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d10e      	bne.n	80131f8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131de:	2240      	movs	r2, #64	@ 0x40
 80131e0:	431a      	orrs	r2, r3
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2235      	movs	r2, #53	@ 0x35
 80131ea:	2101      	movs	r1, #1
 80131ec:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80131ee:	2317      	movs	r3, #23
 80131f0:	18fb      	adds	r3, r7, r3
 80131f2:	2201      	movs	r2, #1
 80131f4:	701a      	strb	r2, [r3, #0]
 80131f6:	e002      	b.n	80131fe <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2235      	movs	r2, #53	@ 0x35
 8013202:	2101      	movs	r1, #1
 8013204:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8013206:	2317      	movs	r3, #23
 8013208:	18fb      	adds	r3, r7, r3
 801320a:	781b      	ldrb	r3, [r3, #0]
}
 801320c:	0018      	movs	r0, r3
 801320e:	46bd      	mov	sp, r7
 8013210:	b006      	add	sp, #24
 8013212:	bd80      	pop	{r7, pc}
 8013214:	fffffbff 	.word	0xfffffbff

08013218 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013224:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	69db      	ldr	r3, [r3, #28]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d10e      	bne.n	801324c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	685a      	ldr	r2, [r3, #4]
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2101      	movs	r1, #1
 801323a:	438a      	bics	r2, r1
 801323c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2200      	movs	r2, #0
 8013242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2235      	movs	r2, #53	@ 0x35
 8013248:	2101      	movs	r1, #1
 801324a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	0018      	movs	r0, r3
 8013250:	f7f9 f97e 	bl	800c550 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013254:	46c0      	nop			@ (mov r8, r8)
 8013256:	46bd      	mov	sp, r7
 8013258:	b004      	add	sp, #16
 801325a:	bd80      	pop	{r7, pc}

0801325c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013268:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	0018      	movs	r0, r3
 801326e:	f7f9 f95d 	bl	800c52c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013272:	46c0      	nop			@ (mov r8, r8)
 8013274:	46bd      	mov	sp, r7
 8013276:	b004      	add	sp, #16
 8013278:	bd80      	pop	{r7, pc}

0801327a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801327a:	b580      	push	{r7, lr}
 801327c:	b084      	sub	sp, #16
 801327e:	af00      	add	r7, sp, #0
 8013280:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013286:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	685a      	ldr	r2, [r3, #4]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2103      	movs	r1, #3
 8013294:	438a      	bics	r2, r1
 8013296:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	2200      	movs	r2, #0
 801329c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2200      	movs	r2, #0
 80132a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2235      	movs	r2, #53	@ 0x35
 80132a8:	2101      	movs	r1, #1
 80132aa:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132b0:	2208      	movs	r2, #8
 80132b2:	431a      	orrs	r2, r3
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	0018      	movs	r0, r3
 80132bc:	f7f9 f996 	bl	800c5ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80132c0:	46c0      	nop			@ (mov r8, r8)
 80132c2:	46bd      	mov	sp, r7
 80132c4:	b004      	add	sp, #16
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b086      	sub	sp, #24
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	603b      	str	r3, [r7, #0]
 80132d4:	1dfb      	adds	r3, r7, #7
 80132d6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80132d8:	f7fb fde2 	bl	800eea0 <HAL_GetTick>
 80132dc:	0003      	movs	r3, r0
 80132de:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80132e0:	e017      	b.n	8013312 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	3301      	adds	r3, #1
 80132e6:	d014      	beq.n	8013312 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80132e8:	f7fb fdda 	bl	800eea0 <HAL_GetTick>
 80132ec:	0002      	movs	r2, r0
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	1ad3      	subs	r3, r2, r3
 80132f2:	683a      	ldr	r2, [r7, #0]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d902      	bls.n	80132fe <I2S_WaitFlagStateUntilTimeout+0x36>
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d109      	bne.n	8013312 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2235      	movs	r2, #53	@ 0x35
 8013302:	2101      	movs	r1, #1
 8013304:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2234      	movs	r2, #52	@ 0x34
 801330a:	2100      	movs	r1, #0
 801330c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801330e:	2303      	movs	r3, #3
 8013310:	e00f      	b.n	8013332 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	689b      	ldr	r3, [r3, #8]
 8013318:	68ba      	ldr	r2, [r7, #8]
 801331a:	4013      	ands	r3, r2
 801331c:	68ba      	ldr	r2, [r7, #8]
 801331e:	1ad3      	subs	r3, r2, r3
 8013320:	425a      	negs	r2, r3
 8013322:	4153      	adcs	r3, r2
 8013324:	b2db      	uxtb	r3, r3
 8013326:	001a      	movs	r2, r3
 8013328:	1dfb      	adds	r3, r7, #7
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	429a      	cmp	r2, r3
 801332e:	d1d8      	bne.n	80132e2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8013330:	2300      	movs	r3, #0
}
 8013332:	0018      	movs	r0, r3
 8013334:	46bd      	mov	sp, r7
 8013336:	b006      	add	sp, #24
 8013338:	bd80      	pop	{r7, pc}
	...

0801333c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801333c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801333e:	b08b      	sub	sp, #44	@ 0x2c
 8013340:	af06      	add	r7, sp, #24
 8013342:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d101      	bne.n	801334e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801334a:	2301      	movs	r3, #1
 801334c:	e0f0      	b.n	8013530 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	4a79      	ldr	r2, [pc, #484]	@ (8013538 <HAL_PCD_Init+0x1fc>)
 8013352:	5c9b      	ldrb	r3, [r3, r2]
 8013354:	b2db      	uxtb	r3, r3
 8013356:	2b00      	cmp	r3, #0
 8013358:	d108      	bne.n	801336c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	23aa      	movs	r3, #170	@ 0xaa
 801335e:	009b      	lsls	r3, r3, #2
 8013360:	2100      	movs	r1, #0
 8013362:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	0018      	movs	r0, r3
 8013368:	f009 ff4a 	bl	801d200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	4a72      	ldr	r2, [pc, #456]	@ (8013538 <HAL_PCD_Init+0x1fc>)
 8013370:	2103      	movs	r1, #3
 8013372:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	0018      	movs	r0, r3
 801337a:	f005 fefd 	bl	8019178 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801337e:	230f      	movs	r3, #15
 8013380:	18fb      	adds	r3, r7, r3
 8013382:	2200      	movs	r2, #0
 8013384:	701a      	strb	r2, [r3, #0]
 8013386:	e049      	b.n	801341c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013388:	200f      	movs	r0, #15
 801338a:	183b      	adds	r3, r7, r0
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	6879      	ldr	r1, [r7, #4]
 8013390:	1c5a      	adds	r2, r3, #1
 8013392:	0013      	movs	r3, r2
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	189b      	adds	r3, r3, r2
 8013398:	00db      	lsls	r3, r3, #3
 801339a:	18cb      	adds	r3, r1, r3
 801339c:	3301      	adds	r3, #1
 801339e:	2201      	movs	r2, #1
 80133a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80133a2:	183b      	adds	r3, r7, r0
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	6879      	ldr	r1, [r7, #4]
 80133a8:	1c5a      	adds	r2, r3, #1
 80133aa:	0013      	movs	r3, r2
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	189b      	adds	r3, r3, r2
 80133b0:	00db      	lsls	r3, r3, #3
 80133b2:	183a      	adds	r2, r7, r0
 80133b4:	7812      	ldrb	r2, [r2, #0]
 80133b6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80133b8:	183b      	adds	r3, r7, r0
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	6879      	ldr	r1, [r7, #4]
 80133be:	1c5a      	adds	r2, r3, #1
 80133c0:	0013      	movs	r3, r2
 80133c2:	009b      	lsls	r3, r3, #2
 80133c4:	189b      	adds	r3, r3, r2
 80133c6:	00db      	lsls	r3, r3, #3
 80133c8:	18cb      	adds	r3, r1, r3
 80133ca:	3303      	adds	r3, #3
 80133cc:	2200      	movs	r2, #0
 80133ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80133d0:	183b      	adds	r3, r7, r0
 80133d2:	781a      	ldrb	r2, [r3, #0]
 80133d4:	6879      	ldr	r1, [r7, #4]
 80133d6:	0013      	movs	r3, r2
 80133d8:	009b      	lsls	r3, r3, #2
 80133da:	189b      	adds	r3, r3, r2
 80133dc:	00db      	lsls	r3, r3, #3
 80133de:	18cb      	adds	r3, r1, r3
 80133e0:	3338      	adds	r3, #56	@ 0x38
 80133e2:	2200      	movs	r2, #0
 80133e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80133e6:	183b      	adds	r3, r7, r0
 80133e8:	781a      	ldrb	r2, [r3, #0]
 80133ea:	6879      	ldr	r1, [r7, #4]
 80133ec:	0013      	movs	r3, r2
 80133ee:	009b      	lsls	r3, r3, #2
 80133f0:	189b      	adds	r3, r3, r2
 80133f2:	00db      	lsls	r3, r3, #3
 80133f4:	18cb      	adds	r3, r1, r3
 80133f6:	333c      	adds	r3, #60	@ 0x3c
 80133f8:	2200      	movs	r2, #0
 80133fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80133fc:	183b      	adds	r3, r7, r0
 80133fe:	781a      	ldrb	r2, [r3, #0]
 8013400:	6879      	ldr	r1, [r7, #4]
 8013402:	0013      	movs	r3, r2
 8013404:	009b      	lsls	r3, r3, #2
 8013406:	189b      	adds	r3, r3, r2
 8013408:	00db      	lsls	r3, r3, #3
 801340a:	18cb      	adds	r3, r1, r3
 801340c:	3340      	adds	r3, #64	@ 0x40
 801340e:	2200      	movs	r2, #0
 8013410:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013412:	183b      	adds	r3, r7, r0
 8013414:	781a      	ldrb	r2, [r3, #0]
 8013416:	183b      	adds	r3, r7, r0
 8013418:	3201      	adds	r2, #1
 801341a:	701a      	strb	r2, [r3, #0]
 801341c:	210f      	movs	r1, #15
 801341e:	187b      	adds	r3, r7, r1
 8013420:	781a      	ldrb	r2, [r3, #0]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	429a      	cmp	r2, r3
 8013428:	d3ae      	bcc.n	8013388 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801342a:	187b      	adds	r3, r7, r1
 801342c:	2200      	movs	r2, #0
 801342e:	701a      	strb	r2, [r3, #0]
 8013430:	e056      	b.n	80134e0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013432:	240f      	movs	r4, #15
 8013434:	193b      	adds	r3, r7, r4
 8013436:	781a      	ldrb	r2, [r3, #0]
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	236a      	movs	r3, #106	@ 0x6a
 801343c:	33ff      	adds	r3, #255	@ 0xff
 801343e:	0019      	movs	r1, r3
 8013440:	0013      	movs	r3, r2
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	189b      	adds	r3, r3, r2
 8013446:	00db      	lsls	r3, r3, #3
 8013448:	18c3      	adds	r3, r0, r3
 801344a:	185b      	adds	r3, r3, r1
 801344c:	2200      	movs	r2, #0
 801344e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013450:	193b      	adds	r3, r7, r4
 8013452:	781a      	ldrb	r2, [r3, #0]
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	23b4      	movs	r3, #180	@ 0xb4
 8013458:	0059      	lsls	r1, r3, #1
 801345a:	0013      	movs	r3, r2
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	189b      	adds	r3, r3, r2
 8013460:	00db      	lsls	r3, r3, #3
 8013462:	18c3      	adds	r3, r0, r3
 8013464:	185b      	adds	r3, r3, r1
 8013466:	193a      	adds	r2, r7, r4
 8013468:	7812      	ldrb	r2, [r2, #0]
 801346a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801346c:	193b      	adds	r3, r7, r4
 801346e:	781a      	ldrb	r2, [r3, #0]
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	236c      	movs	r3, #108	@ 0x6c
 8013474:	33ff      	adds	r3, #255	@ 0xff
 8013476:	0019      	movs	r1, r3
 8013478:	0013      	movs	r3, r2
 801347a:	009b      	lsls	r3, r3, #2
 801347c:	189b      	adds	r3, r3, r2
 801347e:	00db      	lsls	r3, r3, #3
 8013480:	18c3      	adds	r3, r0, r3
 8013482:	185b      	adds	r3, r3, r1
 8013484:	2200      	movs	r2, #0
 8013486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013488:	193b      	adds	r3, r7, r4
 801348a:	781a      	ldrb	r2, [r3, #0]
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	23bc      	movs	r3, #188	@ 0xbc
 8013490:	0059      	lsls	r1, r3, #1
 8013492:	0013      	movs	r3, r2
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	189b      	adds	r3, r3, r2
 8013498:	00db      	lsls	r3, r3, #3
 801349a:	18c3      	adds	r3, r0, r3
 801349c:	185b      	adds	r3, r3, r1
 801349e:	2200      	movs	r2, #0
 80134a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80134a2:	193b      	adds	r3, r7, r4
 80134a4:	781a      	ldrb	r2, [r3, #0]
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	23be      	movs	r3, #190	@ 0xbe
 80134aa:	0059      	lsls	r1, r3, #1
 80134ac:	0013      	movs	r3, r2
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	189b      	adds	r3, r3, r2
 80134b2:	00db      	lsls	r3, r3, #3
 80134b4:	18c3      	adds	r3, r0, r3
 80134b6:	185b      	adds	r3, r3, r1
 80134b8:	2200      	movs	r2, #0
 80134ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80134bc:	193b      	adds	r3, r7, r4
 80134be:	781a      	ldrb	r2, [r3, #0]
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	23c0      	movs	r3, #192	@ 0xc0
 80134c4:	0059      	lsls	r1, r3, #1
 80134c6:	0013      	movs	r3, r2
 80134c8:	009b      	lsls	r3, r3, #2
 80134ca:	189b      	adds	r3, r3, r2
 80134cc:	00db      	lsls	r3, r3, #3
 80134ce:	18c3      	adds	r3, r0, r3
 80134d0:	185b      	adds	r3, r3, r1
 80134d2:	2200      	movs	r2, #0
 80134d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80134d6:	193b      	adds	r3, r7, r4
 80134d8:	781a      	ldrb	r2, [r3, #0]
 80134da:	193b      	adds	r3, r7, r4
 80134dc:	3201      	adds	r2, #1
 80134de:	701a      	strb	r2, [r3, #0]
 80134e0:	230f      	movs	r3, #15
 80134e2:	18fb      	adds	r3, r7, r3
 80134e4:	781a      	ldrb	r2, [r3, #0]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d3a1      	bcc.n	8013432 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6818      	ldr	r0, [r3, #0]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	466a      	mov	r2, sp
 80134f6:	0011      	movs	r1, r2
 80134f8:	001a      	movs	r2, r3
 80134fa:	3210      	adds	r2, #16
 80134fc:	ca70      	ldmia	r2!, {r4, r5, r6}
 80134fe:	c170      	stmia	r1!, {r4, r5, r6}
 8013500:	ca30      	ldmia	r2!, {r4, r5}
 8013502:	c130      	stmia	r1!, {r4, r5}
 8013504:	6859      	ldr	r1, [r3, #4]
 8013506:	689a      	ldr	r2, [r3, #8]
 8013508:	68db      	ldr	r3, [r3, #12]
 801350a:	f005 fe4f 	bl	80191ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2224      	movs	r2, #36	@ 0x24
 8013512:	2100      	movs	r1, #0
 8013514:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	4a07      	ldr	r2, [pc, #28]	@ (8013538 <HAL_PCD_Init+0x1fc>)
 801351a:	2101      	movs	r1, #1
 801351c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	69db      	ldr	r3, [r3, #28]
 8013522:	2b01      	cmp	r3, #1
 8013524:	d103      	bne.n	801352e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	0018      	movs	r0, r3
 801352a:	f001 fd23 	bl	8014f74 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801352e:	2300      	movs	r3, #0
}
 8013530:	0018      	movs	r0, r3
 8013532:	46bd      	mov	sp, r7
 8013534:	b005      	add	sp, #20
 8013536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013538:	000002a9 	.word	0x000002a9

0801353c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	23aa      	movs	r3, #170	@ 0xaa
 8013548:	009b      	lsls	r3, r3, #2
 801354a:	5cd3      	ldrb	r3, [r2, r3]
 801354c:	2b01      	cmp	r3, #1
 801354e:	d101      	bne.n	8013554 <HAL_PCD_Start+0x18>
 8013550:	2302      	movs	r3, #2
 8013552:	e014      	b.n	801357e <HAL_PCD_Start+0x42>
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	23aa      	movs	r3, #170	@ 0xaa
 8013558:	009b      	lsls	r3, r3, #2
 801355a:	2101      	movs	r1, #1
 801355c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	0018      	movs	r0, r3
 8013564:	f005 fdf2 	bl	801914c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	0018      	movs	r0, r3
 801356e:	f007 fdf5 	bl	801b15c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	23aa      	movs	r3, #170	@ 0xaa
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	2100      	movs	r1, #0
 801357a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801357c:	2300      	movs	r3, #0
}
 801357e:	0018      	movs	r0, r3
 8013580:	46bd      	mov	sp, r7
 8013582:	b002      	add	sp, #8
 8013584:	bd80      	pop	{r7, pc}
	...

08013588 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	0018      	movs	r0, r3
 8013596:	f007 fdf7 	bl	801b188 <USB_ReadInterrupts>
 801359a:	0003      	movs	r3, r0
 801359c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801359e:	68fa      	ldr	r2, [r7, #12]
 80135a0:	2380      	movs	r3, #128	@ 0x80
 80135a2:	021b      	lsls	r3, r3, #8
 80135a4:	4013      	ands	r3, r2
 80135a6:	d004      	beq.n	80135b2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	0018      	movs	r0, r3
 80135ac:	f000 fb62 	bl	8013c74 <PCD_EP_ISR_Handler>

    return;
 80135b0:	e11d      	b.n	80137ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80135b2:	68fa      	ldr	r2, [r7, #12]
 80135b4:	2380      	movs	r3, #128	@ 0x80
 80135b6:	00db      	lsls	r3, r3, #3
 80135b8:	4013      	ands	r3, r2
 80135ba:	d015      	beq.n	80135e8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2244      	movs	r2, #68	@ 0x44
 80135c2:	5a9b      	ldrh	r3, [r3, r2]
 80135c4:	b29a      	uxth	r2, r3
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	498a      	ldr	r1, [pc, #552]	@ (80137f4 <HAL_PCD_IRQHandler+0x26c>)
 80135cc:	400a      	ands	r2, r1
 80135ce:	b291      	uxth	r1, r2
 80135d0:	2244      	movs	r2, #68	@ 0x44
 80135d2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	0018      	movs	r0, r3
 80135d8:	f009 fe95 	bl	801d306 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2100      	movs	r1, #0
 80135e0:	0018      	movs	r0, r3
 80135e2:	f000 f915 	bl	8013810 <HAL_PCD_SetAddress>

    return;
 80135e6:	e102      	b.n	80137ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80135e8:	68fa      	ldr	r2, [r7, #12]
 80135ea:	2380      	movs	r3, #128	@ 0x80
 80135ec:	01db      	lsls	r3, r3, #7
 80135ee:	4013      	ands	r3, r2
 80135f0:	d00c      	beq.n	801360c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	2244      	movs	r2, #68	@ 0x44
 80135f8:	5a9b      	ldrh	r3, [r3, r2]
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	497d      	ldr	r1, [pc, #500]	@ (80137f8 <HAL_PCD_IRQHandler+0x270>)
 8013602:	400a      	ands	r2, r1
 8013604:	b291      	uxth	r1, r2
 8013606:	2244      	movs	r2, #68	@ 0x44
 8013608:	5299      	strh	r1, [r3, r2]

    return;
 801360a:	e0f0      	b.n	80137ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 801360c:	68fa      	ldr	r2, [r7, #12]
 801360e:	2380      	movs	r3, #128	@ 0x80
 8013610:	019b      	lsls	r3, r3, #6
 8013612:	4013      	ands	r3, r2
 8013614:	d00c      	beq.n	8013630 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	2244      	movs	r2, #68	@ 0x44
 801361c:	5a9b      	ldrh	r3, [r3, r2]
 801361e:	b29a      	uxth	r2, r3
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	4975      	ldr	r1, [pc, #468]	@ (80137fc <HAL_PCD_IRQHandler+0x274>)
 8013626:	400a      	ands	r2, r1
 8013628:	b291      	uxth	r1, r2
 801362a:	2244      	movs	r2, #68	@ 0x44
 801362c:	5299      	strh	r1, [r3, r2]

    return;
 801362e:	e0de      	b.n	80137ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8013630:	68fa      	ldr	r2, [r7, #12]
 8013632:	2380      	movs	r3, #128	@ 0x80
 8013634:	015b      	lsls	r3, r3, #5
 8013636:	4013      	ands	r3, r2
 8013638:	d038      	beq.n	80136ac <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2240      	movs	r2, #64	@ 0x40
 8013640:	5a9b      	ldrh	r3, [r3, r2]
 8013642:	b29a      	uxth	r2, r3
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	2104      	movs	r1, #4
 801364a:	438a      	bics	r2, r1
 801364c:	b291      	uxth	r1, r2
 801364e:	2240      	movs	r2, #64	@ 0x40
 8013650:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	2240      	movs	r2, #64	@ 0x40
 8013658:	5a9b      	ldrh	r3, [r3, r2]
 801365a:	b29a      	uxth	r2, r3
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	2108      	movs	r1, #8
 8013662:	438a      	bics	r2, r1
 8013664:	b291      	uxth	r1, r2
 8013666:	2240      	movs	r2, #64	@ 0x40
 8013668:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	23b8      	movs	r3, #184	@ 0xb8
 801366e:	009b      	lsls	r3, r3, #2
 8013670:	5cd3      	ldrb	r3, [r2, r3]
 8013672:	2b01      	cmp	r3, #1
 8013674:	d109      	bne.n	801368a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	23b8      	movs	r3, #184	@ 0xb8
 801367a:	009b      	lsls	r3, r3, #2
 801367c:	2100      	movs	r1, #0
 801367e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2100      	movs	r1, #0
 8013684:	0018      	movs	r0, r3
 8013686:	f001 fc9f 	bl	8014fc8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	0018      	movs	r0, r3
 801368e:	f009 fe7b 	bl	801d388 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	2244      	movs	r2, #68	@ 0x44
 8013698:	5a9b      	ldrh	r3, [r3, r2]
 801369a:	b29a      	uxth	r2, r3
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	4957      	ldr	r1, [pc, #348]	@ (8013800 <HAL_PCD_IRQHandler+0x278>)
 80136a2:	400a      	ands	r2, r1
 80136a4:	b291      	uxth	r1, r2
 80136a6:	2244      	movs	r2, #68	@ 0x44
 80136a8:	5299      	strh	r1, [r3, r2]

    return;
 80136aa:	e0a0      	b.n	80137ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80136ac:	68fa      	ldr	r2, [r7, #12]
 80136ae:	2380      	movs	r3, #128	@ 0x80
 80136b0:	011b      	lsls	r3, r3, #4
 80136b2:	4013      	ands	r3, r2
 80136b4:	d028      	beq.n	8013708 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	2240      	movs	r2, #64	@ 0x40
 80136bc:	5a9b      	ldrh	r3, [r3, r2]
 80136be:	b29a      	uxth	r2, r3
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	2108      	movs	r1, #8
 80136c6:	430a      	orrs	r2, r1
 80136c8:	b291      	uxth	r1, r2
 80136ca:	2240      	movs	r2, #64	@ 0x40
 80136cc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	2244      	movs	r2, #68	@ 0x44
 80136d4:	5a9b      	ldrh	r3, [r3, r2]
 80136d6:	b29a      	uxth	r2, r3
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	4949      	ldr	r1, [pc, #292]	@ (8013804 <HAL_PCD_IRQHandler+0x27c>)
 80136de:	400a      	ands	r2, r1
 80136e0:	b291      	uxth	r1, r2
 80136e2:	2244      	movs	r2, #68	@ 0x44
 80136e4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	2240      	movs	r2, #64	@ 0x40
 80136ec:	5a9b      	ldrh	r3, [r3, r2]
 80136ee:	b29a      	uxth	r2, r3
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	2104      	movs	r1, #4
 80136f6:	430a      	orrs	r2, r1
 80136f8:	b291      	uxth	r1, r2
 80136fa:	2240      	movs	r2, #64	@ 0x40
 80136fc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	0018      	movs	r0, r3
 8013702:	f009 fe25 	bl	801d350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013706:	e072      	b.n	80137ee <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2280      	movs	r2, #128	@ 0x80
 801370c:	4013      	ands	r3, r2
 801370e:	d046      	beq.n	801379e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	2244      	movs	r2, #68	@ 0x44
 8013716:	5a9b      	ldrh	r3, [r3, r2]
 8013718:	b29a      	uxth	r2, r3
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	2180      	movs	r1, #128	@ 0x80
 8013720:	438a      	bics	r2, r1
 8013722:	b291      	uxth	r1, r2
 8013724:	2244      	movs	r2, #68	@ 0x44
 8013726:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8013728:	687a      	ldr	r2, [r7, #4]
 801372a:	23b8      	movs	r3, #184	@ 0xb8
 801372c:	009b      	lsls	r3, r3, #2
 801372e:	5cd3      	ldrb	r3, [r2, r3]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d12f      	bne.n	8013794 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2240      	movs	r2, #64	@ 0x40
 801373a:	5a9b      	ldrh	r3, [r3, r2]
 801373c:	b29a      	uxth	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	2104      	movs	r1, #4
 8013744:	430a      	orrs	r2, r1
 8013746:	b291      	uxth	r1, r2
 8013748:	2240      	movs	r2, #64	@ 0x40
 801374a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	2240      	movs	r2, #64	@ 0x40
 8013752:	5a9b      	ldrh	r3, [r3, r2]
 8013754:	b29a      	uxth	r2, r3
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	2108      	movs	r1, #8
 801375c:	430a      	orrs	r2, r1
 801375e:	b291      	uxth	r1, r2
 8013760:	2240      	movs	r2, #64	@ 0x40
 8013762:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	23b8      	movs	r3, #184	@ 0xb8
 8013768:	009b      	lsls	r3, r3, #2
 801376a:	2101      	movs	r1, #1
 801376c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2254      	movs	r2, #84	@ 0x54
 8013774:	5a9b      	ldrh	r3, [r3, r2]
 8013776:	b29b      	uxth	r3, r3
 8013778:	089b      	lsrs	r3, r3, #2
 801377a:	223c      	movs	r2, #60	@ 0x3c
 801377c:	4013      	ands	r3, r2
 801377e:	0019      	movs	r1, r3
 8013780:	687a      	ldr	r2, [r7, #4]
 8013782:	23b9      	movs	r3, #185	@ 0xb9
 8013784:	009b      	lsls	r3, r3, #2
 8013786:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2101      	movs	r1, #1
 801378c:	0018      	movs	r0, r3
 801378e:	f001 fc1b 	bl	8014fc8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8013792:	e02c      	b.n	80137ee <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	0018      	movs	r0, r3
 8013798:	f009 fdda 	bl	801d350 <HAL_PCD_SuspendCallback>
    return;
 801379c:	e027      	b.n	80137ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801379e:	68fa      	ldr	r2, [r7, #12]
 80137a0:	2380      	movs	r3, #128	@ 0x80
 80137a2:	009b      	lsls	r3, r3, #2
 80137a4:	4013      	ands	r3, r2
 80137a6:	d010      	beq.n	80137ca <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2244      	movs	r2, #68	@ 0x44
 80137ae:	5a9b      	ldrh	r3, [r3, r2]
 80137b0:	b29a      	uxth	r2, r3
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	4914      	ldr	r1, [pc, #80]	@ (8013808 <HAL_PCD_IRQHandler+0x280>)
 80137b8:	400a      	ands	r2, r1
 80137ba:	b291      	uxth	r1, r2
 80137bc:	2244      	movs	r2, #68	@ 0x44
 80137be:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	0018      	movs	r0, r3
 80137c4:	f009 fd90 	bl	801d2e8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80137c8:	e011      	b.n	80137ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80137ca:	68fa      	ldr	r2, [r7, #12]
 80137cc:	2380      	movs	r3, #128	@ 0x80
 80137ce:	005b      	lsls	r3, r3, #1
 80137d0:	4013      	ands	r3, r2
 80137d2:	d00c      	beq.n	80137ee <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	2244      	movs	r2, #68	@ 0x44
 80137da:	5a9b      	ldrh	r3, [r3, r2]
 80137dc:	b29a      	uxth	r2, r3
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	490a      	ldr	r1, [pc, #40]	@ (801380c <HAL_PCD_IRQHandler+0x284>)
 80137e4:	400a      	ands	r2, r1
 80137e6:	b291      	uxth	r1, r2
 80137e8:	2244      	movs	r2, #68	@ 0x44
 80137ea:	5299      	strh	r1, [r3, r2]

    return;
 80137ec:	46c0      	nop			@ (mov r8, r8)
  }
}
 80137ee:	46bd      	mov	sp, r7
 80137f0:	b004      	add	sp, #16
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	fffffbff 	.word	0xfffffbff
 80137f8:	ffffbfff 	.word	0xffffbfff
 80137fc:	ffffdfff 	.word	0xffffdfff
 8013800:	ffffefff 	.word	0xffffefff
 8013804:	fffff7ff 	.word	0xfffff7ff
 8013808:	fffffdff 	.word	0xfffffdff
 801380c:	fffffeff 	.word	0xfffffeff

08013810 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	000a      	movs	r2, r1
 801381a:	1cfb      	adds	r3, r7, #3
 801381c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	23aa      	movs	r3, #170	@ 0xaa
 8013822:	009b      	lsls	r3, r3, #2
 8013824:	5cd3      	ldrb	r3, [r2, r3]
 8013826:	2b01      	cmp	r3, #1
 8013828:	d101      	bne.n	801382e <HAL_PCD_SetAddress+0x1e>
 801382a:	2302      	movs	r3, #2
 801382c:	e017      	b.n	801385e <HAL_PCD_SetAddress+0x4e>
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	23aa      	movs	r3, #170	@ 0xaa
 8013832:	009b      	lsls	r3, r3, #2
 8013834:	2101      	movs	r1, #1
 8013836:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	1cfa      	adds	r2, r7, #3
 801383c:	2124      	movs	r1, #36	@ 0x24
 801383e:	7812      	ldrb	r2, [r2, #0]
 8013840:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	1cfb      	adds	r3, r7, #3
 8013848:	781b      	ldrb	r3, [r3, #0]
 801384a:	0019      	movs	r1, r3
 801384c:	0010      	movs	r0, r2
 801384e:	f007 fc71 	bl	801b134 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	23aa      	movs	r3, #170	@ 0xaa
 8013856:	009b      	lsls	r3, r3, #2
 8013858:	2100      	movs	r1, #0
 801385a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801385c:	2300      	movs	r3, #0
}
 801385e:	0018      	movs	r0, r3
 8013860:	46bd      	mov	sp, r7
 8013862:	b002      	add	sp, #8
 8013864:	bd80      	pop	{r7, pc}

08013866 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8013866:	b590      	push	{r4, r7, lr}
 8013868:	b085      	sub	sp, #20
 801386a:	af00      	add	r7, sp, #0
 801386c:	6078      	str	r0, [r7, #4]
 801386e:	000c      	movs	r4, r1
 8013870:	0010      	movs	r0, r2
 8013872:	0019      	movs	r1, r3
 8013874:	1cfb      	adds	r3, r7, #3
 8013876:	1c22      	adds	r2, r4, #0
 8013878:	701a      	strb	r2, [r3, #0]
 801387a:	003b      	movs	r3, r7
 801387c:	1c02      	adds	r2, r0, #0
 801387e:	801a      	strh	r2, [r3, #0]
 8013880:	1cbb      	adds	r3, r7, #2
 8013882:	1c0a      	adds	r2, r1, #0
 8013884:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013886:	230b      	movs	r3, #11
 8013888:	18fb      	adds	r3, r7, r3
 801388a:	2200      	movs	r2, #0
 801388c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801388e:	1cfb      	adds	r3, r7, #3
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	b25b      	sxtb	r3, r3
 8013894:	2b00      	cmp	r3, #0
 8013896:	da0f      	bge.n	80138b8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013898:	1cfb      	adds	r3, r7, #3
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	2207      	movs	r2, #7
 801389e:	4013      	ands	r3, r2
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	0013      	movs	r3, r2
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	189b      	adds	r3, r3, r2
 80138a8:	00db      	lsls	r3, r3, #3
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	18d3      	adds	r3, r2, r3
 80138ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	2201      	movs	r2, #1
 80138b4:	705a      	strb	r2, [r3, #1]
 80138b6:	e00f      	b.n	80138d8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80138b8:	1cfb      	adds	r3, r7, #3
 80138ba:	781b      	ldrb	r3, [r3, #0]
 80138bc:	2207      	movs	r2, #7
 80138be:	401a      	ands	r2, r3
 80138c0:	0013      	movs	r3, r2
 80138c2:	009b      	lsls	r3, r3, #2
 80138c4:	189b      	adds	r3, r3, r2
 80138c6:	00db      	lsls	r3, r3, #3
 80138c8:	3369      	adds	r3, #105	@ 0x69
 80138ca:	33ff      	adds	r3, #255	@ 0xff
 80138cc:	687a      	ldr	r2, [r7, #4]
 80138ce:	18d3      	adds	r3, r2, r3
 80138d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	2200      	movs	r2, #0
 80138d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80138d8:	1cfb      	adds	r3, r7, #3
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	2207      	movs	r2, #7
 80138de:	4013      	ands	r3, r2
 80138e0:	b2da      	uxtb	r2, r3
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80138e6:	003b      	movs	r3, r7
 80138e8:	881a      	ldrh	r2, [r3, #0]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	1cba      	adds	r2, r7, #2
 80138f2:	7812      	ldrb	r2, [r2, #0]
 80138f4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80138f6:	1cbb      	adds	r3, r7, #2
 80138f8:	781b      	ldrb	r3, [r3, #0]
 80138fa:	2b02      	cmp	r3, #2
 80138fc:	d102      	bne.n	8013904 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	2200      	movs	r2, #0
 8013902:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013904:	687a      	ldr	r2, [r7, #4]
 8013906:	23aa      	movs	r3, #170	@ 0xaa
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	5cd3      	ldrb	r3, [r2, r3]
 801390c:	2b01      	cmp	r3, #1
 801390e:	d101      	bne.n	8013914 <HAL_PCD_EP_Open+0xae>
 8013910:	2302      	movs	r3, #2
 8013912:	e013      	b.n	801393c <HAL_PCD_EP_Open+0xd6>
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	23aa      	movs	r3, #170	@ 0xaa
 8013918:	009b      	lsls	r3, r3, #2
 801391a:	2101      	movs	r1, #1
 801391c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	68fa      	ldr	r2, [r7, #12]
 8013924:	0011      	movs	r1, r2
 8013926:	0018      	movs	r0, r3
 8013928:	f005 fc68 	bl	80191fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801392c:	687a      	ldr	r2, [r7, #4]
 801392e:	23aa      	movs	r3, #170	@ 0xaa
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	2100      	movs	r1, #0
 8013934:	54d1      	strb	r1, [r2, r3]

  return ret;
 8013936:	230b      	movs	r3, #11
 8013938:	18fb      	adds	r3, r7, r3
 801393a:	781b      	ldrb	r3, [r3, #0]
}
 801393c:	0018      	movs	r0, r3
 801393e:	46bd      	mov	sp, r7
 8013940:	b005      	add	sp, #20
 8013942:	bd90      	pop	{r4, r7, pc}

08013944 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b084      	sub	sp, #16
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	000a      	movs	r2, r1
 801394e:	1cfb      	adds	r3, r7, #3
 8013950:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013952:	1cfb      	adds	r3, r7, #3
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	b25b      	sxtb	r3, r3
 8013958:	2b00      	cmp	r3, #0
 801395a:	da0f      	bge.n	801397c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801395c:	1cfb      	adds	r3, r7, #3
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	2207      	movs	r2, #7
 8013962:	4013      	ands	r3, r2
 8013964:	1c5a      	adds	r2, r3, #1
 8013966:	0013      	movs	r3, r2
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	189b      	adds	r3, r3, r2
 801396c:	00db      	lsls	r3, r3, #3
 801396e:	687a      	ldr	r2, [r7, #4]
 8013970:	18d3      	adds	r3, r2, r3
 8013972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	2201      	movs	r2, #1
 8013978:	705a      	strb	r2, [r3, #1]
 801397a:	e00f      	b.n	801399c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801397c:	1cfb      	adds	r3, r7, #3
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	2207      	movs	r2, #7
 8013982:	401a      	ands	r2, r3
 8013984:	0013      	movs	r3, r2
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	189b      	adds	r3, r3, r2
 801398a:	00db      	lsls	r3, r3, #3
 801398c:	3369      	adds	r3, #105	@ 0x69
 801398e:	33ff      	adds	r3, #255	@ 0xff
 8013990:	687a      	ldr	r2, [r7, #4]
 8013992:	18d3      	adds	r3, r2, r3
 8013994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2200      	movs	r2, #0
 801399a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 801399c:	1cfb      	adds	r3, r7, #3
 801399e:	781b      	ldrb	r3, [r3, #0]
 80139a0:	2207      	movs	r2, #7
 80139a2:	4013      	ands	r3, r2
 80139a4:	b2da      	uxtb	r2, r3
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	23aa      	movs	r3, #170	@ 0xaa
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	5cd3      	ldrb	r3, [r2, r3]
 80139b2:	2b01      	cmp	r3, #1
 80139b4:	d101      	bne.n	80139ba <HAL_PCD_EP_Close+0x76>
 80139b6:	2302      	movs	r3, #2
 80139b8:	e011      	b.n	80139de <HAL_PCD_EP_Close+0x9a>
 80139ba:	687a      	ldr	r2, [r7, #4]
 80139bc:	23aa      	movs	r3, #170	@ 0xaa
 80139be:	009b      	lsls	r3, r3, #2
 80139c0:	2101      	movs	r1, #1
 80139c2:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	68fa      	ldr	r2, [r7, #12]
 80139ca:	0011      	movs	r1, r2
 80139cc:	0018      	movs	r0, r3
 80139ce:	f005 ffb7 	bl	8019940 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	23aa      	movs	r3, #170	@ 0xaa
 80139d6:	009b      	lsls	r3, r3, #2
 80139d8:	2100      	movs	r1, #0
 80139da:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80139dc:	2300      	movs	r3, #0
}
 80139de:	0018      	movs	r0, r3
 80139e0:	46bd      	mov	sp, r7
 80139e2:	b004      	add	sp, #16
 80139e4:	bd80      	pop	{r7, pc}

080139e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80139e6:	b580      	push	{r7, lr}
 80139e8:	b086      	sub	sp, #24
 80139ea:	af00      	add	r7, sp, #0
 80139ec:	60f8      	str	r0, [r7, #12]
 80139ee:	607a      	str	r2, [r7, #4]
 80139f0:	603b      	str	r3, [r7, #0]
 80139f2:	200b      	movs	r0, #11
 80139f4:	183b      	adds	r3, r7, r0
 80139f6:	1c0a      	adds	r2, r1, #0
 80139f8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80139fa:	0001      	movs	r1, r0
 80139fc:	187b      	adds	r3, r7, r1
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	2207      	movs	r2, #7
 8013a02:	401a      	ands	r2, r3
 8013a04:	0013      	movs	r3, r2
 8013a06:	009b      	lsls	r3, r3, #2
 8013a08:	189b      	adds	r3, r3, r2
 8013a0a:	00db      	lsls	r3, r3, #3
 8013a0c:	3369      	adds	r3, #105	@ 0x69
 8013a0e:	33ff      	adds	r3, #255	@ 0xff
 8013a10:	68fa      	ldr	r2, [r7, #12]
 8013a12:	18d3      	adds	r3, r2, r3
 8013a14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	683a      	ldr	r2, [r7, #0]
 8013a20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	2200      	movs	r2, #0
 8013a26:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013a2e:	187b      	adds	r3, r7, r1
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	2207      	movs	r2, #7
 8013a34:	4013      	ands	r3, r2
 8013a36:	b2da      	uxtb	r2, r3
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	697a      	ldr	r2, [r7, #20]
 8013a42:	0011      	movs	r1, r2
 8013a44:	0018      	movs	r0, r3
 8013a46:	f006 f93b 	bl	8019cc0 <USB_EPStartXfer>

  return HAL_OK;
 8013a4a:	2300      	movs	r3, #0
}
 8013a4c:	0018      	movs	r0, r3
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	b006      	add	sp, #24
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b082      	sub	sp, #8
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	000a      	movs	r2, r1
 8013a5e:	1cfb      	adds	r3, r7, #3
 8013a60:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013a62:	1cfb      	adds	r3, r7, #3
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	2207      	movs	r2, #7
 8013a68:	401a      	ands	r2, r3
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	23c2      	movs	r3, #194	@ 0xc2
 8013a6e:	0059      	lsls	r1, r3, #1
 8013a70:	0013      	movs	r3, r2
 8013a72:	009b      	lsls	r3, r3, #2
 8013a74:	189b      	adds	r3, r3, r2
 8013a76:	00db      	lsls	r3, r3, #3
 8013a78:	18c3      	adds	r3, r0, r3
 8013a7a:	185b      	adds	r3, r3, r1
 8013a7c:	681b      	ldr	r3, [r3, #0]
}
 8013a7e:	0018      	movs	r0, r3
 8013a80:	46bd      	mov	sp, r7
 8013a82:	b002      	add	sp, #8
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b086      	sub	sp, #24
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	60f8      	str	r0, [r7, #12]
 8013a8e:	607a      	str	r2, [r7, #4]
 8013a90:	603b      	str	r3, [r7, #0]
 8013a92:	200b      	movs	r0, #11
 8013a94:	183b      	adds	r3, r7, r0
 8013a96:	1c0a      	adds	r2, r1, #0
 8013a98:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013a9a:	183b      	adds	r3, r7, r0
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	2207      	movs	r2, #7
 8013aa0:	4013      	ands	r3, r2
 8013aa2:	1c5a      	adds	r2, r3, #1
 8013aa4:	0013      	movs	r3, r2
 8013aa6:	009b      	lsls	r3, r3, #2
 8013aa8:	189b      	adds	r3, r3, r2
 8013aaa:	00db      	lsls	r3, r3, #3
 8013aac:	68fa      	ldr	r2, [r7, #12]
 8013aae:	18d3      	adds	r3, r2, r3
 8013ab0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	683a      	ldr	r2, [r7, #0]
 8013abc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	2224      	movs	r2, #36	@ 0x24
 8013ac2:	2101      	movs	r1, #1
 8013ac4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	683a      	ldr	r2, [r7, #0]
 8013aca:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013ad8:	183b      	adds	r3, r7, r0
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	2207      	movs	r2, #7
 8013ade:	4013      	ands	r3, r2
 8013ae0:	b2da      	uxtb	r2, r3
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	697a      	ldr	r2, [r7, #20]
 8013aec:	0011      	movs	r1, r2
 8013aee:	0018      	movs	r0, r3
 8013af0:	f006 f8e6 	bl	8019cc0 <USB_EPStartXfer>

  return HAL_OK;
 8013af4:	2300      	movs	r3, #0
}
 8013af6:	0018      	movs	r0, r3
 8013af8:	46bd      	mov	sp, r7
 8013afa:	b006      	add	sp, #24
 8013afc:	bd80      	pop	{r7, pc}

08013afe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013afe:	b580      	push	{r7, lr}
 8013b00:	b084      	sub	sp, #16
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
 8013b06:	000a      	movs	r2, r1
 8013b08:	1cfb      	adds	r3, r7, #3
 8013b0a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8013b0c:	1cfb      	adds	r3, r7, #3
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	2207      	movs	r2, #7
 8013b12:	401a      	ands	r2, r3
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d901      	bls.n	8013b20 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	e046      	b.n	8013bae <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013b20:	1cfb      	adds	r3, r7, #3
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	b25b      	sxtb	r3, r3
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	da0f      	bge.n	8013b4a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013b2a:	1cfb      	adds	r3, r7, #3
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	2207      	movs	r2, #7
 8013b30:	4013      	ands	r3, r2
 8013b32:	1c5a      	adds	r2, r3, #1
 8013b34:	0013      	movs	r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	189b      	adds	r3, r3, r2
 8013b3a:	00db      	lsls	r3, r3, #3
 8013b3c:	687a      	ldr	r2, [r7, #4]
 8013b3e:	18d3      	adds	r3, r2, r3
 8013b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	2201      	movs	r2, #1
 8013b46:	705a      	strb	r2, [r3, #1]
 8013b48:	e00d      	b.n	8013b66 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013b4a:	1cfb      	adds	r3, r7, #3
 8013b4c:	781a      	ldrb	r2, [r3, #0]
 8013b4e:	0013      	movs	r3, r2
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	189b      	adds	r3, r3, r2
 8013b54:	00db      	lsls	r3, r3, #3
 8013b56:	3369      	adds	r3, #105	@ 0x69
 8013b58:	33ff      	adds	r3, #255	@ 0xff
 8013b5a:	687a      	ldr	r2, [r7, #4]
 8013b5c:	18d3      	adds	r3, r2, r3
 8013b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	2200      	movs	r2, #0
 8013b64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	2201      	movs	r2, #1
 8013b6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013b6c:	1cfb      	adds	r3, r7, #3
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	2207      	movs	r2, #7
 8013b72:	4013      	ands	r3, r2
 8013b74:	b2da      	uxtb	r2, r3
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013b7a:	687a      	ldr	r2, [r7, #4]
 8013b7c:	23aa      	movs	r3, #170	@ 0xaa
 8013b7e:	009b      	lsls	r3, r3, #2
 8013b80:	5cd3      	ldrb	r3, [r2, r3]
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	d101      	bne.n	8013b8a <HAL_PCD_EP_SetStall+0x8c>
 8013b86:	2302      	movs	r3, #2
 8013b88:	e011      	b.n	8013bae <HAL_PCD_EP_SetStall+0xb0>
 8013b8a:	687a      	ldr	r2, [r7, #4]
 8013b8c:	23aa      	movs	r3, #170	@ 0xaa
 8013b8e:	009b      	lsls	r3, r3, #2
 8013b90:	2101      	movs	r1, #1
 8013b92:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	68fa      	ldr	r2, [r7, #12]
 8013b9a:	0011      	movs	r1, r2
 8013b9c:	0018      	movs	r0, r3
 8013b9e:	f007 f9c7 	bl	801af30 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013ba2:	687a      	ldr	r2, [r7, #4]
 8013ba4:	23aa      	movs	r3, #170	@ 0xaa
 8013ba6:	009b      	lsls	r3, r3, #2
 8013ba8:	2100      	movs	r1, #0
 8013baa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013bac:	2300      	movs	r3, #0
}
 8013bae:	0018      	movs	r0, r3
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	b004      	add	sp, #16
 8013bb4:	bd80      	pop	{r7, pc}

08013bb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013bb6:	b580      	push	{r7, lr}
 8013bb8:	b084      	sub	sp, #16
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
 8013bbe:	000a      	movs	r2, r1
 8013bc0:	1cfb      	adds	r3, r7, #3
 8013bc2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013bc4:	1cfb      	adds	r3, r7, #3
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	220f      	movs	r2, #15
 8013bca:	401a      	ands	r2, r3
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	685b      	ldr	r3, [r3, #4]
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	d901      	bls.n	8013bd8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	e048      	b.n	8013c6a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013bd8:	1cfb      	adds	r3, r7, #3
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	b25b      	sxtb	r3, r3
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	da0f      	bge.n	8013c02 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013be2:	1cfb      	adds	r3, r7, #3
 8013be4:	781b      	ldrb	r3, [r3, #0]
 8013be6:	2207      	movs	r2, #7
 8013be8:	4013      	ands	r3, r2
 8013bea:	1c5a      	adds	r2, r3, #1
 8013bec:	0013      	movs	r3, r2
 8013bee:	009b      	lsls	r3, r3, #2
 8013bf0:	189b      	adds	r3, r3, r2
 8013bf2:	00db      	lsls	r3, r3, #3
 8013bf4:	687a      	ldr	r2, [r7, #4]
 8013bf6:	18d3      	adds	r3, r2, r3
 8013bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	705a      	strb	r2, [r3, #1]
 8013c00:	e00f      	b.n	8013c22 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013c02:	1cfb      	adds	r3, r7, #3
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	2207      	movs	r2, #7
 8013c08:	401a      	ands	r2, r3
 8013c0a:	0013      	movs	r3, r2
 8013c0c:	009b      	lsls	r3, r3, #2
 8013c0e:	189b      	adds	r3, r3, r2
 8013c10:	00db      	lsls	r3, r3, #3
 8013c12:	3369      	adds	r3, #105	@ 0x69
 8013c14:	33ff      	adds	r3, #255	@ 0xff
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	18d3      	adds	r3, r2, r3
 8013c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2200      	movs	r2, #0
 8013c20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	2200      	movs	r2, #0
 8013c26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013c28:	1cfb      	adds	r3, r7, #3
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	2207      	movs	r2, #7
 8013c2e:	4013      	ands	r3, r2
 8013c30:	b2da      	uxtb	r2, r3
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013c36:	687a      	ldr	r2, [r7, #4]
 8013c38:	23aa      	movs	r3, #170	@ 0xaa
 8013c3a:	009b      	lsls	r3, r3, #2
 8013c3c:	5cd3      	ldrb	r3, [r2, r3]
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d101      	bne.n	8013c46 <HAL_PCD_EP_ClrStall+0x90>
 8013c42:	2302      	movs	r3, #2
 8013c44:	e011      	b.n	8013c6a <HAL_PCD_EP_ClrStall+0xb4>
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	23aa      	movs	r3, #170	@ 0xaa
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	2101      	movs	r1, #1
 8013c4e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	68fa      	ldr	r2, [r7, #12]
 8013c56:	0011      	movs	r1, r2
 8013c58:	0018      	movs	r0, r3
 8013c5a:	f007 f9b9 	bl	801afd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013c5e:	687a      	ldr	r2, [r7, #4]
 8013c60:	23aa      	movs	r3, #170	@ 0xaa
 8013c62:	009b      	lsls	r3, r3, #2
 8013c64:	2100      	movs	r1, #0
 8013c66:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013c68:	2300      	movs	r3, #0
}
 8013c6a:	0018      	movs	r0, r3
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	b004      	add	sp, #16
 8013c70:	bd80      	pop	{r7, pc}
	...

08013c74 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013c74:	b5b0      	push	{r4, r5, r7, lr}
 8013c76:	b096      	sub	sp, #88	@ 0x58
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013c7c:	f000 fbec 	bl	8014458 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	204e      	movs	r0, #78	@ 0x4e
 8013c86:	183b      	adds	r3, r7, r0
 8013c88:	2144      	movs	r1, #68	@ 0x44
 8013c8a:	5a52      	ldrh	r2, [r2, r1]
 8013c8c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013c8e:	183b      	adds	r3, r7, r0
 8013c90:	881b      	ldrh	r3, [r3, #0]
 8013c92:	b2da      	uxtb	r2, r3
 8013c94:	244d      	movs	r4, #77	@ 0x4d
 8013c96:	193b      	adds	r3, r7, r4
 8013c98:	210f      	movs	r1, #15
 8013c9a:	400a      	ands	r2, r1
 8013c9c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013c9e:	193b      	adds	r3, r7, r4
 8013ca0:	781b      	ldrb	r3, [r3, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d000      	beq.n	8013ca8 <PCD_EP_ISR_Handler+0x34>
 8013ca6:	e18f      	b.n	8013fc8 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013ca8:	183b      	adds	r3, r7, r0
 8013caa:	881b      	ldrh	r3, [r3, #0]
 8013cac:	2210      	movs	r2, #16
 8013cae:	4013      	ands	r3, r2
 8013cb0:	d155      	bne.n	8013d5e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	881b      	ldrh	r3, [r3, #0]
 8013cb8:	b29a      	uxth	r2, r3
 8013cba:	200e      	movs	r0, #14
 8013cbc:	183b      	adds	r3, r7, r0
 8013cbe:	49bb      	ldr	r1, [pc, #748]	@ (8013fac <PCD_EP_ISR_Handler+0x338>)
 8013cc0:	400a      	ands	r2, r1
 8013cc2:	801a      	strh	r2, [r3, #0]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	183a      	adds	r2, r7, r0
 8013cca:	8812      	ldrh	r2, [r2, #0]
 8013ccc:	49b8      	ldr	r1, [pc, #736]	@ (8013fb0 <PCD_EP_ISR_Handler+0x33c>)
 8013cce:	430a      	orrs	r2, r1
 8013cd0:	b292      	uxth	r2, r2
 8013cd2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	3328      	adds	r3, #40	@ 0x28
 8013cd8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2250      	movs	r2, #80	@ 0x50
 8013ce0:	5a9b      	ldrh	r3, [r3, r2]
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	001a      	movs	r2, r3
 8013ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ce8:	781b      	ldrb	r3, [r3, #0]
 8013cea:	00db      	lsls	r3, r3, #3
 8013cec:	18d2      	adds	r2, r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	18d3      	adds	r3, r2, r3
 8013cf4:	4aaf      	ldr	r2, [pc, #700]	@ (8013fb4 <PCD_EP_ISR_Handler+0x340>)
 8013cf6:	4694      	mov	ip, r2
 8013cf8:	4463      	add	r3, ip
 8013cfa:	881b      	ldrh	r3, [r3, #0]
 8013cfc:	059b      	lsls	r3, r3, #22
 8013cfe:	0d9a      	lsrs	r2, r3, #22
 8013d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d06:	695a      	ldr	r2, [r3, #20]
 8013d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d0a:	69db      	ldr	r3, [r3, #28]
 8013d0c:	18d2      	adds	r2, r2, r3
 8013d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d10:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2100      	movs	r1, #0
 8013d16:	0018      	movs	r0, r3
 8013d18:	f009 fac8 	bl	801d2ac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2224      	movs	r2, #36	@ 0x24
 8013d20:	5c9b      	ldrb	r3, [r3, r2]
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d101      	bne.n	8013d2c <PCD_EP_ISR_Handler+0xb8>
 8013d28:	f000 fb96 	bl	8014458 <PCD_EP_ISR_Handler+0x7e4>
 8013d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d2e:	699b      	ldr	r3, [r3, #24]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d001      	beq.n	8013d38 <PCD_EP_ISR_Handler+0xc4>
 8013d34:	f000 fb90 	bl	8014458 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2224      	movs	r2, #36	@ 0x24
 8013d3c:	5c9b      	ldrb	r3, [r3, r2]
 8013d3e:	b2db      	uxtb	r3, r3
 8013d40:	2280      	movs	r2, #128	@ 0x80
 8013d42:	4252      	negs	r2, r2
 8013d44:	4313      	orrs	r3, r2
 8013d46:	b2da      	uxtb	r2, r3
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	0011      	movs	r1, r2
 8013d4e:	224c      	movs	r2, #76	@ 0x4c
 8013d50:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2224      	movs	r2, #36	@ 0x24
 8013d56:	2100      	movs	r1, #0
 8013d58:	5499      	strb	r1, [r3, r2]
 8013d5a:	f000 fb7d 	bl	8014458 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	3369      	adds	r3, #105	@ 0x69
 8013d62:	33ff      	adds	r3, #255	@ 0xff
 8013d64:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681a      	ldr	r2, [r3, #0]
 8013d6a:	214a      	movs	r1, #74	@ 0x4a
 8013d6c:	187b      	adds	r3, r7, r1
 8013d6e:	8812      	ldrh	r2, [r2, #0]
 8013d70:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013d72:	187b      	adds	r3, r7, r1
 8013d74:	881a      	ldrh	r2, [r3, #0]
 8013d76:	2380      	movs	r3, #128	@ 0x80
 8013d78:	011b      	lsls	r3, r3, #4
 8013d7a:	4013      	ands	r3, r2
 8013d7c:	d037      	beq.n	8013dee <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	2250      	movs	r2, #80	@ 0x50
 8013d84:	5a9b      	ldrh	r3, [r3, r2]
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	001a      	movs	r2, r3
 8013d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	00db      	lsls	r3, r3, #3
 8013d90:	18d2      	adds	r2, r2, r3
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	18d3      	adds	r3, r2, r3
 8013d98:	4a87      	ldr	r2, [pc, #540]	@ (8013fb8 <PCD_EP_ISR_Handler+0x344>)
 8013d9a:	4694      	mov	ip, r2
 8013d9c:	4463      	add	r3, ip
 8013d9e:	881b      	ldrh	r3, [r3, #0]
 8013da0:	059b      	lsls	r3, r3, #22
 8013da2:	0d9a      	lsrs	r2, r3, #22
 8013da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013da6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6818      	ldr	r0, [r3, #0]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	22ac      	movs	r2, #172	@ 0xac
 8013db0:	0092      	lsls	r2, r2, #2
 8013db2:	1899      	adds	r1, r3, r2
 8013db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013db6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	f007 fa3a 	bl	801b236 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	881b      	ldrh	r3, [r3, #0]
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	2010      	movs	r0, #16
 8013dcc:	183b      	adds	r3, r7, r0
 8013dce:	497b      	ldr	r1, [pc, #492]	@ (8013fbc <PCD_EP_ISR_Handler+0x348>)
 8013dd0:	400a      	ands	r2, r1
 8013dd2:	801a      	strh	r2, [r3, #0]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	183a      	adds	r2, r7, r0
 8013dda:	8812      	ldrh	r2, [r2, #0]
 8013ddc:	2180      	movs	r1, #128	@ 0x80
 8013dde:	430a      	orrs	r2, r1
 8013de0:	b292      	uxth	r2, r2
 8013de2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	0018      	movs	r0, r3
 8013de8:	f009 fa2a 	bl	801d240 <HAL_PCD_SetupStageCallback>
 8013dec:	e334      	b.n	8014458 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013dee:	234a      	movs	r3, #74	@ 0x4a
 8013df0:	18fb      	adds	r3, r7, r3
 8013df2:	2200      	movs	r2, #0
 8013df4:	5e9b      	ldrsh	r3, [r3, r2]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	db00      	blt.n	8013dfc <PCD_EP_ISR_Handler+0x188>
 8013dfa:	e32d      	b.n	8014458 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	881b      	ldrh	r3, [r3, #0]
 8013e02:	b29a      	uxth	r2, r3
 8013e04:	201e      	movs	r0, #30
 8013e06:	183b      	adds	r3, r7, r0
 8013e08:	496c      	ldr	r1, [pc, #432]	@ (8013fbc <PCD_EP_ISR_Handler+0x348>)
 8013e0a:	400a      	ands	r2, r1
 8013e0c:	801a      	strh	r2, [r3, #0]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	183a      	adds	r2, r7, r0
 8013e14:	8812      	ldrh	r2, [r2, #0]
 8013e16:	2180      	movs	r1, #128	@ 0x80
 8013e18:	430a      	orrs	r2, r1
 8013e1a:	b292      	uxth	r2, r2
 8013e1c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	2250      	movs	r2, #80	@ 0x50
 8013e24:	5a9b      	ldrh	r3, [r3, r2]
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	001a      	movs	r2, r3
 8013e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e2c:	781b      	ldrb	r3, [r3, #0]
 8013e2e:	00db      	lsls	r3, r3, #3
 8013e30:	18d2      	adds	r2, r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	18d3      	adds	r3, r2, r3
 8013e38:	4a5f      	ldr	r2, [pc, #380]	@ (8013fb8 <PCD_EP_ISR_Handler+0x344>)
 8013e3a:	4694      	mov	ip, r2
 8013e3c:	4463      	add	r3, ip
 8013e3e:	881b      	ldrh	r3, [r3, #0]
 8013e40:	059b      	lsls	r3, r3, #22
 8013e42:	0d9a      	lsrs	r2, r3, #22
 8013e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e46:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e4a:	69db      	ldr	r3, [r3, #28]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d01a      	beq.n	8013e86 <PCD_EP_ISR_Handler+0x212>
 8013e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e52:	695b      	ldr	r3, [r3, #20]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d016      	beq.n	8013e86 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6818      	ldr	r0, [r3, #0]
 8013e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e5e:	6959      	ldr	r1, [r3, #20]
 8013e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e62:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e66:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	f007 f9e4 	bl	801b236 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e70:	695a      	ldr	r2, [r3, #20]
 8013e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e74:	69db      	ldr	r3, [r3, #28]
 8013e76:	18d2      	adds	r2, r2, r3
 8013e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e7a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2100      	movs	r1, #0
 8013e80:	0018      	movs	r0, r3
 8013e82:	f009 f9f2 	bl	801d26a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	214a      	movs	r1, #74	@ 0x4a
 8013e8c:	187b      	adds	r3, r7, r1
 8013e8e:	8812      	ldrh	r2, [r2, #0]
 8013e90:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013e92:	187b      	adds	r3, r7, r1
 8013e94:	881a      	ldrh	r2, [r3, #0]
 8013e96:	2380      	movs	r3, #128	@ 0x80
 8013e98:	011b      	lsls	r3, r3, #4
 8013e9a:	4013      	ands	r3, r2
 8013e9c:	d000      	beq.n	8013ea0 <PCD_EP_ISR_Handler+0x22c>
 8013e9e:	e2db      	b.n	8014458 <PCD_EP_ISR_Handler+0x7e4>
 8013ea0:	187b      	adds	r3, r7, r1
 8013ea2:	881a      	ldrh	r2, [r3, #0]
 8013ea4:	23c0      	movs	r3, #192	@ 0xc0
 8013ea6:	019b      	lsls	r3, r3, #6
 8013ea8:	401a      	ands	r2, r3
 8013eaa:	23c0      	movs	r3, #192	@ 0xc0
 8013eac:	019b      	lsls	r3, r3, #6
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d100      	bne.n	8013eb4 <PCD_EP_ISR_Handler+0x240>
 8013eb2:	e2d1      	b.n	8014458 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	61bb      	str	r3, [r7, #24]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2250      	movs	r2, #80	@ 0x50
 8013ec0:	5a9b      	ldrh	r3, [r3, r2]
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	001a      	movs	r2, r3
 8013ec6:	69bb      	ldr	r3, [r7, #24]
 8013ec8:	189b      	adds	r3, r3, r2
 8013eca:	61bb      	str	r3, [r7, #24]
 8013ecc:	69bb      	ldr	r3, [r7, #24]
 8013ece:	4a3a      	ldr	r2, [pc, #232]	@ (8013fb8 <PCD_EP_ISR_Handler+0x344>)
 8013ed0:	4694      	mov	ip, r2
 8013ed2:	4463      	add	r3, ip
 8013ed4:	617b      	str	r3, [r7, #20]
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	881b      	ldrh	r3, [r3, #0]
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	059b      	lsls	r3, r3, #22
 8013ede:	0d9b      	lsrs	r3, r3, #22
 8013ee0:	b29a      	uxth	r2, r3
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	801a      	strh	r2, [r3, #0]
 8013ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ee8:	691b      	ldr	r3, [r3, #16]
 8013eea:	2b3e      	cmp	r3, #62	@ 0x3e
 8013eec:	d91a      	bls.n	8013f24 <PCD_EP_ISR_Handler+0x2b0>
 8013eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ef0:	691b      	ldr	r3, [r3, #16]
 8013ef2:	095b      	lsrs	r3, r3, #5
 8013ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ef8:	691b      	ldr	r3, [r3, #16]
 8013efa:	221f      	movs	r2, #31
 8013efc:	4013      	ands	r3, r2
 8013efe:	d102      	bne.n	8013f06 <PCD_EP_ISR_Handler+0x292>
 8013f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f02:	3b01      	subs	r3, #1
 8013f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	881b      	ldrh	r3, [r3, #0]
 8013f0a:	b29a      	uxth	r2, r3
 8013f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f0e:	b29b      	uxth	r3, r3
 8013f10:	029b      	lsls	r3, r3, #10
 8013f12:	b29b      	uxth	r3, r3
 8013f14:	4313      	orrs	r3, r2
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	4a25      	ldr	r2, [pc, #148]	@ (8013fb0 <PCD_EP_ISR_Handler+0x33c>)
 8013f1a:	4313      	orrs	r3, r2
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	801a      	strh	r2, [r3, #0]
 8013f22:	e023      	b.n	8013f6c <PCD_EP_ISR_Handler+0x2f8>
 8013f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f26:	691b      	ldr	r3, [r3, #16]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d108      	bne.n	8013f3e <PCD_EP_ISR_Handler+0x2ca>
 8013f2c:	697b      	ldr	r3, [r7, #20]
 8013f2e:	881b      	ldrh	r3, [r3, #0]
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	4a1f      	ldr	r2, [pc, #124]	@ (8013fb0 <PCD_EP_ISR_Handler+0x33c>)
 8013f34:	4313      	orrs	r3, r2
 8013f36:	b29a      	uxth	r2, r3
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	801a      	strh	r2, [r3, #0]
 8013f3c:	e016      	b.n	8013f6c <PCD_EP_ISR_Handler+0x2f8>
 8013f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f40:	691b      	ldr	r3, [r3, #16]
 8013f42:	085b      	lsrs	r3, r3, #1
 8013f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f48:	691b      	ldr	r3, [r3, #16]
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	4013      	ands	r3, r2
 8013f4e:	d002      	beq.n	8013f56 <PCD_EP_ISR_Handler+0x2e2>
 8013f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f52:	3301      	adds	r3, #1
 8013f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	881b      	ldrh	r3, [r3, #0]
 8013f5a:	b29a      	uxth	r2, r3
 8013f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f5e:	b29b      	uxth	r3, r3
 8013f60:	029b      	lsls	r3, r3, #10
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	4313      	orrs	r3, r2
 8013f66:	b29a      	uxth	r2, r3
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	881b      	ldrh	r3, [r3, #0]
 8013f72:	b29a      	uxth	r2, r3
 8013f74:	2012      	movs	r0, #18
 8013f76:	183b      	adds	r3, r7, r0
 8013f78:	4911      	ldr	r1, [pc, #68]	@ (8013fc0 <PCD_EP_ISR_Handler+0x34c>)
 8013f7a:	400a      	ands	r2, r1
 8013f7c:	801a      	strh	r2, [r3, #0]
 8013f7e:	183b      	adds	r3, r7, r0
 8013f80:	183a      	adds	r2, r7, r0
 8013f82:	8812      	ldrh	r2, [r2, #0]
 8013f84:	2180      	movs	r1, #128	@ 0x80
 8013f86:	0149      	lsls	r1, r1, #5
 8013f88:	404a      	eors	r2, r1
 8013f8a:	801a      	strh	r2, [r3, #0]
 8013f8c:	183b      	adds	r3, r7, r0
 8013f8e:	183a      	adds	r2, r7, r0
 8013f90:	8812      	ldrh	r2, [r2, #0]
 8013f92:	2180      	movs	r1, #128	@ 0x80
 8013f94:	0189      	lsls	r1, r1, #6
 8013f96:	404a      	eors	r2, r1
 8013f98:	801a      	strh	r2, [r3, #0]
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	183a      	adds	r2, r7, r0
 8013fa0:	8812      	ldrh	r2, [r2, #0]
 8013fa2:	4908      	ldr	r1, [pc, #32]	@ (8013fc4 <PCD_EP_ISR_Handler+0x350>)
 8013fa4:	430a      	orrs	r2, r1
 8013fa6:	b292      	uxth	r2, r2
 8013fa8:	801a      	strh	r2, [r3, #0]
 8013faa:	e255      	b.n	8014458 <PCD_EP_ISR_Handler+0x7e4>
 8013fac:	ffff8f0f 	.word	0xffff8f0f
 8013fb0:	ffff8000 	.word	0xffff8000
 8013fb4:	00000402 	.word	0x00000402
 8013fb8:	00000406 	.word	0x00000406
 8013fbc:	00000f8f 	.word	0x00000f8f
 8013fc0:	ffffbf8f 	.word	0xffffbf8f
 8013fc4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	001a      	movs	r2, r3
 8013fce:	204d      	movs	r0, #77	@ 0x4d
 8013fd0:	183b      	adds	r3, r7, r0
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	009b      	lsls	r3, r3, #2
 8013fd6:	18d2      	adds	r2, r2, r3
 8013fd8:	214a      	movs	r1, #74	@ 0x4a
 8013fda:	187b      	adds	r3, r7, r1
 8013fdc:	8812      	ldrh	r2, [r2, #0]
 8013fde:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013fe0:	187b      	adds	r3, r7, r1
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	5e9b      	ldrsh	r3, [r3, r2]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	db00      	blt.n	8013fec <PCD_EP_ISR_Handler+0x378>
 8013fea:	e0fa      	b.n	80141e2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	001a      	movs	r2, r3
 8013ff2:	183b      	adds	r3, r7, r0
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	18d3      	adds	r3, r2, r3
 8013ffa:	881b      	ldrh	r3, [r3, #0]
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	2448      	movs	r4, #72	@ 0x48
 8014000:	193b      	adds	r3, r7, r4
 8014002:	49d1      	ldr	r1, [pc, #836]	@ (8014348 <PCD_EP_ISR_Handler+0x6d4>)
 8014004:	400a      	ands	r2, r1
 8014006:	801a      	strh	r2, [r3, #0]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	001a      	movs	r2, r3
 801400e:	183b      	adds	r3, r7, r0
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	18d3      	adds	r3, r2, r3
 8014016:	193a      	adds	r2, r7, r4
 8014018:	8812      	ldrh	r2, [r2, #0]
 801401a:	2180      	movs	r1, #128	@ 0x80
 801401c:	430a      	orrs	r2, r1
 801401e:	b292      	uxth	r2, r2
 8014020:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8014022:	183b      	adds	r3, r7, r0
 8014024:	781a      	ldrb	r2, [r3, #0]
 8014026:	0013      	movs	r3, r2
 8014028:	009b      	lsls	r3, r3, #2
 801402a:	189b      	adds	r3, r3, r2
 801402c:	00db      	lsls	r3, r3, #3
 801402e:	3369      	adds	r3, #105	@ 0x69
 8014030:	33ff      	adds	r3, #255	@ 0xff
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	18d3      	adds	r3, r2, r3
 8014036:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8014038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801403a:	7b1b      	ldrb	r3, [r3, #12]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d125      	bne.n	801408c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	2250      	movs	r2, #80	@ 0x50
 8014046:	5a9b      	ldrh	r3, [r3, r2]
 8014048:	b29b      	uxth	r3, r3
 801404a:	001a      	movs	r2, r3
 801404c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	00db      	lsls	r3, r3, #3
 8014052:	18d2      	adds	r2, r2, r3
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	18d3      	adds	r3, r2, r3
 801405a:	4abc      	ldr	r2, [pc, #752]	@ (801434c <PCD_EP_ISR_Handler+0x6d8>)
 801405c:	4694      	mov	ip, r2
 801405e:	4463      	add	r3, ip
 8014060:	881a      	ldrh	r2, [r3, #0]
 8014062:	2450      	movs	r4, #80	@ 0x50
 8014064:	193b      	adds	r3, r7, r4
 8014066:	0592      	lsls	r2, r2, #22
 8014068:	0d92      	lsrs	r2, r2, #22
 801406a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801406c:	193b      	adds	r3, r7, r4
 801406e:	881b      	ldrh	r3, [r3, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d100      	bne.n	8014076 <PCD_EP_ISR_Handler+0x402>
 8014074:	e08d      	b.n	8014192 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	6818      	ldr	r0, [r3, #0]
 801407a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801407c:	6959      	ldr	r1, [r3, #20]
 801407e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014080:	88da      	ldrh	r2, [r3, #6]
 8014082:	193b      	adds	r3, r7, r4
 8014084:	881b      	ldrh	r3, [r3, #0]
 8014086:	f007 f8d6 	bl	801b236 <USB_ReadPMA>
 801408a:	e082      	b.n	8014192 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801408c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801408e:	78db      	ldrb	r3, [r3, #3]
 8014090:	2b02      	cmp	r3, #2
 8014092:	d10c      	bne.n	80140ae <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8014094:	2350      	movs	r3, #80	@ 0x50
 8014096:	18fc      	adds	r4, r7, r3
 8014098:	234a      	movs	r3, #74	@ 0x4a
 801409a:	18fb      	adds	r3, r7, r3
 801409c:	881a      	ldrh	r2, [r3, #0]
 801409e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	0018      	movs	r0, r3
 80140a4:	f000 f9ec 	bl	8014480 <HAL_PCD_EP_DB_Receive>
 80140a8:	0003      	movs	r3, r0
 80140aa:	8023      	strh	r3, [r4, #0]
 80140ac:	e071      	b.n	8014192 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	001a      	movs	r2, r3
 80140b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140b6:	781b      	ldrb	r3, [r3, #0]
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	18d3      	adds	r3, r2, r3
 80140bc:	881b      	ldrh	r3, [r3, #0]
 80140be:	b29a      	uxth	r2, r3
 80140c0:	2052      	movs	r0, #82	@ 0x52
 80140c2:	183b      	adds	r3, r7, r0
 80140c4:	49a2      	ldr	r1, [pc, #648]	@ (8014350 <PCD_EP_ISR_Handler+0x6dc>)
 80140c6:	400a      	ands	r2, r1
 80140c8:	801a      	strh	r2, [r3, #0]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	001a      	movs	r2, r3
 80140d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	009b      	lsls	r3, r3, #2
 80140d6:	18d3      	adds	r3, r2, r3
 80140d8:	183a      	adds	r2, r7, r0
 80140da:	8812      	ldrh	r2, [r2, #0]
 80140dc:	499d      	ldr	r1, [pc, #628]	@ (8014354 <PCD_EP_ISR_Handler+0x6e0>)
 80140de:	430a      	orrs	r2, r1
 80140e0:	b292      	uxth	r2, r2
 80140e2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	001a      	movs	r2, r3
 80140ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140ec:	781b      	ldrb	r3, [r3, #0]
 80140ee:	009b      	lsls	r3, r3, #2
 80140f0:	18d3      	adds	r3, r2, r3
 80140f2:	881b      	ldrh	r3, [r3, #0]
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	001a      	movs	r2, r3
 80140f8:	2380      	movs	r3, #128	@ 0x80
 80140fa:	01db      	lsls	r3, r3, #7
 80140fc:	4013      	ands	r3, r2
 80140fe:	d024      	beq.n	801414a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2250      	movs	r2, #80	@ 0x50
 8014106:	5a9b      	ldrh	r3, [r3, r2]
 8014108:	b29b      	uxth	r3, r3
 801410a:	001a      	movs	r2, r3
 801410c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801410e:	781b      	ldrb	r3, [r3, #0]
 8014110:	00db      	lsls	r3, r3, #3
 8014112:	18d2      	adds	r2, r2, r3
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	18d3      	adds	r3, r2, r3
 801411a:	4a8f      	ldr	r2, [pc, #572]	@ (8014358 <PCD_EP_ISR_Handler+0x6e4>)
 801411c:	4694      	mov	ip, r2
 801411e:	4463      	add	r3, ip
 8014120:	881a      	ldrh	r2, [r3, #0]
 8014122:	2450      	movs	r4, #80	@ 0x50
 8014124:	193b      	adds	r3, r7, r4
 8014126:	0592      	lsls	r2, r2, #22
 8014128:	0d92      	lsrs	r2, r2, #22
 801412a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801412c:	193b      	adds	r3, r7, r4
 801412e:	881b      	ldrh	r3, [r3, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d02e      	beq.n	8014192 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6818      	ldr	r0, [r3, #0]
 8014138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801413a:	6959      	ldr	r1, [r3, #20]
 801413c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801413e:	891a      	ldrh	r2, [r3, #8]
 8014140:	193b      	adds	r3, r7, r4
 8014142:	881b      	ldrh	r3, [r3, #0]
 8014144:	f007 f877 	bl	801b236 <USB_ReadPMA>
 8014148:	e023      	b.n	8014192 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	2250      	movs	r2, #80	@ 0x50
 8014150:	5a9b      	ldrh	r3, [r3, r2]
 8014152:	b29b      	uxth	r3, r3
 8014154:	001a      	movs	r2, r3
 8014156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	00db      	lsls	r3, r3, #3
 801415c:	18d2      	adds	r2, r2, r3
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	18d3      	adds	r3, r2, r3
 8014164:	4a79      	ldr	r2, [pc, #484]	@ (801434c <PCD_EP_ISR_Handler+0x6d8>)
 8014166:	4694      	mov	ip, r2
 8014168:	4463      	add	r3, ip
 801416a:	881a      	ldrh	r2, [r3, #0]
 801416c:	2450      	movs	r4, #80	@ 0x50
 801416e:	193b      	adds	r3, r7, r4
 8014170:	0592      	lsls	r2, r2, #22
 8014172:	0d92      	lsrs	r2, r2, #22
 8014174:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014176:	193b      	adds	r3, r7, r4
 8014178:	881b      	ldrh	r3, [r3, #0]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d009      	beq.n	8014192 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6818      	ldr	r0, [r3, #0]
 8014182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014184:	6959      	ldr	r1, [r3, #20]
 8014186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014188:	895a      	ldrh	r2, [r3, #10]
 801418a:	193b      	adds	r3, r7, r4
 801418c:	881b      	ldrh	r3, [r3, #0]
 801418e:	f007 f852 	bl	801b236 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8014192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014194:	69da      	ldr	r2, [r3, #28]
 8014196:	2150      	movs	r1, #80	@ 0x50
 8014198:	187b      	adds	r3, r7, r1
 801419a:	881b      	ldrh	r3, [r3, #0]
 801419c:	18d2      	adds	r2, r2, r3
 801419e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80141a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141a4:	695a      	ldr	r2, [r3, #20]
 80141a6:	187b      	adds	r3, r7, r1
 80141a8:	881b      	ldrh	r3, [r3, #0]
 80141aa:	18d2      	adds	r2, r2, r3
 80141ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80141b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141b2:	699b      	ldr	r3, [r3, #24]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d005      	beq.n	80141c4 <PCD_EP_ISR_Handler+0x550>
 80141b8:	187b      	adds	r3, r7, r1
 80141ba:	881a      	ldrh	r2, [r3, #0]
 80141bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141be:	691b      	ldr	r3, [r3, #16]
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d207      	bcs.n	80141d4 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80141c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141c6:	781a      	ldrb	r2, [r3, #0]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	0011      	movs	r1, r2
 80141cc:	0018      	movs	r0, r3
 80141ce:	f009 f84c 	bl	801d26a <HAL_PCD_DataOutStageCallback>
 80141d2:	e006      	b.n	80141e2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80141da:	0011      	movs	r1, r2
 80141dc:	0018      	movs	r0, r3
 80141de:	f005 fd6f 	bl	8019cc0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80141e2:	244a      	movs	r4, #74	@ 0x4a
 80141e4:	193b      	adds	r3, r7, r4
 80141e6:	881b      	ldrh	r3, [r3, #0]
 80141e8:	2280      	movs	r2, #128	@ 0x80
 80141ea:	4013      	ands	r3, r2
 80141ec:	d100      	bne.n	80141f0 <PCD_EP_ISR_Handler+0x57c>
 80141ee:	e133      	b.n	8014458 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80141f0:	204d      	movs	r0, #77	@ 0x4d
 80141f2:	183b      	adds	r3, r7, r0
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	1c5a      	adds	r2, r3, #1
 80141f8:	0013      	movs	r3, r2
 80141fa:	009b      	lsls	r3, r3, #2
 80141fc:	189b      	adds	r3, r3, r2
 80141fe:	00db      	lsls	r3, r3, #3
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	18d3      	adds	r3, r2, r3
 8014204:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	001a      	movs	r2, r3
 801420c:	183b      	adds	r3, r7, r0
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	009b      	lsls	r3, r3, #2
 8014212:	18d3      	adds	r3, r2, r3
 8014214:	881b      	ldrh	r3, [r3, #0]
 8014216:	b29a      	uxth	r2, r3
 8014218:	2542      	movs	r5, #66	@ 0x42
 801421a:	197b      	adds	r3, r7, r5
 801421c:	494f      	ldr	r1, [pc, #316]	@ (801435c <PCD_EP_ISR_Handler+0x6e8>)
 801421e:	400a      	ands	r2, r1
 8014220:	801a      	strh	r2, [r3, #0]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	001a      	movs	r2, r3
 8014228:	183b      	adds	r3, r7, r0
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	009b      	lsls	r3, r3, #2
 801422e:	18d3      	adds	r3, r2, r3
 8014230:	197a      	adds	r2, r7, r5
 8014232:	8812      	ldrh	r2, [r2, #0]
 8014234:	494a      	ldr	r1, [pc, #296]	@ (8014360 <PCD_EP_ISR_Handler+0x6ec>)
 8014236:	430a      	orrs	r2, r1
 8014238:	b292      	uxth	r2, r2
 801423a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801423c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801423e:	78db      	ldrb	r3, [r3, #3]
 8014240:	2b01      	cmp	r3, #1
 8014242:	d000      	beq.n	8014246 <PCD_EP_ISR_Handler+0x5d2>
 8014244:	e0af      	b.n	80143a6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8014246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014248:	2200      	movs	r2, #0
 801424a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801424c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801424e:	7b1b      	ldrb	r3, [r3, #12]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d100      	bne.n	8014256 <PCD_EP_ISR_Handler+0x5e2>
 8014254:	e09f      	b.n	8014396 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014256:	193b      	adds	r3, r7, r4
 8014258:	881b      	ldrh	r3, [r3, #0]
 801425a:	2240      	movs	r2, #64	@ 0x40
 801425c:	4013      	ands	r3, r2
 801425e:	d046      	beq.n	80142ee <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014262:	785b      	ldrb	r3, [r3, #1]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d125      	bne.n	80142b4 <PCD_EP_ISR_Handler+0x640>
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	627b      	str	r3, [r7, #36]	@ 0x24
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	2250      	movs	r2, #80	@ 0x50
 8014274:	5a9b      	ldrh	r3, [r3, r2]
 8014276:	b29b      	uxth	r3, r3
 8014278:	001a      	movs	r2, r3
 801427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801427c:	189b      	adds	r3, r3, r2
 801427e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	00da      	lsls	r2, r3, #3
 8014286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014288:	18d3      	adds	r3, r2, r3
 801428a:	4a33      	ldr	r2, [pc, #204]	@ (8014358 <PCD_EP_ISR_Handler+0x6e4>)
 801428c:	4694      	mov	ip, r2
 801428e:	4463      	add	r3, ip
 8014290:	623b      	str	r3, [r7, #32]
 8014292:	6a3b      	ldr	r3, [r7, #32]
 8014294:	881b      	ldrh	r3, [r3, #0]
 8014296:	b29b      	uxth	r3, r3
 8014298:	059b      	lsls	r3, r3, #22
 801429a:	0d9b      	lsrs	r3, r3, #22
 801429c:	b29a      	uxth	r2, r3
 801429e:	6a3b      	ldr	r3, [r7, #32]
 80142a0:	801a      	strh	r2, [r3, #0]
 80142a2:	6a3b      	ldr	r3, [r7, #32]
 80142a4:	881b      	ldrh	r3, [r3, #0]
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	4a2d      	ldr	r2, [pc, #180]	@ (8014360 <PCD_EP_ISR_Handler+0x6ec>)
 80142aa:	4313      	orrs	r3, r2
 80142ac:	b29a      	uxth	r2, r3
 80142ae:	6a3b      	ldr	r3, [r7, #32]
 80142b0:	801a      	strh	r2, [r3, #0]
 80142b2:	e070      	b.n	8014396 <PCD_EP_ISR_Handler+0x722>
 80142b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142b6:	785b      	ldrb	r3, [r3, #1]
 80142b8:	2b01      	cmp	r3, #1
 80142ba:	d16c      	bne.n	8014396 <PCD_EP_ISR_Handler+0x722>
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	2250      	movs	r2, #80	@ 0x50
 80142c8:	5a9b      	ldrh	r3, [r3, r2]
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	001a      	movs	r2, r3
 80142ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d0:	189b      	adds	r3, r3, r2
 80142d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80142d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	00da      	lsls	r2, r3, #3
 80142da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142dc:	18d3      	adds	r3, r2, r3
 80142de:	4a1e      	ldr	r2, [pc, #120]	@ (8014358 <PCD_EP_ISR_Handler+0x6e4>)
 80142e0:	4694      	mov	ip, r2
 80142e2:	4463      	add	r3, ip
 80142e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80142e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142e8:	2200      	movs	r2, #0
 80142ea:	801a      	strh	r2, [r3, #0]
 80142ec:	e053      	b.n	8014396 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80142f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142f6:	785b      	ldrb	r3, [r3, #1]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d133      	bne.n	8014364 <PCD_EP_ISR_Handler+0x6f0>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	637b      	str	r3, [r7, #52]	@ 0x34
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	2250      	movs	r2, #80	@ 0x50
 8014308:	5a9b      	ldrh	r3, [r3, r2]
 801430a:	b29b      	uxth	r3, r3
 801430c:	001a      	movs	r2, r3
 801430e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014310:	189b      	adds	r3, r3, r2
 8014312:	637b      	str	r3, [r7, #52]	@ 0x34
 8014314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	00da      	lsls	r2, r3, #3
 801431a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801431c:	18d3      	adds	r3, r2, r3
 801431e:	4a0b      	ldr	r2, [pc, #44]	@ (801434c <PCD_EP_ISR_Handler+0x6d8>)
 8014320:	4694      	mov	ip, r2
 8014322:	4463      	add	r3, ip
 8014324:	633b      	str	r3, [r7, #48]	@ 0x30
 8014326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014328:	881b      	ldrh	r3, [r3, #0]
 801432a:	b29b      	uxth	r3, r3
 801432c:	059b      	lsls	r3, r3, #22
 801432e:	0d9b      	lsrs	r3, r3, #22
 8014330:	b29a      	uxth	r2, r3
 8014332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014334:	801a      	strh	r2, [r3, #0]
 8014336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014338:	881b      	ldrh	r3, [r3, #0]
 801433a:	b29b      	uxth	r3, r3
 801433c:	4a08      	ldr	r2, [pc, #32]	@ (8014360 <PCD_EP_ISR_Handler+0x6ec>)
 801433e:	4313      	orrs	r3, r2
 8014340:	b29a      	uxth	r2, r3
 8014342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014344:	801a      	strh	r2, [r3, #0]
 8014346:	e026      	b.n	8014396 <PCD_EP_ISR_Handler+0x722>
 8014348:	00000f8f 	.word	0x00000f8f
 801434c:	00000406 	.word	0x00000406
 8014350:	ffff8f8f 	.word	0xffff8f8f
 8014354:	ffff80c0 	.word	0xffff80c0
 8014358:	00000402 	.word	0x00000402
 801435c:	ffff8f0f 	.word	0xffff8f0f
 8014360:	ffff8000 	.word	0xffff8000
 8014364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014366:	785b      	ldrb	r3, [r3, #1]
 8014368:	2b01      	cmp	r3, #1
 801436a:	d114      	bne.n	8014396 <PCD_EP_ISR_Handler+0x722>
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2250      	movs	r2, #80	@ 0x50
 8014372:	5a9b      	ldrh	r3, [r3, r2]
 8014374:	b29b      	uxth	r3, r3
 8014376:	001a      	movs	r2, r3
 8014378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801437a:	189b      	adds	r3, r3, r2
 801437c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801437e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	00da      	lsls	r2, r3, #3
 8014384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014386:	18d3      	adds	r3, r2, r3
 8014388:	4a3b      	ldr	r2, [pc, #236]	@ (8014478 <PCD_EP_ISR_Handler+0x804>)
 801438a:	4694      	mov	ip, r2
 801438c:	4463      	add	r3, ip
 801438e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014392:	2200      	movs	r2, #0
 8014394:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014398:	781a      	ldrb	r2, [r3, #0]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	0011      	movs	r1, r2
 801439e:	0018      	movs	r0, r3
 80143a0:	f008 ff84 	bl	801d2ac <HAL_PCD_DataInStageCallback>
 80143a4:	e058      	b.n	8014458 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80143a6:	234a      	movs	r3, #74	@ 0x4a
 80143a8:	18fb      	adds	r3, r7, r3
 80143aa:	881a      	ldrh	r2, [r3, #0]
 80143ac:	2380      	movs	r3, #128	@ 0x80
 80143ae:	005b      	lsls	r3, r3, #1
 80143b0:	4013      	ands	r3, r2
 80143b2:	d149      	bne.n	8014448 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2250      	movs	r2, #80	@ 0x50
 80143ba:	5a9b      	ldrh	r3, [r3, r2]
 80143bc:	b29b      	uxth	r3, r3
 80143be:	001a      	movs	r2, r3
 80143c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	00db      	lsls	r3, r3, #3
 80143c6:	18d2      	adds	r2, r2, r3
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	18d3      	adds	r3, r2, r3
 80143ce:	4a2b      	ldr	r2, [pc, #172]	@ (801447c <PCD_EP_ISR_Handler+0x808>)
 80143d0:	4694      	mov	ip, r2
 80143d2:	4463      	add	r3, ip
 80143d4:	881a      	ldrh	r2, [r3, #0]
 80143d6:	2140      	movs	r1, #64	@ 0x40
 80143d8:	187b      	adds	r3, r7, r1
 80143da:	0592      	lsls	r2, r2, #22
 80143dc:	0d92      	lsrs	r2, r2, #22
 80143de:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80143e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143e2:	699a      	ldr	r2, [r3, #24]
 80143e4:	187b      	adds	r3, r7, r1
 80143e6:	881b      	ldrh	r3, [r3, #0]
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d907      	bls.n	80143fc <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80143ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143ee:	699a      	ldr	r2, [r3, #24]
 80143f0:	187b      	adds	r3, r7, r1
 80143f2:	881b      	ldrh	r3, [r3, #0]
 80143f4:	1ad2      	subs	r2, r2, r3
 80143f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143f8:	619a      	str	r2, [r3, #24]
 80143fa:	e002      	b.n	8014402 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80143fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143fe:	2200      	movs	r2, #0
 8014400:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8014402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014404:	699b      	ldr	r3, [r3, #24]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d107      	bne.n	801441a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801440a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801440c:	781a      	ldrb	r2, [r3, #0]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	0011      	movs	r1, r2
 8014412:	0018      	movs	r0, r3
 8014414:	f008 ff4a 	bl	801d2ac <HAL_PCD_DataInStageCallback>
 8014418:	e01e      	b.n	8014458 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801441a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801441c:	695a      	ldr	r2, [r3, #20]
 801441e:	2140      	movs	r1, #64	@ 0x40
 8014420:	187b      	adds	r3, r7, r1
 8014422:	881b      	ldrh	r3, [r3, #0]
 8014424:	18d2      	adds	r2, r2, r3
 8014426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014428:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801442a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801442c:	69da      	ldr	r2, [r3, #28]
 801442e:	187b      	adds	r3, r7, r1
 8014430:	881b      	ldrh	r3, [r3, #0]
 8014432:	18d2      	adds	r2, r2, r3
 8014434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014436:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801443e:	0011      	movs	r1, r2
 8014440:	0018      	movs	r0, r3
 8014442:	f005 fc3d 	bl	8019cc0 <USB_EPStartXfer>
 8014446:	e007      	b.n	8014458 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8014448:	234a      	movs	r3, #74	@ 0x4a
 801444a:	18fb      	adds	r3, r7, r3
 801444c:	881a      	ldrh	r2, [r3, #0]
 801444e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	0018      	movs	r0, r3
 8014454:	f000 f930 	bl	80146b8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2244      	movs	r2, #68	@ 0x44
 801445e:	5a9b      	ldrh	r3, [r3, r2]
 8014460:	b29b      	uxth	r3, r3
 8014462:	b21b      	sxth	r3, r3
 8014464:	2b00      	cmp	r3, #0
 8014466:	da01      	bge.n	801446c <PCD_EP_ISR_Handler+0x7f8>
 8014468:	f7ff fc0a 	bl	8013c80 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801446c:	2300      	movs	r3, #0
}
 801446e:	0018      	movs	r0, r3
 8014470:	46bd      	mov	sp, r7
 8014472:	b016      	add	sp, #88	@ 0x58
 8014474:	bdb0      	pop	{r4, r5, r7, pc}
 8014476:	46c0      	nop			@ (mov r8, r8)
 8014478:	00000406 	.word	0x00000406
 801447c:	00000402 	.word	0x00000402

08014480 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014480:	b590      	push	{r4, r7, lr}
 8014482:	b089      	sub	sp, #36	@ 0x24
 8014484:	af00      	add	r7, sp, #0
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	60b9      	str	r1, [r7, #8]
 801448a:	1dbb      	adds	r3, r7, #6
 801448c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801448e:	1dbb      	adds	r3, r7, #6
 8014490:	881a      	ldrh	r2, [r3, #0]
 8014492:	2380      	movs	r3, #128	@ 0x80
 8014494:	01db      	lsls	r3, r3, #7
 8014496:	4013      	ands	r3, r2
 8014498:	d100      	bne.n	801449c <HAL_PCD_EP_DB_Receive+0x1c>
 801449a:	e07d      	b.n	8014598 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	2250      	movs	r2, #80	@ 0x50
 80144a2:	5a9b      	ldrh	r3, [r3, r2]
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	001a      	movs	r2, r3
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	00db      	lsls	r3, r3, #3
 80144ae:	18d2      	adds	r2, r2, r3
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	18d3      	adds	r3, r2, r3
 80144b6:	4a7a      	ldr	r2, [pc, #488]	@ (80146a0 <HAL_PCD_EP_DB_Receive+0x220>)
 80144b8:	4694      	mov	ip, r2
 80144ba:	4463      	add	r3, ip
 80144bc:	881a      	ldrh	r2, [r3, #0]
 80144be:	211a      	movs	r1, #26
 80144c0:	187b      	adds	r3, r7, r1
 80144c2:	0592      	lsls	r2, r2, #22
 80144c4:	0d92      	lsrs	r2, r2, #22
 80144c6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	699a      	ldr	r2, [r3, #24]
 80144cc:	187b      	adds	r3, r7, r1
 80144ce:	881b      	ldrh	r3, [r3, #0]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d307      	bcc.n	80144e4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	699a      	ldr	r2, [r3, #24]
 80144d8:	187b      	adds	r3, r7, r1
 80144da:	881b      	ldrh	r3, [r3, #0]
 80144dc:	1ad2      	subs	r2, r2, r3
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	619a      	str	r2, [r3, #24]
 80144e2:	e002      	b.n	80144ea <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	2200      	movs	r2, #0
 80144e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	699b      	ldr	r3, [r3, #24]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d121      	bne.n	8014536 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	001a      	movs	r2, r3
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	009b      	lsls	r3, r3, #2
 80144fe:	18d3      	adds	r3, r2, r3
 8014500:	881b      	ldrh	r3, [r3, #0]
 8014502:	b29a      	uxth	r2, r3
 8014504:	2018      	movs	r0, #24
 8014506:	183b      	adds	r3, r7, r0
 8014508:	4966      	ldr	r1, [pc, #408]	@ (80146a4 <HAL_PCD_EP_DB_Receive+0x224>)
 801450a:	400a      	ands	r2, r1
 801450c:	801a      	strh	r2, [r3, #0]
 801450e:	183b      	adds	r3, r7, r0
 8014510:	183a      	adds	r2, r7, r0
 8014512:	8812      	ldrh	r2, [r2, #0]
 8014514:	2180      	movs	r1, #128	@ 0x80
 8014516:	0189      	lsls	r1, r1, #6
 8014518:	404a      	eors	r2, r1
 801451a:	801a      	strh	r2, [r3, #0]
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	001a      	movs	r2, r3
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	009b      	lsls	r3, r3, #2
 8014528:	18d3      	adds	r3, r2, r3
 801452a:	183a      	adds	r2, r7, r0
 801452c:	8812      	ldrh	r2, [r2, #0]
 801452e:	495e      	ldr	r1, [pc, #376]	@ (80146a8 <HAL_PCD_EP_DB_Receive+0x228>)
 8014530:	430a      	orrs	r2, r1
 8014532:	b292      	uxth	r2, r2
 8014534:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014536:	1dbb      	adds	r3, r7, #6
 8014538:	881b      	ldrh	r3, [r3, #0]
 801453a:	2240      	movs	r2, #64	@ 0x40
 801453c:	4013      	ands	r3, r2
 801453e:	d01a      	beq.n	8014576 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	001a      	movs	r2, r3
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	009b      	lsls	r3, r3, #2
 801454c:	18d3      	adds	r3, r2, r3
 801454e:	881b      	ldrh	r3, [r3, #0]
 8014550:	b29a      	uxth	r2, r3
 8014552:	2016      	movs	r0, #22
 8014554:	183b      	adds	r3, r7, r0
 8014556:	4955      	ldr	r1, [pc, #340]	@ (80146ac <HAL_PCD_EP_DB_Receive+0x22c>)
 8014558:	400a      	ands	r2, r1
 801455a:	801a      	strh	r2, [r3, #0]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	001a      	movs	r2, r3
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	009b      	lsls	r3, r3, #2
 8014568:	18d3      	adds	r3, r2, r3
 801456a:	183a      	adds	r2, r7, r0
 801456c:	8812      	ldrh	r2, [r2, #0]
 801456e:	4950      	ldr	r1, [pc, #320]	@ (80146b0 <HAL_PCD_EP_DB_Receive+0x230>)
 8014570:	430a      	orrs	r2, r1
 8014572:	b292      	uxth	r2, r2
 8014574:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014576:	241a      	movs	r4, #26
 8014578:	193b      	adds	r3, r7, r4
 801457a:	881b      	ldrh	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d100      	bne.n	8014582 <HAL_PCD_EP_DB_Receive+0x102>
 8014580:	e086      	b.n	8014690 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	6818      	ldr	r0, [r3, #0]
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	6959      	ldr	r1, [r3, #20]
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	891a      	ldrh	r2, [r3, #8]
 801458e:	193b      	adds	r3, r7, r4
 8014590:	881b      	ldrh	r3, [r3, #0]
 8014592:	f006 fe50 	bl	801b236 <USB_ReadPMA>
 8014596:	e07b      	b.n	8014690 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	2250      	movs	r2, #80	@ 0x50
 801459e:	5a9b      	ldrh	r3, [r3, r2]
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	001a      	movs	r2, r3
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	00db      	lsls	r3, r3, #3
 80145aa:	18d2      	adds	r2, r2, r3
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	18d3      	adds	r3, r2, r3
 80145b2:	4a40      	ldr	r2, [pc, #256]	@ (80146b4 <HAL_PCD_EP_DB_Receive+0x234>)
 80145b4:	4694      	mov	ip, r2
 80145b6:	4463      	add	r3, ip
 80145b8:	881a      	ldrh	r2, [r3, #0]
 80145ba:	211a      	movs	r1, #26
 80145bc:	187b      	adds	r3, r7, r1
 80145be:	0592      	lsls	r2, r2, #22
 80145c0:	0d92      	lsrs	r2, r2, #22
 80145c2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	699a      	ldr	r2, [r3, #24]
 80145c8:	187b      	adds	r3, r7, r1
 80145ca:	881b      	ldrh	r3, [r3, #0]
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d307      	bcc.n	80145e0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	699a      	ldr	r2, [r3, #24]
 80145d4:	187b      	adds	r3, r7, r1
 80145d6:	881b      	ldrh	r3, [r3, #0]
 80145d8:	1ad2      	subs	r2, r2, r3
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	619a      	str	r2, [r3, #24]
 80145de:	e002      	b.n	80145e6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	2200      	movs	r2, #0
 80145e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	699b      	ldr	r3, [r3, #24]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d121      	bne.n	8014632 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	001a      	movs	r2, r3
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	781b      	ldrb	r3, [r3, #0]
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	18d3      	adds	r3, r2, r3
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	b29a      	uxth	r2, r3
 8014600:	201e      	movs	r0, #30
 8014602:	183b      	adds	r3, r7, r0
 8014604:	4927      	ldr	r1, [pc, #156]	@ (80146a4 <HAL_PCD_EP_DB_Receive+0x224>)
 8014606:	400a      	ands	r2, r1
 8014608:	801a      	strh	r2, [r3, #0]
 801460a:	183b      	adds	r3, r7, r0
 801460c:	183a      	adds	r2, r7, r0
 801460e:	8812      	ldrh	r2, [r2, #0]
 8014610:	2180      	movs	r1, #128	@ 0x80
 8014612:	0189      	lsls	r1, r1, #6
 8014614:	404a      	eors	r2, r1
 8014616:	801a      	strh	r2, [r3, #0]
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	001a      	movs	r2, r3
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	009b      	lsls	r3, r3, #2
 8014624:	18d3      	adds	r3, r2, r3
 8014626:	183a      	adds	r2, r7, r0
 8014628:	8812      	ldrh	r2, [r2, #0]
 801462a:	491f      	ldr	r1, [pc, #124]	@ (80146a8 <HAL_PCD_EP_DB_Receive+0x228>)
 801462c:	430a      	orrs	r2, r1
 801462e:	b292      	uxth	r2, r2
 8014630:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8014632:	1dbb      	adds	r3, r7, #6
 8014634:	881b      	ldrh	r3, [r3, #0]
 8014636:	2240      	movs	r2, #64	@ 0x40
 8014638:	4013      	ands	r3, r2
 801463a:	d11a      	bne.n	8014672 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	001a      	movs	r2, r3
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	18d3      	adds	r3, r2, r3
 801464a:	881b      	ldrh	r3, [r3, #0]
 801464c:	b29a      	uxth	r2, r3
 801464e:	201c      	movs	r0, #28
 8014650:	183b      	adds	r3, r7, r0
 8014652:	4916      	ldr	r1, [pc, #88]	@ (80146ac <HAL_PCD_EP_DB_Receive+0x22c>)
 8014654:	400a      	ands	r2, r1
 8014656:	801a      	strh	r2, [r3, #0]
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	001a      	movs	r2, r3
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	009b      	lsls	r3, r3, #2
 8014664:	18d3      	adds	r3, r2, r3
 8014666:	183a      	adds	r2, r7, r0
 8014668:	8812      	ldrh	r2, [r2, #0]
 801466a:	4911      	ldr	r1, [pc, #68]	@ (80146b0 <HAL_PCD_EP_DB_Receive+0x230>)
 801466c:	430a      	orrs	r2, r1
 801466e:	b292      	uxth	r2, r2
 8014670:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014672:	241a      	movs	r4, #26
 8014674:	193b      	adds	r3, r7, r4
 8014676:	881b      	ldrh	r3, [r3, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d009      	beq.n	8014690 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	6818      	ldr	r0, [r3, #0]
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	6959      	ldr	r1, [r3, #20]
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	895a      	ldrh	r2, [r3, #10]
 8014688:	193b      	adds	r3, r7, r4
 801468a:	881b      	ldrh	r3, [r3, #0]
 801468c:	f006 fdd3 	bl	801b236 <USB_ReadPMA>
    }
  }

  return count;
 8014690:	231a      	movs	r3, #26
 8014692:	18fb      	adds	r3, r7, r3
 8014694:	881b      	ldrh	r3, [r3, #0]
}
 8014696:	0018      	movs	r0, r3
 8014698:	46bd      	mov	sp, r7
 801469a:	b009      	add	sp, #36	@ 0x24
 801469c:	bd90      	pop	{r4, r7, pc}
 801469e:	46c0      	nop			@ (mov r8, r8)
 80146a0:	00000402 	.word	0x00000402
 80146a4:	ffffbf8f 	.word	0xffffbf8f
 80146a8:	ffff8080 	.word	0xffff8080
 80146ac:	ffff8f8f 	.word	0xffff8f8f
 80146b0:	ffff80c0 	.word	0xffff80c0
 80146b4:	00000406 	.word	0x00000406

080146b8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b0a4      	sub	sp, #144	@ 0x90
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	1dbb      	adds	r3, r7, #6
 80146c4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80146c6:	1dbb      	adds	r3, r7, #6
 80146c8:	881b      	ldrh	r3, [r3, #0]
 80146ca:	2240      	movs	r2, #64	@ 0x40
 80146cc:	4013      	ands	r3, r2
 80146ce:	d100      	bne.n	80146d2 <HAL_PCD_EP_DB_Transmit+0x1a>
 80146d0:	e1e4      	b.n	8014a9c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	2250      	movs	r2, #80	@ 0x50
 80146d8:	5a9b      	ldrh	r3, [r3, r2]
 80146da:	b29b      	uxth	r3, r3
 80146dc:	001a      	movs	r2, r3
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	00db      	lsls	r3, r3, #3
 80146e4:	18d2      	adds	r2, r2, r3
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	18d3      	adds	r3, r2, r3
 80146ec:	4ad0      	ldr	r2, [pc, #832]	@ (8014a30 <HAL_PCD_EP_DB_Transmit+0x378>)
 80146ee:	4694      	mov	ip, r2
 80146f0:	4463      	add	r3, ip
 80146f2:	881a      	ldrh	r2, [r3, #0]
 80146f4:	2186      	movs	r1, #134	@ 0x86
 80146f6:	187b      	adds	r3, r7, r1
 80146f8:	0592      	lsls	r2, r2, #22
 80146fa:	0d92      	lsrs	r2, r2, #22
 80146fc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	699a      	ldr	r2, [r3, #24]
 8014702:	187b      	adds	r3, r7, r1
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	429a      	cmp	r2, r3
 8014708:	d907      	bls.n	801471a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	699a      	ldr	r2, [r3, #24]
 801470e:	187b      	adds	r3, r7, r1
 8014710:	881b      	ldrh	r3, [r3, #0]
 8014712:	1ad2      	subs	r2, r2, r3
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	619a      	str	r2, [r3, #24]
 8014718:	e002      	b.n	8014720 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	2200      	movs	r2, #0
 801471e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	699b      	ldr	r3, [r3, #24]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d000      	beq.n	801472a <HAL_PCD_EP_DB_Transmit+0x72>
 8014728:	e0b5      	b.n	8014896 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	785b      	ldrb	r3, [r3, #1]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d125      	bne.n	801477e <HAL_PCD_EP_DB_Transmit+0xc6>
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2250      	movs	r2, #80	@ 0x50
 801473e:	5a9b      	ldrh	r3, [r3, r2]
 8014740:	b29b      	uxth	r3, r3
 8014742:	001a      	movs	r2, r3
 8014744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014746:	189b      	adds	r3, r3, r2
 8014748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	00da      	lsls	r2, r3, #3
 8014750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014752:	18d3      	adds	r3, r2, r3
 8014754:	4ab6      	ldr	r2, [pc, #728]	@ (8014a30 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014756:	4694      	mov	ip, r2
 8014758:	4463      	add	r3, ip
 801475a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801475e:	881b      	ldrh	r3, [r3, #0]
 8014760:	b29b      	uxth	r3, r3
 8014762:	059b      	lsls	r3, r3, #22
 8014764:	0d9b      	lsrs	r3, r3, #22
 8014766:	b29a      	uxth	r2, r3
 8014768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801476a:	801a      	strh	r2, [r3, #0]
 801476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801476e:	881b      	ldrh	r3, [r3, #0]
 8014770:	b29b      	uxth	r3, r3
 8014772:	4ab0      	ldr	r2, [pc, #704]	@ (8014a34 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014774:	4313      	orrs	r3, r2
 8014776:	b29a      	uxth	r2, r3
 8014778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801477a:	801a      	strh	r2, [r3, #0]
 801477c:	e01b      	b.n	80147b6 <HAL_PCD_EP_DB_Transmit+0xfe>
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	785b      	ldrb	r3, [r3, #1]
 8014782:	2b01      	cmp	r3, #1
 8014784:	d117      	bne.n	80147b6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	637b      	str	r3, [r7, #52]	@ 0x34
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	2250      	movs	r2, #80	@ 0x50
 8014792:	5a9b      	ldrh	r3, [r3, r2]
 8014794:	b29b      	uxth	r3, r3
 8014796:	001a      	movs	r2, r3
 8014798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801479a:	189b      	adds	r3, r3, r2
 801479c:	637b      	str	r3, [r7, #52]	@ 0x34
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	00da      	lsls	r2, r3, #3
 80147a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147a6:	18d3      	adds	r3, r2, r3
 80147a8:	4aa1      	ldr	r2, [pc, #644]	@ (8014a30 <HAL_PCD_EP_DB_Transmit+0x378>)
 80147aa:	4694      	mov	ip, r2
 80147ac:	4463      	add	r3, ip
 80147ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80147b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147b2:	2200      	movs	r2, #0
 80147b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	785b      	ldrb	r3, [r3, #1]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d125      	bne.n	8014810 <HAL_PCD_EP_DB_Transmit+0x158>
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	61fb      	str	r3, [r7, #28]
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	2250      	movs	r2, #80	@ 0x50
 80147d0:	5a9b      	ldrh	r3, [r3, r2]
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	001a      	movs	r2, r3
 80147d6:	69fb      	ldr	r3, [r7, #28]
 80147d8:	189b      	adds	r3, r3, r2
 80147da:	61fb      	str	r3, [r7, #28]
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	00da      	lsls	r2, r3, #3
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	18d3      	adds	r3, r2, r3
 80147e6:	4a94      	ldr	r2, [pc, #592]	@ (8014a38 <HAL_PCD_EP_DB_Transmit+0x380>)
 80147e8:	4694      	mov	ip, r2
 80147ea:	4463      	add	r3, ip
 80147ec:	61bb      	str	r3, [r7, #24]
 80147ee:	69bb      	ldr	r3, [r7, #24]
 80147f0:	881b      	ldrh	r3, [r3, #0]
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	059b      	lsls	r3, r3, #22
 80147f6:	0d9b      	lsrs	r3, r3, #22
 80147f8:	b29a      	uxth	r2, r3
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	801a      	strh	r2, [r3, #0]
 80147fe:	69bb      	ldr	r3, [r7, #24]
 8014800:	881b      	ldrh	r3, [r3, #0]
 8014802:	b29b      	uxth	r3, r3
 8014804:	4a8b      	ldr	r2, [pc, #556]	@ (8014a34 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014806:	4313      	orrs	r3, r2
 8014808:	b29a      	uxth	r2, r3
 801480a:	69bb      	ldr	r3, [r7, #24]
 801480c:	801a      	strh	r2, [r3, #0]
 801480e:	e018      	b.n	8014842 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	785b      	ldrb	r3, [r3, #1]
 8014814:	2b01      	cmp	r3, #1
 8014816:	d114      	bne.n	8014842 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	2250      	movs	r2, #80	@ 0x50
 801481e:	5a9b      	ldrh	r3, [r3, r2]
 8014820:	b29b      	uxth	r3, r3
 8014822:	001a      	movs	r2, r3
 8014824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014826:	189b      	adds	r3, r3, r2
 8014828:	627b      	str	r3, [r7, #36]	@ 0x24
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	00da      	lsls	r2, r3, #3
 8014830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014832:	18d3      	adds	r3, r2, r3
 8014834:	4a80      	ldr	r2, [pc, #512]	@ (8014a38 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014836:	4694      	mov	ip, r2
 8014838:	4463      	add	r3, ip
 801483a:	623b      	str	r3, [r7, #32]
 801483c:	6a3b      	ldr	r3, [r7, #32]
 801483e:	2200      	movs	r2, #0
 8014840:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	781a      	ldrb	r2, [r3, #0]
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	0011      	movs	r1, r2
 801484a:	0018      	movs	r0, r3
 801484c:	f008 fd2e 	bl	801d2ac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014850:	1dbb      	adds	r3, r7, #6
 8014852:	881a      	ldrh	r2, [r3, #0]
 8014854:	2380      	movs	r3, #128	@ 0x80
 8014856:	01db      	lsls	r3, r3, #7
 8014858:	4013      	ands	r3, r2
 801485a:	d100      	bne.n	801485e <HAL_PCD_EP_DB_Transmit+0x1a6>
 801485c:	e309      	b.n	8014e72 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	001a      	movs	r2, r3
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	781b      	ldrb	r3, [r3, #0]
 8014868:	009b      	lsls	r3, r3, #2
 801486a:	18d3      	adds	r3, r2, r3
 801486c:	881b      	ldrh	r3, [r3, #0]
 801486e:	b29a      	uxth	r2, r3
 8014870:	2016      	movs	r0, #22
 8014872:	183b      	adds	r3, r7, r0
 8014874:	4971      	ldr	r1, [pc, #452]	@ (8014a3c <HAL_PCD_EP_DB_Transmit+0x384>)
 8014876:	400a      	ands	r2, r1
 8014878:	801a      	strh	r2, [r3, #0]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	001a      	movs	r2, r3
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	18d3      	adds	r3, r2, r3
 8014888:	183a      	adds	r2, r7, r0
 801488a:	8812      	ldrh	r2, [r2, #0]
 801488c:	496c      	ldr	r1, [pc, #432]	@ (8014a40 <HAL_PCD_EP_DB_Transmit+0x388>)
 801488e:	430a      	orrs	r2, r1
 8014890:	b292      	uxth	r2, r2
 8014892:	801a      	strh	r2, [r3, #0]
 8014894:	e2ed      	b.n	8014e72 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014896:	1dbb      	adds	r3, r7, #6
 8014898:	881a      	ldrh	r2, [r3, #0]
 801489a:	2380      	movs	r3, #128	@ 0x80
 801489c:	01db      	lsls	r3, r3, #7
 801489e:	4013      	ands	r3, r2
 80148a0:	d01a      	beq.n	80148d8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	001a      	movs	r2, r3
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	18d3      	adds	r3, r2, r3
 80148b0:	881b      	ldrh	r3, [r3, #0]
 80148b2:	b29a      	uxth	r2, r3
 80148b4:	208a      	movs	r0, #138	@ 0x8a
 80148b6:	183b      	adds	r3, r7, r0
 80148b8:	4960      	ldr	r1, [pc, #384]	@ (8014a3c <HAL_PCD_EP_DB_Transmit+0x384>)
 80148ba:	400a      	ands	r2, r1
 80148bc:	801a      	strh	r2, [r3, #0]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	001a      	movs	r2, r3
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	009b      	lsls	r3, r3, #2
 80148ca:	18d3      	adds	r3, r2, r3
 80148cc:	183a      	adds	r2, r7, r0
 80148ce:	8812      	ldrh	r2, [r2, #0]
 80148d0:	495b      	ldr	r1, [pc, #364]	@ (8014a40 <HAL_PCD_EP_DB_Transmit+0x388>)
 80148d2:	430a      	orrs	r2, r1
 80148d4:	b292      	uxth	r2, r2
 80148d6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	2224      	movs	r2, #36	@ 0x24
 80148dc:	5c9b      	ldrb	r3, [r3, r2]
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d000      	beq.n	80148e4 <HAL_PCD_EP_DB_Transmit+0x22c>
 80148e2:	e2c6      	b.n	8014e72 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	695a      	ldr	r2, [r3, #20]
 80148e8:	2186      	movs	r1, #134	@ 0x86
 80148ea:	187b      	adds	r3, r7, r1
 80148ec:	881b      	ldrh	r3, [r3, #0]
 80148ee:	18d2      	adds	r2, r2, r3
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	69da      	ldr	r2, [r3, #28]
 80148f8:	187b      	adds	r3, r7, r1
 80148fa:	881b      	ldrh	r3, [r3, #0]
 80148fc:	18d2      	adds	r2, r2, r3
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	6a1a      	ldr	r2, [r3, #32]
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	691b      	ldr	r3, [r3, #16]
 801490a:	429a      	cmp	r2, r3
 801490c:	d30c      	bcc.n	8014928 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	691b      	ldr	r3, [r3, #16]
 8014912:	218c      	movs	r1, #140	@ 0x8c
 8014914:	187a      	adds	r2, r7, r1
 8014916:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	6a1a      	ldr	r2, [r3, #32]
 801491c:	187b      	adds	r3, r7, r1
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	1ad2      	subs	r2, r2, r3
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	621a      	str	r2, [r3, #32]
 8014926:	e01a      	b.n	801495e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	6a1b      	ldr	r3, [r3, #32]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d10a      	bne.n	8014946 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014930:	2386      	movs	r3, #134	@ 0x86
 8014932:	18fb      	adds	r3, r7, r3
 8014934:	881b      	ldrh	r3, [r3, #0]
 8014936:	228c      	movs	r2, #140	@ 0x8c
 8014938:	18ba      	adds	r2, r7, r2
 801493a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	2224      	movs	r2, #36	@ 0x24
 8014940:	2100      	movs	r1, #0
 8014942:	5499      	strb	r1, [r3, r2]
 8014944:	e00b      	b.n	801495e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	2224      	movs	r2, #36	@ 0x24
 801494a:	2100      	movs	r1, #0
 801494c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	6a1b      	ldr	r3, [r3, #32]
 8014952:	228c      	movs	r2, #140	@ 0x8c
 8014954:	18ba      	adds	r2, r7, r2
 8014956:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	2200      	movs	r2, #0
 801495c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	785b      	ldrb	r3, [r3, #1]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d000      	beq.n	8014968 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8014966:	e06d      	b.n	8014a44 <HAL_PCD_EP_DB_Transmit+0x38c>
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	2250      	movs	r2, #80	@ 0x50
 8014974:	5a9b      	ldrh	r3, [r3, r2]
 8014976:	b29b      	uxth	r3, r3
 8014978:	001a      	movs	r2, r3
 801497a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801497c:	189b      	adds	r3, r3, r2
 801497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	00da      	lsls	r2, r3, #3
 8014986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014988:	18d3      	adds	r3, r2, r3
 801498a:	4a29      	ldr	r2, [pc, #164]	@ (8014a30 <HAL_PCD_EP_DB_Transmit+0x378>)
 801498c:	4694      	mov	ip, r2
 801498e:	4463      	add	r3, ip
 8014990:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	b29b      	uxth	r3, r3
 8014998:	059b      	lsls	r3, r3, #22
 801499a:	0d9b      	lsrs	r3, r3, #22
 801499c:	b29a      	uxth	r2, r3
 801499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149a0:	801a      	strh	r2, [r3, #0]
 80149a2:	228c      	movs	r2, #140	@ 0x8c
 80149a4:	18bb      	adds	r3, r7, r2
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80149aa:	d91a      	bls.n	80149e2 <HAL_PCD_EP_DB_Transmit+0x32a>
 80149ac:	18bb      	adds	r3, r7, r2
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	095b      	lsrs	r3, r3, #5
 80149b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80149b4:	18bb      	adds	r3, r7, r2
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	221f      	movs	r2, #31
 80149ba:	4013      	ands	r3, r2
 80149bc:	d102      	bne.n	80149c4 <HAL_PCD_EP_DB_Transmit+0x30c>
 80149be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80149c0:	3b01      	subs	r3, #1
 80149c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80149c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149c6:	881b      	ldrh	r3, [r3, #0]
 80149c8:	b29a      	uxth	r2, r3
 80149ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	029b      	lsls	r3, r3, #10
 80149d0:	b29b      	uxth	r3, r3
 80149d2:	4313      	orrs	r3, r2
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	4a17      	ldr	r2, [pc, #92]	@ (8014a34 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80149d8:	4313      	orrs	r3, r2
 80149da:	b29a      	uxth	r2, r3
 80149dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149de:	801a      	strh	r2, [r3, #0]
 80149e0:	e04f      	b.n	8014a82 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80149e2:	238c      	movs	r3, #140	@ 0x8c
 80149e4:	18fb      	adds	r3, r7, r3
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d108      	bne.n	80149fe <HAL_PCD_EP_DB_Transmit+0x346>
 80149ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149ee:	881b      	ldrh	r3, [r3, #0]
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	4a10      	ldr	r2, [pc, #64]	@ (8014a34 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80149f4:	4313      	orrs	r3, r2
 80149f6:	b29a      	uxth	r2, r3
 80149f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149fa:	801a      	strh	r2, [r3, #0]
 80149fc:	e041      	b.n	8014a82 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80149fe:	228c      	movs	r2, #140	@ 0x8c
 8014a00:	18bb      	adds	r3, r7, r2
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	085b      	lsrs	r3, r3, #1
 8014a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014a08:	18bb      	adds	r3, r7, r2
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	4013      	ands	r3, r2
 8014a10:	d002      	beq.n	8014a18 <HAL_PCD_EP_DB_Transmit+0x360>
 8014a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a14:	3301      	adds	r3, #1
 8014a16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a1a:	881b      	ldrh	r3, [r3, #0]
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a20:	b29b      	uxth	r3, r3
 8014a22:	029b      	lsls	r3, r3, #10
 8014a24:	b29b      	uxth	r3, r3
 8014a26:	4313      	orrs	r3, r2
 8014a28:	b29a      	uxth	r2, r3
 8014a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a2c:	801a      	strh	r2, [r3, #0]
 8014a2e:	e028      	b.n	8014a82 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014a30:	00000402 	.word	0x00000402
 8014a34:	ffff8000 	.word	0xffff8000
 8014a38:	00000406 	.word	0x00000406
 8014a3c:	ffff8f8f 	.word	0xffff8f8f
 8014a40:	ffffc080 	.word	0xffffc080
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	785b      	ldrb	r3, [r3, #1]
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d11a      	bne.n	8014a82 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	2250      	movs	r2, #80	@ 0x50
 8014a58:	5a9b      	ldrh	r3, [r3, r2]
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	001a      	movs	r2, r3
 8014a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a60:	189b      	adds	r3, r3, r2
 8014a62:	647b      	str	r3, [r7, #68]	@ 0x44
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	00da      	lsls	r2, r3, #3
 8014a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a6c:	18d3      	adds	r3, r2, r3
 8014a6e:	4adb      	ldr	r2, [pc, #876]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x724>)
 8014a70:	4694      	mov	ip, r2
 8014a72:	4463      	add	r3, ip
 8014a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8014a76:	238c      	movs	r3, #140	@ 0x8c
 8014a78:	18fb      	adds	r3, r7, r3
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	b29a      	uxth	r2, r3
 8014a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014a80:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	6818      	ldr	r0, [r3, #0]
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	6959      	ldr	r1, [r3, #20]
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	891a      	ldrh	r2, [r3, #8]
 8014a8e:	238c      	movs	r3, #140	@ 0x8c
 8014a90:	18fb      	adds	r3, r7, r3
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	b29b      	uxth	r3, r3
 8014a96:	f006 fb85 	bl	801b1a4 <USB_WritePMA>
 8014a9a:	e1ea      	b.n	8014e72 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	2250      	movs	r2, #80	@ 0x50
 8014aa2:	5a9b      	ldrh	r3, [r3, r2]
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	001a      	movs	r2, r3
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	00db      	lsls	r3, r3, #3
 8014aae:	18d2      	adds	r2, r2, r3
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	18d3      	adds	r3, r2, r3
 8014ab6:	4aca      	ldr	r2, [pc, #808]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014ab8:	4694      	mov	ip, r2
 8014aba:	4463      	add	r3, ip
 8014abc:	881a      	ldrh	r2, [r3, #0]
 8014abe:	2186      	movs	r1, #134	@ 0x86
 8014ac0:	187b      	adds	r3, r7, r1
 8014ac2:	0592      	lsls	r2, r2, #22
 8014ac4:	0d92      	lsrs	r2, r2, #22
 8014ac6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	699a      	ldr	r2, [r3, #24]
 8014acc:	187b      	adds	r3, r7, r1
 8014ace:	881b      	ldrh	r3, [r3, #0]
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d307      	bcc.n	8014ae4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	699a      	ldr	r2, [r3, #24]
 8014ad8:	187b      	adds	r3, r7, r1
 8014ada:	881b      	ldrh	r3, [r3, #0]
 8014adc:	1ad2      	subs	r2, r2, r3
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	619a      	str	r2, [r3, #24]
 8014ae2:	e002      	b.n	8014aea <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	699b      	ldr	r3, [r3, #24]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d000      	beq.n	8014af4 <HAL_PCD_EP_DB_Transmit+0x43c>
 8014af2:	e0bb      	b.n	8014c6c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	785b      	ldrb	r3, [r3, #1]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d125      	bne.n	8014b48 <HAL_PCD_EP_DB_Transmit+0x490>
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	2250      	movs	r2, #80	@ 0x50
 8014b08:	5a9b      	ldrh	r3, [r3, r2]
 8014b0a:	b29b      	uxth	r3, r3
 8014b0c:	001a      	movs	r2, r3
 8014b0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b10:	189b      	adds	r3, r3, r2
 8014b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	00da      	lsls	r2, r3, #3
 8014b1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b1c:	18d3      	adds	r3, r2, r3
 8014b1e:	4aaf      	ldr	r2, [pc, #700]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x724>)
 8014b20:	4694      	mov	ip, r2
 8014b22:	4463      	add	r3, ip
 8014b24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014b26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b28:	881b      	ldrh	r3, [r3, #0]
 8014b2a:	b29b      	uxth	r3, r3
 8014b2c:	059b      	lsls	r3, r3, #22
 8014b2e:	0d9b      	lsrs	r3, r3, #22
 8014b30:	b29a      	uxth	r2, r3
 8014b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b34:	801a      	strh	r2, [r3, #0]
 8014b36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b38:	881b      	ldrh	r3, [r3, #0]
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	4aa9      	ldr	r2, [pc, #676]	@ (8014de4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014b3e:	4313      	orrs	r3, r2
 8014b40:	b29a      	uxth	r2, r3
 8014b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b44:	801a      	strh	r2, [r3, #0]
 8014b46:	e01b      	b.n	8014b80 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	785b      	ldrb	r3, [r3, #1]
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	d117      	bne.n	8014b80 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	667b      	str	r3, [r7, #100]	@ 0x64
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	2250      	movs	r2, #80	@ 0x50
 8014b5c:	5a9b      	ldrh	r3, [r3, r2]
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	001a      	movs	r2, r3
 8014b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014b64:	189b      	adds	r3, r3, r2
 8014b66:	667b      	str	r3, [r7, #100]	@ 0x64
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	00da      	lsls	r2, r3, #3
 8014b6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014b70:	18d3      	adds	r3, r2, r3
 8014b72:	4a9a      	ldr	r2, [pc, #616]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x724>)
 8014b74:	4694      	mov	ip, r2
 8014b76:	4463      	add	r3, ip
 8014b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8014b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	677b      	str	r3, [r7, #116]	@ 0x74
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	785b      	ldrb	r3, [r3, #1]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d12b      	bne.n	8014be6 <HAL_PCD_EP_DB_Transmit+0x52e>
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	2250      	movs	r2, #80	@ 0x50
 8014b9a:	5a9b      	ldrh	r3, [r3, r2]
 8014b9c:	b29b      	uxth	r3, r3
 8014b9e:	001a      	movs	r2, r3
 8014ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014ba2:	189b      	adds	r3, r3, r2
 8014ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	781b      	ldrb	r3, [r3, #0]
 8014baa:	00da      	lsls	r2, r3, #3
 8014bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014bae:	18d3      	adds	r3, r2, r3
 8014bb0:	4a8b      	ldr	r2, [pc, #556]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014bb2:	4694      	mov	ip, r2
 8014bb4:	4463      	add	r3, ip
 8014bb6:	2180      	movs	r1, #128	@ 0x80
 8014bb8:	187a      	adds	r2, r7, r1
 8014bba:	6013      	str	r3, [r2, #0]
 8014bbc:	187b      	adds	r3, r7, r1
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	881b      	ldrh	r3, [r3, #0]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	059b      	lsls	r3, r3, #22
 8014bc6:	0d9b      	lsrs	r3, r3, #22
 8014bc8:	b29a      	uxth	r2, r3
 8014bca:	187b      	adds	r3, r7, r1
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	801a      	strh	r2, [r3, #0]
 8014bd0:	187b      	adds	r3, r7, r1
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	881b      	ldrh	r3, [r3, #0]
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	4a82      	ldr	r2, [pc, #520]	@ (8014de4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014bda:	4313      	orrs	r3, r2
 8014bdc:	b29a      	uxth	r2, r3
 8014bde:	187b      	adds	r3, r7, r1
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	801a      	strh	r2, [r3, #0]
 8014be4:	e018      	b.n	8014c18 <HAL_PCD_EP_DB_Transmit+0x560>
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	785b      	ldrb	r3, [r3, #1]
 8014bea:	2b01      	cmp	r3, #1
 8014bec:	d114      	bne.n	8014c18 <HAL_PCD_EP_DB_Transmit+0x560>
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	2250      	movs	r2, #80	@ 0x50
 8014bf4:	5a9b      	ldrh	r3, [r3, r2]
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	001a      	movs	r2, r3
 8014bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014bfc:	189b      	adds	r3, r3, r2
 8014bfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	781b      	ldrb	r3, [r3, #0]
 8014c04:	00da      	lsls	r2, r3, #3
 8014c06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014c08:	18d3      	adds	r3, r2, r3
 8014c0a:	4a75      	ldr	r2, [pc, #468]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014c0c:	4694      	mov	ip, r2
 8014c0e:	4463      	add	r3, ip
 8014c10:	673b      	str	r3, [r7, #112]	@ 0x70
 8014c12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014c14:	2200      	movs	r2, #0
 8014c16:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	781a      	ldrb	r2, [r3, #0]
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	0011      	movs	r1, r2
 8014c20:	0018      	movs	r0, r3
 8014c22:	f008 fb43 	bl	801d2ac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014c26:	1dbb      	adds	r3, r7, #6
 8014c28:	881a      	ldrh	r2, [r3, #0]
 8014c2a:	2380      	movs	r3, #128	@ 0x80
 8014c2c:	01db      	lsls	r3, r3, #7
 8014c2e:	4013      	ands	r3, r2
 8014c30:	d000      	beq.n	8014c34 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014c32:	e11e      	b.n	8014e72 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	001a      	movs	r2, r3
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	781b      	ldrb	r3, [r3, #0]
 8014c3e:	009b      	lsls	r3, r3, #2
 8014c40:	18d3      	adds	r3, r2, r3
 8014c42:	881b      	ldrh	r3, [r3, #0]
 8014c44:	b29a      	uxth	r2, r3
 8014c46:	2088      	movs	r0, #136	@ 0x88
 8014c48:	183b      	adds	r3, r7, r0
 8014c4a:	4967      	ldr	r1, [pc, #412]	@ (8014de8 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014c4c:	400a      	ands	r2, r1
 8014c4e:	801a      	strh	r2, [r3, #0]
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	001a      	movs	r2, r3
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	18d3      	adds	r3, r2, r3
 8014c5e:	183a      	adds	r2, r7, r0
 8014c60:	8812      	ldrh	r2, [r2, #0]
 8014c62:	4962      	ldr	r1, [pc, #392]	@ (8014dec <HAL_PCD_EP_DB_Transmit+0x734>)
 8014c64:	430a      	orrs	r2, r1
 8014c66:	b292      	uxth	r2, r2
 8014c68:	801a      	strh	r2, [r3, #0]
 8014c6a:	e102      	b.n	8014e72 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014c6c:	1dbb      	adds	r3, r7, #6
 8014c6e:	881a      	ldrh	r2, [r3, #0]
 8014c70:	2380      	movs	r3, #128	@ 0x80
 8014c72:	01db      	lsls	r3, r3, #7
 8014c74:	4013      	ands	r3, r2
 8014c76:	d11a      	bne.n	8014cae <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	001a      	movs	r2, r3
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	18d3      	adds	r3, r2, r3
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	b29a      	uxth	r2, r3
 8014c8a:	204e      	movs	r0, #78	@ 0x4e
 8014c8c:	183b      	adds	r3, r7, r0
 8014c8e:	4956      	ldr	r1, [pc, #344]	@ (8014de8 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014c90:	400a      	ands	r2, r1
 8014c92:	801a      	strh	r2, [r3, #0]
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	001a      	movs	r2, r3
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	18d3      	adds	r3, r2, r3
 8014ca2:	183a      	adds	r2, r7, r0
 8014ca4:	8812      	ldrh	r2, [r2, #0]
 8014ca6:	4951      	ldr	r1, [pc, #324]	@ (8014dec <HAL_PCD_EP_DB_Transmit+0x734>)
 8014ca8:	430a      	orrs	r2, r1
 8014caa:	b292      	uxth	r2, r2
 8014cac:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	2224      	movs	r2, #36	@ 0x24
 8014cb2:	5c9b      	ldrb	r3, [r3, r2]
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	d000      	beq.n	8014cba <HAL_PCD_EP_DB_Transmit+0x602>
 8014cb8:	e0db      	b.n	8014e72 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014cba:	68bb      	ldr	r3, [r7, #8]
 8014cbc:	695a      	ldr	r2, [r3, #20]
 8014cbe:	2186      	movs	r1, #134	@ 0x86
 8014cc0:	187b      	adds	r3, r7, r1
 8014cc2:	881b      	ldrh	r3, [r3, #0]
 8014cc4:	18d2      	adds	r2, r2, r3
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	69da      	ldr	r2, [r3, #28]
 8014cce:	187b      	adds	r3, r7, r1
 8014cd0:	881b      	ldrh	r3, [r3, #0]
 8014cd2:	18d2      	adds	r2, r2, r3
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	6a1a      	ldr	r2, [r3, #32]
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	691b      	ldr	r3, [r3, #16]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d30c      	bcc.n	8014cfe <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	691b      	ldr	r3, [r3, #16]
 8014ce8:	218c      	movs	r1, #140	@ 0x8c
 8014cea:	187a      	adds	r2, r7, r1
 8014cec:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	6a1a      	ldr	r2, [r3, #32]
 8014cf2:	187b      	adds	r3, r7, r1
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	1ad2      	subs	r2, r2, r3
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	621a      	str	r2, [r3, #32]
 8014cfc:	e01a      	b.n	8014d34 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	6a1b      	ldr	r3, [r3, #32]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d10a      	bne.n	8014d1c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014d06:	2386      	movs	r3, #134	@ 0x86
 8014d08:	18fb      	adds	r3, r7, r3
 8014d0a:	881b      	ldrh	r3, [r3, #0]
 8014d0c:	228c      	movs	r2, #140	@ 0x8c
 8014d0e:	18ba      	adds	r2, r7, r2
 8014d10:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	2224      	movs	r2, #36	@ 0x24
 8014d16:	2100      	movs	r1, #0
 8014d18:	5499      	strb	r1, [r3, r2]
 8014d1a:	e00b      	b.n	8014d34 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	6a1b      	ldr	r3, [r3, #32]
 8014d20:	228c      	movs	r2, #140	@ 0x8c
 8014d22:	18ba      	adds	r2, r7, r2
 8014d24:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	2200      	movs	r2, #0
 8014d2a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	2224      	movs	r2, #36	@ 0x24
 8014d30:	2100      	movs	r1, #0
 8014d32:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	657b      	str	r3, [r7, #84]	@ 0x54
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	785b      	ldrb	r3, [r3, #1]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d000      	beq.n	8014d44 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014d42:	e06e      	b.n	8014e22 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	2250      	movs	r2, #80	@ 0x50
 8014d50:	5a9b      	ldrh	r3, [r3, r2]
 8014d52:	b29b      	uxth	r3, r3
 8014d54:	001a      	movs	r2, r3
 8014d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d58:	189b      	adds	r3, r3, r2
 8014d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	00da      	lsls	r2, r3, #3
 8014d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d64:	18d3      	adds	r3, r2, r3
 8014d66:	4a1e      	ldr	r2, [pc, #120]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014d68:	4694      	mov	ip, r2
 8014d6a:	4463      	add	r3, ip
 8014d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014d70:	881b      	ldrh	r3, [r3, #0]
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	059b      	lsls	r3, r3, #22
 8014d76:	0d9b      	lsrs	r3, r3, #22
 8014d78:	b29a      	uxth	r2, r3
 8014d7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014d7c:	801a      	strh	r2, [r3, #0]
 8014d7e:	228c      	movs	r2, #140	@ 0x8c
 8014d80:	18bb      	adds	r3, r7, r2
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	2b3e      	cmp	r3, #62	@ 0x3e
 8014d86:	d91a      	bls.n	8014dbe <HAL_PCD_EP_DB_Transmit+0x706>
 8014d88:	18bb      	adds	r3, r7, r2
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	095b      	lsrs	r3, r3, #5
 8014d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014d90:	18bb      	adds	r3, r7, r2
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	221f      	movs	r2, #31
 8014d96:	4013      	ands	r3, r2
 8014d98:	d102      	bne.n	8014da0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014d9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014d9c:	3b01      	subs	r3, #1
 8014d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014da2:	881b      	ldrh	r3, [r3, #0]
 8014da4:	b29a      	uxth	r2, r3
 8014da6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	029b      	lsls	r3, r3, #10
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	4313      	orrs	r3, r2
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	4a0c      	ldr	r2, [pc, #48]	@ (8014de4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014db4:	4313      	orrs	r3, r2
 8014db6:	b29a      	uxth	r2, r3
 8014db8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dba:	801a      	strh	r2, [r3, #0]
 8014dbc:	e04d      	b.n	8014e5a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014dbe:	238c      	movs	r3, #140	@ 0x8c
 8014dc0:	18fb      	adds	r3, r7, r3
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d113      	bne.n	8014df0 <HAL_PCD_EP_DB_Transmit+0x738>
 8014dc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dca:	881b      	ldrh	r3, [r3, #0]
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	4a05      	ldr	r2, [pc, #20]	@ (8014de4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014dd0:	4313      	orrs	r3, r2
 8014dd2:	b29a      	uxth	r2, r3
 8014dd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dd6:	801a      	strh	r2, [r3, #0]
 8014dd8:	e03f      	b.n	8014e5a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014dda:	46c0      	nop			@ (mov r8, r8)
 8014ddc:	00000402 	.word	0x00000402
 8014de0:	00000406 	.word	0x00000406
 8014de4:	ffff8000 	.word	0xffff8000
 8014de8:	ffff8f8f 	.word	0xffff8f8f
 8014dec:	ffffc080 	.word	0xffffc080
 8014df0:	228c      	movs	r2, #140	@ 0x8c
 8014df2:	18bb      	adds	r3, r7, r2
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	085b      	lsrs	r3, r3, #1
 8014df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014dfa:	18bb      	adds	r3, r7, r2
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	2201      	movs	r2, #1
 8014e00:	4013      	ands	r3, r2
 8014e02:	d002      	beq.n	8014e0a <HAL_PCD_EP_DB_Transmit+0x752>
 8014e04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014e06:	3301      	adds	r3, #1
 8014e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e0c:	881b      	ldrh	r3, [r3, #0]
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014e12:	b29b      	uxth	r3, r3
 8014e14:	029b      	lsls	r3, r3, #10
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	4313      	orrs	r3, r2
 8014e1a:	b29a      	uxth	r2, r3
 8014e1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e1e:	801a      	strh	r2, [r3, #0]
 8014e20:	e01b      	b.n	8014e5a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	785b      	ldrb	r3, [r3, #1]
 8014e26:	2b01      	cmp	r3, #1
 8014e28:	d117      	bne.n	8014e5a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	2250      	movs	r2, #80	@ 0x50
 8014e30:	5a9b      	ldrh	r3, [r3, r2]
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	001a      	movs	r2, r3
 8014e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e38:	189b      	adds	r3, r3, r2
 8014e3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	781b      	ldrb	r3, [r3, #0]
 8014e40:	00da      	lsls	r2, r3, #3
 8014e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e44:	18d3      	adds	r3, r2, r3
 8014e46:	4a21      	ldr	r2, [pc, #132]	@ (8014ecc <HAL_PCD_EP_DB_Transmit+0x814>)
 8014e48:	4694      	mov	ip, r2
 8014e4a:	4463      	add	r3, ip
 8014e4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8014e4e:	238c      	movs	r3, #140	@ 0x8c
 8014e50:	18fb      	adds	r3, r7, r3
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	b29a      	uxth	r2, r3
 8014e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e58:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	6818      	ldr	r0, [r3, #0]
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	6959      	ldr	r1, [r3, #20]
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	895a      	ldrh	r2, [r3, #10]
 8014e66:	238c      	movs	r3, #140	@ 0x8c
 8014e68:	18fb      	adds	r3, r7, r3
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	f006 f999 	bl	801b1a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	001a      	movs	r2, r3
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	781b      	ldrb	r3, [r3, #0]
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	18d3      	adds	r3, r2, r3
 8014e80:	881b      	ldrh	r3, [r3, #0]
 8014e82:	b29a      	uxth	r2, r3
 8014e84:	2014      	movs	r0, #20
 8014e86:	183b      	adds	r3, r7, r0
 8014e88:	4911      	ldr	r1, [pc, #68]	@ (8014ed0 <HAL_PCD_EP_DB_Transmit+0x818>)
 8014e8a:	400a      	ands	r2, r1
 8014e8c:	801a      	strh	r2, [r3, #0]
 8014e8e:	183b      	adds	r3, r7, r0
 8014e90:	183a      	adds	r2, r7, r0
 8014e92:	8812      	ldrh	r2, [r2, #0]
 8014e94:	2110      	movs	r1, #16
 8014e96:	404a      	eors	r2, r1
 8014e98:	801a      	strh	r2, [r3, #0]
 8014e9a:	183b      	adds	r3, r7, r0
 8014e9c:	183a      	adds	r2, r7, r0
 8014e9e:	8812      	ldrh	r2, [r2, #0]
 8014ea0:	2120      	movs	r1, #32
 8014ea2:	404a      	eors	r2, r1
 8014ea4:	801a      	strh	r2, [r3, #0]
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	001a      	movs	r2, r3
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	009b      	lsls	r3, r3, #2
 8014eb2:	18d3      	adds	r3, r2, r3
 8014eb4:	183a      	adds	r2, r7, r0
 8014eb6:	8812      	ldrh	r2, [r2, #0]
 8014eb8:	4906      	ldr	r1, [pc, #24]	@ (8014ed4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014eba:	430a      	orrs	r2, r1
 8014ebc:	b292      	uxth	r2, r2
 8014ebe:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014ec0:	2300      	movs	r3, #0
}
 8014ec2:	0018      	movs	r0, r3
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	b024      	add	sp, #144	@ 0x90
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	46c0      	nop			@ (mov r8, r8)
 8014ecc:	00000406 	.word	0x00000406
 8014ed0:	ffff8fbf 	.word	0xffff8fbf
 8014ed4:	ffff8080 	.word	0xffff8080

08014ed8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014ed8:	b590      	push	{r4, r7, lr}
 8014eda:	b087      	sub	sp, #28
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	60f8      	str	r0, [r7, #12]
 8014ee0:	0008      	movs	r0, r1
 8014ee2:	0011      	movs	r1, r2
 8014ee4:	607b      	str	r3, [r7, #4]
 8014ee6:	240a      	movs	r4, #10
 8014ee8:	193b      	adds	r3, r7, r4
 8014eea:	1c02      	adds	r2, r0, #0
 8014eec:	801a      	strh	r2, [r3, #0]
 8014eee:	2308      	movs	r3, #8
 8014ef0:	18fb      	adds	r3, r7, r3
 8014ef2:	1c0a      	adds	r2, r1, #0
 8014ef4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014ef6:	0021      	movs	r1, r4
 8014ef8:	187b      	adds	r3, r7, r1
 8014efa:	881b      	ldrh	r3, [r3, #0]
 8014efc:	2280      	movs	r2, #128	@ 0x80
 8014efe:	4013      	ands	r3, r2
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d00c      	beq.n	8014f20 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014f06:	187b      	adds	r3, r7, r1
 8014f08:	881b      	ldrh	r3, [r3, #0]
 8014f0a:	2207      	movs	r2, #7
 8014f0c:	4013      	ands	r3, r2
 8014f0e:	1c5a      	adds	r2, r3, #1
 8014f10:	0013      	movs	r3, r2
 8014f12:	009b      	lsls	r3, r3, #2
 8014f14:	189b      	adds	r3, r3, r2
 8014f16:	00db      	lsls	r3, r3, #3
 8014f18:	68fa      	ldr	r2, [r7, #12]
 8014f1a:	18d3      	adds	r3, r2, r3
 8014f1c:	617b      	str	r3, [r7, #20]
 8014f1e:	e00b      	b.n	8014f38 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014f20:	230a      	movs	r3, #10
 8014f22:	18fb      	adds	r3, r7, r3
 8014f24:	881a      	ldrh	r2, [r3, #0]
 8014f26:	0013      	movs	r3, r2
 8014f28:	009b      	lsls	r3, r3, #2
 8014f2a:	189b      	adds	r3, r3, r2
 8014f2c:	00db      	lsls	r3, r3, #3
 8014f2e:	3369      	adds	r3, #105	@ 0x69
 8014f30:	33ff      	adds	r3, #255	@ 0xff
 8014f32:	68fa      	ldr	r2, [r7, #12]
 8014f34:	18d3      	adds	r3, r2, r3
 8014f36:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014f38:	2308      	movs	r3, #8
 8014f3a:	18fb      	adds	r3, r7, r3
 8014f3c:	881b      	ldrh	r3, [r3, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d107      	bne.n	8014f52 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	2200      	movs	r2, #0
 8014f46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	b29a      	uxth	r2, r3
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	80da      	strh	r2, [r3, #6]
 8014f50:	e00b      	b.n	8014f6a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	2201      	movs	r2, #1
 8014f56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	b29a      	uxth	r2, r3
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	0c1b      	lsrs	r3, r3, #16
 8014f64:	b29a      	uxth	r2, r3
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014f6a:	2300      	movs	r3, #0
}
 8014f6c:	0018      	movs	r0, r3
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	b007      	add	sp, #28
 8014f72:	bd90      	pop	{r4, r7, pc}

08014f74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b084      	sub	sp, #16
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014f82:	687a      	ldr	r2, [r7, #4]
 8014f84:	23ba      	movs	r3, #186	@ 0xba
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	2101      	movs	r1, #1
 8014f8a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014f8c:	687a      	ldr	r2, [r7, #4]
 8014f8e:	23b8      	movs	r3, #184	@ 0xb8
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	2100      	movs	r1, #0
 8014f94:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	2254      	movs	r2, #84	@ 0x54
 8014f9a:	5a9b      	ldrh	r3, [r3, r2]
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	4313      	orrs	r3, r2
 8014fa2:	b299      	uxth	r1, r3
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	2254      	movs	r2, #84	@ 0x54
 8014fa8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2254      	movs	r2, #84	@ 0x54
 8014fae:	5a9b      	ldrh	r3, [r3, r2]
 8014fb0:	b29b      	uxth	r3, r3
 8014fb2:	2202      	movs	r2, #2
 8014fb4:	4313      	orrs	r3, r2
 8014fb6:	b299      	uxth	r1, r3
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	2254      	movs	r2, #84	@ 0x54
 8014fbc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014fbe:	2300      	movs	r3, #0
}
 8014fc0:	0018      	movs	r0, r3
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	b004      	add	sp, #16
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	000a      	movs	r2, r1
 8014fd2:	1cfb      	adds	r3, r7, #3
 8014fd4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014fd6:	46c0      	nop			@ (mov r8, r8)
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	b002      	add	sp, #8
 8014fdc:	bd80      	pop	{r7, pc}
	...

08014fe0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014fe4:	4b04      	ldr	r3, [pc, #16]	@ (8014ff8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014fe6:	681a      	ldr	r2, [r3, #0]
 8014fe8:	4b03      	ldr	r3, [pc, #12]	@ (8014ff8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014fea:	2180      	movs	r1, #128	@ 0x80
 8014fec:	0049      	lsls	r1, r1, #1
 8014fee:	430a      	orrs	r2, r1
 8014ff0:	601a      	str	r2, [r3, #0]
}
 8014ff2:	46c0      	nop			@ (mov r8, r8)
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	40007000 	.word	0x40007000

08014ffc <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8015000:	4b04      	ldr	r3, [pc, #16]	@ (8015014 <HAL_PWR_DisableBkUpAccess+0x18>)
 8015002:	681a      	ldr	r2, [r3, #0]
 8015004:	4b03      	ldr	r3, [pc, #12]	@ (8015014 <HAL_PWR_DisableBkUpAccess+0x18>)
 8015006:	4904      	ldr	r1, [pc, #16]	@ (8015018 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8015008:	400a      	ands	r2, r1
 801500a:	601a      	str	r2, [r3, #0]
}
 801500c:	46c0      	nop			@ (mov r8, r8)
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	46c0      	nop			@ (mov r8, r8)
 8015014:	40007000 	.word	0x40007000
 8015018:	fffffeff 	.word	0xfffffeff

0801501c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b086      	sub	sp, #24
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	000a      	movs	r2, r1
 8015026:	1cfb      	adds	r3, r7, #3
 8015028:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801502a:	2300      	movs	r3, #0
 801502c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801502e:	4b25      	ldr	r3, [pc, #148]	@ (80150c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	2380      	movs	r3, #128	@ 0x80
 8015034:	009b      	lsls	r3, r3, #2
 8015036:	4013      	ands	r3, r2
 8015038:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801503a:	4b23      	ldr	r3, [pc, #140]	@ (80150c8 <HAL_PWR_EnterSTOPMode+0xac>)
 801503c:	6a1b      	ldr	r3, [r3, #32]
 801503e:	2201      	movs	r2, #1
 8015040:	4013      	ands	r3, r2
 8015042:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d008      	beq.n	801505c <HAL_PWR_EnterSTOPMode+0x40>
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d005      	beq.n	801505c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8015050:	4b1c      	ldr	r3, [pc, #112]	@ (80150c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015052:	681a      	ldr	r2, [r3, #0]
 8015054:	4b1b      	ldr	r3, [pc, #108]	@ (80150c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015056:	491d      	ldr	r1, [pc, #116]	@ (80150cc <HAL_PWR_EnterSTOPMode+0xb0>)
 8015058:	400a      	ands	r2, r1
 801505a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801505c:	4b19      	ldr	r3, [pc, #100]	@ (80150c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	2203      	movs	r2, #3
 8015066:	4393      	bics	r3, r2
 8015068:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801506a:	697a      	ldr	r2, [r7, #20]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	4313      	orrs	r3, r2
 8015070:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8015072:	4b14      	ldr	r3, [pc, #80]	@ (80150c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015074:	697a      	ldr	r2, [r7, #20]
 8015076:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015078:	4b15      	ldr	r3, [pc, #84]	@ (80150d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801507a:	691a      	ldr	r2, [r3, #16]
 801507c:	4b14      	ldr	r3, [pc, #80]	@ (80150d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801507e:	2104      	movs	r1, #4
 8015080:	430a      	orrs	r2, r1
 8015082:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8015084:	1cfb      	adds	r3, r7, #3
 8015086:	781b      	ldrb	r3, [r3, #0]
 8015088:	2b01      	cmp	r3, #1
 801508a:	d101      	bne.n	8015090 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801508c:	bf30      	wfi
 801508e:	e002      	b.n	8015096 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8015090:	bf40      	sev
    __WFE();
 8015092:	bf20      	wfe
    __WFE();
 8015094:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015096:	4b0e      	ldr	r3, [pc, #56]	@ (80150d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015098:	691a      	ldr	r2, [r3, #16]
 801509a:	4b0d      	ldr	r3, [pc, #52]	@ (80150d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801509c:	2104      	movs	r1, #4
 801509e:	438a      	bics	r2, r1
 80150a0:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d009      	beq.n	80150bc <HAL_PWR_EnterSTOPMode+0xa0>
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d006      	beq.n	80150bc <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80150ae:	4b05      	ldr	r3, [pc, #20]	@ (80150c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80150b0:	681a      	ldr	r2, [r3, #0]
 80150b2:	4b04      	ldr	r3, [pc, #16]	@ (80150c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80150b4:	2180      	movs	r1, #128	@ 0x80
 80150b6:	0089      	lsls	r1, r1, #2
 80150b8:	430a      	orrs	r2, r1
 80150ba:	601a      	str	r2, [r3, #0]
  }
}
 80150bc:	46c0      	nop			@ (mov r8, r8)
 80150be:	46bd      	mov	sp, r7
 80150c0:	b006      	add	sp, #24
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	40007000 	.word	0x40007000
 80150c8:	40010000 	.word	0x40010000
 80150cc:	fffffdff 	.word	0xfffffdff
 80150d0:	e000ed00 	.word	0xe000ed00

080150d4 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80150d8:	4b07      	ldr	r3, [pc, #28]	@ (80150f8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80150da:	681a      	ldr	r2, [r3, #0]
 80150dc:	4b06      	ldr	r3, [pc, #24]	@ (80150f8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80150de:	2102      	movs	r1, #2
 80150e0:	430a      	orrs	r2, r1
 80150e2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80150e4:	4b05      	ldr	r3, [pc, #20]	@ (80150fc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80150e6:	691a      	ldr	r2, [r3, #16]
 80150e8:	4b04      	ldr	r3, [pc, #16]	@ (80150fc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80150ea:	2104      	movs	r1, #4
 80150ec:	430a      	orrs	r2, r1
 80150ee:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80150f0:	bf30      	wfi
}
 80150f2:	46c0      	nop			@ (mov r8, r8)
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}
 80150f8:	40007000 	.word	0x40007000
 80150fc:	e000ed00 	.word	0xe000ed00

08015100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015100:	b5b0      	push	{r4, r5, r7, lr}
 8015102:	b08a      	sub	sp, #40	@ 0x28
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d102      	bne.n	8015114 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801510e:	2301      	movs	r3, #1
 8015110:	f000 fbbf 	bl	8015892 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015114:	4bc9      	ldr	r3, [pc, #804]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	220c      	movs	r2, #12
 801511a:	4013      	ands	r3, r2
 801511c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801511e:	4bc7      	ldr	r3, [pc, #796]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015120:	68da      	ldr	r2, [r3, #12]
 8015122:	2380      	movs	r3, #128	@ 0x80
 8015124:	025b      	lsls	r3, r3, #9
 8015126:	4013      	ands	r3, r2
 8015128:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	2201      	movs	r2, #1
 8015130:	4013      	ands	r3, r2
 8015132:	d100      	bne.n	8015136 <HAL_RCC_OscConfig+0x36>
 8015134:	e07e      	b.n	8015234 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	2b08      	cmp	r3, #8
 801513a:	d007      	beq.n	801514c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801513c:	69fb      	ldr	r3, [r7, #28]
 801513e:	2b0c      	cmp	r3, #12
 8015140:	d112      	bne.n	8015168 <HAL_RCC_OscConfig+0x68>
 8015142:	69ba      	ldr	r2, [r7, #24]
 8015144:	2380      	movs	r3, #128	@ 0x80
 8015146:	025b      	lsls	r3, r3, #9
 8015148:	429a      	cmp	r2, r3
 801514a:	d10d      	bne.n	8015168 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801514c:	4bbb      	ldr	r3, [pc, #748]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	2380      	movs	r3, #128	@ 0x80
 8015152:	029b      	lsls	r3, r3, #10
 8015154:	4013      	ands	r3, r2
 8015156:	d100      	bne.n	801515a <HAL_RCC_OscConfig+0x5a>
 8015158:	e06b      	b.n	8015232 <HAL_RCC_OscConfig+0x132>
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	685b      	ldr	r3, [r3, #4]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d167      	bne.n	8015232 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8015162:	2301      	movs	r3, #1
 8015164:	f000 fb95 	bl	8015892 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	685a      	ldr	r2, [r3, #4]
 801516c:	2380      	movs	r3, #128	@ 0x80
 801516e:	025b      	lsls	r3, r3, #9
 8015170:	429a      	cmp	r2, r3
 8015172:	d107      	bne.n	8015184 <HAL_RCC_OscConfig+0x84>
 8015174:	4bb1      	ldr	r3, [pc, #708]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	4bb0      	ldr	r3, [pc, #704]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 801517a:	2180      	movs	r1, #128	@ 0x80
 801517c:	0249      	lsls	r1, r1, #9
 801517e:	430a      	orrs	r2, r1
 8015180:	601a      	str	r2, [r3, #0]
 8015182:	e027      	b.n	80151d4 <HAL_RCC_OscConfig+0xd4>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	685a      	ldr	r2, [r3, #4]
 8015188:	23a0      	movs	r3, #160	@ 0xa0
 801518a:	02db      	lsls	r3, r3, #11
 801518c:	429a      	cmp	r2, r3
 801518e:	d10e      	bne.n	80151ae <HAL_RCC_OscConfig+0xae>
 8015190:	4baa      	ldr	r3, [pc, #680]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	4ba9      	ldr	r3, [pc, #676]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015196:	2180      	movs	r1, #128	@ 0x80
 8015198:	02c9      	lsls	r1, r1, #11
 801519a:	430a      	orrs	r2, r1
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	4ba7      	ldr	r3, [pc, #668]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	4ba6      	ldr	r3, [pc, #664]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80151a4:	2180      	movs	r1, #128	@ 0x80
 80151a6:	0249      	lsls	r1, r1, #9
 80151a8:	430a      	orrs	r2, r1
 80151aa:	601a      	str	r2, [r3, #0]
 80151ac:	e012      	b.n	80151d4 <HAL_RCC_OscConfig+0xd4>
 80151ae:	4ba3      	ldr	r3, [pc, #652]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	4ba2      	ldr	r3, [pc, #648]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80151b4:	49a2      	ldr	r1, [pc, #648]	@ (8015440 <HAL_RCC_OscConfig+0x340>)
 80151b6:	400a      	ands	r2, r1
 80151b8:	601a      	str	r2, [r3, #0]
 80151ba:	4ba0      	ldr	r3, [pc, #640]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	2380      	movs	r3, #128	@ 0x80
 80151c0:	025b      	lsls	r3, r3, #9
 80151c2:	4013      	ands	r3, r2
 80151c4:	60fb      	str	r3, [r7, #12]
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	4b9c      	ldr	r3, [pc, #624]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	4b9b      	ldr	r3, [pc, #620]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80151ce:	499d      	ldr	r1, [pc, #628]	@ (8015444 <HAL_RCC_OscConfig+0x344>)
 80151d0:	400a      	ands	r2, r1
 80151d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	685b      	ldr	r3, [r3, #4]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d015      	beq.n	8015208 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80151dc:	f7f9 fe60 	bl	800eea0 <HAL_GetTick>
 80151e0:	0003      	movs	r3, r0
 80151e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80151e4:	e009      	b.n	80151fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80151e6:	f7f9 fe5b 	bl	800eea0 <HAL_GetTick>
 80151ea:	0002      	movs	r2, r0
 80151ec:	697b      	ldr	r3, [r7, #20]
 80151ee:	1ad3      	subs	r3, r2, r3
 80151f0:	2b64      	cmp	r3, #100	@ 0x64
 80151f2:	d902      	bls.n	80151fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80151f4:	2303      	movs	r3, #3
 80151f6:	f000 fb4c 	bl	8015892 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80151fa:	4b90      	ldr	r3, [pc, #576]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80151fc:	681a      	ldr	r2, [r3, #0]
 80151fe:	2380      	movs	r3, #128	@ 0x80
 8015200:	029b      	lsls	r3, r3, #10
 8015202:	4013      	ands	r3, r2
 8015204:	d0ef      	beq.n	80151e6 <HAL_RCC_OscConfig+0xe6>
 8015206:	e015      	b.n	8015234 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015208:	f7f9 fe4a 	bl	800eea0 <HAL_GetTick>
 801520c:	0003      	movs	r3, r0
 801520e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015210:	e008      	b.n	8015224 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015212:	f7f9 fe45 	bl	800eea0 <HAL_GetTick>
 8015216:	0002      	movs	r2, r0
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	1ad3      	subs	r3, r2, r3
 801521c:	2b64      	cmp	r3, #100	@ 0x64
 801521e:	d901      	bls.n	8015224 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8015220:	2303      	movs	r3, #3
 8015222:	e336      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015224:	4b85      	ldr	r3, [pc, #532]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015226:	681a      	ldr	r2, [r3, #0]
 8015228:	2380      	movs	r3, #128	@ 0x80
 801522a:	029b      	lsls	r3, r3, #10
 801522c:	4013      	ands	r3, r2
 801522e:	d1f0      	bne.n	8015212 <HAL_RCC_OscConfig+0x112>
 8015230:	e000      	b.n	8015234 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015232:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	2202      	movs	r2, #2
 801523a:	4013      	ands	r3, r2
 801523c:	d100      	bne.n	8015240 <HAL_RCC_OscConfig+0x140>
 801523e:	e099      	b.n	8015374 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8015246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015248:	2220      	movs	r2, #32
 801524a:	4013      	ands	r3, r2
 801524c:	d009      	beq.n	8015262 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801524e:	4b7b      	ldr	r3, [pc, #492]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015250:	681a      	ldr	r2, [r3, #0]
 8015252:	4b7a      	ldr	r3, [pc, #488]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015254:	2120      	movs	r1, #32
 8015256:	430a      	orrs	r2, r1
 8015258:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801525c:	2220      	movs	r2, #32
 801525e:	4393      	bics	r3, r2
 8015260:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	2b04      	cmp	r3, #4
 8015266:	d005      	beq.n	8015274 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015268:	69fb      	ldr	r3, [r7, #28]
 801526a:	2b0c      	cmp	r3, #12
 801526c:	d13e      	bne.n	80152ec <HAL_RCC_OscConfig+0x1ec>
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d13b      	bne.n	80152ec <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015274:	4b71      	ldr	r3, [pc, #452]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	2204      	movs	r2, #4
 801527a:	4013      	ands	r3, r2
 801527c:	d004      	beq.n	8015288 <HAL_RCC_OscConfig+0x188>
 801527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015280:	2b00      	cmp	r3, #0
 8015282:	d101      	bne.n	8015288 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015284:	2301      	movs	r3, #1
 8015286:	e304      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015288:	4b6c      	ldr	r3, [pc, #432]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 801528a:	685b      	ldr	r3, [r3, #4]
 801528c:	4a6e      	ldr	r2, [pc, #440]	@ (8015448 <HAL_RCC_OscConfig+0x348>)
 801528e:	4013      	ands	r3, r2
 8015290:	0019      	movs	r1, r3
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	691b      	ldr	r3, [r3, #16]
 8015296:	021a      	lsls	r2, r3, #8
 8015298:	4b68      	ldr	r3, [pc, #416]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 801529a:	430a      	orrs	r2, r1
 801529c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801529e:	4b67      	ldr	r3, [pc, #412]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	2209      	movs	r2, #9
 80152a4:	4393      	bics	r3, r2
 80152a6:	0019      	movs	r1, r3
 80152a8:	4b64      	ldr	r3, [pc, #400]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80152aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152ac:	430a      	orrs	r2, r1
 80152ae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80152b0:	f000 fc42 	bl	8015b38 <HAL_RCC_GetSysClockFreq>
 80152b4:	0001      	movs	r1, r0
 80152b6:	4b61      	ldr	r3, [pc, #388]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80152b8:	68db      	ldr	r3, [r3, #12]
 80152ba:	091b      	lsrs	r3, r3, #4
 80152bc:	220f      	movs	r2, #15
 80152be:	4013      	ands	r3, r2
 80152c0:	4a62      	ldr	r2, [pc, #392]	@ (801544c <HAL_RCC_OscConfig+0x34c>)
 80152c2:	5cd3      	ldrb	r3, [r2, r3]
 80152c4:	000a      	movs	r2, r1
 80152c6:	40da      	lsrs	r2, r3
 80152c8:	4b61      	ldr	r3, [pc, #388]	@ (8015450 <HAL_RCC_OscConfig+0x350>)
 80152ca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80152cc:	4b61      	ldr	r3, [pc, #388]	@ (8015454 <HAL_RCC_OscConfig+0x354>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	2513      	movs	r5, #19
 80152d2:	197c      	adds	r4, r7, r5
 80152d4:	0018      	movs	r0, r3
 80152d6:	f7f9 fd9d 	bl	800ee14 <HAL_InitTick>
 80152da:	0003      	movs	r3, r0
 80152dc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80152de:	197b      	adds	r3, r7, r5
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d046      	beq.n	8015374 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80152e6:	197b      	adds	r3, r7, r5
 80152e8:	781b      	ldrb	r3, [r3, #0]
 80152ea:	e2d2      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80152ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d027      	beq.n	8015342 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80152f2:	4b52      	ldr	r3, [pc, #328]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	2209      	movs	r2, #9
 80152f8:	4393      	bics	r3, r2
 80152fa:	0019      	movs	r1, r3
 80152fc:	4b4f      	ldr	r3, [pc, #316]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80152fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015300:	430a      	orrs	r2, r1
 8015302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015304:	f7f9 fdcc 	bl	800eea0 <HAL_GetTick>
 8015308:	0003      	movs	r3, r0
 801530a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801530c:	e008      	b.n	8015320 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801530e:	f7f9 fdc7 	bl	800eea0 <HAL_GetTick>
 8015312:	0002      	movs	r2, r0
 8015314:	697b      	ldr	r3, [r7, #20]
 8015316:	1ad3      	subs	r3, r2, r3
 8015318:	2b02      	cmp	r3, #2
 801531a:	d901      	bls.n	8015320 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801531c:	2303      	movs	r3, #3
 801531e:	e2b8      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015320:	4b46      	ldr	r3, [pc, #280]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2204      	movs	r2, #4
 8015326:	4013      	ands	r3, r2
 8015328:	d0f1      	beq.n	801530e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801532a:	4b44      	ldr	r3, [pc, #272]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	4a46      	ldr	r2, [pc, #280]	@ (8015448 <HAL_RCC_OscConfig+0x348>)
 8015330:	4013      	ands	r3, r2
 8015332:	0019      	movs	r1, r3
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	691b      	ldr	r3, [r3, #16]
 8015338:	021a      	lsls	r2, r3, #8
 801533a:	4b40      	ldr	r3, [pc, #256]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 801533c:	430a      	orrs	r2, r1
 801533e:	605a      	str	r2, [r3, #4]
 8015340:	e018      	b.n	8015374 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015342:	4b3e      	ldr	r3, [pc, #248]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015344:	681a      	ldr	r2, [r3, #0]
 8015346:	4b3d      	ldr	r3, [pc, #244]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015348:	2101      	movs	r1, #1
 801534a:	438a      	bics	r2, r1
 801534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801534e:	f7f9 fda7 	bl	800eea0 <HAL_GetTick>
 8015352:	0003      	movs	r3, r0
 8015354:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015356:	e008      	b.n	801536a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015358:	f7f9 fda2 	bl	800eea0 <HAL_GetTick>
 801535c:	0002      	movs	r2, r0
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	1ad3      	subs	r3, r2, r3
 8015362:	2b02      	cmp	r3, #2
 8015364:	d901      	bls.n	801536a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8015366:	2303      	movs	r3, #3
 8015368:	e293      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801536a:	4b34      	ldr	r3, [pc, #208]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	2204      	movs	r2, #4
 8015370:	4013      	ands	r3, r2
 8015372:	d1f1      	bne.n	8015358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	2210      	movs	r2, #16
 801537a:	4013      	ands	r3, r2
 801537c:	d100      	bne.n	8015380 <HAL_RCC_OscConfig+0x280>
 801537e:	e0a2      	b.n	80154c6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d140      	bne.n	8015408 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015386:	4b2d      	ldr	r3, [pc, #180]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015388:	681a      	ldr	r2, [r3, #0]
 801538a:	2380      	movs	r3, #128	@ 0x80
 801538c:	009b      	lsls	r3, r3, #2
 801538e:	4013      	ands	r3, r2
 8015390:	d005      	beq.n	801539e <HAL_RCC_OscConfig+0x29e>
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	69db      	ldr	r3, [r3, #28]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d101      	bne.n	801539e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801539a:	2301      	movs	r3, #1
 801539c:	e279      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801539e:	4b27      	ldr	r3, [pc, #156]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80153a0:	685b      	ldr	r3, [r3, #4]
 80153a2:	4a2d      	ldr	r2, [pc, #180]	@ (8015458 <HAL_RCC_OscConfig+0x358>)
 80153a4:	4013      	ands	r3, r2
 80153a6:	0019      	movs	r1, r3
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80153ac:	4b23      	ldr	r3, [pc, #140]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80153ae:	430a      	orrs	r2, r1
 80153b0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80153b2:	4b22      	ldr	r3, [pc, #136]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	021b      	lsls	r3, r3, #8
 80153b8:	0a19      	lsrs	r1, r3, #8
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	6a1b      	ldr	r3, [r3, #32]
 80153be:	061a      	lsls	r2, r3, #24
 80153c0:	4b1e      	ldr	r3, [pc, #120]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80153c2:	430a      	orrs	r2, r1
 80153c4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153ca:	0b5b      	lsrs	r3, r3, #13
 80153cc:	3301      	adds	r3, #1
 80153ce:	2280      	movs	r2, #128	@ 0x80
 80153d0:	0212      	lsls	r2, r2, #8
 80153d2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80153d4:	4b19      	ldr	r3, [pc, #100]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 80153d6:	68db      	ldr	r3, [r3, #12]
 80153d8:	091b      	lsrs	r3, r3, #4
 80153da:	210f      	movs	r1, #15
 80153dc:	400b      	ands	r3, r1
 80153de:	491b      	ldr	r1, [pc, #108]	@ (801544c <HAL_RCC_OscConfig+0x34c>)
 80153e0:	5ccb      	ldrb	r3, [r1, r3]
 80153e2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80153e4:	4b1a      	ldr	r3, [pc, #104]	@ (8015450 <HAL_RCC_OscConfig+0x350>)
 80153e6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80153e8:	4b1a      	ldr	r3, [pc, #104]	@ (8015454 <HAL_RCC_OscConfig+0x354>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	2513      	movs	r5, #19
 80153ee:	197c      	adds	r4, r7, r5
 80153f0:	0018      	movs	r0, r3
 80153f2:	f7f9 fd0f 	bl	800ee14 <HAL_InitTick>
 80153f6:	0003      	movs	r3, r0
 80153f8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80153fa:	197b      	adds	r3, r7, r5
 80153fc:	781b      	ldrb	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d061      	beq.n	80154c6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8015402:	197b      	adds	r3, r7, r5
 8015404:	781b      	ldrb	r3, [r3, #0]
 8015406:	e244      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	69db      	ldr	r3, [r3, #28]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d040      	beq.n	8015492 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015410:	4b0a      	ldr	r3, [pc, #40]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015412:	681a      	ldr	r2, [r3, #0]
 8015414:	4b09      	ldr	r3, [pc, #36]	@ (801543c <HAL_RCC_OscConfig+0x33c>)
 8015416:	2180      	movs	r1, #128	@ 0x80
 8015418:	0049      	lsls	r1, r1, #1
 801541a:	430a      	orrs	r2, r1
 801541c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801541e:	f7f9 fd3f 	bl	800eea0 <HAL_GetTick>
 8015422:	0003      	movs	r3, r0
 8015424:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015426:	e019      	b.n	801545c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015428:	f7f9 fd3a 	bl	800eea0 <HAL_GetTick>
 801542c:	0002      	movs	r2, r0
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	1ad3      	subs	r3, r2, r3
 8015432:	2b02      	cmp	r3, #2
 8015434:	d912      	bls.n	801545c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8015436:	2303      	movs	r3, #3
 8015438:	e22b      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
 801543a:	46c0      	nop			@ (mov r8, r8)
 801543c:	40021000 	.word	0x40021000
 8015440:	fffeffff 	.word	0xfffeffff
 8015444:	fffbffff 	.word	0xfffbffff
 8015448:	ffffe0ff 	.word	0xffffe0ff
 801544c:	080257dc 	.word	0x080257dc
 8015450:	200000d0 	.word	0x200000d0
 8015454:	200000e0 	.word	0x200000e0
 8015458:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801545c:	4bca      	ldr	r3, [pc, #808]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	2380      	movs	r3, #128	@ 0x80
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	4013      	ands	r3, r2
 8015466:	d0df      	beq.n	8015428 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015468:	4bc7      	ldr	r3, [pc, #796]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801546a:	685b      	ldr	r3, [r3, #4]
 801546c:	4ac7      	ldr	r2, [pc, #796]	@ (801578c <HAL_RCC_OscConfig+0x68c>)
 801546e:	4013      	ands	r3, r2
 8015470:	0019      	movs	r1, r3
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015476:	4bc4      	ldr	r3, [pc, #784]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015478:	430a      	orrs	r2, r1
 801547a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801547c:	4bc2      	ldr	r3, [pc, #776]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	021b      	lsls	r3, r3, #8
 8015482:	0a19      	lsrs	r1, r3, #8
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	6a1b      	ldr	r3, [r3, #32]
 8015488:	061a      	lsls	r2, r3, #24
 801548a:	4bbf      	ldr	r3, [pc, #764]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801548c:	430a      	orrs	r2, r1
 801548e:	605a      	str	r2, [r3, #4]
 8015490:	e019      	b.n	80154c6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015492:	4bbd      	ldr	r3, [pc, #756]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015494:	681a      	ldr	r2, [r3, #0]
 8015496:	4bbc      	ldr	r3, [pc, #752]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015498:	49bd      	ldr	r1, [pc, #756]	@ (8015790 <HAL_RCC_OscConfig+0x690>)
 801549a:	400a      	ands	r2, r1
 801549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801549e:	f7f9 fcff 	bl	800eea0 <HAL_GetTick>
 80154a2:	0003      	movs	r3, r0
 80154a4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80154a6:	e008      	b.n	80154ba <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80154a8:	f7f9 fcfa 	bl	800eea0 <HAL_GetTick>
 80154ac:	0002      	movs	r2, r0
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	1ad3      	subs	r3, r2, r3
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	d901      	bls.n	80154ba <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80154b6:	2303      	movs	r3, #3
 80154b8:	e1eb      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80154ba:	4bb3      	ldr	r3, [pc, #716]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	2380      	movs	r3, #128	@ 0x80
 80154c0:	009b      	lsls	r3, r3, #2
 80154c2:	4013      	ands	r3, r2
 80154c4:	d1f0      	bne.n	80154a8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	2208      	movs	r2, #8
 80154cc:	4013      	ands	r3, r2
 80154ce:	d036      	beq.n	801553e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	695b      	ldr	r3, [r3, #20]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d019      	beq.n	801550c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80154d8:	4bab      	ldr	r3, [pc, #684]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80154da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154dc:	4baa      	ldr	r3, [pc, #680]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80154de:	2101      	movs	r1, #1
 80154e0:	430a      	orrs	r2, r1
 80154e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80154e4:	f7f9 fcdc 	bl	800eea0 <HAL_GetTick>
 80154e8:	0003      	movs	r3, r0
 80154ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80154ec:	e008      	b.n	8015500 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80154ee:	f7f9 fcd7 	bl	800eea0 <HAL_GetTick>
 80154f2:	0002      	movs	r2, r0
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	2b02      	cmp	r3, #2
 80154fa:	d901      	bls.n	8015500 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80154fc:	2303      	movs	r3, #3
 80154fe:	e1c8      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015500:	4ba1      	ldr	r3, [pc, #644]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015504:	2202      	movs	r2, #2
 8015506:	4013      	ands	r3, r2
 8015508:	d0f1      	beq.n	80154ee <HAL_RCC_OscConfig+0x3ee>
 801550a:	e018      	b.n	801553e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801550c:	4b9e      	ldr	r3, [pc, #632]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801550e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015510:	4b9d      	ldr	r3, [pc, #628]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015512:	2101      	movs	r1, #1
 8015514:	438a      	bics	r2, r1
 8015516:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015518:	f7f9 fcc2 	bl	800eea0 <HAL_GetTick>
 801551c:	0003      	movs	r3, r0
 801551e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015520:	e008      	b.n	8015534 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015522:	f7f9 fcbd 	bl	800eea0 <HAL_GetTick>
 8015526:	0002      	movs	r2, r0
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	1ad3      	subs	r3, r2, r3
 801552c:	2b02      	cmp	r3, #2
 801552e:	d901      	bls.n	8015534 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8015530:	2303      	movs	r3, #3
 8015532:	e1ae      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015534:	4b94      	ldr	r3, [pc, #592]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015538:	2202      	movs	r2, #2
 801553a:	4013      	ands	r3, r2
 801553c:	d1f1      	bne.n	8015522 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	2204      	movs	r2, #4
 8015544:	4013      	ands	r3, r2
 8015546:	d100      	bne.n	801554a <HAL_RCC_OscConfig+0x44a>
 8015548:	e0ae      	b.n	80156a8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801554a:	2023      	movs	r0, #35	@ 0x23
 801554c:	183b      	adds	r3, r7, r0
 801554e:	2200      	movs	r2, #0
 8015550:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015552:	4b8d      	ldr	r3, [pc, #564]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015556:	2380      	movs	r3, #128	@ 0x80
 8015558:	055b      	lsls	r3, r3, #21
 801555a:	4013      	ands	r3, r2
 801555c:	d109      	bne.n	8015572 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801555e:	4b8a      	ldr	r3, [pc, #552]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015562:	4b89      	ldr	r3, [pc, #548]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015564:	2180      	movs	r1, #128	@ 0x80
 8015566:	0549      	lsls	r1, r1, #21
 8015568:	430a      	orrs	r2, r1
 801556a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801556c:	183b      	adds	r3, r7, r0
 801556e:	2201      	movs	r2, #1
 8015570:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015572:	4b88      	ldr	r3, [pc, #544]	@ (8015794 <HAL_RCC_OscConfig+0x694>)
 8015574:	681a      	ldr	r2, [r3, #0]
 8015576:	2380      	movs	r3, #128	@ 0x80
 8015578:	005b      	lsls	r3, r3, #1
 801557a:	4013      	ands	r3, r2
 801557c:	d11a      	bne.n	80155b4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801557e:	4b85      	ldr	r3, [pc, #532]	@ (8015794 <HAL_RCC_OscConfig+0x694>)
 8015580:	681a      	ldr	r2, [r3, #0]
 8015582:	4b84      	ldr	r3, [pc, #528]	@ (8015794 <HAL_RCC_OscConfig+0x694>)
 8015584:	2180      	movs	r1, #128	@ 0x80
 8015586:	0049      	lsls	r1, r1, #1
 8015588:	430a      	orrs	r2, r1
 801558a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801558c:	f7f9 fc88 	bl	800eea0 <HAL_GetTick>
 8015590:	0003      	movs	r3, r0
 8015592:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015594:	e008      	b.n	80155a8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015596:	f7f9 fc83 	bl	800eea0 <HAL_GetTick>
 801559a:	0002      	movs	r2, r0
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	1ad3      	subs	r3, r2, r3
 80155a0:	2b64      	cmp	r3, #100	@ 0x64
 80155a2:	d901      	bls.n	80155a8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80155a4:	2303      	movs	r3, #3
 80155a6:	e174      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80155a8:	4b7a      	ldr	r3, [pc, #488]	@ (8015794 <HAL_RCC_OscConfig+0x694>)
 80155aa:	681a      	ldr	r2, [r3, #0]
 80155ac:	2380      	movs	r3, #128	@ 0x80
 80155ae:	005b      	lsls	r3, r3, #1
 80155b0:	4013      	ands	r3, r2
 80155b2:	d0f0      	beq.n	8015596 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	689a      	ldr	r2, [r3, #8]
 80155b8:	2380      	movs	r3, #128	@ 0x80
 80155ba:	005b      	lsls	r3, r3, #1
 80155bc:	429a      	cmp	r2, r3
 80155be:	d107      	bne.n	80155d0 <HAL_RCC_OscConfig+0x4d0>
 80155c0:	4b71      	ldr	r3, [pc, #452]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80155c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155c4:	4b70      	ldr	r3, [pc, #448]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80155c6:	2180      	movs	r1, #128	@ 0x80
 80155c8:	0049      	lsls	r1, r1, #1
 80155ca:	430a      	orrs	r2, r1
 80155cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80155ce:	e031      	b.n	8015634 <HAL_RCC_OscConfig+0x534>
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	689b      	ldr	r3, [r3, #8]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d10c      	bne.n	80155f2 <HAL_RCC_OscConfig+0x4f2>
 80155d8:	4b6b      	ldr	r3, [pc, #428]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80155da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155dc:	4b6a      	ldr	r3, [pc, #424]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80155de:	496c      	ldr	r1, [pc, #432]	@ (8015790 <HAL_RCC_OscConfig+0x690>)
 80155e0:	400a      	ands	r2, r1
 80155e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80155e4:	4b68      	ldr	r3, [pc, #416]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80155e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155e8:	4b67      	ldr	r3, [pc, #412]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80155ea:	496b      	ldr	r1, [pc, #428]	@ (8015798 <HAL_RCC_OscConfig+0x698>)
 80155ec:	400a      	ands	r2, r1
 80155ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80155f0:	e020      	b.n	8015634 <HAL_RCC_OscConfig+0x534>
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	689a      	ldr	r2, [r3, #8]
 80155f6:	23a0      	movs	r3, #160	@ 0xa0
 80155f8:	00db      	lsls	r3, r3, #3
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d10e      	bne.n	801561c <HAL_RCC_OscConfig+0x51c>
 80155fe:	4b62      	ldr	r3, [pc, #392]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015602:	4b61      	ldr	r3, [pc, #388]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015604:	2180      	movs	r1, #128	@ 0x80
 8015606:	00c9      	lsls	r1, r1, #3
 8015608:	430a      	orrs	r2, r1
 801560a:	651a      	str	r2, [r3, #80]	@ 0x50
 801560c:	4b5e      	ldr	r3, [pc, #376]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801560e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015610:	4b5d      	ldr	r3, [pc, #372]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015612:	2180      	movs	r1, #128	@ 0x80
 8015614:	0049      	lsls	r1, r1, #1
 8015616:	430a      	orrs	r2, r1
 8015618:	651a      	str	r2, [r3, #80]	@ 0x50
 801561a:	e00b      	b.n	8015634 <HAL_RCC_OscConfig+0x534>
 801561c:	4b5a      	ldr	r3, [pc, #360]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801561e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015620:	4b59      	ldr	r3, [pc, #356]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015622:	495b      	ldr	r1, [pc, #364]	@ (8015790 <HAL_RCC_OscConfig+0x690>)
 8015624:	400a      	ands	r2, r1
 8015626:	651a      	str	r2, [r3, #80]	@ 0x50
 8015628:	4b57      	ldr	r3, [pc, #348]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801562a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801562c:	4b56      	ldr	r3, [pc, #344]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801562e:	495a      	ldr	r1, [pc, #360]	@ (8015798 <HAL_RCC_OscConfig+0x698>)
 8015630:	400a      	ands	r2, r1
 8015632:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	689b      	ldr	r3, [r3, #8]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d015      	beq.n	8015668 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801563c:	f7f9 fc30 	bl	800eea0 <HAL_GetTick>
 8015640:	0003      	movs	r3, r0
 8015642:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015644:	e009      	b.n	801565a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015646:	f7f9 fc2b 	bl	800eea0 <HAL_GetTick>
 801564a:	0002      	movs	r2, r0
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	1ad3      	subs	r3, r2, r3
 8015650:	4a52      	ldr	r2, [pc, #328]	@ (801579c <HAL_RCC_OscConfig+0x69c>)
 8015652:	4293      	cmp	r3, r2
 8015654:	d901      	bls.n	801565a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8015656:	2303      	movs	r3, #3
 8015658:	e11b      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801565a:	4b4b      	ldr	r3, [pc, #300]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801565c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801565e:	2380      	movs	r3, #128	@ 0x80
 8015660:	009b      	lsls	r3, r3, #2
 8015662:	4013      	ands	r3, r2
 8015664:	d0ef      	beq.n	8015646 <HAL_RCC_OscConfig+0x546>
 8015666:	e014      	b.n	8015692 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015668:	f7f9 fc1a 	bl	800eea0 <HAL_GetTick>
 801566c:	0003      	movs	r3, r0
 801566e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015670:	e009      	b.n	8015686 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015672:	f7f9 fc15 	bl	800eea0 <HAL_GetTick>
 8015676:	0002      	movs	r2, r0
 8015678:	697b      	ldr	r3, [r7, #20]
 801567a:	1ad3      	subs	r3, r2, r3
 801567c:	4a47      	ldr	r2, [pc, #284]	@ (801579c <HAL_RCC_OscConfig+0x69c>)
 801567e:	4293      	cmp	r3, r2
 8015680:	d901      	bls.n	8015686 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8015682:	2303      	movs	r3, #3
 8015684:	e105      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015686:	4b40      	ldr	r3, [pc, #256]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015688:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801568a:	2380      	movs	r3, #128	@ 0x80
 801568c:	009b      	lsls	r3, r3, #2
 801568e:	4013      	ands	r3, r2
 8015690:	d1ef      	bne.n	8015672 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015692:	2323      	movs	r3, #35	@ 0x23
 8015694:	18fb      	adds	r3, r7, r3
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	2b01      	cmp	r3, #1
 801569a:	d105      	bne.n	80156a8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801569c:	4b3a      	ldr	r3, [pc, #232]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801569e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80156a0:	4b39      	ldr	r3, [pc, #228]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80156a2:	493f      	ldr	r1, [pc, #252]	@ (80157a0 <HAL_RCC_OscConfig+0x6a0>)
 80156a4:	400a      	ands	r2, r1
 80156a6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	2220      	movs	r2, #32
 80156ae:	4013      	ands	r3, r2
 80156b0:	d049      	beq.n	8015746 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	699b      	ldr	r3, [r3, #24]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d026      	beq.n	8015708 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80156ba:	4b33      	ldr	r3, [pc, #204]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80156bc:	689a      	ldr	r2, [r3, #8]
 80156be:	4b32      	ldr	r3, [pc, #200]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80156c0:	2101      	movs	r1, #1
 80156c2:	430a      	orrs	r2, r1
 80156c4:	609a      	str	r2, [r3, #8]
 80156c6:	4b30      	ldr	r3, [pc, #192]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80156c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80156ca:	4b2f      	ldr	r3, [pc, #188]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80156cc:	2101      	movs	r1, #1
 80156ce:	430a      	orrs	r2, r1
 80156d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80156d2:	4b34      	ldr	r3, [pc, #208]	@ (80157a4 <HAL_RCC_OscConfig+0x6a4>)
 80156d4:	6a1a      	ldr	r2, [r3, #32]
 80156d6:	4b33      	ldr	r3, [pc, #204]	@ (80157a4 <HAL_RCC_OscConfig+0x6a4>)
 80156d8:	2180      	movs	r1, #128	@ 0x80
 80156da:	0189      	lsls	r1, r1, #6
 80156dc:	430a      	orrs	r2, r1
 80156de:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80156e0:	f7f9 fbde 	bl	800eea0 <HAL_GetTick>
 80156e4:	0003      	movs	r3, r0
 80156e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80156e8:	e008      	b.n	80156fc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80156ea:	f7f9 fbd9 	bl	800eea0 <HAL_GetTick>
 80156ee:	0002      	movs	r2, r0
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	1ad3      	subs	r3, r2, r3
 80156f4:	2b02      	cmp	r3, #2
 80156f6:	d901      	bls.n	80156fc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80156f8:	2303      	movs	r3, #3
 80156fa:	e0ca      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80156fc:	4b22      	ldr	r3, [pc, #136]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 80156fe:	689b      	ldr	r3, [r3, #8]
 8015700:	2202      	movs	r2, #2
 8015702:	4013      	ands	r3, r2
 8015704:	d0f1      	beq.n	80156ea <HAL_RCC_OscConfig+0x5ea>
 8015706:	e01e      	b.n	8015746 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8015708:	4b1f      	ldr	r3, [pc, #124]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801570a:	689a      	ldr	r2, [r3, #8]
 801570c:	4b1e      	ldr	r3, [pc, #120]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801570e:	2101      	movs	r1, #1
 8015710:	438a      	bics	r2, r1
 8015712:	609a      	str	r2, [r3, #8]
 8015714:	4b23      	ldr	r3, [pc, #140]	@ (80157a4 <HAL_RCC_OscConfig+0x6a4>)
 8015716:	6a1a      	ldr	r2, [r3, #32]
 8015718:	4b22      	ldr	r3, [pc, #136]	@ (80157a4 <HAL_RCC_OscConfig+0x6a4>)
 801571a:	4923      	ldr	r1, [pc, #140]	@ (80157a8 <HAL_RCC_OscConfig+0x6a8>)
 801571c:	400a      	ands	r2, r1
 801571e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015720:	f7f9 fbbe 	bl	800eea0 <HAL_GetTick>
 8015724:	0003      	movs	r3, r0
 8015726:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015728:	e008      	b.n	801573c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801572a:	f7f9 fbb9 	bl	800eea0 <HAL_GetTick>
 801572e:	0002      	movs	r2, r0
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	1ad3      	subs	r3, r2, r3
 8015734:	2b02      	cmp	r3, #2
 8015736:	d901      	bls.n	801573c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8015738:	2303      	movs	r3, #3
 801573a:	e0aa      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801573c:	4b12      	ldr	r3, [pc, #72]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 801573e:	689b      	ldr	r3, [r3, #8]
 8015740:	2202      	movs	r2, #2
 8015742:	4013      	ands	r3, r2
 8015744:	d1f1      	bne.n	801572a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801574a:	2b00      	cmp	r3, #0
 801574c:	d100      	bne.n	8015750 <HAL_RCC_OscConfig+0x650>
 801574e:	e09f      	b.n	8015890 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	2b0c      	cmp	r3, #12
 8015754:	d100      	bne.n	8015758 <HAL_RCC_OscConfig+0x658>
 8015756:	e078      	b.n	801584a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801575c:	2b02      	cmp	r3, #2
 801575e:	d159      	bne.n	8015814 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015760:	4b09      	ldr	r3, [pc, #36]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015762:	681a      	ldr	r2, [r3, #0]
 8015764:	4b08      	ldr	r3, [pc, #32]	@ (8015788 <HAL_RCC_OscConfig+0x688>)
 8015766:	4911      	ldr	r1, [pc, #68]	@ (80157ac <HAL_RCC_OscConfig+0x6ac>)
 8015768:	400a      	ands	r2, r1
 801576a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801576c:	f7f9 fb98 	bl	800eea0 <HAL_GetTick>
 8015770:	0003      	movs	r3, r0
 8015772:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015774:	e01c      	b.n	80157b0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015776:	f7f9 fb93 	bl	800eea0 <HAL_GetTick>
 801577a:	0002      	movs	r2, r0
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	1ad3      	subs	r3, r2, r3
 8015780:	2b02      	cmp	r3, #2
 8015782:	d915      	bls.n	80157b0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8015784:	2303      	movs	r3, #3
 8015786:	e084      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
 8015788:	40021000 	.word	0x40021000
 801578c:	ffff1fff 	.word	0xffff1fff
 8015790:	fffffeff 	.word	0xfffffeff
 8015794:	40007000 	.word	0x40007000
 8015798:	fffffbff 	.word	0xfffffbff
 801579c:	00001388 	.word	0x00001388
 80157a0:	efffffff 	.word	0xefffffff
 80157a4:	40010000 	.word	0x40010000
 80157a8:	ffffdfff 	.word	0xffffdfff
 80157ac:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80157b0:	4b3a      	ldr	r3, [pc, #232]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 80157b2:	681a      	ldr	r2, [r3, #0]
 80157b4:	2380      	movs	r3, #128	@ 0x80
 80157b6:	049b      	lsls	r3, r3, #18
 80157b8:	4013      	ands	r3, r2
 80157ba:	d1dc      	bne.n	8015776 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80157bc:	4b37      	ldr	r3, [pc, #220]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 80157be:	68db      	ldr	r3, [r3, #12]
 80157c0:	4a37      	ldr	r2, [pc, #220]	@ (80158a0 <HAL_RCC_OscConfig+0x7a0>)
 80157c2:	4013      	ands	r3, r2
 80157c4:	0019      	movs	r1, r3
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157ce:	431a      	orrs	r2, r3
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80157d4:	431a      	orrs	r2, r3
 80157d6:	4b31      	ldr	r3, [pc, #196]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 80157d8:	430a      	orrs	r2, r1
 80157da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80157dc:	4b2f      	ldr	r3, [pc, #188]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 80157de:	681a      	ldr	r2, [r3, #0]
 80157e0:	4b2e      	ldr	r3, [pc, #184]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 80157e2:	2180      	movs	r1, #128	@ 0x80
 80157e4:	0449      	lsls	r1, r1, #17
 80157e6:	430a      	orrs	r2, r1
 80157e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80157ea:	f7f9 fb59 	bl	800eea0 <HAL_GetTick>
 80157ee:	0003      	movs	r3, r0
 80157f0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80157f2:	e008      	b.n	8015806 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80157f4:	f7f9 fb54 	bl	800eea0 <HAL_GetTick>
 80157f8:	0002      	movs	r2, r0
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	1ad3      	subs	r3, r2, r3
 80157fe:	2b02      	cmp	r3, #2
 8015800:	d901      	bls.n	8015806 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8015802:	2303      	movs	r3, #3
 8015804:	e045      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015806:	4b25      	ldr	r3, [pc, #148]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	2380      	movs	r3, #128	@ 0x80
 801580c:	049b      	lsls	r3, r3, #18
 801580e:	4013      	ands	r3, r2
 8015810:	d0f0      	beq.n	80157f4 <HAL_RCC_OscConfig+0x6f4>
 8015812:	e03d      	b.n	8015890 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015814:	4b21      	ldr	r3, [pc, #132]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 8015816:	681a      	ldr	r2, [r3, #0]
 8015818:	4b20      	ldr	r3, [pc, #128]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 801581a:	4922      	ldr	r1, [pc, #136]	@ (80158a4 <HAL_RCC_OscConfig+0x7a4>)
 801581c:	400a      	ands	r2, r1
 801581e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015820:	f7f9 fb3e 	bl	800eea0 <HAL_GetTick>
 8015824:	0003      	movs	r3, r0
 8015826:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015828:	e008      	b.n	801583c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801582a:	f7f9 fb39 	bl	800eea0 <HAL_GetTick>
 801582e:	0002      	movs	r2, r0
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	1ad3      	subs	r3, r2, r3
 8015834:	2b02      	cmp	r3, #2
 8015836:	d901      	bls.n	801583c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8015838:	2303      	movs	r3, #3
 801583a:	e02a      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801583c:	4b17      	ldr	r3, [pc, #92]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 801583e:	681a      	ldr	r2, [r3, #0]
 8015840:	2380      	movs	r3, #128	@ 0x80
 8015842:	049b      	lsls	r3, r3, #18
 8015844:	4013      	ands	r3, r2
 8015846:	d1f0      	bne.n	801582a <HAL_RCC_OscConfig+0x72a>
 8015848:	e022      	b.n	8015890 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801584e:	2b01      	cmp	r3, #1
 8015850:	d101      	bne.n	8015856 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015852:	2301      	movs	r3, #1
 8015854:	e01d      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015856:	4b11      	ldr	r3, [pc, #68]	@ (801589c <HAL_RCC_OscConfig+0x79c>)
 8015858:	68db      	ldr	r3, [r3, #12]
 801585a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801585c:	69ba      	ldr	r2, [r7, #24]
 801585e:	2380      	movs	r3, #128	@ 0x80
 8015860:	025b      	lsls	r3, r3, #9
 8015862:	401a      	ands	r2, r3
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015868:	429a      	cmp	r2, r3
 801586a:	d10f      	bne.n	801588c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801586c:	69ba      	ldr	r2, [r7, #24]
 801586e:	23f0      	movs	r3, #240	@ 0xf0
 8015870:	039b      	lsls	r3, r3, #14
 8015872:	401a      	ands	r2, r3
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015878:	429a      	cmp	r2, r3
 801587a:	d107      	bne.n	801588c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801587c:	69ba      	ldr	r2, [r7, #24]
 801587e:	23c0      	movs	r3, #192	@ 0xc0
 8015880:	041b      	lsls	r3, r3, #16
 8015882:	401a      	ands	r2, r3
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015888:	429a      	cmp	r2, r3
 801588a:	d001      	beq.n	8015890 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801588c:	2301      	movs	r3, #1
 801588e:	e000      	b.n	8015892 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8015890:	2300      	movs	r3, #0
}
 8015892:	0018      	movs	r0, r3
 8015894:	46bd      	mov	sp, r7
 8015896:	b00a      	add	sp, #40	@ 0x28
 8015898:	bdb0      	pop	{r4, r5, r7, pc}
 801589a:	46c0      	nop			@ (mov r8, r8)
 801589c:	40021000 	.word	0x40021000
 80158a0:	ff02ffff 	.word	0xff02ffff
 80158a4:	feffffff 	.word	0xfeffffff

080158a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80158a8:	b5b0      	push	{r4, r5, r7, lr}
 80158aa:	b084      	sub	sp, #16
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
 80158b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d101      	bne.n	80158bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80158b8:	2301      	movs	r3, #1
 80158ba:	e128      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80158bc:	4b96      	ldr	r3, [pc, #600]	@ (8015b18 <HAL_RCC_ClockConfig+0x270>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2201      	movs	r2, #1
 80158c2:	4013      	ands	r3, r2
 80158c4:	683a      	ldr	r2, [r7, #0]
 80158c6:	429a      	cmp	r2, r3
 80158c8:	d91e      	bls.n	8015908 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80158ca:	4b93      	ldr	r3, [pc, #588]	@ (8015b18 <HAL_RCC_ClockConfig+0x270>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	2201      	movs	r2, #1
 80158d0:	4393      	bics	r3, r2
 80158d2:	0019      	movs	r1, r3
 80158d4:	4b90      	ldr	r3, [pc, #576]	@ (8015b18 <HAL_RCC_ClockConfig+0x270>)
 80158d6:	683a      	ldr	r2, [r7, #0]
 80158d8:	430a      	orrs	r2, r1
 80158da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80158dc:	f7f9 fae0 	bl	800eea0 <HAL_GetTick>
 80158e0:	0003      	movs	r3, r0
 80158e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80158e4:	e009      	b.n	80158fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80158e6:	f7f9 fadb 	bl	800eea0 <HAL_GetTick>
 80158ea:	0002      	movs	r2, r0
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	1ad3      	subs	r3, r2, r3
 80158f0:	4a8a      	ldr	r2, [pc, #552]	@ (8015b1c <HAL_RCC_ClockConfig+0x274>)
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d901      	bls.n	80158fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80158f6:	2303      	movs	r3, #3
 80158f8:	e109      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80158fa:	4b87      	ldr	r3, [pc, #540]	@ (8015b18 <HAL_RCC_ClockConfig+0x270>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	2201      	movs	r2, #1
 8015900:	4013      	ands	r3, r2
 8015902:	683a      	ldr	r2, [r7, #0]
 8015904:	429a      	cmp	r2, r3
 8015906:	d1ee      	bne.n	80158e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2202      	movs	r2, #2
 801590e:	4013      	ands	r3, r2
 8015910:	d009      	beq.n	8015926 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015912:	4b83      	ldr	r3, [pc, #524]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015914:	68db      	ldr	r3, [r3, #12]
 8015916:	22f0      	movs	r2, #240	@ 0xf0
 8015918:	4393      	bics	r3, r2
 801591a:	0019      	movs	r1, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	689a      	ldr	r2, [r3, #8]
 8015920:	4b7f      	ldr	r3, [pc, #508]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015922:	430a      	orrs	r2, r1
 8015924:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	2201      	movs	r2, #1
 801592c:	4013      	ands	r3, r2
 801592e:	d100      	bne.n	8015932 <HAL_RCC_ClockConfig+0x8a>
 8015930:	e089      	b.n	8015a46 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	2b02      	cmp	r3, #2
 8015938:	d107      	bne.n	801594a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801593a:	4b79      	ldr	r3, [pc, #484]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 801593c:	681a      	ldr	r2, [r3, #0]
 801593e:	2380      	movs	r3, #128	@ 0x80
 8015940:	029b      	lsls	r3, r3, #10
 8015942:	4013      	ands	r3, r2
 8015944:	d120      	bne.n	8015988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015946:	2301      	movs	r3, #1
 8015948:	e0e1      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	685b      	ldr	r3, [r3, #4]
 801594e:	2b03      	cmp	r3, #3
 8015950:	d107      	bne.n	8015962 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015952:	4b73      	ldr	r3, [pc, #460]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015954:	681a      	ldr	r2, [r3, #0]
 8015956:	2380      	movs	r3, #128	@ 0x80
 8015958:	049b      	lsls	r3, r3, #18
 801595a:	4013      	ands	r3, r2
 801595c:	d114      	bne.n	8015988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801595e:	2301      	movs	r3, #1
 8015960:	e0d5      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	685b      	ldr	r3, [r3, #4]
 8015966:	2b01      	cmp	r3, #1
 8015968:	d106      	bne.n	8015978 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801596a:	4b6d      	ldr	r3, [pc, #436]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2204      	movs	r2, #4
 8015970:	4013      	ands	r3, r2
 8015972:	d109      	bne.n	8015988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015974:	2301      	movs	r3, #1
 8015976:	e0ca      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015978:	4b69      	ldr	r3, [pc, #420]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 801597a:	681a      	ldr	r2, [r3, #0]
 801597c:	2380      	movs	r3, #128	@ 0x80
 801597e:	009b      	lsls	r3, r3, #2
 8015980:	4013      	ands	r3, r2
 8015982:	d101      	bne.n	8015988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015984:	2301      	movs	r3, #1
 8015986:	e0c2      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015988:	4b65      	ldr	r3, [pc, #404]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	2203      	movs	r2, #3
 801598e:	4393      	bics	r3, r2
 8015990:	0019      	movs	r1, r3
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	685a      	ldr	r2, [r3, #4]
 8015996:	4b62      	ldr	r3, [pc, #392]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015998:	430a      	orrs	r2, r1
 801599a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801599c:	f7f9 fa80 	bl	800eea0 <HAL_GetTick>
 80159a0:	0003      	movs	r3, r0
 80159a2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	2b02      	cmp	r3, #2
 80159aa:	d111      	bne.n	80159d0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80159ac:	e009      	b.n	80159c2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80159ae:	f7f9 fa77 	bl	800eea0 <HAL_GetTick>
 80159b2:	0002      	movs	r2, r0
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	1ad3      	subs	r3, r2, r3
 80159b8:	4a58      	ldr	r2, [pc, #352]	@ (8015b1c <HAL_RCC_ClockConfig+0x274>)
 80159ba:	4293      	cmp	r3, r2
 80159bc:	d901      	bls.n	80159c2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80159be:	2303      	movs	r3, #3
 80159c0:	e0a5      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80159c2:	4b57      	ldr	r3, [pc, #348]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 80159c4:	68db      	ldr	r3, [r3, #12]
 80159c6:	220c      	movs	r2, #12
 80159c8:	4013      	ands	r3, r2
 80159ca:	2b08      	cmp	r3, #8
 80159cc:	d1ef      	bne.n	80159ae <HAL_RCC_ClockConfig+0x106>
 80159ce:	e03a      	b.n	8015a46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	2b03      	cmp	r3, #3
 80159d6:	d111      	bne.n	80159fc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80159d8:	e009      	b.n	80159ee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80159da:	f7f9 fa61 	bl	800eea0 <HAL_GetTick>
 80159de:	0002      	movs	r2, r0
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	4a4d      	ldr	r2, [pc, #308]	@ (8015b1c <HAL_RCC_ClockConfig+0x274>)
 80159e6:	4293      	cmp	r3, r2
 80159e8:	d901      	bls.n	80159ee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80159ea:	2303      	movs	r3, #3
 80159ec:	e08f      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80159ee:	4b4c      	ldr	r3, [pc, #304]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 80159f0:	68db      	ldr	r3, [r3, #12]
 80159f2:	220c      	movs	r2, #12
 80159f4:	4013      	ands	r3, r2
 80159f6:	2b0c      	cmp	r3, #12
 80159f8:	d1ef      	bne.n	80159da <HAL_RCC_ClockConfig+0x132>
 80159fa:	e024      	b.n	8015a46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	d11b      	bne.n	8015a3c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015a04:	e009      	b.n	8015a1a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a06:	f7f9 fa4b 	bl	800eea0 <HAL_GetTick>
 8015a0a:	0002      	movs	r2, r0
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	1ad3      	subs	r3, r2, r3
 8015a10:	4a42      	ldr	r2, [pc, #264]	@ (8015b1c <HAL_RCC_ClockConfig+0x274>)
 8015a12:	4293      	cmp	r3, r2
 8015a14:	d901      	bls.n	8015a1a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8015a16:	2303      	movs	r3, #3
 8015a18:	e079      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015a1a:	4b41      	ldr	r3, [pc, #260]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015a1c:	68db      	ldr	r3, [r3, #12]
 8015a1e:	220c      	movs	r2, #12
 8015a20:	4013      	ands	r3, r2
 8015a22:	2b04      	cmp	r3, #4
 8015a24:	d1ef      	bne.n	8015a06 <HAL_RCC_ClockConfig+0x15e>
 8015a26:	e00e      	b.n	8015a46 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a28:	f7f9 fa3a 	bl	800eea0 <HAL_GetTick>
 8015a2c:	0002      	movs	r2, r0
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	1ad3      	subs	r3, r2, r3
 8015a32:	4a3a      	ldr	r2, [pc, #232]	@ (8015b1c <HAL_RCC_ClockConfig+0x274>)
 8015a34:	4293      	cmp	r3, r2
 8015a36:	d901      	bls.n	8015a3c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015a38:	2303      	movs	r3, #3
 8015a3a:	e068      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8015a3c:	4b38      	ldr	r3, [pc, #224]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015a3e:	68db      	ldr	r3, [r3, #12]
 8015a40:	220c      	movs	r2, #12
 8015a42:	4013      	ands	r3, r2
 8015a44:	d1f0      	bne.n	8015a28 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015a46:	4b34      	ldr	r3, [pc, #208]	@ (8015b18 <HAL_RCC_ClockConfig+0x270>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	2201      	movs	r2, #1
 8015a4c:	4013      	ands	r3, r2
 8015a4e:	683a      	ldr	r2, [r7, #0]
 8015a50:	429a      	cmp	r2, r3
 8015a52:	d21e      	bcs.n	8015a92 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015a54:	4b30      	ldr	r3, [pc, #192]	@ (8015b18 <HAL_RCC_ClockConfig+0x270>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	2201      	movs	r2, #1
 8015a5a:	4393      	bics	r3, r2
 8015a5c:	0019      	movs	r1, r3
 8015a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8015b18 <HAL_RCC_ClockConfig+0x270>)
 8015a60:	683a      	ldr	r2, [r7, #0]
 8015a62:	430a      	orrs	r2, r1
 8015a64:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015a66:	f7f9 fa1b 	bl	800eea0 <HAL_GetTick>
 8015a6a:	0003      	movs	r3, r0
 8015a6c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015a6e:	e009      	b.n	8015a84 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a70:	f7f9 fa16 	bl	800eea0 <HAL_GetTick>
 8015a74:	0002      	movs	r2, r0
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	1ad3      	subs	r3, r2, r3
 8015a7a:	4a28      	ldr	r2, [pc, #160]	@ (8015b1c <HAL_RCC_ClockConfig+0x274>)
 8015a7c:	4293      	cmp	r3, r2
 8015a7e:	d901      	bls.n	8015a84 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015a80:	2303      	movs	r3, #3
 8015a82:	e044      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015a84:	4b24      	ldr	r3, [pc, #144]	@ (8015b18 <HAL_RCC_ClockConfig+0x270>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	2201      	movs	r2, #1
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	683a      	ldr	r2, [r7, #0]
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d1ee      	bne.n	8015a70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	2204      	movs	r2, #4
 8015a98:	4013      	ands	r3, r2
 8015a9a:	d009      	beq.n	8015ab0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015a9c:	4b20      	ldr	r3, [pc, #128]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015a9e:	68db      	ldr	r3, [r3, #12]
 8015aa0:	4a20      	ldr	r2, [pc, #128]	@ (8015b24 <HAL_RCC_ClockConfig+0x27c>)
 8015aa2:	4013      	ands	r3, r2
 8015aa4:	0019      	movs	r1, r3
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	68da      	ldr	r2, [r3, #12]
 8015aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015aac:	430a      	orrs	r2, r1
 8015aae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	2208      	movs	r2, #8
 8015ab6:	4013      	ands	r3, r2
 8015ab8:	d00a      	beq.n	8015ad0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8015aba:	4b19      	ldr	r3, [pc, #100]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015abc:	68db      	ldr	r3, [r3, #12]
 8015abe:	4a1a      	ldr	r2, [pc, #104]	@ (8015b28 <HAL_RCC_ClockConfig+0x280>)
 8015ac0:	4013      	ands	r3, r2
 8015ac2:	0019      	movs	r1, r3
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	691b      	ldr	r3, [r3, #16]
 8015ac8:	00da      	lsls	r2, r3, #3
 8015aca:	4b15      	ldr	r3, [pc, #84]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015acc:	430a      	orrs	r2, r1
 8015ace:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015ad0:	f000 f832 	bl	8015b38 <HAL_RCC_GetSysClockFreq>
 8015ad4:	0001      	movs	r1, r0
 8015ad6:	4b12      	ldr	r3, [pc, #72]	@ (8015b20 <HAL_RCC_ClockConfig+0x278>)
 8015ad8:	68db      	ldr	r3, [r3, #12]
 8015ada:	091b      	lsrs	r3, r3, #4
 8015adc:	220f      	movs	r2, #15
 8015ade:	4013      	ands	r3, r2
 8015ae0:	4a12      	ldr	r2, [pc, #72]	@ (8015b2c <HAL_RCC_ClockConfig+0x284>)
 8015ae2:	5cd3      	ldrb	r3, [r2, r3]
 8015ae4:	000a      	movs	r2, r1
 8015ae6:	40da      	lsrs	r2, r3
 8015ae8:	4b11      	ldr	r3, [pc, #68]	@ (8015b30 <HAL_RCC_ClockConfig+0x288>)
 8015aea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015aec:	4b11      	ldr	r3, [pc, #68]	@ (8015b34 <HAL_RCC_ClockConfig+0x28c>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	250b      	movs	r5, #11
 8015af2:	197c      	adds	r4, r7, r5
 8015af4:	0018      	movs	r0, r3
 8015af6:	f7f9 f98d 	bl	800ee14 <HAL_InitTick>
 8015afa:	0003      	movs	r3, r0
 8015afc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8015afe:	197b      	adds	r3, r7, r5
 8015b00:	781b      	ldrb	r3, [r3, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d002      	beq.n	8015b0c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8015b06:	197b      	adds	r3, r7, r5
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	e000      	b.n	8015b0e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8015b0c:	2300      	movs	r3, #0
}
 8015b0e:	0018      	movs	r0, r3
 8015b10:	46bd      	mov	sp, r7
 8015b12:	b004      	add	sp, #16
 8015b14:	bdb0      	pop	{r4, r5, r7, pc}
 8015b16:	46c0      	nop			@ (mov r8, r8)
 8015b18:	40022000 	.word	0x40022000
 8015b1c:	00001388 	.word	0x00001388
 8015b20:	40021000 	.word	0x40021000
 8015b24:	fffff8ff 	.word	0xfffff8ff
 8015b28:	ffffc7ff 	.word	0xffffc7ff
 8015b2c:	080257dc 	.word	0x080257dc
 8015b30:	200000d0 	.word	0x200000d0
 8015b34:	200000e0 	.word	0x200000e0

08015b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015b38:	b5b0      	push	{r4, r5, r7, lr}
 8015b3a:	b08e      	sub	sp, #56	@ 0x38
 8015b3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8015b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8015c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8015b40:	68db      	ldr	r3, [r3, #12]
 8015b42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015b46:	230c      	movs	r3, #12
 8015b48:	4013      	ands	r3, r2
 8015b4a:	2b0c      	cmp	r3, #12
 8015b4c:	d014      	beq.n	8015b78 <HAL_RCC_GetSysClockFreq+0x40>
 8015b4e:	d900      	bls.n	8015b52 <HAL_RCC_GetSysClockFreq+0x1a>
 8015b50:	e07b      	b.n	8015c4a <HAL_RCC_GetSysClockFreq+0x112>
 8015b52:	2b04      	cmp	r3, #4
 8015b54:	d002      	beq.n	8015b5c <HAL_RCC_GetSysClockFreq+0x24>
 8015b56:	2b08      	cmp	r3, #8
 8015b58:	d00b      	beq.n	8015b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8015b5a:	e076      	b.n	8015c4a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015b5c:	4b44      	ldr	r3, [pc, #272]	@ (8015c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	2210      	movs	r2, #16
 8015b62:	4013      	ands	r3, r2
 8015b64:	d002      	beq.n	8015b6c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015b66:	4b43      	ldr	r3, [pc, #268]	@ (8015c74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015b68:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8015b6a:	e07c      	b.n	8015c66 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015b6c:	4b42      	ldr	r3, [pc, #264]	@ (8015c78 <HAL_RCC_GetSysClockFreq+0x140>)
 8015b6e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015b70:	e079      	b.n	8015c66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015b72:	4b42      	ldr	r3, [pc, #264]	@ (8015c7c <HAL_RCC_GetSysClockFreq+0x144>)
 8015b74:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015b76:	e076      	b.n	8015c66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b7a:	0c9a      	lsrs	r2, r3, #18
 8015b7c:	230f      	movs	r3, #15
 8015b7e:	401a      	ands	r2, r3
 8015b80:	4b3f      	ldr	r3, [pc, #252]	@ (8015c80 <HAL_RCC_GetSysClockFreq+0x148>)
 8015b82:	5c9b      	ldrb	r3, [r3, r2]
 8015b84:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b88:	0d9a      	lsrs	r2, r3, #22
 8015b8a:	2303      	movs	r3, #3
 8015b8c:	4013      	ands	r3, r2
 8015b8e:	3301      	adds	r3, #1
 8015b90:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015b92:	4b37      	ldr	r3, [pc, #220]	@ (8015c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8015b94:	68da      	ldr	r2, [r3, #12]
 8015b96:	2380      	movs	r3, #128	@ 0x80
 8015b98:	025b      	lsls	r3, r3, #9
 8015b9a:	4013      	ands	r3, r2
 8015b9c:	d01a      	beq.n	8015bd4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ba0:	61bb      	str	r3, [r7, #24]
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	61fb      	str	r3, [r7, #28]
 8015ba6:	4a35      	ldr	r2, [pc, #212]	@ (8015c7c <HAL_RCC_GetSysClockFreq+0x144>)
 8015ba8:	2300      	movs	r3, #0
 8015baa:	69b8      	ldr	r0, [r7, #24]
 8015bac:	69f9      	ldr	r1, [r7, #28]
 8015bae:	f7ea fd07 	bl	80005c0 <__aeabi_lmul>
 8015bb2:	0002      	movs	r2, r0
 8015bb4:	000b      	movs	r3, r1
 8015bb6:	0010      	movs	r0, r2
 8015bb8:	0019      	movs	r1, r3
 8015bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bbc:	613b      	str	r3, [r7, #16]
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	617b      	str	r3, [r7, #20]
 8015bc2:	693a      	ldr	r2, [r7, #16]
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	f7ea fcdb 	bl	8000580 <__aeabi_uldivmod>
 8015bca:	0002      	movs	r2, r0
 8015bcc:	000b      	movs	r3, r1
 8015bce:	0013      	movs	r3, r2
 8015bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8015bd2:	e037      	b.n	8015c44 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015bd4:	4b26      	ldr	r3, [pc, #152]	@ (8015c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	2210      	movs	r2, #16
 8015bda:	4013      	ands	r3, r2
 8015bdc:	d01a      	beq.n	8015c14 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8015bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015be0:	60bb      	str	r3, [r7, #8]
 8015be2:	2300      	movs	r3, #0
 8015be4:	60fb      	str	r3, [r7, #12]
 8015be6:	4a23      	ldr	r2, [pc, #140]	@ (8015c74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015be8:	2300      	movs	r3, #0
 8015bea:	68b8      	ldr	r0, [r7, #8]
 8015bec:	68f9      	ldr	r1, [r7, #12]
 8015bee:	f7ea fce7 	bl	80005c0 <__aeabi_lmul>
 8015bf2:	0002      	movs	r2, r0
 8015bf4:	000b      	movs	r3, r1
 8015bf6:	0010      	movs	r0, r2
 8015bf8:	0019      	movs	r1, r3
 8015bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bfc:	603b      	str	r3, [r7, #0]
 8015bfe:	2300      	movs	r3, #0
 8015c00:	607b      	str	r3, [r7, #4]
 8015c02:	683a      	ldr	r2, [r7, #0]
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f7ea fcbb 	bl	8000580 <__aeabi_uldivmod>
 8015c0a:	0002      	movs	r2, r0
 8015c0c:	000b      	movs	r3, r1
 8015c0e:	0013      	movs	r3, r2
 8015c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8015c12:	e017      	b.n	8015c44 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c16:	0018      	movs	r0, r3
 8015c18:	2300      	movs	r3, #0
 8015c1a:	0019      	movs	r1, r3
 8015c1c:	4a16      	ldr	r2, [pc, #88]	@ (8015c78 <HAL_RCC_GetSysClockFreq+0x140>)
 8015c1e:	2300      	movs	r3, #0
 8015c20:	f7ea fcce 	bl	80005c0 <__aeabi_lmul>
 8015c24:	0002      	movs	r2, r0
 8015c26:	000b      	movs	r3, r1
 8015c28:	0010      	movs	r0, r2
 8015c2a:	0019      	movs	r1, r3
 8015c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c2e:	001c      	movs	r4, r3
 8015c30:	2300      	movs	r3, #0
 8015c32:	001d      	movs	r5, r3
 8015c34:	0022      	movs	r2, r4
 8015c36:	002b      	movs	r3, r5
 8015c38:	f7ea fca2 	bl	8000580 <__aeabi_uldivmod>
 8015c3c:	0002      	movs	r2, r0
 8015c3e:	000b      	movs	r3, r1
 8015c40:	0013      	movs	r3, r2
 8015c42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c46:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015c48:	e00d      	b.n	8015c66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015c4a:	4b09      	ldr	r3, [pc, #36]	@ (8015c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8015c4c:	685b      	ldr	r3, [r3, #4]
 8015c4e:	0b5b      	lsrs	r3, r3, #13
 8015c50:	2207      	movs	r2, #7
 8015c52:	4013      	ands	r3, r2
 8015c54:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015c56:	6a3b      	ldr	r3, [r7, #32]
 8015c58:	3301      	adds	r3, #1
 8015c5a:	2280      	movs	r2, #128	@ 0x80
 8015c5c:	0212      	lsls	r2, r2, #8
 8015c5e:	409a      	lsls	r2, r3
 8015c60:	0013      	movs	r3, r2
 8015c62:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015c64:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015c68:	0018      	movs	r0, r3
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	b00e      	add	sp, #56	@ 0x38
 8015c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8015c70:	40021000 	.word	0x40021000
 8015c74:	003d0900 	.word	0x003d0900
 8015c78:	00f42400 	.word	0x00f42400
 8015c7c:	007a1200 	.word	0x007a1200
 8015c80:	080257f4 	.word	0x080257f4

08015c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015c88:	4b02      	ldr	r3, [pc, #8]	@ (8015c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8015c8a:	681b      	ldr	r3, [r3, #0]
}
 8015c8c:	0018      	movs	r0, r3
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}
 8015c92:	46c0      	nop			@ (mov r8, r8)
 8015c94:	200000d0 	.word	0x200000d0

08015c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015c9c:	f7ff fff2 	bl	8015c84 <HAL_RCC_GetHCLKFreq>
 8015ca0:	0001      	movs	r1, r0
 8015ca2:	4b06      	ldr	r3, [pc, #24]	@ (8015cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8015ca4:	68db      	ldr	r3, [r3, #12]
 8015ca6:	0a1b      	lsrs	r3, r3, #8
 8015ca8:	2207      	movs	r2, #7
 8015caa:	4013      	ands	r3, r2
 8015cac:	4a04      	ldr	r2, [pc, #16]	@ (8015cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015cae:	5cd3      	ldrb	r3, [r2, r3]
 8015cb0:	40d9      	lsrs	r1, r3
 8015cb2:	000b      	movs	r3, r1
}
 8015cb4:	0018      	movs	r0, r3
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	46c0      	nop			@ (mov r8, r8)
 8015cbc:	40021000 	.word	0x40021000
 8015cc0:	080257ec 	.word	0x080257ec

08015cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015cc8:	f7ff ffdc 	bl	8015c84 <HAL_RCC_GetHCLKFreq>
 8015ccc:	0001      	movs	r1, r0
 8015cce:	4b06      	ldr	r3, [pc, #24]	@ (8015ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015cd0:	68db      	ldr	r3, [r3, #12]
 8015cd2:	0adb      	lsrs	r3, r3, #11
 8015cd4:	2207      	movs	r2, #7
 8015cd6:	4013      	ands	r3, r2
 8015cd8:	4a04      	ldr	r2, [pc, #16]	@ (8015cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8015cda:	5cd3      	ldrb	r3, [r2, r3]
 8015cdc:	40d9      	lsrs	r1, r3
 8015cde:	000b      	movs	r3, r1
}
 8015ce0:	0018      	movs	r0, r3
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}
 8015ce6:	46c0      	nop			@ (mov r8, r8)
 8015ce8:	40021000 	.word	0x40021000
 8015cec:	080257ec 	.word	0x080257ec

08015cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b086      	sub	sp, #24
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015cf8:	2017      	movs	r0, #23
 8015cfa:	183b      	adds	r3, r7, r0
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	2220      	movs	r2, #32
 8015d06:	4013      	ands	r3, r2
 8015d08:	d100      	bne.n	8015d0c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015d0a:	e0c7      	b.n	8015e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015d0c:	4b9b      	ldr	r3, [pc, #620]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d10:	2380      	movs	r3, #128	@ 0x80
 8015d12:	055b      	lsls	r3, r3, #21
 8015d14:	4013      	ands	r3, r2
 8015d16:	d109      	bne.n	8015d2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015d18:	4b98      	ldr	r3, [pc, #608]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d1c:	4b97      	ldr	r3, [pc, #604]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d1e:	2180      	movs	r1, #128	@ 0x80
 8015d20:	0549      	lsls	r1, r1, #21
 8015d22:	430a      	orrs	r2, r1
 8015d24:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015d26:	183b      	adds	r3, r7, r0
 8015d28:	2201      	movs	r2, #1
 8015d2a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015d2c:	4b94      	ldr	r3, [pc, #592]	@ (8015f80 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d2e:	681a      	ldr	r2, [r3, #0]
 8015d30:	2380      	movs	r3, #128	@ 0x80
 8015d32:	005b      	lsls	r3, r3, #1
 8015d34:	4013      	ands	r3, r2
 8015d36:	d11a      	bne.n	8015d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015d38:	4b91      	ldr	r3, [pc, #580]	@ (8015f80 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d3a:	681a      	ldr	r2, [r3, #0]
 8015d3c:	4b90      	ldr	r3, [pc, #576]	@ (8015f80 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d3e:	2180      	movs	r1, #128	@ 0x80
 8015d40:	0049      	lsls	r1, r1, #1
 8015d42:	430a      	orrs	r2, r1
 8015d44:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015d46:	f7f9 f8ab 	bl	800eea0 <HAL_GetTick>
 8015d4a:	0003      	movs	r3, r0
 8015d4c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015d4e:	e008      	b.n	8015d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015d50:	f7f9 f8a6 	bl	800eea0 <HAL_GetTick>
 8015d54:	0002      	movs	r2, r0
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	1ad3      	subs	r3, r2, r3
 8015d5a:	2b64      	cmp	r3, #100	@ 0x64
 8015d5c:	d901      	bls.n	8015d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8015d5e:	2303      	movs	r3, #3
 8015d60:	e107      	b.n	8015f72 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015d62:	4b87      	ldr	r3, [pc, #540]	@ (8015f80 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d64:	681a      	ldr	r2, [r3, #0]
 8015d66:	2380      	movs	r3, #128	@ 0x80
 8015d68:	005b      	lsls	r3, r3, #1
 8015d6a:	4013      	ands	r3, r2
 8015d6c:	d0f0      	beq.n	8015d50 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8015d6e:	4b83      	ldr	r3, [pc, #524]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d70:	681a      	ldr	r2, [r3, #0]
 8015d72:	23c0      	movs	r3, #192	@ 0xc0
 8015d74:	039b      	lsls	r3, r3, #14
 8015d76:	4013      	ands	r3, r2
 8015d78:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	685a      	ldr	r2, [r3, #4]
 8015d7e:	23c0      	movs	r3, #192	@ 0xc0
 8015d80:	039b      	lsls	r3, r3, #14
 8015d82:	4013      	ands	r3, r2
 8015d84:	68fa      	ldr	r2, [r7, #12]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d013      	beq.n	8015db2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	685a      	ldr	r2, [r3, #4]
 8015d8e:	23c0      	movs	r3, #192	@ 0xc0
 8015d90:	029b      	lsls	r3, r3, #10
 8015d92:	401a      	ands	r2, r3
 8015d94:	23c0      	movs	r3, #192	@ 0xc0
 8015d96:	029b      	lsls	r3, r3, #10
 8015d98:	429a      	cmp	r2, r3
 8015d9a:	d10a      	bne.n	8015db2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015d9c:	4b77      	ldr	r3, [pc, #476]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d9e:	681a      	ldr	r2, [r3, #0]
 8015da0:	2380      	movs	r3, #128	@ 0x80
 8015da2:	029b      	lsls	r3, r3, #10
 8015da4:	401a      	ands	r2, r3
 8015da6:	2380      	movs	r3, #128	@ 0x80
 8015da8:	029b      	lsls	r3, r3, #10
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d101      	bne.n	8015db2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8015dae:	2301      	movs	r3, #1
 8015db0:	e0df      	b.n	8015f72 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015db2:	4b72      	ldr	r3, [pc, #456]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015db4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015db6:	23c0      	movs	r3, #192	@ 0xc0
 8015db8:	029b      	lsls	r3, r3, #10
 8015dba:	4013      	ands	r3, r2
 8015dbc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d03b      	beq.n	8015e3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	685a      	ldr	r2, [r3, #4]
 8015dc8:	23c0      	movs	r3, #192	@ 0xc0
 8015dca:	029b      	lsls	r3, r3, #10
 8015dcc:	4013      	ands	r3, r2
 8015dce:	68fa      	ldr	r2, [r7, #12]
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d033      	beq.n	8015e3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	2220      	movs	r2, #32
 8015dda:	4013      	ands	r3, r2
 8015ddc:	d02e      	beq.n	8015e3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8015dde:	4b67      	ldr	r3, [pc, #412]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015de2:	4a68      	ldr	r2, [pc, #416]	@ (8015f84 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015de4:	4013      	ands	r3, r2
 8015de6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015de8:	4b64      	ldr	r3, [pc, #400]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015dec:	4b63      	ldr	r3, [pc, #396]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015dee:	2180      	movs	r1, #128	@ 0x80
 8015df0:	0309      	lsls	r1, r1, #12
 8015df2:	430a      	orrs	r2, r1
 8015df4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015df6:	4b61      	ldr	r3, [pc, #388]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015df8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015dfa:	4b60      	ldr	r3, [pc, #384]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015dfc:	4962      	ldr	r1, [pc, #392]	@ (8015f88 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015dfe:	400a      	ands	r2, r1
 8015e00:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8015e02:	4b5e      	ldr	r3, [pc, #376]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e04:	68fa      	ldr	r2, [r7, #12]
 8015e06:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015e08:	68fa      	ldr	r2, [r7, #12]
 8015e0a:	2380      	movs	r3, #128	@ 0x80
 8015e0c:	005b      	lsls	r3, r3, #1
 8015e0e:	4013      	ands	r3, r2
 8015e10:	d014      	beq.n	8015e3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015e12:	f7f9 f845 	bl	800eea0 <HAL_GetTick>
 8015e16:	0003      	movs	r3, r0
 8015e18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015e1a:	e009      	b.n	8015e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015e1c:	f7f9 f840 	bl	800eea0 <HAL_GetTick>
 8015e20:	0002      	movs	r2, r0
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	1ad3      	subs	r3, r2, r3
 8015e26:	4a59      	ldr	r2, [pc, #356]	@ (8015f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d901      	bls.n	8015e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015e2c:	2303      	movs	r3, #3
 8015e2e:	e0a0      	b.n	8015f72 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015e30:	4b52      	ldr	r3, [pc, #328]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e34:	2380      	movs	r3, #128	@ 0x80
 8015e36:	009b      	lsls	r3, r3, #2
 8015e38:	4013      	ands	r3, r2
 8015e3a:	d0ef      	beq.n	8015e1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2220      	movs	r2, #32
 8015e42:	4013      	ands	r3, r2
 8015e44:	d01f      	beq.n	8015e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	685a      	ldr	r2, [r3, #4]
 8015e4a:	23c0      	movs	r3, #192	@ 0xc0
 8015e4c:	029b      	lsls	r3, r3, #10
 8015e4e:	401a      	ands	r2, r3
 8015e50:	23c0      	movs	r3, #192	@ 0xc0
 8015e52:	029b      	lsls	r3, r3, #10
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d10c      	bne.n	8015e72 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015e58:	4b48      	ldr	r3, [pc, #288]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8015f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015e5e:	4013      	ands	r3, r2
 8015e60:	0019      	movs	r1, r3
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	685a      	ldr	r2, [r3, #4]
 8015e66:	23c0      	movs	r3, #192	@ 0xc0
 8015e68:	039b      	lsls	r3, r3, #14
 8015e6a:	401a      	ands	r2, r3
 8015e6c:	4b43      	ldr	r3, [pc, #268]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e6e:	430a      	orrs	r2, r1
 8015e70:	601a      	str	r2, [r3, #0]
 8015e72:	4b42      	ldr	r3, [pc, #264]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	685a      	ldr	r2, [r3, #4]
 8015e7a:	23c0      	movs	r3, #192	@ 0xc0
 8015e7c:	029b      	lsls	r3, r3, #10
 8015e7e:	401a      	ands	r2, r3
 8015e80:	4b3e      	ldr	r3, [pc, #248]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e82:	430a      	orrs	r2, r1
 8015e84:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015e86:	2317      	movs	r3, #23
 8015e88:	18fb      	adds	r3, r7, r3
 8015e8a:	781b      	ldrb	r3, [r3, #0]
 8015e8c:	2b01      	cmp	r3, #1
 8015e8e:	d105      	bne.n	8015e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015e90:	4b3a      	ldr	r3, [pc, #232]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015e94:	4b39      	ldr	r3, [pc, #228]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e96:	493f      	ldr	r1, [pc, #252]	@ (8015f94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015e98:	400a      	ands	r2, r1
 8015e9a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	2201      	movs	r2, #1
 8015ea2:	4013      	ands	r3, r2
 8015ea4:	d009      	beq.n	8015eba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015ea6:	4b35      	ldr	r3, [pc, #212]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015eaa:	2203      	movs	r2, #3
 8015eac:	4393      	bics	r3, r2
 8015eae:	0019      	movs	r1, r3
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	689a      	ldr	r2, [r3, #8]
 8015eb4:	4b31      	ldr	r3, [pc, #196]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015eb6:	430a      	orrs	r2, r1
 8015eb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	2202      	movs	r2, #2
 8015ec0:	4013      	ands	r3, r2
 8015ec2:	d009      	beq.n	8015ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ec8:	220c      	movs	r2, #12
 8015eca:	4393      	bics	r3, r2
 8015ecc:	0019      	movs	r1, r3
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	68da      	ldr	r2, [r3, #12]
 8015ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ed4:	430a      	orrs	r2, r1
 8015ed6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2204      	movs	r2, #4
 8015ede:	4013      	ands	r3, r2
 8015ee0:	d009      	beq.n	8015ef6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015ee2:	4b26      	ldr	r3, [pc, #152]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8015f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015ee8:	4013      	ands	r3, r2
 8015eea:	0019      	movs	r1, r3
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	691a      	ldr	r2, [r3, #16]
 8015ef0:	4b22      	ldr	r3, [pc, #136]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ef2:	430a      	orrs	r2, r1
 8015ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	2208      	movs	r2, #8
 8015efc:	4013      	ands	r3, r2
 8015efe:	d009      	beq.n	8015f14 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015f00:	4b1e      	ldr	r3, [pc, #120]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f04:	4a25      	ldr	r2, [pc, #148]	@ (8015f9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015f06:	4013      	ands	r3, r2
 8015f08:	0019      	movs	r1, r3
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	695a      	ldr	r2, [r3, #20]
 8015f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f10:	430a      	orrs	r2, r1
 8015f12:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681a      	ldr	r2, [r3, #0]
 8015f18:	2380      	movs	r3, #128	@ 0x80
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	4013      	ands	r3, r2
 8015f1e:	d009      	beq.n	8015f34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015f20:	4b16      	ldr	r3, [pc, #88]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f24:	4a17      	ldr	r2, [pc, #92]	@ (8015f84 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015f26:	4013      	ands	r3, r2
 8015f28:	0019      	movs	r1, r3
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	699a      	ldr	r2, [r3, #24]
 8015f2e:	4b13      	ldr	r3, [pc, #76]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f30:	430a      	orrs	r2, r1
 8015f32:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	2240      	movs	r2, #64	@ 0x40
 8015f3a:	4013      	ands	r3, r2
 8015f3c:	d009      	beq.n	8015f52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f42:	4a17      	ldr	r2, [pc, #92]	@ (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015f44:	4013      	ands	r3, r2
 8015f46:	0019      	movs	r1, r3
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	6a1a      	ldr	r2, [r3, #32]
 8015f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f4e:	430a      	orrs	r2, r1
 8015f50:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	2280      	movs	r2, #128	@ 0x80
 8015f58:	4013      	ands	r3, r2
 8015f5a:	d009      	beq.n	8015f70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015f5c:	4b07      	ldr	r3, [pc, #28]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f60:	4a10      	ldr	r2, [pc, #64]	@ (8015fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015f62:	4013      	ands	r3, r2
 8015f64:	0019      	movs	r1, r3
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	69da      	ldr	r2, [r3, #28]
 8015f6a:	4b04      	ldr	r3, [pc, #16]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f6c:	430a      	orrs	r2, r1
 8015f6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015f70:	2300      	movs	r3, #0
}
 8015f72:	0018      	movs	r0, r3
 8015f74:	46bd      	mov	sp, r7
 8015f76:	b006      	add	sp, #24
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	46c0      	nop			@ (mov r8, r8)
 8015f7c:	40021000 	.word	0x40021000
 8015f80:	40007000 	.word	0x40007000
 8015f84:	fffcffff 	.word	0xfffcffff
 8015f88:	fff7ffff 	.word	0xfff7ffff
 8015f8c:	00001388 	.word	0x00001388
 8015f90:	ffcfffff 	.word	0xffcfffff
 8015f94:	efffffff 	.word	0xefffffff
 8015f98:	fffff3ff 	.word	0xfffff3ff
 8015f9c:	ffffcfff 	.word	0xffffcfff
 8015fa0:	fbffffff 	.word	0xfbffffff
 8015fa4:	fff3ffff 	.word	0xfff3ffff

08015fa8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015fa8:	b5b0      	push	{r4, r5, r7, lr}
 8015faa:	b084      	sub	sp, #16
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015fb0:	230f      	movs	r3, #15
 8015fb2:	18fb      	adds	r3, r7, r3
 8015fb4:	2201      	movs	r2, #1
 8015fb6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d101      	bne.n	8015fc2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	e088      	b.n	80160d4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2221      	movs	r2, #33	@ 0x21
 8015fc6:	5c9b      	ldrb	r3, [r3, r2]
 8015fc8:	b2db      	uxtb	r3, r3
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d107      	bne.n	8015fde <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2220      	movs	r2, #32
 8015fd2:	2100      	movs	r1, #0
 8015fd4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	0018      	movs	r0, r3
 8015fda:	f7f3 f829 	bl	8009030 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2221      	movs	r2, #33	@ 0x21
 8015fe2:	2102      	movs	r1, #2
 8015fe4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	68db      	ldr	r3, [r3, #12]
 8015fec:	2210      	movs	r2, #16
 8015fee:	4013      	ands	r3, r2
 8015ff0:	2b10      	cmp	r3, #16
 8015ff2:	d05f      	beq.n	80160b4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	22ca      	movs	r2, #202	@ 0xca
 8015ffa:	625a      	str	r2, [r3, #36]	@ 0x24
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2253      	movs	r2, #83	@ 0x53
 8016002:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8016004:	250f      	movs	r5, #15
 8016006:	197c      	adds	r4, r7, r5
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	0018      	movs	r0, r3
 801600c:	f000 fa7c 	bl	8016508 <RTC_EnterInitMode>
 8016010:	0003      	movs	r3, r0
 8016012:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8016014:	0028      	movs	r0, r5
 8016016:	183b      	adds	r3, r7, r0
 8016018:	781b      	ldrb	r3, [r3, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d12c      	bne.n	8016078 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	689a      	ldr	r2, [r3, #8]
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	492c      	ldr	r1, [pc, #176]	@ (80160dc <HAL_RTC_Init+0x134>)
 801602a:	400a      	ands	r2, r1
 801602c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	6899      	ldr	r1, [r3, #8]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	685a      	ldr	r2, [r3, #4]
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	691b      	ldr	r3, [r3, #16]
 801603c:	431a      	orrs	r2, r3
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	699b      	ldr	r3, [r3, #24]
 8016042:	431a      	orrs	r2, r3
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	430a      	orrs	r2, r1
 801604a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	68d2      	ldr	r2, [r2, #12]
 8016054:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	6919      	ldr	r1, [r3, #16]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	689b      	ldr	r3, [r3, #8]
 8016060:	041a      	lsls	r2, r3, #16
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	430a      	orrs	r2, r1
 8016068:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801606a:	183c      	adds	r4, r7, r0
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	0018      	movs	r0, r3
 8016070:	f000 fa8e 	bl	8016590 <RTC_ExitInitMode>
 8016074:	0003      	movs	r3, r0
 8016076:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8016078:	230f      	movs	r3, #15
 801607a:	18fb      	adds	r3, r7, r3
 801607c:	781b      	ldrb	r3, [r3, #0]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d113      	bne.n	80160aa <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	2103      	movs	r1, #3
 801608e:	438a      	bics	r2, r1
 8016090:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	69da      	ldr	r2, [r3, #28]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	695b      	ldr	r3, [r3, #20]
 80160a0:	431a      	orrs	r2, r3
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	430a      	orrs	r2, r1
 80160a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	22ff      	movs	r2, #255	@ 0xff
 80160b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80160b2:	e003      	b.n	80160bc <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80160b4:	230f      	movs	r3, #15
 80160b6:	18fb      	adds	r3, r7, r3
 80160b8:	2200      	movs	r2, #0
 80160ba:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80160bc:	230f      	movs	r3, #15
 80160be:	18fb      	adds	r3, r7, r3
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d103      	bne.n	80160ce <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2221      	movs	r2, #33	@ 0x21
 80160ca:	2101      	movs	r1, #1
 80160cc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80160ce:	230f      	movs	r3, #15
 80160d0:	18fb      	adds	r3, r7, r3
 80160d2:	781b      	ldrb	r3, [r3, #0]
}
 80160d4:	0018      	movs	r0, r3
 80160d6:	46bd      	mov	sp, r7
 80160d8:	b004      	add	sp, #16
 80160da:	bdb0      	pop	{r4, r5, r7, pc}
 80160dc:	ff8fffbf 	.word	0xff8fffbf

080160e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80160e0:	b5b0      	push	{r4, r5, r7, lr}
 80160e2:	b086      	sub	sp, #24
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	60f8      	str	r0, [r7, #12]
 80160e8:	60b9      	str	r1, [r7, #8]
 80160ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80160ec:	2300      	movs	r3, #0
 80160ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	2220      	movs	r2, #32
 80160f4:	5c9b      	ldrb	r3, [r3, r2]
 80160f6:	2b01      	cmp	r3, #1
 80160f8:	d101      	bne.n	80160fe <HAL_RTC_SetTime+0x1e>
 80160fa:	2302      	movs	r3, #2
 80160fc:	e092      	b.n	8016224 <HAL_RTC_SetTime+0x144>
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	2220      	movs	r2, #32
 8016102:	2101      	movs	r1, #1
 8016104:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	2221      	movs	r2, #33	@ 0x21
 801610a:	2102      	movs	r1, #2
 801610c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d125      	bne.n	8016160 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	689b      	ldr	r3, [r3, #8]
 801611a:	2240      	movs	r2, #64	@ 0x40
 801611c:	4013      	ands	r3, r2
 801611e:	d102      	bne.n	8016126 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	2200      	movs	r2, #0
 8016124:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	781b      	ldrb	r3, [r3, #0]
 801612a:	0018      	movs	r0, r3
 801612c:	f000 fa5a 	bl	80165e4 <RTC_ByteToBcd2>
 8016130:	0003      	movs	r3, r0
 8016132:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016134:	68bb      	ldr	r3, [r7, #8]
 8016136:	785b      	ldrb	r3, [r3, #1]
 8016138:	0018      	movs	r0, r3
 801613a:	f000 fa53 	bl	80165e4 <RTC_ByteToBcd2>
 801613e:	0003      	movs	r3, r0
 8016140:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016142:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	789b      	ldrb	r3, [r3, #2]
 8016148:	0018      	movs	r0, r3
 801614a:	f000 fa4b 	bl	80165e4 <RTC_ByteToBcd2>
 801614e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016150:	0022      	movs	r2, r4
 8016152:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	78db      	ldrb	r3, [r3, #3]
 8016158:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801615a:	4313      	orrs	r3, r2
 801615c:	617b      	str	r3, [r7, #20]
 801615e:	e017      	b.n	8016190 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	689b      	ldr	r3, [r3, #8]
 8016166:	2240      	movs	r2, #64	@ 0x40
 8016168:	4013      	ands	r3, r2
 801616a:	d102      	bne.n	8016172 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	2200      	movs	r2, #0
 8016170:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	785b      	ldrb	r3, [r3, #1]
 801617c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801617e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8016180:	68ba      	ldr	r2, [r7, #8]
 8016182:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016184:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	78db      	ldrb	r3, [r3, #3]
 801618a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801618c:	4313      	orrs	r3, r2
 801618e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	22ca      	movs	r2, #202	@ 0xca
 8016196:	625a      	str	r2, [r3, #36]	@ 0x24
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	2253      	movs	r2, #83	@ 0x53
 801619e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80161a0:	2513      	movs	r5, #19
 80161a2:	197c      	adds	r4, r7, r5
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	0018      	movs	r0, r3
 80161a8:	f000 f9ae 	bl	8016508 <RTC_EnterInitMode>
 80161ac:	0003      	movs	r3, r0
 80161ae:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80161b0:	0028      	movs	r0, r5
 80161b2:	183b      	adds	r3, r7, r0
 80161b4:	781b      	ldrb	r3, [r3, #0]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d120      	bne.n	80161fc <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	697a      	ldr	r2, [r7, #20]
 80161c0:	491a      	ldr	r1, [pc, #104]	@ (801622c <HAL_RTC_SetTime+0x14c>)
 80161c2:	400a      	ands	r2, r1
 80161c4:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	689a      	ldr	r2, [r3, #8]
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	4917      	ldr	r1, [pc, #92]	@ (8016230 <HAL_RTC_SetTime+0x150>)
 80161d2:	400a      	ands	r2, r1
 80161d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	6899      	ldr	r1, [r3, #8]
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	68da      	ldr	r2, [r3, #12]
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	691b      	ldr	r3, [r3, #16]
 80161e4:	431a      	orrs	r2, r3
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	430a      	orrs	r2, r1
 80161ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80161ee:	183c      	adds	r4, r7, r0
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	0018      	movs	r0, r3
 80161f4:	f000 f9cc 	bl	8016590 <RTC_ExitInitMode>
 80161f8:	0003      	movs	r3, r0
 80161fa:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80161fc:	2313      	movs	r3, #19
 80161fe:	18fb      	adds	r3, r7, r3
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d103      	bne.n	801620e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2221      	movs	r2, #33	@ 0x21
 801620a:	2101      	movs	r1, #1
 801620c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	22ff      	movs	r2, #255	@ 0xff
 8016214:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	2220      	movs	r2, #32
 801621a:	2100      	movs	r1, #0
 801621c:	5499      	strb	r1, [r3, r2]

  return status;
 801621e:	2313      	movs	r3, #19
 8016220:	18fb      	adds	r3, r7, r3
 8016222:	781b      	ldrb	r3, [r3, #0]
}
 8016224:	0018      	movs	r0, r3
 8016226:	46bd      	mov	sp, r7
 8016228:	b006      	add	sp, #24
 801622a:	bdb0      	pop	{r4, r5, r7, pc}
 801622c:	007f7f7f 	.word	0x007f7f7f
 8016230:	fffbffff 	.word	0xfffbffff

08016234 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b086      	sub	sp, #24
 8016238:	af00      	add	r7, sp, #0
 801623a:	60f8      	str	r0, [r7, #12]
 801623c:	60b9      	str	r1, [r7, #8]
 801623e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016240:	2300      	movs	r3, #0
 8016242:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	691b      	ldr	r3, [r3, #16]
 8016254:	045b      	lsls	r3, r3, #17
 8016256:	0c5a      	lsrs	r2, r3, #17
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	4a22      	ldr	r2, [pc, #136]	@ (80162ec <HAL_RTC_GetTime+0xb8>)
 8016264:	4013      	ands	r3, r2
 8016266:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	0c1b      	lsrs	r3, r3, #16
 801626c:	b2db      	uxtb	r3, r3
 801626e:	223f      	movs	r2, #63	@ 0x3f
 8016270:	4013      	ands	r3, r2
 8016272:	b2da      	uxtb	r2, r3
 8016274:	68bb      	ldr	r3, [r7, #8]
 8016276:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8016278:	697b      	ldr	r3, [r7, #20]
 801627a:	0a1b      	lsrs	r3, r3, #8
 801627c:	b2db      	uxtb	r3, r3
 801627e:	227f      	movs	r2, #127	@ 0x7f
 8016280:	4013      	ands	r3, r2
 8016282:	b2da      	uxtb	r2, r3
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8016288:	697b      	ldr	r3, [r7, #20]
 801628a:	b2db      	uxtb	r3, r3
 801628c:	227f      	movs	r2, #127	@ 0x7f
 801628e:	4013      	ands	r3, r2
 8016290:	b2da      	uxtb	r2, r3
 8016292:	68bb      	ldr	r3, [r7, #8]
 8016294:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	0d9b      	lsrs	r3, r3, #22
 801629a:	b2db      	uxtb	r3, r3
 801629c:	2201      	movs	r2, #1
 801629e:	4013      	ands	r3, r2
 80162a0:	b2da      	uxtb	r2, r3
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d11a      	bne.n	80162e2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80162ac:	68bb      	ldr	r3, [r7, #8]
 80162ae:	781b      	ldrb	r3, [r3, #0]
 80162b0:	0018      	movs	r0, r3
 80162b2:	f000 f9b8 	bl	8016626 <RTC_Bcd2ToByte>
 80162b6:	0003      	movs	r3, r0
 80162b8:	001a      	movs	r2, r3
 80162ba:	68bb      	ldr	r3, [r7, #8]
 80162bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	785b      	ldrb	r3, [r3, #1]
 80162c2:	0018      	movs	r0, r3
 80162c4:	f000 f9af 	bl	8016626 <RTC_Bcd2ToByte>
 80162c8:	0003      	movs	r3, r0
 80162ca:	001a      	movs	r2, r3
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	789b      	ldrb	r3, [r3, #2]
 80162d4:	0018      	movs	r0, r3
 80162d6:	f000 f9a6 	bl	8016626 <RTC_Bcd2ToByte>
 80162da:	0003      	movs	r3, r0
 80162dc:	001a      	movs	r2, r3
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80162e2:	2300      	movs	r3, #0
}
 80162e4:	0018      	movs	r0, r3
 80162e6:	46bd      	mov	sp, r7
 80162e8:	b006      	add	sp, #24
 80162ea:	bd80      	pop	{r7, pc}
 80162ec:	007f7f7f 	.word	0x007f7f7f

080162f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80162f0:	b5b0      	push	{r4, r5, r7, lr}
 80162f2:	b086      	sub	sp, #24
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	60f8      	str	r0, [r7, #12]
 80162f8:	60b9      	str	r1, [r7, #8]
 80162fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80162fc:	2300      	movs	r3, #0
 80162fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	2220      	movs	r2, #32
 8016304:	5c9b      	ldrb	r3, [r3, r2]
 8016306:	2b01      	cmp	r3, #1
 8016308:	d101      	bne.n	801630e <HAL_RTC_SetDate+0x1e>
 801630a:	2302      	movs	r3, #2
 801630c:	e07e      	b.n	801640c <HAL_RTC_SetDate+0x11c>
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	2220      	movs	r2, #32
 8016312:	2101      	movs	r1, #1
 8016314:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	2221      	movs	r2, #33	@ 0x21
 801631a:	2102      	movs	r1, #2
 801631c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d10e      	bne.n	8016342 <HAL_RTC_SetDate+0x52>
 8016324:	68bb      	ldr	r3, [r7, #8]
 8016326:	785b      	ldrb	r3, [r3, #1]
 8016328:	001a      	movs	r2, r3
 801632a:	2310      	movs	r3, #16
 801632c:	4013      	ands	r3, r2
 801632e:	d008      	beq.n	8016342 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016330:	68bb      	ldr	r3, [r7, #8]
 8016332:	785b      	ldrb	r3, [r3, #1]
 8016334:	2210      	movs	r2, #16
 8016336:	4393      	bics	r3, r2
 8016338:	b2db      	uxtb	r3, r3
 801633a:	330a      	adds	r3, #10
 801633c:	b2da      	uxtb	r2, r3
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d11c      	bne.n	8016382 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	78db      	ldrb	r3, [r3, #3]
 801634c:	0018      	movs	r0, r3
 801634e:	f000 f949 	bl	80165e4 <RTC_ByteToBcd2>
 8016352:	0003      	movs	r3, r0
 8016354:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	785b      	ldrb	r3, [r3, #1]
 801635a:	0018      	movs	r0, r3
 801635c:	f000 f942 	bl	80165e4 <RTC_ByteToBcd2>
 8016360:	0003      	movs	r3, r0
 8016362:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016364:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8016366:	68bb      	ldr	r3, [r7, #8]
 8016368:	789b      	ldrb	r3, [r3, #2]
 801636a:	0018      	movs	r0, r3
 801636c:	f000 f93a 	bl	80165e4 <RTC_ByteToBcd2>
 8016370:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016372:	0022      	movs	r2, r4
 8016374:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8016376:	68bb      	ldr	r3, [r7, #8]
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801637c:	4313      	orrs	r3, r2
 801637e:	617b      	str	r3, [r7, #20]
 8016380:	e00e      	b.n	80163a0 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016382:	68bb      	ldr	r3, [r7, #8]
 8016384:	78db      	ldrb	r3, [r3, #3]
 8016386:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	785b      	ldrb	r3, [r3, #1]
 801638c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801638e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8016390:	68ba      	ldr	r2, [r7, #8]
 8016392:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016394:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	781b      	ldrb	r3, [r3, #0]
 801639a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801639c:	4313      	orrs	r3, r2
 801639e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	22ca      	movs	r2, #202	@ 0xca
 80163a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	2253      	movs	r2, #83	@ 0x53
 80163ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80163b0:	2513      	movs	r5, #19
 80163b2:	197c      	adds	r4, r7, r5
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	0018      	movs	r0, r3
 80163b8:	f000 f8a6 	bl	8016508 <RTC_EnterInitMode>
 80163bc:	0003      	movs	r3, r0
 80163be:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80163c0:	0028      	movs	r0, r5
 80163c2:	183b      	adds	r3, r7, r0
 80163c4:	781b      	ldrb	r3, [r3, #0]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d10c      	bne.n	80163e4 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	697a      	ldr	r2, [r7, #20]
 80163d0:	4910      	ldr	r1, [pc, #64]	@ (8016414 <HAL_RTC_SetDate+0x124>)
 80163d2:	400a      	ands	r2, r1
 80163d4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80163d6:	183c      	adds	r4, r7, r0
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	0018      	movs	r0, r3
 80163dc:	f000 f8d8 	bl	8016590 <RTC_ExitInitMode>
 80163e0:	0003      	movs	r3, r0
 80163e2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80163e4:	2313      	movs	r3, #19
 80163e6:	18fb      	adds	r3, r7, r3
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d103      	bne.n	80163f6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	2221      	movs	r2, #33	@ 0x21
 80163f2:	2101      	movs	r1, #1
 80163f4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	22ff      	movs	r2, #255	@ 0xff
 80163fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	2220      	movs	r2, #32
 8016402:	2100      	movs	r1, #0
 8016404:	5499      	strb	r1, [r3, r2]

  return status;
 8016406:	2313      	movs	r3, #19
 8016408:	18fb      	adds	r3, r7, r3
 801640a:	781b      	ldrb	r3, [r3, #0]
}
 801640c:	0018      	movs	r0, r3
 801640e:	46bd      	mov	sp, r7
 8016410:	b006      	add	sp, #24
 8016412:	bdb0      	pop	{r4, r5, r7, pc}
 8016414:	00ffff3f 	.word	0x00ffff3f

08016418 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b086      	sub	sp, #24
 801641c:	af00      	add	r7, sp, #0
 801641e:	60f8      	str	r0, [r7, #12]
 8016420:	60b9      	str	r1, [r7, #8]
 8016422:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016424:	2300      	movs	r3, #0
 8016426:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	685b      	ldr	r3, [r3, #4]
 801642e:	4a21      	ldr	r2, [pc, #132]	@ (80164b4 <HAL_RTC_GetDate+0x9c>)
 8016430:	4013      	ands	r3, r2
 8016432:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016434:	697b      	ldr	r3, [r7, #20]
 8016436:	0c1b      	lsrs	r3, r3, #16
 8016438:	b2da      	uxtb	r2, r3
 801643a:	68bb      	ldr	r3, [r7, #8]
 801643c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	0a1b      	lsrs	r3, r3, #8
 8016442:	b2db      	uxtb	r3, r3
 8016444:	221f      	movs	r2, #31
 8016446:	4013      	ands	r3, r2
 8016448:	b2da      	uxtb	r2, r3
 801644a:	68bb      	ldr	r3, [r7, #8]
 801644c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801644e:	697b      	ldr	r3, [r7, #20]
 8016450:	b2db      	uxtb	r3, r3
 8016452:	223f      	movs	r2, #63	@ 0x3f
 8016454:	4013      	ands	r3, r2
 8016456:	b2da      	uxtb	r2, r3
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801645c:	697b      	ldr	r3, [r7, #20]
 801645e:	0b5b      	lsrs	r3, r3, #13
 8016460:	b2db      	uxtb	r3, r3
 8016462:	2207      	movs	r2, #7
 8016464:	4013      	ands	r3, r2
 8016466:	b2da      	uxtb	r2, r3
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d11a      	bne.n	80164a8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	78db      	ldrb	r3, [r3, #3]
 8016476:	0018      	movs	r0, r3
 8016478:	f000 f8d5 	bl	8016626 <RTC_Bcd2ToByte>
 801647c:	0003      	movs	r3, r0
 801647e:	001a      	movs	r2, r3
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	785b      	ldrb	r3, [r3, #1]
 8016488:	0018      	movs	r0, r3
 801648a:	f000 f8cc 	bl	8016626 <RTC_Bcd2ToByte>
 801648e:	0003      	movs	r3, r0
 8016490:	001a      	movs	r2, r3
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	789b      	ldrb	r3, [r3, #2]
 801649a:	0018      	movs	r0, r3
 801649c:	f000 f8c3 	bl	8016626 <RTC_Bcd2ToByte>
 80164a0:	0003      	movs	r3, r0
 80164a2:	001a      	movs	r2, r3
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80164a8:	2300      	movs	r3, #0
}
 80164aa:	0018      	movs	r0, r3
 80164ac:	46bd      	mov	sp, r7
 80164ae:	b006      	add	sp, #24
 80164b0:	bd80      	pop	{r7, pc}
 80164b2:	46c0      	nop			@ (mov r8, r8)
 80164b4:	00ffff3f 	.word	0x00ffff3f

080164b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b084      	sub	sp, #16
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80164c0:	2300      	movs	r3, #0
 80164c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	4a0e      	ldr	r2, [pc, #56]	@ (8016504 <HAL_RTC_WaitForSynchro+0x4c>)
 80164ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80164cc:	f7f8 fce8 	bl	800eea0 <HAL_GetTick>
 80164d0:	0003      	movs	r3, r0
 80164d2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80164d4:	e00a      	b.n	80164ec <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80164d6:	f7f8 fce3 	bl	800eea0 <HAL_GetTick>
 80164da:	0002      	movs	r2, r0
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	1ad2      	subs	r2, r2, r3
 80164e0:	23fa      	movs	r3, #250	@ 0xfa
 80164e2:	009b      	lsls	r3, r3, #2
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d901      	bls.n	80164ec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80164e8:	2303      	movs	r3, #3
 80164ea:	e006      	b.n	80164fa <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	68db      	ldr	r3, [r3, #12]
 80164f2:	2220      	movs	r2, #32
 80164f4:	4013      	ands	r3, r2
 80164f6:	d0ee      	beq.n	80164d6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80164f8:	2300      	movs	r3, #0
}
 80164fa:	0018      	movs	r0, r3
 80164fc:	46bd      	mov	sp, r7
 80164fe:	b004      	add	sp, #16
 8016500:	bd80      	pop	{r7, pc}
 8016502:	46c0      	nop			@ (mov r8, r8)
 8016504:	0001ff5f 	.word	0x0001ff5f

08016508 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b084      	sub	sp, #16
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016510:	2300      	movs	r3, #0
 8016512:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8016514:	230f      	movs	r3, #15
 8016516:	18fb      	adds	r3, r7, r3
 8016518:	2200      	movs	r2, #0
 801651a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	68db      	ldr	r3, [r3, #12]
 8016522:	2240      	movs	r2, #64	@ 0x40
 8016524:	4013      	ands	r3, r2
 8016526:	d12c      	bne.n	8016582 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	68da      	ldr	r2, [r3, #12]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	2180      	movs	r1, #128	@ 0x80
 8016534:	430a      	orrs	r2, r1
 8016536:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8016538:	f7f8 fcb2 	bl	800eea0 <HAL_GetTick>
 801653c:	0003      	movs	r3, r0
 801653e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016540:	e014      	b.n	801656c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016542:	f7f8 fcad 	bl	800eea0 <HAL_GetTick>
 8016546:	0002      	movs	r2, r0
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	1ad2      	subs	r2, r2, r3
 801654c:	200f      	movs	r0, #15
 801654e:	183b      	adds	r3, r7, r0
 8016550:	1839      	adds	r1, r7, r0
 8016552:	7809      	ldrb	r1, [r1, #0]
 8016554:	7019      	strb	r1, [r3, #0]
 8016556:	23fa      	movs	r3, #250	@ 0xfa
 8016558:	009b      	lsls	r3, r3, #2
 801655a:	429a      	cmp	r2, r3
 801655c:	d906      	bls.n	801656c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	2221      	movs	r2, #33	@ 0x21
 8016562:	2104      	movs	r1, #4
 8016564:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8016566:	183b      	adds	r3, r7, r0
 8016568:	2201      	movs	r2, #1
 801656a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	68db      	ldr	r3, [r3, #12]
 8016572:	2240      	movs	r2, #64	@ 0x40
 8016574:	4013      	ands	r3, r2
 8016576:	d104      	bne.n	8016582 <RTC_EnterInitMode+0x7a>
 8016578:	230f      	movs	r3, #15
 801657a:	18fb      	adds	r3, r7, r3
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	2b01      	cmp	r3, #1
 8016580:	d1df      	bne.n	8016542 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8016582:	230f      	movs	r3, #15
 8016584:	18fb      	adds	r3, r7, r3
 8016586:	781b      	ldrb	r3, [r3, #0]
}
 8016588:	0018      	movs	r0, r3
 801658a:	46bd      	mov	sp, r7
 801658c:	b004      	add	sp, #16
 801658e:	bd80      	pop	{r7, pc}

08016590 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016590:	b590      	push	{r4, r7, lr}
 8016592:	b085      	sub	sp, #20
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016598:	240f      	movs	r4, #15
 801659a:	193b      	adds	r3, r7, r4
 801659c:	2200      	movs	r2, #0
 801659e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	68da      	ldr	r2, [r3, #12]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	2180      	movs	r1, #128	@ 0x80
 80165ac:	438a      	bics	r2, r1
 80165ae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	689b      	ldr	r3, [r3, #8]
 80165b6:	2220      	movs	r2, #32
 80165b8:	4013      	ands	r3, r2
 80165ba:	d10c      	bne.n	80165d6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	0018      	movs	r0, r3
 80165c0:	f7ff ff7a 	bl	80164b8 <HAL_RTC_WaitForSynchro>
 80165c4:	1e03      	subs	r3, r0, #0
 80165c6:	d006      	beq.n	80165d6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2221      	movs	r2, #33	@ 0x21
 80165cc:	2104      	movs	r1, #4
 80165ce:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80165d0:	193b      	adds	r3, r7, r4
 80165d2:	2201      	movs	r2, #1
 80165d4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80165d6:	230f      	movs	r3, #15
 80165d8:	18fb      	adds	r3, r7, r3
 80165da:	781b      	ldrb	r3, [r3, #0]
}
 80165dc:	0018      	movs	r0, r3
 80165de:	46bd      	mov	sp, r7
 80165e0:	b005      	add	sp, #20
 80165e2:	bd90      	pop	{r4, r7, pc}

080165e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	0002      	movs	r2, r0
 80165ec:	1dfb      	adds	r3, r7, #7
 80165ee:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80165f0:	2300      	movs	r3, #0
 80165f2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80165f4:	e007      	b.n	8016606 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	3301      	adds	r3, #1
 80165fa:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80165fc:	1dfb      	adds	r3, r7, #7
 80165fe:	1dfa      	adds	r2, r7, #7
 8016600:	7812      	ldrb	r2, [r2, #0]
 8016602:	3a0a      	subs	r2, #10
 8016604:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8016606:	1dfb      	adds	r3, r7, #7
 8016608:	781b      	ldrb	r3, [r3, #0]
 801660a:	2b09      	cmp	r3, #9
 801660c:	d8f3      	bhi.n	80165f6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	b2db      	uxtb	r3, r3
 8016612:	011b      	lsls	r3, r3, #4
 8016614:	b2da      	uxtb	r2, r3
 8016616:	1dfb      	adds	r3, r7, #7
 8016618:	781b      	ldrb	r3, [r3, #0]
 801661a:	4313      	orrs	r3, r2
 801661c:	b2db      	uxtb	r3, r3
}
 801661e:	0018      	movs	r0, r3
 8016620:	46bd      	mov	sp, r7
 8016622:	b004      	add	sp, #16
 8016624:	bd80      	pop	{r7, pc}

08016626 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8016626:	b580      	push	{r7, lr}
 8016628:	b084      	sub	sp, #16
 801662a:	af00      	add	r7, sp, #0
 801662c:	0002      	movs	r2, r0
 801662e:	1dfb      	adds	r3, r7, #7
 8016630:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8016632:	2300      	movs	r3, #0
 8016634:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8016636:	1dfb      	adds	r3, r7, #7
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	091b      	lsrs	r3, r3, #4
 801663c:	b2db      	uxtb	r3, r3
 801663e:	001a      	movs	r2, r3
 8016640:	0013      	movs	r3, r2
 8016642:	009b      	lsls	r3, r3, #2
 8016644:	189b      	adds	r3, r3, r2
 8016646:	005b      	lsls	r3, r3, #1
 8016648:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	b2da      	uxtb	r2, r3
 801664e:	1dfb      	adds	r3, r7, #7
 8016650:	781b      	ldrb	r3, [r3, #0]
 8016652:	210f      	movs	r1, #15
 8016654:	400b      	ands	r3, r1
 8016656:	b2db      	uxtb	r3, r3
 8016658:	18d3      	adds	r3, r2, r3
 801665a:	b2db      	uxtb	r3, r3
}
 801665c:	0018      	movs	r0, r3
 801665e:	46bd      	mov	sp, r7
 8016660:	b004      	add	sp, #16
 8016662:	bd80      	pop	{r7, pc}

08016664 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b086      	sub	sp, #24
 8016668:	af00      	add	r7, sp, #0
 801666a:	60f8      	str	r0, [r7, #12]
 801666c:	60b9      	str	r1, [r7, #8]
 801666e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016670:	4b64      	ldr	r3, [pc, #400]	@ (8016804 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	22fa      	movs	r2, #250	@ 0xfa
 8016676:	01d1      	lsls	r1, r2, #7
 8016678:	0018      	movs	r0, r3
 801667a:	f7e9 fd93 	bl	80001a4 <__udivsi3>
 801667e:	0003      	movs	r3, r0
 8016680:	001a      	movs	r2, r3
 8016682:	0013      	movs	r3, r2
 8016684:	015b      	lsls	r3, r3, #5
 8016686:	1a9b      	subs	r3, r3, r2
 8016688:	009b      	lsls	r3, r3, #2
 801668a:	189b      	adds	r3, r3, r2
 801668c:	00db      	lsls	r3, r3, #3
 801668e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	2220      	movs	r2, #32
 8016694:	5c9b      	ldrb	r3, [r3, r2]
 8016696:	2b01      	cmp	r3, #1
 8016698:	d101      	bne.n	801669e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801669a:	2302      	movs	r3, #2
 801669c:	e0ad      	b.n	80167fa <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	2220      	movs	r2, #32
 80166a2:	2101      	movs	r1, #1
 80166a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	2221      	movs	r2, #33	@ 0x21
 80166aa:	2102      	movs	r1, #2
 80166ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	22ca      	movs	r2, #202	@ 0xca
 80166b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	2253      	movs	r2, #83	@ 0x53
 80166bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	689a      	ldr	r2, [r3, #8]
 80166c4:	2380      	movs	r3, #128	@ 0x80
 80166c6:	00db      	lsls	r3, r3, #3
 80166c8:	4013      	ands	r3, r2
 80166ca:	d019      	beq.n	8016700 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	3b01      	subs	r3, #1
 80166d0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d10d      	bne.n	80166f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	22ff      	movs	r2, #255	@ 0xff
 80166de:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	2221      	movs	r2, #33	@ 0x21
 80166e4:	2103      	movs	r1, #3
 80166e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	2220      	movs	r2, #32
 80166ec:	2100      	movs	r1, #0
 80166ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80166f0:	2303      	movs	r3, #3
 80166f2:	e082      	b.n	80167fa <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	68db      	ldr	r3, [r3, #12]
 80166fa:	2204      	movs	r2, #4
 80166fc:	4013      	ands	r3, r2
 80166fe:	d1e5      	bne.n	80166cc <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	689a      	ldr	r2, [r3, #8]
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	493f      	ldr	r1, [pc, #252]	@ (8016808 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801670c:	400a      	ands	r2, r1
 801670e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	68db      	ldr	r3, [r3, #12]
 8016716:	22ff      	movs	r2, #255	@ 0xff
 8016718:	401a      	ands	r2, r3
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	493b      	ldr	r1, [pc, #236]	@ (801680c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8016720:	430a      	orrs	r2, r1
 8016722:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016724:	4b37      	ldr	r3, [pc, #220]	@ (8016804 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	22fa      	movs	r2, #250	@ 0xfa
 801672a:	01d1      	lsls	r1, r2, #7
 801672c:	0018      	movs	r0, r3
 801672e:	f7e9 fd39 	bl	80001a4 <__udivsi3>
 8016732:	0003      	movs	r3, r0
 8016734:	001a      	movs	r2, r3
 8016736:	0013      	movs	r3, r2
 8016738:	015b      	lsls	r3, r3, #5
 801673a:	1a9b      	subs	r3, r3, r2
 801673c:	009b      	lsls	r3, r3, #2
 801673e:	189b      	adds	r3, r3, r2
 8016740:	00db      	lsls	r3, r3, #3
 8016742:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016744:	697b      	ldr	r3, [r7, #20]
 8016746:	3b01      	subs	r3, #1
 8016748:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801674a:	697b      	ldr	r3, [r7, #20]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d10d      	bne.n	801676c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	22ff      	movs	r2, #255	@ 0xff
 8016756:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	2221      	movs	r2, #33	@ 0x21
 801675c:	2103      	movs	r1, #3
 801675e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	2220      	movs	r2, #32
 8016764:	2100      	movs	r1, #0
 8016766:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016768:	2303      	movs	r3, #3
 801676a:	e046      	b.n	80167fa <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	68db      	ldr	r3, [r3, #12]
 8016772:	2204      	movs	r2, #4
 8016774:	4013      	ands	r3, r2
 8016776:	d0e5      	beq.n	8016744 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	689a      	ldr	r2, [r3, #8]
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	2107      	movs	r1, #7
 8016784:	438a      	bics	r2, r1
 8016786:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	6899      	ldr	r1, [r3, #8]
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	687a      	ldr	r2, [r7, #4]
 8016794:	430a      	orrs	r2, r1
 8016796:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	68ba      	ldr	r2, [r7, #8]
 801679e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80167a0:	4b1b      	ldr	r3, [pc, #108]	@ (8016810 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167a2:	681a      	ldr	r2, [r3, #0]
 80167a4:	4b1a      	ldr	r3, [pc, #104]	@ (8016810 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167a6:	2180      	movs	r1, #128	@ 0x80
 80167a8:	0349      	lsls	r1, r1, #13
 80167aa:	430a      	orrs	r2, r1
 80167ac:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80167ae:	4b18      	ldr	r3, [pc, #96]	@ (8016810 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167b0:	689a      	ldr	r2, [r3, #8]
 80167b2:	4b17      	ldr	r3, [pc, #92]	@ (8016810 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167b4:	2180      	movs	r1, #128	@ 0x80
 80167b6:	0349      	lsls	r1, r1, #13
 80167b8:	430a      	orrs	r2, r1
 80167ba:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	689a      	ldr	r2, [r3, #8]
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	2180      	movs	r1, #128	@ 0x80
 80167c8:	01c9      	lsls	r1, r1, #7
 80167ca:	430a      	orrs	r2, r1
 80167cc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	689a      	ldr	r2, [r3, #8]
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	2180      	movs	r1, #128	@ 0x80
 80167da:	00c9      	lsls	r1, r1, #3
 80167dc:	430a      	orrs	r2, r1
 80167de:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	22ff      	movs	r2, #255	@ 0xff
 80167e6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	2221      	movs	r2, #33	@ 0x21
 80167ec:	2101      	movs	r1, #1
 80167ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	2220      	movs	r2, #32
 80167f4:	2100      	movs	r1, #0
 80167f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80167f8:	2300      	movs	r3, #0
}
 80167fa:	0018      	movs	r0, r3
 80167fc:	46bd      	mov	sp, r7
 80167fe:	b006      	add	sp, #24
 8016800:	bd80      	pop	{r7, pc}
 8016802:	46c0      	nop			@ (mov r8, r8)
 8016804:	200000d0 	.word	0x200000d0
 8016808:	fffffbff 	.word	0xfffffbff
 801680c:	fffffb7f 	.word	0xfffffb7f
 8016810:	40010400 	.word	0x40010400

08016814 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b084      	sub	sp, #16
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801681c:	2300      	movs	r3, #0
 801681e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2220      	movs	r2, #32
 8016824:	5c9b      	ldrb	r3, [r3, r2]
 8016826:	2b01      	cmp	r3, #1
 8016828:	d101      	bne.n	801682e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801682a:	2302      	movs	r3, #2
 801682c:	e04e      	b.n	80168cc <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2220      	movs	r2, #32
 8016832:	2101      	movs	r1, #1
 8016834:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2221      	movs	r2, #33	@ 0x21
 801683a:	2102      	movs	r1, #2
 801683c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	22ca      	movs	r2, #202	@ 0xca
 8016844:	625a      	str	r2, [r3, #36]	@ 0x24
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	2253      	movs	r2, #83	@ 0x53
 801684c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	689a      	ldr	r2, [r3, #8]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	491e      	ldr	r1, [pc, #120]	@ (80168d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801685a:	400a      	ands	r2, r1
 801685c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	689a      	ldr	r2, [r3, #8]
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	491b      	ldr	r1, [pc, #108]	@ (80168d8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801686a:	400a      	ands	r2, r1
 801686c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801686e:	f7f8 fb17 	bl	800eea0 <HAL_GetTick>
 8016872:	0003      	movs	r3, r0
 8016874:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016876:	e016      	b.n	80168a6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016878:	f7f8 fb12 	bl	800eea0 <HAL_GetTick>
 801687c:	0002      	movs	r2, r0
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	1ad2      	subs	r2, r2, r3
 8016882:	23fa      	movs	r3, #250	@ 0xfa
 8016884:	009b      	lsls	r3, r3, #2
 8016886:	429a      	cmp	r2, r3
 8016888:	d90d      	bls.n	80168a6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	22ff      	movs	r2, #255	@ 0xff
 8016890:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2221      	movs	r2, #33	@ 0x21
 8016896:	2103      	movs	r1, #3
 8016898:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	2220      	movs	r2, #32
 801689e:	2100      	movs	r1, #0
 80168a0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80168a2:	2303      	movs	r3, #3
 80168a4:	e012      	b.n	80168cc <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	68db      	ldr	r3, [r3, #12]
 80168ac:	2204      	movs	r2, #4
 80168ae:	4013      	ands	r3, r2
 80168b0:	d0e2      	beq.n	8016878 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	22ff      	movs	r2, #255	@ 0xff
 80168b8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	2221      	movs	r2, #33	@ 0x21
 80168be:	2101      	movs	r1, #1
 80168c0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2220      	movs	r2, #32
 80168c6:	2100      	movs	r1, #0
 80168c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80168ca:	2300      	movs	r3, #0
}
 80168cc:	0018      	movs	r0, r3
 80168ce:	46bd      	mov	sp, r7
 80168d0:	b004      	add	sp, #16
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	fffffbff 	.word	0xfffffbff
 80168d8:	ffffbfff 	.word	0xffffbfff

080168dc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80168e4:	4b13      	ldr	r3, [pc, #76]	@ (8016934 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80168e6:	2280      	movs	r2, #128	@ 0x80
 80168e8:	0352      	lsls	r2, r2, #13
 80168ea:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	689a      	ldr	r2, [r3, #8]
 80168f2:	2380      	movs	r3, #128	@ 0x80
 80168f4:	01db      	lsls	r3, r3, #7
 80168f6:	4013      	ands	r3, r2
 80168f8:	d014      	beq.n	8016924 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	68da      	ldr	r2, [r3, #12]
 8016900:	2380      	movs	r3, #128	@ 0x80
 8016902:	00db      	lsls	r3, r3, #3
 8016904:	4013      	ands	r3, r2
 8016906:	d00d      	beq.n	8016924 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	68db      	ldr	r3, [r3, #12]
 801690e:	22ff      	movs	r2, #255	@ 0xff
 8016910:	401a      	ands	r2, r3
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	4908      	ldr	r1, [pc, #32]	@ (8016938 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8016918:	430a      	orrs	r2, r1
 801691a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	0018      	movs	r0, r3
 8016920:	f000 f80c 	bl	801693c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2221      	movs	r2, #33	@ 0x21
 8016928:	2101      	movs	r1, #1
 801692a:	5499      	strb	r1, [r3, r2]
}
 801692c:	46c0      	nop			@ (mov r8, r8)
 801692e:	46bd      	mov	sp, r7
 8016930:	b002      	add	sp, #8
 8016932:	bd80      	pop	{r7, pc}
 8016934:	40010400 	.word	0x40010400
 8016938:	fffffb7f 	.word	0xfffffb7f

0801693c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016944:	46c0      	nop			@ (mov r8, r8)
 8016946:	46bd      	mov	sp, r7
 8016948:	b002      	add	sp, #8
 801694a:	bd80      	pop	{r7, pc}

0801694c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b086      	sub	sp, #24
 8016950:	af00      	add	r7, sp, #0
 8016952:	60f8      	str	r0, [r7, #12]
 8016954:	60b9      	str	r1, [r7, #8]
 8016956:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8016958:	2300      	movs	r3, #0
 801695a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	3350      	adds	r3, #80	@ 0x50
 8016962:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016964:	68bb      	ldr	r3, [r7, #8]
 8016966:	009b      	lsls	r3, r3, #2
 8016968:	697a      	ldr	r2, [r7, #20]
 801696a:	18d3      	adds	r3, r2, r3
 801696c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	687a      	ldr	r2, [r7, #4]
 8016972:	601a      	str	r2, [r3, #0]
}
 8016974:	46c0      	nop			@ (mov r8, r8)
 8016976:	46bd      	mov	sp, r7
 8016978:	b006      	add	sp, #24
 801697a:	bd80      	pop	{r7, pc}

0801697c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b084      	sub	sp, #16
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
 8016984:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8016986:	2300      	movs	r3, #0
 8016988:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	3350      	adds	r3, #80	@ 0x50
 8016990:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	009b      	lsls	r3, r3, #2
 8016996:	68fa      	ldr	r2, [r7, #12]
 8016998:	18d3      	adds	r3, r2, r3
 801699a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	681b      	ldr	r3, [r3, #0]
}
 80169a0:	0018      	movs	r0, r3
 80169a2:	46bd      	mov	sp, r7
 80169a4:	b004      	add	sp, #16
 80169a6:	bd80      	pop	{r7, pc}

080169a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d101      	bne.n	80169ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80169b6:	2301      	movs	r3, #1
 80169b8:	e032      	b.n	8016a20 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2239      	movs	r2, #57	@ 0x39
 80169be:	5c9b      	ldrb	r3, [r3, r2]
 80169c0:	b2db      	uxtb	r3, r3
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d107      	bne.n	80169d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2238      	movs	r2, #56	@ 0x38
 80169ca:	2100      	movs	r1, #0
 80169cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	0018      	movs	r0, r3
 80169d2:	f7f7 fb7d 	bl	800e0d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2239      	movs	r2, #57	@ 0x39
 80169da:	2102      	movs	r1, #2
 80169dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	3304      	adds	r3, #4
 80169e6:	0019      	movs	r1, r3
 80169e8:	0010      	movs	r0, r2
 80169ea:	f000 fa1d 	bl	8016e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	223e      	movs	r2, #62	@ 0x3e
 80169f2:	2101      	movs	r1, #1
 80169f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	223a      	movs	r2, #58	@ 0x3a
 80169fa:	2101      	movs	r1, #1
 80169fc:	5499      	strb	r1, [r3, r2]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	223b      	movs	r2, #59	@ 0x3b
 8016a02:	2101      	movs	r1, #1
 8016a04:	5499      	strb	r1, [r3, r2]
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	223c      	movs	r2, #60	@ 0x3c
 8016a0a:	2101      	movs	r1, #1
 8016a0c:	5499      	strb	r1, [r3, r2]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	223d      	movs	r2, #61	@ 0x3d
 8016a12:	2101      	movs	r1, #1
 8016a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2239      	movs	r2, #57	@ 0x39
 8016a1a:	2101      	movs	r1, #1
 8016a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016a1e:	2300      	movs	r3, #0
}
 8016a20:	0018      	movs	r0, r3
 8016a22:	46bd      	mov	sp, r7
 8016a24:	b002      	add	sp, #8
 8016a26:	bd80      	pop	{r7, pc}

08016a28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b084      	sub	sp, #16
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	2239      	movs	r2, #57	@ 0x39
 8016a34:	5c9b      	ldrb	r3, [r3, r2]
 8016a36:	b2db      	uxtb	r3, r3
 8016a38:	2b01      	cmp	r3, #1
 8016a3a:	d001      	beq.n	8016a40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016a3c:	2301      	movs	r3, #1
 8016a3e:	e033      	b.n	8016aa8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2239      	movs	r2, #57	@ 0x39
 8016a44:	2102      	movs	r1, #2
 8016a46:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	2380      	movs	r3, #128	@ 0x80
 8016a4e:	05db      	lsls	r3, r3, #23
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d00e      	beq.n	8016a72 <HAL_TIM_Base_Start+0x4a>
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	4a15      	ldr	r2, [pc, #84]	@ (8016ab0 <HAL_TIM_Base_Start+0x88>)
 8016a5a:	4293      	cmp	r3, r2
 8016a5c:	d009      	beq.n	8016a72 <HAL_TIM_Base_Start+0x4a>
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	4a14      	ldr	r2, [pc, #80]	@ (8016ab4 <HAL_TIM_Base_Start+0x8c>)
 8016a64:	4293      	cmp	r3, r2
 8016a66:	d004      	beq.n	8016a72 <HAL_TIM_Base_Start+0x4a>
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	4a12      	ldr	r2, [pc, #72]	@ (8016ab8 <HAL_TIM_Base_Start+0x90>)
 8016a6e:	4293      	cmp	r3, r2
 8016a70:	d111      	bne.n	8016a96 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	689b      	ldr	r3, [r3, #8]
 8016a78:	2207      	movs	r2, #7
 8016a7a:	4013      	ands	r3, r2
 8016a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	2b06      	cmp	r3, #6
 8016a82:	d010      	beq.n	8016aa6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	681a      	ldr	r2, [r3, #0]
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2101      	movs	r1, #1
 8016a90:	430a      	orrs	r2, r1
 8016a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016a94:	e007      	b.n	8016aa6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	681a      	ldr	r2, [r3, #0]
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	2101      	movs	r1, #1
 8016aa2:	430a      	orrs	r2, r1
 8016aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016aa6:	2300      	movs	r3, #0
}
 8016aa8:	0018      	movs	r0, r3
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	b004      	add	sp, #16
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	40000400 	.word	0x40000400
 8016ab4:	40010800 	.word	0x40010800
 8016ab8:	40011400 	.word	0x40011400

08016abc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	6a1b      	ldr	r3, [r3, #32]
 8016aca:	4a0a      	ldr	r2, [pc, #40]	@ (8016af4 <HAL_TIM_Base_Stop+0x38>)
 8016acc:	4013      	ands	r3, r2
 8016ace:	d107      	bne.n	8016ae0 <HAL_TIM_Base_Stop+0x24>
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	681a      	ldr	r2, [r3, #0]
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	2101      	movs	r1, #1
 8016adc:	438a      	bics	r2, r1
 8016ade:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2239      	movs	r2, #57	@ 0x39
 8016ae4:	2101      	movs	r1, #1
 8016ae6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8016ae8:	2300      	movs	r3, #0
}
 8016aea:	0018      	movs	r0, r3
 8016aec:	46bd      	mov	sp, r7
 8016aee:	b002      	add	sp, #8
 8016af0:	bd80      	pop	{r7, pc}
 8016af2:	46c0      	nop			@ (mov r8, r8)
 8016af4:	00001111 	.word	0x00001111

08016af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b082      	sub	sp, #8
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d101      	bne.n	8016b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016b06:	2301      	movs	r3, #1
 8016b08:	e032      	b.n	8016b70 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2239      	movs	r2, #57	@ 0x39
 8016b0e:	5c9b      	ldrb	r3, [r3, r2]
 8016b10:	b2db      	uxtb	r3, r3
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d107      	bne.n	8016b26 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	2238      	movs	r2, #56	@ 0x38
 8016b1a:	2100      	movs	r1, #0
 8016b1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	0018      	movs	r0, r3
 8016b22:	f7f7 fab1 	bl	800e088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	2239      	movs	r2, #57	@ 0x39
 8016b2a:	2102      	movs	r1, #2
 8016b2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	681a      	ldr	r2, [r3, #0]
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	3304      	adds	r3, #4
 8016b36:	0019      	movs	r1, r3
 8016b38:	0010      	movs	r0, r2
 8016b3a:	f000 f975 	bl	8016e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	223e      	movs	r2, #62	@ 0x3e
 8016b42:	2101      	movs	r1, #1
 8016b44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	223a      	movs	r2, #58	@ 0x3a
 8016b4a:	2101      	movs	r1, #1
 8016b4c:	5499      	strb	r1, [r3, r2]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	223b      	movs	r2, #59	@ 0x3b
 8016b52:	2101      	movs	r1, #1
 8016b54:	5499      	strb	r1, [r3, r2]
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	223c      	movs	r2, #60	@ 0x3c
 8016b5a:	2101      	movs	r1, #1
 8016b5c:	5499      	strb	r1, [r3, r2]
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	223d      	movs	r2, #61	@ 0x3d
 8016b62:	2101      	movs	r1, #1
 8016b64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2239      	movs	r2, #57	@ 0x39
 8016b6a:	2101      	movs	r1, #1
 8016b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016b6e:	2300      	movs	r3, #0
}
 8016b70:	0018      	movs	r0, r3
 8016b72:	46bd      	mov	sp, r7
 8016b74:	b002      	add	sp, #8
 8016b76:	bd80      	pop	{r7, pc}

08016b78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d108      	bne.n	8016b9a <HAL_TIM_PWM_Start+0x22>
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	223a      	movs	r2, #58	@ 0x3a
 8016b8c:	5c9b      	ldrb	r3, [r3, r2]
 8016b8e:	b2db      	uxtb	r3, r3
 8016b90:	3b01      	subs	r3, #1
 8016b92:	1e5a      	subs	r2, r3, #1
 8016b94:	4193      	sbcs	r3, r2
 8016b96:	b2db      	uxtb	r3, r3
 8016b98:	e01f      	b.n	8016bda <HAL_TIM_PWM_Start+0x62>
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	2b04      	cmp	r3, #4
 8016b9e:	d108      	bne.n	8016bb2 <HAL_TIM_PWM_Start+0x3a>
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	223b      	movs	r2, #59	@ 0x3b
 8016ba4:	5c9b      	ldrb	r3, [r3, r2]
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	3b01      	subs	r3, #1
 8016baa:	1e5a      	subs	r2, r3, #1
 8016bac:	4193      	sbcs	r3, r2
 8016bae:	b2db      	uxtb	r3, r3
 8016bb0:	e013      	b.n	8016bda <HAL_TIM_PWM_Start+0x62>
 8016bb2:	683b      	ldr	r3, [r7, #0]
 8016bb4:	2b08      	cmp	r3, #8
 8016bb6:	d108      	bne.n	8016bca <HAL_TIM_PWM_Start+0x52>
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	223c      	movs	r2, #60	@ 0x3c
 8016bbc:	5c9b      	ldrb	r3, [r3, r2]
 8016bbe:	b2db      	uxtb	r3, r3
 8016bc0:	3b01      	subs	r3, #1
 8016bc2:	1e5a      	subs	r2, r3, #1
 8016bc4:	4193      	sbcs	r3, r2
 8016bc6:	b2db      	uxtb	r3, r3
 8016bc8:	e007      	b.n	8016bda <HAL_TIM_PWM_Start+0x62>
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	223d      	movs	r2, #61	@ 0x3d
 8016bce:	5c9b      	ldrb	r3, [r3, r2]
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	3b01      	subs	r3, #1
 8016bd4:	1e5a      	subs	r2, r3, #1
 8016bd6:	4193      	sbcs	r3, r2
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d001      	beq.n	8016be2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8016bde:	2301      	movs	r3, #1
 8016be0:	e052      	b.n	8016c88 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d104      	bne.n	8016bf2 <HAL_TIM_PWM_Start+0x7a>
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	223a      	movs	r2, #58	@ 0x3a
 8016bec:	2102      	movs	r1, #2
 8016bee:	5499      	strb	r1, [r3, r2]
 8016bf0:	e013      	b.n	8016c1a <HAL_TIM_PWM_Start+0xa2>
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	2b04      	cmp	r3, #4
 8016bf6:	d104      	bne.n	8016c02 <HAL_TIM_PWM_Start+0x8a>
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	223b      	movs	r2, #59	@ 0x3b
 8016bfc:	2102      	movs	r1, #2
 8016bfe:	5499      	strb	r1, [r3, r2]
 8016c00:	e00b      	b.n	8016c1a <HAL_TIM_PWM_Start+0xa2>
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	2b08      	cmp	r3, #8
 8016c06:	d104      	bne.n	8016c12 <HAL_TIM_PWM_Start+0x9a>
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	223c      	movs	r2, #60	@ 0x3c
 8016c0c:	2102      	movs	r1, #2
 8016c0e:	5499      	strb	r1, [r3, r2]
 8016c10:	e003      	b.n	8016c1a <HAL_TIM_PWM_Start+0xa2>
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	223d      	movs	r2, #61	@ 0x3d
 8016c16:	2102      	movs	r1, #2
 8016c18:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	6839      	ldr	r1, [r7, #0]
 8016c20:	2201      	movs	r2, #1
 8016c22:	0018      	movs	r0, r3
 8016c24:	f000 fa62 	bl	80170ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681a      	ldr	r2, [r3, #0]
 8016c2c:	2380      	movs	r3, #128	@ 0x80
 8016c2e:	05db      	lsls	r3, r3, #23
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d00e      	beq.n	8016c52 <HAL_TIM_PWM_Start+0xda>
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	4a15      	ldr	r2, [pc, #84]	@ (8016c90 <HAL_TIM_PWM_Start+0x118>)
 8016c3a:	4293      	cmp	r3, r2
 8016c3c:	d009      	beq.n	8016c52 <HAL_TIM_PWM_Start+0xda>
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	4a14      	ldr	r2, [pc, #80]	@ (8016c94 <HAL_TIM_PWM_Start+0x11c>)
 8016c44:	4293      	cmp	r3, r2
 8016c46:	d004      	beq.n	8016c52 <HAL_TIM_PWM_Start+0xda>
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	4a12      	ldr	r2, [pc, #72]	@ (8016c98 <HAL_TIM_PWM_Start+0x120>)
 8016c4e:	4293      	cmp	r3, r2
 8016c50:	d111      	bne.n	8016c76 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	689b      	ldr	r3, [r3, #8]
 8016c58:	2207      	movs	r2, #7
 8016c5a:	4013      	ands	r3, r2
 8016c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	2b06      	cmp	r3, #6
 8016c62:	d010      	beq.n	8016c86 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	681a      	ldr	r2, [r3, #0]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	2101      	movs	r1, #1
 8016c70:	430a      	orrs	r2, r1
 8016c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016c74:	e007      	b.n	8016c86 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	681a      	ldr	r2, [r3, #0]
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	2101      	movs	r1, #1
 8016c82:	430a      	orrs	r2, r1
 8016c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016c86:	2300      	movs	r3, #0
}
 8016c88:	0018      	movs	r0, r3
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	b004      	add	sp, #16
 8016c8e:	bd80      	pop	{r7, pc}
 8016c90:	40000400 	.word	0x40000400
 8016c94:	40010800 	.word	0x40010800
 8016c98:	40011400 	.word	0x40011400

08016c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b086      	sub	sp, #24
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	60f8      	str	r0, [r7, #12]
 8016ca4:	60b9      	str	r1, [r7, #8]
 8016ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016ca8:	2317      	movs	r3, #23
 8016caa:	18fb      	adds	r3, r7, r3
 8016cac:	2200      	movs	r2, #0
 8016cae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	2238      	movs	r2, #56	@ 0x38
 8016cb4:	5c9b      	ldrb	r3, [r3, r2]
 8016cb6:	2b01      	cmp	r3, #1
 8016cb8:	d101      	bne.n	8016cbe <HAL_TIM_PWM_ConfigChannel+0x22>
 8016cba:	2302      	movs	r3, #2
 8016cbc:	e0ad      	b.n	8016e1a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	2238      	movs	r2, #56	@ 0x38
 8016cc2:	2101      	movs	r1, #1
 8016cc4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2b0c      	cmp	r3, #12
 8016cca:	d100      	bne.n	8016cce <HAL_TIM_PWM_ConfigChannel+0x32>
 8016ccc:	e076      	b.n	8016dbc <HAL_TIM_PWM_ConfigChannel+0x120>
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	2b0c      	cmp	r3, #12
 8016cd2:	d900      	bls.n	8016cd6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016cd4:	e095      	b.n	8016e02 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2b08      	cmp	r3, #8
 8016cda:	d04e      	beq.n	8016d7a <HAL_TIM_PWM_ConfigChannel+0xde>
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2b08      	cmp	r3, #8
 8016ce0:	d900      	bls.n	8016ce4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016ce2:	e08e      	b.n	8016e02 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d003      	beq.n	8016cf2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2b04      	cmp	r3, #4
 8016cee:	d021      	beq.n	8016d34 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016cf0:	e087      	b.n	8016e02 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	68ba      	ldr	r2, [r7, #8]
 8016cf8:	0011      	movs	r1, r2
 8016cfa:	0018      	movs	r0, r3
 8016cfc:	f000 f8f2 	bl	8016ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	699a      	ldr	r2, [r3, #24]
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	2108      	movs	r1, #8
 8016d0c:	430a      	orrs	r2, r1
 8016d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	699a      	ldr	r2, [r3, #24]
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	2104      	movs	r1, #4
 8016d1c:	438a      	bics	r2, r1
 8016d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	6999      	ldr	r1, [r3, #24]
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	68da      	ldr	r2, [r3, #12]
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	430a      	orrs	r2, r1
 8016d30:	619a      	str	r2, [r3, #24]
      break;
 8016d32:	e06b      	b.n	8016e0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	68ba      	ldr	r2, [r7, #8]
 8016d3a:	0011      	movs	r1, r2
 8016d3c:	0018      	movs	r0, r3
 8016d3e:	f000 f90d 	bl	8016f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	699a      	ldr	r2, [r3, #24]
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	2180      	movs	r1, #128	@ 0x80
 8016d4e:	0109      	lsls	r1, r1, #4
 8016d50:	430a      	orrs	r2, r1
 8016d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	699a      	ldr	r2, [r3, #24]
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	4931      	ldr	r1, [pc, #196]	@ (8016e24 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016d60:	400a      	ands	r2, r1
 8016d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	6999      	ldr	r1, [r3, #24]
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	68db      	ldr	r3, [r3, #12]
 8016d6e:	021a      	lsls	r2, r3, #8
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	430a      	orrs	r2, r1
 8016d76:	619a      	str	r2, [r3, #24]
      break;
 8016d78:	e048      	b.n	8016e0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	68ba      	ldr	r2, [r7, #8]
 8016d80:	0011      	movs	r1, r2
 8016d82:	0018      	movs	r0, r3
 8016d84:	f000 f92c 	bl	8016fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	69da      	ldr	r2, [r3, #28]
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	2108      	movs	r1, #8
 8016d94:	430a      	orrs	r2, r1
 8016d96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	69da      	ldr	r2, [r3, #28]
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	2104      	movs	r1, #4
 8016da4:	438a      	bics	r2, r1
 8016da6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	69d9      	ldr	r1, [r3, #28]
 8016dae:	68bb      	ldr	r3, [r7, #8]
 8016db0:	68da      	ldr	r2, [r3, #12]
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	430a      	orrs	r2, r1
 8016db8:	61da      	str	r2, [r3, #28]
      break;
 8016dba:	e027      	b.n	8016e0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	68ba      	ldr	r2, [r7, #8]
 8016dc2:	0011      	movs	r1, r2
 8016dc4:	0018      	movs	r0, r3
 8016dc6:	f000 f94b 	bl	8017060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	69da      	ldr	r2, [r3, #28]
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	2180      	movs	r1, #128	@ 0x80
 8016dd6:	0109      	lsls	r1, r1, #4
 8016dd8:	430a      	orrs	r2, r1
 8016dda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	69da      	ldr	r2, [r3, #28]
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	490f      	ldr	r1, [pc, #60]	@ (8016e24 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016de8:	400a      	ands	r2, r1
 8016dea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	69d9      	ldr	r1, [r3, #28]
 8016df2:	68bb      	ldr	r3, [r7, #8]
 8016df4:	68db      	ldr	r3, [r3, #12]
 8016df6:	021a      	lsls	r2, r3, #8
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	430a      	orrs	r2, r1
 8016dfe:	61da      	str	r2, [r3, #28]
      break;
 8016e00:	e004      	b.n	8016e0c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8016e02:	2317      	movs	r3, #23
 8016e04:	18fb      	adds	r3, r7, r3
 8016e06:	2201      	movs	r2, #1
 8016e08:	701a      	strb	r2, [r3, #0]
      break;
 8016e0a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2238      	movs	r2, #56	@ 0x38
 8016e10:	2100      	movs	r1, #0
 8016e12:	5499      	strb	r1, [r3, r2]

  return status;
 8016e14:	2317      	movs	r3, #23
 8016e16:	18fb      	adds	r3, r7, r3
 8016e18:	781b      	ldrb	r3, [r3, #0]
}
 8016e1a:	0018      	movs	r0, r3
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	b006      	add	sp, #24
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	46c0      	nop			@ (mov r8, r8)
 8016e24:	fffffbff 	.word	0xfffffbff

08016e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
 8016e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016e38:	687a      	ldr	r2, [r7, #4]
 8016e3a:	2380      	movs	r3, #128	@ 0x80
 8016e3c:	05db      	lsls	r3, r3, #23
 8016e3e:	429a      	cmp	r2, r3
 8016e40:	d00b      	beq.n	8016e5a <TIM_Base_SetConfig+0x32>
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	4a23      	ldr	r2, [pc, #140]	@ (8016ed4 <TIM_Base_SetConfig+0xac>)
 8016e46:	4293      	cmp	r3, r2
 8016e48:	d007      	beq.n	8016e5a <TIM_Base_SetConfig+0x32>
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	4a22      	ldr	r2, [pc, #136]	@ (8016ed8 <TIM_Base_SetConfig+0xb0>)
 8016e4e:	4293      	cmp	r3, r2
 8016e50:	d003      	beq.n	8016e5a <TIM_Base_SetConfig+0x32>
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	4a21      	ldr	r2, [pc, #132]	@ (8016edc <TIM_Base_SetConfig+0xb4>)
 8016e56:	4293      	cmp	r3, r2
 8016e58:	d108      	bne.n	8016e6c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	2270      	movs	r2, #112	@ 0x70
 8016e5e:	4393      	bics	r3, r2
 8016e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016e62:	683b      	ldr	r3, [r7, #0]
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	68fa      	ldr	r2, [r7, #12]
 8016e68:	4313      	orrs	r3, r2
 8016e6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016e6c:	687a      	ldr	r2, [r7, #4]
 8016e6e:	2380      	movs	r3, #128	@ 0x80
 8016e70:	05db      	lsls	r3, r3, #23
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d00b      	beq.n	8016e8e <TIM_Base_SetConfig+0x66>
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	4a16      	ldr	r2, [pc, #88]	@ (8016ed4 <TIM_Base_SetConfig+0xac>)
 8016e7a:	4293      	cmp	r3, r2
 8016e7c:	d007      	beq.n	8016e8e <TIM_Base_SetConfig+0x66>
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	4a15      	ldr	r2, [pc, #84]	@ (8016ed8 <TIM_Base_SetConfig+0xb0>)
 8016e82:	4293      	cmp	r3, r2
 8016e84:	d003      	beq.n	8016e8e <TIM_Base_SetConfig+0x66>
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	4a14      	ldr	r2, [pc, #80]	@ (8016edc <TIM_Base_SetConfig+0xb4>)
 8016e8a:	4293      	cmp	r3, r2
 8016e8c:	d108      	bne.n	8016ea0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	4a13      	ldr	r2, [pc, #76]	@ (8016ee0 <TIM_Base_SetConfig+0xb8>)
 8016e92:	4013      	ands	r3, r2
 8016e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016e96:	683b      	ldr	r3, [r7, #0]
 8016e98:	68db      	ldr	r3, [r3, #12]
 8016e9a:	68fa      	ldr	r2, [r7, #12]
 8016e9c:	4313      	orrs	r3, r2
 8016e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	2280      	movs	r2, #128	@ 0x80
 8016ea4:	4393      	bics	r3, r2
 8016ea6:	001a      	movs	r2, r3
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	691b      	ldr	r3, [r3, #16]
 8016eac:	4313      	orrs	r3, r2
 8016eae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	68fa      	ldr	r2, [r7, #12]
 8016eb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	689a      	ldr	r2, [r3, #8]
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016ebe:	683b      	ldr	r3, [r7, #0]
 8016ec0:	681a      	ldr	r2, [r3, #0]
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2201      	movs	r2, #1
 8016eca:	615a      	str	r2, [r3, #20]
}
 8016ecc:	46c0      	nop			@ (mov r8, r8)
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	b004      	add	sp, #16
 8016ed2:	bd80      	pop	{r7, pc}
 8016ed4:	40000400 	.word	0x40000400
 8016ed8:	40010800 	.word	0x40010800
 8016edc:	40011400 	.word	0x40011400
 8016ee0:	fffffcff 	.word	0xfffffcff

08016ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b086      	sub	sp, #24
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
 8016eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	6a1b      	ldr	r3, [r3, #32]
 8016ef2:	2201      	movs	r2, #1
 8016ef4:	4393      	bics	r3, r2
 8016ef6:	001a      	movs	r2, r3
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6a1b      	ldr	r3, [r3, #32]
 8016f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	685b      	ldr	r3, [r3, #4]
 8016f06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	699b      	ldr	r3, [r3, #24]
 8016f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	2270      	movs	r2, #112	@ 0x70
 8016f12:	4393      	bics	r3, r2
 8016f14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	2203      	movs	r2, #3
 8016f1a:	4393      	bics	r3, r2
 8016f1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016f1e:	683b      	ldr	r3, [r7, #0]
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	68fa      	ldr	r2, [r7, #12]
 8016f24:	4313      	orrs	r3, r2
 8016f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016f28:	697b      	ldr	r3, [r7, #20]
 8016f2a:	2202      	movs	r2, #2
 8016f2c:	4393      	bics	r3, r2
 8016f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016f30:	683b      	ldr	r3, [r7, #0]
 8016f32:	689b      	ldr	r3, [r3, #8]
 8016f34:	697a      	ldr	r2, [r7, #20]
 8016f36:	4313      	orrs	r3, r2
 8016f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	693a      	ldr	r2, [r7, #16]
 8016f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	68fa      	ldr	r2, [r7, #12]
 8016f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	685a      	ldr	r2, [r3, #4]
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	697a      	ldr	r2, [r7, #20]
 8016f52:	621a      	str	r2, [r3, #32]
}
 8016f54:	46c0      	nop			@ (mov r8, r8)
 8016f56:	46bd      	mov	sp, r7
 8016f58:	b006      	add	sp, #24
 8016f5a:	bd80      	pop	{r7, pc}

08016f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b086      	sub	sp, #24
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
 8016f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	6a1b      	ldr	r3, [r3, #32]
 8016f6a:	2210      	movs	r2, #16
 8016f6c:	4393      	bics	r3, r2
 8016f6e:	001a      	movs	r2, r3
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	6a1b      	ldr	r3, [r3, #32]
 8016f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	685b      	ldr	r3, [r3, #4]
 8016f7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	699b      	ldr	r3, [r3, #24]
 8016f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	4a13      	ldr	r2, [pc, #76]	@ (8016fd8 <TIM_OC2_SetConfig+0x7c>)
 8016f8a:	4013      	ands	r3, r2
 8016f8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	4a12      	ldr	r2, [pc, #72]	@ (8016fdc <TIM_OC2_SetConfig+0x80>)
 8016f92:	4013      	ands	r3, r2
 8016f94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016f96:	683b      	ldr	r3, [r7, #0]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	021b      	lsls	r3, r3, #8
 8016f9c:	68fa      	ldr	r2, [r7, #12]
 8016f9e:	4313      	orrs	r3, r2
 8016fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016fa2:	697b      	ldr	r3, [r7, #20]
 8016fa4:	2220      	movs	r2, #32
 8016fa6:	4393      	bics	r3, r2
 8016fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016faa:	683b      	ldr	r3, [r7, #0]
 8016fac:	689b      	ldr	r3, [r3, #8]
 8016fae:	011b      	lsls	r3, r3, #4
 8016fb0:	697a      	ldr	r2, [r7, #20]
 8016fb2:	4313      	orrs	r3, r2
 8016fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	693a      	ldr	r2, [r7, #16]
 8016fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	68fa      	ldr	r2, [r7, #12]
 8016fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	685a      	ldr	r2, [r3, #4]
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	697a      	ldr	r2, [r7, #20]
 8016fce:	621a      	str	r2, [r3, #32]
}
 8016fd0:	46c0      	nop			@ (mov r8, r8)
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	b006      	add	sp, #24
 8016fd6:	bd80      	pop	{r7, pc}
 8016fd8:	ffff8fff 	.word	0xffff8fff
 8016fdc:	fffffcff 	.word	0xfffffcff

08016fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b086      	sub	sp, #24
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
 8016fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	6a1b      	ldr	r3, [r3, #32]
 8016fee:	4a1a      	ldr	r2, [pc, #104]	@ (8017058 <TIM_OC3_SetConfig+0x78>)
 8016ff0:	401a      	ands	r2, r3
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6a1b      	ldr	r3, [r3, #32]
 8016ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	685b      	ldr	r3, [r3, #4]
 8017000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	69db      	ldr	r3, [r3, #28]
 8017006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2270      	movs	r2, #112	@ 0x70
 801700c:	4393      	bics	r3, r2
 801700e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	2203      	movs	r2, #3
 8017014:	4393      	bics	r3, r2
 8017016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	68fa      	ldr	r2, [r7, #12]
 801701e:	4313      	orrs	r3, r2
 8017020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017022:	697b      	ldr	r3, [r7, #20]
 8017024:	4a0d      	ldr	r2, [pc, #52]	@ (801705c <TIM_OC3_SetConfig+0x7c>)
 8017026:	4013      	ands	r3, r2
 8017028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	689b      	ldr	r3, [r3, #8]
 801702e:	021b      	lsls	r3, r3, #8
 8017030:	697a      	ldr	r2, [r7, #20]
 8017032:	4313      	orrs	r3, r2
 8017034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	693a      	ldr	r2, [r7, #16]
 801703a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	68fa      	ldr	r2, [r7, #12]
 8017040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	685a      	ldr	r2, [r3, #4]
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	697a      	ldr	r2, [r7, #20]
 801704e:	621a      	str	r2, [r3, #32]
}
 8017050:	46c0      	nop			@ (mov r8, r8)
 8017052:	46bd      	mov	sp, r7
 8017054:	b006      	add	sp, #24
 8017056:	bd80      	pop	{r7, pc}
 8017058:	fffffeff 	.word	0xfffffeff
 801705c:	fffffdff 	.word	0xfffffdff

08017060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b086      	sub	sp, #24
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
 8017068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6a1b      	ldr	r3, [r3, #32]
 801706e:	4a1b      	ldr	r2, [pc, #108]	@ (80170dc <TIM_OC4_SetConfig+0x7c>)
 8017070:	401a      	ands	r2, r3
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	6a1b      	ldr	r3, [r3, #32]
 801707a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	685b      	ldr	r3, [r3, #4]
 8017080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	69db      	ldr	r3, [r3, #28]
 8017086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	4a15      	ldr	r2, [pc, #84]	@ (80170e0 <TIM_OC4_SetConfig+0x80>)
 801708c:	4013      	ands	r3, r2
 801708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	4a14      	ldr	r2, [pc, #80]	@ (80170e4 <TIM_OC4_SetConfig+0x84>)
 8017094:	4013      	ands	r3, r2
 8017096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	021b      	lsls	r3, r3, #8
 801709e:	68fa      	ldr	r2, [r7, #12]
 80170a0:	4313      	orrs	r3, r2
 80170a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	4a10      	ldr	r2, [pc, #64]	@ (80170e8 <TIM_OC4_SetConfig+0x88>)
 80170a8:	4013      	ands	r3, r2
 80170aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80170ac:	683b      	ldr	r3, [r7, #0]
 80170ae:	689b      	ldr	r3, [r3, #8]
 80170b0:	031b      	lsls	r3, r3, #12
 80170b2:	697a      	ldr	r2, [r7, #20]
 80170b4:	4313      	orrs	r3, r2
 80170b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	693a      	ldr	r2, [r7, #16]
 80170bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	68fa      	ldr	r2, [r7, #12]
 80170c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	685a      	ldr	r2, [r3, #4]
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	697a      	ldr	r2, [r7, #20]
 80170d0:	621a      	str	r2, [r3, #32]
}
 80170d2:	46c0      	nop			@ (mov r8, r8)
 80170d4:	46bd      	mov	sp, r7
 80170d6:	b006      	add	sp, #24
 80170d8:	bd80      	pop	{r7, pc}
 80170da:	46c0      	nop			@ (mov r8, r8)
 80170dc:	ffffefff 	.word	0xffffefff
 80170e0:	ffff8fff 	.word	0xffff8fff
 80170e4:	fffffcff 	.word	0xfffffcff
 80170e8:	ffffdfff 	.word	0xffffdfff

080170ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b086      	sub	sp, #24
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	60f8      	str	r0, [r7, #12]
 80170f4:	60b9      	str	r1, [r7, #8]
 80170f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	221f      	movs	r2, #31
 80170fc:	4013      	ands	r3, r2
 80170fe:	2201      	movs	r2, #1
 8017100:	409a      	lsls	r2, r3
 8017102:	0013      	movs	r3, r2
 8017104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	6a1b      	ldr	r3, [r3, #32]
 801710a:	697a      	ldr	r2, [r7, #20]
 801710c:	43d2      	mvns	r2, r2
 801710e:	401a      	ands	r2, r3
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	6a1a      	ldr	r2, [r3, #32]
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	211f      	movs	r1, #31
 801711c:	400b      	ands	r3, r1
 801711e:	6879      	ldr	r1, [r7, #4]
 8017120:	4099      	lsls	r1, r3
 8017122:	000b      	movs	r3, r1
 8017124:	431a      	orrs	r2, r3
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	621a      	str	r2, [r3, #32]
}
 801712a:	46c0      	nop			@ (mov r8, r8)
 801712c:	46bd      	mov	sp, r7
 801712e:	b006      	add	sp, #24
 8017130:	bd80      	pop	{r7, pc}
	...

08017134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b084      	sub	sp, #16
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
 801713c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	2238      	movs	r2, #56	@ 0x38
 8017142:	5c9b      	ldrb	r3, [r3, r2]
 8017144:	2b01      	cmp	r3, #1
 8017146:	d101      	bne.n	801714c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017148:	2302      	movs	r3, #2
 801714a:	e047      	b.n	80171dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2238      	movs	r2, #56	@ 0x38
 8017150:	2101      	movs	r1, #1
 8017152:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2239      	movs	r2, #57	@ 0x39
 8017158:	2102      	movs	r1, #2
 801715a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	685b      	ldr	r3, [r3, #4]
 8017162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	689b      	ldr	r3, [r3, #8]
 801716a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	2270      	movs	r2, #112	@ 0x70
 8017170:	4393      	bics	r3, r2
 8017172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	68fa      	ldr	r2, [r7, #12]
 801717a:	4313      	orrs	r3, r2
 801717c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	68fa      	ldr	r2, [r7, #12]
 8017184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681a      	ldr	r2, [r3, #0]
 801718a:	2380      	movs	r3, #128	@ 0x80
 801718c:	05db      	lsls	r3, r3, #23
 801718e:	429a      	cmp	r2, r3
 8017190:	d00e      	beq.n	80171b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	4a13      	ldr	r2, [pc, #76]	@ (80171e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8017198:	4293      	cmp	r3, r2
 801719a:	d009      	beq.n	80171b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	4a11      	ldr	r2, [pc, #68]	@ (80171e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80171a2:	4293      	cmp	r3, r2
 80171a4:	d004      	beq.n	80171b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	4a10      	ldr	r2, [pc, #64]	@ (80171ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80171ac:	4293      	cmp	r3, r2
 80171ae:	d10c      	bne.n	80171ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	2280      	movs	r2, #128	@ 0x80
 80171b4:	4393      	bics	r3, r2
 80171b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	685b      	ldr	r3, [r3, #4]
 80171bc:	68ba      	ldr	r2, [r7, #8]
 80171be:	4313      	orrs	r3, r2
 80171c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	68ba      	ldr	r2, [r7, #8]
 80171c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	2239      	movs	r2, #57	@ 0x39
 80171ce:	2101      	movs	r1, #1
 80171d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	2238      	movs	r2, #56	@ 0x38
 80171d6:	2100      	movs	r1, #0
 80171d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80171da:	2300      	movs	r3, #0
}
 80171dc:	0018      	movs	r0, r3
 80171de:	46bd      	mov	sp, r7
 80171e0:	b004      	add	sp, #16
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	40000400 	.word	0x40000400
 80171e8:	40010800 	.word	0x40010800
 80171ec:	40011400 	.word	0x40011400

080171f0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b082      	sub	sp, #8
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
 80171f8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	2238      	movs	r2, #56	@ 0x38
 80171fe:	5c9b      	ldrb	r3, [r3, r2]
 8017200:	2b01      	cmp	r3, #1
 8017202:	d101      	bne.n	8017208 <HAL_TIMEx_RemapConfig+0x18>
 8017204:	2302      	movs	r3, #2
 8017206:	e00c      	b.n	8017222 <HAL_TIMEx_RemapConfig+0x32>
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2238      	movs	r2, #56	@ 0x38
 801720c:	2101      	movs	r1, #1
 801720e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	683a      	ldr	r2, [r7, #0]
 8017216:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	2238      	movs	r2, #56	@ 0x38
 801721c:	2100      	movs	r1, #0
 801721e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017220:	2300      	movs	r3, #0
}
 8017222:	0018      	movs	r0, r3
 8017224:	46bd      	mov	sp, r7
 8017226:	b002      	add	sp, #8
 8017228:	bd80      	pop	{r7, pc}
	...

0801722c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b082      	sub	sp, #8
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d101      	bne.n	801723e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801723a:	2301      	movs	r3, #1
 801723c:	e053      	b.n	80172e6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017242:	2b00      	cmp	r3, #0
 8017244:	d116      	bne.n	8017274 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	2278      	movs	r2, #120	@ 0x78
 801724a:	2100      	movs	r1, #0
 801724c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	0018      	movs	r0, r3
 8017252:	f000 fd65 	bl	8017d20 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	22b0      	movs	r2, #176	@ 0xb0
 801725a:	589b      	ldr	r3, [r3, r2]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d103      	bne.n	8017268 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	21b0      	movs	r1, #176	@ 0xb0
 8017264:	4a22      	ldr	r2, [pc, #136]	@ (80172f0 <HAL_UART_Init+0xc4>)
 8017266:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	22b0      	movs	r2, #176	@ 0xb0
 801726c:	589b      	ldr	r3, [r3, r2]
 801726e:	687a      	ldr	r2, [r7, #4]
 8017270:	0010      	movs	r0, r2
 8017272:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2224      	movs	r2, #36	@ 0x24
 8017278:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	681a      	ldr	r2, [r3, #0]
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	2101      	movs	r1, #1
 8017286:	438a      	bics	r2, r1
 8017288:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	0018      	movs	r0, r3
 801728e:	f000 fd8b 	bl	8017da8 <UART_SetConfig>
 8017292:	0003      	movs	r3, r0
 8017294:	2b01      	cmp	r3, #1
 8017296:	d101      	bne.n	801729c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8017298:	2301      	movs	r3, #1
 801729a:	e024      	b.n	80172e6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d003      	beq.n	80172ac <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	0018      	movs	r0, r3
 80172a8:	f001 f81c 	bl	80182e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	685a      	ldr	r2, [r3, #4]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	490f      	ldr	r1, [pc, #60]	@ (80172f4 <HAL_UART_Init+0xc8>)
 80172b8:	400a      	ands	r2, r1
 80172ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	689a      	ldr	r2, [r3, #8]
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	212a      	movs	r1, #42	@ 0x2a
 80172c8:	438a      	bics	r2, r1
 80172ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	681a      	ldr	r2, [r3, #0]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	2101      	movs	r1, #1
 80172d8:	430a      	orrs	r2, r1
 80172da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	0018      	movs	r0, r3
 80172e0:	f001 f8b4 	bl	801844c <UART_CheckIdleState>
 80172e4:	0003      	movs	r3, r0
}
 80172e6:	0018      	movs	r0, r3
 80172e8:	46bd      	mov	sp, r7
 80172ea:	b002      	add	sp, #8
 80172ec:	bd80      	pop	{r7, pc}
 80172ee:	46c0      	nop			@ (mov r8, r8)
 80172f0:	0800e305 	.word	0x0800e305
 80172f4:	ffffb7ff 	.word	0xffffb7ff

080172f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b08a      	sub	sp, #40	@ 0x28
 80172fc:	af02      	add	r7, sp, #8
 80172fe:	60f8      	str	r0, [r7, #12]
 8017300:	60b9      	str	r1, [r7, #8]
 8017302:	603b      	str	r3, [r7, #0]
 8017304:	1dbb      	adds	r3, r7, #6
 8017306:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801730c:	2b20      	cmp	r3, #32
 801730e:	d000      	beq.n	8017312 <HAL_UART_Transmit+0x1a>
 8017310:	e08c      	b.n	801742c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d003      	beq.n	8017320 <HAL_UART_Transmit+0x28>
 8017318:	1dbb      	adds	r3, r7, #6
 801731a:	881b      	ldrh	r3, [r3, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d101      	bne.n	8017324 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017320:	2301      	movs	r3, #1
 8017322:	e084      	b.n	801742e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	689a      	ldr	r2, [r3, #8]
 8017328:	2380      	movs	r3, #128	@ 0x80
 801732a:	015b      	lsls	r3, r3, #5
 801732c:	429a      	cmp	r2, r3
 801732e:	d109      	bne.n	8017344 <HAL_UART_Transmit+0x4c>
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	691b      	ldr	r3, [r3, #16]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d105      	bne.n	8017344 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	2201      	movs	r2, #1
 801733c:	4013      	ands	r3, r2
 801733e:	d001      	beq.n	8017344 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8017340:	2301      	movs	r3, #1
 8017342:	e074      	b.n	801742e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	2284      	movs	r2, #132	@ 0x84
 8017348:	2100      	movs	r1, #0
 801734a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	2221      	movs	r2, #33	@ 0x21
 8017350:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017352:	f7f7 fda5 	bl	800eea0 <HAL_GetTick>
 8017356:	0003      	movs	r3, r0
 8017358:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	1dba      	adds	r2, r7, #6
 801735e:	2150      	movs	r1, #80	@ 0x50
 8017360:	8812      	ldrh	r2, [r2, #0]
 8017362:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	1dba      	adds	r2, r7, #6
 8017368:	2152      	movs	r1, #82	@ 0x52
 801736a:	8812      	ldrh	r2, [r2, #0]
 801736c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	689a      	ldr	r2, [r3, #8]
 8017372:	2380      	movs	r3, #128	@ 0x80
 8017374:	015b      	lsls	r3, r3, #5
 8017376:	429a      	cmp	r2, r3
 8017378:	d108      	bne.n	801738c <HAL_UART_Transmit+0x94>
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	691b      	ldr	r3, [r3, #16]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d104      	bne.n	801738c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8017382:	2300      	movs	r3, #0
 8017384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017386:	68bb      	ldr	r3, [r7, #8]
 8017388:	61bb      	str	r3, [r7, #24]
 801738a:	e003      	b.n	8017394 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801738c:	68bb      	ldr	r3, [r7, #8]
 801738e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017390:	2300      	movs	r3, #0
 8017392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017394:	e02f      	b.n	80173f6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017396:	697a      	ldr	r2, [r7, #20]
 8017398:	68f8      	ldr	r0, [r7, #12]
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	9300      	str	r3, [sp, #0]
 801739e:	0013      	movs	r3, r2
 80173a0:	2200      	movs	r2, #0
 80173a2:	2180      	movs	r1, #128	@ 0x80
 80173a4:	f001 f8fa 	bl	801859c <UART_WaitOnFlagUntilTimeout>
 80173a8:	1e03      	subs	r3, r0, #0
 80173aa:	d004      	beq.n	80173b6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	2220      	movs	r2, #32
 80173b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80173b2:	2303      	movs	r3, #3
 80173b4:	e03b      	b.n	801742e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80173b6:	69fb      	ldr	r3, [r7, #28]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d10b      	bne.n	80173d4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80173bc:	69bb      	ldr	r3, [r7, #24]
 80173be:	881b      	ldrh	r3, [r3, #0]
 80173c0:	001a      	movs	r2, r3
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	05d2      	lsls	r2, r2, #23
 80173c8:	0dd2      	lsrs	r2, r2, #23
 80173ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80173cc:	69bb      	ldr	r3, [r7, #24]
 80173ce:	3302      	adds	r3, #2
 80173d0:	61bb      	str	r3, [r7, #24]
 80173d2:	e007      	b.n	80173e4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80173d4:	69fb      	ldr	r3, [r7, #28]
 80173d6:	781a      	ldrb	r2, [r3, #0]
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80173de:	69fb      	ldr	r3, [r7, #28]
 80173e0:	3301      	adds	r3, #1
 80173e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	2252      	movs	r2, #82	@ 0x52
 80173e8:	5a9b      	ldrh	r3, [r3, r2]
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	3b01      	subs	r3, #1
 80173ee:	b299      	uxth	r1, r3
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2252      	movs	r2, #82	@ 0x52
 80173f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	2252      	movs	r2, #82	@ 0x52
 80173fa:	5a9b      	ldrh	r3, [r3, r2]
 80173fc:	b29b      	uxth	r3, r3
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d1c9      	bne.n	8017396 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017402:	697a      	ldr	r2, [r7, #20]
 8017404:	68f8      	ldr	r0, [r7, #12]
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	9300      	str	r3, [sp, #0]
 801740a:	0013      	movs	r3, r2
 801740c:	2200      	movs	r2, #0
 801740e:	2140      	movs	r1, #64	@ 0x40
 8017410:	f001 f8c4 	bl	801859c <UART_WaitOnFlagUntilTimeout>
 8017414:	1e03      	subs	r3, r0, #0
 8017416:	d004      	beq.n	8017422 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	2220      	movs	r2, #32
 801741c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801741e:	2303      	movs	r3, #3
 8017420:	e005      	b.n	801742e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	2220      	movs	r2, #32
 8017426:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8017428:	2300      	movs	r3, #0
 801742a:	e000      	b.n	801742e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801742c:	2302      	movs	r3, #2
  }
}
 801742e:	0018      	movs	r0, r3
 8017430:	46bd      	mov	sp, r7
 8017432:	b008      	add	sp, #32
 8017434:	bd80      	pop	{r7, pc}
	...

08017438 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b088      	sub	sp, #32
 801743c:	af00      	add	r7, sp, #0
 801743e:	60f8      	str	r0, [r7, #12]
 8017440:	60b9      	str	r1, [r7, #8]
 8017442:	1dbb      	adds	r3, r7, #6
 8017444:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	2280      	movs	r2, #128	@ 0x80
 801744a:	589b      	ldr	r3, [r3, r2]
 801744c:	2b20      	cmp	r3, #32
 801744e:	d14a      	bne.n	80174e6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d003      	beq.n	801745e <HAL_UART_Receive_IT+0x26>
 8017456:	1dbb      	adds	r3, r7, #6
 8017458:	881b      	ldrh	r3, [r3, #0]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d101      	bne.n	8017462 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801745e:	2301      	movs	r3, #1
 8017460:	e042      	b.n	80174e8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	689a      	ldr	r2, [r3, #8]
 8017466:	2380      	movs	r3, #128	@ 0x80
 8017468:	015b      	lsls	r3, r3, #5
 801746a:	429a      	cmp	r2, r3
 801746c:	d109      	bne.n	8017482 <HAL_UART_Receive_IT+0x4a>
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	691b      	ldr	r3, [r3, #16]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d105      	bne.n	8017482 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	2201      	movs	r2, #1
 801747a:	4013      	ands	r3, r2
 801747c:	d001      	beq.n	8017482 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801747e:	2301      	movs	r3, #1
 8017480:	e032      	b.n	80174e8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	2200      	movs	r2, #0
 8017486:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	4a18      	ldr	r2, [pc, #96]	@ (80174f0 <HAL_UART_Receive_IT+0xb8>)
 801748e:	4293      	cmp	r3, r2
 8017490:	d020      	beq.n	80174d4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	685a      	ldr	r2, [r3, #4]
 8017498:	2380      	movs	r3, #128	@ 0x80
 801749a:	041b      	lsls	r3, r3, #16
 801749c:	4013      	ands	r3, r2
 801749e:	d019      	beq.n	80174d4 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174a0:	f3ef 8310 	mrs	r3, PRIMASK
 80174a4:	613b      	str	r3, [r7, #16]
  return(result);
 80174a6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80174a8:	61fb      	str	r3, [r7, #28]
 80174aa:	2301      	movs	r3, #1
 80174ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174ae:	697b      	ldr	r3, [r7, #20]
 80174b0:	f383 8810 	msr	PRIMASK, r3
}
 80174b4:	46c0      	nop			@ (mov r8, r8)
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	681a      	ldr	r2, [r3, #0]
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	2180      	movs	r1, #128	@ 0x80
 80174c2:	04c9      	lsls	r1, r1, #19
 80174c4:	430a      	orrs	r2, r1
 80174c6:	601a      	str	r2, [r3, #0]
 80174c8:	69fb      	ldr	r3, [r7, #28]
 80174ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174cc:	69bb      	ldr	r3, [r7, #24]
 80174ce:	f383 8810 	msr	PRIMASK, r3
}
 80174d2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80174d4:	1dbb      	adds	r3, r7, #6
 80174d6:	881a      	ldrh	r2, [r3, #0]
 80174d8:	68b9      	ldr	r1, [r7, #8]
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	0018      	movs	r0, r3
 80174de:	f001 f8c7 	bl	8018670 <UART_Start_Receive_IT>
 80174e2:	0003      	movs	r3, r0
 80174e4:	e000      	b.n	80174e8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80174e6:	2302      	movs	r3, #2
  }
}
 80174e8:	0018      	movs	r0, r3
 80174ea:	46bd      	mov	sp, r7
 80174ec:	b008      	add	sp, #32
 80174ee:	bd80      	pop	{r7, pc}
 80174f0:	40004800 	.word	0x40004800

080174f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b088      	sub	sp, #32
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	60f8      	str	r0, [r7, #12]
 80174fc:	60b9      	str	r1, [r7, #8]
 80174fe:	1dbb      	adds	r3, r7, #6
 8017500:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017506:	2b20      	cmp	r3, #32
 8017508:	d000      	beq.n	801750c <HAL_UART_Transmit_DMA+0x18>
 801750a:	e077      	b.n	80175fc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d003      	beq.n	801751a <HAL_UART_Transmit_DMA+0x26>
 8017512:	1dbb      	adds	r3, r7, #6
 8017514:	881b      	ldrh	r3, [r3, #0]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d101      	bne.n	801751e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801751a:	2301      	movs	r3, #1
 801751c:	e06f      	b.n	80175fe <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	689a      	ldr	r2, [r3, #8]
 8017522:	2380      	movs	r3, #128	@ 0x80
 8017524:	015b      	lsls	r3, r3, #5
 8017526:	429a      	cmp	r2, r3
 8017528:	d109      	bne.n	801753e <HAL_UART_Transmit_DMA+0x4a>
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	691b      	ldr	r3, [r3, #16]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d105      	bne.n	801753e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	2201      	movs	r2, #1
 8017536:	4013      	ands	r3, r2
 8017538:	d001      	beq.n	801753e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801753a:	2301      	movs	r3, #1
 801753c:	e05f      	b.n	80175fe <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	68ba      	ldr	r2, [r7, #8]
 8017542:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	1dba      	adds	r2, r7, #6
 8017548:	2150      	movs	r1, #80	@ 0x50
 801754a:	8812      	ldrh	r2, [r2, #0]
 801754c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	1dba      	adds	r2, r7, #6
 8017552:	2152      	movs	r1, #82	@ 0x52
 8017554:	8812      	ldrh	r2, [r2, #0]
 8017556:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	2284      	movs	r2, #132	@ 0x84
 801755c:	2100      	movs	r1, #0
 801755e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	2221      	movs	r2, #33	@ 0x21
 8017564:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801756a:	2b00      	cmp	r3, #0
 801756c:	d027      	beq.n	80175be <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017572:	4a25      	ldr	r2, [pc, #148]	@ (8017608 <HAL_UART_Transmit_DMA+0x114>)
 8017574:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801757a:	4a24      	ldr	r2, [pc, #144]	@ (801760c <HAL_UART_Transmit_DMA+0x118>)
 801757c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017582:	4a23      	ldr	r2, [pc, #140]	@ (8017610 <HAL_UART_Transmit_DMA+0x11c>)
 8017584:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801758a:	2200      	movs	r2, #0
 801758c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017596:	0019      	movs	r1, r3
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	3328      	adds	r3, #40	@ 0x28
 801759e:	001a      	movs	r2, r3
 80175a0:	1dbb      	adds	r3, r7, #6
 80175a2:	881b      	ldrh	r3, [r3, #0]
 80175a4:	f7f8 f9ce 	bl	800f944 <HAL_DMA_Start_IT>
 80175a8:	1e03      	subs	r3, r0, #0
 80175aa:	d008      	beq.n	80175be <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	2284      	movs	r2, #132	@ 0x84
 80175b0:	2110      	movs	r1, #16
 80175b2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	2220      	movs	r2, #32
 80175b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80175ba:	2301      	movs	r3, #1
 80175bc:	e01f      	b.n	80175fe <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	2240      	movs	r2, #64	@ 0x40
 80175c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80175c6:	f3ef 8310 	mrs	r3, PRIMASK
 80175ca:	613b      	str	r3, [r7, #16]
  return(result);
 80175cc:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80175ce:	61fb      	str	r3, [r7, #28]
 80175d0:	2301      	movs	r3, #1
 80175d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175d4:	697b      	ldr	r3, [r7, #20]
 80175d6:	f383 8810 	msr	PRIMASK, r3
}
 80175da:	46c0      	nop			@ (mov r8, r8)
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	689a      	ldr	r2, [r3, #8]
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	2180      	movs	r1, #128	@ 0x80
 80175e8:	430a      	orrs	r2, r1
 80175ea:	609a      	str	r2, [r3, #8]
 80175ec:	69fb      	ldr	r3, [r7, #28]
 80175ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175f0:	69bb      	ldr	r3, [r7, #24]
 80175f2:	f383 8810 	msr	PRIMASK, r3
}
 80175f6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80175f8:	2300      	movs	r3, #0
 80175fa:	e000      	b.n	80175fe <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80175fc:	2302      	movs	r3, #2
  }
}
 80175fe:	0018      	movs	r0, r3
 8017600:	46bd      	mov	sp, r7
 8017602:	b008      	add	sp, #32
 8017604:	bd80      	pop	{r7, pc}
 8017606:	46c0      	nop			@ (mov r8, r8)
 8017608:	08018a55 	.word	0x08018a55
 801760c:	08018af1 	.word	0x08018af1
 8017610:	08018c91 	.word	0x08018c91

08017614 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b088      	sub	sp, #32
 8017618:	af00      	add	r7, sp, #0
 801761a:	60f8      	str	r0, [r7, #12]
 801761c:	60b9      	str	r1, [r7, #8]
 801761e:	1dbb      	adds	r3, r7, #6
 8017620:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2280      	movs	r2, #128	@ 0x80
 8017626:	589b      	ldr	r3, [r3, r2]
 8017628:	2b20      	cmp	r3, #32
 801762a:	d14a      	bne.n	80176c2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d003      	beq.n	801763a <HAL_UART_Receive_DMA+0x26>
 8017632:	1dbb      	adds	r3, r7, #6
 8017634:	881b      	ldrh	r3, [r3, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d101      	bne.n	801763e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801763a:	2301      	movs	r3, #1
 801763c:	e042      	b.n	80176c4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	689a      	ldr	r2, [r3, #8]
 8017642:	2380      	movs	r3, #128	@ 0x80
 8017644:	015b      	lsls	r3, r3, #5
 8017646:	429a      	cmp	r2, r3
 8017648:	d109      	bne.n	801765e <HAL_UART_Receive_DMA+0x4a>
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	691b      	ldr	r3, [r3, #16]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d105      	bne.n	801765e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017652:	68bb      	ldr	r3, [r7, #8]
 8017654:	2201      	movs	r2, #1
 8017656:	4013      	ands	r3, r2
 8017658:	d001      	beq.n	801765e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801765a:	2301      	movs	r3, #1
 801765c:	e032      	b.n	80176c4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	2200      	movs	r2, #0
 8017662:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	4a18      	ldr	r2, [pc, #96]	@ (80176cc <HAL_UART_Receive_DMA+0xb8>)
 801766a:	4293      	cmp	r3, r2
 801766c:	d020      	beq.n	80176b0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	685a      	ldr	r2, [r3, #4]
 8017674:	2380      	movs	r3, #128	@ 0x80
 8017676:	041b      	lsls	r3, r3, #16
 8017678:	4013      	ands	r3, r2
 801767a:	d019      	beq.n	80176b0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801767c:	f3ef 8310 	mrs	r3, PRIMASK
 8017680:	613b      	str	r3, [r7, #16]
  return(result);
 8017682:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017684:	61fb      	str	r3, [r7, #28]
 8017686:	2301      	movs	r3, #1
 8017688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801768a:	697b      	ldr	r3, [r7, #20]
 801768c:	f383 8810 	msr	PRIMASK, r3
}
 8017690:	46c0      	nop			@ (mov r8, r8)
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	681a      	ldr	r2, [r3, #0]
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	2180      	movs	r1, #128	@ 0x80
 801769e:	04c9      	lsls	r1, r1, #19
 80176a0:	430a      	orrs	r2, r1
 80176a2:	601a      	str	r2, [r3, #0]
 80176a4:	69fb      	ldr	r3, [r7, #28]
 80176a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176a8:	69bb      	ldr	r3, [r7, #24]
 80176aa:	f383 8810 	msr	PRIMASK, r3
}
 80176ae:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80176b0:	1dbb      	adds	r3, r7, #6
 80176b2:	881a      	ldrh	r2, [r3, #0]
 80176b4:	68b9      	ldr	r1, [r7, #8]
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	0018      	movs	r0, r3
 80176ba:	f001 f8a3 	bl	8018804 <UART_Start_Receive_DMA>
 80176be:	0003      	movs	r3, r0
 80176c0:	e000      	b.n	80176c4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80176c2:	2302      	movs	r3, #2
  }
}
 80176c4:	0018      	movs	r0, r3
 80176c6:	46bd      	mov	sp, r7
 80176c8:	b008      	add	sp, #32
 80176ca:	bd80      	pop	{r7, pc}
 80176cc:	40004800 	.word	0x40004800

080176d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80176d0:	b590      	push	{r4, r7, lr}
 80176d2:	b0ab      	sub	sp, #172	@ 0xac
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	69db      	ldr	r3, [r3, #28]
 80176de:	22a4      	movs	r2, #164	@ 0xa4
 80176e0:	18b9      	adds	r1, r7, r2
 80176e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	20a0      	movs	r0, #160	@ 0xa0
 80176ec:	1839      	adds	r1, r7, r0
 80176ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	689b      	ldr	r3, [r3, #8]
 80176f6:	219c      	movs	r1, #156	@ 0x9c
 80176f8:	1879      	adds	r1, r7, r1
 80176fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80176fc:	0011      	movs	r1, r2
 80176fe:	18bb      	adds	r3, r7, r2
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	4a9c      	ldr	r2, [pc, #624]	@ (8017974 <HAL_UART_IRQHandler+0x2a4>)
 8017704:	4013      	ands	r3, r2
 8017706:	2298      	movs	r2, #152	@ 0x98
 8017708:	18bc      	adds	r4, r7, r2
 801770a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801770c:	18bb      	adds	r3, r7, r2
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d114      	bne.n	801773e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8017714:	187b      	adds	r3, r7, r1
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	2220      	movs	r2, #32
 801771a:	4013      	ands	r3, r2
 801771c:	d00f      	beq.n	801773e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801771e:	183b      	adds	r3, r7, r0
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	2220      	movs	r2, #32
 8017724:	4013      	ands	r3, r2
 8017726:	d00a      	beq.n	801773e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801772c:	2b00      	cmp	r3, #0
 801772e:	d100      	bne.n	8017732 <HAL_UART_IRQHandler+0x62>
 8017730:	e2aa      	b.n	8017c88 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017736:	687a      	ldr	r2, [r7, #4]
 8017738:	0010      	movs	r0, r2
 801773a:	4798      	blx	r3
      }
      return;
 801773c:	e2a4      	b.n	8017c88 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801773e:	2398      	movs	r3, #152	@ 0x98
 8017740:	18fb      	adds	r3, r7, r3
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d100      	bne.n	801774a <HAL_UART_IRQHandler+0x7a>
 8017748:	e11a      	b.n	8017980 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801774a:	239c      	movs	r3, #156	@ 0x9c
 801774c:	18fb      	adds	r3, r7, r3
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2201      	movs	r2, #1
 8017752:	4013      	ands	r3, r2
 8017754:	d106      	bne.n	8017764 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8017756:	23a0      	movs	r3, #160	@ 0xa0
 8017758:	18fb      	adds	r3, r7, r3
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	4a86      	ldr	r2, [pc, #536]	@ (8017978 <HAL_UART_IRQHandler+0x2a8>)
 801775e:	4013      	ands	r3, r2
 8017760:	d100      	bne.n	8017764 <HAL_UART_IRQHandler+0x94>
 8017762:	e10d      	b.n	8017980 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017764:	23a4      	movs	r3, #164	@ 0xa4
 8017766:	18fb      	adds	r3, r7, r3
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	2201      	movs	r2, #1
 801776c:	4013      	ands	r3, r2
 801776e:	d012      	beq.n	8017796 <HAL_UART_IRQHandler+0xc6>
 8017770:	23a0      	movs	r3, #160	@ 0xa0
 8017772:	18fb      	adds	r3, r7, r3
 8017774:	681a      	ldr	r2, [r3, #0]
 8017776:	2380      	movs	r3, #128	@ 0x80
 8017778:	005b      	lsls	r3, r3, #1
 801777a:	4013      	ands	r3, r2
 801777c:	d00b      	beq.n	8017796 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	2201      	movs	r2, #1
 8017784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	2284      	movs	r2, #132	@ 0x84
 801778a:	589b      	ldr	r3, [r3, r2]
 801778c:	2201      	movs	r2, #1
 801778e:	431a      	orrs	r2, r3
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2184      	movs	r1, #132	@ 0x84
 8017794:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017796:	23a4      	movs	r3, #164	@ 0xa4
 8017798:	18fb      	adds	r3, r7, r3
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	2202      	movs	r2, #2
 801779e:	4013      	ands	r3, r2
 80177a0:	d011      	beq.n	80177c6 <HAL_UART_IRQHandler+0xf6>
 80177a2:	239c      	movs	r3, #156	@ 0x9c
 80177a4:	18fb      	adds	r3, r7, r3
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	2201      	movs	r2, #1
 80177aa:	4013      	ands	r3, r2
 80177ac:	d00b      	beq.n	80177c6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	2202      	movs	r2, #2
 80177b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	2284      	movs	r2, #132	@ 0x84
 80177ba:	589b      	ldr	r3, [r3, r2]
 80177bc:	2204      	movs	r2, #4
 80177be:	431a      	orrs	r2, r3
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2184      	movs	r1, #132	@ 0x84
 80177c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80177c6:	23a4      	movs	r3, #164	@ 0xa4
 80177c8:	18fb      	adds	r3, r7, r3
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	2204      	movs	r2, #4
 80177ce:	4013      	ands	r3, r2
 80177d0:	d011      	beq.n	80177f6 <HAL_UART_IRQHandler+0x126>
 80177d2:	239c      	movs	r3, #156	@ 0x9c
 80177d4:	18fb      	adds	r3, r7, r3
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	2201      	movs	r2, #1
 80177da:	4013      	ands	r3, r2
 80177dc:	d00b      	beq.n	80177f6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	2204      	movs	r2, #4
 80177e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	2284      	movs	r2, #132	@ 0x84
 80177ea:	589b      	ldr	r3, [r3, r2]
 80177ec:	2202      	movs	r2, #2
 80177ee:	431a      	orrs	r2, r3
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2184      	movs	r1, #132	@ 0x84
 80177f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80177f6:	23a4      	movs	r3, #164	@ 0xa4
 80177f8:	18fb      	adds	r3, r7, r3
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	2208      	movs	r2, #8
 80177fe:	4013      	ands	r3, r2
 8017800:	d017      	beq.n	8017832 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017802:	23a0      	movs	r3, #160	@ 0xa0
 8017804:	18fb      	adds	r3, r7, r3
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	2220      	movs	r2, #32
 801780a:	4013      	ands	r3, r2
 801780c:	d105      	bne.n	801781a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801780e:	239c      	movs	r3, #156	@ 0x9c
 8017810:	18fb      	adds	r3, r7, r3
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	2201      	movs	r2, #1
 8017816:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017818:	d00b      	beq.n	8017832 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	2208      	movs	r2, #8
 8017820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	2284      	movs	r2, #132	@ 0x84
 8017826:	589b      	ldr	r3, [r3, r2]
 8017828:	2208      	movs	r2, #8
 801782a:	431a      	orrs	r2, r3
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	2184      	movs	r1, #132	@ 0x84
 8017830:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017832:	23a4      	movs	r3, #164	@ 0xa4
 8017834:	18fb      	adds	r3, r7, r3
 8017836:	681a      	ldr	r2, [r3, #0]
 8017838:	2380      	movs	r3, #128	@ 0x80
 801783a:	011b      	lsls	r3, r3, #4
 801783c:	4013      	ands	r3, r2
 801783e:	d013      	beq.n	8017868 <HAL_UART_IRQHandler+0x198>
 8017840:	23a0      	movs	r3, #160	@ 0xa0
 8017842:	18fb      	adds	r3, r7, r3
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	2380      	movs	r3, #128	@ 0x80
 8017848:	04db      	lsls	r3, r3, #19
 801784a:	4013      	ands	r3, r2
 801784c:	d00c      	beq.n	8017868 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	2280      	movs	r2, #128	@ 0x80
 8017854:	0112      	lsls	r2, r2, #4
 8017856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	2284      	movs	r2, #132	@ 0x84
 801785c:	589b      	ldr	r3, [r3, r2]
 801785e:	2220      	movs	r2, #32
 8017860:	431a      	orrs	r2, r3
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	2184      	movs	r1, #132	@ 0x84
 8017866:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	2284      	movs	r2, #132	@ 0x84
 801786c:	589b      	ldr	r3, [r3, r2]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d100      	bne.n	8017874 <HAL_UART_IRQHandler+0x1a4>
 8017872:	e20b      	b.n	8017c8c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017874:	23a4      	movs	r3, #164	@ 0xa4
 8017876:	18fb      	adds	r3, r7, r3
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	2220      	movs	r2, #32
 801787c:	4013      	ands	r3, r2
 801787e:	d00e      	beq.n	801789e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017880:	23a0      	movs	r3, #160	@ 0xa0
 8017882:	18fb      	adds	r3, r7, r3
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	2220      	movs	r2, #32
 8017888:	4013      	ands	r3, r2
 801788a:	d008      	beq.n	801789e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017890:	2b00      	cmp	r3, #0
 8017892:	d004      	beq.n	801789e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017898:	687a      	ldr	r2, [r7, #4]
 801789a:	0010      	movs	r0, r2
 801789c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	2284      	movs	r2, #132	@ 0x84
 80178a2:	589b      	ldr	r3, [r3, r2]
 80178a4:	2194      	movs	r1, #148	@ 0x94
 80178a6:	187a      	adds	r2, r7, r1
 80178a8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	689b      	ldr	r3, [r3, #8]
 80178b0:	2240      	movs	r2, #64	@ 0x40
 80178b2:	4013      	ands	r3, r2
 80178b4:	2b40      	cmp	r3, #64	@ 0x40
 80178b6:	d004      	beq.n	80178c2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80178b8:	187b      	adds	r3, r7, r1
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	2228      	movs	r2, #40	@ 0x28
 80178be:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80178c0:	d04b      	beq.n	801795a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	0018      	movs	r0, r3
 80178c6:	f001 f861 	bl	801898c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	689b      	ldr	r3, [r3, #8]
 80178d0:	2240      	movs	r2, #64	@ 0x40
 80178d2:	4013      	ands	r3, r2
 80178d4:	2b40      	cmp	r3, #64	@ 0x40
 80178d6:	d139      	bne.n	801794c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178d8:	f3ef 8310 	mrs	r3, PRIMASK
 80178dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80178de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80178e0:	2090      	movs	r0, #144	@ 0x90
 80178e2:	183a      	adds	r2, r7, r0
 80178e4:	6013      	str	r3, [r2, #0]
 80178e6:	2301      	movs	r3, #1
 80178e8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80178ec:	f383 8810 	msr	PRIMASK, r3
}
 80178f0:	46c0      	nop			@ (mov r8, r8)
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	689a      	ldr	r2, [r3, #8]
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	2140      	movs	r1, #64	@ 0x40
 80178fe:	438a      	bics	r2, r1
 8017900:	609a      	str	r2, [r3, #8]
 8017902:	183b      	adds	r3, r7, r0
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801790a:	f383 8810 	msr	PRIMASK, r3
}
 801790e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017914:	2b00      	cmp	r3, #0
 8017916:	d012      	beq.n	801793e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801791c:	4a17      	ldr	r2, [pc, #92]	@ (801797c <HAL_UART_IRQHandler+0x2ac>)
 801791e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017924:	0018      	movs	r0, r3
 8017926:	f7f8 f8b3 	bl	800fa90 <HAL_DMA_Abort_IT>
 801792a:	1e03      	subs	r3, r0, #0
 801792c:	d020      	beq.n	8017970 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017938:	0018      	movs	r0, r3
 801793a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801793c:	e018      	b.n	8017970 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2298      	movs	r2, #152	@ 0x98
 8017942:	589b      	ldr	r3, [r3, r2]
 8017944:	687a      	ldr	r2, [r7, #4]
 8017946:	0010      	movs	r0, r2
 8017948:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801794a:	e011      	b.n	8017970 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	2298      	movs	r2, #152	@ 0x98
 8017950:	589b      	ldr	r3, [r3, r2]
 8017952:	687a      	ldr	r2, [r7, #4]
 8017954:	0010      	movs	r0, r2
 8017956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017958:	e00a      	b.n	8017970 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	2298      	movs	r2, #152	@ 0x98
 801795e:	589b      	ldr	r3, [r3, r2]
 8017960:	687a      	ldr	r2, [r7, #4]
 8017962:	0010      	movs	r0, r2
 8017964:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	2284      	movs	r2, #132	@ 0x84
 801796a:	2100      	movs	r1, #0
 801796c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801796e:	e18d      	b.n	8017c8c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017970:	46c0      	nop			@ (mov r8, r8)
    return;
 8017972:	e18b      	b.n	8017c8c <HAL_UART_IRQHandler+0x5bc>
 8017974:	0000080f 	.word	0x0000080f
 8017978:	04000120 	.word	0x04000120
 801797c:	08018d19 	.word	0x08018d19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017984:	2b01      	cmp	r3, #1
 8017986:	d000      	beq.n	801798a <HAL_UART_IRQHandler+0x2ba>
 8017988:	e13d      	b.n	8017c06 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801798a:	23a4      	movs	r3, #164	@ 0xa4
 801798c:	18fb      	adds	r3, r7, r3
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	2210      	movs	r2, #16
 8017992:	4013      	ands	r3, r2
 8017994:	d100      	bne.n	8017998 <HAL_UART_IRQHandler+0x2c8>
 8017996:	e136      	b.n	8017c06 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017998:	23a0      	movs	r3, #160	@ 0xa0
 801799a:	18fb      	adds	r3, r7, r3
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	2210      	movs	r2, #16
 80179a0:	4013      	ands	r3, r2
 80179a2:	d100      	bne.n	80179a6 <HAL_UART_IRQHandler+0x2d6>
 80179a4:	e12f      	b.n	8017c06 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	2210      	movs	r2, #16
 80179ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	689b      	ldr	r3, [r3, #8]
 80179b4:	2240      	movs	r2, #64	@ 0x40
 80179b6:	4013      	ands	r3, r2
 80179b8:	2b40      	cmp	r3, #64	@ 0x40
 80179ba:	d000      	beq.n	80179be <HAL_UART_IRQHandler+0x2ee>
 80179bc:	e0a2      	b.n	8017b04 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	685a      	ldr	r2, [r3, #4]
 80179c6:	217e      	movs	r1, #126	@ 0x7e
 80179c8:	187b      	adds	r3, r7, r1
 80179ca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80179cc:	187b      	adds	r3, r7, r1
 80179ce:	881b      	ldrh	r3, [r3, #0]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d100      	bne.n	80179d6 <HAL_UART_IRQHandler+0x306>
 80179d4:	e15c      	b.n	8017c90 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	2258      	movs	r2, #88	@ 0x58
 80179da:	5a9b      	ldrh	r3, [r3, r2]
 80179dc:	187a      	adds	r2, r7, r1
 80179de:	8812      	ldrh	r2, [r2, #0]
 80179e0:	429a      	cmp	r2, r3
 80179e2:	d300      	bcc.n	80179e6 <HAL_UART_IRQHandler+0x316>
 80179e4:	e154      	b.n	8017c90 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	187a      	adds	r2, r7, r1
 80179ea:	215a      	movs	r1, #90	@ 0x5a
 80179ec:	8812      	ldrh	r2, [r2, #0]
 80179ee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	2220      	movs	r2, #32
 80179fa:	4013      	ands	r3, r2
 80179fc:	d16f      	bne.n	8017ade <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179fe:	f3ef 8310 	mrs	r3, PRIMASK
 8017a02:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017a06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017a08:	2301      	movs	r3, #1
 8017a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a0e:	f383 8810 	msr	PRIMASK, r3
}
 8017a12:	46c0      	nop			@ (mov r8, r8)
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	681a      	ldr	r2, [r3, #0]
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	49a0      	ldr	r1, [pc, #640]	@ (8017ca0 <HAL_UART_IRQHandler+0x5d0>)
 8017a20:	400a      	ands	r2, r1
 8017a22:	601a      	str	r2, [r3, #0]
 8017a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a2a:	f383 8810 	msr	PRIMASK, r3
}
 8017a2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a30:	f3ef 8310 	mrs	r3, PRIMASK
 8017a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a38:	677b      	str	r3, [r7, #116]	@ 0x74
 8017a3a:	2301      	movs	r3, #1
 8017a3c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a40:	f383 8810 	msr	PRIMASK, r3
}
 8017a44:	46c0      	nop			@ (mov r8, r8)
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	689a      	ldr	r2, [r3, #8]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	2101      	movs	r1, #1
 8017a52:	438a      	bics	r2, r1
 8017a54:	609a      	str	r2, [r3, #8]
 8017a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017a58:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a5c:	f383 8810 	msr	PRIMASK, r3
}
 8017a60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a62:	f3ef 8310 	mrs	r3, PRIMASK
 8017a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017a6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8017a6c:	2301      	movs	r3, #1
 8017a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017a72:	f383 8810 	msr	PRIMASK, r3
}
 8017a76:	46c0      	nop			@ (mov r8, r8)
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	689a      	ldr	r2, [r3, #8]
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	2140      	movs	r1, #64	@ 0x40
 8017a84:	438a      	bics	r2, r1
 8017a86:	609a      	str	r2, [r3, #8]
 8017a88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017a8a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a8e:	f383 8810 	msr	PRIMASK, r3
}
 8017a92:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	2280      	movs	r2, #128	@ 0x80
 8017a98:	2120      	movs	r1, #32
 8017a9a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8017aa6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017aac:	2301      	movs	r3, #1
 8017aae:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017ab2:	f383 8810 	msr	PRIMASK, r3
}
 8017ab6:	46c0      	nop			@ (mov r8, r8)
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	681a      	ldr	r2, [r3, #0]
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	2110      	movs	r1, #16
 8017ac4:	438a      	bics	r2, r1
 8017ac6:	601a      	str	r2, [r3, #0]
 8017ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017ace:	f383 8810 	msr	PRIMASK, r3
}
 8017ad2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ad8:	0018      	movs	r0, r3
 8017ada:	f7f7 ff99 	bl	800fa10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	2202      	movs	r2, #2
 8017ae2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	22ac      	movs	r2, #172	@ 0xac
 8017ae8:	589b      	ldr	r3, [r3, r2]
 8017aea:	687a      	ldr	r2, [r7, #4]
 8017aec:	2158      	movs	r1, #88	@ 0x58
 8017aee:	5a51      	ldrh	r1, [r2, r1]
 8017af0:	687a      	ldr	r2, [r7, #4]
 8017af2:	205a      	movs	r0, #90	@ 0x5a
 8017af4:	5a12      	ldrh	r2, [r2, r0]
 8017af6:	b292      	uxth	r2, r2
 8017af8:	1a8a      	subs	r2, r1, r2
 8017afa:	b291      	uxth	r1, r2
 8017afc:	687a      	ldr	r2, [r7, #4]
 8017afe:	0010      	movs	r0, r2
 8017b00:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017b02:	e0c5      	b.n	8017c90 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	2258      	movs	r2, #88	@ 0x58
 8017b08:	5a99      	ldrh	r1, [r3, r2]
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	225a      	movs	r2, #90	@ 0x5a
 8017b0e:	5a9b      	ldrh	r3, [r3, r2]
 8017b10:	b29a      	uxth	r2, r3
 8017b12:	208e      	movs	r0, #142	@ 0x8e
 8017b14:	183b      	adds	r3, r7, r0
 8017b16:	1a8a      	subs	r2, r1, r2
 8017b18:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	225a      	movs	r2, #90	@ 0x5a
 8017b1e:	5a9b      	ldrh	r3, [r3, r2]
 8017b20:	b29b      	uxth	r3, r3
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d100      	bne.n	8017b28 <HAL_UART_IRQHandler+0x458>
 8017b26:	e0b5      	b.n	8017c94 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017b28:	183b      	adds	r3, r7, r0
 8017b2a:	881b      	ldrh	r3, [r3, #0]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d100      	bne.n	8017b32 <HAL_UART_IRQHandler+0x462>
 8017b30:	e0b0      	b.n	8017c94 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b32:	f3ef 8310 	mrs	r3, PRIMASK
 8017b36:	60fb      	str	r3, [r7, #12]
  return(result);
 8017b38:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017b3a:	2488      	movs	r4, #136	@ 0x88
 8017b3c:	193a      	adds	r2, r7, r4
 8017b3e:	6013      	str	r3, [r2, #0]
 8017b40:	2301      	movs	r3, #1
 8017b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b44:	693b      	ldr	r3, [r7, #16]
 8017b46:	f383 8810 	msr	PRIMASK, r3
}
 8017b4a:	46c0      	nop			@ (mov r8, r8)
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	681a      	ldr	r2, [r3, #0]
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	4953      	ldr	r1, [pc, #332]	@ (8017ca4 <HAL_UART_IRQHandler+0x5d4>)
 8017b58:	400a      	ands	r2, r1
 8017b5a:	601a      	str	r2, [r3, #0]
 8017b5c:	193b      	adds	r3, r7, r4
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	f383 8810 	msr	PRIMASK, r3
}
 8017b68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8017b6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8017b70:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b72:	2484      	movs	r4, #132	@ 0x84
 8017b74:	193a      	adds	r2, r7, r4
 8017b76:	6013      	str	r3, [r2, #0]
 8017b78:	2301      	movs	r3, #1
 8017b7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b7c:	69fb      	ldr	r3, [r7, #28]
 8017b7e:	f383 8810 	msr	PRIMASK, r3
}
 8017b82:	46c0      	nop			@ (mov r8, r8)
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	689a      	ldr	r2, [r3, #8]
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	2101      	movs	r1, #1
 8017b90:	438a      	bics	r2, r1
 8017b92:	609a      	str	r2, [r3, #8]
 8017b94:	193b      	adds	r3, r7, r4
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b9a:	6a3b      	ldr	r3, [r7, #32]
 8017b9c:	f383 8810 	msr	PRIMASK, r3
}
 8017ba0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	2280      	movs	r2, #128	@ 0x80
 8017ba6:	2120      	movs	r1, #32
 8017ba8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	2200      	movs	r2, #0
 8017bae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8017bba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017bbe:	2480      	movs	r4, #128	@ 0x80
 8017bc0:	193a      	adds	r2, r7, r4
 8017bc2:	6013      	str	r3, [r2, #0]
 8017bc4:	2301      	movs	r3, #1
 8017bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bca:	f383 8810 	msr	PRIMASK, r3
}
 8017bce:	46c0      	nop			@ (mov r8, r8)
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	681a      	ldr	r2, [r3, #0]
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	2110      	movs	r1, #16
 8017bdc:	438a      	bics	r2, r1
 8017bde:	601a      	str	r2, [r3, #0]
 8017be0:	193b      	adds	r3, r7, r4
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017be8:	f383 8810 	msr	PRIMASK, r3
}
 8017bec:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2202      	movs	r2, #2
 8017bf2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	22ac      	movs	r2, #172	@ 0xac
 8017bf8:	589b      	ldr	r3, [r3, r2]
 8017bfa:	183a      	adds	r2, r7, r0
 8017bfc:	8811      	ldrh	r1, [r2, #0]
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	0010      	movs	r0, r2
 8017c02:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017c04:	e046      	b.n	8017c94 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017c06:	23a4      	movs	r3, #164	@ 0xa4
 8017c08:	18fb      	adds	r3, r7, r3
 8017c0a:	681a      	ldr	r2, [r3, #0]
 8017c0c:	2380      	movs	r3, #128	@ 0x80
 8017c0e:	035b      	lsls	r3, r3, #13
 8017c10:	4013      	ands	r3, r2
 8017c12:	d012      	beq.n	8017c3a <HAL_UART_IRQHandler+0x56a>
 8017c14:	239c      	movs	r3, #156	@ 0x9c
 8017c16:	18fb      	adds	r3, r7, r3
 8017c18:	681a      	ldr	r2, [r3, #0]
 8017c1a:	2380      	movs	r3, #128	@ 0x80
 8017c1c:	03db      	lsls	r3, r3, #15
 8017c1e:	4013      	ands	r3, r2
 8017c20:	d00b      	beq.n	8017c3a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	2280      	movs	r2, #128	@ 0x80
 8017c28:	0352      	lsls	r2, r2, #13
 8017c2a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	22a8      	movs	r2, #168	@ 0xa8
 8017c30:	589b      	ldr	r3, [r3, r2]
 8017c32:	687a      	ldr	r2, [r7, #4]
 8017c34:	0010      	movs	r0, r2
 8017c36:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017c38:	e02f      	b.n	8017c9a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017c3a:	23a4      	movs	r3, #164	@ 0xa4
 8017c3c:	18fb      	adds	r3, r7, r3
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	2280      	movs	r2, #128	@ 0x80
 8017c42:	4013      	ands	r3, r2
 8017c44:	d00f      	beq.n	8017c66 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017c46:	23a0      	movs	r3, #160	@ 0xa0
 8017c48:	18fb      	adds	r3, r7, r3
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	2280      	movs	r2, #128	@ 0x80
 8017c4e:	4013      	ands	r3, r2
 8017c50:	d009      	beq.n	8017c66 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d01e      	beq.n	8017c98 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c5e:	687a      	ldr	r2, [r7, #4]
 8017c60:	0010      	movs	r0, r2
 8017c62:	4798      	blx	r3
    }
    return;
 8017c64:	e018      	b.n	8017c98 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017c66:	23a4      	movs	r3, #164	@ 0xa4
 8017c68:	18fb      	adds	r3, r7, r3
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	2240      	movs	r2, #64	@ 0x40
 8017c6e:	4013      	ands	r3, r2
 8017c70:	d013      	beq.n	8017c9a <HAL_UART_IRQHandler+0x5ca>
 8017c72:	23a0      	movs	r3, #160	@ 0xa0
 8017c74:	18fb      	adds	r3, r7, r3
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	2240      	movs	r2, #64	@ 0x40
 8017c7a:	4013      	ands	r3, r2
 8017c7c:	d00d      	beq.n	8017c9a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	0018      	movs	r0, r3
 8017c82:	f001 f862 	bl	8018d4a <UART_EndTransmit_IT>
    return;
 8017c86:	e008      	b.n	8017c9a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017c88:	46c0      	nop			@ (mov r8, r8)
 8017c8a:	e006      	b.n	8017c9a <HAL_UART_IRQHandler+0x5ca>
    return;
 8017c8c:	46c0      	nop			@ (mov r8, r8)
 8017c8e:	e004      	b.n	8017c9a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017c90:	46c0      	nop			@ (mov r8, r8)
 8017c92:	e002      	b.n	8017c9a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017c94:	46c0      	nop			@ (mov r8, r8)
 8017c96:	e000      	b.n	8017c9a <HAL_UART_IRQHandler+0x5ca>
    return;
 8017c98:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	b02b      	add	sp, #172	@ 0xac
 8017c9e:	bd90      	pop	{r4, r7, pc}
 8017ca0:	fffffeff 	.word	0xfffffeff
 8017ca4:	fffffedf 	.word	0xfffffedf

08017ca8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b082      	sub	sp, #8
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017cb0:	46c0      	nop			@ (mov r8, r8)
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	b002      	add	sp, #8
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b082      	sub	sp, #8
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017cc0:	46c0      	nop			@ (mov r8, r8)
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	b002      	add	sp, #8
 8017cc6:	bd80      	pop	{r7, pc}

08017cc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b082      	sub	sp, #8
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017cd0:	46c0      	nop			@ (mov r8, r8)
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	b002      	add	sp, #8
 8017cd6:	bd80      	pop	{r7, pc}

08017cd8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017ce0:	46c0      	nop			@ (mov r8, r8)
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	b002      	add	sp, #8
 8017ce6:	bd80      	pop	{r7, pc}

08017ce8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b082      	sub	sp, #8
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017cf0:	46c0      	nop			@ (mov r8, r8)
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	b002      	add	sp, #8
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017d00:	46c0      	nop			@ (mov r8, r8)
 8017d02:	46bd      	mov	sp, r7
 8017d04:	b002      	add	sp, #8
 8017d06:	bd80      	pop	{r7, pc}

08017d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b082      	sub	sp, #8
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
 8017d10:	000a      	movs	r2, r1
 8017d12:	1cbb      	adds	r3, r7, #2
 8017d14:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017d16:	46c0      	nop			@ (mov r8, r8)
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	b002      	add	sp, #8
 8017d1c:	bd80      	pop	{r7, pc}
	...

08017d20 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b082      	sub	sp, #8
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	2188      	movs	r1, #136	@ 0x88
 8017d2c:	4a14      	ldr	r2, [pc, #80]	@ (8017d80 <UART_InitCallbacksToDefault+0x60>)
 8017d2e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	218c      	movs	r1, #140	@ 0x8c
 8017d34:	4a13      	ldr	r2, [pc, #76]	@ (8017d84 <UART_InitCallbacksToDefault+0x64>)
 8017d36:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	2190      	movs	r1, #144	@ 0x90
 8017d3c:	4a12      	ldr	r2, [pc, #72]	@ (8017d88 <UART_InitCallbacksToDefault+0x68>)
 8017d3e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2194      	movs	r1, #148	@ 0x94
 8017d44:	4a11      	ldr	r2, [pc, #68]	@ (8017d8c <UART_InitCallbacksToDefault+0x6c>)
 8017d46:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2198      	movs	r1, #152	@ 0x98
 8017d4c:	4a10      	ldr	r2, [pc, #64]	@ (8017d90 <UART_InitCallbacksToDefault+0x70>)
 8017d4e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	219c      	movs	r1, #156	@ 0x9c
 8017d54:	4a0f      	ldr	r2, [pc, #60]	@ (8017d94 <UART_InitCallbacksToDefault+0x74>)
 8017d56:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	21a0      	movs	r1, #160	@ 0xa0
 8017d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8017d98 <UART_InitCallbacksToDefault+0x78>)
 8017d5e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	21a4      	movs	r1, #164	@ 0xa4
 8017d64:	4a0d      	ldr	r2, [pc, #52]	@ (8017d9c <UART_InitCallbacksToDefault+0x7c>)
 8017d66:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	21a8      	movs	r1, #168	@ 0xa8
 8017d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8017da0 <UART_InitCallbacksToDefault+0x80>)
 8017d6e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	21ac      	movs	r1, #172	@ 0xac
 8017d74:	4a0b      	ldr	r2, [pc, #44]	@ (8017da4 <UART_InitCallbacksToDefault+0x84>)
 8017d76:	505a      	str	r2, [r3, r1]

}
 8017d78:	46c0      	nop			@ (mov r8, r8)
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	b002      	add	sp, #8
 8017d7e:	bd80      	pop	{r7, pc}
 8017d80:	08017cb9 	.word	0x08017cb9
 8017d84:	08017ca9 	.word	0x08017ca9
 8017d88:	08017cc9 	.word	0x08017cc9
 8017d8c:	080082c5 	.word	0x080082c5
 8017d90:	08003d05 	.word	0x08003d05
 8017d94:	08017cd9 	.word	0x08017cd9
 8017d98:	08017ce9 	.word	0x08017ce9
 8017d9c:	08017cf9 	.word	0x08017cf9
 8017da0:	0801913d 	.word	0x0801913d
 8017da4:	08017d09 	.word	0x08017d09

08017da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017da8:	b5b0      	push	{r4, r5, r7, lr}
 8017daa:	b08e      	sub	sp, #56	@ 0x38
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017db0:	231a      	movs	r3, #26
 8017db2:	2218      	movs	r2, #24
 8017db4:	189b      	adds	r3, r3, r2
 8017db6:	19db      	adds	r3, r3, r7
 8017db8:	2200      	movs	r2, #0
 8017dba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017dbc:	69fb      	ldr	r3, [r7, #28]
 8017dbe:	689a      	ldr	r2, [r3, #8]
 8017dc0:	69fb      	ldr	r3, [r7, #28]
 8017dc2:	691b      	ldr	r3, [r3, #16]
 8017dc4:	431a      	orrs	r2, r3
 8017dc6:	69fb      	ldr	r3, [r7, #28]
 8017dc8:	695b      	ldr	r3, [r3, #20]
 8017dca:	431a      	orrs	r2, r3
 8017dcc:	69fb      	ldr	r3, [r7, #28]
 8017dce:	69db      	ldr	r3, [r3, #28]
 8017dd0:	4313      	orrs	r3, r2
 8017dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017dd4:	69fb      	ldr	r3, [r7, #28]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	4ac3      	ldr	r2, [pc, #780]	@ (80180e8 <UART_SetConfig+0x340>)
 8017ddc:	4013      	ands	r3, r2
 8017dde:	0019      	movs	r1, r3
 8017de0:	69fb      	ldr	r3, [r7, #28]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017de6:	430a      	orrs	r2, r1
 8017de8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017dea:	69fb      	ldr	r3, [r7, #28]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	685b      	ldr	r3, [r3, #4]
 8017df0:	4abe      	ldr	r2, [pc, #760]	@ (80180ec <UART_SetConfig+0x344>)
 8017df2:	4013      	ands	r3, r2
 8017df4:	0019      	movs	r1, r3
 8017df6:	69fb      	ldr	r3, [r7, #28]
 8017df8:	68da      	ldr	r2, [r3, #12]
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	430a      	orrs	r2, r1
 8017e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017e02:	69fb      	ldr	r3, [r7, #28]
 8017e04:	699b      	ldr	r3, [r3, #24]
 8017e06:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017e08:	69fb      	ldr	r3, [r7, #28]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	4ab8      	ldr	r2, [pc, #736]	@ (80180f0 <UART_SetConfig+0x348>)
 8017e0e:	4293      	cmp	r3, r2
 8017e10:	d004      	beq.n	8017e1c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017e12:	69fb      	ldr	r3, [r7, #28]
 8017e14:	6a1b      	ldr	r3, [r3, #32]
 8017e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e18:	4313      	orrs	r3, r2
 8017e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017e1c:	69fb      	ldr	r3, [r7, #28]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	689b      	ldr	r3, [r3, #8]
 8017e22:	4ab4      	ldr	r2, [pc, #720]	@ (80180f4 <UART_SetConfig+0x34c>)
 8017e24:	4013      	ands	r3, r2
 8017e26:	0019      	movs	r1, r3
 8017e28:	69fb      	ldr	r3, [r7, #28]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e2e:	430a      	orrs	r2, r1
 8017e30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017e32:	69fb      	ldr	r3, [r7, #28]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	4ab0      	ldr	r2, [pc, #704]	@ (80180f8 <UART_SetConfig+0x350>)
 8017e38:	4293      	cmp	r3, r2
 8017e3a:	d131      	bne.n	8017ea0 <UART_SetConfig+0xf8>
 8017e3c:	4baf      	ldr	r3, [pc, #700]	@ (80180fc <UART_SetConfig+0x354>)
 8017e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e40:	2203      	movs	r2, #3
 8017e42:	4013      	ands	r3, r2
 8017e44:	2b03      	cmp	r3, #3
 8017e46:	d01d      	beq.n	8017e84 <UART_SetConfig+0xdc>
 8017e48:	d823      	bhi.n	8017e92 <UART_SetConfig+0xea>
 8017e4a:	2b02      	cmp	r3, #2
 8017e4c:	d00c      	beq.n	8017e68 <UART_SetConfig+0xc0>
 8017e4e:	d820      	bhi.n	8017e92 <UART_SetConfig+0xea>
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d002      	beq.n	8017e5a <UART_SetConfig+0xb2>
 8017e54:	2b01      	cmp	r3, #1
 8017e56:	d00e      	beq.n	8017e76 <UART_SetConfig+0xce>
 8017e58:	e01b      	b.n	8017e92 <UART_SetConfig+0xea>
 8017e5a:	231b      	movs	r3, #27
 8017e5c:	2218      	movs	r2, #24
 8017e5e:	189b      	adds	r3, r3, r2
 8017e60:	19db      	adds	r3, r3, r7
 8017e62:	2201      	movs	r2, #1
 8017e64:	701a      	strb	r2, [r3, #0]
 8017e66:	e0b4      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017e68:	231b      	movs	r3, #27
 8017e6a:	2218      	movs	r2, #24
 8017e6c:	189b      	adds	r3, r3, r2
 8017e6e:	19db      	adds	r3, r3, r7
 8017e70:	2202      	movs	r2, #2
 8017e72:	701a      	strb	r2, [r3, #0]
 8017e74:	e0ad      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017e76:	231b      	movs	r3, #27
 8017e78:	2218      	movs	r2, #24
 8017e7a:	189b      	adds	r3, r3, r2
 8017e7c:	19db      	adds	r3, r3, r7
 8017e7e:	2204      	movs	r2, #4
 8017e80:	701a      	strb	r2, [r3, #0]
 8017e82:	e0a6      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017e84:	231b      	movs	r3, #27
 8017e86:	2218      	movs	r2, #24
 8017e88:	189b      	adds	r3, r3, r2
 8017e8a:	19db      	adds	r3, r3, r7
 8017e8c:	2208      	movs	r2, #8
 8017e8e:	701a      	strb	r2, [r3, #0]
 8017e90:	e09f      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017e92:	231b      	movs	r3, #27
 8017e94:	2218      	movs	r2, #24
 8017e96:	189b      	adds	r3, r3, r2
 8017e98:	19db      	adds	r3, r3, r7
 8017e9a:	2210      	movs	r2, #16
 8017e9c:	701a      	strb	r2, [r3, #0]
 8017e9e:	e098      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	4a96      	ldr	r2, [pc, #600]	@ (8018100 <UART_SetConfig+0x358>)
 8017ea6:	4293      	cmp	r3, r2
 8017ea8:	d131      	bne.n	8017f0e <UART_SetConfig+0x166>
 8017eaa:	4b94      	ldr	r3, [pc, #592]	@ (80180fc <UART_SetConfig+0x354>)
 8017eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017eae:	220c      	movs	r2, #12
 8017eb0:	4013      	ands	r3, r2
 8017eb2:	2b0c      	cmp	r3, #12
 8017eb4:	d01d      	beq.n	8017ef2 <UART_SetConfig+0x14a>
 8017eb6:	d823      	bhi.n	8017f00 <UART_SetConfig+0x158>
 8017eb8:	2b08      	cmp	r3, #8
 8017eba:	d00c      	beq.n	8017ed6 <UART_SetConfig+0x12e>
 8017ebc:	d820      	bhi.n	8017f00 <UART_SetConfig+0x158>
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d002      	beq.n	8017ec8 <UART_SetConfig+0x120>
 8017ec2:	2b04      	cmp	r3, #4
 8017ec4:	d00e      	beq.n	8017ee4 <UART_SetConfig+0x13c>
 8017ec6:	e01b      	b.n	8017f00 <UART_SetConfig+0x158>
 8017ec8:	231b      	movs	r3, #27
 8017eca:	2218      	movs	r2, #24
 8017ecc:	189b      	adds	r3, r3, r2
 8017ece:	19db      	adds	r3, r3, r7
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	701a      	strb	r2, [r3, #0]
 8017ed4:	e07d      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017ed6:	231b      	movs	r3, #27
 8017ed8:	2218      	movs	r2, #24
 8017eda:	189b      	adds	r3, r3, r2
 8017edc:	19db      	adds	r3, r3, r7
 8017ede:	2202      	movs	r2, #2
 8017ee0:	701a      	strb	r2, [r3, #0]
 8017ee2:	e076      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017ee4:	231b      	movs	r3, #27
 8017ee6:	2218      	movs	r2, #24
 8017ee8:	189b      	adds	r3, r3, r2
 8017eea:	19db      	adds	r3, r3, r7
 8017eec:	2204      	movs	r2, #4
 8017eee:	701a      	strb	r2, [r3, #0]
 8017ef0:	e06f      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017ef2:	231b      	movs	r3, #27
 8017ef4:	2218      	movs	r2, #24
 8017ef6:	189b      	adds	r3, r3, r2
 8017ef8:	19db      	adds	r3, r3, r7
 8017efa:	2208      	movs	r2, #8
 8017efc:	701a      	strb	r2, [r3, #0]
 8017efe:	e068      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017f00:	231b      	movs	r3, #27
 8017f02:	2218      	movs	r2, #24
 8017f04:	189b      	adds	r3, r3, r2
 8017f06:	19db      	adds	r3, r3, r7
 8017f08:	2210      	movs	r2, #16
 8017f0a:	701a      	strb	r2, [r3, #0]
 8017f0c:	e061      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017f0e:	69fb      	ldr	r3, [r7, #28]
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	4a7c      	ldr	r2, [pc, #496]	@ (8018104 <UART_SetConfig+0x35c>)
 8017f14:	4293      	cmp	r3, r2
 8017f16:	d106      	bne.n	8017f26 <UART_SetConfig+0x17e>
 8017f18:	231b      	movs	r3, #27
 8017f1a:	2218      	movs	r2, #24
 8017f1c:	189b      	adds	r3, r3, r2
 8017f1e:	19db      	adds	r3, r3, r7
 8017f20:	2200      	movs	r2, #0
 8017f22:	701a      	strb	r2, [r3, #0]
 8017f24:	e055      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017f26:	69fb      	ldr	r3, [r7, #28]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	4a77      	ldr	r2, [pc, #476]	@ (8018108 <UART_SetConfig+0x360>)
 8017f2c:	4293      	cmp	r3, r2
 8017f2e:	d106      	bne.n	8017f3e <UART_SetConfig+0x196>
 8017f30:	231b      	movs	r3, #27
 8017f32:	2218      	movs	r2, #24
 8017f34:	189b      	adds	r3, r3, r2
 8017f36:	19db      	adds	r3, r3, r7
 8017f38:	2200      	movs	r2, #0
 8017f3a:	701a      	strb	r2, [r3, #0]
 8017f3c:	e049      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017f3e:	69fb      	ldr	r3, [r7, #28]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	4a6b      	ldr	r2, [pc, #428]	@ (80180f0 <UART_SetConfig+0x348>)
 8017f44:	4293      	cmp	r3, r2
 8017f46:	d13e      	bne.n	8017fc6 <UART_SetConfig+0x21e>
 8017f48:	4b6c      	ldr	r3, [pc, #432]	@ (80180fc <UART_SetConfig+0x354>)
 8017f4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017f4c:	23c0      	movs	r3, #192	@ 0xc0
 8017f4e:	011b      	lsls	r3, r3, #4
 8017f50:	4013      	ands	r3, r2
 8017f52:	22c0      	movs	r2, #192	@ 0xc0
 8017f54:	0112      	lsls	r2, r2, #4
 8017f56:	4293      	cmp	r3, r2
 8017f58:	d027      	beq.n	8017faa <UART_SetConfig+0x202>
 8017f5a:	22c0      	movs	r2, #192	@ 0xc0
 8017f5c:	0112      	lsls	r2, r2, #4
 8017f5e:	4293      	cmp	r3, r2
 8017f60:	d82a      	bhi.n	8017fb8 <UART_SetConfig+0x210>
 8017f62:	2280      	movs	r2, #128	@ 0x80
 8017f64:	0112      	lsls	r2, r2, #4
 8017f66:	4293      	cmp	r3, r2
 8017f68:	d011      	beq.n	8017f8e <UART_SetConfig+0x1e6>
 8017f6a:	2280      	movs	r2, #128	@ 0x80
 8017f6c:	0112      	lsls	r2, r2, #4
 8017f6e:	4293      	cmp	r3, r2
 8017f70:	d822      	bhi.n	8017fb8 <UART_SetConfig+0x210>
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d004      	beq.n	8017f80 <UART_SetConfig+0x1d8>
 8017f76:	2280      	movs	r2, #128	@ 0x80
 8017f78:	00d2      	lsls	r2, r2, #3
 8017f7a:	4293      	cmp	r3, r2
 8017f7c:	d00e      	beq.n	8017f9c <UART_SetConfig+0x1f4>
 8017f7e:	e01b      	b.n	8017fb8 <UART_SetConfig+0x210>
 8017f80:	231b      	movs	r3, #27
 8017f82:	2218      	movs	r2, #24
 8017f84:	189b      	adds	r3, r3, r2
 8017f86:	19db      	adds	r3, r3, r7
 8017f88:	2200      	movs	r2, #0
 8017f8a:	701a      	strb	r2, [r3, #0]
 8017f8c:	e021      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017f8e:	231b      	movs	r3, #27
 8017f90:	2218      	movs	r2, #24
 8017f92:	189b      	adds	r3, r3, r2
 8017f94:	19db      	adds	r3, r3, r7
 8017f96:	2202      	movs	r2, #2
 8017f98:	701a      	strb	r2, [r3, #0]
 8017f9a:	e01a      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017f9c:	231b      	movs	r3, #27
 8017f9e:	2218      	movs	r2, #24
 8017fa0:	189b      	adds	r3, r3, r2
 8017fa2:	19db      	adds	r3, r3, r7
 8017fa4:	2204      	movs	r2, #4
 8017fa6:	701a      	strb	r2, [r3, #0]
 8017fa8:	e013      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017faa:	231b      	movs	r3, #27
 8017fac:	2218      	movs	r2, #24
 8017fae:	189b      	adds	r3, r3, r2
 8017fb0:	19db      	adds	r3, r3, r7
 8017fb2:	2208      	movs	r2, #8
 8017fb4:	701a      	strb	r2, [r3, #0]
 8017fb6:	e00c      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017fb8:	231b      	movs	r3, #27
 8017fba:	2218      	movs	r2, #24
 8017fbc:	189b      	adds	r3, r3, r2
 8017fbe:	19db      	adds	r3, r3, r7
 8017fc0:	2210      	movs	r2, #16
 8017fc2:	701a      	strb	r2, [r3, #0]
 8017fc4:	e005      	b.n	8017fd2 <UART_SetConfig+0x22a>
 8017fc6:	231b      	movs	r3, #27
 8017fc8:	2218      	movs	r2, #24
 8017fca:	189b      	adds	r3, r3, r2
 8017fcc:	19db      	adds	r3, r3, r7
 8017fce:	2210      	movs	r2, #16
 8017fd0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017fd2:	69fb      	ldr	r3, [r7, #28]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	4a46      	ldr	r2, [pc, #280]	@ (80180f0 <UART_SetConfig+0x348>)
 8017fd8:	4293      	cmp	r3, r2
 8017fda:	d000      	beq.n	8017fde <UART_SetConfig+0x236>
 8017fdc:	e09a      	b.n	8018114 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017fde:	231b      	movs	r3, #27
 8017fe0:	2218      	movs	r2, #24
 8017fe2:	189b      	adds	r3, r3, r2
 8017fe4:	19db      	adds	r3, r3, r7
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	2b08      	cmp	r3, #8
 8017fea:	d01d      	beq.n	8018028 <UART_SetConfig+0x280>
 8017fec:	dc20      	bgt.n	8018030 <UART_SetConfig+0x288>
 8017fee:	2b04      	cmp	r3, #4
 8017ff0:	d015      	beq.n	801801e <UART_SetConfig+0x276>
 8017ff2:	dc1d      	bgt.n	8018030 <UART_SetConfig+0x288>
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d002      	beq.n	8017ffe <UART_SetConfig+0x256>
 8017ff8:	2b02      	cmp	r3, #2
 8017ffa:	d005      	beq.n	8018008 <UART_SetConfig+0x260>
 8017ffc:	e018      	b.n	8018030 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017ffe:	f7fd fe4b 	bl	8015c98 <HAL_RCC_GetPCLK1Freq>
 8018002:	0003      	movs	r3, r0
 8018004:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018006:	e01c      	b.n	8018042 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018008:	4b3c      	ldr	r3, [pc, #240]	@ (80180fc <UART_SetConfig+0x354>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	2210      	movs	r2, #16
 801800e:	4013      	ands	r3, r2
 8018010:	d002      	beq.n	8018018 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018012:	4b3e      	ldr	r3, [pc, #248]	@ (801810c <UART_SetConfig+0x364>)
 8018014:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018016:	e014      	b.n	8018042 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8018018:	4b3d      	ldr	r3, [pc, #244]	@ (8018110 <UART_SetConfig+0x368>)
 801801a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801801c:	e011      	b.n	8018042 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801801e:	f7fd fd8b 	bl	8015b38 <HAL_RCC_GetSysClockFreq>
 8018022:	0003      	movs	r3, r0
 8018024:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018026:	e00c      	b.n	8018042 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018028:	2380      	movs	r3, #128	@ 0x80
 801802a:	021b      	lsls	r3, r3, #8
 801802c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801802e:	e008      	b.n	8018042 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8018030:	2300      	movs	r3, #0
 8018032:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018034:	231a      	movs	r3, #26
 8018036:	2218      	movs	r2, #24
 8018038:	189b      	adds	r3, r3, r2
 801803a:	19db      	adds	r3, r3, r7
 801803c:	2201      	movs	r2, #1
 801803e:	701a      	strb	r2, [r3, #0]
        break;
 8018040:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018044:	2b00      	cmp	r3, #0
 8018046:	d100      	bne.n	801804a <UART_SetConfig+0x2a2>
 8018048:	e133      	b.n	80182b2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801804a:	69fb      	ldr	r3, [r7, #28]
 801804c:	685a      	ldr	r2, [r3, #4]
 801804e:	0013      	movs	r3, r2
 8018050:	005b      	lsls	r3, r3, #1
 8018052:	189b      	adds	r3, r3, r2
 8018054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018056:	429a      	cmp	r2, r3
 8018058:	d305      	bcc.n	8018066 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801805a:	69fb      	ldr	r3, [r7, #28]
 801805c:	685b      	ldr	r3, [r3, #4]
 801805e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018062:	429a      	cmp	r2, r3
 8018064:	d906      	bls.n	8018074 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8018066:	231a      	movs	r3, #26
 8018068:	2218      	movs	r2, #24
 801806a:	189b      	adds	r3, r3, r2
 801806c:	19db      	adds	r3, r3, r7
 801806e:	2201      	movs	r2, #1
 8018070:	701a      	strb	r2, [r3, #0]
 8018072:	e11e      	b.n	80182b2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8018074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018076:	613b      	str	r3, [r7, #16]
 8018078:	2300      	movs	r3, #0
 801807a:	617b      	str	r3, [r7, #20]
 801807c:	6939      	ldr	r1, [r7, #16]
 801807e:	697a      	ldr	r2, [r7, #20]
 8018080:	000b      	movs	r3, r1
 8018082:	0e1b      	lsrs	r3, r3, #24
 8018084:	0010      	movs	r0, r2
 8018086:	0205      	lsls	r5, r0, #8
 8018088:	431d      	orrs	r5, r3
 801808a:	000b      	movs	r3, r1
 801808c:	021c      	lsls	r4, r3, #8
 801808e:	69fb      	ldr	r3, [r7, #28]
 8018090:	685b      	ldr	r3, [r3, #4]
 8018092:	085b      	lsrs	r3, r3, #1
 8018094:	60bb      	str	r3, [r7, #8]
 8018096:	2300      	movs	r3, #0
 8018098:	60fb      	str	r3, [r7, #12]
 801809a:	68b8      	ldr	r0, [r7, #8]
 801809c:	68f9      	ldr	r1, [r7, #12]
 801809e:	1900      	adds	r0, r0, r4
 80180a0:	4169      	adcs	r1, r5
 80180a2:	69fb      	ldr	r3, [r7, #28]
 80180a4:	685b      	ldr	r3, [r3, #4]
 80180a6:	603b      	str	r3, [r7, #0]
 80180a8:	2300      	movs	r3, #0
 80180aa:	607b      	str	r3, [r7, #4]
 80180ac:	683a      	ldr	r2, [r7, #0]
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	f7e8 fa66 	bl	8000580 <__aeabi_uldivmod>
 80180b4:	0002      	movs	r2, r0
 80180b6:	000b      	movs	r3, r1
 80180b8:	0013      	movs	r3, r2
 80180ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80180bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80180be:	23c0      	movs	r3, #192	@ 0xc0
 80180c0:	009b      	lsls	r3, r3, #2
 80180c2:	429a      	cmp	r2, r3
 80180c4:	d309      	bcc.n	80180da <UART_SetConfig+0x332>
 80180c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80180c8:	2380      	movs	r3, #128	@ 0x80
 80180ca:	035b      	lsls	r3, r3, #13
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d204      	bcs.n	80180da <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80180d0:	69fb      	ldr	r3, [r7, #28]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80180d6:	60da      	str	r2, [r3, #12]
 80180d8:	e0eb      	b.n	80182b2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80180da:	231a      	movs	r3, #26
 80180dc:	2218      	movs	r2, #24
 80180de:	189b      	adds	r3, r3, r2
 80180e0:	19db      	adds	r3, r3, r7
 80180e2:	2201      	movs	r2, #1
 80180e4:	701a      	strb	r2, [r3, #0]
 80180e6:	e0e4      	b.n	80182b2 <UART_SetConfig+0x50a>
 80180e8:	efff69f3 	.word	0xefff69f3
 80180ec:	ffffcfff 	.word	0xffffcfff
 80180f0:	40004800 	.word	0x40004800
 80180f4:	fffff4ff 	.word	0xfffff4ff
 80180f8:	40013800 	.word	0x40013800
 80180fc:	40021000 	.word	0x40021000
 8018100:	40004400 	.word	0x40004400
 8018104:	40004c00 	.word	0x40004c00
 8018108:	40005000 	.word	0x40005000
 801810c:	003d0900 	.word	0x003d0900
 8018110:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018114:	69fb      	ldr	r3, [r7, #28]
 8018116:	69da      	ldr	r2, [r3, #28]
 8018118:	2380      	movs	r3, #128	@ 0x80
 801811a:	021b      	lsls	r3, r3, #8
 801811c:	429a      	cmp	r2, r3
 801811e:	d000      	beq.n	8018122 <UART_SetConfig+0x37a>
 8018120:	e070      	b.n	8018204 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8018122:	231b      	movs	r3, #27
 8018124:	2218      	movs	r2, #24
 8018126:	189b      	adds	r3, r3, r2
 8018128:	19db      	adds	r3, r3, r7
 801812a:	781b      	ldrb	r3, [r3, #0]
 801812c:	2b08      	cmp	r3, #8
 801812e:	d822      	bhi.n	8018176 <UART_SetConfig+0x3ce>
 8018130:	009a      	lsls	r2, r3, #2
 8018132:	4b67      	ldr	r3, [pc, #412]	@ (80182d0 <UART_SetConfig+0x528>)
 8018134:	18d3      	adds	r3, r2, r3
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801813a:	f7fd fdad 	bl	8015c98 <HAL_RCC_GetPCLK1Freq>
 801813e:	0003      	movs	r3, r0
 8018140:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018142:	e021      	b.n	8018188 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018144:	f7fd fdbe 	bl	8015cc4 <HAL_RCC_GetPCLK2Freq>
 8018148:	0003      	movs	r3, r0
 801814a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801814c:	e01c      	b.n	8018188 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801814e:	4b61      	ldr	r3, [pc, #388]	@ (80182d4 <UART_SetConfig+0x52c>)
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	2210      	movs	r2, #16
 8018154:	4013      	ands	r3, r2
 8018156:	d002      	beq.n	801815e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018158:	4b5f      	ldr	r3, [pc, #380]	@ (80182d8 <UART_SetConfig+0x530>)
 801815a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801815c:	e014      	b.n	8018188 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801815e:	4b5f      	ldr	r3, [pc, #380]	@ (80182dc <UART_SetConfig+0x534>)
 8018160:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018162:	e011      	b.n	8018188 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018164:	f7fd fce8 	bl	8015b38 <HAL_RCC_GetSysClockFreq>
 8018168:	0003      	movs	r3, r0
 801816a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801816c:	e00c      	b.n	8018188 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801816e:	2380      	movs	r3, #128	@ 0x80
 8018170:	021b      	lsls	r3, r3, #8
 8018172:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018174:	e008      	b.n	8018188 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8018176:	2300      	movs	r3, #0
 8018178:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801817a:	231a      	movs	r3, #26
 801817c:	2218      	movs	r2, #24
 801817e:	189b      	adds	r3, r3, r2
 8018180:	19db      	adds	r3, r3, r7
 8018182:	2201      	movs	r2, #1
 8018184:	701a      	strb	r2, [r3, #0]
        break;
 8018186:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801818a:	2b00      	cmp	r3, #0
 801818c:	d100      	bne.n	8018190 <UART_SetConfig+0x3e8>
 801818e:	e090      	b.n	80182b2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8018190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018192:	005a      	lsls	r2, r3, #1
 8018194:	69fb      	ldr	r3, [r7, #28]
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	085b      	lsrs	r3, r3, #1
 801819a:	18d2      	adds	r2, r2, r3
 801819c:	69fb      	ldr	r3, [r7, #28]
 801819e:	685b      	ldr	r3, [r3, #4]
 80181a0:	0019      	movs	r1, r3
 80181a2:	0010      	movs	r0, r2
 80181a4:	f7e7 fffe 	bl	80001a4 <__udivsi3>
 80181a8:	0003      	movs	r3, r0
 80181aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80181ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181ae:	2b0f      	cmp	r3, #15
 80181b0:	d921      	bls.n	80181f6 <UART_SetConfig+0x44e>
 80181b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80181b4:	2380      	movs	r3, #128	@ 0x80
 80181b6:	025b      	lsls	r3, r3, #9
 80181b8:	429a      	cmp	r2, r3
 80181ba:	d21c      	bcs.n	80181f6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80181bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181be:	b29a      	uxth	r2, r3
 80181c0:	200e      	movs	r0, #14
 80181c2:	2418      	movs	r4, #24
 80181c4:	1903      	adds	r3, r0, r4
 80181c6:	19db      	adds	r3, r3, r7
 80181c8:	210f      	movs	r1, #15
 80181ca:	438a      	bics	r2, r1
 80181cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80181ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181d0:	085b      	lsrs	r3, r3, #1
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	2207      	movs	r2, #7
 80181d6:	4013      	ands	r3, r2
 80181d8:	b299      	uxth	r1, r3
 80181da:	1903      	adds	r3, r0, r4
 80181dc:	19db      	adds	r3, r3, r7
 80181de:	1902      	adds	r2, r0, r4
 80181e0:	19d2      	adds	r2, r2, r7
 80181e2:	8812      	ldrh	r2, [r2, #0]
 80181e4:	430a      	orrs	r2, r1
 80181e6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80181e8:	69fb      	ldr	r3, [r7, #28]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	1902      	adds	r2, r0, r4
 80181ee:	19d2      	adds	r2, r2, r7
 80181f0:	8812      	ldrh	r2, [r2, #0]
 80181f2:	60da      	str	r2, [r3, #12]
 80181f4:	e05d      	b.n	80182b2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80181f6:	231a      	movs	r3, #26
 80181f8:	2218      	movs	r2, #24
 80181fa:	189b      	adds	r3, r3, r2
 80181fc:	19db      	adds	r3, r3, r7
 80181fe:	2201      	movs	r2, #1
 8018200:	701a      	strb	r2, [r3, #0]
 8018202:	e056      	b.n	80182b2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018204:	231b      	movs	r3, #27
 8018206:	2218      	movs	r2, #24
 8018208:	189b      	adds	r3, r3, r2
 801820a:	19db      	adds	r3, r3, r7
 801820c:	781b      	ldrb	r3, [r3, #0]
 801820e:	2b08      	cmp	r3, #8
 8018210:	d822      	bhi.n	8018258 <UART_SetConfig+0x4b0>
 8018212:	009a      	lsls	r2, r3, #2
 8018214:	4b32      	ldr	r3, [pc, #200]	@ (80182e0 <UART_SetConfig+0x538>)
 8018216:	18d3      	adds	r3, r2, r3
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801821c:	f7fd fd3c 	bl	8015c98 <HAL_RCC_GetPCLK1Freq>
 8018220:	0003      	movs	r3, r0
 8018222:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018224:	e021      	b.n	801826a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018226:	f7fd fd4d 	bl	8015cc4 <HAL_RCC_GetPCLK2Freq>
 801822a:	0003      	movs	r3, r0
 801822c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801822e:	e01c      	b.n	801826a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018230:	4b28      	ldr	r3, [pc, #160]	@ (80182d4 <UART_SetConfig+0x52c>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	2210      	movs	r2, #16
 8018236:	4013      	ands	r3, r2
 8018238:	d002      	beq.n	8018240 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801823a:	4b27      	ldr	r3, [pc, #156]	@ (80182d8 <UART_SetConfig+0x530>)
 801823c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801823e:	e014      	b.n	801826a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8018240:	4b26      	ldr	r3, [pc, #152]	@ (80182dc <UART_SetConfig+0x534>)
 8018242:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018244:	e011      	b.n	801826a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018246:	f7fd fc77 	bl	8015b38 <HAL_RCC_GetSysClockFreq>
 801824a:	0003      	movs	r3, r0
 801824c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801824e:	e00c      	b.n	801826a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018250:	2380      	movs	r3, #128	@ 0x80
 8018252:	021b      	lsls	r3, r3, #8
 8018254:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018256:	e008      	b.n	801826a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8018258:	2300      	movs	r3, #0
 801825a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801825c:	231a      	movs	r3, #26
 801825e:	2218      	movs	r2, #24
 8018260:	189b      	adds	r3, r3, r2
 8018262:	19db      	adds	r3, r3, r7
 8018264:	2201      	movs	r2, #1
 8018266:	701a      	strb	r2, [r3, #0]
        break;
 8018268:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801826a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801826c:	2b00      	cmp	r3, #0
 801826e:	d020      	beq.n	80182b2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	685b      	ldr	r3, [r3, #4]
 8018274:	085a      	lsrs	r2, r3, #1
 8018276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018278:	18d2      	adds	r2, r2, r3
 801827a:	69fb      	ldr	r3, [r7, #28]
 801827c:	685b      	ldr	r3, [r3, #4]
 801827e:	0019      	movs	r1, r3
 8018280:	0010      	movs	r0, r2
 8018282:	f7e7 ff8f 	bl	80001a4 <__udivsi3>
 8018286:	0003      	movs	r3, r0
 8018288:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801828c:	2b0f      	cmp	r3, #15
 801828e:	d90a      	bls.n	80182a6 <UART_SetConfig+0x4fe>
 8018290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018292:	2380      	movs	r3, #128	@ 0x80
 8018294:	025b      	lsls	r3, r3, #9
 8018296:	429a      	cmp	r2, r3
 8018298:	d205      	bcs.n	80182a6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801829c:	b29a      	uxth	r2, r3
 801829e:	69fb      	ldr	r3, [r7, #28]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	60da      	str	r2, [r3, #12]
 80182a4:	e005      	b.n	80182b2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80182a6:	231a      	movs	r3, #26
 80182a8:	2218      	movs	r2, #24
 80182aa:	189b      	adds	r3, r3, r2
 80182ac:	19db      	adds	r3, r3, r7
 80182ae:	2201      	movs	r2, #1
 80182b0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80182b2:	69fb      	ldr	r3, [r7, #28]
 80182b4:	2200      	movs	r2, #0
 80182b6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80182b8:	69fb      	ldr	r3, [r7, #28]
 80182ba:	2200      	movs	r2, #0
 80182bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80182be:	231a      	movs	r3, #26
 80182c0:	2218      	movs	r2, #24
 80182c2:	189b      	adds	r3, r3, r2
 80182c4:	19db      	adds	r3, r3, r7
 80182c6:	781b      	ldrb	r3, [r3, #0]
}
 80182c8:	0018      	movs	r0, r3
 80182ca:	46bd      	mov	sp, r7
 80182cc:	b00e      	add	sp, #56	@ 0x38
 80182ce:	bdb0      	pop	{r4, r5, r7, pc}
 80182d0:	08025828 	.word	0x08025828
 80182d4:	40021000 	.word	0x40021000
 80182d8:	003d0900 	.word	0x003d0900
 80182dc:	00f42400 	.word	0x00f42400
 80182e0:	0802584c 	.word	0x0802584c

080182e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b082      	sub	sp, #8
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182f0:	2201      	movs	r2, #1
 80182f2:	4013      	ands	r3, r2
 80182f4:	d00b      	beq.n	801830e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	685b      	ldr	r3, [r3, #4]
 80182fc:	4a4a      	ldr	r2, [pc, #296]	@ (8018428 <UART_AdvFeatureConfig+0x144>)
 80182fe:	4013      	ands	r3, r2
 8018300:	0019      	movs	r1, r3
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	430a      	orrs	r2, r1
 801830c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018312:	2202      	movs	r2, #2
 8018314:	4013      	ands	r3, r2
 8018316:	d00b      	beq.n	8018330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	685b      	ldr	r3, [r3, #4]
 801831e:	4a43      	ldr	r2, [pc, #268]	@ (801842c <UART_AdvFeatureConfig+0x148>)
 8018320:	4013      	ands	r3, r2
 8018322:	0019      	movs	r1, r3
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	430a      	orrs	r2, r1
 801832e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018334:	2204      	movs	r2, #4
 8018336:	4013      	ands	r3, r2
 8018338:	d00b      	beq.n	8018352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	685b      	ldr	r3, [r3, #4]
 8018340:	4a3b      	ldr	r2, [pc, #236]	@ (8018430 <UART_AdvFeatureConfig+0x14c>)
 8018342:	4013      	ands	r3, r2
 8018344:	0019      	movs	r1, r3
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	430a      	orrs	r2, r1
 8018350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018356:	2208      	movs	r2, #8
 8018358:	4013      	ands	r3, r2
 801835a:	d00b      	beq.n	8018374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	685b      	ldr	r3, [r3, #4]
 8018362:	4a34      	ldr	r2, [pc, #208]	@ (8018434 <UART_AdvFeatureConfig+0x150>)
 8018364:	4013      	ands	r3, r2
 8018366:	0019      	movs	r1, r3
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	430a      	orrs	r2, r1
 8018372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018378:	2210      	movs	r2, #16
 801837a:	4013      	ands	r3, r2
 801837c:	d00b      	beq.n	8018396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	689b      	ldr	r3, [r3, #8]
 8018384:	4a2c      	ldr	r2, [pc, #176]	@ (8018438 <UART_AdvFeatureConfig+0x154>)
 8018386:	4013      	ands	r3, r2
 8018388:	0019      	movs	r1, r3
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	430a      	orrs	r2, r1
 8018394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801839a:	2220      	movs	r2, #32
 801839c:	4013      	ands	r3, r2
 801839e:	d00b      	beq.n	80183b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	689b      	ldr	r3, [r3, #8]
 80183a6:	4a25      	ldr	r2, [pc, #148]	@ (801843c <UART_AdvFeatureConfig+0x158>)
 80183a8:	4013      	ands	r3, r2
 80183aa:	0019      	movs	r1, r3
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	430a      	orrs	r2, r1
 80183b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183bc:	2240      	movs	r2, #64	@ 0x40
 80183be:	4013      	ands	r3, r2
 80183c0:	d01d      	beq.n	80183fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	685b      	ldr	r3, [r3, #4]
 80183c8:	4a1d      	ldr	r2, [pc, #116]	@ (8018440 <UART_AdvFeatureConfig+0x15c>)
 80183ca:	4013      	ands	r3, r2
 80183cc:	0019      	movs	r1, r3
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	430a      	orrs	r2, r1
 80183d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80183de:	2380      	movs	r3, #128	@ 0x80
 80183e0:	035b      	lsls	r3, r3, #13
 80183e2:	429a      	cmp	r2, r3
 80183e4:	d10b      	bne.n	80183fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	685b      	ldr	r3, [r3, #4]
 80183ec:	4a15      	ldr	r2, [pc, #84]	@ (8018444 <UART_AdvFeatureConfig+0x160>)
 80183ee:	4013      	ands	r3, r2
 80183f0:	0019      	movs	r1, r3
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	430a      	orrs	r2, r1
 80183fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018402:	2280      	movs	r2, #128	@ 0x80
 8018404:	4013      	ands	r3, r2
 8018406:	d00b      	beq.n	8018420 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	685b      	ldr	r3, [r3, #4]
 801840e:	4a0e      	ldr	r2, [pc, #56]	@ (8018448 <UART_AdvFeatureConfig+0x164>)
 8018410:	4013      	ands	r3, r2
 8018412:	0019      	movs	r1, r3
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	430a      	orrs	r2, r1
 801841e:	605a      	str	r2, [r3, #4]
  }
}
 8018420:	46c0      	nop			@ (mov r8, r8)
 8018422:	46bd      	mov	sp, r7
 8018424:	b002      	add	sp, #8
 8018426:	bd80      	pop	{r7, pc}
 8018428:	fffdffff 	.word	0xfffdffff
 801842c:	fffeffff 	.word	0xfffeffff
 8018430:	fffbffff 	.word	0xfffbffff
 8018434:	ffff7fff 	.word	0xffff7fff
 8018438:	ffffefff 	.word	0xffffefff
 801843c:	ffffdfff 	.word	0xffffdfff
 8018440:	ffefffff 	.word	0xffefffff
 8018444:	ff9fffff 	.word	0xff9fffff
 8018448:	fff7ffff 	.word	0xfff7ffff

0801844c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b092      	sub	sp, #72	@ 0x48
 8018450:	af02      	add	r7, sp, #8
 8018452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	2284      	movs	r2, #132	@ 0x84
 8018458:	2100      	movs	r1, #0
 801845a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801845c:	f7f6 fd20 	bl	800eea0 <HAL_GetTick>
 8018460:	0003      	movs	r3, r0
 8018462:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	2208      	movs	r2, #8
 801846c:	4013      	ands	r3, r2
 801846e:	2b08      	cmp	r3, #8
 8018470:	d12c      	bne.n	80184cc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018474:	2280      	movs	r2, #128	@ 0x80
 8018476:	0391      	lsls	r1, r2, #14
 8018478:	6878      	ldr	r0, [r7, #4]
 801847a:	4a46      	ldr	r2, [pc, #280]	@ (8018594 <UART_CheckIdleState+0x148>)
 801847c:	9200      	str	r2, [sp, #0]
 801847e:	2200      	movs	r2, #0
 8018480:	f000 f88c 	bl	801859c <UART_WaitOnFlagUntilTimeout>
 8018484:	1e03      	subs	r3, r0, #0
 8018486:	d021      	beq.n	80184cc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018488:	f3ef 8310 	mrs	r3, PRIMASK
 801848c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8018490:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018492:	2301      	movs	r3, #1
 8018494:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018498:	f383 8810 	msr	PRIMASK, r3
}
 801849c:	46c0      	nop			@ (mov r8, r8)
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	681a      	ldr	r2, [r3, #0]
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	2180      	movs	r1, #128	@ 0x80
 80184aa:	438a      	bics	r2, r1
 80184ac:	601a      	str	r2, [r3, #0]
 80184ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184b4:	f383 8810 	msr	PRIMASK, r3
}
 80184b8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	2220      	movs	r2, #32
 80184be:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	2278      	movs	r2, #120	@ 0x78
 80184c4:	2100      	movs	r1, #0
 80184c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80184c8:	2303      	movs	r3, #3
 80184ca:	e05f      	b.n	801858c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	2204      	movs	r2, #4
 80184d4:	4013      	ands	r3, r2
 80184d6:	2b04      	cmp	r3, #4
 80184d8:	d146      	bne.n	8018568 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80184da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184dc:	2280      	movs	r2, #128	@ 0x80
 80184de:	03d1      	lsls	r1, r2, #15
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	4a2c      	ldr	r2, [pc, #176]	@ (8018594 <UART_CheckIdleState+0x148>)
 80184e4:	9200      	str	r2, [sp, #0]
 80184e6:	2200      	movs	r2, #0
 80184e8:	f000 f858 	bl	801859c <UART_WaitOnFlagUntilTimeout>
 80184ec:	1e03      	subs	r3, r0, #0
 80184ee:	d03b      	beq.n	8018568 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184f0:	f3ef 8310 	mrs	r3, PRIMASK
 80184f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80184f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80184f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80184fa:	2301      	movs	r3, #1
 80184fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184fe:	693b      	ldr	r3, [r7, #16]
 8018500:	f383 8810 	msr	PRIMASK, r3
}
 8018504:	46c0      	nop			@ (mov r8, r8)
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	681a      	ldr	r2, [r3, #0]
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	4921      	ldr	r1, [pc, #132]	@ (8018598 <UART_CheckIdleState+0x14c>)
 8018512:	400a      	ands	r2, r1
 8018514:	601a      	str	r2, [r3, #0]
 8018516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018518:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801851a:	697b      	ldr	r3, [r7, #20]
 801851c:	f383 8810 	msr	PRIMASK, r3
}
 8018520:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018522:	f3ef 8310 	mrs	r3, PRIMASK
 8018526:	61bb      	str	r3, [r7, #24]
  return(result);
 8018528:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801852a:	633b      	str	r3, [r7, #48]	@ 0x30
 801852c:	2301      	movs	r3, #1
 801852e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018530:	69fb      	ldr	r3, [r7, #28]
 8018532:	f383 8810 	msr	PRIMASK, r3
}
 8018536:	46c0      	nop			@ (mov r8, r8)
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	689a      	ldr	r2, [r3, #8]
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	2101      	movs	r1, #1
 8018544:	438a      	bics	r2, r1
 8018546:	609a      	str	r2, [r3, #8]
 8018548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801854a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801854c:	6a3b      	ldr	r3, [r7, #32]
 801854e:	f383 8810 	msr	PRIMASK, r3
}
 8018552:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2280      	movs	r2, #128	@ 0x80
 8018558:	2120      	movs	r1, #32
 801855a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	2278      	movs	r2, #120	@ 0x78
 8018560:	2100      	movs	r1, #0
 8018562:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018564:	2303      	movs	r3, #3
 8018566:	e011      	b.n	801858c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2220      	movs	r2, #32
 801856c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	2280      	movs	r2, #128	@ 0x80
 8018572:	2120      	movs	r1, #32
 8018574:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	2200      	movs	r2, #0
 801857a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	2200      	movs	r2, #0
 8018580:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	2278      	movs	r2, #120	@ 0x78
 8018586:	2100      	movs	r1, #0
 8018588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801858a:	2300      	movs	r3, #0
}
 801858c:	0018      	movs	r0, r3
 801858e:	46bd      	mov	sp, r7
 8018590:	b010      	add	sp, #64	@ 0x40
 8018592:	bd80      	pop	{r7, pc}
 8018594:	01ffffff 	.word	0x01ffffff
 8018598:	fffffedf 	.word	0xfffffedf

0801859c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b084      	sub	sp, #16
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	60f8      	str	r0, [r7, #12]
 80185a4:	60b9      	str	r1, [r7, #8]
 80185a6:	603b      	str	r3, [r7, #0]
 80185a8:	1dfb      	adds	r3, r7, #7
 80185aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80185ac:	e04b      	b.n	8018646 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80185ae:	69bb      	ldr	r3, [r7, #24]
 80185b0:	3301      	adds	r3, #1
 80185b2:	d048      	beq.n	8018646 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80185b4:	f7f6 fc74 	bl	800eea0 <HAL_GetTick>
 80185b8:	0002      	movs	r2, r0
 80185ba:	683b      	ldr	r3, [r7, #0]
 80185bc:	1ad3      	subs	r3, r2, r3
 80185be:	69ba      	ldr	r2, [r7, #24]
 80185c0:	429a      	cmp	r2, r3
 80185c2:	d302      	bcc.n	80185ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80185c4:	69bb      	ldr	r3, [r7, #24]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d101      	bne.n	80185ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80185ca:	2303      	movs	r3, #3
 80185cc:	e04b      	b.n	8018666 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2204      	movs	r2, #4
 80185d6:	4013      	ands	r3, r2
 80185d8:	d035      	beq.n	8018646 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	69db      	ldr	r3, [r3, #28]
 80185e0:	2208      	movs	r2, #8
 80185e2:	4013      	ands	r3, r2
 80185e4:	2b08      	cmp	r3, #8
 80185e6:	d111      	bne.n	801860c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	2208      	movs	r2, #8
 80185ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	0018      	movs	r0, r3
 80185f4:	f000 f9ca 	bl	801898c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	2284      	movs	r2, #132	@ 0x84
 80185fc:	2108      	movs	r1, #8
 80185fe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	2278      	movs	r2, #120	@ 0x78
 8018604:	2100      	movs	r1, #0
 8018606:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8018608:	2301      	movs	r3, #1
 801860a:	e02c      	b.n	8018666 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	69da      	ldr	r2, [r3, #28]
 8018612:	2380      	movs	r3, #128	@ 0x80
 8018614:	011b      	lsls	r3, r3, #4
 8018616:	401a      	ands	r2, r3
 8018618:	2380      	movs	r3, #128	@ 0x80
 801861a:	011b      	lsls	r3, r3, #4
 801861c:	429a      	cmp	r2, r3
 801861e:	d112      	bne.n	8018646 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	2280      	movs	r2, #128	@ 0x80
 8018626:	0112      	lsls	r2, r2, #4
 8018628:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	0018      	movs	r0, r3
 801862e:	f000 f9ad 	bl	801898c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	2284      	movs	r2, #132	@ 0x84
 8018636:	2120      	movs	r1, #32
 8018638:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	2278      	movs	r2, #120	@ 0x78
 801863e:	2100      	movs	r1, #0
 8018640:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8018642:	2303      	movs	r3, #3
 8018644:	e00f      	b.n	8018666 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	69db      	ldr	r3, [r3, #28]
 801864c:	68ba      	ldr	r2, [r7, #8]
 801864e:	4013      	ands	r3, r2
 8018650:	68ba      	ldr	r2, [r7, #8]
 8018652:	1ad3      	subs	r3, r2, r3
 8018654:	425a      	negs	r2, r3
 8018656:	4153      	adcs	r3, r2
 8018658:	b2db      	uxtb	r3, r3
 801865a:	001a      	movs	r2, r3
 801865c:	1dfb      	adds	r3, r7, #7
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	429a      	cmp	r2, r3
 8018662:	d0a4      	beq.n	80185ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018664:	2300      	movs	r3, #0
}
 8018666:	0018      	movs	r0, r3
 8018668:	46bd      	mov	sp, r7
 801866a:	b004      	add	sp, #16
 801866c:	bd80      	pop	{r7, pc}
	...

08018670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b090      	sub	sp, #64	@ 0x40
 8018674:	af00      	add	r7, sp, #0
 8018676:	60f8      	str	r0, [r7, #12]
 8018678:	60b9      	str	r1, [r7, #8]
 801867a:	1dbb      	adds	r3, r7, #6
 801867c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	68ba      	ldr	r2, [r7, #8]
 8018682:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	1dba      	adds	r2, r7, #6
 8018688:	2158      	movs	r1, #88	@ 0x58
 801868a:	8812      	ldrh	r2, [r2, #0]
 801868c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	1dba      	adds	r2, r7, #6
 8018692:	215a      	movs	r1, #90	@ 0x5a
 8018694:	8812      	ldrh	r2, [r2, #0]
 8018696:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	2200      	movs	r2, #0
 801869c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	689a      	ldr	r2, [r3, #8]
 80186a2:	2380      	movs	r3, #128	@ 0x80
 80186a4:	015b      	lsls	r3, r3, #5
 80186a6:	429a      	cmp	r2, r3
 80186a8:	d10d      	bne.n	80186c6 <UART_Start_Receive_IT+0x56>
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	691b      	ldr	r3, [r3, #16]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d104      	bne.n	80186bc <UART_Start_Receive_IT+0x4c>
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	225c      	movs	r2, #92	@ 0x5c
 80186b6:	4950      	ldr	r1, [pc, #320]	@ (80187f8 <UART_Start_Receive_IT+0x188>)
 80186b8:	5299      	strh	r1, [r3, r2]
 80186ba:	e02e      	b.n	801871a <UART_Start_Receive_IT+0xaa>
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	225c      	movs	r2, #92	@ 0x5c
 80186c0:	21ff      	movs	r1, #255	@ 0xff
 80186c2:	5299      	strh	r1, [r3, r2]
 80186c4:	e029      	b.n	801871a <UART_Start_Receive_IT+0xaa>
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	689b      	ldr	r3, [r3, #8]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d10d      	bne.n	80186ea <UART_Start_Receive_IT+0x7a>
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	691b      	ldr	r3, [r3, #16]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d104      	bne.n	80186e0 <UART_Start_Receive_IT+0x70>
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	225c      	movs	r2, #92	@ 0x5c
 80186da:	21ff      	movs	r1, #255	@ 0xff
 80186dc:	5299      	strh	r1, [r3, r2]
 80186de:	e01c      	b.n	801871a <UART_Start_Receive_IT+0xaa>
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	225c      	movs	r2, #92	@ 0x5c
 80186e4:	217f      	movs	r1, #127	@ 0x7f
 80186e6:	5299      	strh	r1, [r3, r2]
 80186e8:	e017      	b.n	801871a <UART_Start_Receive_IT+0xaa>
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	689a      	ldr	r2, [r3, #8]
 80186ee:	2380      	movs	r3, #128	@ 0x80
 80186f0:	055b      	lsls	r3, r3, #21
 80186f2:	429a      	cmp	r2, r3
 80186f4:	d10d      	bne.n	8018712 <UART_Start_Receive_IT+0xa2>
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	691b      	ldr	r3, [r3, #16]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d104      	bne.n	8018708 <UART_Start_Receive_IT+0x98>
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	225c      	movs	r2, #92	@ 0x5c
 8018702:	217f      	movs	r1, #127	@ 0x7f
 8018704:	5299      	strh	r1, [r3, r2]
 8018706:	e008      	b.n	801871a <UART_Start_Receive_IT+0xaa>
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	225c      	movs	r2, #92	@ 0x5c
 801870c:	213f      	movs	r1, #63	@ 0x3f
 801870e:	5299      	strh	r1, [r3, r2]
 8018710:	e003      	b.n	801871a <UART_Start_Receive_IT+0xaa>
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	225c      	movs	r2, #92	@ 0x5c
 8018716:	2100      	movs	r1, #0
 8018718:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	2284      	movs	r2, #132	@ 0x84
 801871e:	2100      	movs	r1, #0
 8018720:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	2280      	movs	r2, #128	@ 0x80
 8018726:	2122      	movs	r1, #34	@ 0x22
 8018728:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801872a:	f3ef 8310 	mrs	r3, PRIMASK
 801872e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018730:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018734:	2301      	movs	r3, #1
 8018736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801873a:	f383 8810 	msr	PRIMASK, r3
}
 801873e:	46c0      	nop			@ (mov r8, r8)
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	689a      	ldr	r2, [r3, #8]
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	2101      	movs	r1, #1
 801874c:	430a      	orrs	r2, r1
 801874e:	609a      	str	r2, [r3, #8]
 8018750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018752:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018756:	f383 8810 	msr	PRIMASK, r3
}
 801875a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	689a      	ldr	r2, [r3, #8]
 8018760:	2380      	movs	r3, #128	@ 0x80
 8018762:	015b      	lsls	r3, r3, #5
 8018764:	429a      	cmp	r2, r3
 8018766:	d107      	bne.n	8018778 <UART_Start_Receive_IT+0x108>
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	691b      	ldr	r3, [r3, #16]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d103      	bne.n	8018778 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	4a22      	ldr	r2, [pc, #136]	@ (80187fc <UART_Start_Receive_IT+0x18c>)
 8018774:	669a      	str	r2, [r3, #104]	@ 0x68
 8018776:	e002      	b.n	801877e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	4a21      	ldr	r2, [pc, #132]	@ (8018800 <UART_Start_Receive_IT+0x190>)
 801877c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	691b      	ldr	r3, [r3, #16]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d019      	beq.n	80187ba <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018786:	f3ef 8310 	mrs	r3, PRIMASK
 801878a:	61fb      	str	r3, [r7, #28]
  return(result);
 801878c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801878e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018790:	2301      	movs	r3, #1
 8018792:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018794:	6a3b      	ldr	r3, [r7, #32]
 8018796:	f383 8810 	msr	PRIMASK, r3
}
 801879a:	46c0      	nop			@ (mov r8, r8)
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	681a      	ldr	r2, [r3, #0]
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	2190      	movs	r1, #144	@ 0x90
 80187a8:	0049      	lsls	r1, r1, #1
 80187aa:	430a      	orrs	r2, r1
 80187ac:	601a      	str	r2, [r3, #0]
 80187ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187b0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b4:	f383 8810 	msr	PRIMASK, r3
}
 80187b8:	e018      	b.n	80187ec <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187ba:	f3ef 8310 	mrs	r3, PRIMASK
 80187be:	613b      	str	r3, [r7, #16]
  return(result);
 80187c0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80187c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80187c4:	2301      	movs	r3, #1
 80187c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187c8:	697b      	ldr	r3, [r7, #20]
 80187ca:	f383 8810 	msr	PRIMASK, r3
}
 80187ce:	46c0      	nop			@ (mov r8, r8)
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	681a      	ldr	r2, [r3, #0]
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	2120      	movs	r1, #32
 80187dc:	430a      	orrs	r2, r1
 80187de:	601a      	str	r2, [r3, #0]
 80187e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187e4:	69bb      	ldr	r3, [r7, #24]
 80187e6:	f383 8810 	msr	PRIMASK, r3
}
 80187ea:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80187ec:	2300      	movs	r3, #0
}
 80187ee:	0018      	movs	r0, r3
 80187f0:	46bd      	mov	sp, r7
 80187f2:	b010      	add	sp, #64	@ 0x40
 80187f4:	bd80      	pop	{r7, pc}
 80187f6:	46c0      	nop			@ (mov r8, r8)
 80187f8:	000001ff 	.word	0x000001ff
 80187fc:	08018f71 	.word	0x08018f71
 8018800:	08018da5 	.word	0x08018da5

08018804 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b090      	sub	sp, #64	@ 0x40
 8018808:	af00      	add	r7, sp, #0
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	60b9      	str	r1, [r7, #8]
 801880e:	1dbb      	adds	r3, r7, #6
 8018810:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	68ba      	ldr	r2, [r7, #8]
 8018816:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	1dba      	adds	r2, r7, #6
 801881c:	2158      	movs	r1, #88	@ 0x58
 801881e:	8812      	ldrh	r2, [r2, #0]
 8018820:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	2284      	movs	r2, #132	@ 0x84
 8018826:	2100      	movs	r1, #0
 8018828:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	2280      	movs	r2, #128	@ 0x80
 801882e:	2122      	movs	r1, #34	@ 0x22
 8018830:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018836:	2b00      	cmp	r3, #0
 8018838:	d028      	beq.n	801888c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801883e:	4a3e      	ldr	r2, [pc, #248]	@ (8018938 <UART_Start_Receive_DMA+0x134>)
 8018840:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018846:	4a3d      	ldr	r2, [pc, #244]	@ (801893c <UART_Start_Receive_DMA+0x138>)
 8018848:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801884e:	4a3c      	ldr	r2, [pc, #240]	@ (8018940 <UART_Start_Receive_DMA+0x13c>)
 8018850:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018856:	2200      	movs	r2, #0
 8018858:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	3324      	adds	r3, #36	@ 0x24
 8018864:	0019      	movs	r1, r3
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801886a:	001a      	movs	r2, r3
 801886c:	1dbb      	adds	r3, r7, #6
 801886e:	881b      	ldrh	r3, [r3, #0]
 8018870:	f7f7 f868 	bl	800f944 <HAL_DMA_Start_IT>
 8018874:	1e03      	subs	r3, r0, #0
 8018876:	d009      	beq.n	801888c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	2284      	movs	r2, #132	@ 0x84
 801887c:	2110      	movs	r1, #16
 801887e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	2280      	movs	r2, #128	@ 0x80
 8018884:	2120      	movs	r1, #32
 8018886:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8018888:	2301      	movs	r3, #1
 801888a:	e050      	b.n	801892e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	691b      	ldr	r3, [r3, #16]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d019      	beq.n	80188c8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018894:	f3ef 8310 	mrs	r3, PRIMASK
 8018898:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801889a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801889c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801889e:	2301      	movs	r3, #1
 80188a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188a4:	f383 8810 	msr	PRIMASK, r3
}
 80188a8:	46c0      	nop			@ (mov r8, r8)
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	681a      	ldr	r2, [r3, #0]
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	2180      	movs	r1, #128	@ 0x80
 80188b6:	0049      	lsls	r1, r1, #1
 80188b8:	430a      	orrs	r2, r1
 80188ba:	601a      	str	r2, [r3, #0]
 80188bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80188be:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188c2:	f383 8810 	msr	PRIMASK, r3
}
 80188c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188c8:	f3ef 8310 	mrs	r3, PRIMASK
 80188cc:	613b      	str	r3, [r7, #16]
  return(result);
 80188ce:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80188d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80188d2:	2301      	movs	r3, #1
 80188d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188d6:	697b      	ldr	r3, [r7, #20]
 80188d8:	f383 8810 	msr	PRIMASK, r3
}
 80188dc:	46c0      	nop			@ (mov r8, r8)
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	689a      	ldr	r2, [r3, #8]
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	2101      	movs	r1, #1
 80188ea:	430a      	orrs	r2, r1
 80188ec:	609a      	str	r2, [r3, #8]
 80188ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188f2:	69bb      	ldr	r3, [r7, #24]
 80188f4:	f383 8810 	msr	PRIMASK, r3
}
 80188f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188fa:	f3ef 8310 	mrs	r3, PRIMASK
 80188fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8018900:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018902:	637b      	str	r3, [r7, #52]	@ 0x34
 8018904:	2301      	movs	r3, #1
 8018906:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018908:	6a3b      	ldr	r3, [r7, #32]
 801890a:	f383 8810 	msr	PRIMASK, r3
}
 801890e:	46c0      	nop			@ (mov r8, r8)
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	689a      	ldr	r2, [r3, #8]
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	2140      	movs	r1, #64	@ 0x40
 801891c:	430a      	orrs	r2, r1
 801891e:	609a      	str	r2, [r3, #8]
 8018920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018922:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018926:	f383 8810 	msr	PRIMASK, r3
}
 801892a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801892c:	2300      	movs	r3, #0
}
 801892e:	0018      	movs	r0, r3
 8018930:	46bd      	mov	sp, r7
 8018932:	b010      	add	sp, #64	@ 0x40
 8018934:	bd80      	pop	{r7, pc}
 8018936:	46c0      	nop			@ (mov r8, r8)
 8018938:	08018b15 	.word	0x08018b15
 801893c:	08018c49 	.word	0x08018c49
 8018940:	08018c91 	.word	0x08018c91

08018944 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b086      	sub	sp, #24
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801894c:	f3ef 8310 	mrs	r3, PRIMASK
 8018950:	60bb      	str	r3, [r7, #8]
  return(result);
 8018952:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018954:	617b      	str	r3, [r7, #20]
 8018956:	2301      	movs	r3, #1
 8018958:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	f383 8810 	msr	PRIMASK, r3
}
 8018960:	46c0      	nop			@ (mov r8, r8)
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	681a      	ldr	r2, [r3, #0]
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	21c0      	movs	r1, #192	@ 0xc0
 801896e:	438a      	bics	r2, r1
 8018970:	601a      	str	r2, [r3, #0]
 8018972:	697b      	ldr	r3, [r7, #20]
 8018974:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018976:	693b      	ldr	r3, [r7, #16]
 8018978:	f383 8810 	msr	PRIMASK, r3
}
 801897c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	2220      	movs	r2, #32
 8018982:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018984:	46c0      	nop			@ (mov r8, r8)
 8018986:	46bd      	mov	sp, r7
 8018988:	b006      	add	sp, #24
 801898a:	bd80      	pop	{r7, pc}

0801898c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b08e      	sub	sp, #56	@ 0x38
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018994:	f3ef 8310 	mrs	r3, PRIMASK
 8018998:	617b      	str	r3, [r7, #20]
  return(result);
 801899a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801899c:	637b      	str	r3, [r7, #52]	@ 0x34
 801899e:	2301      	movs	r3, #1
 80189a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189a2:	69bb      	ldr	r3, [r7, #24]
 80189a4:	f383 8810 	msr	PRIMASK, r3
}
 80189a8:	46c0      	nop			@ (mov r8, r8)
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	681a      	ldr	r2, [r3, #0]
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	4926      	ldr	r1, [pc, #152]	@ (8018a50 <UART_EndRxTransfer+0xc4>)
 80189b6:	400a      	ands	r2, r1
 80189b8:	601a      	str	r2, [r3, #0]
 80189ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189be:	69fb      	ldr	r3, [r7, #28]
 80189c0:	f383 8810 	msr	PRIMASK, r3
}
 80189c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189c6:	f3ef 8310 	mrs	r3, PRIMASK
 80189ca:	623b      	str	r3, [r7, #32]
  return(result);
 80189cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80189ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80189d0:	2301      	movs	r3, #1
 80189d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189d6:	f383 8810 	msr	PRIMASK, r3
}
 80189da:	46c0      	nop			@ (mov r8, r8)
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	689a      	ldr	r2, [r3, #8]
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	2101      	movs	r1, #1
 80189e8:	438a      	bics	r2, r1
 80189ea:	609a      	str	r2, [r3, #8]
 80189ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189f2:	f383 8810 	msr	PRIMASK, r3
}
 80189f6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80189fc:	2b01      	cmp	r3, #1
 80189fe:	d118      	bne.n	8018a32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a00:	f3ef 8310 	mrs	r3, PRIMASK
 8018a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8018a06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a0a:	2301      	movs	r3, #1
 8018a0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	f383 8810 	msr	PRIMASK, r3
}
 8018a14:	46c0      	nop			@ (mov r8, r8)
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	681a      	ldr	r2, [r3, #0]
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	2110      	movs	r1, #16
 8018a22:	438a      	bics	r2, r1
 8018a24:	601a      	str	r2, [r3, #0]
 8018a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	f383 8810 	msr	PRIMASK, r3
}
 8018a30:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	2280      	movs	r2, #128	@ 0x80
 8018a36:	2120      	movs	r1, #32
 8018a38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	2200      	movs	r2, #0
 8018a44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018a46:	46c0      	nop			@ (mov r8, r8)
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	b00e      	add	sp, #56	@ 0x38
 8018a4c:	bd80      	pop	{r7, pc}
 8018a4e:	46c0      	nop			@ (mov r8, r8)
 8018a50:	fffffedf 	.word	0xfffffedf

08018a54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b08c      	sub	sp, #48	@ 0x30
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a60:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	2220      	movs	r2, #32
 8018a6a:	4013      	ands	r3, r2
 8018a6c:	d135      	bne.n	8018ada <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8018a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a70:	2252      	movs	r2, #82	@ 0x52
 8018a72:	2100      	movs	r1, #0
 8018a74:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a76:	f3ef 8310 	mrs	r3, PRIMASK
 8018a7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a7c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018a80:	2301      	movs	r3, #1
 8018a82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a84:	693b      	ldr	r3, [r7, #16]
 8018a86:	f383 8810 	msr	PRIMASK, r3
}
 8018a8a:	46c0      	nop			@ (mov r8, r8)
 8018a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	689a      	ldr	r2, [r3, #8]
 8018a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	2180      	movs	r1, #128	@ 0x80
 8018a98:	438a      	bics	r2, r1
 8018a9a:	609a      	str	r2, [r3, #8]
 8018a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018aa0:	697b      	ldr	r3, [r7, #20]
 8018aa2:	f383 8810 	msr	PRIMASK, r3
}
 8018aa6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8018aac:	61bb      	str	r3, [r7, #24]
  return(result);
 8018aae:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8018ab2:	2301      	movs	r3, #1
 8018ab4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ab6:	69fb      	ldr	r3, [r7, #28]
 8018ab8:	f383 8810 	msr	PRIMASK, r3
}
 8018abc:	46c0      	nop			@ (mov r8, r8)
 8018abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	681a      	ldr	r2, [r3, #0]
 8018ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	2140      	movs	r1, #64	@ 0x40
 8018aca:	430a      	orrs	r2, r1
 8018acc:	601a      	str	r2, [r3, #0]
 8018ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ad0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ad2:	6a3b      	ldr	r3, [r7, #32]
 8018ad4:	f383 8810 	msr	PRIMASK, r3
}
 8018ad8:	e006      	b.n	8018ae8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8018ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018adc:	228c      	movs	r2, #140	@ 0x8c
 8018ade:	589b      	ldr	r3, [r3, r2]
 8018ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018ae2:	0010      	movs	r0, r2
 8018ae4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018ae6:	46c0      	nop			@ (mov r8, r8)
 8018ae8:	46c0      	nop			@ (mov r8, r8)
 8018aea:	46bd      	mov	sp, r7
 8018aec:	b00c      	add	sp, #48	@ 0x30
 8018aee:	bd80      	pop	{r7, pc}

08018af0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b084      	sub	sp, #16
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018afc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2288      	movs	r2, #136	@ 0x88
 8018b02:	589b      	ldr	r3, [r3, r2]
 8018b04:	68fa      	ldr	r2, [r7, #12]
 8018b06:	0010      	movs	r0, r2
 8018b08:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018b0a:	46c0      	nop			@ (mov r8, r8)
 8018b0c:	46bd      	mov	sp, r7
 8018b0e:	b004      	add	sp, #16
 8018b10:	bd80      	pop	{r7, pc}
	...

08018b14 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b094      	sub	sp, #80	@ 0x50
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b20:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	2220      	movs	r2, #32
 8018b2a:	4013      	ands	r3, r2
 8018b2c:	d16f      	bne.n	8018c0e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8018b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b30:	225a      	movs	r2, #90	@ 0x5a
 8018b32:	2100      	movs	r1, #0
 8018b34:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b36:	f3ef 8310 	mrs	r3, PRIMASK
 8018b3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8018b3c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018b40:	2301      	movs	r3, #1
 8018b42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b44:	69fb      	ldr	r3, [r7, #28]
 8018b46:	f383 8810 	msr	PRIMASK, r3
}
 8018b4a:	46c0      	nop			@ (mov r8, r8)
 8018b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	681a      	ldr	r2, [r3, #0]
 8018b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	493b      	ldr	r1, [pc, #236]	@ (8018c44 <UART_DMAReceiveCplt+0x130>)
 8018b58:	400a      	ands	r2, r1
 8018b5a:	601a      	str	r2, [r3, #0]
 8018b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018b5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b60:	6a3b      	ldr	r3, [r7, #32]
 8018b62:	f383 8810 	msr	PRIMASK, r3
}
 8018b66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b68:	f3ef 8310 	mrs	r3, PRIMASK
 8018b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8018b72:	2301      	movs	r3, #1
 8018b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b78:	f383 8810 	msr	PRIMASK, r3
}
 8018b7c:	46c0      	nop			@ (mov r8, r8)
 8018b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	689a      	ldr	r2, [r3, #8]
 8018b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	2101      	movs	r1, #1
 8018b8a:	438a      	bics	r2, r1
 8018b8c:	609a      	str	r2, [r3, #8]
 8018b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b94:	f383 8810 	msr	PRIMASK, r3
}
 8018b98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8018b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ba4:	2301      	movs	r3, #1
 8018ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018baa:	f383 8810 	msr	PRIMASK, r3
}
 8018bae:	46c0      	nop			@ (mov r8, r8)
 8018bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	689a      	ldr	r2, [r3, #8]
 8018bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	2140      	movs	r1, #64	@ 0x40
 8018bbc:	438a      	bics	r2, r1
 8018bbe:	609a      	str	r2, [r3, #8]
 8018bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bc6:	f383 8810 	msr	PRIMASK, r3
}
 8018bca:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bce:	2280      	movs	r2, #128	@ 0x80
 8018bd0:	2120      	movs	r1, #32
 8018bd2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018bd8:	2b01      	cmp	r3, #1
 8018bda:	d118      	bne.n	8018c0e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8018be0:	60fb      	str	r3, [r7, #12]
  return(result);
 8018be2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018be6:	2301      	movs	r3, #1
 8018be8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bea:	693b      	ldr	r3, [r7, #16]
 8018bec:	f383 8810 	msr	PRIMASK, r3
}
 8018bf0:	46c0      	nop			@ (mov r8, r8)
 8018bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	681a      	ldr	r2, [r3, #0]
 8018bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	2110      	movs	r1, #16
 8018bfe:	438a      	bics	r2, r1
 8018c00:	601a      	str	r2, [r3, #0]
 8018c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	f383 8810 	msr	PRIMASK, r3
}
 8018c0c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c10:	2200      	movs	r2, #0
 8018c12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c18:	2b01      	cmp	r3, #1
 8018c1a:	d109      	bne.n	8018c30 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c1e:	22ac      	movs	r2, #172	@ 0xac
 8018c20:	589b      	ldr	r3, [r3, r2]
 8018c22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018c24:	2158      	movs	r1, #88	@ 0x58
 8018c26:	5a51      	ldrh	r1, [r2, r1]
 8018c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018c2a:	0010      	movs	r0, r2
 8018c2c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018c2e:	e005      	b.n	8018c3c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c32:	2294      	movs	r2, #148	@ 0x94
 8018c34:	589b      	ldr	r3, [r3, r2]
 8018c36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018c38:	0010      	movs	r0, r2
 8018c3a:	4798      	blx	r3
}
 8018c3c:	46c0      	nop			@ (mov r8, r8)
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	b014      	add	sp, #80	@ 0x50
 8018c42:	bd80      	pop	{r7, pc}
 8018c44:	fffffeff 	.word	0xfffffeff

08018c48 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b084      	sub	sp, #16
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c54:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	2201      	movs	r2, #1
 8018c5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c60:	2b01      	cmp	r3, #1
 8018c62:	d10b      	bne.n	8018c7c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	22ac      	movs	r2, #172	@ 0xac
 8018c68:	589b      	ldr	r3, [r3, r2]
 8018c6a:	68fa      	ldr	r2, [r7, #12]
 8018c6c:	2158      	movs	r1, #88	@ 0x58
 8018c6e:	5a52      	ldrh	r2, [r2, r1]
 8018c70:	0852      	lsrs	r2, r2, #1
 8018c72:	b291      	uxth	r1, r2
 8018c74:	68fa      	ldr	r2, [r7, #12]
 8018c76:	0010      	movs	r0, r2
 8018c78:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018c7a:	e005      	b.n	8018c88 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	2290      	movs	r2, #144	@ 0x90
 8018c80:	589b      	ldr	r3, [r3, r2]
 8018c82:	68fa      	ldr	r2, [r7, #12]
 8018c84:	0010      	movs	r0, r2
 8018c86:	4798      	blx	r3
}
 8018c88:	46c0      	nop			@ (mov r8, r8)
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	b004      	add	sp, #16
 8018c8e:	bd80      	pop	{r7, pc}

08018c90 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b086      	sub	sp, #24
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c9c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018c9e:	697b      	ldr	r3, [r7, #20]
 8018ca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018ca2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018ca4:	697b      	ldr	r3, [r7, #20]
 8018ca6:	2280      	movs	r2, #128	@ 0x80
 8018ca8:	589b      	ldr	r3, [r3, r2]
 8018caa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	689b      	ldr	r3, [r3, #8]
 8018cb2:	2280      	movs	r2, #128	@ 0x80
 8018cb4:	4013      	ands	r3, r2
 8018cb6:	2b80      	cmp	r3, #128	@ 0x80
 8018cb8:	d10a      	bne.n	8018cd0 <UART_DMAError+0x40>
 8018cba:	693b      	ldr	r3, [r7, #16]
 8018cbc:	2b21      	cmp	r3, #33	@ 0x21
 8018cbe:	d107      	bne.n	8018cd0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018cc0:	697b      	ldr	r3, [r7, #20]
 8018cc2:	2252      	movs	r2, #82	@ 0x52
 8018cc4:	2100      	movs	r1, #0
 8018cc6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	0018      	movs	r0, r3
 8018ccc:	f7ff fe3a 	bl	8018944 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018cd0:	697b      	ldr	r3, [r7, #20]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	689b      	ldr	r3, [r3, #8]
 8018cd6:	2240      	movs	r2, #64	@ 0x40
 8018cd8:	4013      	ands	r3, r2
 8018cda:	2b40      	cmp	r3, #64	@ 0x40
 8018cdc:	d10a      	bne.n	8018cf4 <UART_DMAError+0x64>
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	2b22      	cmp	r3, #34	@ 0x22
 8018ce2:	d107      	bne.n	8018cf4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018ce4:	697b      	ldr	r3, [r7, #20]
 8018ce6:	225a      	movs	r2, #90	@ 0x5a
 8018ce8:	2100      	movs	r1, #0
 8018cea:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018cec:	697b      	ldr	r3, [r7, #20]
 8018cee:	0018      	movs	r0, r3
 8018cf0:	f7ff fe4c 	bl	801898c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018cf4:	697b      	ldr	r3, [r7, #20]
 8018cf6:	2284      	movs	r2, #132	@ 0x84
 8018cf8:	589b      	ldr	r3, [r3, r2]
 8018cfa:	2210      	movs	r2, #16
 8018cfc:	431a      	orrs	r2, r3
 8018cfe:	697b      	ldr	r3, [r7, #20]
 8018d00:	2184      	movs	r1, #132	@ 0x84
 8018d02:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018d04:	697b      	ldr	r3, [r7, #20]
 8018d06:	2298      	movs	r2, #152	@ 0x98
 8018d08:	589b      	ldr	r3, [r3, r2]
 8018d0a:	697a      	ldr	r2, [r7, #20]
 8018d0c:	0010      	movs	r0, r2
 8018d0e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018d10:	46c0      	nop			@ (mov r8, r8)
 8018d12:	46bd      	mov	sp, r7
 8018d14:	b006      	add	sp, #24
 8018d16:	bd80      	pop	{r7, pc}

08018d18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b084      	sub	sp, #16
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	225a      	movs	r2, #90	@ 0x5a
 8018d2a:	2100      	movs	r1, #0
 8018d2c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	2252      	movs	r2, #82	@ 0x52
 8018d32:	2100      	movs	r1, #0
 8018d34:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	2298      	movs	r2, #152	@ 0x98
 8018d3a:	589b      	ldr	r3, [r3, r2]
 8018d3c:	68fa      	ldr	r2, [r7, #12]
 8018d3e:	0010      	movs	r0, r2
 8018d40:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018d42:	46c0      	nop			@ (mov r8, r8)
 8018d44:	46bd      	mov	sp, r7
 8018d46:	b004      	add	sp, #16
 8018d48:	bd80      	pop	{r7, pc}

08018d4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018d4a:	b580      	push	{r7, lr}
 8018d4c:	b086      	sub	sp, #24
 8018d4e:	af00      	add	r7, sp, #0
 8018d50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d52:	f3ef 8310 	mrs	r3, PRIMASK
 8018d56:	60bb      	str	r3, [r7, #8]
  return(result);
 8018d58:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018d5a:	617b      	str	r3, [r7, #20]
 8018d5c:	2301      	movs	r3, #1
 8018d5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	f383 8810 	msr	PRIMASK, r3
}
 8018d66:	46c0      	nop			@ (mov r8, r8)
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	681a      	ldr	r2, [r3, #0]
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	2140      	movs	r1, #64	@ 0x40
 8018d74:	438a      	bics	r2, r1
 8018d76:	601a      	str	r2, [r3, #0]
 8018d78:	697b      	ldr	r3, [r7, #20]
 8018d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d7c:	693b      	ldr	r3, [r7, #16]
 8018d7e:	f383 8810 	msr	PRIMASK, r3
}
 8018d82:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	2220      	movs	r2, #32
 8018d88:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	228c      	movs	r2, #140	@ 0x8c
 8018d94:	589b      	ldr	r3, [r3, r2]
 8018d96:	687a      	ldr	r2, [r7, #4]
 8018d98:	0010      	movs	r0, r2
 8018d9a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018d9c:	46c0      	nop			@ (mov r8, r8)
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	b006      	add	sp, #24
 8018da2:	bd80      	pop	{r7, pc}

08018da4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b094      	sub	sp, #80	@ 0x50
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018dac:	204e      	movs	r0, #78	@ 0x4e
 8018dae:	183b      	adds	r3, r7, r0
 8018db0:	687a      	ldr	r2, [r7, #4]
 8018db2:	215c      	movs	r1, #92	@ 0x5c
 8018db4:	5a52      	ldrh	r2, [r2, r1]
 8018db6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2280      	movs	r2, #128	@ 0x80
 8018dbc:	589b      	ldr	r3, [r3, r2]
 8018dbe:	2b22      	cmp	r3, #34	@ 0x22
 8018dc0:	d000      	beq.n	8018dc4 <UART_RxISR_8BIT+0x20>
 8018dc2:	e0c2      	b.n	8018f4a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018dca:	214c      	movs	r1, #76	@ 0x4c
 8018dcc:	187b      	adds	r3, r7, r1
 8018dce:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018dd0:	187b      	adds	r3, r7, r1
 8018dd2:	881b      	ldrh	r3, [r3, #0]
 8018dd4:	b2da      	uxtb	r2, r3
 8018dd6:	183b      	adds	r3, r7, r0
 8018dd8:	881b      	ldrh	r3, [r3, #0]
 8018dda:	b2d9      	uxtb	r1, r3
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018de0:	400a      	ands	r2, r1
 8018de2:	b2d2      	uxtb	r2, r2
 8018de4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018dea:	1c5a      	adds	r2, r3, #1
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	225a      	movs	r2, #90	@ 0x5a
 8018df4:	5a9b      	ldrh	r3, [r3, r2]
 8018df6:	b29b      	uxth	r3, r3
 8018df8:	3b01      	subs	r3, #1
 8018dfa:	b299      	uxth	r1, r3
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	225a      	movs	r2, #90	@ 0x5a
 8018e00:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	225a      	movs	r2, #90	@ 0x5a
 8018e06:	5a9b      	ldrh	r3, [r3, r2]
 8018e08:	b29b      	uxth	r3, r3
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d000      	beq.n	8018e10 <UART_RxISR_8BIT+0x6c>
 8018e0e:	e0a4      	b.n	8018f5a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e10:	f3ef 8310 	mrs	r3, PRIMASK
 8018e14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018e18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e20:	f383 8810 	msr	PRIMASK, r3
}
 8018e24:	46c0      	nop			@ (mov r8, r8)
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	681a      	ldr	r2, [r3, #0]
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	494c      	ldr	r1, [pc, #304]	@ (8018f64 <UART_RxISR_8BIT+0x1c0>)
 8018e32:	400a      	ands	r2, r1
 8018e34:	601a      	str	r2, [r3, #0]
 8018e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e3c:	f383 8810 	msr	PRIMASK, r3
}
 8018e40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e42:	f3ef 8310 	mrs	r3, PRIMASK
 8018e46:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e4c:	2301      	movs	r3, #1
 8018e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e52:	f383 8810 	msr	PRIMASK, r3
}
 8018e56:	46c0      	nop			@ (mov r8, r8)
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	689a      	ldr	r2, [r3, #8]
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	2101      	movs	r1, #1
 8018e64:	438a      	bics	r2, r1
 8018e66:	609a      	str	r2, [r3, #8]
 8018e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e6e:	f383 8810 	msr	PRIMASK, r3
}
 8018e72:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2280      	movs	r2, #128	@ 0x80
 8018e78:	2120      	movs	r1, #32
 8018e7a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	2200      	movs	r2, #0
 8018e80:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	2200      	movs	r2, #0
 8018e86:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	4a36      	ldr	r2, [pc, #216]	@ (8018f68 <UART_RxISR_8BIT+0x1c4>)
 8018e8e:	4293      	cmp	r3, r2
 8018e90:	d01f      	beq.n	8018ed2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	685a      	ldr	r2, [r3, #4]
 8018e98:	2380      	movs	r3, #128	@ 0x80
 8018e9a:	041b      	lsls	r3, r3, #16
 8018e9c:	4013      	ands	r3, r2
 8018e9e:	d018      	beq.n	8018ed2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8018ea4:	61bb      	str	r3, [r7, #24]
  return(result);
 8018ea6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018ea8:	643b      	str	r3, [r7, #64]	@ 0x40
 8018eaa:	2301      	movs	r3, #1
 8018eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eae:	69fb      	ldr	r3, [r7, #28]
 8018eb0:	f383 8810 	msr	PRIMASK, r3
}
 8018eb4:	46c0      	nop			@ (mov r8, r8)
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	681a      	ldr	r2, [r3, #0]
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	492a      	ldr	r1, [pc, #168]	@ (8018f6c <UART_RxISR_8BIT+0x1c8>)
 8018ec2:	400a      	ands	r2, r1
 8018ec4:	601a      	str	r2, [r3, #0]
 8018ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ec8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eca:	6a3b      	ldr	r3, [r7, #32]
 8018ecc:	f383 8810 	msr	PRIMASK, r3
}
 8018ed0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ed6:	2b01      	cmp	r3, #1
 8018ed8:	d130      	bne.n	8018f3c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	2200      	movs	r2, #0
 8018ede:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8018ee4:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ee6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018eea:	2301      	movs	r3, #1
 8018eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eee:	693b      	ldr	r3, [r7, #16]
 8018ef0:	f383 8810 	msr	PRIMASK, r3
}
 8018ef4:	46c0      	nop			@ (mov r8, r8)
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	681a      	ldr	r2, [r3, #0]
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	2110      	movs	r1, #16
 8018f02:	438a      	bics	r2, r1
 8018f04:	601a      	str	r2, [r3, #0]
 8018f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f0a:	697b      	ldr	r3, [r7, #20]
 8018f0c:	f383 8810 	msr	PRIMASK, r3
}
 8018f10:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	69db      	ldr	r3, [r3, #28]
 8018f18:	2210      	movs	r2, #16
 8018f1a:	4013      	ands	r3, r2
 8018f1c:	2b10      	cmp	r3, #16
 8018f1e:	d103      	bne.n	8018f28 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	2210      	movs	r2, #16
 8018f26:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	22ac      	movs	r2, #172	@ 0xac
 8018f2c:	589b      	ldr	r3, [r3, r2]
 8018f2e:	687a      	ldr	r2, [r7, #4]
 8018f30:	2158      	movs	r1, #88	@ 0x58
 8018f32:	5a51      	ldrh	r1, [r2, r1]
 8018f34:	687a      	ldr	r2, [r7, #4]
 8018f36:	0010      	movs	r0, r2
 8018f38:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018f3a:	e00e      	b.n	8018f5a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	2294      	movs	r2, #148	@ 0x94
 8018f40:	589b      	ldr	r3, [r3, r2]
 8018f42:	687a      	ldr	r2, [r7, #4]
 8018f44:	0010      	movs	r0, r2
 8018f46:	4798      	blx	r3
}
 8018f48:	e007      	b.n	8018f5a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	699a      	ldr	r2, [r3, #24]
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	2108      	movs	r1, #8
 8018f56:	430a      	orrs	r2, r1
 8018f58:	619a      	str	r2, [r3, #24]
}
 8018f5a:	46c0      	nop			@ (mov r8, r8)
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	b014      	add	sp, #80	@ 0x50
 8018f60:	bd80      	pop	{r7, pc}
 8018f62:	46c0      	nop			@ (mov r8, r8)
 8018f64:	fffffedf 	.word	0xfffffedf
 8018f68:	40004800 	.word	0x40004800
 8018f6c:	fbffffff 	.word	0xfbffffff

08018f70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b094      	sub	sp, #80	@ 0x50
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018f78:	204e      	movs	r0, #78	@ 0x4e
 8018f7a:	183b      	adds	r3, r7, r0
 8018f7c:	687a      	ldr	r2, [r7, #4]
 8018f7e:	215c      	movs	r1, #92	@ 0x5c
 8018f80:	5a52      	ldrh	r2, [r2, r1]
 8018f82:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	2280      	movs	r2, #128	@ 0x80
 8018f88:	589b      	ldr	r3, [r3, r2]
 8018f8a:	2b22      	cmp	r3, #34	@ 0x22
 8018f8c:	d000      	beq.n	8018f90 <UART_RxISR_16BIT+0x20>
 8018f8e:	e0c2      	b.n	8019116 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018f96:	214c      	movs	r1, #76	@ 0x4c
 8018f98:	187b      	adds	r3, r7, r1
 8018f9a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018fa2:	187b      	adds	r3, r7, r1
 8018fa4:	183a      	adds	r2, r7, r0
 8018fa6:	881b      	ldrh	r3, [r3, #0]
 8018fa8:	8812      	ldrh	r2, [r2, #0]
 8018faa:	4013      	ands	r3, r2
 8018fac:	b29a      	uxth	r2, r3
 8018fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018fb0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018fb6:	1c9a      	adds	r2, r3, #2
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	225a      	movs	r2, #90	@ 0x5a
 8018fc0:	5a9b      	ldrh	r3, [r3, r2]
 8018fc2:	b29b      	uxth	r3, r3
 8018fc4:	3b01      	subs	r3, #1
 8018fc6:	b299      	uxth	r1, r3
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	225a      	movs	r2, #90	@ 0x5a
 8018fcc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	225a      	movs	r2, #90	@ 0x5a
 8018fd2:	5a9b      	ldrh	r3, [r3, r2]
 8018fd4:	b29b      	uxth	r3, r3
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d000      	beq.n	8018fdc <UART_RxISR_16BIT+0x6c>
 8018fda:	e0a4      	b.n	8019126 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8018fe0:	623b      	str	r3, [r7, #32]
  return(result);
 8018fe2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018fe4:	647b      	str	r3, [r7, #68]	@ 0x44
 8018fe6:	2301      	movs	r3, #1
 8018fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fec:	f383 8810 	msr	PRIMASK, r3
}
 8018ff0:	46c0      	nop			@ (mov r8, r8)
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	681a      	ldr	r2, [r3, #0]
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	494c      	ldr	r1, [pc, #304]	@ (8019130 <UART_RxISR_16BIT+0x1c0>)
 8018ffe:	400a      	ands	r2, r1
 8019000:	601a      	str	r2, [r3, #0]
 8019002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019004:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019008:	f383 8810 	msr	PRIMASK, r3
}
 801900c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801900e:	f3ef 8310 	mrs	r3, PRIMASK
 8019012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8019014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019016:	643b      	str	r3, [r7, #64]	@ 0x40
 8019018:	2301      	movs	r3, #1
 801901a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801901e:	f383 8810 	msr	PRIMASK, r3
}
 8019022:	46c0      	nop			@ (mov r8, r8)
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	689a      	ldr	r2, [r3, #8]
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	2101      	movs	r1, #1
 8019030:	438a      	bics	r2, r1
 8019032:	609a      	str	r2, [r3, #8]
 8019034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019036:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801903a:	f383 8810 	msr	PRIMASK, r3
}
 801903e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	2280      	movs	r2, #128	@ 0x80
 8019044:	2120      	movs	r1, #32
 8019046:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	2200      	movs	r2, #0
 801904c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	2200      	movs	r2, #0
 8019052:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	4a36      	ldr	r2, [pc, #216]	@ (8019134 <UART_RxISR_16BIT+0x1c4>)
 801905a:	4293      	cmp	r3, r2
 801905c:	d01f      	beq.n	801909e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	685a      	ldr	r2, [r3, #4]
 8019064:	2380      	movs	r3, #128	@ 0x80
 8019066:	041b      	lsls	r3, r3, #16
 8019068:	4013      	ands	r3, r2
 801906a:	d018      	beq.n	801909e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801906c:	f3ef 8310 	mrs	r3, PRIMASK
 8019070:	617b      	str	r3, [r7, #20]
  return(result);
 8019072:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019076:	2301      	movs	r3, #1
 8019078:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801907a:	69bb      	ldr	r3, [r7, #24]
 801907c:	f383 8810 	msr	PRIMASK, r3
}
 8019080:	46c0      	nop			@ (mov r8, r8)
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	681a      	ldr	r2, [r3, #0]
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	492a      	ldr	r1, [pc, #168]	@ (8019138 <UART_RxISR_16BIT+0x1c8>)
 801908e:	400a      	ands	r2, r1
 8019090:	601a      	str	r2, [r3, #0]
 8019092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019094:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019096:	69fb      	ldr	r3, [r7, #28]
 8019098:	f383 8810 	msr	PRIMASK, r3
}
 801909c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80190a2:	2b01      	cmp	r3, #1
 80190a4:	d130      	bne.n	8019108 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	2200      	movs	r2, #0
 80190aa:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190ac:	f3ef 8310 	mrs	r3, PRIMASK
 80190b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80190b2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80190b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80190b6:	2301      	movs	r3, #1
 80190b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	f383 8810 	msr	PRIMASK, r3
}
 80190c0:	46c0      	nop			@ (mov r8, r8)
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	681a      	ldr	r2, [r3, #0]
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	2110      	movs	r1, #16
 80190ce:	438a      	bics	r2, r1
 80190d0:	601a      	str	r2, [r3, #0]
 80190d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	f383 8810 	msr	PRIMASK, r3
}
 80190dc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	69db      	ldr	r3, [r3, #28]
 80190e4:	2210      	movs	r2, #16
 80190e6:	4013      	ands	r3, r2
 80190e8:	2b10      	cmp	r3, #16
 80190ea:	d103      	bne.n	80190f4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	2210      	movs	r2, #16
 80190f2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	22ac      	movs	r2, #172	@ 0xac
 80190f8:	589b      	ldr	r3, [r3, r2]
 80190fa:	687a      	ldr	r2, [r7, #4]
 80190fc:	2158      	movs	r1, #88	@ 0x58
 80190fe:	5a51      	ldrh	r1, [r2, r1]
 8019100:	687a      	ldr	r2, [r7, #4]
 8019102:	0010      	movs	r0, r2
 8019104:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019106:	e00e      	b.n	8019126 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	2294      	movs	r2, #148	@ 0x94
 801910c:	589b      	ldr	r3, [r3, r2]
 801910e:	687a      	ldr	r2, [r7, #4]
 8019110:	0010      	movs	r0, r2
 8019112:	4798      	blx	r3
}
 8019114:	e007      	b.n	8019126 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	699a      	ldr	r2, [r3, #24]
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	2108      	movs	r1, #8
 8019122:	430a      	orrs	r2, r1
 8019124:	619a      	str	r2, [r3, #24]
}
 8019126:	46c0      	nop			@ (mov r8, r8)
 8019128:	46bd      	mov	sp, r7
 801912a:	b014      	add	sp, #80	@ 0x50
 801912c:	bd80      	pop	{r7, pc}
 801912e:	46c0      	nop			@ (mov r8, r8)
 8019130:	fffffedf 	.word	0xfffffedf
 8019134:	40004800 	.word	0x40004800
 8019138:	fbffffff 	.word	0xfbffffff

0801913c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b082      	sub	sp, #8
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019144:	46c0      	nop			@ (mov r8, r8)
 8019146:	46bd      	mov	sp, r7
 8019148:	b002      	add	sp, #8
 801914a:	bd80      	pop	{r7, pc}

0801914c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b084      	sub	sp, #16
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	2244      	movs	r2, #68	@ 0x44
 8019158:	2100      	movs	r1, #0
 801915a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801915c:	4b05      	ldr	r3, [pc, #20]	@ (8019174 <USB_EnableGlobalInt+0x28>)
 801915e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	b299      	uxth	r1, r3
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	2240      	movs	r2, #64	@ 0x40
 8019168:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801916a:	2300      	movs	r3, #0
}
 801916c:	0018      	movs	r0, r3
 801916e:	46bd      	mov	sp, r7
 8019170:	b004      	add	sp, #16
 8019172:	bd80      	pop	{r7, pc}
 8019174:	0000bf80 	.word	0x0000bf80

08019178 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b084      	sub	sp, #16
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019180:	4b09      	ldr	r3, [pc, #36]	@ (80191a8 <USB_DisableGlobalInt+0x30>)
 8019182:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	2240      	movs	r2, #64	@ 0x40
 8019188:	5a9b      	ldrh	r3, [r3, r2]
 801918a:	b29b      	uxth	r3, r3
 801918c:	68fa      	ldr	r2, [r7, #12]
 801918e:	b292      	uxth	r2, r2
 8019190:	43d2      	mvns	r2, r2
 8019192:	b292      	uxth	r2, r2
 8019194:	4013      	ands	r3, r2
 8019196:	b299      	uxth	r1, r3
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	2240      	movs	r2, #64	@ 0x40
 801919c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801919e:	2300      	movs	r3, #0
}
 80191a0:	0018      	movs	r0, r3
 80191a2:	46bd      	mov	sp, r7
 80191a4:	b004      	add	sp, #16
 80191a6:	bd80      	pop	{r7, pc}
 80191a8:	0000bf80 	.word	0x0000bf80

080191ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80191ac:	b084      	sub	sp, #16
 80191ae:	b590      	push	{r4, r7, lr}
 80191b0:	b083      	sub	sp, #12
 80191b2:	af00      	add	r7, sp, #0
 80191b4:	6078      	str	r0, [r7, #4]
 80191b6:	2004      	movs	r0, #4
 80191b8:	2410      	movs	r4, #16
 80191ba:	1900      	adds	r0, r0, r4
 80191bc:	2408      	movs	r4, #8
 80191be:	46a4      	mov	ip, r4
 80191c0:	44bc      	add	ip, r7
 80191c2:	4460      	add	r0, ip
 80191c4:	6001      	str	r1, [r0, #0]
 80191c6:	6042      	str	r2, [r0, #4]
 80191c8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	2240      	movs	r2, #64	@ 0x40
 80191ce:	2101      	movs	r1, #1
 80191d0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	2240      	movs	r2, #64	@ 0x40
 80191d6:	2100      	movs	r1, #0
 80191d8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2244      	movs	r2, #68	@ 0x44
 80191de:	2100      	movs	r1, #0
 80191e0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	2250      	movs	r2, #80	@ 0x50
 80191e6:	2100      	movs	r1, #0
 80191e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80191ea:	2300      	movs	r3, #0
}
 80191ec:	0018      	movs	r0, r3
 80191ee:	46bd      	mov	sp, r7
 80191f0:	b003      	add	sp, #12
 80191f2:	bc90      	pop	{r4, r7}
 80191f4:	bc08      	pop	{r3}
 80191f6:	b004      	add	sp, #16
 80191f8:	4718      	bx	r3
	...

080191fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b09c      	sub	sp, #112	@ 0x70
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
 8019204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8019206:	236f      	movs	r3, #111	@ 0x6f
 8019208:	18fb      	adds	r3, r7, r3
 801920a:	2200      	movs	r2, #0
 801920c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801920e:	687a      	ldr	r2, [r7, #4]
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	781b      	ldrb	r3, [r3, #0]
 8019214:	009b      	lsls	r3, r3, #2
 8019216:	18d3      	adds	r3, r2, r3
 8019218:	881b      	ldrh	r3, [r3, #0]
 801921a:	b29a      	uxth	r2, r3
 801921c:	236c      	movs	r3, #108	@ 0x6c
 801921e:	18fb      	adds	r3, r7, r3
 8019220:	49a3      	ldr	r1, [pc, #652]	@ (80194b0 <USB_ActivateEndpoint+0x2b4>)
 8019222:	400a      	ands	r2, r1
 8019224:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8019226:	683b      	ldr	r3, [r7, #0]
 8019228:	78db      	ldrb	r3, [r3, #3]
 801922a:	2b03      	cmp	r3, #3
 801922c:	d017      	beq.n	801925e <USB_ActivateEndpoint+0x62>
 801922e:	dc28      	bgt.n	8019282 <USB_ActivateEndpoint+0x86>
 8019230:	2b02      	cmp	r3, #2
 8019232:	d00e      	beq.n	8019252 <USB_ActivateEndpoint+0x56>
 8019234:	dc25      	bgt.n	8019282 <USB_ActivateEndpoint+0x86>
 8019236:	2b00      	cmp	r3, #0
 8019238:	d002      	beq.n	8019240 <USB_ActivateEndpoint+0x44>
 801923a:	2b01      	cmp	r3, #1
 801923c:	d018      	beq.n	8019270 <USB_ActivateEndpoint+0x74>
 801923e:	e020      	b.n	8019282 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8019240:	226c      	movs	r2, #108	@ 0x6c
 8019242:	18bb      	adds	r3, r7, r2
 8019244:	18ba      	adds	r2, r7, r2
 8019246:	8812      	ldrh	r2, [r2, #0]
 8019248:	2180      	movs	r1, #128	@ 0x80
 801924a:	0089      	lsls	r1, r1, #2
 801924c:	430a      	orrs	r2, r1
 801924e:	801a      	strh	r2, [r3, #0]
      break;
 8019250:	e01c      	b.n	801928c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8019252:	226c      	movs	r2, #108	@ 0x6c
 8019254:	18bb      	adds	r3, r7, r2
 8019256:	18ba      	adds	r2, r7, r2
 8019258:	8812      	ldrh	r2, [r2, #0]
 801925a:	801a      	strh	r2, [r3, #0]
      break;
 801925c:	e016      	b.n	801928c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801925e:	226c      	movs	r2, #108	@ 0x6c
 8019260:	18bb      	adds	r3, r7, r2
 8019262:	18ba      	adds	r2, r7, r2
 8019264:	8812      	ldrh	r2, [r2, #0]
 8019266:	21c0      	movs	r1, #192	@ 0xc0
 8019268:	00c9      	lsls	r1, r1, #3
 801926a:	430a      	orrs	r2, r1
 801926c:	801a      	strh	r2, [r3, #0]
      break;
 801926e:	e00d      	b.n	801928c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8019270:	226c      	movs	r2, #108	@ 0x6c
 8019272:	18bb      	adds	r3, r7, r2
 8019274:	18ba      	adds	r2, r7, r2
 8019276:	8812      	ldrh	r2, [r2, #0]
 8019278:	2180      	movs	r1, #128	@ 0x80
 801927a:	00c9      	lsls	r1, r1, #3
 801927c:	430a      	orrs	r2, r1
 801927e:	801a      	strh	r2, [r3, #0]
      break;
 8019280:	e004      	b.n	801928c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8019282:	236f      	movs	r3, #111	@ 0x6f
 8019284:	18fb      	adds	r3, r7, r3
 8019286:	2201      	movs	r2, #1
 8019288:	701a      	strb	r2, [r3, #0]
      break;
 801928a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801928c:	687a      	ldr	r2, [r7, #4]
 801928e:	683b      	ldr	r3, [r7, #0]
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	009b      	lsls	r3, r3, #2
 8019294:	18d3      	adds	r3, r2, r3
 8019296:	226c      	movs	r2, #108	@ 0x6c
 8019298:	18ba      	adds	r2, r7, r2
 801929a:	8812      	ldrh	r2, [r2, #0]
 801929c:	4985      	ldr	r1, [pc, #532]	@ (80194b4 <USB_ActivateEndpoint+0x2b8>)
 801929e:	430a      	orrs	r2, r1
 80192a0:	b292      	uxth	r2, r2
 80192a2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80192a4:	687a      	ldr	r2, [r7, #4]
 80192a6:	683b      	ldr	r3, [r7, #0]
 80192a8:	781b      	ldrb	r3, [r3, #0]
 80192aa:	009b      	lsls	r3, r3, #2
 80192ac:	18d3      	adds	r3, r2, r3
 80192ae:	881b      	ldrh	r3, [r3, #0]
 80192b0:	b29b      	uxth	r3, r3
 80192b2:	b21b      	sxth	r3, r3
 80192b4:	4a80      	ldr	r2, [pc, #512]	@ (80194b8 <USB_ActivateEndpoint+0x2bc>)
 80192b6:	4013      	ands	r3, r2
 80192b8:	b21a      	sxth	r2, r3
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	781b      	ldrb	r3, [r3, #0]
 80192be:	b21b      	sxth	r3, r3
 80192c0:	4313      	orrs	r3, r2
 80192c2:	b21a      	sxth	r2, r3
 80192c4:	2166      	movs	r1, #102	@ 0x66
 80192c6:	187b      	adds	r3, r7, r1
 80192c8:	801a      	strh	r2, [r3, #0]
 80192ca:	687a      	ldr	r2, [r7, #4]
 80192cc:	683b      	ldr	r3, [r7, #0]
 80192ce:	781b      	ldrb	r3, [r3, #0]
 80192d0:	009b      	lsls	r3, r3, #2
 80192d2:	18d3      	adds	r3, r2, r3
 80192d4:	187a      	adds	r2, r7, r1
 80192d6:	8812      	ldrh	r2, [r2, #0]
 80192d8:	4976      	ldr	r1, [pc, #472]	@ (80194b4 <USB_ActivateEndpoint+0x2b8>)
 80192da:	430a      	orrs	r2, r1
 80192dc:	b292      	uxth	r2, r2
 80192de:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80192e0:	683b      	ldr	r3, [r7, #0]
 80192e2:	7b1b      	ldrb	r3, [r3, #12]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d000      	beq.n	80192ea <USB_ActivateEndpoint+0xee>
 80192e8:	e178      	b.n	80195dc <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80192ea:	683b      	ldr	r3, [r7, #0]
 80192ec:	785b      	ldrb	r3, [r3, #1]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d100      	bne.n	80192f4 <USB_ActivateEndpoint+0xf8>
 80192f2:	e07a      	b.n	80193ea <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	61bb      	str	r3, [r7, #24]
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2250      	movs	r2, #80	@ 0x50
 80192fc:	5a9b      	ldrh	r3, [r3, r2]
 80192fe:	b29b      	uxth	r3, r3
 8019300:	001a      	movs	r2, r3
 8019302:	69bb      	ldr	r3, [r7, #24]
 8019304:	189b      	adds	r3, r3, r2
 8019306:	61bb      	str	r3, [r7, #24]
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	781b      	ldrb	r3, [r3, #0]
 801930c:	00da      	lsls	r2, r3, #3
 801930e:	69bb      	ldr	r3, [r7, #24]
 8019310:	18d3      	adds	r3, r2, r3
 8019312:	2280      	movs	r2, #128	@ 0x80
 8019314:	00d2      	lsls	r2, r2, #3
 8019316:	4694      	mov	ip, r2
 8019318:	4463      	add	r3, ip
 801931a:	617b      	str	r3, [r7, #20]
 801931c:	683b      	ldr	r3, [r7, #0]
 801931e:	88db      	ldrh	r3, [r3, #6]
 8019320:	085b      	lsrs	r3, r3, #1
 8019322:	b29b      	uxth	r3, r3
 8019324:	18db      	adds	r3, r3, r3
 8019326:	b29a      	uxth	r2, r3
 8019328:	697b      	ldr	r3, [r7, #20]
 801932a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801932c:	687a      	ldr	r2, [r7, #4]
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	781b      	ldrb	r3, [r3, #0]
 8019332:	009b      	lsls	r3, r3, #2
 8019334:	18d2      	adds	r2, r2, r3
 8019336:	2112      	movs	r1, #18
 8019338:	187b      	adds	r3, r7, r1
 801933a:	8812      	ldrh	r2, [r2, #0]
 801933c:	801a      	strh	r2, [r3, #0]
 801933e:	187b      	adds	r3, r7, r1
 8019340:	881b      	ldrh	r3, [r3, #0]
 8019342:	2240      	movs	r2, #64	@ 0x40
 8019344:	4013      	ands	r3, r2
 8019346:	d016      	beq.n	8019376 <USB_ActivateEndpoint+0x17a>
 8019348:	687a      	ldr	r2, [r7, #4]
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	781b      	ldrb	r3, [r3, #0]
 801934e:	009b      	lsls	r3, r3, #2
 8019350:	18d3      	adds	r3, r2, r3
 8019352:	881b      	ldrh	r3, [r3, #0]
 8019354:	b29a      	uxth	r2, r3
 8019356:	2010      	movs	r0, #16
 8019358:	183b      	adds	r3, r7, r0
 801935a:	4957      	ldr	r1, [pc, #348]	@ (80194b8 <USB_ActivateEndpoint+0x2bc>)
 801935c:	400a      	ands	r2, r1
 801935e:	801a      	strh	r2, [r3, #0]
 8019360:	687a      	ldr	r2, [r7, #4]
 8019362:	683b      	ldr	r3, [r7, #0]
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	009b      	lsls	r3, r3, #2
 8019368:	18d3      	adds	r3, r2, r3
 801936a:	183a      	adds	r2, r7, r0
 801936c:	8812      	ldrh	r2, [r2, #0]
 801936e:	4953      	ldr	r1, [pc, #332]	@ (80194bc <USB_ActivateEndpoint+0x2c0>)
 8019370:	430a      	orrs	r2, r1
 8019372:	b292      	uxth	r2, r2
 8019374:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	78db      	ldrb	r3, [r3, #3]
 801937a:	2b01      	cmp	r3, #1
 801937c:	d01d      	beq.n	80193ba <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801937e:	687a      	ldr	r2, [r7, #4]
 8019380:	683b      	ldr	r3, [r7, #0]
 8019382:	781b      	ldrb	r3, [r3, #0]
 8019384:	009b      	lsls	r3, r3, #2
 8019386:	18d3      	adds	r3, r2, r3
 8019388:	881b      	ldrh	r3, [r3, #0]
 801938a:	b29a      	uxth	r2, r3
 801938c:	200c      	movs	r0, #12
 801938e:	183b      	adds	r3, r7, r0
 8019390:	494b      	ldr	r1, [pc, #300]	@ (80194c0 <USB_ActivateEndpoint+0x2c4>)
 8019392:	400a      	ands	r2, r1
 8019394:	801a      	strh	r2, [r3, #0]
 8019396:	183b      	adds	r3, r7, r0
 8019398:	183a      	adds	r2, r7, r0
 801939a:	8812      	ldrh	r2, [r2, #0]
 801939c:	2120      	movs	r1, #32
 801939e:	404a      	eors	r2, r1
 80193a0:	801a      	strh	r2, [r3, #0]
 80193a2:	687a      	ldr	r2, [r7, #4]
 80193a4:	683b      	ldr	r3, [r7, #0]
 80193a6:	781b      	ldrb	r3, [r3, #0]
 80193a8:	009b      	lsls	r3, r3, #2
 80193aa:	18d3      	adds	r3, r2, r3
 80193ac:	183a      	adds	r2, r7, r0
 80193ae:	8812      	ldrh	r2, [r2, #0]
 80193b0:	4940      	ldr	r1, [pc, #256]	@ (80194b4 <USB_ActivateEndpoint+0x2b8>)
 80193b2:	430a      	orrs	r2, r1
 80193b4:	b292      	uxth	r2, r2
 80193b6:	801a      	strh	r2, [r3, #0]
 80193b8:	e2b4      	b.n	8019924 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	781b      	ldrb	r3, [r3, #0]
 80193c0:	009b      	lsls	r3, r3, #2
 80193c2:	18d3      	adds	r3, r2, r3
 80193c4:	881b      	ldrh	r3, [r3, #0]
 80193c6:	b29a      	uxth	r2, r3
 80193c8:	200e      	movs	r0, #14
 80193ca:	183b      	adds	r3, r7, r0
 80193cc:	493c      	ldr	r1, [pc, #240]	@ (80194c0 <USB_ActivateEndpoint+0x2c4>)
 80193ce:	400a      	ands	r2, r1
 80193d0:	801a      	strh	r2, [r3, #0]
 80193d2:	687a      	ldr	r2, [r7, #4]
 80193d4:	683b      	ldr	r3, [r7, #0]
 80193d6:	781b      	ldrb	r3, [r3, #0]
 80193d8:	009b      	lsls	r3, r3, #2
 80193da:	18d3      	adds	r3, r2, r3
 80193dc:	183a      	adds	r2, r7, r0
 80193de:	8812      	ldrh	r2, [r2, #0]
 80193e0:	4934      	ldr	r1, [pc, #208]	@ (80194b4 <USB_ActivateEndpoint+0x2b8>)
 80193e2:	430a      	orrs	r2, r1
 80193e4:	b292      	uxth	r2, r2
 80193e6:	801a      	strh	r2, [r3, #0]
 80193e8:	e29c      	b.n	8019924 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	2250      	movs	r2, #80	@ 0x50
 80193f2:	5a9b      	ldrh	r3, [r3, r2]
 80193f4:	b29b      	uxth	r3, r3
 80193f6:	001a      	movs	r2, r3
 80193f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193fa:	189b      	adds	r3, r3, r2
 80193fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	00da      	lsls	r2, r3, #3
 8019404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019406:	18d3      	adds	r3, r2, r3
 8019408:	4a2e      	ldr	r2, [pc, #184]	@ (80194c4 <USB_ActivateEndpoint+0x2c8>)
 801940a:	4694      	mov	ip, r2
 801940c:	4463      	add	r3, ip
 801940e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019410:	683b      	ldr	r3, [r7, #0]
 8019412:	88db      	ldrh	r3, [r3, #6]
 8019414:	085b      	lsrs	r3, r3, #1
 8019416:	b29b      	uxth	r3, r3
 8019418:	18db      	adds	r3, r3, r3
 801941a:	b29a      	uxth	r2, r3
 801941c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801941e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	2250      	movs	r2, #80	@ 0x50
 8019428:	5a9b      	ldrh	r3, [r3, r2]
 801942a:	b29b      	uxth	r3, r3
 801942c:	001a      	movs	r2, r3
 801942e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019430:	189b      	adds	r3, r3, r2
 8019432:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019434:	683b      	ldr	r3, [r7, #0]
 8019436:	781b      	ldrb	r3, [r3, #0]
 8019438:	00da      	lsls	r2, r3, #3
 801943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801943c:	18d3      	adds	r3, r2, r3
 801943e:	4a22      	ldr	r2, [pc, #136]	@ (80194c8 <USB_ActivateEndpoint+0x2cc>)
 8019440:	4694      	mov	ip, r2
 8019442:	4463      	add	r3, ip
 8019444:	627b      	str	r3, [r7, #36]	@ 0x24
 8019446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019448:	881b      	ldrh	r3, [r3, #0]
 801944a:	b29b      	uxth	r3, r3
 801944c:	059b      	lsls	r3, r3, #22
 801944e:	0d9b      	lsrs	r3, r3, #22
 8019450:	b29a      	uxth	r2, r3
 8019452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019454:	801a      	strh	r2, [r3, #0]
 8019456:	683b      	ldr	r3, [r7, #0]
 8019458:	691b      	ldr	r3, [r3, #16]
 801945a:	2b3e      	cmp	r3, #62	@ 0x3e
 801945c:	d91a      	bls.n	8019494 <USB_ActivateEndpoint+0x298>
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	691b      	ldr	r3, [r3, #16]
 8019462:	095b      	lsrs	r3, r3, #5
 8019464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	691b      	ldr	r3, [r3, #16]
 801946a:	221f      	movs	r2, #31
 801946c:	4013      	ands	r3, r2
 801946e:	d102      	bne.n	8019476 <USB_ActivateEndpoint+0x27a>
 8019470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019472:	3b01      	subs	r3, #1
 8019474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019478:	881b      	ldrh	r3, [r3, #0]
 801947a:	b29a      	uxth	r2, r3
 801947c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801947e:	b29b      	uxth	r3, r3
 8019480:	029b      	lsls	r3, r3, #10
 8019482:	b29b      	uxth	r3, r3
 8019484:	4313      	orrs	r3, r2
 8019486:	b29b      	uxth	r3, r3
 8019488:	4a10      	ldr	r2, [pc, #64]	@ (80194cc <USB_ActivateEndpoint+0x2d0>)
 801948a:	4313      	orrs	r3, r2
 801948c:	b29a      	uxth	r2, r3
 801948e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019490:	801a      	strh	r2, [r3, #0]
 8019492:	e034      	b.n	80194fe <USB_ActivateEndpoint+0x302>
 8019494:	683b      	ldr	r3, [r7, #0]
 8019496:	691b      	ldr	r3, [r3, #16]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d119      	bne.n	80194d0 <USB_ActivateEndpoint+0x2d4>
 801949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801949e:	881b      	ldrh	r3, [r3, #0]
 80194a0:	b29b      	uxth	r3, r3
 80194a2:	4a0a      	ldr	r2, [pc, #40]	@ (80194cc <USB_ActivateEndpoint+0x2d0>)
 80194a4:	4313      	orrs	r3, r2
 80194a6:	b29a      	uxth	r2, r3
 80194a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194aa:	801a      	strh	r2, [r3, #0]
 80194ac:	e027      	b.n	80194fe <USB_ActivateEndpoint+0x302>
 80194ae:	46c0      	nop			@ (mov r8, r8)
 80194b0:	ffff898f 	.word	0xffff898f
 80194b4:	ffff8080 	.word	0xffff8080
 80194b8:	ffff8f8f 	.word	0xffff8f8f
 80194bc:	ffff80c0 	.word	0xffff80c0
 80194c0:	ffff8fbf 	.word	0xffff8fbf
 80194c4:	00000404 	.word	0x00000404
 80194c8:	00000406 	.word	0x00000406
 80194cc:	ffff8000 	.word	0xffff8000
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	691b      	ldr	r3, [r3, #16]
 80194d4:	085b      	lsrs	r3, r3, #1
 80194d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80194d8:	683b      	ldr	r3, [r7, #0]
 80194da:	691b      	ldr	r3, [r3, #16]
 80194dc:	2201      	movs	r2, #1
 80194de:	4013      	ands	r3, r2
 80194e0:	d002      	beq.n	80194e8 <USB_ActivateEndpoint+0x2ec>
 80194e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80194e4:	3301      	adds	r3, #1
 80194e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80194e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194ea:	881b      	ldrh	r3, [r3, #0]
 80194ec:	b29a      	uxth	r2, r3
 80194ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80194f0:	b29b      	uxth	r3, r3
 80194f2:	029b      	lsls	r3, r3, #10
 80194f4:	b29b      	uxth	r3, r3
 80194f6:	4313      	orrs	r3, r2
 80194f8:	b29a      	uxth	r2, r3
 80194fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80194fe:	687a      	ldr	r2, [r7, #4]
 8019500:	683b      	ldr	r3, [r7, #0]
 8019502:	781b      	ldrb	r3, [r3, #0]
 8019504:	009b      	lsls	r3, r3, #2
 8019506:	18d2      	adds	r2, r2, r3
 8019508:	2122      	movs	r1, #34	@ 0x22
 801950a:	187b      	adds	r3, r7, r1
 801950c:	8812      	ldrh	r2, [r2, #0]
 801950e:	801a      	strh	r2, [r3, #0]
 8019510:	187b      	adds	r3, r7, r1
 8019512:	881a      	ldrh	r2, [r3, #0]
 8019514:	2380      	movs	r3, #128	@ 0x80
 8019516:	01db      	lsls	r3, r3, #7
 8019518:	4013      	ands	r3, r2
 801951a:	d016      	beq.n	801954a <USB_ActivateEndpoint+0x34e>
 801951c:	687a      	ldr	r2, [r7, #4]
 801951e:	683b      	ldr	r3, [r7, #0]
 8019520:	781b      	ldrb	r3, [r3, #0]
 8019522:	009b      	lsls	r3, r3, #2
 8019524:	18d3      	adds	r3, r2, r3
 8019526:	881b      	ldrh	r3, [r3, #0]
 8019528:	b29a      	uxth	r2, r3
 801952a:	2020      	movs	r0, #32
 801952c:	183b      	adds	r3, r7, r0
 801952e:	49dd      	ldr	r1, [pc, #884]	@ (80198a4 <USB_ActivateEndpoint+0x6a8>)
 8019530:	400a      	ands	r2, r1
 8019532:	801a      	strh	r2, [r3, #0]
 8019534:	687a      	ldr	r2, [r7, #4]
 8019536:	683b      	ldr	r3, [r7, #0]
 8019538:	781b      	ldrb	r3, [r3, #0]
 801953a:	009b      	lsls	r3, r3, #2
 801953c:	18d3      	adds	r3, r2, r3
 801953e:	183a      	adds	r2, r7, r0
 8019540:	8812      	ldrh	r2, [r2, #0]
 8019542:	49d9      	ldr	r1, [pc, #868]	@ (80198a8 <USB_ActivateEndpoint+0x6ac>)
 8019544:	430a      	orrs	r2, r1
 8019546:	b292      	uxth	r2, r2
 8019548:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	781b      	ldrb	r3, [r3, #0]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d125      	bne.n	801959e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019552:	687a      	ldr	r2, [r7, #4]
 8019554:	683b      	ldr	r3, [r7, #0]
 8019556:	781b      	ldrb	r3, [r3, #0]
 8019558:	009b      	lsls	r3, r3, #2
 801955a:	18d3      	adds	r3, r2, r3
 801955c:	881b      	ldrh	r3, [r3, #0]
 801955e:	b29a      	uxth	r2, r3
 8019560:	201c      	movs	r0, #28
 8019562:	183b      	adds	r3, r7, r0
 8019564:	49d1      	ldr	r1, [pc, #836]	@ (80198ac <USB_ActivateEndpoint+0x6b0>)
 8019566:	400a      	ands	r2, r1
 8019568:	801a      	strh	r2, [r3, #0]
 801956a:	183b      	adds	r3, r7, r0
 801956c:	183a      	adds	r2, r7, r0
 801956e:	8812      	ldrh	r2, [r2, #0]
 8019570:	2180      	movs	r1, #128	@ 0x80
 8019572:	0149      	lsls	r1, r1, #5
 8019574:	404a      	eors	r2, r1
 8019576:	801a      	strh	r2, [r3, #0]
 8019578:	183b      	adds	r3, r7, r0
 801957a:	183a      	adds	r2, r7, r0
 801957c:	8812      	ldrh	r2, [r2, #0]
 801957e:	2180      	movs	r1, #128	@ 0x80
 8019580:	0189      	lsls	r1, r1, #6
 8019582:	404a      	eors	r2, r1
 8019584:	801a      	strh	r2, [r3, #0]
 8019586:	687a      	ldr	r2, [r7, #4]
 8019588:	683b      	ldr	r3, [r7, #0]
 801958a:	781b      	ldrb	r3, [r3, #0]
 801958c:	009b      	lsls	r3, r3, #2
 801958e:	18d3      	adds	r3, r2, r3
 8019590:	183a      	adds	r2, r7, r0
 8019592:	8812      	ldrh	r2, [r2, #0]
 8019594:	49c6      	ldr	r1, [pc, #792]	@ (80198b0 <USB_ActivateEndpoint+0x6b4>)
 8019596:	430a      	orrs	r2, r1
 8019598:	b292      	uxth	r2, r2
 801959a:	801a      	strh	r2, [r3, #0]
 801959c:	e1c2      	b.n	8019924 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801959e:	687a      	ldr	r2, [r7, #4]
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	781b      	ldrb	r3, [r3, #0]
 80195a4:	009b      	lsls	r3, r3, #2
 80195a6:	18d3      	adds	r3, r2, r3
 80195a8:	881b      	ldrh	r3, [r3, #0]
 80195aa:	b29a      	uxth	r2, r3
 80195ac:	201e      	movs	r0, #30
 80195ae:	183b      	adds	r3, r7, r0
 80195b0:	49be      	ldr	r1, [pc, #760]	@ (80198ac <USB_ActivateEndpoint+0x6b0>)
 80195b2:	400a      	ands	r2, r1
 80195b4:	801a      	strh	r2, [r3, #0]
 80195b6:	183b      	adds	r3, r7, r0
 80195b8:	183a      	adds	r2, r7, r0
 80195ba:	8812      	ldrh	r2, [r2, #0]
 80195bc:	2180      	movs	r1, #128	@ 0x80
 80195be:	0189      	lsls	r1, r1, #6
 80195c0:	404a      	eors	r2, r1
 80195c2:	801a      	strh	r2, [r3, #0]
 80195c4:	687a      	ldr	r2, [r7, #4]
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	781b      	ldrb	r3, [r3, #0]
 80195ca:	009b      	lsls	r3, r3, #2
 80195cc:	18d3      	adds	r3, r2, r3
 80195ce:	183a      	adds	r2, r7, r0
 80195d0:	8812      	ldrh	r2, [r2, #0]
 80195d2:	49b7      	ldr	r1, [pc, #732]	@ (80198b0 <USB_ActivateEndpoint+0x6b4>)
 80195d4:	430a      	orrs	r2, r1
 80195d6:	b292      	uxth	r2, r2
 80195d8:	801a      	strh	r2, [r3, #0]
 80195da:	e1a3      	b.n	8019924 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	78db      	ldrb	r3, [r3, #3]
 80195e0:	2b02      	cmp	r3, #2
 80195e2:	d117      	bne.n	8019614 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80195e4:	687a      	ldr	r2, [r7, #4]
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	781b      	ldrb	r3, [r3, #0]
 80195ea:	009b      	lsls	r3, r3, #2
 80195ec:	18d3      	adds	r3, r2, r3
 80195ee:	881b      	ldrh	r3, [r3, #0]
 80195f0:	b29a      	uxth	r2, r3
 80195f2:	2062      	movs	r0, #98	@ 0x62
 80195f4:	183b      	adds	r3, r7, r0
 80195f6:	49ab      	ldr	r1, [pc, #684]	@ (80198a4 <USB_ActivateEndpoint+0x6a8>)
 80195f8:	400a      	ands	r2, r1
 80195fa:	801a      	strh	r2, [r3, #0]
 80195fc:	687a      	ldr	r2, [r7, #4]
 80195fe:	683b      	ldr	r3, [r7, #0]
 8019600:	781b      	ldrb	r3, [r3, #0]
 8019602:	009b      	lsls	r3, r3, #2
 8019604:	18d3      	adds	r3, r2, r3
 8019606:	183a      	adds	r2, r7, r0
 8019608:	8812      	ldrh	r2, [r2, #0]
 801960a:	49aa      	ldr	r1, [pc, #680]	@ (80198b4 <USB_ActivateEndpoint+0x6b8>)
 801960c:	430a      	orrs	r2, r1
 801960e:	b292      	uxth	r2, r2
 8019610:	801a      	strh	r2, [r3, #0]
 8019612:	e016      	b.n	8019642 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8019614:	687a      	ldr	r2, [r7, #4]
 8019616:	683b      	ldr	r3, [r7, #0]
 8019618:	781b      	ldrb	r3, [r3, #0]
 801961a:	009b      	lsls	r3, r3, #2
 801961c:	18d3      	adds	r3, r2, r3
 801961e:	881b      	ldrh	r3, [r3, #0]
 8019620:	b29a      	uxth	r2, r3
 8019622:	2064      	movs	r0, #100	@ 0x64
 8019624:	183b      	adds	r3, r7, r0
 8019626:	49a4      	ldr	r1, [pc, #656]	@ (80198b8 <USB_ActivateEndpoint+0x6bc>)
 8019628:	400a      	ands	r2, r1
 801962a:	801a      	strh	r2, [r3, #0]
 801962c:	687a      	ldr	r2, [r7, #4]
 801962e:	683b      	ldr	r3, [r7, #0]
 8019630:	781b      	ldrb	r3, [r3, #0]
 8019632:	009b      	lsls	r3, r3, #2
 8019634:	18d3      	adds	r3, r2, r3
 8019636:	183a      	adds	r2, r7, r0
 8019638:	8812      	ldrh	r2, [r2, #0]
 801963a:	499d      	ldr	r1, [pc, #628]	@ (80198b0 <USB_ActivateEndpoint+0x6b4>)
 801963c:	430a      	orrs	r2, r1
 801963e:	b292      	uxth	r2, r2
 8019640:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	2250      	movs	r2, #80	@ 0x50
 801964a:	5a9b      	ldrh	r3, [r3, r2]
 801964c:	b29b      	uxth	r3, r3
 801964e:	001a      	movs	r2, r3
 8019650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019652:	189b      	adds	r3, r3, r2
 8019654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019656:	683b      	ldr	r3, [r7, #0]
 8019658:	781b      	ldrb	r3, [r3, #0]
 801965a:	00da      	lsls	r2, r3, #3
 801965c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801965e:	18d3      	adds	r3, r2, r3
 8019660:	2280      	movs	r2, #128	@ 0x80
 8019662:	00d2      	lsls	r2, r2, #3
 8019664:	4694      	mov	ip, r2
 8019666:	4463      	add	r3, ip
 8019668:	65bb      	str	r3, [r7, #88]	@ 0x58
 801966a:	683b      	ldr	r3, [r7, #0]
 801966c:	891b      	ldrh	r3, [r3, #8]
 801966e:	085b      	lsrs	r3, r3, #1
 8019670:	b29b      	uxth	r3, r3
 8019672:	18db      	adds	r3, r3, r3
 8019674:	b29a      	uxth	r2, r3
 8019676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019678:	801a      	strh	r2, [r3, #0]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	657b      	str	r3, [r7, #84]	@ 0x54
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	2250      	movs	r2, #80	@ 0x50
 8019682:	5a9b      	ldrh	r3, [r3, r2]
 8019684:	b29b      	uxth	r3, r3
 8019686:	001a      	movs	r2, r3
 8019688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801968a:	189b      	adds	r3, r3, r2
 801968c:	657b      	str	r3, [r7, #84]	@ 0x54
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	781b      	ldrb	r3, [r3, #0]
 8019692:	00da      	lsls	r2, r3, #3
 8019694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019696:	18d3      	adds	r3, r2, r3
 8019698:	4a88      	ldr	r2, [pc, #544]	@ (80198bc <USB_ActivateEndpoint+0x6c0>)
 801969a:	4694      	mov	ip, r2
 801969c:	4463      	add	r3, ip
 801969e:	653b      	str	r3, [r7, #80]	@ 0x50
 80196a0:	683b      	ldr	r3, [r7, #0]
 80196a2:	895b      	ldrh	r3, [r3, #10]
 80196a4:	085b      	lsrs	r3, r3, #1
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	18db      	adds	r3, r3, r3
 80196aa:	b29a      	uxth	r2, r3
 80196ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80196ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	785b      	ldrb	r3, [r3, #1]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d000      	beq.n	80196ba <USB_ActivateEndpoint+0x4be>
 80196b8:	e087      	b.n	80197ca <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80196ba:	687a      	ldr	r2, [r7, #4]
 80196bc:	683b      	ldr	r3, [r7, #0]
 80196be:	781b      	ldrb	r3, [r3, #0]
 80196c0:	009b      	lsls	r3, r3, #2
 80196c2:	18d2      	adds	r2, r2, r3
 80196c4:	2140      	movs	r1, #64	@ 0x40
 80196c6:	187b      	adds	r3, r7, r1
 80196c8:	8812      	ldrh	r2, [r2, #0]
 80196ca:	801a      	strh	r2, [r3, #0]
 80196cc:	187b      	adds	r3, r7, r1
 80196ce:	881a      	ldrh	r2, [r3, #0]
 80196d0:	2380      	movs	r3, #128	@ 0x80
 80196d2:	01db      	lsls	r3, r3, #7
 80196d4:	4013      	ands	r3, r2
 80196d6:	d016      	beq.n	8019706 <USB_ActivateEndpoint+0x50a>
 80196d8:	687a      	ldr	r2, [r7, #4]
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	781b      	ldrb	r3, [r3, #0]
 80196de:	009b      	lsls	r3, r3, #2
 80196e0:	18d3      	adds	r3, r2, r3
 80196e2:	881b      	ldrh	r3, [r3, #0]
 80196e4:	b29a      	uxth	r2, r3
 80196e6:	203e      	movs	r0, #62	@ 0x3e
 80196e8:	183b      	adds	r3, r7, r0
 80196ea:	496e      	ldr	r1, [pc, #440]	@ (80198a4 <USB_ActivateEndpoint+0x6a8>)
 80196ec:	400a      	ands	r2, r1
 80196ee:	801a      	strh	r2, [r3, #0]
 80196f0:	687a      	ldr	r2, [r7, #4]
 80196f2:	683b      	ldr	r3, [r7, #0]
 80196f4:	781b      	ldrb	r3, [r3, #0]
 80196f6:	009b      	lsls	r3, r3, #2
 80196f8:	18d3      	adds	r3, r2, r3
 80196fa:	183a      	adds	r2, r7, r0
 80196fc:	8812      	ldrh	r2, [r2, #0]
 80196fe:	496a      	ldr	r1, [pc, #424]	@ (80198a8 <USB_ActivateEndpoint+0x6ac>)
 8019700:	430a      	orrs	r2, r1
 8019702:	b292      	uxth	r2, r2
 8019704:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019706:	687a      	ldr	r2, [r7, #4]
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	009b      	lsls	r3, r3, #2
 801970e:	18d2      	adds	r2, r2, r3
 8019710:	213c      	movs	r1, #60	@ 0x3c
 8019712:	187b      	adds	r3, r7, r1
 8019714:	8812      	ldrh	r2, [r2, #0]
 8019716:	801a      	strh	r2, [r3, #0]
 8019718:	187b      	adds	r3, r7, r1
 801971a:	881b      	ldrh	r3, [r3, #0]
 801971c:	2240      	movs	r2, #64	@ 0x40
 801971e:	4013      	ands	r3, r2
 8019720:	d016      	beq.n	8019750 <USB_ActivateEndpoint+0x554>
 8019722:	687a      	ldr	r2, [r7, #4]
 8019724:	683b      	ldr	r3, [r7, #0]
 8019726:	781b      	ldrb	r3, [r3, #0]
 8019728:	009b      	lsls	r3, r3, #2
 801972a:	18d3      	adds	r3, r2, r3
 801972c:	881b      	ldrh	r3, [r3, #0]
 801972e:	b29a      	uxth	r2, r3
 8019730:	203a      	movs	r0, #58	@ 0x3a
 8019732:	183b      	adds	r3, r7, r0
 8019734:	495b      	ldr	r1, [pc, #364]	@ (80198a4 <USB_ActivateEndpoint+0x6a8>)
 8019736:	400a      	ands	r2, r1
 8019738:	801a      	strh	r2, [r3, #0]
 801973a:	687a      	ldr	r2, [r7, #4]
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	781b      	ldrb	r3, [r3, #0]
 8019740:	009b      	lsls	r3, r3, #2
 8019742:	18d3      	adds	r3, r2, r3
 8019744:	183a      	adds	r2, r7, r0
 8019746:	8812      	ldrh	r2, [r2, #0]
 8019748:	495d      	ldr	r1, [pc, #372]	@ (80198c0 <USB_ActivateEndpoint+0x6c4>)
 801974a:	430a      	orrs	r2, r1
 801974c:	b292      	uxth	r2, r2
 801974e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019750:	687a      	ldr	r2, [r7, #4]
 8019752:	683b      	ldr	r3, [r7, #0]
 8019754:	781b      	ldrb	r3, [r3, #0]
 8019756:	009b      	lsls	r3, r3, #2
 8019758:	18d3      	adds	r3, r2, r3
 801975a:	881b      	ldrh	r3, [r3, #0]
 801975c:	b29a      	uxth	r2, r3
 801975e:	2038      	movs	r0, #56	@ 0x38
 8019760:	183b      	adds	r3, r7, r0
 8019762:	4952      	ldr	r1, [pc, #328]	@ (80198ac <USB_ActivateEndpoint+0x6b0>)
 8019764:	400a      	ands	r2, r1
 8019766:	801a      	strh	r2, [r3, #0]
 8019768:	183b      	adds	r3, r7, r0
 801976a:	183a      	adds	r2, r7, r0
 801976c:	8812      	ldrh	r2, [r2, #0]
 801976e:	2180      	movs	r1, #128	@ 0x80
 8019770:	0149      	lsls	r1, r1, #5
 8019772:	404a      	eors	r2, r1
 8019774:	801a      	strh	r2, [r3, #0]
 8019776:	183b      	adds	r3, r7, r0
 8019778:	183a      	adds	r2, r7, r0
 801977a:	8812      	ldrh	r2, [r2, #0]
 801977c:	2180      	movs	r1, #128	@ 0x80
 801977e:	0189      	lsls	r1, r1, #6
 8019780:	404a      	eors	r2, r1
 8019782:	801a      	strh	r2, [r3, #0]
 8019784:	687a      	ldr	r2, [r7, #4]
 8019786:	683b      	ldr	r3, [r7, #0]
 8019788:	781b      	ldrb	r3, [r3, #0]
 801978a:	009b      	lsls	r3, r3, #2
 801978c:	18d3      	adds	r3, r2, r3
 801978e:	183a      	adds	r2, r7, r0
 8019790:	8812      	ldrh	r2, [r2, #0]
 8019792:	4947      	ldr	r1, [pc, #284]	@ (80198b0 <USB_ActivateEndpoint+0x6b4>)
 8019794:	430a      	orrs	r2, r1
 8019796:	b292      	uxth	r2, r2
 8019798:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801979a:	687a      	ldr	r2, [r7, #4]
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	781b      	ldrb	r3, [r3, #0]
 80197a0:	009b      	lsls	r3, r3, #2
 80197a2:	18d3      	adds	r3, r2, r3
 80197a4:	881b      	ldrh	r3, [r3, #0]
 80197a6:	b29a      	uxth	r2, r3
 80197a8:	2036      	movs	r0, #54	@ 0x36
 80197aa:	183b      	adds	r3, r7, r0
 80197ac:	4945      	ldr	r1, [pc, #276]	@ (80198c4 <USB_ActivateEndpoint+0x6c8>)
 80197ae:	400a      	ands	r2, r1
 80197b0:	801a      	strh	r2, [r3, #0]
 80197b2:	687a      	ldr	r2, [r7, #4]
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	781b      	ldrb	r3, [r3, #0]
 80197b8:	009b      	lsls	r3, r3, #2
 80197ba:	18d3      	adds	r3, r2, r3
 80197bc:	183a      	adds	r2, r7, r0
 80197be:	8812      	ldrh	r2, [r2, #0]
 80197c0:	493b      	ldr	r1, [pc, #236]	@ (80198b0 <USB_ActivateEndpoint+0x6b4>)
 80197c2:	430a      	orrs	r2, r1
 80197c4:	b292      	uxth	r2, r2
 80197c6:	801a      	strh	r2, [r3, #0]
 80197c8:	e0ac      	b.n	8019924 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80197ca:	687a      	ldr	r2, [r7, #4]
 80197cc:	683b      	ldr	r3, [r7, #0]
 80197ce:	781b      	ldrb	r3, [r3, #0]
 80197d0:	009b      	lsls	r3, r3, #2
 80197d2:	18d2      	adds	r2, r2, r3
 80197d4:	214e      	movs	r1, #78	@ 0x4e
 80197d6:	187b      	adds	r3, r7, r1
 80197d8:	8812      	ldrh	r2, [r2, #0]
 80197da:	801a      	strh	r2, [r3, #0]
 80197dc:	187b      	adds	r3, r7, r1
 80197de:	881a      	ldrh	r2, [r3, #0]
 80197e0:	2380      	movs	r3, #128	@ 0x80
 80197e2:	01db      	lsls	r3, r3, #7
 80197e4:	4013      	ands	r3, r2
 80197e6:	d016      	beq.n	8019816 <USB_ActivateEndpoint+0x61a>
 80197e8:	687a      	ldr	r2, [r7, #4]
 80197ea:	683b      	ldr	r3, [r7, #0]
 80197ec:	781b      	ldrb	r3, [r3, #0]
 80197ee:	009b      	lsls	r3, r3, #2
 80197f0:	18d3      	adds	r3, r2, r3
 80197f2:	881b      	ldrh	r3, [r3, #0]
 80197f4:	b29a      	uxth	r2, r3
 80197f6:	204c      	movs	r0, #76	@ 0x4c
 80197f8:	183b      	adds	r3, r7, r0
 80197fa:	492a      	ldr	r1, [pc, #168]	@ (80198a4 <USB_ActivateEndpoint+0x6a8>)
 80197fc:	400a      	ands	r2, r1
 80197fe:	801a      	strh	r2, [r3, #0]
 8019800:	687a      	ldr	r2, [r7, #4]
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	781b      	ldrb	r3, [r3, #0]
 8019806:	009b      	lsls	r3, r3, #2
 8019808:	18d3      	adds	r3, r2, r3
 801980a:	183a      	adds	r2, r7, r0
 801980c:	8812      	ldrh	r2, [r2, #0]
 801980e:	4926      	ldr	r1, [pc, #152]	@ (80198a8 <USB_ActivateEndpoint+0x6ac>)
 8019810:	430a      	orrs	r2, r1
 8019812:	b292      	uxth	r2, r2
 8019814:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019816:	687a      	ldr	r2, [r7, #4]
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	781b      	ldrb	r3, [r3, #0]
 801981c:	009b      	lsls	r3, r3, #2
 801981e:	18d2      	adds	r2, r2, r3
 8019820:	214a      	movs	r1, #74	@ 0x4a
 8019822:	187b      	adds	r3, r7, r1
 8019824:	8812      	ldrh	r2, [r2, #0]
 8019826:	801a      	strh	r2, [r3, #0]
 8019828:	187b      	adds	r3, r7, r1
 801982a:	881b      	ldrh	r3, [r3, #0]
 801982c:	2240      	movs	r2, #64	@ 0x40
 801982e:	4013      	ands	r3, r2
 8019830:	d016      	beq.n	8019860 <USB_ActivateEndpoint+0x664>
 8019832:	687a      	ldr	r2, [r7, #4]
 8019834:	683b      	ldr	r3, [r7, #0]
 8019836:	781b      	ldrb	r3, [r3, #0]
 8019838:	009b      	lsls	r3, r3, #2
 801983a:	18d3      	adds	r3, r2, r3
 801983c:	881b      	ldrh	r3, [r3, #0]
 801983e:	b29a      	uxth	r2, r3
 8019840:	2048      	movs	r0, #72	@ 0x48
 8019842:	183b      	adds	r3, r7, r0
 8019844:	4917      	ldr	r1, [pc, #92]	@ (80198a4 <USB_ActivateEndpoint+0x6a8>)
 8019846:	400a      	ands	r2, r1
 8019848:	801a      	strh	r2, [r3, #0]
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	683b      	ldr	r3, [r7, #0]
 801984e:	781b      	ldrb	r3, [r3, #0]
 8019850:	009b      	lsls	r3, r3, #2
 8019852:	18d3      	adds	r3, r2, r3
 8019854:	183a      	adds	r2, r7, r0
 8019856:	8812      	ldrh	r2, [r2, #0]
 8019858:	4919      	ldr	r1, [pc, #100]	@ (80198c0 <USB_ActivateEndpoint+0x6c4>)
 801985a:	430a      	orrs	r2, r1
 801985c:	b292      	uxth	r2, r2
 801985e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019860:	683b      	ldr	r3, [r7, #0]
 8019862:	78db      	ldrb	r3, [r3, #3]
 8019864:	2b01      	cmp	r3, #1
 8019866:	d02f      	beq.n	80198c8 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019868:	687a      	ldr	r2, [r7, #4]
 801986a:	683b      	ldr	r3, [r7, #0]
 801986c:	781b      	ldrb	r3, [r3, #0]
 801986e:	009b      	lsls	r3, r3, #2
 8019870:	18d3      	adds	r3, r2, r3
 8019872:	881b      	ldrh	r3, [r3, #0]
 8019874:	b29a      	uxth	r2, r3
 8019876:	2044      	movs	r0, #68	@ 0x44
 8019878:	183b      	adds	r3, r7, r0
 801987a:	4912      	ldr	r1, [pc, #72]	@ (80198c4 <USB_ActivateEndpoint+0x6c8>)
 801987c:	400a      	ands	r2, r1
 801987e:	801a      	strh	r2, [r3, #0]
 8019880:	183b      	adds	r3, r7, r0
 8019882:	183a      	adds	r2, r7, r0
 8019884:	8812      	ldrh	r2, [r2, #0]
 8019886:	2120      	movs	r1, #32
 8019888:	404a      	eors	r2, r1
 801988a:	801a      	strh	r2, [r3, #0]
 801988c:	687a      	ldr	r2, [r7, #4]
 801988e:	683b      	ldr	r3, [r7, #0]
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	009b      	lsls	r3, r3, #2
 8019894:	18d3      	adds	r3, r2, r3
 8019896:	183a      	adds	r2, r7, r0
 8019898:	8812      	ldrh	r2, [r2, #0]
 801989a:	4905      	ldr	r1, [pc, #20]	@ (80198b0 <USB_ActivateEndpoint+0x6b4>)
 801989c:	430a      	orrs	r2, r1
 801989e:	b292      	uxth	r2, r2
 80198a0:	801a      	strh	r2, [r3, #0]
 80198a2:	e028      	b.n	80198f6 <USB_ActivateEndpoint+0x6fa>
 80198a4:	ffff8f8f 	.word	0xffff8f8f
 80198a8:	ffffc080 	.word	0xffffc080
 80198ac:	ffffbf8f 	.word	0xffffbf8f
 80198b0:	ffff8080 	.word	0xffff8080
 80198b4:	ffff8180 	.word	0xffff8180
 80198b8:	ffff8e8f 	.word	0xffff8e8f
 80198bc:	00000404 	.word	0x00000404
 80198c0:	ffff80c0 	.word	0xffff80c0
 80198c4:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80198c8:	687a      	ldr	r2, [r7, #4]
 80198ca:	683b      	ldr	r3, [r7, #0]
 80198cc:	781b      	ldrb	r3, [r3, #0]
 80198ce:	009b      	lsls	r3, r3, #2
 80198d0:	18d3      	adds	r3, r2, r3
 80198d2:	881b      	ldrh	r3, [r3, #0]
 80198d4:	b29a      	uxth	r2, r3
 80198d6:	2046      	movs	r0, #70	@ 0x46
 80198d8:	183b      	adds	r3, r7, r0
 80198da:	4916      	ldr	r1, [pc, #88]	@ (8019934 <USB_ActivateEndpoint+0x738>)
 80198dc:	400a      	ands	r2, r1
 80198de:	801a      	strh	r2, [r3, #0]
 80198e0:	687a      	ldr	r2, [r7, #4]
 80198e2:	683b      	ldr	r3, [r7, #0]
 80198e4:	781b      	ldrb	r3, [r3, #0]
 80198e6:	009b      	lsls	r3, r3, #2
 80198e8:	18d3      	adds	r3, r2, r3
 80198ea:	183a      	adds	r2, r7, r0
 80198ec:	8812      	ldrh	r2, [r2, #0]
 80198ee:	4912      	ldr	r1, [pc, #72]	@ (8019938 <USB_ActivateEndpoint+0x73c>)
 80198f0:	430a      	orrs	r2, r1
 80198f2:	b292      	uxth	r2, r2
 80198f4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80198f6:	687a      	ldr	r2, [r7, #4]
 80198f8:	683b      	ldr	r3, [r7, #0]
 80198fa:	781b      	ldrb	r3, [r3, #0]
 80198fc:	009b      	lsls	r3, r3, #2
 80198fe:	18d3      	adds	r3, r2, r3
 8019900:	881b      	ldrh	r3, [r3, #0]
 8019902:	b29a      	uxth	r2, r3
 8019904:	2042      	movs	r0, #66	@ 0x42
 8019906:	183b      	adds	r3, r7, r0
 8019908:	490c      	ldr	r1, [pc, #48]	@ (801993c <USB_ActivateEndpoint+0x740>)
 801990a:	400a      	ands	r2, r1
 801990c:	801a      	strh	r2, [r3, #0]
 801990e:	687a      	ldr	r2, [r7, #4]
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	781b      	ldrb	r3, [r3, #0]
 8019914:	009b      	lsls	r3, r3, #2
 8019916:	18d3      	adds	r3, r2, r3
 8019918:	183a      	adds	r2, r7, r0
 801991a:	8812      	ldrh	r2, [r2, #0]
 801991c:	4906      	ldr	r1, [pc, #24]	@ (8019938 <USB_ActivateEndpoint+0x73c>)
 801991e:	430a      	orrs	r2, r1
 8019920:	b292      	uxth	r2, r2
 8019922:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019924:	236f      	movs	r3, #111	@ 0x6f
 8019926:	18fb      	adds	r3, r7, r3
 8019928:	781b      	ldrb	r3, [r3, #0]
}
 801992a:	0018      	movs	r0, r3
 801992c:	46bd      	mov	sp, r7
 801992e:	b01c      	add	sp, #112	@ 0x70
 8019930:	bd80      	pop	{r7, pc}
 8019932:	46c0      	nop			@ (mov r8, r8)
 8019934:	ffff8fbf 	.word	0xffff8fbf
 8019938:	ffff8080 	.word	0xffff8080
 801993c:	ffffbf8f 	.word	0xffffbf8f

08019940 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b08c      	sub	sp, #48	@ 0x30
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
 8019948:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801994a:	683b      	ldr	r3, [r7, #0]
 801994c:	7b1b      	ldrb	r3, [r3, #12]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d000      	beq.n	8019954 <USB_DeactivateEndpoint+0x14>
 8019952:	e07e      	b.n	8019a52 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	785b      	ldrb	r3, [r3, #1]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d03c      	beq.n	80199d6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801995c:	687a      	ldr	r2, [r7, #4]
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	781b      	ldrb	r3, [r3, #0]
 8019962:	009b      	lsls	r3, r3, #2
 8019964:	18d2      	adds	r2, r2, r3
 8019966:	210c      	movs	r1, #12
 8019968:	187b      	adds	r3, r7, r1
 801996a:	8812      	ldrh	r2, [r2, #0]
 801996c:	801a      	strh	r2, [r3, #0]
 801996e:	187b      	adds	r3, r7, r1
 8019970:	881b      	ldrh	r3, [r3, #0]
 8019972:	2240      	movs	r2, #64	@ 0x40
 8019974:	4013      	ands	r3, r2
 8019976:	d016      	beq.n	80199a6 <USB_DeactivateEndpoint+0x66>
 8019978:	687a      	ldr	r2, [r7, #4]
 801997a:	683b      	ldr	r3, [r7, #0]
 801997c:	781b      	ldrb	r3, [r3, #0]
 801997e:	009b      	lsls	r3, r3, #2
 8019980:	18d3      	adds	r3, r2, r3
 8019982:	881b      	ldrh	r3, [r3, #0]
 8019984:	b29a      	uxth	r2, r3
 8019986:	200a      	movs	r0, #10
 8019988:	183b      	adds	r3, r7, r0
 801998a:	49c7      	ldr	r1, [pc, #796]	@ (8019ca8 <USB_DeactivateEndpoint+0x368>)
 801998c:	400a      	ands	r2, r1
 801998e:	801a      	strh	r2, [r3, #0]
 8019990:	687a      	ldr	r2, [r7, #4]
 8019992:	683b      	ldr	r3, [r7, #0]
 8019994:	781b      	ldrb	r3, [r3, #0]
 8019996:	009b      	lsls	r3, r3, #2
 8019998:	18d3      	adds	r3, r2, r3
 801999a:	183a      	adds	r2, r7, r0
 801999c:	8812      	ldrh	r2, [r2, #0]
 801999e:	49c3      	ldr	r1, [pc, #780]	@ (8019cac <USB_DeactivateEndpoint+0x36c>)
 80199a0:	430a      	orrs	r2, r1
 80199a2:	b292      	uxth	r2, r2
 80199a4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80199a6:	687a      	ldr	r2, [r7, #4]
 80199a8:	683b      	ldr	r3, [r7, #0]
 80199aa:	781b      	ldrb	r3, [r3, #0]
 80199ac:	009b      	lsls	r3, r3, #2
 80199ae:	18d3      	adds	r3, r2, r3
 80199b0:	881b      	ldrh	r3, [r3, #0]
 80199b2:	b29a      	uxth	r2, r3
 80199b4:	2008      	movs	r0, #8
 80199b6:	183b      	adds	r3, r7, r0
 80199b8:	49bd      	ldr	r1, [pc, #756]	@ (8019cb0 <USB_DeactivateEndpoint+0x370>)
 80199ba:	400a      	ands	r2, r1
 80199bc:	801a      	strh	r2, [r3, #0]
 80199be:	687a      	ldr	r2, [r7, #4]
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	781b      	ldrb	r3, [r3, #0]
 80199c4:	009b      	lsls	r3, r3, #2
 80199c6:	18d3      	adds	r3, r2, r3
 80199c8:	183a      	adds	r2, r7, r0
 80199ca:	8812      	ldrh	r2, [r2, #0]
 80199cc:	49b9      	ldr	r1, [pc, #740]	@ (8019cb4 <USB_DeactivateEndpoint+0x374>)
 80199ce:	430a      	orrs	r2, r1
 80199d0:	b292      	uxth	r2, r2
 80199d2:	801a      	strh	r2, [r3, #0]
 80199d4:	e163      	b.n	8019c9e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80199d6:	687a      	ldr	r2, [r7, #4]
 80199d8:	683b      	ldr	r3, [r7, #0]
 80199da:	781b      	ldrb	r3, [r3, #0]
 80199dc:	009b      	lsls	r3, r3, #2
 80199de:	18d2      	adds	r2, r2, r3
 80199e0:	2112      	movs	r1, #18
 80199e2:	187b      	adds	r3, r7, r1
 80199e4:	8812      	ldrh	r2, [r2, #0]
 80199e6:	801a      	strh	r2, [r3, #0]
 80199e8:	187b      	adds	r3, r7, r1
 80199ea:	881a      	ldrh	r2, [r3, #0]
 80199ec:	2380      	movs	r3, #128	@ 0x80
 80199ee:	01db      	lsls	r3, r3, #7
 80199f0:	4013      	ands	r3, r2
 80199f2:	d016      	beq.n	8019a22 <USB_DeactivateEndpoint+0xe2>
 80199f4:	687a      	ldr	r2, [r7, #4]
 80199f6:	683b      	ldr	r3, [r7, #0]
 80199f8:	781b      	ldrb	r3, [r3, #0]
 80199fa:	009b      	lsls	r3, r3, #2
 80199fc:	18d3      	adds	r3, r2, r3
 80199fe:	881b      	ldrh	r3, [r3, #0]
 8019a00:	b29a      	uxth	r2, r3
 8019a02:	2010      	movs	r0, #16
 8019a04:	183b      	adds	r3, r7, r0
 8019a06:	49a8      	ldr	r1, [pc, #672]	@ (8019ca8 <USB_DeactivateEndpoint+0x368>)
 8019a08:	400a      	ands	r2, r1
 8019a0a:	801a      	strh	r2, [r3, #0]
 8019a0c:	687a      	ldr	r2, [r7, #4]
 8019a0e:	683b      	ldr	r3, [r7, #0]
 8019a10:	781b      	ldrb	r3, [r3, #0]
 8019a12:	009b      	lsls	r3, r3, #2
 8019a14:	18d3      	adds	r3, r2, r3
 8019a16:	183a      	adds	r2, r7, r0
 8019a18:	8812      	ldrh	r2, [r2, #0]
 8019a1a:	49a7      	ldr	r1, [pc, #668]	@ (8019cb8 <USB_DeactivateEndpoint+0x378>)
 8019a1c:	430a      	orrs	r2, r1
 8019a1e:	b292      	uxth	r2, r2
 8019a20:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019a22:	687a      	ldr	r2, [r7, #4]
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	781b      	ldrb	r3, [r3, #0]
 8019a28:	009b      	lsls	r3, r3, #2
 8019a2a:	18d3      	adds	r3, r2, r3
 8019a2c:	881b      	ldrh	r3, [r3, #0]
 8019a2e:	b29a      	uxth	r2, r3
 8019a30:	200e      	movs	r0, #14
 8019a32:	183b      	adds	r3, r7, r0
 8019a34:	49a1      	ldr	r1, [pc, #644]	@ (8019cbc <USB_DeactivateEndpoint+0x37c>)
 8019a36:	400a      	ands	r2, r1
 8019a38:	801a      	strh	r2, [r3, #0]
 8019a3a:	687a      	ldr	r2, [r7, #4]
 8019a3c:	683b      	ldr	r3, [r7, #0]
 8019a3e:	781b      	ldrb	r3, [r3, #0]
 8019a40:	009b      	lsls	r3, r3, #2
 8019a42:	18d3      	adds	r3, r2, r3
 8019a44:	183a      	adds	r2, r7, r0
 8019a46:	8812      	ldrh	r2, [r2, #0]
 8019a48:	499a      	ldr	r1, [pc, #616]	@ (8019cb4 <USB_DeactivateEndpoint+0x374>)
 8019a4a:	430a      	orrs	r2, r1
 8019a4c:	b292      	uxth	r2, r2
 8019a4e:	801a      	strh	r2, [r3, #0]
 8019a50:	e125      	b.n	8019c9e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	785b      	ldrb	r3, [r3, #1]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d000      	beq.n	8019a5c <USB_DeactivateEndpoint+0x11c>
 8019a5a:	e090      	b.n	8019b7e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019a5c:	687a      	ldr	r2, [r7, #4]
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	781b      	ldrb	r3, [r3, #0]
 8019a62:	009b      	lsls	r3, r3, #2
 8019a64:	18d2      	adds	r2, r2, r3
 8019a66:	2120      	movs	r1, #32
 8019a68:	187b      	adds	r3, r7, r1
 8019a6a:	8812      	ldrh	r2, [r2, #0]
 8019a6c:	801a      	strh	r2, [r3, #0]
 8019a6e:	187b      	adds	r3, r7, r1
 8019a70:	881a      	ldrh	r2, [r3, #0]
 8019a72:	2380      	movs	r3, #128	@ 0x80
 8019a74:	01db      	lsls	r3, r3, #7
 8019a76:	4013      	ands	r3, r2
 8019a78:	d016      	beq.n	8019aa8 <USB_DeactivateEndpoint+0x168>
 8019a7a:	687a      	ldr	r2, [r7, #4]
 8019a7c:	683b      	ldr	r3, [r7, #0]
 8019a7e:	781b      	ldrb	r3, [r3, #0]
 8019a80:	009b      	lsls	r3, r3, #2
 8019a82:	18d3      	adds	r3, r2, r3
 8019a84:	881b      	ldrh	r3, [r3, #0]
 8019a86:	b29a      	uxth	r2, r3
 8019a88:	201e      	movs	r0, #30
 8019a8a:	183b      	adds	r3, r7, r0
 8019a8c:	4986      	ldr	r1, [pc, #536]	@ (8019ca8 <USB_DeactivateEndpoint+0x368>)
 8019a8e:	400a      	ands	r2, r1
 8019a90:	801a      	strh	r2, [r3, #0]
 8019a92:	687a      	ldr	r2, [r7, #4]
 8019a94:	683b      	ldr	r3, [r7, #0]
 8019a96:	781b      	ldrb	r3, [r3, #0]
 8019a98:	009b      	lsls	r3, r3, #2
 8019a9a:	18d3      	adds	r3, r2, r3
 8019a9c:	183a      	adds	r2, r7, r0
 8019a9e:	8812      	ldrh	r2, [r2, #0]
 8019aa0:	4985      	ldr	r1, [pc, #532]	@ (8019cb8 <USB_DeactivateEndpoint+0x378>)
 8019aa2:	430a      	orrs	r2, r1
 8019aa4:	b292      	uxth	r2, r2
 8019aa6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019aa8:	687a      	ldr	r2, [r7, #4]
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	781b      	ldrb	r3, [r3, #0]
 8019aae:	009b      	lsls	r3, r3, #2
 8019ab0:	18d2      	adds	r2, r2, r3
 8019ab2:	211c      	movs	r1, #28
 8019ab4:	187b      	adds	r3, r7, r1
 8019ab6:	8812      	ldrh	r2, [r2, #0]
 8019ab8:	801a      	strh	r2, [r3, #0]
 8019aba:	187b      	adds	r3, r7, r1
 8019abc:	881b      	ldrh	r3, [r3, #0]
 8019abe:	2240      	movs	r2, #64	@ 0x40
 8019ac0:	4013      	ands	r3, r2
 8019ac2:	d016      	beq.n	8019af2 <USB_DeactivateEndpoint+0x1b2>
 8019ac4:	687a      	ldr	r2, [r7, #4]
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	781b      	ldrb	r3, [r3, #0]
 8019aca:	009b      	lsls	r3, r3, #2
 8019acc:	18d3      	adds	r3, r2, r3
 8019ace:	881b      	ldrh	r3, [r3, #0]
 8019ad0:	b29a      	uxth	r2, r3
 8019ad2:	201a      	movs	r0, #26
 8019ad4:	183b      	adds	r3, r7, r0
 8019ad6:	4974      	ldr	r1, [pc, #464]	@ (8019ca8 <USB_DeactivateEndpoint+0x368>)
 8019ad8:	400a      	ands	r2, r1
 8019ada:	801a      	strh	r2, [r3, #0]
 8019adc:	687a      	ldr	r2, [r7, #4]
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	781b      	ldrb	r3, [r3, #0]
 8019ae2:	009b      	lsls	r3, r3, #2
 8019ae4:	18d3      	adds	r3, r2, r3
 8019ae6:	183a      	adds	r2, r7, r0
 8019ae8:	8812      	ldrh	r2, [r2, #0]
 8019aea:	4970      	ldr	r1, [pc, #448]	@ (8019cac <USB_DeactivateEndpoint+0x36c>)
 8019aec:	430a      	orrs	r2, r1
 8019aee:	b292      	uxth	r2, r2
 8019af0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8019af2:	687a      	ldr	r2, [r7, #4]
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	781b      	ldrb	r3, [r3, #0]
 8019af8:	009b      	lsls	r3, r3, #2
 8019afa:	18d3      	adds	r3, r2, r3
 8019afc:	881b      	ldrh	r3, [r3, #0]
 8019afe:	b29a      	uxth	r2, r3
 8019b00:	2018      	movs	r0, #24
 8019b02:	183b      	adds	r3, r7, r0
 8019b04:	4968      	ldr	r1, [pc, #416]	@ (8019ca8 <USB_DeactivateEndpoint+0x368>)
 8019b06:	400a      	ands	r2, r1
 8019b08:	801a      	strh	r2, [r3, #0]
 8019b0a:	687a      	ldr	r2, [r7, #4]
 8019b0c:	683b      	ldr	r3, [r7, #0]
 8019b0e:	781b      	ldrb	r3, [r3, #0]
 8019b10:	009b      	lsls	r3, r3, #2
 8019b12:	18d3      	adds	r3, r2, r3
 8019b14:	183a      	adds	r2, r7, r0
 8019b16:	8812      	ldrh	r2, [r2, #0]
 8019b18:	4964      	ldr	r1, [pc, #400]	@ (8019cac <USB_DeactivateEndpoint+0x36c>)
 8019b1a:	430a      	orrs	r2, r1
 8019b1c:	b292      	uxth	r2, r2
 8019b1e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019b20:	687a      	ldr	r2, [r7, #4]
 8019b22:	683b      	ldr	r3, [r7, #0]
 8019b24:	781b      	ldrb	r3, [r3, #0]
 8019b26:	009b      	lsls	r3, r3, #2
 8019b28:	18d3      	adds	r3, r2, r3
 8019b2a:	881b      	ldrh	r3, [r3, #0]
 8019b2c:	b29a      	uxth	r2, r3
 8019b2e:	2016      	movs	r0, #22
 8019b30:	183b      	adds	r3, r7, r0
 8019b32:	4962      	ldr	r1, [pc, #392]	@ (8019cbc <USB_DeactivateEndpoint+0x37c>)
 8019b34:	400a      	ands	r2, r1
 8019b36:	801a      	strh	r2, [r3, #0]
 8019b38:	687a      	ldr	r2, [r7, #4]
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	781b      	ldrb	r3, [r3, #0]
 8019b3e:	009b      	lsls	r3, r3, #2
 8019b40:	18d3      	adds	r3, r2, r3
 8019b42:	183a      	adds	r2, r7, r0
 8019b44:	8812      	ldrh	r2, [r2, #0]
 8019b46:	495b      	ldr	r1, [pc, #364]	@ (8019cb4 <USB_DeactivateEndpoint+0x374>)
 8019b48:	430a      	orrs	r2, r1
 8019b4a:	b292      	uxth	r2, r2
 8019b4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019b4e:	687a      	ldr	r2, [r7, #4]
 8019b50:	683b      	ldr	r3, [r7, #0]
 8019b52:	781b      	ldrb	r3, [r3, #0]
 8019b54:	009b      	lsls	r3, r3, #2
 8019b56:	18d3      	adds	r3, r2, r3
 8019b58:	881b      	ldrh	r3, [r3, #0]
 8019b5a:	b29a      	uxth	r2, r3
 8019b5c:	2014      	movs	r0, #20
 8019b5e:	183b      	adds	r3, r7, r0
 8019b60:	4953      	ldr	r1, [pc, #332]	@ (8019cb0 <USB_DeactivateEndpoint+0x370>)
 8019b62:	400a      	ands	r2, r1
 8019b64:	801a      	strh	r2, [r3, #0]
 8019b66:	687a      	ldr	r2, [r7, #4]
 8019b68:	683b      	ldr	r3, [r7, #0]
 8019b6a:	781b      	ldrb	r3, [r3, #0]
 8019b6c:	009b      	lsls	r3, r3, #2
 8019b6e:	18d3      	adds	r3, r2, r3
 8019b70:	183a      	adds	r2, r7, r0
 8019b72:	8812      	ldrh	r2, [r2, #0]
 8019b74:	494f      	ldr	r1, [pc, #316]	@ (8019cb4 <USB_DeactivateEndpoint+0x374>)
 8019b76:	430a      	orrs	r2, r1
 8019b78:	b292      	uxth	r2, r2
 8019b7a:	801a      	strh	r2, [r3, #0]
 8019b7c:	e08f      	b.n	8019c9e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019b7e:	687a      	ldr	r2, [r7, #4]
 8019b80:	683b      	ldr	r3, [r7, #0]
 8019b82:	781b      	ldrb	r3, [r3, #0]
 8019b84:	009b      	lsls	r3, r3, #2
 8019b86:	18d2      	adds	r2, r2, r3
 8019b88:	212e      	movs	r1, #46	@ 0x2e
 8019b8a:	187b      	adds	r3, r7, r1
 8019b8c:	8812      	ldrh	r2, [r2, #0]
 8019b8e:	801a      	strh	r2, [r3, #0]
 8019b90:	187b      	adds	r3, r7, r1
 8019b92:	881a      	ldrh	r2, [r3, #0]
 8019b94:	2380      	movs	r3, #128	@ 0x80
 8019b96:	01db      	lsls	r3, r3, #7
 8019b98:	4013      	ands	r3, r2
 8019b9a:	d016      	beq.n	8019bca <USB_DeactivateEndpoint+0x28a>
 8019b9c:	687a      	ldr	r2, [r7, #4]
 8019b9e:	683b      	ldr	r3, [r7, #0]
 8019ba0:	781b      	ldrb	r3, [r3, #0]
 8019ba2:	009b      	lsls	r3, r3, #2
 8019ba4:	18d3      	adds	r3, r2, r3
 8019ba6:	881b      	ldrh	r3, [r3, #0]
 8019ba8:	b29a      	uxth	r2, r3
 8019baa:	202c      	movs	r0, #44	@ 0x2c
 8019bac:	183b      	adds	r3, r7, r0
 8019bae:	493e      	ldr	r1, [pc, #248]	@ (8019ca8 <USB_DeactivateEndpoint+0x368>)
 8019bb0:	400a      	ands	r2, r1
 8019bb2:	801a      	strh	r2, [r3, #0]
 8019bb4:	687a      	ldr	r2, [r7, #4]
 8019bb6:	683b      	ldr	r3, [r7, #0]
 8019bb8:	781b      	ldrb	r3, [r3, #0]
 8019bba:	009b      	lsls	r3, r3, #2
 8019bbc:	18d3      	adds	r3, r2, r3
 8019bbe:	183a      	adds	r2, r7, r0
 8019bc0:	8812      	ldrh	r2, [r2, #0]
 8019bc2:	493d      	ldr	r1, [pc, #244]	@ (8019cb8 <USB_DeactivateEndpoint+0x378>)
 8019bc4:	430a      	orrs	r2, r1
 8019bc6:	b292      	uxth	r2, r2
 8019bc8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019bca:	687a      	ldr	r2, [r7, #4]
 8019bcc:	683b      	ldr	r3, [r7, #0]
 8019bce:	781b      	ldrb	r3, [r3, #0]
 8019bd0:	009b      	lsls	r3, r3, #2
 8019bd2:	18d2      	adds	r2, r2, r3
 8019bd4:	212a      	movs	r1, #42	@ 0x2a
 8019bd6:	187b      	adds	r3, r7, r1
 8019bd8:	8812      	ldrh	r2, [r2, #0]
 8019bda:	801a      	strh	r2, [r3, #0]
 8019bdc:	187b      	adds	r3, r7, r1
 8019bde:	881b      	ldrh	r3, [r3, #0]
 8019be0:	2240      	movs	r2, #64	@ 0x40
 8019be2:	4013      	ands	r3, r2
 8019be4:	d016      	beq.n	8019c14 <USB_DeactivateEndpoint+0x2d4>
 8019be6:	687a      	ldr	r2, [r7, #4]
 8019be8:	683b      	ldr	r3, [r7, #0]
 8019bea:	781b      	ldrb	r3, [r3, #0]
 8019bec:	009b      	lsls	r3, r3, #2
 8019bee:	18d3      	adds	r3, r2, r3
 8019bf0:	881b      	ldrh	r3, [r3, #0]
 8019bf2:	b29a      	uxth	r2, r3
 8019bf4:	2028      	movs	r0, #40	@ 0x28
 8019bf6:	183b      	adds	r3, r7, r0
 8019bf8:	492b      	ldr	r1, [pc, #172]	@ (8019ca8 <USB_DeactivateEndpoint+0x368>)
 8019bfa:	400a      	ands	r2, r1
 8019bfc:	801a      	strh	r2, [r3, #0]
 8019bfe:	687a      	ldr	r2, [r7, #4]
 8019c00:	683b      	ldr	r3, [r7, #0]
 8019c02:	781b      	ldrb	r3, [r3, #0]
 8019c04:	009b      	lsls	r3, r3, #2
 8019c06:	18d3      	adds	r3, r2, r3
 8019c08:	183a      	adds	r2, r7, r0
 8019c0a:	8812      	ldrh	r2, [r2, #0]
 8019c0c:	4927      	ldr	r1, [pc, #156]	@ (8019cac <USB_DeactivateEndpoint+0x36c>)
 8019c0e:	430a      	orrs	r2, r1
 8019c10:	b292      	uxth	r2, r2
 8019c12:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019c14:	687a      	ldr	r2, [r7, #4]
 8019c16:	683b      	ldr	r3, [r7, #0]
 8019c18:	781b      	ldrb	r3, [r3, #0]
 8019c1a:	009b      	lsls	r3, r3, #2
 8019c1c:	18d3      	adds	r3, r2, r3
 8019c1e:	881b      	ldrh	r3, [r3, #0]
 8019c20:	b29a      	uxth	r2, r3
 8019c22:	2026      	movs	r0, #38	@ 0x26
 8019c24:	183b      	adds	r3, r7, r0
 8019c26:	4920      	ldr	r1, [pc, #128]	@ (8019ca8 <USB_DeactivateEndpoint+0x368>)
 8019c28:	400a      	ands	r2, r1
 8019c2a:	801a      	strh	r2, [r3, #0]
 8019c2c:	687a      	ldr	r2, [r7, #4]
 8019c2e:	683b      	ldr	r3, [r7, #0]
 8019c30:	781b      	ldrb	r3, [r3, #0]
 8019c32:	009b      	lsls	r3, r3, #2
 8019c34:	18d3      	adds	r3, r2, r3
 8019c36:	183a      	adds	r2, r7, r0
 8019c38:	8812      	ldrh	r2, [r2, #0]
 8019c3a:	491f      	ldr	r1, [pc, #124]	@ (8019cb8 <USB_DeactivateEndpoint+0x378>)
 8019c3c:	430a      	orrs	r2, r1
 8019c3e:	b292      	uxth	r2, r2
 8019c40:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019c42:	687a      	ldr	r2, [r7, #4]
 8019c44:	683b      	ldr	r3, [r7, #0]
 8019c46:	781b      	ldrb	r3, [r3, #0]
 8019c48:	009b      	lsls	r3, r3, #2
 8019c4a:	18d3      	adds	r3, r2, r3
 8019c4c:	881b      	ldrh	r3, [r3, #0]
 8019c4e:	b29a      	uxth	r2, r3
 8019c50:	2024      	movs	r0, #36	@ 0x24
 8019c52:	183b      	adds	r3, r7, r0
 8019c54:	4916      	ldr	r1, [pc, #88]	@ (8019cb0 <USB_DeactivateEndpoint+0x370>)
 8019c56:	400a      	ands	r2, r1
 8019c58:	801a      	strh	r2, [r3, #0]
 8019c5a:	687a      	ldr	r2, [r7, #4]
 8019c5c:	683b      	ldr	r3, [r7, #0]
 8019c5e:	781b      	ldrb	r3, [r3, #0]
 8019c60:	009b      	lsls	r3, r3, #2
 8019c62:	18d3      	adds	r3, r2, r3
 8019c64:	183a      	adds	r2, r7, r0
 8019c66:	8812      	ldrh	r2, [r2, #0]
 8019c68:	4912      	ldr	r1, [pc, #72]	@ (8019cb4 <USB_DeactivateEndpoint+0x374>)
 8019c6a:	430a      	orrs	r2, r1
 8019c6c:	b292      	uxth	r2, r2
 8019c6e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019c70:	687a      	ldr	r2, [r7, #4]
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	781b      	ldrb	r3, [r3, #0]
 8019c76:	009b      	lsls	r3, r3, #2
 8019c78:	18d3      	adds	r3, r2, r3
 8019c7a:	881b      	ldrh	r3, [r3, #0]
 8019c7c:	b29a      	uxth	r2, r3
 8019c7e:	2022      	movs	r0, #34	@ 0x22
 8019c80:	183b      	adds	r3, r7, r0
 8019c82:	490e      	ldr	r1, [pc, #56]	@ (8019cbc <USB_DeactivateEndpoint+0x37c>)
 8019c84:	400a      	ands	r2, r1
 8019c86:	801a      	strh	r2, [r3, #0]
 8019c88:	687a      	ldr	r2, [r7, #4]
 8019c8a:	683b      	ldr	r3, [r7, #0]
 8019c8c:	781b      	ldrb	r3, [r3, #0]
 8019c8e:	009b      	lsls	r3, r3, #2
 8019c90:	18d3      	adds	r3, r2, r3
 8019c92:	183a      	adds	r2, r7, r0
 8019c94:	8812      	ldrh	r2, [r2, #0]
 8019c96:	4907      	ldr	r1, [pc, #28]	@ (8019cb4 <USB_DeactivateEndpoint+0x374>)
 8019c98:	430a      	orrs	r2, r1
 8019c9a:	b292      	uxth	r2, r2
 8019c9c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019c9e:	2300      	movs	r3, #0
}
 8019ca0:	0018      	movs	r0, r3
 8019ca2:	46bd      	mov	sp, r7
 8019ca4:	b00c      	add	sp, #48	@ 0x30
 8019ca6:	bd80      	pop	{r7, pc}
 8019ca8:	ffff8f8f 	.word	0xffff8f8f
 8019cac:	ffff80c0 	.word	0xffff80c0
 8019cb0:	ffff8fbf 	.word	0xffff8fbf
 8019cb4:	ffff8080 	.word	0xffff8080
 8019cb8:	ffffc080 	.word	0xffffc080
 8019cbc:	ffffbf8f 	.word	0xffffbf8f

08019cc0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019cc0:	b590      	push	{r4, r7, lr}
 8019cc2:	b0c3      	sub	sp, #268	@ 0x10c
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
 8019cc8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019cca:	683b      	ldr	r3, [r7, #0]
 8019ccc:	785b      	ldrb	r3, [r3, #1]
 8019cce:	2b01      	cmp	r3, #1
 8019cd0:	d001      	beq.n	8019cd6 <USB_EPStartXfer+0x16>
 8019cd2:	f000 fd2d 	bl	801a730 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019cd6:	683b      	ldr	r3, [r7, #0]
 8019cd8:	699a      	ldr	r2, [r3, #24]
 8019cda:	683b      	ldr	r3, [r7, #0]
 8019cdc:	691b      	ldr	r3, [r3, #16]
 8019cde:	429a      	cmp	r2, r3
 8019ce0:	d905      	bls.n	8019cee <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019ce2:	683b      	ldr	r3, [r7, #0]
 8019ce4:	691b      	ldr	r3, [r3, #16]
 8019ce6:	1d7a      	adds	r2, r7, #5
 8019ce8:	32ff      	adds	r2, #255	@ 0xff
 8019cea:	6013      	str	r3, [r2, #0]
 8019cec:	e004      	b.n	8019cf8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019cee:	683b      	ldr	r3, [r7, #0]
 8019cf0:	699b      	ldr	r3, [r3, #24]
 8019cf2:	1d7a      	adds	r2, r7, #5
 8019cf4:	32ff      	adds	r2, #255	@ 0xff
 8019cf6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019cf8:	683b      	ldr	r3, [r7, #0]
 8019cfa:	7b1b      	ldrb	r3, [r3, #12]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d125      	bne.n	8019d4c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	6959      	ldr	r1, [r3, #20]
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	88da      	ldrh	r2, [r3, #6]
 8019d08:	1d7b      	adds	r3, r7, #5
 8019d0a:	33ff      	adds	r3, #255	@ 0xff
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	b29b      	uxth	r3, r3
 8019d10:	6878      	ldr	r0, [r7, #4]
 8019d12:	f001 fa47 	bl	801b1a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	613b      	str	r3, [r7, #16]
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	2250      	movs	r2, #80	@ 0x50
 8019d1e:	5a9b      	ldrh	r3, [r3, r2]
 8019d20:	b29b      	uxth	r3, r3
 8019d22:	001a      	movs	r2, r3
 8019d24:	693b      	ldr	r3, [r7, #16]
 8019d26:	189b      	adds	r3, r3, r2
 8019d28:	613b      	str	r3, [r7, #16]
 8019d2a:	683b      	ldr	r3, [r7, #0]
 8019d2c:	781b      	ldrb	r3, [r3, #0]
 8019d2e:	00da      	lsls	r2, r3, #3
 8019d30:	693b      	ldr	r3, [r7, #16]
 8019d32:	18d3      	adds	r3, r2, r3
 8019d34:	4ad7      	ldr	r2, [pc, #860]	@ (801a094 <USB_EPStartXfer+0x3d4>)
 8019d36:	4694      	mov	ip, r2
 8019d38:	4463      	add	r3, ip
 8019d3a:	60fb      	str	r3, [r7, #12]
 8019d3c:	1d7b      	adds	r3, r7, #5
 8019d3e:	33ff      	adds	r3, #255	@ 0xff
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	b29a      	uxth	r2, r3
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	801a      	strh	r2, [r3, #0]
 8019d48:	f000 fccd 	bl	801a6e6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	78db      	ldrb	r3, [r3, #3]
 8019d50:	2b02      	cmp	r3, #2
 8019d52:	d000      	beq.n	8019d56 <USB_EPStartXfer+0x96>
 8019d54:	e362      	b.n	801a41c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	6a1a      	ldr	r2, [r3, #32]
 8019d5a:	683b      	ldr	r3, [r7, #0]
 8019d5c:	691b      	ldr	r3, [r3, #16]
 8019d5e:	429a      	cmp	r2, r3
 8019d60:	d800      	bhi.n	8019d64 <USB_EPStartXfer+0xa4>
 8019d62:	e309      	b.n	801a378 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019d64:	687a      	ldr	r2, [r7, #4]
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	009b      	lsls	r3, r3, #2
 8019d6c:	18d3      	adds	r3, r2, r3
 8019d6e:	881b      	ldrh	r3, [r3, #0]
 8019d70:	b29a      	uxth	r2, r3
 8019d72:	2056      	movs	r0, #86	@ 0x56
 8019d74:	183b      	adds	r3, r7, r0
 8019d76:	49c8      	ldr	r1, [pc, #800]	@ (801a098 <USB_EPStartXfer+0x3d8>)
 8019d78:	400a      	ands	r2, r1
 8019d7a:	801a      	strh	r2, [r3, #0]
 8019d7c:	687a      	ldr	r2, [r7, #4]
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	781b      	ldrb	r3, [r3, #0]
 8019d82:	009b      	lsls	r3, r3, #2
 8019d84:	18d3      	adds	r3, r2, r3
 8019d86:	183a      	adds	r2, r7, r0
 8019d88:	8812      	ldrh	r2, [r2, #0]
 8019d8a:	49c4      	ldr	r1, [pc, #784]	@ (801a09c <USB_EPStartXfer+0x3dc>)
 8019d8c:	430a      	orrs	r2, r1
 8019d8e:	b292      	uxth	r2, r2
 8019d90:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019d92:	683b      	ldr	r3, [r7, #0]
 8019d94:	6a1a      	ldr	r2, [r3, #32]
 8019d96:	1d7b      	adds	r3, r7, #5
 8019d98:	33ff      	adds	r3, #255	@ 0xff
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	1ad2      	subs	r2, r2, r3
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019da2:	687a      	ldr	r2, [r7, #4]
 8019da4:	683b      	ldr	r3, [r7, #0]
 8019da6:	781b      	ldrb	r3, [r3, #0]
 8019da8:	009b      	lsls	r3, r3, #2
 8019daa:	18d3      	adds	r3, r2, r3
 8019dac:	881b      	ldrh	r3, [r3, #0]
 8019dae:	b29b      	uxth	r3, r3
 8019db0:	001a      	movs	r2, r3
 8019db2:	2340      	movs	r3, #64	@ 0x40
 8019db4:	4013      	ands	r3, r2
 8019db6:	d100      	bne.n	8019dba <USB_EPStartXfer+0xfa>
 8019db8:	e176      	b.n	801a0a8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	785b      	ldrb	r3, [r3, #1]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d000      	beq.n	8019dc8 <USB_EPStartXfer+0x108>
 8019dc6:	e074      	b.n	8019eb2 <USB_EPStartXfer+0x1f2>
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	2250      	movs	r2, #80	@ 0x50
 8019dd0:	5a9b      	ldrh	r3, [r3, r2]
 8019dd2:	b29b      	uxth	r3, r3
 8019dd4:	001a      	movs	r2, r3
 8019dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dd8:	189b      	adds	r3, r3, r2
 8019dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019ddc:	683b      	ldr	r3, [r7, #0]
 8019dde:	781b      	ldrb	r3, [r3, #0]
 8019de0:	00da      	lsls	r2, r3, #3
 8019de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019de4:	18d3      	adds	r3, r2, r3
 8019de6:	4aae      	ldr	r2, [pc, #696]	@ (801a0a0 <USB_EPStartXfer+0x3e0>)
 8019de8:	4694      	mov	ip, r2
 8019dea:	4463      	add	r3, ip
 8019dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8019dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019df0:	881b      	ldrh	r3, [r3, #0]
 8019df2:	b29b      	uxth	r3, r3
 8019df4:	059b      	lsls	r3, r3, #22
 8019df6:	0d9b      	lsrs	r3, r3, #22
 8019df8:	b29a      	uxth	r2, r3
 8019dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dfc:	801a      	strh	r2, [r3, #0]
 8019dfe:	1d7b      	adds	r3, r7, #5
 8019e00:	33ff      	adds	r3, #255	@ 0xff
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e06:	d924      	bls.n	8019e52 <USB_EPStartXfer+0x192>
 8019e08:	1d7b      	adds	r3, r7, #5
 8019e0a:	33ff      	adds	r3, #255	@ 0xff
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	095b      	lsrs	r3, r3, #5
 8019e10:	1c7a      	adds	r2, r7, #1
 8019e12:	32ff      	adds	r2, #255	@ 0xff
 8019e14:	6013      	str	r3, [r2, #0]
 8019e16:	1d7b      	adds	r3, r7, #5
 8019e18:	33ff      	adds	r3, #255	@ 0xff
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	221f      	movs	r2, #31
 8019e1e:	4013      	ands	r3, r2
 8019e20:	d106      	bne.n	8019e30 <USB_EPStartXfer+0x170>
 8019e22:	1c7b      	adds	r3, r7, #1
 8019e24:	33ff      	adds	r3, #255	@ 0xff
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	3b01      	subs	r3, #1
 8019e2a:	1c7a      	adds	r2, r7, #1
 8019e2c:	32ff      	adds	r2, #255	@ 0xff
 8019e2e:	6013      	str	r3, [r2, #0]
 8019e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e32:	881b      	ldrh	r3, [r3, #0]
 8019e34:	b29a      	uxth	r2, r3
 8019e36:	1c7b      	adds	r3, r7, #1
 8019e38:	33ff      	adds	r3, #255	@ 0xff
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	b29b      	uxth	r3, r3
 8019e3e:	029b      	lsls	r3, r3, #10
 8019e40:	b29b      	uxth	r3, r3
 8019e42:	4313      	orrs	r3, r2
 8019e44:	b29b      	uxth	r3, r3
 8019e46:	4a97      	ldr	r2, [pc, #604]	@ (801a0a4 <USB_EPStartXfer+0x3e4>)
 8019e48:	4313      	orrs	r3, r2
 8019e4a:	b29a      	uxth	r2, r3
 8019e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e4e:	801a      	strh	r2, [r3, #0]
 8019e50:	e04a      	b.n	8019ee8 <USB_EPStartXfer+0x228>
 8019e52:	1d7b      	adds	r3, r7, #5
 8019e54:	33ff      	adds	r3, #255	@ 0xff
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d108      	bne.n	8019e6e <USB_EPStartXfer+0x1ae>
 8019e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e5e:	881b      	ldrh	r3, [r3, #0]
 8019e60:	b29b      	uxth	r3, r3
 8019e62:	4a90      	ldr	r2, [pc, #576]	@ (801a0a4 <USB_EPStartXfer+0x3e4>)
 8019e64:	4313      	orrs	r3, r2
 8019e66:	b29a      	uxth	r2, r3
 8019e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e6a:	801a      	strh	r2, [r3, #0]
 8019e6c:	e03c      	b.n	8019ee8 <USB_EPStartXfer+0x228>
 8019e6e:	1d7b      	adds	r3, r7, #5
 8019e70:	33ff      	adds	r3, #255	@ 0xff
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	085b      	lsrs	r3, r3, #1
 8019e76:	1c7a      	adds	r2, r7, #1
 8019e78:	32ff      	adds	r2, #255	@ 0xff
 8019e7a:	6013      	str	r3, [r2, #0]
 8019e7c:	1d7b      	adds	r3, r7, #5
 8019e7e:	33ff      	adds	r3, #255	@ 0xff
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	2201      	movs	r2, #1
 8019e84:	4013      	ands	r3, r2
 8019e86:	d006      	beq.n	8019e96 <USB_EPStartXfer+0x1d6>
 8019e88:	1c7b      	adds	r3, r7, #1
 8019e8a:	33ff      	adds	r3, #255	@ 0xff
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	3301      	adds	r3, #1
 8019e90:	1c7a      	adds	r2, r7, #1
 8019e92:	32ff      	adds	r2, #255	@ 0xff
 8019e94:	6013      	str	r3, [r2, #0]
 8019e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e98:	881b      	ldrh	r3, [r3, #0]
 8019e9a:	b29a      	uxth	r2, r3
 8019e9c:	1c7b      	adds	r3, r7, #1
 8019e9e:	33ff      	adds	r3, #255	@ 0xff
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	b29b      	uxth	r3, r3
 8019ea4:	029b      	lsls	r3, r3, #10
 8019ea6:	b29b      	uxth	r3, r3
 8019ea8:	4313      	orrs	r3, r2
 8019eaa:	b29a      	uxth	r2, r3
 8019eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eae:	801a      	strh	r2, [r3, #0]
 8019eb0:	e01a      	b.n	8019ee8 <USB_EPStartXfer+0x228>
 8019eb2:	683b      	ldr	r3, [r7, #0]
 8019eb4:	785b      	ldrb	r3, [r3, #1]
 8019eb6:	2b01      	cmp	r3, #1
 8019eb8:	d116      	bne.n	8019ee8 <USB_EPStartXfer+0x228>
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2250      	movs	r2, #80	@ 0x50
 8019ebe:	5a9b      	ldrh	r3, [r3, r2]
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	001a      	movs	r2, r3
 8019ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ec6:	189b      	adds	r3, r3, r2
 8019ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	781b      	ldrb	r3, [r3, #0]
 8019ece:	00da      	lsls	r2, r3, #3
 8019ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ed2:	18d3      	adds	r3, r2, r3
 8019ed4:	4a72      	ldr	r2, [pc, #456]	@ (801a0a0 <USB_EPStartXfer+0x3e0>)
 8019ed6:	4694      	mov	ip, r2
 8019ed8:	4463      	add	r3, ip
 8019eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019edc:	1d7b      	adds	r3, r7, #5
 8019ede:	33ff      	adds	r3, #255	@ 0xff
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	b29a      	uxth	r2, r3
 8019ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ee6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019ee8:	2076      	movs	r0, #118	@ 0x76
 8019eea:	183b      	adds	r3, r7, r0
 8019eec:	683a      	ldr	r2, [r7, #0]
 8019eee:	8952      	ldrh	r2, [r2, #10]
 8019ef0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019ef2:	683b      	ldr	r3, [r7, #0]
 8019ef4:	6959      	ldr	r1, [r3, #20]
 8019ef6:	1d7b      	adds	r3, r7, #5
 8019ef8:	33ff      	adds	r3, #255	@ 0xff
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	b29c      	uxth	r4, r3
 8019efe:	183b      	adds	r3, r7, r0
 8019f00:	881a      	ldrh	r2, [r3, #0]
 8019f02:	6878      	ldr	r0, [r7, #4]
 8019f04:	0023      	movs	r3, r4
 8019f06:	f001 f94d 	bl	801b1a4 <USB_WritePMA>
            ep->xfer_buff += len;
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	695a      	ldr	r2, [r3, #20]
 8019f0e:	1d7b      	adds	r3, r7, #5
 8019f10:	33ff      	adds	r3, #255	@ 0xff
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	18d2      	adds	r2, r2, r3
 8019f16:	683b      	ldr	r3, [r7, #0]
 8019f18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019f1a:	683b      	ldr	r3, [r7, #0]
 8019f1c:	6a1a      	ldr	r2, [r3, #32]
 8019f1e:	683b      	ldr	r3, [r7, #0]
 8019f20:	691b      	ldr	r3, [r3, #16]
 8019f22:	429a      	cmp	r2, r3
 8019f24:	d908      	bls.n	8019f38 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019f26:	683b      	ldr	r3, [r7, #0]
 8019f28:	6a1a      	ldr	r2, [r3, #32]
 8019f2a:	1d7b      	adds	r3, r7, #5
 8019f2c:	33ff      	adds	r3, #255	@ 0xff
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	1ad2      	subs	r2, r2, r3
 8019f32:	683b      	ldr	r3, [r7, #0]
 8019f34:	621a      	str	r2, [r3, #32]
 8019f36:	e007      	b.n	8019f48 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	6a1b      	ldr	r3, [r3, #32]
 8019f3c:	1d7a      	adds	r2, r7, #5
 8019f3e:	32ff      	adds	r2, #255	@ 0xff
 8019f40:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019f42:	683b      	ldr	r3, [r7, #0]
 8019f44:	2200      	movs	r2, #0
 8019f46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	785b      	ldrb	r3, [r3, #1]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d000      	beq.n	8019f52 <USB_EPStartXfer+0x292>
 8019f50:	e070      	b.n	801a034 <USB_EPStartXfer+0x374>
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	61bb      	str	r3, [r7, #24]
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	2250      	movs	r2, #80	@ 0x50
 8019f5a:	5a9b      	ldrh	r3, [r3, r2]
 8019f5c:	b29b      	uxth	r3, r3
 8019f5e:	001a      	movs	r2, r3
 8019f60:	69bb      	ldr	r3, [r7, #24]
 8019f62:	189b      	adds	r3, r3, r2
 8019f64:	61bb      	str	r3, [r7, #24]
 8019f66:	683b      	ldr	r3, [r7, #0]
 8019f68:	781b      	ldrb	r3, [r3, #0]
 8019f6a:	00da      	lsls	r2, r3, #3
 8019f6c:	69bb      	ldr	r3, [r7, #24]
 8019f6e:	18d3      	adds	r3, r2, r3
 8019f70:	4a48      	ldr	r2, [pc, #288]	@ (801a094 <USB_EPStartXfer+0x3d4>)
 8019f72:	4694      	mov	ip, r2
 8019f74:	4463      	add	r3, ip
 8019f76:	617b      	str	r3, [r7, #20]
 8019f78:	697b      	ldr	r3, [r7, #20]
 8019f7a:	881b      	ldrh	r3, [r3, #0]
 8019f7c:	b29b      	uxth	r3, r3
 8019f7e:	059b      	lsls	r3, r3, #22
 8019f80:	0d9b      	lsrs	r3, r3, #22
 8019f82:	b29a      	uxth	r2, r3
 8019f84:	697b      	ldr	r3, [r7, #20]
 8019f86:	801a      	strh	r2, [r3, #0]
 8019f88:	1d7b      	adds	r3, r7, #5
 8019f8a:	33ff      	adds	r3, #255	@ 0xff
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019f90:	d922      	bls.n	8019fd8 <USB_EPStartXfer+0x318>
 8019f92:	1d7b      	adds	r3, r7, #5
 8019f94:	33ff      	adds	r3, #255	@ 0xff
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	095b      	lsrs	r3, r3, #5
 8019f9a:	21fc      	movs	r1, #252	@ 0xfc
 8019f9c:	187a      	adds	r2, r7, r1
 8019f9e:	6013      	str	r3, [r2, #0]
 8019fa0:	1d7b      	adds	r3, r7, #5
 8019fa2:	33ff      	adds	r3, #255	@ 0xff
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	221f      	movs	r2, #31
 8019fa8:	4013      	ands	r3, r2
 8019faa:	d104      	bne.n	8019fb6 <USB_EPStartXfer+0x2f6>
 8019fac:	187b      	adds	r3, r7, r1
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	3b01      	subs	r3, #1
 8019fb2:	187a      	adds	r2, r7, r1
 8019fb4:	6013      	str	r3, [r2, #0]
 8019fb6:	697b      	ldr	r3, [r7, #20]
 8019fb8:	881b      	ldrh	r3, [r3, #0]
 8019fba:	b29a      	uxth	r2, r3
 8019fbc:	23fc      	movs	r3, #252	@ 0xfc
 8019fbe:	18fb      	adds	r3, r7, r3
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	029b      	lsls	r3, r3, #10
 8019fc6:	b29b      	uxth	r3, r3
 8019fc8:	4313      	orrs	r3, r2
 8019fca:	b29b      	uxth	r3, r3
 8019fcc:	4a35      	ldr	r2, [pc, #212]	@ (801a0a4 <USB_EPStartXfer+0x3e4>)
 8019fce:	4313      	orrs	r3, r2
 8019fd0:	b29a      	uxth	r2, r3
 8019fd2:	697b      	ldr	r3, [r7, #20]
 8019fd4:	801a      	strh	r2, [r3, #0]
 8019fd6:	e04a      	b.n	801a06e <USB_EPStartXfer+0x3ae>
 8019fd8:	1d7b      	adds	r3, r7, #5
 8019fda:	33ff      	adds	r3, #255	@ 0xff
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d108      	bne.n	8019ff4 <USB_EPStartXfer+0x334>
 8019fe2:	697b      	ldr	r3, [r7, #20]
 8019fe4:	881b      	ldrh	r3, [r3, #0]
 8019fe6:	b29b      	uxth	r3, r3
 8019fe8:	4a2e      	ldr	r2, [pc, #184]	@ (801a0a4 <USB_EPStartXfer+0x3e4>)
 8019fea:	4313      	orrs	r3, r2
 8019fec:	b29a      	uxth	r2, r3
 8019fee:	697b      	ldr	r3, [r7, #20]
 8019ff0:	801a      	strh	r2, [r3, #0]
 8019ff2:	e03c      	b.n	801a06e <USB_EPStartXfer+0x3ae>
 8019ff4:	1d7b      	adds	r3, r7, #5
 8019ff6:	33ff      	adds	r3, #255	@ 0xff
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	085b      	lsrs	r3, r3, #1
 8019ffc:	21fc      	movs	r1, #252	@ 0xfc
 8019ffe:	187a      	adds	r2, r7, r1
 801a000:	6013      	str	r3, [r2, #0]
 801a002:	1d7b      	adds	r3, r7, #5
 801a004:	33ff      	adds	r3, #255	@ 0xff
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	2201      	movs	r2, #1
 801a00a:	4013      	ands	r3, r2
 801a00c:	d004      	beq.n	801a018 <USB_EPStartXfer+0x358>
 801a00e:	187b      	adds	r3, r7, r1
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	3301      	adds	r3, #1
 801a014:	187a      	adds	r2, r7, r1
 801a016:	6013      	str	r3, [r2, #0]
 801a018:	697b      	ldr	r3, [r7, #20]
 801a01a:	881b      	ldrh	r3, [r3, #0]
 801a01c:	b29a      	uxth	r2, r3
 801a01e:	23fc      	movs	r3, #252	@ 0xfc
 801a020:	18fb      	adds	r3, r7, r3
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	b29b      	uxth	r3, r3
 801a026:	029b      	lsls	r3, r3, #10
 801a028:	b29b      	uxth	r3, r3
 801a02a:	4313      	orrs	r3, r2
 801a02c:	b29a      	uxth	r2, r3
 801a02e:	697b      	ldr	r3, [r7, #20]
 801a030:	801a      	strh	r2, [r3, #0]
 801a032:	e01c      	b.n	801a06e <USB_EPStartXfer+0x3ae>
 801a034:	683b      	ldr	r3, [r7, #0]
 801a036:	785b      	ldrb	r3, [r3, #1]
 801a038:	2b01      	cmp	r3, #1
 801a03a:	d118      	bne.n	801a06e <USB_EPStartXfer+0x3ae>
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	623b      	str	r3, [r7, #32]
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	2250      	movs	r2, #80	@ 0x50
 801a044:	5a9b      	ldrh	r3, [r3, r2]
 801a046:	b29b      	uxth	r3, r3
 801a048:	001a      	movs	r2, r3
 801a04a:	6a3b      	ldr	r3, [r7, #32]
 801a04c:	189b      	adds	r3, r3, r2
 801a04e:	623b      	str	r3, [r7, #32]
 801a050:	683b      	ldr	r3, [r7, #0]
 801a052:	781b      	ldrb	r3, [r3, #0]
 801a054:	00da      	lsls	r2, r3, #3
 801a056:	6a3b      	ldr	r3, [r7, #32]
 801a058:	18d3      	adds	r3, r2, r3
 801a05a:	4a0e      	ldr	r2, [pc, #56]	@ (801a094 <USB_EPStartXfer+0x3d4>)
 801a05c:	4694      	mov	ip, r2
 801a05e:	4463      	add	r3, ip
 801a060:	61fb      	str	r3, [r7, #28]
 801a062:	1d7b      	adds	r3, r7, #5
 801a064:	33ff      	adds	r3, #255	@ 0xff
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	b29a      	uxth	r2, r3
 801a06a:	69fb      	ldr	r3, [r7, #28]
 801a06c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a06e:	2076      	movs	r0, #118	@ 0x76
 801a070:	183b      	adds	r3, r7, r0
 801a072:	683a      	ldr	r2, [r7, #0]
 801a074:	8912      	ldrh	r2, [r2, #8]
 801a076:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a078:	683b      	ldr	r3, [r7, #0]
 801a07a:	6959      	ldr	r1, [r3, #20]
 801a07c:	1d7b      	adds	r3, r7, #5
 801a07e:	33ff      	adds	r3, #255	@ 0xff
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	b29c      	uxth	r4, r3
 801a084:	183b      	adds	r3, r7, r0
 801a086:	881a      	ldrh	r2, [r3, #0]
 801a088:	6878      	ldr	r0, [r7, #4]
 801a08a:	0023      	movs	r3, r4
 801a08c:	f001 f88a 	bl	801b1a4 <USB_WritePMA>
 801a090:	e329      	b.n	801a6e6 <USB_EPStartXfer+0xa26>
 801a092:	46c0      	nop			@ (mov r8, r8)
 801a094:	00000402 	.word	0x00000402
 801a098:	ffff8f8f 	.word	0xffff8f8f
 801a09c:	ffff8180 	.word	0xffff8180
 801a0a0:	00000406 	.word	0x00000406
 801a0a4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a0a8:	683b      	ldr	r3, [r7, #0]
 801a0aa:	785b      	ldrb	r3, [r3, #1]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d000      	beq.n	801a0b2 <USB_EPStartXfer+0x3f2>
 801a0b0:	e070      	b.n	801a194 <USB_EPStartXfer+0x4d4>
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	2250      	movs	r2, #80	@ 0x50
 801a0ba:	5a9b      	ldrh	r3, [r3, r2]
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	001a      	movs	r2, r3
 801a0c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0c2:	189b      	adds	r3, r3, r2
 801a0c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a0c6:	683b      	ldr	r3, [r7, #0]
 801a0c8:	781b      	ldrb	r3, [r3, #0]
 801a0ca:	00da      	lsls	r2, r3, #3
 801a0cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0ce:	18d3      	adds	r3, r2, r3
 801a0d0:	4acd      	ldr	r2, [pc, #820]	@ (801a408 <USB_EPStartXfer+0x748>)
 801a0d2:	4694      	mov	ip, r2
 801a0d4:	4463      	add	r3, ip
 801a0d6:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0da:	881b      	ldrh	r3, [r3, #0]
 801a0dc:	b29b      	uxth	r3, r3
 801a0de:	059b      	lsls	r3, r3, #22
 801a0e0:	0d9b      	lsrs	r3, r3, #22
 801a0e2:	b29a      	uxth	r2, r3
 801a0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0e6:	801a      	strh	r2, [r3, #0]
 801a0e8:	1d7b      	adds	r3, r7, #5
 801a0ea:	33ff      	adds	r3, #255	@ 0xff
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	2b3e      	cmp	r3, #62	@ 0x3e
 801a0f0:	d922      	bls.n	801a138 <USB_EPStartXfer+0x478>
 801a0f2:	1d7b      	adds	r3, r7, #5
 801a0f4:	33ff      	adds	r3, #255	@ 0xff
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	095b      	lsrs	r3, r3, #5
 801a0fa:	21f8      	movs	r1, #248	@ 0xf8
 801a0fc:	187a      	adds	r2, r7, r1
 801a0fe:	6013      	str	r3, [r2, #0]
 801a100:	1d7b      	adds	r3, r7, #5
 801a102:	33ff      	adds	r3, #255	@ 0xff
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	221f      	movs	r2, #31
 801a108:	4013      	ands	r3, r2
 801a10a:	d104      	bne.n	801a116 <USB_EPStartXfer+0x456>
 801a10c:	187b      	adds	r3, r7, r1
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	3b01      	subs	r3, #1
 801a112:	187a      	adds	r2, r7, r1
 801a114:	6013      	str	r3, [r2, #0]
 801a116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a118:	881b      	ldrh	r3, [r3, #0]
 801a11a:	b29a      	uxth	r2, r3
 801a11c:	23f8      	movs	r3, #248	@ 0xf8
 801a11e:	18fb      	adds	r3, r7, r3
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	b29b      	uxth	r3, r3
 801a124:	029b      	lsls	r3, r3, #10
 801a126:	b29b      	uxth	r3, r3
 801a128:	4313      	orrs	r3, r2
 801a12a:	b29b      	uxth	r3, r3
 801a12c:	4ab7      	ldr	r2, [pc, #732]	@ (801a40c <USB_EPStartXfer+0x74c>)
 801a12e:	4313      	orrs	r3, r2
 801a130:	b29a      	uxth	r2, r3
 801a132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a134:	801a      	strh	r2, [r3, #0]
 801a136:	e04a      	b.n	801a1ce <USB_EPStartXfer+0x50e>
 801a138:	1d7b      	adds	r3, r7, #5
 801a13a:	33ff      	adds	r3, #255	@ 0xff
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d108      	bne.n	801a154 <USB_EPStartXfer+0x494>
 801a142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a144:	881b      	ldrh	r3, [r3, #0]
 801a146:	b29b      	uxth	r3, r3
 801a148:	4ab0      	ldr	r2, [pc, #704]	@ (801a40c <USB_EPStartXfer+0x74c>)
 801a14a:	4313      	orrs	r3, r2
 801a14c:	b29a      	uxth	r2, r3
 801a14e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a150:	801a      	strh	r2, [r3, #0]
 801a152:	e03c      	b.n	801a1ce <USB_EPStartXfer+0x50e>
 801a154:	1d7b      	adds	r3, r7, #5
 801a156:	33ff      	adds	r3, #255	@ 0xff
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	085b      	lsrs	r3, r3, #1
 801a15c:	21f8      	movs	r1, #248	@ 0xf8
 801a15e:	187a      	adds	r2, r7, r1
 801a160:	6013      	str	r3, [r2, #0]
 801a162:	1d7b      	adds	r3, r7, #5
 801a164:	33ff      	adds	r3, #255	@ 0xff
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	2201      	movs	r2, #1
 801a16a:	4013      	ands	r3, r2
 801a16c:	d004      	beq.n	801a178 <USB_EPStartXfer+0x4b8>
 801a16e:	187b      	adds	r3, r7, r1
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	3301      	adds	r3, #1
 801a174:	187a      	adds	r2, r7, r1
 801a176:	6013      	str	r3, [r2, #0]
 801a178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a17a:	881b      	ldrh	r3, [r3, #0]
 801a17c:	b29a      	uxth	r2, r3
 801a17e:	23f8      	movs	r3, #248	@ 0xf8
 801a180:	18fb      	adds	r3, r7, r3
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	b29b      	uxth	r3, r3
 801a186:	029b      	lsls	r3, r3, #10
 801a188:	b29b      	uxth	r3, r3
 801a18a:	4313      	orrs	r3, r2
 801a18c:	b29a      	uxth	r2, r3
 801a18e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a190:	801a      	strh	r2, [r3, #0]
 801a192:	e01c      	b.n	801a1ce <USB_EPStartXfer+0x50e>
 801a194:	683b      	ldr	r3, [r7, #0]
 801a196:	785b      	ldrb	r3, [r3, #1]
 801a198:	2b01      	cmp	r3, #1
 801a19a:	d118      	bne.n	801a1ce <USB_EPStartXfer+0x50e>
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	653b      	str	r3, [r7, #80]	@ 0x50
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	2250      	movs	r2, #80	@ 0x50
 801a1a4:	5a9b      	ldrh	r3, [r3, r2]
 801a1a6:	b29b      	uxth	r3, r3
 801a1a8:	001a      	movs	r2, r3
 801a1aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1ac:	189b      	adds	r3, r3, r2
 801a1ae:	653b      	str	r3, [r7, #80]	@ 0x50
 801a1b0:	683b      	ldr	r3, [r7, #0]
 801a1b2:	781b      	ldrb	r3, [r3, #0]
 801a1b4:	00da      	lsls	r2, r3, #3
 801a1b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1b8:	18d3      	adds	r3, r2, r3
 801a1ba:	4a93      	ldr	r2, [pc, #588]	@ (801a408 <USB_EPStartXfer+0x748>)
 801a1bc:	4694      	mov	ip, r2
 801a1be:	4463      	add	r3, ip
 801a1c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a1c2:	1d7b      	adds	r3, r7, #5
 801a1c4:	33ff      	adds	r3, #255	@ 0xff
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	b29a      	uxth	r2, r3
 801a1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a1cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a1ce:	2076      	movs	r0, #118	@ 0x76
 801a1d0:	183b      	adds	r3, r7, r0
 801a1d2:	683a      	ldr	r2, [r7, #0]
 801a1d4:	8912      	ldrh	r2, [r2, #8]
 801a1d6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	6959      	ldr	r1, [r3, #20]
 801a1dc:	1d7b      	adds	r3, r7, #5
 801a1de:	33ff      	adds	r3, #255	@ 0xff
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	b29c      	uxth	r4, r3
 801a1e4:	183b      	adds	r3, r7, r0
 801a1e6:	881a      	ldrh	r2, [r3, #0]
 801a1e8:	6878      	ldr	r0, [r7, #4]
 801a1ea:	0023      	movs	r3, r4
 801a1ec:	f000 ffda 	bl	801b1a4 <USB_WritePMA>
            ep->xfer_buff += len;
 801a1f0:	683b      	ldr	r3, [r7, #0]
 801a1f2:	695a      	ldr	r2, [r3, #20]
 801a1f4:	1d7b      	adds	r3, r7, #5
 801a1f6:	33ff      	adds	r3, #255	@ 0xff
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	18d2      	adds	r2, r2, r3
 801a1fc:	683b      	ldr	r3, [r7, #0]
 801a1fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a200:	683b      	ldr	r3, [r7, #0]
 801a202:	6a1a      	ldr	r2, [r3, #32]
 801a204:	683b      	ldr	r3, [r7, #0]
 801a206:	691b      	ldr	r3, [r3, #16]
 801a208:	429a      	cmp	r2, r3
 801a20a:	d908      	bls.n	801a21e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a20c:	683b      	ldr	r3, [r7, #0]
 801a20e:	6a1a      	ldr	r2, [r3, #32]
 801a210:	1d7b      	adds	r3, r7, #5
 801a212:	33ff      	adds	r3, #255	@ 0xff
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	1ad2      	subs	r2, r2, r3
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	621a      	str	r2, [r3, #32]
 801a21c:	e007      	b.n	801a22e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	6a1b      	ldr	r3, [r3, #32]
 801a222:	1d7a      	adds	r2, r7, #5
 801a224:	32ff      	adds	r2, #255	@ 0xff
 801a226:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a228:	683b      	ldr	r3, [r7, #0]
 801a22a:	2200      	movs	r2, #0
 801a22c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	643b      	str	r3, [r7, #64]	@ 0x40
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	785b      	ldrb	r3, [r3, #1]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d000      	beq.n	801a23c <USB_EPStartXfer+0x57c>
 801a23a:	e070      	b.n	801a31e <USB_EPStartXfer+0x65e>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	2250      	movs	r2, #80	@ 0x50
 801a244:	5a9b      	ldrh	r3, [r3, r2]
 801a246:	b29b      	uxth	r3, r3
 801a248:	001a      	movs	r2, r3
 801a24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a24c:	189b      	adds	r3, r3, r2
 801a24e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a250:	683b      	ldr	r3, [r7, #0]
 801a252:	781b      	ldrb	r3, [r3, #0]
 801a254:	00da      	lsls	r2, r3, #3
 801a256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a258:	18d3      	adds	r3, r2, r3
 801a25a:	4a6d      	ldr	r2, [pc, #436]	@ (801a410 <USB_EPStartXfer+0x750>)
 801a25c:	4694      	mov	ip, r2
 801a25e:	4463      	add	r3, ip
 801a260:	637b      	str	r3, [r7, #52]	@ 0x34
 801a262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a264:	881b      	ldrh	r3, [r3, #0]
 801a266:	b29b      	uxth	r3, r3
 801a268:	059b      	lsls	r3, r3, #22
 801a26a:	0d9b      	lsrs	r3, r3, #22
 801a26c:	b29a      	uxth	r2, r3
 801a26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a270:	801a      	strh	r2, [r3, #0]
 801a272:	1d7b      	adds	r3, r7, #5
 801a274:	33ff      	adds	r3, #255	@ 0xff
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	2b3e      	cmp	r3, #62	@ 0x3e
 801a27a:	d922      	bls.n	801a2c2 <USB_EPStartXfer+0x602>
 801a27c:	1d7b      	adds	r3, r7, #5
 801a27e:	33ff      	adds	r3, #255	@ 0xff
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	095b      	lsrs	r3, r3, #5
 801a284:	21f4      	movs	r1, #244	@ 0xf4
 801a286:	187a      	adds	r2, r7, r1
 801a288:	6013      	str	r3, [r2, #0]
 801a28a:	1d7b      	adds	r3, r7, #5
 801a28c:	33ff      	adds	r3, #255	@ 0xff
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	221f      	movs	r2, #31
 801a292:	4013      	ands	r3, r2
 801a294:	d104      	bne.n	801a2a0 <USB_EPStartXfer+0x5e0>
 801a296:	187b      	adds	r3, r7, r1
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	3b01      	subs	r3, #1
 801a29c:	187a      	adds	r2, r7, r1
 801a29e:	6013      	str	r3, [r2, #0]
 801a2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2a2:	881b      	ldrh	r3, [r3, #0]
 801a2a4:	b29a      	uxth	r2, r3
 801a2a6:	23f4      	movs	r3, #244	@ 0xf4
 801a2a8:	18fb      	adds	r3, r7, r3
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	b29b      	uxth	r3, r3
 801a2ae:	029b      	lsls	r3, r3, #10
 801a2b0:	b29b      	uxth	r3, r3
 801a2b2:	4313      	orrs	r3, r2
 801a2b4:	b29b      	uxth	r3, r3
 801a2b6:	4a55      	ldr	r2, [pc, #340]	@ (801a40c <USB_EPStartXfer+0x74c>)
 801a2b8:	4313      	orrs	r3, r2
 801a2ba:	b29a      	uxth	r2, r3
 801a2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2be:	801a      	strh	r2, [r3, #0]
 801a2c0:	e048      	b.n	801a354 <USB_EPStartXfer+0x694>
 801a2c2:	1d7b      	adds	r3, r7, #5
 801a2c4:	33ff      	adds	r3, #255	@ 0xff
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d108      	bne.n	801a2de <USB_EPStartXfer+0x61e>
 801a2cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2ce:	881b      	ldrh	r3, [r3, #0]
 801a2d0:	b29b      	uxth	r3, r3
 801a2d2:	4a4e      	ldr	r2, [pc, #312]	@ (801a40c <USB_EPStartXfer+0x74c>)
 801a2d4:	4313      	orrs	r3, r2
 801a2d6:	b29a      	uxth	r2, r3
 801a2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2da:	801a      	strh	r2, [r3, #0]
 801a2dc:	e03a      	b.n	801a354 <USB_EPStartXfer+0x694>
 801a2de:	1d7b      	adds	r3, r7, #5
 801a2e0:	33ff      	adds	r3, #255	@ 0xff
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	085b      	lsrs	r3, r3, #1
 801a2e6:	21f4      	movs	r1, #244	@ 0xf4
 801a2e8:	187a      	adds	r2, r7, r1
 801a2ea:	6013      	str	r3, [r2, #0]
 801a2ec:	1d7b      	adds	r3, r7, #5
 801a2ee:	33ff      	adds	r3, #255	@ 0xff
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	2201      	movs	r2, #1
 801a2f4:	4013      	ands	r3, r2
 801a2f6:	d004      	beq.n	801a302 <USB_EPStartXfer+0x642>
 801a2f8:	187b      	adds	r3, r7, r1
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	3301      	adds	r3, #1
 801a2fe:	187a      	adds	r2, r7, r1
 801a300:	6013      	str	r3, [r2, #0]
 801a302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a304:	881b      	ldrh	r3, [r3, #0]
 801a306:	b29a      	uxth	r2, r3
 801a308:	23f4      	movs	r3, #244	@ 0xf4
 801a30a:	18fb      	adds	r3, r7, r3
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	b29b      	uxth	r3, r3
 801a310:	029b      	lsls	r3, r3, #10
 801a312:	b29b      	uxth	r3, r3
 801a314:	4313      	orrs	r3, r2
 801a316:	b29a      	uxth	r2, r3
 801a318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a31a:	801a      	strh	r2, [r3, #0]
 801a31c:	e01a      	b.n	801a354 <USB_EPStartXfer+0x694>
 801a31e:	683b      	ldr	r3, [r7, #0]
 801a320:	785b      	ldrb	r3, [r3, #1]
 801a322:	2b01      	cmp	r3, #1
 801a324:	d116      	bne.n	801a354 <USB_EPStartXfer+0x694>
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	2250      	movs	r2, #80	@ 0x50
 801a32a:	5a9b      	ldrh	r3, [r3, r2]
 801a32c:	b29b      	uxth	r3, r3
 801a32e:	001a      	movs	r2, r3
 801a330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a332:	189b      	adds	r3, r3, r2
 801a334:	643b      	str	r3, [r7, #64]	@ 0x40
 801a336:	683b      	ldr	r3, [r7, #0]
 801a338:	781b      	ldrb	r3, [r3, #0]
 801a33a:	00da      	lsls	r2, r3, #3
 801a33c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a33e:	18d3      	adds	r3, r2, r3
 801a340:	4a33      	ldr	r2, [pc, #204]	@ (801a410 <USB_EPStartXfer+0x750>)
 801a342:	4694      	mov	ip, r2
 801a344:	4463      	add	r3, ip
 801a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a348:	1d7b      	adds	r3, r7, #5
 801a34a:	33ff      	adds	r3, #255	@ 0xff
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	b29a      	uxth	r2, r3
 801a350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a352:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a354:	2076      	movs	r0, #118	@ 0x76
 801a356:	183b      	adds	r3, r7, r0
 801a358:	683a      	ldr	r2, [r7, #0]
 801a35a:	8952      	ldrh	r2, [r2, #10]
 801a35c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a35e:	683b      	ldr	r3, [r7, #0]
 801a360:	6959      	ldr	r1, [r3, #20]
 801a362:	1d7b      	adds	r3, r7, #5
 801a364:	33ff      	adds	r3, #255	@ 0xff
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	b29c      	uxth	r4, r3
 801a36a:	183b      	adds	r3, r7, r0
 801a36c:	881a      	ldrh	r2, [r3, #0]
 801a36e:	6878      	ldr	r0, [r7, #4]
 801a370:	0023      	movs	r3, r4
 801a372:	f000 ff17 	bl	801b1a4 <USB_WritePMA>
 801a376:	e1b6      	b.n	801a6e6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a378:	683b      	ldr	r3, [r7, #0]
 801a37a:	6a1b      	ldr	r3, [r3, #32]
 801a37c:	1d7a      	adds	r2, r7, #5
 801a37e:	32ff      	adds	r2, #255	@ 0xff
 801a380:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a382:	687a      	ldr	r2, [r7, #4]
 801a384:	683b      	ldr	r3, [r7, #0]
 801a386:	781b      	ldrb	r3, [r3, #0]
 801a388:	009b      	lsls	r3, r3, #2
 801a38a:	18d3      	adds	r3, r2, r3
 801a38c:	881b      	ldrh	r3, [r3, #0]
 801a38e:	b29a      	uxth	r2, r3
 801a390:	2062      	movs	r0, #98	@ 0x62
 801a392:	183b      	adds	r3, r7, r0
 801a394:	491f      	ldr	r1, [pc, #124]	@ (801a414 <USB_EPStartXfer+0x754>)
 801a396:	400a      	ands	r2, r1
 801a398:	801a      	strh	r2, [r3, #0]
 801a39a:	687a      	ldr	r2, [r7, #4]
 801a39c:	683b      	ldr	r3, [r7, #0]
 801a39e:	781b      	ldrb	r3, [r3, #0]
 801a3a0:	009b      	lsls	r3, r3, #2
 801a3a2:	18d3      	adds	r3, r2, r3
 801a3a4:	183a      	adds	r2, r7, r0
 801a3a6:	8812      	ldrh	r2, [r2, #0]
 801a3a8:	491b      	ldr	r1, [pc, #108]	@ (801a418 <USB_EPStartXfer+0x758>)
 801a3aa:	430a      	orrs	r2, r1
 801a3ac:	b292      	uxth	r2, r2
 801a3ae:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	2250      	movs	r2, #80	@ 0x50
 801a3b8:	5a9b      	ldrh	r3, [r3, r2]
 801a3ba:	b29b      	uxth	r3, r3
 801a3bc:	001a      	movs	r2, r3
 801a3be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a3c0:	189b      	adds	r3, r3, r2
 801a3c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a3c4:	683b      	ldr	r3, [r7, #0]
 801a3c6:	781b      	ldrb	r3, [r3, #0]
 801a3c8:	00da      	lsls	r2, r3, #3
 801a3ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a3cc:	18d3      	adds	r3, r2, r3
 801a3ce:	4a0e      	ldr	r2, [pc, #56]	@ (801a408 <USB_EPStartXfer+0x748>)
 801a3d0:	4694      	mov	ip, r2
 801a3d2:	4463      	add	r3, ip
 801a3d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a3d6:	1d7b      	adds	r3, r7, #5
 801a3d8:	33ff      	adds	r3, #255	@ 0xff
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	b29a      	uxth	r2, r3
 801a3de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a3e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a3e2:	2076      	movs	r0, #118	@ 0x76
 801a3e4:	183b      	adds	r3, r7, r0
 801a3e6:	683a      	ldr	r2, [r7, #0]
 801a3e8:	8912      	ldrh	r2, [r2, #8]
 801a3ea:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a3ec:	683b      	ldr	r3, [r7, #0]
 801a3ee:	6959      	ldr	r1, [r3, #20]
 801a3f0:	1d7b      	adds	r3, r7, #5
 801a3f2:	33ff      	adds	r3, #255	@ 0xff
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	b29c      	uxth	r4, r3
 801a3f8:	183b      	adds	r3, r7, r0
 801a3fa:	881a      	ldrh	r2, [r3, #0]
 801a3fc:	6878      	ldr	r0, [r7, #4]
 801a3fe:	0023      	movs	r3, r4
 801a400:	f000 fed0 	bl	801b1a4 <USB_WritePMA>
 801a404:	e16f      	b.n	801a6e6 <USB_EPStartXfer+0xa26>
 801a406:	46c0      	nop			@ (mov r8, r8)
 801a408:	00000402 	.word	0x00000402
 801a40c:	ffff8000 	.word	0xffff8000
 801a410:	00000406 	.word	0x00000406
 801a414:	ffff8e8f 	.word	0xffff8e8f
 801a418:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a41c:	683b      	ldr	r3, [r7, #0]
 801a41e:	6a1a      	ldr	r2, [r3, #32]
 801a420:	1d7b      	adds	r3, r7, #5
 801a422:	33ff      	adds	r3, #255	@ 0xff
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	1ad2      	subs	r2, r2, r3
 801a428:	683b      	ldr	r3, [r7, #0]
 801a42a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a42c:	687a      	ldr	r2, [r7, #4]
 801a42e:	683b      	ldr	r3, [r7, #0]
 801a430:	781b      	ldrb	r3, [r3, #0]
 801a432:	009b      	lsls	r3, r3, #2
 801a434:	18d3      	adds	r3, r2, r3
 801a436:	881b      	ldrh	r3, [r3, #0]
 801a438:	b29b      	uxth	r3, r3
 801a43a:	001a      	movs	r2, r3
 801a43c:	2340      	movs	r3, #64	@ 0x40
 801a43e:	4013      	ands	r3, r2
 801a440:	d100      	bne.n	801a444 <USB_EPStartXfer+0x784>
 801a442:	e0a4      	b.n	801a58e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	673b      	str	r3, [r7, #112]	@ 0x70
 801a448:	683b      	ldr	r3, [r7, #0]
 801a44a:	785b      	ldrb	r3, [r3, #1]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d000      	beq.n	801a452 <USB_EPStartXfer+0x792>
 801a450:	e070      	b.n	801a534 <USB_EPStartXfer+0x874>
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	2250      	movs	r2, #80	@ 0x50
 801a45a:	5a9b      	ldrh	r3, [r3, r2]
 801a45c:	b29b      	uxth	r3, r3
 801a45e:	001a      	movs	r2, r3
 801a460:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a462:	189b      	adds	r3, r3, r2
 801a464:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a466:	683b      	ldr	r3, [r7, #0]
 801a468:	781b      	ldrb	r3, [r3, #0]
 801a46a:	00da      	lsls	r2, r3, #3
 801a46c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a46e:	18d3      	adds	r3, r2, r3
 801a470:	4abc      	ldr	r2, [pc, #752]	@ (801a764 <USB_EPStartXfer+0xaa4>)
 801a472:	4694      	mov	ip, r2
 801a474:	4463      	add	r3, ip
 801a476:	667b      	str	r3, [r7, #100]	@ 0x64
 801a478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a47a:	881b      	ldrh	r3, [r3, #0]
 801a47c:	b29b      	uxth	r3, r3
 801a47e:	059b      	lsls	r3, r3, #22
 801a480:	0d9b      	lsrs	r3, r3, #22
 801a482:	b29a      	uxth	r2, r3
 801a484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a486:	801a      	strh	r2, [r3, #0]
 801a488:	1d7b      	adds	r3, r7, #5
 801a48a:	33ff      	adds	r3, #255	@ 0xff
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	2b3e      	cmp	r3, #62	@ 0x3e
 801a490:	d922      	bls.n	801a4d8 <USB_EPStartXfer+0x818>
 801a492:	1d7b      	adds	r3, r7, #5
 801a494:	33ff      	adds	r3, #255	@ 0xff
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	095b      	lsrs	r3, r3, #5
 801a49a:	21f0      	movs	r1, #240	@ 0xf0
 801a49c:	187a      	adds	r2, r7, r1
 801a49e:	6013      	str	r3, [r2, #0]
 801a4a0:	1d7b      	adds	r3, r7, #5
 801a4a2:	33ff      	adds	r3, #255	@ 0xff
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	221f      	movs	r2, #31
 801a4a8:	4013      	ands	r3, r2
 801a4aa:	d104      	bne.n	801a4b6 <USB_EPStartXfer+0x7f6>
 801a4ac:	187b      	adds	r3, r7, r1
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	3b01      	subs	r3, #1
 801a4b2:	187a      	adds	r2, r7, r1
 801a4b4:	6013      	str	r3, [r2, #0]
 801a4b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4b8:	881b      	ldrh	r3, [r3, #0]
 801a4ba:	b29a      	uxth	r2, r3
 801a4bc:	23f0      	movs	r3, #240	@ 0xf0
 801a4be:	18fb      	adds	r3, r7, r3
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	029b      	lsls	r3, r3, #10
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	4313      	orrs	r3, r2
 801a4ca:	b29b      	uxth	r3, r3
 801a4cc:	4aa6      	ldr	r2, [pc, #664]	@ (801a768 <USB_EPStartXfer+0xaa8>)
 801a4ce:	4313      	orrs	r3, r2
 801a4d0:	b29a      	uxth	r2, r3
 801a4d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4d4:	801a      	strh	r2, [r3, #0]
 801a4d6:	e048      	b.n	801a56a <USB_EPStartXfer+0x8aa>
 801a4d8:	1d7b      	adds	r3, r7, #5
 801a4da:	33ff      	adds	r3, #255	@ 0xff
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d108      	bne.n	801a4f4 <USB_EPStartXfer+0x834>
 801a4e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4e4:	881b      	ldrh	r3, [r3, #0]
 801a4e6:	b29b      	uxth	r3, r3
 801a4e8:	4a9f      	ldr	r2, [pc, #636]	@ (801a768 <USB_EPStartXfer+0xaa8>)
 801a4ea:	4313      	orrs	r3, r2
 801a4ec:	b29a      	uxth	r2, r3
 801a4ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4f0:	801a      	strh	r2, [r3, #0]
 801a4f2:	e03a      	b.n	801a56a <USB_EPStartXfer+0x8aa>
 801a4f4:	1d7b      	adds	r3, r7, #5
 801a4f6:	33ff      	adds	r3, #255	@ 0xff
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	085b      	lsrs	r3, r3, #1
 801a4fc:	21f0      	movs	r1, #240	@ 0xf0
 801a4fe:	187a      	adds	r2, r7, r1
 801a500:	6013      	str	r3, [r2, #0]
 801a502:	1d7b      	adds	r3, r7, #5
 801a504:	33ff      	adds	r3, #255	@ 0xff
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	2201      	movs	r2, #1
 801a50a:	4013      	ands	r3, r2
 801a50c:	d004      	beq.n	801a518 <USB_EPStartXfer+0x858>
 801a50e:	187b      	adds	r3, r7, r1
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	3301      	adds	r3, #1
 801a514:	187a      	adds	r2, r7, r1
 801a516:	6013      	str	r3, [r2, #0]
 801a518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a51a:	881b      	ldrh	r3, [r3, #0]
 801a51c:	b29a      	uxth	r2, r3
 801a51e:	23f0      	movs	r3, #240	@ 0xf0
 801a520:	18fb      	adds	r3, r7, r3
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	b29b      	uxth	r3, r3
 801a526:	029b      	lsls	r3, r3, #10
 801a528:	b29b      	uxth	r3, r3
 801a52a:	4313      	orrs	r3, r2
 801a52c:	b29a      	uxth	r2, r3
 801a52e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a530:	801a      	strh	r2, [r3, #0]
 801a532:	e01a      	b.n	801a56a <USB_EPStartXfer+0x8aa>
 801a534:	683b      	ldr	r3, [r7, #0]
 801a536:	785b      	ldrb	r3, [r3, #1]
 801a538:	2b01      	cmp	r3, #1
 801a53a:	d116      	bne.n	801a56a <USB_EPStartXfer+0x8aa>
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	2250      	movs	r2, #80	@ 0x50
 801a540:	5a9b      	ldrh	r3, [r3, r2]
 801a542:	b29b      	uxth	r3, r3
 801a544:	001a      	movs	r2, r3
 801a546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a548:	189b      	adds	r3, r3, r2
 801a54a:	673b      	str	r3, [r7, #112]	@ 0x70
 801a54c:	683b      	ldr	r3, [r7, #0]
 801a54e:	781b      	ldrb	r3, [r3, #0]
 801a550:	00da      	lsls	r2, r3, #3
 801a552:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a554:	18d3      	adds	r3, r2, r3
 801a556:	4a83      	ldr	r2, [pc, #524]	@ (801a764 <USB_EPStartXfer+0xaa4>)
 801a558:	4694      	mov	ip, r2
 801a55a:	4463      	add	r3, ip
 801a55c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a55e:	1d7b      	adds	r3, r7, #5
 801a560:	33ff      	adds	r3, #255	@ 0xff
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	b29a      	uxth	r2, r3
 801a566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a568:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a56a:	2076      	movs	r0, #118	@ 0x76
 801a56c:	183b      	adds	r3, r7, r0
 801a56e:	683a      	ldr	r2, [r7, #0]
 801a570:	8952      	ldrh	r2, [r2, #10]
 801a572:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a574:	683b      	ldr	r3, [r7, #0]
 801a576:	6959      	ldr	r1, [r3, #20]
 801a578:	1d7b      	adds	r3, r7, #5
 801a57a:	33ff      	adds	r3, #255	@ 0xff
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	b29c      	uxth	r4, r3
 801a580:	183b      	adds	r3, r7, r0
 801a582:	881a      	ldrh	r2, [r3, #0]
 801a584:	6878      	ldr	r0, [r7, #4]
 801a586:	0023      	movs	r3, r4
 801a588:	f000 fe0c 	bl	801b1a4 <USB_WritePMA>
 801a58c:	e0ab      	b.n	801a6e6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a58e:	683b      	ldr	r3, [r7, #0]
 801a590:	785b      	ldrb	r3, [r3, #1]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d000      	beq.n	801a598 <USB_EPStartXfer+0x8d8>
 801a596:	e070      	b.n	801a67a <USB_EPStartXfer+0x9ba>
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	2250      	movs	r2, #80	@ 0x50
 801a5a0:	5a9b      	ldrh	r3, [r3, r2]
 801a5a2:	b29b      	uxth	r3, r3
 801a5a4:	001a      	movs	r2, r3
 801a5a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a5a8:	189b      	adds	r3, r3, r2
 801a5aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	781b      	ldrb	r3, [r3, #0]
 801a5b0:	00da      	lsls	r2, r3, #3
 801a5b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a5b4:	18d3      	adds	r3, r2, r3
 801a5b6:	4a6d      	ldr	r2, [pc, #436]	@ (801a76c <USB_EPStartXfer+0xaac>)
 801a5b8:	4694      	mov	ip, r2
 801a5ba:	4463      	add	r3, ip
 801a5bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a5be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5c0:	881b      	ldrh	r3, [r3, #0]
 801a5c2:	b29b      	uxth	r3, r3
 801a5c4:	059b      	lsls	r3, r3, #22
 801a5c6:	0d9b      	lsrs	r3, r3, #22
 801a5c8:	b29a      	uxth	r2, r3
 801a5ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5cc:	801a      	strh	r2, [r3, #0]
 801a5ce:	1d7b      	adds	r3, r7, #5
 801a5d0:	33ff      	adds	r3, #255	@ 0xff
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	2b3e      	cmp	r3, #62	@ 0x3e
 801a5d6:	d922      	bls.n	801a61e <USB_EPStartXfer+0x95e>
 801a5d8:	1d7b      	adds	r3, r7, #5
 801a5da:	33ff      	adds	r3, #255	@ 0xff
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	095b      	lsrs	r3, r3, #5
 801a5e0:	21ec      	movs	r1, #236	@ 0xec
 801a5e2:	187a      	adds	r2, r7, r1
 801a5e4:	6013      	str	r3, [r2, #0]
 801a5e6:	1d7b      	adds	r3, r7, #5
 801a5e8:	33ff      	adds	r3, #255	@ 0xff
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	221f      	movs	r2, #31
 801a5ee:	4013      	ands	r3, r2
 801a5f0:	d104      	bne.n	801a5fc <USB_EPStartXfer+0x93c>
 801a5f2:	187b      	adds	r3, r7, r1
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	3b01      	subs	r3, #1
 801a5f8:	187a      	adds	r2, r7, r1
 801a5fa:	6013      	str	r3, [r2, #0]
 801a5fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5fe:	881b      	ldrh	r3, [r3, #0]
 801a600:	b29a      	uxth	r2, r3
 801a602:	23ec      	movs	r3, #236	@ 0xec
 801a604:	18fb      	adds	r3, r7, r3
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	b29b      	uxth	r3, r3
 801a60a:	029b      	lsls	r3, r3, #10
 801a60c:	b29b      	uxth	r3, r3
 801a60e:	4313      	orrs	r3, r2
 801a610:	b29b      	uxth	r3, r3
 801a612:	4a55      	ldr	r2, [pc, #340]	@ (801a768 <USB_EPStartXfer+0xaa8>)
 801a614:	4313      	orrs	r3, r2
 801a616:	b29a      	uxth	r2, r3
 801a618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a61a:	801a      	strh	r2, [r3, #0]
 801a61c:	e052      	b.n	801a6c4 <USB_EPStartXfer+0xa04>
 801a61e:	1d7b      	adds	r3, r7, #5
 801a620:	33ff      	adds	r3, #255	@ 0xff
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d108      	bne.n	801a63a <USB_EPStartXfer+0x97a>
 801a628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a62a:	881b      	ldrh	r3, [r3, #0]
 801a62c:	b29b      	uxth	r3, r3
 801a62e:	4a4e      	ldr	r2, [pc, #312]	@ (801a768 <USB_EPStartXfer+0xaa8>)
 801a630:	4313      	orrs	r3, r2
 801a632:	b29a      	uxth	r2, r3
 801a634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a636:	801a      	strh	r2, [r3, #0]
 801a638:	e044      	b.n	801a6c4 <USB_EPStartXfer+0xa04>
 801a63a:	1d7b      	adds	r3, r7, #5
 801a63c:	33ff      	adds	r3, #255	@ 0xff
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	085b      	lsrs	r3, r3, #1
 801a642:	21ec      	movs	r1, #236	@ 0xec
 801a644:	187a      	adds	r2, r7, r1
 801a646:	6013      	str	r3, [r2, #0]
 801a648:	1d7b      	adds	r3, r7, #5
 801a64a:	33ff      	adds	r3, #255	@ 0xff
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	2201      	movs	r2, #1
 801a650:	4013      	ands	r3, r2
 801a652:	d004      	beq.n	801a65e <USB_EPStartXfer+0x99e>
 801a654:	187b      	adds	r3, r7, r1
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	3301      	adds	r3, #1
 801a65a:	187a      	adds	r2, r7, r1
 801a65c:	6013      	str	r3, [r2, #0]
 801a65e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a660:	881b      	ldrh	r3, [r3, #0]
 801a662:	b29a      	uxth	r2, r3
 801a664:	23ec      	movs	r3, #236	@ 0xec
 801a666:	18fb      	adds	r3, r7, r3
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	b29b      	uxth	r3, r3
 801a66c:	029b      	lsls	r3, r3, #10
 801a66e:	b29b      	uxth	r3, r3
 801a670:	4313      	orrs	r3, r2
 801a672:	b29a      	uxth	r2, r3
 801a674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a676:	801a      	strh	r2, [r3, #0]
 801a678:	e024      	b.n	801a6c4 <USB_EPStartXfer+0xa04>
 801a67a:	683b      	ldr	r3, [r7, #0]
 801a67c:	785b      	ldrb	r3, [r3, #1]
 801a67e:	2b01      	cmp	r3, #1
 801a680:	d120      	bne.n	801a6c4 <USB_EPStartXfer+0xa04>
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	2184      	movs	r1, #132	@ 0x84
 801a686:	187a      	adds	r2, r7, r1
 801a688:	6013      	str	r3, [r2, #0]
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	2250      	movs	r2, #80	@ 0x50
 801a68e:	5a9b      	ldrh	r3, [r3, r2]
 801a690:	b29b      	uxth	r3, r3
 801a692:	001a      	movs	r2, r3
 801a694:	187b      	adds	r3, r7, r1
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	189b      	adds	r3, r3, r2
 801a69a:	187a      	adds	r2, r7, r1
 801a69c:	6013      	str	r3, [r2, #0]
 801a69e:	683b      	ldr	r3, [r7, #0]
 801a6a0:	781b      	ldrb	r3, [r3, #0]
 801a6a2:	00da      	lsls	r2, r3, #3
 801a6a4:	187b      	adds	r3, r7, r1
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	18d3      	adds	r3, r2, r3
 801a6aa:	4a30      	ldr	r2, [pc, #192]	@ (801a76c <USB_EPStartXfer+0xaac>)
 801a6ac:	4694      	mov	ip, r2
 801a6ae:	4463      	add	r3, ip
 801a6b0:	2180      	movs	r1, #128	@ 0x80
 801a6b2:	187a      	adds	r2, r7, r1
 801a6b4:	6013      	str	r3, [r2, #0]
 801a6b6:	1d7b      	adds	r3, r7, #5
 801a6b8:	33ff      	adds	r3, #255	@ 0xff
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	b29a      	uxth	r2, r3
 801a6be:	187b      	adds	r3, r7, r1
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a6c4:	2076      	movs	r0, #118	@ 0x76
 801a6c6:	183b      	adds	r3, r7, r0
 801a6c8:	683a      	ldr	r2, [r7, #0]
 801a6ca:	8912      	ldrh	r2, [r2, #8]
 801a6cc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a6ce:	683b      	ldr	r3, [r7, #0]
 801a6d0:	6959      	ldr	r1, [r3, #20]
 801a6d2:	1d7b      	adds	r3, r7, #5
 801a6d4:	33ff      	adds	r3, #255	@ 0xff
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	b29c      	uxth	r4, r3
 801a6da:	183b      	adds	r3, r7, r0
 801a6dc:	881a      	ldrh	r2, [r3, #0]
 801a6de:	6878      	ldr	r0, [r7, #4]
 801a6e0:	0023      	movs	r3, r4
 801a6e2:	f000 fd5f 	bl	801b1a4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a6e6:	687a      	ldr	r2, [r7, #4]
 801a6e8:	683b      	ldr	r3, [r7, #0]
 801a6ea:	781b      	ldrb	r3, [r3, #0]
 801a6ec:	009b      	lsls	r3, r3, #2
 801a6ee:	18d3      	adds	r3, r2, r3
 801a6f0:	881b      	ldrh	r3, [r3, #0]
 801a6f2:	b29a      	uxth	r2, r3
 801a6f4:	200a      	movs	r0, #10
 801a6f6:	183b      	adds	r3, r7, r0
 801a6f8:	491d      	ldr	r1, [pc, #116]	@ (801a770 <USB_EPStartXfer+0xab0>)
 801a6fa:	400a      	ands	r2, r1
 801a6fc:	801a      	strh	r2, [r3, #0]
 801a6fe:	183b      	adds	r3, r7, r0
 801a700:	183a      	adds	r2, r7, r0
 801a702:	8812      	ldrh	r2, [r2, #0]
 801a704:	2110      	movs	r1, #16
 801a706:	404a      	eors	r2, r1
 801a708:	801a      	strh	r2, [r3, #0]
 801a70a:	183b      	adds	r3, r7, r0
 801a70c:	183a      	adds	r2, r7, r0
 801a70e:	8812      	ldrh	r2, [r2, #0]
 801a710:	2120      	movs	r1, #32
 801a712:	404a      	eors	r2, r1
 801a714:	801a      	strh	r2, [r3, #0]
 801a716:	687a      	ldr	r2, [r7, #4]
 801a718:	683b      	ldr	r3, [r7, #0]
 801a71a:	781b      	ldrb	r3, [r3, #0]
 801a71c:	009b      	lsls	r3, r3, #2
 801a71e:	18d3      	adds	r3, r2, r3
 801a720:	183a      	adds	r2, r7, r0
 801a722:	8812      	ldrh	r2, [r2, #0]
 801a724:	4913      	ldr	r1, [pc, #76]	@ (801a774 <USB_EPStartXfer+0xab4>)
 801a726:	430a      	orrs	r2, r1
 801a728:	b292      	uxth	r2, r2
 801a72a:	801a      	strh	r2, [r3, #0]
 801a72c:	f000 fbf4 	bl	801af18 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801a730:	683b      	ldr	r3, [r7, #0]
 801a732:	7b1b      	ldrb	r3, [r3, #12]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d000      	beq.n	801a73a <USB_EPStartXfer+0xa7a>
 801a738:	e0a9      	b.n	801a88e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	699a      	ldr	r2, [r3, #24]
 801a73e:	683b      	ldr	r3, [r7, #0]
 801a740:	691b      	ldr	r3, [r3, #16]
 801a742:	429a      	cmp	r2, r3
 801a744:	d918      	bls.n	801a778 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801a746:	683b      	ldr	r3, [r7, #0]
 801a748:	691b      	ldr	r3, [r3, #16]
 801a74a:	1d7a      	adds	r2, r7, #5
 801a74c:	32ff      	adds	r2, #255	@ 0xff
 801a74e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801a750:	683b      	ldr	r3, [r7, #0]
 801a752:	699a      	ldr	r2, [r3, #24]
 801a754:	1d7b      	adds	r3, r7, #5
 801a756:	33ff      	adds	r3, #255	@ 0xff
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	1ad2      	subs	r2, r2, r3
 801a75c:	683b      	ldr	r3, [r7, #0]
 801a75e:	619a      	str	r2, [r3, #24]
 801a760:	e012      	b.n	801a788 <USB_EPStartXfer+0xac8>
 801a762:	46c0      	nop			@ (mov r8, r8)
 801a764:	00000406 	.word	0x00000406
 801a768:	ffff8000 	.word	0xffff8000
 801a76c:	00000402 	.word	0x00000402
 801a770:	ffff8fbf 	.word	0xffff8fbf
 801a774:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	699b      	ldr	r3, [r3, #24]
 801a77c:	1d7a      	adds	r2, r7, #5
 801a77e:	32ff      	adds	r2, #255	@ 0xff
 801a780:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801a782:	683b      	ldr	r3, [r7, #0]
 801a784:	2200      	movs	r2, #0
 801a786:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	2190      	movs	r1, #144	@ 0x90
 801a78c:	187a      	adds	r2, r7, r1
 801a78e:	6013      	str	r3, [r2, #0]
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	2250      	movs	r2, #80	@ 0x50
 801a794:	5a9b      	ldrh	r3, [r3, r2]
 801a796:	b29b      	uxth	r3, r3
 801a798:	001a      	movs	r2, r3
 801a79a:	187b      	adds	r3, r7, r1
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	189b      	adds	r3, r3, r2
 801a7a0:	187a      	adds	r2, r7, r1
 801a7a2:	6013      	str	r3, [r2, #0]
 801a7a4:	683b      	ldr	r3, [r7, #0]
 801a7a6:	781b      	ldrb	r3, [r3, #0]
 801a7a8:	00da      	lsls	r2, r3, #3
 801a7aa:	187b      	adds	r3, r7, r1
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	18d3      	adds	r3, r2, r3
 801a7b0:	4acf      	ldr	r2, [pc, #828]	@ (801aaf0 <USB_EPStartXfer+0xe30>)
 801a7b2:	4694      	mov	ip, r2
 801a7b4:	4463      	add	r3, ip
 801a7b6:	218c      	movs	r1, #140	@ 0x8c
 801a7b8:	187a      	adds	r2, r7, r1
 801a7ba:	6013      	str	r3, [r2, #0]
 801a7bc:	187b      	adds	r3, r7, r1
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	881b      	ldrh	r3, [r3, #0]
 801a7c2:	b29b      	uxth	r3, r3
 801a7c4:	059b      	lsls	r3, r3, #22
 801a7c6:	0d9b      	lsrs	r3, r3, #22
 801a7c8:	b29a      	uxth	r2, r3
 801a7ca:	187b      	adds	r3, r7, r1
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	801a      	strh	r2, [r3, #0]
 801a7d0:	1d7b      	adds	r3, r7, #5
 801a7d2:	33ff      	adds	r3, #255	@ 0xff
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	2b3e      	cmp	r3, #62	@ 0x3e
 801a7d8:	d925      	bls.n	801a826 <USB_EPStartXfer+0xb66>
 801a7da:	1d7b      	adds	r3, r7, #5
 801a7dc:	33ff      	adds	r3, #255	@ 0xff
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	095b      	lsrs	r3, r3, #5
 801a7e2:	21e8      	movs	r1, #232	@ 0xe8
 801a7e4:	187a      	adds	r2, r7, r1
 801a7e6:	6013      	str	r3, [r2, #0]
 801a7e8:	1d7b      	adds	r3, r7, #5
 801a7ea:	33ff      	adds	r3, #255	@ 0xff
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	221f      	movs	r2, #31
 801a7f0:	4013      	ands	r3, r2
 801a7f2:	d104      	bne.n	801a7fe <USB_EPStartXfer+0xb3e>
 801a7f4:	187b      	adds	r3, r7, r1
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	3b01      	subs	r3, #1
 801a7fa:	187a      	adds	r2, r7, r1
 801a7fc:	6013      	str	r3, [r2, #0]
 801a7fe:	218c      	movs	r1, #140	@ 0x8c
 801a800:	187b      	adds	r3, r7, r1
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	881b      	ldrh	r3, [r3, #0]
 801a806:	b29a      	uxth	r2, r3
 801a808:	23e8      	movs	r3, #232	@ 0xe8
 801a80a:	18fb      	adds	r3, r7, r3
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	b29b      	uxth	r3, r3
 801a810:	029b      	lsls	r3, r3, #10
 801a812:	b29b      	uxth	r3, r3
 801a814:	4313      	orrs	r3, r2
 801a816:	b29b      	uxth	r3, r3
 801a818:	4ab6      	ldr	r2, [pc, #728]	@ (801aaf4 <USB_EPStartXfer+0xe34>)
 801a81a:	4313      	orrs	r3, r2
 801a81c:	b29a      	uxth	r2, r3
 801a81e:	187b      	adds	r3, r7, r1
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	801a      	strh	r2, [r3, #0]
 801a824:	e353      	b.n	801aece <USB_EPStartXfer+0x120e>
 801a826:	1d7b      	adds	r3, r7, #5
 801a828:	33ff      	adds	r3, #255	@ 0xff
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d10b      	bne.n	801a848 <USB_EPStartXfer+0xb88>
 801a830:	218c      	movs	r1, #140	@ 0x8c
 801a832:	187b      	adds	r3, r7, r1
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	881b      	ldrh	r3, [r3, #0]
 801a838:	b29b      	uxth	r3, r3
 801a83a:	4aae      	ldr	r2, [pc, #696]	@ (801aaf4 <USB_EPStartXfer+0xe34>)
 801a83c:	4313      	orrs	r3, r2
 801a83e:	b29a      	uxth	r2, r3
 801a840:	187b      	adds	r3, r7, r1
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	801a      	strh	r2, [r3, #0]
 801a846:	e342      	b.n	801aece <USB_EPStartXfer+0x120e>
 801a848:	1d7b      	adds	r3, r7, #5
 801a84a:	33ff      	adds	r3, #255	@ 0xff
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	085b      	lsrs	r3, r3, #1
 801a850:	21e8      	movs	r1, #232	@ 0xe8
 801a852:	187a      	adds	r2, r7, r1
 801a854:	6013      	str	r3, [r2, #0]
 801a856:	1d7b      	adds	r3, r7, #5
 801a858:	33ff      	adds	r3, #255	@ 0xff
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	2201      	movs	r2, #1
 801a85e:	4013      	ands	r3, r2
 801a860:	d004      	beq.n	801a86c <USB_EPStartXfer+0xbac>
 801a862:	187b      	adds	r3, r7, r1
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	3301      	adds	r3, #1
 801a868:	187a      	adds	r2, r7, r1
 801a86a:	6013      	str	r3, [r2, #0]
 801a86c:	218c      	movs	r1, #140	@ 0x8c
 801a86e:	187b      	adds	r3, r7, r1
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	881b      	ldrh	r3, [r3, #0]
 801a874:	b29a      	uxth	r2, r3
 801a876:	23e8      	movs	r3, #232	@ 0xe8
 801a878:	18fb      	adds	r3, r7, r3
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	b29b      	uxth	r3, r3
 801a87e:	029b      	lsls	r3, r3, #10
 801a880:	b29b      	uxth	r3, r3
 801a882:	4313      	orrs	r3, r2
 801a884:	b29a      	uxth	r2, r3
 801a886:	187b      	adds	r3, r7, r1
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	801a      	strh	r2, [r3, #0]
 801a88c:	e31f      	b.n	801aece <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a88e:	683b      	ldr	r3, [r7, #0]
 801a890:	78db      	ldrb	r3, [r3, #3]
 801a892:	2b02      	cmp	r3, #2
 801a894:	d000      	beq.n	801a898 <USB_EPStartXfer+0xbd8>
 801a896:	e191      	b.n	801abbc <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a898:	683b      	ldr	r3, [r7, #0]
 801a89a:	785b      	ldrb	r3, [r3, #1]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d000      	beq.n	801a8a2 <USB_EPStartXfer+0xbe2>
 801a8a0:	e07c      	b.n	801a99c <USB_EPStartXfer+0xcdc>
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	21ac      	movs	r1, #172	@ 0xac
 801a8a6:	187a      	adds	r2, r7, r1
 801a8a8:	6013      	str	r3, [r2, #0]
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	2250      	movs	r2, #80	@ 0x50
 801a8ae:	5a9b      	ldrh	r3, [r3, r2]
 801a8b0:	b29b      	uxth	r3, r3
 801a8b2:	001a      	movs	r2, r3
 801a8b4:	187b      	adds	r3, r7, r1
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	189b      	adds	r3, r3, r2
 801a8ba:	187a      	adds	r2, r7, r1
 801a8bc:	6013      	str	r3, [r2, #0]
 801a8be:	683b      	ldr	r3, [r7, #0]
 801a8c0:	781b      	ldrb	r3, [r3, #0]
 801a8c2:	00da      	lsls	r2, r3, #3
 801a8c4:	187b      	adds	r3, r7, r1
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	18d3      	adds	r3, r2, r3
 801a8ca:	4a8b      	ldr	r2, [pc, #556]	@ (801aaf8 <USB_EPStartXfer+0xe38>)
 801a8cc:	4694      	mov	ip, r2
 801a8ce:	4463      	add	r3, ip
 801a8d0:	21a8      	movs	r1, #168	@ 0xa8
 801a8d2:	187a      	adds	r2, r7, r1
 801a8d4:	6013      	str	r3, [r2, #0]
 801a8d6:	187b      	adds	r3, r7, r1
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	881b      	ldrh	r3, [r3, #0]
 801a8dc:	b29b      	uxth	r3, r3
 801a8de:	059b      	lsls	r3, r3, #22
 801a8e0:	0d9b      	lsrs	r3, r3, #22
 801a8e2:	b29a      	uxth	r2, r3
 801a8e4:	187b      	adds	r3, r7, r1
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	801a      	strh	r2, [r3, #0]
 801a8ea:	683b      	ldr	r3, [r7, #0]
 801a8ec:	691b      	ldr	r3, [r3, #16]
 801a8ee:	2b3e      	cmp	r3, #62	@ 0x3e
 801a8f0:	d923      	bls.n	801a93a <USB_EPStartXfer+0xc7a>
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	691b      	ldr	r3, [r3, #16]
 801a8f6:	095b      	lsrs	r3, r3, #5
 801a8f8:	21e4      	movs	r1, #228	@ 0xe4
 801a8fa:	187a      	adds	r2, r7, r1
 801a8fc:	6013      	str	r3, [r2, #0]
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	691b      	ldr	r3, [r3, #16]
 801a902:	221f      	movs	r2, #31
 801a904:	4013      	ands	r3, r2
 801a906:	d104      	bne.n	801a912 <USB_EPStartXfer+0xc52>
 801a908:	187b      	adds	r3, r7, r1
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	3b01      	subs	r3, #1
 801a90e:	187a      	adds	r2, r7, r1
 801a910:	6013      	str	r3, [r2, #0]
 801a912:	21a8      	movs	r1, #168	@ 0xa8
 801a914:	187b      	adds	r3, r7, r1
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	881b      	ldrh	r3, [r3, #0]
 801a91a:	b29a      	uxth	r2, r3
 801a91c:	23e4      	movs	r3, #228	@ 0xe4
 801a91e:	18fb      	adds	r3, r7, r3
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	b29b      	uxth	r3, r3
 801a924:	029b      	lsls	r3, r3, #10
 801a926:	b29b      	uxth	r3, r3
 801a928:	4313      	orrs	r3, r2
 801a92a:	b29b      	uxth	r3, r3
 801a92c:	4a71      	ldr	r2, [pc, #452]	@ (801aaf4 <USB_EPStartXfer+0xe34>)
 801a92e:	4313      	orrs	r3, r2
 801a930:	b29a      	uxth	r2, r3
 801a932:	187b      	adds	r3, r7, r1
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	801a      	strh	r2, [r3, #0]
 801a938:	e054      	b.n	801a9e4 <USB_EPStartXfer+0xd24>
 801a93a:	683b      	ldr	r3, [r7, #0]
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d10b      	bne.n	801a95a <USB_EPStartXfer+0xc9a>
 801a942:	21a8      	movs	r1, #168	@ 0xa8
 801a944:	187b      	adds	r3, r7, r1
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	881b      	ldrh	r3, [r3, #0]
 801a94a:	b29b      	uxth	r3, r3
 801a94c:	4a69      	ldr	r2, [pc, #420]	@ (801aaf4 <USB_EPStartXfer+0xe34>)
 801a94e:	4313      	orrs	r3, r2
 801a950:	b29a      	uxth	r2, r3
 801a952:	187b      	adds	r3, r7, r1
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	801a      	strh	r2, [r3, #0]
 801a958:	e044      	b.n	801a9e4 <USB_EPStartXfer+0xd24>
 801a95a:	683b      	ldr	r3, [r7, #0]
 801a95c:	691b      	ldr	r3, [r3, #16]
 801a95e:	085b      	lsrs	r3, r3, #1
 801a960:	21e4      	movs	r1, #228	@ 0xe4
 801a962:	187a      	adds	r2, r7, r1
 801a964:	6013      	str	r3, [r2, #0]
 801a966:	683b      	ldr	r3, [r7, #0]
 801a968:	691b      	ldr	r3, [r3, #16]
 801a96a:	2201      	movs	r2, #1
 801a96c:	4013      	ands	r3, r2
 801a96e:	d004      	beq.n	801a97a <USB_EPStartXfer+0xcba>
 801a970:	187b      	adds	r3, r7, r1
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	3301      	adds	r3, #1
 801a976:	187a      	adds	r2, r7, r1
 801a978:	6013      	str	r3, [r2, #0]
 801a97a:	21a8      	movs	r1, #168	@ 0xa8
 801a97c:	187b      	adds	r3, r7, r1
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	881b      	ldrh	r3, [r3, #0]
 801a982:	b29a      	uxth	r2, r3
 801a984:	23e4      	movs	r3, #228	@ 0xe4
 801a986:	18fb      	adds	r3, r7, r3
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	b29b      	uxth	r3, r3
 801a98c:	029b      	lsls	r3, r3, #10
 801a98e:	b29b      	uxth	r3, r3
 801a990:	4313      	orrs	r3, r2
 801a992:	b29a      	uxth	r2, r3
 801a994:	187b      	adds	r3, r7, r1
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	801a      	strh	r2, [r3, #0]
 801a99a:	e023      	b.n	801a9e4 <USB_EPStartXfer+0xd24>
 801a99c:	683b      	ldr	r3, [r7, #0]
 801a99e:	785b      	ldrb	r3, [r3, #1]
 801a9a0:	2b01      	cmp	r3, #1
 801a9a2:	d11f      	bne.n	801a9e4 <USB_EPStartXfer+0xd24>
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	21b4      	movs	r1, #180	@ 0xb4
 801a9a8:	187a      	adds	r2, r7, r1
 801a9aa:	6013      	str	r3, [r2, #0]
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	2250      	movs	r2, #80	@ 0x50
 801a9b0:	5a9b      	ldrh	r3, [r3, r2]
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	001a      	movs	r2, r3
 801a9b6:	187b      	adds	r3, r7, r1
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	189b      	adds	r3, r3, r2
 801a9bc:	187a      	adds	r2, r7, r1
 801a9be:	6013      	str	r3, [r2, #0]
 801a9c0:	683b      	ldr	r3, [r7, #0]
 801a9c2:	781b      	ldrb	r3, [r3, #0]
 801a9c4:	00da      	lsls	r2, r3, #3
 801a9c6:	187b      	adds	r3, r7, r1
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	18d3      	adds	r3, r2, r3
 801a9cc:	4a4a      	ldr	r2, [pc, #296]	@ (801aaf8 <USB_EPStartXfer+0xe38>)
 801a9ce:	4694      	mov	ip, r2
 801a9d0:	4463      	add	r3, ip
 801a9d2:	21b0      	movs	r1, #176	@ 0xb0
 801a9d4:	187a      	adds	r2, r7, r1
 801a9d6:	6013      	str	r3, [r2, #0]
 801a9d8:	683b      	ldr	r3, [r7, #0]
 801a9da:	691b      	ldr	r3, [r3, #16]
 801a9dc:	b29a      	uxth	r2, r3
 801a9de:	187b      	adds	r3, r7, r1
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	801a      	strh	r2, [r3, #0]
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	22a4      	movs	r2, #164	@ 0xa4
 801a9e8:	18ba      	adds	r2, r7, r2
 801a9ea:	6013      	str	r3, [r2, #0]
 801a9ec:	683b      	ldr	r3, [r7, #0]
 801a9ee:	785b      	ldrb	r3, [r3, #1]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d000      	beq.n	801a9f6 <USB_EPStartXfer+0xd36>
 801a9f4:	e082      	b.n	801aafc <USB_EPStartXfer+0xe3c>
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	219c      	movs	r1, #156	@ 0x9c
 801a9fa:	187a      	adds	r2, r7, r1
 801a9fc:	6013      	str	r3, [r2, #0]
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	2250      	movs	r2, #80	@ 0x50
 801aa02:	5a9b      	ldrh	r3, [r3, r2]
 801aa04:	b29b      	uxth	r3, r3
 801aa06:	001a      	movs	r2, r3
 801aa08:	187b      	adds	r3, r7, r1
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	189b      	adds	r3, r3, r2
 801aa0e:	187a      	adds	r2, r7, r1
 801aa10:	6013      	str	r3, [r2, #0]
 801aa12:	683b      	ldr	r3, [r7, #0]
 801aa14:	781b      	ldrb	r3, [r3, #0]
 801aa16:	00da      	lsls	r2, r3, #3
 801aa18:	187b      	adds	r3, r7, r1
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	18d3      	adds	r3, r2, r3
 801aa1e:	4a34      	ldr	r2, [pc, #208]	@ (801aaf0 <USB_EPStartXfer+0xe30>)
 801aa20:	4694      	mov	ip, r2
 801aa22:	4463      	add	r3, ip
 801aa24:	2198      	movs	r1, #152	@ 0x98
 801aa26:	187a      	adds	r2, r7, r1
 801aa28:	6013      	str	r3, [r2, #0]
 801aa2a:	187b      	adds	r3, r7, r1
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	881b      	ldrh	r3, [r3, #0]
 801aa30:	b29b      	uxth	r3, r3
 801aa32:	059b      	lsls	r3, r3, #22
 801aa34:	0d9b      	lsrs	r3, r3, #22
 801aa36:	b29a      	uxth	r2, r3
 801aa38:	187b      	adds	r3, r7, r1
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	801a      	strh	r2, [r3, #0]
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	691b      	ldr	r3, [r3, #16]
 801aa42:	2b3e      	cmp	r3, #62	@ 0x3e
 801aa44:	d923      	bls.n	801aa8e <USB_EPStartXfer+0xdce>
 801aa46:	683b      	ldr	r3, [r7, #0]
 801aa48:	691b      	ldr	r3, [r3, #16]
 801aa4a:	095b      	lsrs	r3, r3, #5
 801aa4c:	21e0      	movs	r1, #224	@ 0xe0
 801aa4e:	187a      	adds	r2, r7, r1
 801aa50:	6013      	str	r3, [r2, #0]
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	691b      	ldr	r3, [r3, #16]
 801aa56:	221f      	movs	r2, #31
 801aa58:	4013      	ands	r3, r2
 801aa5a:	d104      	bne.n	801aa66 <USB_EPStartXfer+0xda6>
 801aa5c:	187b      	adds	r3, r7, r1
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	3b01      	subs	r3, #1
 801aa62:	187a      	adds	r2, r7, r1
 801aa64:	6013      	str	r3, [r2, #0]
 801aa66:	2198      	movs	r1, #152	@ 0x98
 801aa68:	187b      	adds	r3, r7, r1
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	881b      	ldrh	r3, [r3, #0]
 801aa6e:	b29a      	uxth	r2, r3
 801aa70:	23e0      	movs	r3, #224	@ 0xe0
 801aa72:	18fb      	adds	r3, r7, r3
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	b29b      	uxth	r3, r3
 801aa78:	029b      	lsls	r3, r3, #10
 801aa7a:	b29b      	uxth	r3, r3
 801aa7c:	4313      	orrs	r3, r2
 801aa7e:	b29b      	uxth	r3, r3
 801aa80:	4a1c      	ldr	r2, [pc, #112]	@ (801aaf4 <USB_EPStartXfer+0xe34>)
 801aa82:	4313      	orrs	r3, r2
 801aa84:	b29a      	uxth	r2, r3
 801aa86:	187b      	adds	r3, r7, r1
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	801a      	strh	r2, [r3, #0]
 801aa8c:	e057      	b.n	801ab3e <USB_EPStartXfer+0xe7e>
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	691b      	ldr	r3, [r3, #16]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d10b      	bne.n	801aaae <USB_EPStartXfer+0xdee>
 801aa96:	2198      	movs	r1, #152	@ 0x98
 801aa98:	187b      	adds	r3, r7, r1
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	881b      	ldrh	r3, [r3, #0]
 801aa9e:	b29b      	uxth	r3, r3
 801aaa0:	4a14      	ldr	r2, [pc, #80]	@ (801aaf4 <USB_EPStartXfer+0xe34>)
 801aaa2:	4313      	orrs	r3, r2
 801aaa4:	b29a      	uxth	r2, r3
 801aaa6:	187b      	adds	r3, r7, r1
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	801a      	strh	r2, [r3, #0]
 801aaac:	e047      	b.n	801ab3e <USB_EPStartXfer+0xe7e>
 801aaae:	683b      	ldr	r3, [r7, #0]
 801aab0:	691b      	ldr	r3, [r3, #16]
 801aab2:	085b      	lsrs	r3, r3, #1
 801aab4:	21e0      	movs	r1, #224	@ 0xe0
 801aab6:	187a      	adds	r2, r7, r1
 801aab8:	6013      	str	r3, [r2, #0]
 801aaba:	683b      	ldr	r3, [r7, #0]
 801aabc:	691b      	ldr	r3, [r3, #16]
 801aabe:	2201      	movs	r2, #1
 801aac0:	4013      	ands	r3, r2
 801aac2:	d004      	beq.n	801aace <USB_EPStartXfer+0xe0e>
 801aac4:	187b      	adds	r3, r7, r1
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	3301      	adds	r3, #1
 801aaca:	187a      	adds	r2, r7, r1
 801aacc:	6013      	str	r3, [r2, #0]
 801aace:	2198      	movs	r1, #152	@ 0x98
 801aad0:	187b      	adds	r3, r7, r1
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	881b      	ldrh	r3, [r3, #0]
 801aad6:	b29a      	uxth	r2, r3
 801aad8:	23e0      	movs	r3, #224	@ 0xe0
 801aada:	18fb      	adds	r3, r7, r3
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	b29b      	uxth	r3, r3
 801aae0:	029b      	lsls	r3, r3, #10
 801aae2:	b29b      	uxth	r3, r3
 801aae4:	4313      	orrs	r3, r2
 801aae6:	b29a      	uxth	r2, r3
 801aae8:	187b      	adds	r3, r7, r1
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	801a      	strh	r2, [r3, #0]
 801aaee:	e026      	b.n	801ab3e <USB_EPStartXfer+0xe7e>
 801aaf0:	00000406 	.word	0x00000406
 801aaf4:	ffff8000 	.word	0xffff8000
 801aaf8:	00000402 	.word	0x00000402
 801aafc:	683b      	ldr	r3, [r7, #0]
 801aafe:	785b      	ldrb	r3, [r3, #1]
 801ab00:	2b01      	cmp	r3, #1
 801ab02:	d11c      	bne.n	801ab3e <USB_EPStartXfer+0xe7e>
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	2250      	movs	r2, #80	@ 0x50
 801ab08:	5a9b      	ldrh	r3, [r3, r2]
 801ab0a:	b29b      	uxth	r3, r3
 801ab0c:	001a      	movs	r2, r3
 801ab0e:	21a4      	movs	r1, #164	@ 0xa4
 801ab10:	187b      	adds	r3, r7, r1
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	189b      	adds	r3, r3, r2
 801ab16:	187a      	adds	r2, r7, r1
 801ab18:	6013      	str	r3, [r2, #0]
 801ab1a:	683b      	ldr	r3, [r7, #0]
 801ab1c:	781b      	ldrb	r3, [r3, #0]
 801ab1e:	00da      	lsls	r2, r3, #3
 801ab20:	187b      	adds	r3, r7, r1
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	18d3      	adds	r3, r2, r3
 801ab26:	4ad2      	ldr	r2, [pc, #840]	@ (801ae70 <USB_EPStartXfer+0x11b0>)
 801ab28:	4694      	mov	ip, r2
 801ab2a:	4463      	add	r3, ip
 801ab2c:	21a0      	movs	r1, #160	@ 0xa0
 801ab2e:	187a      	adds	r2, r7, r1
 801ab30:	6013      	str	r3, [r2, #0]
 801ab32:	683b      	ldr	r3, [r7, #0]
 801ab34:	691b      	ldr	r3, [r3, #16]
 801ab36:	b29a      	uxth	r2, r3
 801ab38:	187b      	adds	r3, r7, r1
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801ab3e:	683b      	ldr	r3, [r7, #0]
 801ab40:	69db      	ldr	r3, [r3, #28]
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d100      	bne.n	801ab48 <USB_EPStartXfer+0xe88>
 801ab46:	e1c2      	b.n	801aece <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801ab48:	687a      	ldr	r2, [r7, #4]
 801ab4a:	683b      	ldr	r3, [r7, #0]
 801ab4c:	781b      	ldrb	r3, [r3, #0]
 801ab4e:	009b      	lsls	r3, r3, #2
 801ab50:	18d2      	adds	r2, r2, r3
 801ab52:	2196      	movs	r1, #150	@ 0x96
 801ab54:	187b      	adds	r3, r7, r1
 801ab56:	8812      	ldrh	r2, [r2, #0]
 801ab58:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ab5a:	187b      	adds	r3, r7, r1
 801ab5c:	881a      	ldrh	r2, [r3, #0]
 801ab5e:	2380      	movs	r3, #128	@ 0x80
 801ab60:	01db      	lsls	r3, r3, #7
 801ab62:	4013      	ands	r3, r2
 801ab64:	d004      	beq.n	801ab70 <USB_EPStartXfer+0xeb0>
 801ab66:	187b      	adds	r3, r7, r1
 801ab68:	881b      	ldrh	r3, [r3, #0]
 801ab6a:	2240      	movs	r2, #64	@ 0x40
 801ab6c:	4013      	ands	r3, r2
 801ab6e:	d10d      	bne.n	801ab8c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ab70:	2196      	movs	r1, #150	@ 0x96
 801ab72:	187b      	adds	r3, r7, r1
 801ab74:	881a      	ldrh	r2, [r3, #0]
 801ab76:	2380      	movs	r3, #128	@ 0x80
 801ab78:	01db      	lsls	r3, r3, #7
 801ab7a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ab7c:	d000      	beq.n	801ab80 <USB_EPStartXfer+0xec0>
 801ab7e:	e1a6      	b.n	801aece <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ab80:	187b      	adds	r3, r7, r1
 801ab82:	881b      	ldrh	r3, [r3, #0]
 801ab84:	2240      	movs	r2, #64	@ 0x40
 801ab86:	4013      	ands	r3, r2
 801ab88:	d000      	beq.n	801ab8c <USB_EPStartXfer+0xecc>
 801ab8a:	e1a0      	b.n	801aece <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801ab8c:	687a      	ldr	r2, [r7, #4]
 801ab8e:	683b      	ldr	r3, [r7, #0]
 801ab90:	781b      	ldrb	r3, [r3, #0]
 801ab92:	009b      	lsls	r3, r3, #2
 801ab94:	18d3      	adds	r3, r2, r3
 801ab96:	881b      	ldrh	r3, [r3, #0]
 801ab98:	b29a      	uxth	r2, r3
 801ab9a:	2094      	movs	r0, #148	@ 0x94
 801ab9c:	183b      	adds	r3, r7, r0
 801ab9e:	49b5      	ldr	r1, [pc, #724]	@ (801ae74 <USB_EPStartXfer+0x11b4>)
 801aba0:	400a      	ands	r2, r1
 801aba2:	801a      	strh	r2, [r3, #0]
 801aba4:	687a      	ldr	r2, [r7, #4]
 801aba6:	683b      	ldr	r3, [r7, #0]
 801aba8:	781b      	ldrb	r3, [r3, #0]
 801abaa:	009b      	lsls	r3, r3, #2
 801abac:	18d3      	adds	r3, r2, r3
 801abae:	183a      	adds	r2, r7, r0
 801abb0:	8812      	ldrh	r2, [r2, #0]
 801abb2:	49b1      	ldr	r1, [pc, #708]	@ (801ae78 <USB_EPStartXfer+0x11b8>)
 801abb4:	430a      	orrs	r2, r1
 801abb6:	b292      	uxth	r2, r2
 801abb8:	801a      	strh	r2, [r3, #0]
 801abba:	e188      	b.n	801aece <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801abbc:	683b      	ldr	r3, [r7, #0]
 801abbe:	78db      	ldrb	r3, [r3, #3]
 801abc0:	2b01      	cmp	r3, #1
 801abc2:	d000      	beq.n	801abc6 <USB_EPStartXfer+0xf06>
 801abc4:	e181      	b.n	801aeca <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801abc6:	683b      	ldr	r3, [r7, #0]
 801abc8:	699a      	ldr	r2, [r3, #24]
 801abca:	683b      	ldr	r3, [r7, #0]
 801abcc:	691b      	ldr	r3, [r3, #16]
 801abce:	429a      	cmp	r2, r3
 801abd0:	d90d      	bls.n	801abee <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801abd2:	683b      	ldr	r3, [r7, #0]
 801abd4:	691b      	ldr	r3, [r3, #16]
 801abd6:	1d7a      	adds	r2, r7, #5
 801abd8:	32ff      	adds	r2, #255	@ 0xff
 801abda:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801abdc:	683b      	ldr	r3, [r7, #0]
 801abde:	699a      	ldr	r2, [r3, #24]
 801abe0:	1d7b      	adds	r3, r7, #5
 801abe2:	33ff      	adds	r3, #255	@ 0xff
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	1ad2      	subs	r2, r2, r3
 801abe8:	683b      	ldr	r3, [r7, #0]
 801abea:	619a      	str	r2, [r3, #24]
 801abec:	e007      	b.n	801abfe <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801abee:	683b      	ldr	r3, [r7, #0]
 801abf0:	699b      	ldr	r3, [r3, #24]
 801abf2:	1d7a      	adds	r2, r7, #5
 801abf4:	32ff      	adds	r2, #255	@ 0xff
 801abf6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801abf8:	683b      	ldr	r3, [r7, #0]
 801abfa:	2200      	movs	r2, #0
 801abfc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801abfe:	683b      	ldr	r3, [r7, #0]
 801ac00:	785b      	ldrb	r3, [r3, #1]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d000      	beq.n	801ac08 <USB_EPStartXfer+0xf48>
 801ac06:	e082      	b.n	801ad0e <USB_EPStartXfer+0x104e>
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	21cc      	movs	r1, #204	@ 0xcc
 801ac0c:	187a      	adds	r2, r7, r1
 801ac0e:	6013      	str	r3, [r2, #0]
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	2250      	movs	r2, #80	@ 0x50
 801ac14:	5a9b      	ldrh	r3, [r3, r2]
 801ac16:	b29b      	uxth	r3, r3
 801ac18:	001a      	movs	r2, r3
 801ac1a:	187b      	adds	r3, r7, r1
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	189b      	adds	r3, r3, r2
 801ac20:	187a      	adds	r2, r7, r1
 801ac22:	6013      	str	r3, [r2, #0]
 801ac24:	683b      	ldr	r3, [r7, #0]
 801ac26:	781b      	ldrb	r3, [r3, #0]
 801ac28:	00da      	lsls	r2, r3, #3
 801ac2a:	187b      	adds	r3, r7, r1
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	18d3      	adds	r3, r2, r3
 801ac30:	4a92      	ldr	r2, [pc, #584]	@ (801ae7c <USB_EPStartXfer+0x11bc>)
 801ac32:	4694      	mov	ip, r2
 801ac34:	4463      	add	r3, ip
 801ac36:	21c8      	movs	r1, #200	@ 0xc8
 801ac38:	187a      	adds	r2, r7, r1
 801ac3a:	6013      	str	r3, [r2, #0]
 801ac3c:	187b      	adds	r3, r7, r1
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	881b      	ldrh	r3, [r3, #0]
 801ac42:	b29b      	uxth	r3, r3
 801ac44:	059b      	lsls	r3, r3, #22
 801ac46:	0d9b      	lsrs	r3, r3, #22
 801ac48:	b29a      	uxth	r2, r3
 801ac4a:	187b      	adds	r3, r7, r1
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	801a      	strh	r2, [r3, #0]
 801ac50:	1d7b      	adds	r3, r7, #5
 801ac52:	33ff      	adds	r3, #255	@ 0xff
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	2b3e      	cmp	r3, #62	@ 0x3e
 801ac58:	d925      	bls.n	801aca6 <USB_EPStartXfer+0xfe6>
 801ac5a:	1d7b      	adds	r3, r7, #5
 801ac5c:	33ff      	adds	r3, #255	@ 0xff
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	095b      	lsrs	r3, r3, #5
 801ac62:	21dc      	movs	r1, #220	@ 0xdc
 801ac64:	187a      	adds	r2, r7, r1
 801ac66:	6013      	str	r3, [r2, #0]
 801ac68:	1d7b      	adds	r3, r7, #5
 801ac6a:	33ff      	adds	r3, #255	@ 0xff
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	221f      	movs	r2, #31
 801ac70:	4013      	ands	r3, r2
 801ac72:	d104      	bne.n	801ac7e <USB_EPStartXfer+0xfbe>
 801ac74:	187b      	adds	r3, r7, r1
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	3b01      	subs	r3, #1
 801ac7a:	187a      	adds	r2, r7, r1
 801ac7c:	6013      	str	r3, [r2, #0]
 801ac7e:	21c8      	movs	r1, #200	@ 0xc8
 801ac80:	187b      	adds	r3, r7, r1
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	881b      	ldrh	r3, [r3, #0]
 801ac86:	b29a      	uxth	r2, r3
 801ac88:	23dc      	movs	r3, #220	@ 0xdc
 801ac8a:	18fb      	adds	r3, r7, r3
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	b29b      	uxth	r3, r3
 801ac90:	029b      	lsls	r3, r3, #10
 801ac92:	b29b      	uxth	r3, r3
 801ac94:	4313      	orrs	r3, r2
 801ac96:	b29b      	uxth	r3, r3
 801ac98:	4a79      	ldr	r2, [pc, #484]	@ (801ae80 <USB_EPStartXfer+0x11c0>)
 801ac9a:	4313      	orrs	r3, r2
 801ac9c:	b29a      	uxth	r2, r3
 801ac9e:	187b      	adds	r3, r7, r1
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	801a      	strh	r2, [r3, #0]
 801aca4:	e058      	b.n	801ad58 <USB_EPStartXfer+0x1098>
 801aca6:	1d7b      	adds	r3, r7, #5
 801aca8:	33ff      	adds	r3, #255	@ 0xff
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d10b      	bne.n	801acc8 <USB_EPStartXfer+0x1008>
 801acb0:	21c8      	movs	r1, #200	@ 0xc8
 801acb2:	187b      	adds	r3, r7, r1
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	881b      	ldrh	r3, [r3, #0]
 801acb8:	b29b      	uxth	r3, r3
 801acba:	4a71      	ldr	r2, [pc, #452]	@ (801ae80 <USB_EPStartXfer+0x11c0>)
 801acbc:	4313      	orrs	r3, r2
 801acbe:	b29a      	uxth	r2, r3
 801acc0:	187b      	adds	r3, r7, r1
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	801a      	strh	r2, [r3, #0]
 801acc6:	e047      	b.n	801ad58 <USB_EPStartXfer+0x1098>
 801acc8:	1d7b      	adds	r3, r7, #5
 801acca:	33ff      	adds	r3, #255	@ 0xff
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	085b      	lsrs	r3, r3, #1
 801acd0:	21dc      	movs	r1, #220	@ 0xdc
 801acd2:	187a      	adds	r2, r7, r1
 801acd4:	6013      	str	r3, [r2, #0]
 801acd6:	1d7b      	adds	r3, r7, #5
 801acd8:	33ff      	adds	r3, #255	@ 0xff
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	2201      	movs	r2, #1
 801acde:	4013      	ands	r3, r2
 801ace0:	d004      	beq.n	801acec <USB_EPStartXfer+0x102c>
 801ace2:	187b      	adds	r3, r7, r1
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	3301      	adds	r3, #1
 801ace8:	187a      	adds	r2, r7, r1
 801acea:	6013      	str	r3, [r2, #0]
 801acec:	21c8      	movs	r1, #200	@ 0xc8
 801acee:	187b      	adds	r3, r7, r1
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	881b      	ldrh	r3, [r3, #0]
 801acf4:	b29a      	uxth	r2, r3
 801acf6:	23dc      	movs	r3, #220	@ 0xdc
 801acf8:	18fb      	adds	r3, r7, r3
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	b29b      	uxth	r3, r3
 801acfe:	029b      	lsls	r3, r3, #10
 801ad00:	b29b      	uxth	r3, r3
 801ad02:	4313      	orrs	r3, r2
 801ad04:	b29a      	uxth	r2, r3
 801ad06:	187b      	adds	r3, r7, r1
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	801a      	strh	r2, [r3, #0]
 801ad0c:	e024      	b.n	801ad58 <USB_EPStartXfer+0x1098>
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	785b      	ldrb	r3, [r3, #1]
 801ad12:	2b01      	cmp	r3, #1
 801ad14:	d120      	bne.n	801ad58 <USB_EPStartXfer+0x1098>
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	21d4      	movs	r1, #212	@ 0xd4
 801ad1a:	187a      	adds	r2, r7, r1
 801ad1c:	6013      	str	r3, [r2, #0]
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	2250      	movs	r2, #80	@ 0x50
 801ad22:	5a9b      	ldrh	r3, [r3, r2]
 801ad24:	b29b      	uxth	r3, r3
 801ad26:	001a      	movs	r2, r3
 801ad28:	187b      	adds	r3, r7, r1
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	189b      	adds	r3, r3, r2
 801ad2e:	187a      	adds	r2, r7, r1
 801ad30:	6013      	str	r3, [r2, #0]
 801ad32:	683b      	ldr	r3, [r7, #0]
 801ad34:	781b      	ldrb	r3, [r3, #0]
 801ad36:	00da      	lsls	r2, r3, #3
 801ad38:	187b      	adds	r3, r7, r1
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	18d3      	adds	r3, r2, r3
 801ad3e:	4a4f      	ldr	r2, [pc, #316]	@ (801ae7c <USB_EPStartXfer+0x11bc>)
 801ad40:	4694      	mov	ip, r2
 801ad42:	4463      	add	r3, ip
 801ad44:	21d0      	movs	r1, #208	@ 0xd0
 801ad46:	187a      	adds	r2, r7, r1
 801ad48:	6013      	str	r3, [r2, #0]
 801ad4a:	1d7b      	adds	r3, r7, #5
 801ad4c:	33ff      	adds	r3, #255	@ 0xff
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	b29a      	uxth	r2, r3
 801ad52:	187b      	adds	r3, r7, r1
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	801a      	strh	r2, [r3, #0]
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	22c4      	movs	r2, #196	@ 0xc4
 801ad5c:	18ba      	adds	r2, r7, r2
 801ad5e:	6013      	str	r3, [r2, #0]
 801ad60:	683b      	ldr	r3, [r7, #0]
 801ad62:	785b      	ldrb	r3, [r3, #1]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d000      	beq.n	801ad6a <USB_EPStartXfer+0x10aa>
 801ad68:	e08c      	b.n	801ae84 <USB_EPStartXfer+0x11c4>
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	21bc      	movs	r1, #188	@ 0xbc
 801ad6e:	187a      	adds	r2, r7, r1
 801ad70:	6013      	str	r3, [r2, #0]
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	2250      	movs	r2, #80	@ 0x50
 801ad76:	5a9b      	ldrh	r3, [r3, r2]
 801ad78:	b29b      	uxth	r3, r3
 801ad7a:	001a      	movs	r2, r3
 801ad7c:	187b      	adds	r3, r7, r1
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	189b      	adds	r3, r3, r2
 801ad82:	187a      	adds	r2, r7, r1
 801ad84:	6013      	str	r3, [r2, #0]
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	781b      	ldrb	r3, [r3, #0]
 801ad8a:	00da      	lsls	r2, r3, #3
 801ad8c:	187b      	adds	r3, r7, r1
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	18d3      	adds	r3, r2, r3
 801ad92:	4a37      	ldr	r2, [pc, #220]	@ (801ae70 <USB_EPStartXfer+0x11b0>)
 801ad94:	4694      	mov	ip, r2
 801ad96:	4463      	add	r3, ip
 801ad98:	21b8      	movs	r1, #184	@ 0xb8
 801ad9a:	187a      	adds	r2, r7, r1
 801ad9c:	6013      	str	r3, [r2, #0]
 801ad9e:	187b      	adds	r3, r7, r1
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	881b      	ldrh	r3, [r3, #0]
 801ada4:	b29b      	uxth	r3, r3
 801ada6:	059b      	lsls	r3, r3, #22
 801ada8:	0d9b      	lsrs	r3, r3, #22
 801adaa:	b29a      	uxth	r2, r3
 801adac:	187b      	adds	r3, r7, r1
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	801a      	strh	r2, [r3, #0]
 801adb2:	1d7b      	adds	r3, r7, #5
 801adb4:	33ff      	adds	r3, #255	@ 0xff
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	2b3e      	cmp	r3, #62	@ 0x3e
 801adba:	d925      	bls.n	801ae08 <USB_EPStartXfer+0x1148>
 801adbc:	1d7b      	adds	r3, r7, #5
 801adbe:	33ff      	adds	r3, #255	@ 0xff
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	095b      	lsrs	r3, r3, #5
 801adc4:	21d8      	movs	r1, #216	@ 0xd8
 801adc6:	187a      	adds	r2, r7, r1
 801adc8:	6013      	str	r3, [r2, #0]
 801adca:	1d7b      	adds	r3, r7, #5
 801adcc:	33ff      	adds	r3, #255	@ 0xff
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	221f      	movs	r2, #31
 801add2:	4013      	ands	r3, r2
 801add4:	d104      	bne.n	801ade0 <USB_EPStartXfer+0x1120>
 801add6:	187b      	adds	r3, r7, r1
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	3b01      	subs	r3, #1
 801addc:	187a      	adds	r2, r7, r1
 801adde:	6013      	str	r3, [r2, #0]
 801ade0:	21b8      	movs	r1, #184	@ 0xb8
 801ade2:	187b      	adds	r3, r7, r1
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	881b      	ldrh	r3, [r3, #0]
 801ade8:	b29a      	uxth	r2, r3
 801adea:	23d8      	movs	r3, #216	@ 0xd8
 801adec:	18fb      	adds	r3, r7, r3
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	b29b      	uxth	r3, r3
 801adf2:	029b      	lsls	r3, r3, #10
 801adf4:	b29b      	uxth	r3, r3
 801adf6:	4313      	orrs	r3, r2
 801adf8:	b29b      	uxth	r3, r3
 801adfa:	4a21      	ldr	r2, [pc, #132]	@ (801ae80 <USB_EPStartXfer+0x11c0>)
 801adfc:	4313      	orrs	r3, r2
 801adfe:	b29a      	uxth	r2, r3
 801ae00:	187b      	adds	r3, r7, r1
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	801a      	strh	r2, [r3, #0]
 801ae06:	e062      	b.n	801aece <USB_EPStartXfer+0x120e>
 801ae08:	1d7b      	adds	r3, r7, #5
 801ae0a:	33ff      	adds	r3, #255	@ 0xff
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d10b      	bne.n	801ae2a <USB_EPStartXfer+0x116a>
 801ae12:	21b8      	movs	r1, #184	@ 0xb8
 801ae14:	187b      	adds	r3, r7, r1
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	881b      	ldrh	r3, [r3, #0]
 801ae1a:	b29b      	uxth	r3, r3
 801ae1c:	4a18      	ldr	r2, [pc, #96]	@ (801ae80 <USB_EPStartXfer+0x11c0>)
 801ae1e:	4313      	orrs	r3, r2
 801ae20:	b29a      	uxth	r2, r3
 801ae22:	187b      	adds	r3, r7, r1
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	801a      	strh	r2, [r3, #0]
 801ae28:	e051      	b.n	801aece <USB_EPStartXfer+0x120e>
 801ae2a:	1d7b      	adds	r3, r7, #5
 801ae2c:	33ff      	adds	r3, #255	@ 0xff
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	085b      	lsrs	r3, r3, #1
 801ae32:	21d8      	movs	r1, #216	@ 0xd8
 801ae34:	187a      	adds	r2, r7, r1
 801ae36:	6013      	str	r3, [r2, #0]
 801ae38:	1d7b      	adds	r3, r7, #5
 801ae3a:	33ff      	adds	r3, #255	@ 0xff
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	2201      	movs	r2, #1
 801ae40:	4013      	ands	r3, r2
 801ae42:	d004      	beq.n	801ae4e <USB_EPStartXfer+0x118e>
 801ae44:	187b      	adds	r3, r7, r1
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	3301      	adds	r3, #1
 801ae4a:	187a      	adds	r2, r7, r1
 801ae4c:	6013      	str	r3, [r2, #0]
 801ae4e:	21b8      	movs	r1, #184	@ 0xb8
 801ae50:	187b      	adds	r3, r7, r1
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	881b      	ldrh	r3, [r3, #0]
 801ae56:	b29a      	uxth	r2, r3
 801ae58:	23d8      	movs	r3, #216	@ 0xd8
 801ae5a:	18fb      	adds	r3, r7, r3
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	b29b      	uxth	r3, r3
 801ae60:	029b      	lsls	r3, r3, #10
 801ae62:	b29b      	uxth	r3, r3
 801ae64:	4313      	orrs	r3, r2
 801ae66:	b29a      	uxth	r2, r3
 801ae68:	187b      	adds	r3, r7, r1
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	801a      	strh	r2, [r3, #0]
 801ae6e:	e02e      	b.n	801aece <USB_EPStartXfer+0x120e>
 801ae70:	00000406 	.word	0x00000406
 801ae74:	ffff8f8f 	.word	0xffff8f8f
 801ae78:	ffff80c0 	.word	0xffff80c0
 801ae7c:	00000402 	.word	0x00000402
 801ae80:	ffff8000 	.word	0xffff8000
 801ae84:	683b      	ldr	r3, [r7, #0]
 801ae86:	785b      	ldrb	r3, [r3, #1]
 801ae88:	2b01      	cmp	r3, #1
 801ae8a:	d120      	bne.n	801aece <USB_EPStartXfer+0x120e>
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	2250      	movs	r2, #80	@ 0x50
 801ae90:	5a9b      	ldrh	r3, [r3, r2]
 801ae92:	b29b      	uxth	r3, r3
 801ae94:	001a      	movs	r2, r3
 801ae96:	21c4      	movs	r1, #196	@ 0xc4
 801ae98:	187b      	adds	r3, r7, r1
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	189b      	adds	r3, r3, r2
 801ae9e:	187a      	adds	r2, r7, r1
 801aea0:	6013      	str	r3, [r2, #0]
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	781b      	ldrb	r3, [r3, #0]
 801aea6:	00da      	lsls	r2, r3, #3
 801aea8:	187b      	adds	r3, r7, r1
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	18d3      	adds	r3, r2, r3
 801aeae:	4a1d      	ldr	r2, [pc, #116]	@ (801af24 <USB_EPStartXfer+0x1264>)
 801aeb0:	4694      	mov	ip, r2
 801aeb2:	4463      	add	r3, ip
 801aeb4:	21c0      	movs	r1, #192	@ 0xc0
 801aeb6:	187a      	adds	r2, r7, r1
 801aeb8:	6013      	str	r3, [r2, #0]
 801aeba:	1d7b      	adds	r3, r7, #5
 801aebc:	33ff      	adds	r3, #255	@ 0xff
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	b29a      	uxth	r2, r3
 801aec2:	187b      	adds	r3, r7, r1
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	801a      	strh	r2, [r3, #0]
 801aec8:	e001      	b.n	801aece <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801aeca:	2301      	movs	r3, #1
 801aecc:	e025      	b.n	801af1a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801aece:	687a      	ldr	r2, [r7, #4]
 801aed0:	683b      	ldr	r3, [r7, #0]
 801aed2:	781b      	ldrb	r3, [r3, #0]
 801aed4:	009b      	lsls	r3, r3, #2
 801aed6:	18d3      	adds	r3, r2, r3
 801aed8:	881b      	ldrh	r3, [r3, #0]
 801aeda:	b29a      	uxth	r2, r3
 801aedc:	208a      	movs	r0, #138	@ 0x8a
 801aede:	183b      	adds	r3, r7, r0
 801aee0:	4911      	ldr	r1, [pc, #68]	@ (801af28 <USB_EPStartXfer+0x1268>)
 801aee2:	400a      	ands	r2, r1
 801aee4:	801a      	strh	r2, [r3, #0]
 801aee6:	183b      	adds	r3, r7, r0
 801aee8:	183a      	adds	r2, r7, r0
 801aeea:	8812      	ldrh	r2, [r2, #0]
 801aeec:	2180      	movs	r1, #128	@ 0x80
 801aeee:	0149      	lsls	r1, r1, #5
 801aef0:	404a      	eors	r2, r1
 801aef2:	801a      	strh	r2, [r3, #0]
 801aef4:	183b      	adds	r3, r7, r0
 801aef6:	183a      	adds	r2, r7, r0
 801aef8:	8812      	ldrh	r2, [r2, #0]
 801aefa:	2180      	movs	r1, #128	@ 0x80
 801aefc:	0189      	lsls	r1, r1, #6
 801aefe:	404a      	eors	r2, r1
 801af00:	801a      	strh	r2, [r3, #0]
 801af02:	687a      	ldr	r2, [r7, #4]
 801af04:	683b      	ldr	r3, [r7, #0]
 801af06:	781b      	ldrb	r3, [r3, #0]
 801af08:	009b      	lsls	r3, r3, #2
 801af0a:	18d3      	adds	r3, r2, r3
 801af0c:	183a      	adds	r2, r7, r0
 801af0e:	8812      	ldrh	r2, [r2, #0]
 801af10:	4906      	ldr	r1, [pc, #24]	@ (801af2c <USB_EPStartXfer+0x126c>)
 801af12:	430a      	orrs	r2, r1
 801af14:	b292      	uxth	r2, r2
 801af16:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801af18:	2300      	movs	r3, #0
}
 801af1a:	0018      	movs	r0, r3
 801af1c:	46bd      	mov	sp, r7
 801af1e:	b043      	add	sp, #268	@ 0x10c
 801af20:	bd90      	pop	{r4, r7, pc}
 801af22:	46c0      	nop			@ (mov r8, r8)
 801af24:	00000406 	.word	0x00000406
 801af28:	ffffbf8f 	.word	0xffffbf8f
 801af2c:	ffff8080 	.word	0xffff8080

0801af30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b084      	sub	sp, #16
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
 801af38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801af3a:	683b      	ldr	r3, [r7, #0]
 801af3c:	785b      	ldrb	r3, [r3, #1]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d01d      	beq.n	801af7e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801af42:	687a      	ldr	r2, [r7, #4]
 801af44:	683b      	ldr	r3, [r7, #0]
 801af46:	781b      	ldrb	r3, [r3, #0]
 801af48:	009b      	lsls	r3, r3, #2
 801af4a:	18d3      	adds	r3, r2, r3
 801af4c:	881b      	ldrh	r3, [r3, #0]
 801af4e:	b29a      	uxth	r2, r3
 801af50:	200c      	movs	r0, #12
 801af52:	183b      	adds	r3, r7, r0
 801af54:	491b      	ldr	r1, [pc, #108]	@ (801afc4 <USB_EPSetStall+0x94>)
 801af56:	400a      	ands	r2, r1
 801af58:	801a      	strh	r2, [r3, #0]
 801af5a:	183b      	adds	r3, r7, r0
 801af5c:	183a      	adds	r2, r7, r0
 801af5e:	8812      	ldrh	r2, [r2, #0]
 801af60:	2110      	movs	r1, #16
 801af62:	404a      	eors	r2, r1
 801af64:	801a      	strh	r2, [r3, #0]
 801af66:	687a      	ldr	r2, [r7, #4]
 801af68:	683b      	ldr	r3, [r7, #0]
 801af6a:	781b      	ldrb	r3, [r3, #0]
 801af6c:	009b      	lsls	r3, r3, #2
 801af6e:	18d3      	adds	r3, r2, r3
 801af70:	183a      	adds	r2, r7, r0
 801af72:	8812      	ldrh	r2, [r2, #0]
 801af74:	4914      	ldr	r1, [pc, #80]	@ (801afc8 <USB_EPSetStall+0x98>)
 801af76:	430a      	orrs	r2, r1
 801af78:	b292      	uxth	r2, r2
 801af7a:	801a      	strh	r2, [r3, #0]
 801af7c:	e01d      	b.n	801afba <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801af7e:	687a      	ldr	r2, [r7, #4]
 801af80:	683b      	ldr	r3, [r7, #0]
 801af82:	781b      	ldrb	r3, [r3, #0]
 801af84:	009b      	lsls	r3, r3, #2
 801af86:	18d3      	adds	r3, r2, r3
 801af88:	881b      	ldrh	r3, [r3, #0]
 801af8a:	b29a      	uxth	r2, r3
 801af8c:	200e      	movs	r0, #14
 801af8e:	183b      	adds	r3, r7, r0
 801af90:	490e      	ldr	r1, [pc, #56]	@ (801afcc <USB_EPSetStall+0x9c>)
 801af92:	400a      	ands	r2, r1
 801af94:	801a      	strh	r2, [r3, #0]
 801af96:	183b      	adds	r3, r7, r0
 801af98:	183a      	adds	r2, r7, r0
 801af9a:	8812      	ldrh	r2, [r2, #0]
 801af9c:	2180      	movs	r1, #128	@ 0x80
 801af9e:	0149      	lsls	r1, r1, #5
 801afa0:	404a      	eors	r2, r1
 801afa2:	801a      	strh	r2, [r3, #0]
 801afa4:	687a      	ldr	r2, [r7, #4]
 801afa6:	683b      	ldr	r3, [r7, #0]
 801afa8:	781b      	ldrb	r3, [r3, #0]
 801afaa:	009b      	lsls	r3, r3, #2
 801afac:	18d3      	adds	r3, r2, r3
 801afae:	183a      	adds	r2, r7, r0
 801afb0:	8812      	ldrh	r2, [r2, #0]
 801afb2:	4905      	ldr	r1, [pc, #20]	@ (801afc8 <USB_EPSetStall+0x98>)
 801afb4:	430a      	orrs	r2, r1
 801afb6:	b292      	uxth	r2, r2
 801afb8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801afba:	2300      	movs	r3, #0
}
 801afbc:	0018      	movs	r0, r3
 801afbe:	46bd      	mov	sp, r7
 801afc0:	b004      	add	sp, #16
 801afc2:	bd80      	pop	{r7, pc}
 801afc4:	ffff8fbf 	.word	0xffff8fbf
 801afc8:	ffff8080 	.word	0xffff8080
 801afcc:	ffffbf8f 	.word	0xffffbf8f

0801afd0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b086      	sub	sp, #24
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
 801afd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801afda:	683b      	ldr	r3, [r7, #0]
 801afdc:	7b1b      	ldrb	r3, [r3, #12]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d000      	beq.n	801afe4 <USB_EPClearStall+0x14>
 801afe2:	e095      	b.n	801b110 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801afe4:	683b      	ldr	r3, [r7, #0]
 801afe6:	785b      	ldrb	r3, [r3, #1]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d046      	beq.n	801b07a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801afec:	687a      	ldr	r2, [r7, #4]
 801afee:	683b      	ldr	r3, [r7, #0]
 801aff0:	781b      	ldrb	r3, [r3, #0]
 801aff2:	009b      	lsls	r3, r3, #2
 801aff4:	18d2      	adds	r2, r2, r3
 801aff6:	2110      	movs	r1, #16
 801aff8:	187b      	adds	r3, r7, r1
 801affa:	8812      	ldrh	r2, [r2, #0]
 801affc:	801a      	strh	r2, [r3, #0]
 801affe:	187b      	adds	r3, r7, r1
 801b000:	881b      	ldrh	r3, [r3, #0]
 801b002:	2240      	movs	r2, #64	@ 0x40
 801b004:	4013      	ands	r3, r2
 801b006:	d016      	beq.n	801b036 <USB_EPClearStall+0x66>
 801b008:	687a      	ldr	r2, [r7, #4]
 801b00a:	683b      	ldr	r3, [r7, #0]
 801b00c:	781b      	ldrb	r3, [r3, #0]
 801b00e:	009b      	lsls	r3, r3, #2
 801b010:	18d3      	adds	r3, r2, r3
 801b012:	881b      	ldrh	r3, [r3, #0]
 801b014:	b29a      	uxth	r2, r3
 801b016:	200e      	movs	r0, #14
 801b018:	183b      	adds	r3, r7, r0
 801b01a:	4940      	ldr	r1, [pc, #256]	@ (801b11c <USB_EPClearStall+0x14c>)
 801b01c:	400a      	ands	r2, r1
 801b01e:	801a      	strh	r2, [r3, #0]
 801b020:	687a      	ldr	r2, [r7, #4]
 801b022:	683b      	ldr	r3, [r7, #0]
 801b024:	781b      	ldrb	r3, [r3, #0]
 801b026:	009b      	lsls	r3, r3, #2
 801b028:	18d3      	adds	r3, r2, r3
 801b02a:	183a      	adds	r2, r7, r0
 801b02c:	8812      	ldrh	r2, [r2, #0]
 801b02e:	493c      	ldr	r1, [pc, #240]	@ (801b120 <USB_EPClearStall+0x150>)
 801b030:	430a      	orrs	r2, r1
 801b032:	b292      	uxth	r2, r2
 801b034:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b036:	683b      	ldr	r3, [r7, #0]
 801b038:	78db      	ldrb	r3, [r3, #3]
 801b03a:	2b01      	cmp	r3, #1
 801b03c:	d068      	beq.n	801b110 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801b03e:	687a      	ldr	r2, [r7, #4]
 801b040:	683b      	ldr	r3, [r7, #0]
 801b042:	781b      	ldrb	r3, [r3, #0]
 801b044:	009b      	lsls	r3, r3, #2
 801b046:	18d3      	adds	r3, r2, r3
 801b048:	881b      	ldrh	r3, [r3, #0]
 801b04a:	b29a      	uxth	r2, r3
 801b04c:	200c      	movs	r0, #12
 801b04e:	183b      	adds	r3, r7, r0
 801b050:	4934      	ldr	r1, [pc, #208]	@ (801b124 <USB_EPClearStall+0x154>)
 801b052:	400a      	ands	r2, r1
 801b054:	801a      	strh	r2, [r3, #0]
 801b056:	183b      	adds	r3, r7, r0
 801b058:	183a      	adds	r2, r7, r0
 801b05a:	8812      	ldrh	r2, [r2, #0]
 801b05c:	2120      	movs	r1, #32
 801b05e:	404a      	eors	r2, r1
 801b060:	801a      	strh	r2, [r3, #0]
 801b062:	687a      	ldr	r2, [r7, #4]
 801b064:	683b      	ldr	r3, [r7, #0]
 801b066:	781b      	ldrb	r3, [r3, #0]
 801b068:	009b      	lsls	r3, r3, #2
 801b06a:	18d3      	adds	r3, r2, r3
 801b06c:	183a      	adds	r2, r7, r0
 801b06e:	8812      	ldrh	r2, [r2, #0]
 801b070:	492d      	ldr	r1, [pc, #180]	@ (801b128 <USB_EPClearStall+0x158>)
 801b072:	430a      	orrs	r2, r1
 801b074:	b292      	uxth	r2, r2
 801b076:	801a      	strh	r2, [r3, #0]
 801b078:	e04a      	b.n	801b110 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801b07a:	687a      	ldr	r2, [r7, #4]
 801b07c:	683b      	ldr	r3, [r7, #0]
 801b07e:	781b      	ldrb	r3, [r3, #0]
 801b080:	009b      	lsls	r3, r3, #2
 801b082:	18d2      	adds	r2, r2, r3
 801b084:	2116      	movs	r1, #22
 801b086:	187b      	adds	r3, r7, r1
 801b088:	8812      	ldrh	r2, [r2, #0]
 801b08a:	801a      	strh	r2, [r3, #0]
 801b08c:	187b      	adds	r3, r7, r1
 801b08e:	881a      	ldrh	r2, [r3, #0]
 801b090:	2380      	movs	r3, #128	@ 0x80
 801b092:	01db      	lsls	r3, r3, #7
 801b094:	4013      	ands	r3, r2
 801b096:	d016      	beq.n	801b0c6 <USB_EPClearStall+0xf6>
 801b098:	687a      	ldr	r2, [r7, #4]
 801b09a:	683b      	ldr	r3, [r7, #0]
 801b09c:	781b      	ldrb	r3, [r3, #0]
 801b09e:	009b      	lsls	r3, r3, #2
 801b0a0:	18d3      	adds	r3, r2, r3
 801b0a2:	881b      	ldrh	r3, [r3, #0]
 801b0a4:	b29a      	uxth	r2, r3
 801b0a6:	2014      	movs	r0, #20
 801b0a8:	183b      	adds	r3, r7, r0
 801b0aa:	491c      	ldr	r1, [pc, #112]	@ (801b11c <USB_EPClearStall+0x14c>)
 801b0ac:	400a      	ands	r2, r1
 801b0ae:	801a      	strh	r2, [r3, #0]
 801b0b0:	687a      	ldr	r2, [r7, #4]
 801b0b2:	683b      	ldr	r3, [r7, #0]
 801b0b4:	781b      	ldrb	r3, [r3, #0]
 801b0b6:	009b      	lsls	r3, r3, #2
 801b0b8:	18d3      	adds	r3, r2, r3
 801b0ba:	183a      	adds	r2, r7, r0
 801b0bc:	8812      	ldrh	r2, [r2, #0]
 801b0be:	491b      	ldr	r1, [pc, #108]	@ (801b12c <USB_EPClearStall+0x15c>)
 801b0c0:	430a      	orrs	r2, r1
 801b0c2:	b292      	uxth	r2, r2
 801b0c4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b0c6:	687a      	ldr	r2, [r7, #4]
 801b0c8:	683b      	ldr	r3, [r7, #0]
 801b0ca:	781b      	ldrb	r3, [r3, #0]
 801b0cc:	009b      	lsls	r3, r3, #2
 801b0ce:	18d3      	adds	r3, r2, r3
 801b0d0:	881b      	ldrh	r3, [r3, #0]
 801b0d2:	b29a      	uxth	r2, r3
 801b0d4:	2012      	movs	r0, #18
 801b0d6:	183b      	adds	r3, r7, r0
 801b0d8:	4915      	ldr	r1, [pc, #84]	@ (801b130 <USB_EPClearStall+0x160>)
 801b0da:	400a      	ands	r2, r1
 801b0dc:	801a      	strh	r2, [r3, #0]
 801b0de:	183b      	adds	r3, r7, r0
 801b0e0:	183a      	adds	r2, r7, r0
 801b0e2:	8812      	ldrh	r2, [r2, #0]
 801b0e4:	2180      	movs	r1, #128	@ 0x80
 801b0e6:	0149      	lsls	r1, r1, #5
 801b0e8:	404a      	eors	r2, r1
 801b0ea:	801a      	strh	r2, [r3, #0]
 801b0ec:	183b      	adds	r3, r7, r0
 801b0ee:	183a      	adds	r2, r7, r0
 801b0f0:	8812      	ldrh	r2, [r2, #0]
 801b0f2:	2180      	movs	r1, #128	@ 0x80
 801b0f4:	0189      	lsls	r1, r1, #6
 801b0f6:	404a      	eors	r2, r1
 801b0f8:	801a      	strh	r2, [r3, #0]
 801b0fa:	687a      	ldr	r2, [r7, #4]
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	781b      	ldrb	r3, [r3, #0]
 801b100:	009b      	lsls	r3, r3, #2
 801b102:	18d3      	adds	r3, r2, r3
 801b104:	183a      	adds	r2, r7, r0
 801b106:	8812      	ldrh	r2, [r2, #0]
 801b108:	4907      	ldr	r1, [pc, #28]	@ (801b128 <USB_EPClearStall+0x158>)
 801b10a:	430a      	orrs	r2, r1
 801b10c:	b292      	uxth	r2, r2
 801b10e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801b110:	2300      	movs	r3, #0
}
 801b112:	0018      	movs	r0, r3
 801b114:	46bd      	mov	sp, r7
 801b116:	b006      	add	sp, #24
 801b118:	bd80      	pop	{r7, pc}
 801b11a:	46c0      	nop			@ (mov r8, r8)
 801b11c:	ffff8f8f 	.word	0xffff8f8f
 801b120:	ffff80c0 	.word	0xffff80c0
 801b124:	ffff8fbf 	.word	0xffff8fbf
 801b128:	ffff8080 	.word	0xffff8080
 801b12c:	ffffc080 	.word	0xffffc080
 801b130:	ffffbf8f 	.word	0xffffbf8f

0801b134 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801b134:	b580      	push	{r7, lr}
 801b136:	b082      	sub	sp, #8
 801b138:	af00      	add	r7, sp, #0
 801b13a:	6078      	str	r0, [r7, #4]
 801b13c:	000a      	movs	r2, r1
 801b13e:	1cfb      	adds	r3, r7, #3
 801b140:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801b142:	1cfb      	adds	r3, r7, #3
 801b144:	781b      	ldrb	r3, [r3, #0]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d103      	bne.n	801b152 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	224c      	movs	r2, #76	@ 0x4c
 801b14e:	2180      	movs	r1, #128	@ 0x80
 801b150:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801b152:	2300      	movs	r3, #0
}
 801b154:	0018      	movs	r0, r3
 801b156:	46bd      	mov	sp, r7
 801b158:	b002      	add	sp, #8
 801b15a:	bd80      	pop	{r7, pc}

0801b15c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801b15c:	b580      	push	{r7, lr}
 801b15e:	b082      	sub	sp, #8
 801b160:	af00      	add	r7, sp, #0
 801b162:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	2258      	movs	r2, #88	@ 0x58
 801b168:	5a9b      	ldrh	r3, [r3, r2]
 801b16a:	b29b      	uxth	r3, r3
 801b16c:	4a05      	ldr	r2, [pc, #20]	@ (801b184 <USB_DevConnect+0x28>)
 801b16e:	4313      	orrs	r3, r2
 801b170:	b299      	uxth	r1, r3
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	2258      	movs	r2, #88	@ 0x58
 801b176:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b178:	2300      	movs	r3, #0
}
 801b17a:	0018      	movs	r0, r3
 801b17c:	46bd      	mov	sp, r7
 801b17e:	b002      	add	sp, #8
 801b180:	bd80      	pop	{r7, pc}
 801b182:	46c0      	nop			@ (mov r8, r8)
 801b184:	ffff8000 	.word	0xffff8000

0801b188 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801b188:	b580      	push	{r7, lr}
 801b18a:	b084      	sub	sp, #16
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	2244      	movs	r2, #68	@ 0x44
 801b194:	5a9b      	ldrh	r3, [r3, r2]
 801b196:	b29b      	uxth	r3, r3
 801b198:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801b19a:	68fb      	ldr	r3, [r7, #12]
}
 801b19c:	0018      	movs	r0, r3
 801b19e:	46bd      	mov	sp, r7
 801b1a0:	b004      	add	sp, #16
 801b1a2:	bd80      	pop	{r7, pc}

0801b1a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b08a      	sub	sp, #40	@ 0x28
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	60f8      	str	r0, [r7, #12]
 801b1ac:	60b9      	str	r1, [r7, #8]
 801b1ae:	0019      	movs	r1, r3
 801b1b0:	1dbb      	adds	r3, r7, #6
 801b1b2:	801a      	strh	r2, [r3, #0]
 801b1b4:	1d3b      	adds	r3, r7, #4
 801b1b6:	1c0a      	adds	r2, r1, #0
 801b1b8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801b1ba:	1d3b      	adds	r3, r7, #4
 801b1bc:	881b      	ldrh	r3, [r3, #0]
 801b1be:	3301      	adds	r3, #1
 801b1c0:	085b      	lsrs	r3, r3, #1
 801b1c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b1c8:	68bb      	ldr	r3, [r7, #8]
 801b1ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b1cc:	1dbb      	adds	r3, r7, #6
 801b1ce:	881a      	ldrh	r2, [r3, #0]
 801b1d0:	697b      	ldr	r3, [r7, #20]
 801b1d2:	18d3      	adds	r3, r2, r3
 801b1d4:	2280      	movs	r2, #128	@ 0x80
 801b1d6:	00d2      	lsls	r2, r2, #3
 801b1d8:	4694      	mov	ip, r2
 801b1da:	4463      	add	r3, ip
 801b1dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b1de:	69bb      	ldr	r3, [r7, #24]
 801b1e0:	627b      	str	r3, [r7, #36]	@ 0x24
 801b1e2:	e020      	b.n	801b226 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801b1e4:	69fb      	ldr	r3, [r7, #28]
 801b1e6:	781a      	ldrb	r2, [r3, #0]
 801b1e8:	2112      	movs	r1, #18
 801b1ea:	187b      	adds	r3, r7, r1
 801b1ec:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801b1ee:	69fb      	ldr	r3, [r7, #28]
 801b1f0:	3301      	adds	r3, #1
 801b1f2:	781b      	ldrb	r3, [r3, #0]
 801b1f4:	021b      	lsls	r3, r3, #8
 801b1f6:	b21a      	sxth	r2, r3
 801b1f8:	187b      	adds	r3, r7, r1
 801b1fa:	2000      	movs	r0, #0
 801b1fc:	5e1b      	ldrsh	r3, [r3, r0]
 801b1fe:	4313      	orrs	r3, r2
 801b200:	b21a      	sxth	r2, r3
 801b202:	187b      	adds	r3, r7, r1
 801b204:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b206:	6a3b      	ldr	r3, [r7, #32]
 801b208:	187a      	adds	r2, r7, r1
 801b20a:	8812      	ldrh	r2, [r2, #0]
 801b20c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b20e:	6a3b      	ldr	r3, [r7, #32]
 801b210:	3302      	adds	r3, #2
 801b212:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b214:	69fb      	ldr	r3, [r7, #28]
 801b216:	3301      	adds	r3, #1
 801b218:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b21a:	69fb      	ldr	r3, [r7, #28]
 801b21c:	3301      	adds	r3, #1
 801b21e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b222:	3b01      	subs	r3, #1
 801b224:	627b      	str	r3, [r7, #36]	@ 0x24
 801b226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d1db      	bne.n	801b1e4 <USB_WritePMA+0x40>
  }
}
 801b22c:	46c0      	nop			@ (mov r8, r8)
 801b22e:	46c0      	nop			@ (mov r8, r8)
 801b230:	46bd      	mov	sp, r7
 801b232:	b00a      	add	sp, #40	@ 0x28
 801b234:	bd80      	pop	{r7, pc}

0801b236 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b236:	b580      	push	{r7, lr}
 801b238:	b08a      	sub	sp, #40	@ 0x28
 801b23a:	af00      	add	r7, sp, #0
 801b23c:	60f8      	str	r0, [r7, #12]
 801b23e:	60b9      	str	r1, [r7, #8]
 801b240:	0019      	movs	r1, r3
 801b242:	1dbb      	adds	r3, r7, #6
 801b244:	801a      	strh	r2, [r3, #0]
 801b246:	1d3b      	adds	r3, r7, #4
 801b248:	1c0a      	adds	r2, r1, #0
 801b24a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b24c:	1d3b      	adds	r3, r7, #4
 801b24e:	881b      	ldrh	r3, [r3, #0]
 801b250:	085b      	lsrs	r3, r3, #1
 801b252:	b29b      	uxth	r3, r3
 801b254:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b25a:	68bb      	ldr	r3, [r7, #8]
 801b25c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b25e:	1dbb      	adds	r3, r7, #6
 801b260:	881a      	ldrh	r2, [r3, #0]
 801b262:	697b      	ldr	r3, [r7, #20]
 801b264:	18d3      	adds	r3, r2, r3
 801b266:	2280      	movs	r2, #128	@ 0x80
 801b268:	00d2      	lsls	r2, r2, #3
 801b26a:	4694      	mov	ip, r2
 801b26c:	4463      	add	r3, ip
 801b26e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b270:	69bb      	ldr	r3, [r7, #24]
 801b272:	627b      	str	r3, [r7, #36]	@ 0x24
 801b274:	e018      	b.n	801b2a8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b276:	6a3b      	ldr	r3, [r7, #32]
 801b278:	881b      	ldrh	r3, [r3, #0]
 801b27a:	b29b      	uxth	r3, r3
 801b27c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b27e:	6a3b      	ldr	r3, [r7, #32]
 801b280:	3302      	adds	r3, #2
 801b282:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b284:	693b      	ldr	r3, [r7, #16]
 801b286:	b2da      	uxtb	r2, r3
 801b288:	69fb      	ldr	r3, [r7, #28]
 801b28a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b28c:	69fb      	ldr	r3, [r7, #28]
 801b28e:	3301      	adds	r3, #1
 801b290:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b292:	693b      	ldr	r3, [r7, #16]
 801b294:	0a1b      	lsrs	r3, r3, #8
 801b296:	b2da      	uxtb	r2, r3
 801b298:	69fb      	ldr	r3, [r7, #28]
 801b29a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b29c:	69fb      	ldr	r3, [r7, #28]
 801b29e:	3301      	adds	r3, #1
 801b2a0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a4:	3b01      	subs	r3, #1
 801b2a6:	627b      	str	r3, [r7, #36]	@ 0x24
 801b2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d1e3      	bne.n	801b276 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b2ae:	1d3b      	adds	r3, r7, #4
 801b2b0:	881b      	ldrh	r3, [r3, #0]
 801b2b2:	2201      	movs	r2, #1
 801b2b4:	4013      	ands	r3, r2
 801b2b6:	b29b      	uxth	r3, r3
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d007      	beq.n	801b2cc <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b2bc:	6a3b      	ldr	r3, [r7, #32]
 801b2be:	881b      	ldrh	r3, [r3, #0]
 801b2c0:	b29b      	uxth	r3, r3
 801b2c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b2c4:	693b      	ldr	r3, [r7, #16]
 801b2c6:	b2da      	uxtb	r2, r3
 801b2c8:	69fb      	ldr	r3, [r7, #28]
 801b2ca:	701a      	strb	r2, [r3, #0]
  }
}
 801b2cc:	46c0      	nop			@ (mov r8, r8)
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	b00a      	add	sp, #40	@ 0x28
 801b2d2:	bd80      	pop	{r7, pc}

0801b2d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b084      	sub	sp, #16
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]
 801b2dc:	000a      	movs	r2, r1
 801b2de:	1cfb      	adds	r3, r7, #3
 801b2e0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b2e2:	230f      	movs	r3, #15
 801b2e4:	18fb      	adds	r3, r7, r3
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	7c1b      	ldrb	r3, [r3, #16]
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d116      	bne.n	801b320 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b2f2:	2380      	movs	r3, #128	@ 0x80
 801b2f4:	009b      	lsls	r3, r3, #2
 801b2f6:	6878      	ldr	r0, [r7, #4]
 801b2f8:	2202      	movs	r2, #2
 801b2fa:	2181      	movs	r1, #129	@ 0x81
 801b2fc:	f002 f8eb 	bl	801d4d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	2201      	movs	r2, #1
 801b304:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b306:	2380      	movs	r3, #128	@ 0x80
 801b308:	009b      	lsls	r3, r3, #2
 801b30a:	6878      	ldr	r0, [r7, #4]
 801b30c:	2202      	movs	r2, #2
 801b30e:	2101      	movs	r1, #1
 801b310:	f002 f8e1 	bl	801d4d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b314:	687a      	ldr	r2, [r7, #4]
 801b316:	23b6      	movs	r3, #182	@ 0xb6
 801b318:	005b      	lsls	r3, r3, #1
 801b31a:	2101      	movs	r1, #1
 801b31c:	50d1      	str	r1, [r2, r3]
 801b31e:	e013      	b.n	801b348 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b320:	6878      	ldr	r0, [r7, #4]
 801b322:	2340      	movs	r3, #64	@ 0x40
 801b324:	2202      	movs	r2, #2
 801b326:	2181      	movs	r1, #129	@ 0x81
 801b328:	f002 f8d5 	bl	801d4d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	2201      	movs	r2, #1
 801b330:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b332:	6878      	ldr	r0, [r7, #4]
 801b334:	2340      	movs	r3, #64	@ 0x40
 801b336:	2202      	movs	r2, #2
 801b338:	2101      	movs	r1, #1
 801b33a:	f002 f8cc 	bl	801d4d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b33e:	687a      	ldr	r2, [r7, #4]
 801b340:	23b6      	movs	r3, #182	@ 0xb6
 801b342:	005b      	lsls	r3, r3, #1
 801b344:	2101      	movs	r1, #1
 801b346:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b348:	6878      	ldr	r0, [r7, #4]
 801b34a:	2308      	movs	r3, #8
 801b34c:	2203      	movs	r2, #3
 801b34e:	2182      	movs	r1, #130	@ 0x82
 801b350:	f002 f8c1 	bl	801d4d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	2201      	movs	r2, #1
 801b358:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b35a:	2387      	movs	r3, #135	@ 0x87
 801b35c:	009b      	lsls	r3, r3, #2
 801b35e:	0018      	movs	r0, r3
 801b360:	f002 fa52 	bl	801d808 <USBD_static_malloc>
 801b364:	0001      	movs	r1, r0
 801b366:	687a      	ldr	r2, [r7, #4]
 801b368:	23ae      	movs	r3, #174	@ 0xae
 801b36a:	009b      	lsls	r3, r3, #2
 801b36c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b36e:	687a      	ldr	r2, [r7, #4]
 801b370:	23ae      	movs	r3, #174	@ 0xae
 801b372:	009b      	lsls	r3, r3, #2
 801b374:	58d3      	ldr	r3, [r2, r3]
 801b376:	2b00      	cmp	r3, #0
 801b378:	d104      	bne.n	801b384 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b37a:	230f      	movs	r3, #15
 801b37c:	18fb      	adds	r3, r7, r3
 801b37e:	2201      	movs	r2, #1
 801b380:	701a      	strb	r2, [r3, #0]
 801b382:	e02c      	b.n	801b3de <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b384:	687a      	ldr	r2, [r7, #4]
 801b386:	23ae      	movs	r3, #174	@ 0xae
 801b388:	009b      	lsls	r3, r3, #2
 801b38a:	58d3      	ldr	r3, [r2, r3]
 801b38c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b38e:	687a      	ldr	r2, [r7, #4]
 801b390:	23af      	movs	r3, #175	@ 0xaf
 801b392:	009b      	lsls	r3, r3, #2
 801b394:	58d3      	ldr	r3, [r2, r3]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b39a:	68ba      	ldr	r2, [r7, #8]
 801b39c:	2385      	movs	r3, #133	@ 0x85
 801b39e:	009b      	lsls	r3, r3, #2
 801b3a0:	2100      	movs	r1, #0
 801b3a2:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b3a4:	68ba      	ldr	r2, [r7, #8]
 801b3a6:	2386      	movs	r3, #134	@ 0x86
 801b3a8:	009b      	lsls	r3, r3, #2
 801b3aa:	2100      	movs	r1, #0
 801b3ac:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	7c1b      	ldrb	r3, [r3, #16]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d10a      	bne.n	801b3cc <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b3b6:	68ba      	ldr	r2, [r7, #8]
 801b3b8:	2381      	movs	r3, #129	@ 0x81
 801b3ba:	009b      	lsls	r3, r3, #2
 801b3bc:	58d2      	ldr	r2, [r2, r3]
 801b3be:	2380      	movs	r3, #128	@ 0x80
 801b3c0:	009b      	lsls	r3, r3, #2
 801b3c2:	6878      	ldr	r0, [r7, #4]
 801b3c4:	2101      	movs	r1, #1
 801b3c6:	f002 f9d1 	bl	801d76c <USBD_LL_PrepareReceive>
 801b3ca:	e008      	b.n	801b3de <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b3cc:	68ba      	ldr	r2, [r7, #8]
 801b3ce:	2381      	movs	r3, #129	@ 0x81
 801b3d0:	009b      	lsls	r3, r3, #2
 801b3d2:	58d2      	ldr	r2, [r2, r3]
 801b3d4:	6878      	ldr	r0, [r7, #4]
 801b3d6:	2340      	movs	r3, #64	@ 0x40
 801b3d8:	2101      	movs	r1, #1
 801b3da:	f002 f9c7 	bl	801d76c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b3de:	230f      	movs	r3, #15
 801b3e0:	18fb      	adds	r3, r7, r3
 801b3e2:	781b      	ldrb	r3, [r3, #0]
}
 801b3e4:	0018      	movs	r0, r3
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	b004      	add	sp, #16
 801b3ea:	bd80      	pop	{r7, pc}

0801b3ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b084      	sub	sp, #16
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
 801b3f4:	000a      	movs	r2, r1
 801b3f6:	1cfb      	adds	r3, r7, #3
 801b3f8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b3fa:	230f      	movs	r3, #15
 801b3fc:	18fb      	adds	r3, r7, r3
 801b3fe:	2200      	movs	r2, #0
 801b400:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	2181      	movs	r1, #129	@ 0x81
 801b406:	0018      	movs	r0, r3
 801b408:	f002 f89c 	bl	801d544 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	2200      	movs	r2, #0
 801b410:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	2101      	movs	r1, #1
 801b416:	0018      	movs	r0, r3
 801b418:	f002 f894 	bl	801d544 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b41c:	687a      	ldr	r2, [r7, #4]
 801b41e:	23b6      	movs	r3, #182	@ 0xb6
 801b420:	005b      	lsls	r3, r3, #1
 801b422:	2100      	movs	r1, #0
 801b424:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	2182      	movs	r1, #130	@ 0x82
 801b42a:	0018      	movs	r0, r3
 801b42c:	f002 f88a 	bl	801d544 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	2200      	movs	r2, #0
 801b434:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b436:	687a      	ldr	r2, [r7, #4]
 801b438:	23ae      	movs	r3, #174	@ 0xae
 801b43a:	009b      	lsls	r3, r3, #2
 801b43c:	58d3      	ldr	r3, [r2, r3]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d011      	beq.n	801b466 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b442:	687a      	ldr	r2, [r7, #4]
 801b444:	23af      	movs	r3, #175	@ 0xaf
 801b446:	009b      	lsls	r3, r3, #2
 801b448:	58d3      	ldr	r3, [r2, r3]
 801b44a:	685b      	ldr	r3, [r3, #4]
 801b44c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b44e:	687a      	ldr	r2, [r7, #4]
 801b450:	23ae      	movs	r3, #174	@ 0xae
 801b452:	009b      	lsls	r3, r3, #2
 801b454:	58d3      	ldr	r3, [r2, r3]
 801b456:	0018      	movs	r0, r3
 801b458:	f002 f9e2 	bl	801d820 <USBD_static_free>
    pdev->pClassData = NULL;
 801b45c:	687a      	ldr	r2, [r7, #4]
 801b45e:	23ae      	movs	r3, #174	@ 0xae
 801b460:	009b      	lsls	r3, r3, #2
 801b462:	2100      	movs	r1, #0
 801b464:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b466:	230f      	movs	r3, #15
 801b468:	18fb      	adds	r3, r7, r3
 801b46a:	781b      	ldrb	r3, [r3, #0]
}
 801b46c:	0018      	movs	r0, r3
 801b46e:	46bd      	mov	sp, r7
 801b470:	b004      	add	sp, #16
 801b472:	bd80      	pop	{r7, pc}

0801b474 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b474:	b580      	push	{r7, lr}
 801b476:	b086      	sub	sp, #24
 801b478:	af00      	add	r7, sp, #0
 801b47a:	6078      	str	r0, [r7, #4]
 801b47c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b47e:	687a      	ldr	r2, [r7, #4]
 801b480:	23ae      	movs	r3, #174	@ 0xae
 801b482:	009b      	lsls	r3, r3, #2
 801b484:	58d3      	ldr	r3, [r2, r3]
 801b486:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b488:	230f      	movs	r3, #15
 801b48a:	18fb      	adds	r3, r7, r3
 801b48c:	2200      	movs	r2, #0
 801b48e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b490:	230c      	movs	r3, #12
 801b492:	18fb      	adds	r3, r7, r3
 801b494:	2200      	movs	r2, #0
 801b496:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b498:	2317      	movs	r3, #23
 801b49a:	18fb      	adds	r3, r7, r3
 801b49c:	2200      	movs	r2, #0
 801b49e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b4a0:	683b      	ldr	r3, [r7, #0]
 801b4a2:	781b      	ldrb	r3, [r3, #0]
 801b4a4:	001a      	movs	r2, r3
 801b4a6:	2360      	movs	r3, #96	@ 0x60
 801b4a8:	4013      	ands	r3, r2
 801b4aa:	d03d      	beq.n	801b528 <USBD_CDC_Setup+0xb4>
 801b4ac:	2b20      	cmp	r3, #32
 801b4ae:	d000      	beq.n	801b4b2 <USBD_CDC_Setup+0x3e>
 801b4b0:	e094      	b.n	801b5dc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	88db      	ldrh	r3, [r3, #6]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d02b      	beq.n	801b512 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b4ba:	683b      	ldr	r3, [r7, #0]
 801b4bc:	781b      	ldrb	r3, [r3, #0]
 801b4be:	b25b      	sxtb	r3, r3
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	da12      	bge.n	801b4ea <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b4c4:	687a      	ldr	r2, [r7, #4]
 801b4c6:	23af      	movs	r3, #175	@ 0xaf
 801b4c8:	009b      	lsls	r3, r3, #2
 801b4ca:	58d3      	ldr	r3, [r2, r3]
 801b4cc:	689b      	ldr	r3, [r3, #8]
 801b4ce:	683a      	ldr	r2, [r7, #0]
 801b4d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b4d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b4d4:	683a      	ldr	r2, [r7, #0]
 801b4d6:	88d2      	ldrh	r2, [r2, #6]
 801b4d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b4da:	6939      	ldr	r1, [r7, #16]
 801b4dc:	683b      	ldr	r3, [r7, #0]
 801b4de:	88da      	ldrh	r2, [r3, #6]
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	0018      	movs	r0, r3
 801b4e4:	f001 fbaf 	bl	801cc46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b4e8:	e083      	b.n	801b5f2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b4ea:	683b      	ldr	r3, [r7, #0]
 801b4ec:	7859      	ldrb	r1, [r3, #1]
 801b4ee:	693a      	ldr	r2, [r7, #16]
 801b4f0:	2380      	movs	r3, #128	@ 0x80
 801b4f2:	009b      	lsls	r3, r3, #2
 801b4f4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b4f6:	683b      	ldr	r3, [r7, #0]
 801b4f8:	88db      	ldrh	r3, [r3, #6]
 801b4fa:	b2d9      	uxtb	r1, r3
 801b4fc:	693b      	ldr	r3, [r7, #16]
 801b4fe:	4a40      	ldr	r2, [pc, #256]	@ (801b600 <USBD_CDC_Setup+0x18c>)
 801b500:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b502:	6939      	ldr	r1, [r7, #16]
 801b504:	683b      	ldr	r3, [r7, #0]
 801b506:	88da      	ldrh	r2, [r3, #6]
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	0018      	movs	r0, r3
 801b50c:	f001 fbce 	bl	801ccac <USBD_CtlPrepareRx>
      break;
 801b510:	e06f      	b.n	801b5f2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b512:	687a      	ldr	r2, [r7, #4]
 801b514:	23af      	movs	r3, #175	@ 0xaf
 801b516:	009b      	lsls	r3, r3, #2
 801b518:	58d3      	ldr	r3, [r2, r3]
 801b51a:	689b      	ldr	r3, [r3, #8]
 801b51c:	683a      	ldr	r2, [r7, #0]
 801b51e:	7850      	ldrb	r0, [r2, #1]
 801b520:	6839      	ldr	r1, [r7, #0]
 801b522:	2200      	movs	r2, #0
 801b524:	4798      	blx	r3
      break;
 801b526:	e064      	b.n	801b5f2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b528:	683b      	ldr	r3, [r7, #0]
 801b52a:	785b      	ldrb	r3, [r3, #1]
 801b52c:	2b0b      	cmp	r3, #11
 801b52e:	d037      	beq.n	801b5a0 <USBD_CDC_Setup+0x12c>
 801b530:	dc47      	bgt.n	801b5c2 <USBD_CDC_Setup+0x14e>
 801b532:	2b00      	cmp	r3, #0
 801b534:	d002      	beq.n	801b53c <USBD_CDC_Setup+0xc8>
 801b536:	2b0a      	cmp	r3, #10
 801b538:	d019      	beq.n	801b56e <USBD_CDC_Setup+0xfa>
 801b53a:	e042      	b.n	801b5c2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b53c:	687a      	ldr	r2, [r7, #4]
 801b53e:	23a7      	movs	r3, #167	@ 0xa7
 801b540:	009b      	lsls	r3, r3, #2
 801b542:	5cd3      	ldrb	r3, [r2, r3]
 801b544:	2b03      	cmp	r3, #3
 801b546:	d107      	bne.n	801b558 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b548:	230c      	movs	r3, #12
 801b54a:	18f9      	adds	r1, r7, r3
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	2202      	movs	r2, #2
 801b550:	0018      	movs	r0, r3
 801b552:	f001 fb78 	bl	801cc46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b556:	e040      	b.n	801b5da <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b558:	683a      	ldr	r2, [r7, #0]
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	0011      	movs	r1, r2
 801b55e:	0018      	movs	r0, r3
 801b560:	f001 faf3 	bl	801cb4a <USBD_CtlError>
            ret = USBD_FAIL;
 801b564:	2317      	movs	r3, #23
 801b566:	18fb      	adds	r3, r7, r3
 801b568:	2202      	movs	r2, #2
 801b56a:	701a      	strb	r2, [r3, #0]
          break;
 801b56c:	e035      	b.n	801b5da <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b56e:	687a      	ldr	r2, [r7, #4]
 801b570:	23a7      	movs	r3, #167	@ 0xa7
 801b572:	009b      	lsls	r3, r3, #2
 801b574:	5cd3      	ldrb	r3, [r2, r3]
 801b576:	2b03      	cmp	r3, #3
 801b578:	d107      	bne.n	801b58a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b57a:	230f      	movs	r3, #15
 801b57c:	18f9      	adds	r1, r7, r3
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	2201      	movs	r2, #1
 801b582:	0018      	movs	r0, r3
 801b584:	f001 fb5f 	bl	801cc46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b588:	e027      	b.n	801b5da <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b58a:	683a      	ldr	r2, [r7, #0]
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	0011      	movs	r1, r2
 801b590:	0018      	movs	r0, r3
 801b592:	f001 fada 	bl	801cb4a <USBD_CtlError>
            ret = USBD_FAIL;
 801b596:	2317      	movs	r3, #23
 801b598:	18fb      	adds	r3, r7, r3
 801b59a:	2202      	movs	r2, #2
 801b59c:	701a      	strb	r2, [r3, #0]
          break;
 801b59e:	e01c      	b.n	801b5da <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b5a0:	687a      	ldr	r2, [r7, #4]
 801b5a2:	23a7      	movs	r3, #167	@ 0xa7
 801b5a4:	009b      	lsls	r3, r3, #2
 801b5a6:	5cd3      	ldrb	r3, [r2, r3]
 801b5a8:	2b03      	cmp	r3, #3
 801b5aa:	d015      	beq.n	801b5d8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b5ac:	683a      	ldr	r2, [r7, #0]
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	0011      	movs	r1, r2
 801b5b2:	0018      	movs	r0, r3
 801b5b4:	f001 fac9 	bl	801cb4a <USBD_CtlError>
            ret = USBD_FAIL;
 801b5b8:	2317      	movs	r3, #23
 801b5ba:	18fb      	adds	r3, r7, r3
 801b5bc:	2202      	movs	r2, #2
 801b5be:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b5c0:	e00a      	b.n	801b5d8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b5c2:	683a      	ldr	r2, [r7, #0]
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	0011      	movs	r1, r2
 801b5c8:	0018      	movs	r0, r3
 801b5ca:	f001 fabe 	bl	801cb4a <USBD_CtlError>
          ret = USBD_FAIL;
 801b5ce:	2317      	movs	r3, #23
 801b5d0:	18fb      	adds	r3, r7, r3
 801b5d2:	2202      	movs	r2, #2
 801b5d4:	701a      	strb	r2, [r3, #0]
          break;
 801b5d6:	e000      	b.n	801b5da <USBD_CDC_Setup+0x166>
          break;
 801b5d8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b5da:	e00a      	b.n	801b5f2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b5dc:	683a      	ldr	r2, [r7, #0]
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	0011      	movs	r1, r2
 801b5e2:	0018      	movs	r0, r3
 801b5e4:	f001 fab1 	bl	801cb4a <USBD_CtlError>
      ret = USBD_FAIL;
 801b5e8:	2317      	movs	r3, #23
 801b5ea:	18fb      	adds	r3, r7, r3
 801b5ec:	2202      	movs	r2, #2
 801b5ee:	701a      	strb	r2, [r3, #0]
      break;
 801b5f0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b5f2:	2317      	movs	r3, #23
 801b5f4:	18fb      	adds	r3, r7, r3
 801b5f6:	781b      	ldrb	r3, [r3, #0]
}
 801b5f8:	0018      	movs	r0, r3
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	b006      	add	sp, #24
 801b5fe:	bd80      	pop	{r7, pc}
 801b600:	00000201 	.word	0x00000201

0801b604 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b604:	b580      	push	{r7, lr}
 801b606:	b084      	sub	sp, #16
 801b608:	af00      	add	r7, sp, #0
 801b60a:	6078      	str	r0, [r7, #4]
 801b60c:	000a      	movs	r2, r1
 801b60e:	1cfb      	adds	r3, r7, #3
 801b610:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b612:	687a      	ldr	r2, [r7, #4]
 801b614:	23ae      	movs	r3, #174	@ 0xae
 801b616:	009b      	lsls	r3, r3, #2
 801b618:	58d3      	ldr	r3, [r2, r3]
 801b61a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b61c:	687a      	ldr	r2, [r7, #4]
 801b61e:	23b0      	movs	r3, #176	@ 0xb0
 801b620:	009b      	lsls	r3, r3, #2
 801b622:	58d3      	ldr	r3, [r2, r3]
 801b624:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b626:	687a      	ldr	r2, [r7, #4]
 801b628:	23ae      	movs	r3, #174	@ 0xae
 801b62a:	009b      	lsls	r3, r3, #2
 801b62c:	58d3      	ldr	r3, [r2, r3]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d03e      	beq.n	801b6b0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b632:	1cfb      	adds	r3, r7, #3
 801b634:	781a      	ldrb	r2, [r3, #0]
 801b636:	6879      	ldr	r1, [r7, #4]
 801b638:	0013      	movs	r3, r2
 801b63a:	009b      	lsls	r3, r3, #2
 801b63c:	189b      	adds	r3, r3, r2
 801b63e:	009b      	lsls	r3, r3, #2
 801b640:	18cb      	adds	r3, r1, r3
 801b642:	331c      	adds	r3, #28
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d02b      	beq.n	801b6a2 <USBD_CDC_DataIn+0x9e>
 801b64a:	1cfb      	adds	r3, r7, #3
 801b64c:	781a      	ldrb	r2, [r3, #0]
 801b64e:	6879      	ldr	r1, [r7, #4]
 801b650:	0013      	movs	r3, r2
 801b652:	009b      	lsls	r3, r3, #2
 801b654:	189b      	adds	r3, r3, r2
 801b656:	009b      	lsls	r3, r3, #2
 801b658:	18cb      	adds	r3, r1, r3
 801b65a:	331c      	adds	r3, #28
 801b65c:	6818      	ldr	r0, [r3, #0]
 801b65e:	1cfb      	adds	r3, r7, #3
 801b660:	781a      	ldrb	r2, [r3, #0]
 801b662:	68b9      	ldr	r1, [r7, #8]
 801b664:	0013      	movs	r3, r2
 801b666:	009b      	lsls	r3, r3, #2
 801b668:	189b      	adds	r3, r3, r2
 801b66a:	00db      	lsls	r3, r3, #3
 801b66c:	18cb      	adds	r3, r1, r3
 801b66e:	3338      	adds	r3, #56	@ 0x38
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	0019      	movs	r1, r3
 801b674:	f7e4 fe1c 	bl	80002b0 <__aeabi_uidivmod>
 801b678:	1e0b      	subs	r3, r1, #0
 801b67a:	d112      	bne.n	801b6a2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b67c:	1cfb      	adds	r3, r7, #3
 801b67e:	781a      	ldrb	r2, [r3, #0]
 801b680:	6879      	ldr	r1, [r7, #4]
 801b682:	0013      	movs	r3, r2
 801b684:	009b      	lsls	r3, r3, #2
 801b686:	189b      	adds	r3, r3, r2
 801b688:	009b      	lsls	r3, r3, #2
 801b68a:	18cb      	adds	r3, r1, r3
 801b68c:	331c      	adds	r3, #28
 801b68e:	2200      	movs	r2, #0
 801b690:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b692:	1cfb      	adds	r3, r7, #3
 801b694:	7819      	ldrb	r1, [r3, #0]
 801b696:	6878      	ldr	r0, [r7, #4]
 801b698:	2300      	movs	r3, #0
 801b69a:	2200      	movs	r2, #0
 801b69c:	f002 f82f 	bl	801d6fe <USBD_LL_Transmit>
 801b6a0:	e004      	b.n	801b6ac <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b6a2:	68fa      	ldr	r2, [r7, #12]
 801b6a4:	2385      	movs	r3, #133	@ 0x85
 801b6a6:	009b      	lsls	r3, r3, #2
 801b6a8:	2100      	movs	r1, #0
 801b6aa:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b6ac:	2300      	movs	r3, #0
 801b6ae:	e000      	b.n	801b6b2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b6b0:	2302      	movs	r3, #2
  }
}
 801b6b2:	0018      	movs	r0, r3
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	b004      	add	sp, #16
 801b6b8:	bd80      	pop	{r7, pc}

0801b6ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b6ba:	b580      	push	{r7, lr}
 801b6bc:	b084      	sub	sp, #16
 801b6be:	af00      	add	r7, sp, #0
 801b6c0:	6078      	str	r0, [r7, #4]
 801b6c2:	000a      	movs	r2, r1
 801b6c4:	1cfb      	adds	r3, r7, #3
 801b6c6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b6c8:	687a      	ldr	r2, [r7, #4]
 801b6ca:	23ae      	movs	r3, #174	@ 0xae
 801b6cc:	009b      	lsls	r3, r3, #2
 801b6ce:	58d3      	ldr	r3, [r2, r3]
 801b6d0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b6d2:	1cfb      	adds	r3, r7, #3
 801b6d4:	781a      	ldrb	r2, [r3, #0]
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	0011      	movs	r1, r2
 801b6da:	0018      	movs	r0, r3
 801b6dc:	f002 f87d 	bl	801d7da <USBD_LL_GetRxDataSize>
 801b6e0:	0001      	movs	r1, r0
 801b6e2:	68fa      	ldr	r2, [r7, #12]
 801b6e4:	2383      	movs	r3, #131	@ 0x83
 801b6e6:	009b      	lsls	r3, r3, #2
 801b6e8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b6ea:	687a      	ldr	r2, [r7, #4]
 801b6ec:	23ae      	movs	r3, #174	@ 0xae
 801b6ee:	009b      	lsls	r3, r3, #2
 801b6f0:	58d3      	ldr	r3, [r2, r3]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d011      	beq.n	801b71a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b6f6:	687a      	ldr	r2, [r7, #4]
 801b6f8:	23af      	movs	r3, #175	@ 0xaf
 801b6fa:	009b      	lsls	r3, r3, #2
 801b6fc:	58d3      	ldr	r3, [r2, r3]
 801b6fe:	68da      	ldr	r2, [r3, #12]
 801b700:	68f9      	ldr	r1, [r7, #12]
 801b702:	2381      	movs	r3, #129	@ 0x81
 801b704:	009b      	lsls	r3, r3, #2
 801b706:	58c8      	ldr	r0, [r1, r3]
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	2183      	movs	r1, #131	@ 0x83
 801b70c:	0089      	lsls	r1, r1, #2
 801b70e:	468c      	mov	ip, r1
 801b710:	4463      	add	r3, ip
 801b712:	0019      	movs	r1, r3
 801b714:	4790      	blx	r2

    return USBD_OK;
 801b716:	2300      	movs	r3, #0
 801b718:	e000      	b.n	801b71c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b71a:	2302      	movs	r3, #2
  }
}
 801b71c:	0018      	movs	r0, r3
 801b71e:	46bd      	mov	sp, r7
 801b720:	b004      	add	sp, #16
 801b722:	bd80      	pop	{r7, pc}

0801b724 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b724:	b590      	push	{r4, r7, lr}
 801b726:	b085      	sub	sp, #20
 801b728:	af00      	add	r7, sp, #0
 801b72a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b72c:	687a      	ldr	r2, [r7, #4]
 801b72e:	23ae      	movs	r3, #174	@ 0xae
 801b730:	009b      	lsls	r3, r3, #2
 801b732:	58d3      	ldr	r3, [r2, r3]
 801b734:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b736:	687a      	ldr	r2, [r7, #4]
 801b738:	23af      	movs	r3, #175	@ 0xaf
 801b73a:	009b      	lsls	r3, r3, #2
 801b73c:	58d3      	ldr	r3, [r2, r3]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d018      	beq.n	801b774 <USBD_CDC_EP0_RxReady+0x50>
 801b742:	68fa      	ldr	r2, [r7, #12]
 801b744:	2380      	movs	r3, #128	@ 0x80
 801b746:	009b      	lsls	r3, r3, #2
 801b748:	5cd3      	ldrb	r3, [r2, r3]
 801b74a:	2bff      	cmp	r3, #255	@ 0xff
 801b74c:	d012      	beq.n	801b774 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b74e:	687a      	ldr	r2, [r7, #4]
 801b750:	23af      	movs	r3, #175	@ 0xaf
 801b752:	009b      	lsls	r3, r3, #2
 801b754:	58d3      	ldr	r3, [r2, r3]
 801b756:	689b      	ldr	r3, [r3, #8]
 801b758:	68f9      	ldr	r1, [r7, #12]
 801b75a:	2280      	movs	r2, #128	@ 0x80
 801b75c:	0092      	lsls	r2, r2, #2
 801b75e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801b760:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801b762:	68fa      	ldr	r2, [r7, #12]
 801b764:	4c06      	ldr	r4, [pc, #24]	@ (801b780 <USBD_CDC_EP0_RxReady+0x5c>)
 801b766:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b768:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b76a:	68fa      	ldr	r2, [r7, #12]
 801b76c:	2380      	movs	r3, #128	@ 0x80
 801b76e:	009b      	lsls	r3, r3, #2
 801b770:	21ff      	movs	r1, #255	@ 0xff
 801b772:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801b774:	2300      	movs	r3, #0
}
 801b776:	0018      	movs	r0, r3
 801b778:	46bd      	mov	sp, r7
 801b77a:	b005      	add	sp, #20
 801b77c:	bd90      	pop	{r4, r7, pc}
 801b77e:	46c0      	nop			@ (mov r8, r8)
 801b780:	00000201 	.word	0x00000201

0801b784 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b784:	b580      	push	{r7, lr}
 801b786:	b082      	sub	sp, #8
 801b788:	af00      	add	r7, sp, #0
 801b78a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	2243      	movs	r2, #67	@ 0x43
 801b790:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801b792:	4b02      	ldr	r3, [pc, #8]	@ (801b79c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801b794:	0018      	movs	r0, r3
 801b796:	46bd      	mov	sp, r7
 801b798:	b002      	add	sp, #8
 801b79a:	bd80      	pop	{r7, pc}
 801b79c:	20000170 	.word	0x20000170

0801b7a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b7a0:	b580      	push	{r7, lr}
 801b7a2:	b082      	sub	sp, #8
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2243      	movs	r2, #67	@ 0x43
 801b7ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801b7ae:	4b02      	ldr	r3, [pc, #8]	@ (801b7b8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801b7b0:	0018      	movs	r0, r3
 801b7b2:	46bd      	mov	sp, r7
 801b7b4:	b002      	add	sp, #8
 801b7b6:	bd80      	pop	{r7, pc}
 801b7b8:	2000012c 	.word	0x2000012c

0801b7bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b7bc:	b580      	push	{r7, lr}
 801b7be:	b082      	sub	sp, #8
 801b7c0:	af00      	add	r7, sp, #0
 801b7c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	2243      	movs	r2, #67	@ 0x43
 801b7c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801b7ca:	4b02      	ldr	r3, [pc, #8]	@ (801b7d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801b7cc:	0018      	movs	r0, r3
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	b002      	add	sp, #8
 801b7d2:	bd80      	pop	{r7, pc}
 801b7d4:	200001b4 	.word	0x200001b4

0801b7d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b082      	sub	sp, #8
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	220a      	movs	r2, #10
 801b7e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801b7e6:	4b02      	ldr	r3, [pc, #8]	@ (801b7f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801b7e8:	0018      	movs	r0, r3
 801b7ea:	46bd      	mov	sp, r7
 801b7ec:	b002      	add	sp, #8
 801b7ee:	bd80      	pop	{r7, pc}
 801b7f0:	200000e8 	.word	0x200000e8

0801b7f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b084      	sub	sp, #16
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	6078      	str	r0, [r7, #4]
 801b7fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801b7fe:	200f      	movs	r0, #15
 801b800:	183b      	adds	r3, r7, r0
 801b802:	2202      	movs	r2, #2
 801b804:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801b806:	683b      	ldr	r3, [r7, #0]
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d007      	beq.n	801b81c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801b80c:	687a      	ldr	r2, [r7, #4]
 801b80e:	23af      	movs	r3, #175	@ 0xaf
 801b810:	009b      	lsls	r3, r3, #2
 801b812:	6839      	ldr	r1, [r7, #0]
 801b814:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b816:	183b      	adds	r3, r7, r0
 801b818:	2200      	movs	r2, #0
 801b81a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b81c:	230f      	movs	r3, #15
 801b81e:	18fb      	adds	r3, r7, r3
 801b820:	781b      	ldrb	r3, [r3, #0]
}
 801b822:	0018      	movs	r0, r3
 801b824:	46bd      	mov	sp, r7
 801b826:	b004      	add	sp, #16
 801b828:	bd80      	pop	{r7, pc}

0801b82a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b82a:	b580      	push	{r7, lr}
 801b82c:	b086      	sub	sp, #24
 801b82e:	af00      	add	r7, sp, #0
 801b830:	60f8      	str	r0, [r7, #12]
 801b832:	60b9      	str	r1, [r7, #8]
 801b834:	1dbb      	adds	r3, r7, #6
 801b836:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b838:	68fa      	ldr	r2, [r7, #12]
 801b83a:	23ae      	movs	r3, #174	@ 0xae
 801b83c:	009b      	lsls	r3, r3, #2
 801b83e:	58d3      	ldr	r3, [r2, r3]
 801b840:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b842:	697a      	ldr	r2, [r7, #20]
 801b844:	2382      	movs	r3, #130	@ 0x82
 801b846:	009b      	lsls	r3, r3, #2
 801b848:	68b9      	ldr	r1, [r7, #8]
 801b84a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b84c:	1dbb      	adds	r3, r7, #6
 801b84e:	8819      	ldrh	r1, [r3, #0]
 801b850:	697a      	ldr	r2, [r7, #20]
 801b852:	2384      	movs	r3, #132	@ 0x84
 801b854:	009b      	lsls	r3, r3, #2
 801b856:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b858:	2300      	movs	r3, #0
}
 801b85a:	0018      	movs	r0, r3
 801b85c:	46bd      	mov	sp, r7
 801b85e:	b006      	add	sp, #24
 801b860:	bd80      	pop	{r7, pc}

0801b862 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b862:	b580      	push	{r7, lr}
 801b864:	b084      	sub	sp, #16
 801b866:	af00      	add	r7, sp, #0
 801b868:	6078      	str	r0, [r7, #4]
 801b86a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b86c:	687a      	ldr	r2, [r7, #4]
 801b86e:	23ae      	movs	r3, #174	@ 0xae
 801b870:	009b      	lsls	r3, r3, #2
 801b872:	58d3      	ldr	r3, [r2, r3]
 801b874:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b876:	68fa      	ldr	r2, [r7, #12]
 801b878:	2381      	movs	r3, #129	@ 0x81
 801b87a:	009b      	lsls	r3, r3, #2
 801b87c:	6839      	ldr	r1, [r7, #0]
 801b87e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b880:	2300      	movs	r3, #0
}
 801b882:	0018      	movs	r0, r3
 801b884:	46bd      	mov	sp, r7
 801b886:	b004      	add	sp, #16
 801b888:	bd80      	pop	{r7, pc}

0801b88a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b88a:	b580      	push	{r7, lr}
 801b88c:	b084      	sub	sp, #16
 801b88e:	af00      	add	r7, sp, #0
 801b890:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b892:	687a      	ldr	r2, [r7, #4]
 801b894:	23ae      	movs	r3, #174	@ 0xae
 801b896:	009b      	lsls	r3, r3, #2
 801b898:	58d3      	ldr	r3, [r2, r3]
 801b89a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b89c:	687a      	ldr	r2, [r7, #4]
 801b89e:	23ae      	movs	r3, #174	@ 0xae
 801b8a0:	009b      	lsls	r3, r3, #2
 801b8a2:	58d3      	ldr	r3, [r2, r3]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d022      	beq.n	801b8ee <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b8a8:	68fa      	ldr	r2, [r7, #12]
 801b8aa:	2385      	movs	r3, #133	@ 0x85
 801b8ac:	009b      	lsls	r3, r3, #2
 801b8ae:	58d3      	ldr	r3, [r2, r3]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d11a      	bne.n	801b8ea <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b8b4:	68fa      	ldr	r2, [r7, #12]
 801b8b6:	2385      	movs	r3, #133	@ 0x85
 801b8b8:	009b      	lsls	r3, r3, #2
 801b8ba:	2101      	movs	r1, #1
 801b8bc:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b8be:	68fa      	ldr	r2, [r7, #12]
 801b8c0:	2384      	movs	r3, #132	@ 0x84
 801b8c2:	009b      	lsls	r3, r3, #2
 801b8c4:	58d2      	ldr	r2, [r2, r3]
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b8ca:	68fa      	ldr	r2, [r7, #12]
 801b8cc:	2382      	movs	r3, #130	@ 0x82
 801b8ce:	009b      	lsls	r3, r3, #2
 801b8d0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b8d2:	68fa      	ldr	r2, [r7, #12]
 801b8d4:	2384      	movs	r3, #132	@ 0x84
 801b8d6:	009b      	lsls	r3, r3, #2
 801b8d8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b8da:	b29b      	uxth	r3, r3
 801b8dc:	6878      	ldr	r0, [r7, #4]
 801b8de:	000a      	movs	r2, r1
 801b8e0:	2181      	movs	r1, #129	@ 0x81
 801b8e2:	f001 ff0c 	bl	801d6fe <USBD_LL_Transmit>

      return USBD_OK;
 801b8e6:	2300      	movs	r3, #0
 801b8e8:	e002      	b.n	801b8f0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b8ea:	2301      	movs	r3, #1
 801b8ec:	e000      	b.n	801b8f0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b8ee:	2302      	movs	r3, #2
  }
}
 801b8f0:	0018      	movs	r0, r3
 801b8f2:	46bd      	mov	sp, r7
 801b8f4:	b004      	add	sp, #16
 801b8f6:	bd80      	pop	{r7, pc}

0801b8f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b8f8:	b580      	push	{r7, lr}
 801b8fa:	b084      	sub	sp, #16
 801b8fc:	af00      	add	r7, sp, #0
 801b8fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b900:	687a      	ldr	r2, [r7, #4]
 801b902:	23ae      	movs	r3, #174	@ 0xae
 801b904:	009b      	lsls	r3, r3, #2
 801b906:	58d3      	ldr	r3, [r2, r3]
 801b908:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b90a:	687a      	ldr	r2, [r7, #4]
 801b90c:	23ae      	movs	r3, #174	@ 0xae
 801b90e:	009b      	lsls	r3, r3, #2
 801b910:	58d3      	ldr	r3, [r2, r3]
 801b912:	2b00      	cmp	r3, #0
 801b914:	d019      	beq.n	801b94a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	7c1b      	ldrb	r3, [r3, #16]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d10a      	bne.n	801b934 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b91e:	68fa      	ldr	r2, [r7, #12]
 801b920:	2381      	movs	r3, #129	@ 0x81
 801b922:	009b      	lsls	r3, r3, #2
 801b924:	58d2      	ldr	r2, [r2, r3]
 801b926:	2380      	movs	r3, #128	@ 0x80
 801b928:	009b      	lsls	r3, r3, #2
 801b92a:	6878      	ldr	r0, [r7, #4]
 801b92c:	2101      	movs	r1, #1
 801b92e:	f001 ff1d 	bl	801d76c <USBD_LL_PrepareReceive>
 801b932:	e008      	b.n	801b946 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b934:	68fa      	ldr	r2, [r7, #12]
 801b936:	2381      	movs	r3, #129	@ 0x81
 801b938:	009b      	lsls	r3, r3, #2
 801b93a:	58d2      	ldr	r2, [r2, r3]
 801b93c:	6878      	ldr	r0, [r7, #4]
 801b93e:	2340      	movs	r3, #64	@ 0x40
 801b940:	2101      	movs	r1, #1
 801b942:	f001 ff13 	bl	801d76c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b946:	2300      	movs	r3, #0
 801b948:	e000      	b.n	801b94c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b94a:	2302      	movs	r3, #2
  }
}
 801b94c:	0018      	movs	r0, r3
 801b94e:	46bd      	mov	sp, r7
 801b950:	b004      	add	sp, #16
 801b952:	bd80      	pop	{r7, pc}

0801b954 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b954:	b580      	push	{r7, lr}
 801b956:	b084      	sub	sp, #16
 801b958:	af00      	add	r7, sp, #0
 801b95a:	60f8      	str	r0, [r7, #12]
 801b95c:	60b9      	str	r1, [r7, #8]
 801b95e:	1dfb      	adds	r3, r7, #7
 801b960:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	2b00      	cmp	r3, #0
 801b966:	d101      	bne.n	801b96c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b968:	2302      	movs	r3, #2
 801b96a:	e020      	b.n	801b9ae <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b96c:	68fa      	ldr	r2, [r7, #12]
 801b96e:	23ad      	movs	r3, #173	@ 0xad
 801b970:	009b      	lsls	r3, r3, #2
 801b972:	58d3      	ldr	r3, [r2, r3]
 801b974:	2b00      	cmp	r3, #0
 801b976:	d004      	beq.n	801b982 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b978:	68fa      	ldr	r2, [r7, #12]
 801b97a:	23ad      	movs	r3, #173	@ 0xad
 801b97c:	009b      	lsls	r3, r3, #2
 801b97e:	2100      	movs	r1, #0
 801b980:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b982:	68bb      	ldr	r3, [r7, #8]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d004      	beq.n	801b992 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b988:	68fa      	ldr	r2, [r7, #12]
 801b98a:	23ac      	movs	r3, #172	@ 0xac
 801b98c:	009b      	lsls	r3, r3, #2
 801b98e:	68b9      	ldr	r1, [r7, #8]
 801b990:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b992:	68fa      	ldr	r2, [r7, #12]
 801b994:	23a7      	movs	r3, #167	@ 0xa7
 801b996:	009b      	lsls	r3, r3, #2
 801b998:	2101      	movs	r1, #1
 801b99a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b99c:	68fb      	ldr	r3, [r7, #12]
 801b99e:	1dfa      	adds	r2, r7, #7
 801b9a0:	7812      	ldrb	r2, [r2, #0]
 801b9a2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	0018      	movs	r0, r3
 801b9a8:	f001 fd0c 	bl	801d3c4 <USBD_LL_Init>

  return USBD_OK;
 801b9ac:	2300      	movs	r3, #0
}
 801b9ae:	0018      	movs	r0, r3
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	b004      	add	sp, #16
 801b9b4:	bd80      	pop	{r7, pc}

0801b9b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b9b6:	b580      	push	{r7, lr}
 801b9b8:	b084      	sub	sp, #16
 801b9ba:	af00      	add	r7, sp, #0
 801b9bc:	6078      	str	r0, [r7, #4]
 801b9be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801b9c0:	200f      	movs	r0, #15
 801b9c2:	183b      	adds	r3, r7, r0
 801b9c4:	2200      	movs	r2, #0
 801b9c6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801b9c8:	683b      	ldr	r3, [r7, #0]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d008      	beq.n	801b9e0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801b9ce:	687a      	ldr	r2, [r7, #4]
 801b9d0:	23ad      	movs	r3, #173	@ 0xad
 801b9d2:	009b      	lsls	r3, r3, #2
 801b9d4:	6839      	ldr	r1, [r7, #0]
 801b9d6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801b9d8:	183b      	adds	r3, r7, r0
 801b9da:	2200      	movs	r2, #0
 801b9dc:	701a      	strb	r2, [r3, #0]
 801b9de:	e003      	b.n	801b9e8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801b9e0:	230f      	movs	r3, #15
 801b9e2:	18fb      	adds	r3, r7, r3
 801b9e4:	2202      	movs	r2, #2
 801b9e6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801b9e8:	230f      	movs	r3, #15
 801b9ea:	18fb      	adds	r3, r7, r3
 801b9ec:	781b      	ldrb	r3, [r3, #0]
}
 801b9ee:	0018      	movs	r0, r3
 801b9f0:	46bd      	mov	sp, r7
 801b9f2:	b004      	add	sp, #16
 801b9f4:	bd80      	pop	{r7, pc}

0801b9f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b9f6:	b580      	push	{r7, lr}
 801b9f8:	b082      	sub	sp, #8
 801b9fa:	af00      	add	r7, sp, #0
 801b9fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	0018      	movs	r0, r3
 801ba02:	f001 fd43 	bl	801d48c <USBD_LL_Start>

  return USBD_OK;
 801ba06:	2300      	movs	r3, #0
}
 801ba08:	0018      	movs	r0, r3
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	b002      	add	sp, #8
 801ba0e:	bd80      	pop	{r7, pc}

0801ba10 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b082      	sub	sp, #8
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ba18:	2300      	movs	r3, #0
}
 801ba1a:	0018      	movs	r0, r3
 801ba1c:	46bd      	mov	sp, r7
 801ba1e:	b002      	add	sp, #8
 801ba20:	bd80      	pop	{r7, pc}

0801ba22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ba22:	b590      	push	{r4, r7, lr}
 801ba24:	b085      	sub	sp, #20
 801ba26:	af00      	add	r7, sp, #0
 801ba28:	6078      	str	r0, [r7, #4]
 801ba2a:	000a      	movs	r2, r1
 801ba2c:	1cfb      	adds	r3, r7, #3
 801ba2e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801ba30:	240f      	movs	r4, #15
 801ba32:	193b      	adds	r3, r7, r4
 801ba34:	2202      	movs	r2, #2
 801ba36:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801ba38:	687a      	ldr	r2, [r7, #4]
 801ba3a:	23ad      	movs	r3, #173	@ 0xad
 801ba3c:	009b      	lsls	r3, r3, #2
 801ba3e:	58d3      	ldr	r3, [r2, r3]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d00e      	beq.n	801ba62 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801ba44:	687a      	ldr	r2, [r7, #4]
 801ba46:	23ad      	movs	r3, #173	@ 0xad
 801ba48:	009b      	lsls	r3, r3, #2
 801ba4a:	58d3      	ldr	r3, [r2, r3]
 801ba4c:	681b      	ldr	r3, [r3, #0]
 801ba4e:	1cfa      	adds	r2, r7, #3
 801ba50:	7811      	ldrb	r1, [r2, #0]
 801ba52:	687a      	ldr	r2, [r7, #4]
 801ba54:	0010      	movs	r0, r2
 801ba56:	4798      	blx	r3
 801ba58:	1e03      	subs	r3, r0, #0
 801ba5a:	d102      	bne.n	801ba62 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801ba5c:	193b      	adds	r3, r7, r4
 801ba5e:	2200      	movs	r2, #0
 801ba60:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801ba62:	230f      	movs	r3, #15
 801ba64:	18fb      	adds	r3, r7, r3
 801ba66:	781b      	ldrb	r3, [r3, #0]
}
 801ba68:	0018      	movs	r0, r3
 801ba6a:	46bd      	mov	sp, r7
 801ba6c:	b005      	add	sp, #20
 801ba6e:	bd90      	pop	{r4, r7, pc}

0801ba70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b082      	sub	sp, #8
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
 801ba78:	000a      	movs	r2, r1
 801ba7a:	1cfb      	adds	r3, r7, #3
 801ba7c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801ba7e:	687a      	ldr	r2, [r7, #4]
 801ba80:	23ad      	movs	r3, #173	@ 0xad
 801ba82:	009b      	lsls	r3, r3, #2
 801ba84:	58d3      	ldr	r3, [r2, r3]
 801ba86:	685b      	ldr	r3, [r3, #4]
 801ba88:	1cfa      	adds	r2, r7, #3
 801ba8a:	7811      	ldrb	r1, [r2, #0]
 801ba8c:	687a      	ldr	r2, [r7, #4]
 801ba8e:	0010      	movs	r0, r2
 801ba90:	4798      	blx	r3

  return USBD_OK;
 801ba92:	2300      	movs	r3, #0
}
 801ba94:	0018      	movs	r0, r3
 801ba96:	46bd      	mov	sp, r7
 801ba98:	b002      	add	sp, #8
 801ba9a:	bd80      	pop	{r7, pc}

0801ba9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801ba9c:	b580      	push	{r7, lr}
 801ba9e:	b082      	sub	sp, #8
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	6078      	str	r0, [r7, #4]
 801baa4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	22aa      	movs	r2, #170	@ 0xaa
 801baaa:	0092      	lsls	r2, r2, #2
 801baac:	4694      	mov	ip, r2
 801baae:	4463      	add	r3, ip
 801bab0:	683a      	ldr	r2, [r7, #0]
 801bab2:	0011      	movs	r1, r2
 801bab4:	0018      	movs	r0, r3
 801bab6:	f001 f810 	bl	801cada <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801baba:	687a      	ldr	r2, [r7, #4]
 801babc:	23a5      	movs	r3, #165	@ 0xa5
 801babe:	009b      	lsls	r3, r3, #2
 801bac0:	2101      	movs	r1, #1
 801bac2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	4a23      	ldr	r2, [pc, #140]	@ (801bb54 <USBD_LL_SetupStage+0xb8>)
 801bac8:	5a9b      	ldrh	r3, [r3, r2]
 801baca:	0019      	movs	r1, r3
 801bacc:	687a      	ldr	r2, [r7, #4]
 801bace:	23a6      	movs	r3, #166	@ 0xa6
 801bad0:	009b      	lsls	r3, r3, #2
 801bad2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801bad4:	687a      	ldr	r2, [r7, #4]
 801bad6:	23aa      	movs	r3, #170	@ 0xaa
 801bad8:	009b      	lsls	r3, r3, #2
 801bada:	5cd3      	ldrb	r3, [r2, r3]
 801badc:	001a      	movs	r2, r3
 801bade:	231f      	movs	r3, #31
 801bae0:	4013      	ands	r3, r2
 801bae2:	2b02      	cmp	r3, #2
 801bae4:	d019      	beq.n	801bb1a <USBD_LL_SetupStage+0x7e>
 801bae6:	d822      	bhi.n	801bb2e <USBD_LL_SetupStage+0x92>
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d002      	beq.n	801baf2 <USBD_LL_SetupStage+0x56>
 801baec:	2b01      	cmp	r3, #1
 801baee:	d00a      	beq.n	801bb06 <USBD_LL_SetupStage+0x6a>
 801baf0:	e01d      	b.n	801bb2e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	22aa      	movs	r2, #170	@ 0xaa
 801baf6:	0092      	lsls	r2, r2, #2
 801baf8:	189a      	adds	r2, r3, r2
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	0011      	movs	r1, r2
 801bafe:	0018      	movs	r0, r3
 801bb00:	f000 fa10 	bl	801bf24 <USBD_StdDevReq>
      break;
 801bb04:	e020      	b.n	801bb48 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	22aa      	movs	r2, #170	@ 0xaa
 801bb0a:	0092      	lsls	r2, r2, #2
 801bb0c:	189a      	adds	r2, r3, r2
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	0011      	movs	r1, r2
 801bb12:	0018      	movs	r0, r3
 801bb14:	f000 fa78 	bl	801c008 <USBD_StdItfReq>
      break;
 801bb18:	e016      	b.n	801bb48 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	22aa      	movs	r2, #170	@ 0xaa
 801bb1e:	0092      	lsls	r2, r2, #2
 801bb20:	189a      	adds	r2, r3, r2
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	0011      	movs	r1, r2
 801bb26:	0018      	movs	r0, r3
 801bb28:	f000 fac5 	bl	801c0b6 <USBD_StdEPReq>
      break;
 801bb2c:	e00c      	b.n	801bb48 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801bb2e:	687a      	ldr	r2, [r7, #4]
 801bb30:	23aa      	movs	r3, #170	@ 0xaa
 801bb32:	009b      	lsls	r3, r3, #2
 801bb34:	5cd3      	ldrb	r3, [r2, r3]
 801bb36:	227f      	movs	r2, #127	@ 0x7f
 801bb38:	4393      	bics	r3, r2
 801bb3a:	b2da      	uxtb	r2, r3
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	0011      	movs	r1, r2
 801bb40:	0018      	movs	r0, r3
 801bb42:	f001 fd2a 	bl	801d59a <USBD_LL_StallEP>
      break;
 801bb46:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801bb48:	2300      	movs	r3, #0
}
 801bb4a:	0018      	movs	r0, r3
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	b002      	add	sp, #8
 801bb50:	bd80      	pop	{r7, pc}
 801bb52:	46c0      	nop			@ (mov r8, r8)
 801bb54:	000002ae 	.word	0x000002ae

0801bb58 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801bb58:	b580      	push	{r7, lr}
 801bb5a:	b086      	sub	sp, #24
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	60f8      	str	r0, [r7, #12]
 801bb60:	607a      	str	r2, [r7, #4]
 801bb62:	200b      	movs	r0, #11
 801bb64:	183b      	adds	r3, r7, r0
 801bb66:	1c0a      	adds	r2, r1, #0
 801bb68:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bb6a:	183b      	adds	r3, r7, r0
 801bb6c:	781b      	ldrb	r3, [r3, #0]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d154      	bne.n	801bc1c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801bb72:	68fb      	ldr	r3, [r7, #12]
 801bb74:	3355      	adds	r3, #85	@ 0x55
 801bb76:	33ff      	adds	r3, #255	@ 0xff
 801bb78:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801bb7a:	68fa      	ldr	r2, [r7, #12]
 801bb7c:	23a5      	movs	r3, #165	@ 0xa5
 801bb7e:	009b      	lsls	r3, r3, #2
 801bb80:	58d3      	ldr	r3, [r2, r3]
 801bb82:	2b03      	cmp	r3, #3
 801bb84:	d139      	bne.n	801bbfa <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801bb86:	697b      	ldr	r3, [r7, #20]
 801bb88:	68da      	ldr	r2, [r3, #12]
 801bb8a:	697b      	ldr	r3, [r7, #20]
 801bb8c:	691b      	ldr	r3, [r3, #16]
 801bb8e:	429a      	cmp	r2, r3
 801bb90:	d919      	bls.n	801bbc6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801bb92:	697b      	ldr	r3, [r7, #20]
 801bb94:	68da      	ldr	r2, [r3, #12]
 801bb96:	697b      	ldr	r3, [r7, #20]
 801bb98:	691b      	ldr	r3, [r3, #16]
 801bb9a:	1ad2      	subs	r2, r2, r3
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bba0:	697b      	ldr	r3, [r7, #20]
 801bba2:	68da      	ldr	r2, [r3, #12]
 801bba4:	697b      	ldr	r3, [r7, #20]
 801bba6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801bba8:	429a      	cmp	r2, r3
 801bbaa:	d203      	bcs.n	801bbb4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bbac:	697b      	ldr	r3, [r7, #20]
 801bbae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801bbb0:	b29b      	uxth	r3, r3
 801bbb2:	e002      	b.n	801bbba <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bbb4:	697b      	ldr	r3, [r7, #20]
 801bbb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801bbb8:	b29b      	uxth	r3, r3
 801bbba:	6879      	ldr	r1, [r7, #4]
 801bbbc:	68f8      	ldr	r0, [r7, #12]
 801bbbe:	001a      	movs	r2, r3
 801bbc0:	f001 f898 	bl	801ccf4 <USBD_CtlContinueRx>
 801bbc4:	e045      	b.n	801bc52 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801bbc6:	68fa      	ldr	r2, [r7, #12]
 801bbc8:	23ad      	movs	r3, #173	@ 0xad
 801bbca:	009b      	lsls	r3, r3, #2
 801bbcc:	58d3      	ldr	r3, [r2, r3]
 801bbce:	691b      	ldr	r3, [r3, #16]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d00d      	beq.n	801bbf0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bbd4:	68fa      	ldr	r2, [r7, #12]
 801bbd6:	23a7      	movs	r3, #167	@ 0xa7
 801bbd8:	009b      	lsls	r3, r3, #2
 801bbda:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801bbdc:	2b03      	cmp	r3, #3
 801bbde:	d107      	bne.n	801bbf0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801bbe0:	68fa      	ldr	r2, [r7, #12]
 801bbe2:	23ad      	movs	r3, #173	@ 0xad
 801bbe4:	009b      	lsls	r3, r3, #2
 801bbe6:	58d3      	ldr	r3, [r2, r3]
 801bbe8:	691b      	ldr	r3, [r3, #16]
 801bbea:	68fa      	ldr	r2, [r7, #12]
 801bbec:	0010      	movs	r0, r2
 801bbee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	0018      	movs	r0, r3
 801bbf4:	f001 f891 	bl	801cd1a <USBD_CtlSendStatus>
 801bbf8:	e02b      	b.n	801bc52 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801bbfa:	68fa      	ldr	r2, [r7, #12]
 801bbfc:	23a5      	movs	r3, #165	@ 0xa5
 801bbfe:	009b      	lsls	r3, r3, #2
 801bc00:	58d3      	ldr	r3, [r2, r3]
 801bc02:	2b05      	cmp	r3, #5
 801bc04:	d125      	bne.n	801bc52 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801bc06:	68fa      	ldr	r2, [r7, #12]
 801bc08:	23a5      	movs	r3, #165	@ 0xa5
 801bc0a:	009b      	lsls	r3, r3, #2
 801bc0c:	2100      	movs	r1, #0
 801bc0e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	2100      	movs	r1, #0
 801bc14:	0018      	movs	r0, r3
 801bc16:	f001 fcc0 	bl	801d59a <USBD_LL_StallEP>
 801bc1a:	e01a      	b.n	801bc52 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801bc1c:	68fa      	ldr	r2, [r7, #12]
 801bc1e:	23ad      	movs	r3, #173	@ 0xad
 801bc20:	009b      	lsls	r3, r3, #2
 801bc22:	58d3      	ldr	r3, [r2, r3]
 801bc24:	699b      	ldr	r3, [r3, #24]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d011      	beq.n	801bc4e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bc2a:	68fa      	ldr	r2, [r7, #12]
 801bc2c:	23a7      	movs	r3, #167	@ 0xa7
 801bc2e:	009b      	lsls	r3, r3, #2
 801bc30:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801bc32:	2b03      	cmp	r3, #3
 801bc34:	d10b      	bne.n	801bc4e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801bc36:	68fa      	ldr	r2, [r7, #12]
 801bc38:	23ad      	movs	r3, #173	@ 0xad
 801bc3a:	009b      	lsls	r3, r3, #2
 801bc3c:	58d3      	ldr	r3, [r2, r3]
 801bc3e:	699b      	ldr	r3, [r3, #24]
 801bc40:	220b      	movs	r2, #11
 801bc42:	18ba      	adds	r2, r7, r2
 801bc44:	7811      	ldrb	r1, [r2, #0]
 801bc46:	68fa      	ldr	r2, [r7, #12]
 801bc48:	0010      	movs	r0, r2
 801bc4a:	4798      	blx	r3
 801bc4c:	e001      	b.n	801bc52 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bc4e:	2302      	movs	r3, #2
 801bc50:	e000      	b.n	801bc54 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801bc52:	2300      	movs	r3, #0
}
 801bc54:	0018      	movs	r0, r3
 801bc56:	46bd      	mov	sp, r7
 801bc58:	b006      	add	sp, #24
 801bc5a:	bd80      	pop	{r7, pc}

0801bc5c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801bc5c:	b580      	push	{r7, lr}
 801bc5e:	b086      	sub	sp, #24
 801bc60:	af00      	add	r7, sp, #0
 801bc62:	60f8      	str	r0, [r7, #12]
 801bc64:	607a      	str	r2, [r7, #4]
 801bc66:	200b      	movs	r0, #11
 801bc68:	183b      	adds	r3, r7, r0
 801bc6a:	1c0a      	adds	r2, r1, #0
 801bc6c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bc6e:	183b      	adds	r3, r7, r0
 801bc70:	781b      	ldrb	r3, [r3, #0]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d000      	beq.n	801bc78 <USBD_LL_DataInStage+0x1c>
 801bc76:	e08e      	b.n	801bd96 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	3314      	adds	r3, #20
 801bc7c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801bc7e:	68fa      	ldr	r2, [r7, #12]
 801bc80:	23a5      	movs	r3, #165	@ 0xa5
 801bc82:	009b      	lsls	r3, r3, #2
 801bc84:	58d3      	ldr	r3, [r2, r3]
 801bc86:	2b02      	cmp	r3, #2
 801bc88:	d164      	bne.n	801bd54 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801bc8a:	697b      	ldr	r3, [r7, #20]
 801bc8c:	68da      	ldr	r2, [r3, #12]
 801bc8e:	697b      	ldr	r3, [r7, #20]
 801bc90:	691b      	ldr	r3, [r3, #16]
 801bc92:	429a      	cmp	r2, r3
 801bc94:	d915      	bls.n	801bcc2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801bc96:	697b      	ldr	r3, [r7, #20]
 801bc98:	68da      	ldr	r2, [r3, #12]
 801bc9a:	697b      	ldr	r3, [r7, #20]
 801bc9c:	691b      	ldr	r3, [r3, #16]
 801bc9e:	1ad2      	subs	r2, r2, r3
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801bca4:	697b      	ldr	r3, [r7, #20]
 801bca6:	68db      	ldr	r3, [r3, #12]
 801bca8:	b29a      	uxth	r2, r3
 801bcaa:	6879      	ldr	r1, [r7, #4]
 801bcac:	68fb      	ldr	r3, [r7, #12]
 801bcae:	0018      	movs	r0, r3
 801bcb0:	f000 ffe9 	bl	801cc86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bcb4:	68f8      	ldr	r0, [r7, #12]
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	2200      	movs	r2, #0
 801bcba:	2100      	movs	r1, #0
 801bcbc:	f001 fd56 	bl	801d76c <USBD_LL_PrepareReceive>
 801bcc0:	e059      	b.n	801bd76 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bcc2:	697b      	ldr	r3, [r7, #20]
 801bcc4:	689a      	ldr	r2, [r3, #8]
 801bcc6:	697b      	ldr	r3, [r7, #20]
 801bcc8:	691b      	ldr	r3, [r3, #16]
 801bcca:	0019      	movs	r1, r3
 801bccc:	0010      	movs	r0, r2
 801bcce:	f7e4 faef 	bl	80002b0 <__aeabi_uidivmod>
 801bcd2:	1e0b      	subs	r3, r1, #0
 801bcd4:	d11f      	bne.n	801bd16 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801bcd6:	697b      	ldr	r3, [r7, #20]
 801bcd8:	689a      	ldr	r2, [r3, #8]
 801bcda:	697b      	ldr	r3, [r7, #20]
 801bcdc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bcde:	429a      	cmp	r2, r3
 801bce0:	d319      	bcc.n	801bd16 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bce2:	697b      	ldr	r3, [r7, #20]
 801bce4:	689a      	ldr	r2, [r3, #8]
 801bce6:	68f9      	ldr	r1, [r7, #12]
 801bce8:	23a6      	movs	r3, #166	@ 0xa6
 801bcea:	009b      	lsls	r3, r3, #2
 801bcec:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801bcee:	429a      	cmp	r2, r3
 801bcf0:	d211      	bcs.n	801bd16 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bcf2:	68fb      	ldr	r3, [r7, #12]
 801bcf4:	2200      	movs	r2, #0
 801bcf6:	2100      	movs	r1, #0
 801bcf8:	0018      	movs	r0, r3
 801bcfa:	f000 ffc4 	bl	801cc86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bcfe:	68fa      	ldr	r2, [r7, #12]
 801bd00:	23a6      	movs	r3, #166	@ 0xa6
 801bd02:	009b      	lsls	r3, r3, #2
 801bd04:	2100      	movs	r1, #0
 801bd06:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bd08:	68f8      	ldr	r0, [r7, #12]
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	2200      	movs	r2, #0
 801bd0e:	2100      	movs	r1, #0
 801bd10:	f001 fd2c 	bl	801d76c <USBD_LL_PrepareReceive>
 801bd14:	e02f      	b.n	801bd76 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bd16:	68fa      	ldr	r2, [r7, #12]
 801bd18:	23ad      	movs	r3, #173	@ 0xad
 801bd1a:	009b      	lsls	r3, r3, #2
 801bd1c:	58d3      	ldr	r3, [r2, r3]
 801bd1e:	68db      	ldr	r3, [r3, #12]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d00d      	beq.n	801bd40 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bd24:	68fa      	ldr	r2, [r7, #12]
 801bd26:	23a7      	movs	r3, #167	@ 0xa7
 801bd28:	009b      	lsls	r3, r3, #2
 801bd2a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bd2c:	2b03      	cmp	r3, #3
 801bd2e:	d107      	bne.n	801bd40 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801bd30:	68fa      	ldr	r2, [r7, #12]
 801bd32:	23ad      	movs	r3, #173	@ 0xad
 801bd34:	009b      	lsls	r3, r3, #2
 801bd36:	58d3      	ldr	r3, [r2, r3]
 801bd38:	68db      	ldr	r3, [r3, #12]
 801bd3a:	68fa      	ldr	r2, [r7, #12]
 801bd3c:	0010      	movs	r0, r2
 801bd3e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	2180      	movs	r1, #128	@ 0x80
 801bd44:	0018      	movs	r0, r3
 801bd46:	f001 fc28 	bl	801d59a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	0018      	movs	r0, r3
 801bd4e:	f000 fff8 	bl	801cd42 <USBD_CtlReceiveStatus>
 801bd52:	e010      	b.n	801bd76 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bd54:	68fa      	ldr	r2, [r7, #12]
 801bd56:	23a5      	movs	r3, #165	@ 0xa5
 801bd58:	009b      	lsls	r3, r3, #2
 801bd5a:	58d3      	ldr	r3, [r2, r3]
 801bd5c:	2b04      	cmp	r3, #4
 801bd5e:	d005      	beq.n	801bd6c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801bd60:	68fa      	ldr	r2, [r7, #12]
 801bd62:	23a5      	movs	r3, #165	@ 0xa5
 801bd64:	009b      	lsls	r3, r3, #2
 801bd66:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d104      	bne.n	801bd76 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	2180      	movs	r1, #128	@ 0x80
 801bd70:	0018      	movs	r0, r3
 801bd72:	f001 fc12 	bl	801d59a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801bd76:	68fa      	ldr	r2, [r7, #12]
 801bd78:	23a8      	movs	r3, #168	@ 0xa8
 801bd7a:	009b      	lsls	r3, r3, #2
 801bd7c:	5cd3      	ldrb	r3, [r2, r3]
 801bd7e:	2b01      	cmp	r3, #1
 801bd80:	d124      	bne.n	801bdcc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	0018      	movs	r0, r3
 801bd86:	f7ff fe43 	bl	801ba10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801bd8a:	68fa      	ldr	r2, [r7, #12]
 801bd8c:	23a8      	movs	r3, #168	@ 0xa8
 801bd8e:	009b      	lsls	r3, r3, #2
 801bd90:	2100      	movs	r1, #0
 801bd92:	54d1      	strb	r1, [r2, r3]
 801bd94:	e01a      	b.n	801bdcc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801bd96:	68fa      	ldr	r2, [r7, #12]
 801bd98:	23ad      	movs	r3, #173	@ 0xad
 801bd9a:	009b      	lsls	r3, r3, #2
 801bd9c:	58d3      	ldr	r3, [r2, r3]
 801bd9e:	695b      	ldr	r3, [r3, #20]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d011      	beq.n	801bdc8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bda4:	68fa      	ldr	r2, [r7, #12]
 801bda6:	23a7      	movs	r3, #167	@ 0xa7
 801bda8:	009b      	lsls	r3, r3, #2
 801bdaa:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801bdac:	2b03      	cmp	r3, #3
 801bdae:	d10b      	bne.n	801bdc8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801bdb0:	68fa      	ldr	r2, [r7, #12]
 801bdb2:	23ad      	movs	r3, #173	@ 0xad
 801bdb4:	009b      	lsls	r3, r3, #2
 801bdb6:	58d3      	ldr	r3, [r2, r3]
 801bdb8:	695b      	ldr	r3, [r3, #20]
 801bdba:	220b      	movs	r2, #11
 801bdbc:	18ba      	adds	r2, r7, r2
 801bdbe:	7811      	ldrb	r1, [r2, #0]
 801bdc0:	68fa      	ldr	r2, [r7, #12]
 801bdc2:	0010      	movs	r0, r2
 801bdc4:	4798      	blx	r3
 801bdc6:	e001      	b.n	801bdcc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bdc8:	2302      	movs	r3, #2
 801bdca:	e000      	b.n	801bdce <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801bdcc:	2300      	movs	r3, #0
}
 801bdce:	0018      	movs	r0, r3
 801bdd0:	46bd      	mov	sp, r7
 801bdd2:	b006      	add	sp, #24
 801bdd4:	bd80      	pop	{r7, pc}

0801bdd6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801bdd6:	b580      	push	{r7, lr}
 801bdd8:	b082      	sub	sp, #8
 801bdda:	af00      	add	r7, sp, #0
 801bddc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bdde:	6878      	ldr	r0, [r7, #4]
 801bde0:	2340      	movs	r3, #64	@ 0x40
 801bde2:	2200      	movs	r2, #0
 801bde4:	2100      	movs	r1, #0
 801bde6:	f001 fb76 	bl	801d4d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801bdea:	687a      	ldr	r2, [r7, #4]
 801bdec:	23ac      	movs	r3, #172	@ 0xac
 801bdee:	005b      	lsls	r3, r3, #1
 801bdf0:	2101      	movs	r1, #1
 801bdf2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801bdf4:	687a      	ldr	r2, [r7, #4]
 801bdf6:	23b2      	movs	r3, #178	@ 0xb2
 801bdf8:	005b      	lsls	r3, r3, #1
 801bdfa:	2140      	movs	r1, #64	@ 0x40
 801bdfc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bdfe:	6878      	ldr	r0, [r7, #4]
 801be00:	2340      	movs	r3, #64	@ 0x40
 801be02:	2200      	movs	r2, #0
 801be04:	2180      	movs	r1, #128	@ 0x80
 801be06:	f001 fb66 	bl	801d4d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	2201      	movs	r2, #1
 801be0e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	2240      	movs	r2, #64	@ 0x40
 801be14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801be16:	687a      	ldr	r2, [r7, #4]
 801be18:	23a7      	movs	r3, #167	@ 0xa7
 801be1a:	009b      	lsls	r3, r3, #2
 801be1c:	2101      	movs	r1, #1
 801be1e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801be20:	687a      	ldr	r2, [r7, #4]
 801be22:	23a5      	movs	r3, #165	@ 0xa5
 801be24:	009b      	lsls	r3, r3, #2
 801be26:	2100      	movs	r1, #0
 801be28:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	2200      	movs	r2, #0
 801be2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801be30:	687a      	ldr	r2, [r7, #4]
 801be32:	23a9      	movs	r3, #169	@ 0xa9
 801be34:	009b      	lsls	r3, r3, #2
 801be36:	2100      	movs	r1, #0
 801be38:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801be3a:	687a      	ldr	r2, [r7, #4]
 801be3c:	23ae      	movs	r3, #174	@ 0xae
 801be3e:	009b      	lsls	r3, r3, #2
 801be40:	58d3      	ldr	r3, [r2, r3]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d00a      	beq.n	801be5c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801be46:	687a      	ldr	r2, [r7, #4]
 801be48:	23ad      	movs	r3, #173	@ 0xad
 801be4a:	009b      	lsls	r3, r3, #2
 801be4c:	58d3      	ldr	r3, [r2, r3]
 801be4e:	685a      	ldr	r2, [r3, #4]
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	685b      	ldr	r3, [r3, #4]
 801be54:	b2d9      	uxtb	r1, r3
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	0018      	movs	r0, r3
 801be5a:	4790      	blx	r2
  }

  return USBD_OK;
 801be5c:	2300      	movs	r3, #0
}
 801be5e:	0018      	movs	r0, r3
 801be60:	46bd      	mov	sp, r7
 801be62:	b002      	add	sp, #8
 801be64:	bd80      	pop	{r7, pc}

0801be66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801be66:	b580      	push	{r7, lr}
 801be68:	b082      	sub	sp, #8
 801be6a:	af00      	add	r7, sp, #0
 801be6c:	6078      	str	r0, [r7, #4]
 801be6e:	000a      	movs	r2, r1
 801be70:	1cfb      	adds	r3, r7, #3
 801be72:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	1cfa      	adds	r2, r7, #3
 801be78:	7812      	ldrb	r2, [r2, #0]
 801be7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801be7c:	2300      	movs	r3, #0
}
 801be7e:	0018      	movs	r0, r3
 801be80:	46bd      	mov	sp, r7
 801be82:	b002      	add	sp, #8
 801be84:	bd80      	pop	{r7, pc}
	...

0801be88 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801be88:	b580      	push	{r7, lr}
 801be8a:	b082      	sub	sp, #8
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801be90:	687a      	ldr	r2, [r7, #4]
 801be92:	23a7      	movs	r3, #167	@ 0xa7
 801be94:	009b      	lsls	r3, r3, #2
 801be96:	5cd1      	ldrb	r1, [r2, r3]
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	4a06      	ldr	r2, [pc, #24]	@ (801beb4 <USBD_LL_Suspend+0x2c>)
 801be9c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801be9e:	687a      	ldr	r2, [r7, #4]
 801bea0:	23a7      	movs	r3, #167	@ 0xa7
 801bea2:	009b      	lsls	r3, r3, #2
 801bea4:	2104      	movs	r1, #4
 801bea6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801bea8:	2300      	movs	r3, #0
}
 801beaa:	0018      	movs	r0, r3
 801beac:	46bd      	mov	sp, r7
 801beae:	b002      	add	sp, #8
 801beb0:	bd80      	pop	{r7, pc}
 801beb2:	46c0      	nop			@ (mov r8, r8)
 801beb4:	0000029d 	.word	0x0000029d

0801beb8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801beb8:	b580      	push	{r7, lr}
 801beba:	b082      	sub	sp, #8
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801bec0:	687a      	ldr	r2, [r7, #4]
 801bec2:	23a7      	movs	r3, #167	@ 0xa7
 801bec4:	009b      	lsls	r3, r3, #2
 801bec6:	5cd3      	ldrb	r3, [r2, r3]
 801bec8:	2b04      	cmp	r3, #4
 801beca:	d106      	bne.n	801beda <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	4a05      	ldr	r2, [pc, #20]	@ (801bee4 <USBD_LL_Resume+0x2c>)
 801bed0:	5c99      	ldrb	r1, [r3, r2]
 801bed2:	687a      	ldr	r2, [r7, #4]
 801bed4:	23a7      	movs	r3, #167	@ 0xa7
 801bed6:	009b      	lsls	r3, r3, #2
 801bed8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801beda:	2300      	movs	r3, #0
}
 801bedc:	0018      	movs	r0, r3
 801bede:	46bd      	mov	sp, r7
 801bee0:	b002      	add	sp, #8
 801bee2:	bd80      	pop	{r7, pc}
 801bee4:	0000029d 	.word	0x0000029d

0801bee8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b082      	sub	sp, #8
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bef0:	687a      	ldr	r2, [r7, #4]
 801bef2:	23a7      	movs	r3, #167	@ 0xa7
 801bef4:	009b      	lsls	r3, r3, #2
 801bef6:	5cd3      	ldrb	r3, [r2, r3]
 801bef8:	2b03      	cmp	r3, #3
 801befa:	d10e      	bne.n	801bf1a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801befc:	687a      	ldr	r2, [r7, #4]
 801befe:	23ad      	movs	r3, #173	@ 0xad
 801bf00:	009b      	lsls	r3, r3, #2
 801bf02:	58d3      	ldr	r3, [r2, r3]
 801bf04:	69db      	ldr	r3, [r3, #28]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d007      	beq.n	801bf1a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801bf0a:	687a      	ldr	r2, [r7, #4]
 801bf0c:	23ad      	movs	r3, #173	@ 0xad
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	58d3      	ldr	r3, [r2, r3]
 801bf12:	69db      	ldr	r3, [r3, #28]
 801bf14:	687a      	ldr	r2, [r7, #4]
 801bf16:	0010      	movs	r0, r2
 801bf18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bf1a:	2300      	movs	r3, #0
}
 801bf1c:	0018      	movs	r0, r3
 801bf1e:	46bd      	mov	sp, r7
 801bf20:	b002      	add	sp, #8
 801bf22:	bd80      	pop	{r7, pc}

0801bf24 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801bf24:	b580      	push	{r7, lr}
 801bf26:	b084      	sub	sp, #16
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	6078      	str	r0, [r7, #4]
 801bf2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bf2e:	230f      	movs	r3, #15
 801bf30:	18fb      	adds	r3, r7, r3
 801bf32:	2200      	movs	r2, #0
 801bf34:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bf36:	683b      	ldr	r3, [r7, #0]
 801bf38:	781b      	ldrb	r3, [r3, #0]
 801bf3a:	001a      	movs	r2, r3
 801bf3c:	2360      	movs	r3, #96	@ 0x60
 801bf3e:	4013      	ands	r3, r2
 801bf40:	2b40      	cmp	r3, #64	@ 0x40
 801bf42:	d004      	beq.n	801bf4e <USBD_StdDevReq+0x2a>
 801bf44:	d84f      	bhi.n	801bfe6 <USBD_StdDevReq+0xc2>
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d00b      	beq.n	801bf62 <USBD_StdDevReq+0x3e>
 801bf4a:	2b20      	cmp	r3, #32
 801bf4c:	d14b      	bne.n	801bfe6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bf4e:	687a      	ldr	r2, [r7, #4]
 801bf50:	23ad      	movs	r3, #173	@ 0xad
 801bf52:	009b      	lsls	r3, r3, #2
 801bf54:	58d3      	ldr	r3, [r2, r3]
 801bf56:	689b      	ldr	r3, [r3, #8]
 801bf58:	6839      	ldr	r1, [r7, #0]
 801bf5a:	687a      	ldr	r2, [r7, #4]
 801bf5c:	0010      	movs	r0, r2
 801bf5e:	4798      	blx	r3
      break;
 801bf60:	e048      	b.n	801bff4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bf62:	683b      	ldr	r3, [r7, #0]
 801bf64:	785b      	ldrb	r3, [r3, #1]
 801bf66:	2b09      	cmp	r3, #9
 801bf68:	d835      	bhi.n	801bfd6 <USBD_StdDevReq+0xb2>
 801bf6a:	009a      	lsls	r2, r3, #2
 801bf6c:	4b25      	ldr	r3, [pc, #148]	@ (801c004 <USBD_StdDevReq+0xe0>)
 801bf6e:	18d3      	adds	r3, r2, r3
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801bf74:	683a      	ldr	r2, [r7, #0]
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	0011      	movs	r1, r2
 801bf7a:	0018      	movs	r0, r3
 801bf7c:	f000 fa52 	bl	801c424 <USBD_GetDescriptor>
          break;
 801bf80:	e030      	b.n	801bfe4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801bf82:	683a      	ldr	r2, [r7, #0]
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	0011      	movs	r1, r2
 801bf88:	0018      	movs	r0, r3
 801bf8a:	f000 fbfd 	bl	801c788 <USBD_SetAddress>
          break;
 801bf8e:	e029      	b.n	801bfe4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801bf90:	683a      	ldr	r2, [r7, #0]
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	0011      	movs	r1, r2
 801bf96:	0018      	movs	r0, r3
 801bf98:	f000 fc4a 	bl	801c830 <USBD_SetConfig>
          break;
 801bf9c:	e022      	b.n	801bfe4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801bf9e:	683a      	ldr	r2, [r7, #0]
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	0011      	movs	r1, r2
 801bfa4:	0018      	movs	r0, r3
 801bfa6:	f000 fce7 	bl	801c978 <USBD_GetConfig>
          break;
 801bfaa:	e01b      	b.n	801bfe4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801bfac:	683a      	ldr	r2, [r7, #0]
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	0011      	movs	r1, r2
 801bfb2:	0018      	movs	r0, r3
 801bfb4:	f000 fd1b 	bl	801c9ee <USBD_GetStatus>
          break;
 801bfb8:	e014      	b.n	801bfe4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801bfba:	683a      	ldr	r2, [r7, #0]
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	0011      	movs	r1, r2
 801bfc0:	0018      	movs	r0, r3
 801bfc2:	f000 fd4e 	bl	801ca62 <USBD_SetFeature>
          break;
 801bfc6:	e00d      	b.n	801bfe4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801bfc8:	683a      	ldr	r2, [r7, #0]
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	0011      	movs	r1, r2
 801bfce:	0018      	movs	r0, r3
 801bfd0:	f000 fd5d 	bl	801ca8e <USBD_ClrFeature>
          break;
 801bfd4:	e006      	b.n	801bfe4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801bfd6:	683a      	ldr	r2, [r7, #0]
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	0011      	movs	r1, r2
 801bfdc:	0018      	movs	r0, r3
 801bfde:	f000 fdb4 	bl	801cb4a <USBD_CtlError>
          break;
 801bfe2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bfe4:	e006      	b.n	801bff4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801bfe6:	683a      	ldr	r2, [r7, #0]
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	0011      	movs	r1, r2
 801bfec:	0018      	movs	r0, r3
 801bfee:	f000 fdac 	bl	801cb4a <USBD_CtlError>
      break;
 801bff2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801bff4:	230f      	movs	r3, #15
 801bff6:	18fb      	adds	r3, r7, r3
 801bff8:	781b      	ldrb	r3, [r3, #0]
}
 801bffa:	0018      	movs	r0, r3
 801bffc:	46bd      	mov	sp, r7
 801bffe:	b004      	add	sp, #16
 801c000:	bd80      	pop	{r7, pc}
 801c002:	46c0      	nop			@ (mov r8, r8)
 801c004:	08025870 	.word	0x08025870

0801c008 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801c008:	b5b0      	push	{r4, r5, r7, lr}
 801c00a:	b084      	sub	sp, #16
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	6078      	str	r0, [r7, #4]
 801c010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c012:	230f      	movs	r3, #15
 801c014:	18fb      	adds	r3, r7, r3
 801c016:	2200      	movs	r2, #0
 801c018:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c01a:	683b      	ldr	r3, [r7, #0]
 801c01c:	781b      	ldrb	r3, [r3, #0]
 801c01e:	001a      	movs	r2, r3
 801c020:	2360      	movs	r3, #96	@ 0x60
 801c022:	4013      	ands	r3, r2
 801c024:	2b40      	cmp	r3, #64	@ 0x40
 801c026:	d004      	beq.n	801c032 <USBD_StdItfReq+0x2a>
 801c028:	d839      	bhi.n	801c09e <USBD_StdItfReq+0x96>
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d001      	beq.n	801c032 <USBD_StdItfReq+0x2a>
 801c02e:	2b20      	cmp	r3, #32
 801c030:	d135      	bne.n	801c09e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c032:	687a      	ldr	r2, [r7, #4]
 801c034:	23a7      	movs	r3, #167	@ 0xa7
 801c036:	009b      	lsls	r3, r3, #2
 801c038:	5cd3      	ldrb	r3, [r2, r3]
 801c03a:	3b01      	subs	r3, #1
 801c03c:	2b02      	cmp	r3, #2
 801c03e:	d825      	bhi.n	801c08c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c040:	683b      	ldr	r3, [r7, #0]
 801c042:	889b      	ldrh	r3, [r3, #4]
 801c044:	b2db      	uxtb	r3, r3
 801c046:	2b01      	cmp	r3, #1
 801c048:	d819      	bhi.n	801c07e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c04a:	687a      	ldr	r2, [r7, #4]
 801c04c:	23ad      	movs	r3, #173	@ 0xad
 801c04e:	009b      	lsls	r3, r3, #2
 801c050:	58d3      	ldr	r3, [r2, r3]
 801c052:	689b      	ldr	r3, [r3, #8]
 801c054:	250f      	movs	r5, #15
 801c056:	197c      	adds	r4, r7, r5
 801c058:	6839      	ldr	r1, [r7, #0]
 801c05a:	687a      	ldr	r2, [r7, #4]
 801c05c:	0010      	movs	r0, r2
 801c05e:	4798      	blx	r3
 801c060:	0003      	movs	r3, r0
 801c062:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801c064:	683b      	ldr	r3, [r7, #0]
 801c066:	88db      	ldrh	r3, [r3, #6]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d116      	bne.n	801c09a <USBD_StdItfReq+0x92>
 801c06c:	197b      	adds	r3, r7, r5
 801c06e:	781b      	ldrb	r3, [r3, #0]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d112      	bne.n	801c09a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	0018      	movs	r0, r3
 801c078:	f000 fe4f 	bl	801cd1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801c07c:	e00d      	b.n	801c09a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801c07e:	683a      	ldr	r2, [r7, #0]
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	0011      	movs	r1, r2
 801c084:	0018      	movs	r0, r3
 801c086:	f000 fd60 	bl	801cb4a <USBD_CtlError>
          break;
 801c08a:	e006      	b.n	801c09a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801c08c:	683a      	ldr	r2, [r7, #0]
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	0011      	movs	r1, r2
 801c092:	0018      	movs	r0, r3
 801c094:	f000 fd59 	bl	801cb4a <USBD_CtlError>
          break;
 801c098:	e000      	b.n	801c09c <USBD_StdItfReq+0x94>
          break;
 801c09a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c09c:	e006      	b.n	801c0ac <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801c09e:	683a      	ldr	r2, [r7, #0]
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	0011      	movs	r1, r2
 801c0a4:	0018      	movs	r0, r3
 801c0a6:	f000 fd50 	bl	801cb4a <USBD_CtlError>
      break;
 801c0aa:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801c0ac:	2300      	movs	r3, #0
}
 801c0ae:	0018      	movs	r0, r3
 801c0b0:	46bd      	mov	sp, r7
 801c0b2:	b004      	add	sp, #16
 801c0b4:	bdb0      	pop	{r4, r5, r7, pc}

0801c0b6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801c0b6:	b5b0      	push	{r4, r5, r7, lr}
 801c0b8:	b084      	sub	sp, #16
 801c0ba:	af00      	add	r7, sp, #0
 801c0bc:	6078      	str	r0, [r7, #4]
 801c0be:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801c0c0:	230f      	movs	r3, #15
 801c0c2:	18fb      	adds	r3, r7, r3
 801c0c4:	2200      	movs	r2, #0
 801c0c6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801c0c8:	683b      	ldr	r3, [r7, #0]
 801c0ca:	889a      	ldrh	r2, [r3, #4]
 801c0cc:	230e      	movs	r3, #14
 801c0ce:	18fb      	adds	r3, r7, r3
 801c0d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c0d2:	683b      	ldr	r3, [r7, #0]
 801c0d4:	781b      	ldrb	r3, [r3, #0]
 801c0d6:	001a      	movs	r2, r3
 801c0d8:	2360      	movs	r3, #96	@ 0x60
 801c0da:	4013      	ands	r3, r2
 801c0dc:	2b40      	cmp	r3, #64	@ 0x40
 801c0de:	d006      	beq.n	801c0ee <USBD_StdEPReq+0x38>
 801c0e0:	d900      	bls.n	801c0e4 <USBD_StdEPReq+0x2e>
 801c0e2:	e190      	b.n	801c406 <USBD_StdEPReq+0x350>
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d00c      	beq.n	801c102 <USBD_StdEPReq+0x4c>
 801c0e8:	2b20      	cmp	r3, #32
 801c0ea:	d000      	beq.n	801c0ee <USBD_StdEPReq+0x38>
 801c0ec:	e18b      	b.n	801c406 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c0ee:	687a      	ldr	r2, [r7, #4]
 801c0f0:	23ad      	movs	r3, #173	@ 0xad
 801c0f2:	009b      	lsls	r3, r3, #2
 801c0f4:	58d3      	ldr	r3, [r2, r3]
 801c0f6:	689b      	ldr	r3, [r3, #8]
 801c0f8:	6839      	ldr	r1, [r7, #0]
 801c0fa:	687a      	ldr	r2, [r7, #4]
 801c0fc:	0010      	movs	r0, r2
 801c0fe:	4798      	blx	r3
      break;
 801c100:	e188      	b.n	801c414 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801c102:	683b      	ldr	r3, [r7, #0]
 801c104:	781b      	ldrb	r3, [r3, #0]
 801c106:	001a      	movs	r2, r3
 801c108:	2360      	movs	r3, #96	@ 0x60
 801c10a:	4013      	ands	r3, r2
 801c10c:	2b20      	cmp	r3, #32
 801c10e:	d10f      	bne.n	801c130 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c110:	687a      	ldr	r2, [r7, #4]
 801c112:	23ad      	movs	r3, #173	@ 0xad
 801c114:	009b      	lsls	r3, r3, #2
 801c116:	58d3      	ldr	r3, [r2, r3]
 801c118:	689b      	ldr	r3, [r3, #8]
 801c11a:	250f      	movs	r5, #15
 801c11c:	197c      	adds	r4, r7, r5
 801c11e:	6839      	ldr	r1, [r7, #0]
 801c120:	687a      	ldr	r2, [r7, #4]
 801c122:	0010      	movs	r0, r2
 801c124:	4798      	blx	r3
 801c126:	0003      	movs	r3, r0
 801c128:	7023      	strb	r3, [r4, #0]

        return ret;
 801c12a:	197b      	adds	r3, r7, r5
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	e174      	b.n	801c41a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	785b      	ldrb	r3, [r3, #1]
 801c134:	2b03      	cmp	r3, #3
 801c136:	d007      	beq.n	801c148 <USBD_StdEPReq+0x92>
 801c138:	dd00      	ble.n	801c13c <USBD_StdEPReq+0x86>
 801c13a:	e15c      	b.n	801c3f6 <USBD_StdEPReq+0x340>
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d100      	bne.n	801c142 <USBD_StdEPReq+0x8c>
 801c140:	e092      	b.n	801c268 <USBD_StdEPReq+0x1b2>
 801c142:	2b01      	cmp	r3, #1
 801c144:	d04b      	beq.n	801c1de <USBD_StdEPReq+0x128>
 801c146:	e156      	b.n	801c3f6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801c148:	687a      	ldr	r2, [r7, #4]
 801c14a:	23a7      	movs	r3, #167	@ 0xa7
 801c14c:	009b      	lsls	r3, r3, #2
 801c14e:	5cd3      	ldrb	r3, [r2, r3]
 801c150:	2b02      	cmp	r3, #2
 801c152:	d002      	beq.n	801c15a <USBD_StdEPReq+0xa4>
 801c154:	2b03      	cmp	r3, #3
 801c156:	d01d      	beq.n	801c194 <USBD_StdEPReq+0xde>
 801c158:	e039      	b.n	801c1ce <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c15a:	220e      	movs	r2, #14
 801c15c:	18bb      	adds	r3, r7, r2
 801c15e:	781b      	ldrb	r3, [r3, #0]
 801c160:	2b00      	cmp	r3, #0
 801c162:	d010      	beq.n	801c186 <USBD_StdEPReq+0xd0>
 801c164:	18bb      	adds	r3, r7, r2
 801c166:	781b      	ldrb	r3, [r3, #0]
 801c168:	2b80      	cmp	r3, #128	@ 0x80
 801c16a:	d00c      	beq.n	801c186 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c16c:	18bb      	adds	r3, r7, r2
 801c16e:	781a      	ldrb	r2, [r3, #0]
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	0011      	movs	r1, r2
 801c174:	0018      	movs	r0, r3
 801c176:	f001 fa10 	bl	801d59a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	2180      	movs	r1, #128	@ 0x80
 801c17e:	0018      	movs	r0, r3
 801c180:	f001 fa0b 	bl	801d59a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c184:	e02a      	b.n	801c1dc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801c186:	683a      	ldr	r2, [r7, #0]
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	0011      	movs	r1, r2
 801c18c:	0018      	movs	r0, r3
 801c18e:	f000 fcdc 	bl	801cb4a <USBD_CtlError>
              break;
 801c192:	e023      	b.n	801c1dc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c194:	683b      	ldr	r3, [r7, #0]
 801c196:	885b      	ldrh	r3, [r3, #2]
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d113      	bne.n	801c1c4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801c19c:	220e      	movs	r2, #14
 801c19e:	18bb      	adds	r3, r7, r2
 801c1a0:	781b      	ldrb	r3, [r3, #0]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d00e      	beq.n	801c1c4 <USBD_StdEPReq+0x10e>
 801c1a6:	18bb      	adds	r3, r7, r2
 801c1a8:	781b      	ldrb	r3, [r3, #0]
 801c1aa:	2b80      	cmp	r3, #128	@ 0x80
 801c1ac:	d00a      	beq.n	801c1c4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c1ae:	683b      	ldr	r3, [r7, #0]
 801c1b0:	88db      	ldrh	r3, [r3, #6]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d106      	bne.n	801c1c4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801c1b6:	18bb      	adds	r3, r7, r2
 801c1b8:	781a      	ldrb	r2, [r3, #0]
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	0011      	movs	r1, r2
 801c1be:	0018      	movs	r0, r3
 801c1c0:	f001 f9eb 	bl	801d59a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	0018      	movs	r0, r3
 801c1c8:	f000 fda7 	bl	801cd1a <USBD_CtlSendStatus>

              break;
 801c1cc:	e006      	b.n	801c1dc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801c1ce:	683a      	ldr	r2, [r7, #0]
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	0011      	movs	r1, r2
 801c1d4:	0018      	movs	r0, r3
 801c1d6:	f000 fcb8 	bl	801cb4a <USBD_CtlError>
              break;
 801c1da:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c1dc:	e112      	b.n	801c404 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c1de:	687a      	ldr	r2, [r7, #4]
 801c1e0:	23a7      	movs	r3, #167	@ 0xa7
 801c1e2:	009b      	lsls	r3, r3, #2
 801c1e4:	5cd3      	ldrb	r3, [r2, r3]
 801c1e6:	2b02      	cmp	r3, #2
 801c1e8:	d002      	beq.n	801c1f0 <USBD_StdEPReq+0x13a>
 801c1ea:	2b03      	cmp	r3, #3
 801c1ec:	d01d      	beq.n	801c22a <USBD_StdEPReq+0x174>
 801c1ee:	e032      	b.n	801c256 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c1f0:	220e      	movs	r2, #14
 801c1f2:	18bb      	adds	r3, r7, r2
 801c1f4:	781b      	ldrb	r3, [r3, #0]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d010      	beq.n	801c21c <USBD_StdEPReq+0x166>
 801c1fa:	18bb      	adds	r3, r7, r2
 801c1fc:	781b      	ldrb	r3, [r3, #0]
 801c1fe:	2b80      	cmp	r3, #128	@ 0x80
 801c200:	d00c      	beq.n	801c21c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c202:	18bb      	adds	r3, r7, r2
 801c204:	781a      	ldrb	r2, [r3, #0]
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	0011      	movs	r1, r2
 801c20a:	0018      	movs	r0, r3
 801c20c:	f001 f9c5 	bl	801d59a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	2180      	movs	r1, #128	@ 0x80
 801c214:	0018      	movs	r0, r3
 801c216:	f001 f9c0 	bl	801d59a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c21a:	e024      	b.n	801c266 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c21c:	683a      	ldr	r2, [r7, #0]
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	0011      	movs	r1, r2
 801c222:	0018      	movs	r0, r3
 801c224:	f000 fc91 	bl	801cb4a <USBD_CtlError>
              break;
 801c228:	e01d      	b.n	801c266 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c22a:	683b      	ldr	r3, [r7, #0]
 801c22c:	885b      	ldrh	r3, [r3, #2]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d118      	bne.n	801c264 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c232:	210e      	movs	r1, #14
 801c234:	187b      	adds	r3, r7, r1
 801c236:	781b      	ldrb	r3, [r3, #0]
 801c238:	227f      	movs	r2, #127	@ 0x7f
 801c23a:	4013      	ands	r3, r2
 801c23c:	d006      	beq.n	801c24c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c23e:	187b      	adds	r3, r7, r1
 801c240:	781a      	ldrb	r2, [r3, #0]
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	0011      	movs	r1, r2
 801c246:	0018      	movs	r0, r3
 801c248:	f001 f9d2 	bl	801d5f0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	0018      	movs	r0, r3
 801c250:	f000 fd63 	bl	801cd1a <USBD_CtlSendStatus>
              }
              break;
 801c254:	e006      	b.n	801c264 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c256:	683a      	ldr	r2, [r7, #0]
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	0011      	movs	r1, r2
 801c25c:	0018      	movs	r0, r3
 801c25e:	f000 fc74 	bl	801cb4a <USBD_CtlError>
              break;
 801c262:	e000      	b.n	801c266 <USBD_StdEPReq+0x1b0>
              break;
 801c264:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c266:	e0cd      	b.n	801c404 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c268:	687a      	ldr	r2, [r7, #4]
 801c26a:	23a7      	movs	r3, #167	@ 0xa7
 801c26c:	009b      	lsls	r3, r3, #2
 801c26e:	5cd3      	ldrb	r3, [r2, r3]
 801c270:	2b02      	cmp	r3, #2
 801c272:	d002      	beq.n	801c27a <USBD_StdEPReq+0x1c4>
 801c274:	2b03      	cmp	r3, #3
 801c276:	d03c      	beq.n	801c2f2 <USBD_StdEPReq+0x23c>
 801c278:	e0b5      	b.n	801c3e6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c27a:	220e      	movs	r2, #14
 801c27c:	18bb      	adds	r3, r7, r2
 801c27e:	781b      	ldrb	r3, [r3, #0]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d00a      	beq.n	801c29a <USBD_StdEPReq+0x1e4>
 801c284:	18bb      	adds	r3, r7, r2
 801c286:	781b      	ldrb	r3, [r3, #0]
 801c288:	2b80      	cmp	r3, #128	@ 0x80
 801c28a:	d006      	beq.n	801c29a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c28c:	683a      	ldr	r2, [r7, #0]
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	0011      	movs	r1, r2
 801c292:	0018      	movs	r0, r3
 801c294:	f000 fc59 	bl	801cb4a <USBD_CtlError>
                break;
 801c298:	e0ac      	b.n	801c3f4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c29a:	220e      	movs	r2, #14
 801c29c:	18bb      	adds	r3, r7, r2
 801c29e:	781b      	ldrb	r3, [r3, #0]
 801c2a0:	b25b      	sxtb	r3, r3
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	da0c      	bge.n	801c2c0 <USBD_StdEPReq+0x20a>
 801c2a6:	18bb      	adds	r3, r7, r2
 801c2a8:	781b      	ldrb	r3, [r3, #0]
 801c2aa:	227f      	movs	r2, #127	@ 0x7f
 801c2ac:	401a      	ands	r2, r3
 801c2ae:	0013      	movs	r3, r2
 801c2b0:	009b      	lsls	r3, r3, #2
 801c2b2:	189b      	adds	r3, r3, r2
 801c2b4:	009b      	lsls	r3, r3, #2
 801c2b6:	3310      	adds	r3, #16
 801c2b8:	687a      	ldr	r2, [r7, #4]
 801c2ba:	18d3      	adds	r3, r2, r3
 801c2bc:	3304      	adds	r3, #4
 801c2be:	e00d      	b.n	801c2dc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c2c0:	230e      	movs	r3, #14
 801c2c2:	18fb      	adds	r3, r7, r3
 801c2c4:	781b      	ldrb	r3, [r3, #0]
 801c2c6:	227f      	movs	r2, #127	@ 0x7f
 801c2c8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c2ca:	0013      	movs	r3, r2
 801c2cc:	009b      	lsls	r3, r3, #2
 801c2ce:	189b      	adds	r3, r3, r2
 801c2d0:	009b      	lsls	r3, r3, #2
 801c2d2:	3351      	adds	r3, #81	@ 0x51
 801c2d4:	33ff      	adds	r3, #255	@ 0xff
 801c2d6:	687a      	ldr	r2, [r7, #4]
 801c2d8:	18d3      	adds	r3, r2, r3
 801c2da:	3304      	adds	r3, #4
 801c2dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	2200      	movs	r2, #0
 801c2e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c2e4:	68b9      	ldr	r1, [r7, #8]
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	2202      	movs	r2, #2
 801c2ea:	0018      	movs	r0, r3
 801c2ec:	f000 fcab 	bl	801cc46 <USBD_CtlSendData>
              break;
 801c2f0:	e080      	b.n	801c3f4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c2f2:	220e      	movs	r2, #14
 801c2f4:	18bb      	adds	r3, r7, r2
 801c2f6:	781b      	ldrb	r3, [r3, #0]
 801c2f8:	b25b      	sxtb	r3, r3
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	da14      	bge.n	801c328 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c2fe:	18bb      	adds	r3, r7, r2
 801c300:	781b      	ldrb	r3, [r3, #0]
 801c302:	220f      	movs	r2, #15
 801c304:	401a      	ands	r2, r3
 801c306:	6879      	ldr	r1, [r7, #4]
 801c308:	0013      	movs	r3, r2
 801c30a:	009b      	lsls	r3, r3, #2
 801c30c:	189b      	adds	r3, r3, r2
 801c30e:	009b      	lsls	r3, r3, #2
 801c310:	18cb      	adds	r3, r1, r3
 801c312:	3318      	adds	r3, #24
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d11e      	bne.n	801c358 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c31a:	683a      	ldr	r2, [r7, #0]
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	0011      	movs	r1, r2
 801c320:	0018      	movs	r0, r3
 801c322:	f000 fc12 	bl	801cb4a <USBD_CtlError>
                  break;
 801c326:	e065      	b.n	801c3f4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c328:	230e      	movs	r3, #14
 801c32a:	18fb      	adds	r3, r7, r3
 801c32c:	781b      	ldrb	r3, [r3, #0]
 801c32e:	220f      	movs	r2, #15
 801c330:	401a      	ands	r2, r3
 801c332:	6878      	ldr	r0, [r7, #4]
 801c334:	23ac      	movs	r3, #172	@ 0xac
 801c336:	0059      	lsls	r1, r3, #1
 801c338:	0013      	movs	r3, r2
 801c33a:	009b      	lsls	r3, r3, #2
 801c33c:	189b      	adds	r3, r3, r2
 801c33e:	009b      	lsls	r3, r3, #2
 801c340:	18c3      	adds	r3, r0, r3
 801c342:	185b      	adds	r3, r3, r1
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d106      	bne.n	801c358 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c34a:	683a      	ldr	r2, [r7, #0]
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	0011      	movs	r1, r2
 801c350:	0018      	movs	r0, r3
 801c352:	f000 fbfa 	bl	801cb4a <USBD_CtlError>
                  break;
 801c356:	e04d      	b.n	801c3f4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c358:	220e      	movs	r2, #14
 801c35a:	18bb      	adds	r3, r7, r2
 801c35c:	781b      	ldrb	r3, [r3, #0]
 801c35e:	b25b      	sxtb	r3, r3
 801c360:	2b00      	cmp	r3, #0
 801c362:	da0c      	bge.n	801c37e <USBD_StdEPReq+0x2c8>
 801c364:	18bb      	adds	r3, r7, r2
 801c366:	781b      	ldrb	r3, [r3, #0]
 801c368:	227f      	movs	r2, #127	@ 0x7f
 801c36a:	401a      	ands	r2, r3
 801c36c:	0013      	movs	r3, r2
 801c36e:	009b      	lsls	r3, r3, #2
 801c370:	189b      	adds	r3, r3, r2
 801c372:	009b      	lsls	r3, r3, #2
 801c374:	3310      	adds	r3, #16
 801c376:	687a      	ldr	r2, [r7, #4]
 801c378:	18d3      	adds	r3, r2, r3
 801c37a:	3304      	adds	r3, #4
 801c37c:	e00d      	b.n	801c39a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c37e:	230e      	movs	r3, #14
 801c380:	18fb      	adds	r3, r7, r3
 801c382:	781b      	ldrb	r3, [r3, #0]
 801c384:	227f      	movs	r2, #127	@ 0x7f
 801c386:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c388:	0013      	movs	r3, r2
 801c38a:	009b      	lsls	r3, r3, #2
 801c38c:	189b      	adds	r3, r3, r2
 801c38e:	009b      	lsls	r3, r3, #2
 801c390:	3351      	adds	r3, #81	@ 0x51
 801c392:	33ff      	adds	r3, #255	@ 0xff
 801c394:	687a      	ldr	r2, [r7, #4]
 801c396:	18d3      	adds	r3, r2, r3
 801c398:	3304      	adds	r3, #4
 801c39a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c39c:	220e      	movs	r2, #14
 801c39e:	18bb      	adds	r3, r7, r2
 801c3a0:	781b      	ldrb	r3, [r3, #0]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d003      	beq.n	801c3ae <USBD_StdEPReq+0x2f8>
 801c3a6:	18bb      	adds	r3, r7, r2
 801c3a8:	781b      	ldrb	r3, [r3, #0]
 801c3aa:	2b80      	cmp	r3, #128	@ 0x80
 801c3ac:	d103      	bne.n	801c3b6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c3ae:	68bb      	ldr	r3, [r7, #8]
 801c3b0:	2200      	movs	r2, #0
 801c3b2:	601a      	str	r2, [r3, #0]
 801c3b4:	e010      	b.n	801c3d8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c3b6:	230e      	movs	r3, #14
 801c3b8:	18fb      	adds	r3, r7, r3
 801c3ba:	781a      	ldrb	r2, [r3, #0]
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	0011      	movs	r1, r2
 801c3c0:	0018      	movs	r0, r3
 801c3c2:	f001 f940 	bl	801d646 <USBD_LL_IsStallEP>
 801c3c6:	1e03      	subs	r3, r0, #0
 801c3c8:	d003      	beq.n	801c3d2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c3ca:	68bb      	ldr	r3, [r7, #8]
 801c3cc:	2201      	movs	r2, #1
 801c3ce:	601a      	str	r2, [r3, #0]
 801c3d0:	e002      	b.n	801c3d8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c3d2:	68bb      	ldr	r3, [r7, #8]
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c3d8:	68b9      	ldr	r1, [r7, #8]
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	2202      	movs	r2, #2
 801c3de:	0018      	movs	r0, r3
 801c3e0:	f000 fc31 	bl	801cc46 <USBD_CtlSendData>
              break;
 801c3e4:	e006      	b.n	801c3f4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c3e6:	683a      	ldr	r2, [r7, #0]
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	0011      	movs	r1, r2
 801c3ec:	0018      	movs	r0, r3
 801c3ee:	f000 fbac 	bl	801cb4a <USBD_CtlError>
              break;
 801c3f2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c3f4:	e006      	b.n	801c404 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c3f6:	683a      	ldr	r2, [r7, #0]
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	0011      	movs	r1, r2
 801c3fc:	0018      	movs	r0, r3
 801c3fe:	f000 fba4 	bl	801cb4a <USBD_CtlError>
          break;
 801c402:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c404:	e006      	b.n	801c414 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c406:	683a      	ldr	r2, [r7, #0]
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	0011      	movs	r1, r2
 801c40c:	0018      	movs	r0, r3
 801c40e:	f000 fb9c 	bl	801cb4a <USBD_CtlError>
      break;
 801c412:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c414:	230f      	movs	r3, #15
 801c416:	18fb      	adds	r3, r7, r3
 801c418:	781b      	ldrb	r3, [r3, #0]
}
 801c41a:	0018      	movs	r0, r3
 801c41c:	46bd      	mov	sp, r7
 801c41e:	b004      	add	sp, #16
 801c420:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c424 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c424:	b580      	push	{r7, lr}
 801c426:	b084      	sub	sp, #16
 801c428:	af00      	add	r7, sp, #0
 801c42a:	6078      	str	r0, [r7, #4]
 801c42c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c42e:	2308      	movs	r3, #8
 801c430:	18fb      	adds	r3, r7, r3
 801c432:	2200      	movs	r2, #0
 801c434:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c436:	2300      	movs	r3, #0
 801c438:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c43a:	230b      	movs	r3, #11
 801c43c:	18fb      	adds	r3, r7, r3
 801c43e:	2200      	movs	r2, #0
 801c440:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c442:	683b      	ldr	r3, [r7, #0]
 801c444:	885b      	ldrh	r3, [r3, #2]
 801c446:	0a1b      	lsrs	r3, r3, #8
 801c448:	b29b      	uxth	r3, r3
 801c44a:	2b07      	cmp	r3, #7
 801c44c:	d900      	bls.n	801c450 <USBD_GetDescriptor+0x2c>
 801c44e:	e159      	b.n	801c704 <USBD_GetDescriptor+0x2e0>
 801c450:	009a      	lsls	r2, r3, #2
 801c452:	4bcb      	ldr	r3, [pc, #812]	@ (801c780 <USBD_GetDescriptor+0x35c>)
 801c454:	18d3      	adds	r3, r2, r3
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c45a:	687a      	ldr	r2, [r7, #4]
 801c45c:	23ac      	movs	r3, #172	@ 0xac
 801c45e:	009b      	lsls	r3, r3, #2
 801c460:	58d3      	ldr	r3, [r2, r3]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	687a      	ldr	r2, [r7, #4]
 801c466:	7c12      	ldrb	r2, [r2, #16]
 801c468:	2108      	movs	r1, #8
 801c46a:	1879      	adds	r1, r7, r1
 801c46c:	0010      	movs	r0, r2
 801c46e:	4798      	blx	r3
 801c470:	0003      	movs	r3, r0
 801c472:	60fb      	str	r3, [r7, #12]
      break;
 801c474:	e153      	b.n	801c71e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	7c1b      	ldrb	r3, [r3, #16]
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d10f      	bne.n	801c49e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c47e:	687a      	ldr	r2, [r7, #4]
 801c480:	23ad      	movs	r3, #173	@ 0xad
 801c482:	009b      	lsls	r3, r3, #2
 801c484:	58d3      	ldr	r3, [r2, r3]
 801c486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c488:	2208      	movs	r2, #8
 801c48a:	18ba      	adds	r2, r7, r2
 801c48c:	0010      	movs	r0, r2
 801c48e:	4798      	blx	r3
 801c490:	0003      	movs	r3, r0
 801c492:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	3301      	adds	r3, #1
 801c498:	2202      	movs	r2, #2
 801c49a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c49c:	e13f      	b.n	801c71e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c49e:	687a      	ldr	r2, [r7, #4]
 801c4a0:	23ad      	movs	r3, #173	@ 0xad
 801c4a2:	009b      	lsls	r3, r3, #2
 801c4a4:	58d3      	ldr	r3, [r2, r3]
 801c4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c4a8:	2208      	movs	r2, #8
 801c4aa:	18ba      	adds	r2, r7, r2
 801c4ac:	0010      	movs	r0, r2
 801c4ae:	4798      	blx	r3
 801c4b0:	0003      	movs	r3, r0
 801c4b2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	3301      	adds	r3, #1
 801c4b8:	2202      	movs	r2, #2
 801c4ba:	701a      	strb	r2, [r3, #0]
      break;
 801c4bc:	e12f      	b.n	801c71e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c4be:	683b      	ldr	r3, [r7, #0]
 801c4c0:	885b      	ldrh	r3, [r3, #2]
 801c4c2:	b2db      	uxtb	r3, r3
 801c4c4:	2b05      	cmp	r3, #5
 801c4c6:	d900      	bls.n	801c4ca <USBD_GetDescriptor+0xa6>
 801c4c8:	e0d0      	b.n	801c66c <USBD_GetDescriptor+0x248>
 801c4ca:	009a      	lsls	r2, r3, #2
 801c4cc:	4bad      	ldr	r3, [pc, #692]	@ (801c784 <USBD_GetDescriptor+0x360>)
 801c4ce:	18d3      	adds	r3, r2, r3
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c4d4:	687a      	ldr	r2, [r7, #4]
 801c4d6:	23ac      	movs	r3, #172	@ 0xac
 801c4d8:	009b      	lsls	r3, r3, #2
 801c4da:	58d3      	ldr	r3, [r2, r3]
 801c4dc:	685b      	ldr	r3, [r3, #4]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d00d      	beq.n	801c4fe <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c4e2:	687a      	ldr	r2, [r7, #4]
 801c4e4:	23ac      	movs	r3, #172	@ 0xac
 801c4e6:	009b      	lsls	r3, r3, #2
 801c4e8:	58d3      	ldr	r3, [r2, r3]
 801c4ea:	685b      	ldr	r3, [r3, #4]
 801c4ec:	687a      	ldr	r2, [r7, #4]
 801c4ee:	7c12      	ldrb	r2, [r2, #16]
 801c4f0:	2108      	movs	r1, #8
 801c4f2:	1879      	adds	r1, r7, r1
 801c4f4:	0010      	movs	r0, r2
 801c4f6:	4798      	blx	r3
 801c4f8:	0003      	movs	r3, r0
 801c4fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c4fc:	e0c3      	b.n	801c686 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c4fe:	683a      	ldr	r2, [r7, #0]
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	0011      	movs	r1, r2
 801c504:	0018      	movs	r0, r3
 801c506:	f000 fb20 	bl	801cb4a <USBD_CtlError>
            err++;
 801c50a:	210b      	movs	r1, #11
 801c50c:	187b      	adds	r3, r7, r1
 801c50e:	781a      	ldrb	r2, [r3, #0]
 801c510:	187b      	adds	r3, r7, r1
 801c512:	3201      	adds	r2, #1
 801c514:	701a      	strb	r2, [r3, #0]
          break;
 801c516:	e0b6      	b.n	801c686 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c518:	687a      	ldr	r2, [r7, #4]
 801c51a:	23ac      	movs	r3, #172	@ 0xac
 801c51c:	009b      	lsls	r3, r3, #2
 801c51e:	58d3      	ldr	r3, [r2, r3]
 801c520:	689b      	ldr	r3, [r3, #8]
 801c522:	2b00      	cmp	r3, #0
 801c524:	d00d      	beq.n	801c542 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c526:	687a      	ldr	r2, [r7, #4]
 801c528:	23ac      	movs	r3, #172	@ 0xac
 801c52a:	009b      	lsls	r3, r3, #2
 801c52c:	58d3      	ldr	r3, [r2, r3]
 801c52e:	689b      	ldr	r3, [r3, #8]
 801c530:	687a      	ldr	r2, [r7, #4]
 801c532:	7c12      	ldrb	r2, [r2, #16]
 801c534:	2108      	movs	r1, #8
 801c536:	1879      	adds	r1, r7, r1
 801c538:	0010      	movs	r0, r2
 801c53a:	4798      	blx	r3
 801c53c:	0003      	movs	r3, r0
 801c53e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c540:	e0a1      	b.n	801c686 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c542:	683a      	ldr	r2, [r7, #0]
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	0011      	movs	r1, r2
 801c548:	0018      	movs	r0, r3
 801c54a:	f000 fafe 	bl	801cb4a <USBD_CtlError>
            err++;
 801c54e:	210b      	movs	r1, #11
 801c550:	187b      	adds	r3, r7, r1
 801c552:	781a      	ldrb	r2, [r3, #0]
 801c554:	187b      	adds	r3, r7, r1
 801c556:	3201      	adds	r2, #1
 801c558:	701a      	strb	r2, [r3, #0]
          break;
 801c55a:	e094      	b.n	801c686 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c55c:	687a      	ldr	r2, [r7, #4]
 801c55e:	23ac      	movs	r3, #172	@ 0xac
 801c560:	009b      	lsls	r3, r3, #2
 801c562:	58d3      	ldr	r3, [r2, r3]
 801c564:	68db      	ldr	r3, [r3, #12]
 801c566:	2b00      	cmp	r3, #0
 801c568:	d00d      	beq.n	801c586 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c56a:	687a      	ldr	r2, [r7, #4]
 801c56c:	23ac      	movs	r3, #172	@ 0xac
 801c56e:	009b      	lsls	r3, r3, #2
 801c570:	58d3      	ldr	r3, [r2, r3]
 801c572:	68db      	ldr	r3, [r3, #12]
 801c574:	687a      	ldr	r2, [r7, #4]
 801c576:	7c12      	ldrb	r2, [r2, #16]
 801c578:	2108      	movs	r1, #8
 801c57a:	1879      	adds	r1, r7, r1
 801c57c:	0010      	movs	r0, r2
 801c57e:	4798      	blx	r3
 801c580:	0003      	movs	r3, r0
 801c582:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c584:	e07f      	b.n	801c686 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c586:	683a      	ldr	r2, [r7, #0]
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	0011      	movs	r1, r2
 801c58c:	0018      	movs	r0, r3
 801c58e:	f000 fadc 	bl	801cb4a <USBD_CtlError>
            err++;
 801c592:	210b      	movs	r1, #11
 801c594:	187b      	adds	r3, r7, r1
 801c596:	781a      	ldrb	r2, [r3, #0]
 801c598:	187b      	adds	r3, r7, r1
 801c59a:	3201      	adds	r2, #1
 801c59c:	701a      	strb	r2, [r3, #0]
          break;
 801c59e:	e072      	b.n	801c686 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c5a0:	687a      	ldr	r2, [r7, #4]
 801c5a2:	23ac      	movs	r3, #172	@ 0xac
 801c5a4:	009b      	lsls	r3, r3, #2
 801c5a6:	58d3      	ldr	r3, [r2, r3]
 801c5a8:	691b      	ldr	r3, [r3, #16]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d00d      	beq.n	801c5ca <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c5ae:	687a      	ldr	r2, [r7, #4]
 801c5b0:	23ac      	movs	r3, #172	@ 0xac
 801c5b2:	009b      	lsls	r3, r3, #2
 801c5b4:	58d3      	ldr	r3, [r2, r3]
 801c5b6:	691b      	ldr	r3, [r3, #16]
 801c5b8:	687a      	ldr	r2, [r7, #4]
 801c5ba:	7c12      	ldrb	r2, [r2, #16]
 801c5bc:	2108      	movs	r1, #8
 801c5be:	1879      	adds	r1, r7, r1
 801c5c0:	0010      	movs	r0, r2
 801c5c2:	4798      	blx	r3
 801c5c4:	0003      	movs	r3, r0
 801c5c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c5c8:	e05d      	b.n	801c686 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c5ca:	683a      	ldr	r2, [r7, #0]
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	0011      	movs	r1, r2
 801c5d0:	0018      	movs	r0, r3
 801c5d2:	f000 faba 	bl	801cb4a <USBD_CtlError>
            err++;
 801c5d6:	210b      	movs	r1, #11
 801c5d8:	187b      	adds	r3, r7, r1
 801c5da:	781a      	ldrb	r2, [r3, #0]
 801c5dc:	187b      	adds	r3, r7, r1
 801c5de:	3201      	adds	r2, #1
 801c5e0:	701a      	strb	r2, [r3, #0]
          break;
 801c5e2:	e050      	b.n	801c686 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c5e4:	687a      	ldr	r2, [r7, #4]
 801c5e6:	23ac      	movs	r3, #172	@ 0xac
 801c5e8:	009b      	lsls	r3, r3, #2
 801c5ea:	58d3      	ldr	r3, [r2, r3]
 801c5ec:	695b      	ldr	r3, [r3, #20]
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d00d      	beq.n	801c60e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c5f2:	687a      	ldr	r2, [r7, #4]
 801c5f4:	23ac      	movs	r3, #172	@ 0xac
 801c5f6:	009b      	lsls	r3, r3, #2
 801c5f8:	58d3      	ldr	r3, [r2, r3]
 801c5fa:	695b      	ldr	r3, [r3, #20]
 801c5fc:	687a      	ldr	r2, [r7, #4]
 801c5fe:	7c12      	ldrb	r2, [r2, #16]
 801c600:	2108      	movs	r1, #8
 801c602:	1879      	adds	r1, r7, r1
 801c604:	0010      	movs	r0, r2
 801c606:	4798      	blx	r3
 801c608:	0003      	movs	r3, r0
 801c60a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c60c:	e03b      	b.n	801c686 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c60e:	683a      	ldr	r2, [r7, #0]
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	0011      	movs	r1, r2
 801c614:	0018      	movs	r0, r3
 801c616:	f000 fa98 	bl	801cb4a <USBD_CtlError>
            err++;
 801c61a:	210b      	movs	r1, #11
 801c61c:	187b      	adds	r3, r7, r1
 801c61e:	781a      	ldrb	r2, [r3, #0]
 801c620:	187b      	adds	r3, r7, r1
 801c622:	3201      	adds	r2, #1
 801c624:	701a      	strb	r2, [r3, #0]
          break;
 801c626:	e02e      	b.n	801c686 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c628:	687a      	ldr	r2, [r7, #4]
 801c62a:	23ac      	movs	r3, #172	@ 0xac
 801c62c:	009b      	lsls	r3, r3, #2
 801c62e:	58d3      	ldr	r3, [r2, r3]
 801c630:	699b      	ldr	r3, [r3, #24]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d00d      	beq.n	801c652 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c636:	687a      	ldr	r2, [r7, #4]
 801c638:	23ac      	movs	r3, #172	@ 0xac
 801c63a:	009b      	lsls	r3, r3, #2
 801c63c:	58d3      	ldr	r3, [r2, r3]
 801c63e:	699b      	ldr	r3, [r3, #24]
 801c640:	687a      	ldr	r2, [r7, #4]
 801c642:	7c12      	ldrb	r2, [r2, #16]
 801c644:	2108      	movs	r1, #8
 801c646:	1879      	adds	r1, r7, r1
 801c648:	0010      	movs	r0, r2
 801c64a:	4798      	blx	r3
 801c64c:	0003      	movs	r3, r0
 801c64e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c650:	e019      	b.n	801c686 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c652:	683a      	ldr	r2, [r7, #0]
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	0011      	movs	r1, r2
 801c658:	0018      	movs	r0, r3
 801c65a:	f000 fa76 	bl	801cb4a <USBD_CtlError>
            err++;
 801c65e:	210b      	movs	r1, #11
 801c660:	187b      	adds	r3, r7, r1
 801c662:	781a      	ldrb	r2, [r3, #0]
 801c664:	187b      	adds	r3, r7, r1
 801c666:	3201      	adds	r2, #1
 801c668:	701a      	strb	r2, [r3, #0]
          break;
 801c66a:	e00c      	b.n	801c686 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c66c:	683a      	ldr	r2, [r7, #0]
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	0011      	movs	r1, r2
 801c672:	0018      	movs	r0, r3
 801c674:	f000 fa69 	bl	801cb4a <USBD_CtlError>
          err++;
 801c678:	210b      	movs	r1, #11
 801c67a:	187b      	adds	r3, r7, r1
 801c67c:	781a      	ldrb	r2, [r3, #0]
 801c67e:	187b      	adds	r3, r7, r1
 801c680:	3201      	adds	r2, #1
 801c682:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c684:	e04b      	b.n	801c71e <USBD_GetDescriptor+0x2fa>
 801c686:	e04a      	b.n	801c71e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	7c1b      	ldrb	r3, [r3, #16]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d10b      	bne.n	801c6a8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c690:	687a      	ldr	r2, [r7, #4]
 801c692:	23ad      	movs	r3, #173	@ 0xad
 801c694:	009b      	lsls	r3, r3, #2
 801c696:	58d3      	ldr	r3, [r2, r3]
 801c698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c69a:	2208      	movs	r2, #8
 801c69c:	18ba      	adds	r2, r7, r2
 801c69e:	0010      	movs	r0, r2
 801c6a0:	4798      	blx	r3
 801c6a2:	0003      	movs	r3, r0
 801c6a4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c6a6:	e03a      	b.n	801c71e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c6a8:	683a      	ldr	r2, [r7, #0]
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	0011      	movs	r1, r2
 801c6ae:	0018      	movs	r0, r3
 801c6b0:	f000 fa4b 	bl	801cb4a <USBD_CtlError>
        err++;
 801c6b4:	210b      	movs	r1, #11
 801c6b6:	187b      	adds	r3, r7, r1
 801c6b8:	781a      	ldrb	r2, [r3, #0]
 801c6ba:	187b      	adds	r3, r7, r1
 801c6bc:	3201      	adds	r2, #1
 801c6be:	701a      	strb	r2, [r3, #0]
      break;
 801c6c0:	e02d      	b.n	801c71e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	7c1b      	ldrb	r3, [r3, #16]
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d10f      	bne.n	801c6ea <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c6ca:	687a      	ldr	r2, [r7, #4]
 801c6cc:	23ad      	movs	r3, #173	@ 0xad
 801c6ce:	009b      	lsls	r3, r3, #2
 801c6d0:	58d3      	ldr	r3, [r2, r3]
 801c6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c6d4:	2208      	movs	r2, #8
 801c6d6:	18ba      	adds	r2, r7, r2
 801c6d8:	0010      	movs	r0, r2
 801c6da:	4798      	blx	r3
 801c6dc:	0003      	movs	r3, r0
 801c6de:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	3301      	adds	r3, #1
 801c6e4:	2207      	movs	r2, #7
 801c6e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c6e8:	e019      	b.n	801c71e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c6ea:	683a      	ldr	r2, [r7, #0]
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	0011      	movs	r1, r2
 801c6f0:	0018      	movs	r0, r3
 801c6f2:	f000 fa2a 	bl	801cb4a <USBD_CtlError>
        err++;
 801c6f6:	210b      	movs	r1, #11
 801c6f8:	187b      	adds	r3, r7, r1
 801c6fa:	781a      	ldrb	r2, [r3, #0]
 801c6fc:	187b      	adds	r3, r7, r1
 801c6fe:	3201      	adds	r2, #1
 801c700:	701a      	strb	r2, [r3, #0]
      break;
 801c702:	e00c      	b.n	801c71e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c704:	683a      	ldr	r2, [r7, #0]
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	0011      	movs	r1, r2
 801c70a:	0018      	movs	r0, r3
 801c70c:	f000 fa1d 	bl	801cb4a <USBD_CtlError>
      err++;
 801c710:	210b      	movs	r1, #11
 801c712:	187b      	adds	r3, r7, r1
 801c714:	781a      	ldrb	r2, [r3, #0]
 801c716:	187b      	adds	r3, r7, r1
 801c718:	3201      	adds	r2, #1
 801c71a:	701a      	strb	r2, [r3, #0]
      break;
 801c71c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c71e:	230b      	movs	r3, #11
 801c720:	18fb      	adds	r3, r7, r3
 801c722:	781b      	ldrb	r3, [r3, #0]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d127      	bne.n	801c778 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c728:	2108      	movs	r1, #8
 801c72a:	187b      	adds	r3, r7, r1
 801c72c:	881b      	ldrh	r3, [r3, #0]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d019      	beq.n	801c766 <USBD_GetDescriptor+0x342>
 801c732:	683b      	ldr	r3, [r7, #0]
 801c734:	88db      	ldrh	r3, [r3, #6]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d015      	beq.n	801c766 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801c73a:	683b      	ldr	r3, [r7, #0]
 801c73c:	88da      	ldrh	r2, [r3, #6]
 801c73e:	187b      	adds	r3, r7, r1
 801c740:	881b      	ldrh	r3, [r3, #0]
 801c742:	1c18      	adds	r0, r3, #0
 801c744:	1c11      	adds	r1, r2, #0
 801c746:	b28a      	uxth	r2, r1
 801c748:	b283      	uxth	r3, r0
 801c74a:	429a      	cmp	r2, r3
 801c74c:	d900      	bls.n	801c750 <USBD_GetDescriptor+0x32c>
 801c74e:	1c01      	adds	r1, r0, #0
 801c750:	b28a      	uxth	r2, r1
 801c752:	2108      	movs	r1, #8
 801c754:	187b      	adds	r3, r7, r1
 801c756:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c758:	187b      	adds	r3, r7, r1
 801c75a:	881a      	ldrh	r2, [r3, #0]
 801c75c:	68f9      	ldr	r1, [r7, #12]
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	0018      	movs	r0, r3
 801c762:	f000 fa70 	bl	801cc46 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801c766:	683b      	ldr	r3, [r7, #0]
 801c768:	88db      	ldrh	r3, [r3, #6]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d105      	bne.n	801c77a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	0018      	movs	r0, r3
 801c772:	f000 fad2 	bl	801cd1a <USBD_CtlSendStatus>
 801c776:	e000      	b.n	801c77a <USBD_GetDescriptor+0x356>
    return;
 801c778:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c77a:	46bd      	mov	sp, r7
 801c77c:	b004      	add	sp, #16
 801c77e:	bd80      	pop	{r7, pc}
 801c780:	08025898 	.word	0x08025898
 801c784:	080258b8 	.word	0x080258b8

0801c788 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c788:	b590      	push	{r4, r7, lr}
 801c78a:	b085      	sub	sp, #20
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
 801c790:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c792:	683b      	ldr	r3, [r7, #0]
 801c794:	889b      	ldrh	r3, [r3, #4]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d13d      	bne.n	801c816 <USBD_SetAddress+0x8e>
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	88db      	ldrh	r3, [r3, #6]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d139      	bne.n	801c816 <USBD_SetAddress+0x8e>
 801c7a2:	683b      	ldr	r3, [r7, #0]
 801c7a4:	885b      	ldrh	r3, [r3, #2]
 801c7a6:	2b7f      	cmp	r3, #127	@ 0x7f
 801c7a8:	d835      	bhi.n	801c816 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c7aa:	683b      	ldr	r3, [r7, #0]
 801c7ac:	885b      	ldrh	r3, [r3, #2]
 801c7ae:	b2da      	uxtb	r2, r3
 801c7b0:	230f      	movs	r3, #15
 801c7b2:	18fb      	adds	r3, r7, r3
 801c7b4:	217f      	movs	r1, #127	@ 0x7f
 801c7b6:	400a      	ands	r2, r1
 801c7b8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c7ba:	687a      	ldr	r2, [r7, #4]
 801c7bc:	23a7      	movs	r3, #167	@ 0xa7
 801c7be:	009b      	lsls	r3, r3, #2
 801c7c0:	5cd3      	ldrb	r3, [r2, r3]
 801c7c2:	2b03      	cmp	r3, #3
 801c7c4:	d106      	bne.n	801c7d4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801c7c6:	683a      	ldr	r2, [r7, #0]
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	0011      	movs	r1, r2
 801c7cc:	0018      	movs	r0, r3
 801c7ce:	f000 f9bc 	bl	801cb4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c7d2:	e027      	b.n	801c824 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	240f      	movs	r4, #15
 801c7d8:	193a      	adds	r2, r7, r4
 801c7da:	4914      	ldr	r1, [pc, #80]	@ (801c82c <USBD_SetAddress+0xa4>)
 801c7dc:	7812      	ldrb	r2, [r2, #0]
 801c7de:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c7e0:	193b      	adds	r3, r7, r4
 801c7e2:	781a      	ldrb	r2, [r3, #0]
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	0011      	movs	r1, r2
 801c7e8:	0018      	movs	r0, r3
 801c7ea:	f000 ff5d 	bl	801d6a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	0018      	movs	r0, r3
 801c7f2:	f000 fa92 	bl	801cd1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c7f6:	193b      	adds	r3, r7, r4
 801c7f8:	781b      	ldrb	r3, [r3, #0]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d005      	beq.n	801c80a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c7fe:	687a      	ldr	r2, [r7, #4]
 801c800:	23a7      	movs	r3, #167	@ 0xa7
 801c802:	009b      	lsls	r3, r3, #2
 801c804:	2102      	movs	r1, #2
 801c806:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c808:	e00c      	b.n	801c824 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c80a:	687a      	ldr	r2, [r7, #4]
 801c80c:	23a7      	movs	r3, #167	@ 0xa7
 801c80e:	009b      	lsls	r3, r3, #2
 801c810:	2101      	movs	r1, #1
 801c812:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c814:	e006      	b.n	801c824 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c816:	683a      	ldr	r2, [r7, #0]
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	0011      	movs	r1, r2
 801c81c:	0018      	movs	r0, r3
 801c81e:	f000 f994 	bl	801cb4a <USBD_CtlError>
  }
}
 801c822:	46c0      	nop			@ (mov r8, r8)
 801c824:	46c0      	nop			@ (mov r8, r8)
 801c826:	46bd      	mov	sp, r7
 801c828:	b005      	add	sp, #20
 801c82a:	bd90      	pop	{r4, r7, pc}
 801c82c:	0000029e 	.word	0x0000029e

0801c830 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c830:	b580      	push	{r7, lr}
 801c832:	b082      	sub	sp, #8
 801c834:	af00      	add	r7, sp, #0
 801c836:	6078      	str	r0, [r7, #4]
 801c838:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c83a:	683b      	ldr	r3, [r7, #0]
 801c83c:	885b      	ldrh	r3, [r3, #2]
 801c83e:	b2da      	uxtb	r2, r3
 801c840:	4b4c      	ldr	r3, [pc, #304]	@ (801c974 <USBD_SetConfig+0x144>)
 801c842:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c844:	4b4b      	ldr	r3, [pc, #300]	@ (801c974 <USBD_SetConfig+0x144>)
 801c846:	781b      	ldrb	r3, [r3, #0]
 801c848:	2b01      	cmp	r3, #1
 801c84a:	d906      	bls.n	801c85a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c84c:	683a      	ldr	r2, [r7, #0]
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	0011      	movs	r1, r2
 801c852:	0018      	movs	r0, r3
 801c854:	f000 f979 	bl	801cb4a <USBD_CtlError>
 801c858:	e088      	b.n	801c96c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c85a:	687a      	ldr	r2, [r7, #4]
 801c85c:	23a7      	movs	r3, #167	@ 0xa7
 801c85e:	009b      	lsls	r3, r3, #2
 801c860:	5cd3      	ldrb	r3, [r2, r3]
 801c862:	2b02      	cmp	r3, #2
 801c864:	d002      	beq.n	801c86c <USBD_SetConfig+0x3c>
 801c866:	2b03      	cmp	r3, #3
 801c868:	d029      	beq.n	801c8be <USBD_SetConfig+0x8e>
 801c86a:	e071      	b.n	801c950 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c86c:	4b41      	ldr	r3, [pc, #260]	@ (801c974 <USBD_SetConfig+0x144>)
 801c86e:	781b      	ldrb	r3, [r3, #0]
 801c870:	2b00      	cmp	r3, #0
 801c872:	d01f      	beq.n	801c8b4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c874:	4b3f      	ldr	r3, [pc, #252]	@ (801c974 <USBD_SetConfig+0x144>)
 801c876:	781b      	ldrb	r3, [r3, #0]
 801c878:	001a      	movs	r2, r3
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c87e:	687a      	ldr	r2, [r7, #4]
 801c880:	23a7      	movs	r3, #167	@ 0xa7
 801c882:	009b      	lsls	r3, r3, #2
 801c884:	2103      	movs	r1, #3
 801c886:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c888:	4b3a      	ldr	r3, [pc, #232]	@ (801c974 <USBD_SetConfig+0x144>)
 801c88a:	781a      	ldrb	r2, [r3, #0]
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	0011      	movs	r1, r2
 801c890:	0018      	movs	r0, r3
 801c892:	f7ff f8c6 	bl	801ba22 <USBD_SetClassConfig>
 801c896:	0003      	movs	r3, r0
 801c898:	2b02      	cmp	r3, #2
 801c89a:	d106      	bne.n	801c8aa <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c89c:	683a      	ldr	r2, [r7, #0]
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	0011      	movs	r1, r2
 801c8a2:	0018      	movs	r0, r3
 801c8a4:	f000 f951 	bl	801cb4a <USBD_CtlError>
            return;
 801c8a8:	e060      	b.n	801c96c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	0018      	movs	r0, r3
 801c8ae:	f000 fa34 	bl	801cd1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c8b2:	e05b      	b.n	801c96c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	0018      	movs	r0, r3
 801c8b8:	f000 fa2f 	bl	801cd1a <USBD_CtlSendStatus>
        break;
 801c8bc:	e056      	b.n	801c96c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c8be:	4b2d      	ldr	r3, [pc, #180]	@ (801c974 <USBD_SetConfig+0x144>)
 801c8c0:	781b      	ldrb	r3, [r3, #0]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d115      	bne.n	801c8f2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c8c6:	687a      	ldr	r2, [r7, #4]
 801c8c8:	23a7      	movs	r3, #167	@ 0xa7
 801c8ca:	009b      	lsls	r3, r3, #2
 801c8cc:	2102      	movs	r1, #2
 801c8ce:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c8d0:	4b28      	ldr	r3, [pc, #160]	@ (801c974 <USBD_SetConfig+0x144>)
 801c8d2:	781b      	ldrb	r3, [r3, #0]
 801c8d4:	001a      	movs	r2, r3
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c8da:	4b26      	ldr	r3, [pc, #152]	@ (801c974 <USBD_SetConfig+0x144>)
 801c8dc:	781a      	ldrb	r2, [r3, #0]
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	0011      	movs	r1, r2
 801c8e2:	0018      	movs	r0, r3
 801c8e4:	f7ff f8c4 	bl	801ba70 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	0018      	movs	r0, r3
 801c8ec:	f000 fa15 	bl	801cd1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c8f0:	e03c      	b.n	801c96c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c8f2:	4b20      	ldr	r3, [pc, #128]	@ (801c974 <USBD_SetConfig+0x144>)
 801c8f4:	781b      	ldrb	r3, [r3, #0]
 801c8f6:	001a      	movs	r2, r3
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	685b      	ldr	r3, [r3, #4]
 801c8fc:	429a      	cmp	r2, r3
 801c8fe:	d022      	beq.n	801c946 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	685b      	ldr	r3, [r3, #4]
 801c904:	b2da      	uxtb	r2, r3
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	0011      	movs	r1, r2
 801c90a:	0018      	movs	r0, r3
 801c90c:	f7ff f8b0 	bl	801ba70 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c910:	4b18      	ldr	r3, [pc, #96]	@ (801c974 <USBD_SetConfig+0x144>)
 801c912:	781b      	ldrb	r3, [r3, #0]
 801c914:	001a      	movs	r2, r3
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c91a:	4b16      	ldr	r3, [pc, #88]	@ (801c974 <USBD_SetConfig+0x144>)
 801c91c:	781a      	ldrb	r2, [r3, #0]
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	0011      	movs	r1, r2
 801c922:	0018      	movs	r0, r3
 801c924:	f7ff f87d 	bl	801ba22 <USBD_SetClassConfig>
 801c928:	0003      	movs	r3, r0
 801c92a:	2b02      	cmp	r3, #2
 801c92c:	d106      	bne.n	801c93c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c92e:	683a      	ldr	r2, [r7, #0]
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	0011      	movs	r1, r2
 801c934:	0018      	movs	r0, r3
 801c936:	f000 f908 	bl	801cb4a <USBD_CtlError>
            return;
 801c93a:	e017      	b.n	801c96c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	0018      	movs	r0, r3
 801c940:	f000 f9eb 	bl	801cd1a <USBD_CtlSendStatus>
        break;
 801c944:	e012      	b.n	801c96c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	0018      	movs	r0, r3
 801c94a:	f000 f9e6 	bl	801cd1a <USBD_CtlSendStatus>
        break;
 801c94e:	e00d      	b.n	801c96c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c950:	683a      	ldr	r2, [r7, #0]
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	0011      	movs	r1, r2
 801c956:	0018      	movs	r0, r3
 801c958:	f000 f8f7 	bl	801cb4a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c95c:	4b05      	ldr	r3, [pc, #20]	@ (801c974 <USBD_SetConfig+0x144>)
 801c95e:	781a      	ldrb	r2, [r3, #0]
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	0011      	movs	r1, r2
 801c964:	0018      	movs	r0, r3
 801c966:	f7ff f883 	bl	801ba70 <USBD_ClrClassConfig>
        break;
 801c96a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c96c:	46bd      	mov	sp, r7
 801c96e:	b002      	add	sp, #8
 801c970:	bd80      	pop	{r7, pc}
 801c972:	46c0      	nop			@ (mov r8, r8)
 801c974:	200023e4 	.word	0x200023e4

0801c978 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c978:	b580      	push	{r7, lr}
 801c97a:	b082      	sub	sp, #8
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
 801c980:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c982:	683b      	ldr	r3, [r7, #0]
 801c984:	88db      	ldrh	r3, [r3, #6]
 801c986:	2b01      	cmp	r3, #1
 801c988:	d006      	beq.n	801c998 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c98a:	683a      	ldr	r2, [r7, #0]
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	0011      	movs	r1, r2
 801c990:	0018      	movs	r0, r3
 801c992:	f000 f8da 	bl	801cb4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c996:	e026      	b.n	801c9e6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c998:	687a      	ldr	r2, [r7, #4]
 801c99a:	23a7      	movs	r3, #167	@ 0xa7
 801c99c:	009b      	lsls	r3, r3, #2
 801c99e:	5cd3      	ldrb	r3, [r2, r3]
 801c9a0:	2b02      	cmp	r3, #2
 801c9a2:	dc02      	bgt.n	801c9aa <USBD_GetConfig+0x32>
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	dc03      	bgt.n	801c9b0 <USBD_GetConfig+0x38>
 801c9a8:	e016      	b.n	801c9d8 <USBD_GetConfig+0x60>
 801c9aa:	2b03      	cmp	r3, #3
 801c9ac:	d00c      	beq.n	801c9c8 <USBD_GetConfig+0x50>
 801c9ae:	e013      	b.n	801c9d8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	2200      	movs	r2, #0
 801c9b4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	3308      	adds	r3, #8
 801c9ba:	0019      	movs	r1, r3
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	2201      	movs	r2, #1
 801c9c0:	0018      	movs	r0, r3
 801c9c2:	f000 f940 	bl	801cc46 <USBD_CtlSendData>
        break;
 801c9c6:	e00e      	b.n	801c9e6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	1d19      	adds	r1, r3, #4
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	2201      	movs	r2, #1
 801c9d0:	0018      	movs	r0, r3
 801c9d2:	f000 f938 	bl	801cc46 <USBD_CtlSendData>
        break;
 801c9d6:	e006      	b.n	801c9e6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801c9d8:	683a      	ldr	r2, [r7, #0]
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	0011      	movs	r1, r2
 801c9de:	0018      	movs	r0, r3
 801c9e0:	f000 f8b3 	bl	801cb4a <USBD_CtlError>
        break;
 801c9e4:	46c0      	nop			@ (mov r8, r8)
}
 801c9e6:	46c0      	nop			@ (mov r8, r8)
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	b002      	add	sp, #8
 801c9ec:	bd80      	pop	{r7, pc}

0801c9ee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c9ee:	b580      	push	{r7, lr}
 801c9f0:	b082      	sub	sp, #8
 801c9f2:	af00      	add	r7, sp, #0
 801c9f4:	6078      	str	r0, [r7, #4]
 801c9f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c9f8:	687a      	ldr	r2, [r7, #4]
 801c9fa:	23a7      	movs	r3, #167	@ 0xa7
 801c9fc:	009b      	lsls	r3, r3, #2
 801c9fe:	5cd3      	ldrb	r3, [r2, r3]
 801ca00:	3b01      	subs	r3, #1
 801ca02:	2b02      	cmp	r3, #2
 801ca04:	d822      	bhi.n	801ca4c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ca06:	683b      	ldr	r3, [r7, #0]
 801ca08:	88db      	ldrh	r3, [r3, #6]
 801ca0a:	2b02      	cmp	r3, #2
 801ca0c:	d006      	beq.n	801ca1c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801ca0e:	683a      	ldr	r2, [r7, #0]
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	0011      	movs	r1, r2
 801ca14:	0018      	movs	r0, r3
 801ca16:	f000 f898 	bl	801cb4a <USBD_CtlError>
        break;
 801ca1a:	e01e      	b.n	801ca5a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	2201      	movs	r2, #1
 801ca20:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801ca22:	687a      	ldr	r2, [r7, #4]
 801ca24:	23a9      	movs	r3, #169	@ 0xa9
 801ca26:	009b      	lsls	r3, r3, #2
 801ca28:	58d3      	ldr	r3, [r2, r3]
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d005      	beq.n	801ca3a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	68db      	ldr	r3, [r3, #12]
 801ca32:	2202      	movs	r2, #2
 801ca34:	431a      	orrs	r2, r3
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	330c      	adds	r3, #12
 801ca3e:	0019      	movs	r1, r3
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	2202      	movs	r2, #2
 801ca44:	0018      	movs	r0, r3
 801ca46:	f000 f8fe 	bl	801cc46 <USBD_CtlSendData>
      break;
 801ca4a:	e006      	b.n	801ca5a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801ca4c:	683a      	ldr	r2, [r7, #0]
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	0011      	movs	r1, r2
 801ca52:	0018      	movs	r0, r3
 801ca54:	f000 f879 	bl	801cb4a <USBD_CtlError>
      break;
 801ca58:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ca5a:	46c0      	nop			@ (mov r8, r8)
 801ca5c:	46bd      	mov	sp, r7
 801ca5e:	b002      	add	sp, #8
 801ca60:	bd80      	pop	{r7, pc}

0801ca62 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ca62:	b580      	push	{r7, lr}
 801ca64:	b082      	sub	sp, #8
 801ca66:	af00      	add	r7, sp, #0
 801ca68:	6078      	str	r0, [r7, #4]
 801ca6a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ca6c:	683b      	ldr	r3, [r7, #0]
 801ca6e:	885b      	ldrh	r3, [r3, #2]
 801ca70:	2b01      	cmp	r3, #1
 801ca72:	d108      	bne.n	801ca86 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801ca74:	687a      	ldr	r2, [r7, #4]
 801ca76:	23a9      	movs	r3, #169	@ 0xa9
 801ca78:	009b      	lsls	r3, r3, #2
 801ca7a:	2101      	movs	r1, #1
 801ca7c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	0018      	movs	r0, r3
 801ca82:	f000 f94a 	bl	801cd1a <USBD_CtlSendStatus>
  }
}
 801ca86:	46c0      	nop			@ (mov r8, r8)
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	b002      	add	sp, #8
 801ca8c:	bd80      	pop	{r7, pc}

0801ca8e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ca8e:	b580      	push	{r7, lr}
 801ca90:	b082      	sub	sp, #8
 801ca92:	af00      	add	r7, sp, #0
 801ca94:	6078      	str	r0, [r7, #4]
 801ca96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ca98:	687a      	ldr	r2, [r7, #4]
 801ca9a:	23a7      	movs	r3, #167	@ 0xa7
 801ca9c:	009b      	lsls	r3, r3, #2
 801ca9e:	5cd3      	ldrb	r3, [r2, r3]
 801caa0:	3b01      	subs	r3, #1
 801caa2:	2b02      	cmp	r3, #2
 801caa4:	d80d      	bhi.n	801cac2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801caa6:	683b      	ldr	r3, [r7, #0]
 801caa8:	885b      	ldrh	r3, [r3, #2]
 801caaa:	2b01      	cmp	r3, #1
 801caac:	d110      	bne.n	801cad0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801caae:	687a      	ldr	r2, [r7, #4]
 801cab0:	23a9      	movs	r3, #169	@ 0xa9
 801cab2:	009b      	lsls	r3, r3, #2
 801cab4:	2100      	movs	r1, #0
 801cab6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	0018      	movs	r0, r3
 801cabc:	f000 f92d 	bl	801cd1a <USBD_CtlSendStatus>
      }
      break;
 801cac0:	e006      	b.n	801cad0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801cac2:	683a      	ldr	r2, [r7, #0]
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	0011      	movs	r1, r2
 801cac8:	0018      	movs	r0, r3
 801caca:	f000 f83e 	bl	801cb4a <USBD_CtlError>
      break;
 801cace:	e000      	b.n	801cad2 <USBD_ClrFeature+0x44>
      break;
 801cad0:	46c0      	nop			@ (mov r8, r8)
  }
}
 801cad2:	46c0      	nop			@ (mov r8, r8)
 801cad4:	46bd      	mov	sp, r7
 801cad6:	b002      	add	sp, #8
 801cad8:	bd80      	pop	{r7, pc}

0801cada <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801cada:	b580      	push	{r7, lr}
 801cadc:	b082      	sub	sp, #8
 801cade:	af00      	add	r7, sp, #0
 801cae0:	6078      	str	r0, [r7, #4]
 801cae2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801cae4:	683b      	ldr	r3, [r7, #0]
 801cae6:	781a      	ldrb	r2, [r3, #0]
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801caec:	683b      	ldr	r3, [r7, #0]
 801caee:	785a      	ldrb	r2, [r3, #1]
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801caf4:	683b      	ldr	r3, [r7, #0]
 801caf6:	3302      	adds	r3, #2
 801caf8:	781b      	ldrb	r3, [r3, #0]
 801cafa:	001a      	movs	r2, r3
 801cafc:	683b      	ldr	r3, [r7, #0]
 801cafe:	3303      	adds	r3, #3
 801cb00:	781b      	ldrb	r3, [r3, #0]
 801cb02:	021b      	lsls	r3, r3, #8
 801cb04:	b29b      	uxth	r3, r3
 801cb06:	18d3      	adds	r3, r2, r3
 801cb08:	b29a      	uxth	r2, r3
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801cb0e:	683b      	ldr	r3, [r7, #0]
 801cb10:	3304      	adds	r3, #4
 801cb12:	781b      	ldrb	r3, [r3, #0]
 801cb14:	001a      	movs	r2, r3
 801cb16:	683b      	ldr	r3, [r7, #0]
 801cb18:	3305      	adds	r3, #5
 801cb1a:	781b      	ldrb	r3, [r3, #0]
 801cb1c:	021b      	lsls	r3, r3, #8
 801cb1e:	b29b      	uxth	r3, r3
 801cb20:	18d3      	adds	r3, r2, r3
 801cb22:	b29a      	uxth	r2, r3
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801cb28:	683b      	ldr	r3, [r7, #0]
 801cb2a:	3306      	adds	r3, #6
 801cb2c:	781b      	ldrb	r3, [r3, #0]
 801cb2e:	001a      	movs	r2, r3
 801cb30:	683b      	ldr	r3, [r7, #0]
 801cb32:	3307      	adds	r3, #7
 801cb34:	781b      	ldrb	r3, [r3, #0]
 801cb36:	021b      	lsls	r3, r3, #8
 801cb38:	b29b      	uxth	r3, r3
 801cb3a:	18d3      	adds	r3, r2, r3
 801cb3c:	b29a      	uxth	r2, r3
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	80da      	strh	r2, [r3, #6]

}
 801cb42:	46c0      	nop			@ (mov r8, r8)
 801cb44:	46bd      	mov	sp, r7
 801cb46:	b002      	add	sp, #8
 801cb48:	bd80      	pop	{r7, pc}

0801cb4a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801cb4a:	b580      	push	{r7, lr}
 801cb4c:	b082      	sub	sp, #8
 801cb4e:	af00      	add	r7, sp, #0
 801cb50:	6078      	str	r0, [r7, #4]
 801cb52:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	2180      	movs	r1, #128	@ 0x80
 801cb58:	0018      	movs	r0, r3
 801cb5a:	f000 fd1e 	bl	801d59a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	2100      	movs	r1, #0
 801cb62:	0018      	movs	r0, r3
 801cb64:	f000 fd19 	bl	801d59a <USBD_LL_StallEP>
}
 801cb68:	46c0      	nop			@ (mov r8, r8)
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	b002      	add	sp, #8
 801cb6e:	bd80      	pop	{r7, pc}

0801cb70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801cb70:	b590      	push	{r4, r7, lr}
 801cb72:	b087      	sub	sp, #28
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	60f8      	str	r0, [r7, #12]
 801cb78:	60b9      	str	r1, [r7, #8]
 801cb7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801cb7c:	2417      	movs	r4, #23
 801cb7e:	193b      	adds	r3, r7, r4
 801cb80:	2200      	movs	r2, #0
 801cb82:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d03c      	beq.n	801cc04 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	0018      	movs	r0, r3
 801cb8e:	f000 f83d 	bl	801cc0c <USBD_GetLen>
 801cb92:	0003      	movs	r3, r0
 801cb94:	3301      	adds	r3, #1
 801cb96:	b29b      	uxth	r3, r3
 801cb98:	18db      	adds	r3, r3, r3
 801cb9a:	b29a      	uxth	r2, r3
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801cba0:	193b      	adds	r3, r7, r4
 801cba2:	781b      	ldrb	r3, [r3, #0]
 801cba4:	193a      	adds	r2, r7, r4
 801cba6:	1c59      	adds	r1, r3, #1
 801cba8:	7011      	strb	r1, [r2, #0]
 801cbaa:	001a      	movs	r2, r3
 801cbac:	68bb      	ldr	r3, [r7, #8]
 801cbae:	189b      	adds	r3, r3, r2
 801cbb0:	687a      	ldr	r2, [r7, #4]
 801cbb2:	7812      	ldrb	r2, [r2, #0]
 801cbb4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801cbb6:	193b      	adds	r3, r7, r4
 801cbb8:	781b      	ldrb	r3, [r3, #0]
 801cbba:	193a      	adds	r2, r7, r4
 801cbbc:	1c59      	adds	r1, r3, #1
 801cbbe:	7011      	strb	r1, [r2, #0]
 801cbc0:	001a      	movs	r2, r3
 801cbc2:	68bb      	ldr	r3, [r7, #8]
 801cbc4:	189b      	adds	r3, r3, r2
 801cbc6:	2203      	movs	r2, #3
 801cbc8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801cbca:	e017      	b.n	801cbfc <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	1c5a      	adds	r2, r3, #1
 801cbd0:	60fa      	str	r2, [r7, #12]
 801cbd2:	2417      	movs	r4, #23
 801cbd4:	193a      	adds	r2, r7, r4
 801cbd6:	7812      	ldrb	r2, [r2, #0]
 801cbd8:	1939      	adds	r1, r7, r4
 801cbda:	1c50      	adds	r0, r2, #1
 801cbdc:	7008      	strb	r0, [r1, #0]
 801cbde:	0011      	movs	r1, r2
 801cbe0:	68ba      	ldr	r2, [r7, #8]
 801cbe2:	1852      	adds	r2, r2, r1
 801cbe4:	781b      	ldrb	r3, [r3, #0]
 801cbe6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801cbe8:	193b      	adds	r3, r7, r4
 801cbea:	781b      	ldrb	r3, [r3, #0]
 801cbec:	193a      	adds	r2, r7, r4
 801cbee:	1c59      	adds	r1, r3, #1
 801cbf0:	7011      	strb	r1, [r2, #0]
 801cbf2:	001a      	movs	r2, r3
 801cbf4:	68bb      	ldr	r3, [r7, #8]
 801cbf6:	189b      	adds	r3, r3, r2
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	781b      	ldrb	r3, [r3, #0]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d1e3      	bne.n	801cbcc <USBD_GetString+0x5c>
    }
  }
}
 801cc04:	46c0      	nop			@ (mov r8, r8)
 801cc06:	46bd      	mov	sp, r7
 801cc08:	b007      	add	sp, #28
 801cc0a:	bd90      	pop	{r4, r7, pc}

0801cc0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b084      	sub	sp, #16
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801cc14:	230f      	movs	r3, #15
 801cc16:	18fb      	adds	r3, r7, r3
 801cc18:	2200      	movs	r2, #0
 801cc1a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801cc1c:	e008      	b.n	801cc30 <USBD_GetLen+0x24>
  {
    len++;
 801cc1e:	210f      	movs	r1, #15
 801cc20:	187b      	adds	r3, r7, r1
 801cc22:	781a      	ldrb	r2, [r3, #0]
 801cc24:	187b      	adds	r3, r7, r1
 801cc26:	3201      	adds	r2, #1
 801cc28:	701a      	strb	r2, [r3, #0]
    buf++;
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	3301      	adds	r3, #1
 801cc2e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	781b      	ldrb	r3, [r3, #0]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d1f2      	bne.n	801cc1e <USBD_GetLen+0x12>
  }

  return len;
 801cc38:	230f      	movs	r3, #15
 801cc3a:	18fb      	adds	r3, r7, r3
 801cc3c:	781b      	ldrb	r3, [r3, #0]
}
 801cc3e:	0018      	movs	r0, r3
 801cc40:	46bd      	mov	sp, r7
 801cc42:	b004      	add	sp, #16
 801cc44:	bd80      	pop	{r7, pc}

0801cc46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801cc46:	b580      	push	{r7, lr}
 801cc48:	b084      	sub	sp, #16
 801cc4a:	af00      	add	r7, sp, #0
 801cc4c:	60f8      	str	r0, [r7, #12]
 801cc4e:	60b9      	str	r1, [r7, #8]
 801cc50:	1dbb      	adds	r3, r7, #6
 801cc52:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801cc54:	68fa      	ldr	r2, [r7, #12]
 801cc56:	23a5      	movs	r3, #165	@ 0xa5
 801cc58:	009b      	lsls	r3, r3, #2
 801cc5a:	2102      	movs	r1, #2
 801cc5c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801cc5e:	1dbb      	adds	r3, r7, #6
 801cc60:	881a      	ldrh	r2, [r3, #0]
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801cc66:	1dbb      	adds	r3, r7, #6
 801cc68:	881a      	ldrh	r2, [r3, #0]
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cc6e:	1dbb      	adds	r3, r7, #6
 801cc70:	881b      	ldrh	r3, [r3, #0]
 801cc72:	68ba      	ldr	r2, [r7, #8]
 801cc74:	68f8      	ldr	r0, [r7, #12]
 801cc76:	2100      	movs	r1, #0
 801cc78:	f000 fd41 	bl	801d6fe <USBD_LL_Transmit>

  return USBD_OK;
 801cc7c:	2300      	movs	r3, #0
}
 801cc7e:	0018      	movs	r0, r3
 801cc80:	46bd      	mov	sp, r7
 801cc82:	b004      	add	sp, #16
 801cc84:	bd80      	pop	{r7, pc}

0801cc86 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801cc86:	b580      	push	{r7, lr}
 801cc88:	b084      	sub	sp, #16
 801cc8a:	af00      	add	r7, sp, #0
 801cc8c:	60f8      	str	r0, [r7, #12]
 801cc8e:	60b9      	str	r1, [r7, #8]
 801cc90:	1dbb      	adds	r3, r7, #6
 801cc92:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cc94:	1dbb      	adds	r3, r7, #6
 801cc96:	881b      	ldrh	r3, [r3, #0]
 801cc98:	68ba      	ldr	r2, [r7, #8]
 801cc9a:	68f8      	ldr	r0, [r7, #12]
 801cc9c:	2100      	movs	r1, #0
 801cc9e:	f000 fd2e 	bl	801d6fe <USBD_LL_Transmit>

  return USBD_OK;
 801cca2:	2300      	movs	r3, #0
}
 801cca4:	0018      	movs	r0, r3
 801cca6:	46bd      	mov	sp, r7
 801cca8:	b004      	add	sp, #16
 801ccaa:	bd80      	pop	{r7, pc}

0801ccac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801ccac:	b580      	push	{r7, lr}
 801ccae:	b084      	sub	sp, #16
 801ccb0:	af00      	add	r7, sp, #0
 801ccb2:	60f8      	str	r0, [r7, #12]
 801ccb4:	60b9      	str	r1, [r7, #8]
 801ccb6:	1dbb      	adds	r3, r7, #6
 801ccb8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801ccba:	68fa      	ldr	r2, [r7, #12]
 801ccbc:	23a5      	movs	r3, #165	@ 0xa5
 801ccbe:	009b      	lsls	r3, r3, #2
 801ccc0:	2103      	movs	r1, #3
 801ccc2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801ccc4:	1dbb      	adds	r3, r7, #6
 801ccc6:	8819      	ldrh	r1, [r3, #0]
 801ccc8:	68fa      	ldr	r2, [r7, #12]
 801ccca:	23ae      	movs	r3, #174	@ 0xae
 801cccc:	005b      	lsls	r3, r3, #1
 801ccce:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801ccd0:	1dbb      	adds	r3, r7, #6
 801ccd2:	8819      	ldrh	r1, [r3, #0]
 801ccd4:	68fa      	ldr	r2, [r7, #12]
 801ccd6:	23b0      	movs	r3, #176	@ 0xb0
 801ccd8:	005b      	lsls	r3, r3, #1
 801ccda:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ccdc:	1dbb      	adds	r3, r7, #6
 801ccde:	881b      	ldrh	r3, [r3, #0]
 801cce0:	68ba      	ldr	r2, [r7, #8]
 801cce2:	68f8      	ldr	r0, [r7, #12]
 801cce4:	2100      	movs	r1, #0
 801cce6:	f000 fd41 	bl	801d76c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ccea:	2300      	movs	r3, #0
}
 801ccec:	0018      	movs	r0, r3
 801ccee:	46bd      	mov	sp, r7
 801ccf0:	b004      	add	sp, #16
 801ccf2:	bd80      	pop	{r7, pc}

0801ccf4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801ccf4:	b580      	push	{r7, lr}
 801ccf6:	b084      	sub	sp, #16
 801ccf8:	af00      	add	r7, sp, #0
 801ccfa:	60f8      	str	r0, [r7, #12]
 801ccfc:	60b9      	str	r1, [r7, #8]
 801ccfe:	1dbb      	adds	r3, r7, #6
 801cd00:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cd02:	1dbb      	adds	r3, r7, #6
 801cd04:	881b      	ldrh	r3, [r3, #0]
 801cd06:	68ba      	ldr	r2, [r7, #8]
 801cd08:	68f8      	ldr	r0, [r7, #12]
 801cd0a:	2100      	movs	r1, #0
 801cd0c:	f000 fd2e 	bl	801d76c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cd10:	2300      	movs	r3, #0
}
 801cd12:	0018      	movs	r0, r3
 801cd14:	46bd      	mov	sp, r7
 801cd16:	b004      	add	sp, #16
 801cd18:	bd80      	pop	{r7, pc}

0801cd1a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cd1a:	b580      	push	{r7, lr}
 801cd1c:	b082      	sub	sp, #8
 801cd1e:	af00      	add	r7, sp, #0
 801cd20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cd22:	687a      	ldr	r2, [r7, #4]
 801cd24:	23a5      	movs	r3, #165	@ 0xa5
 801cd26:	009b      	lsls	r3, r3, #2
 801cd28:	2104      	movs	r1, #4
 801cd2a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801cd2c:	6878      	ldr	r0, [r7, #4]
 801cd2e:	2300      	movs	r3, #0
 801cd30:	2200      	movs	r2, #0
 801cd32:	2100      	movs	r1, #0
 801cd34:	f000 fce3 	bl	801d6fe <USBD_LL_Transmit>

  return USBD_OK;
 801cd38:	2300      	movs	r3, #0
}
 801cd3a:	0018      	movs	r0, r3
 801cd3c:	46bd      	mov	sp, r7
 801cd3e:	b002      	add	sp, #8
 801cd40:	bd80      	pop	{r7, pc}

0801cd42 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801cd42:	b580      	push	{r7, lr}
 801cd44:	b082      	sub	sp, #8
 801cd46:	af00      	add	r7, sp, #0
 801cd48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801cd4a:	687a      	ldr	r2, [r7, #4]
 801cd4c:	23a5      	movs	r3, #165	@ 0xa5
 801cd4e:	009b      	lsls	r3, r3, #2
 801cd50:	2105      	movs	r1, #5
 801cd52:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cd54:	6878      	ldr	r0, [r7, #4]
 801cd56:	2300      	movs	r3, #0
 801cd58:	2200      	movs	r2, #0
 801cd5a:	2100      	movs	r1, #0
 801cd5c:	f000 fd06 	bl	801d76c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cd60:	2300      	movs	r3, #0
}
 801cd62:	0018      	movs	r0, r3
 801cd64:	46bd      	mov	sp, r7
 801cd66:	b002      	add	sp, #8
 801cd68:	bd80      	pop	{r7, pc}
	...

0801cd6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cd6c:	b580      	push	{r7, lr}
 801cd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cd70:	4914      	ldr	r1, [pc, #80]	@ (801cdc4 <MX_USB_DEVICE_Init+0x58>)
 801cd72:	4b15      	ldr	r3, [pc, #84]	@ (801cdc8 <MX_USB_DEVICE_Init+0x5c>)
 801cd74:	2200      	movs	r2, #0
 801cd76:	0018      	movs	r0, r3
 801cd78:	f7fe fdec 	bl	801b954 <USBD_Init>
 801cd7c:	1e03      	subs	r3, r0, #0
 801cd7e:	d001      	beq.n	801cd84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cd80:	f7eb fad8 	bl	8008334 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cd84:	4a11      	ldr	r2, [pc, #68]	@ (801cdcc <MX_USB_DEVICE_Init+0x60>)
 801cd86:	4b10      	ldr	r3, [pc, #64]	@ (801cdc8 <MX_USB_DEVICE_Init+0x5c>)
 801cd88:	0011      	movs	r1, r2
 801cd8a:	0018      	movs	r0, r3
 801cd8c:	f7fe fe13 	bl	801b9b6 <USBD_RegisterClass>
 801cd90:	1e03      	subs	r3, r0, #0
 801cd92:	d001      	beq.n	801cd98 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801cd94:	f7eb face 	bl	8008334 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cd98:	4a0d      	ldr	r2, [pc, #52]	@ (801cdd0 <MX_USB_DEVICE_Init+0x64>)
 801cd9a:	4b0b      	ldr	r3, [pc, #44]	@ (801cdc8 <MX_USB_DEVICE_Init+0x5c>)
 801cd9c:	0011      	movs	r1, r2
 801cd9e:	0018      	movs	r0, r3
 801cda0:	f7fe fd28 	bl	801b7f4 <USBD_CDC_RegisterInterface>
 801cda4:	1e03      	subs	r3, r0, #0
 801cda6:	d001      	beq.n	801cdac <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801cda8:	f7eb fac4 	bl	8008334 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cdac:	4b06      	ldr	r3, [pc, #24]	@ (801cdc8 <MX_USB_DEVICE_Init+0x5c>)
 801cdae:	0018      	movs	r0, r3
 801cdb0:	f7fe fe21 	bl	801b9f6 <USBD_Start>
 801cdb4:	1e03      	subs	r3, r0, #0
 801cdb6:	d001      	beq.n	801cdbc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801cdb8:	f7eb fabc 	bl	8008334 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cdbc:	46c0      	nop			@ (mov r8, r8)
 801cdbe:	46bd      	mov	sp, r7
 801cdc0:	bd80      	pop	{r7, pc}
 801cdc2:	46c0      	nop			@ (mov r8, r8)
 801cdc4:	20000208 	.word	0x20000208
 801cdc8:	200023e8 	.word	0x200023e8
 801cdcc:	200000f4 	.word	0x200000f4
 801cdd0:	200001f8 	.word	0x200001f8

0801cdd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801cdd4:	b580      	push	{r7, lr}
 801cdd6:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cdd8:	4907      	ldr	r1, [pc, #28]	@ (801cdf8 <CDC_Init_FS+0x24>)
 801cdda:	4b08      	ldr	r3, [pc, #32]	@ (801cdfc <CDC_Init_FS+0x28>)
 801cddc:	2200      	movs	r2, #0
 801cdde:	0018      	movs	r0, r3
 801cde0:	f7fe fd23 	bl	801b82a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cde4:	4a06      	ldr	r2, [pc, #24]	@ (801ce00 <CDC_Init_FS+0x2c>)
 801cde6:	4b05      	ldr	r3, [pc, #20]	@ (801cdfc <CDC_Init_FS+0x28>)
 801cde8:	0011      	movs	r1, r2
 801cdea:	0018      	movs	r0, r3
 801cdec:	f7fe fd39 	bl	801b862 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801cdf0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cdf2:	0018      	movs	r0, r3
 801cdf4:	46bd      	mov	sp, r7
 801cdf6:	bd80      	pop	{r7, pc}
 801cdf8:	20002b6c 	.word	0x20002b6c
 801cdfc:	200023e8 	.word	0x200023e8
 801ce00:	2000276c 	.word	0x2000276c

0801ce04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ce04:	b580      	push	{r7, lr}
 801ce06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ce08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ce0a:	0018      	movs	r0, r3
 801ce0c:	46bd      	mov	sp, r7
 801ce0e:	bd80      	pop	{r7, pc}

0801ce10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b082      	sub	sp, #8
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6039      	str	r1, [r7, #0]
 801ce18:	0011      	movs	r1, r2
 801ce1a:	1dfb      	adds	r3, r7, #7
 801ce1c:	1c02      	adds	r2, r0, #0
 801ce1e:	701a      	strb	r2, [r3, #0]
 801ce20:	1d3b      	adds	r3, r7, #4
 801ce22:	1c0a      	adds	r2, r1, #0
 801ce24:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801ce26:	1dfb      	adds	r3, r7, #7
 801ce28:	781b      	ldrb	r3, [r3, #0]
 801ce2a:	2b23      	cmp	r3, #35	@ 0x23
 801ce2c:	d804      	bhi.n	801ce38 <CDC_Control_FS+0x28>
 801ce2e:	009a      	lsls	r2, r3, #2
 801ce30:	4b04      	ldr	r3, [pc, #16]	@ (801ce44 <CDC_Control_FS+0x34>)
 801ce32:	18d3      	adds	r3, r2, r3
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801ce38:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801ce3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ce3c:	0018      	movs	r0, r3
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	b002      	add	sp, #8
 801ce42:	bd80      	pop	{r7, pc}
 801ce44:	080258d0 	.word	0x080258d0

0801ce48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	b082      	sub	sp, #8
 801ce4c:	af00      	add	r7, sp, #0
 801ce4e:	6078      	str	r0, [r7, #4]
 801ce50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801ce52:	4b12      	ldr	r3, [pc, #72]	@ (801ce9c <CDC_Receive_FS+0x54>)
 801ce54:	781b      	ldrb	r3, [r3, #0]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d013      	beq.n	801ce82 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801ce5a:	683b      	ldr	r3, [r7, #0]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	b29a      	uxth	r2, r3
 801ce60:	2301      	movs	r3, #1
 801ce62:	425b      	negs	r3, r3
 801ce64:	6879      	ldr	r1, [r7, #4]
 801ce66:	480e      	ldr	r0, [pc, #56]	@ (801cea0 <CDC_Receive_FS+0x58>)
 801ce68:	f7fa fa46 	bl	80172f8 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ce6c:	687a      	ldr	r2, [r7, #4]
 801ce6e:	4b0d      	ldr	r3, [pc, #52]	@ (801cea4 <CDC_Receive_FS+0x5c>)
 801ce70:	0011      	movs	r1, r2
 801ce72:	0018      	movs	r0, r3
 801ce74:	f7fe fcf5 	bl	801b862 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ce78:	4b0a      	ldr	r3, [pc, #40]	@ (801cea4 <CDC_Receive_FS+0x5c>)
 801ce7a:	0018      	movs	r0, r3
 801ce7c:	f7fe fd3c 	bl	801b8f8 <USBD_CDC_ReceivePacket>
 801ce80:	e006      	b.n	801ce90 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801ce82:	683b      	ldr	r3, [r7, #0]
 801ce84:	681a      	ldr	r2, [r3, #0]
 801ce86:	4b08      	ldr	r3, [pc, #32]	@ (801cea8 <CDC_Receive_FS+0x60>)
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	18d2      	adds	r2, r2, r3
 801ce8c:	4b06      	ldr	r3, [pc, #24]	@ (801cea8 <CDC_Receive_FS+0x60>)
 801ce8e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801ce90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ce92:	0018      	movs	r0, r3
 801ce94:	46bd      	mov	sp, r7
 801ce96:	b002      	add	sp, #8
 801ce98:	bd80      	pop	{r7, pc}
 801ce9a:	46c0      	nop			@ (mov r8, r8)
 801ce9c:	200026ac 	.word	0x200026ac
 801cea0:	200026b0 	.word	0x200026b0
 801cea4:	200023e8 	.word	0x200023e8
 801cea8:	20002768 	.word	0x20002768

0801ceac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801ceac:	b5b0      	push	{r4, r5, r7, lr}
 801ceae:	b084      	sub	sp, #16
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	6078      	str	r0, [r7, #4]
 801ceb4:	000a      	movs	r2, r1
 801ceb6:	1cbb      	adds	r3, r7, #2
 801ceb8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801ceba:	230f      	movs	r3, #15
 801cebc:	18fb      	adds	r3, r7, r3
 801cebe:	2200      	movs	r2, #0
 801cec0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801cec2:	4a11      	ldr	r2, [pc, #68]	@ (801cf08 <CDC_Transmit_FS+0x5c>)
 801cec4:	23ae      	movs	r3, #174	@ 0xae
 801cec6:	009b      	lsls	r3, r3, #2
 801cec8:	58d3      	ldr	r3, [r2, r3]
 801ceca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801cecc:	68ba      	ldr	r2, [r7, #8]
 801cece:	2385      	movs	r3, #133	@ 0x85
 801ced0:	009b      	lsls	r3, r3, #2
 801ced2:	58d3      	ldr	r3, [r2, r3]
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	d001      	beq.n	801cedc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801ced8:	2301      	movs	r3, #1
 801ceda:	e010      	b.n	801cefe <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801cedc:	1cbb      	adds	r3, r7, #2
 801cede:	881a      	ldrh	r2, [r3, #0]
 801cee0:	6879      	ldr	r1, [r7, #4]
 801cee2:	4b09      	ldr	r3, [pc, #36]	@ (801cf08 <CDC_Transmit_FS+0x5c>)
 801cee4:	0018      	movs	r0, r3
 801cee6:	f7fe fca0 	bl	801b82a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801ceea:	250f      	movs	r5, #15
 801ceec:	197c      	adds	r4, r7, r5
 801ceee:	4b06      	ldr	r3, [pc, #24]	@ (801cf08 <CDC_Transmit_FS+0x5c>)
 801cef0:	0018      	movs	r0, r3
 801cef2:	f7fe fcca 	bl	801b88a <USBD_CDC_TransmitPacket>
 801cef6:	0003      	movs	r3, r0
 801cef8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801cefa:	197b      	adds	r3, r7, r5
 801cefc:	781b      	ldrb	r3, [r3, #0]
}
 801cefe:	0018      	movs	r0, r3
 801cf00:	46bd      	mov	sp, r7
 801cf02:	b004      	add	sp, #16
 801cf04:	bdb0      	pop	{r4, r5, r7, pc}
 801cf06:	46c0      	nop			@ (mov r8, r8)
 801cf08:	200023e8 	.word	0x200023e8

0801cf0c <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801cf0c:	b580      	push	{r7, lr}
 801cf0e:	af00      	add	r7, sp, #0
  ESPProg = true;
 801cf10:	4b02      	ldr	r3, [pc, #8]	@ (801cf1c <EnableESPProg+0x10>)
 801cf12:	2201      	movs	r2, #1
 801cf14:	701a      	strb	r2, [r3, #0]
}
 801cf16:	46c0      	nop			@ (mov r8, r8)
 801cf18:	46bd      	mov	sp, r7
 801cf1a:	bd80      	pop	{r7, pc}
 801cf1c:	200026ac 	.word	0x200026ac

0801cf20 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801cf20:	b580      	push	{r7, lr}
 801cf22:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801cf24:	4b01      	ldr	r3, [pc, #4]	@ (801cf2c <GetUsbRxPointer+0xc>)
}
 801cf26:	0018      	movs	r0, r3
 801cf28:	46bd      	mov	sp, r7
 801cf2a:	bd80      	pop	{r7, pc}
 801cf2c:	2000276c 	.word	0x2000276c

0801cf30 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801cf30:	b580      	push	{r7, lr}
 801cf32:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801cf34:	4b07      	ldr	r3, [pc, #28]	@ (801cf54 <ResetUsbRxDataSize+0x24>)
 801cf36:	2200      	movs	r2, #0
 801cf38:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801cf3a:	4a07      	ldr	r2, [pc, #28]	@ (801cf58 <ResetUsbRxDataSize+0x28>)
 801cf3c:	4b07      	ldr	r3, [pc, #28]	@ (801cf5c <ResetUsbRxDataSize+0x2c>)
 801cf3e:	0011      	movs	r1, r2
 801cf40:	0018      	movs	r0, r3
 801cf42:	f7fe fc8e 	bl	801b862 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cf46:	4b05      	ldr	r3, [pc, #20]	@ (801cf5c <ResetUsbRxDataSize+0x2c>)
 801cf48:	0018      	movs	r0, r3
 801cf4a:	f7fe fcd5 	bl	801b8f8 <USBD_CDC_ReceivePacket>
}
 801cf4e:	46c0      	nop			@ (mov r8, r8)
 801cf50:	46bd      	mov	sp, r7
 801cf52:	bd80      	pop	{r7, pc}
 801cf54:	20002768 	.word	0x20002768
 801cf58:	2000276c 	.word	0x2000276c
 801cf5c:	200023e8 	.word	0x200023e8

0801cf60 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801cf64:	4b02      	ldr	r3, [pc, #8]	@ (801cf70 <GetUsbRxDataSize+0x10>)
 801cf66:	681b      	ldr	r3, [r3, #0]
}
 801cf68:	0018      	movs	r0, r3
 801cf6a:	46bd      	mov	sp, r7
 801cf6c:	bd80      	pop	{r7, pc}
 801cf6e:	46c0      	nop			@ (mov r8, r8)
 801cf70:	20002768 	.word	0x20002768

0801cf74 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801cf74:	b580      	push	{r7, lr}
 801cf76:	b082      	sub	sp, #8
 801cf78:	af00      	add	r7, sp, #0
 801cf7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801cf7c:	687a      	ldr	r2, [r7, #4]
 801cf7e:	4b07      	ldr	r3, [pc, #28]	@ (801cf9c <GetUsbRxNextChunk+0x28>)
 801cf80:	18d2      	adds	r2, r2, r3
 801cf82:	4b07      	ldr	r3, [pc, #28]	@ (801cfa0 <GetUsbRxNextChunk+0x2c>)
 801cf84:	0011      	movs	r1, r2
 801cf86:	0018      	movs	r0, r3
 801cf88:	f7fe fc6b 	bl	801b862 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cf8c:	4b04      	ldr	r3, [pc, #16]	@ (801cfa0 <GetUsbRxNextChunk+0x2c>)
 801cf8e:	0018      	movs	r0, r3
 801cf90:	f7fe fcb2 	bl	801b8f8 <USBD_CDC_ReceivePacket>
}
 801cf94:	46c0      	nop			@ (mov r8, r8)
 801cf96:	46bd      	mov	sp, r7
 801cf98:	b002      	add	sp, #8
 801cf9a:	bd80      	pop	{r7, pc}
 801cf9c:	2000276c 	.word	0x2000276c
 801cfa0:	200023e8 	.word	0x200023e8

0801cfa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cfa4:	b580      	push	{r7, lr}
 801cfa6:	b082      	sub	sp, #8
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	0002      	movs	r2, r0
 801cfac:	6039      	str	r1, [r7, #0]
 801cfae:	1dfb      	adds	r3, r7, #7
 801cfb0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cfb2:	683b      	ldr	r3, [r7, #0]
 801cfb4:	2212      	movs	r2, #18
 801cfb6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cfb8:	4b02      	ldr	r3, [pc, #8]	@ (801cfc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cfba:	0018      	movs	r0, r3
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	b002      	add	sp, #8
 801cfc0:	bd80      	pop	{r7, pc}
 801cfc2:	46c0      	nop			@ (mov r8, r8)
 801cfc4:	20000224 	.word	0x20000224

0801cfc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cfc8:	b580      	push	{r7, lr}
 801cfca:	b082      	sub	sp, #8
 801cfcc:	af00      	add	r7, sp, #0
 801cfce:	0002      	movs	r2, r0
 801cfd0:	6039      	str	r1, [r7, #0]
 801cfd2:	1dfb      	adds	r3, r7, #7
 801cfd4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cfd6:	683b      	ldr	r3, [r7, #0]
 801cfd8:	2204      	movs	r2, #4
 801cfda:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cfdc:	4b02      	ldr	r3, [pc, #8]	@ (801cfe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cfde:	0018      	movs	r0, r3
 801cfe0:	46bd      	mov	sp, r7
 801cfe2:	b002      	add	sp, #8
 801cfe4:	bd80      	pop	{r7, pc}
 801cfe6:	46c0      	nop			@ (mov r8, r8)
 801cfe8:	20000238 	.word	0x20000238

0801cfec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cfec:	b580      	push	{r7, lr}
 801cfee:	b082      	sub	sp, #8
 801cff0:	af00      	add	r7, sp, #0
 801cff2:	0002      	movs	r2, r0
 801cff4:	6039      	str	r1, [r7, #0]
 801cff6:	1dfb      	adds	r3, r7, #7
 801cff8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801cffa:	1dfb      	adds	r3, r7, #7
 801cffc:	781b      	ldrb	r3, [r3, #0]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d106      	bne.n	801d010 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d002:	683a      	ldr	r2, [r7, #0]
 801d004:	4908      	ldr	r1, [pc, #32]	@ (801d028 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d006:	4b09      	ldr	r3, [pc, #36]	@ (801d02c <USBD_FS_ProductStrDescriptor+0x40>)
 801d008:	0018      	movs	r0, r3
 801d00a:	f7ff fdb1 	bl	801cb70 <USBD_GetString>
 801d00e:	e005      	b.n	801d01c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d010:	683a      	ldr	r2, [r7, #0]
 801d012:	4905      	ldr	r1, [pc, #20]	@ (801d028 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d014:	4b05      	ldr	r3, [pc, #20]	@ (801d02c <USBD_FS_ProductStrDescriptor+0x40>)
 801d016:	0018      	movs	r0, r3
 801d018:	f7ff fdaa 	bl	801cb70 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d01c:	4b02      	ldr	r3, [pc, #8]	@ (801d028 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801d01e:	0018      	movs	r0, r3
 801d020:	46bd      	mov	sp, r7
 801d022:	b002      	add	sp, #8
 801d024:	bd80      	pop	{r7, pc}
 801d026:	46c0      	nop			@ (mov r8, r8)
 801d028:	20002f6c 	.word	0x20002f6c
 801d02c:	0802535c 	.word	0x0802535c

0801d030 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d030:	b580      	push	{r7, lr}
 801d032:	b082      	sub	sp, #8
 801d034:	af00      	add	r7, sp, #0
 801d036:	0002      	movs	r2, r0
 801d038:	6039      	str	r1, [r7, #0]
 801d03a:	1dfb      	adds	r3, r7, #7
 801d03c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d03e:	683a      	ldr	r2, [r7, #0]
 801d040:	4904      	ldr	r1, [pc, #16]	@ (801d054 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d042:	4b05      	ldr	r3, [pc, #20]	@ (801d058 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801d044:	0018      	movs	r0, r3
 801d046:	f7ff fd93 	bl	801cb70 <USBD_GetString>
  return USBD_StrDesc;
 801d04a:	4b02      	ldr	r3, [pc, #8]	@ (801d054 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801d04c:	0018      	movs	r0, r3
 801d04e:	46bd      	mov	sp, r7
 801d050:	b002      	add	sp, #8
 801d052:	bd80      	pop	{r7, pc}
 801d054:	20002f6c 	.word	0x20002f6c
 801d058:	08025374 	.word	0x08025374

0801d05c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d05c:	b580      	push	{r7, lr}
 801d05e:	b082      	sub	sp, #8
 801d060:	af00      	add	r7, sp, #0
 801d062:	0002      	movs	r2, r0
 801d064:	6039      	str	r1, [r7, #0]
 801d066:	1dfb      	adds	r3, r7, #7
 801d068:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d06a:	683b      	ldr	r3, [r7, #0]
 801d06c:	221a      	movs	r2, #26
 801d06e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d070:	f000 f84c 	bl	801d10c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d074:	4b02      	ldr	r3, [pc, #8]	@ (801d080 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801d076:	0018      	movs	r0, r3
 801d078:	46bd      	mov	sp, r7
 801d07a:	b002      	add	sp, #8
 801d07c:	bd80      	pop	{r7, pc}
 801d07e:	46c0      	nop			@ (mov r8, r8)
 801d080:	2000023c 	.word	0x2000023c

0801d084 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d084:	b580      	push	{r7, lr}
 801d086:	b082      	sub	sp, #8
 801d088:	af00      	add	r7, sp, #0
 801d08a:	0002      	movs	r2, r0
 801d08c:	6039      	str	r1, [r7, #0]
 801d08e:	1dfb      	adds	r3, r7, #7
 801d090:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801d092:	1dfb      	adds	r3, r7, #7
 801d094:	781b      	ldrb	r3, [r3, #0]
 801d096:	2b00      	cmp	r3, #0
 801d098:	d106      	bne.n	801d0a8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d09a:	683a      	ldr	r2, [r7, #0]
 801d09c:	4908      	ldr	r1, [pc, #32]	@ (801d0c0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d09e:	4b09      	ldr	r3, [pc, #36]	@ (801d0c4 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d0a0:	0018      	movs	r0, r3
 801d0a2:	f7ff fd65 	bl	801cb70 <USBD_GetString>
 801d0a6:	e005      	b.n	801d0b4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d0a8:	683a      	ldr	r2, [r7, #0]
 801d0aa:	4905      	ldr	r1, [pc, #20]	@ (801d0c0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d0ac:	4b05      	ldr	r3, [pc, #20]	@ (801d0c4 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d0ae:	0018      	movs	r0, r3
 801d0b0:	f7ff fd5e 	bl	801cb70 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d0b4:	4b02      	ldr	r3, [pc, #8]	@ (801d0c0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801d0b6:	0018      	movs	r0, r3
 801d0b8:	46bd      	mov	sp, r7
 801d0ba:	b002      	add	sp, #8
 801d0bc:	bd80      	pop	{r7, pc}
 801d0be:	46c0      	nop			@ (mov r8, r8)
 801d0c0:	20002f6c 	.word	0x20002f6c
 801d0c4:	08025388 	.word	0x08025388

0801d0c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b082      	sub	sp, #8
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	0002      	movs	r2, r0
 801d0d0:	6039      	str	r1, [r7, #0]
 801d0d2:	1dfb      	adds	r3, r7, #7
 801d0d4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d0d6:	1dfb      	adds	r3, r7, #7
 801d0d8:	781b      	ldrb	r3, [r3, #0]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d106      	bne.n	801d0ec <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d0de:	683a      	ldr	r2, [r7, #0]
 801d0e0:	4908      	ldr	r1, [pc, #32]	@ (801d104 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d0e2:	4b09      	ldr	r3, [pc, #36]	@ (801d108 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d0e4:	0018      	movs	r0, r3
 801d0e6:	f7ff fd43 	bl	801cb70 <USBD_GetString>
 801d0ea:	e005      	b.n	801d0f8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d0ec:	683a      	ldr	r2, [r7, #0]
 801d0ee:	4905      	ldr	r1, [pc, #20]	@ (801d104 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d0f0:	4b05      	ldr	r3, [pc, #20]	@ (801d108 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d0f2:	0018      	movs	r0, r3
 801d0f4:	f7ff fd3c 	bl	801cb70 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d0f8:	4b02      	ldr	r3, [pc, #8]	@ (801d104 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801d0fa:	0018      	movs	r0, r3
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	b002      	add	sp, #8
 801d100:	bd80      	pop	{r7, pc}
 801d102:	46c0      	nop			@ (mov r8, r8)
 801d104:	20002f6c 	.word	0x20002f6c
 801d108:	08025394 	.word	0x08025394

0801d10c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b084      	sub	sp, #16
 801d110:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d112:	4b10      	ldr	r3, [pc, #64]	@ (801d154 <Get_SerialNum+0x48>)
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d118:	4b0f      	ldr	r3, [pc, #60]	@ (801d158 <Get_SerialNum+0x4c>)
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d11e:	4b0f      	ldr	r3, [pc, #60]	@ (801d15c <Get_SerialNum+0x50>)
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d124:	68fa      	ldr	r2, [r7, #12]
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	18d3      	adds	r3, r2, r3
 801d12a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d12c:	68fb      	ldr	r3, [r7, #12]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d00b      	beq.n	801d14a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d132:	490b      	ldr	r1, [pc, #44]	@ (801d160 <Get_SerialNum+0x54>)
 801d134:	68fb      	ldr	r3, [r7, #12]
 801d136:	2208      	movs	r2, #8
 801d138:	0018      	movs	r0, r3
 801d13a:	f000 f815 	bl	801d168 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d13e:	4909      	ldr	r1, [pc, #36]	@ (801d164 <Get_SerialNum+0x58>)
 801d140:	68bb      	ldr	r3, [r7, #8]
 801d142:	2204      	movs	r2, #4
 801d144:	0018      	movs	r0, r3
 801d146:	f000 f80f 	bl	801d168 <IntToUnicode>
  }
}
 801d14a:	46c0      	nop			@ (mov r8, r8)
 801d14c:	46bd      	mov	sp, r7
 801d14e:	b004      	add	sp, #16
 801d150:	bd80      	pop	{r7, pc}
 801d152:	46c0      	nop			@ (mov r8, r8)
 801d154:	1ff80050 	.word	0x1ff80050
 801d158:	1ff80054 	.word	0x1ff80054
 801d15c:	1ff80058 	.word	0x1ff80058
 801d160:	2000023e 	.word	0x2000023e
 801d164:	2000024e 	.word	0x2000024e

0801d168 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d168:	b580      	push	{r7, lr}
 801d16a:	b086      	sub	sp, #24
 801d16c:	af00      	add	r7, sp, #0
 801d16e:	60f8      	str	r0, [r7, #12]
 801d170:	60b9      	str	r1, [r7, #8]
 801d172:	1dfb      	adds	r3, r7, #7
 801d174:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801d176:	2117      	movs	r1, #23
 801d178:	187b      	adds	r3, r7, r1
 801d17a:	2200      	movs	r2, #0
 801d17c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801d17e:	187b      	adds	r3, r7, r1
 801d180:	2200      	movs	r2, #0
 801d182:	701a      	strb	r2, [r3, #0]
 801d184:	e02f      	b.n	801d1e6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	0f1b      	lsrs	r3, r3, #28
 801d18a:	2b09      	cmp	r3, #9
 801d18c:	d80d      	bhi.n	801d1aa <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	0f1b      	lsrs	r3, r3, #28
 801d192:	b2da      	uxtb	r2, r3
 801d194:	2317      	movs	r3, #23
 801d196:	18fb      	adds	r3, r7, r3
 801d198:	781b      	ldrb	r3, [r3, #0]
 801d19a:	005b      	lsls	r3, r3, #1
 801d19c:	0019      	movs	r1, r3
 801d19e:	68bb      	ldr	r3, [r7, #8]
 801d1a0:	185b      	adds	r3, r3, r1
 801d1a2:	3230      	adds	r2, #48	@ 0x30
 801d1a4:	b2d2      	uxtb	r2, r2
 801d1a6:	701a      	strb	r2, [r3, #0]
 801d1a8:	e00c      	b.n	801d1c4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	0f1b      	lsrs	r3, r3, #28
 801d1ae:	b2da      	uxtb	r2, r3
 801d1b0:	2317      	movs	r3, #23
 801d1b2:	18fb      	adds	r3, r7, r3
 801d1b4:	781b      	ldrb	r3, [r3, #0]
 801d1b6:	005b      	lsls	r3, r3, #1
 801d1b8:	0019      	movs	r1, r3
 801d1ba:	68bb      	ldr	r3, [r7, #8]
 801d1bc:	185b      	adds	r3, r3, r1
 801d1be:	3237      	adds	r2, #55	@ 0x37
 801d1c0:	b2d2      	uxtb	r2, r2
 801d1c2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d1c4:	68fb      	ldr	r3, [r7, #12]
 801d1c6:	011b      	lsls	r3, r3, #4
 801d1c8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d1ca:	2117      	movs	r1, #23
 801d1cc:	187b      	adds	r3, r7, r1
 801d1ce:	781b      	ldrb	r3, [r3, #0]
 801d1d0:	005b      	lsls	r3, r3, #1
 801d1d2:	3301      	adds	r3, #1
 801d1d4:	68ba      	ldr	r2, [r7, #8]
 801d1d6:	18d3      	adds	r3, r2, r3
 801d1d8:	2200      	movs	r2, #0
 801d1da:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d1dc:	187b      	adds	r3, r7, r1
 801d1de:	781a      	ldrb	r2, [r3, #0]
 801d1e0:	187b      	adds	r3, r7, r1
 801d1e2:	3201      	adds	r2, #1
 801d1e4:	701a      	strb	r2, [r3, #0]
 801d1e6:	2317      	movs	r3, #23
 801d1e8:	18fa      	adds	r2, r7, r3
 801d1ea:	1dfb      	adds	r3, r7, #7
 801d1ec:	7812      	ldrb	r2, [r2, #0]
 801d1ee:	781b      	ldrb	r3, [r3, #0]
 801d1f0:	429a      	cmp	r2, r3
 801d1f2:	d3c8      	bcc.n	801d186 <IntToUnicode+0x1e>
  }
}
 801d1f4:	46c0      	nop			@ (mov r8, r8)
 801d1f6:	46c0      	nop			@ (mov r8, r8)
 801d1f8:	46bd      	mov	sp, r7
 801d1fa:	b006      	add	sp, #24
 801d1fc:	bd80      	pop	{r7, pc}
	...

0801d200 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d200:	b580      	push	{r7, lr}
 801d202:	b082      	sub	sp, #8
 801d204:	af00      	add	r7, sp, #0
 801d206:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	4a0a      	ldr	r2, [pc, #40]	@ (801d238 <HAL_PCD_MspInit+0x38>)
 801d20e:	4293      	cmp	r3, r2
 801d210:	d10e      	bne.n	801d230 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d212:	4b0a      	ldr	r3, [pc, #40]	@ (801d23c <HAL_PCD_MspInit+0x3c>)
 801d214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d216:	4b09      	ldr	r3, [pc, #36]	@ (801d23c <HAL_PCD_MspInit+0x3c>)
 801d218:	2180      	movs	r1, #128	@ 0x80
 801d21a:	0409      	lsls	r1, r1, #16
 801d21c:	430a      	orrs	r2, r1
 801d21e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d220:	2200      	movs	r2, #0
 801d222:	2100      	movs	r1, #0
 801d224:	201f      	movs	r0, #31
 801d226:	f7f2 fadf 	bl	800f7e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d22a:	201f      	movs	r0, #31
 801d22c:	f7f2 faf1 	bl	800f812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d230:	46c0      	nop			@ (mov r8, r8)
 801d232:	46bd      	mov	sp, r7
 801d234:	b002      	add	sp, #8
 801d236:	bd80      	pop	{r7, pc}
 801d238:	40005c00 	.word	0x40005c00
 801d23c:	40021000 	.word	0x40021000

0801d240 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d240:	b580      	push	{r7, lr}
 801d242:	b082      	sub	sp, #8
 801d244:	af00      	add	r7, sp, #0
 801d246:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d248:	687a      	ldr	r2, [r7, #4]
 801d24a:	23bc      	movs	r3, #188	@ 0xbc
 801d24c:	009b      	lsls	r3, r3, #2
 801d24e:	58d2      	ldr	r2, [r2, r3]
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	21ac      	movs	r1, #172	@ 0xac
 801d254:	0089      	lsls	r1, r1, #2
 801d256:	468c      	mov	ip, r1
 801d258:	4463      	add	r3, ip
 801d25a:	0019      	movs	r1, r3
 801d25c:	0010      	movs	r0, r2
 801d25e:	f7fe fc1d 	bl	801ba9c <USBD_LL_SetupStage>
}
 801d262:	46c0      	nop			@ (mov r8, r8)
 801d264:	46bd      	mov	sp, r7
 801d266:	b002      	add	sp, #8
 801d268:	bd80      	pop	{r7, pc}

0801d26a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d26a:	b590      	push	{r4, r7, lr}
 801d26c:	b083      	sub	sp, #12
 801d26e:	af00      	add	r7, sp, #0
 801d270:	6078      	str	r0, [r7, #4]
 801d272:	000a      	movs	r2, r1
 801d274:	1cfb      	adds	r3, r7, #3
 801d276:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d278:	687a      	ldr	r2, [r7, #4]
 801d27a:	23bc      	movs	r3, #188	@ 0xbc
 801d27c:	009b      	lsls	r3, r3, #2
 801d27e:	58d4      	ldr	r4, [r2, r3]
 801d280:	1cfb      	adds	r3, r7, #3
 801d282:	781a      	ldrb	r2, [r3, #0]
 801d284:	6878      	ldr	r0, [r7, #4]
 801d286:	23be      	movs	r3, #190	@ 0xbe
 801d288:	0059      	lsls	r1, r3, #1
 801d28a:	0013      	movs	r3, r2
 801d28c:	009b      	lsls	r3, r3, #2
 801d28e:	189b      	adds	r3, r3, r2
 801d290:	00db      	lsls	r3, r3, #3
 801d292:	18c3      	adds	r3, r0, r3
 801d294:	185b      	adds	r3, r3, r1
 801d296:	681a      	ldr	r2, [r3, #0]
 801d298:	1cfb      	adds	r3, r7, #3
 801d29a:	781b      	ldrb	r3, [r3, #0]
 801d29c:	0019      	movs	r1, r3
 801d29e:	0020      	movs	r0, r4
 801d2a0:	f7fe fc5a 	bl	801bb58 <USBD_LL_DataOutStage>
}
 801d2a4:	46c0      	nop			@ (mov r8, r8)
 801d2a6:	46bd      	mov	sp, r7
 801d2a8:	b003      	add	sp, #12
 801d2aa:	bd90      	pop	{r4, r7, pc}

0801d2ac <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b082      	sub	sp, #8
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
 801d2b4:	000a      	movs	r2, r1
 801d2b6:	1cfb      	adds	r3, r7, #3
 801d2b8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d2ba:	687a      	ldr	r2, [r7, #4]
 801d2bc:	23bc      	movs	r3, #188	@ 0xbc
 801d2be:	009b      	lsls	r3, r3, #2
 801d2c0:	58d0      	ldr	r0, [r2, r3]
 801d2c2:	1cfb      	adds	r3, r7, #3
 801d2c4:	781a      	ldrb	r2, [r3, #0]
 801d2c6:	6879      	ldr	r1, [r7, #4]
 801d2c8:	0013      	movs	r3, r2
 801d2ca:	009b      	lsls	r3, r3, #2
 801d2cc:	189b      	adds	r3, r3, r2
 801d2ce:	00db      	lsls	r3, r3, #3
 801d2d0:	18cb      	adds	r3, r1, r3
 801d2d2:	333c      	adds	r3, #60	@ 0x3c
 801d2d4:	681a      	ldr	r2, [r3, #0]
 801d2d6:	1cfb      	adds	r3, r7, #3
 801d2d8:	781b      	ldrb	r3, [r3, #0]
 801d2da:	0019      	movs	r1, r3
 801d2dc:	f7fe fcbe 	bl	801bc5c <USBD_LL_DataInStage>
}
 801d2e0:	46c0      	nop			@ (mov r8, r8)
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	b002      	add	sp, #8
 801d2e6:	bd80      	pop	{r7, pc}

0801d2e8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2e8:	b580      	push	{r7, lr}
 801d2ea:	b082      	sub	sp, #8
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d2f0:	687a      	ldr	r2, [r7, #4]
 801d2f2:	23bc      	movs	r3, #188	@ 0xbc
 801d2f4:	009b      	lsls	r3, r3, #2
 801d2f6:	58d3      	ldr	r3, [r2, r3]
 801d2f8:	0018      	movs	r0, r3
 801d2fa:	f7fe fdf5 	bl	801bee8 <USBD_LL_SOF>
}
 801d2fe:	46c0      	nop			@ (mov r8, r8)
 801d300:	46bd      	mov	sp, r7
 801d302:	b002      	add	sp, #8
 801d304:	bd80      	pop	{r7, pc}

0801d306 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d306:	b580      	push	{r7, lr}
 801d308:	b084      	sub	sp, #16
 801d30a:	af00      	add	r7, sp, #0
 801d30c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d30e:	230f      	movs	r3, #15
 801d310:	18fb      	adds	r3, r7, r3
 801d312:	2201      	movs	r2, #1
 801d314:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	689b      	ldr	r3, [r3, #8]
 801d31a:	2b02      	cmp	r3, #2
 801d31c:	d001      	beq.n	801d322 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d31e:	f7eb f809 	bl	8008334 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d322:	687a      	ldr	r2, [r7, #4]
 801d324:	23bc      	movs	r3, #188	@ 0xbc
 801d326:	009b      	lsls	r3, r3, #2
 801d328:	58d2      	ldr	r2, [r2, r3]
 801d32a:	230f      	movs	r3, #15
 801d32c:	18fb      	adds	r3, r7, r3
 801d32e:	781b      	ldrb	r3, [r3, #0]
 801d330:	0019      	movs	r1, r3
 801d332:	0010      	movs	r0, r2
 801d334:	f7fe fd97 	bl	801be66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d338:	687a      	ldr	r2, [r7, #4]
 801d33a:	23bc      	movs	r3, #188	@ 0xbc
 801d33c:	009b      	lsls	r3, r3, #2
 801d33e:	58d3      	ldr	r3, [r2, r3]
 801d340:	0018      	movs	r0, r3
 801d342:	f7fe fd48 	bl	801bdd6 <USBD_LL_Reset>
}
 801d346:	46c0      	nop			@ (mov r8, r8)
 801d348:	46bd      	mov	sp, r7
 801d34a:	b004      	add	sp, #16
 801d34c:	bd80      	pop	{r7, pc}
	...

0801d350 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d350:	b580      	push	{r7, lr}
 801d352:	b082      	sub	sp, #8
 801d354:	af00      	add	r7, sp, #0
 801d356:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d358:	687a      	ldr	r2, [r7, #4]
 801d35a:	23bc      	movs	r3, #188	@ 0xbc
 801d35c:	009b      	lsls	r3, r3, #2
 801d35e:	58d3      	ldr	r3, [r2, r3]
 801d360:	0018      	movs	r0, r3
 801d362:	f7fe fd91 	bl	801be88 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	699b      	ldr	r3, [r3, #24]
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d005      	beq.n	801d37a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d36e:	4b05      	ldr	r3, [pc, #20]	@ (801d384 <HAL_PCD_SuspendCallback+0x34>)
 801d370:	691a      	ldr	r2, [r3, #16]
 801d372:	4b04      	ldr	r3, [pc, #16]	@ (801d384 <HAL_PCD_SuspendCallback+0x34>)
 801d374:	2106      	movs	r1, #6
 801d376:	430a      	orrs	r2, r1
 801d378:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d37a:	46c0      	nop			@ (mov r8, r8)
 801d37c:	46bd      	mov	sp, r7
 801d37e:	b002      	add	sp, #8
 801d380:	bd80      	pop	{r7, pc}
 801d382:	46c0      	nop			@ (mov r8, r8)
 801d384:	e000ed00 	.word	0xe000ed00

0801d388 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d388:	b580      	push	{r7, lr}
 801d38a:	b082      	sub	sp, #8
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	699b      	ldr	r3, [r3, #24]
 801d394:	2b00      	cmp	r3, #0
 801d396:	d007      	beq.n	801d3a8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d398:	4b09      	ldr	r3, [pc, #36]	@ (801d3c0 <HAL_PCD_ResumeCallback+0x38>)
 801d39a:	691a      	ldr	r2, [r3, #16]
 801d39c:	4b08      	ldr	r3, [pc, #32]	@ (801d3c0 <HAL_PCD_ResumeCallback+0x38>)
 801d39e:	2106      	movs	r1, #6
 801d3a0:	438a      	bics	r2, r1
 801d3a2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d3a4:	f000 fa44 	bl	801d830 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d3a8:	687a      	ldr	r2, [r7, #4]
 801d3aa:	23bc      	movs	r3, #188	@ 0xbc
 801d3ac:	009b      	lsls	r3, r3, #2
 801d3ae:	58d3      	ldr	r3, [r2, r3]
 801d3b0:	0018      	movs	r0, r3
 801d3b2:	f7fe fd81 	bl	801beb8 <USBD_LL_Resume>
}
 801d3b6:	46c0      	nop			@ (mov r8, r8)
 801d3b8:	46bd      	mov	sp, r7
 801d3ba:	b002      	add	sp, #8
 801d3bc:	bd80      	pop	{r7, pc}
 801d3be:	46c0      	nop			@ (mov r8, r8)
 801d3c0:	e000ed00 	.word	0xe000ed00

0801d3c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d3c4:	b580      	push	{r7, lr}
 801d3c6:	b082      	sub	sp, #8
 801d3c8:	af00      	add	r7, sp, #0
 801d3ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d3cc:	4a2d      	ldr	r2, [pc, #180]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d3ce:	23bc      	movs	r3, #188	@ 0xbc
 801d3d0:	009b      	lsls	r3, r3, #2
 801d3d2:	6879      	ldr	r1, [r7, #4]
 801d3d4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d3d6:	687a      	ldr	r2, [r7, #4]
 801d3d8:	23b0      	movs	r3, #176	@ 0xb0
 801d3da:	009b      	lsls	r3, r3, #2
 801d3dc:	4929      	ldr	r1, [pc, #164]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d3de:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d3e0:	4b28      	ldr	r3, [pc, #160]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d3e2:	4a29      	ldr	r2, [pc, #164]	@ (801d488 <USBD_LL_Init+0xc4>)
 801d3e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d3e6:	4b27      	ldr	r3, [pc, #156]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d3e8:	2208      	movs	r2, #8
 801d3ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d3ec:	4b25      	ldr	r3, [pc, #148]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d3ee:	2202      	movs	r2, #2
 801d3f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d3f2:	4b24      	ldr	r3, [pc, #144]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d3f4:	2202      	movs	r2, #2
 801d3f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d3f8:	4b22      	ldr	r3, [pc, #136]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d3fe:	4b21      	ldr	r3, [pc, #132]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d400:	2200      	movs	r2, #0
 801d402:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d404:	4b1f      	ldr	r3, [pc, #124]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d406:	2200      	movs	r2, #0
 801d408:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d40a:	4b1e      	ldr	r3, [pc, #120]	@ (801d484 <USBD_LL_Init+0xc0>)
 801d40c:	0018      	movs	r0, r3
 801d40e:	f7f5 ff95 	bl	801333c <HAL_PCD_Init>
 801d412:	1e03      	subs	r3, r0, #0
 801d414:	d001      	beq.n	801d41a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d416:	f7ea ff8d 	bl	8008334 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d41a:	687a      	ldr	r2, [r7, #4]
 801d41c:	23b0      	movs	r3, #176	@ 0xb0
 801d41e:	009b      	lsls	r3, r3, #2
 801d420:	58d0      	ldr	r0, [r2, r3]
 801d422:	2318      	movs	r3, #24
 801d424:	2200      	movs	r2, #0
 801d426:	2100      	movs	r1, #0
 801d428:	f7f7 fd56 	bl	8014ed8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d42c:	687a      	ldr	r2, [r7, #4]
 801d42e:	23b0      	movs	r3, #176	@ 0xb0
 801d430:	009b      	lsls	r3, r3, #2
 801d432:	58d0      	ldr	r0, [r2, r3]
 801d434:	2358      	movs	r3, #88	@ 0x58
 801d436:	2200      	movs	r2, #0
 801d438:	2180      	movs	r1, #128	@ 0x80
 801d43a:	f7f7 fd4d 	bl	8014ed8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d43e:	687a      	ldr	r2, [r7, #4]
 801d440:	23b0      	movs	r3, #176	@ 0xb0
 801d442:	009b      	lsls	r3, r3, #2
 801d444:	58d0      	ldr	r0, [r2, r3]
 801d446:	23c0      	movs	r3, #192	@ 0xc0
 801d448:	2200      	movs	r2, #0
 801d44a:	2181      	movs	r1, #129	@ 0x81
 801d44c:	f7f7 fd44 	bl	8014ed8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d450:	687a      	ldr	r2, [r7, #4]
 801d452:	23b0      	movs	r3, #176	@ 0xb0
 801d454:	009b      	lsls	r3, r3, #2
 801d456:	58d0      	ldr	r0, [r2, r3]
 801d458:	2388      	movs	r3, #136	@ 0x88
 801d45a:	005b      	lsls	r3, r3, #1
 801d45c:	2200      	movs	r2, #0
 801d45e:	2101      	movs	r1, #1
 801d460:	f7f7 fd3a 	bl	8014ed8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d464:	687a      	ldr	r2, [r7, #4]
 801d466:	23b0      	movs	r3, #176	@ 0xb0
 801d468:	009b      	lsls	r3, r3, #2
 801d46a:	58d0      	ldr	r0, [r2, r3]
 801d46c:	2380      	movs	r3, #128	@ 0x80
 801d46e:	005b      	lsls	r3, r3, #1
 801d470:	2200      	movs	r2, #0
 801d472:	2182      	movs	r1, #130	@ 0x82
 801d474:	f7f7 fd30 	bl	8014ed8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d478:	2300      	movs	r3, #0
}
 801d47a:	0018      	movs	r0, r3
 801d47c:	46bd      	mov	sp, r7
 801d47e:	b002      	add	sp, #8
 801d480:	bd80      	pop	{r7, pc}
 801d482:	46c0      	nop			@ (mov r8, r8)
 801d484:	2000316c 	.word	0x2000316c
 801d488:	40005c00 	.word	0x40005c00

0801d48c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d48e:	b085      	sub	sp, #20
 801d490:	af00      	add	r7, sp, #0
 801d492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d494:	210f      	movs	r1, #15
 801d496:	187b      	adds	r3, r7, r1
 801d498:	2200      	movs	r2, #0
 801d49a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d49c:	260e      	movs	r6, #14
 801d49e:	19bb      	adds	r3, r7, r6
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d4a4:	687a      	ldr	r2, [r7, #4]
 801d4a6:	23b0      	movs	r3, #176	@ 0xb0
 801d4a8:	009b      	lsls	r3, r3, #2
 801d4aa:	58d3      	ldr	r3, [r2, r3]
 801d4ac:	000d      	movs	r5, r1
 801d4ae:	187c      	adds	r4, r7, r1
 801d4b0:	0018      	movs	r0, r3
 801d4b2:	f7f6 f843 	bl	801353c <HAL_PCD_Start>
 801d4b6:	0003      	movs	r3, r0
 801d4b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4ba:	19bc      	adds	r4, r7, r6
 801d4bc:	197b      	adds	r3, r7, r5
 801d4be:	781b      	ldrb	r3, [r3, #0]
 801d4c0:	0018      	movs	r0, r3
 801d4c2:	f000 f9bc 	bl	801d83e <USBD_Get_USB_Status>
 801d4c6:	0003      	movs	r3, r0
 801d4c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d4ca:	19bb      	adds	r3, r7, r6
 801d4cc:	781b      	ldrb	r3, [r3, #0]
}
 801d4ce:	0018      	movs	r0, r3
 801d4d0:	46bd      	mov	sp, r7
 801d4d2:	b005      	add	sp, #20
 801d4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d4d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d4d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4d8:	b085      	sub	sp, #20
 801d4da:	af00      	add	r7, sp, #0
 801d4dc:	6078      	str	r0, [r7, #4]
 801d4de:	000c      	movs	r4, r1
 801d4e0:	0010      	movs	r0, r2
 801d4e2:	0019      	movs	r1, r3
 801d4e4:	1cfb      	adds	r3, r7, #3
 801d4e6:	1c22      	adds	r2, r4, #0
 801d4e8:	701a      	strb	r2, [r3, #0]
 801d4ea:	1cbb      	adds	r3, r7, #2
 801d4ec:	1c02      	adds	r2, r0, #0
 801d4ee:	701a      	strb	r2, [r3, #0]
 801d4f0:	003b      	movs	r3, r7
 801d4f2:	1c0a      	adds	r2, r1, #0
 801d4f4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4f6:	260f      	movs	r6, #15
 801d4f8:	19bb      	adds	r3, r7, r6
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4fe:	250e      	movs	r5, #14
 801d500:	197b      	adds	r3, r7, r5
 801d502:	2200      	movs	r2, #0
 801d504:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d506:	687a      	ldr	r2, [r7, #4]
 801d508:	23b0      	movs	r3, #176	@ 0xb0
 801d50a:	009b      	lsls	r3, r3, #2
 801d50c:	58d0      	ldr	r0, [r2, r3]
 801d50e:	19bc      	adds	r4, r7, r6
 801d510:	1cbb      	adds	r3, r7, #2
 801d512:	781d      	ldrb	r5, [r3, #0]
 801d514:	003b      	movs	r3, r7
 801d516:	881a      	ldrh	r2, [r3, #0]
 801d518:	1cfb      	adds	r3, r7, #3
 801d51a:	7819      	ldrb	r1, [r3, #0]
 801d51c:	002b      	movs	r3, r5
 801d51e:	f7f6 f9a2 	bl	8013866 <HAL_PCD_EP_Open>
 801d522:	0003      	movs	r3, r0
 801d524:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d526:	250e      	movs	r5, #14
 801d528:	197c      	adds	r4, r7, r5
 801d52a:	19bb      	adds	r3, r7, r6
 801d52c:	781b      	ldrb	r3, [r3, #0]
 801d52e:	0018      	movs	r0, r3
 801d530:	f000 f985 	bl	801d83e <USBD_Get_USB_Status>
 801d534:	0003      	movs	r3, r0
 801d536:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d538:	197b      	adds	r3, r7, r5
 801d53a:	781b      	ldrb	r3, [r3, #0]
}
 801d53c:	0018      	movs	r0, r3
 801d53e:	46bd      	mov	sp, r7
 801d540:	b005      	add	sp, #20
 801d542:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d544 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d544:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d546:	b085      	sub	sp, #20
 801d548:	af00      	add	r7, sp, #0
 801d54a:	6078      	str	r0, [r7, #4]
 801d54c:	000a      	movs	r2, r1
 801d54e:	1cfb      	adds	r3, r7, #3
 801d550:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d552:	210f      	movs	r1, #15
 801d554:	187b      	adds	r3, r7, r1
 801d556:	2200      	movs	r2, #0
 801d558:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d55a:	260e      	movs	r6, #14
 801d55c:	19bb      	adds	r3, r7, r6
 801d55e:	2200      	movs	r2, #0
 801d560:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d562:	687a      	ldr	r2, [r7, #4]
 801d564:	23b0      	movs	r3, #176	@ 0xb0
 801d566:	009b      	lsls	r3, r3, #2
 801d568:	58d2      	ldr	r2, [r2, r3]
 801d56a:	000d      	movs	r5, r1
 801d56c:	187c      	adds	r4, r7, r1
 801d56e:	1cfb      	adds	r3, r7, #3
 801d570:	781b      	ldrb	r3, [r3, #0]
 801d572:	0019      	movs	r1, r3
 801d574:	0010      	movs	r0, r2
 801d576:	f7f6 f9e5 	bl	8013944 <HAL_PCD_EP_Close>
 801d57a:	0003      	movs	r3, r0
 801d57c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d57e:	19bc      	adds	r4, r7, r6
 801d580:	197b      	adds	r3, r7, r5
 801d582:	781b      	ldrb	r3, [r3, #0]
 801d584:	0018      	movs	r0, r3
 801d586:	f000 f95a 	bl	801d83e <USBD_Get_USB_Status>
 801d58a:	0003      	movs	r3, r0
 801d58c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d58e:	19bb      	adds	r3, r7, r6
 801d590:	781b      	ldrb	r3, [r3, #0]
}
 801d592:	0018      	movs	r0, r3
 801d594:	46bd      	mov	sp, r7
 801d596:	b005      	add	sp, #20
 801d598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d59a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d59a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d59c:	b085      	sub	sp, #20
 801d59e:	af00      	add	r7, sp, #0
 801d5a0:	6078      	str	r0, [r7, #4]
 801d5a2:	000a      	movs	r2, r1
 801d5a4:	1cfb      	adds	r3, r7, #3
 801d5a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5a8:	210f      	movs	r1, #15
 801d5aa:	187b      	adds	r3, r7, r1
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5b0:	260e      	movs	r6, #14
 801d5b2:	19bb      	adds	r3, r7, r6
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d5b8:	687a      	ldr	r2, [r7, #4]
 801d5ba:	23b0      	movs	r3, #176	@ 0xb0
 801d5bc:	009b      	lsls	r3, r3, #2
 801d5be:	58d2      	ldr	r2, [r2, r3]
 801d5c0:	000d      	movs	r5, r1
 801d5c2:	187c      	adds	r4, r7, r1
 801d5c4:	1cfb      	adds	r3, r7, #3
 801d5c6:	781b      	ldrb	r3, [r3, #0]
 801d5c8:	0019      	movs	r1, r3
 801d5ca:	0010      	movs	r0, r2
 801d5cc:	f7f6 fa97 	bl	8013afe <HAL_PCD_EP_SetStall>
 801d5d0:	0003      	movs	r3, r0
 801d5d2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5d4:	19bc      	adds	r4, r7, r6
 801d5d6:	197b      	adds	r3, r7, r5
 801d5d8:	781b      	ldrb	r3, [r3, #0]
 801d5da:	0018      	movs	r0, r3
 801d5dc:	f000 f92f 	bl	801d83e <USBD_Get_USB_Status>
 801d5e0:	0003      	movs	r3, r0
 801d5e2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d5e4:	19bb      	adds	r3, r7, r6
 801d5e6:	781b      	ldrb	r3, [r3, #0]
}
 801d5e8:	0018      	movs	r0, r3
 801d5ea:	46bd      	mov	sp, r7
 801d5ec:	b005      	add	sp, #20
 801d5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5f0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5f2:	b085      	sub	sp, #20
 801d5f4:	af00      	add	r7, sp, #0
 801d5f6:	6078      	str	r0, [r7, #4]
 801d5f8:	000a      	movs	r2, r1
 801d5fa:	1cfb      	adds	r3, r7, #3
 801d5fc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5fe:	210f      	movs	r1, #15
 801d600:	187b      	adds	r3, r7, r1
 801d602:	2200      	movs	r2, #0
 801d604:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d606:	260e      	movs	r6, #14
 801d608:	19bb      	adds	r3, r7, r6
 801d60a:	2200      	movs	r2, #0
 801d60c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d60e:	687a      	ldr	r2, [r7, #4]
 801d610:	23b0      	movs	r3, #176	@ 0xb0
 801d612:	009b      	lsls	r3, r3, #2
 801d614:	58d2      	ldr	r2, [r2, r3]
 801d616:	000d      	movs	r5, r1
 801d618:	187c      	adds	r4, r7, r1
 801d61a:	1cfb      	adds	r3, r7, #3
 801d61c:	781b      	ldrb	r3, [r3, #0]
 801d61e:	0019      	movs	r1, r3
 801d620:	0010      	movs	r0, r2
 801d622:	f7f6 fac8 	bl	8013bb6 <HAL_PCD_EP_ClrStall>
 801d626:	0003      	movs	r3, r0
 801d628:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d62a:	19bc      	adds	r4, r7, r6
 801d62c:	197b      	adds	r3, r7, r5
 801d62e:	781b      	ldrb	r3, [r3, #0]
 801d630:	0018      	movs	r0, r3
 801d632:	f000 f904 	bl	801d83e <USBD_Get_USB_Status>
 801d636:	0003      	movs	r3, r0
 801d638:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d63a:	19bb      	adds	r3, r7, r6
 801d63c:	781b      	ldrb	r3, [r3, #0]
}
 801d63e:	0018      	movs	r0, r3
 801d640:	46bd      	mov	sp, r7
 801d642:	b005      	add	sp, #20
 801d644:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d646 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d646:	b580      	push	{r7, lr}
 801d648:	b084      	sub	sp, #16
 801d64a:	af00      	add	r7, sp, #0
 801d64c:	6078      	str	r0, [r7, #4]
 801d64e:	000a      	movs	r2, r1
 801d650:	1cfb      	adds	r3, r7, #3
 801d652:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d654:	687a      	ldr	r2, [r7, #4]
 801d656:	23b0      	movs	r3, #176	@ 0xb0
 801d658:	009b      	lsls	r3, r3, #2
 801d65a:	58d3      	ldr	r3, [r2, r3]
 801d65c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d65e:	1cfb      	adds	r3, r7, #3
 801d660:	781b      	ldrb	r3, [r3, #0]
 801d662:	b25b      	sxtb	r3, r3
 801d664:	2b00      	cmp	r3, #0
 801d666:	da0d      	bge.n	801d684 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d668:	1cfb      	adds	r3, r7, #3
 801d66a:	781b      	ldrb	r3, [r3, #0]
 801d66c:	227f      	movs	r2, #127	@ 0x7f
 801d66e:	4013      	ands	r3, r2
 801d670:	68f9      	ldr	r1, [r7, #12]
 801d672:	1c5a      	adds	r2, r3, #1
 801d674:	0013      	movs	r3, r2
 801d676:	009b      	lsls	r3, r3, #2
 801d678:	189b      	adds	r3, r3, r2
 801d67a:	00db      	lsls	r3, r3, #3
 801d67c:	18cb      	adds	r3, r1, r3
 801d67e:	3302      	adds	r3, #2
 801d680:	781b      	ldrb	r3, [r3, #0]
 801d682:	e00d      	b.n	801d6a0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d684:	1cfb      	adds	r3, r7, #3
 801d686:	781b      	ldrb	r3, [r3, #0]
 801d688:	227f      	movs	r2, #127	@ 0x7f
 801d68a:	401a      	ands	r2, r3
 801d68c:	68f8      	ldr	r0, [r7, #12]
 801d68e:	23b5      	movs	r3, #181	@ 0xb5
 801d690:	0059      	lsls	r1, r3, #1
 801d692:	0013      	movs	r3, r2
 801d694:	009b      	lsls	r3, r3, #2
 801d696:	189b      	adds	r3, r3, r2
 801d698:	00db      	lsls	r3, r3, #3
 801d69a:	18c3      	adds	r3, r0, r3
 801d69c:	185b      	adds	r3, r3, r1
 801d69e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d6a0:	0018      	movs	r0, r3
 801d6a2:	46bd      	mov	sp, r7
 801d6a4:	b004      	add	sp, #16
 801d6a6:	bd80      	pop	{r7, pc}

0801d6a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6aa:	b085      	sub	sp, #20
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	6078      	str	r0, [r7, #4]
 801d6b0:	000a      	movs	r2, r1
 801d6b2:	1cfb      	adds	r3, r7, #3
 801d6b4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6b6:	210f      	movs	r1, #15
 801d6b8:	187b      	adds	r3, r7, r1
 801d6ba:	2200      	movs	r2, #0
 801d6bc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6be:	260e      	movs	r6, #14
 801d6c0:	19bb      	adds	r3, r7, r6
 801d6c2:	2200      	movs	r2, #0
 801d6c4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d6c6:	687a      	ldr	r2, [r7, #4]
 801d6c8:	23b0      	movs	r3, #176	@ 0xb0
 801d6ca:	009b      	lsls	r3, r3, #2
 801d6cc:	58d2      	ldr	r2, [r2, r3]
 801d6ce:	000d      	movs	r5, r1
 801d6d0:	187c      	adds	r4, r7, r1
 801d6d2:	1cfb      	adds	r3, r7, #3
 801d6d4:	781b      	ldrb	r3, [r3, #0]
 801d6d6:	0019      	movs	r1, r3
 801d6d8:	0010      	movs	r0, r2
 801d6da:	f7f6 f899 	bl	8013810 <HAL_PCD_SetAddress>
 801d6de:	0003      	movs	r3, r0
 801d6e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d6e2:	19bc      	adds	r4, r7, r6
 801d6e4:	197b      	adds	r3, r7, r5
 801d6e6:	781b      	ldrb	r3, [r3, #0]
 801d6e8:	0018      	movs	r0, r3
 801d6ea:	f000 f8a8 	bl	801d83e <USBD_Get_USB_Status>
 801d6ee:	0003      	movs	r3, r0
 801d6f0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d6f2:	19bb      	adds	r3, r7, r6
 801d6f4:	781b      	ldrb	r3, [r3, #0]
}
 801d6f6:	0018      	movs	r0, r3
 801d6f8:	46bd      	mov	sp, r7
 801d6fa:	b005      	add	sp, #20
 801d6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d6fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d6fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d700:	b087      	sub	sp, #28
 801d702:	af00      	add	r7, sp, #0
 801d704:	60f8      	str	r0, [r7, #12]
 801d706:	0008      	movs	r0, r1
 801d708:	607a      	str	r2, [r7, #4]
 801d70a:	0019      	movs	r1, r3
 801d70c:	230b      	movs	r3, #11
 801d70e:	18fb      	adds	r3, r7, r3
 801d710:	1c02      	adds	r2, r0, #0
 801d712:	701a      	strb	r2, [r3, #0]
 801d714:	2408      	movs	r4, #8
 801d716:	193b      	adds	r3, r7, r4
 801d718:	1c0a      	adds	r2, r1, #0
 801d71a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d71c:	2117      	movs	r1, #23
 801d71e:	187b      	adds	r3, r7, r1
 801d720:	2200      	movs	r2, #0
 801d722:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d724:	2516      	movs	r5, #22
 801d726:	197b      	adds	r3, r7, r5
 801d728:	2200      	movs	r2, #0
 801d72a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d72c:	68fa      	ldr	r2, [r7, #12]
 801d72e:	23b0      	movs	r3, #176	@ 0xb0
 801d730:	009b      	lsls	r3, r3, #2
 801d732:	58d0      	ldr	r0, [r2, r3]
 801d734:	193b      	adds	r3, r7, r4
 801d736:	881d      	ldrh	r5, [r3, #0]
 801d738:	000e      	movs	r6, r1
 801d73a:	187c      	adds	r4, r7, r1
 801d73c:	687a      	ldr	r2, [r7, #4]
 801d73e:	230b      	movs	r3, #11
 801d740:	18fb      	adds	r3, r7, r3
 801d742:	7819      	ldrb	r1, [r3, #0]
 801d744:	002b      	movs	r3, r5
 801d746:	f7f6 f99e 	bl	8013a86 <HAL_PCD_EP_Transmit>
 801d74a:	0003      	movs	r3, r0
 801d74c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d74e:	2516      	movs	r5, #22
 801d750:	197c      	adds	r4, r7, r5
 801d752:	19bb      	adds	r3, r7, r6
 801d754:	781b      	ldrb	r3, [r3, #0]
 801d756:	0018      	movs	r0, r3
 801d758:	f000 f871 	bl	801d83e <USBD_Get_USB_Status>
 801d75c:	0003      	movs	r3, r0
 801d75e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d760:	197b      	adds	r3, r7, r5
 801d762:	781b      	ldrb	r3, [r3, #0]
}
 801d764:	0018      	movs	r0, r3
 801d766:	46bd      	mov	sp, r7
 801d768:	b007      	add	sp, #28
 801d76a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d76c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d76e:	b087      	sub	sp, #28
 801d770:	af00      	add	r7, sp, #0
 801d772:	60f8      	str	r0, [r7, #12]
 801d774:	0008      	movs	r0, r1
 801d776:	607a      	str	r2, [r7, #4]
 801d778:	0019      	movs	r1, r3
 801d77a:	230b      	movs	r3, #11
 801d77c:	18fb      	adds	r3, r7, r3
 801d77e:	1c02      	adds	r2, r0, #0
 801d780:	701a      	strb	r2, [r3, #0]
 801d782:	2408      	movs	r4, #8
 801d784:	193b      	adds	r3, r7, r4
 801d786:	1c0a      	adds	r2, r1, #0
 801d788:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d78a:	2117      	movs	r1, #23
 801d78c:	187b      	adds	r3, r7, r1
 801d78e:	2200      	movs	r2, #0
 801d790:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d792:	2516      	movs	r5, #22
 801d794:	197b      	adds	r3, r7, r5
 801d796:	2200      	movs	r2, #0
 801d798:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d79a:	68fa      	ldr	r2, [r7, #12]
 801d79c:	23b0      	movs	r3, #176	@ 0xb0
 801d79e:	009b      	lsls	r3, r3, #2
 801d7a0:	58d0      	ldr	r0, [r2, r3]
 801d7a2:	193b      	adds	r3, r7, r4
 801d7a4:	881d      	ldrh	r5, [r3, #0]
 801d7a6:	000e      	movs	r6, r1
 801d7a8:	187c      	adds	r4, r7, r1
 801d7aa:	687a      	ldr	r2, [r7, #4]
 801d7ac:	230b      	movs	r3, #11
 801d7ae:	18fb      	adds	r3, r7, r3
 801d7b0:	7819      	ldrb	r1, [r3, #0]
 801d7b2:	002b      	movs	r3, r5
 801d7b4:	f7f6 f917 	bl	80139e6 <HAL_PCD_EP_Receive>
 801d7b8:	0003      	movs	r3, r0
 801d7ba:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7bc:	2516      	movs	r5, #22
 801d7be:	197c      	adds	r4, r7, r5
 801d7c0:	19bb      	adds	r3, r7, r6
 801d7c2:	781b      	ldrb	r3, [r3, #0]
 801d7c4:	0018      	movs	r0, r3
 801d7c6:	f000 f83a 	bl	801d83e <USBD_Get_USB_Status>
 801d7ca:	0003      	movs	r3, r0
 801d7cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d7ce:	197b      	adds	r3, r7, r5
 801d7d0:	781b      	ldrb	r3, [r3, #0]
}
 801d7d2:	0018      	movs	r0, r3
 801d7d4:	46bd      	mov	sp, r7
 801d7d6:	b007      	add	sp, #28
 801d7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d7da:	b580      	push	{r7, lr}
 801d7dc:	b082      	sub	sp, #8
 801d7de:	af00      	add	r7, sp, #0
 801d7e0:	6078      	str	r0, [r7, #4]
 801d7e2:	000a      	movs	r2, r1
 801d7e4:	1cfb      	adds	r3, r7, #3
 801d7e6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d7e8:	687a      	ldr	r2, [r7, #4]
 801d7ea:	23b0      	movs	r3, #176	@ 0xb0
 801d7ec:	009b      	lsls	r3, r3, #2
 801d7ee:	58d2      	ldr	r2, [r2, r3]
 801d7f0:	1cfb      	adds	r3, r7, #3
 801d7f2:	781b      	ldrb	r3, [r3, #0]
 801d7f4:	0019      	movs	r1, r3
 801d7f6:	0010      	movs	r0, r2
 801d7f8:	f7f6 f92c 	bl	8013a54 <HAL_PCD_EP_GetRxCount>
 801d7fc:	0003      	movs	r3, r0
}
 801d7fe:	0018      	movs	r0, r3
 801d800:	46bd      	mov	sp, r7
 801d802:	b002      	add	sp, #8
 801d804:	bd80      	pop	{r7, pc}
	...

0801d808 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d808:	b580      	push	{r7, lr}
 801d80a:	b082      	sub	sp, #8
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d810:	4b02      	ldr	r3, [pc, #8]	@ (801d81c <USBD_static_malloc+0x14>)
}
 801d812:	0018      	movs	r0, r3
 801d814:	46bd      	mov	sp, r7
 801d816:	b002      	add	sp, #8
 801d818:	bd80      	pop	{r7, pc}
 801d81a:	46c0      	nop			@ (mov r8, r8)
 801d81c:	20003460 	.word	0x20003460

0801d820 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d820:	b580      	push	{r7, lr}
 801d822:	b082      	sub	sp, #8
 801d824:	af00      	add	r7, sp, #0
 801d826:	6078      	str	r0, [r7, #4]

}
 801d828:	46c0      	nop			@ (mov r8, r8)
 801d82a:	46bd      	mov	sp, r7
 801d82c:	b002      	add	sp, #8
 801d82e:	bd80      	pop	{r7, pc}

0801d830 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d830:	b580      	push	{r7, lr}
 801d832:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d834:	f7ea fc38 	bl	80080a8 <SystemClock_Config>
}
 801d838:	46c0      	nop			@ (mov r8, r8)
 801d83a:	46bd      	mov	sp, r7
 801d83c:	bd80      	pop	{r7, pc}

0801d83e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d83e:	b580      	push	{r7, lr}
 801d840:	b084      	sub	sp, #16
 801d842:	af00      	add	r7, sp, #0
 801d844:	0002      	movs	r2, r0
 801d846:	1dfb      	adds	r3, r7, #7
 801d848:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d84a:	230f      	movs	r3, #15
 801d84c:	18fb      	adds	r3, r7, r3
 801d84e:	2200      	movs	r2, #0
 801d850:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d852:	1dfb      	adds	r3, r7, #7
 801d854:	781b      	ldrb	r3, [r3, #0]
 801d856:	2b03      	cmp	r3, #3
 801d858:	d017      	beq.n	801d88a <USBD_Get_USB_Status+0x4c>
 801d85a:	dc1b      	bgt.n	801d894 <USBD_Get_USB_Status+0x56>
 801d85c:	2b02      	cmp	r3, #2
 801d85e:	d00f      	beq.n	801d880 <USBD_Get_USB_Status+0x42>
 801d860:	dc18      	bgt.n	801d894 <USBD_Get_USB_Status+0x56>
 801d862:	2b00      	cmp	r3, #0
 801d864:	d002      	beq.n	801d86c <USBD_Get_USB_Status+0x2e>
 801d866:	2b01      	cmp	r3, #1
 801d868:	d005      	beq.n	801d876 <USBD_Get_USB_Status+0x38>
 801d86a:	e013      	b.n	801d894 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d86c:	230f      	movs	r3, #15
 801d86e:	18fb      	adds	r3, r7, r3
 801d870:	2200      	movs	r2, #0
 801d872:	701a      	strb	r2, [r3, #0]
    break;
 801d874:	e013      	b.n	801d89e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d876:	230f      	movs	r3, #15
 801d878:	18fb      	adds	r3, r7, r3
 801d87a:	2202      	movs	r2, #2
 801d87c:	701a      	strb	r2, [r3, #0]
    break;
 801d87e:	e00e      	b.n	801d89e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d880:	230f      	movs	r3, #15
 801d882:	18fb      	adds	r3, r7, r3
 801d884:	2201      	movs	r2, #1
 801d886:	701a      	strb	r2, [r3, #0]
    break;
 801d888:	e009      	b.n	801d89e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d88a:	230f      	movs	r3, #15
 801d88c:	18fb      	adds	r3, r7, r3
 801d88e:	2202      	movs	r2, #2
 801d890:	701a      	strb	r2, [r3, #0]
    break;
 801d892:	e004      	b.n	801d89e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d894:	230f      	movs	r3, #15
 801d896:	18fb      	adds	r3, r7, r3
 801d898:	2202      	movs	r2, #2
 801d89a:	701a      	strb	r2, [r3, #0]
    break;
 801d89c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d89e:	230f      	movs	r3, #15
 801d8a0:	18fb      	adds	r3, r7, r3
 801d8a2:	781b      	ldrb	r3, [r3, #0]
}
 801d8a4:	0018      	movs	r0, r3
 801d8a6:	46bd      	mov	sp, r7
 801d8a8:	b004      	add	sp, #16
 801d8aa:	bd80      	pop	{r7, pc}

0801d8ac <arm_cfft_radix4by2_q31>:
 801d8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8ae:	465f      	mov	r7, fp
 801d8b0:	4656      	mov	r6, sl
 801d8b2:	464d      	mov	r5, r9
 801d8b4:	4644      	mov	r4, r8
 801d8b6:	000b      	movs	r3, r1
 801d8b8:	b4f0      	push	{r4, r5, r6, r7}
 801d8ba:	085b      	lsrs	r3, r3, #1
 801d8bc:	b08f      	sub	sp, #60	@ 0x3c
 801d8be:	910a      	str	r1, [sp, #40]	@ 0x28
 801d8c0:	0007      	movs	r7, r0
 801d8c2:	9009      	str	r0, [sp, #36]	@ 0x24
 801d8c4:	0011      	movs	r1, r2
 801d8c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d8c8:	930c      	str	r3, [sp, #48]	@ 0x30
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d100      	bne.n	801d8d0 <arm_cfft_radix4by2_q31+0x24>
 801d8ce:	e0a0      	b.n	801da12 <arm_cfft_radix4by2_q31+0x166>
 801d8d0:	0002      	movs	r2, r0
 801d8d2:	00db      	lsls	r3, r3, #3
 801d8d4:	3204      	adds	r2, #4
 801d8d6:	4691      	mov	r9, r2
 801d8d8:	4698      	mov	r8, r3
 801d8da:	000a      	movs	r2, r1
 801d8dc:	464e      	mov	r6, r9
 801d8de:	4442      	add	r2, r8
 801d8e0:	4699      	mov	r9, r3
 801d8e2:	4688      	mov	r8, r1
 801d8e4:	9208      	str	r2, [sp, #32]
 801d8e6:	900d      	str	r0, [sp, #52]	@ 0x34
 801d8e8:	4643      	mov	r3, r8
 801d8ea:	681b      	ldr	r3, [r3, #0]
 801d8ec:	469b      	mov	fp, r3
 801d8ee:	4643      	mov	r3, r8
 801d8f0:	685b      	ldr	r3, [r3, #4]
 801d8f2:	469a      	mov	sl, r3
 801d8f4:	683b      	ldr	r3, [r7, #0]
 801d8f6:	109c      	asrs	r4, r3, #2
 801d8f8:	464b      	mov	r3, r9
 801d8fa:	58fb      	ldr	r3, [r7, r3]
 801d8fc:	109a      	asrs	r2, r3, #2
 801d8fe:	18a3      	adds	r3, r4, r2
 801d900:	603b      	str	r3, [r7, #0]
 801d902:	6833      	ldr	r3, [r6, #0]
 801d904:	1aa4      	subs	r4, r4, r2
 801d906:	109d      	asrs	r5, r3, #2
 801d908:	464b      	mov	r3, r9
 801d90a:	58f3      	ldr	r3, [r6, r3]
 801d90c:	17e2      	asrs	r2, r4, #31
 801d90e:	109b      	asrs	r3, r3, #2
 801d910:	18e9      	adds	r1, r5, r3
 801d912:	6031      	str	r1, [r6, #0]
 801d914:	0011      	movs	r1, r2
 801d916:	465a      	mov	r2, fp
 801d918:	17d2      	asrs	r2, r2, #31
 801d91a:	0010      	movs	r0, r2
 801d91c:	4652      	mov	r2, sl
 801d91e:	1aed      	subs	r5, r5, r3
 801d920:	17eb      	asrs	r3, r5, #31
 801d922:	17d2      	asrs	r2, r2, #31
 801d924:	9307      	str	r3, [sp, #28]
 801d926:	9204      	str	r2, [sp, #16]
 801d928:	0003      	movs	r3, r0
 801d92a:	465a      	mov	r2, fp
 801d92c:	9006      	str	r0, [sp, #24]
 801d92e:	0020      	movs	r0, r4
 801d930:	9105      	str	r1, [sp, #20]
 801d932:	f7e2 fe45 	bl	80005c0 <__aeabi_lmul>
 801d936:	2280      	movs	r2, #128	@ 0x80
 801d938:	2300      	movs	r3, #0
 801d93a:	0612      	lsls	r2, r2, #24
 801d93c:	1880      	adds	r0, r0, r2
 801d93e:	4159      	adcs	r1, r3
 801d940:	2300      	movs	r3, #0
 801d942:	9101      	str	r1, [sp, #4]
 801d944:	9300      	str	r3, [sp, #0]
 801d946:	4652      	mov	r2, sl
 801d948:	9b04      	ldr	r3, [sp, #16]
 801d94a:	0028      	movs	r0, r5
 801d94c:	17e9      	asrs	r1, r5, #31
 801d94e:	f7e2 fe37 	bl	80005c0 <__aeabi_lmul>
 801d952:	9a00      	ldr	r2, [sp, #0]
 801d954:	9b01      	ldr	r3, [sp, #4]
 801d956:	1880      	adds	r0, r0, r2
 801d958:	4159      	adcs	r1, r3
 801d95a:	2280      	movs	r2, #128	@ 0x80
 801d95c:	2300      	movs	r3, #0
 801d95e:	0612      	lsls	r2, r2, #24
 801d960:	1880      	adds	r0, r0, r2
 801d962:	4159      	adcs	r1, r3
 801d964:	464a      	mov	r2, r9
 801d966:	004b      	lsls	r3, r1, #1
 801d968:	50bb      	str	r3, [r7, r2]
 801d96a:	4658      	mov	r0, fp
 801d96c:	002a      	movs	r2, r5
 801d96e:	9b07      	ldr	r3, [sp, #28]
 801d970:	9906      	ldr	r1, [sp, #24]
 801d972:	f7e2 fe25 	bl	80005c0 <__aeabi_lmul>
 801d976:	2280      	movs	r2, #128	@ 0x80
 801d978:	2300      	movs	r3, #0
 801d97a:	0612      	lsls	r2, r2, #24
 801d97c:	1880      	adds	r0, r0, r2
 801d97e:	4159      	adcs	r1, r3
 801d980:	2000      	movs	r0, #0
 801d982:	9103      	str	r1, [sp, #12]
 801d984:	9002      	str	r0, [sp, #8]
 801d986:	4652      	mov	r2, sl
 801d988:	9b04      	ldr	r3, [sp, #16]
 801d98a:	0020      	movs	r0, r4
 801d98c:	9905      	ldr	r1, [sp, #20]
 801d98e:	f7e2 fe17 	bl	80005c0 <__aeabi_lmul>
 801d992:	9a02      	ldr	r2, [sp, #8]
 801d994:	9b03      	ldr	r3, [sp, #12]
 801d996:	1a12      	subs	r2, r2, r0
 801d998:	418b      	sbcs	r3, r1
 801d99a:	2080      	movs	r0, #128	@ 0x80
 801d99c:	2100      	movs	r1, #0
 801d99e:	0600      	lsls	r0, r0, #24
 801d9a0:	1812      	adds	r2, r2, r0
 801d9a2:	414b      	adcs	r3, r1
 801d9a4:	464a      	mov	r2, r9
 801d9a6:	005b      	lsls	r3, r3, #1
 801d9a8:	50b3      	str	r3, [r6, r2]
 801d9aa:	2308      	movs	r3, #8
 801d9ac:	469c      	mov	ip, r3
 801d9ae:	9b08      	ldr	r3, [sp, #32]
 801d9b0:	44e0      	add	r8, ip
 801d9b2:	3708      	adds	r7, #8
 801d9b4:	3608      	adds	r6, #8
 801d9b6:	4598      	cmp	r8, r3
 801d9b8:	d196      	bne.n	801d8e8 <arm_cfft_radix4by2_q31+0x3c>
 801d9ba:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d9bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d9be:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d9c0:	2302      	movs	r3, #2
 801d9c2:	003a      	movs	r2, r7
 801d9c4:	0029      	movs	r1, r5
 801d9c6:	0020      	movs	r0, r4
 801d9c8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d9ca:	f000 f957 	bl	801dc7c <arm_radix4_butterfly_q31>
 801d9ce:	46a4      	mov	ip, r4
 801d9d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d9d2:	2302      	movs	r3, #2
 801d9d4:	0088      	lsls	r0, r1, #2
 801d9d6:	4460      	add	r0, ip
 801d9d8:	003a      	movs	r2, r7
 801d9da:	0029      	movs	r1, r5
 801d9dc:	f000 f94e 	bl	801dc7c <arm_radix4_butterfly_q31>
 801d9e0:	46a4      	mov	ip, r4
 801d9e2:	0128      	lsls	r0, r5, #4
 801d9e4:	4460      	add	r0, ip
 801d9e6:	6833      	ldr	r3, [r6, #0]
 801d9e8:	005b      	lsls	r3, r3, #1
 801d9ea:	6033      	str	r3, [r6, #0]
 801d9ec:	6873      	ldr	r3, [r6, #4]
 801d9ee:	005b      	lsls	r3, r3, #1
 801d9f0:	6073      	str	r3, [r6, #4]
 801d9f2:	68b3      	ldr	r3, [r6, #8]
 801d9f4:	005b      	lsls	r3, r3, #1
 801d9f6:	60b3      	str	r3, [r6, #8]
 801d9f8:	68f3      	ldr	r3, [r6, #12]
 801d9fa:	005b      	lsls	r3, r3, #1
 801d9fc:	60f3      	str	r3, [r6, #12]
 801d9fe:	3610      	adds	r6, #16
 801da00:	42b0      	cmp	r0, r6
 801da02:	d1f0      	bne.n	801d9e6 <arm_cfft_radix4by2_q31+0x13a>
 801da04:	b00f      	add	sp, #60	@ 0x3c
 801da06:	bc3c      	pop	{r2, r3, r4, r5}
 801da08:	4690      	mov	r8, r2
 801da0a:	4699      	mov	r9, r3
 801da0c:	46a2      	mov	sl, r4
 801da0e:	46ab      	mov	fp, r5
 801da10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da12:	2302      	movs	r3, #2
 801da14:	2100      	movs	r1, #0
 801da16:	0015      	movs	r5, r2
 801da18:	f000 f930 	bl	801dc7c <arm_radix4_butterfly_q31>
 801da1c:	46bc      	mov	ip, r7
 801da1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801da20:	002a      	movs	r2, r5
 801da22:	0098      	lsls	r0, r3, #2
 801da24:	4460      	add	r0, ip
 801da26:	2302      	movs	r3, #2
 801da28:	2100      	movs	r1, #0
 801da2a:	f000 f927 	bl	801dc7c <arm_radix4_butterfly_q31>
 801da2e:	e7e9      	b.n	801da04 <arm_cfft_radix4by2_q31+0x158>

0801da30 <arm_cfft_radix4by2_inverse_q31>:
 801da30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da32:	465f      	mov	r7, fp
 801da34:	4656      	mov	r6, sl
 801da36:	464d      	mov	r5, r9
 801da38:	4644      	mov	r4, r8
 801da3a:	000b      	movs	r3, r1
 801da3c:	b4f0      	push	{r4, r5, r6, r7}
 801da3e:	085b      	lsrs	r3, r3, #1
 801da40:	b08f      	sub	sp, #60	@ 0x3c
 801da42:	910a      	str	r1, [sp, #40]	@ 0x28
 801da44:	0007      	movs	r7, r0
 801da46:	9009      	str	r0, [sp, #36]	@ 0x24
 801da48:	0011      	movs	r1, r2
 801da4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801da4c:	930c      	str	r3, [sp, #48]	@ 0x30
 801da4e:	2b00      	cmp	r3, #0
 801da50:	d100      	bne.n	801da54 <arm_cfft_radix4by2_inverse_q31+0x24>
 801da52:	e0a0      	b.n	801db96 <arm_cfft_radix4by2_inverse_q31+0x166>
 801da54:	0002      	movs	r2, r0
 801da56:	00db      	lsls	r3, r3, #3
 801da58:	3204      	adds	r2, #4
 801da5a:	4691      	mov	r9, r2
 801da5c:	4698      	mov	r8, r3
 801da5e:	000a      	movs	r2, r1
 801da60:	464e      	mov	r6, r9
 801da62:	4442      	add	r2, r8
 801da64:	4699      	mov	r9, r3
 801da66:	4688      	mov	r8, r1
 801da68:	9208      	str	r2, [sp, #32]
 801da6a:	900d      	str	r0, [sp, #52]	@ 0x34
 801da6c:	4643      	mov	r3, r8
 801da6e:	681b      	ldr	r3, [r3, #0]
 801da70:	469b      	mov	fp, r3
 801da72:	4643      	mov	r3, r8
 801da74:	685b      	ldr	r3, [r3, #4]
 801da76:	469a      	mov	sl, r3
 801da78:	683b      	ldr	r3, [r7, #0]
 801da7a:	109c      	asrs	r4, r3, #2
 801da7c:	464b      	mov	r3, r9
 801da7e:	58fb      	ldr	r3, [r7, r3]
 801da80:	109a      	asrs	r2, r3, #2
 801da82:	18a3      	adds	r3, r4, r2
 801da84:	603b      	str	r3, [r7, #0]
 801da86:	6833      	ldr	r3, [r6, #0]
 801da88:	1aa4      	subs	r4, r4, r2
 801da8a:	109d      	asrs	r5, r3, #2
 801da8c:	464b      	mov	r3, r9
 801da8e:	58f3      	ldr	r3, [r6, r3]
 801da90:	17e2      	asrs	r2, r4, #31
 801da92:	109b      	asrs	r3, r3, #2
 801da94:	18e9      	adds	r1, r5, r3
 801da96:	6031      	str	r1, [r6, #0]
 801da98:	0011      	movs	r1, r2
 801da9a:	465a      	mov	r2, fp
 801da9c:	17d2      	asrs	r2, r2, #31
 801da9e:	0010      	movs	r0, r2
 801daa0:	4652      	mov	r2, sl
 801daa2:	1aed      	subs	r5, r5, r3
 801daa4:	17eb      	asrs	r3, r5, #31
 801daa6:	17d2      	asrs	r2, r2, #31
 801daa8:	9307      	str	r3, [sp, #28]
 801daaa:	9204      	str	r2, [sp, #16]
 801daac:	0003      	movs	r3, r0
 801daae:	465a      	mov	r2, fp
 801dab0:	9006      	str	r0, [sp, #24]
 801dab2:	0020      	movs	r0, r4
 801dab4:	9105      	str	r1, [sp, #20]
 801dab6:	f7e2 fd83 	bl	80005c0 <__aeabi_lmul>
 801daba:	2280      	movs	r2, #128	@ 0x80
 801dabc:	2300      	movs	r3, #0
 801dabe:	0612      	lsls	r2, r2, #24
 801dac0:	1880      	adds	r0, r0, r2
 801dac2:	4159      	adcs	r1, r3
 801dac4:	2300      	movs	r3, #0
 801dac6:	9101      	str	r1, [sp, #4]
 801dac8:	9300      	str	r3, [sp, #0]
 801daca:	4652      	mov	r2, sl
 801dacc:	9b04      	ldr	r3, [sp, #16]
 801dace:	0028      	movs	r0, r5
 801dad0:	17e9      	asrs	r1, r5, #31
 801dad2:	f7e2 fd75 	bl	80005c0 <__aeabi_lmul>
 801dad6:	9a00      	ldr	r2, [sp, #0]
 801dad8:	9b01      	ldr	r3, [sp, #4]
 801dada:	1a12      	subs	r2, r2, r0
 801dadc:	418b      	sbcs	r3, r1
 801dade:	2080      	movs	r0, #128	@ 0x80
 801dae0:	2100      	movs	r1, #0
 801dae2:	0600      	lsls	r0, r0, #24
 801dae4:	1812      	adds	r2, r2, r0
 801dae6:	414b      	adcs	r3, r1
 801dae8:	464a      	mov	r2, r9
 801daea:	005b      	lsls	r3, r3, #1
 801daec:	50bb      	str	r3, [r7, r2]
 801daee:	4658      	mov	r0, fp
 801daf0:	002a      	movs	r2, r5
 801daf2:	9b07      	ldr	r3, [sp, #28]
 801daf4:	9906      	ldr	r1, [sp, #24]
 801daf6:	f7e2 fd63 	bl	80005c0 <__aeabi_lmul>
 801dafa:	2280      	movs	r2, #128	@ 0x80
 801dafc:	2300      	movs	r3, #0
 801dafe:	0612      	lsls	r2, r2, #24
 801db00:	1880      	adds	r0, r0, r2
 801db02:	4159      	adcs	r1, r3
 801db04:	2000      	movs	r0, #0
 801db06:	9103      	str	r1, [sp, #12]
 801db08:	9002      	str	r0, [sp, #8]
 801db0a:	4652      	mov	r2, sl
 801db0c:	9b04      	ldr	r3, [sp, #16]
 801db0e:	0020      	movs	r0, r4
 801db10:	9905      	ldr	r1, [sp, #20]
 801db12:	f7e2 fd55 	bl	80005c0 <__aeabi_lmul>
 801db16:	9b02      	ldr	r3, [sp, #8]
 801db18:	9c03      	ldr	r4, [sp, #12]
 801db1a:	18c0      	adds	r0, r0, r3
 801db1c:	4161      	adcs	r1, r4
 801db1e:	2380      	movs	r3, #128	@ 0x80
 801db20:	2400      	movs	r4, #0
 801db22:	061b      	lsls	r3, r3, #24
 801db24:	18c0      	adds	r0, r0, r3
 801db26:	4161      	adcs	r1, r4
 801db28:	464a      	mov	r2, r9
 801db2a:	004b      	lsls	r3, r1, #1
 801db2c:	50b3      	str	r3, [r6, r2]
 801db2e:	2308      	movs	r3, #8
 801db30:	469c      	mov	ip, r3
 801db32:	9b08      	ldr	r3, [sp, #32]
 801db34:	44e0      	add	r8, ip
 801db36:	3708      	adds	r7, #8
 801db38:	3608      	adds	r6, #8
 801db3a:	4598      	cmp	r8, r3
 801db3c:	d196      	bne.n	801da6c <arm_cfft_radix4by2_inverse_q31+0x3c>
 801db3e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801db40:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801db42:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801db44:	2302      	movs	r3, #2
 801db46:	003a      	movs	r2, r7
 801db48:	0029      	movs	r1, r5
 801db4a:	0020      	movs	r0, r4
 801db4c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801db4e:	f000 fb3b 	bl	801e1c8 <arm_radix4_butterfly_inverse_q31>
 801db52:	46a4      	mov	ip, r4
 801db54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801db56:	2302      	movs	r3, #2
 801db58:	0088      	lsls	r0, r1, #2
 801db5a:	4460      	add	r0, ip
 801db5c:	003a      	movs	r2, r7
 801db5e:	0029      	movs	r1, r5
 801db60:	f000 fb32 	bl	801e1c8 <arm_radix4_butterfly_inverse_q31>
 801db64:	46a4      	mov	ip, r4
 801db66:	0128      	lsls	r0, r5, #4
 801db68:	4460      	add	r0, ip
 801db6a:	6833      	ldr	r3, [r6, #0]
 801db6c:	005b      	lsls	r3, r3, #1
 801db6e:	6033      	str	r3, [r6, #0]
 801db70:	6873      	ldr	r3, [r6, #4]
 801db72:	005b      	lsls	r3, r3, #1
 801db74:	6073      	str	r3, [r6, #4]
 801db76:	68b3      	ldr	r3, [r6, #8]
 801db78:	005b      	lsls	r3, r3, #1
 801db7a:	60b3      	str	r3, [r6, #8]
 801db7c:	68f3      	ldr	r3, [r6, #12]
 801db7e:	005b      	lsls	r3, r3, #1
 801db80:	60f3      	str	r3, [r6, #12]
 801db82:	3610      	adds	r6, #16
 801db84:	42b0      	cmp	r0, r6
 801db86:	d1f0      	bne.n	801db6a <arm_cfft_radix4by2_inverse_q31+0x13a>
 801db88:	b00f      	add	sp, #60	@ 0x3c
 801db8a:	bc3c      	pop	{r2, r3, r4, r5}
 801db8c:	4690      	mov	r8, r2
 801db8e:	4699      	mov	r9, r3
 801db90:	46a2      	mov	sl, r4
 801db92:	46ab      	mov	fp, r5
 801db94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db96:	2302      	movs	r3, #2
 801db98:	2100      	movs	r1, #0
 801db9a:	0015      	movs	r5, r2
 801db9c:	f000 fb14 	bl	801e1c8 <arm_radix4_butterfly_inverse_q31>
 801dba0:	46bc      	mov	ip, r7
 801dba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dba4:	002a      	movs	r2, r5
 801dba6:	0098      	lsls	r0, r3, #2
 801dba8:	4460      	add	r0, ip
 801dbaa:	2302      	movs	r3, #2
 801dbac:	2100      	movs	r1, #0
 801dbae:	f000 fb0b 	bl	801e1c8 <arm_radix4_butterfly_inverse_q31>
 801dbb2:	e7e9      	b.n	801db88 <arm_cfft_radix4by2_inverse_q31+0x158>

0801dbb4 <arm_cfft_q31>:
 801dbb4:	b570      	push	{r4, r5, r6, lr}
 801dbb6:	001e      	movs	r6, r3
 801dbb8:	2380      	movs	r3, #128	@ 0x80
 801dbba:	000d      	movs	r5, r1
 801dbbc:	0004      	movs	r4, r0
 801dbbe:	8801      	ldrh	r1, [r0, #0]
 801dbc0:	005b      	lsls	r3, r3, #1
 801dbc2:	2a01      	cmp	r2, #1
 801dbc4:	d028      	beq.n	801dc18 <arm_cfft_q31+0x64>
 801dbc6:	4299      	cmp	r1, r3
 801dbc8:	d020      	beq.n	801dc0c <arm_cfft_q31+0x58>
 801dbca:	d812      	bhi.n	801dbf2 <arm_cfft_q31+0x3e>
 801dbcc:	2920      	cmp	r1, #32
 801dbce:	d004      	beq.n	801dbda <arm_cfft_q31+0x26>
 801dbd0:	d949      	bls.n	801dc66 <arm_cfft_q31+0xb2>
 801dbd2:	2940      	cmp	r1, #64	@ 0x40
 801dbd4:	d01a      	beq.n	801dc0c <arm_cfft_q31+0x58>
 801dbd6:	2980      	cmp	r1, #128	@ 0x80
 801dbd8:	d103      	bne.n	801dbe2 <arm_cfft_q31+0x2e>
 801dbda:	6862      	ldr	r2, [r4, #4]
 801dbdc:	0028      	movs	r0, r5
 801dbde:	f7ff fe65 	bl	801d8ac <arm_cfft_radix4by2_q31>
 801dbe2:	2e00      	cmp	r6, #0
 801dbe4:	d004      	beq.n	801dbf0 <arm_cfft_q31+0x3c>
 801dbe6:	68a2      	ldr	r2, [r4, #8]
 801dbe8:	89a1      	ldrh	r1, [r4, #12]
 801dbea:	0028      	movs	r0, r5
 801dbec:	f7e2 fa8c 	bl	8000108 <arm_bitreversal_32>
 801dbf0:	bd70      	pop	{r4, r5, r6, pc}
 801dbf2:	2380      	movs	r3, #128	@ 0x80
 801dbf4:	00db      	lsls	r3, r3, #3
 801dbf6:	4299      	cmp	r1, r3
 801dbf8:	d008      	beq.n	801dc0c <arm_cfft_q31+0x58>
 801dbfa:	d92f      	bls.n	801dc5c <arm_cfft_q31+0xa8>
 801dbfc:	2380      	movs	r3, #128	@ 0x80
 801dbfe:	011b      	lsls	r3, r3, #4
 801dc00:	4299      	cmp	r1, r3
 801dc02:	d0ea      	beq.n	801dbda <arm_cfft_q31+0x26>
 801dc04:	2380      	movs	r3, #128	@ 0x80
 801dc06:	015b      	lsls	r3, r3, #5
 801dc08:	4299      	cmp	r1, r3
 801dc0a:	d1ea      	bne.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc0c:	2301      	movs	r3, #1
 801dc0e:	6862      	ldr	r2, [r4, #4]
 801dc10:	0028      	movs	r0, r5
 801dc12:	f000 f833 	bl	801dc7c <arm_radix4_butterfly_q31>
 801dc16:	e7e4      	b.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc18:	4299      	cmp	r1, r3
 801dc1a:	d019      	beq.n	801dc50 <arm_cfft_q31+0x9c>
 801dc1c:	d80b      	bhi.n	801dc36 <arm_cfft_q31+0x82>
 801dc1e:	2920      	cmp	r1, #32
 801dc20:	d004      	beq.n	801dc2c <arm_cfft_q31+0x78>
 801dc22:	d928      	bls.n	801dc76 <arm_cfft_q31+0xc2>
 801dc24:	2940      	cmp	r1, #64	@ 0x40
 801dc26:	d013      	beq.n	801dc50 <arm_cfft_q31+0x9c>
 801dc28:	2980      	cmp	r1, #128	@ 0x80
 801dc2a:	d1da      	bne.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc2c:	6862      	ldr	r2, [r4, #4]
 801dc2e:	0028      	movs	r0, r5
 801dc30:	f7ff fefe 	bl	801da30 <arm_cfft_radix4by2_inverse_q31>
 801dc34:	e7d5      	b.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc36:	2380      	movs	r3, #128	@ 0x80
 801dc38:	00db      	lsls	r3, r3, #3
 801dc3a:	4299      	cmp	r1, r3
 801dc3c:	d008      	beq.n	801dc50 <arm_cfft_q31+0x9c>
 801dc3e:	d915      	bls.n	801dc6c <arm_cfft_q31+0xb8>
 801dc40:	2380      	movs	r3, #128	@ 0x80
 801dc42:	011b      	lsls	r3, r3, #4
 801dc44:	4299      	cmp	r1, r3
 801dc46:	d0f1      	beq.n	801dc2c <arm_cfft_q31+0x78>
 801dc48:	2380      	movs	r3, #128	@ 0x80
 801dc4a:	015b      	lsls	r3, r3, #5
 801dc4c:	4299      	cmp	r1, r3
 801dc4e:	d1c8      	bne.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc50:	2301      	movs	r3, #1
 801dc52:	6862      	ldr	r2, [r4, #4]
 801dc54:	0028      	movs	r0, r5
 801dc56:	f000 fab7 	bl	801e1c8 <arm_radix4_butterfly_inverse_q31>
 801dc5a:	e7c2      	b.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc5c:	2380      	movs	r3, #128	@ 0x80
 801dc5e:	009b      	lsls	r3, r3, #2
 801dc60:	4299      	cmp	r1, r3
 801dc62:	d0ba      	beq.n	801dbda <arm_cfft_q31+0x26>
 801dc64:	e7bd      	b.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc66:	2910      	cmp	r1, #16
 801dc68:	d1bb      	bne.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc6a:	e7cf      	b.n	801dc0c <arm_cfft_q31+0x58>
 801dc6c:	2380      	movs	r3, #128	@ 0x80
 801dc6e:	009b      	lsls	r3, r3, #2
 801dc70:	4299      	cmp	r1, r3
 801dc72:	d0db      	beq.n	801dc2c <arm_cfft_q31+0x78>
 801dc74:	e7b5      	b.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc76:	2910      	cmp	r1, #16
 801dc78:	d1b3      	bne.n	801dbe2 <arm_cfft_q31+0x2e>
 801dc7a:	e7e9      	b.n	801dc50 <arm_cfft_q31+0x9c>

0801dc7c <arm_radix4_butterfly_q31>:
 801dc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc7e:	464d      	mov	r5, r9
 801dc80:	4644      	mov	r4, r8
 801dc82:	465f      	mov	r7, fp
 801dc84:	4656      	mov	r6, sl
 801dc86:	469c      	mov	ip, r3
 801dc88:	b4f0      	push	{r4, r5, r6, r7}
 801dc8a:	b0a7      	sub	sp, #156	@ 0x9c
 801dc8c:	9114      	str	r1, [sp, #80]	@ 0x50
 801dc8e:	0889      	lsrs	r1, r1, #2
 801dc90:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc92:	00cb      	lsls	r3, r1, #3
 801dc94:	0015      	movs	r5, r2
 801dc96:	9223      	str	r2, [sp, #140]	@ 0x8c
 801dc98:	18c2      	adds	r2, r0, r3
 801dc9a:	000c      	movs	r4, r1
 801dc9c:	469a      	mov	sl, r3
 801dc9e:	9124      	str	r1, [sp, #144]	@ 0x90
 801dca0:	18d1      	adds	r1, r2, r3
 801dca2:	4663      	mov	r3, ip
 801dca4:	468b      	mov	fp, r1
 801dca6:	0119      	lsls	r1, r3, #4
 801dca8:	910d      	str	r1, [sp, #52]	@ 0x34
 801dcaa:	00d9      	lsls	r1, r3, #3
 801dcac:	005b      	lsls	r3, r3, #1
 801dcae:	4463      	add	r3, ip
 801dcb0:	910e      	str	r1, [sp, #56]	@ 0x38
 801dcb2:	00d9      	lsls	r1, r3, #3
 801dcb4:	465b      	mov	r3, fp
 801dcb6:	44da      	add	sl, fp
 801dcb8:	4690      	mov	r8, r2
 801dcba:	4683      	mov	fp, r0
 801dcbc:	4699      	mov	r9, r3
 801dcbe:	9022      	str	r0, [sp, #136]	@ 0x88
 801dcc0:	9025      	str	r0, [sp, #148]	@ 0x94
 801dcc2:	910f      	str	r1, [sp, #60]	@ 0x3c
 801dcc4:	9502      	str	r5, [sp, #8]
 801dcc6:	9500      	str	r5, [sp, #0]
 801dcc8:	9501      	str	r5, [sp, #4]
 801dcca:	9407      	str	r4, [sp, #28]
 801dccc:	465b      	mov	r3, fp
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	4642      	mov	r2, r8
 801dcd2:	111c      	asrs	r4, r3, #4
 801dcd4:	464b      	mov	r3, r9
 801dcd6:	4658      	mov	r0, fp
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	6812      	ldr	r2, [r2, #0]
 801dcdc:	111b      	asrs	r3, r3, #4
 801dcde:	18e7      	adds	r7, r4, r3
 801dce0:	1ae3      	subs	r3, r4, r3
 801dce2:	1114      	asrs	r4, r2, #4
 801dce4:	4652      	mov	r2, sl
 801dce6:	6840      	ldr	r0, [r0, #4]
 801dce8:	6812      	ldr	r2, [r2, #0]
 801dcea:	1105      	asrs	r5, r0, #4
 801dcec:	4648      	mov	r0, r9
 801dcee:	9303      	str	r3, [sp, #12]
 801dcf0:	1113      	asrs	r3, r2, #4
 801dcf2:	18e2      	adds	r2, r4, r3
 801dcf4:	465c      	mov	r4, fp
 801dcf6:	6840      	ldr	r0, [r0, #4]
 801dcf8:	1103      	asrs	r3, r0, #4
 801dcfa:	18ee      	adds	r6, r5, r3
 801dcfc:	1ae8      	subs	r0, r5, r3
 801dcfe:	18bb      	adds	r3, r7, r2
 801dd00:	6023      	str	r3, [r4, #0]
 801dd02:	4644      	mov	r4, r8
 801dd04:	6864      	ldr	r4, [r4, #4]
 801dd06:	9004      	str	r0, [sp, #16]
 801dd08:	1125      	asrs	r5, r4, #4
 801dd0a:	4654      	mov	r4, sl
 801dd0c:	6864      	ldr	r4, [r4, #4]
 801dd0e:	1123      	asrs	r3, r4, #4
 801dd10:	465c      	mov	r4, fp
 801dd12:	18eb      	adds	r3, r5, r3
 801dd14:	18f1      	adds	r1, r6, r3
 801dd16:	6061      	str	r1, [r4, #4]
 801dd18:	4655      	mov	r5, sl
 801dd1a:	4644      	mov	r4, r8
 801dd1c:	686d      	ldr	r5, [r5, #4]
 801dd1e:	6864      	ldr	r4, [r4, #4]
 801dd20:	1129      	asrs	r1, r5, #4
 801dd22:	1124      	asrs	r4, r4, #4
 801dd24:	1a64      	subs	r4, r4, r1
 801dd26:	4641      	mov	r1, r8
 801dd28:	6809      	ldr	r1, [r1, #0]
 801dd2a:	9405      	str	r4, [sp, #20]
 801dd2c:	1108      	asrs	r0, r1, #4
 801dd2e:	4651      	mov	r1, sl
 801dd30:	6809      	ldr	r1, [r1, #0]
 801dd32:	1abc      	subs	r4, r7, r2
 801dd34:	1109      	asrs	r1, r1, #4
 801dd36:	1a41      	subs	r1, r0, r1
 801dd38:	17e2      	asrs	r2, r4, #31
 801dd3a:	9106      	str	r1, [sp, #24]
 801dd3c:	0011      	movs	r1, r2
 801dd3e:	9a01      	ldr	r2, [sp, #4]
 801dd40:	9108      	str	r1, [sp, #32]
 801dd42:	6817      	ldr	r7, [r2, #0]
 801dd44:	17fd      	asrs	r5, r7, #31
 801dd46:	0028      	movs	r0, r5
 801dd48:	1af5      	subs	r5, r6, r3
 801dd4a:	17ee      	asrs	r6, r5, #31
 801dd4c:	960a      	str	r6, [sp, #40]	@ 0x28
 801dd4e:	6856      	ldr	r6, [r2, #4]
 801dd50:	9009      	str	r0, [sp, #36]	@ 0x24
 801dd52:	17f3      	asrs	r3, r6, #31
 801dd54:	003a      	movs	r2, r7
 801dd56:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dd58:	0003      	movs	r3, r0
 801dd5a:	0020      	movs	r0, r4
 801dd5c:	f7e2 fc30 	bl	80005c0 <__aeabi_lmul>
 801dd60:	0032      	movs	r2, r6
 801dd62:	17f3      	asrs	r3, r6, #31
 801dd64:	910c      	str	r1, [sp, #48]	@ 0x30
 801dd66:	0028      	movs	r0, r5
 801dd68:	17e9      	asrs	r1, r5, #31
 801dd6a:	f7e2 fc29 	bl	80005c0 <__aeabi_lmul>
 801dd6e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dd70:	002a      	movs	r2, r5
 801dd72:	4684      	mov	ip, r0
 801dd74:	4640      	mov	r0, r8
 801dd76:	4461      	add	r1, ip
 801dd78:	0049      	lsls	r1, r1, #1
 801dd7a:	6001      	str	r1, [r0, #0]
 801dd7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dd80:	0038      	movs	r0, r7
 801dd82:	f7e2 fc1d 	bl	80005c0 <__aeabi_lmul>
 801dd86:	0032      	movs	r2, r6
 801dd88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dd8a:	000d      	movs	r5, r1
 801dd8c:	0020      	movs	r0, r4
 801dd8e:	9908      	ldr	r1, [sp, #32]
 801dd90:	f7e2 fc16 	bl	80005c0 <__aeabi_lmul>
 801dd94:	4646      	mov	r6, r8
 801dd96:	1a6d      	subs	r5, r5, r1
 801dd98:	006d      	lsls	r5, r5, #1
 801dd9a:	6075      	str	r5, [r6, #4]
 801dd9c:	9903      	ldr	r1, [sp, #12]
 801dd9e:	9d05      	ldr	r5, [sp, #20]
 801dda0:	000c      	movs	r4, r1
 801dda2:	46ac      	mov	ip, r5
 801dda4:	4464      	add	r4, ip
 801dda6:	17e6      	asrs	r6, r4, #31
 801dda8:	0031      	movs	r1, r6
 801ddaa:	9b00      	ldr	r3, [sp, #0]
 801ddac:	9804      	ldr	r0, [sp, #16]
 801ddae:	681e      	ldr	r6, [r3, #0]
 801ddb0:	17f7      	asrs	r7, r6, #31
 801ddb2:	9709      	str	r7, [sp, #36]	@ 0x24
 801ddb4:	9f06      	ldr	r7, [sp, #24]
 801ddb6:	0032      	movs	r2, r6
 801ddb8:	1bc7      	subs	r7, r0, r7
 801ddba:	17fd      	asrs	r5, r7, #31
 801ddbc:	950a      	str	r5, [sp, #40]	@ 0x28
 801ddbe:	685d      	ldr	r5, [r3, #4]
 801ddc0:	17f3      	asrs	r3, r6, #31
 801ddc2:	17e8      	asrs	r0, r5, #31
 801ddc4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ddc6:	0020      	movs	r0, r4
 801ddc8:	9108      	str	r1, [sp, #32]
 801ddca:	f7e2 fbf9 	bl	80005c0 <__aeabi_lmul>
 801ddce:	002a      	movs	r2, r5
 801ddd0:	17eb      	asrs	r3, r5, #31
 801ddd2:	910c      	str	r1, [sp, #48]	@ 0x30
 801ddd4:	0038      	movs	r0, r7
 801ddd6:	17f9      	asrs	r1, r7, #31
 801ddd8:	f7e2 fbf2 	bl	80005c0 <__aeabi_lmul>
 801dddc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801ddde:	003a      	movs	r2, r7
 801dde0:	4684      	mov	ip, r0
 801dde2:	4648      	mov	r0, r9
 801dde4:	4461      	add	r1, ip
 801dde6:	0049      	lsls	r1, r1, #1
 801dde8:	6001      	str	r1, [r0, #0]
 801ddea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ddec:	0030      	movs	r0, r6
 801ddee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ddf0:	f7e2 fbe6 	bl	80005c0 <__aeabi_lmul>
 801ddf4:	002a      	movs	r2, r5
 801ddf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ddf8:	000e      	movs	r6, r1
 801ddfa:	0020      	movs	r0, r4
 801ddfc:	9908      	ldr	r1, [sp, #32]
 801ddfe:	f7e2 fbdf 	bl	80005c0 <__aeabi_lmul>
 801de02:	464c      	mov	r4, r9
 801de04:	9d05      	ldr	r5, [sp, #20]
 801de06:	1a76      	subs	r6, r6, r1
 801de08:	9903      	ldr	r1, [sp, #12]
 801de0a:	0076      	lsls	r6, r6, #1
 801de0c:	6066      	str	r6, [r4, #4]
 801de0e:	1b4c      	subs	r4, r1, r5
 801de10:	9e06      	ldr	r6, [sp, #24]
 801de12:	17e1      	asrs	r1, r4, #31
 801de14:	9103      	str	r1, [sp, #12]
 801de16:	9902      	ldr	r1, [sp, #8]
 801de18:	46b4      	mov	ip, r6
 801de1a:	680f      	ldr	r7, [r1, #0]
 801de1c:	9804      	ldr	r0, [sp, #16]
 801de1e:	17fd      	asrs	r5, r7, #31
 801de20:	002b      	movs	r3, r5
 801de22:	684e      	ldr	r6, [r1, #4]
 801de24:	4460      	add	r0, ip
 801de26:	0005      	movs	r5, r0
 801de28:	17c0      	asrs	r0, r0, #31
 801de2a:	9005      	str	r0, [sp, #20]
 801de2c:	17f0      	asrs	r0, r6, #31
 801de2e:	9006      	str	r0, [sp, #24]
 801de30:	003a      	movs	r2, r7
 801de32:	0020      	movs	r0, r4
 801de34:	17e1      	asrs	r1, r4, #31
 801de36:	9304      	str	r3, [sp, #16]
 801de38:	f7e2 fbc2 	bl	80005c0 <__aeabi_lmul>
 801de3c:	0032      	movs	r2, r6
 801de3e:	9108      	str	r1, [sp, #32]
 801de40:	17f3      	asrs	r3, r6, #31
 801de42:	0028      	movs	r0, r5
 801de44:	17e9      	asrs	r1, r5, #31
 801de46:	f7e2 fbbb 	bl	80005c0 <__aeabi_lmul>
 801de4a:	9808      	ldr	r0, [sp, #32]
 801de4c:	002a      	movs	r2, r5
 801de4e:	4684      	mov	ip, r0
 801de50:	4650      	mov	r0, sl
 801de52:	4461      	add	r1, ip
 801de54:	0049      	lsls	r1, r1, #1
 801de56:	6001      	str	r1, [r0, #0]
 801de58:	9b05      	ldr	r3, [sp, #20]
 801de5a:	9904      	ldr	r1, [sp, #16]
 801de5c:	0038      	movs	r0, r7
 801de5e:	f7e2 fbaf 	bl	80005c0 <__aeabi_lmul>
 801de62:	0020      	movs	r0, r4
 801de64:	2408      	movs	r4, #8
 801de66:	000d      	movs	r5, r1
 801de68:	0032      	movs	r2, r6
 801de6a:	9b06      	ldr	r3, [sp, #24]
 801de6c:	9903      	ldr	r1, [sp, #12]
 801de6e:	f7e2 fba7 	bl	80005c0 <__aeabi_lmul>
 801de72:	46a4      	mov	ip, r4
 801de74:	4650      	mov	r0, sl
 801de76:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801de78:	44e3      	add	fp, ip
 801de7a:	44e0      	add	r8, ip
 801de7c:	44e1      	add	r9, ip
 801de7e:	44e2      	add	sl, ip
 801de80:	46a4      	mov	ip, r4
 801de82:	1a6d      	subs	r5, r5, r1
 801de84:	006d      	lsls	r5, r5, #1
 801de86:	9a01      	ldr	r2, [sp, #4]
 801de88:	6045      	str	r5, [r0, #4]
 801de8a:	9807      	ldr	r0, [sp, #28]
 801de8c:	4462      	add	r2, ip
 801de8e:	3801      	subs	r0, #1
 801de90:	9201      	str	r2, [sp, #4]
 801de92:	9007      	str	r0, [sp, #28]
 801de94:	9b00      	ldr	r3, [sp, #0]
 801de96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801de98:	9902      	ldr	r1, [sp, #8]
 801de9a:	4694      	mov	ip, r2
 801de9c:	4463      	add	r3, ip
 801de9e:	9300      	str	r3, [sp, #0]
 801dea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dea2:	469c      	mov	ip, r3
 801dea4:	4461      	add	r1, ip
 801dea6:	9102      	str	r1, [sp, #8]
 801dea8:	2800      	cmp	r0, #0
 801deaa:	d000      	beq.n	801deae <arm_radix4_butterfly_q31+0x232>
 801deac:	e70e      	b.n	801dccc <arm_radix4_butterfly_q31+0x50>
 801deae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801deb0:	009b      	lsls	r3, r3, #2
 801deb2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801deb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801deb6:	9320      	str	r3, [sp, #128]	@ 0x80
 801deb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801deba:	2b04      	cmp	r3, #4
 801debc:	d800      	bhi.n	801dec0 <arm_radix4_butterfly_q31+0x244>
 801debe:	e180      	b.n	801e1c2 <arm_radix4_butterfly_q31+0x546>
 801dec0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dec2:	0893      	lsrs	r3, r2, #2
 801dec4:	1e59      	subs	r1, r3, #1
 801dec6:	9321      	str	r3, [sp, #132]	@ 0x84
 801dec8:	00db      	lsls	r3, r3, #3
 801deca:	931b      	str	r3, [sp, #108]	@ 0x6c
 801decc:	00d3      	lsls	r3, r2, #3
 801dece:	9300      	str	r3, [sp, #0]
 801ded0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ded2:	911a      	str	r1, [sp, #104]	@ 0x68
 801ded4:	00da      	lsls	r2, r3, #3
 801ded6:	921e      	str	r2, [sp, #120]	@ 0x78
 801ded8:	011a      	lsls	r2, r3, #4
 801deda:	921d      	str	r2, [sp, #116]	@ 0x74
 801dedc:	001a      	movs	r2, r3
 801dede:	4694      	mov	ip, r2
 801dee0:	005b      	lsls	r3, r3, #1
 801dee2:	4463      	add	r3, ip
 801dee4:	00db      	lsls	r3, r3, #3
 801dee6:	931c      	str	r3, [sp, #112]	@ 0x70
 801dee8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801deea:	9317      	str	r3, [sp, #92]	@ 0x5c
 801deec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801deee:	9318      	str	r3, [sp, #96]	@ 0x60
 801def0:	9319      	str	r3, [sp, #100]	@ 0x64
 801def2:	9316      	str	r3, [sp, #88]	@ 0x58
 801def4:	2300      	movs	r3, #0
 801def6:	9315      	str	r3, [sp, #84]	@ 0x54
 801def8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801defa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801defc:	681a      	ldr	r2, [r3, #0]
 801defe:	685b      	ldr	r3, [r3, #4]
 801df00:	9205      	str	r2, [sp, #20]
 801df02:	9306      	str	r3, [sp, #24]
 801df04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df06:	468c      	mov	ip, r1
 801df08:	681a      	ldr	r2, [r3, #0]
 801df0a:	685b      	ldr	r3, [r3, #4]
 801df0c:	9207      	str	r2, [sp, #28]
 801df0e:	9308      	str	r3, [sp, #32]
 801df10:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801df12:	681a      	ldr	r2, [r3, #0]
 801df14:	685b      	ldr	r3, [r3, #4]
 801df16:	9209      	str	r2, [sp, #36]	@ 0x24
 801df18:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801df1a:	930a      	str	r3, [sp, #40]	@ 0x28
 801df1c:	0013      	movs	r3, r2
 801df1e:	4463      	add	r3, ip
 801df20:	4698      	mov	r8, r3
 801df22:	0013      	movs	r3, r2
 801df24:	4442      	add	r2, r8
 801df26:	4691      	mov	r9, r2
 801df28:	001a      	movs	r2, r3
 801df2a:	444a      	add	r2, r9
 801df2c:	4692      	mov	sl, r2
 801df2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801df30:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801df32:	4293      	cmp	r3, r2
 801df34:	d800      	bhi.n	801df38 <arm_radix4_butterfly_q31+0x2bc>
 801df36:	e0dd      	b.n	801e0f4 <arm_radix4_butterfly_q31+0x478>
 801df38:	4694      	mov	ip, r2
 801df3a:	468b      	mov	fp, r1
 801df3c:	4644      	mov	r4, r8
 801df3e:	4655      	mov	r5, sl
 801df40:	9b07      	ldr	r3, [sp, #28]
 801df42:	17db      	asrs	r3, r3, #31
 801df44:	930c      	str	r3, [sp, #48]	@ 0x30
 801df46:	9b08      	ldr	r3, [sp, #32]
 801df48:	17db      	asrs	r3, r3, #31
 801df4a:	930d      	str	r3, [sp, #52]	@ 0x34
 801df4c:	9b05      	ldr	r3, [sp, #20]
 801df4e:	17db      	asrs	r3, r3, #31
 801df50:	930e      	str	r3, [sp, #56]	@ 0x38
 801df52:	9b06      	ldr	r3, [sp, #24]
 801df54:	17db      	asrs	r3, r3, #31
 801df56:	930f      	str	r3, [sp, #60]	@ 0x3c
 801df58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df5a:	17db      	asrs	r3, r3, #31
 801df5c:	9310      	str	r3, [sp, #64]	@ 0x40
 801df5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df60:	17db      	asrs	r3, r3, #31
 801df62:	9311      	str	r3, [sp, #68]	@ 0x44
 801df64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801df66:	4463      	add	r3, ip
 801df68:	930b      	str	r3, [sp, #44]	@ 0x2c
 801df6a:	465b      	mov	r3, fp
 801df6c:	4659      	mov	r1, fp
 801df6e:	681a      	ldr	r2, [r3, #0]
 801df70:	464b      	mov	r3, r9
 801df72:	684f      	ldr	r7, [r1, #4]
 801df74:	4649      	mov	r1, r9
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	18d6      	adds	r6, r2, r3
 801df7a:	1ad3      	subs	r3, r2, r3
 801df7c:	9301      	str	r3, [sp, #4]
 801df7e:	684b      	ldr	r3, [r1, #4]
 801df80:	18f8      	adds	r0, r7, r3
 801df82:	1af9      	subs	r1, r7, r3
 801df84:	6827      	ldr	r7, [r4, #0]
 801df86:	9102      	str	r1, [sp, #8]
 801df88:	003a      	movs	r2, r7
 801df8a:	682f      	ldr	r7, [r5, #0]
 801df8c:	46bc      	mov	ip, r7
 801df8e:	465f      	mov	r7, fp
 801df90:	4462      	add	r2, ip
 801df92:	18b3      	adds	r3, r6, r2
 801df94:	109b      	asrs	r3, r3, #2
 801df96:	603b      	str	r3, [r7, #0]
 801df98:	6867      	ldr	r7, [r4, #4]
 801df9a:	1ab6      	subs	r6, r6, r2
 801df9c:	46b8      	mov	r8, r7
 801df9e:	686f      	ldr	r7, [r5, #4]
 801dfa0:	17f2      	asrs	r2, r6, #31
 801dfa2:	46bc      	mov	ip, r7
 801dfa4:	44e0      	add	r8, ip
 801dfa6:	4643      	mov	r3, r8
 801dfa8:	465f      	mov	r7, fp
 801dfaa:	18c1      	adds	r1, r0, r3
 801dfac:	1089      	asrs	r1, r1, #2
 801dfae:	6079      	str	r1, [r7, #4]
 801dfb0:	9900      	ldr	r1, [sp, #0]
 801dfb2:	4690      	mov	r8, r2
 801dfb4:	468c      	mov	ip, r1
 801dfb6:	6867      	ldr	r7, [r4, #4]
 801dfb8:	6869      	ldr	r1, [r5, #4]
 801dfba:	44e3      	add	fp, ip
 801dfbc:	1a7f      	subs	r7, r7, r1
 801dfbe:	9703      	str	r7, [sp, #12]
 801dfc0:	6829      	ldr	r1, [r5, #0]
 801dfc2:	6827      	ldr	r7, [r4, #0]
 801dfc4:	1a7f      	subs	r7, r7, r1
 801dfc6:	9704      	str	r7, [sp, #16]
 801dfc8:	1ac7      	subs	r7, r0, r3
 801dfca:	17fa      	asrs	r2, r7, #31
 801dfcc:	4692      	mov	sl, r2
 801dfce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dfd0:	9a07      	ldr	r2, [sp, #28]
 801dfd2:	0030      	movs	r0, r6
 801dfd4:	4641      	mov	r1, r8
 801dfd6:	f7e2 faf3 	bl	80005c0 <__aeabi_lmul>
 801dfda:	9a08      	ldr	r2, [sp, #32]
 801dfdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dfde:	9112      	str	r1, [sp, #72]	@ 0x48
 801dfe0:	0038      	movs	r0, r7
 801dfe2:	4651      	mov	r1, sl
 801dfe4:	f7e2 faec 	bl	80005c0 <__aeabi_lmul>
 801dfe8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dfea:	9a07      	ldr	r2, [sp, #28]
 801dfec:	4684      	mov	ip, r0
 801dfee:	4461      	add	r1, ip
 801dff0:	1049      	asrs	r1, r1, #1
 801dff2:	6021      	str	r1, [r4, #0]
 801dff4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dff6:	0038      	movs	r0, r7
 801dff8:	4651      	mov	r1, sl
 801dffa:	f7e2 fae1 	bl	80005c0 <__aeabi_lmul>
 801dffe:	9a08      	ldr	r2, [sp, #32]
 801e000:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e002:	000f      	movs	r7, r1
 801e004:	0030      	movs	r0, r6
 801e006:	4641      	mov	r1, r8
 801e008:	f7e2 fada 	bl	80005c0 <__aeabi_lmul>
 801e00c:	9b00      	ldr	r3, [sp, #0]
 801e00e:	9a01      	ldr	r2, [sp, #4]
 801e010:	469c      	mov	ip, r3
 801e012:	9803      	ldr	r0, [sp, #12]
 801e014:	1a7f      	subs	r7, r7, r1
 801e016:	107f      	asrs	r7, r7, #1
 801e018:	6067      	str	r7, [r4, #4]
 801e01a:	0016      	movs	r6, r2
 801e01c:	4464      	add	r4, ip
 801e01e:	4684      	mov	ip, r0
 801e020:	4466      	add	r6, ip
 801e022:	17f2      	asrs	r2, r6, #31
 801e024:	4690      	mov	r8, r2
 801e026:	9902      	ldr	r1, [sp, #8]
 801e028:	9f04      	ldr	r7, [sp, #16]
 801e02a:	0030      	movs	r0, r6
 801e02c:	1bcf      	subs	r7, r1, r7
 801e02e:	17fa      	asrs	r2, r7, #31
 801e030:	4692      	mov	sl, r2
 801e032:	4641      	mov	r1, r8
 801e034:	9a05      	ldr	r2, [sp, #20]
 801e036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e038:	f7e2 fac2 	bl	80005c0 <__aeabi_lmul>
 801e03c:	9a06      	ldr	r2, [sp, #24]
 801e03e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e040:	9112      	str	r1, [sp, #72]	@ 0x48
 801e042:	0038      	movs	r0, r7
 801e044:	4651      	mov	r1, sl
 801e046:	f7e2 fabb 	bl	80005c0 <__aeabi_lmul>
 801e04a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e04c:	9a05      	ldr	r2, [sp, #20]
 801e04e:	4684      	mov	ip, r0
 801e050:	4648      	mov	r0, r9
 801e052:	4461      	add	r1, ip
 801e054:	1049      	asrs	r1, r1, #1
 801e056:	6001      	str	r1, [r0, #0]
 801e058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e05a:	0038      	movs	r0, r7
 801e05c:	4651      	mov	r1, sl
 801e05e:	f7e2 faaf 	bl	80005c0 <__aeabi_lmul>
 801e062:	9a06      	ldr	r2, [sp, #24]
 801e064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e066:	000f      	movs	r7, r1
 801e068:	0030      	movs	r0, r6
 801e06a:	4641      	mov	r1, r8
 801e06c:	f7e2 faa8 	bl	80005c0 <__aeabi_lmul>
 801e070:	464e      	mov	r6, r9
 801e072:	9a00      	ldr	r2, [sp, #0]
 801e074:	9b01      	ldr	r3, [sp, #4]
 801e076:	4694      	mov	ip, r2
 801e078:	9803      	ldr	r0, [sp, #12]
 801e07a:	1a7f      	subs	r7, r7, r1
 801e07c:	107f      	asrs	r7, r7, #1
 801e07e:	6077      	str	r7, [r6, #4]
 801e080:	1a1e      	subs	r6, r3, r0
 801e082:	9b04      	ldr	r3, [sp, #16]
 801e084:	44e1      	add	r9, ip
 801e086:	469c      	mov	ip, r3
 801e088:	17f0      	asrs	r0, r6, #31
 801e08a:	4680      	mov	r8, r0
 801e08c:	9902      	ldr	r1, [sp, #8]
 801e08e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e090:	4461      	add	r1, ip
 801e092:	17cb      	asrs	r3, r1, #31
 801e094:	000f      	movs	r7, r1
 801e096:	469a      	mov	sl, r3
 801e098:	0030      	movs	r0, r6
 801e09a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e09c:	4641      	mov	r1, r8
 801e09e:	f7e2 fa8f 	bl	80005c0 <__aeabi_lmul>
 801e0a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e0a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e0a6:	9101      	str	r1, [sp, #4]
 801e0a8:	0038      	movs	r0, r7
 801e0aa:	4651      	mov	r1, sl
 801e0ac:	f7e2 fa88 	bl	80005c0 <__aeabi_lmul>
 801e0b0:	9801      	ldr	r0, [sp, #4]
 801e0b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0b4:	4684      	mov	ip, r0
 801e0b6:	4461      	add	r1, ip
 801e0b8:	1049      	asrs	r1, r1, #1
 801e0ba:	6029      	str	r1, [r5, #0]
 801e0bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e0be:	0038      	movs	r0, r7
 801e0c0:	4651      	mov	r1, sl
 801e0c2:	f7e2 fa7d 	bl	80005c0 <__aeabi_lmul>
 801e0c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e0c8:	000f      	movs	r7, r1
 801e0ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e0cc:	0030      	movs	r0, r6
 801e0ce:	4641      	mov	r1, r8
 801e0d0:	f7e2 fa76 	bl	80005c0 <__aeabi_lmul>
 801e0d4:	1a7f      	subs	r7, r7, r1
 801e0d6:	107f      	asrs	r7, r7, #1
 801e0d8:	606f      	str	r7, [r5, #4]
 801e0da:	9a00      	ldr	r2, [sp, #0]
 801e0dc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e0de:	4694      	mov	ip, r2
 801e0e0:	4465      	add	r5, ip
 801e0e2:	468c      	mov	ip, r1
 801e0e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e0e6:	0013      	movs	r3, r2
 801e0e8:	4462      	add	r2, ip
 801e0ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e0ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e0ee:	429a      	cmp	r2, r3
 801e0f0:	d900      	bls.n	801e0f4 <arm_radix4_butterfly_q31+0x478>
 801e0f2:	e73a      	b.n	801df6a <arm_radix4_butterfly_q31+0x2ee>
 801e0f4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e0f6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e0f8:	468c      	mov	ip, r1
 801e0fa:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e0fc:	4462      	add	r2, ip
 801e0fe:	468c      	mov	ip, r1
 801e100:	9216      	str	r2, [sp, #88]	@ 0x58
 801e102:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e104:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e106:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e108:	4462      	add	r2, ip
 801e10a:	468c      	mov	ip, r1
 801e10c:	9219      	str	r2, [sp, #100]	@ 0x64
 801e10e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e110:	3301      	adds	r3, #1
 801e112:	4462      	add	r2, ip
 801e114:	9218      	str	r2, [sp, #96]	@ 0x60
 801e116:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e118:	9315      	str	r3, [sp, #84]	@ 0x54
 801e11a:	3208      	adds	r2, #8
 801e11c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e11e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e120:	4293      	cmp	r3, r2
 801e122:	d800      	bhi.n	801e126 <arm_radix4_butterfly_q31+0x4aa>
 801e124:	e6e8      	b.n	801def8 <arm_radix4_butterfly_q31+0x27c>
 801e126:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e128:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e12a:	009b      	lsls	r3, r3, #2
 801e12c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e12e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e130:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e132:	089b      	lsrs	r3, r3, #2
 801e134:	9320      	str	r3, [sp, #128]	@ 0x80
 801e136:	2b04      	cmp	r3, #4
 801e138:	d900      	bls.n	801e13c <arm_radix4_butterfly_q31+0x4c0>
 801e13a:	e6c1      	b.n	801dec0 <arm_radix4_butterfly_q31+0x244>
 801e13c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e13e:	469a      	mov	sl, r3
 801e140:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e142:	691c      	ldr	r4, [r3, #16]
 801e144:	685a      	ldr	r2, [r3, #4]
 801e146:	46a1      	mov	r9, r4
 801e148:	4690      	mov	r8, r2
 801e14a:	6819      	ldr	r1, [r3, #0]
 801e14c:	689a      	ldr	r2, [r3, #8]
 801e14e:	699f      	ldr	r7, [r3, #24]
 801e150:	188d      	adds	r5, r1, r2
 801e152:	444d      	add	r5, r9
 801e154:	19ed      	adds	r5, r5, r7
 801e156:	69de      	ldr	r6, [r3, #28]
 801e158:	601d      	str	r5, [r3, #0]
 801e15a:	4645      	mov	r5, r8
 801e15c:	46b4      	mov	ip, r6
 801e15e:	68d8      	ldr	r0, [r3, #12]
 801e160:	695c      	ldr	r4, [r3, #20]
 801e162:	182d      	adds	r5, r5, r0
 801e164:	192d      	adds	r5, r5, r4
 801e166:	4465      	add	r5, ip
 801e168:	605d      	str	r5, [r3, #4]
 801e16a:	1a8d      	subs	r5, r1, r2
 801e16c:	444d      	add	r5, r9
 801e16e:	1bed      	subs	r5, r5, r7
 801e170:	609d      	str	r5, [r3, #8]
 801e172:	4645      	mov	r5, r8
 801e174:	1a2d      	subs	r5, r5, r0
 801e176:	192d      	adds	r5, r5, r4
 801e178:	1bad      	subs	r5, r5, r6
 801e17a:	464e      	mov	r6, r9
 801e17c:	60dd      	str	r5, [r3, #12]
 801e17e:	180d      	adds	r5, r1, r0
 801e180:	1bad      	subs	r5, r5, r6
 801e182:	4666      	mov	r6, ip
 801e184:	1bad      	subs	r5, r5, r6
 801e186:	611d      	str	r5, [r3, #16]
 801e188:	4645      	mov	r5, r8
 801e18a:	1aad      	subs	r5, r5, r2
 801e18c:	4442      	add	r2, r8
 801e18e:	1b12      	subs	r2, r2, r4
 801e190:	1bd2      	subs	r2, r2, r7
 801e192:	1a08      	subs	r0, r1, r0
 801e194:	61da      	str	r2, [r3, #28]
 801e196:	4649      	mov	r1, r9
 801e198:	2201      	movs	r2, #1
 801e19a:	1a41      	subs	r1, r0, r1
 801e19c:	4252      	negs	r2, r2
 801e19e:	4461      	add	r1, ip
 801e1a0:	4694      	mov	ip, r2
 801e1a2:	44e2      	add	sl, ip
 801e1a4:	4652      	mov	r2, sl
 801e1a6:	1b2d      	subs	r5, r5, r4
 801e1a8:	19ed      	adds	r5, r5, r7
 801e1aa:	615d      	str	r5, [r3, #20]
 801e1ac:	6199      	str	r1, [r3, #24]
 801e1ae:	3320      	adds	r3, #32
 801e1b0:	2a00      	cmp	r2, #0
 801e1b2:	d1c6      	bne.n	801e142 <arm_radix4_butterfly_q31+0x4c6>
 801e1b4:	b027      	add	sp, #156	@ 0x9c
 801e1b6:	bc3c      	pop	{r2, r3, r4, r5}
 801e1b8:	4690      	mov	r8, r2
 801e1ba:	4699      	mov	r9, r3
 801e1bc:	46a2      	mov	sl, r4
 801e1be:	46ab      	mov	fp, r5
 801e1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1c2:	469a      	mov	sl, r3
 801e1c4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e1c6:	e7bc      	b.n	801e142 <arm_radix4_butterfly_q31+0x4c6>

0801e1c8 <arm_radix4_butterfly_inverse_q31>:
 801e1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1ca:	464d      	mov	r5, r9
 801e1cc:	4644      	mov	r4, r8
 801e1ce:	465f      	mov	r7, fp
 801e1d0:	4656      	mov	r6, sl
 801e1d2:	b4f0      	push	{r4, r5, r6, r7}
 801e1d4:	b0a7      	sub	sp, #156	@ 0x9c
 801e1d6:	469c      	mov	ip, r3
 801e1d8:	9114      	str	r1, [sp, #80]	@ 0x50
 801e1da:	0889      	lsrs	r1, r1, #2
 801e1dc:	9310      	str	r3, [sp, #64]	@ 0x40
 801e1de:	00cb      	lsls	r3, r1, #3
 801e1e0:	0015      	movs	r5, r2
 801e1e2:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e1e4:	18c2      	adds	r2, r0, r3
 801e1e6:	000c      	movs	r4, r1
 801e1e8:	9124      	str	r1, [sp, #144]	@ 0x90
 801e1ea:	18d1      	adds	r1, r2, r3
 801e1ec:	468b      	mov	fp, r1
 801e1ee:	469a      	mov	sl, r3
 801e1f0:	4663      	mov	r3, ip
 801e1f2:	44da      	add	sl, fp
 801e1f4:	46d0      	mov	r8, sl
 801e1f6:	4681      	mov	r9, r0
 801e1f8:	4692      	mov	sl, r2
 801e1fa:	0119      	lsls	r1, r3, #4
 801e1fc:	910d      	str	r1, [sp, #52]	@ 0x34
 801e1fe:	00d9      	lsls	r1, r3, #3
 801e200:	005b      	lsls	r3, r3, #1
 801e202:	4463      	add	r3, ip
 801e204:	910e      	str	r1, [sp, #56]	@ 0x38
 801e206:	00d9      	lsls	r1, r3, #3
 801e208:	9022      	str	r0, [sp, #136]	@ 0x88
 801e20a:	9025      	str	r0, [sp, #148]	@ 0x94
 801e20c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e20e:	9502      	str	r5, [sp, #8]
 801e210:	9500      	str	r5, [sp, #0]
 801e212:	9501      	str	r5, [sp, #4]
 801e214:	9409      	str	r4, [sp, #36]	@ 0x24
 801e216:	464b      	mov	r3, r9
 801e218:	681b      	ldr	r3, [r3, #0]
 801e21a:	4652      	mov	r2, sl
 801e21c:	111c      	asrs	r4, r3, #4
 801e21e:	465b      	mov	r3, fp
 801e220:	4648      	mov	r0, r9
 801e222:	681b      	ldr	r3, [r3, #0]
 801e224:	6812      	ldr	r2, [r2, #0]
 801e226:	6840      	ldr	r0, [r0, #4]
 801e228:	111b      	asrs	r3, r3, #4
 801e22a:	18e7      	adds	r7, r4, r3
 801e22c:	1ae3      	subs	r3, r4, r3
 801e22e:	1114      	asrs	r4, r2, #4
 801e230:	4642      	mov	r2, r8
 801e232:	1105      	asrs	r5, r0, #4
 801e234:	4658      	mov	r0, fp
 801e236:	6812      	ldr	r2, [r2, #0]
 801e238:	6840      	ldr	r0, [r0, #4]
 801e23a:	9303      	str	r3, [sp, #12]
 801e23c:	1113      	asrs	r3, r2, #4
 801e23e:	18e2      	adds	r2, r4, r3
 801e240:	1103      	asrs	r3, r0, #4
 801e242:	18ee      	adds	r6, r5, r3
 801e244:	1ae8      	subs	r0, r5, r3
 801e246:	464d      	mov	r5, r9
 801e248:	18bb      	adds	r3, r7, r2
 801e24a:	602b      	str	r3, [r5, #0]
 801e24c:	4641      	mov	r1, r8
 801e24e:	4655      	mov	r5, sl
 801e250:	6849      	ldr	r1, [r1, #4]
 801e252:	686d      	ldr	r5, [r5, #4]
 801e254:	110b      	asrs	r3, r1, #4
 801e256:	112d      	asrs	r5, r5, #4
 801e258:	18eb      	adds	r3, r5, r3
 801e25a:	464d      	mov	r5, r9
 801e25c:	18f1      	adds	r1, r6, r3
 801e25e:	6069      	str	r1, [r5, #4]
 801e260:	4655      	mov	r5, sl
 801e262:	686d      	ldr	r5, [r5, #4]
 801e264:	9004      	str	r0, [sp, #16]
 801e266:	112c      	asrs	r4, r5, #4
 801e268:	4645      	mov	r5, r8
 801e26a:	686d      	ldr	r5, [r5, #4]
 801e26c:	1129      	asrs	r1, r5, #4
 801e26e:	1a65      	subs	r5, r4, r1
 801e270:	4651      	mov	r1, sl
 801e272:	6809      	ldr	r1, [r1, #0]
 801e274:	1abc      	subs	r4, r7, r2
 801e276:	1108      	asrs	r0, r1, #4
 801e278:	4641      	mov	r1, r8
 801e27a:	17e2      	asrs	r2, r4, #31
 801e27c:	6809      	ldr	r1, [r1, #0]
 801e27e:	9207      	str	r2, [sp, #28]
 801e280:	9a01      	ldr	r2, [sp, #4]
 801e282:	1109      	asrs	r1, r1, #4
 801e284:	6817      	ldr	r7, [r2, #0]
 801e286:	1a41      	subs	r1, r0, r1
 801e288:	9106      	str	r1, [sp, #24]
 801e28a:	0039      	movs	r1, r7
 801e28c:	17ff      	asrs	r7, r7, #31
 801e28e:	0038      	movs	r0, r7
 801e290:	9505      	str	r5, [sp, #20]
 801e292:	1af5      	subs	r5, r6, r3
 801e294:	17ef      	asrs	r7, r5, #31
 801e296:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e298:	6857      	ldr	r7, [r2, #4]
 801e29a:	0003      	movs	r3, r0
 801e29c:	17fe      	asrs	r6, r7, #31
 801e29e:	000a      	movs	r2, r1
 801e2a0:	9108      	str	r1, [sp, #32]
 801e2a2:	900a      	str	r0, [sp, #40]	@ 0x28
 801e2a4:	17e1      	asrs	r1, r4, #31
 801e2a6:	0020      	movs	r0, r4
 801e2a8:	960c      	str	r6, [sp, #48]	@ 0x30
 801e2aa:	f7e2 f989 	bl	80005c0 <__aeabi_lmul>
 801e2ae:	003a      	movs	r2, r7
 801e2b0:	17fb      	asrs	r3, r7, #31
 801e2b2:	000e      	movs	r6, r1
 801e2b4:	0028      	movs	r0, r5
 801e2b6:	17e9      	asrs	r1, r5, #31
 801e2b8:	f7e2 f982 	bl	80005c0 <__aeabi_lmul>
 801e2bc:	4653      	mov	r3, sl
 801e2be:	1a76      	subs	r6, r6, r1
 801e2c0:	0076      	lsls	r6, r6, #1
 801e2c2:	601e      	str	r6, [r3, #0]
 801e2c4:	002a      	movs	r2, r5
 801e2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e2c8:	9808      	ldr	r0, [sp, #32]
 801e2ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e2cc:	f7e2 f978 	bl	80005c0 <__aeabi_lmul>
 801e2d0:	003a      	movs	r2, r7
 801e2d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2d4:	000d      	movs	r5, r1
 801e2d6:	0020      	movs	r0, r4
 801e2d8:	9907      	ldr	r1, [sp, #28]
 801e2da:	f7e2 f971 	bl	80005c0 <__aeabi_lmul>
 801e2de:	4657      	mov	r7, sl
 801e2e0:	186d      	adds	r5, r5, r1
 801e2e2:	006d      	lsls	r5, r5, #1
 801e2e4:	607d      	str	r5, [r7, #4]
 801e2e6:	9b03      	ldr	r3, [sp, #12]
 801e2e8:	9e06      	ldr	r6, [sp, #24]
 801e2ea:	9d05      	ldr	r5, [sp, #20]
 801e2ec:	46b4      	mov	ip, r6
 801e2ee:	1b5d      	subs	r5, r3, r5
 801e2f0:	9b00      	ldr	r3, [sp, #0]
 801e2f2:	17ef      	asrs	r7, r5, #31
 801e2f4:	0039      	movs	r1, r7
 801e2f6:	681f      	ldr	r7, [r3, #0]
 801e2f8:	17fc      	asrs	r4, r7, #31
 801e2fa:	0020      	movs	r0, r4
 801e2fc:	9c04      	ldr	r4, [sp, #16]
 801e2fe:	4464      	add	r4, ip
 801e300:	17e6      	asrs	r6, r4, #31
 801e302:	9407      	str	r4, [sp, #28]
 801e304:	9608      	str	r6, [sp, #32]
 801e306:	685e      	ldr	r6, [r3, #4]
 801e308:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e30a:	17f2      	asrs	r2, r6, #31
 801e30c:	0003      	movs	r3, r0
 801e30e:	920c      	str	r2, [sp, #48]	@ 0x30
 801e310:	0028      	movs	r0, r5
 801e312:	003a      	movs	r2, r7
 801e314:	910a      	str	r1, [sp, #40]	@ 0x28
 801e316:	f7e2 f953 	bl	80005c0 <__aeabi_lmul>
 801e31a:	0032      	movs	r2, r6
 801e31c:	17f3      	asrs	r3, r6, #31
 801e31e:	9807      	ldr	r0, [sp, #28]
 801e320:	000c      	movs	r4, r1
 801e322:	9908      	ldr	r1, [sp, #32]
 801e324:	f7e2 f94c 	bl	80005c0 <__aeabi_lmul>
 801e328:	4658      	mov	r0, fp
 801e32a:	1a64      	subs	r4, r4, r1
 801e32c:	0064      	lsls	r4, r4, #1
 801e32e:	9a07      	ldr	r2, [sp, #28]
 801e330:	6004      	str	r4, [r0, #0]
 801e332:	9b08      	ldr	r3, [sp, #32]
 801e334:	0038      	movs	r0, r7
 801e336:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e338:	f7e2 f942 	bl	80005c0 <__aeabi_lmul>
 801e33c:	0032      	movs	r2, r6
 801e33e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e340:	000c      	movs	r4, r1
 801e342:	0028      	movs	r0, r5
 801e344:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e346:	f7e2 f93b 	bl	80005c0 <__aeabi_lmul>
 801e34a:	9d05      	ldr	r5, [sp, #20]
 801e34c:	465f      	mov	r7, fp
 801e34e:	46ac      	mov	ip, r5
 801e350:	1864      	adds	r4, r4, r1
 801e352:	9903      	ldr	r1, [sp, #12]
 801e354:	0064      	lsls	r4, r4, #1
 801e356:	4461      	add	r1, ip
 801e358:	607c      	str	r4, [r7, #4]
 801e35a:	000c      	movs	r4, r1
 801e35c:	17c9      	asrs	r1, r1, #31
 801e35e:	9105      	str	r1, [sp, #20]
 801e360:	9902      	ldr	r1, [sp, #8]
 801e362:	9804      	ldr	r0, [sp, #16]
 801e364:	680d      	ldr	r5, [r1, #0]
 801e366:	9e06      	ldr	r6, [sp, #24]
 801e368:	002b      	movs	r3, r5
 801e36a:	17ed      	asrs	r5, r5, #31
 801e36c:	684f      	ldr	r7, [r1, #4]
 801e36e:	9503      	str	r5, [sp, #12]
 801e370:	1b85      	subs	r5, r0, r6
 801e372:	17e8      	asrs	r0, r5, #31
 801e374:	001a      	movs	r2, r3
 801e376:	9006      	str	r0, [sp, #24]
 801e378:	17fe      	asrs	r6, r7, #31
 801e37a:	9304      	str	r3, [sp, #16]
 801e37c:	0020      	movs	r0, r4
 801e37e:	9b03      	ldr	r3, [sp, #12]
 801e380:	17e1      	asrs	r1, r4, #31
 801e382:	9607      	str	r6, [sp, #28]
 801e384:	f7e2 f91c 	bl	80005c0 <__aeabi_lmul>
 801e388:	003a      	movs	r2, r7
 801e38a:	000e      	movs	r6, r1
 801e38c:	17fb      	asrs	r3, r7, #31
 801e38e:	0028      	movs	r0, r5
 801e390:	17e9      	asrs	r1, r5, #31
 801e392:	f7e2 f915 	bl	80005c0 <__aeabi_lmul>
 801e396:	4640      	mov	r0, r8
 801e398:	1a76      	subs	r6, r6, r1
 801e39a:	0076      	lsls	r6, r6, #1
 801e39c:	002a      	movs	r2, r5
 801e39e:	9b06      	ldr	r3, [sp, #24]
 801e3a0:	6006      	str	r6, [r0, #0]
 801e3a2:	9903      	ldr	r1, [sp, #12]
 801e3a4:	9804      	ldr	r0, [sp, #16]
 801e3a6:	f7e2 f90b 	bl	80005c0 <__aeabi_lmul>
 801e3aa:	0020      	movs	r0, r4
 801e3ac:	2408      	movs	r4, #8
 801e3ae:	9b07      	ldr	r3, [sp, #28]
 801e3b0:	000d      	movs	r5, r1
 801e3b2:	003a      	movs	r2, r7
 801e3b4:	9905      	ldr	r1, [sp, #20]
 801e3b6:	f7e2 f903 	bl	80005c0 <__aeabi_lmul>
 801e3ba:	4640      	mov	r0, r8
 801e3bc:	46a4      	mov	ip, r4
 801e3be:	186d      	adds	r5, r5, r1
 801e3c0:	006d      	lsls	r5, r5, #1
 801e3c2:	6045      	str	r5, [r0, #4]
 801e3c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e3c6:	44e1      	add	r9, ip
 801e3c8:	3801      	subs	r0, #1
 801e3ca:	9009      	str	r0, [sp, #36]	@ 0x24
 801e3cc:	9a01      	ldr	r2, [sp, #4]
 801e3ce:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e3d0:	44e2      	add	sl, ip
 801e3d2:	44e3      	add	fp, ip
 801e3d4:	44e0      	add	r8, ip
 801e3d6:	46a4      	mov	ip, r4
 801e3d8:	4462      	add	r2, ip
 801e3da:	9201      	str	r2, [sp, #4]
 801e3dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e3de:	9b00      	ldr	r3, [sp, #0]
 801e3e0:	4694      	mov	ip, r2
 801e3e2:	4463      	add	r3, ip
 801e3e4:	9300      	str	r3, [sp, #0]
 801e3e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3e8:	9902      	ldr	r1, [sp, #8]
 801e3ea:	469c      	mov	ip, r3
 801e3ec:	4461      	add	r1, ip
 801e3ee:	9102      	str	r1, [sp, #8]
 801e3f0:	2800      	cmp	r0, #0
 801e3f2:	d000      	beq.n	801e3f6 <arm_radix4_butterfly_inverse_q31+0x22e>
 801e3f4:	e70f      	b.n	801e216 <arm_radix4_butterfly_inverse_q31+0x4e>
 801e3f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3f8:	009b      	lsls	r3, r3, #2
 801e3fa:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e3fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e3fe:	9320      	str	r3, [sp, #128]	@ 0x80
 801e400:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e402:	2b04      	cmp	r3, #4
 801e404:	d800      	bhi.n	801e408 <arm_radix4_butterfly_inverse_q31+0x240>
 801e406:	e17c      	b.n	801e702 <arm_radix4_butterfly_inverse_q31+0x53a>
 801e408:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e40a:	0893      	lsrs	r3, r2, #2
 801e40c:	1e59      	subs	r1, r3, #1
 801e40e:	9321      	str	r3, [sp, #132]	@ 0x84
 801e410:	00db      	lsls	r3, r3, #3
 801e412:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e414:	00d3      	lsls	r3, r2, #3
 801e416:	9300      	str	r3, [sp, #0]
 801e418:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e41a:	911a      	str	r1, [sp, #104]	@ 0x68
 801e41c:	00da      	lsls	r2, r3, #3
 801e41e:	921e      	str	r2, [sp, #120]	@ 0x78
 801e420:	011a      	lsls	r2, r3, #4
 801e422:	921d      	str	r2, [sp, #116]	@ 0x74
 801e424:	001a      	movs	r2, r3
 801e426:	4694      	mov	ip, r2
 801e428:	005b      	lsls	r3, r3, #1
 801e42a:	4463      	add	r3, ip
 801e42c:	00db      	lsls	r3, r3, #3
 801e42e:	931c      	str	r3, [sp, #112]	@ 0x70
 801e430:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e432:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e436:	9318      	str	r3, [sp, #96]	@ 0x60
 801e438:	9319      	str	r3, [sp, #100]	@ 0x64
 801e43a:	9316      	str	r3, [sp, #88]	@ 0x58
 801e43c:	2300      	movs	r3, #0
 801e43e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e440:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e442:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e444:	681a      	ldr	r2, [r3, #0]
 801e446:	685b      	ldr	r3, [r3, #4]
 801e448:	9205      	str	r2, [sp, #20]
 801e44a:	9306      	str	r3, [sp, #24]
 801e44c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e44e:	468c      	mov	ip, r1
 801e450:	681a      	ldr	r2, [r3, #0]
 801e452:	685b      	ldr	r3, [r3, #4]
 801e454:	9207      	str	r2, [sp, #28]
 801e456:	9308      	str	r3, [sp, #32]
 801e458:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e45a:	681a      	ldr	r2, [r3, #0]
 801e45c:	685b      	ldr	r3, [r3, #4]
 801e45e:	9209      	str	r2, [sp, #36]	@ 0x24
 801e460:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e462:	930a      	str	r3, [sp, #40]	@ 0x28
 801e464:	0013      	movs	r3, r2
 801e466:	4463      	add	r3, ip
 801e468:	4698      	mov	r8, r3
 801e46a:	0013      	movs	r3, r2
 801e46c:	4442      	add	r2, r8
 801e46e:	4691      	mov	r9, r2
 801e470:	001a      	movs	r2, r3
 801e472:	444a      	add	r2, r9
 801e474:	4692      	mov	sl, r2
 801e476:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e478:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e47a:	4293      	cmp	r3, r2
 801e47c:	d800      	bhi.n	801e480 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e47e:	e0d9      	b.n	801e634 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e480:	4694      	mov	ip, r2
 801e482:	4644      	mov	r4, r8
 801e484:	4655      	mov	r5, sl
 801e486:	4688      	mov	r8, r1
 801e488:	9b07      	ldr	r3, [sp, #28]
 801e48a:	17db      	asrs	r3, r3, #31
 801e48c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e48e:	9b08      	ldr	r3, [sp, #32]
 801e490:	17db      	asrs	r3, r3, #31
 801e492:	930d      	str	r3, [sp, #52]	@ 0x34
 801e494:	9b05      	ldr	r3, [sp, #20]
 801e496:	17db      	asrs	r3, r3, #31
 801e498:	930e      	str	r3, [sp, #56]	@ 0x38
 801e49a:	9b06      	ldr	r3, [sp, #24]
 801e49c:	17db      	asrs	r3, r3, #31
 801e49e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4a2:	17db      	asrs	r3, r3, #31
 801e4a4:	9310      	str	r3, [sp, #64]	@ 0x40
 801e4a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e4a8:	17db      	asrs	r3, r3, #31
 801e4aa:	9311      	str	r3, [sp, #68]	@ 0x44
 801e4ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e4ae:	4463      	add	r3, ip
 801e4b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e4b2:	4643      	mov	r3, r8
 801e4b4:	4641      	mov	r1, r8
 801e4b6:	681a      	ldr	r2, [r3, #0]
 801e4b8:	464b      	mov	r3, r9
 801e4ba:	684f      	ldr	r7, [r1, #4]
 801e4bc:	4649      	mov	r1, r9
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	18d6      	adds	r6, r2, r3
 801e4c2:	1ad3      	subs	r3, r2, r3
 801e4c4:	9301      	str	r3, [sp, #4]
 801e4c6:	684b      	ldr	r3, [r1, #4]
 801e4c8:	1af9      	subs	r1, r7, r3
 801e4ca:	9102      	str	r1, [sp, #8]
 801e4cc:	6829      	ldr	r1, [r5, #0]
 801e4ce:	18f8      	adds	r0, r7, r3
 801e4d0:	468c      	mov	ip, r1
 801e4d2:	6827      	ldr	r7, [r4, #0]
 801e4d4:	4467      	add	r7, ip
 801e4d6:	003a      	movs	r2, r7
 801e4d8:	19f3      	adds	r3, r6, r7
 801e4da:	4647      	mov	r7, r8
 801e4dc:	109b      	asrs	r3, r3, #2
 801e4de:	603b      	str	r3, [r7, #0]
 801e4e0:	6869      	ldr	r1, [r5, #4]
 801e4e2:	6867      	ldr	r7, [r4, #4]
 801e4e4:	468c      	mov	ip, r1
 801e4e6:	4467      	add	r7, ip
 801e4e8:	003b      	movs	r3, r7
 801e4ea:	19c1      	adds	r1, r0, r7
 801e4ec:	4647      	mov	r7, r8
 801e4ee:	1ab6      	subs	r6, r6, r2
 801e4f0:	1089      	asrs	r1, r1, #2
 801e4f2:	6079      	str	r1, [r7, #4]
 801e4f4:	17f2      	asrs	r2, r6, #31
 801e4f6:	9900      	ldr	r1, [sp, #0]
 801e4f8:	4692      	mov	sl, r2
 801e4fa:	468c      	mov	ip, r1
 801e4fc:	6867      	ldr	r7, [r4, #4]
 801e4fe:	6869      	ldr	r1, [r5, #4]
 801e500:	44e0      	add	r8, ip
 801e502:	1a7f      	subs	r7, r7, r1
 801e504:	9703      	str	r7, [sp, #12]
 801e506:	6821      	ldr	r1, [r4, #0]
 801e508:	682f      	ldr	r7, [r5, #0]
 801e50a:	1bc9      	subs	r1, r1, r7
 801e50c:	1ac7      	subs	r7, r0, r3
 801e50e:	17fa      	asrs	r2, r7, #31
 801e510:	4693      	mov	fp, r2
 801e512:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e514:	9a07      	ldr	r2, [sp, #28]
 801e516:	9104      	str	r1, [sp, #16]
 801e518:	0030      	movs	r0, r6
 801e51a:	4651      	mov	r1, sl
 801e51c:	f7e2 f850 	bl	80005c0 <__aeabi_lmul>
 801e520:	9a08      	ldr	r2, [sp, #32]
 801e522:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e524:	9112      	str	r1, [sp, #72]	@ 0x48
 801e526:	0038      	movs	r0, r7
 801e528:	4659      	mov	r1, fp
 801e52a:	f7e2 f849 	bl	80005c0 <__aeabi_lmul>
 801e52e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e530:	9a07      	ldr	r2, [sp, #28]
 801e532:	1a41      	subs	r1, r0, r1
 801e534:	1049      	asrs	r1, r1, #1
 801e536:	6021      	str	r1, [r4, #0]
 801e538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e53a:	0038      	movs	r0, r7
 801e53c:	4659      	mov	r1, fp
 801e53e:	f7e2 f83f 	bl	80005c0 <__aeabi_lmul>
 801e542:	9a08      	ldr	r2, [sp, #32]
 801e544:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e546:	000f      	movs	r7, r1
 801e548:	0030      	movs	r0, r6
 801e54a:	4651      	mov	r1, sl
 801e54c:	f7e2 f838 	bl	80005c0 <__aeabi_lmul>
 801e550:	9b00      	ldr	r3, [sp, #0]
 801e552:	187f      	adds	r7, r7, r1
 801e554:	469c      	mov	ip, r3
 801e556:	107f      	asrs	r7, r7, #1
 801e558:	6067      	str	r7, [r4, #4]
 801e55a:	9a01      	ldr	r2, [sp, #4]
 801e55c:	9f03      	ldr	r7, [sp, #12]
 801e55e:	9802      	ldr	r0, [sp, #8]
 801e560:	1bd7      	subs	r7, r2, r7
 801e562:	17fe      	asrs	r6, r7, #31
 801e564:	0031      	movs	r1, r6
 801e566:	9e04      	ldr	r6, [sp, #16]
 801e568:	4682      	mov	sl, r0
 801e56a:	4464      	add	r4, ip
 801e56c:	46b4      	mov	ip, r6
 801e56e:	44e2      	add	sl, ip
 801e570:	4652      	mov	r2, sl
 801e572:	17d2      	asrs	r2, r2, #31
 801e574:	4693      	mov	fp, r2
 801e576:	0038      	movs	r0, r7
 801e578:	9a05      	ldr	r2, [sp, #20]
 801e57a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e57c:	9112      	str	r1, [sp, #72]	@ 0x48
 801e57e:	f7e2 f81f 	bl	80005c0 <__aeabi_lmul>
 801e582:	9a06      	ldr	r2, [sp, #24]
 801e584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e586:	000e      	movs	r6, r1
 801e588:	4650      	mov	r0, sl
 801e58a:	4659      	mov	r1, fp
 801e58c:	f7e2 f818 	bl	80005c0 <__aeabi_lmul>
 801e590:	4648      	mov	r0, r9
 801e592:	1a76      	subs	r6, r6, r1
 801e594:	1076      	asrs	r6, r6, #1
 801e596:	6006      	str	r6, [r0, #0]
 801e598:	9a05      	ldr	r2, [sp, #20]
 801e59a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e59c:	4650      	mov	r0, sl
 801e59e:	4659      	mov	r1, fp
 801e5a0:	f7e2 f80e 	bl	80005c0 <__aeabi_lmul>
 801e5a4:	9a06      	ldr	r2, [sp, #24]
 801e5a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e5a8:	000e      	movs	r6, r1
 801e5aa:	0038      	movs	r0, r7
 801e5ac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e5ae:	f7e2 f807 	bl	80005c0 <__aeabi_lmul>
 801e5b2:	9a00      	ldr	r2, [sp, #0]
 801e5b4:	9f03      	ldr	r7, [sp, #12]
 801e5b6:	4694      	mov	ip, r2
 801e5b8:	1876      	adds	r6, r6, r1
 801e5ba:	4649      	mov	r1, r9
 801e5bc:	44e1      	add	r9, ip
 801e5be:	46bc      	mov	ip, r7
 801e5c0:	9b01      	ldr	r3, [sp, #4]
 801e5c2:	1076      	asrs	r6, r6, #1
 801e5c4:	4463      	add	r3, ip
 801e5c6:	17df      	asrs	r7, r3, #31
 801e5c8:	604e      	str	r6, [r1, #4]
 801e5ca:	46ba      	mov	sl, r7
 801e5cc:	001e      	movs	r6, r3
 801e5ce:	9802      	ldr	r0, [sp, #8]
 801e5d0:	9b04      	ldr	r3, [sp, #16]
 801e5d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e5d4:	1ac7      	subs	r7, r0, r3
 801e5d6:	17fb      	asrs	r3, r7, #31
 801e5d8:	469b      	mov	fp, r3
 801e5da:	0030      	movs	r0, r6
 801e5dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e5de:	4651      	mov	r1, sl
 801e5e0:	f7e1 ffee 	bl	80005c0 <__aeabi_lmul>
 801e5e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e5e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e5e8:	9101      	str	r1, [sp, #4]
 801e5ea:	0038      	movs	r0, r7
 801e5ec:	4659      	mov	r1, fp
 801e5ee:	f7e1 ffe7 	bl	80005c0 <__aeabi_lmul>
 801e5f2:	9801      	ldr	r0, [sp, #4]
 801e5f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e5f6:	1a41      	subs	r1, r0, r1
 801e5f8:	1049      	asrs	r1, r1, #1
 801e5fa:	6029      	str	r1, [r5, #0]
 801e5fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e5fe:	0038      	movs	r0, r7
 801e600:	4659      	mov	r1, fp
 801e602:	f7e1 ffdd 	bl	80005c0 <__aeabi_lmul>
 801e606:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e608:	000f      	movs	r7, r1
 801e60a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e60c:	0030      	movs	r0, r6
 801e60e:	4651      	mov	r1, sl
 801e610:	f7e1 ffd6 	bl	80005c0 <__aeabi_lmul>
 801e614:	187f      	adds	r7, r7, r1
 801e616:	107f      	asrs	r7, r7, #1
 801e618:	606f      	str	r7, [r5, #4]
 801e61a:	9a00      	ldr	r2, [sp, #0]
 801e61c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e61e:	4694      	mov	ip, r2
 801e620:	4465      	add	r5, ip
 801e622:	468c      	mov	ip, r1
 801e624:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e626:	0013      	movs	r3, r2
 801e628:	4462      	add	r2, ip
 801e62a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e62c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e62e:	429a      	cmp	r2, r3
 801e630:	d900      	bls.n	801e634 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e632:	e73e      	b.n	801e4b2 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e634:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e636:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e638:	468c      	mov	ip, r1
 801e63a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e63c:	4462      	add	r2, ip
 801e63e:	468c      	mov	ip, r1
 801e640:	9216      	str	r2, [sp, #88]	@ 0x58
 801e642:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e644:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e646:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e648:	4462      	add	r2, ip
 801e64a:	468c      	mov	ip, r1
 801e64c:	9219      	str	r2, [sp, #100]	@ 0x64
 801e64e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e650:	3301      	adds	r3, #1
 801e652:	4462      	add	r2, ip
 801e654:	9218      	str	r2, [sp, #96]	@ 0x60
 801e656:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e658:	9315      	str	r3, [sp, #84]	@ 0x54
 801e65a:	3208      	adds	r2, #8
 801e65c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e65e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e660:	4293      	cmp	r3, r2
 801e662:	d800      	bhi.n	801e666 <arm_radix4_butterfly_inverse_q31+0x49e>
 801e664:	e6ec      	b.n	801e440 <arm_radix4_butterfly_inverse_q31+0x278>
 801e666:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e668:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e66a:	009b      	lsls	r3, r3, #2
 801e66c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e66e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e670:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e672:	089b      	lsrs	r3, r3, #2
 801e674:	9320      	str	r3, [sp, #128]	@ 0x80
 801e676:	2b04      	cmp	r3, #4
 801e678:	d900      	bls.n	801e67c <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e67a:	e6c5      	b.n	801e408 <arm_radix4_butterfly_inverse_q31+0x240>
 801e67c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e67e:	469a      	mov	sl, r3
 801e680:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e682:	681a      	ldr	r2, [r3, #0]
 801e684:	6918      	ldr	r0, [r3, #16]
 801e686:	4691      	mov	r9, r2
 801e688:	464c      	mov	r4, r9
 801e68a:	4680      	mov	r8, r0
 801e68c:	69de      	ldr	r6, [r3, #28]
 801e68e:	689d      	ldr	r5, [r3, #8]
 801e690:	46b4      	mov	ip, r6
 801e692:	6998      	ldr	r0, [r3, #24]
 801e694:	1964      	adds	r4, r4, r5
 801e696:	6859      	ldr	r1, [r3, #4]
 801e698:	68da      	ldr	r2, [r3, #12]
 801e69a:	4444      	add	r4, r8
 801e69c:	695f      	ldr	r7, [r3, #20]
 801e69e:	1824      	adds	r4, r4, r0
 801e6a0:	601c      	str	r4, [r3, #0]
 801e6a2:	188c      	adds	r4, r1, r2
 801e6a4:	19e4      	adds	r4, r4, r7
 801e6a6:	4464      	add	r4, ip
 801e6a8:	605c      	str	r4, [r3, #4]
 801e6aa:	464c      	mov	r4, r9
 801e6ac:	1b64      	subs	r4, r4, r5
 801e6ae:	4444      	add	r4, r8
 801e6b0:	1a24      	subs	r4, r4, r0
 801e6b2:	609c      	str	r4, [r3, #8]
 801e6b4:	1a8c      	subs	r4, r1, r2
 801e6b6:	19e4      	adds	r4, r4, r7
 801e6b8:	1ba4      	subs	r4, r4, r6
 801e6ba:	60dc      	str	r4, [r3, #12]
 801e6bc:	464c      	mov	r4, r9
 801e6be:	4646      	mov	r6, r8
 801e6c0:	1aa4      	subs	r4, r4, r2
 801e6c2:	1ba4      	subs	r4, r4, r6
 801e6c4:	4464      	add	r4, ip
 801e6c6:	611c      	str	r4, [r3, #16]
 801e6c8:	194c      	adds	r4, r1, r5
 801e6ca:	1be4      	subs	r4, r4, r7
 801e6cc:	1a24      	subs	r4, r4, r0
 801e6ce:	615c      	str	r4, [r3, #20]
 801e6d0:	4644      	mov	r4, r8
 801e6d2:	4666      	mov	r6, ip
 801e6d4:	444a      	add	r2, r9
 801e6d6:	1b12      	subs	r2, r2, r4
 801e6d8:	1b92      	subs	r2, r2, r6
 801e6da:	619a      	str	r2, [r3, #24]
 801e6dc:	1b4a      	subs	r2, r1, r5
 801e6de:	1bd1      	subs	r1, r2, r7
 801e6e0:	2201      	movs	r2, #1
 801e6e2:	4252      	negs	r2, r2
 801e6e4:	4694      	mov	ip, r2
 801e6e6:	44e2      	add	sl, ip
 801e6e8:	4652      	mov	r2, sl
 801e6ea:	1809      	adds	r1, r1, r0
 801e6ec:	61d9      	str	r1, [r3, #28]
 801e6ee:	3320      	adds	r3, #32
 801e6f0:	2a00      	cmp	r2, #0
 801e6f2:	d1c6      	bne.n	801e682 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e6f4:	b027      	add	sp, #156	@ 0x9c
 801e6f6:	bc3c      	pop	{r2, r3, r4, r5}
 801e6f8:	4690      	mov	r8, r2
 801e6fa:	4699      	mov	r9, r3
 801e6fc:	46a2      	mov	sl, r4
 801e6fe:	46ab      	mov	fp, r5
 801e700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e702:	469a      	mov	sl, r3
 801e704:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e706:	e7bc      	b.n	801e682 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e708 <arm_cmplx_mag_squared_q31>:
 801e708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e70a:	464f      	mov	r7, r9
 801e70c:	4646      	mov	r6, r8
 801e70e:	0004      	movs	r4, r0
 801e710:	b4c0      	push	{r6, r7}
 801e712:	0016      	movs	r6, r2
 801e714:	000f      	movs	r7, r1
 801e716:	2a00      	cmp	r2, #0
 801e718:	d018      	beq.n	801e74c <arm_cmplx_mag_squared_q31+0x44>
 801e71a:	6823      	ldr	r3, [r4, #0]
 801e71c:	6822      	ldr	r2, [r4, #0]
 801e71e:	17d9      	asrs	r1, r3, #31
 801e720:	6863      	ldr	r3, [r4, #4]
 801e722:	0010      	movs	r0, r2
 801e724:	4698      	mov	r8, r3
 801e726:	17db      	asrs	r3, r3, #31
 801e728:	4699      	mov	r9, r3
 801e72a:	000b      	movs	r3, r1
 801e72c:	f7e1 ff48 	bl	80005c0 <__aeabi_lmul>
 801e730:	4642      	mov	r2, r8
 801e732:	104d      	asrs	r5, r1, #1
 801e734:	464b      	mov	r3, r9
 801e736:	4640      	mov	r0, r8
 801e738:	4649      	mov	r1, r9
 801e73a:	f7e1 ff41 	bl	80005c0 <__aeabi_lmul>
 801e73e:	1049      	asrs	r1, r1, #1
 801e740:	1869      	adds	r1, r5, r1
 801e742:	3e01      	subs	r6, #1
 801e744:	c702      	stmia	r7!, {r1}
 801e746:	3408      	adds	r4, #8
 801e748:	2e00      	cmp	r6, #0
 801e74a:	d1e6      	bne.n	801e71a <arm_cmplx_mag_squared_q31+0x12>
 801e74c:	bc0c      	pop	{r2, r3}
 801e74e:	4690      	mov	r8, r2
 801e750:	4699      	mov	r9, r3
 801e752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e754 <arm_mult_q31>:
 801e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e756:	4646      	mov	r6, r8
 801e758:	464f      	mov	r7, r9
 801e75a:	4690      	mov	r8, r2
 801e75c:	b4c0      	push	{r6, r7}
 801e75e:	001d      	movs	r5, r3
 801e760:	0006      	movs	r6, r0
 801e762:	000f      	movs	r7, r1
 801e764:	2400      	movs	r4, #0
 801e766:	2b00      	cmp	r3, #0
 801e768:	d020      	beq.n	801e7ac <arm_mult_q31+0x58>
 801e76a:	4b12      	ldr	r3, [pc, #72]	@ (801e7b4 <arm_mult_q31+0x60>)
 801e76c:	4699      	mov	r9, r3
 801e76e:	e007      	b.n	801e780 <arm_mult_q31+0x2c>
 801e770:	464b      	mov	r3, r9
 801e772:	4059      	eors	r1, r3
 801e774:	4643      	mov	r3, r8
 801e776:	3d01      	subs	r5, #1
 801e778:	5119      	str	r1, [r3, r4]
 801e77a:	3404      	adds	r4, #4
 801e77c:	2d00      	cmp	r5, #0
 801e77e:	d015      	beq.n	801e7ac <arm_mult_q31+0x58>
 801e780:	5933      	ldr	r3, [r6, r4]
 801e782:	593a      	ldr	r2, [r7, r4]
 801e784:	17d9      	asrs	r1, r3, #31
 801e786:	593b      	ldr	r3, [r7, r4]
 801e788:	5930      	ldr	r0, [r6, r4]
 801e78a:	17db      	asrs	r3, r3, #31
 801e78c:	f7e1 ff18 	bl	80005c0 <__aeabi_lmul>
 801e790:	004b      	lsls	r3, r1, #1
 801e792:	0fc0      	lsrs	r0, r0, #31
 801e794:	4318      	orrs	r0, r3
 801e796:	17c9      	asrs	r1, r1, #31
 801e798:	17c3      	asrs	r3, r0, #31
 801e79a:	428b      	cmp	r3, r1
 801e79c:	d1e8      	bne.n	801e770 <arm_mult_q31+0x1c>
 801e79e:	0001      	movs	r1, r0
 801e7a0:	4643      	mov	r3, r8
 801e7a2:	3d01      	subs	r5, #1
 801e7a4:	5119      	str	r1, [r3, r4]
 801e7a6:	3404      	adds	r4, #4
 801e7a8:	2d00      	cmp	r5, #0
 801e7aa:	d1e9      	bne.n	801e780 <arm_mult_q31+0x2c>
 801e7ac:	bc0c      	pop	{r2, r3}
 801e7ae:	4690      	mov	r8, r2
 801e7b0:	4699      	mov	r9, r3
 801e7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7b4:	7fffffff 	.word	0x7fffffff

0801e7b8 <arm_add_q31>:
 801e7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7ba:	465f      	mov	r7, fp
 801e7bc:	4656      	mov	r6, sl
 801e7be:	464d      	mov	r5, r9
 801e7c0:	4644      	mov	r4, r8
 801e7c2:	b4f0      	push	{r4, r5, r6, r7}
 801e7c4:	4693      	mov	fp, r2
 801e7c6:	b083      	sub	sp, #12
 801e7c8:	4681      	mov	r9, r0
 801e7ca:	468a      	mov	sl, r1
 801e7cc:	4698      	mov	r8, r3
 801e7ce:	2200      	movs	r2, #0
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	d020      	beq.n	801e816 <arm_add_q31+0x5e>
 801e7d4:	4649      	mov	r1, r9
 801e7d6:	4653      	mov	r3, sl
 801e7d8:	588e      	ldr	r6, [r1, r2]
 801e7da:	589b      	ldr	r3, [r3, r2]
 801e7dc:	17f7      	asrs	r7, r6, #31
 801e7de:	001c      	movs	r4, r3
 801e7e0:	0030      	movs	r0, r6
 801e7e2:	0039      	movs	r1, r7
 801e7e4:	17dd      	asrs	r5, r3, #31
 801e7e6:	46b4      	mov	ip, r6
 801e7e8:	1900      	adds	r0, r0, r4
 801e7ea:	4169      	adcs	r1, r5
 801e7ec:	4463      	add	r3, ip
 801e7ee:	9000      	str	r0, [sp, #0]
 801e7f0:	9101      	str	r1, [sp, #4]
 801e7f2:	17d9      	asrs	r1, r3, #31
 801e7f4:	468c      	mov	ip, r1
 801e7f6:	9901      	ldr	r1, [sp, #4]
 801e7f8:	458c      	cmp	ip, r1
 801e7fa:	d002      	beq.n	801e802 <arm_add_q31+0x4a>
 801e7fc:	17cb      	asrs	r3, r1, #31
 801e7fe:	4909      	ldr	r1, [pc, #36]	@ (801e824 <arm_add_q31+0x6c>)
 801e800:	404b      	eors	r3, r1
 801e802:	4659      	mov	r1, fp
 801e804:	508b      	str	r3, [r1, r2]
 801e806:	2301      	movs	r3, #1
 801e808:	425b      	negs	r3, r3
 801e80a:	469c      	mov	ip, r3
 801e80c:	44e0      	add	r8, ip
 801e80e:	4643      	mov	r3, r8
 801e810:	3204      	adds	r2, #4
 801e812:	2b00      	cmp	r3, #0
 801e814:	d1de      	bne.n	801e7d4 <arm_add_q31+0x1c>
 801e816:	b003      	add	sp, #12
 801e818:	bc3c      	pop	{r2, r3, r4, r5}
 801e81a:	4690      	mov	r8, r2
 801e81c:	4699      	mov	r9, r3
 801e81e:	46a2      	mov	sl, r4
 801e820:	46ab      	mov	fp, r5
 801e822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e824:	7fffffff 	.word	0x7fffffff

0801e828 <atof>:
 801e828:	b510      	push	{r4, lr}
 801e82a:	2100      	movs	r1, #0
 801e82c:	f000 fe12 	bl	801f454 <strtod>
 801e830:	bd10      	pop	{r4, pc}

0801e832 <atoi>:
 801e832:	b510      	push	{r4, lr}
 801e834:	220a      	movs	r2, #10
 801e836:	2100      	movs	r1, #0
 801e838:	f000 fea4 	bl	801f584 <strtol>
 801e83c:	bd10      	pop	{r4, pc}
	...

0801e840 <sulp>:
 801e840:	b570      	push	{r4, r5, r6, lr}
 801e842:	0016      	movs	r6, r2
 801e844:	000d      	movs	r5, r1
 801e846:	f003 fcf3 	bl	8022230 <__ulp>
 801e84a:	2e00      	cmp	r6, #0
 801e84c:	d00d      	beq.n	801e86a <sulp+0x2a>
 801e84e:	236b      	movs	r3, #107	@ 0x6b
 801e850:	006a      	lsls	r2, r5, #1
 801e852:	0d52      	lsrs	r2, r2, #21
 801e854:	1a9b      	subs	r3, r3, r2
 801e856:	2b00      	cmp	r3, #0
 801e858:	dd07      	ble.n	801e86a <sulp+0x2a>
 801e85a:	2400      	movs	r4, #0
 801e85c:	4a03      	ldr	r2, [pc, #12]	@ (801e86c <sulp+0x2c>)
 801e85e:	051b      	lsls	r3, r3, #20
 801e860:	189d      	adds	r5, r3, r2
 801e862:	002b      	movs	r3, r5
 801e864:	0022      	movs	r2, r4
 801e866:	f7e3 fee9 	bl	800263c <__aeabi_dmul>
 801e86a:	bd70      	pop	{r4, r5, r6, pc}
 801e86c:	3ff00000 	.word	0x3ff00000

0801e870 <_strtod_l>:
 801e870:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e872:	b0a3      	sub	sp, #140	@ 0x8c
 801e874:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e876:	2200      	movs	r2, #0
 801e878:	2600      	movs	r6, #0
 801e87a:	2700      	movs	r7, #0
 801e87c:	9005      	str	r0, [sp, #20]
 801e87e:	9109      	str	r1, [sp, #36]	@ 0x24
 801e880:	921e      	str	r2, [sp, #120]	@ 0x78
 801e882:	911d      	str	r1, [sp, #116]	@ 0x74
 801e884:	780a      	ldrb	r2, [r1, #0]
 801e886:	2a2b      	cmp	r2, #43	@ 0x2b
 801e888:	d053      	beq.n	801e932 <_strtod_l+0xc2>
 801e88a:	d83f      	bhi.n	801e90c <_strtod_l+0x9c>
 801e88c:	2a0d      	cmp	r2, #13
 801e88e:	d839      	bhi.n	801e904 <_strtod_l+0x94>
 801e890:	2a08      	cmp	r2, #8
 801e892:	d839      	bhi.n	801e908 <_strtod_l+0x98>
 801e894:	2a00      	cmp	r2, #0
 801e896:	d042      	beq.n	801e91e <_strtod_l+0xae>
 801e898:	2200      	movs	r2, #0
 801e89a:	9212      	str	r2, [sp, #72]	@ 0x48
 801e89c:	2100      	movs	r1, #0
 801e89e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e8a0:	910c      	str	r1, [sp, #48]	@ 0x30
 801e8a2:	782a      	ldrb	r2, [r5, #0]
 801e8a4:	2a30      	cmp	r2, #48	@ 0x30
 801e8a6:	d000      	beq.n	801e8aa <_strtod_l+0x3a>
 801e8a8:	e083      	b.n	801e9b2 <_strtod_l+0x142>
 801e8aa:	786a      	ldrb	r2, [r5, #1]
 801e8ac:	3120      	adds	r1, #32
 801e8ae:	438a      	bics	r2, r1
 801e8b0:	2a58      	cmp	r2, #88	@ 0x58
 801e8b2:	d000      	beq.n	801e8b6 <_strtod_l+0x46>
 801e8b4:	e073      	b.n	801e99e <_strtod_l+0x12e>
 801e8b6:	9302      	str	r3, [sp, #8]
 801e8b8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e8ba:	4a95      	ldr	r2, [pc, #596]	@ (801eb10 <_strtod_l+0x2a0>)
 801e8bc:	9301      	str	r3, [sp, #4]
 801e8be:	ab1e      	add	r3, sp, #120	@ 0x78
 801e8c0:	9300      	str	r3, [sp, #0]
 801e8c2:	9805      	ldr	r0, [sp, #20]
 801e8c4:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e8c6:	a91d      	add	r1, sp, #116	@ 0x74
 801e8c8:	f002 fd62 	bl	8021390 <__gethex>
 801e8cc:	230f      	movs	r3, #15
 801e8ce:	0002      	movs	r2, r0
 801e8d0:	401a      	ands	r2, r3
 801e8d2:	0004      	movs	r4, r0
 801e8d4:	9206      	str	r2, [sp, #24]
 801e8d6:	4218      	tst	r0, r3
 801e8d8:	d005      	beq.n	801e8e6 <_strtod_l+0x76>
 801e8da:	2a06      	cmp	r2, #6
 801e8dc:	d12b      	bne.n	801e936 <_strtod_l+0xc6>
 801e8de:	2300      	movs	r3, #0
 801e8e0:	3501      	adds	r5, #1
 801e8e2:	951d      	str	r5, [sp, #116]	@ 0x74
 801e8e4:	9312      	str	r3, [sp, #72]	@ 0x48
 801e8e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e8e8:	2b00      	cmp	r3, #0
 801e8ea:	d002      	beq.n	801e8f2 <_strtod_l+0x82>
 801e8ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8ee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e8f0:	6013      	str	r3, [r2, #0]
 801e8f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	d019      	beq.n	801e92c <_strtod_l+0xbc>
 801e8f8:	2380      	movs	r3, #128	@ 0x80
 801e8fa:	0030      	movs	r0, r6
 801e8fc:	061b      	lsls	r3, r3, #24
 801e8fe:	18f9      	adds	r1, r7, r3
 801e900:	b023      	add	sp, #140	@ 0x8c
 801e902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e904:	2a20      	cmp	r2, #32
 801e906:	d1c7      	bne.n	801e898 <_strtod_l+0x28>
 801e908:	3101      	adds	r1, #1
 801e90a:	e7ba      	b.n	801e882 <_strtod_l+0x12>
 801e90c:	2a2d      	cmp	r2, #45	@ 0x2d
 801e90e:	d1c3      	bne.n	801e898 <_strtod_l+0x28>
 801e910:	3a2c      	subs	r2, #44	@ 0x2c
 801e912:	9212      	str	r2, [sp, #72]	@ 0x48
 801e914:	1c4a      	adds	r2, r1, #1
 801e916:	921d      	str	r2, [sp, #116]	@ 0x74
 801e918:	784a      	ldrb	r2, [r1, #1]
 801e91a:	2a00      	cmp	r2, #0
 801e91c:	d1be      	bne.n	801e89c <_strtod_l+0x2c>
 801e91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e920:	931d      	str	r3, [sp, #116]	@ 0x74
 801e922:	2300      	movs	r3, #0
 801e924:	9312      	str	r3, [sp, #72]	@ 0x48
 801e926:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d1df      	bne.n	801e8ec <_strtod_l+0x7c>
 801e92c:	0030      	movs	r0, r6
 801e92e:	0039      	movs	r1, r7
 801e930:	e7e6      	b.n	801e900 <_strtod_l+0x90>
 801e932:	2200      	movs	r2, #0
 801e934:	e7ed      	b.n	801e912 <_strtod_l+0xa2>
 801e936:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e938:	2a00      	cmp	r2, #0
 801e93a:	d007      	beq.n	801e94c <_strtod_l+0xdc>
 801e93c:	2135      	movs	r1, #53	@ 0x35
 801e93e:	a820      	add	r0, sp, #128	@ 0x80
 801e940:	f003 fd6c 	bl	802241c <__copybits>
 801e944:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e946:	9805      	ldr	r0, [sp, #20]
 801e948:	f003 f926 	bl	8021b98 <_Bfree>
 801e94c:	9806      	ldr	r0, [sp, #24]
 801e94e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e950:	3801      	subs	r0, #1
 801e952:	2804      	cmp	r0, #4
 801e954:	d806      	bhi.n	801e964 <_strtod_l+0xf4>
 801e956:	f7e1 fc11 	bl	800017c <__gnu_thumb1_case_uqi>
 801e95a:	0312      	.short	0x0312
 801e95c:	1e1c      	.short	0x1e1c
 801e95e:	12          	.byte	0x12
 801e95f:	00          	.byte	0x00
 801e960:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e962:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e964:	05e4      	lsls	r4, r4, #23
 801e966:	d502      	bpl.n	801e96e <_strtod_l+0xfe>
 801e968:	2380      	movs	r3, #128	@ 0x80
 801e96a:	061b      	lsls	r3, r3, #24
 801e96c:	431f      	orrs	r7, r3
 801e96e:	4b69      	ldr	r3, [pc, #420]	@ (801eb14 <_strtod_l+0x2a4>)
 801e970:	423b      	tst	r3, r7
 801e972:	d1b8      	bne.n	801e8e6 <_strtod_l+0x76>
 801e974:	f001 fd90 	bl	8020498 <__errno>
 801e978:	2322      	movs	r3, #34	@ 0x22
 801e97a:	6003      	str	r3, [r0, #0]
 801e97c:	e7b3      	b.n	801e8e6 <_strtod_l+0x76>
 801e97e:	4966      	ldr	r1, [pc, #408]	@ (801eb18 <_strtod_l+0x2a8>)
 801e980:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e982:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e984:	400a      	ands	r2, r1
 801e986:	4965      	ldr	r1, [pc, #404]	@ (801eb1c <_strtod_l+0x2ac>)
 801e988:	185b      	adds	r3, r3, r1
 801e98a:	051b      	lsls	r3, r3, #20
 801e98c:	431a      	orrs	r2, r3
 801e98e:	0017      	movs	r7, r2
 801e990:	e7e8      	b.n	801e964 <_strtod_l+0xf4>
 801e992:	4f60      	ldr	r7, [pc, #384]	@ (801eb14 <_strtod_l+0x2a4>)
 801e994:	e7e6      	b.n	801e964 <_strtod_l+0xf4>
 801e996:	2601      	movs	r6, #1
 801e998:	4f61      	ldr	r7, [pc, #388]	@ (801eb20 <_strtod_l+0x2b0>)
 801e99a:	4276      	negs	r6, r6
 801e99c:	e7e2      	b.n	801e964 <_strtod_l+0xf4>
 801e99e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9a0:	1c5a      	adds	r2, r3, #1
 801e9a2:	921d      	str	r2, [sp, #116]	@ 0x74
 801e9a4:	785b      	ldrb	r3, [r3, #1]
 801e9a6:	2b30      	cmp	r3, #48	@ 0x30
 801e9a8:	d0f9      	beq.n	801e99e <_strtod_l+0x12e>
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d09b      	beq.n	801e8e6 <_strtod_l+0x76>
 801e9ae:	2301      	movs	r3, #1
 801e9b0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e9b2:	2500      	movs	r5, #0
 801e9b4:	220a      	movs	r2, #10
 801e9b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9b8:	950d      	str	r5, [sp, #52]	@ 0x34
 801e9ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e9bc:	9508      	str	r5, [sp, #32]
 801e9be:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e9c0:	7804      	ldrb	r4, [r0, #0]
 801e9c2:	0023      	movs	r3, r4
 801e9c4:	3b30      	subs	r3, #48	@ 0x30
 801e9c6:	b2d9      	uxtb	r1, r3
 801e9c8:	2909      	cmp	r1, #9
 801e9ca:	d927      	bls.n	801ea1c <_strtod_l+0x1ac>
 801e9cc:	2201      	movs	r2, #1
 801e9ce:	4955      	ldr	r1, [pc, #340]	@ (801eb24 <_strtod_l+0x2b4>)
 801e9d0:	f001 fcd4 	bl	802037c <strncmp>
 801e9d4:	2800      	cmp	r0, #0
 801e9d6:	d031      	beq.n	801ea3c <_strtod_l+0x1cc>
 801e9d8:	2000      	movs	r0, #0
 801e9da:	0023      	movs	r3, r4
 801e9dc:	4684      	mov	ip, r0
 801e9de:	9a08      	ldr	r2, [sp, #32]
 801e9e0:	900e      	str	r0, [sp, #56]	@ 0x38
 801e9e2:	9206      	str	r2, [sp, #24]
 801e9e4:	2220      	movs	r2, #32
 801e9e6:	0019      	movs	r1, r3
 801e9e8:	4391      	bics	r1, r2
 801e9ea:	000a      	movs	r2, r1
 801e9ec:	2100      	movs	r1, #0
 801e9ee:	9107      	str	r1, [sp, #28]
 801e9f0:	2a45      	cmp	r2, #69	@ 0x45
 801e9f2:	d000      	beq.n	801e9f6 <_strtod_l+0x186>
 801e9f4:	e0c0      	b.n	801eb78 <_strtod_l+0x308>
 801e9f6:	9b06      	ldr	r3, [sp, #24]
 801e9f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e9fa:	4303      	orrs	r3, r0
 801e9fc:	4313      	orrs	r3, r2
 801e9fe:	428b      	cmp	r3, r1
 801ea00:	d08d      	beq.n	801e91e <_strtod_l+0xae>
 801ea02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea04:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea06:	3301      	adds	r3, #1
 801ea08:	931d      	str	r3, [sp, #116]	@ 0x74
 801ea0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea0c:	785b      	ldrb	r3, [r3, #1]
 801ea0e:	2b2b      	cmp	r3, #43	@ 0x2b
 801ea10:	d070      	beq.n	801eaf4 <_strtod_l+0x284>
 801ea12:	000c      	movs	r4, r1
 801ea14:	2b2d      	cmp	r3, #45	@ 0x2d
 801ea16:	d173      	bne.n	801eb00 <_strtod_l+0x290>
 801ea18:	2401      	movs	r4, #1
 801ea1a:	e06c      	b.n	801eaf6 <_strtod_l+0x286>
 801ea1c:	9908      	ldr	r1, [sp, #32]
 801ea1e:	2908      	cmp	r1, #8
 801ea20:	dc09      	bgt.n	801ea36 <_strtod_l+0x1c6>
 801ea22:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ea24:	4351      	muls	r1, r2
 801ea26:	185b      	adds	r3, r3, r1
 801ea28:	930d      	str	r3, [sp, #52]	@ 0x34
 801ea2a:	9b08      	ldr	r3, [sp, #32]
 801ea2c:	3001      	adds	r0, #1
 801ea2e:	3301      	adds	r3, #1
 801ea30:	9308      	str	r3, [sp, #32]
 801ea32:	901d      	str	r0, [sp, #116]	@ 0x74
 801ea34:	e7c3      	b.n	801e9be <_strtod_l+0x14e>
 801ea36:	4355      	muls	r5, r2
 801ea38:	195d      	adds	r5, r3, r5
 801ea3a:	e7f6      	b.n	801ea2a <_strtod_l+0x1ba>
 801ea3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea3e:	1c5a      	adds	r2, r3, #1
 801ea40:	921d      	str	r2, [sp, #116]	@ 0x74
 801ea42:	9a08      	ldr	r2, [sp, #32]
 801ea44:	785b      	ldrb	r3, [r3, #1]
 801ea46:	2a00      	cmp	r2, #0
 801ea48:	d03a      	beq.n	801eac0 <_strtod_l+0x250>
 801ea4a:	900e      	str	r0, [sp, #56]	@ 0x38
 801ea4c:	9206      	str	r2, [sp, #24]
 801ea4e:	001a      	movs	r2, r3
 801ea50:	3a30      	subs	r2, #48	@ 0x30
 801ea52:	2a09      	cmp	r2, #9
 801ea54:	d912      	bls.n	801ea7c <_strtod_l+0x20c>
 801ea56:	2201      	movs	r2, #1
 801ea58:	4694      	mov	ip, r2
 801ea5a:	e7c3      	b.n	801e9e4 <_strtod_l+0x174>
 801ea5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea5e:	3001      	adds	r0, #1
 801ea60:	1c5a      	adds	r2, r3, #1
 801ea62:	921d      	str	r2, [sp, #116]	@ 0x74
 801ea64:	785b      	ldrb	r3, [r3, #1]
 801ea66:	2b30      	cmp	r3, #48	@ 0x30
 801ea68:	d0f8      	beq.n	801ea5c <_strtod_l+0x1ec>
 801ea6a:	001a      	movs	r2, r3
 801ea6c:	3a31      	subs	r2, #49	@ 0x31
 801ea6e:	2a08      	cmp	r2, #8
 801ea70:	d83b      	bhi.n	801eaea <_strtod_l+0x27a>
 801ea72:	900e      	str	r0, [sp, #56]	@ 0x38
 801ea74:	2000      	movs	r0, #0
 801ea76:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ea78:	9006      	str	r0, [sp, #24]
 801ea7a:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ea7c:	001a      	movs	r2, r3
 801ea7e:	1c41      	adds	r1, r0, #1
 801ea80:	3a30      	subs	r2, #48	@ 0x30
 801ea82:	2b30      	cmp	r3, #48	@ 0x30
 801ea84:	d016      	beq.n	801eab4 <_strtod_l+0x244>
 801ea86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea88:	185b      	adds	r3, r3, r1
 801ea8a:	930e      	str	r3, [sp, #56]	@ 0x38
 801ea8c:	9b06      	ldr	r3, [sp, #24]
 801ea8e:	210a      	movs	r1, #10
 801ea90:	469c      	mov	ip, r3
 801ea92:	4484      	add	ip, r0
 801ea94:	459c      	cmp	ip, r3
 801ea96:	d115      	bne.n	801eac4 <_strtod_l+0x254>
 801ea98:	9906      	ldr	r1, [sp, #24]
 801ea9a:	9b06      	ldr	r3, [sp, #24]
 801ea9c:	3101      	adds	r1, #1
 801ea9e:	1809      	adds	r1, r1, r0
 801eaa0:	181b      	adds	r3, r3, r0
 801eaa2:	9106      	str	r1, [sp, #24]
 801eaa4:	2b08      	cmp	r3, #8
 801eaa6:	dc19      	bgt.n	801eadc <_strtod_l+0x26c>
 801eaa8:	230a      	movs	r3, #10
 801eaaa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801eaac:	434b      	muls	r3, r1
 801eaae:	2100      	movs	r1, #0
 801eab0:	18d3      	adds	r3, r2, r3
 801eab2:	930d      	str	r3, [sp, #52]	@ 0x34
 801eab4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eab6:	0008      	movs	r0, r1
 801eab8:	1c5a      	adds	r2, r3, #1
 801eaba:	921d      	str	r2, [sp, #116]	@ 0x74
 801eabc:	785b      	ldrb	r3, [r3, #1]
 801eabe:	e7c6      	b.n	801ea4e <_strtod_l+0x1de>
 801eac0:	9808      	ldr	r0, [sp, #32]
 801eac2:	e7d0      	b.n	801ea66 <_strtod_l+0x1f6>
 801eac4:	1c5c      	adds	r4, r3, #1
 801eac6:	2b08      	cmp	r3, #8
 801eac8:	dc04      	bgt.n	801ead4 <_strtod_l+0x264>
 801eaca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eacc:	434b      	muls	r3, r1
 801eace:	930d      	str	r3, [sp, #52]	@ 0x34
 801ead0:	0023      	movs	r3, r4
 801ead2:	e7df      	b.n	801ea94 <_strtod_l+0x224>
 801ead4:	2c10      	cmp	r4, #16
 801ead6:	dcfb      	bgt.n	801ead0 <_strtod_l+0x260>
 801ead8:	434d      	muls	r5, r1
 801eada:	e7f9      	b.n	801ead0 <_strtod_l+0x260>
 801eadc:	2100      	movs	r1, #0
 801eade:	2b0f      	cmp	r3, #15
 801eae0:	dce8      	bgt.n	801eab4 <_strtod_l+0x244>
 801eae2:	230a      	movs	r3, #10
 801eae4:	435d      	muls	r5, r3
 801eae6:	1955      	adds	r5, r2, r5
 801eae8:	e7e4      	b.n	801eab4 <_strtod_l+0x244>
 801eaea:	2200      	movs	r2, #0
 801eaec:	920e      	str	r2, [sp, #56]	@ 0x38
 801eaee:	9206      	str	r2, [sp, #24]
 801eaf0:	3201      	adds	r2, #1
 801eaf2:	e7b1      	b.n	801ea58 <_strtod_l+0x1e8>
 801eaf4:	2400      	movs	r4, #0
 801eaf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eaf8:	3302      	adds	r3, #2
 801eafa:	931d      	str	r3, [sp, #116]	@ 0x74
 801eafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eafe:	789b      	ldrb	r3, [r3, #2]
 801eb00:	001a      	movs	r2, r3
 801eb02:	3a30      	subs	r2, #48	@ 0x30
 801eb04:	2a09      	cmp	r2, #9
 801eb06:	d913      	bls.n	801eb30 <_strtod_l+0x2c0>
 801eb08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eb0a:	921d      	str	r2, [sp, #116]	@ 0x74
 801eb0c:	2200      	movs	r2, #0
 801eb0e:	e032      	b.n	801eb76 <_strtod_l+0x306>
 801eb10:	08025d68 	.word	0x08025d68
 801eb14:	7ff00000 	.word	0x7ff00000
 801eb18:	ffefffff 	.word	0xffefffff
 801eb1c:	00000433 	.word	0x00000433
 801eb20:	7fffffff 	.word	0x7fffffff
 801eb24:	08025d50 	.word	0x08025d50
 801eb28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eb2a:	1c5a      	adds	r2, r3, #1
 801eb2c:	921d      	str	r2, [sp, #116]	@ 0x74
 801eb2e:	785b      	ldrb	r3, [r3, #1]
 801eb30:	2b30      	cmp	r3, #48	@ 0x30
 801eb32:	d0f9      	beq.n	801eb28 <_strtod_l+0x2b8>
 801eb34:	2200      	movs	r2, #0
 801eb36:	9207      	str	r2, [sp, #28]
 801eb38:	001a      	movs	r2, r3
 801eb3a:	3a31      	subs	r2, #49	@ 0x31
 801eb3c:	2a08      	cmp	r2, #8
 801eb3e:	d81b      	bhi.n	801eb78 <_strtod_l+0x308>
 801eb40:	3b30      	subs	r3, #48	@ 0x30
 801eb42:	9310      	str	r3, [sp, #64]	@ 0x40
 801eb44:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eb46:	9307      	str	r3, [sp, #28]
 801eb48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eb4a:	1c59      	adds	r1, r3, #1
 801eb4c:	911d      	str	r1, [sp, #116]	@ 0x74
 801eb4e:	785b      	ldrb	r3, [r3, #1]
 801eb50:	001a      	movs	r2, r3
 801eb52:	3a30      	subs	r2, #48	@ 0x30
 801eb54:	2a09      	cmp	r2, #9
 801eb56:	d93a      	bls.n	801ebce <_strtod_l+0x35e>
 801eb58:	9a07      	ldr	r2, [sp, #28]
 801eb5a:	1a8a      	subs	r2, r1, r2
 801eb5c:	49b4      	ldr	r1, [pc, #720]	@ (801ee30 <_strtod_l+0x5c0>)
 801eb5e:	9107      	str	r1, [sp, #28]
 801eb60:	2a08      	cmp	r2, #8
 801eb62:	dc04      	bgt.n	801eb6e <_strtod_l+0x2fe>
 801eb64:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eb66:	9207      	str	r2, [sp, #28]
 801eb68:	428a      	cmp	r2, r1
 801eb6a:	dd00      	ble.n	801eb6e <_strtod_l+0x2fe>
 801eb6c:	9107      	str	r1, [sp, #28]
 801eb6e:	2c00      	cmp	r4, #0
 801eb70:	d002      	beq.n	801eb78 <_strtod_l+0x308>
 801eb72:	9a07      	ldr	r2, [sp, #28]
 801eb74:	4252      	negs	r2, r2
 801eb76:	9207      	str	r2, [sp, #28]
 801eb78:	9a06      	ldr	r2, [sp, #24]
 801eb7a:	2a00      	cmp	r2, #0
 801eb7c:	d14d      	bne.n	801ec1a <_strtod_l+0x3aa>
 801eb7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb80:	4310      	orrs	r0, r2
 801eb82:	d000      	beq.n	801eb86 <_strtod_l+0x316>
 801eb84:	e6af      	b.n	801e8e6 <_strtod_l+0x76>
 801eb86:	4662      	mov	r2, ip
 801eb88:	2a00      	cmp	r2, #0
 801eb8a:	d000      	beq.n	801eb8e <_strtod_l+0x31e>
 801eb8c:	e6c7      	b.n	801e91e <_strtod_l+0xae>
 801eb8e:	2b69      	cmp	r3, #105	@ 0x69
 801eb90:	d027      	beq.n	801ebe2 <_strtod_l+0x372>
 801eb92:	dc23      	bgt.n	801ebdc <_strtod_l+0x36c>
 801eb94:	2b49      	cmp	r3, #73	@ 0x49
 801eb96:	d024      	beq.n	801ebe2 <_strtod_l+0x372>
 801eb98:	2b4e      	cmp	r3, #78	@ 0x4e
 801eb9a:	d000      	beq.n	801eb9e <_strtod_l+0x32e>
 801eb9c:	e6bf      	b.n	801e91e <_strtod_l+0xae>
 801eb9e:	49a5      	ldr	r1, [pc, #660]	@ (801ee34 <_strtod_l+0x5c4>)
 801eba0:	a81d      	add	r0, sp, #116	@ 0x74
 801eba2:	f002 fe2b 	bl	80217fc <__match>
 801eba6:	2800      	cmp	r0, #0
 801eba8:	d100      	bne.n	801ebac <_strtod_l+0x33c>
 801ebaa:	e6b8      	b.n	801e91e <_strtod_l+0xae>
 801ebac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ebae:	781b      	ldrb	r3, [r3, #0]
 801ebb0:	2b28      	cmp	r3, #40	@ 0x28
 801ebb2:	d12c      	bne.n	801ec0e <_strtod_l+0x39e>
 801ebb4:	49a0      	ldr	r1, [pc, #640]	@ (801ee38 <_strtod_l+0x5c8>)
 801ebb6:	aa20      	add	r2, sp, #128	@ 0x80
 801ebb8:	a81d      	add	r0, sp, #116	@ 0x74
 801ebba:	f002 fe33 	bl	8021824 <__hexnan>
 801ebbe:	2805      	cmp	r0, #5
 801ebc0:	d125      	bne.n	801ec0e <_strtod_l+0x39e>
 801ebc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ebc4:	4a9d      	ldr	r2, [pc, #628]	@ (801ee3c <_strtod_l+0x5cc>)
 801ebc6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ebc8:	431a      	orrs	r2, r3
 801ebca:	0017      	movs	r7, r2
 801ebcc:	e68b      	b.n	801e8e6 <_strtod_l+0x76>
 801ebce:	220a      	movs	r2, #10
 801ebd0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ebd2:	434a      	muls	r2, r1
 801ebd4:	18d2      	adds	r2, r2, r3
 801ebd6:	3a30      	subs	r2, #48	@ 0x30
 801ebd8:	9210      	str	r2, [sp, #64]	@ 0x40
 801ebda:	e7b5      	b.n	801eb48 <_strtod_l+0x2d8>
 801ebdc:	2b6e      	cmp	r3, #110	@ 0x6e
 801ebde:	d0de      	beq.n	801eb9e <_strtod_l+0x32e>
 801ebe0:	e69d      	b.n	801e91e <_strtod_l+0xae>
 801ebe2:	4997      	ldr	r1, [pc, #604]	@ (801ee40 <_strtod_l+0x5d0>)
 801ebe4:	a81d      	add	r0, sp, #116	@ 0x74
 801ebe6:	f002 fe09 	bl	80217fc <__match>
 801ebea:	2800      	cmp	r0, #0
 801ebec:	d100      	bne.n	801ebf0 <_strtod_l+0x380>
 801ebee:	e696      	b.n	801e91e <_strtod_l+0xae>
 801ebf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ebf2:	4994      	ldr	r1, [pc, #592]	@ (801ee44 <_strtod_l+0x5d4>)
 801ebf4:	3b01      	subs	r3, #1
 801ebf6:	a81d      	add	r0, sp, #116	@ 0x74
 801ebf8:	931d      	str	r3, [sp, #116]	@ 0x74
 801ebfa:	f002 fdff 	bl	80217fc <__match>
 801ebfe:	2800      	cmp	r0, #0
 801ec00:	d102      	bne.n	801ec08 <_strtod_l+0x398>
 801ec02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec04:	3301      	adds	r3, #1
 801ec06:	931d      	str	r3, [sp, #116]	@ 0x74
 801ec08:	2600      	movs	r6, #0
 801ec0a:	4f8c      	ldr	r7, [pc, #560]	@ (801ee3c <_strtod_l+0x5cc>)
 801ec0c:	e66b      	b.n	801e8e6 <_strtod_l+0x76>
 801ec0e:	488e      	ldr	r0, [pc, #568]	@ (801ee48 <_strtod_l+0x5d8>)
 801ec10:	f001 fc84 	bl	802051c <nan>
 801ec14:	0006      	movs	r6, r0
 801ec16:	000f      	movs	r7, r1
 801ec18:	e665      	b.n	801e8e6 <_strtod_l+0x76>
 801ec1a:	9b07      	ldr	r3, [sp, #28]
 801ec1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec1e:	1a9b      	subs	r3, r3, r2
 801ec20:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec22:	9b08      	ldr	r3, [sp, #32]
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d101      	bne.n	801ec2c <_strtod_l+0x3bc>
 801ec28:	9b06      	ldr	r3, [sp, #24]
 801ec2a:	9308      	str	r3, [sp, #32]
 801ec2c:	9c06      	ldr	r4, [sp, #24]
 801ec2e:	2c10      	cmp	r4, #16
 801ec30:	dd00      	ble.n	801ec34 <_strtod_l+0x3c4>
 801ec32:	2410      	movs	r4, #16
 801ec34:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ec36:	f7e4 fbf1 	bl	800341c <__aeabi_ui2d>
 801ec3a:	9b06      	ldr	r3, [sp, #24]
 801ec3c:	0006      	movs	r6, r0
 801ec3e:	000f      	movs	r7, r1
 801ec40:	2b09      	cmp	r3, #9
 801ec42:	dc13      	bgt.n	801ec6c <_strtod_l+0x3fc>
 801ec44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	d100      	bne.n	801ec4c <_strtod_l+0x3dc>
 801ec4a:	e64c      	b.n	801e8e6 <_strtod_l+0x76>
 801ec4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	dc00      	bgt.n	801ec54 <_strtod_l+0x3e4>
 801ec52:	e07e      	b.n	801ed52 <_strtod_l+0x4e2>
 801ec54:	2b16      	cmp	r3, #22
 801ec56:	dc63      	bgt.n	801ed20 <_strtod_l+0x4b0>
 801ec58:	497c      	ldr	r1, [pc, #496]	@ (801ee4c <_strtod_l+0x5dc>)
 801ec5a:	00db      	lsls	r3, r3, #3
 801ec5c:	18c9      	adds	r1, r1, r3
 801ec5e:	0032      	movs	r2, r6
 801ec60:	6808      	ldr	r0, [r1, #0]
 801ec62:	6849      	ldr	r1, [r1, #4]
 801ec64:	003b      	movs	r3, r7
 801ec66:	f7e3 fce9 	bl	800263c <__aeabi_dmul>
 801ec6a:	e7d3      	b.n	801ec14 <_strtod_l+0x3a4>
 801ec6c:	0022      	movs	r2, r4
 801ec6e:	4b77      	ldr	r3, [pc, #476]	@ (801ee4c <_strtod_l+0x5dc>)
 801ec70:	3a09      	subs	r2, #9
 801ec72:	00d2      	lsls	r2, r2, #3
 801ec74:	189b      	adds	r3, r3, r2
 801ec76:	681a      	ldr	r2, [r3, #0]
 801ec78:	685b      	ldr	r3, [r3, #4]
 801ec7a:	f7e3 fcdf 	bl	800263c <__aeabi_dmul>
 801ec7e:	0006      	movs	r6, r0
 801ec80:	0028      	movs	r0, r5
 801ec82:	000f      	movs	r7, r1
 801ec84:	f7e4 fbca 	bl	800341c <__aeabi_ui2d>
 801ec88:	000b      	movs	r3, r1
 801ec8a:	0002      	movs	r2, r0
 801ec8c:	0039      	movs	r1, r7
 801ec8e:	0030      	movs	r0, r6
 801ec90:	f7e2 fd2c 	bl	80016ec <__aeabi_dadd>
 801ec94:	9b06      	ldr	r3, [sp, #24]
 801ec96:	0006      	movs	r6, r0
 801ec98:	000f      	movs	r7, r1
 801ec9a:	2b0f      	cmp	r3, #15
 801ec9c:	ddd2      	ble.n	801ec44 <_strtod_l+0x3d4>
 801ec9e:	9b06      	ldr	r3, [sp, #24]
 801eca0:	1b1c      	subs	r4, r3, r4
 801eca2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eca4:	18e4      	adds	r4, r4, r3
 801eca6:	2c00      	cmp	r4, #0
 801eca8:	dc00      	bgt.n	801ecac <_strtod_l+0x43c>
 801ecaa:	e09b      	b.n	801ede4 <_strtod_l+0x574>
 801ecac:	220f      	movs	r2, #15
 801ecae:	0023      	movs	r3, r4
 801ecb0:	4013      	ands	r3, r2
 801ecb2:	4214      	tst	r4, r2
 801ecb4:	d00a      	beq.n	801eccc <_strtod_l+0x45c>
 801ecb6:	4965      	ldr	r1, [pc, #404]	@ (801ee4c <_strtod_l+0x5dc>)
 801ecb8:	00db      	lsls	r3, r3, #3
 801ecba:	18c9      	adds	r1, r1, r3
 801ecbc:	0032      	movs	r2, r6
 801ecbe:	6808      	ldr	r0, [r1, #0]
 801ecc0:	6849      	ldr	r1, [r1, #4]
 801ecc2:	003b      	movs	r3, r7
 801ecc4:	f7e3 fcba 	bl	800263c <__aeabi_dmul>
 801ecc8:	0006      	movs	r6, r0
 801ecca:	000f      	movs	r7, r1
 801eccc:	230f      	movs	r3, #15
 801ecce:	439c      	bics	r4, r3
 801ecd0:	d073      	beq.n	801edba <_strtod_l+0x54a>
 801ecd2:	3326      	adds	r3, #38	@ 0x26
 801ecd4:	33ff      	adds	r3, #255	@ 0xff
 801ecd6:	429c      	cmp	r4, r3
 801ecd8:	dd4b      	ble.n	801ed72 <_strtod_l+0x502>
 801ecda:	2300      	movs	r3, #0
 801ecdc:	9306      	str	r3, [sp, #24]
 801ecde:	9307      	str	r3, [sp, #28]
 801ece0:	930d      	str	r3, [sp, #52]	@ 0x34
 801ece2:	9308      	str	r3, [sp, #32]
 801ece4:	2322      	movs	r3, #34	@ 0x22
 801ece6:	2600      	movs	r6, #0
 801ece8:	9a05      	ldr	r2, [sp, #20]
 801ecea:	4f54      	ldr	r7, [pc, #336]	@ (801ee3c <_strtod_l+0x5cc>)
 801ecec:	6013      	str	r3, [r2, #0]
 801ecee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ecf0:	42b3      	cmp	r3, r6
 801ecf2:	d100      	bne.n	801ecf6 <_strtod_l+0x486>
 801ecf4:	e5f7      	b.n	801e8e6 <_strtod_l+0x76>
 801ecf6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ecf8:	9805      	ldr	r0, [sp, #20]
 801ecfa:	f002 ff4d 	bl	8021b98 <_Bfree>
 801ecfe:	9908      	ldr	r1, [sp, #32]
 801ed00:	9805      	ldr	r0, [sp, #20]
 801ed02:	f002 ff49 	bl	8021b98 <_Bfree>
 801ed06:	9907      	ldr	r1, [sp, #28]
 801ed08:	9805      	ldr	r0, [sp, #20]
 801ed0a:	f002 ff45 	bl	8021b98 <_Bfree>
 801ed0e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ed10:	9805      	ldr	r0, [sp, #20]
 801ed12:	f002 ff41 	bl	8021b98 <_Bfree>
 801ed16:	9906      	ldr	r1, [sp, #24]
 801ed18:	9805      	ldr	r0, [sp, #20]
 801ed1a:	f002 ff3d 	bl	8021b98 <_Bfree>
 801ed1e:	e5e2      	b.n	801e8e6 <_strtod_l+0x76>
 801ed20:	2325      	movs	r3, #37	@ 0x25
 801ed22:	9a06      	ldr	r2, [sp, #24]
 801ed24:	1a9b      	subs	r3, r3, r2
 801ed26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ed28:	4293      	cmp	r3, r2
 801ed2a:	dbb8      	blt.n	801ec9e <_strtod_l+0x42e>
 801ed2c:	240f      	movs	r4, #15
 801ed2e:	9b06      	ldr	r3, [sp, #24]
 801ed30:	4d46      	ldr	r5, [pc, #280]	@ (801ee4c <_strtod_l+0x5dc>)
 801ed32:	1ae4      	subs	r4, r4, r3
 801ed34:	00e1      	lsls	r1, r4, #3
 801ed36:	1869      	adds	r1, r5, r1
 801ed38:	0032      	movs	r2, r6
 801ed3a:	6808      	ldr	r0, [r1, #0]
 801ed3c:	6849      	ldr	r1, [r1, #4]
 801ed3e:	003b      	movs	r3, r7
 801ed40:	f7e3 fc7c 	bl	800263c <__aeabi_dmul>
 801ed44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed46:	1b1c      	subs	r4, r3, r4
 801ed48:	00e4      	lsls	r4, r4, #3
 801ed4a:	192d      	adds	r5, r5, r4
 801ed4c:	682a      	ldr	r2, [r5, #0]
 801ed4e:	686b      	ldr	r3, [r5, #4]
 801ed50:	e789      	b.n	801ec66 <_strtod_l+0x3f6>
 801ed52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed54:	3316      	adds	r3, #22
 801ed56:	dba2      	blt.n	801ec9e <_strtod_l+0x42e>
 801ed58:	9907      	ldr	r1, [sp, #28]
 801ed5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed5c:	4b3b      	ldr	r3, [pc, #236]	@ (801ee4c <_strtod_l+0x5dc>)
 801ed5e:	1a52      	subs	r2, r2, r1
 801ed60:	00d2      	lsls	r2, r2, #3
 801ed62:	189b      	adds	r3, r3, r2
 801ed64:	0030      	movs	r0, r6
 801ed66:	681a      	ldr	r2, [r3, #0]
 801ed68:	685b      	ldr	r3, [r3, #4]
 801ed6a:	0039      	movs	r1, r7
 801ed6c:	f7e3 f822 	bl	8001db4 <__aeabi_ddiv>
 801ed70:	e750      	b.n	801ec14 <_strtod_l+0x3a4>
 801ed72:	2300      	movs	r3, #0
 801ed74:	0030      	movs	r0, r6
 801ed76:	0039      	movs	r1, r7
 801ed78:	4d35      	ldr	r5, [pc, #212]	@ (801ee50 <_strtod_l+0x5e0>)
 801ed7a:	1124      	asrs	r4, r4, #4
 801ed7c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed7e:	2c01      	cmp	r4, #1
 801ed80:	dc1e      	bgt.n	801edc0 <_strtod_l+0x550>
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	d001      	beq.n	801ed8a <_strtod_l+0x51a>
 801ed86:	0006      	movs	r6, r0
 801ed88:	000f      	movs	r7, r1
 801ed8a:	4b32      	ldr	r3, [pc, #200]	@ (801ee54 <_strtod_l+0x5e4>)
 801ed8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ed8e:	18ff      	adds	r7, r7, r3
 801ed90:	4b2f      	ldr	r3, [pc, #188]	@ (801ee50 <_strtod_l+0x5e0>)
 801ed92:	00d5      	lsls	r5, r2, #3
 801ed94:	195d      	adds	r5, r3, r5
 801ed96:	0032      	movs	r2, r6
 801ed98:	6828      	ldr	r0, [r5, #0]
 801ed9a:	6869      	ldr	r1, [r5, #4]
 801ed9c:	003b      	movs	r3, r7
 801ed9e:	f7e3 fc4d 	bl	800263c <__aeabi_dmul>
 801eda2:	4b26      	ldr	r3, [pc, #152]	@ (801ee3c <_strtod_l+0x5cc>)
 801eda4:	4a2c      	ldr	r2, [pc, #176]	@ (801ee58 <_strtod_l+0x5e8>)
 801eda6:	0006      	movs	r6, r0
 801eda8:	400b      	ands	r3, r1
 801edaa:	4293      	cmp	r3, r2
 801edac:	d895      	bhi.n	801ecda <_strtod_l+0x46a>
 801edae:	4a2b      	ldr	r2, [pc, #172]	@ (801ee5c <_strtod_l+0x5ec>)
 801edb0:	4293      	cmp	r3, r2
 801edb2:	d913      	bls.n	801eddc <_strtod_l+0x56c>
 801edb4:	2601      	movs	r6, #1
 801edb6:	4f2a      	ldr	r7, [pc, #168]	@ (801ee60 <_strtod_l+0x5f0>)
 801edb8:	4276      	negs	r6, r6
 801edba:	2300      	movs	r3, #0
 801edbc:	9309      	str	r3, [sp, #36]	@ 0x24
 801edbe:	e086      	b.n	801eece <_strtod_l+0x65e>
 801edc0:	2201      	movs	r2, #1
 801edc2:	4214      	tst	r4, r2
 801edc4:	d004      	beq.n	801edd0 <_strtod_l+0x560>
 801edc6:	682a      	ldr	r2, [r5, #0]
 801edc8:	686b      	ldr	r3, [r5, #4]
 801edca:	f7e3 fc37 	bl	800263c <__aeabi_dmul>
 801edce:	2301      	movs	r3, #1
 801edd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801edd2:	1064      	asrs	r4, r4, #1
 801edd4:	3201      	adds	r2, #1
 801edd6:	9209      	str	r2, [sp, #36]	@ 0x24
 801edd8:	3508      	adds	r5, #8
 801edda:	e7d0      	b.n	801ed7e <_strtod_l+0x50e>
 801eddc:	23d4      	movs	r3, #212	@ 0xd4
 801edde:	049b      	lsls	r3, r3, #18
 801ede0:	18cf      	adds	r7, r1, r3
 801ede2:	e7ea      	b.n	801edba <_strtod_l+0x54a>
 801ede4:	2c00      	cmp	r4, #0
 801ede6:	d0e8      	beq.n	801edba <_strtod_l+0x54a>
 801ede8:	4264      	negs	r4, r4
 801edea:	230f      	movs	r3, #15
 801edec:	0022      	movs	r2, r4
 801edee:	401a      	ands	r2, r3
 801edf0:	421c      	tst	r4, r3
 801edf2:	d00a      	beq.n	801ee0a <_strtod_l+0x59a>
 801edf4:	4b15      	ldr	r3, [pc, #84]	@ (801ee4c <_strtod_l+0x5dc>)
 801edf6:	00d2      	lsls	r2, r2, #3
 801edf8:	189b      	adds	r3, r3, r2
 801edfa:	0030      	movs	r0, r6
 801edfc:	681a      	ldr	r2, [r3, #0]
 801edfe:	685b      	ldr	r3, [r3, #4]
 801ee00:	0039      	movs	r1, r7
 801ee02:	f7e2 ffd7 	bl	8001db4 <__aeabi_ddiv>
 801ee06:	0006      	movs	r6, r0
 801ee08:	000f      	movs	r7, r1
 801ee0a:	1124      	asrs	r4, r4, #4
 801ee0c:	d0d5      	beq.n	801edba <_strtod_l+0x54a>
 801ee0e:	2c1f      	cmp	r4, #31
 801ee10:	dd28      	ble.n	801ee64 <_strtod_l+0x5f4>
 801ee12:	2300      	movs	r3, #0
 801ee14:	9306      	str	r3, [sp, #24]
 801ee16:	9307      	str	r3, [sp, #28]
 801ee18:	930d      	str	r3, [sp, #52]	@ 0x34
 801ee1a:	9308      	str	r3, [sp, #32]
 801ee1c:	2322      	movs	r3, #34	@ 0x22
 801ee1e:	9a05      	ldr	r2, [sp, #20]
 801ee20:	2600      	movs	r6, #0
 801ee22:	6013      	str	r3, [r2, #0]
 801ee24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ee26:	2700      	movs	r7, #0
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d000      	beq.n	801ee2e <_strtod_l+0x5be>
 801ee2c:	e763      	b.n	801ecf6 <_strtod_l+0x486>
 801ee2e:	e55a      	b.n	801e8e6 <_strtod_l+0x76>
 801ee30:	00004e1f 	.word	0x00004e1f
 801ee34:	08025eb6 	.word	0x08025eb6
 801ee38:	08025d54 	.word	0x08025d54
 801ee3c:	7ff00000 	.word	0x7ff00000
 801ee40:	08025eae 	.word	0x08025eae
 801ee44:	08025ee8 	.word	0x08025ee8
 801ee48:	08026174 	.word	0x08026174
 801ee4c:	08026060 	.word	0x08026060
 801ee50:	08026038 	.word	0x08026038
 801ee54:	fcb00000 	.word	0xfcb00000
 801ee58:	7ca00000 	.word	0x7ca00000
 801ee5c:	7c900000 	.word	0x7c900000
 801ee60:	7fefffff 	.word	0x7fefffff
 801ee64:	2310      	movs	r3, #16
 801ee66:	0022      	movs	r2, r4
 801ee68:	401a      	ands	r2, r3
 801ee6a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ee6c:	421c      	tst	r4, r3
 801ee6e:	d001      	beq.n	801ee74 <_strtod_l+0x604>
 801ee70:	335a      	adds	r3, #90	@ 0x5a
 801ee72:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee74:	0030      	movs	r0, r6
 801ee76:	0039      	movs	r1, r7
 801ee78:	2300      	movs	r3, #0
 801ee7a:	4dbf      	ldr	r5, [pc, #764]	@ (801f178 <_strtod_l+0x908>)
 801ee7c:	2201      	movs	r2, #1
 801ee7e:	4214      	tst	r4, r2
 801ee80:	d004      	beq.n	801ee8c <_strtod_l+0x61c>
 801ee82:	682a      	ldr	r2, [r5, #0]
 801ee84:	686b      	ldr	r3, [r5, #4]
 801ee86:	f7e3 fbd9 	bl	800263c <__aeabi_dmul>
 801ee8a:	2301      	movs	r3, #1
 801ee8c:	1064      	asrs	r4, r4, #1
 801ee8e:	3508      	adds	r5, #8
 801ee90:	2c00      	cmp	r4, #0
 801ee92:	d1f3      	bne.n	801ee7c <_strtod_l+0x60c>
 801ee94:	2b00      	cmp	r3, #0
 801ee96:	d001      	beq.n	801ee9c <_strtod_l+0x62c>
 801ee98:	0006      	movs	r6, r0
 801ee9a:	000f      	movs	r7, r1
 801ee9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	d00d      	beq.n	801eebe <_strtod_l+0x64e>
 801eea2:	236b      	movs	r3, #107	@ 0x6b
 801eea4:	007a      	lsls	r2, r7, #1
 801eea6:	0d52      	lsrs	r2, r2, #21
 801eea8:	0039      	movs	r1, r7
 801eeaa:	1a9b      	subs	r3, r3, r2
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	dd06      	ble.n	801eebe <_strtod_l+0x64e>
 801eeb0:	2b1f      	cmp	r3, #31
 801eeb2:	dd5a      	ble.n	801ef6a <_strtod_l+0x6fa>
 801eeb4:	2600      	movs	r6, #0
 801eeb6:	2b34      	cmp	r3, #52	@ 0x34
 801eeb8:	dd50      	ble.n	801ef5c <_strtod_l+0x6ec>
 801eeba:	27dc      	movs	r7, #220	@ 0xdc
 801eebc:	04bf      	lsls	r7, r7, #18
 801eebe:	2200      	movs	r2, #0
 801eec0:	2300      	movs	r3, #0
 801eec2:	0030      	movs	r0, r6
 801eec4:	0039      	movs	r1, r7
 801eec6:	f7e1 faf3 	bl	80004b0 <__aeabi_dcmpeq>
 801eeca:	2800      	cmp	r0, #0
 801eecc:	d1a1      	bne.n	801ee12 <_strtod_l+0x5a2>
 801eece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eed0:	9a08      	ldr	r2, [sp, #32]
 801eed2:	9300      	str	r3, [sp, #0]
 801eed4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eed6:	9b06      	ldr	r3, [sp, #24]
 801eed8:	9805      	ldr	r0, [sp, #20]
 801eeda:	f002 fec5 	bl	8021c68 <__s2b>
 801eede:	900d      	str	r0, [sp, #52]	@ 0x34
 801eee0:	2800      	cmp	r0, #0
 801eee2:	d100      	bne.n	801eee6 <_strtod_l+0x676>
 801eee4:	e6f9      	b.n	801ecda <_strtod_l+0x46a>
 801eee6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eee8:	9907      	ldr	r1, [sp, #28]
 801eeea:	17da      	asrs	r2, r3, #31
 801eeec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eeee:	1a5b      	subs	r3, r3, r1
 801eef0:	401a      	ands	r2, r3
 801eef2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eef4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801eef6:	43db      	mvns	r3, r3
 801eef8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eefa:	17db      	asrs	r3, r3, #31
 801eefc:	401a      	ands	r2, r3
 801eefe:	2300      	movs	r3, #0
 801ef00:	921a      	str	r2, [sp, #104]	@ 0x68
 801ef02:	9306      	str	r3, [sp, #24]
 801ef04:	9307      	str	r3, [sp, #28]
 801ef06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef08:	9805      	ldr	r0, [sp, #20]
 801ef0a:	6859      	ldr	r1, [r3, #4]
 801ef0c:	f002 fe00 	bl	8021b10 <_Balloc>
 801ef10:	9008      	str	r0, [sp, #32]
 801ef12:	2800      	cmp	r0, #0
 801ef14:	d100      	bne.n	801ef18 <_strtod_l+0x6a8>
 801ef16:	e6e5      	b.n	801ece4 <_strtod_l+0x474>
 801ef18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef1a:	300c      	adds	r0, #12
 801ef1c:	0019      	movs	r1, r3
 801ef1e:	691a      	ldr	r2, [r3, #16]
 801ef20:	310c      	adds	r1, #12
 801ef22:	3202      	adds	r2, #2
 801ef24:	0092      	lsls	r2, r2, #2
 801ef26:	f001 faef 	bl	8020508 <memcpy>
 801ef2a:	ab20      	add	r3, sp, #128	@ 0x80
 801ef2c:	9301      	str	r3, [sp, #4]
 801ef2e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ef30:	9300      	str	r3, [sp, #0]
 801ef32:	0032      	movs	r2, r6
 801ef34:	003b      	movs	r3, r7
 801ef36:	9805      	ldr	r0, [sp, #20]
 801ef38:	9610      	str	r6, [sp, #64]	@ 0x40
 801ef3a:	9711      	str	r7, [sp, #68]	@ 0x44
 801ef3c:	f003 f9e4 	bl	8022308 <__d2b>
 801ef40:	901e      	str	r0, [sp, #120]	@ 0x78
 801ef42:	2800      	cmp	r0, #0
 801ef44:	d100      	bne.n	801ef48 <_strtod_l+0x6d8>
 801ef46:	e6cd      	b.n	801ece4 <_strtod_l+0x474>
 801ef48:	2101      	movs	r1, #1
 801ef4a:	9805      	ldr	r0, [sp, #20]
 801ef4c:	f002 ff28 	bl	8021da0 <__i2b>
 801ef50:	9007      	str	r0, [sp, #28]
 801ef52:	2800      	cmp	r0, #0
 801ef54:	d10e      	bne.n	801ef74 <_strtod_l+0x704>
 801ef56:	2300      	movs	r3, #0
 801ef58:	9307      	str	r3, [sp, #28]
 801ef5a:	e6c3      	b.n	801ece4 <_strtod_l+0x474>
 801ef5c:	234b      	movs	r3, #75	@ 0x4b
 801ef5e:	1a9a      	subs	r2, r3, r2
 801ef60:	3b4c      	subs	r3, #76	@ 0x4c
 801ef62:	4093      	lsls	r3, r2
 801ef64:	4019      	ands	r1, r3
 801ef66:	000f      	movs	r7, r1
 801ef68:	e7a9      	b.n	801eebe <_strtod_l+0x64e>
 801ef6a:	2201      	movs	r2, #1
 801ef6c:	4252      	negs	r2, r2
 801ef6e:	409a      	lsls	r2, r3
 801ef70:	4016      	ands	r6, r2
 801ef72:	e7a4      	b.n	801eebe <_strtod_l+0x64e>
 801ef74:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ef76:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ef78:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801ef7a:	1ad4      	subs	r4, r2, r3
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	db01      	blt.n	801ef84 <_strtod_l+0x714>
 801ef80:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801ef82:	195d      	adds	r5, r3, r5
 801ef84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ef86:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ef88:	1a5b      	subs	r3, r3, r1
 801ef8a:	2136      	movs	r1, #54	@ 0x36
 801ef8c:	189b      	adds	r3, r3, r2
 801ef8e:	1a8a      	subs	r2, r1, r2
 801ef90:	497a      	ldr	r1, [pc, #488]	@ (801f17c <_strtod_l+0x90c>)
 801ef92:	2001      	movs	r0, #1
 801ef94:	468c      	mov	ip, r1
 801ef96:	2100      	movs	r1, #0
 801ef98:	3b01      	subs	r3, #1
 801ef9a:	9116      	str	r1, [sp, #88]	@ 0x58
 801ef9c:	9014      	str	r0, [sp, #80]	@ 0x50
 801ef9e:	4563      	cmp	r3, ip
 801efa0:	da06      	bge.n	801efb0 <_strtod_l+0x740>
 801efa2:	4661      	mov	r1, ip
 801efa4:	1ac9      	subs	r1, r1, r3
 801efa6:	1a52      	subs	r2, r2, r1
 801efa8:	291f      	cmp	r1, #31
 801efaa:	dc3f      	bgt.n	801f02c <_strtod_l+0x7bc>
 801efac:	4088      	lsls	r0, r1
 801efae:	9014      	str	r0, [sp, #80]	@ 0x50
 801efb0:	18ab      	adds	r3, r5, r2
 801efb2:	930e      	str	r3, [sp, #56]	@ 0x38
 801efb4:	18a4      	adds	r4, r4, r2
 801efb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801efb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801efba:	191c      	adds	r4, r3, r4
 801efbc:	002b      	movs	r3, r5
 801efbe:	4295      	cmp	r5, r2
 801efc0:	dd00      	ble.n	801efc4 <_strtod_l+0x754>
 801efc2:	0013      	movs	r3, r2
 801efc4:	42a3      	cmp	r3, r4
 801efc6:	dd00      	ble.n	801efca <_strtod_l+0x75a>
 801efc8:	0023      	movs	r3, r4
 801efca:	2b00      	cmp	r3, #0
 801efcc:	dd04      	ble.n	801efd8 <_strtod_l+0x768>
 801efce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801efd0:	1ae4      	subs	r4, r4, r3
 801efd2:	1ad2      	subs	r2, r2, r3
 801efd4:	920e      	str	r2, [sp, #56]	@ 0x38
 801efd6:	1aed      	subs	r5, r5, r3
 801efd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801efda:	2b00      	cmp	r3, #0
 801efdc:	dd16      	ble.n	801f00c <_strtod_l+0x79c>
 801efde:	001a      	movs	r2, r3
 801efe0:	9907      	ldr	r1, [sp, #28]
 801efe2:	9805      	ldr	r0, [sp, #20]
 801efe4:	f002 ffa6 	bl	8021f34 <__pow5mult>
 801efe8:	9007      	str	r0, [sp, #28]
 801efea:	2800      	cmp	r0, #0
 801efec:	d0b3      	beq.n	801ef56 <_strtod_l+0x6e6>
 801efee:	0001      	movs	r1, r0
 801eff0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801eff2:	9805      	ldr	r0, [sp, #20]
 801eff4:	f002 feec 	bl	8021dd0 <__multiply>
 801eff8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801effa:	2800      	cmp	r0, #0
 801effc:	d100      	bne.n	801f000 <_strtod_l+0x790>
 801effe:	e671      	b.n	801ece4 <_strtod_l+0x474>
 801f000:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f002:	9805      	ldr	r0, [sp, #20]
 801f004:	f002 fdc8 	bl	8021b98 <_Bfree>
 801f008:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f00a:	931e      	str	r3, [sp, #120]	@ 0x78
 801f00c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f00e:	2b00      	cmp	r3, #0
 801f010:	dc12      	bgt.n	801f038 <_strtod_l+0x7c8>
 801f012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f014:	2b00      	cmp	r3, #0
 801f016:	dd18      	ble.n	801f04a <_strtod_l+0x7da>
 801f018:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f01a:	9908      	ldr	r1, [sp, #32]
 801f01c:	9805      	ldr	r0, [sp, #20]
 801f01e:	f002 ff89 	bl	8021f34 <__pow5mult>
 801f022:	9008      	str	r0, [sp, #32]
 801f024:	2800      	cmp	r0, #0
 801f026:	d110      	bne.n	801f04a <_strtod_l+0x7da>
 801f028:	2300      	movs	r3, #0
 801f02a:	e65a      	b.n	801ece2 <_strtod_l+0x472>
 801f02c:	4954      	ldr	r1, [pc, #336]	@ (801f180 <_strtod_l+0x910>)
 801f02e:	1acb      	subs	r3, r1, r3
 801f030:	0001      	movs	r1, r0
 801f032:	4099      	lsls	r1, r3
 801f034:	9116      	str	r1, [sp, #88]	@ 0x58
 801f036:	e7ba      	b.n	801efae <_strtod_l+0x73e>
 801f038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f03a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f03c:	9805      	ldr	r0, [sp, #20]
 801f03e:	f002 ffd5 	bl	8021fec <__lshift>
 801f042:	901e      	str	r0, [sp, #120]	@ 0x78
 801f044:	2800      	cmp	r0, #0
 801f046:	d1e4      	bne.n	801f012 <_strtod_l+0x7a2>
 801f048:	e64c      	b.n	801ece4 <_strtod_l+0x474>
 801f04a:	2c00      	cmp	r4, #0
 801f04c:	dd07      	ble.n	801f05e <_strtod_l+0x7ee>
 801f04e:	0022      	movs	r2, r4
 801f050:	9908      	ldr	r1, [sp, #32]
 801f052:	9805      	ldr	r0, [sp, #20]
 801f054:	f002 ffca 	bl	8021fec <__lshift>
 801f058:	9008      	str	r0, [sp, #32]
 801f05a:	2800      	cmp	r0, #0
 801f05c:	d0e4      	beq.n	801f028 <_strtod_l+0x7b8>
 801f05e:	2d00      	cmp	r5, #0
 801f060:	dd08      	ble.n	801f074 <_strtod_l+0x804>
 801f062:	002a      	movs	r2, r5
 801f064:	9907      	ldr	r1, [sp, #28]
 801f066:	9805      	ldr	r0, [sp, #20]
 801f068:	f002 ffc0 	bl	8021fec <__lshift>
 801f06c:	9007      	str	r0, [sp, #28]
 801f06e:	2800      	cmp	r0, #0
 801f070:	d100      	bne.n	801f074 <_strtod_l+0x804>
 801f072:	e637      	b.n	801ece4 <_strtod_l+0x474>
 801f074:	9a08      	ldr	r2, [sp, #32]
 801f076:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f078:	9805      	ldr	r0, [sp, #20]
 801f07a:	f003 f83f 	bl	80220fc <__mdiff>
 801f07e:	9006      	str	r0, [sp, #24]
 801f080:	2800      	cmp	r0, #0
 801f082:	d100      	bne.n	801f086 <_strtod_l+0x816>
 801f084:	e62e      	b.n	801ece4 <_strtod_l+0x474>
 801f086:	68c3      	ldr	r3, [r0, #12]
 801f088:	9907      	ldr	r1, [sp, #28]
 801f08a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f08c:	2300      	movs	r3, #0
 801f08e:	60c3      	str	r3, [r0, #12]
 801f090:	f003 f818 	bl	80220c4 <__mcmp>
 801f094:	2800      	cmp	r0, #0
 801f096:	da3b      	bge.n	801f110 <_strtod_l+0x8a0>
 801f098:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f09a:	4333      	orrs	r3, r6
 801f09c:	d167      	bne.n	801f16e <_strtod_l+0x8fe>
 801f09e:	033b      	lsls	r3, r7, #12
 801f0a0:	d165      	bne.n	801f16e <_strtod_l+0x8fe>
 801f0a2:	22d6      	movs	r2, #214	@ 0xd6
 801f0a4:	4b37      	ldr	r3, [pc, #220]	@ (801f184 <_strtod_l+0x914>)
 801f0a6:	04d2      	lsls	r2, r2, #19
 801f0a8:	403b      	ands	r3, r7
 801f0aa:	4293      	cmp	r3, r2
 801f0ac:	d95f      	bls.n	801f16e <_strtod_l+0x8fe>
 801f0ae:	9b06      	ldr	r3, [sp, #24]
 801f0b0:	695b      	ldr	r3, [r3, #20]
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d103      	bne.n	801f0be <_strtod_l+0x84e>
 801f0b6:	9b06      	ldr	r3, [sp, #24]
 801f0b8:	691b      	ldr	r3, [r3, #16]
 801f0ba:	2b01      	cmp	r3, #1
 801f0bc:	dd57      	ble.n	801f16e <_strtod_l+0x8fe>
 801f0be:	9906      	ldr	r1, [sp, #24]
 801f0c0:	2201      	movs	r2, #1
 801f0c2:	9805      	ldr	r0, [sp, #20]
 801f0c4:	f002 ff92 	bl	8021fec <__lshift>
 801f0c8:	9907      	ldr	r1, [sp, #28]
 801f0ca:	9006      	str	r0, [sp, #24]
 801f0cc:	f002 fffa 	bl	80220c4 <__mcmp>
 801f0d0:	2800      	cmp	r0, #0
 801f0d2:	dd4c      	ble.n	801f16e <_strtod_l+0x8fe>
 801f0d4:	4b2b      	ldr	r3, [pc, #172]	@ (801f184 <_strtod_l+0x914>)
 801f0d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f0d8:	403b      	ands	r3, r7
 801f0da:	2a00      	cmp	r2, #0
 801f0dc:	d074      	beq.n	801f1c8 <_strtod_l+0x958>
 801f0de:	22d6      	movs	r2, #214	@ 0xd6
 801f0e0:	04d2      	lsls	r2, r2, #19
 801f0e2:	4293      	cmp	r3, r2
 801f0e4:	d870      	bhi.n	801f1c8 <_strtod_l+0x958>
 801f0e6:	22dc      	movs	r2, #220	@ 0xdc
 801f0e8:	0492      	lsls	r2, r2, #18
 801f0ea:	4293      	cmp	r3, r2
 801f0ec:	d800      	bhi.n	801f0f0 <_strtod_l+0x880>
 801f0ee:	e695      	b.n	801ee1c <_strtod_l+0x5ac>
 801f0f0:	0030      	movs	r0, r6
 801f0f2:	0039      	movs	r1, r7
 801f0f4:	4b24      	ldr	r3, [pc, #144]	@ (801f188 <_strtod_l+0x918>)
 801f0f6:	2200      	movs	r2, #0
 801f0f8:	f7e3 faa0 	bl	800263c <__aeabi_dmul>
 801f0fc:	4b21      	ldr	r3, [pc, #132]	@ (801f184 <_strtod_l+0x914>)
 801f0fe:	0006      	movs	r6, r0
 801f100:	000f      	movs	r7, r1
 801f102:	420b      	tst	r3, r1
 801f104:	d000      	beq.n	801f108 <_strtod_l+0x898>
 801f106:	e5f6      	b.n	801ecf6 <_strtod_l+0x486>
 801f108:	2322      	movs	r3, #34	@ 0x22
 801f10a:	9a05      	ldr	r2, [sp, #20]
 801f10c:	6013      	str	r3, [r2, #0]
 801f10e:	e5f2      	b.n	801ecf6 <_strtod_l+0x486>
 801f110:	970e      	str	r7, [sp, #56]	@ 0x38
 801f112:	2800      	cmp	r0, #0
 801f114:	d175      	bne.n	801f202 <_strtod_l+0x992>
 801f116:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f118:	033b      	lsls	r3, r7, #12
 801f11a:	0b1b      	lsrs	r3, r3, #12
 801f11c:	2a00      	cmp	r2, #0
 801f11e:	d039      	beq.n	801f194 <_strtod_l+0x924>
 801f120:	4a1a      	ldr	r2, [pc, #104]	@ (801f18c <_strtod_l+0x91c>)
 801f122:	4293      	cmp	r3, r2
 801f124:	d138      	bne.n	801f198 <_strtod_l+0x928>
 801f126:	2101      	movs	r1, #1
 801f128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f12a:	4249      	negs	r1, r1
 801f12c:	0032      	movs	r2, r6
 801f12e:	0008      	movs	r0, r1
 801f130:	2b00      	cmp	r3, #0
 801f132:	d00b      	beq.n	801f14c <_strtod_l+0x8dc>
 801f134:	24d4      	movs	r4, #212	@ 0xd4
 801f136:	4b13      	ldr	r3, [pc, #76]	@ (801f184 <_strtod_l+0x914>)
 801f138:	0008      	movs	r0, r1
 801f13a:	403b      	ands	r3, r7
 801f13c:	04e4      	lsls	r4, r4, #19
 801f13e:	42a3      	cmp	r3, r4
 801f140:	d804      	bhi.n	801f14c <_strtod_l+0x8dc>
 801f142:	306c      	adds	r0, #108	@ 0x6c
 801f144:	0d1b      	lsrs	r3, r3, #20
 801f146:	1ac3      	subs	r3, r0, r3
 801f148:	4099      	lsls	r1, r3
 801f14a:	0008      	movs	r0, r1
 801f14c:	4282      	cmp	r2, r0
 801f14e:	d123      	bne.n	801f198 <_strtod_l+0x928>
 801f150:	4b0f      	ldr	r3, [pc, #60]	@ (801f190 <_strtod_l+0x920>)
 801f152:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f154:	4299      	cmp	r1, r3
 801f156:	d102      	bne.n	801f15e <_strtod_l+0x8ee>
 801f158:	3201      	adds	r2, #1
 801f15a:	d100      	bne.n	801f15e <_strtod_l+0x8ee>
 801f15c:	e5c2      	b.n	801ece4 <_strtod_l+0x474>
 801f15e:	4b09      	ldr	r3, [pc, #36]	@ (801f184 <_strtod_l+0x914>)
 801f160:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f162:	2600      	movs	r6, #0
 801f164:	401a      	ands	r2, r3
 801f166:	0013      	movs	r3, r2
 801f168:	2280      	movs	r2, #128	@ 0x80
 801f16a:	0352      	lsls	r2, r2, #13
 801f16c:	189f      	adds	r7, r3, r2
 801f16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f170:	2b00      	cmp	r3, #0
 801f172:	d1bd      	bne.n	801f0f0 <_strtod_l+0x880>
 801f174:	e5bf      	b.n	801ecf6 <_strtod_l+0x486>
 801f176:	46c0      	nop			@ (mov r8, r8)
 801f178:	08025d80 	.word	0x08025d80
 801f17c:	fffffc02 	.word	0xfffffc02
 801f180:	fffffbe2 	.word	0xfffffbe2
 801f184:	7ff00000 	.word	0x7ff00000
 801f188:	39500000 	.word	0x39500000
 801f18c:	000fffff 	.word	0x000fffff
 801f190:	7fefffff 	.word	0x7fefffff
 801f194:	4333      	orrs	r3, r6
 801f196:	d09d      	beq.n	801f0d4 <_strtod_l+0x864>
 801f198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f19a:	2b00      	cmp	r3, #0
 801f19c:	d01c      	beq.n	801f1d8 <_strtod_l+0x968>
 801f19e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f1a0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f1a2:	4213      	tst	r3, r2
 801f1a4:	d0e3      	beq.n	801f16e <_strtod_l+0x8fe>
 801f1a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1a8:	0030      	movs	r0, r6
 801f1aa:	0039      	movs	r1, r7
 801f1ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d016      	beq.n	801f1e0 <_strtod_l+0x970>
 801f1b2:	f7ff fb45 	bl	801e840 <sulp>
 801f1b6:	0002      	movs	r2, r0
 801f1b8:	000b      	movs	r3, r1
 801f1ba:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f1bc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f1be:	f7e2 fa95 	bl	80016ec <__aeabi_dadd>
 801f1c2:	0006      	movs	r6, r0
 801f1c4:	000f      	movs	r7, r1
 801f1c6:	e7d2      	b.n	801f16e <_strtod_l+0x8fe>
 801f1c8:	2601      	movs	r6, #1
 801f1ca:	4a92      	ldr	r2, [pc, #584]	@ (801f414 <_strtod_l+0xba4>)
 801f1cc:	4276      	negs	r6, r6
 801f1ce:	189b      	adds	r3, r3, r2
 801f1d0:	4a91      	ldr	r2, [pc, #580]	@ (801f418 <_strtod_l+0xba8>)
 801f1d2:	431a      	orrs	r2, r3
 801f1d4:	0017      	movs	r7, r2
 801f1d6:	e7ca      	b.n	801f16e <_strtod_l+0x8fe>
 801f1d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f1da:	4233      	tst	r3, r6
 801f1dc:	d0c7      	beq.n	801f16e <_strtod_l+0x8fe>
 801f1de:	e7e2      	b.n	801f1a6 <_strtod_l+0x936>
 801f1e0:	f7ff fb2e 	bl	801e840 <sulp>
 801f1e4:	0002      	movs	r2, r0
 801f1e6:	000b      	movs	r3, r1
 801f1e8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f1ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f1ec:	f7e3 fcee 	bl	8002bcc <__aeabi_dsub>
 801f1f0:	2200      	movs	r2, #0
 801f1f2:	2300      	movs	r3, #0
 801f1f4:	0006      	movs	r6, r0
 801f1f6:	000f      	movs	r7, r1
 801f1f8:	f7e1 f95a 	bl	80004b0 <__aeabi_dcmpeq>
 801f1fc:	2800      	cmp	r0, #0
 801f1fe:	d0b6      	beq.n	801f16e <_strtod_l+0x8fe>
 801f200:	e60c      	b.n	801ee1c <_strtod_l+0x5ac>
 801f202:	9907      	ldr	r1, [sp, #28]
 801f204:	9806      	ldr	r0, [sp, #24]
 801f206:	f003 f8df 	bl	80223c8 <__ratio>
 801f20a:	2380      	movs	r3, #128	@ 0x80
 801f20c:	2200      	movs	r2, #0
 801f20e:	05db      	lsls	r3, r3, #23
 801f210:	0004      	movs	r4, r0
 801f212:	000d      	movs	r5, r1
 801f214:	f7e1 f95c 	bl	80004d0 <__aeabi_dcmple>
 801f218:	2800      	cmp	r0, #0
 801f21a:	d06c      	beq.n	801f2f6 <_strtod_l+0xa86>
 801f21c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d177      	bne.n	801f312 <_strtod_l+0xaa2>
 801f222:	2e00      	cmp	r6, #0
 801f224:	d157      	bne.n	801f2d6 <_strtod_l+0xa66>
 801f226:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f228:	031b      	lsls	r3, r3, #12
 801f22a:	d15a      	bne.n	801f2e2 <_strtod_l+0xa72>
 801f22c:	2200      	movs	r2, #0
 801f22e:	0020      	movs	r0, r4
 801f230:	0029      	movs	r1, r5
 801f232:	4b7a      	ldr	r3, [pc, #488]	@ (801f41c <_strtod_l+0xbac>)
 801f234:	f7e1 f942 	bl	80004bc <__aeabi_dcmplt>
 801f238:	2800      	cmp	r0, #0
 801f23a:	d159      	bne.n	801f2f0 <_strtod_l+0xa80>
 801f23c:	0020      	movs	r0, r4
 801f23e:	0029      	movs	r1, r5
 801f240:	2200      	movs	r2, #0
 801f242:	4b77      	ldr	r3, [pc, #476]	@ (801f420 <_strtod_l+0xbb0>)
 801f244:	f7e3 f9fa 	bl	800263c <__aeabi_dmul>
 801f248:	0004      	movs	r4, r0
 801f24a:	000d      	movs	r5, r1
 801f24c:	2380      	movs	r3, #128	@ 0x80
 801f24e:	061b      	lsls	r3, r3, #24
 801f250:	18eb      	adds	r3, r5, r3
 801f252:	940a      	str	r4, [sp, #40]	@ 0x28
 801f254:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f256:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f258:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f25a:	9214      	str	r2, [sp, #80]	@ 0x50
 801f25c:	9315      	str	r3, [sp, #84]	@ 0x54
 801f25e:	4a71      	ldr	r2, [pc, #452]	@ (801f424 <_strtod_l+0xbb4>)
 801f260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f262:	4013      	ands	r3, r2
 801f264:	9316      	str	r3, [sp, #88]	@ 0x58
 801f266:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f268:	4b6f      	ldr	r3, [pc, #444]	@ (801f428 <_strtod_l+0xbb8>)
 801f26a:	429a      	cmp	r2, r3
 801f26c:	d000      	beq.n	801f270 <_strtod_l+0xa00>
 801f26e:	e087      	b.n	801f380 <_strtod_l+0xb10>
 801f270:	4a6e      	ldr	r2, [pc, #440]	@ (801f42c <_strtod_l+0xbbc>)
 801f272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f274:	4694      	mov	ip, r2
 801f276:	4463      	add	r3, ip
 801f278:	001f      	movs	r7, r3
 801f27a:	0030      	movs	r0, r6
 801f27c:	0019      	movs	r1, r3
 801f27e:	f002 ffd7 	bl	8022230 <__ulp>
 801f282:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f286:	f7e3 f9d9 	bl	800263c <__aeabi_dmul>
 801f28a:	0032      	movs	r2, r6
 801f28c:	003b      	movs	r3, r7
 801f28e:	f7e2 fa2d 	bl	80016ec <__aeabi_dadd>
 801f292:	4a64      	ldr	r2, [pc, #400]	@ (801f424 <_strtod_l+0xbb4>)
 801f294:	4b66      	ldr	r3, [pc, #408]	@ (801f430 <_strtod_l+0xbc0>)
 801f296:	0006      	movs	r6, r0
 801f298:	400a      	ands	r2, r1
 801f29a:	429a      	cmp	r2, r3
 801f29c:	d940      	bls.n	801f320 <_strtod_l+0xab0>
 801f29e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f2a0:	4a64      	ldr	r2, [pc, #400]	@ (801f434 <_strtod_l+0xbc4>)
 801f2a2:	4293      	cmp	r3, r2
 801f2a4:	d103      	bne.n	801f2ae <_strtod_l+0xa3e>
 801f2a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2a8:	3301      	adds	r3, #1
 801f2aa:	d100      	bne.n	801f2ae <_strtod_l+0xa3e>
 801f2ac:	e51a      	b.n	801ece4 <_strtod_l+0x474>
 801f2ae:	2601      	movs	r6, #1
 801f2b0:	4f60      	ldr	r7, [pc, #384]	@ (801f434 <_strtod_l+0xbc4>)
 801f2b2:	4276      	negs	r6, r6
 801f2b4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f2b6:	9805      	ldr	r0, [sp, #20]
 801f2b8:	f002 fc6e 	bl	8021b98 <_Bfree>
 801f2bc:	9908      	ldr	r1, [sp, #32]
 801f2be:	9805      	ldr	r0, [sp, #20]
 801f2c0:	f002 fc6a 	bl	8021b98 <_Bfree>
 801f2c4:	9907      	ldr	r1, [sp, #28]
 801f2c6:	9805      	ldr	r0, [sp, #20]
 801f2c8:	f002 fc66 	bl	8021b98 <_Bfree>
 801f2cc:	9906      	ldr	r1, [sp, #24]
 801f2ce:	9805      	ldr	r0, [sp, #20]
 801f2d0:	f002 fc62 	bl	8021b98 <_Bfree>
 801f2d4:	e617      	b.n	801ef06 <_strtod_l+0x696>
 801f2d6:	2e01      	cmp	r6, #1
 801f2d8:	d103      	bne.n	801f2e2 <_strtod_l+0xa72>
 801f2da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	d100      	bne.n	801f2e2 <_strtod_l+0xa72>
 801f2e0:	e59c      	b.n	801ee1c <_strtod_l+0x5ac>
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	4c54      	ldr	r4, [pc, #336]	@ (801f438 <_strtod_l+0xbc8>)
 801f2e6:	4d4d      	ldr	r5, [pc, #308]	@ (801f41c <_strtod_l+0xbac>)
 801f2e8:	930a      	str	r3, [sp, #40]	@ 0x28
 801f2ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f2ec:	2400      	movs	r4, #0
 801f2ee:	e7b2      	b.n	801f256 <_strtod_l+0x9e6>
 801f2f0:	2400      	movs	r4, #0
 801f2f2:	4d4b      	ldr	r5, [pc, #300]	@ (801f420 <_strtod_l+0xbb0>)
 801f2f4:	e7aa      	b.n	801f24c <_strtod_l+0x9dc>
 801f2f6:	0020      	movs	r0, r4
 801f2f8:	0029      	movs	r1, r5
 801f2fa:	4b49      	ldr	r3, [pc, #292]	@ (801f420 <_strtod_l+0xbb0>)
 801f2fc:	2200      	movs	r2, #0
 801f2fe:	f7e3 f99d 	bl	800263c <__aeabi_dmul>
 801f302:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f304:	0004      	movs	r4, r0
 801f306:	000d      	movs	r5, r1
 801f308:	2b00      	cmp	r3, #0
 801f30a:	d09f      	beq.n	801f24c <_strtod_l+0x9dc>
 801f30c:	940a      	str	r4, [sp, #40]	@ 0x28
 801f30e:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f310:	e7a1      	b.n	801f256 <_strtod_l+0x9e6>
 801f312:	2300      	movs	r3, #0
 801f314:	4c41      	ldr	r4, [pc, #260]	@ (801f41c <_strtod_l+0xbac>)
 801f316:	0025      	movs	r5, r4
 801f318:	930a      	str	r3, [sp, #40]	@ 0x28
 801f31a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f31c:	001c      	movs	r4, r3
 801f31e:	e79a      	b.n	801f256 <_strtod_l+0x9e6>
 801f320:	23d4      	movs	r3, #212	@ 0xd4
 801f322:	049b      	lsls	r3, r3, #18
 801f324:	18cf      	adds	r7, r1, r3
 801f326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f328:	9710      	str	r7, [sp, #64]	@ 0x40
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	d1c2      	bne.n	801f2b4 <_strtod_l+0xa44>
 801f32e:	4b3d      	ldr	r3, [pc, #244]	@ (801f424 <_strtod_l+0xbb4>)
 801f330:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f332:	403b      	ands	r3, r7
 801f334:	429a      	cmp	r2, r3
 801f336:	d1bd      	bne.n	801f2b4 <_strtod_l+0xa44>
 801f338:	0020      	movs	r0, r4
 801f33a:	0029      	movs	r1, r5
 801f33c:	f7e1 f9a4 	bl	8000688 <__aeabi_d2lz>
 801f340:	f7e1 f9dc 	bl	80006fc <__aeabi_l2d>
 801f344:	0002      	movs	r2, r0
 801f346:	000b      	movs	r3, r1
 801f348:	0020      	movs	r0, r4
 801f34a:	0029      	movs	r1, r5
 801f34c:	f7e3 fc3e 	bl	8002bcc <__aeabi_dsub>
 801f350:	033c      	lsls	r4, r7, #12
 801f352:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f354:	0b24      	lsrs	r4, r4, #12
 801f356:	4334      	orrs	r4, r6
 801f358:	900e      	str	r0, [sp, #56]	@ 0x38
 801f35a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f35c:	4a37      	ldr	r2, [pc, #220]	@ (801f43c <_strtod_l+0xbcc>)
 801f35e:	431c      	orrs	r4, r3
 801f360:	d052      	beq.n	801f408 <_strtod_l+0xb98>
 801f362:	4b37      	ldr	r3, [pc, #220]	@ (801f440 <_strtod_l+0xbd0>)
 801f364:	f7e1 f8aa 	bl	80004bc <__aeabi_dcmplt>
 801f368:	2800      	cmp	r0, #0
 801f36a:	d000      	beq.n	801f36e <_strtod_l+0xafe>
 801f36c:	e4c3      	b.n	801ecf6 <_strtod_l+0x486>
 801f36e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f370:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f372:	4a34      	ldr	r2, [pc, #208]	@ (801f444 <_strtod_l+0xbd4>)
 801f374:	4b2a      	ldr	r3, [pc, #168]	@ (801f420 <_strtod_l+0xbb0>)
 801f376:	f7e1 f8b5 	bl	80004e4 <__aeabi_dcmpgt>
 801f37a:	2800      	cmp	r0, #0
 801f37c:	d09a      	beq.n	801f2b4 <_strtod_l+0xa44>
 801f37e:	e4ba      	b.n	801ecf6 <_strtod_l+0x486>
 801f380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f382:	2b00      	cmp	r3, #0
 801f384:	d02a      	beq.n	801f3dc <_strtod_l+0xb6c>
 801f386:	23d4      	movs	r3, #212	@ 0xd4
 801f388:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f38a:	04db      	lsls	r3, r3, #19
 801f38c:	429a      	cmp	r2, r3
 801f38e:	d825      	bhi.n	801f3dc <_strtod_l+0xb6c>
 801f390:	0020      	movs	r0, r4
 801f392:	0029      	movs	r1, r5
 801f394:	4a2c      	ldr	r2, [pc, #176]	@ (801f448 <_strtod_l+0xbd8>)
 801f396:	4b2d      	ldr	r3, [pc, #180]	@ (801f44c <_strtod_l+0xbdc>)
 801f398:	f7e1 f89a 	bl	80004d0 <__aeabi_dcmple>
 801f39c:	2800      	cmp	r0, #0
 801f39e:	d016      	beq.n	801f3ce <_strtod_l+0xb5e>
 801f3a0:	0020      	movs	r0, r4
 801f3a2:	0029      	movs	r1, r5
 801f3a4:	f7e1 f952 	bl	800064c <__aeabi_d2uiz>
 801f3a8:	2800      	cmp	r0, #0
 801f3aa:	d100      	bne.n	801f3ae <_strtod_l+0xb3e>
 801f3ac:	3001      	adds	r0, #1
 801f3ae:	f7e4 f835 	bl	800341c <__aeabi_ui2d>
 801f3b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f3b4:	0004      	movs	r4, r0
 801f3b6:	000d      	movs	r5, r1
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	d122      	bne.n	801f402 <_strtod_l+0xb92>
 801f3bc:	2380      	movs	r3, #128	@ 0x80
 801f3be:	061b      	lsls	r3, r3, #24
 801f3c0:	18cb      	adds	r3, r1, r3
 801f3c2:	9018      	str	r0, [sp, #96]	@ 0x60
 801f3c4:	9319      	str	r3, [sp, #100]	@ 0x64
 801f3c6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f3c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f3ca:	9214      	str	r2, [sp, #80]	@ 0x50
 801f3cc:	9315      	str	r3, [sp, #84]	@ 0x54
 801f3ce:	22d6      	movs	r2, #214	@ 0xd6
 801f3d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f3d2:	04d2      	lsls	r2, r2, #19
 801f3d4:	189b      	adds	r3, r3, r2
 801f3d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f3d8:	1a9b      	subs	r3, r3, r2
 801f3da:	9315      	str	r3, [sp, #84]	@ 0x54
 801f3dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f3de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f3e0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f3e2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f3e4:	f002 ff24 	bl	8022230 <__ulp>
 801f3e8:	0002      	movs	r2, r0
 801f3ea:	000b      	movs	r3, r1
 801f3ec:	0030      	movs	r0, r6
 801f3ee:	0039      	movs	r1, r7
 801f3f0:	f7e3 f924 	bl	800263c <__aeabi_dmul>
 801f3f4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f3f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f3f8:	f7e2 f978 	bl	80016ec <__aeabi_dadd>
 801f3fc:	0006      	movs	r6, r0
 801f3fe:	000f      	movs	r7, r1
 801f400:	e791      	b.n	801f326 <_strtod_l+0xab6>
 801f402:	9418      	str	r4, [sp, #96]	@ 0x60
 801f404:	9519      	str	r5, [sp, #100]	@ 0x64
 801f406:	e7de      	b.n	801f3c6 <_strtod_l+0xb56>
 801f408:	4b11      	ldr	r3, [pc, #68]	@ (801f450 <_strtod_l+0xbe0>)
 801f40a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f40c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f40e:	f7e1 f855 	bl	80004bc <__aeabi_dcmplt>
 801f412:	e7b2      	b.n	801f37a <_strtod_l+0xb0a>
 801f414:	fff00000 	.word	0xfff00000
 801f418:	000fffff 	.word	0x000fffff
 801f41c:	3ff00000 	.word	0x3ff00000
 801f420:	3fe00000 	.word	0x3fe00000
 801f424:	7ff00000 	.word	0x7ff00000
 801f428:	7fe00000 	.word	0x7fe00000
 801f42c:	fcb00000 	.word	0xfcb00000
 801f430:	7c9fffff 	.word	0x7c9fffff
 801f434:	7fefffff 	.word	0x7fefffff
 801f438:	bff00000 	.word	0xbff00000
 801f43c:	94a03595 	.word	0x94a03595
 801f440:	3fdfffff 	.word	0x3fdfffff
 801f444:	35afe535 	.word	0x35afe535
 801f448:	ffc00000 	.word	0xffc00000
 801f44c:	41dfffff 	.word	0x41dfffff
 801f450:	3fcfffff 	.word	0x3fcfffff

0801f454 <strtod>:
 801f454:	b510      	push	{r4, lr}
 801f456:	4c04      	ldr	r4, [pc, #16]	@ (801f468 <strtod+0x14>)
 801f458:	000a      	movs	r2, r1
 801f45a:	0001      	movs	r1, r0
 801f45c:	4b03      	ldr	r3, [pc, #12]	@ (801f46c <strtod+0x18>)
 801f45e:	6820      	ldr	r0, [r4, #0]
 801f460:	f7ff fa06 	bl	801e870 <_strtod_l>
 801f464:	bd10      	pop	{r4, pc}
 801f466:	46c0      	nop			@ (mov r8, r8)
 801f468:	200003d0 	.word	0x200003d0
 801f46c:	20000264 	.word	0x20000264

0801f470 <_strtol_l.constprop.0>:
 801f470:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f472:	b085      	sub	sp, #20
 801f474:	0017      	movs	r7, r2
 801f476:	001e      	movs	r6, r3
 801f478:	9003      	str	r0, [sp, #12]
 801f47a:	9101      	str	r1, [sp, #4]
 801f47c:	2b24      	cmp	r3, #36	@ 0x24
 801f47e:	d844      	bhi.n	801f50a <_strtol_l.constprop.0+0x9a>
 801f480:	000c      	movs	r4, r1
 801f482:	2b01      	cmp	r3, #1
 801f484:	d041      	beq.n	801f50a <_strtol_l.constprop.0+0x9a>
 801f486:	4b3d      	ldr	r3, [pc, #244]	@ (801f57c <_strtol_l.constprop.0+0x10c>)
 801f488:	2208      	movs	r2, #8
 801f48a:	469c      	mov	ip, r3
 801f48c:	0023      	movs	r3, r4
 801f48e:	4661      	mov	r1, ip
 801f490:	781d      	ldrb	r5, [r3, #0]
 801f492:	3401      	adds	r4, #1
 801f494:	5d48      	ldrb	r0, [r1, r5]
 801f496:	0001      	movs	r1, r0
 801f498:	4011      	ands	r1, r2
 801f49a:	4210      	tst	r0, r2
 801f49c:	d1f6      	bne.n	801f48c <_strtol_l.constprop.0+0x1c>
 801f49e:	2d2d      	cmp	r5, #45	@ 0x2d
 801f4a0:	d13a      	bne.n	801f518 <_strtol_l.constprop.0+0xa8>
 801f4a2:	7825      	ldrb	r5, [r4, #0]
 801f4a4:	1c9c      	adds	r4, r3, #2
 801f4a6:	2301      	movs	r3, #1
 801f4a8:	9300      	str	r3, [sp, #0]
 801f4aa:	2210      	movs	r2, #16
 801f4ac:	0033      	movs	r3, r6
 801f4ae:	4393      	bics	r3, r2
 801f4b0:	d109      	bne.n	801f4c6 <_strtol_l.constprop.0+0x56>
 801f4b2:	2d30      	cmp	r5, #48	@ 0x30
 801f4b4:	d136      	bne.n	801f524 <_strtol_l.constprop.0+0xb4>
 801f4b6:	2120      	movs	r1, #32
 801f4b8:	7823      	ldrb	r3, [r4, #0]
 801f4ba:	438b      	bics	r3, r1
 801f4bc:	2b58      	cmp	r3, #88	@ 0x58
 801f4be:	d131      	bne.n	801f524 <_strtol_l.constprop.0+0xb4>
 801f4c0:	0016      	movs	r6, r2
 801f4c2:	7865      	ldrb	r5, [r4, #1]
 801f4c4:	3402      	adds	r4, #2
 801f4c6:	4a2e      	ldr	r2, [pc, #184]	@ (801f580 <_strtol_l.constprop.0+0x110>)
 801f4c8:	9b00      	ldr	r3, [sp, #0]
 801f4ca:	4694      	mov	ip, r2
 801f4cc:	4463      	add	r3, ip
 801f4ce:	0031      	movs	r1, r6
 801f4d0:	0018      	movs	r0, r3
 801f4d2:	9302      	str	r3, [sp, #8]
 801f4d4:	f7e0 feec 	bl	80002b0 <__aeabi_uidivmod>
 801f4d8:	2200      	movs	r2, #0
 801f4da:	4684      	mov	ip, r0
 801f4dc:	0010      	movs	r0, r2
 801f4de:	002b      	movs	r3, r5
 801f4e0:	3b30      	subs	r3, #48	@ 0x30
 801f4e2:	2b09      	cmp	r3, #9
 801f4e4:	d825      	bhi.n	801f532 <_strtol_l.constprop.0+0xc2>
 801f4e6:	001d      	movs	r5, r3
 801f4e8:	42ae      	cmp	r6, r5
 801f4ea:	dd31      	ble.n	801f550 <_strtol_l.constprop.0+0xe0>
 801f4ec:	1c53      	adds	r3, r2, #1
 801f4ee:	d009      	beq.n	801f504 <_strtol_l.constprop.0+0x94>
 801f4f0:	2201      	movs	r2, #1
 801f4f2:	4252      	negs	r2, r2
 801f4f4:	4584      	cmp	ip, r0
 801f4f6:	d305      	bcc.n	801f504 <_strtol_l.constprop.0+0x94>
 801f4f8:	d101      	bne.n	801f4fe <_strtol_l.constprop.0+0x8e>
 801f4fa:	42a9      	cmp	r1, r5
 801f4fc:	db25      	blt.n	801f54a <_strtol_l.constprop.0+0xda>
 801f4fe:	2201      	movs	r2, #1
 801f500:	4370      	muls	r0, r6
 801f502:	1828      	adds	r0, r5, r0
 801f504:	7825      	ldrb	r5, [r4, #0]
 801f506:	3401      	adds	r4, #1
 801f508:	e7e9      	b.n	801f4de <_strtol_l.constprop.0+0x6e>
 801f50a:	f000 ffc5 	bl	8020498 <__errno>
 801f50e:	2316      	movs	r3, #22
 801f510:	6003      	str	r3, [r0, #0]
 801f512:	2000      	movs	r0, #0
 801f514:	b005      	add	sp, #20
 801f516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f518:	9100      	str	r1, [sp, #0]
 801f51a:	2d2b      	cmp	r5, #43	@ 0x2b
 801f51c:	d1c5      	bne.n	801f4aa <_strtol_l.constprop.0+0x3a>
 801f51e:	7825      	ldrb	r5, [r4, #0]
 801f520:	1c9c      	adds	r4, r3, #2
 801f522:	e7c2      	b.n	801f4aa <_strtol_l.constprop.0+0x3a>
 801f524:	2e00      	cmp	r6, #0
 801f526:	d1ce      	bne.n	801f4c6 <_strtol_l.constprop.0+0x56>
 801f528:	3608      	adds	r6, #8
 801f52a:	2d30      	cmp	r5, #48	@ 0x30
 801f52c:	d0cb      	beq.n	801f4c6 <_strtol_l.constprop.0+0x56>
 801f52e:	3602      	adds	r6, #2
 801f530:	e7c9      	b.n	801f4c6 <_strtol_l.constprop.0+0x56>
 801f532:	002b      	movs	r3, r5
 801f534:	3b41      	subs	r3, #65	@ 0x41
 801f536:	2b19      	cmp	r3, #25
 801f538:	d801      	bhi.n	801f53e <_strtol_l.constprop.0+0xce>
 801f53a:	3d37      	subs	r5, #55	@ 0x37
 801f53c:	e7d4      	b.n	801f4e8 <_strtol_l.constprop.0+0x78>
 801f53e:	002b      	movs	r3, r5
 801f540:	3b61      	subs	r3, #97	@ 0x61
 801f542:	2b19      	cmp	r3, #25
 801f544:	d804      	bhi.n	801f550 <_strtol_l.constprop.0+0xe0>
 801f546:	3d57      	subs	r5, #87	@ 0x57
 801f548:	e7ce      	b.n	801f4e8 <_strtol_l.constprop.0+0x78>
 801f54a:	2201      	movs	r2, #1
 801f54c:	4252      	negs	r2, r2
 801f54e:	e7d9      	b.n	801f504 <_strtol_l.constprop.0+0x94>
 801f550:	1c53      	adds	r3, r2, #1
 801f552:	d108      	bne.n	801f566 <_strtol_l.constprop.0+0xf6>
 801f554:	2322      	movs	r3, #34	@ 0x22
 801f556:	9a03      	ldr	r2, [sp, #12]
 801f558:	9802      	ldr	r0, [sp, #8]
 801f55a:	6013      	str	r3, [r2, #0]
 801f55c:	2f00      	cmp	r7, #0
 801f55e:	d0d9      	beq.n	801f514 <_strtol_l.constprop.0+0xa4>
 801f560:	1e63      	subs	r3, r4, #1
 801f562:	9301      	str	r3, [sp, #4]
 801f564:	e007      	b.n	801f576 <_strtol_l.constprop.0+0x106>
 801f566:	9b00      	ldr	r3, [sp, #0]
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d000      	beq.n	801f56e <_strtol_l.constprop.0+0xfe>
 801f56c:	4240      	negs	r0, r0
 801f56e:	2f00      	cmp	r7, #0
 801f570:	d0d0      	beq.n	801f514 <_strtol_l.constprop.0+0xa4>
 801f572:	2a00      	cmp	r2, #0
 801f574:	d1f4      	bne.n	801f560 <_strtol_l.constprop.0+0xf0>
 801f576:	9b01      	ldr	r3, [sp, #4]
 801f578:	603b      	str	r3, [r7, #0]
 801f57a:	e7cb      	b.n	801f514 <_strtol_l.constprop.0+0xa4>
 801f57c:	08025da9 	.word	0x08025da9
 801f580:	7fffffff 	.word	0x7fffffff

0801f584 <strtol>:
 801f584:	b510      	push	{r4, lr}
 801f586:	4c04      	ldr	r4, [pc, #16]	@ (801f598 <strtol+0x14>)
 801f588:	0013      	movs	r3, r2
 801f58a:	000a      	movs	r2, r1
 801f58c:	0001      	movs	r1, r0
 801f58e:	6820      	ldr	r0, [r4, #0]
 801f590:	f7ff ff6e 	bl	801f470 <_strtol_l.constprop.0>
 801f594:	bd10      	pop	{r4, pc}
 801f596:	46c0      	nop			@ (mov r8, r8)
 801f598:	200003d0 	.word	0x200003d0

0801f59c <__cvt>:
 801f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f59e:	001f      	movs	r7, r3
 801f5a0:	2300      	movs	r3, #0
 801f5a2:	0016      	movs	r6, r2
 801f5a4:	b08b      	sub	sp, #44	@ 0x2c
 801f5a6:	429f      	cmp	r7, r3
 801f5a8:	da04      	bge.n	801f5b4 <__cvt+0x18>
 801f5aa:	2180      	movs	r1, #128	@ 0x80
 801f5ac:	0609      	lsls	r1, r1, #24
 801f5ae:	187b      	adds	r3, r7, r1
 801f5b0:	001f      	movs	r7, r3
 801f5b2:	232d      	movs	r3, #45	@ 0x2d
 801f5b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f5b6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f5b8:	7013      	strb	r3, [r2, #0]
 801f5ba:	2320      	movs	r3, #32
 801f5bc:	2203      	movs	r2, #3
 801f5be:	439d      	bics	r5, r3
 801f5c0:	2d46      	cmp	r5, #70	@ 0x46
 801f5c2:	d007      	beq.n	801f5d4 <__cvt+0x38>
 801f5c4:	002b      	movs	r3, r5
 801f5c6:	3b45      	subs	r3, #69	@ 0x45
 801f5c8:	4259      	negs	r1, r3
 801f5ca:	414b      	adcs	r3, r1
 801f5cc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f5ce:	3a01      	subs	r2, #1
 801f5d0:	18cb      	adds	r3, r1, r3
 801f5d2:	9310      	str	r3, [sp, #64]	@ 0x40
 801f5d4:	ab09      	add	r3, sp, #36	@ 0x24
 801f5d6:	9304      	str	r3, [sp, #16]
 801f5d8:	ab08      	add	r3, sp, #32
 801f5da:	9303      	str	r3, [sp, #12]
 801f5dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f5de:	9200      	str	r2, [sp, #0]
 801f5e0:	9302      	str	r3, [sp, #8]
 801f5e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f5e4:	0032      	movs	r2, r6
 801f5e6:	9301      	str	r3, [sp, #4]
 801f5e8:	003b      	movs	r3, r7
 801f5ea:	f001 f82b 	bl	8020644 <_dtoa_r>
 801f5ee:	0004      	movs	r4, r0
 801f5f0:	2d47      	cmp	r5, #71	@ 0x47
 801f5f2:	d11b      	bne.n	801f62c <__cvt+0x90>
 801f5f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f5f6:	07db      	lsls	r3, r3, #31
 801f5f8:	d511      	bpl.n	801f61e <__cvt+0x82>
 801f5fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f5fc:	18c3      	adds	r3, r0, r3
 801f5fe:	9307      	str	r3, [sp, #28]
 801f600:	2200      	movs	r2, #0
 801f602:	2300      	movs	r3, #0
 801f604:	0030      	movs	r0, r6
 801f606:	0039      	movs	r1, r7
 801f608:	f7e0 ff52 	bl	80004b0 <__aeabi_dcmpeq>
 801f60c:	2800      	cmp	r0, #0
 801f60e:	d001      	beq.n	801f614 <__cvt+0x78>
 801f610:	9b07      	ldr	r3, [sp, #28]
 801f612:	9309      	str	r3, [sp, #36]	@ 0x24
 801f614:	2230      	movs	r2, #48	@ 0x30
 801f616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f618:	9907      	ldr	r1, [sp, #28]
 801f61a:	428b      	cmp	r3, r1
 801f61c:	d320      	bcc.n	801f660 <__cvt+0xc4>
 801f61e:	0020      	movs	r0, r4
 801f620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f622:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f624:	1b1b      	subs	r3, r3, r4
 801f626:	6013      	str	r3, [r2, #0]
 801f628:	b00b      	add	sp, #44	@ 0x2c
 801f62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f62c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f62e:	18c3      	adds	r3, r0, r3
 801f630:	9307      	str	r3, [sp, #28]
 801f632:	2d46      	cmp	r5, #70	@ 0x46
 801f634:	d1e4      	bne.n	801f600 <__cvt+0x64>
 801f636:	7803      	ldrb	r3, [r0, #0]
 801f638:	2b30      	cmp	r3, #48	@ 0x30
 801f63a:	d10c      	bne.n	801f656 <__cvt+0xba>
 801f63c:	2200      	movs	r2, #0
 801f63e:	2300      	movs	r3, #0
 801f640:	0030      	movs	r0, r6
 801f642:	0039      	movs	r1, r7
 801f644:	f7e0 ff34 	bl	80004b0 <__aeabi_dcmpeq>
 801f648:	2800      	cmp	r0, #0
 801f64a:	d104      	bne.n	801f656 <__cvt+0xba>
 801f64c:	2301      	movs	r3, #1
 801f64e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f650:	1a9b      	subs	r3, r3, r2
 801f652:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f654:	6013      	str	r3, [r2, #0]
 801f656:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f658:	9a07      	ldr	r2, [sp, #28]
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	18d3      	adds	r3, r2, r3
 801f65e:	e7ce      	b.n	801f5fe <__cvt+0x62>
 801f660:	1c59      	adds	r1, r3, #1
 801f662:	9109      	str	r1, [sp, #36]	@ 0x24
 801f664:	701a      	strb	r2, [r3, #0]
 801f666:	e7d6      	b.n	801f616 <__cvt+0x7a>

0801f668 <__exponent>:
 801f668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f66a:	232b      	movs	r3, #43	@ 0x2b
 801f66c:	0005      	movs	r5, r0
 801f66e:	000c      	movs	r4, r1
 801f670:	b085      	sub	sp, #20
 801f672:	7002      	strb	r2, [r0, #0]
 801f674:	2900      	cmp	r1, #0
 801f676:	da01      	bge.n	801f67c <__exponent+0x14>
 801f678:	424c      	negs	r4, r1
 801f67a:	3302      	adds	r3, #2
 801f67c:	706b      	strb	r3, [r5, #1]
 801f67e:	2c09      	cmp	r4, #9
 801f680:	dd2c      	ble.n	801f6dc <__exponent+0x74>
 801f682:	ab02      	add	r3, sp, #8
 801f684:	1dde      	adds	r6, r3, #7
 801f686:	0020      	movs	r0, r4
 801f688:	210a      	movs	r1, #10
 801f68a:	f7e0 fefb 	bl	8000484 <__aeabi_idivmod>
 801f68e:	0037      	movs	r7, r6
 801f690:	3130      	adds	r1, #48	@ 0x30
 801f692:	3e01      	subs	r6, #1
 801f694:	0020      	movs	r0, r4
 801f696:	7031      	strb	r1, [r6, #0]
 801f698:	210a      	movs	r1, #10
 801f69a:	9401      	str	r4, [sp, #4]
 801f69c:	f7e0 fe0c 	bl	80002b8 <__divsi3>
 801f6a0:	9b01      	ldr	r3, [sp, #4]
 801f6a2:	0004      	movs	r4, r0
 801f6a4:	2b63      	cmp	r3, #99	@ 0x63
 801f6a6:	dcee      	bgt.n	801f686 <__exponent+0x1e>
 801f6a8:	1eba      	subs	r2, r7, #2
 801f6aa:	1ca8      	adds	r0, r5, #2
 801f6ac:	0001      	movs	r1, r0
 801f6ae:	0013      	movs	r3, r2
 801f6b0:	3430      	adds	r4, #48	@ 0x30
 801f6b2:	7014      	strb	r4, [r2, #0]
 801f6b4:	ac02      	add	r4, sp, #8
 801f6b6:	3407      	adds	r4, #7
 801f6b8:	429c      	cmp	r4, r3
 801f6ba:	d80a      	bhi.n	801f6d2 <__exponent+0x6a>
 801f6bc:	2300      	movs	r3, #0
 801f6be:	42a2      	cmp	r2, r4
 801f6c0:	d803      	bhi.n	801f6ca <__exponent+0x62>
 801f6c2:	3309      	adds	r3, #9
 801f6c4:	aa02      	add	r2, sp, #8
 801f6c6:	189b      	adds	r3, r3, r2
 801f6c8:	1bdb      	subs	r3, r3, r7
 801f6ca:	18c0      	adds	r0, r0, r3
 801f6cc:	1b40      	subs	r0, r0, r5
 801f6ce:	b005      	add	sp, #20
 801f6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6d2:	781c      	ldrb	r4, [r3, #0]
 801f6d4:	3301      	adds	r3, #1
 801f6d6:	700c      	strb	r4, [r1, #0]
 801f6d8:	3101      	adds	r1, #1
 801f6da:	e7eb      	b.n	801f6b4 <__exponent+0x4c>
 801f6dc:	2330      	movs	r3, #48	@ 0x30
 801f6de:	18e4      	adds	r4, r4, r3
 801f6e0:	70ab      	strb	r3, [r5, #2]
 801f6e2:	1d28      	adds	r0, r5, #4
 801f6e4:	70ec      	strb	r4, [r5, #3]
 801f6e6:	e7f1      	b.n	801f6cc <__exponent+0x64>

0801f6e8 <_printf_float>:
 801f6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6ea:	b097      	sub	sp, #92	@ 0x5c
 801f6ec:	000d      	movs	r5, r1
 801f6ee:	920a      	str	r2, [sp, #40]	@ 0x28
 801f6f0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f6f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f6f4:	9009      	str	r0, [sp, #36]	@ 0x24
 801f6f6:	f000 fe7d 	bl	80203f4 <_localeconv_r>
 801f6fa:	6803      	ldr	r3, [r0, #0]
 801f6fc:	0018      	movs	r0, r3
 801f6fe:	930d      	str	r3, [sp, #52]	@ 0x34
 801f700:	f7e0 fd34 	bl	800016c <strlen>
 801f704:	2300      	movs	r3, #0
 801f706:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f708:	9314      	str	r3, [sp, #80]	@ 0x50
 801f70a:	7e2b      	ldrb	r3, [r5, #24]
 801f70c:	2207      	movs	r2, #7
 801f70e:	930c      	str	r3, [sp, #48]	@ 0x30
 801f710:	682b      	ldr	r3, [r5, #0]
 801f712:	930e      	str	r3, [sp, #56]	@ 0x38
 801f714:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f716:	6823      	ldr	r3, [r4, #0]
 801f718:	05c9      	lsls	r1, r1, #23
 801f71a:	d545      	bpl.n	801f7a8 <_printf_float+0xc0>
 801f71c:	189b      	adds	r3, r3, r2
 801f71e:	4393      	bics	r3, r2
 801f720:	001a      	movs	r2, r3
 801f722:	3208      	adds	r2, #8
 801f724:	6022      	str	r2, [r4, #0]
 801f726:	2201      	movs	r2, #1
 801f728:	681e      	ldr	r6, [r3, #0]
 801f72a:	685f      	ldr	r7, [r3, #4]
 801f72c:	007b      	lsls	r3, r7, #1
 801f72e:	085b      	lsrs	r3, r3, #1
 801f730:	9311      	str	r3, [sp, #68]	@ 0x44
 801f732:	9610      	str	r6, [sp, #64]	@ 0x40
 801f734:	64ae      	str	r6, [r5, #72]	@ 0x48
 801f736:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801f738:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f73a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f73c:	4ba7      	ldr	r3, [pc, #668]	@ (801f9dc <_printf_float+0x2f4>)
 801f73e:	4252      	negs	r2, r2
 801f740:	f7e3 fde0 	bl	8003304 <__aeabi_dcmpun>
 801f744:	2800      	cmp	r0, #0
 801f746:	d131      	bne.n	801f7ac <_printf_float+0xc4>
 801f748:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f74a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f74c:	2201      	movs	r2, #1
 801f74e:	4ba3      	ldr	r3, [pc, #652]	@ (801f9dc <_printf_float+0x2f4>)
 801f750:	4252      	negs	r2, r2
 801f752:	f7e0 febd 	bl	80004d0 <__aeabi_dcmple>
 801f756:	2800      	cmp	r0, #0
 801f758:	d128      	bne.n	801f7ac <_printf_float+0xc4>
 801f75a:	2200      	movs	r2, #0
 801f75c:	2300      	movs	r3, #0
 801f75e:	0030      	movs	r0, r6
 801f760:	0039      	movs	r1, r7
 801f762:	f7e0 feab 	bl	80004bc <__aeabi_dcmplt>
 801f766:	2800      	cmp	r0, #0
 801f768:	d003      	beq.n	801f772 <_printf_float+0x8a>
 801f76a:	002b      	movs	r3, r5
 801f76c:	222d      	movs	r2, #45	@ 0x2d
 801f76e:	3343      	adds	r3, #67	@ 0x43
 801f770:	701a      	strb	r2, [r3, #0]
 801f772:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f774:	4f9a      	ldr	r7, [pc, #616]	@ (801f9e0 <_printf_float+0x2f8>)
 801f776:	2b47      	cmp	r3, #71	@ 0x47
 801f778:	d900      	bls.n	801f77c <_printf_float+0x94>
 801f77a:	4f9a      	ldr	r7, [pc, #616]	@ (801f9e4 <_printf_float+0x2fc>)
 801f77c:	2303      	movs	r3, #3
 801f77e:	2400      	movs	r4, #0
 801f780:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f782:	612b      	str	r3, [r5, #16]
 801f784:	3301      	adds	r3, #1
 801f786:	439a      	bics	r2, r3
 801f788:	602a      	str	r2, [r5, #0]
 801f78a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f78c:	0029      	movs	r1, r5
 801f78e:	9300      	str	r3, [sp, #0]
 801f790:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f794:	aa15      	add	r2, sp, #84	@ 0x54
 801f796:	f000 f9e5 	bl	801fb64 <_printf_common>
 801f79a:	3001      	adds	r0, #1
 801f79c:	d000      	beq.n	801f7a0 <_printf_float+0xb8>
 801f79e:	e09f      	b.n	801f8e0 <_printf_float+0x1f8>
 801f7a0:	2001      	movs	r0, #1
 801f7a2:	4240      	negs	r0, r0
 801f7a4:	b017      	add	sp, #92	@ 0x5c
 801f7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7a8:	3307      	adds	r3, #7
 801f7aa:	e7b8      	b.n	801f71e <_printf_float+0x36>
 801f7ac:	0032      	movs	r2, r6
 801f7ae:	003b      	movs	r3, r7
 801f7b0:	0030      	movs	r0, r6
 801f7b2:	0039      	movs	r1, r7
 801f7b4:	f7e3 fda6 	bl	8003304 <__aeabi_dcmpun>
 801f7b8:	2800      	cmp	r0, #0
 801f7ba:	d00b      	beq.n	801f7d4 <_printf_float+0xec>
 801f7bc:	2f00      	cmp	r7, #0
 801f7be:	da03      	bge.n	801f7c8 <_printf_float+0xe0>
 801f7c0:	002b      	movs	r3, r5
 801f7c2:	222d      	movs	r2, #45	@ 0x2d
 801f7c4:	3343      	adds	r3, #67	@ 0x43
 801f7c6:	701a      	strb	r2, [r3, #0]
 801f7c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7ca:	4f87      	ldr	r7, [pc, #540]	@ (801f9e8 <_printf_float+0x300>)
 801f7cc:	2b47      	cmp	r3, #71	@ 0x47
 801f7ce:	d9d5      	bls.n	801f77c <_printf_float+0x94>
 801f7d0:	4f86      	ldr	r7, [pc, #536]	@ (801f9ec <_printf_float+0x304>)
 801f7d2:	e7d3      	b.n	801f77c <_printf_float+0x94>
 801f7d4:	2220      	movs	r2, #32
 801f7d6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f7d8:	686b      	ldr	r3, [r5, #4]
 801f7da:	4394      	bics	r4, r2
 801f7dc:	1c5a      	adds	r2, r3, #1
 801f7de:	d146      	bne.n	801f86e <_printf_float+0x186>
 801f7e0:	3307      	adds	r3, #7
 801f7e2:	606b      	str	r3, [r5, #4]
 801f7e4:	2380      	movs	r3, #128	@ 0x80
 801f7e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f7e8:	00db      	lsls	r3, r3, #3
 801f7ea:	4313      	orrs	r3, r2
 801f7ec:	2200      	movs	r2, #0
 801f7ee:	602b      	str	r3, [r5, #0]
 801f7f0:	9206      	str	r2, [sp, #24]
 801f7f2:	aa14      	add	r2, sp, #80	@ 0x50
 801f7f4:	9205      	str	r2, [sp, #20]
 801f7f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f7f8:	a90a      	add	r1, sp, #40	@ 0x28
 801f7fa:	9204      	str	r2, [sp, #16]
 801f7fc:	aa13      	add	r2, sp, #76	@ 0x4c
 801f7fe:	9203      	str	r2, [sp, #12]
 801f800:	2223      	movs	r2, #35	@ 0x23
 801f802:	1852      	adds	r2, r2, r1
 801f804:	9202      	str	r2, [sp, #8]
 801f806:	9301      	str	r3, [sp, #4]
 801f808:	686b      	ldr	r3, [r5, #4]
 801f80a:	0032      	movs	r2, r6
 801f80c:	9300      	str	r3, [sp, #0]
 801f80e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f810:	003b      	movs	r3, r7
 801f812:	f7ff fec3 	bl	801f59c <__cvt>
 801f816:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f818:	0007      	movs	r7, r0
 801f81a:	2c47      	cmp	r4, #71	@ 0x47
 801f81c:	d12d      	bne.n	801f87a <_printf_float+0x192>
 801f81e:	1cd3      	adds	r3, r2, #3
 801f820:	db02      	blt.n	801f828 <_printf_float+0x140>
 801f822:	686b      	ldr	r3, [r5, #4]
 801f824:	429a      	cmp	r2, r3
 801f826:	dd48      	ble.n	801f8ba <_printf_float+0x1d2>
 801f828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f82a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f82c:	3b02      	subs	r3, #2
 801f82e:	b2db      	uxtb	r3, r3
 801f830:	930c      	str	r3, [sp, #48]	@ 0x30
 801f832:	0028      	movs	r0, r5
 801f834:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f836:	3901      	subs	r1, #1
 801f838:	3050      	adds	r0, #80	@ 0x50
 801f83a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f83c:	f7ff ff14 	bl	801f668 <__exponent>
 801f840:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f842:	0004      	movs	r4, r0
 801f844:	1813      	adds	r3, r2, r0
 801f846:	612b      	str	r3, [r5, #16]
 801f848:	2a01      	cmp	r2, #1
 801f84a:	dc02      	bgt.n	801f852 <_printf_float+0x16a>
 801f84c:	682a      	ldr	r2, [r5, #0]
 801f84e:	07d2      	lsls	r2, r2, #31
 801f850:	d501      	bpl.n	801f856 <_printf_float+0x16e>
 801f852:	3301      	adds	r3, #1
 801f854:	612b      	str	r3, [r5, #16]
 801f856:	2323      	movs	r3, #35	@ 0x23
 801f858:	aa0a      	add	r2, sp, #40	@ 0x28
 801f85a:	189b      	adds	r3, r3, r2
 801f85c:	781b      	ldrb	r3, [r3, #0]
 801f85e:	2b00      	cmp	r3, #0
 801f860:	d100      	bne.n	801f864 <_printf_float+0x17c>
 801f862:	e792      	b.n	801f78a <_printf_float+0xa2>
 801f864:	002b      	movs	r3, r5
 801f866:	222d      	movs	r2, #45	@ 0x2d
 801f868:	3343      	adds	r3, #67	@ 0x43
 801f86a:	701a      	strb	r2, [r3, #0]
 801f86c:	e78d      	b.n	801f78a <_printf_float+0xa2>
 801f86e:	2c47      	cmp	r4, #71	@ 0x47
 801f870:	d1b8      	bne.n	801f7e4 <_printf_float+0xfc>
 801f872:	2b00      	cmp	r3, #0
 801f874:	d1b6      	bne.n	801f7e4 <_printf_float+0xfc>
 801f876:	3301      	adds	r3, #1
 801f878:	e7b3      	b.n	801f7e2 <_printf_float+0xfa>
 801f87a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f87c:	0011      	movs	r1, r2
 801f87e:	2b65      	cmp	r3, #101	@ 0x65
 801f880:	d9d7      	bls.n	801f832 <_printf_float+0x14a>
 801f882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f884:	2b66      	cmp	r3, #102	@ 0x66
 801f886:	d11a      	bne.n	801f8be <_printf_float+0x1d6>
 801f888:	686b      	ldr	r3, [r5, #4]
 801f88a:	2a00      	cmp	r2, #0
 801f88c:	dd09      	ble.n	801f8a2 <_printf_float+0x1ba>
 801f88e:	612a      	str	r2, [r5, #16]
 801f890:	2b00      	cmp	r3, #0
 801f892:	d102      	bne.n	801f89a <_printf_float+0x1b2>
 801f894:	6829      	ldr	r1, [r5, #0]
 801f896:	07c9      	lsls	r1, r1, #31
 801f898:	d50b      	bpl.n	801f8b2 <_printf_float+0x1ca>
 801f89a:	3301      	adds	r3, #1
 801f89c:	189b      	adds	r3, r3, r2
 801f89e:	612b      	str	r3, [r5, #16]
 801f8a0:	e007      	b.n	801f8b2 <_printf_float+0x1ca>
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d103      	bne.n	801f8ae <_printf_float+0x1c6>
 801f8a6:	2201      	movs	r2, #1
 801f8a8:	6829      	ldr	r1, [r5, #0]
 801f8aa:	4211      	tst	r1, r2
 801f8ac:	d000      	beq.n	801f8b0 <_printf_float+0x1c8>
 801f8ae:	1c9a      	adds	r2, r3, #2
 801f8b0:	612a      	str	r2, [r5, #16]
 801f8b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8b4:	2400      	movs	r4, #0
 801f8b6:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f8b8:	e7cd      	b.n	801f856 <_printf_float+0x16e>
 801f8ba:	2367      	movs	r3, #103	@ 0x67
 801f8bc:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f8c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f8c2:	4299      	cmp	r1, r3
 801f8c4:	db06      	blt.n	801f8d4 <_printf_float+0x1ec>
 801f8c6:	682b      	ldr	r3, [r5, #0]
 801f8c8:	6129      	str	r1, [r5, #16]
 801f8ca:	07db      	lsls	r3, r3, #31
 801f8cc:	d5f1      	bpl.n	801f8b2 <_printf_float+0x1ca>
 801f8ce:	3101      	adds	r1, #1
 801f8d0:	6129      	str	r1, [r5, #16]
 801f8d2:	e7ee      	b.n	801f8b2 <_printf_float+0x1ca>
 801f8d4:	2201      	movs	r2, #1
 801f8d6:	2900      	cmp	r1, #0
 801f8d8:	dce0      	bgt.n	801f89c <_printf_float+0x1b4>
 801f8da:	1892      	adds	r2, r2, r2
 801f8dc:	1a52      	subs	r2, r2, r1
 801f8de:	e7dd      	b.n	801f89c <_printf_float+0x1b4>
 801f8e0:	682a      	ldr	r2, [r5, #0]
 801f8e2:	0553      	lsls	r3, r2, #21
 801f8e4:	d408      	bmi.n	801f8f8 <_printf_float+0x210>
 801f8e6:	692b      	ldr	r3, [r5, #16]
 801f8e8:	003a      	movs	r2, r7
 801f8ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f8f0:	47a0      	blx	r4
 801f8f2:	3001      	adds	r0, #1
 801f8f4:	d129      	bne.n	801f94a <_printf_float+0x262>
 801f8f6:	e753      	b.n	801f7a0 <_printf_float+0xb8>
 801f8f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8fa:	2b65      	cmp	r3, #101	@ 0x65
 801f8fc:	d800      	bhi.n	801f900 <_printf_float+0x218>
 801f8fe:	e0da      	b.n	801fab6 <_printf_float+0x3ce>
 801f900:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f902:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f904:	2200      	movs	r2, #0
 801f906:	2300      	movs	r3, #0
 801f908:	f7e0 fdd2 	bl	80004b0 <__aeabi_dcmpeq>
 801f90c:	2800      	cmp	r0, #0
 801f90e:	d033      	beq.n	801f978 <_printf_float+0x290>
 801f910:	2301      	movs	r3, #1
 801f912:	4a37      	ldr	r2, [pc, #220]	@ (801f9f0 <_printf_float+0x308>)
 801f914:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f918:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f91a:	47a0      	blx	r4
 801f91c:	3001      	adds	r0, #1
 801f91e:	d100      	bne.n	801f922 <_printf_float+0x23a>
 801f920:	e73e      	b.n	801f7a0 <_printf_float+0xb8>
 801f922:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f924:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f926:	42b3      	cmp	r3, r6
 801f928:	db02      	blt.n	801f930 <_printf_float+0x248>
 801f92a:	682b      	ldr	r3, [r5, #0]
 801f92c:	07db      	lsls	r3, r3, #31
 801f92e:	d50c      	bpl.n	801f94a <_printf_float+0x262>
 801f930:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f932:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f934:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f936:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f938:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f93a:	47a0      	blx	r4
 801f93c:	2400      	movs	r4, #0
 801f93e:	3001      	adds	r0, #1
 801f940:	d100      	bne.n	801f944 <_printf_float+0x25c>
 801f942:	e72d      	b.n	801f7a0 <_printf_float+0xb8>
 801f944:	1e73      	subs	r3, r6, #1
 801f946:	42a3      	cmp	r3, r4
 801f948:	dc0a      	bgt.n	801f960 <_printf_float+0x278>
 801f94a:	682b      	ldr	r3, [r5, #0]
 801f94c:	079b      	lsls	r3, r3, #30
 801f94e:	d500      	bpl.n	801f952 <_printf_float+0x26a>
 801f950:	e105      	b.n	801fb5e <_printf_float+0x476>
 801f952:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f954:	68e8      	ldr	r0, [r5, #12]
 801f956:	4298      	cmp	r0, r3
 801f958:	db00      	blt.n	801f95c <_printf_float+0x274>
 801f95a:	e723      	b.n	801f7a4 <_printf_float+0xbc>
 801f95c:	0018      	movs	r0, r3
 801f95e:	e721      	b.n	801f7a4 <_printf_float+0xbc>
 801f960:	002a      	movs	r2, r5
 801f962:	2301      	movs	r3, #1
 801f964:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f968:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f96a:	321a      	adds	r2, #26
 801f96c:	47b8      	blx	r7
 801f96e:	3001      	adds	r0, #1
 801f970:	d100      	bne.n	801f974 <_printf_float+0x28c>
 801f972:	e715      	b.n	801f7a0 <_printf_float+0xb8>
 801f974:	3401      	adds	r4, #1
 801f976:	e7e5      	b.n	801f944 <_printf_float+0x25c>
 801f978:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	dc3a      	bgt.n	801f9f4 <_printf_float+0x30c>
 801f97e:	2301      	movs	r3, #1
 801f980:	4a1b      	ldr	r2, [pc, #108]	@ (801f9f0 <_printf_float+0x308>)
 801f982:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f984:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f986:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f988:	47a0      	blx	r4
 801f98a:	3001      	adds	r0, #1
 801f98c:	d100      	bne.n	801f990 <_printf_float+0x2a8>
 801f98e:	e707      	b.n	801f7a0 <_printf_float+0xb8>
 801f990:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f992:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f994:	4333      	orrs	r3, r6
 801f996:	d102      	bne.n	801f99e <_printf_float+0x2b6>
 801f998:	682b      	ldr	r3, [r5, #0]
 801f99a:	07db      	lsls	r3, r3, #31
 801f99c:	d5d5      	bpl.n	801f94a <_printf_float+0x262>
 801f99e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f9a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f9a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f9a8:	47a0      	blx	r4
 801f9aa:	2300      	movs	r3, #0
 801f9ac:	3001      	adds	r0, #1
 801f9ae:	d100      	bne.n	801f9b2 <_printf_float+0x2ca>
 801f9b0:	e6f6      	b.n	801f7a0 <_printf_float+0xb8>
 801f9b2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f9b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f9b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f9b8:	425b      	negs	r3, r3
 801f9ba:	4293      	cmp	r3, r2
 801f9bc:	dc01      	bgt.n	801f9c2 <_printf_float+0x2da>
 801f9be:	0033      	movs	r3, r6
 801f9c0:	e792      	b.n	801f8e8 <_printf_float+0x200>
 801f9c2:	002a      	movs	r2, r5
 801f9c4:	2301      	movs	r3, #1
 801f9c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f9cc:	321a      	adds	r2, #26
 801f9ce:	47a0      	blx	r4
 801f9d0:	3001      	adds	r0, #1
 801f9d2:	d100      	bne.n	801f9d6 <_printf_float+0x2ee>
 801f9d4:	e6e4      	b.n	801f7a0 <_printf_float+0xb8>
 801f9d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9d8:	3301      	adds	r3, #1
 801f9da:	e7ea      	b.n	801f9b2 <_printf_float+0x2ca>
 801f9dc:	7fefffff 	.word	0x7fefffff
 801f9e0:	08025ea9 	.word	0x08025ea9
 801f9e4:	08025ead 	.word	0x08025ead
 801f9e8:	08025eb1 	.word	0x08025eb1
 801f9ec:	08025eb5 	.word	0x08025eb5
 801f9f0:	08025eb9 	.word	0x08025eb9
 801f9f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f9f6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f9f8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f9fa:	429e      	cmp	r6, r3
 801f9fc:	dd00      	ble.n	801fa00 <_printf_float+0x318>
 801f9fe:	001e      	movs	r6, r3
 801fa00:	2e00      	cmp	r6, #0
 801fa02:	dc31      	bgt.n	801fa68 <_printf_float+0x380>
 801fa04:	43f3      	mvns	r3, r6
 801fa06:	2400      	movs	r4, #0
 801fa08:	17db      	asrs	r3, r3, #31
 801fa0a:	4033      	ands	r3, r6
 801fa0c:	930e      	str	r3, [sp, #56]	@ 0x38
 801fa0e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fa10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa12:	1af3      	subs	r3, r6, r3
 801fa14:	42a3      	cmp	r3, r4
 801fa16:	dc30      	bgt.n	801fa7a <_printf_float+0x392>
 801fa18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa1a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa1c:	429a      	cmp	r2, r3
 801fa1e:	dc38      	bgt.n	801fa92 <_printf_float+0x3aa>
 801fa20:	682b      	ldr	r3, [r5, #0]
 801fa22:	07db      	lsls	r3, r3, #31
 801fa24:	d435      	bmi.n	801fa92 <_printf_float+0x3aa>
 801fa26:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fa28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa2c:	1b9b      	subs	r3, r3, r6
 801fa2e:	1b14      	subs	r4, r2, r4
 801fa30:	429c      	cmp	r4, r3
 801fa32:	dd00      	ble.n	801fa36 <_printf_float+0x34e>
 801fa34:	001c      	movs	r4, r3
 801fa36:	2c00      	cmp	r4, #0
 801fa38:	dc34      	bgt.n	801faa4 <_printf_float+0x3bc>
 801fa3a:	43e3      	mvns	r3, r4
 801fa3c:	2600      	movs	r6, #0
 801fa3e:	17db      	asrs	r3, r3, #31
 801fa40:	401c      	ands	r4, r3
 801fa42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa46:	1ad3      	subs	r3, r2, r3
 801fa48:	1b1b      	subs	r3, r3, r4
 801fa4a:	42b3      	cmp	r3, r6
 801fa4c:	dc00      	bgt.n	801fa50 <_printf_float+0x368>
 801fa4e:	e77c      	b.n	801f94a <_printf_float+0x262>
 801fa50:	002a      	movs	r2, r5
 801fa52:	2301      	movs	r3, #1
 801fa54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa58:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fa5a:	321a      	adds	r2, #26
 801fa5c:	47b8      	blx	r7
 801fa5e:	3001      	adds	r0, #1
 801fa60:	d100      	bne.n	801fa64 <_printf_float+0x37c>
 801fa62:	e69d      	b.n	801f7a0 <_printf_float+0xb8>
 801fa64:	3601      	adds	r6, #1
 801fa66:	e7ec      	b.n	801fa42 <_printf_float+0x35a>
 801fa68:	0033      	movs	r3, r6
 801fa6a:	003a      	movs	r2, r7
 801fa6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa70:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fa72:	47a0      	blx	r4
 801fa74:	3001      	adds	r0, #1
 801fa76:	d1c5      	bne.n	801fa04 <_printf_float+0x31c>
 801fa78:	e692      	b.n	801f7a0 <_printf_float+0xb8>
 801fa7a:	002a      	movs	r2, r5
 801fa7c:	2301      	movs	r3, #1
 801fa7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa82:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fa84:	321a      	adds	r2, #26
 801fa86:	47b0      	blx	r6
 801fa88:	3001      	adds	r0, #1
 801fa8a:	d100      	bne.n	801fa8e <_printf_float+0x3a6>
 801fa8c:	e688      	b.n	801f7a0 <_printf_float+0xb8>
 801fa8e:	3401      	adds	r4, #1
 801fa90:	e7bd      	b.n	801fa0e <_printf_float+0x326>
 801fa92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fa96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa9a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fa9c:	47a0      	blx	r4
 801fa9e:	3001      	adds	r0, #1
 801faa0:	d1c1      	bne.n	801fa26 <_printf_float+0x33e>
 801faa2:	e67d      	b.n	801f7a0 <_printf_float+0xb8>
 801faa4:	19ba      	adds	r2, r7, r6
 801faa6:	0023      	movs	r3, r4
 801faa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801faaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801faac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801faae:	47b0      	blx	r6
 801fab0:	3001      	adds	r0, #1
 801fab2:	d1c2      	bne.n	801fa3a <_printf_float+0x352>
 801fab4:	e674      	b.n	801f7a0 <_printf_float+0xb8>
 801fab6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fab8:	930c      	str	r3, [sp, #48]	@ 0x30
 801faba:	2b01      	cmp	r3, #1
 801fabc:	dc02      	bgt.n	801fac4 <_printf_float+0x3dc>
 801fabe:	2301      	movs	r3, #1
 801fac0:	421a      	tst	r2, r3
 801fac2:	d039      	beq.n	801fb38 <_printf_float+0x450>
 801fac4:	2301      	movs	r3, #1
 801fac6:	003a      	movs	r2, r7
 801fac8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801faca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801facc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801face:	47b0      	blx	r6
 801fad0:	3001      	adds	r0, #1
 801fad2:	d100      	bne.n	801fad6 <_printf_float+0x3ee>
 801fad4:	e664      	b.n	801f7a0 <_printf_float+0xb8>
 801fad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fad8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fada:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fadc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fade:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fae0:	47b0      	blx	r6
 801fae2:	3001      	adds	r0, #1
 801fae4:	d100      	bne.n	801fae8 <_printf_float+0x400>
 801fae6:	e65b      	b.n	801f7a0 <_printf_float+0xb8>
 801fae8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801faea:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801faec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801faee:	2200      	movs	r2, #0
 801faf0:	3b01      	subs	r3, #1
 801faf2:	930c      	str	r3, [sp, #48]	@ 0x30
 801faf4:	2300      	movs	r3, #0
 801faf6:	f7e0 fcdb 	bl	80004b0 <__aeabi_dcmpeq>
 801fafa:	2800      	cmp	r0, #0
 801fafc:	d11a      	bne.n	801fb34 <_printf_float+0x44c>
 801fafe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb00:	1c7a      	adds	r2, r7, #1
 801fb02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb06:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fb08:	47b0      	blx	r6
 801fb0a:	3001      	adds	r0, #1
 801fb0c:	d10e      	bne.n	801fb2c <_printf_float+0x444>
 801fb0e:	e647      	b.n	801f7a0 <_printf_float+0xb8>
 801fb10:	002a      	movs	r2, r5
 801fb12:	2301      	movs	r3, #1
 801fb14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb18:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fb1a:	321a      	adds	r2, #26
 801fb1c:	47b8      	blx	r7
 801fb1e:	3001      	adds	r0, #1
 801fb20:	d100      	bne.n	801fb24 <_printf_float+0x43c>
 801fb22:	e63d      	b.n	801f7a0 <_printf_float+0xb8>
 801fb24:	3601      	adds	r6, #1
 801fb26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb28:	429e      	cmp	r6, r3
 801fb2a:	dbf1      	blt.n	801fb10 <_printf_float+0x428>
 801fb2c:	002a      	movs	r2, r5
 801fb2e:	0023      	movs	r3, r4
 801fb30:	3250      	adds	r2, #80	@ 0x50
 801fb32:	e6da      	b.n	801f8ea <_printf_float+0x202>
 801fb34:	2600      	movs	r6, #0
 801fb36:	e7f6      	b.n	801fb26 <_printf_float+0x43e>
 801fb38:	003a      	movs	r2, r7
 801fb3a:	e7e2      	b.n	801fb02 <_printf_float+0x41a>
 801fb3c:	002a      	movs	r2, r5
 801fb3e:	2301      	movs	r3, #1
 801fb40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb44:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fb46:	3219      	adds	r2, #25
 801fb48:	47b0      	blx	r6
 801fb4a:	3001      	adds	r0, #1
 801fb4c:	d100      	bne.n	801fb50 <_printf_float+0x468>
 801fb4e:	e627      	b.n	801f7a0 <_printf_float+0xb8>
 801fb50:	3401      	adds	r4, #1
 801fb52:	68eb      	ldr	r3, [r5, #12]
 801fb54:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801fb56:	1a9b      	subs	r3, r3, r2
 801fb58:	42a3      	cmp	r3, r4
 801fb5a:	dcef      	bgt.n	801fb3c <_printf_float+0x454>
 801fb5c:	e6f9      	b.n	801f952 <_printf_float+0x26a>
 801fb5e:	2400      	movs	r4, #0
 801fb60:	e7f7      	b.n	801fb52 <_printf_float+0x46a>
 801fb62:	46c0      	nop			@ (mov r8, r8)

0801fb64 <_printf_common>:
 801fb64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fb66:	0016      	movs	r6, r2
 801fb68:	9301      	str	r3, [sp, #4]
 801fb6a:	688a      	ldr	r2, [r1, #8]
 801fb6c:	690b      	ldr	r3, [r1, #16]
 801fb6e:	000c      	movs	r4, r1
 801fb70:	9000      	str	r0, [sp, #0]
 801fb72:	4293      	cmp	r3, r2
 801fb74:	da00      	bge.n	801fb78 <_printf_common+0x14>
 801fb76:	0013      	movs	r3, r2
 801fb78:	0022      	movs	r2, r4
 801fb7a:	6033      	str	r3, [r6, #0]
 801fb7c:	3243      	adds	r2, #67	@ 0x43
 801fb7e:	7812      	ldrb	r2, [r2, #0]
 801fb80:	2a00      	cmp	r2, #0
 801fb82:	d001      	beq.n	801fb88 <_printf_common+0x24>
 801fb84:	3301      	adds	r3, #1
 801fb86:	6033      	str	r3, [r6, #0]
 801fb88:	6823      	ldr	r3, [r4, #0]
 801fb8a:	069b      	lsls	r3, r3, #26
 801fb8c:	d502      	bpl.n	801fb94 <_printf_common+0x30>
 801fb8e:	6833      	ldr	r3, [r6, #0]
 801fb90:	3302      	adds	r3, #2
 801fb92:	6033      	str	r3, [r6, #0]
 801fb94:	6822      	ldr	r2, [r4, #0]
 801fb96:	2306      	movs	r3, #6
 801fb98:	0015      	movs	r5, r2
 801fb9a:	401d      	ands	r5, r3
 801fb9c:	421a      	tst	r2, r3
 801fb9e:	d027      	beq.n	801fbf0 <_printf_common+0x8c>
 801fba0:	0023      	movs	r3, r4
 801fba2:	3343      	adds	r3, #67	@ 0x43
 801fba4:	781b      	ldrb	r3, [r3, #0]
 801fba6:	1e5a      	subs	r2, r3, #1
 801fba8:	4193      	sbcs	r3, r2
 801fbaa:	6822      	ldr	r2, [r4, #0]
 801fbac:	0692      	lsls	r2, r2, #26
 801fbae:	d430      	bmi.n	801fc12 <_printf_common+0xae>
 801fbb0:	0022      	movs	r2, r4
 801fbb2:	9901      	ldr	r1, [sp, #4]
 801fbb4:	9800      	ldr	r0, [sp, #0]
 801fbb6:	9d08      	ldr	r5, [sp, #32]
 801fbb8:	3243      	adds	r2, #67	@ 0x43
 801fbba:	47a8      	blx	r5
 801fbbc:	3001      	adds	r0, #1
 801fbbe:	d025      	beq.n	801fc0c <_printf_common+0xa8>
 801fbc0:	2206      	movs	r2, #6
 801fbc2:	6823      	ldr	r3, [r4, #0]
 801fbc4:	2500      	movs	r5, #0
 801fbc6:	4013      	ands	r3, r2
 801fbc8:	2b04      	cmp	r3, #4
 801fbca:	d105      	bne.n	801fbd8 <_printf_common+0x74>
 801fbcc:	6833      	ldr	r3, [r6, #0]
 801fbce:	68e5      	ldr	r5, [r4, #12]
 801fbd0:	1aed      	subs	r5, r5, r3
 801fbd2:	43eb      	mvns	r3, r5
 801fbd4:	17db      	asrs	r3, r3, #31
 801fbd6:	401d      	ands	r5, r3
 801fbd8:	68a3      	ldr	r3, [r4, #8]
 801fbda:	6922      	ldr	r2, [r4, #16]
 801fbdc:	4293      	cmp	r3, r2
 801fbde:	dd01      	ble.n	801fbe4 <_printf_common+0x80>
 801fbe0:	1a9b      	subs	r3, r3, r2
 801fbe2:	18ed      	adds	r5, r5, r3
 801fbe4:	2600      	movs	r6, #0
 801fbe6:	42b5      	cmp	r5, r6
 801fbe8:	d120      	bne.n	801fc2c <_printf_common+0xc8>
 801fbea:	2000      	movs	r0, #0
 801fbec:	e010      	b.n	801fc10 <_printf_common+0xac>
 801fbee:	3501      	adds	r5, #1
 801fbf0:	68e3      	ldr	r3, [r4, #12]
 801fbf2:	6832      	ldr	r2, [r6, #0]
 801fbf4:	1a9b      	subs	r3, r3, r2
 801fbf6:	42ab      	cmp	r3, r5
 801fbf8:	ddd2      	ble.n	801fba0 <_printf_common+0x3c>
 801fbfa:	0022      	movs	r2, r4
 801fbfc:	2301      	movs	r3, #1
 801fbfe:	9901      	ldr	r1, [sp, #4]
 801fc00:	9800      	ldr	r0, [sp, #0]
 801fc02:	9f08      	ldr	r7, [sp, #32]
 801fc04:	3219      	adds	r2, #25
 801fc06:	47b8      	blx	r7
 801fc08:	3001      	adds	r0, #1
 801fc0a:	d1f0      	bne.n	801fbee <_printf_common+0x8a>
 801fc0c:	2001      	movs	r0, #1
 801fc0e:	4240      	negs	r0, r0
 801fc10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fc12:	2030      	movs	r0, #48	@ 0x30
 801fc14:	18e1      	adds	r1, r4, r3
 801fc16:	3143      	adds	r1, #67	@ 0x43
 801fc18:	7008      	strb	r0, [r1, #0]
 801fc1a:	0021      	movs	r1, r4
 801fc1c:	1c5a      	adds	r2, r3, #1
 801fc1e:	3145      	adds	r1, #69	@ 0x45
 801fc20:	7809      	ldrb	r1, [r1, #0]
 801fc22:	18a2      	adds	r2, r4, r2
 801fc24:	3243      	adds	r2, #67	@ 0x43
 801fc26:	3302      	adds	r3, #2
 801fc28:	7011      	strb	r1, [r2, #0]
 801fc2a:	e7c1      	b.n	801fbb0 <_printf_common+0x4c>
 801fc2c:	0022      	movs	r2, r4
 801fc2e:	2301      	movs	r3, #1
 801fc30:	9901      	ldr	r1, [sp, #4]
 801fc32:	9800      	ldr	r0, [sp, #0]
 801fc34:	9f08      	ldr	r7, [sp, #32]
 801fc36:	321a      	adds	r2, #26
 801fc38:	47b8      	blx	r7
 801fc3a:	3001      	adds	r0, #1
 801fc3c:	d0e6      	beq.n	801fc0c <_printf_common+0xa8>
 801fc3e:	3601      	adds	r6, #1
 801fc40:	e7d1      	b.n	801fbe6 <_printf_common+0x82>
	...

0801fc44 <_printf_i>:
 801fc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc46:	b08b      	sub	sp, #44	@ 0x2c
 801fc48:	9206      	str	r2, [sp, #24]
 801fc4a:	000a      	movs	r2, r1
 801fc4c:	3243      	adds	r2, #67	@ 0x43
 801fc4e:	9307      	str	r3, [sp, #28]
 801fc50:	9005      	str	r0, [sp, #20]
 801fc52:	9203      	str	r2, [sp, #12]
 801fc54:	7e0a      	ldrb	r2, [r1, #24]
 801fc56:	000c      	movs	r4, r1
 801fc58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fc5a:	2a78      	cmp	r2, #120	@ 0x78
 801fc5c:	d809      	bhi.n	801fc72 <_printf_i+0x2e>
 801fc5e:	2a62      	cmp	r2, #98	@ 0x62
 801fc60:	d80b      	bhi.n	801fc7a <_printf_i+0x36>
 801fc62:	2a00      	cmp	r2, #0
 801fc64:	d100      	bne.n	801fc68 <_printf_i+0x24>
 801fc66:	e0bc      	b.n	801fde2 <_printf_i+0x19e>
 801fc68:	497b      	ldr	r1, [pc, #492]	@ (801fe58 <_printf_i+0x214>)
 801fc6a:	9104      	str	r1, [sp, #16]
 801fc6c:	2a58      	cmp	r2, #88	@ 0x58
 801fc6e:	d100      	bne.n	801fc72 <_printf_i+0x2e>
 801fc70:	e090      	b.n	801fd94 <_printf_i+0x150>
 801fc72:	0025      	movs	r5, r4
 801fc74:	3542      	adds	r5, #66	@ 0x42
 801fc76:	702a      	strb	r2, [r5, #0]
 801fc78:	e022      	b.n	801fcc0 <_printf_i+0x7c>
 801fc7a:	0010      	movs	r0, r2
 801fc7c:	3863      	subs	r0, #99	@ 0x63
 801fc7e:	2815      	cmp	r0, #21
 801fc80:	d8f7      	bhi.n	801fc72 <_printf_i+0x2e>
 801fc82:	f7e0 fa85 	bl	8000190 <__gnu_thumb1_case_shi>
 801fc86:	0016      	.short	0x0016
 801fc88:	fff6001f 	.word	0xfff6001f
 801fc8c:	fff6fff6 	.word	0xfff6fff6
 801fc90:	001ffff6 	.word	0x001ffff6
 801fc94:	fff6fff6 	.word	0xfff6fff6
 801fc98:	fff6fff6 	.word	0xfff6fff6
 801fc9c:	003600a1 	.word	0x003600a1
 801fca0:	fff60080 	.word	0xfff60080
 801fca4:	00b2fff6 	.word	0x00b2fff6
 801fca8:	0036fff6 	.word	0x0036fff6
 801fcac:	fff6fff6 	.word	0xfff6fff6
 801fcb0:	0084      	.short	0x0084
 801fcb2:	0025      	movs	r5, r4
 801fcb4:	681a      	ldr	r2, [r3, #0]
 801fcb6:	3542      	adds	r5, #66	@ 0x42
 801fcb8:	1d11      	adds	r1, r2, #4
 801fcba:	6019      	str	r1, [r3, #0]
 801fcbc:	6813      	ldr	r3, [r2, #0]
 801fcbe:	702b      	strb	r3, [r5, #0]
 801fcc0:	2301      	movs	r3, #1
 801fcc2:	e0a0      	b.n	801fe06 <_printf_i+0x1c2>
 801fcc4:	6818      	ldr	r0, [r3, #0]
 801fcc6:	6809      	ldr	r1, [r1, #0]
 801fcc8:	1d02      	adds	r2, r0, #4
 801fcca:	060d      	lsls	r5, r1, #24
 801fccc:	d50b      	bpl.n	801fce6 <_printf_i+0xa2>
 801fcce:	6806      	ldr	r6, [r0, #0]
 801fcd0:	601a      	str	r2, [r3, #0]
 801fcd2:	2e00      	cmp	r6, #0
 801fcd4:	da03      	bge.n	801fcde <_printf_i+0x9a>
 801fcd6:	232d      	movs	r3, #45	@ 0x2d
 801fcd8:	9a03      	ldr	r2, [sp, #12]
 801fcda:	4276      	negs	r6, r6
 801fcdc:	7013      	strb	r3, [r2, #0]
 801fcde:	4b5e      	ldr	r3, [pc, #376]	@ (801fe58 <_printf_i+0x214>)
 801fce0:	270a      	movs	r7, #10
 801fce2:	9304      	str	r3, [sp, #16]
 801fce4:	e018      	b.n	801fd18 <_printf_i+0xd4>
 801fce6:	6806      	ldr	r6, [r0, #0]
 801fce8:	601a      	str	r2, [r3, #0]
 801fcea:	0649      	lsls	r1, r1, #25
 801fcec:	d5f1      	bpl.n	801fcd2 <_printf_i+0x8e>
 801fcee:	b236      	sxth	r6, r6
 801fcf0:	e7ef      	b.n	801fcd2 <_printf_i+0x8e>
 801fcf2:	6808      	ldr	r0, [r1, #0]
 801fcf4:	6819      	ldr	r1, [r3, #0]
 801fcf6:	c940      	ldmia	r1!, {r6}
 801fcf8:	0605      	lsls	r5, r0, #24
 801fcfa:	d402      	bmi.n	801fd02 <_printf_i+0xbe>
 801fcfc:	0640      	lsls	r0, r0, #25
 801fcfe:	d500      	bpl.n	801fd02 <_printf_i+0xbe>
 801fd00:	b2b6      	uxth	r6, r6
 801fd02:	6019      	str	r1, [r3, #0]
 801fd04:	4b54      	ldr	r3, [pc, #336]	@ (801fe58 <_printf_i+0x214>)
 801fd06:	270a      	movs	r7, #10
 801fd08:	9304      	str	r3, [sp, #16]
 801fd0a:	2a6f      	cmp	r2, #111	@ 0x6f
 801fd0c:	d100      	bne.n	801fd10 <_printf_i+0xcc>
 801fd0e:	3f02      	subs	r7, #2
 801fd10:	0023      	movs	r3, r4
 801fd12:	2200      	movs	r2, #0
 801fd14:	3343      	adds	r3, #67	@ 0x43
 801fd16:	701a      	strb	r2, [r3, #0]
 801fd18:	6863      	ldr	r3, [r4, #4]
 801fd1a:	60a3      	str	r3, [r4, #8]
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	db03      	blt.n	801fd28 <_printf_i+0xe4>
 801fd20:	2104      	movs	r1, #4
 801fd22:	6822      	ldr	r2, [r4, #0]
 801fd24:	438a      	bics	r2, r1
 801fd26:	6022      	str	r2, [r4, #0]
 801fd28:	2e00      	cmp	r6, #0
 801fd2a:	d102      	bne.n	801fd32 <_printf_i+0xee>
 801fd2c:	9d03      	ldr	r5, [sp, #12]
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d00c      	beq.n	801fd4c <_printf_i+0x108>
 801fd32:	9d03      	ldr	r5, [sp, #12]
 801fd34:	0030      	movs	r0, r6
 801fd36:	0039      	movs	r1, r7
 801fd38:	f7e0 faba 	bl	80002b0 <__aeabi_uidivmod>
 801fd3c:	9b04      	ldr	r3, [sp, #16]
 801fd3e:	3d01      	subs	r5, #1
 801fd40:	5c5b      	ldrb	r3, [r3, r1]
 801fd42:	702b      	strb	r3, [r5, #0]
 801fd44:	0033      	movs	r3, r6
 801fd46:	0006      	movs	r6, r0
 801fd48:	429f      	cmp	r7, r3
 801fd4a:	d9f3      	bls.n	801fd34 <_printf_i+0xf0>
 801fd4c:	2f08      	cmp	r7, #8
 801fd4e:	d109      	bne.n	801fd64 <_printf_i+0x120>
 801fd50:	6823      	ldr	r3, [r4, #0]
 801fd52:	07db      	lsls	r3, r3, #31
 801fd54:	d506      	bpl.n	801fd64 <_printf_i+0x120>
 801fd56:	6862      	ldr	r2, [r4, #4]
 801fd58:	6923      	ldr	r3, [r4, #16]
 801fd5a:	429a      	cmp	r2, r3
 801fd5c:	dc02      	bgt.n	801fd64 <_printf_i+0x120>
 801fd5e:	2330      	movs	r3, #48	@ 0x30
 801fd60:	3d01      	subs	r5, #1
 801fd62:	702b      	strb	r3, [r5, #0]
 801fd64:	9b03      	ldr	r3, [sp, #12]
 801fd66:	1b5b      	subs	r3, r3, r5
 801fd68:	6123      	str	r3, [r4, #16]
 801fd6a:	9b07      	ldr	r3, [sp, #28]
 801fd6c:	0021      	movs	r1, r4
 801fd6e:	9300      	str	r3, [sp, #0]
 801fd70:	9805      	ldr	r0, [sp, #20]
 801fd72:	9b06      	ldr	r3, [sp, #24]
 801fd74:	aa09      	add	r2, sp, #36	@ 0x24
 801fd76:	f7ff fef5 	bl	801fb64 <_printf_common>
 801fd7a:	3001      	adds	r0, #1
 801fd7c:	d148      	bne.n	801fe10 <_printf_i+0x1cc>
 801fd7e:	2001      	movs	r0, #1
 801fd80:	4240      	negs	r0, r0
 801fd82:	b00b      	add	sp, #44	@ 0x2c
 801fd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd86:	2220      	movs	r2, #32
 801fd88:	6809      	ldr	r1, [r1, #0]
 801fd8a:	430a      	orrs	r2, r1
 801fd8c:	6022      	str	r2, [r4, #0]
 801fd8e:	2278      	movs	r2, #120	@ 0x78
 801fd90:	4932      	ldr	r1, [pc, #200]	@ (801fe5c <_printf_i+0x218>)
 801fd92:	9104      	str	r1, [sp, #16]
 801fd94:	0021      	movs	r1, r4
 801fd96:	3145      	adds	r1, #69	@ 0x45
 801fd98:	700a      	strb	r2, [r1, #0]
 801fd9a:	6819      	ldr	r1, [r3, #0]
 801fd9c:	6822      	ldr	r2, [r4, #0]
 801fd9e:	c940      	ldmia	r1!, {r6}
 801fda0:	0610      	lsls	r0, r2, #24
 801fda2:	d402      	bmi.n	801fdaa <_printf_i+0x166>
 801fda4:	0650      	lsls	r0, r2, #25
 801fda6:	d500      	bpl.n	801fdaa <_printf_i+0x166>
 801fda8:	b2b6      	uxth	r6, r6
 801fdaa:	6019      	str	r1, [r3, #0]
 801fdac:	07d3      	lsls	r3, r2, #31
 801fdae:	d502      	bpl.n	801fdb6 <_printf_i+0x172>
 801fdb0:	2320      	movs	r3, #32
 801fdb2:	4313      	orrs	r3, r2
 801fdb4:	6023      	str	r3, [r4, #0]
 801fdb6:	2e00      	cmp	r6, #0
 801fdb8:	d001      	beq.n	801fdbe <_printf_i+0x17a>
 801fdba:	2710      	movs	r7, #16
 801fdbc:	e7a8      	b.n	801fd10 <_printf_i+0xcc>
 801fdbe:	2220      	movs	r2, #32
 801fdc0:	6823      	ldr	r3, [r4, #0]
 801fdc2:	4393      	bics	r3, r2
 801fdc4:	6023      	str	r3, [r4, #0]
 801fdc6:	e7f8      	b.n	801fdba <_printf_i+0x176>
 801fdc8:	681a      	ldr	r2, [r3, #0]
 801fdca:	680d      	ldr	r5, [r1, #0]
 801fdcc:	1d10      	adds	r0, r2, #4
 801fdce:	6949      	ldr	r1, [r1, #20]
 801fdd0:	6018      	str	r0, [r3, #0]
 801fdd2:	6813      	ldr	r3, [r2, #0]
 801fdd4:	062e      	lsls	r6, r5, #24
 801fdd6:	d501      	bpl.n	801fddc <_printf_i+0x198>
 801fdd8:	6019      	str	r1, [r3, #0]
 801fdda:	e002      	b.n	801fde2 <_printf_i+0x19e>
 801fddc:	066d      	lsls	r5, r5, #25
 801fdde:	d5fb      	bpl.n	801fdd8 <_printf_i+0x194>
 801fde0:	8019      	strh	r1, [r3, #0]
 801fde2:	2300      	movs	r3, #0
 801fde4:	9d03      	ldr	r5, [sp, #12]
 801fde6:	6123      	str	r3, [r4, #16]
 801fde8:	e7bf      	b.n	801fd6a <_printf_i+0x126>
 801fdea:	681a      	ldr	r2, [r3, #0]
 801fdec:	1d11      	adds	r1, r2, #4
 801fdee:	6019      	str	r1, [r3, #0]
 801fdf0:	6815      	ldr	r5, [r2, #0]
 801fdf2:	2100      	movs	r1, #0
 801fdf4:	0028      	movs	r0, r5
 801fdf6:	6862      	ldr	r2, [r4, #4]
 801fdf8:	f000 fb7b 	bl	80204f2 <memchr>
 801fdfc:	2800      	cmp	r0, #0
 801fdfe:	d001      	beq.n	801fe04 <_printf_i+0x1c0>
 801fe00:	1b40      	subs	r0, r0, r5
 801fe02:	6060      	str	r0, [r4, #4]
 801fe04:	6863      	ldr	r3, [r4, #4]
 801fe06:	6123      	str	r3, [r4, #16]
 801fe08:	2300      	movs	r3, #0
 801fe0a:	9a03      	ldr	r2, [sp, #12]
 801fe0c:	7013      	strb	r3, [r2, #0]
 801fe0e:	e7ac      	b.n	801fd6a <_printf_i+0x126>
 801fe10:	002a      	movs	r2, r5
 801fe12:	6923      	ldr	r3, [r4, #16]
 801fe14:	9906      	ldr	r1, [sp, #24]
 801fe16:	9805      	ldr	r0, [sp, #20]
 801fe18:	9d07      	ldr	r5, [sp, #28]
 801fe1a:	47a8      	blx	r5
 801fe1c:	3001      	adds	r0, #1
 801fe1e:	d0ae      	beq.n	801fd7e <_printf_i+0x13a>
 801fe20:	6823      	ldr	r3, [r4, #0]
 801fe22:	079b      	lsls	r3, r3, #30
 801fe24:	d415      	bmi.n	801fe52 <_printf_i+0x20e>
 801fe26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe28:	68e0      	ldr	r0, [r4, #12]
 801fe2a:	4298      	cmp	r0, r3
 801fe2c:	daa9      	bge.n	801fd82 <_printf_i+0x13e>
 801fe2e:	0018      	movs	r0, r3
 801fe30:	e7a7      	b.n	801fd82 <_printf_i+0x13e>
 801fe32:	0022      	movs	r2, r4
 801fe34:	2301      	movs	r3, #1
 801fe36:	9906      	ldr	r1, [sp, #24]
 801fe38:	9805      	ldr	r0, [sp, #20]
 801fe3a:	9e07      	ldr	r6, [sp, #28]
 801fe3c:	3219      	adds	r2, #25
 801fe3e:	47b0      	blx	r6
 801fe40:	3001      	adds	r0, #1
 801fe42:	d09c      	beq.n	801fd7e <_printf_i+0x13a>
 801fe44:	3501      	adds	r5, #1
 801fe46:	68e3      	ldr	r3, [r4, #12]
 801fe48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe4a:	1a9b      	subs	r3, r3, r2
 801fe4c:	42ab      	cmp	r3, r5
 801fe4e:	dcf0      	bgt.n	801fe32 <_printf_i+0x1ee>
 801fe50:	e7e9      	b.n	801fe26 <_printf_i+0x1e2>
 801fe52:	2500      	movs	r5, #0
 801fe54:	e7f7      	b.n	801fe46 <_printf_i+0x202>
 801fe56:	46c0      	nop			@ (mov r8, r8)
 801fe58:	08025ebb 	.word	0x08025ebb
 801fe5c:	08025ecc 	.word	0x08025ecc

0801fe60 <std>:
 801fe60:	2300      	movs	r3, #0
 801fe62:	b510      	push	{r4, lr}
 801fe64:	0004      	movs	r4, r0
 801fe66:	6003      	str	r3, [r0, #0]
 801fe68:	6043      	str	r3, [r0, #4]
 801fe6a:	6083      	str	r3, [r0, #8]
 801fe6c:	8181      	strh	r1, [r0, #12]
 801fe6e:	6643      	str	r3, [r0, #100]	@ 0x64
 801fe70:	81c2      	strh	r2, [r0, #14]
 801fe72:	6103      	str	r3, [r0, #16]
 801fe74:	6143      	str	r3, [r0, #20]
 801fe76:	6183      	str	r3, [r0, #24]
 801fe78:	0019      	movs	r1, r3
 801fe7a:	2208      	movs	r2, #8
 801fe7c:	305c      	adds	r0, #92	@ 0x5c
 801fe7e:	f000 fa67 	bl	8020350 <memset>
 801fe82:	4b0b      	ldr	r3, [pc, #44]	@ (801feb0 <std+0x50>)
 801fe84:	6224      	str	r4, [r4, #32]
 801fe86:	6263      	str	r3, [r4, #36]	@ 0x24
 801fe88:	4b0a      	ldr	r3, [pc, #40]	@ (801feb4 <std+0x54>)
 801fe8a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fe8c:	4b0a      	ldr	r3, [pc, #40]	@ (801feb8 <std+0x58>)
 801fe8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fe90:	4b0a      	ldr	r3, [pc, #40]	@ (801febc <std+0x5c>)
 801fe92:	6323      	str	r3, [r4, #48]	@ 0x30
 801fe94:	4b0a      	ldr	r3, [pc, #40]	@ (801fec0 <std+0x60>)
 801fe96:	429c      	cmp	r4, r3
 801fe98:	d005      	beq.n	801fea6 <std+0x46>
 801fe9a:	4b0a      	ldr	r3, [pc, #40]	@ (801fec4 <std+0x64>)
 801fe9c:	429c      	cmp	r4, r3
 801fe9e:	d002      	beq.n	801fea6 <std+0x46>
 801fea0:	4b09      	ldr	r3, [pc, #36]	@ (801fec8 <std+0x68>)
 801fea2:	429c      	cmp	r4, r3
 801fea4:	d103      	bne.n	801feae <std+0x4e>
 801fea6:	0020      	movs	r0, r4
 801fea8:	3058      	adds	r0, #88	@ 0x58
 801feaa:	f000 fb1f 	bl	80204ec <__retarget_lock_init_recursive>
 801feae:	bd10      	pop	{r4, pc}
 801feb0:	08020109 	.word	0x08020109
 801feb4:	08020131 	.word	0x08020131
 801feb8:	08020169 	.word	0x08020169
 801febc:	08020195 	.word	0x08020195
 801fec0:	20003680 	.word	0x20003680
 801fec4:	200036e8 	.word	0x200036e8
 801fec8:	20003750 	.word	0x20003750

0801fecc <stdio_exit_handler>:
 801fecc:	b510      	push	{r4, lr}
 801fece:	4a03      	ldr	r2, [pc, #12]	@ (801fedc <stdio_exit_handler+0x10>)
 801fed0:	4903      	ldr	r1, [pc, #12]	@ (801fee0 <stdio_exit_handler+0x14>)
 801fed2:	4804      	ldr	r0, [pc, #16]	@ (801fee4 <stdio_exit_handler+0x18>)
 801fed4:	f000 f86c 	bl	801ffb0 <_fwalk_sglue>
 801fed8:	bd10      	pop	{r4, pc}
 801feda:	46c0      	nop			@ (mov r8, r8)
 801fedc:	20000258 	.word	0x20000258
 801fee0:	08022b11 	.word	0x08022b11
 801fee4:	200003d4 	.word	0x200003d4

0801fee8 <cleanup_stdio>:
 801fee8:	6841      	ldr	r1, [r0, #4]
 801feea:	4b0b      	ldr	r3, [pc, #44]	@ (801ff18 <cleanup_stdio+0x30>)
 801feec:	b510      	push	{r4, lr}
 801feee:	0004      	movs	r4, r0
 801fef0:	4299      	cmp	r1, r3
 801fef2:	d001      	beq.n	801fef8 <cleanup_stdio+0x10>
 801fef4:	f002 fe0c 	bl	8022b10 <_fflush_r>
 801fef8:	68a1      	ldr	r1, [r4, #8]
 801fefa:	4b08      	ldr	r3, [pc, #32]	@ (801ff1c <cleanup_stdio+0x34>)
 801fefc:	4299      	cmp	r1, r3
 801fefe:	d002      	beq.n	801ff06 <cleanup_stdio+0x1e>
 801ff00:	0020      	movs	r0, r4
 801ff02:	f002 fe05 	bl	8022b10 <_fflush_r>
 801ff06:	68e1      	ldr	r1, [r4, #12]
 801ff08:	4b05      	ldr	r3, [pc, #20]	@ (801ff20 <cleanup_stdio+0x38>)
 801ff0a:	4299      	cmp	r1, r3
 801ff0c:	d002      	beq.n	801ff14 <cleanup_stdio+0x2c>
 801ff0e:	0020      	movs	r0, r4
 801ff10:	f002 fdfe 	bl	8022b10 <_fflush_r>
 801ff14:	bd10      	pop	{r4, pc}
 801ff16:	46c0      	nop			@ (mov r8, r8)
 801ff18:	20003680 	.word	0x20003680
 801ff1c:	200036e8 	.word	0x200036e8
 801ff20:	20003750 	.word	0x20003750

0801ff24 <global_stdio_init.part.0>:
 801ff24:	b510      	push	{r4, lr}
 801ff26:	4b09      	ldr	r3, [pc, #36]	@ (801ff4c <global_stdio_init.part.0+0x28>)
 801ff28:	4a09      	ldr	r2, [pc, #36]	@ (801ff50 <global_stdio_init.part.0+0x2c>)
 801ff2a:	2104      	movs	r1, #4
 801ff2c:	601a      	str	r2, [r3, #0]
 801ff2e:	4809      	ldr	r0, [pc, #36]	@ (801ff54 <global_stdio_init.part.0+0x30>)
 801ff30:	2200      	movs	r2, #0
 801ff32:	f7ff ff95 	bl	801fe60 <std>
 801ff36:	2201      	movs	r2, #1
 801ff38:	2109      	movs	r1, #9
 801ff3a:	4807      	ldr	r0, [pc, #28]	@ (801ff58 <global_stdio_init.part.0+0x34>)
 801ff3c:	f7ff ff90 	bl	801fe60 <std>
 801ff40:	2202      	movs	r2, #2
 801ff42:	2112      	movs	r1, #18
 801ff44:	4805      	ldr	r0, [pc, #20]	@ (801ff5c <global_stdio_init.part.0+0x38>)
 801ff46:	f7ff ff8b 	bl	801fe60 <std>
 801ff4a:	bd10      	pop	{r4, pc}
 801ff4c:	200037b8 	.word	0x200037b8
 801ff50:	0801fecd 	.word	0x0801fecd
 801ff54:	20003680 	.word	0x20003680
 801ff58:	200036e8 	.word	0x200036e8
 801ff5c:	20003750 	.word	0x20003750

0801ff60 <__sfp_lock_acquire>:
 801ff60:	b510      	push	{r4, lr}
 801ff62:	4802      	ldr	r0, [pc, #8]	@ (801ff6c <__sfp_lock_acquire+0xc>)
 801ff64:	f000 fac3 	bl	80204ee <__retarget_lock_acquire_recursive>
 801ff68:	bd10      	pop	{r4, pc}
 801ff6a:	46c0      	nop			@ (mov r8, r8)
 801ff6c:	200037c1 	.word	0x200037c1

0801ff70 <__sfp_lock_release>:
 801ff70:	b510      	push	{r4, lr}
 801ff72:	4802      	ldr	r0, [pc, #8]	@ (801ff7c <__sfp_lock_release+0xc>)
 801ff74:	f000 fabc 	bl	80204f0 <__retarget_lock_release_recursive>
 801ff78:	bd10      	pop	{r4, pc}
 801ff7a:	46c0      	nop			@ (mov r8, r8)
 801ff7c:	200037c1 	.word	0x200037c1

0801ff80 <__sinit>:
 801ff80:	b510      	push	{r4, lr}
 801ff82:	0004      	movs	r4, r0
 801ff84:	f7ff ffec 	bl	801ff60 <__sfp_lock_acquire>
 801ff88:	6a23      	ldr	r3, [r4, #32]
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	d002      	beq.n	801ff94 <__sinit+0x14>
 801ff8e:	f7ff ffef 	bl	801ff70 <__sfp_lock_release>
 801ff92:	bd10      	pop	{r4, pc}
 801ff94:	4b04      	ldr	r3, [pc, #16]	@ (801ffa8 <__sinit+0x28>)
 801ff96:	6223      	str	r3, [r4, #32]
 801ff98:	4b04      	ldr	r3, [pc, #16]	@ (801ffac <__sinit+0x2c>)
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	2b00      	cmp	r3, #0
 801ff9e:	d1f6      	bne.n	801ff8e <__sinit+0xe>
 801ffa0:	f7ff ffc0 	bl	801ff24 <global_stdio_init.part.0>
 801ffa4:	e7f3      	b.n	801ff8e <__sinit+0xe>
 801ffa6:	46c0      	nop			@ (mov r8, r8)
 801ffa8:	0801fee9 	.word	0x0801fee9
 801ffac:	200037b8 	.word	0x200037b8

0801ffb0 <_fwalk_sglue>:
 801ffb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ffb2:	0014      	movs	r4, r2
 801ffb4:	2600      	movs	r6, #0
 801ffb6:	9000      	str	r0, [sp, #0]
 801ffb8:	9101      	str	r1, [sp, #4]
 801ffba:	68a5      	ldr	r5, [r4, #8]
 801ffbc:	6867      	ldr	r7, [r4, #4]
 801ffbe:	3f01      	subs	r7, #1
 801ffc0:	d504      	bpl.n	801ffcc <_fwalk_sglue+0x1c>
 801ffc2:	6824      	ldr	r4, [r4, #0]
 801ffc4:	2c00      	cmp	r4, #0
 801ffc6:	d1f8      	bne.n	801ffba <_fwalk_sglue+0xa>
 801ffc8:	0030      	movs	r0, r6
 801ffca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ffcc:	89ab      	ldrh	r3, [r5, #12]
 801ffce:	2b01      	cmp	r3, #1
 801ffd0:	d908      	bls.n	801ffe4 <_fwalk_sglue+0x34>
 801ffd2:	220e      	movs	r2, #14
 801ffd4:	5eab      	ldrsh	r3, [r5, r2]
 801ffd6:	3301      	adds	r3, #1
 801ffd8:	d004      	beq.n	801ffe4 <_fwalk_sglue+0x34>
 801ffda:	0029      	movs	r1, r5
 801ffdc:	9800      	ldr	r0, [sp, #0]
 801ffde:	9b01      	ldr	r3, [sp, #4]
 801ffe0:	4798      	blx	r3
 801ffe2:	4306      	orrs	r6, r0
 801ffe4:	3568      	adds	r5, #104	@ 0x68
 801ffe6:	e7ea      	b.n	801ffbe <_fwalk_sglue+0xe>

0801ffe8 <iprintf>:
 801ffe8:	b40f      	push	{r0, r1, r2, r3}
 801ffea:	b507      	push	{r0, r1, r2, lr}
 801ffec:	4905      	ldr	r1, [pc, #20]	@ (8020004 <iprintf+0x1c>)
 801ffee:	ab04      	add	r3, sp, #16
 801fff0:	6808      	ldr	r0, [r1, #0]
 801fff2:	cb04      	ldmia	r3!, {r2}
 801fff4:	6881      	ldr	r1, [r0, #8]
 801fff6:	9301      	str	r3, [sp, #4]
 801fff8:	f002 fbe8 	bl	80227cc <_vfiprintf_r>
 801fffc:	b003      	add	sp, #12
 801fffe:	bc08      	pop	{r3}
 8020000:	b004      	add	sp, #16
 8020002:	4718      	bx	r3
 8020004:	200003d0 	.word	0x200003d0

08020008 <_puts_r>:
 8020008:	6a03      	ldr	r3, [r0, #32]
 802000a:	b570      	push	{r4, r5, r6, lr}
 802000c:	0005      	movs	r5, r0
 802000e:	000e      	movs	r6, r1
 8020010:	6884      	ldr	r4, [r0, #8]
 8020012:	2b00      	cmp	r3, #0
 8020014:	d101      	bne.n	802001a <_puts_r+0x12>
 8020016:	f7ff ffb3 	bl	801ff80 <__sinit>
 802001a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802001c:	07db      	lsls	r3, r3, #31
 802001e:	d405      	bmi.n	802002c <_puts_r+0x24>
 8020020:	89a3      	ldrh	r3, [r4, #12]
 8020022:	059b      	lsls	r3, r3, #22
 8020024:	d402      	bmi.n	802002c <_puts_r+0x24>
 8020026:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020028:	f000 fa61 	bl	80204ee <__retarget_lock_acquire_recursive>
 802002c:	89a3      	ldrh	r3, [r4, #12]
 802002e:	071b      	lsls	r3, r3, #28
 8020030:	d502      	bpl.n	8020038 <_puts_r+0x30>
 8020032:	6923      	ldr	r3, [r4, #16]
 8020034:	2b00      	cmp	r3, #0
 8020036:	d11f      	bne.n	8020078 <_puts_r+0x70>
 8020038:	0021      	movs	r1, r4
 802003a:	0028      	movs	r0, r5
 802003c:	f000 f92a 	bl	8020294 <__swsetup_r>
 8020040:	2800      	cmp	r0, #0
 8020042:	d019      	beq.n	8020078 <_puts_r+0x70>
 8020044:	2501      	movs	r5, #1
 8020046:	426d      	negs	r5, r5
 8020048:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802004a:	07db      	lsls	r3, r3, #31
 802004c:	d405      	bmi.n	802005a <_puts_r+0x52>
 802004e:	89a3      	ldrh	r3, [r4, #12]
 8020050:	059b      	lsls	r3, r3, #22
 8020052:	d402      	bmi.n	802005a <_puts_r+0x52>
 8020054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020056:	f000 fa4b 	bl	80204f0 <__retarget_lock_release_recursive>
 802005a:	0028      	movs	r0, r5
 802005c:	bd70      	pop	{r4, r5, r6, pc}
 802005e:	3601      	adds	r6, #1
 8020060:	60a3      	str	r3, [r4, #8]
 8020062:	2b00      	cmp	r3, #0
 8020064:	da04      	bge.n	8020070 <_puts_r+0x68>
 8020066:	69a2      	ldr	r2, [r4, #24]
 8020068:	429a      	cmp	r2, r3
 802006a:	dc16      	bgt.n	802009a <_puts_r+0x92>
 802006c:	290a      	cmp	r1, #10
 802006e:	d014      	beq.n	802009a <_puts_r+0x92>
 8020070:	6823      	ldr	r3, [r4, #0]
 8020072:	1c5a      	adds	r2, r3, #1
 8020074:	6022      	str	r2, [r4, #0]
 8020076:	7019      	strb	r1, [r3, #0]
 8020078:	68a3      	ldr	r3, [r4, #8]
 802007a:	7831      	ldrb	r1, [r6, #0]
 802007c:	3b01      	subs	r3, #1
 802007e:	2900      	cmp	r1, #0
 8020080:	d1ed      	bne.n	802005e <_puts_r+0x56>
 8020082:	60a3      	str	r3, [r4, #8]
 8020084:	2b00      	cmp	r3, #0
 8020086:	da0f      	bge.n	80200a8 <_puts_r+0xa0>
 8020088:	0022      	movs	r2, r4
 802008a:	0028      	movs	r0, r5
 802008c:	310a      	adds	r1, #10
 802008e:	f000 f8bf 	bl	8020210 <__swbuf_r>
 8020092:	3001      	adds	r0, #1
 8020094:	d0d6      	beq.n	8020044 <_puts_r+0x3c>
 8020096:	250a      	movs	r5, #10
 8020098:	e7d6      	b.n	8020048 <_puts_r+0x40>
 802009a:	0022      	movs	r2, r4
 802009c:	0028      	movs	r0, r5
 802009e:	f000 f8b7 	bl	8020210 <__swbuf_r>
 80200a2:	3001      	adds	r0, #1
 80200a4:	d1e8      	bne.n	8020078 <_puts_r+0x70>
 80200a6:	e7cd      	b.n	8020044 <_puts_r+0x3c>
 80200a8:	6823      	ldr	r3, [r4, #0]
 80200aa:	1c5a      	adds	r2, r3, #1
 80200ac:	6022      	str	r2, [r4, #0]
 80200ae:	220a      	movs	r2, #10
 80200b0:	701a      	strb	r2, [r3, #0]
 80200b2:	e7f0      	b.n	8020096 <_puts_r+0x8e>

080200b4 <puts>:
 80200b4:	b510      	push	{r4, lr}
 80200b6:	4b03      	ldr	r3, [pc, #12]	@ (80200c4 <puts+0x10>)
 80200b8:	0001      	movs	r1, r0
 80200ba:	6818      	ldr	r0, [r3, #0]
 80200bc:	f7ff ffa4 	bl	8020008 <_puts_r>
 80200c0:	bd10      	pop	{r4, pc}
 80200c2:	46c0      	nop			@ (mov r8, r8)
 80200c4:	200003d0 	.word	0x200003d0

080200c8 <siprintf>:
 80200c8:	b40e      	push	{r1, r2, r3}
 80200ca:	b500      	push	{lr}
 80200cc:	490b      	ldr	r1, [pc, #44]	@ (80200fc <siprintf+0x34>)
 80200ce:	b09c      	sub	sp, #112	@ 0x70
 80200d0:	ab1d      	add	r3, sp, #116	@ 0x74
 80200d2:	9002      	str	r0, [sp, #8]
 80200d4:	9006      	str	r0, [sp, #24]
 80200d6:	9107      	str	r1, [sp, #28]
 80200d8:	9104      	str	r1, [sp, #16]
 80200da:	4809      	ldr	r0, [pc, #36]	@ (8020100 <siprintf+0x38>)
 80200dc:	4909      	ldr	r1, [pc, #36]	@ (8020104 <siprintf+0x3c>)
 80200de:	cb04      	ldmia	r3!, {r2}
 80200e0:	9105      	str	r1, [sp, #20]
 80200e2:	6800      	ldr	r0, [r0, #0]
 80200e4:	a902      	add	r1, sp, #8
 80200e6:	9301      	str	r3, [sp, #4]
 80200e8:	f002 fa4a 	bl	8022580 <_svfiprintf_r>
 80200ec:	2200      	movs	r2, #0
 80200ee:	9b02      	ldr	r3, [sp, #8]
 80200f0:	701a      	strb	r2, [r3, #0]
 80200f2:	b01c      	add	sp, #112	@ 0x70
 80200f4:	bc08      	pop	{r3}
 80200f6:	b003      	add	sp, #12
 80200f8:	4718      	bx	r3
 80200fa:	46c0      	nop			@ (mov r8, r8)
 80200fc:	7fffffff 	.word	0x7fffffff
 8020100:	200003d0 	.word	0x200003d0
 8020104:	ffff0208 	.word	0xffff0208

08020108 <__sread>:
 8020108:	b570      	push	{r4, r5, r6, lr}
 802010a:	000c      	movs	r4, r1
 802010c:	250e      	movs	r5, #14
 802010e:	5f49      	ldrsh	r1, [r1, r5]
 8020110:	f000 f99a 	bl	8020448 <_read_r>
 8020114:	2800      	cmp	r0, #0
 8020116:	db03      	blt.n	8020120 <__sread+0x18>
 8020118:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802011a:	181b      	adds	r3, r3, r0
 802011c:	6563      	str	r3, [r4, #84]	@ 0x54
 802011e:	bd70      	pop	{r4, r5, r6, pc}
 8020120:	89a3      	ldrh	r3, [r4, #12]
 8020122:	4a02      	ldr	r2, [pc, #8]	@ (802012c <__sread+0x24>)
 8020124:	4013      	ands	r3, r2
 8020126:	81a3      	strh	r3, [r4, #12]
 8020128:	e7f9      	b.n	802011e <__sread+0x16>
 802012a:	46c0      	nop			@ (mov r8, r8)
 802012c:	ffffefff 	.word	0xffffefff

08020130 <__swrite>:
 8020130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020132:	001f      	movs	r7, r3
 8020134:	898b      	ldrh	r3, [r1, #12]
 8020136:	0005      	movs	r5, r0
 8020138:	000c      	movs	r4, r1
 802013a:	0016      	movs	r6, r2
 802013c:	05db      	lsls	r3, r3, #23
 802013e:	d505      	bpl.n	802014c <__swrite+0x1c>
 8020140:	230e      	movs	r3, #14
 8020142:	5ec9      	ldrsh	r1, [r1, r3]
 8020144:	2200      	movs	r2, #0
 8020146:	2302      	movs	r3, #2
 8020148:	f000 f96a 	bl	8020420 <_lseek_r>
 802014c:	89a3      	ldrh	r3, [r4, #12]
 802014e:	4a05      	ldr	r2, [pc, #20]	@ (8020164 <__swrite+0x34>)
 8020150:	0028      	movs	r0, r5
 8020152:	4013      	ands	r3, r2
 8020154:	81a3      	strh	r3, [r4, #12]
 8020156:	0032      	movs	r2, r6
 8020158:	230e      	movs	r3, #14
 802015a:	5ee1      	ldrsh	r1, [r4, r3]
 802015c:	003b      	movs	r3, r7
 802015e:	f000 f987 	bl	8020470 <_write_r>
 8020162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020164:	ffffefff 	.word	0xffffefff

08020168 <__sseek>:
 8020168:	b570      	push	{r4, r5, r6, lr}
 802016a:	000c      	movs	r4, r1
 802016c:	250e      	movs	r5, #14
 802016e:	5f49      	ldrsh	r1, [r1, r5]
 8020170:	f000 f956 	bl	8020420 <_lseek_r>
 8020174:	89a3      	ldrh	r3, [r4, #12]
 8020176:	1c42      	adds	r2, r0, #1
 8020178:	d103      	bne.n	8020182 <__sseek+0x1a>
 802017a:	4a05      	ldr	r2, [pc, #20]	@ (8020190 <__sseek+0x28>)
 802017c:	4013      	ands	r3, r2
 802017e:	81a3      	strh	r3, [r4, #12]
 8020180:	bd70      	pop	{r4, r5, r6, pc}
 8020182:	2280      	movs	r2, #128	@ 0x80
 8020184:	0152      	lsls	r2, r2, #5
 8020186:	4313      	orrs	r3, r2
 8020188:	81a3      	strh	r3, [r4, #12]
 802018a:	6560      	str	r0, [r4, #84]	@ 0x54
 802018c:	e7f8      	b.n	8020180 <__sseek+0x18>
 802018e:	46c0      	nop			@ (mov r8, r8)
 8020190:	ffffefff 	.word	0xffffefff

08020194 <__sclose>:
 8020194:	b510      	push	{r4, lr}
 8020196:	230e      	movs	r3, #14
 8020198:	5ec9      	ldrsh	r1, [r1, r3]
 802019a:	f000 f92f 	bl	80203fc <_close_r>
 802019e:	bd10      	pop	{r4, pc}

080201a0 <_vsniprintf_r>:
 80201a0:	b530      	push	{r4, r5, lr}
 80201a2:	0014      	movs	r4, r2
 80201a4:	0005      	movs	r5, r0
 80201a6:	001a      	movs	r2, r3
 80201a8:	b09b      	sub	sp, #108	@ 0x6c
 80201aa:	2c00      	cmp	r4, #0
 80201ac:	da05      	bge.n	80201ba <_vsniprintf_r+0x1a>
 80201ae:	238b      	movs	r3, #139	@ 0x8b
 80201b0:	6003      	str	r3, [r0, #0]
 80201b2:	2001      	movs	r0, #1
 80201b4:	4240      	negs	r0, r0
 80201b6:	b01b      	add	sp, #108	@ 0x6c
 80201b8:	bd30      	pop	{r4, r5, pc}
 80201ba:	2382      	movs	r3, #130	@ 0x82
 80201bc:	4668      	mov	r0, sp
 80201be:	009b      	lsls	r3, r3, #2
 80201c0:	8183      	strh	r3, [r0, #12]
 80201c2:	2300      	movs	r3, #0
 80201c4:	9100      	str	r1, [sp, #0]
 80201c6:	9104      	str	r1, [sp, #16]
 80201c8:	429c      	cmp	r4, r3
 80201ca:	d000      	beq.n	80201ce <_vsniprintf_r+0x2e>
 80201cc:	1e63      	subs	r3, r4, #1
 80201ce:	9302      	str	r3, [sp, #8]
 80201d0:	9305      	str	r3, [sp, #20]
 80201d2:	2301      	movs	r3, #1
 80201d4:	4669      	mov	r1, sp
 80201d6:	425b      	negs	r3, r3
 80201d8:	81cb      	strh	r3, [r1, #14]
 80201da:	0028      	movs	r0, r5
 80201dc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80201de:	f002 f9cf 	bl	8022580 <_svfiprintf_r>
 80201e2:	1c43      	adds	r3, r0, #1
 80201e4:	da01      	bge.n	80201ea <_vsniprintf_r+0x4a>
 80201e6:	238b      	movs	r3, #139	@ 0x8b
 80201e8:	602b      	str	r3, [r5, #0]
 80201ea:	2c00      	cmp	r4, #0
 80201ec:	d0e3      	beq.n	80201b6 <_vsniprintf_r+0x16>
 80201ee:	2200      	movs	r2, #0
 80201f0:	9b00      	ldr	r3, [sp, #0]
 80201f2:	701a      	strb	r2, [r3, #0]
 80201f4:	e7df      	b.n	80201b6 <_vsniprintf_r+0x16>
	...

080201f8 <vsniprintf>:
 80201f8:	b513      	push	{r0, r1, r4, lr}
 80201fa:	4c04      	ldr	r4, [pc, #16]	@ (802020c <vsniprintf+0x14>)
 80201fc:	9300      	str	r3, [sp, #0]
 80201fe:	0013      	movs	r3, r2
 8020200:	000a      	movs	r2, r1
 8020202:	0001      	movs	r1, r0
 8020204:	6820      	ldr	r0, [r4, #0]
 8020206:	f7ff ffcb 	bl	80201a0 <_vsniprintf_r>
 802020a:	bd16      	pop	{r1, r2, r4, pc}
 802020c:	200003d0 	.word	0x200003d0

08020210 <__swbuf_r>:
 8020210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020212:	0006      	movs	r6, r0
 8020214:	000d      	movs	r5, r1
 8020216:	0014      	movs	r4, r2
 8020218:	2800      	cmp	r0, #0
 802021a:	d004      	beq.n	8020226 <__swbuf_r+0x16>
 802021c:	6a03      	ldr	r3, [r0, #32]
 802021e:	2b00      	cmp	r3, #0
 8020220:	d101      	bne.n	8020226 <__swbuf_r+0x16>
 8020222:	f7ff fead 	bl	801ff80 <__sinit>
 8020226:	69a3      	ldr	r3, [r4, #24]
 8020228:	60a3      	str	r3, [r4, #8]
 802022a:	89a3      	ldrh	r3, [r4, #12]
 802022c:	071b      	lsls	r3, r3, #28
 802022e:	d502      	bpl.n	8020236 <__swbuf_r+0x26>
 8020230:	6923      	ldr	r3, [r4, #16]
 8020232:	2b00      	cmp	r3, #0
 8020234:	d109      	bne.n	802024a <__swbuf_r+0x3a>
 8020236:	0021      	movs	r1, r4
 8020238:	0030      	movs	r0, r6
 802023a:	f000 f82b 	bl	8020294 <__swsetup_r>
 802023e:	2800      	cmp	r0, #0
 8020240:	d003      	beq.n	802024a <__swbuf_r+0x3a>
 8020242:	2501      	movs	r5, #1
 8020244:	426d      	negs	r5, r5
 8020246:	0028      	movs	r0, r5
 8020248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802024a:	6923      	ldr	r3, [r4, #16]
 802024c:	6820      	ldr	r0, [r4, #0]
 802024e:	b2ef      	uxtb	r7, r5
 8020250:	1ac0      	subs	r0, r0, r3
 8020252:	6963      	ldr	r3, [r4, #20]
 8020254:	b2ed      	uxtb	r5, r5
 8020256:	4283      	cmp	r3, r0
 8020258:	dc05      	bgt.n	8020266 <__swbuf_r+0x56>
 802025a:	0021      	movs	r1, r4
 802025c:	0030      	movs	r0, r6
 802025e:	f002 fc57 	bl	8022b10 <_fflush_r>
 8020262:	2800      	cmp	r0, #0
 8020264:	d1ed      	bne.n	8020242 <__swbuf_r+0x32>
 8020266:	68a3      	ldr	r3, [r4, #8]
 8020268:	3001      	adds	r0, #1
 802026a:	3b01      	subs	r3, #1
 802026c:	60a3      	str	r3, [r4, #8]
 802026e:	6823      	ldr	r3, [r4, #0]
 8020270:	1c5a      	adds	r2, r3, #1
 8020272:	6022      	str	r2, [r4, #0]
 8020274:	701f      	strb	r7, [r3, #0]
 8020276:	6963      	ldr	r3, [r4, #20]
 8020278:	4283      	cmp	r3, r0
 802027a:	d004      	beq.n	8020286 <__swbuf_r+0x76>
 802027c:	89a3      	ldrh	r3, [r4, #12]
 802027e:	07db      	lsls	r3, r3, #31
 8020280:	d5e1      	bpl.n	8020246 <__swbuf_r+0x36>
 8020282:	2d0a      	cmp	r5, #10
 8020284:	d1df      	bne.n	8020246 <__swbuf_r+0x36>
 8020286:	0021      	movs	r1, r4
 8020288:	0030      	movs	r0, r6
 802028a:	f002 fc41 	bl	8022b10 <_fflush_r>
 802028e:	2800      	cmp	r0, #0
 8020290:	d0d9      	beq.n	8020246 <__swbuf_r+0x36>
 8020292:	e7d6      	b.n	8020242 <__swbuf_r+0x32>

08020294 <__swsetup_r>:
 8020294:	4b2d      	ldr	r3, [pc, #180]	@ (802034c <__swsetup_r+0xb8>)
 8020296:	b570      	push	{r4, r5, r6, lr}
 8020298:	0005      	movs	r5, r0
 802029a:	6818      	ldr	r0, [r3, #0]
 802029c:	000c      	movs	r4, r1
 802029e:	2800      	cmp	r0, #0
 80202a0:	d004      	beq.n	80202ac <__swsetup_r+0x18>
 80202a2:	6a03      	ldr	r3, [r0, #32]
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d101      	bne.n	80202ac <__swsetup_r+0x18>
 80202a8:	f7ff fe6a 	bl	801ff80 <__sinit>
 80202ac:	230c      	movs	r3, #12
 80202ae:	5ee2      	ldrsh	r2, [r4, r3]
 80202b0:	0713      	lsls	r3, r2, #28
 80202b2:	d423      	bmi.n	80202fc <__swsetup_r+0x68>
 80202b4:	06d3      	lsls	r3, r2, #27
 80202b6:	d407      	bmi.n	80202c8 <__swsetup_r+0x34>
 80202b8:	2309      	movs	r3, #9
 80202ba:	602b      	str	r3, [r5, #0]
 80202bc:	2340      	movs	r3, #64	@ 0x40
 80202be:	2001      	movs	r0, #1
 80202c0:	4313      	orrs	r3, r2
 80202c2:	81a3      	strh	r3, [r4, #12]
 80202c4:	4240      	negs	r0, r0
 80202c6:	e03a      	b.n	802033e <__swsetup_r+0xaa>
 80202c8:	0752      	lsls	r2, r2, #29
 80202ca:	d513      	bpl.n	80202f4 <__swsetup_r+0x60>
 80202cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80202ce:	2900      	cmp	r1, #0
 80202d0:	d008      	beq.n	80202e4 <__swsetup_r+0x50>
 80202d2:	0023      	movs	r3, r4
 80202d4:	3344      	adds	r3, #68	@ 0x44
 80202d6:	4299      	cmp	r1, r3
 80202d8:	d002      	beq.n	80202e0 <__swsetup_r+0x4c>
 80202da:	0028      	movs	r0, r5
 80202dc:	f000 ffa6 	bl	802122c <_free_r>
 80202e0:	2300      	movs	r3, #0
 80202e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80202e4:	2224      	movs	r2, #36	@ 0x24
 80202e6:	89a3      	ldrh	r3, [r4, #12]
 80202e8:	4393      	bics	r3, r2
 80202ea:	81a3      	strh	r3, [r4, #12]
 80202ec:	2300      	movs	r3, #0
 80202ee:	6063      	str	r3, [r4, #4]
 80202f0:	6923      	ldr	r3, [r4, #16]
 80202f2:	6023      	str	r3, [r4, #0]
 80202f4:	2308      	movs	r3, #8
 80202f6:	89a2      	ldrh	r2, [r4, #12]
 80202f8:	4313      	orrs	r3, r2
 80202fa:	81a3      	strh	r3, [r4, #12]
 80202fc:	6923      	ldr	r3, [r4, #16]
 80202fe:	2b00      	cmp	r3, #0
 8020300:	d10b      	bne.n	802031a <__swsetup_r+0x86>
 8020302:	21a0      	movs	r1, #160	@ 0xa0
 8020304:	2280      	movs	r2, #128	@ 0x80
 8020306:	89a3      	ldrh	r3, [r4, #12]
 8020308:	0089      	lsls	r1, r1, #2
 802030a:	0092      	lsls	r2, r2, #2
 802030c:	400b      	ands	r3, r1
 802030e:	4293      	cmp	r3, r2
 8020310:	d003      	beq.n	802031a <__swsetup_r+0x86>
 8020312:	0021      	movs	r1, r4
 8020314:	0028      	movs	r0, r5
 8020316:	f002 fc51 	bl	8022bbc <__smakebuf_r>
 802031a:	230c      	movs	r3, #12
 802031c:	5ee2      	ldrsh	r2, [r4, r3]
 802031e:	2101      	movs	r1, #1
 8020320:	0013      	movs	r3, r2
 8020322:	400b      	ands	r3, r1
 8020324:	420a      	tst	r2, r1
 8020326:	d00b      	beq.n	8020340 <__swsetup_r+0xac>
 8020328:	2300      	movs	r3, #0
 802032a:	60a3      	str	r3, [r4, #8]
 802032c:	6963      	ldr	r3, [r4, #20]
 802032e:	425b      	negs	r3, r3
 8020330:	61a3      	str	r3, [r4, #24]
 8020332:	2000      	movs	r0, #0
 8020334:	6923      	ldr	r3, [r4, #16]
 8020336:	4283      	cmp	r3, r0
 8020338:	d101      	bne.n	802033e <__swsetup_r+0xaa>
 802033a:	0613      	lsls	r3, r2, #24
 802033c:	d4be      	bmi.n	80202bc <__swsetup_r+0x28>
 802033e:	bd70      	pop	{r4, r5, r6, pc}
 8020340:	0791      	lsls	r1, r2, #30
 8020342:	d400      	bmi.n	8020346 <__swsetup_r+0xb2>
 8020344:	6963      	ldr	r3, [r4, #20]
 8020346:	60a3      	str	r3, [r4, #8]
 8020348:	e7f3      	b.n	8020332 <__swsetup_r+0x9e>
 802034a:	46c0      	nop			@ (mov r8, r8)
 802034c:	200003d0 	.word	0x200003d0

08020350 <memset>:
 8020350:	0003      	movs	r3, r0
 8020352:	1882      	adds	r2, r0, r2
 8020354:	4293      	cmp	r3, r2
 8020356:	d100      	bne.n	802035a <memset+0xa>
 8020358:	4770      	bx	lr
 802035a:	7019      	strb	r1, [r3, #0]
 802035c:	3301      	adds	r3, #1
 802035e:	e7f9      	b.n	8020354 <memset+0x4>

08020360 <strchr>:
 8020360:	b2c9      	uxtb	r1, r1
 8020362:	7803      	ldrb	r3, [r0, #0]
 8020364:	2b00      	cmp	r3, #0
 8020366:	d004      	beq.n	8020372 <strchr+0x12>
 8020368:	428b      	cmp	r3, r1
 802036a:	d100      	bne.n	802036e <strchr+0xe>
 802036c:	4770      	bx	lr
 802036e:	3001      	adds	r0, #1
 8020370:	e7f7      	b.n	8020362 <strchr+0x2>
 8020372:	424b      	negs	r3, r1
 8020374:	4159      	adcs	r1, r3
 8020376:	4249      	negs	r1, r1
 8020378:	4008      	ands	r0, r1
 802037a:	e7f7      	b.n	802036c <strchr+0xc>

0802037c <strncmp>:
 802037c:	b530      	push	{r4, r5, lr}
 802037e:	0005      	movs	r5, r0
 8020380:	1e10      	subs	r0, r2, #0
 8020382:	d00b      	beq.n	802039c <strncmp+0x20>
 8020384:	2400      	movs	r4, #0
 8020386:	3a01      	subs	r2, #1
 8020388:	5d2b      	ldrb	r3, [r5, r4]
 802038a:	5d08      	ldrb	r0, [r1, r4]
 802038c:	4283      	cmp	r3, r0
 802038e:	d104      	bne.n	802039a <strncmp+0x1e>
 8020390:	42a2      	cmp	r2, r4
 8020392:	d002      	beq.n	802039a <strncmp+0x1e>
 8020394:	3401      	adds	r4, #1
 8020396:	2b00      	cmp	r3, #0
 8020398:	d1f6      	bne.n	8020388 <strncmp+0xc>
 802039a:	1a18      	subs	r0, r3, r0
 802039c:	bd30      	pop	{r4, r5, pc}

0802039e <strncpy>:
 802039e:	0003      	movs	r3, r0
 80203a0:	b530      	push	{r4, r5, lr}
 80203a2:	001d      	movs	r5, r3
 80203a4:	2a00      	cmp	r2, #0
 80203a6:	d006      	beq.n	80203b6 <strncpy+0x18>
 80203a8:	780c      	ldrb	r4, [r1, #0]
 80203aa:	3a01      	subs	r2, #1
 80203ac:	3301      	adds	r3, #1
 80203ae:	702c      	strb	r4, [r5, #0]
 80203b0:	3101      	adds	r1, #1
 80203b2:	2c00      	cmp	r4, #0
 80203b4:	d1f5      	bne.n	80203a2 <strncpy+0x4>
 80203b6:	2100      	movs	r1, #0
 80203b8:	189a      	adds	r2, r3, r2
 80203ba:	4293      	cmp	r3, r2
 80203bc:	d100      	bne.n	80203c0 <strncpy+0x22>
 80203be:	bd30      	pop	{r4, r5, pc}
 80203c0:	7019      	strb	r1, [r3, #0]
 80203c2:	3301      	adds	r3, #1
 80203c4:	e7f9      	b.n	80203ba <strncpy+0x1c>

080203c6 <strstr>:
 80203c6:	780a      	ldrb	r2, [r1, #0]
 80203c8:	b530      	push	{r4, r5, lr}
 80203ca:	2a00      	cmp	r2, #0
 80203cc:	d10c      	bne.n	80203e8 <strstr+0x22>
 80203ce:	bd30      	pop	{r4, r5, pc}
 80203d0:	429a      	cmp	r2, r3
 80203d2:	d108      	bne.n	80203e6 <strstr+0x20>
 80203d4:	2301      	movs	r3, #1
 80203d6:	5ccc      	ldrb	r4, [r1, r3]
 80203d8:	2c00      	cmp	r4, #0
 80203da:	d0f8      	beq.n	80203ce <strstr+0x8>
 80203dc:	5cc5      	ldrb	r5, [r0, r3]
 80203de:	42a5      	cmp	r5, r4
 80203e0:	d101      	bne.n	80203e6 <strstr+0x20>
 80203e2:	3301      	adds	r3, #1
 80203e4:	e7f7      	b.n	80203d6 <strstr+0x10>
 80203e6:	3001      	adds	r0, #1
 80203e8:	7803      	ldrb	r3, [r0, #0]
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	d1f0      	bne.n	80203d0 <strstr+0xa>
 80203ee:	0018      	movs	r0, r3
 80203f0:	e7ed      	b.n	80203ce <strstr+0x8>
	...

080203f4 <_localeconv_r>:
 80203f4:	4800      	ldr	r0, [pc, #0]	@ (80203f8 <_localeconv_r+0x4>)
 80203f6:	4770      	bx	lr
 80203f8:	20000354 	.word	0x20000354

080203fc <_close_r>:
 80203fc:	2300      	movs	r3, #0
 80203fe:	b570      	push	{r4, r5, r6, lr}
 8020400:	4d06      	ldr	r5, [pc, #24]	@ (802041c <_close_r+0x20>)
 8020402:	0004      	movs	r4, r0
 8020404:	0008      	movs	r0, r1
 8020406:	602b      	str	r3, [r5, #0]
 8020408:	f7ed fca8 	bl	800dd5c <_close>
 802040c:	1c43      	adds	r3, r0, #1
 802040e:	d103      	bne.n	8020418 <_close_r+0x1c>
 8020410:	682b      	ldr	r3, [r5, #0]
 8020412:	2b00      	cmp	r3, #0
 8020414:	d000      	beq.n	8020418 <_close_r+0x1c>
 8020416:	6023      	str	r3, [r4, #0]
 8020418:	bd70      	pop	{r4, r5, r6, pc}
 802041a:	46c0      	nop			@ (mov r8, r8)
 802041c:	200037bc 	.word	0x200037bc

08020420 <_lseek_r>:
 8020420:	b570      	push	{r4, r5, r6, lr}
 8020422:	0004      	movs	r4, r0
 8020424:	0008      	movs	r0, r1
 8020426:	0011      	movs	r1, r2
 8020428:	001a      	movs	r2, r3
 802042a:	2300      	movs	r3, #0
 802042c:	4d05      	ldr	r5, [pc, #20]	@ (8020444 <_lseek_r+0x24>)
 802042e:	602b      	str	r3, [r5, #0]
 8020430:	f7ed fcb5 	bl	800dd9e <_lseek>
 8020434:	1c43      	adds	r3, r0, #1
 8020436:	d103      	bne.n	8020440 <_lseek_r+0x20>
 8020438:	682b      	ldr	r3, [r5, #0]
 802043a:	2b00      	cmp	r3, #0
 802043c:	d000      	beq.n	8020440 <_lseek_r+0x20>
 802043e:	6023      	str	r3, [r4, #0]
 8020440:	bd70      	pop	{r4, r5, r6, pc}
 8020442:	46c0      	nop			@ (mov r8, r8)
 8020444:	200037bc 	.word	0x200037bc

08020448 <_read_r>:
 8020448:	b570      	push	{r4, r5, r6, lr}
 802044a:	0004      	movs	r4, r0
 802044c:	0008      	movs	r0, r1
 802044e:	0011      	movs	r1, r2
 8020450:	001a      	movs	r2, r3
 8020452:	2300      	movs	r3, #0
 8020454:	4d05      	ldr	r5, [pc, #20]	@ (802046c <_read_r+0x24>)
 8020456:	602b      	str	r3, [r5, #0]
 8020458:	f7ed fc63 	bl	800dd22 <_read>
 802045c:	1c43      	adds	r3, r0, #1
 802045e:	d103      	bne.n	8020468 <_read_r+0x20>
 8020460:	682b      	ldr	r3, [r5, #0]
 8020462:	2b00      	cmp	r3, #0
 8020464:	d000      	beq.n	8020468 <_read_r+0x20>
 8020466:	6023      	str	r3, [r4, #0]
 8020468:	bd70      	pop	{r4, r5, r6, pc}
 802046a:	46c0      	nop			@ (mov r8, r8)
 802046c:	200037bc 	.word	0x200037bc

08020470 <_write_r>:
 8020470:	b570      	push	{r4, r5, r6, lr}
 8020472:	0004      	movs	r4, r0
 8020474:	0008      	movs	r0, r1
 8020476:	0011      	movs	r1, r2
 8020478:	001a      	movs	r2, r3
 802047a:	2300      	movs	r3, #0
 802047c:	4d05      	ldr	r5, [pc, #20]	@ (8020494 <_write_r+0x24>)
 802047e:	602b      	str	r3, [r5, #0]
 8020480:	f7ee f924 	bl	800e6cc <_write>
 8020484:	1c43      	adds	r3, r0, #1
 8020486:	d103      	bne.n	8020490 <_write_r+0x20>
 8020488:	682b      	ldr	r3, [r5, #0]
 802048a:	2b00      	cmp	r3, #0
 802048c:	d000      	beq.n	8020490 <_write_r+0x20>
 802048e:	6023      	str	r3, [r4, #0]
 8020490:	bd70      	pop	{r4, r5, r6, pc}
 8020492:	46c0      	nop			@ (mov r8, r8)
 8020494:	200037bc 	.word	0x200037bc

08020498 <__errno>:
 8020498:	4b01      	ldr	r3, [pc, #4]	@ (80204a0 <__errno+0x8>)
 802049a:	6818      	ldr	r0, [r3, #0]
 802049c:	4770      	bx	lr
 802049e:	46c0      	nop			@ (mov r8, r8)
 80204a0:	200003d0 	.word	0x200003d0

080204a4 <__libc_init_array>:
 80204a4:	b570      	push	{r4, r5, r6, lr}
 80204a6:	2600      	movs	r6, #0
 80204a8:	4c0c      	ldr	r4, [pc, #48]	@ (80204dc <__libc_init_array+0x38>)
 80204aa:	4d0d      	ldr	r5, [pc, #52]	@ (80204e0 <__libc_init_array+0x3c>)
 80204ac:	1b64      	subs	r4, r4, r5
 80204ae:	10a4      	asrs	r4, r4, #2
 80204b0:	42a6      	cmp	r6, r4
 80204b2:	d109      	bne.n	80204c8 <__libc_init_array+0x24>
 80204b4:	2600      	movs	r6, #0
 80204b6:	f002 fee9 	bl	802328c <_init>
 80204ba:	4c0a      	ldr	r4, [pc, #40]	@ (80204e4 <__libc_init_array+0x40>)
 80204bc:	4d0a      	ldr	r5, [pc, #40]	@ (80204e8 <__libc_init_array+0x44>)
 80204be:	1b64      	subs	r4, r4, r5
 80204c0:	10a4      	asrs	r4, r4, #2
 80204c2:	42a6      	cmp	r6, r4
 80204c4:	d105      	bne.n	80204d2 <__libc_init_array+0x2e>
 80204c6:	bd70      	pop	{r4, r5, r6, pc}
 80204c8:	00b3      	lsls	r3, r6, #2
 80204ca:	58eb      	ldr	r3, [r5, r3]
 80204cc:	4798      	blx	r3
 80204ce:	3601      	adds	r6, #1
 80204d0:	e7ee      	b.n	80204b0 <__libc_init_array+0xc>
 80204d2:	00b3      	lsls	r3, r6, #2
 80204d4:	58eb      	ldr	r3, [r5, r3]
 80204d6:	4798      	blx	r3
 80204d8:	3601      	adds	r6, #1
 80204da:	e7f2      	b.n	80204c2 <__libc_init_array+0x1e>
 80204dc:	08026198 	.word	0x08026198
 80204e0:	08026198 	.word	0x08026198
 80204e4:	0802619c 	.word	0x0802619c
 80204e8:	08026198 	.word	0x08026198

080204ec <__retarget_lock_init_recursive>:
 80204ec:	4770      	bx	lr

080204ee <__retarget_lock_acquire_recursive>:
 80204ee:	4770      	bx	lr

080204f0 <__retarget_lock_release_recursive>:
 80204f0:	4770      	bx	lr

080204f2 <memchr>:
 80204f2:	b2c9      	uxtb	r1, r1
 80204f4:	1882      	adds	r2, r0, r2
 80204f6:	4290      	cmp	r0, r2
 80204f8:	d101      	bne.n	80204fe <memchr+0xc>
 80204fa:	2000      	movs	r0, #0
 80204fc:	4770      	bx	lr
 80204fe:	7803      	ldrb	r3, [r0, #0]
 8020500:	428b      	cmp	r3, r1
 8020502:	d0fb      	beq.n	80204fc <memchr+0xa>
 8020504:	3001      	adds	r0, #1
 8020506:	e7f6      	b.n	80204f6 <memchr+0x4>

08020508 <memcpy>:
 8020508:	2300      	movs	r3, #0
 802050a:	b510      	push	{r4, lr}
 802050c:	429a      	cmp	r2, r3
 802050e:	d100      	bne.n	8020512 <memcpy+0xa>
 8020510:	bd10      	pop	{r4, pc}
 8020512:	5ccc      	ldrb	r4, [r1, r3]
 8020514:	54c4      	strb	r4, [r0, r3]
 8020516:	3301      	adds	r3, #1
 8020518:	e7f8      	b.n	802050c <memcpy+0x4>
	...

0802051c <nan>:
 802051c:	2000      	movs	r0, #0
 802051e:	4901      	ldr	r1, [pc, #4]	@ (8020524 <nan+0x8>)
 8020520:	4770      	bx	lr
 8020522:	46c0      	nop			@ (mov r8, r8)
 8020524:	7ff80000 	.word	0x7ff80000

08020528 <quorem>:
 8020528:	b5f0      	push	{r4, r5, r6, r7, lr}
 802052a:	6902      	ldr	r2, [r0, #16]
 802052c:	690f      	ldr	r7, [r1, #16]
 802052e:	b087      	sub	sp, #28
 8020530:	0006      	movs	r6, r0
 8020532:	000b      	movs	r3, r1
 8020534:	2000      	movs	r0, #0
 8020536:	9102      	str	r1, [sp, #8]
 8020538:	42ba      	cmp	r2, r7
 802053a:	db6d      	blt.n	8020618 <quorem+0xf0>
 802053c:	3f01      	subs	r7, #1
 802053e:	00bc      	lsls	r4, r7, #2
 8020540:	3314      	adds	r3, #20
 8020542:	9305      	str	r3, [sp, #20]
 8020544:	191b      	adds	r3, r3, r4
 8020546:	9303      	str	r3, [sp, #12]
 8020548:	0033      	movs	r3, r6
 802054a:	3314      	adds	r3, #20
 802054c:	191c      	adds	r4, r3, r4
 802054e:	9301      	str	r3, [sp, #4]
 8020550:	6823      	ldr	r3, [r4, #0]
 8020552:	9304      	str	r3, [sp, #16]
 8020554:	9b03      	ldr	r3, [sp, #12]
 8020556:	9804      	ldr	r0, [sp, #16]
 8020558:	681d      	ldr	r5, [r3, #0]
 802055a:	3501      	adds	r5, #1
 802055c:	0029      	movs	r1, r5
 802055e:	f7df fe21 	bl	80001a4 <__udivsi3>
 8020562:	9b04      	ldr	r3, [sp, #16]
 8020564:	9000      	str	r0, [sp, #0]
 8020566:	42ab      	cmp	r3, r5
 8020568:	d32b      	bcc.n	80205c2 <quorem+0x9a>
 802056a:	9b05      	ldr	r3, [sp, #20]
 802056c:	9d01      	ldr	r5, [sp, #4]
 802056e:	469c      	mov	ip, r3
 8020570:	2300      	movs	r3, #0
 8020572:	9305      	str	r3, [sp, #20]
 8020574:	9304      	str	r3, [sp, #16]
 8020576:	4662      	mov	r2, ip
 8020578:	ca08      	ldmia	r2!, {r3}
 802057a:	6828      	ldr	r0, [r5, #0]
 802057c:	4694      	mov	ip, r2
 802057e:	9a00      	ldr	r2, [sp, #0]
 8020580:	b299      	uxth	r1, r3
 8020582:	4351      	muls	r1, r2
 8020584:	9a05      	ldr	r2, [sp, #20]
 8020586:	0c1b      	lsrs	r3, r3, #16
 8020588:	1889      	adds	r1, r1, r2
 802058a:	9a00      	ldr	r2, [sp, #0]
 802058c:	4353      	muls	r3, r2
 802058e:	0c0a      	lsrs	r2, r1, #16
 8020590:	189b      	adds	r3, r3, r2
 8020592:	0c1a      	lsrs	r2, r3, #16
 8020594:	b289      	uxth	r1, r1
 8020596:	9205      	str	r2, [sp, #20]
 8020598:	b282      	uxth	r2, r0
 802059a:	1a52      	subs	r2, r2, r1
 802059c:	9904      	ldr	r1, [sp, #16]
 802059e:	0c00      	lsrs	r0, r0, #16
 80205a0:	1852      	adds	r2, r2, r1
 80205a2:	b29b      	uxth	r3, r3
 80205a4:	1411      	asrs	r1, r2, #16
 80205a6:	1ac3      	subs	r3, r0, r3
 80205a8:	185b      	adds	r3, r3, r1
 80205aa:	1419      	asrs	r1, r3, #16
 80205ac:	b292      	uxth	r2, r2
 80205ae:	041b      	lsls	r3, r3, #16
 80205b0:	431a      	orrs	r2, r3
 80205b2:	9b03      	ldr	r3, [sp, #12]
 80205b4:	9104      	str	r1, [sp, #16]
 80205b6:	c504      	stmia	r5!, {r2}
 80205b8:	4563      	cmp	r3, ip
 80205ba:	d2dc      	bcs.n	8020576 <quorem+0x4e>
 80205bc:	6823      	ldr	r3, [r4, #0]
 80205be:	2b00      	cmp	r3, #0
 80205c0:	d030      	beq.n	8020624 <quorem+0xfc>
 80205c2:	0030      	movs	r0, r6
 80205c4:	9902      	ldr	r1, [sp, #8]
 80205c6:	f001 fd7d 	bl	80220c4 <__mcmp>
 80205ca:	2800      	cmp	r0, #0
 80205cc:	db23      	blt.n	8020616 <quorem+0xee>
 80205ce:	0034      	movs	r4, r6
 80205d0:	2500      	movs	r5, #0
 80205d2:	9902      	ldr	r1, [sp, #8]
 80205d4:	3414      	adds	r4, #20
 80205d6:	3114      	adds	r1, #20
 80205d8:	6823      	ldr	r3, [r4, #0]
 80205da:	c901      	ldmia	r1!, {r0}
 80205dc:	9302      	str	r3, [sp, #8]
 80205de:	466b      	mov	r3, sp
 80205e0:	891b      	ldrh	r3, [r3, #8]
 80205e2:	b282      	uxth	r2, r0
 80205e4:	1a9a      	subs	r2, r3, r2
 80205e6:	9b02      	ldr	r3, [sp, #8]
 80205e8:	1952      	adds	r2, r2, r5
 80205ea:	0c00      	lsrs	r0, r0, #16
 80205ec:	0c1b      	lsrs	r3, r3, #16
 80205ee:	1a1b      	subs	r3, r3, r0
 80205f0:	1410      	asrs	r0, r2, #16
 80205f2:	181b      	adds	r3, r3, r0
 80205f4:	141d      	asrs	r5, r3, #16
 80205f6:	b292      	uxth	r2, r2
 80205f8:	041b      	lsls	r3, r3, #16
 80205fa:	431a      	orrs	r2, r3
 80205fc:	9b03      	ldr	r3, [sp, #12]
 80205fe:	c404      	stmia	r4!, {r2}
 8020600:	428b      	cmp	r3, r1
 8020602:	d2e9      	bcs.n	80205d8 <quorem+0xb0>
 8020604:	9a01      	ldr	r2, [sp, #4]
 8020606:	00bb      	lsls	r3, r7, #2
 8020608:	18d3      	adds	r3, r2, r3
 802060a:	681a      	ldr	r2, [r3, #0]
 802060c:	2a00      	cmp	r2, #0
 802060e:	d013      	beq.n	8020638 <quorem+0x110>
 8020610:	9b00      	ldr	r3, [sp, #0]
 8020612:	3301      	adds	r3, #1
 8020614:	9300      	str	r3, [sp, #0]
 8020616:	9800      	ldr	r0, [sp, #0]
 8020618:	b007      	add	sp, #28
 802061a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802061c:	6823      	ldr	r3, [r4, #0]
 802061e:	2b00      	cmp	r3, #0
 8020620:	d104      	bne.n	802062c <quorem+0x104>
 8020622:	3f01      	subs	r7, #1
 8020624:	9b01      	ldr	r3, [sp, #4]
 8020626:	3c04      	subs	r4, #4
 8020628:	42a3      	cmp	r3, r4
 802062a:	d3f7      	bcc.n	802061c <quorem+0xf4>
 802062c:	6137      	str	r7, [r6, #16]
 802062e:	e7c8      	b.n	80205c2 <quorem+0x9a>
 8020630:	681a      	ldr	r2, [r3, #0]
 8020632:	2a00      	cmp	r2, #0
 8020634:	d104      	bne.n	8020640 <quorem+0x118>
 8020636:	3f01      	subs	r7, #1
 8020638:	9a01      	ldr	r2, [sp, #4]
 802063a:	3b04      	subs	r3, #4
 802063c:	429a      	cmp	r2, r3
 802063e:	d3f7      	bcc.n	8020630 <quorem+0x108>
 8020640:	6137      	str	r7, [r6, #16]
 8020642:	e7e5      	b.n	8020610 <quorem+0xe8>

08020644 <_dtoa_r>:
 8020644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020646:	0014      	movs	r4, r2
 8020648:	001d      	movs	r5, r3
 802064a:	69c6      	ldr	r6, [r0, #28]
 802064c:	b09d      	sub	sp, #116	@ 0x74
 802064e:	940a      	str	r4, [sp, #40]	@ 0x28
 8020650:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020652:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020654:	9003      	str	r0, [sp, #12]
 8020656:	2e00      	cmp	r6, #0
 8020658:	d10f      	bne.n	802067a <_dtoa_r+0x36>
 802065a:	2010      	movs	r0, #16
 802065c:	f001 f98a 	bl	8021974 <malloc>
 8020660:	9b03      	ldr	r3, [sp, #12]
 8020662:	1e02      	subs	r2, r0, #0
 8020664:	61d8      	str	r0, [r3, #28]
 8020666:	d104      	bne.n	8020672 <_dtoa_r+0x2e>
 8020668:	21ef      	movs	r1, #239	@ 0xef
 802066a:	4bc7      	ldr	r3, [pc, #796]	@ (8020988 <_dtoa_r+0x344>)
 802066c:	48c7      	ldr	r0, [pc, #796]	@ (802098c <_dtoa_r+0x348>)
 802066e:	f002 fb2f 	bl	8022cd0 <__assert_func>
 8020672:	6046      	str	r6, [r0, #4]
 8020674:	6086      	str	r6, [r0, #8]
 8020676:	6006      	str	r6, [r0, #0]
 8020678:	60c6      	str	r6, [r0, #12]
 802067a:	9b03      	ldr	r3, [sp, #12]
 802067c:	69db      	ldr	r3, [r3, #28]
 802067e:	6819      	ldr	r1, [r3, #0]
 8020680:	2900      	cmp	r1, #0
 8020682:	d00b      	beq.n	802069c <_dtoa_r+0x58>
 8020684:	685a      	ldr	r2, [r3, #4]
 8020686:	2301      	movs	r3, #1
 8020688:	4093      	lsls	r3, r2
 802068a:	604a      	str	r2, [r1, #4]
 802068c:	608b      	str	r3, [r1, #8]
 802068e:	9803      	ldr	r0, [sp, #12]
 8020690:	f001 fa82 	bl	8021b98 <_Bfree>
 8020694:	2200      	movs	r2, #0
 8020696:	9b03      	ldr	r3, [sp, #12]
 8020698:	69db      	ldr	r3, [r3, #28]
 802069a:	601a      	str	r2, [r3, #0]
 802069c:	2d00      	cmp	r5, #0
 802069e:	da1e      	bge.n	80206de <_dtoa_r+0x9a>
 80206a0:	2301      	movs	r3, #1
 80206a2:	603b      	str	r3, [r7, #0]
 80206a4:	006b      	lsls	r3, r5, #1
 80206a6:	085b      	lsrs	r3, r3, #1
 80206a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80206aa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80206ac:	4bb8      	ldr	r3, [pc, #736]	@ (8020990 <_dtoa_r+0x34c>)
 80206ae:	4ab8      	ldr	r2, [pc, #736]	@ (8020990 <_dtoa_r+0x34c>)
 80206b0:	403b      	ands	r3, r7
 80206b2:	4293      	cmp	r3, r2
 80206b4:	d116      	bne.n	80206e4 <_dtoa_r+0xa0>
 80206b6:	4bb7      	ldr	r3, [pc, #732]	@ (8020994 <_dtoa_r+0x350>)
 80206b8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80206ba:	6013      	str	r3, [r2, #0]
 80206bc:	033b      	lsls	r3, r7, #12
 80206be:	0b1b      	lsrs	r3, r3, #12
 80206c0:	4323      	orrs	r3, r4
 80206c2:	d101      	bne.n	80206c8 <_dtoa_r+0x84>
 80206c4:	f000 fd83 	bl	80211ce <_dtoa_r+0xb8a>
 80206c8:	4bb3      	ldr	r3, [pc, #716]	@ (8020998 <_dtoa_r+0x354>)
 80206ca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80206cc:	9308      	str	r3, [sp, #32]
 80206ce:	2a00      	cmp	r2, #0
 80206d0:	d002      	beq.n	80206d8 <_dtoa_r+0x94>
 80206d2:	4bb2      	ldr	r3, [pc, #712]	@ (802099c <_dtoa_r+0x358>)
 80206d4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80206d6:	6013      	str	r3, [r2, #0]
 80206d8:	9808      	ldr	r0, [sp, #32]
 80206da:	b01d      	add	sp, #116	@ 0x74
 80206dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80206de:	2300      	movs	r3, #0
 80206e0:	603b      	str	r3, [r7, #0]
 80206e2:	e7e2      	b.n	80206aa <_dtoa_r+0x66>
 80206e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80206e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80206e8:	9212      	str	r2, [sp, #72]	@ 0x48
 80206ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80206ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80206ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80206f0:	2200      	movs	r2, #0
 80206f2:	2300      	movs	r3, #0
 80206f4:	f7df fedc 	bl	80004b0 <__aeabi_dcmpeq>
 80206f8:	1e06      	subs	r6, r0, #0
 80206fa:	d00b      	beq.n	8020714 <_dtoa_r+0xd0>
 80206fc:	2301      	movs	r3, #1
 80206fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020700:	6013      	str	r3, [r2, #0]
 8020702:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020704:	2b00      	cmp	r3, #0
 8020706:	d002      	beq.n	802070e <_dtoa_r+0xca>
 8020708:	4ba5      	ldr	r3, [pc, #660]	@ (80209a0 <_dtoa_r+0x35c>)
 802070a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802070c:	6013      	str	r3, [r2, #0]
 802070e:	4ba5      	ldr	r3, [pc, #660]	@ (80209a4 <_dtoa_r+0x360>)
 8020710:	9308      	str	r3, [sp, #32]
 8020712:	e7e1      	b.n	80206d8 <_dtoa_r+0x94>
 8020714:	ab1a      	add	r3, sp, #104	@ 0x68
 8020716:	9301      	str	r3, [sp, #4]
 8020718:	ab1b      	add	r3, sp, #108	@ 0x6c
 802071a:	9300      	str	r3, [sp, #0]
 802071c:	9803      	ldr	r0, [sp, #12]
 802071e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020720:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020722:	f001 fdf1 	bl	8022308 <__d2b>
 8020726:	007a      	lsls	r2, r7, #1
 8020728:	9005      	str	r0, [sp, #20]
 802072a:	0d52      	lsrs	r2, r2, #21
 802072c:	d100      	bne.n	8020730 <_dtoa_r+0xec>
 802072e:	e07b      	b.n	8020828 <_dtoa_r+0x1e4>
 8020730:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020732:	9618      	str	r6, [sp, #96]	@ 0x60
 8020734:	0319      	lsls	r1, r3, #12
 8020736:	4b9c      	ldr	r3, [pc, #624]	@ (80209a8 <_dtoa_r+0x364>)
 8020738:	0b09      	lsrs	r1, r1, #12
 802073a:	430b      	orrs	r3, r1
 802073c:	499b      	ldr	r1, [pc, #620]	@ (80209ac <_dtoa_r+0x368>)
 802073e:	1857      	adds	r7, r2, r1
 8020740:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020742:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020744:	0019      	movs	r1, r3
 8020746:	2200      	movs	r2, #0
 8020748:	4b99      	ldr	r3, [pc, #612]	@ (80209b0 <_dtoa_r+0x36c>)
 802074a:	f7e2 fa3f 	bl	8002bcc <__aeabi_dsub>
 802074e:	4a99      	ldr	r2, [pc, #612]	@ (80209b4 <_dtoa_r+0x370>)
 8020750:	4b99      	ldr	r3, [pc, #612]	@ (80209b8 <_dtoa_r+0x374>)
 8020752:	f7e1 ff73 	bl	800263c <__aeabi_dmul>
 8020756:	4a99      	ldr	r2, [pc, #612]	@ (80209bc <_dtoa_r+0x378>)
 8020758:	4b99      	ldr	r3, [pc, #612]	@ (80209c0 <_dtoa_r+0x37c>)
 802075a:	f7e0 ffc7 	bl	80016ec <__aeabi_dadd>
 802075e:	0004      	movs	r4, r0
 8020760:	0038      	movs	r0, r7
 8020762:	000d      	movs	r5, r1
 8020764:	f7e2 fe2c 	bl	80033c0 <__aeabi_i2d>
 8020768:	4a96      	ldr	r2, [pc, #600]	@ (80209c4 <_dtoa_r+0x380>)
 802076a:	4b97      	ldr	r3, [pc, #604]	@ (80209c8 <_dtoa_r+0x384>)
 802076c:	f7e1 ff66 	bl	800263c <__aeabi_dmul>
 8020770:	0002      	movs	r2, r0
 8020772:	000b      	movs	r3, r1
 8020774:	0020      	movs	r0, r4
 8020776:	0029      	movs	r1, r5
 8020778:	f7e0 ffb8 	bl	80016ec <__aeabi_dadd>
 802077c:	0004      	movs	r4, r0
 802077e:	000d      	movs	r5, r1
 8020780:	f7e2 fde2 	bl	8003348 <__aeabi_d2iz>
 8020784:	2200      	movs	r2, #0
 8020786:	9004      	str	r0, [sp, #16]
 8020788:	2300      	movs	r3, #0
 802078a:	0020      	movs	r0, r4
 802078c:	0029      	movs	r1, r5
 802078e:	f7df fe95 	bl	80004bc <__aeabi_dcmplt>
 8020792:	2800      	cmp	r0, #0
 8020794:	d00b      	beq.n	80207ae <_dtoa_r+0x16a>
 8020796:	9804      	ldr	r0, [sp, #16]
 8020798:	f7e2 fe12 	bl	80033c0 <__aeabi_i2d>
 802079c:	002b      	movs	r3, r5
 802079e:	0022      	movs	r2, r4
 80207a0:	f7df fe86 	bl	80004b0 <__aeabi_dcmpeq>
 80207a4:	4243      	negs	r3, r0
 80207a6:	4158      	adcs	r0, r3
 80207a8:	9b04      	ldr	r3, [sp, #16]
 80207aa:	1a1b      	subs	r3, r3, r0
 80207ac:	9304      	str	r3, [sp, #16]
 80207ae:	2301      	movs	r3, #1
 80207b0:	9315      	str	r3, [sp, #84]	@ 0x54
 80207b2:	9b04      	ldr	r3, [sp, #16]
 80207b4:	2b16      	cmp	r3, #22
 80207b6:	d810      	bhi.n	80207da <_dtoa_r+0x196>
 80207b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80207ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80207bc:	9a04      	ldr	r2, [sp, #16]
 80207be:	4b83      	ldr	r3, [pc, #524]	@ (80209cc <_dtoa_r+0x388>)
 80207c0:	00d2      	lsls	r2, r2, #3
 80207c2:	189b      	adds	r3, r3, r2
 80207c4:	681a      	ldr	r2, [r3, #0]
 80207c6:	685b      	ldr	r3, [r3, #4]
 80207c8:	f7df fe78 	bl	80004bc <__aeabi_dcmplt>
 80207cc:	2800      	cmp	r0, #0
 80207ce:	d047      	beq.n	8020860 <_dtoa_r+0x21c>
 80207d0:	9b04      	ldr	r3, [sp, #16]
 80207d2:	3b01      	subs	r3, #1
 80207d4:	9304      	str	r3, [sp, #16]
 80207d6:	2300      	movs	r3, #0
 80207d8:	9315      	str	r3, [sp, #84]	@ 0x54
 80207da:	2200      	movs	r2, #0
 80207dc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80207de:	9206      	str	r2, [sp, #24]
 80207e0:	1bdb      	subs	r3, r3, r7
 80207e2:	1e5a      	subs	r2, r3, #1
 80207e4:	d53e      	bpl.n	8020864 <_dtoa_r+0x220>
 80207e6:	2201      	movs	r2, #1
 80207e8:	1ad3      	subs	r3, r2, r3
 80207ea:	9306      	str	r3, [sp, #24]
 80207ec:	2300      	movs	r3, #0
 80207ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80207f0:	9b04      	ldr	r3, [sp, #16]
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	db38      	blt.n	8020868 <_dtoa_r+0x224>
 80207f6:	9a04      	ldr	r2, [sp, #16]
 80207f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80207fa:	4694      	mov	ip, r2
 80207fc:	4463      	add	r3, ip
 80207fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8020800:	2300      	movs	r3, #0
 8020802:	9214      	str	r2, [sp, #80]	@ 0x50
 8020804:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020806:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020808:	2401      	movs	r4, #1
 802080a:	2b09      	cmp	r3, #9
 802080c:	d867      	bhi.n	80208de <_dtoa_r+0x29a>
 802080e:	2b05      	cmp	r3, #5
 8020810:	dd02      	ble.n	8020818 <_dtoa_r+0x1d4>
 8020812:	2400      	movs	r4, #0
 8020814:	3b04      	subs	r3, #4
 8020816:	9322      	str	r3, [sp, #136]	@ 0x88
 8020818:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802081a:	1e98      	subs	r0, r3, #2
 802081c:	2803      	cmp	r0, #3
 802081e:	d867      	bhi.n	80208f0 <_dtoa_r+0x2ac>
 8020820:	f7df fcac 	bl	800017c <__gnu_thumb1_case_uqi>
 8020824:	5b383a2b 	.word	0x5b383a2b
 8020828:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802082a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802082c:	18f6      	adds	r6, r6, r3
 802082e:	4b68      	ldr	r3, [pc, #416]	@ (80209d0 <_dtoa_r+0x38c>)
 8020830:	18f2      	adds	r2, r6, r3
 8020832:	2a20      	cmp	r2, #32
 8020834:	dd0f      	ble.n	8020856 <_dtoa_r+0x212>
 8020836:	2340      	movs	r3, #64	@ 0x40
 8020838:	1a9b      	subs	r3, r3, r2
 802083a:	409f      	lsls	r7, r3
 802083c:	4b65      	ldr	r3, [pc, #404]	@ (80209d4 <_dtoa_r+0x390>)
 802083e:	0038      	movs	r0, r7
 8020840:	18f3      	adds	r3, r6, r3
 8020842:	40dc      	lsrs	r4, r3
 8020844:	4320      	orrs	r0, r4
 8020846:	f7e2 fde9 	bl	800341c <__aeabi_ui2d>
 802084a:	2201      	movs	r2, #1
 802084c:	4b62      	ldr	r3, [pc, #392]	@ (80209d8 <_dtoa_r+0x394>)
 802084e:	1e77      	subs	r7, r6, #1
 8020850:	18cb      	adds	r3, r1, r3
 8020852:	9218      	str	r2, [sp, #96]	@ 0x60
 8020854:	e776      	b.n	8020744 <_dtoa_r+0x100>
 8020856:	2320      	movs	r3, #32
 8020858:	0020      	movs	r0, r4
 802085a:	1a9b      	subs	r3, r3, r2
 802085c:	4098      	lsls	r0, r3
 802085e:	e7f2      	b.n	8020846 <_dtoa_r+0x202>
 8020860:	9015      	str	r0, [sp, #84]	@ 0x54
 8020862:	e7ba      	b.n	80207da <_dtoa_r+0x196>
 8020864:	920d      	str	r2, [sp, #52]	@ 0x34
 8020866:	e7c3      	b.n	80207f0 <_dtoa_r+0x1ac>
 8020868:	9b06      	ldr	r3, [sp, #24]
 802086a:	9a04      	ldr	r2, [sp, #16]
 802086c:	1a9b      	subs	r3, r3, r2
 802086e:	9306      	str	r3, [sp, #24]
 8020870:	4253      	negs	r3, r2
 8020872:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020874:	2300      	movs	r3, #0
 8020876:	9314      	str	r3, [sp, #80]	@ 0x50
 8020878:	e7c5      	b.n	8020806 <_dtoa_r+0x1c2>
 802087a:	2300      	movs	r3, #0
 802087c:	9310      	str	r3, [sp, #64]	@ 0x40
 802087e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020880:	930e      	str	r3, [sp, #56]	@ 0x38
 8020882:	9309      	str	r3, [sp, #36]	@ 0x24
 8020884:	2b00      	cmp	r3, #0
 8020886:	dc13      	bgt.n	80208b0 <_dtoa_r+0x26c>
 8020888:	2301      	movs	r3, #1
 802088a:	001a      	movs	r2, r3
 802088c:	930e      	str	r3, [sp, #56]	@ 0x38
 802088e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020890:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020892:	e00d      	b.n	80208b0 <_dtoa_r+0x26c>
 8020894:	2301      	movs	r3, #1
 8020896:	e7f1      	b.n	802087c <_dtoa_r+0x238>
 8020898:	2300      	movs	r3, #0
 802089a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802089c:	9310      	str	r3, [sp, #64]	@ 0x40
 802089e:	4694      	mov	ip, r2
 80208a0:	9b04      	ldr	r3, [sp, #16]
 80208a2:	4463      	add	r3, ip
 80208a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80208a6:	3301      	adds	r3, #1
 80208a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80208aa:	2b00      	cmp	r3, #0
 80208ac:	dc00      	bgt.n	80208b0 <_dtoa_r+0x26c>
 80208ae:	2301      	movs	r3, #1
 80208b0:	9a03      	ldr	r2, [sp, #12]
 80208b2:	2100      	movs	r1, #0
 80208b4:	69d0      	ldr	r0, [r2, #28]
 80208b6:	2204      	movs	r2, #4
 80208b8:	0015      	movs	r5, r2
 80208ba:	3514      	adds	r5, #20
 80208bc:	429d      	cmp	r5, r3
 80208be:	d91b      	bls.n	80208f8 <_dtoa_r+0x2b4>
 80208c0:	6041      	str	r1, [r0, #4]
 80208c2:	9803      	ldr	r0, [sp, #12]
 80208c4:	f001 f924 	bl	8021b10 <_Balloc>
 80208c8:	9008      	str	r0, [sp, #32]
 80208ca:	2800      	cmp	r0, #0
 80208cc:	d117      	bne.n	80208fe <_dtoa_r+0x2ba>
 80208ce:	21b0      	movs	r1, #176	@ 0xb0
 80208d0:	4b42      	ldr	r3, [pc, #264]	@ (80209dc <_dtoa_r+0x398>)
 80208d2:	482e      	ldr	r0, [pc, #184]	@ (802098c <_dtoa_r+0x348>)
 80208d4:	9a08      	ldr	r2, [sp, #32]
 80208d6:	31ff      	adds	r1, #255	@ 0xff
 80208d8:	e6c9      	b.n	802066e <_dtoa_r+0x2a>
 80208da:	2301      	movs	r3, #1
 80208dc:	e7dd      	b.n	802089a <_dtoa_r+0x256>
 80208de:	2300      	movs	r3, #0
 80208e0:	9410      	str	r4, [sp, #64]	@ 0x40
 80208e2:	9322      	str	r3, [sp, #136]	@ 0x88
 80208e4:	3b01      	subs	r3, #1
 80208e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80208e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80208ea:	2200      	movs	r2, #0
 80208ec:	3313      	adds	r3, #19
 80208ee:	e7cf      	b.n	8020890 <_dtoa_r+0x24c>
 80208f0:	2301      	movs	r3, #1
 80208f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80208f4:	3b02      	subs	r3, #2
 80208f6:	e7f6      	b.n	80208e6 <_dtoa_r+0x2a2>
 80208f8:	3101      	adds	r1, #1
 80208fa:	0052      	lsls	r2, r2, #1
 80208fc:	e7dc      	b.n	80208b8 <_dtoa_r+0x274>
 80208fe:	9b03      	ldr	r3, [sp, #12]
 8020900:	9a08      	ldr	r2, [sp, #32]
 8020902:	69db      	ldr	r3, [r3, #28]
 8020904:	601a      	str	r2, [r3, #0]
 8020906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020908:	2b0e      	cmp	r3, #14
 802090a:	d900      	bls.n	802090e <_dtoa_r+0x2ca>
 802090c:	e0d9      	b.n	8020ac2 <_dtoa_r+0x47e>
 802090e:	2c00      	cmp	r4, #0
 8020910:	d100      	bne.n	8020914 <_dtoa_r+0x2d0>
 8020912:	e0d6      	b.n	8020ac2 <_dtoa_r+0x47e>
 8020914:	9b04      	ldr	r3, [sp, #16]
 8020916:	2b00      	cmp	r3, #0
 8020918:	dd64      	ble.n	80209e4 <_dtoa_r+0x3a0>
 802091a:	210f      	movs	r1, #15
 802091c:	9a04      	ldr	r2, [sp, #16]
 802091e:	4b2b      	ldr	r3, [pc, #172]	@ (80209cc <_dtoa_r+0x388>)
 8020920:	400a      	ands	r2, r1
 8020922:	00d2      	lsls	r2, r2, #3
 8020924:	189b      	adds	r3, r3, r2
 8020926:	681e      	ldr	r6, [r3, #0]
 8020928:	685f      	ldr	r7, [r3, #4]
 802092a:	9b04      	ldr	r3, [sp, #16]
 802092c:	2402      	movs	r4, #2
 802092e:	111d      	asrs	r5, r3, #4
 8020930:	05db      	lsls	r3, r3, #23
 8020932:	d50a      	bpl.n	802094a <_dtoa_r+0x306>
 8020934:	4b2a      	ldr	r3, [pc, #168]	@ (80209e0 <_dtoa_r+0x39c>)
 8020936:	400d      	ands	r5, r1
 8020938:	6a1a      	ldr	r2, [r3, #32]
 802093a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802093c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802093e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020940:	f7e1 fa38 	bl	8001db4 <__aeabi_ddiv>
 8020944:	900a      	str	r0, [sp, #40]	@ 0x28
 8020946:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020948:	3401      	adds	r4, #1
 802094a:	4b25      	ldr	r3, [pc, #148]	@ (80209e0 <_dtoa_r+0x39c>)
 802094c:	930c      	str	r3, [sp, #48]	@ 0x30
 802094e:	2d00      	cmp	r5, #0
 8020950:	d108      	bne.n	8020964 <_dtoa_r+0x320>
 8020952:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020954:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020956:	0032      	movs	r2, r6
 8020958:	003b      	movs	r3, r7
 802095a:	f7e1 fa2b 	bl	8001db4 <__aeabi_ddiv>
 802095e:	900a      	str	r0, [sp, #40]	@ 0x28
 8020960:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020962:	e05a      	b.n	8020a1a <_dtoa_r+0x3d6>
 8020964:	2301      	movs	r3, #1
 8020966:	421d      	tst	r5, r3
 8020968:	d009      	beq.n	802097e <_dtoa_r+0x33a>
 802096a:	18e4      	adds	r4, r4, r3
 802096c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802096e:	0030      	movs	r0, r6
 8020970:	681a      	ldr	r2, [r3, #0]
 8020972:	685b      	ldr	r3, [r3, #4]
 8020974:	0039      	movs	r1, r7
 8020976:	f7e1 fe61 	bl	800263c <__aeabi_dmul>
 802097a:	0006      	movs	r6, r0
 802097c:	000f      	movs	r7, r1
 802097e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020980:	106d      	asrs	r5, r5, #1
 8020982:	3308      	adds	r3, #8
 8020984:	e7e2      	b.n	802094c <_dtoa_r+0x308>
 8020986:	46c0      	nop			@ (mov r8, r8)
 8020988:	08025ef2 	.word	0x08025ef2
 802098c:	08025f09 	.word	0x08025f09
 8020990:	7ff00000 	.word	0x7ff00000
 8020994:	0000270f 	.word	0x0000270f
 8020998:	08025eee 	.word	0x08025eee
 802099c:	08025ef1 	.word	0x08025ef1
 80209a0:	08025eba 	.word	0x08025eba
 80209a4:	08025eb9 	.word	0x08025eb9
 80209a8:	3ff00000 	.word	0x3ff00000
 80209ac:	fffffc01 	.word	0xfffffc01
 80209b0:	3ff80000 	.word	0x3ff80000
 80209b4:	636f4361 	.word	0x636f4361
 80209b8:	3fd287a7 	.word	0x3fd287a7
 80209bc:	8b60c8b3 	.word	0x8b60c8b3
 80209c0:	3fc68a28 	.word	0x3fc68a28
 80209c4:	509f79fb 	.word	0x509f79fb
 80209c8:	3fd34413 	.word	0x3fd34413
 80209cc:	08026060 	.word	0x08026060
 80209d0:	00000432 	.word	0x00000432
 80209d4:	00000412 	.word	0x00000412
 80209d8:	fe100000 	.word	0xfe100000
 80209dc:	08025f61 	.word	0x08025f61
 80209e0:	08026038 	.word	0x08026038
 80209e4:	9b04      	ldr	r3, [sp, #16]
 80209e6:	2402      	movs	r4, #2
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	d016      	beq.n	8020a1a <_dtoa_r+0x3d6>
 80209ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80209ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80209f0:	220f      	movs	r2, #15
 80209f2:	425d      	negs	r5, r3
 80209f4:	402a      	ands	r2, r5
 80209f6:	4bd7      	ldr	r3, [pc, #860]	@ (8020d54 <_dtoa_r+0x710>)
 80209f8:	00d2      	lsls	r2, r2, #3
 80209fa:	189b      	adds	r3, r3, r2
 80209fc:	681a      	ldr	r2, [r3, #0]
 80209fe:	685b      	ldr	r3, [r3, #4]
 8020a00:	f7e1 fe1c 	bl	800263c <__aeabi_dmul>
 8020a04:	2701      	movs	r7, #1
 8020a06:	2300      	movs	r3, #0
 8020a08:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a0c:	4ed2      	ldr	r6, [pc, #840]	@ (8020d58 <_dtoa_r+0x714>)
 8020a0e:	112d      	asrs	r5, r5, #4
 8020a10:	2d00      	cmp	r5, #0
 8020a12:	d000      	beq.n	8020a16 <_dtoa_r+0x3d2>
 8020a14:	e0ba      	b.n	8020b8c <_dtoa_r+0x548>
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d1a1      	bne.n	802095e <_dtoa_r+0x31a>
 8020a1a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020a1c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020a1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	d100      	bne.n	8020a26 <_dtoa_r+0x3e2>
 8020a24:	e0bd      	b.n	8020ba2 <_dtoa_r+0x55e>
 8020a26:	2200      	movs	r2, #0
 8020a28:	0030      	movs	r0, r6
 8020a2a:	0039      	movs	r1, r7
 8020a2c:	4bcb      	ldr	r3, [pc, #812]	@ (8020d5c <_dtoa_r+0x718>)
 8020a2e:	f7df fd45 	bl	80004bc <__aeabi_dcmplt>
 8020a32:	2800      	cmp	r0, #0
 8020a34:	d100      	bne.n	8020a38 <_dtoa_r+0x3f4>
 8020a36:	e0b4      	b.n	8020ba2 <_dtoa_r+0x55e>
 8020a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a3a:	2b00      	cmp	r3, #0
 8020a3c:	d100      	bne.n	8020a40 <_dtoa_r+0x3fc>
 8020a3e:	e0b0      	b.n	8020ba2 <_dtoa_r+0x55e>
 8020a40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	dd39      	ble.n	8020aba <_dtoa_r+0x476>
 8020a46:	9b04      	ldr	r3, [sp, #16]
 8020a48:	2200      	movs	r2, #0
 8020a4a:	3b01      	subs	r3, #1
 8020a4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020a4e:	0030      	movs	r0, r6
 8020a50:	4bc3      	ldr	r3, [pc, #780]	@ (8020d60 <_dtoa_r+0x71c>)
 8020a52:	0039      	movs	r1, r7
 8020a54:	f7e1 fdf2 	bl	800263c <__aeabi_dmul>
 8020a58:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a5a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a5e:	3401      	adds	r4, #1
 8020a60:	0020      	movs	r0, r4
 8020a62:	9311      	str	r3, [sp, #68]	@ 0x44
 8020a64:	f7e2 fcac 	bl	80033c0 <__aeabi_i2d>
 8020a68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a6c:	f7e1 fde6 	bl	800263c <__aeabi_dmul>
 8020a70:	4bbc      	ldr	r3, [pc, #752]	@ (8020d64 <_dtoa_r+0x720>)
 8020a72:	2200      	movs	r2, #0
 8020a74:	f7e0 fe3a 	bl	80016ec <__aeabi_dadd>
 8020a78:	4bbb      	ldr	r3, [pc, #748]	@ (8020d68 <_dtoa_r+0x724>)
 8020a7a:	0006      	movs	r6, r0
 8020a7c:	18cf      	adds	r7, r1, r3
 8020a7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d000      	beq.n	8020a86 <_dtoa_r+0x442>
 8020a84:	e091      	b.n	8020baa <_dtoa_r+0x566>
 8020a86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a8a:	2200      	movs	r2, #0
 8020a8c:	4bb7      	ldr	r3, [pc, #732]	@ (8020d6c <_dtoa_r+0x728>)
 8020a8e:	f7e2 f89d 	bl	8002bcc <__aeabi_dsub>
 8020a92:	0032      	movs	r2, r6
 8020a94:	003b      	movs	r3, r7
 8020a96:	0004      	movs	r4, r0
 8020a98:	000d      	movs	r5, r1
 8020a9a:	f7df fd23 	bl	80004e4 <__aeabi_dcmpgt>
 8020a9e:	2800      	cmp	r0, #0
 8020aa0:	d000      	beq.n	8020aa4 <_dtoa_r+0x460>
 8020aa2:	e29d      	b.n	8020fe0 <_dtoa_r+0x99c>
 8020aa4:	2180      	movs	r1, #128	@ 0x80
 8020aa6:	0609      	lsls	r1, r1, #24
 8020aa8:	187b      	adds	r3, r7, r1
 8020aaa:	0032      	movs	r2, r6
 8020aac:	0020      	movs	r0, r4
 8020aae:	0029      	movs	r1, r5
 8020ab0:	f7df fd04 	bl	80004bc <__aeabi_dcmplt>
 8020ab4:	2800      	cmp	r0, #0
 8020ab6:	d000      	beq.n	8020aba <_dtoa_r+0x476>
 8020ab8:	e130      	b.n	8020d1c <_dtoa_r+0x6d8>
 8020aba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020abc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8020ac0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020ac2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	da00      	bge.n	8020aca <_dtoa_r+0x486>
 8020ac8:	e177      	b.n	8020dba <_dtoa_r+0x776>
 8020aca:	9a04      	ldr	r2, [sp, #16]
 8020acc:	2a0e      	cmp	r2, #14
 8020ace:	dd00      	ble.n	8020ad2 <_dtoa_r+0x48e>
 8020ad0:	e173      	b.n	8020dba <_dtoa_r+0x776>
 8020ad2:	4ba0      	ldr	r3, [pc, #640]	@ (8020d54 <_dtoa_r+0x710>)
 8020ad4:	00d2      	lsls	r2, r2, #3
 8020ad6:	189b      	adds	r3, r3, r2
 8020ad8:	685c      	ldr	r4, [r3, #4]
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	9306      	str	r3, [sp, #24]
 8020ade:	9407      	str	r4, [sp, #28]
 8020ae0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	da03      	bge.n	8020aee <_dtoa_r+0x4aa>
 8020ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	dc00      	bgt.n	8020aee <_dtoa_r+0x4aa>
 8020aec:	e106      	b.n	8020cfc <_dtoa_r+0x6b8>
 8020aee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020af0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020af4:	9d08      	ldr	r5, [sp, #32]
 8020af6:	3b01      	subs	r3, #1
 8020af8:	195b      	adds	r3, r3, r5
 8020afa:	930a      	str	r3, [sp, #40]	@ 0x28
 8020afc:	9a06      	ldr	r2, [sp, #24]
 8020afe:	9b07      	ldr	r3, [sp, #28]
 8020b00:	0030      	movs	r0, r6
 8020b02:	0039      	movs	r1, r7
 8020b04:	f7e1 f956 	bl	8001db4 <__aeabi_ddiv>
 8020b08:	f7e2 fc1e 	bl	8003348 <__aeabi_d2iz>
 8020b0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8020b0e:	f7e2 fc57 	bl	80033c0 <__aeabi_i2d>
 8020b12:	9a06      	ldr	r2, [sp, #24]
 8020b14:	9b07      	ldr	r3, [sp, #28]
 8020b16:	f7e1 fd91 	bl	800263c <__aeabi_dmul>
 8020b1a:	0002      	movs	r2, r0
 8020b1c:	000b      	movs	r3, r1
 8020b1e:	0030      	movs	r0, r6
 8020b20:	0039      	movs	r1, r7
 8020b22:	f7e2 f853 	bl	8002bcc <__aeabi_dsub>
 8020b26:	002b      	movs	r3, r5
 8020b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020b2a:	3501      	adds	r5, #1
 8020b2c:	3230      	adds	r2, #48	@ 0x30
 8020b2e:	701a      	strb	r2, [r3, #0]
 8020b30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020b32:	002c      	movs	r4, r5
 8020b34:	429a      	cmp	r2, r3
 8020b36:	d000      	beq.n	8020b3a <_dtoa_r+0x4f6>
 8020b38:	e131      	b.n	8020d9e <_dtoa_r+0x75a>
 8020b3a:	0002      	movs	r2, r0
 8020b3c:	000b      	movs	r3, r1
 8020b3e:	f7e0 fdd5 	bl	80016ec <__aeabi_dadd>
 8020b42:	9a06      	ldr	r2, [sp, #24]
 8020b44:	9b07      	ldr	r3, [sp, #28]
 8020b46:	0006      	movs	r6, r0
 8020b48:	000f      	movs	r7, r1
 8020b4a:	f7df fccb 	bl	80004e4 <__aeabi_dcmpgt>
 8020b4e:	2800      	cmp	r0, #0
 8020b50:	d000      	beq.n	8020b54 <_dtoa_r+0x510>
 8020b52:	e10f      	b.n	8020d74 <_dtoa_r+0x730>
 8020b54:	9a06      	ldr	r2, [sp, #24]
 8020b56:	9b07      	ldr	r3, [sp, #28]
 8020b58:	0030      	movs	r0, r6
 8020b5a:	0039      	movs	r1, r7
 8020b5c:	f7df fca8 	bl	80004b0 <__aeabi_dcmpeq>
 8020b60:	2800      	cmp	r0, #0
 8020b62:	d003      	beq.n	8020b6c <_dtoa_r+0x528>
 8020b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b66:	07dd      	lsls	r5, r3, #31
 8020b68:	d500      	bpl.n	8020b6c <_dtoa_r+0x528>
 8020b6a:	e103      	b.n	8020d74 <_dtoa_r+0x730>
 8020b6c:	9905      	ldr	r1, [sp, #20]
 8020b6e:	9803      	ldr	r0, [sp, #12]
 8020b70:	f001 f812 	bl	8021b98 <_Bfree>
 8020b74:	2300      	movs	r3, #0
 8020b76:	7023      	strb	r3, [r4, #0]
 8020b78:	9b04      	ldr	r3, [sp, #16]
 8020b7a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020b7c:	3301      	adds	r3, #1
 8020b7e:	6013      	str	r3, [r2, #0]
 8020b80:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d100      	bne.n	8020b88 <_dtoa_r+0x544>
 8020b86:	e5a7      	b.n	80206d8 <_dtoa_r+0x94>
 8020b88:	601c      	str	r4, [r3, #0]
 8020b8a:	e5a5      	b.n	80206d8 <_dtoa_r+0x94>
 8020b8c:	423d      	tst	r5, r7
 8020b8e:	d005      	beq.n	8020b9c <_dtoa_r+0x558>
 8020b90:	6832      	ldr	r2, [r6, #0]
 8020b92:	6873      	ldr	r3, [r6, #4]
 8020b94:	f7e1 fd52 	bl	800263c <__aeabi_dmul>
 8020b98:	003b      	movs	r3, r7
 8020b9a:	3401      	adds	r4, #1
 8020b9c:	106d      	asrs	r5, r5, #1
 8020b9e:	3608      	adds	r6, #8
 8020ba0:	e736      	b.n	8020a10 <_dtoa_r+0x3cc>
 8020ba2:	9b04      	ldr	r3, [sp, #16]
 8020ba4:	930c      	str	r3, [sp, #48]	@ 0x30
 8020ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ba8:	e75a      	b.n	8020a60 <_dtoa_r+0x41c>
 8020baa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020bac:	4b69      	ldr	r3, [pc, #420]	@ (8020d54 <_dtoa_r+0x710>)
 8020bae:	3a01      	subs	r2, #1
 8020bb0:	00d2      	lsls	r2, r2, #3
 8020bb2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020bb4:	189b      	adds	r3, r3, r2
 8020bb6:	681a      	ldr	r2, [r3, #0]
 8020bb8:	685b      	ldr	r3, [r3, #4]
 8020bba:	2900      	cmp	r1, #0
 8020bbc:	d04c      	beq.n	8020c58 <_dtoa_r+0x614>
 8020bbe:	2000      	movs	r0, #0
 8020bc0:	496b      	ldr	r1, [pc, #428]	@ (8020d70 <_dtoa_r+0x72c>)
 8020bc2:	f7e1 f8f7 	bl	8001db4 <__aeabi_ddiv>
 8020bc6:	0032      	movs	r2, r6
 8020bc8:	003b      	movs	r3, r7
 8020bca:	f7e1 ffff 	bl	8002bcc <__aeabi_dsub>
 8020bce:	9a08      	ldr	r2, [sp, #32]
 8020bd0:	0006      	movs	r6, r0
 8020bd2:	4694      	mov	ip, r2
 8020bd4:	000f      	movs	r7, r1
 8020bd6:	9b08      	ldr	r3, [sp, #32]
 8020bd8:	9316      	str	r3, [sp, #88]	@ 0x58
 8020bda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020bdc:	4463      	add	r3, ip
 8020bde:	9311      	str	r3, [sp, #68]	@ 0x44
 8020be0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020be2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020be4:	f7e2 fbb0 	bl	8003348 <__aeabi_d2iz>
 8020be8:	0005      	movs	r5, r0
 8020bea:	f7e2 fbe9 	bl	80033c0 <__aeabi_i2d>
 8020bee:	0002      	movs	r2, r0
 8020bf0:	000b      	movs	r3, r1
 8020bf2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020bf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020bf6:	f7e1 ffe9 	bl	8002bcc <__aeabi_dsub>
 8020bfa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020bfc:	3530      	adds	r5, #48	@ 0x30
 8020bfe:	1c5c      	adds	r4, r3, #1
 8020c00:	701d      	strb	r5, [r3, #0]
 8020c02:	0032      	movs	r2, r6
 8020c04:	003b      	movs	r3, r7
 8020c06:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c0a:	f7df fc57 	bl	80004bc <__aeabi_dcmplt>
 8020c0e:	2800      	cmp	r0, #0
 8020c10:	d16a      	bne.n	8020ce8 <_dtoa_r+0x6a4>
 8020c12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020c14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020c16:	2000      	movs	r0, #0
 8020c18:	4950      	ldr	r1, [pc, #320]	@ (8020d5c <_dtoa_r+0x718>)
 8020c1a:	f7e1 ffd7 	bl	8002bcc <__aeabi_dsub>
 8020c1e:	0032      	movs	r2, r6
 8020c20:	003b      	movs	r3, r7
 8020c22:	f7df fc4b 	bl	80004bc <__aeabi_dcmplt>
 8020c26:	2800      	cmp	r0, #0
 8020c28:	d000      	beq.n	8020c2c <_dtoa_r+0x5e8>
 8020c2a:	e0a5      	b.n	8020d78 <_dtoa_r+0x734>
 8020c2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020c2e:	42a3      	cmp	r3, r4
 8020c30:	d100      	bne.n	8020c34 <_dtoa_r+0x5f0>
 8020c32:	e742      	b.n	8020aba <_dtoa_r+0x476>
 8020c34:	2200      	movs	r2, #0
 8020c36:	0030      	movs	r0, r6
 8020c38:	0039      	movs	r1, r7
 8020c3a:	4b49      	ldr	r3, [pc, #292]	@ (8020d60 <_dtoa_r+0x71c>)
 8020c3c:	f7e1 fcfe 	bl	800263c <__aeabi_dmul>
 8020c40:	2200      	movs	r2, #0
 8020c42:	0006      	movs	r6, r0
 8020c44:	000f      	movs	r7, r1
 8020c46:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c4a:	4b45      	ldr	r3, [pc, #276]	@ (8020d60 <_dtoa_r+0x71c>)
 8020c4c:	f7e1 fcf6 	bl	800263c <__aeabi_dmul>
 8020c50:	9416      	str	r4, [sp, #88]	@ 0x58
 8020c52:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c54:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c56:	e7c3      	b.n	8020be0 <_dtoa_r+0x59c>
 8020c58:	0030      	movs	r0, r6
 8020c5a:	0039      	movs	r1, r7
 8020c5c:	f7e1 fcee 	bl	800263c <__aeabi_dmul>
 8020c60:	9d08      	ldr	r5, [sp, #32]
 8020c62:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020c64:	002b      	movs	r3, r5
 8020c66:	4694      	mov	ip, r2
 8020c68:	9016      	str	r0, [sp, #88]	@ 0x58
 8020c6a:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020c6c:	4463      	add	r3, ip
 8020c6e:	9319      	str	r3, [sp, #100]	@ 0x64
 8020c70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c74:	f7e2 fb68 	bl	8003348 <__aeabi_d2iz>
 8020c78:	0004      	movs	r4, r0
 8020c7a:	f7e2 fba1 	bl	80033c0 <__aeabi_i2d>
 8020c7e:	000b      	movs	r3, r1
 8020c80:	0002      	movs	r2, r0
 8020c82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c86:	f7e1 ffa1 	bl	8002bcc <__aeabi_dsub>
 8020c8a:	3430      	adds	r4, #48	@ 0x30
 8020c8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020c8e:	702c      	strb	r4, [r5, #0]
 8020c90:	3501      	adds	r5, #1
 8020c92:	0006      	movs	r6, r0
 8020c94:	000f      	movs	r7, r1
 8020c96:	42ab      	cmp	r3, r5
 8020c98:	d129      	bne.n	8020cee <_dtoa_r+0x6aa>
 8020c9a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020c9c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020c9e:	9b08      	ldr	r3, [sp, #32]
 8020ca0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020ca2:	469c      	mov	ip, r3
 8020ca4:	2200      	movs	r2, #0
 8020ca6:	4b32      	ldr	r3, [pc, #200]	@ (8020d70 <_dtoa_r+0x72c>)
 8020ca8:	4464      	add	r4, ip
 8020caa:	f7e0 fd1f 	bl	80016ec <__aeabi_dadd>
 8020cae:	0002      	movs	r2, r0
 8020cb0:	000b      	movs	r3, r1
 8020cb2:	0030      	movs	r0, r6
 8020cb4:	0039      	movs	r1, r7
 8020cb6:	f7df fc15 	bl	80004e4 <__aeabi_dcmpgt>
 8020cba:	2800      	cmp	r0, #0
 8020cbc:	d15c      	bne.n	8020d78 <_dtoa_r+0x734>
 8020cbe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020cc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020cc2:	2000      	movs	r0, #0
 8020cc4:	492a      	ldr	r1, [pc, #168]	@ (8020d70 <_dtoa_r+0x72c>)
 8020cc6:	f7e1 ff81 	bl	8002bcc <__aeabi_dsub>
 8020cca:	0002      	movs	r2, r0
 8020ccc:	000b      	movs	r3, r1
 8020cce:	0030      	movs	r0, r6
 8020cd0:	0039      	movs	r1, r7
 8020cd2:	f7df fbf3 	bl	80004bc <__aeabi_dcmplt>
 8020cd6:	2800      	cmp	r0, #0
 8020cd8:	d100      	bne.n	8020cdc <_dtoa_r+0x698>
 8020cda:	e6ee      	b.n	8020aba <_dtoa_r+0x476>
 8020cdc:	0023      	movs	r3, r4
 8020cde:	3c01      	subs	r4, #1
 8020ce0:	7822      	ldrb	r2, [r4, #0]
 8020ce2:	2a30      	cmp	r2, #48	@ 0x30
 8020ce4:	d0fa      	beq.n	8020cdc <_dtoa_r+0x698>
 8020ce6:	001c      	movs	r4, r3
 8020ce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020cea:	9304      	str	r3, [sp, #16]
 8020cec:	e73e      	b.n	8020b6c <_dtoa_r+0x528>
 8020cee:	2200      	movs	r2, #0
 8020cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8020d60 <_dtoa_r+0x71c>)
 8020cf2:	f7e1 fca3 	bl	800263c <__aeabi_dmul>
 8020cf6:	900a      	str	r0, [sp, #40]	@ 0x28
 8020cf8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020cfa:	e7b9      	b.n	8020c70 <_dtoa_r+0x62c>
 8020cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d10c      	bne.n	8020d1c <_dtoa_r+0x6d8>
 8020d02:	9806      	ldr	r0, [sp, #24]
 8020d04:	9907      	ldr	r1, [sp, #28]
 8020d06:	2200      	movs	r2, #0
 8020d08:	4b18      	ldr	r3, [pc, #96]	@ (8020d6c <_dtoa_r+0x728>)
 8020d0a:	f7e1 fc97 	bl	800263c <__aeabi_dmul>
 8020d0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020d10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020d12:	f7df fbf1 	bl	80004f8 <__aeabi_dcmpge>
 8020d16:	2800      	cmp	r0, #0
 8020d18:	d100      	bne.n	8020d1c <_dtoa_r+0x6d8>
 8020d1a:	e164      	b.n	8020fe6 <_dtoa_r+0x9a2>
 8020d1c:	2600      	movs	r6, #0
 8020d1e:	0037      	movs	r7, r6
 8020d20:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020d22:	9c08      	ldr	r4, [sp, #32]
 8020d24:	43db      	mvns	r3, r3
 8020d26:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d28:	2300      	movs	r3, #0
 8020d2a:	9304      	str	r3, [sp, #16]
 8020d2c:	0031      	movs	r1, r6
 8020d2e:	9803      	ldr	r0, [sp, #12]
 8020d30:	f000 ff32 	bl	8021b98 <_Bfree>
 8020d34:	2f00      	cmp	r7, #0
 8020d36:	d0d7      	beq.n	8020ce8 <_dtoa_r+0x6a4>
 8020d38:	9b04      	ldr	r3, [sp, #16]
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	d005      	beq.n	8020d4a <_dtoa_r+0x706>
 8020d3e:	42bb      	cmp	r3, r7
 8020d40:	d003      	beq.n	8020d4a <_dtoa_r+0x706>
 8020d42:	0019      	movs	r1, r3
 8020d44:	9803      	ldr	r0, [sp, #12]
 8020d46:	f000 ff27 	bl	8021b98 <_Bfree>
 8020d4a:	0039      	movs	r1, r7
 8020d4c:	9803      	ldr	r0, [sp, #12]
 8020d4e:	f000 ff23 	bl	8021b98 <_Bfree>
 8020d52:	e7c9      	b.n	8020ce8 <_dtoa_r+0x6a4>
 8020d54:	08026060 	.word	0x08026060
 8020d58:	08026038 	.word	0x08026038
 8020d5c:	3ff00000 	.word	0x3ff00000
 8020d60:	40240000 	.word	0x40240000
 8020d64:	401c0000 	.word	0x401c0000
 8020d68:	fcc00000 	.word	0xfcc00000
 8020d6c:	40140000 	.word	0x40140000
 8020d70:	3fe00000 	.word	0x3fe00000
 8020d74:	9b04      	ldr	r3, [sp, #16]
 8020d76:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d78:	0023      	movs	r3, r4
 8020d7a:	001c      	movs	r4, r3
 8020d7c:	3b01      	subs	r3, #1
 8020d7e:	781a      	ldrb	r2, [r3, #0]
 8020d80:	2a39      	cmp	r2, #57	@ 0x39
 8020d82:	d108      	bne.n	8020d96 <_dtoa_r+0x752>
 8020d84:	9a08      	ldr	r2, [sp, #32]
 8020d86:	429a      	cmp	r2, r3
 8020d88:	d1f7      	bne.n	8020d7a <_dtoa_r+0x736>
 8020d8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020d8c:	9908      	ldr	r1, [sp, #32]
 8020d8e:	3201      	adds	r2, #1
 8020d90:	920c      	str	r2, [sp, #48]	@ 0x30
 8020d92:	2230      	movs	r2, #48	@ 0x30
 8020d94:	700a      	strb	r2, [r1, #0]
 8020d96:	781a      	ldrb	r2, [r3, #0]
 8020d98:	3201      	adds	r2, #1
 8020d9a:	701a      	strb	r2, [r3, #0]
 8020d9c:	e7a4      	b.n	8020ce8 <_dtoa_r+0x6a4>
 8020d9e:	2200      	movs	r2, #0
 8020da0:	4bc6      	ldr	r3, [pc, #792]	@ (80210bc <_dtoa_r+0xa78>)
 8020da2:	f7e1 fc4b 	bl	800263c <__aeabi_dmul>
 8020da6:	2200      	movs	r2, #0
 8020da8:	2300      	movs	r3, #0
 8020daa:	0006      	movs	r6, r0
 8020dac:	000f      	movs	r7, r1
 8020dae:	f7df fb7f 	bl	80004b0 <__aeabi_dcmpeq>
 8020db2:	2800      	cmp	r0, #0
 8020db4:	d100      	bne.n	8020db8 <_dtoa_r+0x774>
 8020db6:	e6a1      	b.n	8020afc <_dtoa_r+0x4b8>
 8020db8:	e6d8      	b.n	8020b6c <_dtoa_r+0x528>
 8020dba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020dbc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020dbe:	9c06      	ldr	r4, [sp, #24]
 8020dc0:	2f00      	cmp	r7, #0
 8020dc2:	d014      	beq.n	8020dee <_dtoa_r+0x7aa>
 8020dc4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020dc6:	2a01      	cmp	r2, #1
 8020dc8:	dd00      	ble.n	8020dcc <_dtoa_r+0x788>
 8020dca:	e0c8      	b.n	8020f5e <_dtoa_r+0x91a>
 8020dcc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020dce:	2a00      	cmp	r2, #0
 8020dd0:	d100      	bne.n	8020dd4 <_dtoa_r+0x790>
 8020dd2:	e0be      	b.n	8020f52 <_dtoa_r+0x90e>
 8020dd4:	4aba      	ldr	r2, [pc, #744]	@ (80210c0 <_dtoa_r+0xa7c>)
 8020dd6:	189b      	adds	r3, r3, r2
 8020dd8:	9a06      	ldr	r2, [sp, #24]
 8020dda:	2101      	movs	r1, #1
 8020ddc:	18d2      	adds	r2, r2, r3
 8020dde:	9206      	str	r2, [sp, #24]
 8020de0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020de2:	9803      	ldr	r0, [sp, #12]
 8020de4:	18d3      	adds	r3, r2, r3
 8020de6:	930d      	str	r3, [sp, #52]	@ 0x34
 8020de8:	f000 ffda 	bl	8021da0 <__i2b>
 8020dec:	0007      	movs	r7, r0
 8020dee:	2c00      	cmp	r4, #0
 8020df0:	d00e      	beq.n	8020e10 <_dtoa_r+0x7cc>
 8020df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020df4:	2b00      	cmp	r3, #0
 8020df6:	dd0b      	ble.n	8020e10 <_dtoa_r+0x7cc>
 8020df8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020dfa:	0023      	movs	r3, r4
 8020dfc:	4294      	cmp	r4, r2
 8020dfe:	dd00      	ble.n	8020e02 <_dtoa_r+0x7be>
 8020e00:	0013      	movs	r3, r2
 8020e02:	9a06      	ldr	r2, [sp, #24]
 8020e04:	1ae4      	subs	r4, r4, r3
 8020e06:	1ad2      	subs	r2, r2, r3
 8020e08:	9206      	str	r2, [sp, #24]
 8020e0a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020e0c:	1ad3      	subs	r3, r2, r3
 8020e0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	d01f      	beq.n	8020e56 <_dtoa_r+0x812>
 8020e16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d100      	bne.n	8020e1e <_dtoa_r+0x7da>
 8020e1c:	e0b5      	b.n	8020f8a <_dtoa_r+0x946>
 8020e1e:	2d00      	cmp	r5, #0
 8020e20:	d010      	beq.n	8020e44 <_dtoa_r+0x800>
 8020e22:	0039      	movs	r1, r7
 8020e24:	002a      	movs	r2, r5
 8020e26:	9803      	ldr	r0, [sp, #12]
 8020e28:	f001 f884 	bl	8021f34 <__pow5mult>
 8020e2c:	9a05      	ldr	r2, [sp, #20]
 8020e2e:	0001      	movs	r1, r0
 8020e30:	0007      	movs	r7, r0
 8020e32:	9803      	ldr	r0, [sp, #12]
 8020e34:	f000 ffcc 	bl	8021dd0 <__multiply>
 8020e38:	0006      	movs	r6, r0
 8020e3a:	9905      	ldr	r1, [sp, #20]
 8020e3c:	9803      	ldr	r0, [sp, #12]
 8020e3e:	f000 feab 	bl	8021b98 <_Bfree>
 8020e42:	9605      	str	r6, [sp, #20]
 8020e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e46:	1b5a      	subs	r2, r3, r5
 8020e48:	42ab      	cmp	r3, r5
 8020e4a:	d004      	beq.n	8020e56 <_dtoa_r+0x812>
 8020e4c:	9905      	ldr	r1, [sp, #20]
 8020e4e:	9803      	ldr	r0, [sp, #12]
 8020e50:	f001 f870 	bl	8021f34 <__pow5mult>
 8020e54:	9005      	str	r0, [sp, #20]
 8020e56:	2101      	movs	r1, #1
 8020e58:	9803      	ldr	r0, [sp, #12]
 8020e5a:	f000 ffa1 	bl	8021da0 <__i2b>
 8020e5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020e60:	0006      	movs	r6, r0
 8020e62:	2b00      	cmp	r3, #0
 8020e64:	d100      	bne.n	8020e68 <_dtoa_r+0x824>
 8020e66:	e1bc      	b.n	80211e2 <_dtoa_r+0xb9e>
 8020e68:	001a      	movs	r2, r3
 8020e6a:	0001      	movs	r1, r0
 8020e6c:	9803      	ldr	r0, [sp, #12]
 8020e6e:	f001 f861 	bl	8021f34 <__pow5mult>
 8020e72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020e74:	0006      	movs	r6, r0
 8020e76:	2500      	movs	r5, #0
 8020e78:	2b01      	cmp	r3, #1
 8020e7a:	dc16      	bgt.n	8020eaa <_dtoa_r+0x866>
 8020e7c:	2500      	movs	r5, #0
 8020e7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020e80:	42ab      	cmp	r3, r5
 8020e82:	d10e      	bne.n	8020ea2 <_dtoa_r+0x85e>
 8020e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020e86:	031b      	lsls	r3, r3, #12
 8020e88:	42ab      	cmp	r3, r5
 8020e8a:	d10a      	bne.n	8020ea2 <_dtoa_r+0x85e>
 8020e8c:	4b8d      	ldr	r3, [pc, #564]	@ (80210c4 <_dtoa_r+0xa80>)
 8020e8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020e90:	4213      	tst	r3, r2
 8020e92:	d006      	beq.n	8020ea2 <_dtoa_r+0x85e>
 8020e94:	9b06      	ldr	r3, [sp, #24]
 8020e96:	3501      	adds	r5, #1
 8020e98:	3301      	adds	r3, #1
 8020e9a:	9306      	str	r3, [sp, #24]
 8020e9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020e9e:	3301      	adds	r3, #1
 8020ea0:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ea2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020ea4:	2001      	movs	r0, #1
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d008      	beq.n	8020ebc <_dtoa_r+0x878>
 8020eaa:	6933      	ldr	r3, [r6, #16]
 8020eac:	3303      	adds	r3, #3
 8020eae:	009b      	lsls	r3, r3, #2
 8020eb0:	18f3      	adds	r3, r6, r3
 8020eb2:	6858      	ldr	r0, [r3, #4]
 8020eb4:	f000 ff24 	bl	8021d00 <__hi0bits>
 8020eb8:	2320      	movs	r3, #32
 8020eba:	1a18      	subs	r0, r3, r0
 8020ebc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ebe:	1818      	adds	r0, r3, r0
 8020ec0:	0002      	movs	r2, r0
 8020ec2:	231f      	movs	r3, #31
 8020ec4:	401a      	ands	r2, r3
 8020ec6:	4218      	tst	r0, r3
 8020ec8:	d065      	beq.n	8020f96 <_dtoa_r+0x952>
 8020eca:	3301      	adds	r3, #1
 8020ecc:	1a9b      	subs	r3, r3, r2
 8020ece:	2b04      	cmp	r3, #4
 8020ed0:	dd5d      	ble.n	8020f8e <_dtoa_r+0x94a>
 8020ed2:	231c      	movs	r3, #28
 8020ed4:	1a9b      	subs	r3, r3, r2
 8020ed6:	9a06      	ldr	r2, [sp, #24]
 8020ed8:	18e4      	adds	r4, r4, r3
 8020eda:	18d2      	adds	r2, r2, r3
 8020edc:	9206      	str	r2, [sp, #24]
 8020ede:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020ee0:	18d3      	adds	r3, r2, r3
 8020ee2:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ee4:	9b06      	ldr	r3, [sp, #24]
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	dd05      	ble.n	8020ef6 <_dtoa_r+0x8b2>
 8020eea:	001a      	movs	r2, r3
 8020eec:	9905      	ldr	r1, [sp, #20]
 8020eee:	9803      	ldr	r0, [sp, #12]
 8020ef0:	f001 f87c 	bl	8021fec <__lshift>
 8020ef4:	9005      	str	r0, [sp, #20]
 8020ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	dd05      	ble.n	8020f08 <_dtoa_r+0x8c4>
 8020efc:	0031      	movs	r1, r6
 8020efe:	001a      	movs	r2, r3
 8020f00:	9803      	ldr	r0, [sp, #12]
 8020f02:	f001 f873 	bl	8021fec <__lshift>
 8020f06:	0006      	movs	r6, r0
 8020f08:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020f0a:	2b00      	cmp	r3, #0
 8020f0c:	d045      	beq.n	8020f9a <_dtoa_r+0x956>
 8020f0e:	0031      	movs	r1, r6
 8020f10:	9805      	ldr	r0, [sp, #20]
 8020f12:	f001 f8d7 	bl	80220c4 <__mcmp>
 8020f16:	2800      	cmp	r0, #0
 8020f18:	da3f      	bge.n	8020f9a <_dtoa_r+0x956>
 8020f1a:	9b04      	ldr	r3, [sp, #16]
 8020f1c:	220a      	movs	r2, #10
 8020f1e:	3b01      	subs	r3, #1
 8020f20:	930c      	str	r3, [sp, #48]	@ 0x30
 8020f22:	9905      	ldr	r1, [sp, #20]
 8020f24:	2300      	movs	r3, #0
 8020f26:	9803      	ldr	r0, [sp, #12]
 8020f28:	f000 fe5a 	bl	8021be0 <__multadd>
 8020f2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f2e:	9005      	str	r0, [sp, #20]
 8020f30:	2b00      	cmp	r3, #0
 8020f32:	d100      	bne.n	8020f36 <_dtoa_r+0x8f2>
 8020f34:	e15c      	b.n	80211f0 <_dtoa_r+0xbac>
 8020f36:	2300      	movs	r3, #0
 8020f38:	0039      	movs	r1, r7
 8020f3a:	220a      	movs	r2, #10
 8020f3c:	9803      	ldr	r0, [sp, #12]
 8020f3e:	f000 fe4f 	bl	8021be0 <__multadd>
 8020f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f44:	0007      	movs	r7, r0
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	dc55      	bgt.n	8020ff6 <_dtoa_r+0x9b2>
 8020f4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020f4c:	2b02      	cmp	r3, #2
 8020f4e:	dc2d      	bgt.n	8020fac <_dtoa_r+0x968>
 8020f50:	e051      	b.n	8020ff6 <_dtoa_r+0x9b2>
 8020f52:	2336      	movs	r3, #54	@ 0x36
 8020f54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020f56:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020f58:	9c06      	ldr	r4, [sp, #24]
 8020f5a:	1a9b      	subs	r3, r3, r2
 8020f5c:	e73c      	b.n	8020dd8 <_dtoa_r+0x794>
 8020f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f60:	1e5d      	subs	r5, r3, #1
 8020f62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f64:	42ab      	cmp	r3, r5
 8020f66:	db08      	blt.n	8020f7a <_dtoa_r+0x936>
 8020f68:	1b5d      	subs	r5, r3, r5
 8020f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f6c:	9c06      	ldr	r4, [sp, #24]
 8020f6e:	2b00      	cmp	r3, #0
 8020f70:	db00      	blt.n	8020f74 <_dtoa_r+0x930>
 8020f72:	e731      	b.n	8020dd8 <_dtoa_r+0x794>
 8020f74:	1ae4      	subs	r4, r4, r3
 8020f76:	2300      	movs	r3, #0
 8020f78:	e72e      	b.n	8020dd8 <_dtoa_r+0x794>
 8020f7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020f7e:	1aeb      	subs	r3, r5, r3
 8020f80:	18d3      	adds	r3, r2, r3
 8020f82:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020f84:	9314      	str	r3, [sp, #80]	@ 0x50
 8020f86:	2500      	movs	r5, #0
 8020f88:	e7ef      	b.n	8020f6a <_dtoa_r+0x926>
 8020f8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020f8c:	e75e      	b.n	8020e4c <_dtoa_r+0x808>
 8020f8e:	2b04      	cmp	r3, #4
 8020f90:	d0a8      	beq.n	8020ee4 <_dtoa_r+0x8a0>
 8020f92:	331c      	adds	r3, #28
 8020f94:	e79f      	b.n	8020ed6 <_dtoa_r+0x892>
 8020f96:	0013      	movs	r3, r2
 8020f98:	e7fb      	b.n	8020f92 <_dtoa_r+0x94e>
 8020f9a:	9b04      	ldr	r3, [sp, #16]
 8020f9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	dc23      	bgt.n	8020fee <_dtoa_r+0x9aa>
 8020fa6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020fa8:	2b02      	cmp	r3, #2
 8020faa:	dd20      	ble.n	8020fee <_dtoa_r+0x9aa>
 8020fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	d000      	beq.n	8020fb4 <_dtoa_r+0x970>
 8020fb2:	e6b5      	b.n	8020d20 <_dtoa_r+0x6dc>
 8020fb4:	0031      	movs	r1, r6
 8020fb6:	2205      	movs	r2, #5
 8020fb8:	9803      	ldr	r0, [sp, #12]
 8020fba:	f000 fe11 	bl	8021be0 <__multadd>
 8020fbe:	0006      	movs	r6, r0
 8020fc0:	0001      	movs	r1, r0
 8020fc2:	9805      	ldr	r0, [sp, #20]
 8020fc4:	f001 f87e 	bl	80220c4 <__mcmp>
 8020fc8:	2800      	cmp	r0, #0
 8020fca:	dc00      	bgt.n	8020fce <_dtoa_r+0x98a>
 8020fcc:	e6a8      	b.n	8020d20 <_dtoa_r+0x6dc>
 8020fce:	9b08      	ldr	r3, [sp, #32]
 8020fd0:	9a08      	ldr	r2, [sp, #32]
 8020fd2:	1c5c      	adds	r4, r3, #1
 8020fd4:	2331      	movs	r3, #49	@ 0x31
 8020fd6:	7013      	strb	r3, [r2, #0]
 8020fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020fda:	3301      	adds	r3, #1
 8020fdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8020fde:	e6a3      	b.n	8020d28 <_dtoa_r+0x6e4>
 8020fe0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020fe2:	0037      	movs	r7, r6
 8020fe4:	e7f3      	b.n	8020fce <_dtoa_r+0x98a>
 8020fe6:	9b04      	ldr	r3, [sp, #16]
 8020fe8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020fea:	930c      	str	r3, [sp, #48]	@ 0x30
 8020fec:	e7f9      	b.n	8020fe2 <_dtoa_r+0x99e>
 8020fee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020ff0:	2b00      	cmp	r3, #0
 8020ff2:	d100      	bne.n	8020ff6 <_dtoa_r+0x9b2>
 8020ff4:	e100      	b.n	80211f8 <_dtoa_r+0xbb4>
 8020ff6:	2c00      	cmp	r4, #0
 8020ff8:	dd05      	ble.n	8021006 <_dtoa_r+0x9c2>
 8020ffa:	0039      	movs	r1, r7
 8020ffc:	0022      	movs	r2, r4
 8020ffe:	9803      	ldr	r0, [sp, #12]
 8021000:	f000 fff4 	bl	8021fec <__lshift>
 8021004:	0007      	movs	r7, r0
 8021006:	0038      	movs	r0, r7
 8021008:	2d00      	cmp	r5, #0
 802100a:	d018      	beq.n	802103e <_dtoa_r+0x9fa>
 802100c:	6879      	ldr	r1, [r7, #4]
 802100e:	9803      	ldr	r0, [sp, #12]
 8021010:	f000 fd7e 	bl	8021b10 <_Balloc>
 8021014:	1e04      	subs	r4, r0, #0
 8021016:	d105      	bne.n	8021024 <_dtoa_r+0x9e0>
 8021018:	0022      	movs	r2, r4
 802101a:	4b2b      	ldr	r3, [pc, #172]	@ (80210c8 <_dtoa_r+0xa84>)
 802101c:	482b      	ldr	r0, [pc, #172]	@ (80210cc <_dtoa_r+0xa88>)
 802101e:	492c      	ldr	r1, [pc, #176]	@ (80210d0 <_dtoa_r+0xa8c>)
 8021020:	f7ff fb25 	bl	802066e <_dtoa_r+0x2a>
 8021024:	0039      	movs	r1, r7
 8021026:	693a      	ldr	r2, [r7, #16]
 8021028:	310c      	adds	r1, #12
 802102a:	3202      	adds	r2, #2
 802102c:	0092      	lsls	r2, r2, #2
 802102e:	300c      	adds	r0, #12
 8021030:	f7ff fa6a 	bl	8020508 <memcpy>
 8021034:	2201      	movs	r2, #1
 8021036:	0021      	movs	r1, r4
 8021038:	9803      	ldr	r0, [sp, #12]
 802103a:	f000 ffd7 	bl	8021fec <__lshift>
 802103e:	9b08      	ldr	r3, [sp, #32]
 8021040:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021042:	9306      	str	r3, [sp, #24]
 8021044:	3b01      	subs	r3, #1
 8021046:	189b      	adds	r3, r3, r2
 8021048:	2201      	movs	r2, #1
 802104a:	9704      	str	r7, [sp, #16]
 802104c:	0007      	movs	r7, r0
 802104e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021052:	4013      	ands	r3, r2
 8021054:	930e      	str	r3, [sp, #56]	@ 0x38
 8021056:	0031      	movs	r1, r6
 8021058:	9805      	ldr	r0, [sp, #20]
 802105a:	f7ff fa65 	bl	8020528 <quorem>
 802105e:	9904      	ldr	r1, [sp, #16]
 8021060:	0005      	movs	r5, r0
 8021062:	900a      	str	r0, [sp, #40]	@ 0x28
 8021064:	9805      	ldr	r0, [sp, #20]
 8021066:	f001 f82d 	bl	80220c4 <__mcmp>
 802106a:	003a      	movs	r2, r7
 802106c:	900d      	str	r0, [sp, #52]	@ 0x34
 802106e:	0031      	movs	r1, r6
 8021070:	9803      	ldr	r0, [sp, #12]
 8021072:	f001 f843 	bl	80220fc <__mdiff>
 8021076:	2201      	movs	r2, #1
 8021078:	68c3      	ldr	r3, [r0, #12]
 802107a:	0004      	movs	r4, r0
 802107c:	3530      	adds	r5, #48	@ 0x30
 802107e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021080:	2b00      	cmp	r3, #0
 8021082:	d104      	bne.n	802108e <_dtoa_r+0xa4a>
 8021084:	0001      	movs	r1, r0
 8021086:	9805      	ldr	r0, [sp, #20]
 8021088:	f001 f81c 	bl	80220c4 <__mcmp>
 802108c:	9009      	str	r0, [sp, #36]	@ 0x24
 802108e:	0021      	movs	r1, r4
 8021090:	9803      	ldr	r0, [sp, #12]
 8021092:	f000 fd81 	bl	8021b98 <_Bfree>
 8021096:	9b06      	ldr	r3, [sp, #24]
 8021098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802109a:	1c5c      	adds	r4, r3, #1
 802109c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802109e:	4313      	orrs	r3, r2
 80210a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80210a2:	4313      	orrs	r3, r2
 80210a4:	d116      	bne.n	80210d4 <_dtoa_r+0xa90>
 80210a6:	2d39      	cmp	r5, #57	@ 0x39
 80210a8:	d02f      	beq.n	802110a <_dtoa_r+0xac6>
 80210aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210ac:	2b00      	cmp	r3, #0
 80210ae:	dd01      	ble.n	80210b4 <_dtoa_r+0xa70>
 80210b0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80210b2:	3531      	adds	r5, #49	@ 0x31
 80210b4:	9b06      	ldr	r3, [sp, #24]
 80210b6:	701d      	strb	r5, [r3, #0]
 80210b8:	e638      	b.n	8020d2c <_dtoa_r+0x6e8>
 80210ba:	46c0      	nop			@ (mov r8, r8)
 80210bc:	40240000 	.word	0x40240000
 80210c0:	00000433 	.word	0x00000433
 80210c4:	7ff00000 	.word	0x7ff00000
 80210c8:	08025f61 	.word	0x08025f61
 80210cc:	08025f09 	.word	0x08025f09
 80210d0:	000002ef 	.word	0x000002ef
 80210d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	db04      	blt.n	80210e4 <_dtoa_r+0xaa0>
 80210da:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80210dc:	4313      	orrs	r3, r2
 80210de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80210e0:	4313      	orrs	r3, r2
 80210e2:	d11e      	bne.n	8021122 <_dtoa_r+0xade>
 80210e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	dde4      	ble.n	80210b4 <_dtoa_r+0xa70>
 80210ea:	9905      	ldr	r1, [sp, #20]
 80210ec:	2201      	movs	r2, #1
 80210ee:	9803      	ldr	r0, [sp, #12]
 80210f0:	f000 ff7c 	bl	8021fec <__lshift>
 80210f4:	0031      	movs	r1, r6
 80210f6:	9005      	str	r0, [sp, #20]
 80210f8:	f000 ffe4 	bl	80220c4 <__mcmp>
 80210fc:	2800      	cmp	r0, #0
 80210fe:	dc02      	bgt.n	8021106 <_dtoa_r+0xac2>
 8021100:	d1d8      	bne.n	80210b4 <_dtoa_r+0xa70>
 8021102:	07eb      	lsls	r3, r5, #31
 8021104:	d5d6      	bpl.n	80210b4 <_dtoa_r+0xa70>
 8021106:	2d39      	cmp	r5, #57	@ 0x39
 8021108:	d1d2      	bne.n	80210b0 <_dtoa_r+0xa6c>
 802110a:	2339      	movs	r3, #57	@ 0x39
 802110c:	9a06      	ldr	r2, [sp, #24]
 802110e:	7013      	strb	r3, [r2, #0]
 8021110:	0023      	movs	r3, r4
 8021112:	001c      	movs	r4, r3
 8021114:	3b01      	subs	r3, #1
 8021116:	781a      	ldrb	r2, [r3, #0]
 8021118:	2a39      	cmp	r2, #57	@ 0x39
 802111a:	d04f      	beq.n	80211bc <_dtoa_r+0xb78>
 802111c:	3201      	adds	r2, #1
 802111e:	701a      	strb	r2, [r3, #0]
 8021120:	e604      	b.n	8020d2c <_dtoa_r+0x6e8>
 8021122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021124:	2b00      	cmp	r3, #0
 8021126:	dd03      	ble.n	8021130 <_dtoa_r+0xaec>
 8021128:	2d39      	cmp	r5, #57	@ 0x39
 802112a:	d0ee      	beq.n	802110a <_dtoa_r+0xac6>
 802112c:	3501      	adds	r5, #1
 802112e:	e7c1      	b.n	80210b4 <_dtoa_r+0xa70>
 8021130:	9b06      	ldr	r3, [sp, #24]
 8021132:	9a06      	ldr	r2, [sp, #24]
 8021134:	701d      	strb	r5, [r3, #0]
 8021136:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021138:	4293      	cmp	r3, r2
 802113a:	d02a      	beq.n	8021192 <_dtoa_r+0xb4e>
 802113c:	2300      	movs	r3, #0
 802113e:	220a      	movs	r2, #10
 8021140:	9905      	ldr	r1, [sp, #20]
 8021142:	9803      	ldr	r0, [sp, #12]
 8021144:	f000 fd4c 	bl	8021be0 <__multadd>
 8021148:	9b04      	ldr	r3, [sp, #16]
 802114a:	9005      	str	r0, [sp, #20]
 802114c:	42bb      	cmp	r3, r7
 802114e:	d109      	bne.n	8021164 <_dtoa_r+0xb20>
 8021150:	2300      	movs	r3, #0
 8021152:	220a      	movs	r2, #10
 8021154:	9904      	ldr	r1, [sp, #16]
 8021156:	9803      	ldr	r0, [sp, #12]
 8021158:	f000 fd42 	bl	8021be0 <__multadd>
 802115c:	9004      	str	r0, [sp, #16]
 802115e:	0007      	movs	r7, r0
 8021160:	9406      	str	r4, [sp, #24]
 8021162:	e778      	b.n	8021056 <_dtoa_r+0xa12>
 8021164:	9904      	ldr	r1, [sp, #16]
 8021166:	2300      	movs	r3, #0
 8021168:	220a      	movs	r2, #10
 802116a:	9803      	ldr	r0, [sp, #12]
 802116c:	f000 fd38 	bl	8021be0 <__multadd>
 8021170:	2300      	movs	r3, #0
 8021172:	9004      	str	r0, [sp, #16]
 8021174:	220a      	movs	r2, #10
 8021176:	0039      	movs	r1, r7
 8021178:	9803      	ldr	r0, [sp, #12]
 802117a:	f000 fd31 	bl	8021be0 <__multadd>
 802117e:	e7ee      	b.n	802115e <_dtoa_r+0xb1a>
 8021180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021182:	2401      	movs	r4, #1
 8021184:	2b00      	cmp	r3, #0
 8021186:	dd00      	ble.n	802118a <_dtoa_r+0xb46>
 8021188:	001c      	movs	r4, r3
 802118a:	9b08      	ldr	r3, [sp, #32]
 802118c:	191c      	adds	r4, r3, r4
 802118e:	2300      	movs	r3, #0
 8021190:	9304      	str	r3, [sp, #16]
 8021192:	9905      	ldr	r1, [sp, #20]
 8021194:	2201      	movs	r2, #1
 8021196:	9803      	ldr	r0, [sp, #12]
 8021198:	f000 ff28 	bl	8021fec <__lshift>
 802119c:	0031      	movs	r1, r6
 802119e:	9005      	str	r0, [sp, #20]
 80211a0:	f000 ff90 	bl	80220c4 <__mcmp>
 80211a4:	2800      	cmp	r0, #0
 80211a6:	dcb3      	bgt.n	8021110 <_dtoa_r+0xacc>
 80211a8:	d101      	bne.n	80211ae <_dtoa_r+0xb6a>
 80211aa:	07ed      	lsls	r5, r5, #31
 80211ac:	d4b0      	bmi.n	8021110 <_dtoa_r+0xacc>
 80211ae:	0023      	movs	r3, r4
 80211b0:	001c      	movs	r4, r3
 80211b2:	3b01      	subs	r3, #1
 80211b4:	781a      	ldrb	r2, [r3, #0]
 80211b6:	2a30      	cmp	r2, #48	@ 0x30
 80211b8:	d0fa      	beq.n	80211b0 <_dtoa_r+0xb6c>
 80211ba:	e5b7      	b.n	8020d2c <_dtoa_r+0x6e8>
 80211bc:	9a08      	ldr	r2, [sp, #32]
 80211be:	429a      	cmp	r2, r3
 80211c0:	d1a7      	bne.n	8021112 <_dtoa_r+0xace>
 80211c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80211c4:	3301      	adds	r3, #1
 80211c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80211c8:	2331      	movs	r3, #49	@ 0x31
 80211ca:	7013      	strb	r3, [r2, #0]
 80211cc:	e5ae      	b.n	8020d2c <_dtoa_r+0x6e8>
 80211ce:	4b15      	ldr	r3, [pc, #84]	@ (8021224 <_dtoa_r+0xbe0>)
 80211d0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80211d2:	9308      	str	r3, [sp, #32]
 80211d4:	4b14      	ldr	r3, [pc, #80]	@ (8021228 <_dtoa_r+0xbe4>)
 80211d6:	2a00      	cmp	r2, #0
 80211d8:	d001      	beq.n	80211de <_dtoa_r+0xb9a>
 80211da:	f7ff fa7b 	bl	80206d4 <_dtoa_r+0x90>
 80211de:	f7ff fa7b 	bl	80206d8 <_dtoa_r+0x94>
 80211e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80211e4:	2b01      	cmp	r3, #1
 80211e6:	dc00      	bgt.n	80211ea <_dtoa_r+0xba6>
 80211e8:	e648      	b.n	8020e7c <_dtoa_r+0x838>
 80211ea:	2001      	movs	r0, #1
 80211ec:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80211ee:	e665      	b.n	8020ebc <_dtoa_r+0x878>
 80211f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80211f2:	2b00      	cmp	r3, #0
 80211f4:	dc00      	bgt.n	80211f8 <_dtoa_r+0xbb4>
 80211f6:	e6d6      	b.n	8020fa6 <_dtoa_r+0x962>
 80211f8:	2400      	movs	r4, #0
 80211fa:	0031      	movs	r1, r6
 80211fc:	9805      	ldr	r0, [sp, #20]
 80211fe:	f7ff f993 	bl	8020528 <quorem>
 8021202:	9b08      	ldr	r3, [sp, #32]
 8021204:	3030      	adds	r0, #48	@ 0x30
 8021206:	5518      	strb	r0, [r3, r4]
 8021208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802120a:	3401      	adds	r4, #1
 802120c:	0005      	movs	r5, r0
 802120e:	429c      	cmp	r4, r3
 8021210:	dab6      	bge.n	8021180 <_dtoa_r+0xb3c>
 8021212:	2300      	movs	r3, #0
 8021214:	220a      	movs	r2, #10
 8021216:	9905      	ldr	r1, [sp, #20]
 8021218:	9803      	ldr	r0, [sp, #12]
 802121a:	f000 fce1 	bl	8021be0 <__multadd>
 802121e:	9005      	str	r0, [sp, #20]
 8021220:	e7eb      	b.n	80211fa <_dtoa_r+0xbb6>
 8021222:	46c0      	nop			@ (mov r8, r8)
 8021224:	08025ee5 	.word	0x08025ee5
 8021228:	08025eed 	.word	0x08025eed

0802122c <_free_r>:
 802122c:	b570      	push	{r4, r5, r6, lr}
 802122e:	0005      	movs	r5, r0
 8021230:	1e0c      	subs	r4, r1, #0
 8021232:	d010      	beq.n	8021256 <_free_r+0x2a>
 8021234:	3c04      	subs	r4, #4
 8021236:	6823      	ldr	r3, [r4, #0]
 8021238:	2b00      	cmp	r3, #0
 802123a:	da00      	bge.n	802123e <_free_r+0x12>
 802123c:	18e4      	adds	r4, r4, r3
 802123e:	0028      	movs	r0, r5
 8021240:	f000 fc56 	bl	8021af0 <__malloc_lock>
 8021244:	4a1d      	ldr	r2, [pc, #116]	@ (80212bc <_free_r+0x90>)
 8021246:	6813      	ldr	r3, [r2, #0]
 8021248:	2b00      	cmp	r3, #0
 802124a:	d105      	bne.n	8021258 <_free_r+0x2c>
 802124c:	6063      	str	r3, [r4, #4]
 802124e:	6014      	str	r4, [r2, #0]
 8021250:	0028      	movs	r0, r5
 8021252:	f000 fc55 	bl	8021b00 <__malloc_unlock>
 8021256:	bd70      	pop	{r4, r5, r6, pc}
 8021258:	42a3      	cmp	r3, r4
 802125a:	d908      	bls.n	802126e <_free_r+0x42>
 802125c:	6820      	ldr	r0, [r4, #0]
 802125e:	1821      	adds	r1, r4, r0
 8021260:	428b      	cmp	r3, r1
 8021262:	d1f3      	bne.n	802124c <_free_r+0x20>
 8021264:	6819      	ldr	r1, [r3, #0]
 8021266:	685b      	ldr	r3, [r3, #4]
 8021268:	1809      	adds	r1, r1, r0
 802126a:	6021      	str	r1, [r4, #0]
 802126c:	e7ee      	b.n	802124c <_free_r+0x20>
 802126e:	001a      	movs	r2, r3
 8021270:	685b      	ldr	r3, [r3, #4]
 8021272:	2b00      	cmp	r3, #0
 8021274:	d001      	beq.n	802127a <_free_r+0x4e>
 8021276:	42a3      	cmp	r3, r4
 8021278:	d9f9      	bls.n	802126e <_free_r+0x42>
 802127a:	6811      	ldr	r1, [r2, #0]
 802127c:	1850      	adds	r0, r2, r1
 802127e:	42a0      	cmp	r0, r4
 8021280:	d10b      	bne.n	802129a <_free_r+0x6e>
 8021282:	6820      	ldr	r0, [r4, #0]
 8021284:	1809      	adds	r1, r1, r0
 8021286:	1850      	adds	r0, r2, r1
 8021288:	6011      	str	r1, [r2, #0]
 802128a:	4283      	cmp	r3, r0
 802128c:	d1e0      	bne.n	8021250 <_free_r+0x24>
 802128e:	6818      	ldr	r0, [r3, #0]
 8021290:	685b      	ldr	r3, [r3, #4]
 8021292:	1841      	adds	r1, r0, r1
 8021294:	6011      	str	r1, [r2, #0]
 8021296:	6053      	str	r3, [r2, #4]
 8021298:	e7da      	b.n	8021250 <_free_r+0x24>
 802129a:	42a0      	cmp	r0, r4
 802129c:	d902      	bls.n	80212a4 <_free_r+0x78>
 802129e:	230c      	movs	r3, #12
 80212a0:	602b      	str	r3, [r5, #0]
 80212a2:	e7d5      	b.n	8021250 <_free_r+0x24>
 80212a4:	6820      	ldr	r0, [r4, #0]
 80212a6:	1821      	adds	r1, r4, r0
 80212a8:	428b      	cmp	r3, r1
 80212aa:	d103      	bne.n	80212b4 <_free_r+0x88>
 80212ac:	6819      	ldr	r1, [r3, #0]
 80212ae:	685b      	ldr	r3, [r3, #4]
 80212b0:	1809      	adds	r1, r1, r0
 80212b2:	6021      	str	r1, [r4, #0]
 80212b4:	6063      	str	r3, [r4, #4]
 80212b6:	6054      	str	r4, [r2, #4]
 80212b8:	e7ca      	b.n	8021250 <_free_r+0x24>
 80212ba:	46c0      	nop			@ (mov r8, r8)
 80212bc:	200037c8 	.word	0x200037c8

080212c0 <rshift>:
 80212c0:	0002      	movs	r2, r0
 80212c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80212c4:	6904      	ldr	r4, [r0, #16]
 80212c6:	b085      	sub	sp, #20
 80212c8:	3214      	adds	r2, #20
 80212ca:	114b      	asrs	r3, r1, #5
 80212cc:	0016      	movs	r6, r2
 80212ce:	9302      	str	r3, [sp, #8]
 80212d0:	429c      	cmp	r4, r3
 80212d2:	dd31      	ble.n	8021338 <rshift+0x78>
 80212d4:	261f      	movs	r6, #31
 80212d6:	000f      	movs	r7, r1
 80212d8:	009b      	lsls	r3, r3, #2
 80212da:	00a5      	lsls	r5, r4, #2
 80212dc:	18d3      	adds	r3, r2, r3
 80212de:	4037      	ands	r7, r6
 80212e0:	1955      	adds	r5, r2, r5
 80212e2:	9300      	str	r3, [sp, #0]
 80212e4:	9701      	str	r7, [sp, #4]
 80212e6:	4231      	tst	r1, r6
 80212e8:	d10d      	bne.n	8021306 <rshift+0x46>
 80212ea:	0016      	movs	r6, r2
 80212ec:	0019      	movs	r1, r3
 80212ee:	428d      	cmp	r5, r1
 80212f0:	d836      	bhi.n	8021360 <rshift+0xa0>
 80212f2:	9b00      	ldr	r3, [sp, #0]
 80212f4:	2600      	movs	r6, #0
 80212f6:	3b03      	subs	r3, #3
 80212f8:	429d      	cmp	r5, r3
 80212fa:	d302      	bcc.n	8021302 <rshift+0x42>
 80212fc:	9b02      	ldr	r3, [sp, #8]
 80212fe:	1ae4      	subs	r4, r4, r3
 8021300:	00a6      	lsls	r6, r4, #2
 8021302:	1996      	adds	r6, r2, r6
 8021304:	e018      	b.n	8021338 <rshift+0x78>
 8021306:	2120      	movs	r1, #32
 8021308:	9e01      	ldr	r6, [sp, #4]
 802130a:	9f01      	ldr	r7, [sp, #4]
 802130c:	1b89      	subs	r1, r1, r6
 802130e:	9e00      	ldr	r6, [sp, #0]
 8021310:	9103      	str	r1, [sp, #12]
 8021312:	ce02      	ldmia	r6!, {r1}
 8021314:	4694      	mov	ip, r2
 8021316:	40f9      	lsrs	r1, r7
 8021318:	42b5      	cmp	r5, r6
 802131a:	d816      	bhi.n	802134a <rshift+0x8a>
 802131c:	9b00      	ldr	r3, [sp, #0]
 802131e:	2600      	movs	r6, #0
 8021320:	3301      	adds	r3, #1
 8021322:	429d      	cmp	r5, r3
 8021324:	d303      	bcc.n	802132e <rshift+0x6e>
 8021326:	9b02      	ldr	r3, [sp, #8]
 8021328:	1ae4      	subs	r4, r4, r3
 802132a:	00a6      	lsls	r6, r4, #2
 802132c:	3e04      	subs	r6, #4
 802132e:	1996      	adds	r6, r2, r6
 8021330:	6031      	str	r1, [r6, #0]
 8021332:	2900      	cmp	r1, #0
 8021334:	d000      	beq.n	8021338 <rshift+0x78>
 8021336:	3604      	adds	r6, #4
 8021338:	1ab1      	subs	r1, r6, r2
 802133a:	1089      	asrs	r1, r1, #2
 802133c:	6101      	str	r1, [r0, #16]
 802133e:	4296      	cmp	r6, r2
 8021340:	d101      	bne.n	8021346 <rshift+0x86>
 8021342:	2300      	movs	r3, #0
 8021344:	6143      	str	r3, [r0, #20]
 8021346:	b005      	add	sp, #20
 8021348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802134a:	6837      	ldr	r7, [r6, #0]
 802134c:	9b03      	ldr	r3, [sp, #12]
 802134e:	409f      	lsls	r7, r3
 8021350:	430f      	orrs	r7, r1
 8021352:	4661      	mov	r1, ip
 8021354:	c180      	stmia	r1!, {r7}
 8021356:	468c      	mov	ip, r1
 8021358:	9b01      	ldr	r3, [sp, #4]
 802135a:	ce02      	ldmia	r6!, {r1}
 802135c:	40d9      	lsrs	r1, r3
 802135e:	e7db      	b.n	8021318 <rshift+0x58>
 8021360:	c980      	ldmia	r1!, {r7}
 8021362:	c680      	stmia	r6!, {r7}
 8021364:	e7c3      	b.n	80212ee <rshift+0x2e>

08021366 <__hexdig_fun>:
 8021366:	0002      	movs	r2, r0
 8021368:	3a30      	subs	r2, #48	@ 0x30
 802136a:	0003      	movs	r3, r0
 802136c:	2a09      	cmp	r2, #9
 802136e:	d802      	bhi.n	8021376 <__hexdig_fun+0x10>
 8021370:	3b20      	subs	r3, #32
 8021372:	b2d8      	uxtb	r0, r3
 8021374:	4770      	bx	lr
 8021376:	0002      	movs	r2, r0
 8021378:	3a61      	subs	r2, #97	@ 0x61
 802137a:	2a05      	cmp	r2, #5
 802137c:	d801      	bhi.n	8021382 <__hexdig_fun+0x1c>
 802137e:	3b47      	subs	r3, #71	@ 0x47
 8021380:	e7f7      	b.n	8021372 <__hexdig_fun+0xc>
 8021382:	001a      	movs	r2, r3
 8021384:	3a41      	subs	r2, #65	@ 0x41
 8021386:	2000      	movs	r0, #0
 8021388:	2a05      	cmp	r2, #5
 802138a:	d8f3      	bhi.n	8021374 <__hexdig_fun+0xe>
 802138c:	3b27      	subs	r3, #39	@ 0x27
 802138e:	e7f0      	b.n	8021372 <__hexdig_fun+0xc>

08021390 <__gethex>:
 8021390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021392:	b089      	sub	sp, #36	@ 0x24
 8021394:	9307      	str	r3, [sp, #28]
 8021396:	680b      	ldr	r3, [r1, #0]
 8021398:	9201      	str	r2, [sp, #4]
 802139a:	9003      	str	r0, [sp, #12]
 802139c:	9106      	str	r1, [sp, #24]
 802139e:	1c9a      	adds	r2, r3, #2
 80213a0:	0011      	movs	r1, r2
 80213a2:	3201      	adds	r2, #1
 80213a4:	1e50      	subs	r0, r2, #1
 80213a6:	7800      	ldrb	r0, [r0, #0]
 80213a8:	2830      	cmp	r0, #48	@ 0x30
 80213aa:	d0f9      	beq.n	80213a0 <__gethex+0x10>
 80213ac:	1acb      	subs	r3, r1, r3
 80213ae:	3b02      	subs	r3, #2
 80213b0:	9305      	str	r3, [sp, #20]
 80213b2:	9100      	str	r1, [sp, #0]
 80213b4:	f7ff ffd7 	bl	8021366 <__hexdig_fun>
 80213b8:	2300      	movs	r3, #0
 80213ba:	001d      	movs	r5, r3
 80213bc:	9302      	str	r3, [sp, #8]
 80213be:	4298      	cmp	r0, r3
 80213c0:	d11e      	bne.n	8021400 <__gethex+0x70>
 80213c2:	2201      	movs	r2, #1
 80213c4:	49a6      	ldr	r1, [pc, #664]	@ (8021660 <__gethex+0x2d0>)
 80213c6:	9800      	ldr	r0, [sp, #0]
 80213c8:	f7fe ffd8 	bl	802037c <strncmp>
 80213cc:	0007      	movs	r7, r0
 80213ce:	42a8      	cmp	r0, r5
 80213d0:	d000      	beq.n	80213d4 <__gethex+0x44>
 80213d2:	e06a      	b.n	80214aa <__gethex+0x11a>
 80213d4:	9b00      	ldr	r3, [sp, #0]
 80213d6:	7858      	ldrb	r0, [r3, #1]
 80213d8:	1c5c      	adds	r4, r3, #1
 80213da:	f7ff ffc4 	bl	8021366 <__hexdig_fun>
 80213de:	2301      	movs	r3, #1
 80213e0:	9302      	str	r3, [sp, #8]
 80213e2:	42a8      	cmp	r0, r5
 80213e4:	d02f      	beq.n	8021446 <__gethex+0xb6>
 80213e6:	9400      	str	r4, [sp, #0]
 80213e8:	9b00      	ldr	r3, [sp, #0]
 80213ea:	7818      	ldrb	r0, [r3, #0]
 80213ec:	2830      	cmp	r0, #48	@ 0x30
 80213ee:	d009      	beq.n	8021404 <__gethex+0x74>
 80213f0:	f7ff ffb9 	bl	8021366 <__hexdig_fun>
 80213f4:	4242      	negs	r2, r0
 80213f6:	4142      	adcs	r2, r0
 80213f8:	2301      	movs	r3, #1
 80213fa:	0025      	movs	r5, r4
 80213fc:	9202      	str	r2, [sp, #8]
 80213fe:	9305      	str	r3, [sp, #20]
 8021400:	9c00      	ldr	r4, [sp, #0]
 8021402:	e004      	b.n	802140e <__gethex+0x7e>
 8021404:	9b00      	ldr	r3, [sp, #0]
 8021406:	3301      	adds	r3, #1
 8021408:	9300      	str	r3, [sp, #0]
 802140a:	e7ed      	b.n	80213e8 <__gethex+0x58>
 802140c:	3401      	adds	r4, #1
 802140e:	7820      	ldrb	r0, [r4, #0]
 8021410:	f7ff ffa9 	bl	8021366 <__hexdig_fun>
 8021414:	1e07      	subs	r7, r0, #0
 8021416:	d1f9      	bne.n	802140c <__gethex+0x7c>
 8021418:	2201      	movs	r2, #1
 802141a:	0020      	movs	r0, r4
 802141c:	4990      	ldr	r1, [pc, #576]	@ (8021660 <__gethex+0x2d0>)
 802141e:	f7fe ffad 	bl	802037c <strncmp>
 8021422:	2800      	cmp	r0, #0
 8021424:	d10d      	bne.n	8021442 <__gethex+0xb2>
 8021426:	2d00      	cmp	r5, #0
 8021428:	d106      	bne.n	8021438 <__gethex+0xa8>
 802142a:	3401      	adds	r4, #1
 802142c:	0025      	movs	r5, r4
 802142e:	7820      	ldrb	r0, [r4, #0]
 8021430:	f7ff ff99 	bl	8021366 <__hexdig_fun>
 8021434:	2800      	cmp	r0, #0
 8021436:	d102      	bne.n	802143e <__gethex+0xae>
 8021438:	1b2d      	subs	r5, r5, r4
 802143a:	00af      	lsls	r7, r5, #2
 802143c:	e003      	b.n	8021446 <__gethex+0xb6>
 802143e:	3401      	adds	r4, #1
 8021440:	e7f5      	b.n	802142e <__gethex+0x9e>
 8021442:	2d00      	cmp	r5, #0
 8021444:	d1f8      	bne.n	8021438 <__gethex+0xa8>
 8021446:	2220      	movs	r2, #32
 8021448:	7823      	ldrb	r3, [r4, #0]
 802144a:	0026      	movs	r6, r4
 802144c:	4393      	bics	r3, r2
 802144e:	2b50      	cmp	r3, #80	@ 0x50
 8021450:	d11d      	bne.n	802148e <__gethex+0xfe>
 8021452:	7863      	ldrb	r3, [r4, #1]
 8021454:	2b2b      	cmp	r3, #43	@ 0x2b
 8021456:	d02d      	beq.n	80214b4 <__gethex+0x124>
 8021458:	2b2d      	cmp	r3, #45	@ 0x2d
 802145a:	d02f      	beq.n	80214bc <__gethex+0x12c>
 802145c:	2300      	movs	r3, #0
 802145e:	1c66      	adds	r6, r4, #1
 8021460:	9304      	str	r3, [sp, #16]
 8021462:	7830      	ldrb	r0, [r6, #0]
 8021464:	f7ff ff7f 	bl	8021366 <__hexdig_fun>
 8021468:	1e43      	subs	r3, r0, #1
 802146a:	b2db      	uxtb	r3, r3
 802146c:	0005      	movs	r5, r0
 802146e:	2b18      	cmp	r3, #24
 8021470:	d82a      	bhi.n	80214c8 <__gethex+0x138>
 8021472:	7870      	ldrb	r0, [r6, #1]
 8021474:	f7ff ff77 	bl	8021366 <__hexdig_fun>
 8021478:	1e43      	subs	r3, r0, #1
 802147a:	b2db      	uxtb	r3, r3
 802147c:	3601      	adds	r6, #1
 802147e:	3d10      	subs	r5, #16
 8021480:	2b18      	cmp	r3, #24
 8021482:	d91d      	bls.n	80214c0 <__gethex+0x130>
 8021484:	9b04      	ldr	r3, [sp, #16]
 8021486:	2b00      	cmp	r3, #0
 8021488:	d000      	beq.n	802148c <__gethex+0xfc>
 802148a:	426d      	negs	r5, r5
 802148c:	197f      	adds	r7, r7, r5
 802148e:	9b06      	ldr	r3, [sp, #24]
 8021490:	601e      	str	r6, [r3, #0]
 8021492:	9b02      	ldr	r3, [sp, #8]
 8021494:	2b00      	cmp	r3, #0
 8021496:	d019      	beq.n	80214cc <__gethex+0x13c>
 8021498:	9b05      	ldr	r3, [sp, #20]
 802149a:	2606      	movs	r6, #6
 802149c:	425a      	negs	r2, r3
 802149e:	4153      	adcs	r3, r2
 80214a0:	425b      	negs	r3, r3
 80214a2:	401e      	ands	r6, r3
 80214a4:	0030      	movs	r0, r6
 80214a6:	b009      	add	sp, #36	@ 0x24
 80214a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214aa:	2301      	movs	r3, #1
 80214ac:	2700      	movs	r7, #0
 80214ae:	9c00      	ldr	r4, [sp, #0]
 80214b0:	9302      	str	r3, [sp, #8]
 80214b2:	e7c8      	b.n	8021446 <__gethex+0xb6>
 80214b4:	2300      	movs	r3, #0
 80214b6:	9304      	str	r3, [sp, #16]
 80214b8:	1ca6      	adds	r6, r4, #2
 80214ba:	e7d2      	b.n	8021462 <__gethex+0xd2>
 80214bc:	2301      	movs	r3, #1
 80214be:	e7fa      	b.n	80214b6 <__gethex+0x126>
 80214c0:	230a      	movs	r3, #10
 80214c2:	435d      	muls	r5, r3
 80214c4:	182d      	adds	r5, r5, r0
 80214c6:	e7d4      	b.n	8021472 <__gethex+0xe2>
 80214c8:	0026      	movs	r6, r4
 80214ca:	e7e0      	b.n	802148e <__gethex+0xfe>
 80214cc:	9b00      	ldr	r3, [sp, #0]
 80214ce:	9902      	ldr	r1, [sp, #8]
 80214d0:	1ae3      	subs	r3, r4, r3
 80214d2:	3b01      	subs	r3, #1
 80214d4:	2b07      	cmp	r3, #7
 80214d6:	dc0a      	bgt.n	80214ee <__gethex+0x15e>
 80214d8:	9803      	ldr	r0, [sp, #12]
 80214da:	f000 fb19 	bl	8021b10 <_Balloc>
 80214de:	1e05      	subs	r5, r0, #0
 80214e0:	d108      	bne.n	80214f4 <__gethex+0x164>
 80214e2:	002a      	movs	r2, r5
 80214e4:	21e4      	movs	r1, #228	@ 0xe4
 80214e6:	4b5f      	ldr	r3, [pc, #380]	@ (8021664 <__gethex+0x2d4>)
 80214e8:	485f      	ldr	r0, [pc, #380]	@ (8021668 <__gethex+0x2d8>)
 80214ea:	f001 fbf1 	bl	8022cd0 <__assert_func>
 80214ee:	3101      	adds	r1, #1
 80214f0:	105b      	asrs	r3, r3, #1
 80214f2:	e7ef      	b.n	80214d4 <__gethex+0x144>
 80214f4:	0003      	movs	r3, r0
 80214f6:	3314      	adds	r3, #20
 80214f8:	9302      	str	r3, [sp, #8]
 80214fa:	9305      	str	r3, [sp, #20]
 80214fc:	2300      	movs	r3, #0
 80214fe:	001e      	movs	r6, r3
 8021500:	9304      	str	r3, [sp, #16]
 8021502:	9b00      	ldr	r3, [sp, #0]
 8021504:	42a3      	cmp	r3, r4
 8021506:	d338      	bcc.n	802157a <__gethex+0x1ea>
 8021508:	9c05      	ldr	r4, [sp, #20]
 802150a:	9b02      	ldr	r3, [sp, #8]
 802150c:	c440      	stmia	r4!, {r6}
 802150e:	1ae4      	subs	r4, r4, r3
 8021510:	10a4      	asrs	r4, r4, #2
 8021512:	0030      	movs	r0, r6
 8021514:	612c      	str	r4, [r5, #16]
 8021516:	f000 fbf3 	bl	8021d00 <__hi0bits>
 802151a:	9b01      	ldr	r3, [sp, #4]
 802151c:	0164      	lsls	r4, r4, #5
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	1a26      	subs	r6, r4, r0
 8021522:	9300      	str	r3, [sp, #0]
 8021524:	429e      	cmp	r6, r3
 8021526:	dd52      	ble.n	80215ce <__gethex+0x23e>
 8021528:	1af6      	subs	r6, r6, r3
 802152a:	0031      	movs	r1, r6
 802152c:	0028      	movs	r0, r5
 802152e:	f000 ff96 	bl	802245e <__any_on>
 8021532:	1e04      	subs	r4, r0, #0
 8021534:	d00f      	beq.n	8021556 <__gethex+0x1c6>
 8021536:	2401      	movs	r4, #1
 8021538:	231f      	movs	r3, #31
 802153a:	0020      	movs	r0, r4
 802153c:	1e72      	subs	r2, r6, #1
 802153e:	4013      	ands	r3, r2
 8021540:	4098      	lsls	r0, r3
 8021542:	0003      	movs	r3, r0
 8021544:	1151      	asrs	r1, r2, #5
 8021546:	9802      	ldr	r0, [sp, #8]
 8021548:	0089      	lsls	r1, r1, #2
 802154a:	5809      	ldr	r1, [r1, r0]
 802154c:	4219      	tst	r1, r3
 802154e:	d002      	beq.n	8021556 <__gethex+0x1c6>
 8021550:	42a2      	cmp	r2, r4
 8021552:	dc34      	bgt.n	80215be <__gethex+0x22e>
 8021554:	2402      	movs	r4, #2
 8021556:	0031      	movs	r1, r6
 8021558:	0028      	movs	r0, r5
 802155a:	f7ff feb1 	bl	80212c0 <rshift>
 802155e:	19bf      	adds	r7, r7, r6
 8021560:	9b01      	ldr	r3, [sp, #4]
 8021562:	689b      	ldr	r3, [r3, #8]
 8021564:	42bb      	cmp	r3, r7
 8021566:	da42      	bge.n	80215ee <__gethex+0x25e>
 8021568:	0029      	movs	r1, r5
 802156a:	9803      	ldr	r0, [sp, #12]
 802156c:	f000 fb14 	bl	8021b98 <_Bfree>
 8021570:	2300      	movs	r3, #0
 8021572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021574:	26a3      	movs	r6, #163	@ 0xa3
 8021576:	6013      	str	r3, [r2, #0]
 8021578:	e794      	b.n	80214a4 <__gethex+0x114>
 802157a:	3c01      	subs	r4, #1
 802157c:	7823      	ldrb	r3, [r4, #0]
 802157e:	2b2e      	cmp	r3, #46	@ 0x2e
 8021580:	d012      	beq.n	80215a8 <__gethex+0x218>
 8021582:	9b04      	ldr	r3, [sp, #16]
 8021584:	2b20      	cmp	r3, #32
 8021586:	d104      	bne.n	8021592 <__gethex+0x202>
 8021588:	9b05      	ldr	r3, [sp, #20]
 802158a:	c340      	stmia	r3!, {r6}
 802158c:	2600      	movs	r6, #0
 802158e:	9305      	str	r3, [sp, #20]
 8021590:	9604      	str	r6, [sp, #16]
 8021592:	7820      	ldrb	r0, [r4, #0]
 8021594:	f7ff fee7 	bl	8021366 <__hexdig_fun>
 8021598:	230f      	movs	r3, #15
 802159a:	4018      	ands	r0, r3
 802159c:	9b04      	ldr	r3, [sp, #16]
 802159e:	4098      	lsls	r0, r3
 80215a0:	3304      	adds	r3, #4
 80215a2:	4306      	orrs	r6, r0
 80215a4:	9304      	str	r3, [sp, #16]
 80215a6:	e7ac      	b.n	8021502 <__gethex+0x172>
 80215a8:	9b00      	ldr	r3, [sp, #0]
 80215aa:	42a3      	cmp	r3, r4
 80215ac:	d8e9      	bhi.n	8021582 <__gethex+0x1f2>
 80215ae:	2201      	movs	r2, #1
 80215b0:	0020      	movs	r0, r4
 80215b2:	492b      	ldr	r1, [pc, #172]	@ (8021660 <__gethex+0x2d0>)
 80215b4:	f7fe fee2 	bl	802037c <strncmp>
 80215b8:	2800      	cmp	r0, #0
 80215ba:	d1e2      	bne.n	8021582 <__gethex+0x1f2>
 80215bc:	e7a1      	b.n	8021502 <__gethex+0x172>
 80215be:	0028      	movs	r0, r5
 80215c0:	1eb1      	subs	r1, r6, #2
 80215c2:	f000 ff4c 	bl	802245e <__any_on>
 80215c6:	2800      	cmp	r0, #0
 80215c8:	d0c4      	beq.n	8021554 <__gethex+0x1c4>
 80215ca:	2403      	movs	r4, #3
 80215cc:	e7c3      	b.n	8021556 <__gethex+0x1c6>
 80215ce:	9b00      	ldr	r3, [sp, #0]
 80215d0:	2400      	movs	r4, #0
 80215d2:	429e      	cmp	r6, r3
 80215d4:	dac4      	bge.n	8021560 <__gethex+0x1d0>
 80215d6:	1b9e      	subs	r6, r3, r6
 80215d8:	0029      	movs	r1, r5
 80215da:	0032      	movs	r2, r6
 80215dc:	9803      	ldr	r0, [sp, #12]
 80215de:	f000 fd05 	bl	8021fec <__lshift>
 80215e2:	0003      	movs	r3, r0
 80215e4:	3314      	adds	r3, #20
 80215e6:	0005      	movs	r5, r0
 80215e8:	1bbf      	subs	r7, r7, r6
 80215ea:	9302      	str	r3, [sp, #8]
 80215ec:	e7b8      	b.n	8021560 <__gethex+0x1d0>
 80215ee:	9b01      	ldr	r3, [sp, #4]
 80215f0:	685e      	ldr	r6, [r3, #4]
 80215f2:	42be      	cmp	r6, r7
 80215f4:	dd6f      	ble.n	80216d6 <__gethex+0x346>
 80215f6:	9b00      	ldr	r3, [sp, #0]
 80215f8:	1bf6      	subs	r6, r6, r7
 80215fa:	42b3      	cmp	r3, r6
 80215fc:	dc36      	bgt.n	802166c <__gethex+0x2dc>
 80215fe:	9b01      	ldr	r3, [sp, #4]
 8021600:	68db      	ldr	r3, [r3, #12]
 8021602:	2b02      	cmp	r3, #2
 8021604:	d024      	beq.n	8021650 <__gethex+0x2c0>
 8021606:	2b03      	cmp	r3, #3
 8021608:	d026      	beq.n	8021658 <__gethex+0x2c8>
 802160a:	2b01      	cmp	r3, #1
 802160c:	d117      	bne.n	802163e <__gethex+0x2ae>
 802160e:	9b00      	ldr	r3, [sp, #0]
 8021610:	42b3      	cmp	r3, r6
 8021612:	d114      	bne.n	802163e <__gethex+0x2ae>
 8021614:	2b01      	cmp	r3, #1
 8021616:	d10b      	bne.n	8021630 <__gethex+0x2a0>
 8021618:	9b01      	ldr	r3, [sp, #4]
 802161a:	9a07      	ldr	r2, [sp, #28]
 802161c:	685b      	ldr	r3, [r3, #4]
 802161e:	2662      	movs	r6, #98	@ 0x62
 8021620:	6013      	str	r3, [r2, #0]
 8021622:	2301      	movs	r3, #1
 8021624:	9a02      	ldr	r2, [sp, #8]
 8021626:	612b      	str	r3, [r5, #16]
 8021628:	6013      	str	r3, [r2, #0]
 802162a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802162c:	601d      	str	r5, [r3, #0]
 802162e:	e739      	b.n	80214a4 <__gethex+0x114>
 8021630:	9900      	ldr	r1, [sp, #0]
 8021632:	0028      	movs	r0, r5
 8021634:	3901      	subs	r1, #1
 8021636:	f000 ff12 	bl	802245e <__any_on>
 802163a:	2800      	cmp	r0, #0
 802163c:	d1ec      	bne.n	8021618 <__gethex+0x288>
 802163e:	0029      	movs	r1, r5
 8021640:	9803      	ldr	r0, [sp, #12]
 8021642:	f000 faa9 	bl	8021b98 <_Bfree>
 8021646:	2300      	movs	r3, #0
 8021648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802164a:	2650      	movs	r6, #80	@ 0x50
 802164c:	6013      	str	r3, [r2, #0]
 802164e:	e729      	b.n	80214a4 <__gethex+0x114>
 8021650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021652:	2b00      	cmp	r3, #0
 8021654:	d1f3      	bne.n	802163e <__gethex+0x2ae>
 8021656:	e7df      	b.n	8021618 <__gethex+0x288>
 8021658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802165a:	2b00      	cmp	r3, #0
 802165c:	d1dc      	bne.n	8021618 <__gethex+0x288>
 802165e:	e7ee      	b.n	802163e <__gethex+0x2ae>
 8021660:	08025d50 	.word	0x08025d50
 8021664:	08025f61 	.word	0x08025f61
 8021668:	08025f72 	.word	0x08025f72
 802166c:	1e77      	subs	r7, r6, #1
 802166e:	2c00      	cmp	r4, #0
 8021670:	d12f      	bne.n	80216d2 <__gethex+0x342>
 8021672:	2f00      	cmp	r7, #0
 8021674:	d004      	beq.n	8021680 <__gethex+0x2f0>
 8021676:	0039      	movs	r1, r7
 8021678:	0028      	movs	r0, r5
 802167a:	f000 fef0 	bl	802245e <__any_on>
 802167e:	0004      	movs	r4, r0
 8021680:	231f      	movs	r3, #31
 8021682:	117a      	asrs	r2, r7, #5
 8021684:	401f      	ands	r7, r3
 8021686:	3b1e      	subs	r3, #30
 8021688:	40bb      	lsls	r3, r7
 802168a:	9902      	ldr	r1, [sp, #8]
 802168c:	0092      	lsls	r2, r2, #2
 802168e:	5852      	ldr	r2, [r2, r1]
 8021690:	421a      	tst	r2, r3
 8021692:	d001      	beq.n	8021698 <__gethex+0x308>
 8021694:	2302      	movs	r3, #2
 8021696:	431c      	orrs	r4, r3
 8021698:	9b00      	ldr	r3, [sp, #0]
 802169a:	0031      	movs	r1, r6
 802169c:	1b9b      	subs	r3, r3, r6
 802169e:	2602      	movs	r6, #2
 80216a0:	0028      	movs	r0, r5
 80216a2:	9300      	str	r3, [sp, #0]
 80216a4:	f7ff fe0c 	bl	80212c0 <rshift>
 80216a8:	9b01      	ldr	r3, [sp, #4]
 80216aa:	685f      	ldr	r7, [r3, #4]
 80216ac:	2c00      	cmp	r4, #0
 80216ae:	d03f      	beq.n	8021730 <__gethex+0x3a0>
 80216b0:	9b01      	ldr	r3, [sp, #4]
 80216b2:	68db      	ldr	r3, [r3, #12]
 80216b4:	2b02      	cmp	r3, #2
 80216b6:	d010      	beq.n	80216da <__gethex+0x34a>
 80216b8:	2b03      	cmp	r3, #3
 80216ba:	d012      	beq.n	80216e2 <__gethex+0x352>
 80216bc:	2b01      	cmp	r3, #1
 80216be:	d106      	bne.n	80216ce <__gethex+0x33e>
 80216c0:	07a2      	lsls	r2, r4, #30
 80216c2:	d504      	bpl.n	80216ce <__gethex+0x33e>
 80216c4:	9a02      	ldr	r2, [sp, #8]
 80216c6:	6812      	ldr	r2, [r2, #0]
 80216c8:	4314      	orrs	r4, r2
 80216ca:	421c      	tst	r4, r3
 80216cc:	d10c      	bne.n	80216e8 <__gethex+0x358>
 80216ce:	2310      	movs	r3, #16
 80216d0:	e02d      	b.n	802172e <__gethex+0x39e>
 80216d2:	2401      	movs	r4, #1
 80216d4:	e7d4      	b.n	8021680 <__gethex+0x2f0>
 80216d6:	2601      	movs	r6, #1
 80216d8:	e7e8      	b.n	80216ac <__gethex+0x31c>
 80216da:	2301      	movs	r3, #1
 80216dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80216de:	1a9b      	subs	r3, r3, r2
 80216e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80216e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d0f2      	beq.n	80216ce <__gethex+0x33e>
 80216e8:	692b      	ldr	r3, [r5, #16]
 80216ea:	2000      	movs	r0, #0
 80216ec:	9302      	str	r3, [sp, #8]
 80216ee:	009b      	lsls	r3, r3, #2
 80216f0:	9304      	str	r3, [sp, #16]
 80216f2:	002b      	movs	r3, r5
 80216f4:	9a04      	ldr	r2, [sp, #16]
 80216f6:	3314      	adds	r3, #20
 80216f8:	1899      	adds	r1, r3, r2
 80216fa:	681a      	ldr	r2, [r3, #0]
 80216fc:	1c54      	adds	r4, r2, #1
 80216fe:	d01c      	beq.n	802173a <__gethex+0x3aa>
 8021700:	3201      	adds	r2, #1
 8021702:	601a      	str	r2, [r3, #0]
 8021704:	002b      	movs	r3, r5
 8021706:	3314      	adds	r3, #20
 8021708:	2e02      	cmp	r6, #2
 802170a:	d13f      	bne.n	802178c <__gethex+0x3fc>
 802170c:	9a01      	ldr	r2, [sp, #4]
 802170e:	9900      	ldr	r1, [sp, #0]
 8021710:	6812      	ldr	r2, [r2, #0]
 8021712:	3a01      	subs	r2, #1
 8021714:	428a      	cmp	r2, r1
 8021716:	d109      	bne.n	802172c <__gethex+0x39c>
 8021718:	000a      	movs	r2, r1
 802171a:	201f      	movs	r0, #31
 802171c:	4010      	ands	r0, r2
 802171e:	2201      	movs	r2, #1
 8021720:	4082      	lsls	r2, r0
 8021722:	1149      	asrs	r1, r1, #5
 8021724:	0089      	lsls	r1, r1, #2
 8021726:	58cb      	ldr	r3, [r1, r3]
 8021728:	4213      	tst	r3, r2
 802172a:	d13d      	bne.n	80217a8 <__gethex+0x418>
 802172c:	2320      	movs	r3, #32
 802172e:	431e      	orrs	r6, r3
 8021730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021732:	601d      	str	r5, [r3, #0]
 8021734:	9b07      	ldr	r3, [sp, #28]
 8021736:	601f      	str	r7, [r3, #0]
 8021738:	e6b4      	b.n	80214a4 <__gethex+0x114>
 802173a:	c301      	stmia	r3!, {r0}
 802173c:	4299      	cmp	r1, r3
 802173e:	d8dc      	bhi.n	80216fa <__gethex+0x36a>
 8021740:	68ab      	ldr	r3, [r5, #8]
 8021742:	9a02      	ldr	r2, [sp, #8]
 8021744:	429a      	cmp	r2, r3
 8021746:	db18      	blt.n	802177a <__gethex+0x3ea>
 8021748:	6869      	ldr	r1, [r5, #4]
 802174a:	9803      	ldr	r0, [sp, #12]
 802174c:	3101      	adds	r1, #1
 802174e:	f000 f9df 	bl	8021b10 <_Balloc>
 8021752:	1e04      	subs	r4, r0, #0
 8021754:	d104      	bne.n	8021760 <__gethex+0x3d0>
 8021756:	0022      	movs	r2, r4
 8021758:	2184      	movs	r1, #132	@ 0x84
 802175a:	4b1d      	ldr	r3, [pc, #116]	@ (80217d0 <__gethex+0x440>)
 802175c:	481d      	ldr	r0, [pc, #116]	@ (80217d4 <__gethex+0x444>)
 802175e:	e6c4      	b.n	80214ea <__gethex+0x15a>
 8021760:	0029      	movs	r1, r5
 8021762:	692a      	ldr	r2, [r5, #16]
 8021764:	310c      	adds	r1, #12
 8021766:	3202      	adds	r2, #2
 8021768:	0092      	lsls	r2, r2, #2
 802176a:	300c      	adds	r0, #12
 802176c:	f7fe fecc 	bl	8020508 <memcpy>
 8021770:	0029      	movs	r1, r5
 8021772:	9803      	ldr	r0, [sp, #12]
 8021774:	f000 fa10 	bl	8021b98 <_Bfree>
 8021778:	0025      	movs	r5, r4
 802177a:	692b      	ldr	r3, [r5, #16]
 802177c:	1c5a      	adds	r2, r3, #1
 802177e:	612a      	str	r2, [r5, #16]
 8021780:	2201      	movs	r2, #1
 8021782:	3304      	adds	r3, #4
 8021784:	009b      	lsls	r3, r3, #2
 8021786:	18eb      	adds	r3, r5, r3
 8021788:	605a      	str	r2, [r3, #4]
 802178a:	e7bb      	b.n	8021704 <__gethex+0x374>
 802178c:	692a      	ldr	r2, [r5, #16]
 802178e:	9902      	ldr	r1, [sp, #8]
 8021790:	428a      	cmp	r2, r1
 8021792:	dd0b      	ble.n	80217ac <__gethex+0x41c>
 8021794:	2101      	movs	r1, #1
 8021796:	0028      	movs	r0, r5
 8021798:	f7ff fd92 	bl	80212c0 <rshift>
 802179c:	9b01      	ldr	r3, [sp, #4]
 802179e:	3701      	adds	r7, #1
 80217a0:	689b      	ldr	r3, [r3, #8]
 80217a2:	42bb      	cmp	r3, r7
 80217a4:	da00      	bge.n	80217a8 <__gethex+0x418>
 80217a6:	e6df      	b.n	8021568 <__gethex+0x1d8>
 80217a8:	2601      	movs	r6, #1
 80217aa:	e7bf      	b.n	802172c <__gethex+0x39c>
 80217ac:	221f      	movs	r2, #31
 80217ae:	9c00      	ldr	r4, [sp, #0]
 80217b0:	9900      	ldr	r1, [sp, #0]
 80217b2:	4014      	ands	r4, r2
 80217b4:	4211      	tst	r1, r2
 80217b6:	d0f7      	beq.n	80217a8 <__gethex+0x418>
 80217b8:	9a04      	ldr	r2, [sp, #16]
 80217ba:	189b      	adds	r3, r3, r2
 80217bc:	3b04      	subs	r3, #4
 80217be:	6818      	ldr	r0, [r3, #0]
 80217c0:	f000 fa9e 	bl	8021d00 <__hi0bits>
 80217c4:	2320      	movs	r3, #32
 80217c6:	1b1b      	subs	r3, r3, r4
 80217c8:	4298      	cmp	r0, r3
 80217ca:	dbe3      	blt.n	8021794 <__gethex+0x404>
 80217cc:	e7ec      	b.n	80217a8 <__gethex+0x418>
 80217ce:	46c0      	nop			@ (mov r8, r8)
 80217d0:	08025f61 	.word	0x08025f61
 80217d4:	08025f72 	.word	0x08025f72

080217d8 <L_shift>:
 80217d8:	2308      	movs	r3, #8
 80217da:	b570      	push	{r4, r5, r6, lr}
 80217dc:	2520      	movs	r5, #32
 80217de:	1a9a      	subs	r2, r3, r2
 80217e0:	0092      	lsls	r2, r2, #2
 80217e2:	1aad      	subs	r5, r5, r2
 80217e4:	6843      	ldr	r3, [r0, #4]
 80217e6:	6804      	ldr	r4, [r0, #0]
 80217e8:	001e      	movs	r6, r3
 80217ea:	40ae      	lsls	r6, r5
 80217ec:	40d3      	lsrs	r3, r2
 80217ee:	4334      	orrs	r4, r6
 80217f0:	6004      	str	r4, [r0, #0]
 80217f2:	6043      	str	r3, [r0, #4]
 80217f4:	3004      	adds	r0, #4
 80217f6:	4288      	cmp	r0, r1
 80217f8:	d3f4      	bcc.n	80217e4 <L_shift+0xc>
 80217fa:	bd70      	pop	{r4, r5, r6, pc}

080217fc <__match>:
 80217fc:	b530      	push	{r4, r5, lr}
 80217fe:	6803      	ldr	r3, [r0, #0]
 8021800:	780c      	ldrb	r4, [r1, #0]
 8021802:	3301      	adds	r3, #1
 8021804:	2c00      	cmp	r4, #0
 8021806:	d102      	bne.n	802180e <__match+0x12>
 8021808:	6003      	str	r3, [r0, #0]
 802180a:	2001      	movs	r0, #1
 802180c:	bd30      	pop	{r4, r5, pc}
 802180e:	781a      	ldrb	r2, [r3, #0]
 8021810:	0015      	movs	r5, r2
 8021812:	3d41      	subs	r5, #65	@ 0x41
 8021814:	2d19      	cmp	r5, #25
 8021816:	d800      	bhi.n	802181a <__match+0x1e>
 8021818:	3220      	adds	r2, #32
 802181a:	3101      	adds	r1, #1
 802181c:	42a2      	cmp	r2, r4
 802181e:	d0ef      	beq.n	8021800 <__match+0x4>
 8021820:	2000      	movs	r0, #0
 8021822:	e7f3      	b.n	802180c <__match+0x10>

08021824 <__hexnan>:
 8021824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021826:	680b      	ldr	r3, [r1, #0]
 8021828:	b08b      	sub	sp, #44	@ 0x2c
 802182a:	9201      	str	r2, [sp, #4]
 802182c:	9901      	ldr	r1, [sp, #4]
 802182e:	115a      	asrs	r2, r3, #5
 8021830:	0092      	lsls	r2, r2, #2
 8021832:	188a      	adds	r2, r1, r2
 8021834:	9202      	str	r2, [sp, #8]
 8021836:	0019      	movs	r1, r3
 8021838:	221f      	movs	r2, #31
 802183a:	4011      	ands	r1, r2
 802183c:	9008      	str	r0, [sp, #32]
 802183e:	9106      	str	r1, [sp, #24]
 8021840:	4213      	tst	r3, r2
 8021842:	d002      	beq.n	802184a <__hexnan+0x26>
 8021844:	9b02      	ldr	r3, [sp, #8]
 8021846:	3304      	adds	r3, #4
 8021848:	9302      	str	r3, [sp, #8]
 802184a:	9b02      	ldr	r3, [sp, #8]
 802184c:	2500      	movs	r5, #0
 802184e:	1f1f      	subs	r7, r3, #4
 8021850:	003e      	movs	r6, r7
 8021852:	003c      	movs	r4, r7
 8021854:	9b08      	ldr	r3, [sp, #32]
 8021856:	603d      	str	r5, [r7, #0]
 8021858:	681b      	ldr	r3, [r3, #0]
 802185a:	9507      	str	r5, [sp, #28]
 802185c:	9305      	str	r3, [sp, #20]
 802185e:	9503      	str	r5, [sp, #12]
 8021860:	9b05      	ldr	r3, [sp, #20]
 8021862:	3301      	adds	r3, #1
 8021864:	9309      	str	r3, [sp, #36]	@ 0x24
 8021866:	9b05      	ldr	r3, [sp, #20]
 8021868:	785b      	ldrb	r3, [r3, #1]
 802186a:	9304      	str	r3, [sp, #16]
 802186c:	2b00      	cmp	r3, #0
 802186e:	d028      	beq.n	80218c2 <__hexnan+0x9e>
 8021870:	9804      	ldr	r0, [sp, #16]
 8021872:	f7ff fd78 	bl	8021366 <__hexdig_fun>
 8021876:	2800      	cmp	r0, #0
 8021878:	d155      	bne.n	8021926 <__hexnan+0x102>
 802187a:	9b04      	ldr	r3, [sp, #16]
 802187c:	2b20      	cmp	r3, #32
 802187e:	d819      	bhi.n	80218b4 <__hexnan+0x90>
 8021880:	9b03      	ldr	r3, [sp, #12]
 8021882:	9a07      	ldr	r2, [sp, #28]
 8021884:	4293      	cmp	r3, r2
 8021886:	dd12      	ble.n	80218ae <__hexnan+0x8a>
 8021888:	42b4      	cmp	r4, r6
 802188a:	d206      	bcs.n	802189a <__hexnan+0x76>
 802188c:	2d07      	cmp	r5, #7
 802188e:	dc04      	bgt.n	802189a <__hexnan+0x76>
 8021890:	002a      	movs	r2, r5
 8021892:	0031      	movs	r1, r6
 8021894:	0020      	movs	r0, r4
 8021896:	f7ff ff9f 	bl	80217d8 <L_shift>
 802189a:	9b01      	ldr	r3, [sp, #4]
 802189c:	2508      	movs	r5, #8
 802189e:	429c      	cmp	r4, r3
 80218a0:	d905      	bls.n	80218ae <__hexnan+0x8a>
 80218a2:	1f26      	subs	r6, r4, #4
 80218a4:	2500      	movs	r5, #0
 80218a6:	0034      	movs	r4, r6
 80218a8:	9b03      	ldr	r3, [sp, #12]
 80218aa:	6035      	str	r5, [r6, #0]
 80218ac:	9307      	str	r3, [sp, #28]
 80218ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80218b0:	9305      	str	r3, [sp, #20]
 80218b2:	e7d5      	b.n	8021860 <__hexnan+0x3c>
 80218b4:	9b04      	ldr	r3, [sp, #16]
 80218b6:	2b29      	cmp	r3, #41	@ 0x29
 80218b8:	d15a      	bne.n	8021970 <__hexnan+0x14c>
 80218ba:	9b05      	ldr	r3, [sp, #20]
 80218bc:	9a08      	ldr	r2, [sp, #32]
 80218be:	3302      	adds	r3, #2
 80218c0:	6013      	str	r3, [r2, #0]
 80218c2:	9b03      	ldr	r3, [sp, #12]
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	d053      	beq.n	8021970 <__hexnan+0x14c>
 80218c8:	42b4      	cmp	r4, r6
 80218ca:	d206      	bcs.n	80218da <__hexnan+0xb6>
 80218cc:	2d07      	cmp	r5, #7
 80218ce:	dc04      	bgt.n	80218da <__hexnan+0xb6>
 80218d0:	002a      	movs	r2, r5
 80218d2:	0031      	movs	r1, r6
 80218d4:	0020      	movs	r0, r4
 80218d6:	f7ff ff7f 	bl	80217d8 <L_shift>
 80218da:	9b01      	ldr	r3, [sp, #4]
 80218dc:	429c      	cmp	r4, r3
 80218de:	d936      	bls.n	802194e <__hexnan+0x12a>
 80218e0:	001a      	movs	r2, r3
 80218e2:	0023      	movs	r3, r4
 80218e4:	cb02      	ldmia	r3!, {r1}
 80218e6:	c202      	stmia	r2!, {r1}
 80218e8:	429f      	cmp	r7, r3
 80218ea:	d2fb      	bcs.n	80218e4 <__hexnan+0xc0>
 80218ec:	9b02      	ldr	r3, [sp, #8]
 80218ee:	1c61      	adds	r1, r4, #1
 80218f0:	1eda      	subs	r2, r3, #3
 80218f2:	2304      	movs	r3, #4
 80218f4:	4291      	cmp	r1, r2
 80218f6:	d805      	bhi.n	8021904 <__hexnan+0xe0>
 80218f8:	9b02      	ldr	r3, [sp, #8]
 80218fa:	3b04      	subs	r3, #4
 80218fc:	1b1b      	subs	r3, r3, r4
 80218fe:	089b      	lsrs	r3, r3, #2
 8021900:	3301      	adds	r3, #1
 8021902:	009b      	lsls	r3, r3, #2
 8021904:	9a01      	ldr	r2, [sp, #4]
 8021906:	18d3      	adds	r3, r2, r3
 8021908:	2200      	movs	r2, #0
 802190a:	c304      	stmia	r3!, {r2}
 802190c:	429f      	cmp	r7, r3
 802190e:	d2fc      	bcs.n	802190a <__hexnan+0xe6>
 8021910:	683b      	ldr	r3, [r7, #0]
 8021912:	2b00      	cmp	r3, #0
 8021914:	d104      	bne.n	8021920 <__hexnan+0xfc>
 8021916:	9b01      	ldr	r3, [sp, #4]
 8021918:	429f      	cmp	r7, r3
 802191a:	d127      	bne.n	802196c <__hexnan+0x148>
 802191c:	2301      	movs	r3, #1
 802191e:	603b      	str	r3, [r7, #0]
 8021920:	2005      	movs	r0, #5
 8021922:	b00b      	add	sp, #44	@ 0x2c
 8021924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021926:	9b03      	ldr	r3, [sp, #12]
 8021928:	3501      	adds	r5, #1
 802192a:	3301      	adds	r3, #1
 802192c:	9303      	str	r3, [sp, #12]
 802192e:	2d08      	cmp	r5, #8
 8021930:	dd06      	ble.n	8021940 <__hexnan+0x11c>
 8021932:	9b01      	ldr	r3, [sp, #4]
 8021934:	429c      	cmp	r4, r3
 8021936:	d9ba      	bls.n	80218ae <__hexnan+0x8a>
 8021938:	2300      	movs	r3, #0
 802193a:	2501      	movs	r5, #1
 802193c:	3c04      	subs	r4, #4
 802193e:	6023      	str	r3, [r4, #0]
 8021940:	220f      	movs	r2, #15
 8021942:	6823      	ldr	r3, [r4, #0]
 8021944:	4010      	ands	r0, r2
 8021946:	011b      	lsls	r3, r3, #4
 8021948:	4303      	orrs	r3, r0
 802194a:	6023      	str	r3, [r4, #0]
 802194c:	e7af      	b.n	80218ae <__hexnan+0x8a>
 802194e:	9b06      	ldr	r3, [sp, #24]
 8021950:	2b00      	cmp	r3, #0
 8021952:	d0dd      	beq.n	8021910 <__hexnan+0xec>
 8021954:	2320      	movs	r3, #32
 8021956:	9a06      	ldr	r2, [sp, #24]
 8021958:	9902      	ldr	r1, [sp, #8]
 802195a:	1a9b      	subs	r3, r3, r2
 802195c:	2201      	movs	r2, #1
 802195e:	4252      	negs	r2, r2
 8021960:	40da      	lsrs	r2, r3
 8021962:	3904      	subs	r1, #4
 8021964:	680b      	ldr	r3, [r1, #0]
 8021966:	4013      	ands	r3, r2
 8021968:	600b      	str	r3, [r1, #0]
 802196a:	e7d1      	b.n	8021910 <__hexnan+0xec>
 802196c:	3f04      	subs	r7, #4
 802196e:	e7cf      	b.n	8021910 <__hexnan+0xec>
 8021970:	2004      	movs	r0, #4
 8021972:	e7d6      	b.n	8021922 <__hexnan+0xfe>

08021974 <malloc>:
 8021974:	b510      	push	{r4, lr}
 8021976:	4b03      	ldr	r3, [pc, #12]	@ (8021984 <malloc+0x10>)
 8021978:	0001      	movs	r1, r0
 802197a:	6818      	ldr	r0, [r3, #0]
 802197c:	f000 f826 	bl	80219cc <_malloc_r>
 8021980:	bd10      	pop	{r4, pc}
 8021982:	46c0      	nop			@ (mov r8, r8)
 8021984:	200003d0 	.word	0x200003d0

08021988 <sbrk_aligned>:
 8021988:	b570      	push	{r4, r5, r6, lr}
 802198a:	4e0f      	ldr	r6, [pc, #60]	@ (80219c8 <sbrk_aligned+0x40>)
 802198c:	000d      	movs	r5, r1
 802198e:	6831      	ldr	r1, [r6, #0]
 8021990:	0004      	movs	r4, r0
 8021992:	2900      	cmp	r1, #0
 8021994:	d102      	bne.n	802199c <sbrk_aligned+0x14>
 8021996:	f001 f989 	bl	8022cac <_sbrk_r>
 802199a:	6030      	str	r0, [r6, #0]
 802199c:	0029      	movs	r1, r5
 802199e:	0020      	movs	r0, r4
 80219a0:	f001 f984 	bl	8022cac <_sbrk_r>
 80219a4:	1c43      	adds	r3, r0, #1
 80219a6:	d103      	bne.n	80219b0 <sbrk_aligned+0x28>
 80219a8:	2501      	movs	r5, #1
 80219aa:	426d      	negs	r5, r5
 80219ac:	0028      	movs	r0, r5
 80219ae:	bd70      	pop	{r4, r5, r6, pc}
 80219b0:	2303      	movs	r3, #3
 80219b2:	1cc5      	adds	r5, r0, #3
 80219b4:	439d      	bics	r5, r3
 80219b6:	42a8      	cmp	r0, r5
 80219b8:	d0f8      	beq.n	80219ac <sbrk_aligned+0x24>
 80219ba:	1a29      	subs	r1, r5, r0
 80219bc:	0020      	movs	r0, r4
 80219be:	f001 f975 	bl	8022cac <_sbrk_r>
 80219c2:	3001      	adds	r0, #1
 80219c4:	d1f2      	bne.n	80219ac <sbrk_aligned+0x24>
 80219c6:	e7ef      	b.n	80219a8 <sbrk_aligned+0x20>
 80219c8:	200037c4 	.word	0x200037c4

080219cc <_malloc_r>:
 80219cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80219ce:	2203      	movs	r2, #3
 80219d0:	1ccb      	adds	r3, r1, #3
 80219d2:	4393      	bics	r3, r2
 80219d4:	3308      	adds	r3, #8
 80219d6:	0005      	movs	r5, r0
 80219d8:	001f      	movs	r7, r3
 80219da:	2b0c      	cmp	r3, #12
 80219dc:	d234      	bcs.n	8021a48 <_malloc_r+0x7c>
 80219de:	270c      	movs	r7, #12
 80219e0:	42b9      	cmp	r1, r7
 80219e2:	d833      	bhi.n	8021a4c <_malloc_r+0x80>
 80219e4:	0028      	movs	r0, r5
 80219e6:	f000 f883 	bl	8021af0 <__malloc_lock>
 80219ea:	4e37      	ldr	r6, [pc, #220]	@ (8021ac8 <_malloc_r+0xfc>)
 80219ec:	6833      	ldr	r3, [r6, #0]
 80219ee:	001c      	movs	r4, r3
 80219f0:	2c00      	cmp	r4, #0
 80219f2:	d12f      	bne.n	8021a54 <_malloc_r+0x88>
 80219f4:	0039      	movs	r1, r7
 80219f6:	0028      	movs	r0, r5
 80219f8:	f7ff ffc6 	bl	8021988 <sbrk_aligned>
 80219fc:	0004      	movs	r4, r0
 80219fe:	1c43      	adds	r3, r0, #1
 8021a00:	d15f      	bne.n	8021ac2 <_malloc_r+0xf6>
 8021a02:	6834      	ldr	r4, [r6, #0]
 8021a04:	9400      	str	r4, [sp, #0]
 8021a06:	9b00      	ldr	r3, [sp, #0]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d14a      	bne.n	8021aa2 <_malloc_r+0xd6>
 8021a0c:	2c00      	cmp	r4, #0
 8021a0e:	d052      	beq.n	8021ab6 <_malloc_r+0xea>
 8021a10:	6823      	ldr	r3, [r4, #0]
 8021a12:	0028      	movs	r0, r5
 8021a14:	18e3      	adds	r3, r4, r3
 8021a16:	9900      	ldr	r1, [sp, #0]
 8021a18:	9301      	str	r3, [sp, #4]
 8021a1a:	f001 f947 	bl	8022cac <_sbrk_r>
 8021a1e:	9b01      	ldr	r3, [sp, #4]
 8021a20:	4283      	cmp	r3, r0
 8021a22:	d148      	bne.n	8021ab6 <_malloc_r+0xea>
 8021a24:	6823      	ldr	r3, [r4, #0]
 8021a26:	0028      	movs	r0, r5
 8021a28:	1aff      	subs	r7, r7, r3
 8021a2a:	0039      	movs	r1, r7
 8021a2c:	f7ff ffac 	bl	8021988 <sbrk_aligned>
 8021a30:	3001      	adds	r0, #1
 8021a32:	d040      	beq.n	8021ab6 <_malloc_r+0xea>
 8021a34:	6823      	ldr	r3, [r4, #0]
 8021a36:	19db      	adds	r3, r3, r7
 8021a38:	6023      	str	r3, [r4, #0]
 8021a3a:	6833      	ldr	r3, [r6, #0]
 8021a3c:	685a      	ldr	r2, [r3, #4]
 8021a3e:	2a00      	cmp	r2, #0
 8021a40:	d133      	bne.n	8021aaa <_malloc_r+0xde>
 8021a42:	9b00      	ldr	r3, [sp, #0]
 8021a44:	6033      	str	r3, [r6, #0]
 8021a46:	e019      	b.n	8021a7c <_malloc_r+0xb0>
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	dac9      	bge.n	80219e0 <_malloc_r+0x14>
 8021a4c:	230c      	movs	r3, #12
 8021a4e:	602b      	str	r3, [r5, #0]
 8021a50:	2000      	movs	r0, #0
 8021a52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021a54:	6821      	ldr	r1, [r4, #0]
 8021a56:	1bc9      	subs	r1, r1, r7
 8021a58:	d420      	bmi.n	8021a9c <_malloc_r+0xd0>
 8021a5a:	290b      	cmp	r1, #11
 8021a5c:	d90a      	bls.n	8021a74 <_malloc_r+0xa8>
 8021a5e:	19e2      	adds	r2, r4, r7
 8021a60:	6027      	str	r7, [r4, #0]
 8021a62:	42a3      	cmp	r3, r4
 8021a64:	d104      	bne.n	8021a70 <_malloc_r+0xa4>
 8021a66:	6032      	str	r2, [r6, #0]
 8021a68:	6863      	ldr	r3, [r4, #4]
 8021a6a:	6011      	str	r1, [r2, #0]
 8021a6c:	6053      	str	r3, [r2, #4]
 8021a6e:	e005      	b.n	8021a7c <_malloc_r+0xb0>
 8021a70:	605a      	str	r2, [r3, #4]
 8021a72:	e7f9      	b.n	8021a68 <_malloc_r+0x9c>
 8021a74:	6862      	ldr	r2, [r4, #4]
 8021a76:	42a3      	cmp	r3, r4
 8021a78:	d10e      	bne.n	8021a98 <_malloc_r+0xcc>
 8021a7a:	6032      	str	r2, [r6, #0]
 8021a7c:	0028      	movs	r0, r5
 8021a7e:	f000 f83f 	bl	8021b00 <__malloc_unlock>
 8021a82:	0020      	movs	r0, r4
 8021a84:	2207      	movs	r2, #7
 8021a86:	300b      	adds	r0, #11
 8021a88:	1d23      	adds	r3, r4, #4
 8021a8a:	4390      	bics	r0, r2
 8021a8c:	1ac2      	subs	r2, r0, r3
 8021a8e:	4298      	cmp	r0, r3
 8021a90:	d0df      	beq.n	8021a52 <_malloc_r+0x86>
 8021a92:	1a1b      	subs	r3, r3, r0
 8021a94:	50a3      	str	r3, [r4, r2]
 8021a96:	e7dc      	b.n	8021a52 <_malloc_r+0x86>
 8021a98:	605a      	str	r2, [r3, #4]
 8021a9a:	e7ef      	b.n	8021a7c <_malloc_r+0xb0>
 8021a9c:	0023      	movs	r3, r4
 8021a9e:	6864      	ldr	r4, [r4, #4]
 8021aa0:	e7a6      	b.n	80219f0 <_malloc_r+0x24>
 8021aa2:	9c00      	ldr	r4, [sp, #0]
 8021aa4:	6863      	ldr	r3, [r4, #4]
 8021aa6:	9300      	str	r3, [sp, #0]
 8021aa8:	e7ad      	b.n	8021a06 <_malloc_r+0x3a>
 8021aaa:	001a      	movs	r2, r3
 8021aac:	685b      	ldr	r3, [r3, #4]
 8021aae:	42a3      	cmp	r3, r4
 8021ab0:	d1fb      	bne.n	8021aaa <_malloc_r+0xde>
 8021ab2:	2300      	movs	r3, #0
 8021ab4:	e7da      	b.n	8021a6c <_malloc_r+0xa0>
 8021ab6:	230c      	movs	r3, #12
 8021ab8:	0028      	movs	r0, r5
 8021aba:	602b      	str	r3, [r5, #0]
 8021abc:	f000 f820 	bl	8021b00 <__malloc_unlock>
 8021ac0:	e7c6      	b.n	8021a50 <_malloc_r+0x84>
 8021ac2:	6007      	str	r7, [r0, #0]
 8021ac4:	e7da      	b.n	8021a7c <_malloc_r+0xb0>
 8021ac6:	46c0      	nop			@ (mov r8, r8)
 8021ac8:	200037c8 	.word	0x200037c8

08021acc <__ascii_mbtowc>:
 8021acc:	b082      	sub	sp, #8
 8021ace:	2900      	cmp	r1, #0
 8021ad0:	d100      	bne.n	8021ad4 <__ascii_mbtowc+0x8>
 8021ad2:	a901      	add	r1, sp, #4
 8021ad4:	1e10      	subs	r0, r2, #0
 8021ad6:	d006      	beq.n	8021ae6 <__ascii_mbtowc+0x1a>
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	d006      	beq.n	8021aea <__ascii_mbtowc+0x1e>
 8021adc:	7813      	ldrb	r3, [r2, #0]
 8021ade:	600b      	str	r3, [r1, #0]
 8021ae0:	7810      	ldrb	r0, [r2, #0]
 8021ae2:	1e43      	subs	r3, r0, #1
 8021ae4:	4198      	sbcs	r0, r3
 8021ae6:	b002      	add	sp, #8
 8021ae8:	4770      	bx	lr
 8021aea:	2002      	movs	r0, #2
 8021aec:	4240      	negs	r0, r0
 8021aee:	e7fa      	b.n	8021ae6 <__ascii_mbtowc+0x1a>

08021af0 <__malloc_lock>:
 8021af0:	b510      	push	{r4, lr}
 8021af2:	4802      	ldr	r0, [pc, #8]	@ (8021afc <__malloc_lock+0xc>)
 8021af4:	f7fe fcfb 	bl	80204ee <__retarget_lock_acquire_recursive>
 8021af8:	bd10      	pop	{r4, pc}
 8021afa:	46c0      	nop			@ (mov r8, r8)
 8021afc:	200037c0 	.word	0x200037c0

08021b00 <__malloc_unlock>:
 8021b00:	b510      	push	{r4, lr}
 8021b02:	4802      	ldr	r0, [pc, #8]	@ (8021b0c <__malloc_unlock+0xc>)
 8021b04:	f7fe fcf4 	bl	80204f0 <__retarget_lock_release_recursive>
 8021b08:	bd10      	pop	{r4, pc}
 8021b0a:	46c0      	nop			@ (mov r8, r8)
 8021b0c:	200037c0 	.word	0x200037c0

08021b10 <_Balloc>:
 8021b10:	b570      	push	{r4, r5, r6, lr}
 8021b12:	69c5      	ldr	r5, [r0, #28]
 8021b14:	0006      	movs	r6, r0
 8021b16:	000c      	movs	r4, r1
 8021b18:	2d00      	cmp	r5, #0
 8021b1a:	d10e      	bne.n	8021b3a <_Balloc+0x2a>
 8021b1c:	2010      	movs	r0, #16
 8021b1e:	f7ff ff29 	bl	8021974 <malloc>
 8021b22:	1e02      	subs	r2, r0, #0
 8021b24:	61f0      	str	r0, [r6, #28]
 8021b26:	d104      	bne.n	8021b32 <_Balloc+0x22>
 8021b28:	216b      	movs	r1, #107	@ 0x6b
 8021b2a:	4b19      	ldr	r3, [pc, #100]	@ (8021b90 <_Balloc+0x80>)
 8021b2c:	4819      	ldr	r0, [pc, #100]	@ (8021b94 <_Balloc+0x84>)
 8021b2e:	f001 f8cf 	bl	8022cd0 <__assert_func>
 8021b32:	6045      	str	r5, [r0, #4]
 8021b34:	6085      	str	r5, [r0, #8]
 8021b36:	6005      	str	r5, [r0, #0]
 8021b38:	60c5      	str	r5, [r0, #12]
 8021b3a:	69f5      	ldr	r5, [r6, #28]
 8021b3c:	68eb      	ldr	r3, [r5, #12]
 8021b3e:	2b00      	cmp	r3, #0
 8021b40:	d013      	beq.n	8021b6a <_Balloc+0x5a>
 8021b42:	69f3      	ldr	r3, [r6, #28]
 8021b44:	00a2      	lsls	r2, r4, #2
 8021b46:	68db      	ldr	r3, [r3, #12]
 8021b48:	189b      	adds	r3, r3, r2
 8021b4a:	6818      	ldr	r0, [r3, #0]
 8021b4c:	2800      	cmp	r0, #0
 8021b4e:	d118      	bne.n	8021b82 <_Balloc+0x72>
 8021b50:	2101      	movs	r1, #1
 8021b52:	000d      	movs	r5, r1
 8021b54:	40a5      	lsls	r5, r4
 8021b56:	1d6a      	adds	r2, r5, #5
 8021b58:	0030      	movs	r0, r6
 8021b5a:	0092      	lsls	r2, r2, #2
 8021b5c:	f001 f8d6 	bl	8022d0c <_calloc_r>
 8021b60:	2800      	cmp	r0, #0
 8021b62:	d00c      	beq.n	8021b7e <_Balloc+0x6e>
 8021b64:	6044      	str	r4, [r0, #4]
 8021b66:	6085      	str	r5, [r0, #8]
 8021b68:	e00d      	b.n	8021b86 <_Balloc+0x76>
 8021b6a:	2221      	movs	r2, #33	@ 0x21
 8021b6c:	2104      	movs	r1, #4
 8021b6e:	0030      	movs	r0, r6
 8021b70:	f001 f8cc 	bl	8022d0c <_calloc_r>
 8021b74:	69f3      	ldr	r3, [r6, #28]
 8021b76:	60e8      	str	r0, [r5, #12]
 8021b78:	68db      	ldr	r3, [r3, #12]
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	d1e1      	bne.n	8021b42 <_Balloc+0x32>
 8021b7e:	2000      	movs	r0, #0
 8021b80:	bd70      	pop	{r4, r5, r6, pc}
 8021b82:	6802      	ldr	r2, [r0, #0]
 8021b84:	601a      	str	r2, [r3, #0]
 8021b86:	2300      	movs	r3, #0
 8021b88:	6103      	str	r3, [r0, #16]
 8021b8a:	60c3      	str	r3, [r0, #12]
 8021b8c:	e7f8      	b.n	8021b80 <_Balloc+0x70>
 8021b8e:	46c0      	nop			@ (mov r8, r8)
 8021b90:	08025ef2 	.word	0x08025ef2
 8021b94:	08025fd2 	.word	0x08025fd2

08021b98 <_Bfree>:
 8021b98:	b570      	push	{r4, r5, r6, lr}
 8021b9a:	69c6      	ldr	r6, [r0, #28]
 8021b9c:	0005      	movs	r5, r0
 8021b9e:	000c      	movs	r4, r1
 8021ba0:	2e00      	cmp	r6, #0
 8021ba2:	d10e      	bne.n	8021bc2 <_Bfree+0x2a>
 8021ba4:	2010      	movs	r0, #16
 8021ba6:	f7ff fee5 	bl	8021974 <malloc>
 8021baa:	1e02      	subs	r2, r0, #0
 8021bac:	61e8      	str	r0, [r5, #28]
 8021bae:	d104      	bne.n	8021bba <_Bfree+0x22>
 8021bb0:	218f      	movs	r1, #143	@ 0x8f
 8021bb2:	4b09      	ldr	r3, [pc, #36]	@ (8021bd8 <_Bfree+0x40>)
 8021bb4:	4809      	ldr	r0, [pc, #36]	@ (8021bdc <_Bfree+0x44>)
 8021bb6:	f001 f88b 	bl	8022cd0 <__assert_func>
 8021bba:	6046      	str	r6, [r0, #4]
 8021bbc:	6086      	str	r6, [r0, #8]
 8021bbe:	6006      	str	r6, [r0, #0]
 8021bc0:	60c6      	str	r6, [r0, #12]
 8021bc2:	2c00      	cmp	r4, #0
 8021bc4:	d007      	beq.n	8021bd6 <_Bfree+0x3e>
 8021bc6:	69eb      	ldr	r3, [r5, #28]
 8021bc8:	6862      	ldr	r2, [r4, #4]
 8021bca:	68db      	ldr	r3, [r3, #12]
 8021bcc:	0092      	lsls	r2, r2, #2
 8021bce:	189b      	adds	r3, r3, r2
 8021bd0:	681a      	ldr	r2, [r3, #0]
 8021bd2:	6022      	str	r2, [r4, #0]
 8021bd4:	601c      	str	r4, [r3, #0]
 8021bd6:	bd70      	pop	{r4, r5, r6, pc}
 8021bd8:	08025ef2 	.word	0x08025ef2
 8021bdc:	08025fd2 	.word	0x08025fd2

08021be0 <__multadd>:
 8021be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021be2:	000f      	movs	r7, r1
 8021be4:	9001      	str	r0, [sp, #4]
 8021be6:	000c      	movs	r4, r1
 8021be8:	001e      	movs	r6, r3
 8021bea:	2000      	movs	r0, #0
 8021bec:	690d      	ldr	r5, [r1, #16]
 8021bee:	3714      	adds	r7, #20
 8021bf0:	683b      	ldr	r3, [r7, #0]
 8021bf2:	3001      	adds	r0, #1
 8021bf4:	b299      	uxth	r1, r3
 8021bf6:	4351      	muls	r1, r2
 8021bf8:	0c1b      	lsrs	r3, r3, #16
 8021bfa:	4353      	muls	r3, r2
 8021bfc:	1989      	adds	r1, r1, r6
 8021bfe:	0c0e      	lsrs	r6, r1, #16
 8021c00:	199b      	adds	r3, r3, r6
 8021c02:	0c1e      	lsrs	r6, r3, #16
 8021c04:	b289      	uxth	r1, r1
 8021c06:	041b      	lsls	r3, r3, #16
 8021c08:	185b      	adds	r3, r3, r1
 8021c0a:	c708      	stmia	r7!, {r3}
 8021c0c:	4285      	cmp	r5, r0
 8021c0e:	dcef      	bgt.n	8021bf0 <__multadd+0x10>
 8021c10:	2e00      	cmp	r6, #0
 8021c12:	d022      	beq.n	8021c5a <__multadd+0x7a>
 8021c14:	68a3      	ldr	r3, [r4, #8]
 8021c16:	42ab      	cmp	r3, r5
 8021c18:	dc19      	bgt.n	8021c4e <__multadd+0x6e>
 8021c1a:	6861      	ldr	r1, [r4, #4]
 8021c1c:	9801      	ldr	r0, [sp, #4]
 8021c1e:	3101      	adds	r1, #1
 8021c20:	f7ff ff76 	bl	8021b10 <_Balloc>
 8021c24:	1e07      	subs	r7, r0, #0
 8021c26:	d105      	bne.n	8021c34 <__multadd+0x54>
 8021c28:	003a      	movs	r2, r7
 8021c2a:	21ba      	movs	r1, #186	@ 0xba
 8021c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8021c60 <__multadd+0x80>)
 8021c2e:	480d      	ldr	r0, [pc, #52]	@ (8021c64 <__multadd+0x84>)
 8021c30:	f001 f84e 	bl	8022cd0 <__assert_func>
 8021c34:	0021      	movs	r1, r4
 8021c36:	6922      	ldr	r2, [r4, #16]
 8021c38:	310c      	adds	r1, #12
 8021c3a:	3202      	adds	r2, #2
 8021c3c:	0092      	lsls	r2, r2, #2
 8021c3e:	300c      	adds	r0, #12
 8021c40:	f7fe fc62 	bl	8020508 <memcpy>
 8021c44:	0021      	movs	r1, r4
 8021c46:	9801      	ldr	r0, [sp, #4]
 8021c48:	f7ff ffa6 	bl	8021b98 <_Bfree>
 8021c4c:	003c      	movs	r4, r7
 8021c4e:	1d2b      	adds	r3, r5, #4
 8021c50:	009b      	lsls	r3, r3, #2
 8021c52:	18e3      	adds	r3, r4, r3
 8021c54:	3501      	adds	r5, #1
 8021c56:	605e      	str	r6, [r3, #4]
 8021c58:	6125      	str	r5, [r4, #16]
 8021c5a:	0020      	movs	r0, r4
 8021c5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021c5e:	46c0      	nop			@ (mov r8, r8)
 8021c60:	08025f61 	.word	0x08025f61
 8021c64:	08025fd2 	.word	0x08025fd2

08021c68 <__s2b>:
 8021c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021c6a:	0007      	movs	r7, r0
 8021c6c:	0018      	movs	r0, r3
 8021c6e:	000c      	movs	r4, r1
 8021c70:	3008      	adds	r0, #8
 8021c72:	2109      	movs	r1, #9
 8021c74:	9301      	str	r3, [sp, #4]
 8021c76:	0015      	movs	r5, r2
 8021c78:	f7de fb1e 	bl	80002b8 <__divsi3>
 8021c7c:	2301      	movs	r3, #1
 8021c7e:	2100      	movs	r1, #0
 8021c80:	4283      	cmp	r3, r0
 8021c82:	db0a      	blt.n	8021c9a <__s2b+0x32>
 8021c84:	0038      	movs	r0, r7
 8021c86:	f7ff ff43 	bl	8021b10 <_Balloc>
 8021c8a:	1e01      	subs	r1, r0, #0
 8021c8c:	d108      	bne.n	8021ca0 <__s2b+0x38>
 8021c8e:	000a      	movs	r2, r1
 8021c90:	4b19      	ldr	r3, [pc, #100]	@ (8021cf8 <__s2b+0x90>)
 8021c92:	481a      	ldr	r0, [pc, #104]	@ (8021cfc <__s2b+0x94>)
 8021c94:	31d3      	adds	r1, #211	@ 0xd3
 8021c96:	f001 f81b 	bl	8022cd0 <__assert_func>
 8021c9a:	005b      	lsls	r3, r3, #1
 8021c9c:	3101      	adds	r1, #1
 8021c9e:	e7ef      	b.n	8021c80 <__s2b+0x18>
 8021ca0:	9b08      	ldr	r3, [sp, #32]
 8021ca2:	6143      	str	r3, [r0, #20]
 8021ca4:	2301      	movs	r3, #1
 8021ca6:	6103      	str	r3, [r0, #16]
 8021ca8:	2d09      	cmp	r5, #9
 8021caa:	dd18      	ble.n	8021cde <__s2b+0x76>
 8021cac:	0023      	movs	r3, r4
 8021cae:	3309      	adds	r3, #9
 8021cb0:	001e      	movs	r6, r3
 8021cb2:	9300      	str	r3, [sp, #0]
 8021cb4:	1964      	adds	r4, r4, r5
 8021cb6:	7833      	ldrb	r3, [r6, #0]
 8021cb8:	220a      	movs	r2, #10
 8021cba:	0038      	movs	r0, r7
 8021cbc:	3b30      	subs	r3, #48	@ 0x30
 8021cbe:	f7ff ff8f 	bl	8021be0 <__multadd>
 8021cc2:	3601      	adds	r6, #1
 8021cc4:	0001      	movs	r1, r0
 8021cc6:	42a6      	cmp	r6, r4
 8021cc8:	d1f5      	bne.n	8021cb6 <__s2b+0x4e>
 8021cca:	002c      	movs	r4, r5
 8021ccc:	9b00      	ldr	r3, [sp, #0]
 8021cce:	3c08      	subs	r4, #8
 8021cd0:	191c      	adds	r4, r3, r4
 8021cd2:	002e      	movs	r6, r5
 8021cd4:	9b01      	ldr	r3, [sp, #4]
 8021cd6:	429e      	cmp	r6, r3
 8021cd8:	db04      	blt.n	8021ce4 <__s2b+0x7c>
 8021cda:	0008      	movs	r0, r1
 8021cdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021cde:	2509      	movs	r5, #9
 8021ce0:	340a      	adds	r4, #10
 8021ce2:	e7f6      	b.n	8021cd2 <__s2b+0x6a>
 8021ce4:	1b63      	subs	r3, r4, r5
 8021ce6:	5d9b      	ldrb	r3, [r3, r6]
 8021ce8:	220a      	movs	r2, #10
 8021cea:	0038      	movs	r0, r7
 8021cec:	3b30      	subs	r3, #48	@ 0x30
 8021cee:	f7ff ff77 	bl	8021be0 <__multadd>
 8021cf2:	3601      	adds	r6, #1
 8021cf4:	0001      	movs	r1, r0
 8021cf6:	e7ed      	b.n	8021cd4 <__s2b+0x6c>
 8021cf8:	08025f61 	.word	0x08025f61
 8021cfc:	08025fd2 	.word	0x08025fd2

08021d00 <__hi0bits>:
 8021d00:	2280      	movs	r2, #128	@ 0x80
 8021d02:	0003      	movs	r3, r0
 8021d04:	0252      	lsls	r2, r2, #9
 8021d06:	2000      	movs	r0, #0
 8021d08:	4293      	cmp	r3, r2
 8021d0a:	d201      	bcs.n	8021d10 <__hi0bits+0x10>
 8021d0c:	041b      	lsls	r3, r3, #16
 8021d0e:	3010      	adds	r0, #16
 8021d10:	2280      	movs	r2, #128	@ 0x80
 8021d12:	0452      	lsls	r2, r2, #17
 8021d14:	4293      	cmp	r3, r2
 8021d16:	d201      	bcs.n	8021d1c <__hi0bits+0x1c>
 8021d18:	3008      	adds	r0, #8
 8021d1a:	021b      	lsls	r3, r3, #8
 8021d1c:	2280      	movs	r2, #128	@ 0x80
 8021d1e:	0552      	lsls	r2, r2, #21
 8021d20:	4293      	cmp	r3, r2
 8021d22:	d201      	bcs.n	8021d28 <__hi0bits+0x28>
 8021d24:	3004      	adds	r0, #4
 8021d26:	011b      	lsls	r3, r3, #4
 8021d28:	2280      	movs	r2, #128	@ 0x80
 8021d2a:	05d2      	lsls	r2, r2, #23
 8021d2c:	4293      	cmp	r3, r2
 8021d2e:	d201      	bcs.n	8021d34 <__hi0bits+0x34>
 8021d30:	3002      	adds	r0, #2
 8021d32:	009b      	lsls	r3, r3, #2
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	db03      	blt.n	8021d40 <__hi0bits+0x40>
 8021d38:	3001      	adds	r0, #1
 8021d3a:	4213      	tst	r3, r2
 8021d3c:	d100      	bne.n	8021d40 <__hi0bits+0x40>
 8021d3e:	2020      	movs	r0, #32
 8021d40:	4770      	bx	lr

08021d42 <__lo0bits>:
 8021d42:	6803      	ldr	r3, [r0, #0]
 8021d44:	0001      	movs	r1, r0
 8021d46:	2207      	movs	r2, #7
 8021d48:	0018      	movs	r0, r3
 8021d4a:	4010      	ands	r0, r2
 8021d4c:	4213      	tst	r3, r2
 8021d4e:	d00d      	beq.n	8021d6c <__lo0bits+0x2a>
 8021d50:	3a06      	subs	r2, #6
 8021d52:	2000      	movs	r0, #0
 8021d54:	4213      	tst	r3, r2
 8021d56:	d105      	bne.n	8021d64 <__lo0bits+0x22>
 8021d58:	3002      	adds	r0, #2
 8021d5a:	4203      	tst	r3, r0
 8021d5c:	d003      	beq.n	8021d66 <__lo0bits+0x24>
 8021d5e:	40d3      	lsrs	r3, r2
 8021d60:	0010      	movs	r0, r2
 8021d62:	600b      	str	r3, [r1, #0]
 8021d64:	4770      	bx	lr
 8021d66:	089b      	lsrs	r3, r3, #2
 8021d68:	600b      	str	r3, [r1, #0]
 8021d6a:	e7fb      	b.n	8021d64 <__lo0bits+0x22>
 8021d6c:	b29a      	uxth	r2, r3
 8021d6e:	2a00      	cmp	r2, #0
 8021d70:	d101      	bne.n	8021d76 <__lo0bits+0x34>
 8021d72:	2010      	movs	r0, #16
 8021d74:	0c1b      	lsrs	r3, r3, #16
 8021d76:	b2da      	uxtb	r2, r3
 8021d78:	2a00      	cmp	r2, #0
 8021d7a:	d101      	bne.n	8021d80 <__lo0bits+0x3e>
 8021d7c:	3008      	adds	r0, #8
 8021d7e:	0a1b      	lsrs	r3, r3, #8
 8021d80:	071a      	lsls	r2, r3, #28
 8021d82:	d101      	bne.n	8021d88 <__lo0bits+0x46>
 8021d84:	3004      	adds	r0, #4
 8021d86:	091b      	lsrs	r3, r3, #4
 8021d88:	079a      	lsls	r2, r3, #30
 8021d8a:	d101      	bne.n	8021d90 <__lo0bits+0x4e>
 8021d8c:	3002      	adds	r0, #2
 8021d8e:	089b      	lsrs	r3, r3, #2
 8021d90:	07da      	lsls	r2, r3, #31
 8021d92:	d4e9      	bmi.n	8021d68 <__lo0bits+0x26>
 8021d94:	3001      	adds	r0, #1
 8021d96:	085b      	lsrs	r3, r3, #1
 8021d98:	d1e6      	bne.n	8021d68 <__lo0bits+0x26>
 8021d9a:	2020      	movs	r0, #32
 8021d9c:	e7e2      	b.n	8021d64 <__lo0bits+0x22>
	...

08021da0 <__i2b>:
 8021da0:	b510      	push	{r4, lr}
 8021da2:	000c      	movs	r4, r1
 8021da4:	2101      	movs	r1, #1
 8021da6:	f7ff feb3 	bl	8021b10 <_Balloc>
 8021daa:	2800      	cmp	r0, #0
 8021dac:	d107      	bne.n	8021dbe <__i2b+0x1e>
 8021dae:	2146      	movs	r1, #70	@ 0x46
 8021db0:	4c05      	ldr	r4, [pc, #20]	@ (8021dc8 <__i2b+0x28>)
 8021db2:	0002      	movs	r2, r0
 8021db4:	4b05      	ldr	r3, [pc, #20]	@ (8021dcc <__i2b+0x2c>)
 8021db6:	0020      	movs	r0, r4
 8021db8:	31ff      	adds	r1, #255	@ 0xff
 8021dba:	f000 ff89 	bl	8022cd0 <__assert_func>
 8021dbe:	2301      	movs	r3, #1
 8021dc0:	6144      	str	r4, [r0, #20]
 8021dc2:	6103      	str	r3, [r0, #16]
 8021dc4:	bd10      	pop	{r4, pc}
 8021dc6:	46c0      	nop			@ (mov r8, r8)
 8021dc8:	08025fd2 	.word	0x08025fd2
 8021dcc:	08025f61 	.word	0x08025f61

08021dd0 <__multiply>:
 8021dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021dd2:	0014      	movs	r4, r2
 8021dd4:	690a      	ldr	r2, [r1, #16]
 8021dd6:	6923      	ldr	r3, [r4, #16]
 8021dd8:	000d      	movs	r5, r1
 8021dda:	b08b      	sub	sp, #44	@ 0x2c
 8021ddc:	429a      	cmp	r2, r3
 8021dde:	db02      	blt.n	8021de6 <__multiply+0x16>
 8021de0:	0023      	movs	r3, r4
 8021de2:	000c      	movs	r4, r1
 8021de4:	001d      	movs	r5, r3
 8021de6:	6927      	ldr	r7, [r4, #16]
 8021de8:	692e      	ldr	r6, [r5, #16]
 8021dea:	6861      	ldr	r1, [r4, #4]
 8021dec:	19bb      	adds	r3, r7, r6
 8021dee:	9303      	str	r3, [sp, #12]
 8021df0:	68a3      	ldr	r3, [r4, #8]
 8021df2:	19ba      	adds	r2, r7, r6
 8021df4:	4293      	cmp	r3, r2
 8021df6:	da00      	bge.n	8021dfa <__multiply+0x2a>
 8021df8:	3101      	adds	r1, #1
 8021dfa:	f7ff fe89 	bl	8021b10 <_Balloc>
 8021dfe:	9002      	str	r0, [sp, #8]
 8021e00:	2800      	cmp	r0, #0
 8021e02:	d106      	bne.n	8021e12 <__multiply+0x42>
 8021e04:	21b1      	movs	r1, #177	@ 0xb1
 8021e06:	4b49      	ldr	r3, [pc, #292]	@ (8021f2c <__multiply+0x15c>)
 8021e08:	4849      	ldr	r0, [pc, #292]	@ (8021f30 <__multiply+0x160>)
 8021e0a:	9a02      	ldr	r2, [sp, #8]
 8021e0c:	0049      	lsls	r1, r1, #1
 8021e0e:	f000 ff5f 	bl	8022cd0 <__assert_func>
 8021e12:	9b02      	ldr	r3, [sp, #8]
 8021e14:	2200      	movs	r2, #0
 8021e16:	3314      	adds	r3, #20
 8021e18:	469c      	mov	ip, r3
 8021e1a:	19bb      	adds	r3, r7, r6
 8021e1c:	009b      	lsls	r3, r3, #2
 8021e1e:	4463      	add	r3, ip
 8021e20:	9304      	str	r3, [sp, #16]
 8021e22:	4663      	mov	r3, ip
 8021e24:	9904      	ldr	r1, [sp, #16]
 8021e26:	428b      	cmp	r3, r1
 8021e28:	d32a      	bcc.n	8021e80 <__multiply+0xb0>
 8021e2a:	0023      	movs	r3, r4
 8021e2c:	00bf      	lsls	r7, r7, #2
 8021e2e:	3314      	adds	r3, #20
 8021e30:	3514      	adds	r5, #20
 8021e32:	9308      	str	r3, [sp, #32]
 8021e34:	00b6      	lsls	r6, r6, #2
 8021e36:	19db      	adds	r3, r3, r7
 8021e38:	9305      	str	r3, [sp, #20]
 8021e3a:	19ab      	adds	r3, r5, r6
 8021e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e3e:	2304      	movs	r3, #4
 8021e40:	9306      	str	r3, [sp, #24]
 8021e42:	0023      	movs	r3, r4
 8021e44:	9a05      	ldr	r2, [sp, #20]
 8021e46:	3315      	adds	r3, #21
 8021e48:	9501      	str	r5, [sp, #4]
 8021e4a:	429a      	cmp	r2, r3
 8021e4c:	d305      	bcc.n	8021e5a <__multiply+0x8a>
 8021e4e:	1b13      	subs	r3, r2, r4
 8021e50:	3b15      	subs	r3, #21
 8021e52:	089b      	lsrs	r3, r3, #2
 8021e54:	3301      	adds	r3, #1
 8021e56:	009b      	lsls	r3, r3, #2
 8021e58:	9306      	str	r3, [sp, #24]
 8021e5a:	9b01      	ldr	r3, [sp, #4]
 8021e5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021e5e:	4293      	cmp	r3, r2
 8021e60:	d310      	bcc.n	8021e84 <__multiply+0xb4>
 8021e62:	9b03      	ldr	r3, [sp, #12]
 8021e64:	2b00      	cmp	r3, #0
 8021e66:	dd05      	ble.n	8021e74 <__multiply+0xa4>
 8021e68:	9b04      	ldr	r3, [sp, #16]
 8021e6a:	3b04      	subs	r3, #4
 8021e6c:	9304      	str	r3, [sp, #16]
 8021e6e:	681b      	ldr	r3, [r3, #0]
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	d056      	beq.n	8021f22 <__multiply+0x152>
 8021e74:	9b02      	ldr	r3, [sp, #8]
 8021e76:	9a03      	ldr	r2, [sp, #12]
 8021e78:	0018      	movs	r0, r3
 8021e7a:	611a      	str	r2, [r3, #16]
 8021e7c:	b00b      	add	sp, #44	@ 0x2c
 8021e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e80:	c304      	stmia	r3!, {r2}
 8021e82:	e7cf      	b.n	8021e24 <__multiply+0x54>
 8021e84:	9b01      	ldr	r3, [sp, #4]
 8021e86:	6818      	ldr	r0, [r3, #0]
 8021e88:	b280      	uxth	r0, r0
 8021e8a:	2800      	cmp	r0, #0
 8021e8c:	d01e      	beq.n	8021ecc <__multiply+0xfc>
 8021e8e:	4667      	mov	r7, ip
 8021e90:	2500      	movs	r5, #0
 8021e92:	9e08      	ldr	r6, [sp, #32]
 8021e94:	ce02      	ldmia	r6!, {r1}
 8021e96:	683b      	ldr	r3, [r7, #0]
 8021e98:	9307      	str	r3, [sp, #28]
 8021e9a:	b28b      	uxth	r3, r1
 8021e9c:	4343      	muls	r3, r0
 8021e9e:	001a      	movs	r2, r3
 8021ea0:	466b      	mov	r3, sp
 8021ea2:	0c09      	lsrs	r1, r1, #16
 8021ea4:	8b9b      	ldrh	r3, [r3, #28]
 8021ea6:	4341      	muls	r1, r0
 8021ea8:	18d3      	adds	r3, r2, r3
 8021eaa:	9a07      	ldr	r2, [sp, #28]
 8021eac:	195b      	adds	r3, r3, r5
 8021eae:	0c12      	lsrs	r2, r2, #16
 8021eb0:	1889      	adds	r1, r1, r2
 8021eb2:	0c1a      	lsrs	r2, r3, #16
 8021eb4:	188a      	adds	r2, r1, r2
 8021eb6:	b29b      	uxth	r3, r3
 8021eb8:	0c15      	lsrs	r5, r2, #16
 8021eba:	0412      	lsls	r2, r2, #16
 8021ebc:	431a      	orrs	r2, r3
 8021ebe:	9b05      	ldr	r3, [sp, #20]
 8021ec0:	c704      	stmia	r7!, {r2}
 8021ec2:	42b3      	cmp	r3, r6
 8021ec4:	d8e6      	bhi.n	8021e94 <__multiply+0xc4>
 8021ec6:	4663      	mov	r3, ip
 8021ec8:	9a06      	ldr	r2, [sp, #24]
 8021eca:	509d      	str	r5, [r3, r2]
 8021ecc:	9b01      	ldr	r3, [sp, #4]
 8021ece:	6818      	ldr	r0, [r3, #0]
 8021ed0:	0c00      	lsrs	r0, r0, #16
 8021ed2:	d020      	beq.n	8021f16 <__multiply+0x146>
 8021ed4:	4663      	mov	r3, ip
 8021ed6:	0025      	movs	r5, r4
 8021ed8:	4661      	mov	r1, ip
 8021eda:	2700      	movs	r7, #0
 8021edc:	681b      	ldr	r3, [r3, #0]
 8021ede:	3514      	adds	r5, #20
 8021ee0:	682a      	ldr	r2, [r5, #0]
 8021ee2:	680e      	ldr	r6, [r1, #0]
 8021ee4:	b292      	uxth	r2, r2
 8021ee6:	4342      	muls	r2, r0
 8021ee8:	0c36      	lsrs	r6, r6, #16
 8021eea:	1992      	adds	r2, r2, r6
 8021eec:	19d2      	adds	r2, r2, r7
 8021eee:	0416      	lsls	r6, r2, #16
 8021ef0:	b29b      	uxth	r3, r3
 8021ef2:	431e      	orrs	r6, r3
 8021ef4:	600e      	str	r6, [r1, #0]
 8021ef6:	cd40      	ldmia	r5!, {r6}
 8021ef8:	684b      	ldr	r3, [r1, #4]
 8021efa:	0c36      	lsrs	r6, r6, #16
 8021efc:	4346      	muls	r6, r0
 8021efe:	b29b      	uxth	r3, r3
 8021f00:	0c12      	lsrs	r2, r2, #16
 8021f02:	18f3      	adds	r3, r6, r3
 8021f04:	189b      	adds	r3, r3, r2
 8021f06:	9a05      	ldr	r2, [sp, #20]
 8021f08:	0c1f      	lsrs	r7, r3, #16
 8021f0a:	3104      	adds	r1, #4
 8021f0c:	42aa      	cmp	r2, r5
 8021f0e:	d8e7      	bhi.n	8021ee0 <__multiply+0x110>
 8021f10:	4662      	mov	r2, ip
 8021f12:	9906      	ldr	r1, [sp, #24]
 8021f14:	5053      	str	r3, [r2, r1]
 8021f16:	9b01      	ldr	r3, [sp, #4]
 8021f18:	3304      	adds	r3, #4
 8021f1a:	9301      	str	r3, [sp, #4]
 8021f1c:	2304      	movs	r3, #4
 8021f1e:	449c      	add	ip, r3
 8021f20:	e79b      	b.n	8021e5a <__multiply+0x8a>
 8021f22:	9b03      	ldr	r3, [sp, #12]
 8021f24:	3b01      	subs	r3, #1
 8021f26:	9303      	str	r3, [sp, #12]
 8021f28:	e79b      	b.n	8021e62 <__multiply+0x92>
 8021f2a:	46c0      	nop			@ (mov r8, r8)
 8021f2c:	08025f61 	.word	0x08025f61
 8021f30:	08025fd2 	.word	0x08025fd2

08021f34 <__pow5mult>:
 8021f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021f36:	2303      	movs	r3, #3
 8021f38:	0015      	movs	r5, r2
 8021f3a:	0007      	movs	r7, r0
 8021f3c:	000e      	movs	r6, r1
 8021f3e:	401a      	ands	r2, r3
 8021f40:	421d      	tst	r5, r3
 8021f42:	d008      	beq.n	8021f56 <__pow5mult+0x22>
 8021f44:	4925      	ldr	r1, [pc, #148]	@ (8021fdc <__pow5mult+0xa8>)
 8021f46:	3a01      	subs	r2, #1
 8021f48:	0092      	lsls	r2, r2, #2
 8021f4a:	5852      	ldr	r2, [r2, r1]
 8021f4c:	2300      	movs	r3, #0
 8021f4e:	0031      	movs	r1, r6
 8021f50:	f7ff fe46 	bl	8021be0 <__multadd>
 8021f54:	0006      	movs	r6, r0
 8021f56:	10ad      	asrs	r5, r5, #2
 8021f58:	d03d      	beq.n	8021fd6 <__pow5mult+0xa2>
 8021f5a:	69fc      	ldr	r4, [r7, #28]
 8021f5c:	2c00      	cmp	r4, #0
 8021f5e:	d10f      	bne.n	8021f80 <__pow5mult+0x4c>
 8021f60:	2010      	movs	r0, #16
 8021f62:	f7ff fd07 	bl	8021974 <malloc>
 8021f66:	1e02      	subs	r2, r0, #0
 8021f68:	61f8      	str	r0, [r7, #28]
 8021f6a:	d105      	bne.n	8021f78 <__pow5mult+0x44>
 8021f6c:	21b4      	movs	r1, #180	@ 0xb4
 8021f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8021fe0 <__pow5mult+0xac>)
 8021f70:	481c      	ldr	r0, [pc, #112]	@ (8021fe4 <__pow5mult+0xb0>)
 8021f72:	31ff      	adds	r1, #255	@ 0xff
 8021f74:	f000 feac 	bl	8022cd0 <__assert_func>
 8021f78:	6044      	str	r4, [r0, #4]
 8021f7a:	6084      	str	r4, [r0, #8]
 8021f7c:	6004      	str	r4, [r0, #0]
 8021f7e:	60c4      	str	r4, [r0, #12]
 8021f80:	69fb      	ldr	r3, [r7, #28]
 8021f82:	689c      	ldr	r4, [r3, #8]
 8021f84:	9301      	str	r3, [sp, #4]
 8021f86:	2c00      	cmp	r4, #0
 8021f88:	d108      	bne.n	8021f9c <__pow5mult+0x68>
 8021f8a:	0038      	movs	r0, r7
 8021f8c:	4916      	ldr	r1, [pc, #88]	@ (8021fe8 <__pow5mult+0xb4>)
 8021f8e:	f7ff ff07 	bl	8021da0 <__i2b>
 8021f92:	9b01      	ldr	r3, [sp, #4]
 8021f94:	0004      	movs	r4, r0
 8021f96:	6098      	str	r0, [r3, #8]
 8021f98:	2300      	movs	r3, #0
 8021f9a:	6003      	str	r3, [r0, #0]
 8021f9c:	2301      	movs	r3, #1
 8021f9e:	421d      	tst	r5, r3
 8021fa0:	d00a      	beq.n	8021fb8 <__pow5mult+0x84>
 8021fa2:	0031      	movs	r1, r6
 8021fa4:	0022      	movs	r2, r4
 8021fa6:	0038      	movs	r0, r7
 8021fa8:	f7ff ff12 	bl	8021dd0 <__multiply>
 8021fac:	0031      	movs	r1, r6
 8021fae:	9001      	str	r0, [sp, #4]
 8021fb0:	0038      	movs	r0, r7
 8021fb2:	f7ff fdf1 	bl	8021b98 <_Bfree>
 8021fb6:	9e01      	ldr	r6, [sp, #4]
 8021fb8:	106d      	asrs	r5, r5, #1
 8021fba:	d00c      	beq.n	8021fd6 <__pow5mult+0xa2>
 8021fbc:	6820      	ldr	r0, [r4, #0]
 8021fbe:	2800      	cmp	r0, #0
 8021fc0:	d107      	bne.n	8021fd2 <__pow5mult+0x9e>
 8021fc2:	0022      	movs	r2, r4
 8021fc4:	0021      	movs	r1, r4
 8021fc6:	0038      	movs	r0, r7
 8021fc8:	f7ff ff02 	bl	8021dd0 <__multiply>
 8021fcc:	2300      	movs	r3, #0
 8021fce:	6020      	str	r0, [r4, #0]
 8021fd0:	6003      	str	r3, [r0, #0]
 8021fd2:	0004      	movs	r4, r0
 8021fd4:	e7e2      	b.n	8021f9c <__pow5mult+0x68>
 8021fd6:	0030      	movs	r0, r6
 8021fd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021fda:	46c0      	nop			@ (mov r8, r8)
 8021fdc:	0802602c 	.word	0x0802602c
 8021fe0:	08025ef2 	.word	0x08025ef2
 8021fe4:	08025fd2 	.word	0x08025fd2
 8021fe8:	00000271 	.word	0x00000271

08021fec <__lshift>:
 8021fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021fee:	000c      	movs	r4, r1
 8021ff0:	0016      	movs	r6, r2
 8021ff2:	6923      	ldr	r3, [r4, #16]
 8021ff4:	1157      	asrs	r7, r2, #5
 8021ff6:	b085      	sub	sp, #20
 8021ff8:	18fb      	adds	r3, r7, r3
 8021ffa:	9301      	str	r3, [sp, #4]
 8021ffc:	3301      	adds	r3, #1
 8021ffe:	9300      	str	r3, [sp, #0]
 8022000:	6849      	ldr	r1, [r1, #4]
 8022002:	68a3      	ldr	r3, [r4, #8]
 8022004:	9002      	str	r0, [sp, #8]
 8022006:	9a00      	ldr	r2, [sp, #0]
 8022008:	4293      	cmp	r3, r2
 802200a:	db10      	blt.n	802202e <__lshift+0x42>
 802200c:	9802      	ldr	r0, [sp, #8]
 802200e:	f7ff fd7f 	bl	8021b10 <_Balloc>
 8022012:	2300      	movs	r3, #0
 8022014:	0001      	movs	r1, r0
 8022016:	0005      	movs	r5, r0
 8022018:	001a      	movs	r2, r3
 802201a:	3114      	adds	r1, #20
 802201c:	4298      	cmp	r0, r3
 802201e:	d10c      	bne.n	802203a <__lshift+0x4e>
 8022020:	21ef      	movs	r1, #239	@ 0xef
 8022022:	002a      	movs	r2, r5
 8022024:	4b25      	ldr	r3, [pc, #148]	@ (80220bc <__lshift+0xd0>)
 8022026:	4826      	ldr	r0, [pc, #152]	@ (80220c0 <__lshift+0xd4>)
 8022028:	0049      	lsls	r1, r1, #1
 802202a:	f000 fe51 	bl	8022cd0 <__assert_func>
 802202e:	3101      	adds	r1, #1
 8022030:	005b      	lsls	r3, r3, #1
 8022032:	e7e8      	b.n	8022006 <__lshift+0x1a>
 8022034:	0098      	lsls	r0, r3, #2
 8022036:	500a      	str	r2, [r1, r0]
 8022038:	3301      	adds	r3, #1
 802203a:	42bb      	cmp	r3, r7
 802203c:	dbfa      	blt.n	8022034 <__lshift+0x48>
 802203e:	43fb      	mvns	r3, r7
 8022040:	17db      	asrs	r3, r3, #31
 8022042:	401f      	ands	r7, r3
 8022044:	00bf      	lsls	r7, r7, #2
 8022046:	0023      	movs	r3, r4
 8022048:	201f      	movs	r0, #31
 802204a:	19c9      	adds	r1, r1, r7
 802204c:	0037      	movs	r7, r6
 802204e:	6922      	ldr	r2, [r4, #16]
 8022050:	3314      	adds	r3, #20
 8022052:	0092      	lsls	r2, r2, #2
 8022054:	189a      	adds	r2, r3, r2
 8022056:	4007      	ands	r7, r0
 8022058:	4206      	tst	r6, r0
 802205a:	d029      	beq.n	80220b0 <__lshift+0xc4>
 802205c:	3001      	adds	r0, #1
 802205e:	1bc0      	subs	r0, r0, r7
 8022060:	9003      	str	r0, [sp, #12]
 8022062:	468c      	mov	ip, r1
 8022064:	2000      	movs	r0, #0
 8022066:	681e      	ldr	r6, [r3, #0]
 8022068:	40be      	lsls	r6, r7
 802206a:	4306      	orrs	r6, r0
 802206c:	4660      	mov	r0, ip
 802206e:	c040      	stmia	r0!, {r6}
 8022070:	4684      	mov	ip, r0
 8022072:	9e03      	ldr	r6, [sp, #12]
 8022074:	cb01      	ldmia	r3!, {r0}
 8022076:	40f0      	lsrs	r0, r6
 8022078:	429a      	cmp	r2, r3
 802207a:	d8f4      	bhi.n	8022066 <__lshift+0x7a>
 802207c:	0026      	movs	r6, r4
 802207e:	3615      	adds	r6, #21
 8022080:	2304      	movs	r3, #4
 8022082:	42b2      	cmp	r2, r6
 8022084:	d304      	bcc.n	8022090 <__lshift+0xa4>
 8022086:	1b13      	subs	r3, r2, r4
 8022088:	3b15      	subs	r3, #21
 802208a:	089b      	lsrs	r3, r3, #2
 802208c:	3301      	adds	r3, #1
 802208e:	009b      	lsls	r3, r3, #2
 8022090:	50c8      	str	r0, [r1, r3]
 8022092:	2800      	cmp	r0, #0
 8022094:	d002      	beq.n	802209c <__lshift+0xb0>
 8022096:	9b01      	ldr	r3, [sp, #4]
 8022098:	3302      	adds	r3, #2
 802209a:	9300      	str	r3, [sp, #0]
 802209c:	9b00      	ldr	r3, [sp, #0]
 802209e:	9802      	ldr	r0, [sp, #8]
 80220a0:	3b01      	subs	r3, #1
 80220a2:	0021      	movs	r1, r4
 80220a4:	612b      	str	r3, [r5, #16]
 80220a6:	f7ff fd77 	bl	8021b98 <_Bfree>
 80220aa:	0028      	movs	r0, r5
 80220ac:	b005      	add	sp, #20
 80220ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220b0:	cb01      	ldmia	r3!, {r0}
 80220b2:	c101      	stmia	r1!, {r0}
 80220b4:	429a      	cmp	r2, r3
 80220b6:	d8fb      	bhi.n	80220b0 <__lshift+0xc4>
 80220b8:	e7f0      	b.n	802209c <__lshift+0xb0>
 80220ba:	46c0      	nop			@ (mov r8, r8)
 80220bc:	08025f61 	.word	0x08025f61
 80220c0:	08025fd2 	.word	0x08025fd2

080220c4 <__mcmp>:
 80220c4:	b530      	push	{r4, r5, lr}
 80220c6:	690b      	ldr	r3, [r1, #16]
 80220c8:	6904      	ldr	r4, [r0, #16]
 80220ca:	0002      	movs	r2, r0
 80220cc:	1ae0      	subs	r0, r4, r3
 80220ce:	429c      	cmp	r4, r3
 80220d0:	d10f      	bne.n	80220f2 <__mcmp+0x2e>
 80220d2:	3214      	adds	r2, #20
 80220d4:	009b      	lsls	r3, r3, #2
 80220d6:	3114      	adds	r1, #20
 80220d8:	0014      	movs	r4, r2
 80220da:	18c9      	adds	r1, r1, r3
 80220dc:	18d2      	adds	r2, r2, r3
 80220de:	3a04      	subs	r2, #4
 80220e0:	3904      	subs	r1, #4
 80220e2:	6815      	ldr	r5, [r2, #0]
 80220e4:	680b      	ldr	r3, [r1, #0]
 80220e6:	429d      	cmp	r5, r3
 80220e8:	d004      	beq.n	80220f4 <__mcmp+0x30>
 80220ea:	2001      	movs	r0, #1
 80220ec:	429d      	cmp	r5, r3
 80220ee:	d200      	bcs.n	80220f2 <__mcmp+0x2e>
 80220f0:	3802      	subs	r0, #2
 80220f2:	bd30      	pop	{r4, r5, pc}
 80220f4:	4294      	cmp	r4, r2
 80220f6:	d3f2      	bcc.n	80220de <__mcmp+0x1a>
 80220f8:	e7fb      	b.n	80220f2 <__mcmp+0x2e>
	...

080220fc <__mdiff>:
 80220fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80220fe:	000c      	movs	r4, r1
 8022100:	b087      	sub	sp, #28
 8022102:	9000      	str	r0, [sp, #0]
 8022104:	0011      	movs	r1, r2
 8022106:	0020      	movs	r0, r4
 8022108:	0017      	movs	r7, r2
 802210a:	f7ff ffdb 	bl	80220c4 <__mcmp>
 802210e:	1e05      	subs	r5, r0, #0
 8022110:	d110      	bne.n	8022134 <__mdiff+0x38>
 8022112:	0001      	movs	r1, r0
 8022114:	9800      	ldr	r0, [sp, #0]
 8022116:	f7ff fcfb 	bl	8021b10 <_Balloc>
 802211a:	1e02      	subs	r2, r0, #0
 802211c:	d104      	bne.n	8022128 <__mdiff+0x2c>
 802211e:	4b40      	ldr	r3, [pc, #256]	@ (8022220 <__mdiff+0x124>)
 8022120:	4840      	ldr	r0, [pc, #256]	@ (8022224 <__mdiff+0x128>)
 8022122:	4941      	ldr	r1, [pc, #260]	@ (8022228 <__mdiff+0x12c>)
 8022124:	f000 fdd4 	bl	8022cd0 <__assert_func>
 8022128:	2301      	movs	r3, #1
 802212a:	6145      	str	r5, [r0, #20]
 802212c:	6103      	str	r3, [r0, #16]
 802212e:	0010      	movs	r0, r2
 8022130:	b007      	add	sp, #28
 8022132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022134:	2600      	movs	r6, #0
 8022136:	42b0      	cmp	r0, r6
 8022138:	da03      	bge.n	8022142 <__mdiff+0x46>
 802213a:	0023      	movs	r3, r4
 802213c:	003c      	movs	r4, r7
 802213e:	001f      	movs	r7, r3
 8022140:	3601      	adds	r6, #1
 8022142:	6861      	ldr	r1, [r4, #4]
 8022144:	9800      	ldr	r0, [sp, #0]
 8022146:	f7ff fce3 	bl	8021b10 <_Balloc>
 802214a:	1e02      	subs	r2, r0, #0
 802214c:	d103      	bne.n	8022156 <__mdiff+0x5a>
 802214e:	4b34      	ldr	r3, [pc, #208]	@ (8022220 <__mdiff+0x124>)
 8022150:	4834      	ldr	r0, [pc, #208]	@ (8022224 <__mdiff+0x128>)
 8022152:	4936      	ldr	r1, [pc, #216]	@ (802222c <__mdiff+0x130>)
 8022154:	e7e6      	b.n	8022124 <__mdiff+0x28>
 8022156:	6923      	ldr	r3, [r4, #16]
 8022158:	3414      	adds	r4, #20
 802215a:	9300      	str	r3, [sp, #0]
 802215c:	009b      	lsls	r3, r3, #2
 802215e:	18e3      	adds	r3, r4, r3
 8022160:	0021      	movs	r1, r4
 8022162:	9401      	str	r4, [sp, #4]
 8022164:	003c      	movs	r4, r7
 8022166:	9302      	str	r3, [sp, #8]
 8022168:	693b      	ldr	r3, [r7, #16]
 802216a:	3414      	adds	r4, #20
 802216c:	009b      	lsls	r3, r3, #2
 802216e:	18e3      	adds	r3, r4, r3
 8022170:	9303      	str	r3, [sp, #12]
 8022172:	0003      	movs	r3, r0
 8022174:	60c6      	str	r6, [r0, #12]
 8022176:	468c      	mov	ip, r1
 8022178:	2000      	movs	r0, #0
 802217a:	3314      	adds	r3, #20
 802217c:	9304      	str	r3, [sp, #16]
 802217e:	9305      	str	r3, [sp, #20]
 8022180:	4663      	mov	r3, ip
 8022182:	cb20      	ldmia	r3!, {r5}
 8022184:	b2a9      	uxth	r1, r5
 8022186:	000e      	movs	r6, r1
 8022188:	469c      	mov	ip, r3
 802218a:	cc08      	ldmia	r4!, {r3}
 802218c:	0c2d      	lsrs	r5, r5, #16
 802218e:	b299      	uxth	r1, r3
 8022190:	1a71      	subs	r1, r6, r1
 8022192:	1809      	adds	r1, r1, r0
 8022194:	0c1b      	lsrs	r3, r3, #16
 8022196:	1408      	asrs	r0, r1, #16
 8022198:	1aeb      	subs	r3, r5, r3
 802219a:	181b      	adds	r3, r3, r0
 802219c:	1418      	asrs	r0, r3, #16
 802219e:	b289      	uxth	r1, r1
 80221a0:	041b      	lsls	r3, r3, #16
 80221a2:	4319      	orrs	r1, r3
 80221a4:	9b05      	ldr	r3, [sp, #20]
 80221a6:	c302      	stmia	r3!, {r1}
 80221a8:	9305      	str	r3, [sp, #20]
 80221aa:	9b03      	ldr	r3, [sp, #12]
 80221ac:	42a3      	cmp	r3, r4
 80221ae:	d8e7      	bhi.n	8022180 <__mdiff+0x84>
 80221b0:	0039      	movs	r1, r7
 80221b2:	9c03      	ldr	r4, [sp, #12]
 80221b4:	3115      	adds	r1, #21
 80221b6:	2304      	movs	r3, #4
 80221b8:	428c      	cmp	r4, r1
 80221ba:	d304      	bcc.n	80221c6 <__mdiff+0xca>
 80221bc:	1be3      	subs	r3, r4, r7
 80221be:	3b15      	subs	r3, #21
 80221c0:	089b      	lsrs	r3, r3, #2
 80221c2:	3301      	adds	r3, #1
 80221c4:	009b      	lsls	r3, r3, #2
 80221c6:	9901      	ldr	r1, [sp, #4]
 80221c8:	18cd      	adds	r5, r1, r3
 80221ca:	9904      	ldr	r1, [sp, #16]
 80221cc:	002e      	movs	r6, r5
 80221ce:	18cb      	adds	r3, r1, r3
 80221d0:	001f      	movs	r7, r3
 80221d2:	9902      	ldr	r1, [sp, #8]
 80221d4:	428e      	cmp	r6, r1
 80221d6:	d311      	bcc.n	80221fc <__mdiff+0x100>
 80221d8:	9c02      	ldr	r4, [sp, #8]
 80221da:	1ee9      	subs	r1, r5, #3
 80221dc:	2000      	movs	r0, #0
 80221de:	428c      	cmp	r4, r1
 80221e0:	d304      	bcc.n	80221ec <__mdiff+0xf0>
 80221e2:	0021      	movs	r1, r4
 80221e4:	3103      	adds	r1, #3
 80221e6:	1b49      	subs	r1, r1, r5
 80221e8:	0889      	lsrs	r1, r1, #2
 80221ea:	0088      	lsls	r0, r1, #2
 80221ec:	181b      	adds	r3, r3, r0
 80221ee:	3b04      	subs	r3, #4
 80221f0:	6819      	ldr	r1, [r3, #0]
 80221f2:	2900      	cmp	r1, #0
 80221f4:	d010      	beq.n	8022218 <__mdiff+0x11c>
 80221f6:	9b00      	ldr	r3, [sp, #0]
 80221f8:	6113      	str	r3, [r2, #16]
 80221fa:	e798      	b.n	802212e <__mdiff+0x32>
 80221fc:	4684      	mov	ip, r0
 80221fe:	ce02      	ldmia	r6!, {r1}
 8022200:	b288      	uxth	r0, r1
 8022202:	4460      	add	r0, ip
 8022204:	1400      	asrs	r0, r0, #16
 8022206:	0c0c      	lsrs	r4, r1, #16
 8022208:	1904      	adds	r4, r0, r4
 802220a:	4461      	add	r1, ip
 802220c:	1420      	asrs	r0, r4, #16
 802220e:	b289      	uxth	r1, r1
 8022210:	0424      	lsls	r4, r4, #16
 8022212:	4321      	orrs	r1, r4
 8022214:	c702      	stmia	r7!, {r1}
 8022216:	e7dc      	b.n	80221d2 <__mdiff+0xd6>
 8022218:	9900      	ldr	r1, [sp, #0]
 802221a:	3901      	subs	r1, #1
 802221c:	9100      	str	r1, [sp, #0]
 802221e:	e7e6      	b.n	80221ee <__mdiff+0xf2>
 8022220:	08025f61 	.word	0x08025f61
 8022224:	08025fd2 	.word	0x08025fd2
 8022228:	00000237 	.word	0x00000237
 802222c:	00000245 	.word	0x00000245

08022230 <__ulp>:
 8022230:	b510      	push	{r4, lr}
 8022232:	2400      	movs	r4, #0
 8022234:	4b0c      	ldr	r3, [pc, #48]	@ (8022268 <__ulp+0x38>)
 8022236:	4a0d      	ldr	r2, [pc, #52]	@ (802226c <__ulp+0x3c>)
 8022238:	400b      	ands	r3, r1
 802223a:	189b      	adds	r3, r3, r2
 802223c:	42a3      	cmp	r3, r4
 802223e:	dc06      	bgt.n	802224e <__ulp+0x1e>
 8022240:	425b      	negs	r3, r3
 8022242:	151a      	asrs	r2, r3, #20
 8022244:	2a13      	cmp	r2, #19
 8022246:	dc05      	bgt.n	8022254 <__ulp+0x24>
 8022248:	2380      	movs	r3, #128	@ 0x80
 802224a:	031b      	lsls	r3, r3, #12
 802224c:	4113      	asrs	r3, r2
 802224e:	0019      	movs	r1, r3
 8022250:	0020      	movs	r0, r4
 8022252:	bd10      	pop	{r4, pc}
 8022254:	3a14      	subs	r2, #20
 8022256:	2401      	movs	r4, #1
 8022258:	2a1e      	cmp	r2, #30
 802225a:	dc02      	bgt.n	8022262 <__ulp+0x32>
 802225c:	2480      	movs	r4, #128	@ 0x80
 802225e:	0624      	lsls	r4, r4, #24
 8022260:	40d4      	lsrs	r4, r2
 8022262:	2300      	movs	r3, #0
 8022264:	e7f3      	b.n	802224e <__ulp+0x1e>
 8022266:	46c0      	nop			@ (mov r8, r8)
 8022268:	7ff00000 	.word	0x7ff00000
 802226c:	fcc00000 	.word	0xfcc00000

08022270 <__b2d>:
 8022270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022272:	0006      	movs	r6, r0
 8022274:	6903      	ldr	r3, [r0, #16]
 8022276:	3614      	adds	r6, #20
 8022278:	009b      	lsls	r3, r3, #2
 802227a:	18f3      	adds	r3, r6, r3
 802227c:	1f1d      	subs	r5, r3, #4
 802227e:	682c      	ldr	r4, [r5, #0]
 8022280:	000f      	movs	r7, r1
 8022282:	0020      	movs	r0, r4
 8022284:	9301      	str	r3, [sp, #4]
 8022286:	f7ff fd3b 	bl	8021d00 <__hi0bits>
 802228a:	2220      	movs	r2, #32
 802228c:	1a12      	subs	r2, r2, r0
 802228e:	603a      	str	r2, [r7, #0]
 8022290:	0003      	movs	r3, r0
 8022292:	4a1c      	ldr	r2, [pc, #112]	@ (8022304 <__b2d+0x94>)
 8022294:	280a      	cmp	r0, #10
 8022296:	dc15      	bgt.n	80222c4 <__b2d+0x54>
 8022298:	210b      	movs	r1, #11
 802229a:	0027      	movs	r7, r4
 802229c:	1a09      	subs	r1, r1, r0
 802229e:	40cf      	lsrs	r7, r1
 80222a0:	433a      	orrs	r2, r7
 80222a2:	468c      	mov	ip, r1
 80222a4:	0011      	movs	r1, r2
 80222a6:	2200      	movs	r2, #0
 80222a8:	42ae      	cmp	r6, r5
 80222aa:	d202      	bcs.n	80222b2 <__b2d+0x42>
 80222ac:	9a01      	ldr	r2, [sp, #4]
 80222ae:	3a08      	subs	r2, #8
 80222b0:	6812      	ldr	r2, [r2, #0]
 80222b2:	3315      	adds	r3, #21
 80222b4:	409c      	lsls	r4, r3
 80222b6:	4663      	mov	r3, ip
 80222b8:	0027      	movs	r7, r4
 80222ba:	40da      	lsrs	r2, r3
 80222bc:	4317      	orrs	r7, r2
 80222be:	0038      	movs	r0, r7
 80222c0:	b003      	add	sp, #12
 80222c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222c4:	2700      	movs	r7, #0
 80222c6:	42ae      	cmp	r6, r5
 80222c8:	d202      	bcs.n	80222d0 <__b2d+0x60>
 80222ca:	9d01      	ldr	r5, [sp, #4]
 80222cc:	3d08      	subs	r5, #8
 80222ce:	682f      	ldr	r7, [r5, #0]
 80222d0:	210b      	movs	r1, #11
 80222d2:	4249      	negs	r1, r1
 80222d4:	468c      	mov	ip, r1
 80222d6:	449c      	add	ip, r3
 80222d8:	2b0b      	cmp	r3, #11
 80222da:	d010      	beq.n	80222fe <__b2d+0x8e>
 80222dc:	4661      	mov	r1, ip
 80222de:	2320      	movs	r3, #32
 80222e0:	408c      	lsls	r4, r1
 80222e2:	1a5b      	subs	r3, r3, r1
 80222e4:	0039      	movs	r1, r7
 80222e6:	40d9      	lsrs	r1, r3
 80222e8:	430c      	orrs	r4, r1
 80222ea:	4322      	orrs	r2, r4
 80222ec:	0011      	movs	r1, r2
 80222ee:	2200      	movs	r2, #0
 80222f0:	42b5      	cmp	r5, r6
 80222f2:	d901      	bls.n	80222f8 <__b2d+0x88>
 80222f4:	3d04      	subs	r5, #4
 80222f6:	682a      	ldr	r2, [r5, #0]
 80222f8:	4664      	mov	r4, ip
 80222fa:	40a7      	lsls	r7, r4
 80222fc:	e7dd      	b.n	80222ba <__b2d+0x4a>
 80222fe:	4322      	orrs	r2, r4
 8022300:	0011      	movs	r1, r2
 8022302:	e7dc      	b.n	80222be <__b2d+0x4e>
 8022304:	3ff00000 	.word	0x3ff00000

08022308 <__d2b>:
 8022308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802230a:	2101      	movs	r1, #1
 802230c:	0016      	movs	r6, r2
 802230e:	001f      	movs	r7, r3
 8022310:	f7ff fbfe 	bl	8021b10 <_Balloc>
 8022314:	1e04      	subs	r4, r0, #0
 8022316:	d105      	bne.n	8022324 <__d2b+0x1c>
 8022318:	0022      	movs	r2, r4
 802231a:	4b25      	ldr	r3, [pc, #148]	@ (80223b0 <__d2b+0xa8>)
 802231c:	4825      	ldr	r0, [pc, #148]	@ (80223b4 <__d2b+0xac>)
 802231e:	4926      	ldr	r1, [pc, #152]	@ (80223b8 <__d2b+0xb0>)
 8022320:	f000 fcd6 	bl	8022cd0 <__assert_func>
 8022324:	033b      	lsls	r3, r7, #12
 8022326:	007d      	lsls	r5, r7, #1
 8022328:	0b1b      	lsrs	r3, r3, #12
 802232a:	0d6d      	lsrs	r5, r5, #21
 802232c:	d002      	beq.n	8022334 <__d2b+0x2c>
 802232e:	2280      	movs	r2, #128	@ 0x80
 8022330:	0352      	lsls	r2, r2, #13
 8022332:	4313      	orrs	r3, r2
 8022334:	9301      	str	r3, [sp, #4]
 8022336:	2e00      	cmp	r6, #0
 8022338:	d025      	beq.n	8022386 <__d2b+0x7e>
 802233a:	4668      	mov	r0, sp
 802233c:	9600      	str	r6, [sp, #0]
 802233e:	f7ff fd00 	bl	8021d42 <__lo0bits>
 8022342:	9b01      	ldr	r3, [sp, #4]
 8022344:	9900      	ldr	r1, [sp, #0]
 8022346:	2800      	cmp	r0, #0
 8022348:	d01b      	beq.n	8022382 <__d2b+0x7a>
 802234a:	2220      	movs	r2, #32
 802234c:	001e      	movs	r6, r3
 802234e:	1a12      	subs	r2, r2, r0
 8022350:	4096      	lsls	r6, r2
 8022352:	0032      	movs	r2, r6
 8022354:	40c3      	lsrs	r3, r0
 8022356:	430a      	orrs	r2, r1
 8022358:	6162      	str	r2, [r4, #20]
 802235a:	9301      	str	r3, [sp, #4]
 802235c:	9e01      	ldr	r6, [sp, #4]
 802235e:	61a6      	str	r6, [r4, #24]
 8022360:	1e73      	subs	r3, r6, #1
 8022362:	419e      	sbcs	r6, r3
 8022364:	3601      	adds	r6, #1
 8022366:	6126      	str	r6, [r4, #16]
 8022368:	2d00      	cmp	r5, #0
 802236a:	d014      	beq.n	8022396 <__d2b+0x8e>
 802236c:	2635      	movs	r6, #53	@ 0x35
 802236e:	4b13      	ldr	r3, [pc, #76]	@ (80223bc <__d2b+0xb4>)
 8022370:	18ed      	adds	r5, r5, r3
 8022372:	9b08      	ldr	r3, [sp, #32]
 8022374:	182d      	adds	r5, r5, r0
 8022376:	601d      	str	r5, [r3, #0]
 8022378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802237a:	1a36      	subs	r6, r6, r0
 802237c:	601e      	str	r6, [r3, #0]
 802237e:	0020      	movs	r0, r4
 8022380:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022382:	6161      	str	r1, [r4, #20]
 8022384:	e7ea      	b.n	802235c <__d2b+0x54>
 8022386:	a801      	add	r0, sp, #4
 8022388:	f7ff fcdb 	bl	8021d42 <__lo0bits>
 802238c:	9b01      	ldr	r3, [sp, #4]
 802238e:	2601      	movs	r6, #1
 8022390:	6163      	str	r3, [r4, #20]
 8022392:	3020      	adds	r0, #32
 8022394:	e7e7      	b.n	8022366 <__d2b+0x5e>
 8022396:	4b0a      	ldr	r3, [pc, #40]	@ (80223c0 <__d2b+0xb8>)
 8022398:	18c0      	adds	r0, r0, r3
 802239a:	9b08      	ldr	r3, [sp, #32]
 802239c:	6018      	str	r0, [r3, #0]
 802239e:	4b09      	ldr	r3, [pc, #36]	@ (80223c4 <__d2b+0xbc>)
 80223a0:	18f3      	adds	r3, r6, r3
 80223a2:	009b      	lsls	r3, r3, #2
 80223a4:	18e3      	adds	r3, r4, r3
 80223a6:	6958      	ldr	r0, [r3, #20]
 80223a8:	f7ff fcaa 	bl	8021d00 <__hi0bits>
 80223ac:	0176      	lsls	r6, r6, #5
 80223ae:	e7e3      	b.n	8022378 <__d2b+0x70>
 80223b0:	08025f61 	.word	0x08025f61
 80223b4:	08025fd2 	.word	0x08025fd2
 80223b8:	0000030f 	.word	0x0000030f
 80223bc:	fffffbcd 	.word	0xfffffbcd
 80223c0:	fffffbce 	.word	0xfffffbce
 80223c4:	3fffffff 	.word	0x3fffffff

080223c8 <__ratio>:
 80223c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223ca:	b087      	sub	sp, #28
 80223cc:	000f      	movs	r7, r1
 80223ce:	a904      	add	r1, sp, #16
 80223d0:	0006      	movs	r6, r0
 80223d2:	f7ff ff4d 	bl	8022270 <__b2d>
 80223d6:	9000      	str	r0, [sp, #0]
 80223d8:	9101      	str	r1, [sp, #4]
 80223da:	9b00      	ldr	r3, [sp, #0]
 80223dc:	9c01      	ldr	r4, [sp, #4]
 80223de:	0038      	movs	r0, r7
 80223e0:	a905      	add	r1, sp, #20
 80223e2:	9302      	str	r3, [sp, #8]
 80223e4:	9403      	str	r4, [sp, #12]
 80223e6:	f7ff ff43 	bl	8022270 <__b2d>
 80223ea:	000d      	movs	r5, r1
 80223ec:	0002      	movs	r2, r0
 80223ee:	000b      	movs	r3, r1
 80223f0:	6930      	ldr	r0, [r6, #16]
 80223f2:	6939      	ldr	r1, [r7, #16]
 80223f4:	9e04      	ldr	r6, [sp, #16]
 80223f6:	1a40      	subs	r0, r0, r1
 80223f8:	9905      	ldr	r1, [sp, #20]
 80223fa:	0140      	lsls	r0, r0, #5
 80223fc:	1a71      	subs	r1, r6, r1
 80223fe:	1841      	adds	r1, r0, r1
 8022400:	0508      	lsls	r0, r1, #20
 8022402:	2900      	cmp	r1, #0
 8022404:	dd08      	ble.n	8022418 <__ratio+0x50>
 8022406:	9901      	ldr	r1, [sp, #4]
 8022408:	1841      	adds	r1, r0, r1
 802240a:	9103      	str	r1, [sp, #12]
 802240c:	9802      	ldr	r0, [sp, #8]
 802240e:	9903      	ldr	r1, [sp, #12]
 8022410:	f7df fcd0 	bl	8001db4 <__aeabi_ddiv>
 8022414:	b007      	add	sp, #28
 8022416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022418:	1a2b      	subs	r3, r5, r0
 802241a:	e7f7      	b.n	802240c <__ratio+0x44>

0802241c <__copybits>:
 802241c:	b570      	push	{r4, r5, r6, lr}
 802241e:	0014      	movs	r4, r2
 8022420:	0005      	movs	r5, r0
 8022422:	3901      	subs	r1, #1
 8022424:	6913      	ldr	r3, [r2, #16]
 8022426:	1149      	asrs	r1, r1, #5
 8022428:	3101      	adds	r1, #1
 802242a:	0089      	lsls	r1, r1, #2
 802242c:	3414      	adds	r4, #20
 802242e:	009b      	lsls	r3, r3, #2
 8022430:	1841      	adds	r1, r0, r1
 8022432:	18e3      	adds	r3, r4, r3
 8022434:	42a3      	cmp	r3, r4
 8022436:	d80d      	bhi.n	8022454 <__copybits+0x38>
 8022438:	0014      	movs	r4, r2
 802243a:	3411      	adds	r4, #17
 802243c:	2500      	movs	r5, #0
 802243e:	429c      	cmp	r4, r3
 8022440:	d803      	bhi.n	802244a <__copybits+0x2e>
 8022442:	1a9b      	subs	r3, r3, r2
 8022444:	3b11      	subs	r3, #17
 8022446:	089b      	lsrs	r3, r3, #2
 8022448:	009d      	lsls	r5, r3, #2
 802244a:	2300      	movs	r3, #0
 802244c:	1940      	adds	r0, r0, r5
 802244e:	4281      	cmp	r1, r0
 8022450:	d803      	bhi.n	802245a <__copybits+0x3e>
 8022452:	bd70      	pop	{r4, r5, r6, pc}
 8022454:	cc40      	ldmia	r4!, {r6}
 8022456:	c540      	stmia	r5!, {r6}
 8022458:	e7ec      	b.n	8022434 <__copybits+0x18>
 802245a:	c008      	stmia	r0!, {r3}
 802245c:	e7f7      	b.n	802244e <__copybits+0x32>

0802245e <__any_on>:
 802245e:	0002      	movs	r2, r0
 8022460:	6900      	ldr	r0, [r0, #16]
 8022462:	b510      	push	{r4, lr}
 8022464:	3214      	adds	r2, #20
 8022466:	114b      	asrs	r3, r1, #5
 8022468:	4298      	cmp	r0, r3
 802246a:	db13      	blt.n	8022494 <__any_on+0x36>
 802246c:	dd0c      	ble.n	8022488 <__any_on+0x2a>
 802246e:	241f      	movs	r4, #31
 8022470:	0008      	movs	r0, r1
 8022472:	4020      	ands	r0, r4
 8022474:	4221      	tst	r1, r4
 8022476:	d007      	beq.n	8022488 <__any_on+0x2a>
 8022478:	0099      	lsls	r1, r3, #2
 802247a:	588c      	ldr	r4, [r1, r2]
 802247c:	0021      	movs	r1, r4
 802247e:	40c1      	lsrs	r1, r0
 8022480:	4081      	lsls	r1, r0
 8022482:	2001      	movs	r0, #1
 8022484:	428c      	cmp	r4, r1
 8022486:	d104      	bne.n	8022492 <__any_on+0x34>
 8022488:	009b      	lsls	r3, r3, #2
 802248a:	18d3      	adds	r3, r2, r3
 802248c:	4293      	cmp	r3, r2
 802248e:	d803      	bhi.n	8022498 <__any_on+0x3a>
 8022490:	2000      	movs	r0, #0
 8022492:	bd10      	pop	{r4, pc}
 8022494:	0003      	movs	r3, r0
 8022496:	e7f7      	b.n	8022488 <__any_on+0x2a>
 8022498:	3b04      	subs	r3, #4
 802249a:	6819      	ldr	r1, [r3, #0]
 802249c:	2900      	cmp	r1, #0
 802249e:	d0f5      	beq.n	802248c <__any_on+0x2e>
 80224a0:	2001      	movs	r0, #1
 80224a2:	e7f6      	b.n	8022492 <__any_on+0x34>

080224a4 <__ascii_wctomb>:
 80224a4:	0003      	movs	r3, r0
 80224a6:	1e08      	subs	r0, r1, #0
 80224a8:	d005      	beq.n	80224b6 <__ascii_wctomb+0x12>
 80224aa:	2aff      	cmp	r2, #255	@ 0xff
 80224ac:	d904      	bls.n	80224b8 <__ascii_wctomb+0x14>
 80224ae:	228a      	movs	r2, #138	@ 0x8a
 80224b0:	2001      	movs	r0, #1
 80224b2:	601a      	str	r2, [r3, #0]
 80224b4:	4240      	negs	r0, r0
 80224b6:	4770      	bx	lr
 80224b8:	2001      	movs	r0, #1
 80224ba:	700a      	strb	r2, [r1, #0]
 80224bc:	e7fb      	b.n	80224b6 <__ascii_wctomb+0x12>
	...

080224c0 <__ssputs_r>:
 80224c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224c2:	688e      	ldr	r6, [r1, #8]
 80224c4:	b085      	sub	sp, #20
 80224c6:	001f      	movs	r7, r3
 80224c8:	000c      	movs	r4, r1
 80224ca:	680b      	ldr	r3, [r1, #0]
 80224cc:	9002      	str	r0, [sp, #8]
 80224ce:	9203      	str	r2, [sp, #12]
 80224d0:	42be      	cmp	r6, r7
 80224d2:	d830      	bhi.n	8022536 <__ssputs_r+0x76>
 80224d4:	210c      	movs	r1, #12
 80224d6:	5e62      	ldrsh	r2, [r4, r1]
 80224d8:	2190      	movs	r1, #144	@ 0x90
 80224da:	00c9      	lsls	r1, r1, #3
 80224dc:	420a      	tst	r2, r1
 80224de:	d028      	beq.n	8022532 <__ssputs_r+0x72>
 80224e0:	2003      	movs	r0, #3
 80224e2:	6921      	ldr	r1, [r4, #16]
 80224e4:	1a5b      	subs	r3, r3, r1
 80224e6:	9301      	str	r3, [sp, #4]
 80224e8:	6963      	ldr	r3, [r4, #20]
 80224ea:	4343      	muls	r3, r0
 80224ec:	9801      	ldr	r0, [sp, #4]
 80224ee:	0fdd      	lsrs	r5, r3, #31
 80224f0:	18ed      	adds	r5, r5, r3
 80224f2:	1c7b      	adds	r3, r7, #1
 80224f4:	181b      	adds	r3, r3, r0
 80224f6:	106d      	asrs	r5, r5, #1
 80224f8:	42ab      	cmp	r3, r5
 80224fa:	d900      	bls.n	80224fe <__ssputs_r+0x3e>
 80224fc:	001d      	movs	r5, r3
 80224fe:	0552      	lsls	r2, r2, #21
 8022500:	d528      	bpl.n	8022554 <__ssputs_r+0x94>
 8022502:	0029      	movs	r1, r5
 8022504:	9802      	ldr	r0, [sp, #8]
 8022506:	f7ff fa61 	bl	80219cc <_malloc_r>
 802250a:	1e06      	subs	r6, r0, #0
 802250c:	d02c      	beq.n	8022568 <__ssputs_r+0xa8>
 802250e:	9a01      	ldr	r2, [sp, #4]
 8022510:	6921      	ldr	r1, [r4, #16]
 8022512:	f7fd fff9 	bl	8020508 <memcpy>
 8022516:	89a2      	ldrh	r2, [r4, #12]
 8022518:	4b18      	ldr	r3, [pc, #96]	@ (802257c <__ssputs_r+0xbc>)
 802251a:	401a      	ands	r2, r3
 802251c:	2380      	movs	r3, #128	@ 0x80
 802251e:	4313      	orrs	r3, r2
 8022520:	81a3      	strh	r3, [r4, #12]
 8022522:	9b01      	ldr	r3, [sp, #4]
 8022524:	6126      	str	r6, [r4, #16]
 8022526:	18f6      	adds	r6, r6, r3
 8022528:	6026      	str	r6, [r4, #0]
 802252a:	003e      	movs	r6, r7
 802252c:	6165      	str	r5, [r4, #20]
 802252e:	1aed      	subs	r5, r5, r3
 8022530:	60a5      	str	r5, [r4, #8]
 8022532:	42be      	cmp	r6, r7
 8022534:	d900      	bls.n	8022538 <__ssputs_r+0x78>
 8022536:	003e      	movs	r6, r7
 8022538:	0032      	movs	r2, r6
 802253a:	9903      	ldr	r1, [sp, #12]
 802253c:	6820      	ldr	r0, [r4, #0]
 802253e:	f000 fb7e 	bl	8022c3e <memmove>
 8022542:	2000      	movs	r0, #0
 8022544:	68a3      	ldr	r3, [r4, #8]
 8022546:	1b9b      	subs	r3, r3, r6
 8022548:	60a3      	str	r3, [r4, #8]
 802254a:	6823      	ldr	r3, [r4, #0]
 802254c:	199b      	adds	r3, r3, r6
 802254e:	6023      	str	r3, [r4, #0]
 8022550:	b005      	add	sp, #20
 8022552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022554:	002a      	movs	r2, r5
 8022556:	9802      	ldr	r0, [sp, #8]
 8022558:	f000 fc05 	bl	8022d66 <_realloc_r>
 802255c:	1e06      	subs	r6, r0, #0
 802255e:	d1e0      	bne.n	8022522 <__ssputs_r+0x62>
 8022560:	6921      	ldr	r1, [r4, #16]
 8022562:	9802      	ldr	r0, [sp, #8]
 8022564:	f7fe fe62 	bl	802122c <_free_r>
 8022568:	230c      	movs	r3, #12
 802256a:	2001      	movs	r0, #1
 802256c:	9a02      	ldr	r2, [sp, #8]
 802256e:	4240      	negs	r0, r0
 8022570:	6013      	str	r3, [r2, #0]
 8022572:	89a2      	ldrh	r2, [r4, #12]
 8022574:	3334      	adds	r3, #52	@ 0x34
 8022576:	4313      	orrs	r3, r2
 8022578:	81a3      	strh	r3, [r4, #12]
 802257a:	e7e9      	b.n	8022550 <__ssputs_r+0x90>
 802257c:	fffffb7f 	.word	0xfffffb7f

08022580 <_svfiprintf_r>:
 8022580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022582:	b0a1      	sub	sp, #132	@ 0x84
 8022584:	9003      	str	r0, [sp, #12]
 8022586:	001d      	movs	r5, r3
 8022588:	898b      	ldrh	r3, [r1, #12]
 802258a:	000f      	movs	r7, r1
 802258c:	0016      	movs	r6, r2
 802258e:	061b      	lsls	r3, r3, #24
 8022590:	d511      	bpl.n	80225b6 <_svfiprintf_r+0x36>
 8022592:	690b      	ldr	r3, [r1, #16]
 8022594:	2b00      	cmp	r3, #0
 8022596:	d10e      	bne.n	80225b6 <_svfiprintf_r+0x36>
 8022598:	2140      	movs	r1, #64	@ 0x40
 802259a:	f7ff fa17 	bl	80219cc <_malloc_r>
 802259e:	6038      	str	r0, [r7, #0]
 80225a0:	6138      	str	r0, [r7, #16]
 80225a2:	2800      	cmp	r0, #0
 80225a4:	d105      	bne.n	80225b2 <_svfiprintf_r+0x32>
 80225a6:	230c      	movs	r3, #12
 80225a8:	9a03      	ldr	r2, [sp, #12]
 80225aa:	6013      	str	r3, [r2, #0]
 80225ac:	2001      	movs	r0, #1
 80225ae:	4240      	negs	r0, r0
 80225b0:	e0cf      	b.n	8022752 <_svfiprintf_r+0x1d2>
 80225b2:	2340      	movs	r3, #64	@ 0x40
 80225b4:	617b      	str	r3, [r7, #20]
 80225b6:	2300      	movs	r3, #0
 80225b8:	ac08      	add	r4, sp, #32
 80225ba:	6163      	str	r3, [r4, #20]
 80225bc:	3320      	adds	r3, #32
 80225be:	7663      	strb	r3, [r4, #25]
 80225c0:	3310      	adds	r3, #16
 80225c2:	76a3      	strb	r3, [r4, #26]
 80225c4:	9507      	str	r5, [sp, #28]
 80225c6:	0035      	movs	r5, r6
 80225c8:	782b      	ldrb	r3, [r5, #0]
 80225ca:	2b00      	cmp	r3, #0
 80225cc:	d001      	beq.n	80225d2 <_svfiprintf_r+0x52>
 80225ce:	2b25      	cmp	r3, #37	@ 0x25
 80225d0:	d148      	bne.n	8022664 <_svfiprintf_r+0xe4>
 80225d2:	1bab      	subs	r3, r5, r6
 80225d4:	9305      	str	r3, [sp, #20]
 80225d6:	42b5      	cmp	r5, r6
 80225d8:	d00b      	beq.n	80225f2 <_svfiprintf_r+0x72>
 80225da:	0032      	movs	r2, r6
 80225dc:	0039      	movs	r1, r7
 80225de:	9803      	ldr	r0, [sp, #12]
 80225e0:	f7ff ff6e 	bl	80224c0 <__ssputs_r>
 80225e4:	3001      	adds	r0, #1
 80225e6:	d100      	bne.n	80225ea <_svfiprintf_r+0x6a>
 80225e8:	e0ae      	b.n	8022748 <_svfiprintf_r+0x1c8>
 80225ea:	6963      	ldr	r3, [r4, #20]
 80225ec:	9a05      	ldr	r2, [sp, #20]
 80225ee:	189b      	adds	r3, r3, r2
 80225f0:	6163      	str	r3, [r4, #20]
 80225f2:	782b      	ldrb	r3, [r5, #0]
 80225f4:	2b00      	cmp	r3, #0
 80225f6:	d100      	bne.n	80225fa <_svfiprintf_r+0x7a>
 80225f8:	e0a6      	b.n	8022748 <_svfiprintf_r+0x1c8>
 80225fa:	2201      	movs	r2, #1
 80225fc:	2300      	movs	r3, #0
 80225fe:	4252      	negs	r2, r2
 8022600:	6062      	str	r2, [r4, #4]
 8022602:	a904      	add	r1, sp, #16
 8022604:	3254      	adds	r2, #84	@ 0x54
 8022606:	1852      	adds	r2, r2, r1
 8022608:	1c6e      	adds	r6, r5, #1
 802260a:	6023      	str	r3, [r4, #0]
 802260c:	60e3      	str	r3, [r4, #12]
 802260e:	60a3      	str	r3, [r4, #8]
 8022610:	7013      	strb	r3, [r2, #0]
 8022612:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022614:	4b54      	ldr	r3, [pc, #336]	@ (8022768 <_svfiprintf_r+0x1e8>)
 8022616:	2205      	movs	r2, #5
 8022618:	0018      	movs	r0, r3
 802261a:	7831      	ldrb	r1, [r6, #0]
 802261c:	9305      	str	r3, [sp, #20]
 802261e:	f7fd ff68 	bl	80204f2 <memchr>
 8022622:	1c75      	adds	r5, r6, #1
 8022624:	2800      	cmp	r0, #0
 8022626:	d11f      	bne.n	8022668 <_svfiprintf_r+0xe8>
 8022628:	6822      	ldr	r2, [r4, #0]
 802262a:	06d3      	lsls	r3, r2, #27
 802262c:	d504      	bpl.n	8022638 <_svfiprintf_r+0xb8>
 802262e:	2353      	movs	r3, #83	@ 0x53
 8022630:	a904      	add	r1, sp, #16
 8022632:	185b      	adds	r3, r3, r1
 8022634:	2120      	movs	r1, #32
 8022636:	7019      	strb	r1, [r3, #0]
 8022638:	0713      	lsls	r3, r2, #28
 802263a:	d504      	bpl.n	8022646 <_svfiprintf_r+0xc6>
 802263c:	2353      	movs	r3, #83	@ 0x53
 802263e:	a904      	add	r1, sp, #16
 8022640:	185b      	adds	r3, r3, r1
 8022642:	212b      	movs	r1, #43	@ 0x2b
 8022644:	7019      	strb	r1, [r3, #0]
 8022646:	7833      	ldrb	r3, [r6, #0]
 8022648:	2b2a      	cmp	r3, #42	@ 0x2a
 802264a:	d016      	beq.n	802267a <_svfiprintf_r+0xfa>
 802264c:	0035      	movs	r5, r6
 802264e:	2100      	movs	r1, #0
 8022650:	200a      	movs	r0, #10
 8022652:	68e3      	ldr	r3, [r4, #12]
 8022654:	782a      	ldrb	r2, [r5, #0]
 8022656:	1c6e      	adds	r6, r5, #1
 8022658:	3a30      	subs	r2, #48	@ 0x30
 802265a:	2a09      	cmp	r2, #9
 802265c:	d950      	bls.n	8022700 <_svfiprintf_r+0x180>
 802265e:	2900      	cmp	r1, #0
 8022660:	d111      	bne.n	8022686 <_svfiprintf_r+0x106>
 8022662:	e017      	b.n	8022694 <_svfiprintf_r+0x114>
 8022664:	3501      	adds	r5, #1
 8022666:	e7af      	b.n	80225c8 <_svfiprintf_r+0x48>
 8022668:	9b05      	ldr	r3, [sp, #20]
 802266a:	6822      	ldr	r2, [r4, #0]
 802266c:	1ac0      	subs	r0, r0, r3
 802266e:	2301      	movs	r3, #1
 8022670:	4083      	lsls	r3, r0
 8022672:	4313      	orrs	r3, r2
 8022674:	002e      	movs	r6, r5
 8022676:	6023      	str	r3, [r4, #0]
 8022678:	e7cc      	b.n	8022614 <_svfiprintf_r+0x94>
 802267a:	9b07      	ldr	r3, [sp, #28]
 802267c:	1d19      	adds	r1, r3, #4
 802267e:	681b      	ldr	r3, [r3, #0]
 8022680:	9107      	str	r1, [sp, #28]
 8022682:	2b00      	cmp	r3, #0
 8022684:	db01      	blt.n	802268a <_svfiprintf_r+0x10a>
 8022686:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022688:	e004      	b.n	8022694 <_svfiprintf_r+0x114>
 802268a:	425b      	negs	r3, r3
 802268c:	60e3      	str	r3, [r4, #12]
 802268e:	2302      	movs	r3, #2
 8022690:	4313      	orrs	r3, r2
 8022692:	6023      	str	r3, [r4, #0]
 8022694:	782b      	ldrb	r3, [r5, #0]
 8022696:	2b2e      	cmp	r3, #46	@ 0x2e
 8022698:	d10c      	bne.n	80226b4 <_svfiprintf_r+0x134>
 802269a:	786b      	ldrb	r3, [r5, #1]
 802269c:	2b2a      	cmp	r3, #42	@ 0x2a
 802269e:	d134      	bne.n	802270a <_svfiprintf_r+0x18a>
 80226a0:	9b07      	ldr	r3, [sp, #28]
 80226a2:	3502      	adds	r5, #2
 80226a4:	1d1a      	adds	r2, r3, #4
 80226a6:	681b      	ldr	r3, [r3, #0]
 80226a8:	9207      	str	r2, [sp, #28]
 80226aa:	2b00      	cmp	r3, #0
 80226ac:	da01      	bge.n	80226b2 <_svfiprintf_r+0x132>
 80226ae:	2301      	movs	r3, #1
 80226b0:	425b      	negs	r3, r3
 80226b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80226b4:	4e2d      	ldr	r6, [pc, #180]	@ (802276c <_svfiprintf_r+0x1ec>)
 80226b6:	2203      	movs	r2, #3
 80226b8:	0030      	movs	r0, r6
 80226ba:	7829      	ldrb	r1, [r5, #0]
 80226bc:	f7fd ff19 	bl	80204f2 <memchr>
 80226c0:	2800      	cmp	r0, #0
 80226c2:	d006      	beq.n	80226d2 <_svfiprintf_r+0x152>
 80226c4:	2340      	movs	r3, #64	@ 0x40
 80226c6:	1b80      	subs	r0, r0, r6
 80226c8:	4083      	lsls	r3, r0
 80226ca:	6822      	ldr	r2, [r4, #0]
 80226cc:	3501      	adds	r5, #1
 80226ce:	4313      	orrs	r3, r2
 80226d0:	6023      	str	r3, [r4, #0]
 80226d2:	7829      	ldrb	r1, [r5, #0]
 80226d4:	2206      	movs	r2, #6
 80226d6:	4826      	ldr	r0, [pc, #152]	@ (8022770 <_svfiprintf_r+0x1f0>)
 80226d8:	1c6e      	adds	r6, r5, #1
 80226da:	7621      	strb	r1, [r4, #24]
 80226dc:	f7fd ff09 	bl	80204f2 <memchr>
 80226e0:	2800      	cmp	r0, #0
 80226e2:	d038      	beq.n	8022756 <_svfiprintf_r+0x1d6>
 80226e4:	4b23      	ldr	r3, [pc, #140]	@ (8022774 <_svfiprintf_r+0x1f4>)
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d122      	bne.n	8022730 <_svfiprintf_r+0x1b0>
 80226ea:	2207      	movs	r2, #7
 80226ec:	9b07      	ldr	r3, [sp, #28]
 80226ee:	3307      	adds	r3, #7
 80226f0:	4393      	bics	r3, r2
 80226f2:	3308      	adds	r3, #8
 80226f4:	9307      	str	r3, [sp, #28]
 80226f6:	6963      	ldr	r3, [r4, #20]
 80226f8:	9a04      	ldr	r2, [sp, #16]
 80226fa:	189b      	adds	r3, r3, r2
 80226fc:	6163      	str	r3, [r4, #20]
 80226fe:	e762      	b.n	80225c6 <_svfiprintf_r+0x46>
 8022700:	4343      	muls	r3, r0
 8022702:	0035      	movs	r5, r6
 8022704:	2101      	movs	r1, #1
 8022706:	189b      	adds	r3, r3, r2
 8022708:	e7a4      	b.n	8022654 <_svfiprintf_r+0xd4>
 802270a:	2300      	movs	r3, #0
 802270c:	200a      	movs	r0, #10
 802270e:	0019      	movs	r1, r3
 8022710:	3501      	adds	r5, #1
 8022712:	6063      	str	r3, [r4, #4]
 8022714:	782a      	ldrb	r2, [r5, #0]
 8022716:	1c6e      	adds	r6, r5, #1
 8022718:	3a30      	subs	r2, #48	@ 0x30
 802271a:	2a09      	cmp	r2, #9
 802271c:	d903      	bls.n	8022726 <_svfiprintf_r+0x1a6>
 802271e:	2b00      	cmp	r3, #0
 8022720:	d0c8      	beq.n	80226b4 <_svfiprintf_r+0x134>
 8022722:	9109      	str	r1, [sp, #36]	@ 0x24
 8022724:	e7c6      	b.n	80226b4 <_svfiprintf_r+0x134>
 8022726:	4341      	muls	r1, r0
 8022728:	0035      	movs	r5, r6
 802272a:	2301      	movs	r3, #1
 802272c:	1889      	adds	r1, r1, r2
 802272e:	e7f1      	b.n	8022714 <_svfiprintf_r+0x194>
 8022730:	aa07      	add	r2, sp, #28
 8022732:	9200      	str	r2, [sp, #0]
 8022734:	0021      	movs	r1, r4
 8022736:	003a      	movs	r2, r7
 8022738:	4b0f      	ldr	r3, [pc, #60]	@ (8022778 <_svfiprintf_r+0x1f8>)
 802273a:	9803      	ldr	r0, [sp, #12]
 802273c:	f7fc ffd4 	bl	801f6e8 <_printf_float>
 8022740:	9004      	str	r0, [sp, #16]
 8022742:	9b04      	ldr	r3, [sp, #16]
 8022744:	3301      	adds	r3, #1
 8022746:	d1d6      	bne.n	80226f6 <_svfiprintf_r+0x176>
 8022748:	89bb      	ldrh	r3, [r7, #12]
 802274a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802274c:	065b      	lsls	r3, r3, #25
 802274e:	d500      	bpl.n	8022752 <_svfiprintf_r+0x1d2>
 8022750:	e72c      	b.n	80225ac <_svfiprintf_r+0x2c>
 8022752:	b021      	add	sp, #132	@ 0x84
 8022754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022756:	aa07      	add	r2, sp, #28
 8022758:	9200      	str	r2, [sp, #0]
 802275a:	0021      	movs	r1, r4
 802275c:	003a      	movs	r2, r7
 802275e:	4b06      	ldr	r3, [pc, #24]	@ (8022778 <_svfiprintf_r+0x1f8>)
 8022760:	9803      	ldr	r0, [sp, #12]
 8022762:	f7fd fa6f 	bl	801fc44 <_printf_i>
 8022766:	e7eb      	b.n	8022740 <_svfiprintf_r+0x1c0>
 8022768:	08026128 	.word	0x08026128
 802276c:	0802612e 	.word	0x0802612e
 8022770:	08026132 	.word	0x08026132
 8022774:	0801f6e9 	.word	0x0801f6e9
 8022778:	080224c1 	.word	0x080224c1

0802277c <__sfputc_r>:
 802277c:	6893      	ldr	r3, [r2, #8]
 802277e:	b510      	push	{r4, lr}
 8022780:	3b01      	subs	r3, #1
 8022782:	6093      	str	r3, [r2, #8]
 8022784:	2b00      	cmp	r3, #0
 8022786:	da04      	bge.n	8022792 <__sfputc_r+0x16>
 8022788:	6994      	ldr	r4, [r2, #24]
 802278a:	42a3      	cmp	r3, r4
 802278c:	db07      	blt.n	802279e <__sfputc_r+0x22>
 802278e:	290a      	cmp	r1, #10
 8022790:	d005      	beq.n	802279e <__sfputc_r+0x22>
 8022792:	6813      	ldr	r3, [r2, #0]
 8022794:	1c58      	adds	r0, r3, #1
 8022796:	6010      	str	r0, [r2, #0]
 8022798:	7019      	strb	r1, [r3, #0]
 802279a:	0008      	movs	r0, r1
 802279c:	bd10      	pop	{r4, pc}
 802279e:	f7fd fd37 	bl	8020210 <__swbuf_r>
 80227a2:	0001      	movs	r1, r0
 80227a4:	e7f9      	b.n	802279a <__sfputc_r+0x1e>

080227a6 <__sfputs_r>:
 80227a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227a8:	0006      	movs	r6, r0
 80227aa:	000f      	movs	r7, r1
 80227ac:	0014      	movs	r4, r2
 80227ae:	18d5      	adds	r5, r2, r3
 80227b0:	42ac      	cmp	r4, r5
 80227b2:	d101      	bne.n	80227b8 <__sfputs_r+0x12>
 80227b4:	2000      	movs	r0, #0
 80227b6:	e007      	b.n	80227c8 <__sfputs_r+0x22>
 80227b8:	7821      	ldrb	r1, [r4, #0]
 80227ba:	003a      	movs	r2, r7
 80227bc:	0030      	movs	r0, r6
 80227be:	f7ff ffdd 	bl	802277c <__sfputc_r>
 80227c2:	3401      	adds	r4, #1
 80227c4:	1c43      	adds	r3, r0, #1
 80227c6:	d1f3      	bne.n	80227b0 <__sfputs_r+0xa>
 80227c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080227cc <_vfiprintf_r>:
 80227cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80227ce:	b0a1      	sub	sp, #132	@ 0x84
 80227d0:	000f      	movs	r7, r1
 80227d2:	0015      	movs	r5, r2
 80227d4:	001e      	movs	r6, r3
 80227d6:	9003      	str	r0, [sp, #12]
 80227d8:	2800      	cmp	r0, #0
 80227da:	d004      	beq.n	80227e6 <_vfiprintf_r+0x1a>
 80227dc:	6a03      	ldr	r3, [r0, #32]
 80227de:	2b00      	cmp	r3, #0
 80227e0:	d101      	bne.n	80227e6 <_vfiprintf_r+0x1a>
 80227e2:	f7fd fbcd 	bl	801ff80 <__sinit>
 80227e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80227e8:	07db      	lsls	r3, r3, #31
 80227ea:	d405      	bmi.n	80227f8 <_vfiprintf_r+0x2c>
 80227ec:	89bb      	ldrh	r3, [r7, #12]
 80227ee:	059b      	lsls	r3, r3, #22
 80227f0:	d402      	bmi.n	80227f8 <_vfiprintf_r+0x2c>
 80227f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80227f4:	f7fd fe7b 	bl	80204ee <__retarget_lock_acquire_recursive>
 80227f8:	89bb      	ldrh	r3, [r7, #12]
 80227fa:	071b      	lsls	r3, r3, #28
 80227fc:	d502      	bpl.n	8022804 <_vfiprintf_r+0x38>
 80227fe:	693b      	ldr	r3, [r7, #16]
 8022800:	2b00      	cmp	r3, #0
 8022802:	d113      	bne.n	802282c <_vfiprintf_r+0x60>
 8022804:	0039      	movs	r1, r7
 8022806:	9803      	ldr	r0, [sp, #12]
 8022808:	f7fd fd44 	bl	8020294 <__swsetup_r>
 802280c:	2800      	cmp	r0, #0
 802280e:	d00d      	beq.n	802282c <_vfiprintf_r+0x60>
 8022810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022812:	07db      	lsls	r3, r3, #31
 8022814:	d503      	bpl.n	802281e <_vfiprintf_r+0x52>
 8022816:	2001      	movs	r0, #1
 8022818:	4240      	negs	r0, r0
 802281a:	b021      	add	sp, #132	@ 0x84
 802281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802281e:	89bb      	ldrh	r3, [r7, #12]
 8022820:	059b      	lsls	r3, r3, #22
 8022822:	d4f8      	bmi.n	8022816 <_vfiprintf_r+0x4a>
 8022824:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022826:	f7fd fe63 	bl	80204f0 <__retarget_lock_release_recursive>
 802282a:	e7f4      	b.n	8022816 <_vfiprintf_r+0x4a>
 802282c:	2300      	movs	r3, #0
 802282e:	ac08      	add	r4, sp, #32
 8022830:	6163      	str	r3, [r4, #20]
 8022832:	3320      	adds	r3, #32
 8022834:	7663      	strb	r3, [r4, #25]
 8022836:	3310      	adds	r3, #16
 8022838:	76a3      	strb	r3, [r4, #26]
 802283a:	9607      	str	r6, [sp, #28]
 802283c:	002e      	movs	r6, r5
 802283e:	7833      	ldrb	r3, [r6, #0]
 8022840:	2b00      	cmp	r3, #0
 8022842:	d001      	beq.n	8022848 <_vfiprintf_r+0x7c>
 8022844:	2b25      	cmp	r3, #37	@ 0x25
 8022846:	d148      	bne.n	80228da <_vfiprintf_r+0x10e>
 8022848:	1b73      	subs	r3, r6, r5
 802284a:	9305      	str	r3, [sp, #20]
 802284c:	42ae      	cmp	r6, r5
 802284e:	d00b      	beq.n	8022868 <_vfiprintf_r+0x9c>
 8022850:	002a      	movs	r2, r5
 8022852:	0039      	movs	r1, r7
 8022854:	9803      	ldr	r0, [sp, #12]
 8022856:	f7ff ffa6 	bl	80227a6 <__sfputs_r>
 802285a:	3001      	adds	r0, #1
 802285c:	d100      	bne.n	8022860 <_vfiprintf_r+0x94>
 802285e:	e0ae      	b.n	80229be <_vfiprintf_r+0x1f2>
 8022860:	6963      	ldr	r3, [r4, #20]
 8022862:	9a05      	ldr	r2, [sp, #20]
 8022864:	189b      	adds	r3, r3, r2
 8022866:	6163      	str	r3, [r4, #20]
 8022868:	7833      	ldrb	r3, [r6, #0]
 802286a:	2b00      	cmp	r3, #0
 802286c:	d100      	bne.n	8022870 <_vfiprintf_r+0xa4>
 802286e:	e0a6      	b.n	80229be <_vfiprintf_r+0x1f2>
 8022870:	2201      	movs	r2, #1
 8022872:	2300      	movs	r3, #0
 8022874:	4252      	negs	r2, r2
 8022876:	6062      	str	r2, [r4, #4]
 8022878:	a904      	add	r1, sp, #16
 802287a:	3254      	adds	r2, #84	@ 0x54
 802287c:	1852      	adds	r2, r2, r1
 802287e:	1c75      	adds	r5, r6, #1
 8022880:	6023      	str	r3, [r4, #0]
 8022882:	60e3      	str	r3, [r4, #12]
 8022884:	60a3      	str	r3, [r4, #8]
 8022886:	7013      	strb	r3, [r2, #0]
 8022888:	65a3      	str	r3, [r4, #88]	@ 0x58
 802288a:	4b59      	ldr	r3, [pc, #356]	@ (80229f0 <_vfiprintf_r+0x224>)
 802288c:	2205      	movs	r2, #5
 802288e:	0018      	movs	r0, r3
 8022890:	7829      	ldrb	r1, [r5, #0]
 8022892:	9305      	str	r3, [sp, #20]
 8022894:	f7fd fe2d 	bl	80204f2 <memchr>
 8022898:	1c6e      	adds	r6, r5, #1
 802289a:	2800      	cmp	r0, #0
 802289c:	d11f      	bne.n	80228de <_vfiprintf_r+0x112>
 802289e:	6822      	ldr	r2, [r4, #0]
 80228a0:	06d3      	lsls	r3, r2, #27
 80228a2:	d504      	bpl.n	80228ae <_vfiprintf_r+0xe2>
 80228a4:	2353      	movs	r3, #83	@ 0x53
 80228a6:	a904      	add	r1, sp, #16
 80228a8:	185b      	adds	r3, r3, r1
 80228aa:	2120      	movs	r1, #32
 80228ac:	7019      	strb	r1, [r3, #0]
 80228ae:	0713      	lsls	r3, r2, #28
 80228b0:	d504      	bpl.n	80228bc <_vfiprintf_r+0xf0>
 80228b2:	2353      	movs	r3, #83	@ 0x53
 80228b4:	a904      	add	r1, sp, #16
 80228b6:	185b      	adds	r3, r3, r1
 80228b8:	212b      	movs	r1, #43	@ 0x2b
 80228ba:	7019      	strb	r1, [r3, #0]
 80228bc:	782b      	ldrb	r3, [r5, #0]
 80228be:	2b2a      	cmp	r3, #42	@ 0x2a
 80228c0:	d016      	beq.n	80228f0 <_vfiprintf_r+0x124>
 80228c2:	002e      	movs	r6, r5
 80228c4:	2100      	movs	r1, #0
 80228c6:	200a      	movs	r0, #10
 80228c8:	68e3      	ldr	r3, [r4, #12]
 80228ca:	7832      	ldrb	r2, [r6, #0]
 80228cc:	1c75      	adds	r5, r6, #1
 80228ce:	3a30      	subs	r2, #48	@ 0x30
 80228d0:	2a09      	cmp	r2, #9
 80228d2:	d950      	bls.n	8022976 <_vfiprintf_r+0x1aa>
 80228d4:	2900      	cmp	r1, #0
 80228d6:	d111      	bne.n	80228fc <_vfiprintf_r+0x130>
 80228d8:	e017      	b.n	802290a <_vfiprintf_r+0x13e>
 80228da:	3601      	adds	r6, #1
 80228dc:	e7af      	b.n	802283e <_vfiprintf_r+0x72>
 80228de:	9b05      	ldr	r3, [sp, #20]
 80228e0:	6822      	ldr	r2, [r4, #0]
 80228e2:	1ac0      	subs	r0, r0, r3
 80228e4:	2301      	movs	r3, #1
 80228e6:	4083      	lsls	r3, r0
 80228e8:	4313      	orrs	r3, r2
 80228ea:	0035      	movs	r5, r6
 80228ec:	6023      	str	r3, [r4, #0]
 80228ee:	e7cc      	b.n	802288a <_vfiprintf_r+0xbe>
 80228f0:	9b07      	ldr	r3, [sp, #28]
 80228f2:	1d19      	adds	r1, r3, #4
 80228f4:	681b      	ldr	r3, [r3, #0]
 80228f6:	9107      	str	r1, [sp, #28]
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	db01      	blt.n	8022900 <_vfiprintf_r+0x134>
 80228fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80228fe:	e004      	b.n	802290a <_vfiprintf_r+0x13e>
 8022900:	425b      	negs	r3, r3
 8022902:	60e3      	str	r3, [r4, #12]
 8022904:	2302      	movs	r3, #2
 8022906:	4313      	orrs	r3, r2
 8022908:	6023      	str	r3, [r4, #0]
 802290a:	7833      	ldrb	r3, [r6, #0]
 802290c:	2b2e      	cmp	r3, #46	@ 0x2e
 802290e:	d10c      	bne.n	802292a <_vfiprintf_r+0x15e>
 8022910:	7873      	ldrb	r3, [r6, #1]
 8022912:	2b2a      	cmp	r3, #42	@ 0x2a
 8022914:	d134      	bne.n	8022980 <_vfiprintf_r+0x1b4>
 8022916:	9b07      	ldr	r3, [sp, #28]
 8022918:	3602      	adds	r6, #2
 802291a:	1d1a      	adds	r2, r3, #4
 802291c:	681b      	ldr	r3, [r3, #0]
 802291e:	9207      	str	r2, [sp, #28]
 8022920:	2b00      	cmp	r3, #0
 8022922:	da01      	bge.n	8022928 <_vfiprintf_r+0x15c>
 8022924:	2301      	movs	r3, #1
 8022926:	425b      	negs	r3, r3
 8022928:	9309      	str	r3, [sp, #36]	@ 0x24
 802292a:	4d32      	ldr	r5, [pc, #200]	@ (80229f4 <_vfiprintf_r+0x228>)
 802292c:	2203      	movs	r2, #3
 802292e:	0028      	movs	r0, r5
 8022930:	7831      	ldrb	r1, [r6, #0]
 8022932:	f7fd fdde 	bl	80204f2 <memchr>
 8022936:	2800      	cmp	r0, #0
 8022938:	d006      	beq.n	8022948 <_vfiprintf_r+0x17c>
 802293a:	2340      	movs	r3, #64	@ 0x40
 802293c:	1b40      	subs	r0, r0, r5
 802293e:	4083      	lsls	r3, r0
 8022940:	6822      	ldr	r2, [r4, #0]
 8022942:	3601      	adds	r6, #1
 8022944:	4313      	orrs	r3, r2
 8022946:	6023      	str	r3, [r4, #0]
 8022948:	7831      	ldrb	r1, [r6, #0]
 802294a:	2206      	movs	r2, #6
 802294c:	482a      	ldr	r0, [pc, #168]	@ (80229f8 <_vfiprintf_r+0x22c>)
 802294e:	1c75      	adds	r5, r6, #1
 8022950:	7621      	strb	r1, [r4, #24]
 8022952:	f7fd fdce 	bl	80204f2 <memchr>
 8022956:	2800      	cmp	r0, #0
 8022958:	d040      	beq.n	80229dc <_vfiprintf_r+0x210>
 802295a:	4b28      	ldr	r3, [pc, #160]	@ (80229fc <_vfiprintf_r+0x230>)
 802295c:	2b00      	cmp	r3, #0
 802295e:	d122      	bne.n	80229a6 <_vfiprintf_r+0x1da>
 8022960:	2207      	movs	r2, #7
 8022962:	9b07      	ldr	r3, [sp, #28]
 8022964:	3307      	adds	r3, #7
 8022966:	4393      	bics	r3, r2
 8022968:	3308      	adds	r3, #8
 802296a:	9307      	str	r3, [sp, #28]
 802296c:	6963      	ldr	r3, [r4, #20]
 802296e:	9a04      	ldr	r2, [sp, #16]
 8022970:	189b      	adds	r3, r3, r2
 8022972:	6163      	str	r3, [r4, #20]
 8022974:	e762      	b.n	802283c <_vfiprintf_r+0x70>
 8022976:	4343      	muls	r3, r0
 8022978:	002e      	movs	r6, r5
 802297a:	2101      	movs	r1, #1
 802297c:	189b      	adds	r3, r3, r2
 802297e:	e7a4      	b.n	80228ca <_vfiprintf_r+0xfe>
 8022980:	2300      	movs	r3, #0
 8022982:	200a      	movs	r0, #10
 8022984:	0019      	movs	r1, r3
 8022986:	3601      	adds	r6, #1
 8022988:	6063      	str	r3, [r4, #4]
 802298a:	7832      	ldrb	r2, [r6, #0]
 802298c:	1c75      	adds	r5, r6, #1
 802298e:	3a30      	subs	r2, #48	@ 0x30
 8022990:	2a09      	cmp	r2, #9
 8022992:	d903      	bls.n	802299c <_vfiprintf_r+0x1d0>
 8022994:	2b00      	cmp	r3, #0
 8022996:	d0c8      	beq.n	802292a <_vfiprintf_r+0x15e>
 8022998:	9109      	str	r1, [sp, #36]	@ 0x24
 802299a:	e7c6      	b.n	802292a <_vfiprintf_r+0x15e>
 802299c:	4341      	muls	r1, r0
 802299e:	002e      	movs	r6, r5
 80229a0:	2301      	movs	r3, #1
 80229a2:	1889      	adds	r1, r1, r2
 80229a4:	e7f1      	b.n	802298a <_vfiprintf_r+0x1be>
 80229a6:	aa07      	add	r2, sp, #28
 80229a8:	9200      	str	r2, [sp, #0]
 80229aa:	0021      	movs	r1, r4
 80229ac:	003a      	movs	r2, r7
 80229ae:	4b14      	ldr	r3, [pc, #80]	@ (8022a00 <_vfiprintf_r+0x234>)
 80229b0:	9803      	ldr	r0, [sp, #12]
 80229b2:	f7fc fe99 	bl	801f6e8 <_printf_float>
 80229b6:	9004      	str	r0, [sp, #16]
 80229b8:	9b04      	ldr	r3, [sp, #16]
 80229ba:	3301      	adds	r3, #1
 80229bc:	d1d6      	bne.n	802296c <_vfiprintf_r+0x1a0>
 80229be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80229c0:	07db      	lsls	r3, r3, #31
 80229c2:	d405      	bmi.n	80229d0 <_vfiprintf_r+0x204>
 80229c4:	89bb      	ldrh	r3, [r7, #12]
 80229c6:	059b      	lsls	r3, r3, #22
 80229c8:	d402      	bmi.n	80229d0 <_vfiprintf_r+0x204>
 80229ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80229cc:	f7fd fd90 	bl	80204f0 <__retarget_lock_release_recursive>
 80229d0:	89bb      	ldrh	r3, [r7, #12]
 80229d2:	065b      	lsls	r3, r3, #25
 80229d4:	d500      	bpl.n	80229d8 <_vfiprintf_r+0x20c>
 80229d6:	e71e      	b.n	8022816 <_vfiprintf_r+0x4a>
 80229d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80229da:	e71e      	b.n	802281a <_vfiprintf_r+0x4e>
 80229dc:	aa07      	add	r2, sp, #28
 80229de:	9200      	str	r2, [sp, #0]
 80229e0:	0021      	movs	r1, r4
 80229e2:	003a      	movs	r2, r7
 80229e4:	4b06      	ldr	r3, [pc, #24]	@ (8022a00 <_vfiprintf_r+0x234>)
 80229e6:	9803      	ldr	r0, [sp, #12]
 80229e8:	f7fd f92c 	bl	801fc44 <_printf_i>
 80229ec:	e7e3      	b.n	80229b6 <_vfiprintf_r+0x1ea>
 80229ee:	46c0      	nop			@ (mov r8, r8)
 80229f0:	08026128 	.word	0x08026128
 80229f4:	0802612e 	.word	0x0802612e
 80229f8:	08026132 	.word	0x08026132
 80229fc:	0801f6e9 	.word	0x0801f6e9
 8022a00:	080227a7 	.word	0x080227a7

08022a04 <__sflush_r>:
 8022a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022a06:	220c      	movs	r2, #12
 8022a08:	5e8b      	ldrsh	r3, [r1, r2]
 8022a0a:	0005      	movs	r5, r0
 8022a0c:	000c      	movs	r4, r1
 8022a0e:	071a      	lsls	r2, r3, #28
 8022a10:	d456      	bmi.n	8022ac0 <__sflush_r+0xbc>
 8022a12:	684a      	ldr	r2, [r1, #4]
 8022a14:	2a00      	cmp	r2, #0
 8022a16:	dc02      	bgt.n	8022a1e <__sflush_r+0x1a>
 8022a18:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8022a1a:	2a00      	cmp	r2, #0
 8022a1c:	dd4e      	ble.n	8022abc <__sflush_r+0xb8>
 8022a1e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022a20:	2f00      	cmp	r7, #0
 8022a22:	d04b      	beq.n	8022abc <__sflush_r+0xb8>
 8022a24:	2200      	movs	r2, #0
 8022a26:	2080      	movs	r0, #128	@ 0x80
 8022a28:	682e      	ldr	r6, [r5, #0]
 8022a2a:	602a      	str	r2, [r5, #0]
 8022a2c:	001a      	movs	r2, r3
 8022a2e:	0140      	lsls	r0, r0, #5
 8022a30:	6a21      	ldr	r1, [r4, #32]
 8022a32:	4002      	ands	r2, r0
 8022a34:	4203      	tst	r3, r0
 8022a36:	d033      	beq.n	8022aa0 <__sflush_r+0x9c>
 8022a38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022a3a:	89a3      	ldrh	r3, [r4, #12]
 8022a3c:	075b      	lsls	r3, r3, #29
 8022a3e:	d506      	bpl.n	8022a4e <__sflush_r+0x4a>
 8022a40:	6863      	ldr	r3, [r4, #4]
 8022a42:	1ad2      	subs	r2, r2, r3
 8022a44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022a46:	2b00      	cmp	r3, #0
 8022a48:	d001      	beq.n	8022a4e <__sflush_r+0x4a>
 8022a4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022a4c:	1ad2      	subs	r2, r2, r3
 8022a4e:	2300      	movs	r3, #0
 8022a50:	0028      	movs	r0, r5
 8022a52:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022a54:	6a21      	ldr	r1, [r4, #32]
 8022a56:	47b8      	blx	r7
 8022a58:	89a2      	ldrh	r2, [r4, #12]
 8022a5a:	1c43      	adds	r3, r0, #1
 8022a5c:	d106      	bne.n	8022a6c <__sflush_r+0x68>
 8022a5e:	6829      	ldr	r1, [r5, #0]
 8022a60:	291d      	cmp	r1, #29
 8022a62:	d846      	bhi.n	8022af2 <__sflush_r+0xee>
 8022a64:	4b29      	ldr	r3, [pc, #164]	@ (8022b0c <__sflush_r+0x108>)
 8022a66:	410b      	asrs	r3, r1
 8022a68:	07db      	lsls	r3, r3, #31
 8022a6a:	d442      	bmi.n	8022af2 <__sflush_r+0xee>
 8022a6c:	2300      	movs	r3, #0
 8022a6e:	6063      	str	r3, [r4, #4]
 8022a70:	6923      	ldr	r3, [r4, #16]
 8022a72:	6023      	str	r3, [r4, #0]
 8022a74:	04d2      	lsls	r2, r2, #19
 8022a76:	d505      	bpl.n	8022a84 <__sflush_r+0x80>
 8022a78:	1c43      	adds	r3, r0, #1
 8022a7a:	d102      	bne.n	8022a82 <__sflush_r+0x7e>
 8022a7c:	682b      	ldr	r3, [r5, #0]
 8022a7e:	2b00      	cmp	r3, #0
 8022a80:	d100      	bne.n	8022a84 <__sflush_r+0x80>
 8022a82:	6560      	str	r0, [r4, #84]	@ 0x54
 8022a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022a86:	602e      	str	r6, [r5, #0]
 8022a88:	2900      	cmp	r1, #0
 8022a8a:	d017      	beq.n	8022abc <__sflush_r+0xb8>
 8022a8c:	0023      	movs	r3, r4
 8022a8e:	3344      	adds	r3, #68	@ 0x44
 8022a90:	4299      	cmp	r1, r3
 8022a92:	d002      	beq.n	8022a9a <__sflush_r+0x96>
 8022a94:	0028      	movs	r0, r5
 8022a96:	f7fe fbc9 	bl	802122c <_free_r>
 8022a9a:	2300      	movs	r3, #0
 8022a9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8022a9e:	e00d      	b.n	8022abc <__sflush_r+0xb8>
 8022aa0:	2301      	movs	r3, #1
 8022aa2:	0028      	movs	r0, r5
 8022aa4:	47b8      	blx	r7
 8022aa6:	0002      	movs	r2, r0
 8022aa8:	1c43      	adds	r3, r0, #1
 8022aaa:	d1c6      	bne.n	8022a3a <__sflush_r+0x36>
 8022aac:	682b      	ldr	r3, [r5, #0]
 8022aae:	2b00      	cmp	r3, #0
 8022ab0:	d0c3      	beq.n	8022a3a <__sflush_r+0x36>
 8022ab2:	2b1d      	cmp	r3, #29
 8022ab4:	d001      	beq.n	8022aba <__sflush_r+0xb6>
 8022ab6:	2b16      	cmp	r3, #22
 8022ab8:	d11a      	bne.n	8022af0 <__sflush_r+0xec>
 8022aba:	602e      	str	r6, [r5, #0]
 8022abc:	2000      	movs	r0, #0
 8022abe:	e01e      	b.n	8022afe <__sflush_r+0xfa>
 8022ac0:	690e      	ldr	r6, [r1, #16]
 8022ac2:	2e00      	cmp	r6, #0
 8022ac4:	d0fa      	beq.n	8022abc <__sflush_r+0xb8>
 8022ac6:	680f      	ldr	r7, [r1, #0]
 8022ac8:	600e      	str	r6, [r1, #0]
 8022aca:	1bba      	subs	r2, r7, r6
 8022acc:	9201      	str	r2, [sp, #4]
 8022ace:	2200      	movs	r2, #0
 8022ad0:	079b      	lsls	r3, r3, #30
 8022ad2:	d100      	bne.n	8022ad6 <__sflush_r+0xd2>
 8022ad4:	694a      	ldr	r2, [r1, #20]
 8022ad6:	60a2      	str	r2, [r4, #8]
 8022ad8:	9b01      	ldr	r3, [sp, #4]
 8022ada:	2b00      	cmp	r3, #0
 8022adc:	ddee      	ble.n	8022abc <__sflush_r+0xb8>
 8022ade:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022ae0:	0032      	movs	r2, r6
 8022ae2:	001f      	movs	r7, r3
 8022ae4:	0028      	movs	r0, r5
 8022ae6:	9b01      	ldr	r3, [sp, #4]
 8022ae8:	6a21      	ldr	r1, [r4, #32]
 8022aea:	47b8      	blx	r7
 8022aec:	2800      	cmp	r0, #0
 8022aee:	dc07      	bgt.n	8022b00 <__sflush_r+0xfc>
 8022af0:	89a2      	ldrh	r2, [r4, #12]
 8022af2:	2340      	movs	r3, #64	@ 0x40
 8022af4:	2001      	movs	r0, #1
 8022af6:	4313      	orrs	r3, r2
 8022af8:	b21b      	sxth	r3, r3
 8022afa:	81a3      	strh	r3, [r4, #12]
 8022afc:	4240      	negs	r0, r0
 8022afe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022b00:	9b01      	ldr	r3, [sp, #4]
 8022b02:	1836      	adds	r6, r6, r0
 8022b04:	1a1b      	subs	r3, r3, r0
 8022b06:	9301      	str	r3, [sp, #4]
 8022b08:	e7e6      	b.n	8022ad8 <__sflush_r+0xd4>
 8022b0a:	46c0      	nop			@ (mov r8, r8)
 8022b0c:	dfbffffe 	.word	0xdfbffffe

08022b10 <_fflush_r>:
 8022b10:	690b      	ldr	r3, [r1, #16]
 8022b12:	b570      	push	{r4, r5, r6, lr}
 8022b14:	0005      	movs	r5, r0
 8022b16:	000c      	movs	r4, r1
 8022b18:	2b00      	cmp	r3, #0
 8022b1a:	d102      	bne.n	8022b22 <_fflush_r+0x12>
 8022b1c:	2500      	movs	r5, #0
 8022b1e:	0028      	movs	r0, r5
 8022b20:	bd70      	pop	{r4, r5, r6, pc}
 8022b22:	2800      	cmp	r0, #0
 8022b24:	d004      	beq.n	8022b30 <_fflush_r+0x20>
 8022b26:	6a03      	ldr	r3, [r0, #32]
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d101      	bne.n	8022b30 <_fflush_r+0x20>
 8022b2c:	f7fd fa28 	bl	801ff80 <__sinit>
 8022b30:	220c      	movs	r2, #12
 8022b32:	5ea3      	ldrsh	r3, [r4, r2]
 8022b34:	2b00      	cmp	r3, #0
 8022b36:	d0f1      	beq.n	8022b1c <_fflush_r+0xc>
 8022b38:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022b3a:	07d2      	lsls	r2, r2, #31
 8022b3c:	d404      	bmi.n	8022b48 <_fflush_r+0x38>
 8022b3e:	059b      	lsls	r3, r3, #22
 8022b40:	d402      	bmi.n	8022b48 <_fflush_r+0x38>
 8022b42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022b44:	f7fd fcd3 	bl	80204ee <__retarget_lock_acquire_recursive>
 8022b48:	0028      	movs	r0, r5
 8022b4a:	0021      	movs	r1, r4
 8022b4c:	f7ff ff5a 	bl	8022a04 <__sflush_r>
 8022b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022b52:	0005      	movs	r5, r0
 8022b54:	07db      	lsls	r3, r3, #31
 8022b56:	d4e2      	bmi.n	8022b1e <_fflush_r+0xe>
 8022b58:	89a3      	ldrh	r3, [r4, #12]
 8022b5a:	059b      	lsls	r3, r3, #22
 8022b5c:	d4df      	bmi.n	8022b1e <_fflush_r+0xe>
 8022b5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022b60:	f7fd fcc6 	bl	80204f0 <__retarget_lock_release_recursive>
 8022b64:	e7db      	b.n	8022b1e <_fflush_r+0xe>
	...

08022b68 <__swhatbuf_r>:
 8022b68:	b570      	push	{r4, r5, r6, lr}
 8022b6a:	000e      	movs	r6, r1
 8022b6c:	001d      	movs	r5, r3
 8022b6e:	230e      	movs	r3, #14
 8022b70:	5ec9      	ldrsh	r1, [r1, r3]
 8022b72:	0014      	movs	r4, r2
 8022b74:	b096      	sub	sp, #88	@ 0x58
 8022b76:	2900      	cmp	r1, #0
 8022b78:	da0c      	bge.n	8022b94 <__swhatbuf_r+0x2c>
 8022b7a:	89b2      	ldrh	r2, [r6, #12]
 8022b7c:	2380      	movs	r3, #128	@ 0x80
 8022b7e:	0011      	movs	r1, r2
 8022b80:	4019      	ands	r1, r3
 8022b82:	421a      	tst	r2, r3
 8022b84:	d114      	bne.n	8022bb0 <__swhatbuf_r+0x48>
 8022b86:	2380      	movs	r3, #128	@ 0x80
 8022b88:	00db      	lsls	r3, r3, #3
 8022b8a:	2000      	movs	r0, #0
 8022b8c:	6029      	str	r1, [r5, #0]
 8022b8e:	6023      	str	r3, [r4, #0]
 8022b90:	b016      	add	sp, #88	@ 0x58
 8022b92:	bd70      	pop	{r4, r5, r6, pc}
 8022b94:	466a      	mov	r2, sp
 8022b96:	f000 f865 	bl	8022c64 <_fstat_r>
 8022b9a:	2800      	cmp	r0, #0
 8022b9c:	dbed      	blt.n	8022b7a <__swhatbuf_r+0x12>
 8022b9e:	23f0      	movs	r3, #240	@ 0xf0
 8022ba0:	9901      	ldr	r1, [sp, #4]
 8022ba2:	021b      	lsls	r3, r3, #8
 8022ba4:	4019      	ands	r1, r3
 8022ba6:	4b04      	ldr	r3, [pc, #16]	@ (8022bb8 <__swhatbuf_r+0x50>)
 8022ba8:	18c9      	adds	r1, r1, r3
 8022baa:	424b      	negs	r3, r1
 8022bac:	4159      	adcs	r1, r3
 8022bae:	e7ea      	b.n	8022b86 <__swhatbuf_r+0x1e>
 8022bb0:	2100      	movs	r1, #0
 8022bb2:	2340      	movs	r3, #64	@ 0x40
 8022bb4:	e7e9      	b.n	8022b8a <__swhatbuf_r+0x22>
 8022bb6:	46c0      	nop			@ (mov r8, r8)
 8022bb8:	ffffe000 	.word	0xffffe000

08022bbc <__smakebuf_r>:
 8022bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022bbe:	2602      	movs	r6, #2
 8022bc0:	898b      	ldrh	r3, [r1, #12]
 8022bc2:	0005      	movs	r5, r0
 8022bc4:	000c      	movs	r4, r1
 8022bc6:	b085      	sub	sp, #20
 8022bc8:	4233      	tst	r3, r6
 8022bca:	d007      	beq.n	8022bdc <__smakebuf_r+0x20>
 8022bcc:	0023      	movs	r3, r4
 8022bce:	3347      	adds	r3, #71	@ 0x47
 8022bd0:	6023      	str	r3, [r4, #0]
 8022bd2:	6123      	str	r3, [r4, #16]
 8022bd4:	2301      	movs	r3, #1
 8022bd6:	6163      	str	r3, [r4, #20]
 8022bd8:	b005      	add	sp, #20
 8022bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022bdc:	ab03      	add	r3, sp, #12
 8022bde:	aa02      	add	r2, sp, #8
 8022be0:	f7ff ffc2 	bl	8022b68 <__swhatbuf_r>
 8022be4:	9f02      	ldr	r7, [sp, #8]
 8022be6:	9001      	str	r0, [sp, #4]
 8022be8:	0039      	movs	r1, r7
 8022bea:	0028      	movs	r0, r5
 8022bec:	f7fe feee 	bl	80219cc <_malloc_r>
 8022bf0:	2800      	cmp	r0, #0
 8022bf2:	d108      	bne.n	8022c06 <__smakebuf_r+0x4a>
 8022bf4:	220c      	movs	r2, #12
 8022bf6:	5ea3      	ldrsh	r3, [r4, r2]
 8022bf8:	059a      	lsls	r2, r3, #22
 8022bfa:	d4ed      	bmi.n	8022bd8 <__smakebuf_r+0x1c>
 8022bfc:	2203      	movs	r2, #3
 8022bfe:	4393      	bics	r3, r2
 8022c00:	431e      	orrs	r6, r3
 8022c02:	81a6      	strh	r6, [r4, #12]
 8022c04:	e7e2      	b.n	8022bcc <__smakebuf_r+0x10>
 8022c06:	2380      	movs	r3, #128	@ 0x80
 8022c08:	89a2      	ldrh	r2, [r4, #12]
 8022c0a:	6020      	str	r0, [r4, #0]
 8022c0c:	4313      	orrs	r3, r2
 8022c0e:	81a3      	strh	r3, [r4, #12]
 8022c10:	9b03      	ldr	r3, [sp, #12]
 8022c12:	6120      	str	r0, [r4, #16]
 8022c14:	6167      	str	r7, [r4, #20]
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d00c      	beq.n	8022c34 <__smakebuf_r+0x78>
 8022c1a:	0028      	movs	r0, r5
 8022c1c:	230e      	movs	r3, #14
 8022c1e:	5ee1      	ldrsh	r1, [r4, r3]
 8022c20:	f000 f832 	bl	8022c88 <_isatty_r>
 8022c24:	2800      	cmp	r0, #0
 8022c26:	d005      	beq.n	8022c34 <__smakebuf_r+0x78>
 8022c28:	2303      	movs	r3, #3
 8022c2a:	89a2      	ldrh	r2, [r4, #12]
 8022c2c:	439a      	bics	r2, r3
 8022c2e:	3b02      	subs	r3, #2
 8022c30:	4313      	orrs	r3, r2
 8022c32:	81a3      	strh	r3, [r4, #12]
 8022c34:	89a3      	ldrh	r3, [r4, #12]
 8022c36:	9a01      	ldr	r2, [sp, #4]
 8022c38:	4313      	orrs	r3, r2
 8022c3a:	81a3      	strh	r3, [r4, #12]
 8022c3c:	e7cc      	b.n	8022bd8 <__smakebuf_r+0x1c>

08022c3e <memmove>:
 8022c3e:	b510      	push	{r4, lr}
 8022c40:	4288      	cmp	r0, r1
 8022c42:	d806      	bhi.n	8022c52 <memmove+0x14>
 8022c44:	2300      	movs	r3, #0
 8022c46:	429a      	cmp	r2, r3
 8022c48:	d008      	beq.n	8022c5c <memmove+0x1e>
 8022c4a:	5ccc      	ldrb	r4, [r1, r3]
 8022c4c:	54c4      	strb	r4, [r0, r3]
 8022c4e:	3301      	adds	r3, #1
 8022c50:	e7f9      	b.n	8022c46 <memmove+0x8>
 8022c52:	188b      	adds	r3, r1, r2
 8022c54:	4298      	cmp	r0, r3
 8022c56:	d2f5      	bcs.n	8022c44 <memmove+0x6>
 8022c58:	3a01      	subs	r2, #1
 8022c5a:	d200      	bcs.n	8022c5e <memmove+0x20>
 8022c5c:	bd10      	pop	{r4, pc}
 8022c5e:	5c8b      	ldrb	r3, [r1, r2]
 8022c60:	5483      	strb	r3, [r0, r2]
 8022c62:	e7f9      	b.n	8022c58 <memmove+0x1a>

08022c64 <_fstat_r>:
 8022c64:	2300      	movs	r3, #0
 8022c66:	b570      	push	{r4, r5, r6, lr}
 8022c68:	4d06      	ldr	r5, [pc, #24]	@ (8022c84 <_fstat_r+0x20>)
 8022c6a:	0004      	movs	r4, r0
 8022c6c:	0008      	movs	r0, r1
 8022c6e:	0011      	movs	r1, r2
 8022c70:	602b      	str	r3, [r5, #0]
 8022c72:	f7eb f87d 	bl	800dd70 <_fstat>
 8022c76:	1c43      	adds	r3, r0, #1
 8022c78:	d103      	bne.n	8022c82 <_fstat_r+0x1e>
 8022c7a:	682b      	ldr	r3, [r5, #0]
 8022c7c:	2b00      	cmp	r3, #0
 8022c7e:	d000      	beq.n	8022c82 <_fstat_r+0x1e>
 8022c80:	6023      	str	r3, [r4, #0]
 8022c82:	bd70      	pop	{r4, r5, r6, pc}
 8022c84:	200037bc 	.word	0x200037bc

08022c88 <_isatty_r>:
 8022c88:	2300      	movs	r3, #0
 8022c8a:	b570      	push	{r4, r5, r6, lr}
 8022c8c:	4d06      	ldr	r5, [pc, #24]	@ (8022ca8 <_isatty_r+0x20>)
 8022c8e:	0004      	movs	r4, r0
 8022c90:	0008      	movs	r0, r1
 8022c92:	602b      	str	r3, [r5, #0]
 8022c94:	f7eb f87a 	bl	800dd8c <_isatty>
 8022c98:	1c43      	adds	r3, r0, #1
 8022c9a:	d103      	bne.n	8022ca4 <_isatty_r+0x1c>
 8022c9c:	682b      	ldr	r3, [r5, #0]
 8022c9e:	2b00      	cmp	r3, #0
 8022ca0:	d000      	beq.n	8022ca4 <_isatty_r+0x1c>
 8022ca2:	6023      	str	r3, [r4, #0]
 8022ca4:	bd70      	pop	{r4, r5, r6, pc}
 8022ca6:	46c0      	nop			@ (mov r8, r8)
 8022ca8:	200037bc 	.word	0x200037bc

08022cac <_sbrk_r>:
 8022cac:	2300      	movs	r3, #0
 8022cae:	b570      	push	{r4, r5, r6, lr}
 8022cb0:	4d06      	ldr	r5, [pc, #24]	@ (8022ccc <_sbrk_r+0x20>)
 8022cb2:	0004      	movs	r4, r0
 8022cb4:	0008      	movs	r0, r1
 8022cb6:	602b      	str	r3, [r5, #0]
 8022cb8:	f7eb f87c 	bl	800ddb4 <_sbrk>
 8022cbc:	1c43      	adds	r3, r0, #1
 8022cbe:	d103      	bne.n	8022cc8 <_sbrk_r+0x1c>
 8022cc0:	682b      	ldr	r3, [r5, #0]
 8022cc2:	2b00      	cmp	r3, #0
 8022cc4:	d000      	beq.n	8022cc8 <_sbrk_r+0x1c>
 8022cc6:	6023      	str	r3, [r4, #0]
 8022cc8:	bd70      	pop	{r4, r5, r6, pc}
 8022cca:	46c0      	nop			@ (mov r8, r8)
 8022ccc:	200037bc 	.word	0x200037bc

08022cd0 <__assert_func>:
 8022cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022cd2:	0014      	movs	r4, r2
 8022cd4:	001a      	movs	r2, r3
 8022cd6:	4b09      	ldr	r3, [pc, #36]	@ (8022cfc <__assert_func+0x2c>)
 8022cd8:	0005      	movs	r5, r0
 8022cda:	681b      	ldr	r3, [r3, #0]
 8022cdc:	000e      	movs	r6, r1
 8022cde:	68d8      	ldr	r0, [r3, #12]
 8022ce0:	4b07      	ldr	r3, [pc, #28]	@ (8022d00 <__assert_func+0x30>)
 8022ce2:	2c00      	cmp	r4, #0
 8022ce4:	d101      	bne.n	8022cea <__assert_func+0x1a>
 8022ce6:	4b07      	ldr	r3, [pc, #28]	@ (8022d04 <__assert_func+0x34>)
 8022ce8:	001c      	movs	r4, r3
 8022cea:	4907      	ldr	r1, [pc, #28]	@ (8022d08 <__assert_func+0x38>)
 8022cec:	9301      	str	r3, [sp, #4]
 8022cee:	9402      	str	r4, [sp, #8]
 8022cf0:	002b      	movs	r3, r5
 8022cf2:	9600      	str	r6, [sp, #0]
 8022cf4:	f000 f866 	bl	8022dc4 <fiprintf>
 8022cf8:	f000 f874 	bl	8022de4 <abort>
 8022cfc:	200003d0 	.word	0x200003d0
 8022d00:	08026139 	.word	0x08026139
 8022d04:	08026174 	.word	0x08026174
 8022d08:	08026146 	.word	0x08026146

08022d0c <_calloc_r>:
 8022d0c:	b570      	push	{r4, r5, r6, lr}
 8022d0e:	0c0b      	lsrs	r3, r1, #16
 8022d10:	0c15      	lsrs	r5, r2, #16
 8022d12:	2b00      	cmp	r3, #0
 8022d14:	d11e      	bne.n	8022d54 <_calloc_r+0x48>
 8022d16:	2d00      	cmp	r5, #0
 8022d18:	d10c      	bne.n	8022d34 <_calloc_r+0x28>
 8022d1a:	b289      	uxth	r1, r1
 8022d1c:	b294      	uxth	r4, r2
 8022d1e:	434c      	muls	r4, r1
 8022d20:	0021      	movs	r1, r4
 8022d22:	f7fe fe53 	bl	80219cc <_malloc_r>
 8022d26:	1e05      	subs	r5, r0, #0
 8022d28:	d01a      	beq.n	8022d60 <_calloc_r+0x54>
 8022d2a:	0022      	movs	r2, r4
 8022d2c:	2100      	movs	r1, #0
 8022d2e:	f7fd fb0f 	bl	8020350 <memset>
 8022d32:	e016      	b.n	8022d62 <_calloc_r+0x56>
 8022d34:	1c2b      	adds	r3, r5, #0
 8022d36:	1c0c      	adds	r4, r1, #0
 8022d38:	b289      	uxth	r1, r1
 8022d3a:	b292      	uxth	r2, r2
 8022d3c:	434a      	muls	r2, r1
 8022d3e:	b29b      	uxth	r3, r3
 8022d40:	b2a1      	uxth	r1, r4
 8022d42:	4359      	muls	r1, r3
 8022d44:	0c14      	lsrs	r4, r2, #16
 8022d46:	190c      	adds	r4, r1, r4
 8022d48:	0c23      	lsrs	r3, r4, #16
 8022d4a:	d107      	bne.n	8022d5c <_calloc_r+0x50>
 8022d4c:	0424      	lsls	r4, r4, #16
 8022d4e:	b292      	uxth	r2, r2
 8022d50:	4314      	orrs	r4, r2
 8022d52:	e7e5      	b.n	8022d20 <_calloc_r+0x14>
 8022d54:	2d00      	cmp	r5, #0
 8022d56:	d101      	bne.n	8022d5c <_calloc_r+0x50>
 8022d58:	1c14      	adds	r4, r2, #0
 8022d5a:	e7ed      	b.n	8022d38 <_calloc_r+0x2c>
 8022d5c:	230c      	movs	r3, #12
 8022d5e:	6003      	str	r3, [r0, #0]
 8022d60:	2500      	movs	r5, #0
 8022d62:	0028      	movs	r0, r5
 8022d64:	bd70      	pop	{r4, r5, r6, pc}

08022d66 <_realloc_r>:
 8022d66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d68:	0006      	movs	r6, r0
 8022d6a:	000c      	movs	r4, r1
 8022d6c:	0015      	movs	r5, r2
 8022d6e:	2900      	cmp	r1, #0
 8022d70:	d105      	bne.n	8022d7e <_realloc_r+0x18>
 8022d72:	0011      	movs	r1, r2
 8022d74:	f7fe fe2a 	bl	80219cc <_malloc_r>
 8022d78:	0004      	movs	r4, r0
 8022d7a:	0020      	movs	r0, r4
 8022d7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022d7e:	2a00      	cmp	r2, #0
 8022d80:	d103      	bne.n	8022d8a <_realloc_r+0x24>
 8022d82:	f7fe fa53 	bl	802122c <_free_r>
 8022d86:	2400      	movs	r4, #0
 8022d88:	e7f7      	b.n	8022d7a <_realloc_r+0x14>
 8022d8a:	f000 f832 	bl	8022df2 <_malloc_usable_size_r>
 8022d8e:	0007      	movs	r7, r0
 8022d90:	4285      	cmp	r5, r0
 8022d92:	d802      	bhi.n	8022d9a <_realloc_r+0x34>
 8022d94:	0843      	lsrs	r3, r0, #1
 8022d96:	42ab      	cmp	r3, r5
 8022d98:	d3ef      	bcc.n	8022d7a <_realloc_r+0x14>
 8022d9a:	0029      	movs	r1, r5
 8022d9c:	0030      	movs	r0, r6
 8022d9e:	f7fe fe15 	bl	80219cc <_malloc_r>
 8022da2:	9001      	str	r0, [sp, #4]
 8022da4:	2800      	cmp	r0, #0
 8022da6:	d0ee      	beq.n	8022d86 <_realloc_r+0x20>
 8022da8:	002a      	movs	r2, r5
 8022daa:	42bd      	cmp	r5, r7
 8022dac:	d900      	bls.n	8022db0 <_realloc_r+0x4a>
 8022dae:	003a      	movs	r2, r7
 8022db0:	0021      	movs	r1, r4
 8022db2:	9801      	ldr	r0, [sp, #4]
 8022db4:	f7fd fba8 	bl	8020508 <memcpy>
 8022db8:	0021      	movs	r1, r4
 8022dba:	0030      	movs	r0, r6
 8022dbc:	f7fe fa36 	bl	802122c <_free_r>
 8022dc0:	9c01      	ldr	r4, [sp, #4]
 8022dc2:	e7da      	b.n	8022d7a <_realloc_r+0x14>

08022dc4 <fiprintf>:
 8022dc4:	b40e      	push	{r1, r2, r3}
 8022dc6:	b517      	push	{r0, r1, r2, r4, lr}
 8022dc8:	4c05      	ldr	r4, [pc, #20]	@ (8022de0 <fiprintf+0x1c>)
 8022dca:	ab05      	add	r3, sp, #20
 8022dcc:	cb04      	ldmia	r3!, {r2}
 8022dce:	0001      	movs	r1, r0
 8022dd0:	6820      	ldr	r0, [r4, #0]
 8022dd2:	9301      	str	r3, [sp, #4]
 8022dd4:	f7ff fcfa 	bl	80227cc <_vfiprintf_r>
 8022dd8:	bc1e      	pop	{r1, r2, r3, r4}
 8022dda:	bc08      	pop	{r3}
 8022ddc:	b003      	add	sp, #12
 8022dde:	4718      	bx	r3
 8022de0:	200003d0 	.word	0x200003d0

08022de4 <abort>:
 8022de4:	2006      	movs	r0, #6
 8022de6:	b510      	push	{r4, lr}
 8022de8:	f000 f834 	bl	8022e54 <raise>
 8022dec:	2001      	movs	r0, #1
 8022dee:	f7ea ff8b 	bl	800dd08 <_exit>

08022df2 <_malloc_usable_size_r>:
 8022df2:	1f0b      	subs	r3, r1, #4
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	1f18      	subs	r0, r3, #4
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	da01      	bge.n	8022e00 <_malloc_usable_size_r+0xe>
 8022dfc:	580b      	ldr	r3, [r1, r0]
 8022dfe:	18c0      	adds	r0, r0, r3
 8022e00:	4770      	bx	lr

08022e02 <_raise_r>:
 8022e02:	b570      	push	{r4, r5, r6, lr}
 8022e04:	0004      	movs	r4, r0
 8022e06:	000d      	movs	r5, r1
 8022e08:	291f      	cmp	r1, #31
 8022e0a:	d904      	bls.n	8022e16 <_raise_r+0x14>
 8022e0c:	2316      	movs	r3, #22
 8022e0e:	6003      	str	r3, [r0, #0]
 8022e10:	2001      	movs	r0, #1
 8022e12:	4240      	negs	r0, r0
 8022e14:	bd70      	pop	{r4, r5, r6, pc}
 8022e16:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022e18:	2b00      	cmp	r3, #0
 8022e1a:	d004      	beq.n	8022e26 <_raise_r+0x24>
 8022e1c:	008a      	lsls	r2, r1, #2
 8022e1e:	189b      	adds	r3, r3, r2
 8022e20:	681a      	ldr	r2, [r3, #0]
 8022e22:	2a00      	cmp	r2, #0
 8022e24:	d108      	bne.n	8022e38 <_raise_r+0x36>
 8022e26:	0020      	movs	r0, r4
 8022e28:	f000 f830 	bl	8022e8c <_getpid_r>
 8022e2c:	002a      	movs	r2, r5
 8022e2e:	0001      	movs	r1, r0
 8022e30:	0020      	movs	r0, r4
 8022e32:	f000 f819 	bl	8022e68 <_kill_r>
 8022e36:	e7ed      	b.n	8022e14 <_raise_r+0x12>
 8022e38:	2a01      	cmp	r2, #1
 8022e3a:	d009      	beq.n	8022e50 <_raise_r+0x4e>
 8022e3c:	1c51      	adds	r1, r2, #1
 8022e3e:	d103      	bne.n	8022e48 <_raise_r+0x46>
 8022e40:	2316      	movs	r3, #22
 8022e42:	6003      	str	r3, [r0, #0]
 8022e44:	2001      	movs	r0, #1
 8022e46:	e7e5      	b.n	8022e14 <_raise_r+0x12>
 8022e48:	2100      	movs	r1, #0
 8022e4a:	0028      	movs	r0, r5
 8022e4c:	6019      	str	r1, [r3, #0]
 8022e4e:	4790      	blx	r2
 8022e50:	2000      	movs	r0, #0
 8022e52:	e7df      	b.n	8022e14 <_raise_r+0x12>

08022e54 <raise>:
 8022e54:	b510      	push	{r4, lr}
 8022e56:	4b03      	ldr	r3, [pc, #12]	@ (8022e64 <raise+0x10>)
 8022e58:	0001      	movs	r1, r0
 8022e5a:	6818      	ldr	r0, [r3, #0]
 8022e5c:	f7ff ffd1 	bl	8022e02 <_raise_r>
 8022e60:	bd10      	pop	{r4, pc}
 8022e62:	46c0      	nop			@ (mov r8, r8)
 8022e64:	200003d0 	.word	0x200003d0

08022e68 <_kill_r>:
 8022e68:	2300      	movs	r3, #0
 8022e6a:	b570      	push	{r4, r5, r6, lr}
 8022e6c:	4d06      	ldr	r5, [pc, #24]	@ (8022e88 <_kill_r+0x20>)
 8022e6e:	0004      	movs	r4, r0
 8022e70:	0008      	movs	r0, r1
 8022e72:	0011      	movs	r1, r2
 8022e74:	602b      	str	r3, [r5, #0]
 8022e76:	f7ea ff37 	bl	800dce8 <_kill>
 8022e7a:	1c43      	adds	r3, r0, #1
 8022e7c:	d103      	bne.n	8022e86 <_kill_r+0x1e>
 8022e7e:	682b      	ldr	r3, [r5, #0]
 8022e80:	2b00      	cmp	r3, #0
 8022e82:	d000      	beq.n	8022e86 <_kill_r+0x1e>
 8022e84:	6023      	str	r3, [r4, #0]
 8022e86:	bd70      	pop	{r4, r5, r6, pc}
 8022e88:	200037bc 	.word	0x200037bc

08022e8c <_getpid_r>:
 8022e8c:	b510      	push	{r4, lr}
 8022e8e:	f7ea ff25 	bl	800dcdc <_getpid>
 8022e92:	bd10      	pop	{r4, pc}

08022e94 <expf>:
 8022e94:	b570      	push	{r4, r5, r6, lr}
 8022e96:	1c04      	adds	r4, r0, #0
 8022e98:	f000 f8e6 	bl	8023068 <__ieee754_expf>
 8022e9c:	1c05      	adds	r5, r0, #0
 8022e9e:	1c20      	adds	r0, r4, #0
 8022ea0:	f000 f83c 	bl	8022f1c <finitef>
 8022ea4:	2800      	cmp	r0, #0
 8022ea6:	d00b      	beq.n	8022ec0 <expf+0x2c>
 8022ea8:	490c      	ldr	r1, [pc, #48]	@ (8022edc <expf+0x48>)
 8022eaa:	1c20      	adds	r0, r4, #0
 8022eac:	f7dd fb54 	bl	8000558 <__aeabi_fcmpgt>
 8022eb0:	2800      	cmp	r0, #0
 8022eb2:	d007      	beq.n	8022ec4 <expf+0x30>
 8022eb4:	f7fd faf0 	bl	8020498 <__errno>
 8022eb8:	25ff      	movs	r5, #255	@ 0xff
 8022eba:	2322      	movs	r3, #34	@ 0x22
 8022ebc:	05ed      	lsls	r5, r5, #23
 8022ebe:	6003      	str	r3, [r0, #0]
 8022ec0:	1c28      	adds	r0, r5, #0
 8022ec2:	bd70      	pop	{r4, r5, r6, pc}
 8022ec4:	4906      	ldr	r1, [pc, #24]	@ (8022ee0 <expf+0x4c>)
 8022ec6:	1c20      	adds	r0, r4, #0
 8022ec8:	f7dd fb32 	bl	8000530 <__aeabi_fcmplt>
 8022ecc:	2800      	cmp	r0, #0
 8022ece:	d0f7      	beq.n	8022ec0 <expf+0x2c>
 8022ed0:	f7fd fae2 	bl	8020498 <__errno>
 8022ed4:	2322      	movs	r3, #34	@ 0x22
 8022ed6:	2500      	movs	r5, #0
 8022ed8:	6003      	str	r3, [r0, #0]
 8022eda:	e7f1      	b.n	8022ec0 <expf+0x2c>
 8022edc:	42b17217 	.word	0x42b17217
 8022ee0:	c2cff1b5 	.word	0xc2cff1b5

08022ee4 <sqrtf>:
 8022ee4:	b570      	push	{r4, r5, r6, lr}
 8022ee6:	1c05      	adds	r5, r0, #0
 8022ee8:	f000 f822 	bl	8022f30 <__ieee754_sqrtf>
 8022eec:	1c29      	adds	r1, r5, #0
 8022eee:	1c04      	adds	r4, r0, #0
 8022ef0:	1c28      	adds	r0, r5, #0
 8022ef2:	f7de fb37 	bl	8001564 <__aeabi_fcmpun>
 8022ef6:	2800      	cmp	r0, #0
 8022ef8:	d10e      	bne.n	8022f18 <sqrtf+0x34>
 8022efa:	2100      	movs	r1, #0
 8022efc:	1c28      	adds	r0, r5, #0
 8022efe:	f7dd fb17 	bl	8000530 <__aeabi_fcmplt>
 8022f02:	2800      	cmp	r0, #0
 8022f04:	d008      	beq.n	8022f18 <sqrtf+0x34>
 8022f06:	f7fd fac7 	bl	8020498 <__errno>
 8022f0a:	2321      	movs	r3, #33	@ 0x21
 8022f0c:	2100      	movs	r1, #0
 8022f0e:	6003      	str	r3, [r0, #0]
 8022f10:	1c08      	adds	r0, r1, #0
 8022f12:	f7dd fe5f 	bl	8000bd4 <__aeabi_fdiv>
 8022f16:	1c04      	adds	r4, r0, #0
 8022f18:	1c20      	adds	r0, r4, #0
 8022f1a:	bd70      	pop	{r4, r5, r6, pc}

08022f1c <finitef>:
 8022f1c:	22ff      	movs	r2, #255	@ 0xff
 8022f1e:	0043      	lsls	r3, r0, #1
 8022f20:	085b      	lsrs	r3, r3, #1
 8022f22:	2001      	movs	r0, #1
 8022f24:	05d2      	lsls	r2, r2, #23
 8022f26:	4293      	cmp	r3, r2
 8022f28:	db00      	blt.n	8022f2c <finitef+0x10>
 8022f2a:	2000      	movs	r0, #0
 8022f2c:	4770      	bx	lr
	...

08022f30 <__ieee754_sqrtf>:
 8022f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022f32:	0003      	movs	r3, r0
 8022f34:	0042      	lsls	r2, r0, #1
 8022f36:	1c04      	adds	r4, r0, #0
 8022f38:	20ff      	movs	r0, #255	@ 0xff
 8022f3a:	0852      	lsrs	r2, r2, #1
 8022f3c:	05c0      	lsls	r0, r0, #23
 8022f3e:	4282      	cmp	r2, r0
 8022f40:	d30a      	bcc.n	8022f58 <__ieee754_sqrtf+0x28>
 8022f42:	1c21      	adds	r1, r4, #0
 8022f44:	1c20      	adds	r0, r4, #0
 8022f46:	f7de f82b 	bl	8000fa0 <__aeabi_fmul>
 8022f4a:	1c01      	adds	r1, r0, #0
 8022f4c:	1c20      	adds	r0, r4, #0
 8022f4e:	f7dd fcb7 	bl	80008c0 <__aeabi_fadd>
 8022f52:	1c04      	adds	r4, r0, #0
 8022f54:	1c20      	adds	r0, r4, #0
 8022f56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022f58:	2a00      	cmp	r2, #0
 8022f5a:	d0fb      	beq.n	8022f54 <__ieee754_sqrtf+0x24>
 8022f5c:	2c00      	cmp	r4, #0
 8022f5e:	da07      	bge.n	8022f70 <__ieee754_sqrtf+0x40>
 8022f60:	1c21      	adds	r1, r4, #0
 8022f62:	1c20      	adds	r0, r4, #0
 8022f64:	f7de f95a 	bl	800121c <__aeabi_fsub>
 8022f68:	1c01      	adds	r1, r0, #0
 8022f6a:	f7dd fe33 	bl	8000bd4 <__aeabi_fdiv>
 8022f6e:	e7f0      	b.n	8022f52 <__ieee754_sqrtf+0x22>
 8022f70:	0022      	movs	r2, r4
 8022f72:	15e1      	asrs	r1, r4, #23
 8022f74:	4002      	ands	r2, r0
 8022f76:	4204      	tst	r4, r0
 8022f78:	d046      	beq.n	8023008 <__ieee754_sqrtf+0xd8>
 8022f7a:	2280      	movs	r2, #128	@ 0x80
 8022f7c:	000f      	movs	r7, r1
 8022f7e:	025b      	lsls	r3, r3, #9
 8022f80:	0a5b      	lsrs	r3, r3, #9
 8022f82:	0412      	lsls	r2, r2, #16
 8022f84:	3f7f      	subs	r7, #127	@ 0x7f
 8022f86:	4313      	orrs	r3, r2
 8022f88:	07c9      	lsls	r1, r1, #31
 8022f8a:	d400      	bmi.n	8022f8e <__ieee754_sqrtf+0x5e>
 8022f8c:	005b      	lsls	r3, r3, #1
 8022f8e:	2400      	movs	r4, #0
 8022f90:	2180      	movs	r1, #128	@ 0x80
 8022f92:	2019      	movs	r0, #25
 8022f94:	0026      	movs	r6, r4
 8022f96:	107f      	asrs	r7, r7, #1
 8022f98:	005b      	lsls	r3, r3, #1
 8022f9a:	0449      	lsls	r1, r1, #17
 8022f9c:	1875      	adds	r5, r6, r1
 8022f9e:	001a      	movs	r2, r3
 8022fa0:	429d      	cmp	r5, r3
 8022fa2:	dc02      	bgt.n	8022faa <__ieee754_sqrtf+0x7a>
 8022fa4:	186e      	adds	r6, r5, r1
 8022fa6:	1b5a      	subs	r2, r3, r5
 8022fa8:	1864      	adds	r4, r4, r1
 8022faa:	3801      	subs	r0, #1
 8022fac:	0053      	lsls	r3, r2, #1
 8022fae:	0849      	lsrs	r1, r1, #1
 8022fb0:	2800      	cmp	r0, #0
 8022fb2:	d1f3      	bne.n	8022f9c <__ieee754_sqrtf+0x6c>
 8022fb4:	2a00      	cmp	r2, #0
 8022fb6:	d019      	beq.n	8022fec <__ieee754_sqrtf+0xbc>
 8022fb8:	4d17      	ldr	r5, [pc, #92]	@ (8023018 <__ieee754_sqrtf+0xe8>)
 8022fba:	4e18      	ldr	r6, [pc, #96]	@ (802301c <__ieee754_sqrtf+0xec>)
 8022fbc:	6828      	ldr	r0, [r5, #0]
 8022fbe:	6831      	ldr	r1, [r6, #0]
 8022fc0:	682b      	ldr	r3, [r5, #0]
 8022fc2:	9301      	str	r3, [sp, #4]
 8022fc4:	f7de f92a 	bl	800121c <__aeabi_fsub>
 8022fc8:	1c01      	adds	r1, r0, #0
 8022fca:	9801      	ldr	r0, [sp, #4]
 8022fcc:	f7dd faba 	bl	8000544 <__aeabi_fcmple>
 8022fd0:	2800      	cmp	r0, #0
 8022fd2:	d00b      	beq.n	8022fec <__ieee754_sqrtf+0xbc>
 8022fd4:	6828      	ldr	r0, [r5, #0]
 8022fd6:	6831      	ldr	r1, [r6, #0]
 8022fd8:	f7dd fc72 	bl	80008c0 <__aeabi_fadd>
 8022fdc:	682d      	ldr	r5, [r5, #0]
 8022fde:	1c01      	adds	r1, r0, #0
 8022fe0:	1c28      	adds	r0, r5, #0
 8022fe2:	f7dd faa5 	bl	8000530 <__aeabi_fcmplt>
 8022fe6:	2800      	cmp	r0, #0
 8022fe8:	d011      	beq.n	802300e <__ieee754_sqrtf+0xde>
 8022fea:	3402      	adds	r4, #2
 8022fec:	23fc      	movs	r3, #252	@ 0xfc
 8022fee:	1064      	asrs	r4, r4, #1
 8022ff0:	059b      	lsls	r3, r3, #22
 8022ff2:	18e3      	adds	r3, r4, r3
 8022ff4:	05fc      	lsls	r4, r7, #23
 8022ff6:	18e4      	adds	r4, r4, r3
 8022ff8:	e7ac      	b.n	8022f54 <__ieee754_sqrtf+0x24>
 8022ffa:	005b      	lsls	r3, r3, #1
 8022ffc:	3201      	adds	r2, #1
 8022ffe:	4203      	tst	r3, r0
 8023000:	d0fb      	beq.n	8022ffa <__ieee754_sqrtf+0xca>
 8023002:	3a01      	subs	r2, #1
 8023004:	1a89      	subs	r1, r1, r2
 8023006:	e7b8      	b.n	8022f7a <__ieee754_sqrtf+0x4a>
 8023008:	2080      	movs	r0, #128	@ 0x80
 802300a:	0400      	lsls	r0, r0, #16
 802300c:	e7f7      	b.n	8022ffe <__ieee754_sqrtf+0xce>
 802300e:	2301      	movs	r3, #1
 8023010:	3401      	adds	r4, #1
 8023012:	439c      	bics	r4, r3
 8023014:	e7ea      	b.n	8022fec <__ieee754_sqrtf+0xbc>
 8023016:	46c0      	nop			@ (mov r8, r8)
 8023018:	20000424 	.word	0x20000424
 802301c:	20000420 	.word	0x20000420

08023020 <roundf>:
 8023020:	0dc3      	lsrs	r3, r0, #23
 8023022:	b2db      	uxtb	r3, r3
 8023024:	3b7f      	subs	r3, #127	@ 0x7f
 8023026:	0002      	movs	r2, r0
 8023028:	b510      	push	{r4, lr}
 802302a:	2b16      	cmp	r3, #22
 802302c:	dc13      	bgt.n	8023056 <roundf+0x36>
 802302e:	2b00      	cmp	r3, #0
 8023030:	da07      	bge.n	8023042 <roundf+0x22>
 8023032:	0fc2      	lsrs	r2, r0, #31
 8023034:	07d0      	lsls	r0, r2, #31
 8023036:	3301      	adds	r3, #1
 8023038:	d102      	bne.n	8023040 <roundf+0x20>
 802303a:	23fe      	movs	r3, #254	@ 0xfe
 802303c:	059b      	lsls	r3, r3, #22
 802303e:	4318      	orrs	r0, r3
 8023040:	bd10      	pop	{r4, pc}
 8023042:	4908      	ldr	r1, [pc, #32]	@ (8023064 <roundf+0x44>)
 8023044:	4119      	asrs	r1, r3
 8023046:	4208      	tst	r0, r1
 8023048:	d0fa      	beq.n	8023040 <roundf+0x20>
 802304a:	2080      	movs	r0, #128	@ 0x80
 802304c:	03c0      	lsls	r0, r0, #15
 802304e:	4118      	asrs	r0, r3
 8023050:	1880      	adds	r0, r0, r2
 8023052:	4388      	bics	r0, r1
 8023054:	e7f4      	b.n	8023040 <roundf+0x20>
 8023056:	2b80      	cmp	r3, #128	@ 0x80
 8023058:	d1f2      	bne.n	8023040 <roundf+0x20>
 802305a:	1c01      	adds	r1, r0, #0
 802305c:	f7dd fc30 	bl	80008c0 <__aeabi_fadd>
 8023060:	e7ee      	b.n	8023040 <roundf+0x20>
 8023062:	46c0      	nop			@ (mov r8, r8)
 8023064:	007fffff 	.word	0x007fffff

08023068 <__ieee754_expf>:
 8023068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802306a:	21ff      	movs	r1, #255	@ 0xff
 802306c:	0043      	lsls	r3, r0, #1
 802306e:	1c04      	adds	r4, r0, #0
 8023070:	085b      	lsrs	r3, r3, #1
 8023072:	05c9      	lsls	r1, r1, #23
 8023074:	428b      	cmp	r3, r1
 8023076:	d904      	bls.n	8023082 <__ieee754_expf+0x1a>
 8023078:	1c01      	adds	r1, r0, #0
 802307a:	1c20      	adds	r0, r4, #0
 802307c:	f7dd fc20 	bl	80008c0 <__aeabi_fadd>
 8023080:	e00d      	b.n	802309e <__ieee754_expf+0x36>
 8023082:	0fc6      	lsrs	r6, r0, #31
 8023084:	428b      	cmp	r3, r1
 8023086:	d104      	bne.n	8023092 <__ieee754_expf+0x2a>
 8023088:	2e00      	cmp	r6, #0
 802308a:	d000      	beq.n	802308e <__ieee754_expf+0x26>
 802308c:	e0ba      	b.n	8023204 <__ieee754_expf+0x19c>
 802308e:	1c20      	adds	r0, r4, #0
 8023090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023092:	495d      	ldr	r1, [pc, #372]	@ (8023208 <__ieee754_expf+0x1a0>)
 8023094:	4288      	cmp	r0, r1
 8023096:	dd04      	ble.n	80230a2 <__ieee754_expf+0x3a>
 8023098:	2000      	movs	r0, #0
 802309a:	f000 f8f1 	bl	8023280 <__math_oflowf>
 802309e:	1c04      	adds	r4, r0, #0
 80230a0:	e7f5      	b.n	802308e <__ieee754_expf+0x26>
 80230a2:	2800      	cmp	r0, #0
 80230a4:	da06      	bge.n	80230b4 <__ieee754_expf+0x4c>
 80230a6:	4a59      	ldr	r2, [pc, #356]	@ (802320c <__ieee754_expf+0x1a4>)
 80230a8:	4293      	cmp	r3, r2
 80230aa:	d903      	bls.n	80230b4 <__ieee754_expf+0x4c>
 80230ac:	2000      	movs	r0, #0
 80230ae:	f000 f8e1 	bl	8023274 <__math_uflowf>
 80230b2:	e7f4      	b.n	802309e <__ieee754_expf+0x36>
 80230b4:	4a56      	ldr	r2, [pc, #344]	@ (8023210 <__ieee754_expf+0x1a8>)
 80230b6:	4293      	cmp	r3, r2
 80230b8:	d96e      	bls.n	8023198 <__ieee754_expf+0x130>
 80230ba:	4a56      	ldr	r2, [pc, #344]	@ (8023214 <__ieee754_expf+0x1ac>)
 80230bc:	00b5      	lsls	r5, r6, #2
 80230be:	4293      	cmp	r3, r2
 80230c0:	d84e      	bhi.n	8023160 <__ieee754_expf+0xf8>
 80230c2:	4b55      	ldr	r3, [pc, #340]	@ (8023218 <__ieee754_expf+0x1b0>)
 80230c4:	1c20      	adds	r0, r4, #0
 80230c6:	5959      	ldr	r1, [r3, r5]
 80230c8:	f7de f8a8 	bl	800121c <__aeabi_fsub>
 80230cc:	4b53      	ldr	r3, [pc, #332]	@ (802321c <__ieee754_expf+0x1b4>)
 80230ce:	1c07      	adds	r7, r0, #0
 80230d0:	595b      	ldr	r3, [r3, r5]
 80230d2:	2501      	movs	r5, #1
 80230d4:	1bad      	subs	r5, r5, r6
 80230d6:	9300      	str	r3, [sp, #0]
 80230d8:	1bad      	subs	r5, r5, r6
 80230da:	9900      	ldr	r1, [sp, #0]
 80230dc:	1c38      	adds	r0, r7, #0
 80230de:	f7de f89d 	bl	800121c <__aeabi_fsub>
 80230e2:	1c04      	adds	r4, r0, #0
 80230e4:	1c21      	adds	r1, r4, #0
 80230e6:	1c20      	adds	r0, r4, #0
 80230e8:	f7dd ff5a 	bl	8000fa0 <__aeabi_fmul>
 80230ec:	494c      	ldr	r1, [pc, #304]	@ (8023220 <__ieee754_expf+0x1b8>)
 80230ee:	1c06      	adds	r6, r0, #0
 80230f0:	f7dd ff56 	bl	8000fa0 <__aeabi_fmul>
 80230f4:	494b      	ldr	r1, [pc, #300]	@ (8023224 <__ieee754_expf+0x1bc>)
 80230f6:	f7de f891 	bl	800121c <__aeabi_fsub>
 80230fa:	1c31      	adds	r1, r6, #0
 80230fc:	f7dd ff50 	bl	8000fa0 <__aeabi_fmul>
 8023100:	4949      	ldr	r1, [pc, #292]	@ (8023228 <__ieee754_expf+0x1c0>)
 8023102:	f7dd fbdd 	bl	80008c0 <__aeabi_fadd>
 8023106:	1c31      	adds	r1, r6, #0
 8023108:	f7dd ff4a 	bl	8000fa0 <__aeabi_fmul>
 802310c:	4947      	ldr	r1, [pc, #284]	@ (802322c <__ieee754_expf+0x1c4>)
 802310e:	f7de f885 	bl	800121c <__aeabi_fsub>
 8023112:	1c31      	adds	r1, r6, #0
 8023114:	f7dd ff44 	bl	8000fa0 <__aeabi_fmul>
 8023118:	4945      	ldr	r1, [pc, #276]	@ (8023230 <__ieee754_expf+0x1c8>)
 802311a:	f7dd fbd1 	bl	80008c0 <__aeabi_fadd>
 802311e:	1c31      	adds	r1, r6, #0
 8023120:	f7dd ff3e 	bl	8000fa0 <__aeabi_fmul>
 8023124:	1c01      	adds	r1, r0, #0
 8023126:	1c20      	adds	r0, r4, #0
 8023128:	f7de f878 	bl	800121c <__aeabi_fsub>
 802312c:	1c01      	adds	r1, r0, #0
 802312e:	1c06      	adds	r6, r0, #0
 8023130:	1c20      	adds	r0, r4, #0
 8023132:	f7dd ff35 	bl	8000fa0 <__aeabi_fmul>
 8023136:	9001      	str	r0, [sp, #4]
 8023138:	2d00      	cmp	r5, #0
 802313a:	d140      	bne.n	80231be <__ieee754_expf+0x156>
 802313c:	2180      	movs	r1, #128	@ 0x80
 802313e:	1c30      	adds	r0, r6, #0
 8023140:	05c9      	lsls	r1, r1, #23
 8023142:	f7de f86b 	bl	800121c <__aeabi_fsub>
 8023146:	1c01      	adds	r1, r0, #0
 8023148:	9801      	ldr	r0, [sp, #4]
 802314a:	f7dd fd43 	bl	8000bd4 <__aeabi_fdiv>
 802314e:	1c21      	adds	r1, r4, #0
 8023150:	f7de f864 	bl	800121c <__aeabi_fsub>
 8023154:	1c01      	adds	r1, r0, #0
 8023156:	20fe      	movs	r0, #254	@ 0xfe
 8023158:	0580      	lsls	r0, r0, #22
 802315a:	f7de f85f 	bl	800121c <__aeabi_fsub>
 802315e:	e79e      	b.n	802309e <__ieee754_expf+0x36>
 8023160:	4934      	ldr	r1, [pc, #208]	@ (8023234 <__ieee754_expf+0x1cc>)
 8023162:	1c20      	adds	r0, r4, #0
 8023164:	f7dd ff1c 	bl	8000fa0 <__aeabi_fmul>
 8023168:	4b33      	ldr	r3, [pc, #204]	@ (8023238 <__ieee754_expf+0x1d0>)
 802316a:	5959      	ldr	r1, [r3, r5]
 802316c:	f7dd fba8 	bl	80008c0 <__aeabi_fadd>
 8023170:	f7de fa0e 	bl	8001590 <__aeabi_f2iz>
 8023174:	0005      	movs	r5, r0
 8023176:	f7de fa2b 	bl	80015d0 <__aeabi_i2f>
 802317a:	4930      	ldr	r1, [pc, #192]	@ (802323c <__ieee754_expf+0x1d4>)
 802317c:	1c06      	adds	r6, r0, #0
 802317e:	f7dd ff0f 	bl	8000fa0 <__aeabi_fmul>
 8023182:	1c01      	adds	r1, r0, #0
 8023184:	1c20      	adds	r0, r4, #0
 8023186:	f7de f849 	bl	800121c <__aeabi_fsub>
 802318a:	492d      	ldr	r1, [pc, #180]	@ (8023240 <__ieee754_expf+0x1d8>)
 802318c:	1c07      	adds	r7, r0, #0
 802318e:	1c30      	adds	r0, r6, #0
 8023190:	f7dd ff06 	bl	8000fa0 <__aeabi_fmul>
 8023194:	9000      	str	r0, [sp, #0]
 8023196:	e7a0      	b.n	80230da <__ieee754_expf+0x72>
 8023198:	22d0      	movs	r2, #208	@ 0xd0
 802319a:	0592      	lsls	r2, r2, #22
 802319c:	4293      	cmp	r3, r2
 802319e:	d20c      	bcs.n	80231ba <__ieee754_expf+0x152>
 80231a0:	4928      	ldr	r1, [pc, #160]	@ (8023244 <__ieee754_expf+0x1dc>)
 80231a2:	1c20      	adds	r0, r4, #0
 80231a4:	f7dd fb8c 	bl	80008c0 <__aeabi_fadd>
 80231a8:	21fe      	movs	r1, #254	@ 0xfe
 80231aa:	0589      	lsls	r1, r1, #22
 80231ac:	f7dd f9d4 	bl	8000558 <__aeabi_fcmpgt>
 80231b0:	1e05      	subs	r5, r0, #0
 80231b2:	d097      	beq.n	80230e4 <__ieee754_expf+0x7c>
 80231b4:	21fe      	movs	r1, #254	@ 0xfe
 80231b6:	0589      	lsls	r1, r1, #22
 80231b8:	e75f      	b.n	802307a <__ieee754_expf+0x12>
 80231ba:	2500      	movs	r5, #0
 80231bc:	e792      	b.n	80230e4 <__ieee754_expf+0x7c>
 80231be:	2080      	movs	r0, #128	@ 0x80
 80231c0:	1c31      	adds	r1, r6, #0
 80231c2:	05c0      	lsls	r0, r0, #23
 80231c4:	f7de f82a 	bl	800121c <__aeabi_fsub>
 80231c8:	1c01      	adds	r1, r0, #0
 80231ca:	9801      	ldr	r0, [sp, #4]
 80231cc:	f7dd fd02 	bl	8000bd4 <__aeabi_fdiv>
 80231d0:	1c01      	adds	r1, r0, #0
 80231d2:	9800      	ldr	r0, [sp, #0]
 80231d4:	f7de f822 	bl	800121c <__aeabi_fsub>
 80231d8:	1c39      	adds	r1, r7, #0
 80231da:	f7de f81f 	bl	800121c <__aeabi_fsub>
 80231de:	1c01      	adds	r1, r0, #0
 80231e0:	20fe      	movs	r0, #254	@ 0xfe
 80231e2:	0580      	lsls	r0, r0, #22
 80231e4:	f7de f81a 	bl	800121c <__aeabi_fsub>
 80231e8:	002b      	movs	r3, r5
 80231ea:	337d      	adds	r3, #125	@ 0x7d
 80231ec:	db02      	blt.n	80231f4 <__ieee754_expf+0x18c>
 80231ee:	05ec      	lsls	r4, r5, #23
 80231f0:	1824      	adds	r4, r4, r0
 80231f2:	e74c      	b.n	802308e <__ieee754_expf+0x26>
 80231f4:	21d8      	movs	r1, #216	@ 0xd8
 80231f6:	3564      	adds	r5, #100	@ 0x64
 80231f8:	05ed      	lsls	r5, r5, #23
 80231fa:	1828      	adds	r0, r5, r0
 80231fc:	0509      	lsls	r1, r1, #20
 80231fe:	f7dd fecf 	bl	8000fa0 <__aeabi_fmul>
 8023202:	e74c      	b.n	802309e <__ieee754_expf+0x36>
 8023204:	2400      	movs	r4, #0
 8023206:	e742      	b.n	802308e <__ieee754_expf+0x26>
 8023208:	42b17217 	.word	0x42b17217
 802320c:	42cff1b5 	.word	0x42cff1b5
 8023210:	3eb17218 	.word	0x3eb17218
 8023214:	3f851591 	.word	0x3f851591
 8023218:	08026180 	.word	0x08026180
 802321c:	08026178 	.word	0x08026178
 8023220:	3331bb4c 	.word	0x3331bb4c
 8023224:	35ddea0e 	.word	0x35ddea0e
 8023228:	388ab355 	.word	0x388ab355
 802322c:	3b360b61 	.word	0x3b360b61
 8023230:	3e2aaaab 	.word	0x3e2aaaab
 8023234:	3fb8aa3b 	.word	0x3fb8aa3b
 8023238:	08026188 	.word	0x08026188
 802323c:	3f317180 	.word	0x3f317180
 8023240:	3717f7d1 	.word	0x3717f7d1
 8023244:	7149f2ca 	.word	0x7149f2ca

08023248 <with_errnof>:
 8023248:	b570      	push	{r4, r5, r6, lr}
 802324a:	000d      	movs	r5, r1
 802324c:	1c04      	adds	r4, r0, #0
 802324e:	f7fd f923 	bl	8020498 <__errno>
 8023252:	6005      	str	r5, [r0, #0]
 8023254:	1c20      	adds	r0, r4, #0
 8023256:	bd70      	pop	{r4, r5, r6, pc}

08023258 <xflowf>:
 8023258:	b510      	push	{r4, lr}
 802325a:	1c0b      	adds	r3, r1, #0
 802325c:	2800      	cmp	r0, #0
 802325e:	d002      	beq.n	8023266 <xflowf+0xe>
 8023260:	2380      	movs	r3, #128	@ 0x80
 8023262:	061b      	lsls	r3, r3, #24
 8023264:	18cb      	adds	r3, r1, r3
 8023266:	1c18      	adds	r0, r3, #0
 8023268:	f7dd fe9a 	bl	8000fa0 <__aeabi_fmul>
 802326c:	2122      	movs	r1, #34	@ 0x22
 802326e:	f7ff ffeb 	bl	8023248 <with_errnof>
 8023272:	bd10      	pop	{r4, pc}

08023274 <__math_uflowf>:
 8023274:	2180      	movs	r1, #128	@ 0x80
 8023276:	b510      	push	{r4, lr}
 8023278:	0549      	lsls	r1, r1, #21
 802327a:	f7ff ffed 	bl	8023258 <xflowf>
 802327e:	bd10      	pop	{r4, pc}

08023280 <__math_oflowf>:
 8023280:	21e0      	movs	r1, #224	@ 0xe0
 8023282:	b510      	push	{r4, lr}
 8023284:	05c9      	lsls	r1, r1, #23
 8023286:	f7ff ffe7 	bl	8023258 <xflowf>
 802328a:	bd10      	pop	{r4, pc}

0802328c <_init>:
 802328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802328e:	46c0      	nop			@ (mov r8, r8)
 8023290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023292:	bc08      	pop	{r3}
 8023294:	469e      	mov	lr, r3
 8023296:	4770      	bx	lr

08023298 <_fini>:
 8023298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802329a:	46c0      	nop			@ (mov r8, r8)
 802329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802329e:	bc08      	pop	{r3}
 80232a0:	469e      	mov	lr, r3
 80232a2:	4770      	bx	lr
