
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a868  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005050  0802a928  0802a928  0002b928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f978  0802f978  0003143c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802f978  0802f978  00030978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f980  0802f980  0003143c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f980  0802f980  00030980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802f984  0802f984  00030984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802f988  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034f4  2000043c  0802fdc4  0003143c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003930  0802fdc4  00031930  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003143c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f6e  00000000  00000000  00031464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009df4  00000000  00000000  000683d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd0  00000000  00000000  000721c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002227  00000000  00000000  00074f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024606  00000000  00000000  000771bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046ac8  00000000  00000000  0009b7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3639  00000000  00000000  000e228d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001858c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc1c  00000000  00000000  00185978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00191594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00191601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00193b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a910 	.word	0x0802a910

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a910 	.word	0x0802a910

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802e730 	.word	0x0802e730
 8000ec8:	0802e770 	.word	0x0802e770
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802e7ac 	.word	0x0802e7ac
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f011 f8bc 	bl	8014cd4 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f011 f893 	bl	8014ce8 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f010 fad3 	bl	80141e4 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a928 	.word	0x0802a928
 8003c84:	0802a934 	.word	0x0802a934
 8003c88:	0802a938 	.word	0x0802a938
 8003c8c:	0802a944 	.word	0x0802a944
 8003c90:	0802a964 	.word	0x0802a964
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f011 f818 	bl	8014ce8 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f011 f804 	bl	8014ce8 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f010 fa5f 	bl	80141e4 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 ffde 	bl	8014ce8 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a968 	.word	0x0802a968
 8003d4c:	0802a934 	.word	0x0802a934
 8003d50:	0802a96c 	.word	0x0802a96c
 8003d54:	0802a964 	.word	0x0802a964

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 ffc0 	bl	8014ce8 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 ffb4 	bl	8014ce8 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f010 fa01 	bl	80141e4 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 ff80 	bl	8014ce8 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a998 	.word	0x0802a998
 8003e08:	0802a964 	.word	0x0802a964

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 ff4d 	bl	8014ce8 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f010 f98e 	bl	80141e4 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f010 f94f 	bl	80141e4 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a9b4 	.word	0x0802a9b4
 8003f5c:	0802a9d4 	.word	0x0802a9d4
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a9d8 	.word	0x0802a9d8
 8003f68:	0802a964 	.word	0x0802a964

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f010 f928 	bl	80141e4 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802aa0c 	.word	0x0802aa0c
 8003fa8:	0802a964 	.word	0x0802a964

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f010 f908 	bl	80141e4 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fe83 	bl	8014ce8 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 fe72 	bl	8014ce8 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802aa20 	.word	0x0802aa20
 8004098:	0802a964 	.word	0x0802a964
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f010 f88c 	bl	80141e4 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fe07 	bl	8014ce8 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f025 f931 	bl	802939c <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f025 f90d 	bl	802939c <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f025 f8e9 	bl	802939c <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f025 f8c5 	bl	802939c <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f025 f89b 	bl	802939c <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f025 f877 	bl	802939c <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f025 f853 	bl	802939c <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f025 f82f 	bl	802939c <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802aa3c 	.word	0x0802aa3c
 800437c:	0802a964 	.word	0x0802a964
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bce      	ldr	r3, [pc, #824]	@ (8004798 <ENS_Upkeep+0x340>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fe68 	bl	8014138 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc9      	ldr	r3, [pc, #804]	@ (800479c <ENS_Upkeep+0x344>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e22e      	b.n	80048da <ENS_Upkeep+0x482>
  }
  switch(ENSState) {
 800447c:	4bc7      	ldr	r3, [pc, #796]	@ (800479c <ENS_Upkeep+0x344>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e210      	b.n	80048a8 <ENS_Upkeep+0x450>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bc5      	ldr	r3, [pc, #788]	@ (80047a0 <ENS_Upkeep+0x348>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4ac4      	ldr	r2, [pc, #784]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004492:	4bc5      	ldr	r3, [pc, #788]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fea4 	bl	80141e4 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 fc1a 	bl	8014cd4 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ac2      	ldr	r2, [pc, #776]	@ (80047ac <ENS_Upkeep+0x354>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bbc      	ldr	r3, [pc, #752]	@ (8004798 <ENS_Upkeep+0x340>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bc1      	ldr	r3, [pc, #772]	@ (80047b0 <ENS_Upkeep+0x358>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bc1      	ldr	r3, [pc, #772]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e203      	b.n	80048c0 <ENS_Upkeep+0x468>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4bb8      	ldr	r3, [pc, #736]	@ (800479c <ENS_Upkeep+0x344>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1ff      	b.n	80048c0 <ENS_Upkeep+0x468>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fe76 	bl	800e1b0 <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1fc      	b.n	80048c4 <ENS_Upkeep+0x46c>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 fe5c 	bl	800e188 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bb4      	ldr	r3, [pc, #720]	@ (80047b8 <ENS_Upkeep+0x360>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bb4      	ldr	r3, [pc, #720]	@ (80047bc <ENS_Upkeep+0x364>)
 80044ea:	4ab5      	ldr	r2, [pc, #724]	@ (80047c0 <ENS_Upkeep+0x368>)
 80044ec:	49ae      	ldr	r1, [pc, #696]	@ (80047a8 <ENS_Upkeep+0x350>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f fe78 	bl	80141e4 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 fbf7 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fe44 	bl	800e188 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4ba6      	ldr	r3, [pc, #664]	@ (800479c <ENS_Upkeep+0x344>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 fbe5 	bl	8014cd4 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4ba1      	ldr	r3, [pc, #644]	@ (8004798 <ENS_Upkeep+0x340>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1de      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fe4a 	bl	800e1b0 <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e1d2      	b.n	80048c8 <ENS_Upkeep+0x470>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fe30 	bl	800e188 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 fbd8 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fe25 	bl	800e188 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a98      	ldr	r2, [pc, #608]	@ (80047c4 <ENS_Upkeep+0x36c>)
 8004562:	4b91      	ldr	r3, [pc, #580]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fe3c 	bl	80141e4 <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a96      	ldr	r2, [pc, #600]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004570:	4b8d      	ldr	r3, [pc, #564]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f fe35 	bl	80141e4 <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a93      	ldr	r2, [pc, #588]	@ (80047cc <ENS_Upkeep+0x374>)
 800457e:	4b8a      	ldr	r3, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f fe2e 	bl	80141e4 <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f010 fb9e 	bl	8014cd4 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004798 <ENS_Upkeep+0x340>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e197      	b.n	80048d6 <ENS_Upkeep+0x47e>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b7d      	ldr	r3, [pc, #500]	@ (800479c <ENS_Upkeep+0x344>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e193      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fdff 	bl	800e1b0 <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fdfb 	bl	800e1b0 <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fdf5 	bl	800e1b0 <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b77      	ldr	r3, [pc, #476]	@ (80047d0 <ENS_Upkeep+0x378>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b77      	ldr	r3, [pc, #476]	@ (80047d4 <ENS_Upkeep+0x37c>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b77      	ldr	r3, [pc, #476]	@ (80047d8 <ENS_Upkeep+0x380>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b77      	ldr	r3, [pc, #476]	@ (80047dc <ENS_Upkeep+0x384>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b77      	ldr	r3, [pc, #476]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b77      	ldr	r3, [pc, #476]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004608:	4a77      	ldr	r2, [pc, #476]	@ (80047e8 <ENS_Upkeep+0x390>)
 800460a:	4967      	ldr	r1, [pc, #412]	@ (80047a8 <ENS_Upkeep+0x350>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fde9 	bl	80141e4 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f010 fb5f 	bl	8014cd4 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b5e      	ldr	r3, [pc, #376]	@ (8004798 <ENS_Upkeep+0x340>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e158      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fdaf 	bl	800e188 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f010 fb49 	bl	8014cd4 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b53      	ldr	r3, [pc, #332]	@ (8004798 <ENS_Upkeep+0x340>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f010 fb4a 	bl	8014ce8 <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fd97 	bl	800e188 <setSensorLock>
      break;
 800465a:	e13c      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f010 fb40 	bl	8014ce8 <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f010 fb3a 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fd87 	bl	800e188 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b48      	ldr	r3, [pc, #288]	@ (800479c <ENS_Upkeep+0x344>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e129      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b5a      	ldr	r3, [pc, #360]	@ (80047ec <ENS_Upkeep+0x394>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d13b      	bne.n	8004702 <ENS_Upkeep+0x2aa>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b59      	ldr	r3, [pc, #356]	@ (80047f0 <ENS_Upkeep+0x398>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b57      	ldr	r3, [pc, #348]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b56      	ldr	r3, [pc, #344]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a56      	ldr	r2, [pc, #344]	@ (80047f4 <ENS_Upkeep+0x39c>)
 800469c:	4956      	ldr	r1, [pc, #344]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fd9d 	bl	80141e4 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 80046aa:	4b54      	ldr	r3, [pc, #336]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	4b53      	ldr	r3, [pc, #332]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4a53      	ldr	r2, [pc, #332]	@ (8004800 <ENS_Upkeep+0x3a8>)
 80046b4:	4950      	ldr	r1, [pc, #320]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	0003      	movs	r3, r0
 80046ba:	2002      	movs	r0, #2
 80046bc:	f00f fd92 	bl	80141e4 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80046c0:	4b4e      	ldr	r3, [pc, #312]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c2:	6898      	ldr	r0, [r3, #8]
 80046c4:	4b4d      	ldr	r3, [pc, #308]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004804 <ENS_Upkeep+0x3ac>)
 80046ca:	494b      	ldr	r1, [pc, #300]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	0003      	movs	r3, r0
 80046d0:	2002      	movs	r0, #2
 80046d2:	f00f fd87 	bl	80141e4 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80046d6:	4b49      	ldr	r3, [pc, #292]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046d8:	6918      	ldr	r0, [r3, #16]
 80046da:	4b48      	ldr	r3, [pc, #288]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4a4a      	ldr	r2, [pc, #296]	@ (8004808 <ENS_Upkeep+0x3b0>)
 80046e0:	4945      	ldr	r1, [pc, #276]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	0003      	movs	r3, r0
 80046e6:	2002      	movs	r0, #2
 80046e8:	f00f fd7c 	bl	80141e4 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80046ec:	4b43      	ldr	r3, [pc, #268]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ee:	6998      	ldr	r0, [r3, #24]
 80046f0:	4b42      	ldr	r3, [pc, #264]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4a45      	ldr	r2, [pc, #276]	@ (800480c <ENS_Upkeep+0x3b4>)
 80046f6:	4940      	ldr	r1, [pc, #256]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	0003      	movs	r3, r0
 80046fc:	2002      	movs	r0, #2
 80046fe:	f00f fd71 	bl	80141e4 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 8004702:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <ENS_Upkeep+0x394>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d103      	bne.n	8004712 <ENS_Upkeep+0x2ba>
 800470a:	4b38      	ldr	r3, [pc, #224]	@ (80047ec <ENS_Upkeep+0x394>)
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e005      	b.n	800471e <ENS_Upkeep+0x2c6>
 8004712:	4b36      	ldr	r3, [pc, #216]	@ (80047ec <ENS_Upkeep+0x394>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b34      	ldr	r3, [pc, #208]	@ (80047ec <ENS_Upkeep+0x394>)
 800471c:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004720:	7818      	ldrb	r0, [r3, #0]
 8004722:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004724:	8859      	ldrh	r1, [r3, #2]
 8004726:	4b32      	ldr	r3, [pc, #200]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004728:	889b      	ldrh	r3, [r3, #4]
 800472a:	001a      	movs	r2, r3
 800472c:	f000 fa20 	bl	8004b70 <setENS160>
    ENSState = ENS_LOW_POWER;
 8004730:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <ENS_Upkeep+0x344>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
    break;
 8004736:	e0ce      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004738:	f010 facc 	bl	8014cd4 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	22fa      	movs	r2, #250	@ 0xfa
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	189a      	adds	r2, r3, r2
 8004744:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <ENS_Upkeep+0x340>)
 8004746:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004748:	4b31      	ldr	r3, [pc, #196]	@ (8004810 <ENS_Upkeep+0x3b8>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2201      	movs	r2, #1
 800474e:	4053      	eors	r3, r2
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d100      	bne.n	8004758 <ENS_Upkeep+0x300>
 8004756:	e076      	b.n	8004846 <ENS_Upkeep+0x3ee>
 8004758:	4b2e      	ldr	r3, [pc, #184]	@ (8004814 <ENS_Upkeep+0x3bc>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	4053      	eors	r3, r2
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06f      	beq.n	8004846 <ENS_Upkeep+0x3ee>
 8004766:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <ENS_Upkeep+0x394>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d96b      	bls.n	8004846 <ENS_Upkeep+0x3ee>
      if (getSensorLock() != FREE) {
 800476e:	f009 fd1f 	bl	800e1b0 <getSensorLock>
 8004772:	1e03      	subs	r3, r0, #0
 8004774:	d000      	beq.n	8004778 <ENS_Upkeep+0x320>
 8004776:	e0a9      	b.n	80048cc <ENS_Upkeep+0x474>
        break;
      }
      setSensorLock(ENS160);
 8004778:	2004      	movs	r0, #4
 800477a:	f009 fd05 	bl	800e188 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 800477e:	1cfc      	adds	r4, r7, #3
 8004780:	2000      	movs	r0, #0
 8004782:	f7ff fb43 	bl	8003e0c <ENS160_setMode>
 8004786:	0003      	movs	r3, r0
 8004788:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 800478a:	1cfb      	adds	r3, r7, #3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d042      	beq.n	8004818 <ENS_Upkeep+0x3c0>
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004794:	e041      	b.n	800481a <ENS_Upkeep+0x3c2>
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	2000045c 	.word	0x2000045c
 800479c:	20000000 	.word	0x20000000
 80047a0:	0802e7ec 	.word	0x0802e7ec
 80047a4:	0802aa5c 	.word	0x0802aa5c
 80047a8:	0802a964 	.word	0x0802a964
 80047ac:	000be6e0 	.word	0x000be6e0
 80047b0:	20000e52 	.word	0x20000e52
 80047b4:	20000461 	.word	0x20000461
 80047b8:	0802aa90 	.word	0x0802aa90
 80047bc:	0802aa98 	.word	0x0802aa98
 80047c0:	0802aaa0 	.word	0x0802aaa0
 80047c4:	0802aac4 	.word	0x0802aac4
 80047c8:	0802aadc 	.word	0x0802aadc
 80047cc:	0802aafc 	.word	0x0802aafc
 80047d0:	0802ab14 	.word	0x0802ab14
 80047d4:	0802ab1c 	.word	0x0802ab1c
 80047d8:	0802ab24 	.word	0x0802ab24
 80047dc:	0802ab2c 	.word	0x0802ab2c
 80047e0:	0802ab34 	.word	0x0802ab34
 80047e4:	0802ab3c 	.word	0x0802ab3c
 80047e8:	0802ab44 	.word	0x0802ab44
 80047ec:	20000460 	.word	0x20000460
 80047f0:	20000490 	.word	0x20000490
 80047f4:	0802ab6c 	.word	0x0802ab6c
 80047f8:	0802a9d4 	.word	0x0802a9d4
 80047fc:	2000046c 	.word	0x2000046c
 8004800:	0802ab98 	.word	0x0802ab98
 8004804:	0802abb4 	.word	0x0802abb4
 8004808:	0802abd0 	.word	0x0802abd0
 800480c:	0802abec 	.word	0x0802abec
 8004810:	20002165 	.word	0x20002165
 8004814:	20002166 	.word	0x20002166
 8004818:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800481a:	4a33      	ldr	r2, [pc, #204]	@ (80048e8 <ENS_Upkeep+0x490>)
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	0010      	movs	r0, r2
 8004820:	4a32      	ldr	r2, [pc, #200]	@ (80048ec <ENS_Upkeep+0x494>)
 8004822:	4933      	ldr	r1, [pc, #204]	@ (80048f0 <ENS_Upkeep+0x498>)
 8004824:	9000      	str	r0, [sp, #0]
 8004826:	2003      	movs	r0, #3
 8004828:	f00f fcdc 	bl	80141e4 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 800482c:	200a      	movs	r0, #10
 800482e:	f010 fa5b 	bl	8014ce8 <HAL_Delay>
      setSensorLock(FREE);
 8004832:	2000      	movs	r0, #0
 8004834:	f009 fca8 	bl	800e188 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004838:	f010 fa4c 	bl	8014cd4 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	4a2d      	ldr	r2, [pc, #180]	@ (80048f4 <ENS_Upkeep+0x49c>)
 8004840:	189a      	adds	r2, r3, r2
 8004842:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <ENS_Upkeep+0x4a0>)
 8004844:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <ENS_Upkeep+0x4a4>)
 8004848:	2208      	movs	r2, #8
 800484a:	701a      	strb	r2, [r3, #0]
    break;
 800484c:	e043      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800484e:	f009 fcaf 	bl	800e1b0 <getSensorLock>
 8004852:	1e03      	subs	r3, r0, #0
 8004854:	d13c      	bne.n	80048d0 <ENS_Upkeep+0x478>
        break;
      }
      setSensorLock(ENS160);
 8004856:	2004      	movs	r0, #4
 8004858:	f009 fc96 	bl	800e188 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800485c:	1cba      	adds	r2, r7, #2
 800485e:	2301      	movs	r3, #1
 8004860:	2101      	movs	r1, #1
 8004862:	2010      	movs	r0, #16
 8004864:	f7ff f93a 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004868:	1cbb      	adds	r3, r7, #2
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <ENS_Upkeep+0x43c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004870:	1dfc      	adds	r4, r7, #7
 8004872:	2002      	movs	r0, #2
 8004874:	f7ff faca 	bl	8003e0c <ENS160_setMode>
 8004878:	0003      	movs	r3, r0
 800487a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800487c:	1dfb      	adds	r3, r7, #7
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <ENS_Upkeep+0x430>
 8004884:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <ENS_Upkeep+0x4a8>)
 8004886:	e000      	b.n	800488a <ENS_Upkeep+0x432>
 8004888:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800488a:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <ENS_Upkeep+0x4ac>)
 800488c:	4918      	ldr	r1, [pc, #96]	@ (80048f0 <ENS_Upkeep+0x498>)
 800488e:	2003      	movs	r0, #3
 8004890:	f00f fca8 	bl	80141e4 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004894:	200a      	movs	r0, #10
 8004896:	f010 fa27 	bl	8014ce8 <HAL_Delay>
      setSensorLock(FREE);
 800489a:	2000      	movs	r0, #0
 800489c:	f009 fc74 	bl	800e188 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 80048a0:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048a2:	2203      	movs	r2, #3
 80048a4:	701a      	strb	r2, [r3, #0]
    break;
 80048a6:	e016      	b.n	80048d6 <ENS_Upkeep+0x47e>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 80048a8:	4b14      	ldr	r3, [pc, #80]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048aa:	2202      	movs	r2, #2
 80048ac:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 80048ae:	f009 fc7f 	bl	800e1b0 <getSensorLock>
 80048b2:	0003      	movs	r3, r0
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d00d      	beq.n	80048d4 <ENS_Upkeep+0x47c>
      setSensorLock(FREE);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f009 fc65 	bl	800e188 <setSensorLock>
    }
    break;
 80048be:	e009      	b.n	80048d4 <ENS_Upkeep+0x47c>
    break;
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	e008      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	e006      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	e004      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	e002      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	e000      	b.n	80048d6 <ENS_Upkeep+0x47e>
    break;
 80048d4:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b003      	add	sp, #12
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	0802aa98 	.word	0x0802aa98
 80048e8:	20000460 	.word	0x20000460
 80048ec:	0802ac08 	.word	0x0802ac08
 80048f0:	0802a964 	.word	0x0802a964
 80048f4:	0000afc8 	.word	0x0000afc8
 80048f8:	2000045c 	.word	0x2000045c
 80048fc:	20000000 	.word	0x20000000
 8004900:	0802aa90 	.word	0x0802aa90
 8004904:	0802ac40 	.word	0x0802ac40

08004908 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 800490c:	4b02      	ldr	r3, [pc, #8]	@ (8004918 <forceNTPupdate+0x10>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200006a8 	.word	0x200006a8

0800491c <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004924:	f010 f9d6 	bl	8014cd4 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	18d2      	adds	r2, r2, r3
 800492e:	4b03      	ldr	r3, [pc, #12]	@ (800493c <setESPTimeStamp+0x20>)
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b002      	add	sp, #8
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	200006a4 	.word	0x200006a4

08004940 <setCharges>:

void setCharges(){
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004944:	f005 f93a 	bl	8009bbc <ReadBatteryVoltage>
 8004948:	1c02      	adds	r2, r0, #0
 800494a:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <setCharges+0x3c>)
 800494c:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800494e:	f005 f997 	bl	8009c80 <ReadSolarVoltage>
 8004952:	0003      	movs	r3, r0
 8004954:	0018      	movs	r0, r3
 8004956:	f7fe ff4b 	bl	80037f0 <__aeabi_i2d>
 800495a:	2200      	movs	r2, #0
 800495c:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <setCharges+0x40>)
 800495e:	f7fd fbbf 	bl	80020e0 <__aeabi_ddiv>
 8004962:	0002      	movs	r2, r0
 8004964:	000b      	movs	r3, r1
 8004966:	0010      	movs	r0, r2
 8004968:	0019      	movs	r1, r3
 800496a:	f7fe ffdb 	bl	8003924 <__aeabi_d2f>
 800496e:	1c02      	adds	r2, r0, #0
 8004970:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <setCharges+0x44>)
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	200005cc 	.word	0x200005cc
 8004980:	408f4000 	.word	0x408f4000
 8004984:	200005d0 	.word	0x200005d0

08004988 <getWifiCred>:

void getWifiCred(void){
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  ReadUint8ArrayEEprom(SSIDConfigAddr, (uint8_t*)Credentials.SSID, SSIDMaxLength);
 800498c:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <getWifiCred+0x58>)
 800498e:	4815      	ldr	r0, [pc, #84]	@ (80049e4 <getWifiCred+0x5c>)
 8004990:	2220      	movs	r2, #32
 8004992:	0019      	movs	r1, r3
 8004994:	f007 fdcc 	bl	800c530 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(pwdConfigAddr, (uint8_t*)Credentials.Password, pwdMaxLength);
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <getWifiCred+0x60>)
 800499a:	4814      	ldr	r0, [pc, #80]	@ (80049ec <getWifiCred+0x64>)
 800499c:	2240      	movs	r2, #64	@ 0x40
 800499e:	0019      	movs	r1, r3
 80049a0:	f007 fdc6 	bl	800c530 <ReadUint8ArrayEEprom>
  if ((Credentials.SSID[0] == 0) || (Credentials.Password[0] == 0)) {
 80049a4:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <getWifiCred+0x58>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <getWifiCred+0x2e>
 80049ac:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <getWifiCred+0x58>)
 80049ae:	2220      	movs	r2, #32
 80049b0:	5c9b      	ldrb	r3, [r3, r2]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <getWifiCred+0x3a>
    Error("Wifi credentials not found, reprogram or connect to PC and type Helpme");
 80049b6:	4a0e      	ldr	r2, [pc, #56]	@ (80049f0 <getWifiCred+0x68>)
 80049b8:	4b0e      	ldr	r3, [pc, #56]	@ (80049f4 <getWifiCred+0x6c>)
 80049ba:	0019      	movs	r1, r3
 80049bc:	2001      	movs	r0, #1
 80049be:	f00f fc11 	bl	80141e4 <CreateLine>
  }
  Info("The SSID is: %s", Credentials.SSID);
 80049c2:	4b07      	ldr	r3, [pc, #28]	@ (80049e0 <getWifiCred+0x58>)
 80049c4:	4a0c      	ldr	r2, [pc, #48]	@ (80049f8 <getWifiCred+0x70>)
 80049c6:	490d      	ldr	r1, [pc, #52]	@ (80049fc <getWifiCred+0x74>)
 80049c8:	2002      	movs	r0, #2
 80049ca:	f00f fc0b 	bl	80141e4 <CreateLine>
  Info("The Password is: %s", Credentials.Password);
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <getWifiCred+0x60>)
 80049d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004a00 <getWifiCred+0x78>)
 80049d2:	490a      	ldr	r1, [pc, #40]	@ (80049fc <getWifiCred+0x74>)
 80049d4:	2002      	movs	r0, #2
 80049d6:	f00f fc05 	bl	80141e4 <CreateLine>
}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200006b0 	.word	0x200006b0
 80049e4:	08080200 	.word	0x08080200
 80049e8:	200006d0 	.word	0x200006d0
 80049ec:	08080220 	.word	0x08080220
 80049f0:	0802ac70 	.word	0x0802ac70
 80049f4:	0802acb8 	.word	0x0802acb8
 80049f8:	0802acbc 	.word	0x0802acbc
 80049fc:	0802accc 	.word	0x0802accc
 8004a00:	0802acd0 	.word	0x0802acd0

08004a04 <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004a0a:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <checkName+0x5c>)
 8004a0c:	4815      	ldr	r0, [pc, #84]	@ (8004a64 <checkName+0x60>)
 8004a0e:	2220      	movs	r2, #32
 8004a10:	0019      	movs	r1, r3
 8004a12:	f007 fd8d 	bl	800c530 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004a16:	1dfb      	adds	r3, r7, #7
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	e00e      	b.n	8004a3c <checkName+0x38>
    configSum += nameConfig[i];
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	4a0f      	ldr	r2, [pc, #60]	@ (8004a60 <checkName+0x5c>)
 8004a24:	5cd3      	ldrb	r3, [r2, r3]
 8004a26:	001a      	movs	r2, r3
 8004a28:	4b0f      	ldr	r3, [pc, #60]	@ (8004a68 <checkName+0x64>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	18d2      	adds	r2, r2, r3
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <checkName+0x64>)
 8004a30:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004a32:	1dfb      	adds	r3, r7, #7
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	1dfb      	adds	r3, r7, #7
 8004a38:	3201      	adds	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	1dfb      	adds	r3, r7, #7
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b0b      	cmp	r3, #11
 8004a42:	d9ec      	bls.n	8004a1e <checkName+0x1a>
  }
  test = (configSum != 0);
 8004a44:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <checkName+0x64>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	4193      	sbcs	r3, r2
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4b07      	ldr	r3, [pc, #28]	@ (8004a6c <checkName+0x68>)
 8004a50:	701a      	strb	r2, [r3, #0]
  return test;
 8004a52:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <checkName+0x68>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	20000778 	.word	0x20000778
 8004a64:	08080090 	.word	0x08080090
 8004a68:	20000798 	.word	0x20000798
 8004a6c:	2000079c 	.word	0x2000079c

08004a70 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	@ 0x30
 8004a74:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8004a76:	003b      	movs	r3, r7
 8004a78:	4811      	ldr	r0, [pc, #68]	@ (8004ac0 <setModePowerMail+0x50>)
 8004a7a:	2230      	movs	r2, #48	@ 0x30
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	f007 fd57 	bl	800c530 <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 8004a82:	003b      	movs	r3, r7
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac4 <setModePowerMail+0x54>)
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac8 <setModePowerMail+0x58>)
 8004a8e:	0019      	movs	r1, r3
 8004a90:	2001      	movs	r0, #1
 8004a92:	f00f fba7 	bl	80141e4 <CreateLine>
 8004a96:	e00f      	b.n	8004ab8 <setModePowerMail+0x48>
    return;
  }
  sendpwremail = DO_PWR_MAIL;
 8004a98:	4b0c      	ldr	r3, [pc, #48]	@ (8004acc <setModePowerMail+0x5c>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad0 <setModePowerMail+0x60>)
 8004aa0:	2206      	movs	r2, #6
 8004aa2:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <setModePowerMail+0x64>)
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <setModePowerMail+0x68>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <setModePowerMail+0x6c>)
 8004ab0:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004ab2:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <setModePowerMail+0x68>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b00c      	add	sp, #48	@ 0x30
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	080802c0 	.word	0x080802c0
 8004ac4:	0802ace4 	.word	0x0802ace4
 8004ac8:	0802acb8 	.word	0x0802acb8
 8004acc:	20001114 	.word	0x20001114
 8004ad0:	20000712 	.word	0x20000712
 8004ad4:	20000030 	.word	0x20000030
 8004ad8:	200006a4 	.word	0x200006a4
 8004adc:	2000002c 	.word	0x2000002c

08004ae0 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004aea:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <setHIDS+0x20>)
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004af0:	4b03      	ldr	r3, [pc, #12]	@ (8004b00 <setHIDS+0x20>)
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b002      	add	sp, #8
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	20000714 	.word	0x20000714

08004b04 <setVOC>:

void setVOC(uint16_t voc) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	1dbb      	adds	r3, r7, #6
 8004b0e:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004b10:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <setVOC+0x20>)
 8004b12:	1dba      	adds	r2, r7, #6
 8004b14:	2148      	movs	r1, #72	@ 0x48
 8004b16:	8812      	ldrh	r2, [r2, #0]
 8004b18:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b002      	add	sp, #8
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	20000714 	.word	0x20000714

08004b28 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <setAHT2x+0x20>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
//  if (airhum > MeasVal.AHT2x_humiditymax) {
//    MeasVal.AHT2x_humiditymax = airhum;
//  }
  MeasVal.AHT2x_temperature = airtemp;
 8004b38:	4b03      	ldr	r3, [pc, #12]	@ (8004b48 <setAHT2x+0x20>)
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
//  if (airtemp > MeasVal.AHT2x_temperaturemax) {
//    MeasVal.AHT2x_temperaturemax = airtemp;
//  }
}
 8004b3e:	46c0      	nop			@ (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	20000714 	.word	0x20000714

08004b4c <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004b56:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <setBMP280+0x20>)
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	641a      	str	r2, [r3, #64]	@ 0x40
//  if (airtemp > MeasVal.BMP280_temperaturemax) {
//    MeasVal.BMP280_temperaturemax = airtemp;
//  }
  MeasVal.BMP280_airpressure = airhpa;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <setBMP280+0x20>)
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	645a      	str	r2, [r3, #68]	@ 0x44
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b002      	add	sp, #8
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	20000714 	.word	0x20000714

08004b70 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	0004      	movs	r4, r0
 8004b78:	0008      	movs	r0, r1
 8004b7a:	0011      	movs	r1, r2
 8004b7c:	1dfb      	adds	r3, r7, #7
 8004b7e:	1c22      	adds	r2, r4, #0
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	1c02      	adds	r2, r0, #0
 8004b86:	801a      	strh	r2, [r3, #0]
 8004b88:	1cbb      	adds	r3, r7, #2
 8004b8a:	1c0a      	adds	r2, r1, #0
 8004b8c:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <setENS160+0x74>)
 8004b90:	1dfa      	adds	r2, r7, #7
 8004b92:	2154      	movs	r1, #84	@ 0x54
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <setENS160+0x74>)
 8004b9a:	2255      	movs	r2, #85	@ 0x55
 8004b9c:	5c9b      	ldrb	r3, [r3, r2]
 8004b9e:	1dfa      	adds	r2, r7, #7
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d904      	bls.n	8004bb0 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <setENS160+0x74>)
 8004ba8:	1dfa      	adds	r2, r7, #7
 8004baa:	2155      	movs	r1, #85	@ 0x55
 8004bac:	7812      	ldrb	r2, [r2, #0]
 8004bae:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <setENS160+0x74>)
 8004bb2:	1d3a      	adds	r2, r7, #4
 8004bb4:	214a      	movs	r1, #74	@ 0x4a
 8004bb6:	8812      	ldrh	r2, [r2, #0]
 8004bb8:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004bba:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <setENS160+0x74>)
 8004bbc:	1cba      	adds	r2, r7, #2
 8004bbe:	2150      	movs	r1, #80	@ 0x50
 8004bc0:	8812      	ldrh	r2, [r2, #0]
 8004bc2:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004bc4:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <setENS160+0x74>)
 8004bc6:	2252      	movs	r2, #82	@ 0x52
 8004bc8:	5a9b      	ldrh	r3, [r3, r2]
 8004bca:	1cba      	adds	r2, r7, #2
 8004bcc:	8812      	ldrh	r2, [r2, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d904      	bls.n	8004bdc <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004bd2:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <setENS160+0x74>)
 8004bd4:	1cba      	adds	r2, r7, #2
 8004bd6:	2152      	movs	r1, #82	@ 0x52
 8004bd8:	8812      	ldrh	r2, [r2, #0]
 8004bda:	525a      	strh	r2, [r3, r1]
  }
}
 8004bdc:	46c0      	nop			@ (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b003      	add	sp, #12
 8004be2:	bd90      	pop	{r4, r7, pc}
 8004be4:	20000714 	.word	0x20000714

08004be8 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004bf4:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <setMic+0x28>)
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004bfa:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <setMic+0x28>)
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004c00:	4b03      	ldr	r3, [pc, #12]	@ (8004c10 <setMic+0x28>)
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b004      	add	sp, #16
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	20000714 	.word	0x20000714

08004c14 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	1dbb      	adds	r3, r7, #6
 8004c1e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004c20:	1dbb      	adds	r3, r7, #6
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7fc fdff 	bl	8001828 <__aeabi_i2f>
 8004c2a:	1c03      	adds	r3, r0, #0
 8004c2c:	490d      	ldr	r1, [pc, #52]	@ (8004c64 <setPM1p0+0x50>)
 8004c2e:	1c18      	adds	r0, r3, #0
 8004c30:	f7fc f838 	bl	8000ca4 <__aeabi_fdiv>
 8004c34:	1c03      	adds	r3, r0, #0
 8004c36:	1c1a      	adds	r2, r3, #0
 8004c38:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <setPM1p0+0x54>)
 8004c3a:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <setPM1p0+0x54>)
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <setPM1p0+0x54>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	1c19      	adds	r1, r3, #0
 8004c46:	1c10      	adds	r0, r2, #0
 8004c48:	f7fb fc86 	bl	8000558 <__aeabi_fcmpgt>
 8004c4c:	1e03      	subs	r3, r0, #0
 8004c4e:	d100      	bne.n	8004c52 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c50:	e003      	b.n	8004c5a <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c52:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <setPM1p0+0x54>)
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	4b04      	ldr	r3, [pc, #16]	@ (8004c68 <setPM1p0+0x54>)
 8004c58:	60da      	str	r2, [r3, #12]
}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	41200000 	.word	0x41200000
 8004c68:	20000714 	.word	0x20000714

08004c6c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	0002      	movs	r2, r0
 8004c74:	1dbb      	adds	r3, r7, #6
 8004c76:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c78:	1dbb      	adds	r3, r7, #6
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fc fdd3 	bl	8001828 <__aeabi_i2f>
 8004c82:	1c03      	adds	r3, r0, #0
 8004c84:	490d      	ldr	r1, [pc, #52]	@ (8004cbc <setPM2p5+0x50>)
 8004c86:	1c18      	adds	r0, r3, #0
 8004c88:	f7fc f80c 	bl	8000ca4 <__aeabi_fdiv>
 8004c8c:	1c03      	adds	r3, r0, #0
 8004c8e:	1c1a      	adds	r2, r3, #0
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <setPM2p5+0x54>)
 8004c92:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <setPM2p5+0x54>)
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <setPM2p5+0x54>)
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	1c19      	adds	r1, r3, #0
 8004c9e:	1c10      	adds	r0, r2, #0
 8004ca0:	f7fb fc5a 	bl	8000558 <__aeabi_fcmpgt>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d100      	bne.n	8004caa <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004ca8:	e003      	b.n	8004cb2 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004caa:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <setPM2p5+0x54>)
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <setPM2p5+0x54>)
 8004cb0:	615a      	str	r2, [r3, #20]
}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b002      	add	sp, #8
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	41200000 	.word	0x41200000
 8004cc0:	20000714 	.word	0x20000714

08004cc4 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	0002      	movs	r2, r0
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004cd0:	1dbb      	adds	r3, r7, #6
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7fc fda7 	bl	8001828 <__aeabi_i2f>
 8004cda:	1c03      	adds	r3, r0, #0
 8004cdc:	490d      	ldr	r1, [pc, #52]	@ (8004d14 <setPM4p0+0x50>)
 8004cde:	1c18      	adds	r0, r3, #0
 8004ce0:	f7fb ffe0 	bl	8000ca4 <__aeabi_fdiv>
 8004ce4:	1c03      	adds	r3, r0, #0
 8004ce6:	1c1a      	adds	r2, r3, #0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <setPM4p0+0x54>)
 8004cea:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004cec:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <setPM4p0+0x54>)
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	4b09      	ldr	r3, [pc, #36]	@ (8004d18 <setPM4p0+0x54>)
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	1c19      	adds	r1, r3, #0
 8004cf6:	1c10      	adds	r0, r2, #0
 8004cf8:	f7fb fc2e 	bl	8000558 <__aeabi_fcmpgt>
 8004cfc:	1e03      	subs	r3, r0, #0
 8004cfe:	d100      	bne.n	8004d02 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004d00:	e003      	b.n	8004d0a <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004d02:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <setPM4p0+0x54>)
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	4b04      	ldr	r3, [pc, #16]	@ (8004d18 <setPM4p0+0x54>)
 8004d08:	61da      	str	r2, [r3, #28]
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	41200000 	.word	0x41200000
 8004d18:	20000714 	.word	0x20000714

08004d1c <setPM10>:

void setPM10(uint16_t PM10) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	0002      	movs	r2, r0
 8004d24:	1dbb      	adds	r3, r7, #6
 8004d26:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004d28:	1dbb      	adds	r3, r7, #6
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fc fd7b 	bl	8001828 <__aeabi_i2f>
 8004d32:	1c03      	adds	r3, r0, #0
 8004d34:	490d      	ldr	r1, [pc, #52]	@ (8004d6c <setPM10+0x50>)
 8004d36:	1c18      	adds	r0, r3, #0
 8004d38:	f7fb ffb4 	bl	8000ca4 <__aeabi_fdiv>
 8004d3c:	1c03      	adds	r3, r0, #0
 8004d3e:	1c1a      	adds	r2, r3, #0
 8004d40:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <setPM10+0x54>)
 8004d42:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004d44:	4b0a      	ldr	r3, [pc, #40]	@ (8004d70 <setPM10+0x54>)
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <setPM10+0x54>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	1c19      	adds	r1, r3, #0
 8004d4e:	1c10      	adds	r0, r2, #0
 8004d50:	f7fb fc02 	bl	8000558 <__aeabi_fcmpgt>
 8004d54:	1e03      	subs	r3, r0, #0
 8004d56:	d100      	bne.n	8004d5a <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d58:	e003      	b.n	8004d62 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d5a:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <setPM10+0x54>)
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	4b04      	ldr	r3, [pc, #16]	@ (8004d70 <setPM10+0x54>)
 8004d60:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b002      	add	sp, #8
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	41200000 	.word	0x41200000
 8004d70:	20000714 	.word	0x20000714

08004d74 <setNOx>:

void setNOx(uint16_t nox) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	1dbb      	adds	r3, r7, #6
 8004d7e:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004d80:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <setNOx+0x38>)
 8004d82:	1dba      	adds	r2, r7, #6
 8004d84:	214c      	movs	r1, #76	@ 0x4c
 8004d86:	8812      	ldrh	r2, [r2, #0]
 8004d88:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d8a:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <setNOx+0x38>)
 8004d8c:	224e      	movs	r2, #78	@ 0x4e
 8004d8e:	5a9b      	ldrh	r3, [r3, r2]
 8004d90:	1dba      	adds	r2, r7, #6
 8004d92:	8812      	ldrh	r2, [r2, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d904      	bls.n	8004da2 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d98:	4b04      	ldr	r3, [pc, #16]	@ (8004dac <setNOx+0x38>)
 8004d9a:	1dba      	adds	r2, r7, #6
 8004d9c:	214e      	movs	r1, #78	@ 0x4e
 8004d9e:	8812      	ldrh	r2, [r2, #0]
 8004da0:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b002      	add	sp, #8
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	20000714 	.word	0x20000714

08004db0 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004dba:	490a      	ldr	r1, [pc, #40]	@ (8004de4 <SetSEN545temphum+0x34>)
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fb ff71 	bl	8000ca4 <__aeabi_fdiv>
 8004dc2:	1c03      	adds	r3, r0, #0
 8004dc4:	1c1a      	adds	r2, r3, #0
 8004dc6:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <SetSEN545temphum+0x38>)
 8004dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004dca:	4908      	ldr	r1, [pc, #32]	@ (8004dec <SetSEN545temphum+0x3c>)
 8004dcc:	6838      	ldr	r0, [r7, #0]
 8004dce:	f7fb ff69 	bl	8000ca4 <__aeabi_fdiv>
 8004dd2:	1c03      	adds	r3, r0, #0
 8004dd4:	1c1a      	adds	r2, r3, #0
 8004dd6:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <SetSEN545temphum+0x38>)
 8004dd8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b002      	add	sp, #8
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	43480000 	.word	0x43480000
 8004de8:	20000714 	.word	0x20000714
 8004dec:	42c80000 	.word	0x42c80000

08004df0 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004df4:	f009 fd98 	bl	800e928 <sen5x_Get_sen5x_enable_state>
 8004df8:	1e03      	subs	r3, r0, #0
 8004dfa:	d00f      	beq.n	8004e1c <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004e02:	4b0c      	ldr	r3, [pc, #48]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004e0e:	4b09      	ldr	r3, [pc, #36]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004e14:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e16:	224e      	movs	r2, #78	@ 0x4e
 8004e18:	2100      	movs	r1, #0
 8004e1a:	5299      	strh	r1, [r3, r2]
  }
//  MeasVal.AHT2x_humiditymax = 0.0;
//  MeasVal.AHT2x_temperaturemax = 0.0;
//  MeasVal.BMP280_temperaturemax = 0.0;
//  MeasVal.BMP280_airpressuremax = 0.0;
  MeasVal.eCO2Indexmax = 0;
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e1e:	2252      	movs	r2, #82	@ 0x52
 8004e20:	2100      	movs	r1, #0
 8004e22:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004e24:	4b03      	ldr	r3, [pc, #12]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e26:	2255      	movs	r2, #85	@ 0x55
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]
}
 8004e2c:	46c0      	nop			@ (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	20000714 	.word	0x20000714

08004e38 <SetConfigMode>:

void SetConfigMode(){
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <SetConfigMode+0x30>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	4053      	eors	r3, r2
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004e4a:	4a08      	ldr	r2, [pc, #32]	@ (8004e6c <SetConfigMode+0x34>)
 8004e4c:	4b08      	ldr	r3, [pc, #32]	@ (8004e70 <SetConfigMode+0x38>)
 8004e4e:	0019      	movs	r1, r3
 8004e50:	2003      	movs	r0, #3
 8004e52:	f00f f9c7 	bl	80141e4 <CreateLine>
  }
  ReconfigSet = true;
 8004e56:	4b04      	ldr	r3, [pc, #16]	@ (8004e68 <SetConfigMode+0x30>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <SetConfigMode+0x3c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	200005af 	.word	0x200005af
 8004e6c:	0802acfc 	.word	0x0802acfc
 8004e70:	0802ad1c 	.word	0x0802ad1c
 8004e74:	20001113 	.word	0x20001113

08004e78 <GetReconfigMode>:

bool GetReconfigMode() {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e7c:	4b02      	ldr	r3, [pc, #8]	@ (8004e88 <GetReconfigMode+0x10>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	200005af 	.word	0x200005af

08004e8c <ESP_GetUID>:

void ESP_GetUID(){
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004e90:	f00f ff6a 	bl	8014d68 <HAL_GetUIDw0>
 8004e94:	0002      	movs	r2, r0
 8004e96:	4b07      	ldr	r3, [pc, #28]	@ (8004eb4 <ESP_GetUID+0x28>)
 8004e98:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004e9a:	f00f ff6f 	bl	8014d7c <HAL_GetUIDw1>
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	4b04      	ldr	r3, [pc, #16]	@ (8004eb4 <ESP_GetUID+0x28>)
 8004ea2:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004ea4:	f00f ff74 	bl	8014d90 <HAL_GetUIDw2>
 8004ea8:	0002      	movs	r2, r0
 8004eaa:	4b02      	ldr	r3, [pc, #8]	@ (8004eb4 <ESP_GetUID+0x28>)
 8004eac:	609a      	str	r2, [r3, #8]
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200005b4 	.word	0x200005b4

08004eb8 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <ESP_Init+0x20>)
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004ec6:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <ESP_Init+0x24>)
 8004ec8:	2202      	movs	r2, #2
 8004eca:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004ecc:	f7ff ffde 	bl	8004e8c <ESP_GetUID>
//  beurs = checkEEprom();
}
 8004ed0:	46c0      	nop			@ (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	200004a4 	.word	0x200004a4
 8004edc:	20000030 	.word	0x20000030

08004ee0 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	000a      	movs	r2, r1
 8004eea:	1cbb      	adds	r3, r7, #2
 8004eec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004eee:	4b25      	ldr	r3, [pc, #148]	@ (8004f84 <ESP_Send+0xa4>)
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	250f      	movs	r5, #15
 8004ef4:	197c      	adds	r4, r7, r5
 8004ef6:	1cbb      	adds	r3, r7, #2
 8004ef8:	881a      	ldrh	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0019      	movs	r1, r3
 8004efe:	f018 fd3d 	bl	801d97c <HAL_UART_Transmit_DMA>
 8004f02:	0003      	movs	r3, r0
 8004f04:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f06:	197b      	adds	r3, r7, r5
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f88 <ESP_Send+0xa8>)
 8004f10:	4b1e      	ldr	r3, [pc, #120]	@ (8004f8c <ESP_Send+0xac>)
 8004f12:	0019      	movs	r1, r3
 8004f14:	2001      	movs	r0, #1
 8004f16:	f00f f965 	bl	80141e4 <CreateLine>
    return false;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e02e      	b.n	8004f7c <ESP_Send+0x9c>
  }
  if ((length > 90) && usblog) {
 8004f1e:	1cbb      	adds	r3, r7, #2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	2b5a      	cmp	r3, #90	@ 0x5a
 8004f24:	d923      	bls.n	8004f6e <ESP_Send+0x8e>
 8004f26:	4b1a      	ldr	r3, [pc, #104]	@ (8004f90 <ESP_Send+0xb0>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01f      	beq.n	8004f6e <ESP_Send+0x8e>
    char splitchar;
#define SPLIT_POS 76
    splitchar = command[SPLIT_POS];
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	334c      	adds	r3, #76	@ 0x4c
 8004f32:	001a      	movs	r2, r3
 8004f34:	240e      	movs	r4, #14
 8004f36:	193b      	adds	r3, r7, r4
 8004f38:	7812      	ldrb	r2, [r2, #0]
 8004f3a:	701a      	strb	r2, [r3, #0]
    command[SPLIT_POS] = '\0';
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	334c      	adds	r3, #76	@ 0x4c
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]
//    printf_USB((char*)"ESP_Send: ");
    printf_USB((char*)command);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f003 fdda 	bl	8008b00 <printf_USB>
    command[SPLIT_POS] = splitchar;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	334c      	adds	r3, #76	@ 0x4c
 8004f50:	193a      	adds	r2, r7, r4
 8004f52:	7812      	ldrb	r2, [r2, #0]
 8004f54:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)&command[SPLIT_POS]);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	334c      	adds	r3, #76	@ 0x4c
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f003 fdd0 	bl	8008b00 <printf_USB>
    printf("ESP_Send: %s", command);
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	4b0c      	ldr	r3, [pc, #48]	@ (8004f94 <ESP_Send+0xb4>)
 8004f64:	0011      	movs	r1, r2
 8004f66:	0018      	movs	r0, r3
 8004f68:	f021 fa9a 	bl	80264a0 <iprintf>
  if ((length > 90) && usblog) {
 8004f6c:	e005      	b.n	8004f7a <ESP_Send+0x9a>
  }
  else
    Debug("ESP_Send: %s", command);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a08      	ldr	r2, [pc, #32]	@ (8004f94 <ESP_Send+0xb4>)
 8004f72:	4909      	ldr	r1, [pc, #36]	@ (8004f98 <ESP_Send+0xb8>)
 8004f74:	2003      	movs	r0, #3
 8004f76:	f00f f935 	bl	80141e4 <CreateLine>
  return true;
 8004f7a:	2301      	movs	r3, #1
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b004      	add	sp, #16
 8004f82:	bdb0      	pop	{r4, r5, r7, pc}
 8004f84:	200004a4 	.word	0x200004a4
 8004f88:	0802ad20 	.word	0x0802ad20
 8004f8c:	0802acb8 	.word	0x0802acb8
 8004f90:	20001113 	.word	0x20001113
 8004f94:	0802ad40 	.word	0x0802ad40
 8004f98:	0802ad1c 	.word	0x0802ad1c

08004f9c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	000a      	movs	r2, r1
 8004fa6:	1cbb      	adds	r3, r7, #2
 8004fa8:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004faa:	4b5c      	ldr	r3, [pc, #368]	@ (800511c <ESP_Receive+0x180>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004fb0:	260f      	movs	r6, #15
 8004fb2:	19bb      	adds	r3, r7, r6
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	@ (8005120 <ESP_Receive+0x184>)
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	250d      	movs	r5, #13
 8004fbe:	197c      	adds	r4, r7, r5
 8004fc0:	1cbb      	adds	r3, r7, #2
 8004fc2:	881a      	ldrh	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	f018 fd68 	bl	801da9c <HAL_UART_Receive_DMA>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004fd0:	002c      	movs	r4, r5
 8004fd2:	193b      	adds	r3, r7, r4
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d100      	bne.n	8004fdc <ESP_Receive+0x40>
 8004fda:	e09a      	b.n	8005112 <ESP_Receive+0x176>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004fdc:	4b50      	ldr	r3, [pc, #320]	@ (8005120 <ESP_Receive+0x184>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2284      	movs	r2, #132	@ 0x84
 8004fe2:	589b      	ldr	r3, [r3, r2]
 8004fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8005124 <ESP_Receive+0x188>)
 8004fe6:	4950      	ldr	r1, [pc, #320]	@ (8005128 <ESP_Receive+0x18c>)
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f00f f8fb 	bl	80141e4 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004fee:	193b      	adds	r3, r7, r4
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d008      	beq.n	800500a <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004ff8:	4a4c      	ldr	r2, [pc, #304]	@ (800512c <ESP_Receive+0x190>)
 8004ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8005128 <ESP_Receive+0x18c>)
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	2001      	movs	r0, #1
 8005000:	f00f f8f0 	bl	80141e4 <CreateLine>
      reset = true;
 8005004:	19bb      	adds	r3, r7, r6
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 800500a:	230d      	movs	r3, #13
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2202      	movs	r2, #2
 8005012:	4013      	ands	r3, r2
 8005014:	d005      	beq.n	8005022 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8005016:	4a46      	ldr	r2, [pc, #280]	@ (8005130 <ESP_Receive+0x194>)
 8005018:	4b43      	ldr	r3, [pc, #268]	@ (8005128 <ESP_Receive+0x18c>)
 800501a:	0019      	movs	r1, r3
 800501c:	2001      	movs	r0, #1
 800501e:	f00f f8e1 	bl	80141e4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8005022:	230d      	movs	r3, #13
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2204      	movs	r2, #4
 800502a:	4013      	ands	r3, r2
 800502c:	d005      	beq.n	800503a <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 800502e:	4a41      	ldr	r2, [pc, #260]	@ (8005134 <ESP_Receive+0x198>)
 8005030:	4b3d      	ldr	r3, [pc, #244]	@ (8005128 <ESP_Receive+0x18c>)
 8005032:	0019      	movs	r1, r3
 8005034:	2001      	movs	r0, #1
 8005036:	f00f f8d5 	bl	80141e4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 800503a:	230d      	movs	r3, #13
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2208      	movs	r2, #8
 8005042:	4013      	ands	r3, r2
 8005044:	d005      	beq.n	8005052 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8005046:	4a3c      	ldr	r2, [pc, #240]	@ (8005138 <ESP_Receive+0x19c>)
 8005048:	4b37      	ldr	r3, [pc, #220]	@ (8005128 <ESP_Receive+0x18c>)
 800504a:	0019      	movs	r1, r3
 800504c:	2001      	movs	r0, #1
 800504e:	f00f f8c9 	bl	80141e4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8005052:	230d      	movs	r3, #13
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2210      	movs	r2, #16
 800505a:	4013      	ands	r3, r2
 800505c:	d005      	beq.n	800506a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 800505e:	4a37      	ldr	r2, [pc, #220]	@ (800513c <ESP_Receive+0x1a0>)
 8005060:	4b31      	ldr	r3, [pc, #196]	@ (8005128 <ESP_Receive+0x18c>)
 8005062:	0019      	movs	r1, r3
 8005064:	2001      	movs	r0, #1
 8005066:	f00f f8bd 	bl	80141e4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 800506a:	230d      	movs	r3, #13
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2220      	movs	r2, #32
 8005072:	4013      	ands	r3, r2
 8005074:	d005      	beq.n	8005082 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8005076:	4a32      	ldr	r2, [pc, #200]	@ (8005140 <ESP_Receive+0x1a4>)
 8005078:	4b2b      	ldr	r3, [pc, #172]	@ (8005128 <ESP_Receive+0x18c>)
 800507a:	0019      	movs	r1, r3
 800507c:	2001      	movs	r0, #1
 800507e:	f00f f8b1 	bl	80141e4 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8005082:	230d      	movs	r3, #13
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2240      	movs	r2, #64	@ 0x40
 800508a:	4013      	ands	r3, r2
 800508c:	d005      	beq.n	800509a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 800508e:	4a2d      	ldr	r2, [pc, #180]	@ (8005144 <ESP_Receive+0x1a8>)
 8005090:	4b25      	ldr	r3, [pc, #148]	@ (8005128 <ESP_Receive+0x18c>)
 8005092:	0019      	movs	r1, r3
 8005094:	2001      	movs	r0, #1
 8005096:	f00f f8a5 	bl	80141e4 <CreateLine>
    }
#endif
    if (reset) {
 800509a:	230f      	movs	r3, #15
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d031      	beq.n	8005108 <ESP_Receive+0x16c>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80050a4:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <ESP_Receive+0x1ac>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	2101      	movs	r1, #1
 80050aa:	0018      	movs	r0, r3
 80050ac:	f011 f8a3 	bl	80161f6 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 80050b0:	200a      	movs	r0, #10
 80050b2:	f00f fe19 	bl	8014ce8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80050b6:	2380      	movs	r3, #128	@ 0x80
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4824      	ldr	r0, [pc, #144]	@ (800514c <ESP_Receive+0x1b0>)
 80050bc:	2200      	movs	r2, #0
 80050be:	0019      	movs	r1, r3
 80050c0:	f011 f899 	bl	80161f6 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 80050c4:	200a      	movs	r0, #10
 80050c6:	f00f fe0f 	bl	8014ce8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80050ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <ESP_Receive+0x1ac>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	2102      	movs	r1, #2
 80050d0:	0018      	movs	r0, r3
 80050d2:	f011 f890 	bl	80161f6 <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 80050d6:	230e      	movs	r3, #14
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e00c      	b.n	80050fa <ESP_Receive+0x15e>
        SetAllREDLED();
 80050e0:	f00d fefa 	bl	8012ed8 <SetAllREDLED>
        HAL_Delay(1000);
 80050e4:	23fa      	movs	r3, #250	@ 0xfa
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	0018      	movs	r0, r3
 80050ea:	f00f fdfd 	bl	8014ce8 <HAL_Delay>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 80050ee:	210e      	movs	r1, #14
 80050f0:	187b      	adds	r3, r7, r1
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	187b      	adds	r3, r7, r1
 80050f6:	3201      	adds	r2, #1
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	230e      	movs	r3, #14
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b09      	cmp	r3, #9
 8005102:	d9ed      	bls.n	80050e0 <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 8005104:	f010 faaf 	bl	8015666 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8005108:	4b04      	ldr	r3, [pc, #16]	@ (800511c <ESP_Receive+0x180>)
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
    return false;
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <ESP_Receive+0x178>
  }
  return true;
 8005112:	2301      	movs	r3, #1
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b005      	add	sp, #20
 800511a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800511c:	200004a8 	.word	0x200004a8
 8005120:	200004a4 	.word	0x200004a4
 8005124:	0802ad50 	.word	0x0802ad50
 8005128:	0802acb8 	.word	0x0802acb8
 800512c:	0802ad80 	.word	0x0802ad80
 8005130:	0802ada4 	.word	0x0802ada4
 8005134:	0802adc8 	.word	0x0802adc8
 8005138:	0802adec 	.word	0x0802adec
 800513c:	0802ae10 	.word	0x0802ae10
 8005140:	0802ae3c 	.word	0x0802ae3c
 8005144:	0802ae6c 	.word	0x0802ae6c
 8005148:	50001c00 	.word	0x50001c00
 800514c:	50000800 	.word	0x50000800

08005150 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8005158:	4b39      	ldr	r3, [pc, #228]	@ (8005240 <HAL_UART_ErrorCallback+0xf0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	429a      	cmp	r2, r3
 8005160:	d16b      	bne.n	800523a <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2284      	movs	r2, #132	@ 0x84
 8005166:	589b      	ldr	r3, [r3, r2]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d065      	beq.n	8005238 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2284      	movs	r2, #132	@ 0x84
 8005170:	589b      	ldr	r3, [r3, r2]
 8005172:	4a34      	ldr	r2, [pc, #208]	@ (8005244 <HAL_UART_ErrorCallback+0xf4>)
 8005174:	4934      	ldr	r1, [pc, #208]	@ (8005248 <HAL_UART_ErrorCallback+0xf8>)
 8005176:	2003      	movs	r0, #3
 8005178:	f00f f834 	bl	80141e4 <CreateLine>
    switch (huart->ErrorCode) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2284      	movs	r2, #132	@ 0x84
 8005180:	589b      	ldr	r3, [r3, r2]
 8005182:	2b0c      	cmp	r3, #12
 8005184:	d851      	bhi.n	800522a <HAL_UART_ErrorCallback+0xda>
 8005186:	009a      	lsls	r2, r3, #2
 8005188:	4b30      	ldr	r3, [pc, #192]	@ (800524c <HAL_UART_ErrorCallback+0xfc>)
 800518a:	18d3      	adds	r3, r2, r3
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8005190:	4a2f      	ldr	r2, [pc, #188]	@ (8005250 <HAL_UART_ErrorCallback+0x100>)
 8005192:	4b30      	ldr	r3, [pc, #192]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 8005194:	0019      	movs	r1, r3
 8005196:	2001      	movs	r0, #1
 8005198:	f00f f824 	bl	80141e4 <CreateLine>
        break;
 800519c:	e04d      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 800519e:	4a2e      	ldr	r2, [pc, #184]	@ (8005258 <HAL_UART_ErrorCallback+0x108>)
 80051a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 80051a2:	0019      	movs	r1, r3
 80051a4:	2001      	movs	r0, #1
 80051a6:	f00f f81d 	bl	80141e4 <CreateLine>
        break;
 80051aa:	e046      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 80051ac:	4a2b      	ldr	r2, [pc, #172]	@ (800525c <HAL_UART_ErrorCallback+0x10c>)
 80051ae:	4b29      	ldr	r3, [pc, #164]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 80051b0:	0019      	movs	r1, r3
 80051b2:	2001      	movs	r0, #1
 80051b4:	f00f f816 	bl	80141e4 <CreateLine>
        break;
 80051b8:	e03f      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 80051ba:	4a29      	ldr	r2, [pc, #164]	@ (8005260 <HAL_UART_ErrorCallback+0x110>)
 80051bc:	4b25      	ldr	r3, [pc, #148]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 80051be:	0019      	movs	r1, r3
 80051c0:	2001      	movs	r0, #1
 80051c2:	f00f f80f 	bl	80141e4 <CreateLine>
        break;
 80051c6:	e038      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 80051c8:	4a26      	ldr	r2, [pc, #152]	@ (8005264 <HAL_UART_ErrorCallback+0x114>)
 80051ca:	4b22      	ldr	r3, [pc, #136]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 80051cc:	0019      	movs	r1, r3
 80051ce:	2001      	movs	r0, #1
 80051d0:	f00f f808 	bl	80141e4 <CreateLine>
        break;
 80051d4:	e031      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 80051d6:	4a24      	ldr	r2, [pc, #144]	@ (8005268 <HAL_UART_ErrorCallback+0x118>)
 80051d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 80051da:	0019      	movs	r1, r3
 80051dc:	2001      	movs	r0, #1
 80051de:	f00f f801 	bl	80141e4 <CreateLine>
        break;
 80051e2:	e02a      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 80051e4:	4a21      	ldr	r2, [pc, #132]	@ (800526c <HAL_UART_ErrorCallback+0x11c>)
 80051e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 80051e8:	0019      	movs	r1, r3
 80051ea:	2001      	movs	r0, #1
 80051ec:	f00e fffa 	bl	80141e4 <CreateLine>
        break;
 80051f0:	e023      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 80051f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <HAL_UART_ErrorCallback+0x120>)
 80051f4:	4b17      	ldr	r3, [pc, #92]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 80051f6:	0019      	movs	r1, r3
 80051f8:	2001      	movs	r0, #1
 80051fa:	f00e fff3 	bl	80141e4 <CreateLine>
        break;
 80051fe:	e01c      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8005200:	4a1c      	ldr	r2, [pc, #112]	@ (8005274 <HAL_UART_ErrorCallback+0x124>)
 8005202:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 8005204:	0019      	movs	r1, r3
 8005206:	2001      	movs	r0, #1
 8005208:	f00e ffec 	bl	80141e4 <CreateLine>
        break;
 800520c:	e015      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 800520e:	4a1a      	ldr	r2, [pc, #104]	@ (8005278 <HAL_UART_ErrorCallback+0x128>)
 8005210:	4b10      	ldr	r3, [pc, #64]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 8005212:	0019      	movs	r1, r3
 8005214:	2001      	movs	r0, #1
 8005216:	f00e ffe5 	bl	80141e4 <CreateLine>
        break;
 800521a:	e00e      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 800521c:	4a17      	ldr	r2, [pc, #92]	@ (800527c <HAL_UART_ErrorCallback+0x12c>)
 800521e:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 8005220:	0019      	movs	r1, r3
 8005222:	2001      	movs	r0, #1
 8005224:	f00e ffde 	bl	80141e4 <CreateLine>
        break;
 8005228:	e007      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 800522a:	4a15      	ldr	r2, [pc, #84]	@ (8005280 <HAL_UART_ErrorCallback+0x130>)
 800522c:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_UART_ErrorCallback+0x104>)
 800522e:	0019      	movs	r1, r3
 8005230:	2001      	movs	r0, #1
 8005232:	f00e ffd7 	bl	80141e4 <CreateLine>
 8005236:	e000      	b.n	800523a <HAL_UART_ErrorCallback+0xea>
      return;
 8005238:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800523a:	46bd      	mov	sp, r7
 800523c:	b002      	add	sp, #8
 800523e:	bd80      	pop	{r7, pc}
 8005240:	200004a4 	.word	0x200004a4
 8005244:	0802ae9c 	.word	0x0802ae9c
 8005248:	0802ad1c 	.word	0x0802ad1c
 800524c:	0802e840 	.word	0x0802e840
 8005250:	0802aecc 	.word	0x0802aecc
 8005254:	0802acb8 	.word	0x0802acb8
 8005258:	0802af00 	.word	0x0802af00
 800525c:	0802af2c 	.word	0x0802af2c
 8005260:	0802af60 	.word	0x0802af60
 8005264:	0802af8c 	.word	0x0802af8c
 8005268:	0802afb4 	.word	0x0802afb4
 800526c:	0802afe4 	.word	0x0802afe4
 8005270:	0802b01c 	.word	0x0802b01c
 8005274:	0802b054 	.word	0x0802b054
 8005278:	0802b07c 	.word	0x0802b07c
 800527c:	0802b0a4 	.word	0x0802b0a4
 8005280:	0802b0d0 	.word	0x0802b0d0

08005284 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b42      	cmp	r3, #66	@ 0x42
 8005296:	d905      	bls.n	80052a4 <isKeyValid+0x20>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2bff      	cmp	r3, #255	@ 0xff
 800529e:	d001      	beq.n	80052a4 <isKeyValid+0x20>
    return true;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e03e      	b.n	8005322 <isKeyValid+0x9e>
  else {
    Error("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 80052a4:	68b8      	ldr	r0, [r7, #8]
 80052a6:	4a21      	ldr	r2, [pc, #132]	@ (800532c <isKeyValid+0xa8>)
 80052a8:	4921      	ldr	r1, [pc, #132]	@ (8005330 <isKeyValid+0xac>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	0003      	movs	r3, r0
 80052b0:	2001      	movs	r0, #1
 80052b2:	f00e ff97 	bl	80141e4 <CreateLine>
    for (int i = 0; i < 12; i++) {
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e01e      	b.n	80052fa <isKeyValid+0x76>
      if (usblog && Check_USB_PowerOn()) {
 80052bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005334 <isKeyValid+0xb0>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00d      	beq.n	80052e0 <isKeyValid+0x5c>
 80052c4:	f004 fd30 	bl	8009d28 <Check_USB_PowerOn>
 80052c8:	1e03      	subs	r3, r0, #0
 80052ca:	d009      	beq.n	80052e0 <isKeyValid+0x5c>
        printf_USB("%02x", data[i]);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	18d3      	adds	r3, r2, r3
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	001a      	movs	r2, r3
 80052d6:	4b18      	ldr	r3, [pc, #96]	@ (8005338 <isKeyValid+0xb4>)
 80052d8:	0011      	movs	r1, r2
 80052da:	0018      	movs	r0, r3
 80052dc:	f003 fc10 	bl	8008b00 <printf_USB>
      }
      printf("%02x", data[i]);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	18d3      	adds	r3, r2, r3
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	001a      	movs	r2, r3
 80052ea:	4b13      	ldr	r3, [pc, #76]	@ (8005338 <isKeyValid+0xb4>)
 80052ec:	0011      	movs	r1, r2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f021 f8d6 	bl	80264a0 <iprintf>
    for (int i = 0; i < 12; i++) {
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3301      	adds	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b0b      	cmp	r3, #11
 80052fe:	dddd      	ble.n	80052bc <isKeyValid+0x38>
    }
    if (usblog && Check_USB_PowerOn()) {
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <isKeyValid+0xb0>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <isKeyValid+0x94>
 8005308:	f004 fd0e 	bl	8009d28 <Check_USB_PowerOn>
 800530c:	1e03      	subs	r3, r0, #0
 800530e:	d003      	beq.n	8005318 <isKeyValid+0x94>
      printf_USB("\r\n");
 8005310:	4b0a      	ldr	r3, [pc, #40]	@ (800533c <isKeyValid+0xb8>)
 8005312:	0018      	movs	r0, r3
 8005314:	f003 fbf4 	bl	8008b00 <printf_USB>
    }
    printf("\r\n");
 8005318:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <isKeyValid+0xbc>)
 800531a:	0018      	movs	r0, r3
 800531c:	f021 f926 	bl	802656c <puts>
    return false;
 8005320:	2300      	movs	r3, #0
  }
}
 8005322:	0018      	movs	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	b006      	add	sp, #24
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			@ (mov r8, r8)
 800532c:	0802b0f4 	.word	0x0802b0f4
 8005330:	0802acb8 	.word	0x0802acb8
 8005334:	20001113 	.word	0x20001113
 8005338:	0802b12c 	.word	0x0802b12c
 800533c:	0802b134 	.word	0x0802b134
 8005340:	0802b138 	.word	0x0802b138

08005344 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e010      	b.n	8005376 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	001a      	movs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	1898      	adds	r0, r3, r2
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	18d3      	adds	r3, r2, r3
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	001a      	movs	r2, r3
 8005368:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <uint8ArrayToString+0x44>)
 800536a:	0019      	movs	r1, r3
 800536c:	f021 f908 	bl	8026580 <siprintf>
  for (int i = 0; i < 12; i++) {
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b0b      	cmp	r3, #11
 800537a:	ddeb      	ble.n	8005354 <uint8ArrayToString+0x10>
  }
}
 800537c:	46c0      	nop			@ (mov r8, r8)
 800537e:	46c0      	nop			@ (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	b004      	add	sp, #16
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			@ (mov r8, r8)
 8005388:	0802b12c 	.word	0x0802b12c

0800538c <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b087      	sub	sp, #28
 8005390:	af02      	add	r7, sp, #8
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	000a      	movs	r2, r1
 8005396:	1cfb      	adds	r3, r7, #3
 8005398:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 800539a:	240e      	movs	r4, #14
 800539c:	193b      	adds	r3, r7, r4
 800539e:	2200      	movs	r2, #0
 80053a0:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80053a2:	4b41      	ldr	r3, [pc, #260]	@ (80054a8 <CreateMailMessage+0x11c>)
 80053a4:	4841      	ldr	r0, [pc, #260]	@ (80054ac <CreateMailMessage+0x120>)
 80053a6:	2220      	movs	r2, #32
 80053a8:	0019      	movs	r1, r3
 80053aa:	f007 f8c1 	bl	800c530 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 80053ae:	4b40      	ldr	r3, [pc, #256]	@ (80054b0 <CreateMailMessage+0x124>)
 80053b0:	4840      	ldr	r0, [pc, #256]	@ (80054b4 <CreateMailMessage+0x128>)
 80053b2:	2230      	movs	r2, #48	@ 0x30
 80053b4:	0019      	movs	r1, r3
 80053b6:	f007 f8bb 	bl	800c530 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 80053ba:	4b3f      	ldr	r3, [pc, #252]	@ (80054b8 <CreateMailMessage+0x12c>)
 80053bc:	483f      	ldr	r0, [pc, #252]	@ (80054bc <CreateMailMessage+0x130>)
 80053be:	2230      	movs	r2, #48	@ 0x30
 80053c0:	0019      	movs	r1, r3
 80053c2:	f007 f8b5 	bl	800c530 <ReadUint8ArrayEEprom>
  sprintf(message, "{\"sender\": \"%s\",\"to\": [\"%s\"],\"subject\": \"Battery status\",", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 80053c6:	4b3c      	ldr	r3, [pc, #240]	@ (80054b8 <CreateMailMessage+0x12c>)
 80053c8:	4a39      	ldr	r2, [pc, #228]	@ (80054b0 <CreateMailMessage+0x124>)
 80053ca:	493d      	ldr	r1, [pc, #244]	@ (80054c0 <CreateMailMessage+0x134>)
 80053cc:	483d      	ldr	r0, [pc, #244]	@ (80054c4 <CreateMailMessage+0x138>)
 80053ce:	f021 f8d7 	bl	8026580 <siprintf>
  lngth = strlen(message);
 80053d2:	4b3c      	ldr	r3, [pc, #240]	@ (80054c4 <CreateMailMessage+0x138>)
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7fa fec9 	bl	800016c <strlen>
 80053da:	0002      	movs	r2, r0
 80053dc:	193b      	adds	r3, r7, r4
 80053de:	801a      	strh	r2, [r3, #0]
  if (send) {
 80053e0:	1cfb      	adds	r3, r7, #3
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d019      	beq.n	800541c <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80053e8:	4b36      	ldr	r3, [pc, #216]	@ (80054c4 <CreateMailMessage+0x138>)
 80053ea:	0018      	movs	r0, r3
 80053ec:	f7fa febe 	bl	800016c <strlen>
 80053f0:	0003      	movs	r3, r0
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	4b33      	ldr	r3, [pc, #204]	@ (80054c4 <CreateMailMessage+0x138>)
 80053f6:	0011      	movs	r1, r2
 80053f8:	0018      	movs	r0, r3
 80053fa:	f7ff fd71 	bl	8004ee0 <ESP_Send>
 80053fe:	0003      	movs	r3, r0
 8005400:	001a      	movs	r2, r3
 8005402:	4b31      	ldr	r3, [pc, #196]	@ (80054c8 <CreateMailMessage+0x13c>)
 8005404:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <CreateMailMessage+0x140>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	001a      	movs	r2, r3
 800540c:	4b2e      	ldr	r3, [pc, #184]	@ (80054c8 <CreateMailMessage+0x13c>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	4013      	ands	r3, r2
 8005412:	1e5a      	subs	r2, r3, #1
 8005414:	4193      	sbcs	r3, r2
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b2c      	ldr	r3, [pc, #176]	@ (80054cc <CreateMailMessage+0x140>)
 800541a:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV, about 20%%\"}", (char*)nameConfig, ReadBatteryVoltage());
 800541c:	f004 fbce 	bl	8009bbc <ReadBatteryVoltage>
 8005420:	1c03      	adds	r3, r0, #0
 8005422:	1c18      	adds	r0, r3, #0
 8005424:	f7fe fa36 	bl	8003894 <__aeabi_f2d>
 8005428:	0002      	movs	r2, r0
 800542a:	000b      	movs	r3, r1
 800542c:	4c1e      	ldr	r4, [pc, #120]	@ (80054a8 <CreateMailMessage+0x11c>)
 800542e:	4928      	ldr	r1, [pc, #160]	@ (80054d0 <CreateMailMessage+0x144>)
 8005430:	4824      	ldr	r0, [pc, #144]	@ (80054c4 <CreateMailMessage+0x138>)
 8005432:	9200      	str	r2, [sp, #0]
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	0022      	movs	r2, r4
 8005438:	f021 f8a2 	bl	8026580 <siprintf>
  lngth += strlen(message);
 800543c:	4b21      	ldr	r3, [pc, #132]	@ (80054c4 <CreateMailMessage+0x138>)
 800543e:	0018      	movs	r0, r3
 8005440:	f7fa fe94 	bl	800016c <strlen>
 8005444:	0003      	movs	r3, r0
 8005446:	b299      	uxth	r1, r3
 8005448:	220e      	movs	r2, #14
 800544a:	18bb      	adds	r3, r7, r2
 800544c:	18ba      	adds	r2, r7, r2
 800544e:	8812      	ldrh	r2, [r2, #0]
 8005450:	188a      	adds	r2, r1, r2
 8005452:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005454:	1cfb      	adds	r3, r7, #3
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d019      	beq.n	8005490 <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800545c:	4b19      	ldr	r3, [pc, #100]	@ (80054c4 <CreateMailMessage+0x138>)
 800545e:	0018      	movs	r0, r3
 8005460:	f7fa fe84 	bl	800016c <strlen>
 8005464:	0003      	movs	r3, r0
 8005466:	b29a      	uxth	r2, r3
 8005468:	4b16      	ldr	r3, [pc, #88]	@ (80054c4 <CreateMailMessage+0x138>)
 800546a:	0011      	movs	r1, r2
 800546c:	0018      	movs	r0, r3
 800546e:	f7ff fd37 	bl	8004ee0 <ESP_Send>
 8005472:	0003      	movs	r3, r0
 8005474:	001a      	movs	r2, r3
 8005476:	4b14      	ldr	r3, [pc, #80]	@ (80054c8 <CreateMailMessage+0x13c>)
 8005478:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800547a:	4b14      	ldr	r3, [pc, #80]	@ (80054cc <CreateMailMessage+0x140>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	001a      	movs	r2, r3
 8005480:	4b11      	ldr	r3, [pc, #68]	@ (80054c8 <CreateMailMessage+0x13c>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	4013      	ands	r3, r2
 8005486:	1e5a      	subs	r2, r3, #1
 8005488:	4193      	sbcs	r3, r2
 800548a:	b2da      	uxtb	r2, r3
 800548c:	4b0f      	ldr	r3, [pc, #60]	@ (80054cc <CreateMailMessage+0x140>)
 800548e:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8005490:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <CreateMailMessage+0x140>)
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	701a      	strb	r2, [r3, #0]
  return lngth;
 8005498:	230e      	movs	r3, #14
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	881b      	ldrh	r3, [r3, #0]
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b005      	add	sp, #20
 80054a4:	bd90      	pop	{r4, r7, pc}
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	200007a0 	.word	0x200007a0
 80054ac:	08080090 	.word	0x08080090
 80054b0:	200007c0 	.word	0x200007c0
 80054b4:	08080260 	.word	0x08080260
 80054b8:	200007f0 	.word	0x200007f0
 80054bc:	08080290 	.word	0x08080290
 80054c0:	0802b13c 	.word	0x0802b13c
 80054c4:	200005d4 	.word	0x200005d4
 80054c8:	20000820 	.word	0x20000820
 80054cc:	20000031 	.word	0x20000031
 80054d0:	0802b178 	.word	0x0802b178

080054d4 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 80054d4:	b5b0      	push	{r4, r5, r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af02      	add	r7, sp, #8
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	000a      	movs	r2, r1
 80054de:	1cfb      	adds	r3, r7, #3
 80054e0:	701a      	strb	r2, [r3, #0]
  static char uptimeBuf[14];
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 80054e2:	f7ff fa8f 	bl	8004a04 <checkName>
 80054e6:	1e03      	subs	r3, r0, #0
 80054e8:	d00a      	beq.n	8005500 <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80054ea:	4b03      	ldr	r3, [pc, #12]	@ (80054f8 <CreateMessage+0x24>)
 80054ec:	4803      	ldr	r0, [pc, #12]	@ (80054fc <CreateMessage+0x28>)
 80054ee:	2220      	movs	r2, #32
 80054f0:	0019      	movs	r1, r3
 80054f2:	f007 f81d 	bl	800c530 <ReadUint8ArrayEEprom>
 80054f6:	e009      	b.n	800550c <CreateMessage+0x38>
 80054f8:	20000824 	.word	0x20000824
 80054fc:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8005500:	4bed      	ldr	r3, [pc, #948]	@ (80058b8 <CreateMessage+0x3e4>)
 8005502:	4aee      	ldr	r2, [pc, #952]	@ (80058bc <CreateMessage+0x3e8>)
 8005504:	6811      	ldr	r1, [r2, #0]
 8005506:	6019      	str	r1, [r3, #0]
 8005508:	7912      	ldrb	r2, [r2, #4]
 800550a:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 800550c:	f7ff fa18 	bl	8004940 <setCharges>
  uint16_t index = 0;
 8005510:	250e      	movs	r5, #14
 8005512:	197b      	adds	r3, r7, r5
 8005514:	2200      	movs	r2, #0
 8005516:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8005518:	197b      	adds	r3, r7, r5
 800551a:	881a      	ldrh	r2, [r3, #0]
 800551c:	4be8      	ldr	r3, [pc, #928]	@ (80058c0 <CreateMessage+0x3ec>)
 800551e:	18d3      	adds	r3, r2, r3
 8005520:	4ae8      	ldr	r2, [pc, #928]	@ (80058c4 <CreateMessage+0x3f0>)
 8005522:	0011      	movs	r1, r2
 8005524:	0018      	movs	r0, r3
 8005526:	f021 f82b 	bl	8026580 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 800552a:	4be7      	ldr	r3, [pc, #924]	@ (80058c8 <CreateMessage+0x3f4>)
 800552c:	48e7      	ldr	r0, [pc, #924]	@ (80058cc <CreateMessage+0x3f8>)
 800552e:	220c      	movs	r2, #12
 8005530:	0019      	movs	r1, r3
 8005532:	f006 fffd 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005536:	4ae4      	ldr	r2, [pc, #912]	@ (80058c8 <CreateMessage+0x3f4>)
 8005538:	4be5      	ldr	r3, [pc, #916]	@ (80058d0 <CreateMessage+0x3fc>)
 800553a:	0011      	movs	r1, r2
 800553c:	0018      	movs	r0, r3
 800553e:	f7ff ff01 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 8005542:	4be4      	ldr	r3, [pc, #912]	@ (80058d4 <CreateMessage+0x400>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	1c18      	adds	r0, r3, #0
 8005548:	f7fe f9a4 	bl	8003894 <__aeabi_f2d>
 800554c:	0002      	movs	r2, r0
 800554e:	000b      	movs	r3, r1
 8005550:	4cdf      	ldr	r4, [pc, #892]	@ (80058d0 <CreateMessage+0x3fc>)
 8005552:	49e1      	ldr	r1, [pc, #900]	@ (80058d8 <CreateMessage+0x404>)
 8005554:	48e1      	ldr	r0, [pc, #900]	@ (80058dc <CreateMessage+0x408>)
 8005556:	9200      	str	r2, [sp, #0]
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	0022      	movs	r2, r4
 800555c:	f021 f810 	bl	8026580 <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 8005560:	4bd7      	ldr	r3, [pc, #860]	@ (80058c0 <CreateMessage+0x3ec>)
 8005562:	0018      	movs	r0, r3
 8005564:	f7fa fe02 	bl	800016c <strlen>
 8005568:	0002      	movs	r2, r0
 800556a:	197b      	adds	r3, r7, r5
 800556c:	801a      	strh	r2, [r3, #0]
  if (send) {
 800556e:	1cfb      	adds	r3, r7, #3
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d019      	beq.n	80055aa <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005576:	4bd2      	ldr	r3, [pc, #840]	@ (80058c0 <CreateMessage+0x3ec>)
 8005578:	0018      	movs	r0, r3
 800557a:	f7fa fdf7 	bl	800016c <strlen>
 800557e:	0003      	movs	r3, r0
 8005580:	b29a      	uxth	r2, r3
 8005582:	4bcf      	ldr	r3, [pc, #828]	@ (80058c0 <CreateMessage+0x3ec>)
 8005584:	0011      	movs	r1, r2
 8005586:	0018      	movs	r0, r3
 8005588:	f7ff fcaa 	bl	8004ee0 <ESP_Send>
 800558c:	0003      	movs	r3, r0
 800558e:	001a      	movs	r2, r3
 8005590:	4bd3      	ldr	r3, [pc, #844]	@ (80058e0 <CreateMessage+0x40c>)
 8005592:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005594:	4bd3      	ldr	r3, [pc, #844]	@ (80058e4 <CreateMessage+0x410>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	001a      	movs	r2, r3
 800559a:	4bd1      	ldr	r3, [pc, #836]	@ (80058e0 <CreateMessage+0x40c>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	4013      	ands	r3, r2
 80055a0:	1e5a      	subs	r2, r3, #1
 80055a2:	4193      	sbcs	r3, r2
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	4bcf      	ldr	r3, [pc, #828]	@ (80058e4 <CreateMessage+0x410>)
 80055a8:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 80055aa:	4bc7      	ldr	r3, [pc, #796]	@ (80058c8 <CreateMessage+0x3f4>)
 80055ac:	48ce      	ldr	r0, [pc, #824]	@ (80058e8 <CreateMessage+0x414>)
 80055ae:	220c      	movs	r2, #12
 80055b0:	0019      	movs	r1, r3
 80055b2:	f006 ffbd 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055b6:	4ac4      	ldr	r2, [pc, #784]	@ (80058c8 <CreateMessage+0x3f4>)
 80055b8:	4bc5      	ldr	r3, [pc, #788]	@ (80058d0 <CreateMessage+0x3fc>)
 80055ba:	0011      	movs	r1, r2
 80055bc:	0018      	movs	r0, r3
 80055be:	f7ff fec1 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 80055c2:	4bc4      	ldr	r3, [pc, #784]	@ (80058d4 <CreateMessage+0x400>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	1c18      	adds	r0, r3, #0
 80055c8:	f7fe f964 	bl	8003894 <__aeabi_f2d>
 80055cc:	0002      	movs	r2, r0
 80055ce:	000b      	movs	r3, r1
 80055d0:	4cbf      	ldr	r4, [pc, #764]	@ (80058d0 <CreateMessage+0x3fc>)
 80055d2:	49c6      	ldr	r1, [pc, #792]	@ (80058ec <CreateMessage+0x418>)
 80055d4:	48ba      	ldr	r0, [pc, #744]	@ (80058c0 <CreateMessage+0x3ec>)
 80055d6:	9200      	str	r2, [sp, #0]
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	0022      	movs	r2, r4
 80055dc:	f020 ffd0 	bl	8026580 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 80055e0:	4bb7      	ldr	r3, [pc, #732]	@ (80058c0 <CreateMessage+0x3ec>)
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7fa fdc2 	bl	800016c <strlen>
 80055e8:	0003      	movs	r3, r0
 80055ea:	b299      	uxth	r1, r3
 80055ec:	220e      	movs	r2, #14
 80055ee:	18bb      	adds	r3, r7, r2
 80055f0:	18ba      	adds	r2, r7, r2
 80055f2:	8812      	ldrh	r2, [r2, #0]
 80055f4:	188a      	adds	r2, r1, r2
 80055f6:	801a      	strh	r2, [r3, #0]
  if (send) {
 80055f8:	1cfb      	adds	r3, r7, #3
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d019      	beq.n	8005634 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005600:	4baf      	ldr	r3, [pc, #700]	@ (80058c0 <CreateMessage+0x3ec>)
 8005602:	0018      	movs	r0, r3
 8005604:	f7fa fdb2 	bl	800016c <strlen>
 8005608:	0003      	movs	r3, r0
 800560a:	b29a      	uxth	r2, r3
 800560c:	4bac      	ldr	r3, [pc, #688]	@ (80058c0 <CreateMessage+0x3ec>)
 800560e:	0011      	movs	r1, r2
 8005610:	0018      	movs	r0, r3
 8005612:	f7ff fc65 	bl	8004ee0 <ESP_Send>
 8005616:	0003      	movs	r3, r0
 8005618:	001a      	movs	r2, r3
 800561a:	4bb1      	ldr	r3, [pc, #708]	@ (80058e0 <CreateMessage+0x40c>)
 800561c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800561e:	4bb1      	ldr	r3, [pc, #708]	@ (80058e4 <CreateMessage+0x410>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	001a      	movs	r2, r3
 8005624:	4bae      	ldr	r3, [pc, #696]	@ (80058e0 <CreateMessage+0x40c>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	4013      	ands	r3, r2
 800562a:	1e5a      	subs	r2, r3, #1
 800562c:	4193      	sbcs	r3, r2
 800562e:	b2da      	uxtb	r2, r3
 8005630:	4bac      	ldr	r3, [pc, #688]	@ (80058e4 <CreateMessage+0x410>)
 8005632:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 8005634:	4ba4      	ldr	r3, [pc, #656]	@ (80058c8 <CreateMessage+0x3f4>)
 8005636:	48ae      	ldr	r0, [pc, #696]	@ (80058f0 <CreateMessage+0x41c>)
 8005638:	220c      	movs	r2, #12
 800563a:	0019      	movs	r1, r3
 800563c:	f006 ff78 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005640:	4aa1      	ldr	r2, [pc, #644]	@ (80058c8 <CreateMessage+0x3f4>)
 8005642:	4ba3      	ldr	r3, [pc, #652]	@ (80058d0 <CreateMessage+0x3fc>)
 8005644:	0011      	movs	r1, r2
 8005646:	0018      	movs	r0, r3
 8005648:	f7ff fe7c 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 800564c:	4ba1      	ldr	r3, [pc, #644]	@ (80058d4 <CreateMessage+0x400>)
 800564e:	2248      	movs	r2, #72	@ 0x48
 8005650:	5a9b      	ldrh	r3, [r3, r2]
 8005652:	4a9f      	ldr	r2, [pc, #636]	@ (80058d0 <CreateMessage+0x3fc>)
 8005654:	49a7      	ldr	r1, [pc, #668]	@ (80058f4 <CreateMessage+0x420>)
 8005656:	489a      	ldr	r0, [pc, #616]	@ (80058c0 <CreateMessage+0x3ec>)
 8005658:	f020 ff92 	bl	8026580 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 800565c:	4b98      	ldr	r3, [pc, #608]	@ (80058c0 <CreateMessage+0x3ec>)
 800565e:	0018      	movs	r0, r3
 8005660:	f7fa fd84 	bl	800016c <strlen>
 8005664:	0003      	movs	r3, r0
 8005666:	b299      	uxth	r1, r3
 8005668:	220e      	movs	r2, #14
 800566a:	18bb      	adds	r3, r7, r2
 800566c:	18ba      	adds	r2, r7, r2
 800566e:	8812      	ldrh	r2, [r2, #0]
 8005670:	188a      	adds	r2, r1, r2
 8005672:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005674:	1cfb      	adds	r3, r7, #3
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d019      	beq.n	80056b0 <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800567c:	4b90      	ldr	r3, [pc, #576]	@ (80058c0 <CreateMessage+0x3ec>)
 800567e:	0018      	movs	r0, r3
 8005680:	f7fa fd74 	bl	800016c <strlen>
 8005684:	0003      	movs	r3, r0
 8005686:	b29a      	uxth	r2, r3
 8005688:	4b8d      	ldr	r3, [pc, #564]	@ (80058c0 <CreateMessage+0x3ec>)
 800568a:	0011      	movs	r1, r2
 800568c:	0018      	movs	r0, r3
 800568e:	f7ff fc27 	bl	8004ee0 <ESP_Send>
 8005692:	0003      	movs	r3, r0
 8005694:	001a      	movs	r2, r3
 8005696:	4b92      	ldr	r3, [pc, #584]	@ (80058e0 <CreateMessage+0x40c>)
 8005698:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800569a:	4b92      	ldr	r3, [pc, #584]	@ (80058e4 <CreateMessage+0x410>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	001a      	movs	r2, r3
 80056a0:	4b8f      	ldr	r3, [pc, #572]	@ (80058e0 <CreateMessage+0x40c>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	4013      	ands	r3, r2
 80056a6:	1e5a      	subs	r2, r3, #1
 80056a8:	4193      	sbcs	r3, r2
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	4b8d      	ldr	r3, [pc, #564]	@ (80058e4 <CreateMessage+0x410>)
 80056ae:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(UptimeConfigAddr, keybuffer, IdSize);
 80056b0:	4b85      	ldr	r3, [pc, #532]	@ (80058c8 <CreateMessage+0x3f4>)
 80056b2:	4891      	ldr	r0, [pc, #580]	@ (80058f8 <CreateMessage+0x424>)
 80056b4:	220c      	movs	r2, #12
 80056b6:	0019      	movs	r1, r3
 80056b8:	f006 ff3a 	bl	800c530 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Uptime", "dhhmm")) {
 80056bc:	4a8f      	ldr	r2, [pc, #572]	@ (80058fc <CreateMessage+0x428>)
 80056be:	4990      	ldr	r1, [pc, #576]	@ (8005900 <CreateMessage+0x42c>)
 80056c0:	4b81      	ldr	r3, [pc, #516]	@ (80058c8 <CreateMessage+0x3f4>)
 80056c2:	0018      	movs	r0, r3
 80056c4:	f7ff fdde 	bl	8005284 <isKeyValid>
 80056c8:	1e03      	subs	r3, r0, #0
 80056ca:	d039      	beq.n	8005740 <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, keybuffer);
 80056cc:	4a7e      	ldr	r2, [pc, #504]	@ (80058c8 <CreateMessage+0x3f4>)
 80056ce:	4b80      	ldr	r3, [pc, #512]	@ (80058d0 <CreateMessage+0x3fc>)
 80056d0:	0011      	movs	r1, r2
 80056d2:	0018      	movs	r0, r3
 80056d4:	f7ff fe36 	bl	8005344 <uint8ArrayToString>
    getUptime(uptimeBuf);
 80056d8:	4b8a      	ldr	r3, [pc, #552]	@ (8005904 <CreateMessage+0x430>)
 80056da:	0018      	movs	r0, r3
 80056dc:	f004 fbbc 	bl	8009e58 <getUptime>

#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
 80056e0:	4b88      	ldr	r3, [pc, #544]	@ (8005904 <CreateMessage+0x430>)
 80056e2:	4a7b      	ldr	r2, [pc, #492]	@ (80058d0 <CreateMessage+0x3fc>)
 80056e4:	4988      	ldr	r1, [pc, #544]	@ (8005908 <CreateMessage+0x434>)
 80056e6:	4876      	ldr	r0, [pc, #472]	@ (80058c0 <CreateMessage+0x3ec>)
 80056e8:	f020 ff4a 	bl	8026580 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"uptime\", \"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
#endif
    index += strlen(message);
 80056ec:	4b74      	ldr	r3, [pc, #464]	@ (80058c0 <CreateMessage+0x3ec>)
 80056ee:	0018      	movs	r0, r3
 80056f0:	f7fa fd3c 	bl	800016c <strlen>
 80056f4:	0003      	movs	r3, r0
 80056f6:	b299      	uxth	r1, r3
 80056f8:	220e      	movs	r2, #14
 80056fa:	18bb      	adds	r3, r7, r2
 80056fc:	18ba      	adds	r2, r7, r2
 80056fe:	8812      	ldrh	r2, [r2, #0]
 8005700:	188a      	adds	r2, r1, r2
 8005702:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005704:	1cfb      	adds	r3, r7, #3
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d019      	beq.n	8005740 <CreateMessage+0x26c>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800570c:	4b6c      	ldr	r3, [pc, #432]	@ (80058c0 <CreateMessage+0x3ec>)
 800570e:	0018      	movs	r0, r3
 8005710:	f7fa fd2c 	bl	800016c <strlen>
 8005714:	0003      	movs	r3, r0
 8005716:	b29a      	uxth	r2, r3
 8005718:	4b69      	ldr	r3, [pc, #420]	@ (80058c0 <CreateMessage+0x3ec>)
 800571a:	0011      	movs	r1, r2
 800571c:	0018      	movs	r0, r3
 800571e:	f7ff fbdf 	bl	8004ee0 <ESP_Send>
 8005722:	0003      	movs	r3, r0
 8005724:	001a      	movs	r2, r3
 8005726:	4b6e      	ldr	r3, [pc, #440]	@ (80058e0 <CreateMessage+0x40c>)
 8005728:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 800572a:	4b6e      	ldr	r3, [pc, #440]	@ (80058e4 <CreateMessage+0x410>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	001a      	movs	r2, r3
 8005730:	4b6b      	ldr	r3, [pc, #428]	@ (80058e0 <CreateMessage+0x40c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4013      	ands	r3, r2
 8005736:	1e5a      	subs	r2, r3, #1
 8005738:	4193      	sbcs	r3, r2
 800573a:	b2da      	uxtb	r2, r3
 800573c:	4b69      	ldr	r3, [pc, #420]	@ (80058e4 <CreateMessage+0x410>)
 800573e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (IsBMP280SensorPresent()) {
 8005740:	f008 f878 	bl	800d834 <IsBMP280SensorPresent>
 8005744:	1e03      	subs	r3, r0, #0
 8005746:	d100      	bne.n	800574a <CreateMessage+0x276>
 8005748:	e0a1      	b.n	800588e <CreateMessage+0x3ba>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 800574a:	4b5f      	ldr	r3, [pc, #380]	@ (80058c8 <CreateMessage+0x3f4>)
 800574c:	486f      	ldr	r0, [pc, #444]	@ (800590c <CreateMessage+0x438>)
 800574e:	220c      	movs	r2, #12
 8005750:	0019      	movs	r1, r3
 8005752:	f006 feed 	bl	800c530 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 8005756:	4a6e      	ldr	r2, [pc, #440]	@ (8005910 <CreateMessage+0x43c>)
 8005758:	496e      	ldr	r1, [pc, #440]	@ (8005914 <CreateMessage+0x440>)
 800575a:	4b5b      	ldr	r3, [pc, #364]	@ (80058c8 <CreateMessage+0x3f4>)
 800575c:	0018      	movs	r0, r3
 800575e:	f7ff fd91 	bl	8005284 <isKeyValid>
 8005762:	1e03      	subs	r3, r0, #0
 8005764:	d046      	beq.n	80057f4 <CreateMessage+0x320>
 8005766:	4b5b      	ldr	r3, [pc, #364]	@ (80058d4 <CreateMessage+0x400>)
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	2100      	movs	r1, #0
 800576c:	1c18      	adds	r0, r3, #0
 800576e:	f7fa fed9 	bl	8000524 <__aeabi_fcmpeq>
 8005772:	1e03      	subs	r3, r0, #0
 8005774:	d13e      	bne.n	80057f4 <CreateMessage+0x320>
      uint8ArrayToString(Buffer, keybuffer);
 8005776:	4a54      	ldr	r2, [pc, #336]	@ (80058c8 <CreateMessage+0x3f4>)
 8005778:	4b55      	ldr	r3, [pc, #340]	@ (80058d0 <CreateMessage+0x3fc>)
 800577a:	0011      	movs	r1, r2
 800577c:	0018      	movs	r0, r3
 800577e:	f7ff fde1 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 8005782:	4b54      	ldr	r3, [pc, #336]	@ (80058d4 <CreateMessage+0x400>)
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	1c18      	adds	r0, r3, #0
 8005788:	f7fe f884 	bl	8003894 <__aeabi_f2d>
 800578c:	0002      	movs	r2, r0
 800578e:	000b      	movs	r3, r1
 8005790:	4c4f      	ldr	r4, [pc, #316]	@ (80058d0 <CreateMessage+0x3fc>)
 8005792:	4956      	ldr	r1, [pc, #344]	@ (80058ec <CreateMessage+0x418>)
 8005794:	484a      	ldr	r0, [pc, #296]	@ (80058c0 <CreateMessage+0x3ec>)
 8005796:	9200      	str	r2, [sp, #0]
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	0022      	movs	r2, r4
 800579c:	f020 fef0 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 80057a0:	4b47      	ldr	r3, [pc, #284]	@ (80058c0 <CreateMessage+0x3ec>)
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7fa fce2 	bl	800016c <strlen>
 80057a8:	0003      	movs	r3, r0
 80057aa:	b299      	uxth	r1, r3
 80057ac:	220e      	movs	r2, #14
 80057ae:	18bb      	adds	r3, r7, r2
 80057b0:	18ba      	adds	r2, r7, r2
 80057b2:	8812      	ldrh	r2, [r2, #0]
 80057b4:	188a      	adds	r2, r1, r2
 80057b6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80057b8:	1cfb      	adds	r3, r7, #3
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d019      	beq.n	80057f4 <CreateMessage+0x320>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80057c0:	4b3f      	ldr	r3, [pc, #252]	@ (80058c0 <CreateMessage+0x3ec>)
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7fa fcd2 	bl	800016c <strlen>
 80057c8:	0003      	movs	r3, r0
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	4b3c      	ldr	r3, [pc, #240]	@ (80058c0 <CreateMessage+0x3ec>)
 80057ce:	0011      	movs	r1, r2
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7ff fb85 	bl	8004ee0 <ESP_Send>
 80057d6:	0003      	movs	r3, r0
 80057d8:	001a      	movs	r2, r3
 80057da:	4b41      	ldr	r3, [pc, #260]	@ (80058e0 <CreateMessage+0x40c>)
 80057dc:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80057de:	4b41      	ldr	r3, [pc, #260]	@ (80058e4 <CreateMessage+0x410>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	001a      	movs	r2, r3
 80057e4:	4b3e      	ldr	r3, [pc, #248]	@ (80058e0 <CreateMessage+0x40c>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	4013      	ands	r3, r2
 80057ea:	1e5a      	subs	r2, r3, #1
 80057ec:	4193      	sbcs	r3, r2
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	4b3c      	ldr	r3, [pc, #240]	@ (80058e4 <CreateMessage+0x410>)
 80057f2:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 80057f4:	4b34      	ldr	r3, [pc, #208]	@ (80058c8 <CreateMessage+0x3f4>)
 80057f6:	4848      	ldr	r0, [pc, #288]	@ (8005918 <CreateMessage+0x444>)
 80057f8:	220c      	movs	r2, #12
 80057fa:	0019      	movs	r1, r3
 80057fc:	f006 fe98 	bl	800c530 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 8005800:	4a46      	ldr	r2, [pc, #280]	@ (800591c <CreateMessage+0x448>)
 8005802:	4944      	ldr	r1, [pc, #272]	@ (8005914 <CreateMessage+0x440>)
 8005804:	4b30      	ldr	r3, [pc, #192]	@ (80058c8 <CreateMessage+0x3f4>)
 8005806:	0018      	movs	r0, r3
 8005808:	f7ff fd3c 	bl	8005284 <isKeyValid>
 800580c:	1e03      	subs	r3, r0, #0
 800580e:	d03e      	beq.n	800588e <CreateMessage+0x3ba>
      uint8ArrayToString(Buffer, keybuffer);
 8005810:	4a2d      	ldr	r2, [pc, #180]	@ (80058c8 <CreateMessage+0x3f4>)
 8005812:	4b2f      	ldr	r3, [pc, #188]	@ (80058d0 <CreateMessage+0x3fc>)
 8005814:	0011      	movs	r1, r2
 8005816:	0018      	movs	r0, r3
 8005818:	f7ff fd94 	bl	8005344 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 800581c:	4b2d      	ldr	r3, [pc, #180]	@ (80058d4 <CreateMessage+0x400>)
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	1c18      	adds	r0, r3, #0
 8005822:	f7fe f837 	bl	8003894 <__aeabi_f2d>
 8005826:	0002      	movs	r2, r0
 8005828:	000b      	movs	r3, r1
 800582a:	4c29      	ldr	r4, [pc, #164]	@ (80058d0 <CreateMessage+0x3fc>)
 800582c:	492f      	ldr	r1, [pc, #188]	@ (80058ec <CreateMessage+0x418>)
 800582e:	4824      	ldr	r0, [pc, #144]	@ (80058c0 <CreateMessage+0x3ec>)
 8005830:	9200      	str	r2, [sp, #0]
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	0022      	movs	r2, r4
 8005836:	f020 fea3 	bl	8026580 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 800583a:	4b21      	ldr	r3, [pc, #132]	@ (80058c0 <CreateMessage+0x3ec>)
 800583c:	0018      	movs	r0, r3
 800583e:	f7fa fc95 	bl	800016c <strlen>
 8005842:	0003      	movs	r3, r0
 8005844:	b299      	uxth	r1, r3
 8005846:	220e      	movs	r2, #14
 8005848:	18bb      	adds	r3, r7, r2
 800584a:	18ba      	adds	r2, r7, r2
 800584c:	8812      	ldrh	r2, [r2, #0]
 800584e:	188a      	adds	r2, r1, r2
 8005850:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005852:	1cfb      	adds	r3, r7, #3
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d019      	beq.n	800588e <CreateMessage+0x3ba>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800585a:	4b19      	ldr	r3, [pc, #100]	@ (80058c0 <CreateMessage+0x3ec>)
 800585c:	0018      	movs	r0, r3
 800585e:	f7fa fc85 	bl	800016c <strlen>
 8005862:	0003      	movs	r3, r0
 8005864:	b29a      	uxth	r2, r3
 8005866:	4b16      	ldr	r3, [pc, #88]	@ (80058c0 <CreateMessage+0x3ec>)
 8005868:	0011      	movs	r1, r2
 800586a:	0018      	movs	r0, r3
 800586c:	f7ff fb38 	bl	8004ee0 <ESP_Send>
 8005870:	0003      	movs	r3, r0
 8005872:	001a      	movs	r2, r3
 8005874:	4b1a      	ldr	r3, [pc, #104]	@ (80058e0 <CreateMessage+0x40c>)
 8005876:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005878:	4b1a      	ldr	r3, [pc, #104]	@ (80058e4 <CreateMessage+0x410>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	001a      	movs	r2, r3
 800587e:	4b18      	ldr	r3, [pc, #96]	@ (80058e0 <CreateMessage+0x40c>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	4013      	ands	r3, r2
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	4193      	sbcs	r3, r2
 8005888:	b2da      	uxtb	r2, r3
 800588a:	4b16      	ldr	r3, [pc, #88]	@ (80058e4 <CreateMessage+0x410>)
 800588c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 800588e:	4b0e      	ldr	r3, [pc, #56]	@ (80058c8 <CreateMessage+0x3f4>)
 8005890:	4823      	ldr	r0, [pc, #140]	@ (8005920 <CreateMessage+0x44c>)
 8005892:	220c      	movs	r2, #12
 8005894:	0019      	movs	r1, r3
 8005896:	f006 fe4b 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800589a:	4a0b      	ldr	r2, [pc, #44]	@ (80058c8 <CreateMessage+0x3f4>)
 800589c:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <CreateMessage+0x3fc>)
 800589e:	0011      	movs	r1, r2
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7ff fd4f 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 80058a6:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <CreateMessage+0x400>)
 80058a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058aa:	1c18      	adds	r0, r3, #0
 80058ac:	f7fd fff2 	bl	8003894 <__aeabi_f2d>
 80058b0:	0002      	movs	r2, r0
 80058b2:	000b      	movs	r3, r1
 80058b4:	e036      	b.n	8005924 <CreateMessage+0x450>
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	20000824 	.word	0x20000824
 80058bc:	0802e810 	.word	0x0802e810
 80058c0:	200005d4 	.word	0x200005d4
 80058c4:	0802b1d4 	.word	0x0802b1d4
 80058c8:	20000844 	.word	0x20000844
 80058cc:	0808000c 	.word	0x0808000c
 80058d0:	20000850 	.word	0x20000850
 80058d4:	20000714 	.word	0x20000714
 80058d8:	0802b1d8 	.word	0x0802b1d8
 80058dc:	200005d5 	.word	0x200005d5
 80058e0:	20000869 	.word	0x20000869
 80058e4:	20000032 	.word	0x20000032
 80058e8:	08080018 	.word	0x08080018
 80058ec:	0802b1f8 	.word	0x0802b1f8
 80058f0:	08080030 	.word	0x08080030
 80058f4:	0802b218 	.word	0x0802b218
 80058f8:	080801a0 	.word	0x080801a0
 80058fc:	0802b238 	.word	0x0802b238
 8005900:	0802b240 	.word	0x0802b240
 8005904:	2000086c 	.word	0x2000086c
 8005908:	0802b248 	.word	0x0802b248
 800590c:	08080188 	.word	0x08080188
 8005910:	0802b268 	.word	0x0802b268
 8005914:	0802b26c 	.word	0x0802b26c
 8005918:	080800e0 	.word	0x080800e0
 800591c:	0802b274 	.word	0x0802b274
 8005920:	08080048 	.word	0x08080048
 8005924:	4ce6      	ldr	r4, [pc, #920]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005926:	49e7      	ldr	r1, [pc, #924]	@ (8005cc4 <CreateMessage+0x7f0>)
 8005928:	48e7      	ldr	r0, [pc, #924]	@ (8005cc8 <CreateMessage+0x7f4>)
 800592a:	9200      	str	r2, [sp, #0]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	0022      	movs	r2, r4
 8005930:	f020 fe26 	bl	8026580 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
  index += strlen(message);
 8005934:	4be4      	ldr	r3, [pc, #912]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005936:	0018      	movs	r0, r3
 8005938:	f7fa fc18 	bl	800016c <strlen>
 800593c:	0003      	movs	r3, r0
 800593e:	b299      	uxth	r1, r3
 8005940:	220e      	movs	r2, #14
 8005942:	18bb      	adds	r3, r7, r2
 8005944:	18ba      	adds	r2, r7, r2
 8005946:	8812      	ldrh	r2, [r2, #0]
 8005948:	188a      	adds	r2, r1, r2
 800594a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800594c:	1cfb      	adds	r3, r7, #3
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d019      	beq.n	8005988 <CreateMessage+0x4b4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005954:	4bdc      	ldr	r3, [pc, #880]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005956:	0018      	movs	r0, r3
 8005958:	f7fa fc08 	bl	800016c <strlen>
 800595c:	0003      	movs	r3, r0
 800595e:	b29a      	uxth	r2, r3
 8005960:	4bd9      	ldr	r3, [pc, #868]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005962:	0011      	movs	r1, r2
 8005964:	0018      	movs	r0, r3
 8005966:	f7ff fabb 	bl	8004ee0 <ESP_Send>
 800596a:	0003      	movs	r3, r0
 800596c:	001a      	movs	r2, r3
 800596e:	4bd7      	ldr	r3, [pc, #860]	@ (8005ccc <CreateMessage+0x7f8>)
 8005970:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005972:	4bd7      	ldr	r3, [pc, #860]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	001a      	movs	r2, r3
 8005978:	4bd4      	ldr	r3, [pc, #848]	@ (8005ccc <CreateMessage+0x7f8>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	4013      	ands	r3, r2
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	4193      	sbcs	r3, r2
 8005982:	b2da      	uxtb	r2, r3
 8005984:	4bd2      	ldr	r3, [pc, #840]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005986:	701a      	strb	r2, [r3, #0]
  }

//  if(!onBeurs){
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005988:	4bd2      	ldr	r3, [pc, #840]	@ (8005cd4 <CreateMessage+0x800>)
 800598a:	48d3      	ldr	r0, [pc, #844]	@ (8005cd8 <CreateMessage+0x804>)
 800598c:	220c      	movs	r2, #12
 800598e:	0019      	movs	r1, r3
 8005990:	f006 fdce 	bl	800c530 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 8005994:	4acf      	ldr	r2, [pc, #828]	@ (8005cd4 <CreateMessage+0x800>)
 8005996:	4bca      	ldr	r3, [pc, #808]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005998:	0011      	movs	r1, r2
 800599a:	0018      	movs	r0, r3
 800599c:	f7ff fcd2 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 80059a0:	4bce      	ldr	r3, [pc, #824]	@ (8005cdc <CreateMessage+0x808>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	1c18      	adds	r0, r3, #0
 80059a6:	f7fd ff75 	bl	8003894 <__aeabi_f2d>
 80059aa:	0002      	movs	r2, r0
 80059ac:	000b      	movs	r3, r1
 80059ae:	4cc4      	ldr	r4, [pc, #784]	@ (8005cc0 <CreateMessage+0x7ec>)
 80059b0:	49c4      	ldr	r1, [pc, #784]	@ (8005cc4 <CreateMessage+0x7f0>)
 80059b2:	48c5      	ldr	r0, [pc, #788]	@ (8005cc8 <CreateMessage+0x7f4>)
 80059b4:	9200      	str	r2, [sp, #0]
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	0022      	movs	r2, r4
 80059ba:	f020 fde1 	bl	8026580 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 80059be:	4bc2      	ldr	r3, [pc, #776]	@ (8005cc8 <CreateMessage+0x7f4>)
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7fa fbd3 	bl	800016c <strlen>
 80059c6:	0003      	movs	r3, r0
 80059c8:	b299      	uxth	r1, r3
 80059ca:	220e      	movs	r2, #14
 80059cc:	18bb      	adds	r3, r7, r2
 80059ce:	18ba      	adds	r2, r7, r2
 80059d0:	8812      	ldrh	r2, [r2, #0]
 80059d2:	188a      	adds	r2, r1, r2
 80059d4:	801a      	strh	r2, [r3, #0]
    if (send) {
 80059d6:	1cfb      	adds	r3, r7, #3
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d019      	beq.n	8005a12 <CreateMessage+0x53e>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80059de:	4bba      	ldr	r3, [pc, #744]	@ (8005cc8 <CreateMessage+0x7f4>)
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7fa fbc3 	bl	800016c <strlen>
 80059e6:	0003      	movs	r3, r0
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	4bb7      	ldr	r3, [pc, #732]	@ (8005cc8 <CreateMessage+0x7f4>)
 80059ec:	0011      	movs	r1, r2
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7ff fa76 	bl	8004ee0 <ESP_Send>
 80059f4:	0003      	movs	r3, r0
 80059f6:	001a      	movs	r2, r3
 80059f8:	4bb4      	ldr	r3, [pc, #720]	@ (8005ccc <CreateMessage+0x7f8>)
 80059fa:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80059fc:	4bb4      	ldr	r3, [pc, #720]	@ (8005cd0 <CreateMessage+0x7fc>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	001a      	movs	r2, r3
 8005a02:	4bb2      	ldr	r3, [pc, #712]	@ (8005ccc <CreateMessage+0x7f8>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	4013      	ands	r3, r2
 8005a08:	1e5a      	subs	r2, r3, #1
 8005a0a:	4193      	sbcs	r3, r2
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	4bb0      	ldr	r3, [pc, #704]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005a10:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005a12:	4bb3      	ldr	r3, [pc, #716]	@ (8005ce0 <CreateMessage+0x80c>)
 8005a14:	791b      	ldrb	r3, [r3, #4]
 8005a16:	2b35      	cmp	r3, #53	@ 0x35
 8005a18:	d141      	bne.n	8005a9e <CreateMessage+0x5ca>
 8005a1a:	f004 f985 	bl	8009d28 <Check_USB_PowerOn>
 8005a1e:	1e03      	subs	r3, r0, #0
 8005a20:	d03d      	beq.n	8005a9e <CreateMessage+0x5ca>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005a22:	4bac      	ldr	r3, [pc, #688]	@ (8005cd4 <CreateMessage+0x800>)
 8005a24:	48af      	ldr	r0, [pc, #700]	@ (8005ce4 <CreateMessage+0x810>)
 8005a26:	220c      	movs	r2, #12
 8005a28:	0019      	movs	r1, r3
 8005a2a:	f006 fd81 	bl	800c530 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005a2e:	4aa9      	ldr	r2, [pc, #676]	@ (8005cd4 <CreateMessage+0x800>)
 8005a30:	4ba3      	ldr	r3, [pc, #652]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005a32:	0011      	movs	r1, r2
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7ff fc85 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 8005a3a:	4bab      	ldr	r3, [pc, #684]	@ (8005ce8 <CreateMessage+0x814>)
 8005a3c:	224e      	movs	r2, #78	@ 0x4e
 8005a3e:	5a9b      	ldrh	r3, [r3, r2]
 8005a40:	4a9f      	ldr	r2, [pc, #636]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005a42:	49aa      	ldr	r1, [pc, #680]	@ (8005cec <CreateMessage+0x818>)
 8005a44:	48a0      	ldr	r0, [pc, #640]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005a46:	f020 fd9b 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 8005a4a:	4b9f      	ldr	r3, [pc, #636]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7fa fb8d 	bl	800016c <strlen>
 8005a52:	0003      	movs	r3, r0
 8005a54:	b299      	uxth	r1, r3
 8005a56:	220e      	movs	r2, #14
 8005a58:	18bb      	adds	r3, r7, r2
 8005a5a:	18ba      	adds	r2, r7, r2
 8005a5c:	8812      	ldrh	r2, [r2, #0]
 8005a5e:	188a      	adds	r2, r1, r2
 8005a60:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005a62:	1cfb      	adds	r3, r7, #3
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d019      	beq.n	8005a9e <CreateMessage+0x5ca>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005a6a:	4b97      	ldr	r3, [pc, #604]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f7fa fb7d 	bl	800016c <strlen>
 8005a72:	0003      	movs	r3, r0
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	4b94      	ldr	r3, [pc, #592]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005a78:	0011      	movs	r1, r2
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f7ff fa30 	bl	8004ee0 <ESP_Send>
 8005a80:	0003      	movs	r3, r0
 8005a82:	001a      	movs	r2, r3
 8005a84:	4b91      	ldr	r3, [pc, #580]	@ (8005ccc <CreateMessage+0x7f8>)
 8005a86:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005a88:	4b91      	ldr	r3, [pc, #580]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	001a      	movs	r2, r3
 8005a8e:	4b8f      	ldr	r3, [pc, #572]	@ (8005ccc <CreateMessage+0x7f8>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	4013      	ands	r3, r2
 8005a94:	1e5a      	subs	r2, r3, #1
 8005a96:	4193      	sbcs	r3, r2
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b8d      	ldr	r3, [pc, #564]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005a9c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8005cd4 <CreateMessage+0x800>)
 8005aa0:	4893      	ldr	r0, [pc, #588]	@ (8005cf0 <CreateMessage+0x81c>)
 8005aa2:	220c      	movs	r2, #12
 8005aa4:	0019      	movs	r1, r3
 8005aa6:	f006 fd43 	bl	800c530 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8005ce0 <CreateMessage+0x80c>)
 8005aac:	791b      	ldrb	r3, [r3, #4]
 8005aae:	2b34      	cmp	r3, #52	@ 0x34
 8005ab0:	d003      	beq.n	8005aba <CreateMessage+0x5e6>
 8005ab2:	4b8b      	ldr	r3, [pc, #556]	@ (8005ce0 <CreateMessage+0x80c>)
 8005ab4:	791b      	ldrb	r3, [r3, #4]
 8005ab6:	2b35      	cmp	r3, #53	@ 0x35
 8005ab8:	d146      	bne.n	8005b48 <CreateMessage+0x674>
 8005aba:	4a8e      	ldr	r2, [pc, #568]	@ (8005cf4 <CreateMessage+0x820>)
 8005abc:	498e      	ldr	r1, [pc, #568]	@ (8005cf8 <CreateMessage+0x824>)
 8005abe:	4b85      	ldr	r3, [pc, #532]	@ (8005cd4 <CreateMessage+0x800>)
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f7ff fbdf 	bl	8005284 <isKeyValid>
 8005ac6:	1e03      	subs	r3, r0, #0
 8005ac8:	d03e      	beq.n	8005b48 <CreateMessage+0x674>
      uint8ArrayToString(Buffer, keybuffer);
 8005aca:	4a82      	ldr	r2, [pc, #520]	@ (8005cd4 <CreateMessage+0x800>)
 8005acc:	4b7c      	ldr	r3, [pc, #496]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005ace:	0011      	movs	r1, r2
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7ff fc37 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005ad6:	4b84      	ldr	r3, [pc, #528]	@ (8005ce8 <CreateMessage+0x814>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ada:	1c18      	adds	r0, r3, #0
 8005adc:	f7fd feda 	bl	8003894 <__aeabi_f2d>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	000b      	movs	r3, r1
 8005ae4:	4c76      	ldr	r4, [pc, #472]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005ae6:	4985      	ldr	r1, [pc, #532]	@ (8005cfc <CreateMessage+0x828>)
 8005ae8:	4877      	ldr	r0, [pc, #476]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005aea:	9200      	str	r2, [sp, #0]
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	0022      	movs	r2, r4
 8005af0:	f020 fd46 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005af4:	4b74      	ldr	r3, [pc, #464]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005af6:	0018      	movs	r0, r3
 8005af8:	f7fa fb38 	bl	800016c <strlen>
 8005afc:	0003      	movs	r3, r0
 8005afe:	b299      	uxth	r1, r3
 8005b00:	220e      	movs	r2, #14
 8005b02:	18bb      	adds	r3, r7, r2
 8005b04:	18ba      	adds	r2, r7, r2
 8005b06:	8812      	ldrh	r2, [r2, #0]
 8005b08:	188a      	adds	r2, r1, r2
 8005b0a:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b0c:	1cfb      	adds	r3, r7, #3
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d019      	beq.n	8005b48 <CreateMessage+0x674>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b14:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005b16:	0018      	movs	r0, r3
 8005b18:	f7fa fb28 	bl	800016c <strlen>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	4b69      	ldr	r3, [pc, #420]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005b22:	0011      	movs	r1, r2
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7ff f9db 	bl	8004ee0 <ESP_Send>
 8005b2a:	0003      	movs	r3, r0
 8005b2c:	001a      	movs	r2, r3
 8005b2e:	4b67      	ldr	r3, [pc, #412]	@ (8005ccc <CreateMessage+0x7f8>)
 8005b30:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005b32:	4b67      	ldr	r3, [pc, #412]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	001a      	movs	r2, r3
 8005b38:	4b64      	ldr	r3, [pc, #400]	@ (8005ccc <CreateMessage+0x7f8>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	1e5a      	subs	r2, r3, #1
 8005b40:	4193      	sbcs	r3, r2
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	4b62      	ldr	r3, [pc, #392]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005b46:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005b48:	4b62      	ldr	r3, [pc, #392]	@ (8005cd4 <CreateMessage+0x800>)
 8005b4a:	486d      	ldr	r0, [pc, #436]	@ (8005d00 <CreateMessage+0x82c>)
 8005b4c:	220c      	movs	r2, #12
 8005b4e:	0019      	movs	r1, r3
 8005b50:	f006 fcee 	bl	800c530 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005b54:	4b62      	ldr	r3, [pc, #392]	@ (8005ce0 <CreateMessage+0x80c>)
 8005b56:	791b      	ldrb	r3, [r3, #4]
 8005b58:	2b34      	cmp	r3, #52	@ 0x34
 8005b5a:	d003      	beq.n	8005b64 <CreateMessage+0x690>
 8005b5c:	4b60      	ldr	r3, [pc, #384]	@ (8005ce0 <CreateMessage+0x80c>)
 8005b5e:	791b      	ldrb	r3, [r3, #4]
 8005b60:	2b35      	cmp	r3, #53	@ 0x35
 8005b62:	d146      	bne.n	8005bf2 <CreateMessage+0x71e>
 8005b64:	4a67      	ldr	r2, [pc, #412]	@ (8005d04 <CreateMessage+0x830>)
 8005b66:	4964      	ldr	r1, [pc, #400]	@ (8005cf8 <CreateMessage+0x824>)
 8005b68:	4b5a      	ldr	r3, [pc, #360]	@ (8005cd4 <CreateMessage+0x800>)
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f7ff fb8a 	bl	8005284 <isKeyValid>
 8005b70:	1e03      	subs	r3, r0, #0
 8005b72:	d03e      	beq.n	8005bf2 <CreateMessage+0x71e>
      uint8ArrayToString(Buffer, keybuffer);
 8005b74:	4a57      	ldr	r2, [pc, #348]	@ (8005cd4 <CreateMessage+0x800>)
 8005b76:	4b52      	ldr	r3, [pc, #328]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005b78:	0011      	movs	r1, r2
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f7ff fbe2 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 8005b80:	4b59      	ldr	r3, [pc, #356]	@ (8005ce8 <CreateMessage+0x814>)
 8005b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b84:	1c18      	adds	r0, r3, #0
 8005b86:	f7fd fe85 	bl	8003894 <__aeabi_f2d>
 8005b8a:	0002      	movs	r2, r0
 8005b8c:	000b      	movs	r3, r1
 8005b8e:	4c4c      	ldr	r4, [pc, #304]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005b90:	495a      	ldr	r1, [pc, #360]	@ (8005cfc <CreateMessage+0x828>)
 8005b92:	484d      	ldr	r0, [pc, #308]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005b94:	9200      	str	r2, [sp, #0]
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	0022      	movs	r2, r4
 8005b9a:	f020 fcf1 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 8005b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7fa fae3 	bl	800016c <strlen>
 8005ba6:	0003      	movs	r3, r0
 8005ba8:	b299      	uxth	r1, r3
 8005baa:	220e      	movs	r2, #14
 8005bac:	18bb      	adds	r3, r7, r2
 8005bae:	18ba      	adds	r2, r7, r2
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	188a      	adds	r2, r1, r2
 8005bb4:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005bb6:	1cfb      	adds	r3, r7, #3
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d019      	beq.n	8005bf2 <CreateMessage+0x71e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005bbe:	4b42      	ldr	r3, [pc, #264]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f7fa fad3 	bl	800016c <strlen>
 8005bc6:	0003      	movs	r3, r0
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005bcc:	0011      	movs	r1, r2
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f7ff f986 	bl	8004ee0 <ESP_Send>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	001a      	movs	r2, r3
 8005bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8005ccc <CreateMessage+0x7f8>)
 8005bda:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	001a      	movs	r2, r3
 8005be2:	4b3a      	ldr	r3, [pc, #232]	@ (8005ccc <CreateMessage+0x7f8>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	4013      	ands	r3, r2
 8005be8:	1e5a      	subs	r2, r3, #1
 8005bea:	4193      	sbcs	r3, r2
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	4b38      	ldr	r3, [pc, #224]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005bf0:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 8005bf2:	f008 fe99 	bl	800e928 <sen5x_Get_sen5x_enable_state>
 8005bf6:	1e03      	subs	r3, r0, #0
 8005bf8:	d100      	bne.n	8005bfc <CreateMessage+0x728>
 8005bfa:	e150      	b.n	8005e9e <CreateMessage+0x9ca>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005bfc:	4b35      	ldr	r3, [pc, #212]	@ (8005cd4 <CreateMessage+0x800>)
 8005bfe:	4842      	ldr	r0, [pc, #264]	@ (8005d08 <CreateMessage+0x834>)
 8005c00:	220c      	movs	r2, #12
 8005c02:	0019      	movs	r1, r3
 8005c04:	f006 fc94 	bl	800c530 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005c08:	4a40      	ldr	r2, [pc, #256]	@ (8005d0c <CreateMessage+0x838>)
 8005c0a:	4941      	ldr	r1, [pc, #260]	@ (8005d10 <CreateMessage+0x83c>)
 8005c0c:	4b31      	ldr	r3, [pc, #196]	@ (8005cd4 <CreateMessage+0x800>)
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f7ff fb38 	bl	8005284 <isKeyValid>
 8005c14:	1e03      	subs	r3, r0, #0
 8005c16:	d03e      	beq.n	8005c96 <CreateMessage+0x7c2>
        uint8ArrayToString(Buffer, keybuffer);
 8005c18:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd4 <CreateMessage+0x800>)
 8005c1a:	4b29      	ldr	r3, [pc, #164]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005c1c:	0011      	movs	r1, r2
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7ff fb90 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005c24:	4b30      	ldr	r3, [pc, #192]	@ (8005ce8 <CreateMessage+0x814>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	1c18      	adds	r0, r3, #0
 8005c2a:	f7fd fe33 	bl	8003894 <__aeabi_f2d>
 8005c2e:	0002      	movs	r2, r0
 8005c30:	000b      	movs	r3, r1
 8005c32:	4c23      	ldr	r4, [pc, #140]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005c34:	4923      	ldr	r1, [pc, #140]	@ (8005cc4 <CreateMessage+0x7f0>)
 8005c36:	4824      	ldr	r0, [pc, #144]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005c38:	9200      	str	r2, [sp, #0]
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	0022      	movs	r2, r4
 8005c3e:	f020 fc9f 	bl	8026580 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
        index += strlen(message);
 8005c42:	4b21      	ldr	r3, [pc, #132]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7fa fa91 	bl	800016c <strlen>
 8005c4a:	0003      	movs	r3, r0
 8005c4c:	b299      	uxth	r1, r3
 8005c4e:	220e      	movs	r2, #14
 8005c50:	18bb      	adds	r3, r7, r2
 8005c52:	18ba      	adds	r2, r7, r2
 8005c54:	8812      	ldrh	r2, [r2, #0]
 8005c56:	188a      	adds	r2, r1, r2
 8005c58:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005c5a:	1cfb      	adds	r3, r7, #3
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d019      	beq.n	8005c96 <CreateMessage+0x7c2>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005c62:	4b19      	ldr	r3, [pc, #100]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005c64:	0018      	movs	r0, r3
 8005c66:	f7fa fa81 	bl	800016c <strlen>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	4b16      	ldr	r3, [pc, #88]	@ (8005cc8 <CreateMessage+0x7f4>)
 8005c70:	0011      	movs	r1, r2
 8005c72:	0018      	movs	r0, r3
 8005c74:	f7ff f934 	bl	8004ee0 <ESP_Send>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	001a      	movs	r2, r3
 8005c7c:	4b13      	ldr	r3, [pc, #76]	@ (8005ccc <CreateMessage+0x7f8>)
 8005c7e:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005c80:	4b13      	ldr	r3, [pc, #76]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	001a      	movs	r2, r3
 8005c86:	4b11      	ldr	r3, [pc, #68]	@ (8005ccc <CreateMessage+0x7f8>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	1e5a      	subs	r2, r3, #1
 8005c8e:	4193      	sbcs	r3, r2
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd0 <CreateMessage+0x7fc>)
 8005c94:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005c96:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd4 <CreateMessage+0x800>)
 8005c98:	481e      	ldr	r0, [pc, #120]	@ (8005d14 <CreateMessage+0x840>)
 8005c9a:	220c      	movs	r2, #12
 8005c9c:	0019      	movs	r1, r3
 8005c9e:	f006 fc47 	bl	800c530 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8005cd4 <CreateMessage+0x800>)
 8005ca4:	4b06      	ldr	r3, [pc, #24]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005ca6:	0011      	movs	r1, r2
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff fb4b 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005cae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce8 <CreateMessage+0x814>)
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	1c18      	adds	r0, r3, #0
 8005cb4:	f7fd fdee 	bl	8003894 <__aeabi_f2d>
 8005cb8:	0002      	movs	r2, r0
 8005cba:	000b      	movs	r3, r1
 8005cbc:	4c00      	ldr	r4, [pc, #0]	@ (8005cc0 <CreateMessage+0x7ec>)
 8005cbe:	e02b      	b.n	8005d18 <CreateMessage+0x844>
 8005cc0:	20000850 	.word	0x20000850
 8005cc4:	0802b1f8 	.word	0x0802b1f8
 8005cc8:	200005d4 	.word	0x200005d4
 8005ccc:	20000869 	.word	0x20000869
 8005cd0:	20000032 	.word	0x20000032
 8005cd4:	20000844 	.word	0x20000844
 8005cd8:	08080078 	.word	0x08080078
 8005cdc:	200005d0 	.word	0x200005d0
 8005ce0:	200011d8 	.word	0x200011d8
 8005ce4:	08080024 	.word	0x08080024
 8005ce8:	20000714 	.word	0x20000714
 8005cec:	0802b218 	.word	0x0802b218
 8005cf0:	08080170 	.word	0x08080170
 8005cf4:	0802b280 	.word	0x0802b280
 8005cf8:	0802b28c 	.word	0x0802b28c
 8005cfc:	0802b294 	.word	0x0802b294
 8005d00:	0808017c 	.word	0x0808017c
 8005d04:	0802b2b4 	.word	0x0802b2b4
 8005d08:	080800b0 	.word	0x080800b0
 8005d0c:	0802b2c0 	.word	0x0802b2c0
 8005d10:	0802b2cc 	.word	0x0802b2cc
 8005d14:	08080054 	.word	0x08080054
 8005d18:	49ea      	ldr	r1, [pc, #936]	@ (80060c4 <CreateMessage+0xbf0>)
 8005d1a:	48eb      	ldr	r0, [pc, #940]	@ (80060c8 <CreateMessage+0xbf4>)
 8005d1c:	9200      	str	r2, [sp, #0]
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	0022      	movs	r2, r4
 8005d22:	f020 fc2d 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005d26:	4be8      	ldr	r3, [pc, #928]	@ (80060c8 <CreateMessage+0xbf4>)
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f7fa fa1f 	bl	800016c <strlen>
 8005d2e:	0003      	movs	r3, r0
 8005d30:	b299      	uxth	r1, r3
 8005d32:	220e      	movs	r2, #14
 8005d34:	18bb      	adds	r3, r7, r2
 8005d36:	18ba      	adds	r2, r7, r2
 8005d38:	8812      	ldrh	r2, [r2, #0]
 8005d3a:	188a      	adds	r2, r1, r2
 8005d3c:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d3e:	1cfb      	adds	r3, r7, #3
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d019      	beq.n	8005d7a <CreateMessage+0x8a6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d46:	4be0      	ldr	r3, [pc, #896]	@ (80060c8 <CreateMessage+0xbf4>)
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7fa fa0f 	bl	800016c <strlen>
 8005d4e:	0003      	movs	r3, r0
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	4bdd      	ldr	r3, [pc, #884]	@ (80060c8 <CreateMessage+0xbf4>)
 8005d54:	0011      	movs	r1, r2
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff f8c2 	bl	8004ee0 <ESP_Send>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	001a      	movs	r2, r3
 8005d60:	4bda      	ldr	r3, [pc, #872]	@ (80060cc <CreateMessage+0xbf8>)
 8005d62:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d64:	4bda      	ldr	r3, [pc, #872]	@ (80060d0 <CreateMessage+0xbfc>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	001a      	movs	r2, r3
 8005d6a:	4bd8      	ldr	r3, [pc, #864]	@ (80060cc <CreateMessage+0xbf8>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	1e5a      	subs	r2, r3, #1
 8005d72:	4193      	sbcs	r3, r2
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4bd6      	ldr	r3, [pc, #856]	@ (80060d0 <CreateMessage+0xbfc>)
 8005d78:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005d7a:	4bd6      	ldr	r3, [pc, #856]	@ (80060d4 <CreateMessage+0xc00>)
 8005d7c:	48d6      	ldr	r0, [pc, #856]	@ (80060d8 <CreateMessage+0xc04>)
 8005d7e:	220c      	movs	r2, #12
 8005d80:	0019      	movs	r1, r3
 8005d82:	f006 fbd5 	bl	800c530 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005d86:	4ad5      	ldr	r2, [pc, #852]	@ (80060dc <CreateMessage+0xc08>)
 8005d88:	49d5      	ldr	r1, [pc, #852]	@ (80060e0 <CreateMessage+0xc0c>)
 8005d8a:	4bd2      	ldr	r3, [pc, #840]	@ (80060d4 <CreateMessage+0xc00>)
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7ff fa79 	bl	8005284 <isKeyValid>
 8005d92:	1e03      	subs	r3, r0, #0
 8005d94:	d03e      	beq.n	8005e14 <CreateMessage+0x940>
        uint8ArrayToString(Buffer, keybuffer);
 8005d96:	4acf      	ldr	r2, [pc, #828]	@ (80060d4 <CreateMessage+0xc00>)
 8005d98:	4bd2      	ldr	r3, [pc, #840]	@ (80060e4 <CreateMessage+0xc10>)
 8005d9a:	0011      	movs	r1, r2
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f7ff fad1 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005da2:	4bd1      	ldr	r3, [pc, #836]	@ (80060e8 <CreateMessage+0xc14>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	1c18      	adds	r0, r3, #0
 8005da8:	f7fd fd74 	bl	8003894 <__aeabi_f2d>
 8005dac:	0002      	movs	r2, r0
 8005dae:	000b      	movs	r3, r1
 8005db0:	4ccc      	ldr	r4, [pc, #816]	@ (80060e4 <CreateMessage+0xc10>)
 8005db2:	49c4      	ldr	r1, [pc, #784]	@ (80060c4 <CreateMessage+0xbf0>)
 8005db4:	48c4      	ldr	r0, [pc, #784]	@ (80060c8 <CreateMessage+0xbf4>)
 8005db6:	9200      	str	r2, [sp, #0]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	0022      	movs	r2, r4
 8005dbc:	f020 fbe0 	bl	8026580 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
        index += strlen(message);
 8005dc0:	4bc1      	ldr	r3, [pc, #772]	@ (80060c8 <CreateMessage+0xbf4>)
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f7fa f9d2 	bl	800016c <strlen>
 8005dc8:	0003      	movs	r3, r0
 8005dca:	b299      	uxth	r1, r3
 8005dcc:	220e      	movs	r2, #14
 8005dce:	18bb      	adds	r3, r7, r2
 8005dd0:	18ba      	adds	r2, r7, r2
 8005dd2:	8812      	ldrh	r2, [r2, #0]
 8005dd4:	188a      	adds	r2, r1, r2
 8005dd6:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005dd8:	1cfb      	adds	r3, r7, #3
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d019      	beq.n	8005e14 <CreateMessage+0x940>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005de0:	4bb9      	ldr	r3, [pc, #740]	@ (80060c8 <CreateMessage+0xbf4>)
 8005de2:	0018      	movs	r0, r3
 8005de4:	f7fa f9c2 	bl	800016c <strlen>
 8005de8:	0003      	movs	r3, r0
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	4bb6      	ldr	r3, [pc, #728]	@ (80060c8 <CreateMessage+0xbf4>)
 8005dee:	0011      	movs	r1, r2
 8005df0:	0018      	movs	r0, r3
 8005df2:	f7ff f875 	bl	8004ee0 <ESP_Send>
 8005df6:	0003      	movs	r3, r0
 8005df8:	001a      	movs	r2, r3
 8005dfa:	4bb4      	ldr	r3, [pc, #720]	@ (80060cc <CreateMessage+0xbf8>)
 8005dfc:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005dfe:	4bb4      	ldr	r3, [pc, #720]	@ (80060d0 <CreateMessage+0xbfc>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	001a      	movs	r2, r3
 8005e04:	4bb1      	ldr	r3, [pc, #708]	@ (80060cc <CreateMessage+0xbf8>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	1e5a      	subs	r2, r3, #1
 8005e0c:	4193      	sbcs	r3, r2
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	4baf      	ldr	r3, [pc, #700]	@ (80060d0 <CreateMessage+0xbfc>)
 8005e12:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005e14:	4baf      	ldr	r3, [pc, #700]	@ (80060d4 <CreateMessage+0xc00>)
 8005e16:	48b5      	ldr	r0, [pc, #724]	@ (80060ec <CreateMessage+0xc18>)
 8005e18:	220c      	movs	r2, #12
 8005e1a:	0019      	movs	r1, r3
 8005e1c:	f006 fb88 	bl	800c530 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005e20:	4aac      	ldr	r2, [pc, #688]	@ (80060d4 <CreateMessage+0xc00>)
 8005e22:	4bb0      	ldr	r3, [pc, #704]	@ (80060e4 <CreateMessage+0xc10>)
 8005e24:	0011      	movs	r1, r2
 8005e26:	0018      	movs	r0, r3
 8005e28:	f7ff fa8c 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005e2c:	4bae      	ldr	r3, [pc, #696]	@ (80060e8 <CreateMessage+0xc14>)
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	1c18      	adds	r0, r3, #0
 8005e32:	f7fd fd2f 	bl	8003894 <__aeabi_f2d>
 8005e36:	0002      	movs	r2, r0
 8005e38:	000b      	movs	r3, r1
 8005e3a:	4caa      	ldr	r4, [pc, #680]	@ (80060e4 <CreateMessage+0xc10>)
 8005e3c:	49a1      	ldr	r1, [pc, #644]	@ (80060c4 <CreateMessage+0xbf0>)
 8005e3e:	48a2      	ldr	r0, [pc, #648]	@ (80060c8 <CreateMessage+0xbf4>)
 8005e40:	9200      	str	r2, [sp, #0]
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	0022      	movs	r2, r4
 8005e46:	f020 fb9b 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005e4a:	4b9f      	ldr	r3, [pc, #636]	@ (80060c8 <CreateMessage+0xbf4>)
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7fa f98d 	bl	800016c <strlen>
 8005e52:	0003      	movs	r3, r0
 8005e54:	b299      	uxth	r1, r3
 8005e56:	220e      	movs	r2, #14
 8005e58:	18bb      	adds	r3, r7, r2
 8005e5a:	18ba      	adds	r2, r7, r2
 8005e5c:	8812      	ldrh	r2, [r2, #0]
 8005e5e:	188a      	adds	r2, r1, r2
 8005e60:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e62:	1cfb      	adds	r3, r7, #3
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d019      	beq.n	8005e9e <CreateMessage+0x9ca>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e6a:	4b97      	ldr	r3, [pc, #604]	@ (80060c8 <CreateMessage+0xbf4>)
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7fa f97d 	bl	800016c <strlen>
 8005e72:	0003      	movs	r3, r0
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	4b94      	ldr	r3, [pc, #592]	@ (80060c8 <CreateMessage+0xbf4>)
 8005e78:	0011      	movs	r1, r2
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f7ff f830 	bl	8004ee0 <ESP_Send>
 8005e80:	0003      	movs	r3, r0
 8005e82:	001a      	movs	r2, r3
 8005e84:	4b91      	ldr	r3, [pc, #580]	@ (80060cc <CreateMessage+0xbf8>)
 8005e86:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e88:	4b91      	ldr	r3, [pc, #580]	@ (80060d0 <CreateMessage+0xbfc>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	001a      	movs	r2, r3
 8005e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80060cc <CreateMessage+0xbf8>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	4013      	ands	r3, r2
 8005e94:	1e5a      	subs	r2, r3, #1
 8005e96:	4193      	sbcs	r3, r2
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4b8d      	ldr	r3, [pc, #564]	@ (80060d0 <CreateMessage+0xbfc>)
 8005e9c:	701a      	strb	r2, [r3, #0]
      }
    }
//  }

  if (IsAHT20SensorPresent()) {
 8005e9e:	f007 fcbf 	bl	800d820 <IsAHT20SensorPresent>
 8005ea2:	1e03      	subs	r3, r0, #0
 8005ea4:	d100      	bne.n	8005ea8 <CreateMessage+0x9d4>
 8005ea6:	e099      	b.n	8005fdc <CreateMessage+0xb08>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005ea8:	4b8a      	ldr	r3, [pc, #552]	@ (80060d4 <CreateMessage+0xc00>)
 8005eaa:	4891      	ldr	r0, [pc, #580]	@ (80060f0 <CreateMessage+0xc1c>)
 8005eac:	220c      	movs	r2, #12
 8005eae:	0019      	movs	r1, r3
 8005eb0:	f006 fb3e 	bl	800c530 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005eb4:	4a8f      	ldr	r2, [pc, #572]	@ (80060f4 <CreateMessage+0xc20>)
 8005eb6:	4990      	ldr	r1, [pc, #576]	@ (80060f8 <CreateMessage+0xc24>)
 8005eb8:	4b86      	ldr	r3, [pc, #536]	@ (80060d4 <CreateMessage+0xc00>)
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f7ff f9e2 	bl	8005284 <isKeyValid>
 8005ec0:	1e03      	subs	r3, r0, #0
 8005ec2:	d03e      	beq.n	8005f42 <CreateMessage+0xa6e>
      uint8ArrayToString(Buffer, keybuffer);
 8005ec4:	4a83      	ldr	r2, [pc, #524]	@ (80060d4 <CreateMessage+0xc00>)
 8005ec6:	4b87      	ldr	r3, [pc, #540]	@ (80060e4 <CreateMessage+0xc10>)
 8005ec8:	0011      	movs	r1, r2
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f7ff fa3a 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 8005ed0:	4b85      	ldr	r3, [pc, #532]	@ (80060e8 <CreateMessage+0xc14>)
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	1c18      	adds	r0, r3, #0
 8005ed6:	f7fd fcdd 	bl	8003894 <__aeabi_f2d>
 8005eda:	0002      	movs	r2, r0
 8005edc:	000b      	movs	r3, r1
 8005ede:	4c81      	ldr	r4, [pc, #516]	@ (80060e4 <CreateMessage+0xc10>)
 8005ee0:	4978      	ldr	r1, [pc, #480]	@ (80060c4 <CreateMessage+0xbf0>)
 8005ee2:	4879      	ldr	r0, [pc, #484]	@ (80060c8 <CreateMessage+0xbf4>)
 8005ee4:	9200      	str	r2, [sp, #0]
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	0022      	movs	r2, r4
 8005eea:	f020 fb49 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 8005eee:	4b76      	ldr	r3, [pc, #472]	@ (80060c8 <CreateMessage+0xbf4>)
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f7fa f93b 	bl	800016c <strlen>
 8005ef6:	0003      	movs	r3, r0
 8005ef8:	b299      	uxth	r1, r3
 8005efa:	220e      	movs	r2, #14
 8005efc:	18bb      	adds	r3, r7, r2
 8005efe:	18ba      	adds	r2, r7, r2
 8005f00:	8812      	ldrh	r2, [r2, #0]
 8005f02:	188a      	adds	r2, r1, r2
 8005f04:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f06:	1cfb      	adds	r3, r7, #3
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d019      	beq.n	8005f42 <CreateMessage+0xa6e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f0e:	4b6e      	ldr	r3, [pc, #440]	@ (80060c8 <CreateMessage+0xbf4>)
 8005f10:	0018      	movs	r0, r3
 8005f12:	f7fa f92b 	bl	800016c <strlen>
 8005f16:	0003      	movs	r3, r0
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	4b6b      	ldr	r3, [pc, #428]	@ (80060c8 <CreateMessage+0xbf4>)
 8005f1c:	0011      	movs	r1, r2
 8005f1e:	0018      	movs	r0, r3
 8005f20:	f7fe ffde 	bl	8004ee0 <ESP_Send>
 8005f24:	0003      	movs	r3, r0
 8005f26:	001a      	movs	r2, r3
 8005f28:	4b68      	ldr	r3, [pc, #416]	@ (80060cc <CreateMessage+0xbf8>)
 8005f2a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f2c:	4b68      	ldr	r3, [pc, #416]	@ (80060d0 <CreateMessage+0xbfc>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	001a      	movs	r2, r3
 8005f32:	4b66      	ldr	r3, [pc, #408]	@ (80060cc <CreateMessage+0xbf8>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	4013      	ands	r3, r2
 8005f38:	1e5a      	subs	r2, r3, #1
 8005f3a:	4193      	sbcs	r3, r2
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	4b64      	ldr	r3, [pc, #400]	@ (80060d0 <CreateMessage+0xbfc>)
 8005f40:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005f42:	4b64      	ldr	r3, [pc, #400]	@ (80060d4 <CreateMessage+0xc00>)
 8005f44:	486d      	ldr	r0, [pc, #436]	@ (80060fc <CreateMessage+0xc28>)
 8005f46:	220c      	movs	r2, #12
 8005f48:	0019      	movs	r1, r3
 8005f4a:	f006 faf1 	bl	800c530 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005f4e:	4a6c      	ldr	r2, [pc, #432]	@ (8006100 <CreateMessage+0xc2c>)
 8005f50:	4969      	ldr	r1, [pc, #420]	@ (80060f8 <CreateMessage+0xc24>)
 8005f52:	4b60      	ldr	r3, [pc, #384]	@ (80060d4 <CreateMessage+0xc00>)
 8005f54:	0018      	movs	r0, r3
 8005f56:	f7ff f995 	bl	8005284 <isKeyValid>
 8005f5a:	1e03      	subs	r3, r0, #0
 8005f5c:	d03e      	beq.n	8005fdc <CreateMessage+0xb08>
      uint8ArrayToString(Buffer, keybuffer);
 8005f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80060d4 <CreateMessage+0xc00>)
 8005f60:	4b60      	ldr	r3, [pc, #384]	@ (80060e4 <CreateMessage+0xc10>)
 8005f62:	0011      	movs	r1, r2
 8005f64:	0018      	movs	r0, r3
 8005f66:	f7ff f9ed 	bl	8005344 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 8005f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80060e8 <CreateMessage+0xc14>)
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6e:	1c18      	adds	r0, r3, #0
 8005f70:	f7fd fc90 	bl	8003894 <__aeabi_f2d>
 8005f74:	0002      	movs	r2, r0
 8005f76:	000b      	movs	r3, r1
 8005f78:	4c5a      	ldr	r4, [pc, #360]	@ (80060e4 <CreateMessage+0xc10>)
 8005f7a:	4952      	ldr	r1, [pc, #328]	@ (80060c4 <CreateMessage+0xbf0>)
 8005f7c:	4852      	ldr	r0, [pc, #328]	@ (80060c8 <CreateMessage+0xbf4>)
 8005f7e:	9200      	str	r2, [sp, #0]
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	0022      	movs	r2, r4
 8005f84:	f020 fafc 	bl	8026580 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 8005f88:	4b4f      	ldr	r3, [pc, #316]	@ (80060c8 <CreateMessage+0xbf4>)
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f7fa f8ee 	bl	800016c <strlen>
 8005f90:	0003      	movs	r3, r0
 8005f92:	b299      	uxth	r1, r3
 8005f94:	220e      	movs	r2, #14
 8005f96:	18bb      	adds	r3, r7, r2
 8005f98:	18ba      	adds	r2, r7, r2
 8005f9a:	8812      	ldrh	r2, [r2, #0]
 8005f9c:	188a      	adds	r2, r1, r2
 8005f9e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fa0:	1cfb      	adds	r3, r7, #3
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d019      	beq.n	8005fdc <CreateMessage+0xb08>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fa8:	4b47      	ldr	r3, [pc, #284]	@ (80060c8 <CreateMessage+0xbf4>)
 8005faa:	0018      	movs	r0, r3
 8005fac:	f7fa f8de 	bl	800016c <strlen>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	4b44      	ldr	r3, [pc, #272]	@ (80060c8 <CreateMessage+0xbf4>)
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7fe ff91 	bl	8004ee0 <ESP_Send>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	4b42      	ldr	r3, [pc, #264]	@ (80060cc <CreateMessage+0xbf8>)
 8005fc4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fc6:	4b42      	ldr	r3, [pc, #264]	@ (80060d0 <CreateMessage+0xbfc>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	001a      	movs	r2, r3
 8005fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80060cc <CreateMessage+0xbf8>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	1e5a      	subs	r2, r3, #1
 8005fd4:	4193      	sbcs	r3, r2
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80060d0 <CreateMessage+0xbfc>)
 8005fda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005fdc:	f007 fc34 	bl	800d848 <IsENS160SensorPresent>
 8005fe0:	1e03      	subs	r3, r0, #0
 8005fe2:	d100      	bne.n	8005fe6 <CreateMessage+0xb12>
 8005fe4:	e0ff      	b.n	80061e6 <CreateMessage+0xd12>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8005fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80060d4 <CreateMessage+0xc00>)
 8005fe8:	4846      	ldr	r0, [pc, #280]	@ (8006104 <CreateMessage+0xc30>)
 8005fea:	220c      	movs	r2, #12
 8005fec:	0019      	movs	r1, r3
 8005fee:	f006 fa9f 	bl	800c530 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005ff2:	4a45      	ldr	r2, [pc, #276]	@ (8006108 <CreateMessage+0xc34>)
 8005ff4:	4945      	ldr	r1, [pc, #276]	@ (800610c <CreateMessage+0xc38>)
 8005ff6:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <CreateMessage+0xc00>)
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f7ff f943 	bl	8005284 <isKeyValid>
 8005ffe:	1e03      	subs	r3, r0, #0
 8006000:	d037      	beq.n	8006072 <CreateMessage+0xb9e>
      uint8ArrayToString(Buffer, keybuffer);
 8006002:	4a34      	ldr	r2, [pc, #208]	@ (80060d4 <CreateMessage+0xc00>)
 8006004:	4b37      	ldr	r3, [pc, #220]	@ (80060e4 <CreateMessage+0xc10>)
 8006006:	0011      	movs	r1, r2
 8006008:	0018      	movs	r0, r3
 800600a:	f7ff f99b 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 800600e:	4b36      	ldr	r3, [pc, #216]	@ (80060e8 <CreateMessage+0xc14>)
 8006010:	2255      	movs	r2, #85	@ 0x55
 8006012:	5c9b      	ldrb	r3, [r3, r2]
 8006014:	4a33      	ldr	r2, [pc, #204]	@ (80060e4 <CreateMessage+0xc10>)
 8006016:	493e      	ldr	r1, [pc, #248]	@ (8006110 <CreateMessage+0xc3c>)
 8006018:	482b      	ldr	r0, [pc, #172]	@ (80060c8 <CreateMessage+0xbf4>)
 800601a:	f020 fab1 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 800601e:	4b2a      	ldr	r3, [pc, #168]	@ (80060c8 <CreateMessage+0xbf4>)
 8006020:	0018      	movs	r0, r3
 8006022:	f7fa f8a3 	bl	800016c <strlen>
 8006026:	0003      	movs	r3, r0
 8006028:	b299      	uxth	r1, r3
 800602a:	220e      	movs	r2, #14
 800602c:	18bb      	adds	r3, r7, r2
 800602e:	18ba      	adds	r2, r7, r2
 8006030:	8812      	ldrh	r2, [r2, #0]
 8006032:	188a      	adds	r2, r1, r2
 8006034:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006036:	1cfb      	adds	r3, r7, #3
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d019      	beq.n	8006072 <CreateMessage+0xb9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800603e:	4b22      	ldr	r3, [pc, #136]	@ (80060c8 <CreateMessage+0xbf4>)
 8006040:	0018      	movs	r0, r3
 8006042:	f7fa f893 	bl	800016c <strlen>
 8006046:	0003      	movs	r3, r0
 8006048:	b29a      	uxth	r2, r3
 800604a:	4b1f      	ldr	r3, [pc, #124]	@ (80060c8 <CreateMessage+0xbf4>)
 800604c:	0011      	movs	r1, r2
 800604e:	0018      	movs	r0, r3
 8006050:	f7fe ff46 	bl	8004ee0 <ESP_Send>
 8006054:	0003      	movs	r3, r0
 8006056:	001a      	movs	r2, r3
 8006058:	4b1c      	ldr	r3, [pc, #112]	@ (80060cc <CreateMessage+0xbf8>)
 800605a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800605c:	4b1c      	ldr	r3, [pc, #112]	@ (80060d0 <CreateMessage+0xbfc>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	001a      	movs	r2, r3
 8006062:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <CreateMessage+0xbf8>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	4013      	ands	r3, r2
 8006068:	1e5a      	subs	r2, r3, #1
 800606a:	4193      	sbcs	r3, r2
 800606c:	b2da      	uxtb	r2, r3
 800606e:	4b18      	ldr	r3, [pc, #96]	@ (80060d0 <CreateMessage+0xbfc>)
 8006070:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8006072:	4b18      	ldr	r3, [pc, #96]	@ (80060d4 <CreateMessage+0xc00>)
 8006074:	4827      	ldr	r0, [pc, #156]	@ (8006114 <CreateMessage+0xc40>)
 8006076:	220c      	movs	r2, #12
 8006078:	0019      	movs	r1, r3
 800607a:	f006 fa59 	bl	800c530 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 800607e:	4a26      	ldr	r2, [pc, #152]	@ (8006118 <CreateMessage+0xc44>)
 8006080:	4922      	ldr	r1, [pc, #136]	@ (800610c <CreateMessage+0xc38>)
 8006082:	4b14      	ldr	r3, [pc, #80]	@ (80060d4 <CreateMessage+0xc00>)
 8006084:	0018      	movs	r0, r3
 8006086:	f7ff f8fd 	bl	8005284 <isKeyValid>
 800608a:	1e03      	subs	r3, r0, #0
 800608c:	d065      	beq.n	800615a <CreateMessage+0xc86>
      uint8ArrayToString(Buffer, keybuffer);
 800608e:	4a11      	ldr	r2, [pc, #68]	@ (80060d4 <CreateMessage+0xc00>)
 8006090:	4b14      	ldr	r3, [pc, #80]	@ (80060e4 <CreateMessage+0xc10>)
 8006092:	0011      	movs	r1, r2
 8006094:	0018      	movs	r0, r3
 8006096:	f7ff f955 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 800609a:	4b13      	ldr	r3, [pc, #76]	@ (80060e8 <CreateMessage+0xc14>)
 800609c:	224a      	movs	r2, #74	@ 0x4a
 800609e:	5a9b      	ldrh	r3, [r3, r2]
 80060a0:	4a10      	ldr	r2, [pc, #64]	@ (80060e4 <CreateMessage+0xc10>)
 80060a2:	491b      	ldr	r1, [pc, #108]	@ (8006110 <CreateMessage+0xc3c>)
 80060a4:	4808      	ldr	r0, [pc, #32]	@ (80060c8 <CreateMessage+0xbf4>)
 80060a6:	f020 fa6b 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 80060aa:	4b07      	ldr	r3, [pc, #28]	@ (80060c8 <CreateMessage+0xbf4>)
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7fa f85d 	bl	800016c <strlen>
 80060b2:	0003      	movs	r3, r0
 80060b4:	b299      	uxth	r1, r3
 80060b6:	220e      	movs	r2, #14
 80060b8:	18bb      	adds	r3, r7, r2
 80060ba:	18ba      	adds	r2, r7, r2
 80060bc:	8812      	ldrh	r2, [r2, #0]
 80060be:	188a      	adds	r2, r1, r2
 80060c0:	e02c      	b.n	800611c <CreateMessage+0xc48>
 80060c2:	46c0      	nop			@ (mov r8, r8)
 80060c4:	0802b1f8 	.word	0x0802b1f8
 80060c8:	200005d4 	.word	0x200005d4
 80060cc:	20000869 	.word	0x20000869
 80060d0:	20000032 	.word	0x20000032
 80060d4:	20000844 	.word	0x20000844
 80060d8:	080800bc 	.word	0x080800bc
 80060dc:	0802b2c0 	.word	0x0802b2c0
 80060e0:	0802b2d0 	.word	0x0802b2d0
 80060e4:	20000850 	.word	0x20000850
 80060e8:	20000714 	.word	0x20000714
 80060ec:	08080060 	.word	0x08080060
 80060f0:	080800c8 	.word	0x080800c8
 80060f4:	0802b280 	.word	0x0802b280
 80060f8:	0802b2d4 	.word	0x0802b2d4
 80060fc:	080800d4 	.word	0x080800d4
 8006100:	0802b2b4 	.word	0x0802b2b4
 8006104:	080800ec 	.word	0x080800ec
 8006108:	0802b2dc 	.word	0x0802b2dc
 800610c:	0802b2f0 	.word	0x0802b2f0
 8006110:	0802b218 	.word	0x0802b218
 8006114:	080800f8 	.word	0x080800f8
 8006118:	0802b2f8 	.word	0x0802b2f8
 800611c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800611e:	1cfb      	adds	r3, r7, #3
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d019      	beq.n	800615a <CreateMessage+0xc86>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006126:	4b5e      	ldr	r3, [pc, #376]	@ (80062a0 <CreateMessage+0xdcc>)
 8006128:	0018      	movs	r0, r3
 800612a:	f7fa f81f 	bl	800016c <strlen>
 800612e:	0003      	movs	r3, r0
 8006130:	b29a      	uxth	r2, r3
 8006132:	4b5b      	ldr	r3, [pc, #364]	@ (80062a0 <CreateMessage+0xdcc>)
 8006134:	0011      	movs	r1, r2
 8006136:	0018      	movs	r0, r3
 8006138:	f7fe fed2 	bl	8004ee0 <ESP_Send>
 800613c:	0003      	movs	r3, r0
 800613e:	001a      	movs	r2, r3
 8006140:	4b58      	ldr	r3, [pc, #352]	@ (80062a4 <CreateMessage+0xdd0>)
 8006142:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006144:	4b58      	ldr	r3, [pc, #352]	@ (80062a8 <CreateMessage+0xdd4>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	001a      	movs	r2, r3
 800614a:	4b56      	ldr	r3, [pc, #344]	@ (80062a4 <CreateMessage+0xdd0>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	4013      	ands	r3, r2
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	4193      	sbcs	r3, r2
 8006154:	b2da      	uxtb	r2, r3
 8006156:	4b54      	ldr	r3, [pc, #336]	@ (80062a8 <CreateMessage+0xdd4>)
 8006158:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 800615a:	4b54      	ldr	r3, [pc, #336]	@ (80062ac <CreateMessage+0xdd8>)
 800615c:	4854      	ldr	r0, [pc, #336]	@ (80062b0 <CreateMessage+0xddc>)
 800615e:	220c      	movs	r2, #12
 8006160:	0019      	movs	r1, r3
 8006162:	f006 f9e5 	bl	800c530 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8006166:	4a53      	ldr	r2, [pc, #332]	@ (80062b4 <CreateMessage+0xde0>)
 8006168:	4953      	ldr	r1, [pc, #332]	@ (80062b8 <CreateMessage+0xde4>)
 800616a:	4b50      	ldr	r3, [pc, #320]	@ (80062ac <CreateMessage+0xdd8>)
 800616c:	0018      	movs	r0, r3
 800616e:	f7ff f889 	bl	8005284 <isKeyValid>
 8006172:	1e03      	subs	r3, r0, #0
 8006174:	d037      	beq.n	80061e6 <CreateMessage+0xd12>
      uint8ArrayToString(Buffer, keybuffer);
 8006176:	4a4d      	ldr	r2, [pc, #308]	@ (80062ac <CreateMessage+0xdd8>)
 8006178:	4b50      	ldr	r3, [pc, #320]	@ (80062bc <CreateMessage+0xde8>)
 800617a:	0011      	movs	r1, r2
 800617c:	0018      	movs	r0, r3
 800617e:	f7ff f8e1 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 8006182:	4b4f      	ldr	r3, [pc, #316]	@ (80062c0 <CreateMessage+0xdec>)
 8006184:	2252      	movs	r2, #82	@ 0x52
 8006186:	5a9b      	ldrh	r3, [r3, r2]
 8006188:	4a4c      	ldr	r2, [pc, #304]	@ (80062bc <CreateMessage+0xde8>)
 800618a:	494e      	ldr	r1, [pc, #312]	@ (80062c4 <CreateMessage+0xdf0>)
 800618c:	4844      	ldr	r0, [pc, #272]	@ (80062a0 <CreateMessage+0xdcc>)
 800618e:	f020 f9f7 	bl	8026580 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 8006192:	4b43      	ldr	r3, [pc, #268]	@ (80062a0 <CreateMessage+0xdcc>)
 8006194:	0018      	movs	r0, r3
 8006196:	f7f9 ffe9 	bl	800016c <strlen>
 800619a:	0003      	movs	r3, r0
 800619c:	b299      	uxth	r1, r3
 800619e:	220e      	movs	r2, #14
 80061a0:	18bb      	adds	r3, r7, r2
 80061a2:	18ba      	adds	r2, r7, r2
 80061a4:	8812      	ldrh	r2, [r2, #0]
 80061a6:	188a      	adds	r2, r1, r2
 80061a8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80061aa:	1cfb      	adds	r3, r7, #3
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d019      	beq.n	80061e6 <CreateMessage+0xd12>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80061b2:	4b3b      	ldr	r3, [pc, #236]	@ (80062a0 <CreateMessage+0xdcc>)
 80061b4:	0018      	movs	r0, r3
 80061b6:	f7f9 ffd9 	bl	800016c <strlen>
 80061ba:	0003      	movs	r3, r0
 80061bc:	b29a      	uxth	r2, r3
 80061be:	4b38      	ldr	r3, [pc, #224]	@ (80062a0 <CreateMessage+0xdcc>)
 80061c0:	0011      	movs	r1, r2
 80061c2:	0018      	movs	r0, r3
 80061c4:	f7fe fe8c 	bl	8004ee0 <ESP_Send>
 80061c8:	0003      	movs	r3, r0
 80061ca:	001a      	movs	r2, r3
 80061cc:	4b35      	ldr	r3, [pc, #212]	@ (80062a4 <CreateMessage+0xdd0>)
 80061ce:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80061d0:	4b35      	ldr	r3, [pc, #212]	@ (80062a8 <CreateMessage+0xdd4>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	001a      	movs	r2, r3
 80061d6:	4b33      	ldr	r3, [pc, #204]	@ (80062a4 <CreateMessage+0xdd0>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	4013      	ands	r3, r2
 80061dc:	1e5a      	subs	r2, r3, #1
 80061de:	4193      	sbcs	r3, r2
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	4b31      	ldr	r3, [pc, #196]	@ (80062a8 <CreateMessage+0xdd4>)
 80061e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 80061e6:	4b31      	ldr	r3, [pc, #196]	@ (80062ac <CreateMessage+0xdd8>)
 80061e8:	4837      	ldr	r0, [pc, #220]	@ (80062c8 <CreateMessage+0xdf4>)
 80061ea:	220c      	movs	r2, #12
 80061ec:	0019      	movs	r1, r3
 80061ee:	f006 f99f 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80061f2:	4a2e      	ldr	r2, [pc, #184]	@ (80062ac <CreateMessage+0xdd8>)
 80061f4:	4b31      	ldr	r3, [pc, #196]	@ (80062bc <CreateMessage+0xde8>)
 80061f6:	0011      	movs	r1, r2
 80061f8:	0018      	movs	r0, r3
 80061fa:	f7ff f8a3 	bl	8005344 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 80061fe:	4b33      	ldr	r3, [pc, #204]	@ (80062cc <CreateMessage+0xdf8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	1c18      	adds	r0, r3, #0
 8006204:	f7fd fb46 	bl	8003894 <__aeabi_f2d>
 8006208:	0002      	movs	r2, r0
 800620a:	000b      	movs	r3, r1
 800620c:	4c2b      	ldr	r4, [pc, #172]	@ (80062bc <CreateMessage+0xde8>)
 800620e:	4930      	ldr	r1, [pc, #192]	@ (80062d0 <CreateMessage+0xdfc>)
 8006210:	4823      	ldr	r0, [pc, #140]	@ (80062a0 <CreateMessage+0xdcc>)
 8006212:	9200      	str	r2, [sp, #0]
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	0022      	movs	r2, r4
 8006218:	f020 f9b2 	bl	8026580 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 800621c:	4b20      	ldr	r3, [pc, #128]	@ (80062a0 <CreateMessage+0xdcc>)
 800621e:	0018      	movs	r0, r3
 8006220:	f7f9 ffa4 	bl	800016c <strlen>
 8006224:	0002      	movs	r2, r0
 8006226:	4b1e      	ldr	r3, [pc, #120]	@ (80062a0 <CreateMessage+0xdcc>)
 8006228:	18d3      	adds	r3, r2, r3
 800622a:	4a2a      	ldr	r2, [pc, #168]	@ (80062d4 <CreateMessage+0xe00>)
 800622c:	0011      	movs	r1, r2
 800622e:	0018      	movs	r0, r3
 8006230:	f020 f9a6 	bl	8026580 <siprintf>
  index += strlen(message);
 8006234:	4b1a      	ldr	r3, [pc, #104]	@ (80062a0 <CreateMessage+0xdcc>)
 8006236:	0018      	movs	r0, r3
 8006238:	f7f9 ff98 	bl	800016c <strlen>
 800623c:	0003      	movs	r3, r0
 800623e:	b299      	uxth	r1, r3
 8006240:	220e      	movs	r2, #14
 8006242:	18bb      	adds	r3, r7, r2
 8006244:	18ba      	adds	r2, r7, r2
 8006246:	8812      	ldrh	r2, [r2, #0]
 8006248:	188a      	adds	r2, r1, r2
 800624a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800624c:	1cfb      	adds	r3, r7, #3
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d019      	beq.n	8006288 <CreateMessage+0xdb4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006254:	4b12      	ldr	r3, [pc, #72]	@ (80062a0 <CreateMessage+0xdcc>)
 8006256:	0018      	movs	r0, r3
 8006258:	f7f9 ff88 	bl	800016c <strlen>
 800625c:	0003      	movs	r3, r0
 800625e:	b29a      	uxth	r2, r3
 8006260:	4b0f      	ldr	r3, [pc, #60]	@ (80062a0 <CreateMessage+0xdcc>)
 8006262:	0011      	movs	r1, r2
 8006264:	0018      	movs	r0, r3
 8006266:	f7fe fe3b 	bl	8004ee0 <ESP_Send>
 800626a:	0003      	movs	r3, r0
 800626c:	001a      	movs	r2, r3
 800626e:	4b0d      	ldr	r3, [pc, #52]	@ (80062a4 <CreateMessage+0xdd0>)
 8006270:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8006272:	4b0d      	ldr	r3, [pc, #52]	@ (80062a8 <CreateMessage+0xdd4>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	001a      	movs	r2, r3
 8006278:	4b0a      	ldr	r3, [pc, #40]	@ (80062a4 <CreateMessage+0xdd0>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	4013      	ands	r3, r2
 800627e:	1e5a      	subs	r2, r3, #1
 8006280:	4193      	sbcs	r3, r2
 8006282:	b2da      	uxtb	r2, r3
 8006284:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <CreateMessage+0xdd4>)
 8006286:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8006288:	4b07      	ldr	r3, [pc, #28]	@ (80062a8 <CreateMessage+0xdd4>)
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	701a      	strb	r2, [r3, #0]
  return index;
 8006290:	230e      	movs	r3, #14
 8006292:	18fb      	adds	r3, r7, r3
 8006294:	881b      	ldrh	r3, [r3, #0]
}
 8006296:	0018      	movs	r0, r3
 8006298:	46bd      	mov	sp, r7
 800629a:	b004      	add	sp, #16
 800629c:	bdb0      	pop	{r4, r5, r7, pc}
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	200005d4 	.word	0x200005d4
 80062a4:	20000869 	.word	0x20000869
 80062a8:	20000032 	.word	0x20000032
 80062ac:	20000844 	.word	0x20000844
 80062b0:	08080104 	.word	0x08080104
 80062b4:	0802b300 	.word	0x0802b300
 80062b8:	0802b2f0 	.word	0x0802b2f0
 80062bc:	20000850 	.word	0x20000850
 80062c0:	20000714 	.word	0x20000714
 80062c4:	0802b218 	.word	0x0802b218
 80062c8:	0808006c 	.word	0x0808006c
 80062cc:	200005cc 	.word	0x200005cc
 80062d0:	0802b1f8 	.word	0x0802b1f8
 80062d4:	0802b308 	.word	0x0802b308

080062d8 <StartProg>:

void StartProg(){
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80062dc:	2064      	movs	r0, #100	@ 0x64
 80062de:	f00e fd03 	bl	8014ce8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80062e2:	4b15      	ldr	r3, [pc, #84]	@ (8006338 <StartProg+0x60>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	2101      	movs	r1, #1
 80062e8:	0018      	movs	r0, r3
 80062ea:	f00f ff84 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80062ee:	2064      	movs	r0, #100	@ 0x64
 80062f0:	f00e fcfa 	bl	8014ce8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80062f4:	4b10      	ldr	r3, [pc, #64]	@ (8006338 <StartProg+0x60>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	2102      	movs	r1, #2
 80062fa:	0018      	movs	r0, r3
 80062fc:	f00f ff7b 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8006300:	23fa      	movs	r3, #250	@ 0xfa
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	0018      	movs	r0, r3
 8006306:	f00e fcef 	bl	8014ce8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800630a:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <StartProg+0x60>)
 800630c:	2201      	movs	r2, #1
 800630e:	2101      	movs	r1, #1
 8006310:	0018      	movs	r0, r3
 8006312:	f00f ff70 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8006316:	23fa      	movs	r3, #250	@ 0xfa
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	0018      	movs	r0, r3
 800631c:	f00e fce4 	bl	8014ce8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8006320:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <StartProg+0x60>)
 8006322:	2201      	movs	r2, #1
 8006324:	2102      	movs	r1, #2
 8006326:	0018      	movs	r0, r3
 8006328:	f00f ff65 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 800632c:	2028      	movs	r0, #40	@ 0x28
 800632e:	f00e fcdb 	bl	8014ce8 <HAL_Delay>
}
 8006332:	46c0      	nop			@ (mov r8, r8)
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	50001c00 	.word	0x50001c00

0800633c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 800633c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633e:	b0df      	sub	sp, #380	@ 0x17c
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	0008      	movs	r0, r1
 8006346:	0011      	movs	r1, r2
 8006348:	4bc0      	ldr	r3, [pc, #768]	@ (800664c <ParseBuffer+0x310>)
 800634a:	24bc      	movs	r4, #188	@ 0xbc
 800634c:	0064      	lsls	r4, r4, #1
 800634e:	191b      	adds	r3, r3, r4
 8006350:	19db      	adds	r3, r3, r7
 8006352:	1c02      	adds	r2, r0, #0
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	4bbe      	ldr	r3, [pc, #760]	@ (8006650 <ParseBuffer+0x314>)
 8006358:	191b      	adds	r3, r3, r4
 800635a:	19db      	adds	r3, r3, r7
 800635c:	1c0a      	adds	r2, r1, #0
 800635e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8006360:	2380      	movs	r3, #128	@ 0x80
 8006362:	005a      	lsls	r2, r3, #1
 8006364:	235c      	movs	r3, #92	@ 0x5c
 8006366:	18fb      	adds	r3, r7, r3
 8006368:	2100      	movs	r1, #0
 800636a:	0018      	movs	r0, r3
 800636c:	f020 fa50 	bl	8026810 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8006370:	2378      	movs	r3, #120	@ 0x78
 8006372:	33ff      	adds	r3, #255	@ 0xff
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	2203      	movs	r2, #3
 8006378:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800637a:	23ba      	movs	r3, #186	@ 0xba
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	2200      	movs	r2, #0
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e013      	b.n	80063ae <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8006386:	20ba      	movs	r0, #186	@ 0xba
 8006388:	0040      	lsls	r0, r0, #1
 800638a:	183b      	adds	r3, r7, r0
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	18d2      	adds	r2, r2, r3
 8006392:	183b      	adds	r3, r7, r0
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	7811      	ldrb	r1, [r2, #0]
 8006398:	4aae      	ldr	r2, [pc, #696]	@ (8006654 <ParseBuffer+0x318>)
 800639a:	24bc      	movs	r4, #188	@ 0xbc
 800639c:	0064      	lsls	r4, r4, #1
 800639e:	1912      	adds	r2, r2, r4
 80063a0:	19d2      	adds	r2, r2, r7
 80063a2:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80063a4:	183b      	adds	r3, r7, r0
 80063a6:	881a      	ldrh	r2, [r3, #0]
 80063a8:	183b      	adds	r3, r7, r0
 80063aa:	3201      	adds	r2, #1
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	23ba      	movs	r3, #186	@ 0xba
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	18fa      	adds	r2, r7, r3
 80063b4:	4ba5      	ldr	r3, [pc, #660]	@ (800664c <ParseBuffer+0x310>)
 80063b6:	21bc      	movs	r1, #188	@ 0xbc
 80063b8:	0049      	lsls	r1, r1, #1
 80063ba:	185b      	adds	r3, r3, r1
 80063bc:	19db      	adds	r3, r3, r7
 80063be:	8812      	ldrh	r2, [r2, #0]
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d3df      	bcc.n	8006386 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80063c6:	4ba1      	ldr	r3, [pc, #644]	@ (800664c <ParseBuffer+0x310>)
 80063c8:	185b      	adds	r3, r3, r1
 80063ca:	19db      	adds	r3, r3, r7
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	4aa1      	ldr	r2, [pc, #644]	@ (8006654 <ParseBuffer+0x318>)
 80063d0:	1852      	adds	r2, r2, r1
 80063d2:	19d2      	adds	r2, r2, r7
 80063d4:	2100      	movs	r1, #0
 80063d6:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80063d8:	f00d ff8e 	bl	80142f8 <GetVerboseLevel>
 80063dc:	0003      	movs	r3, r0
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d115      	bne.n	800640e <ParseBuffer+0xd2>
#ifdef LONGMESSAGES
  if (usblog && Check_USB_PowerOn()) {
 80063e2:	4b9d      	ldr	r3, [pc, #628]	@ (8006658 <ParseBuffer+0x31c>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <ParseBuffer+0xc4>
 80063ea:	f003 fc9d 	bl	8009d28 <Check_USB_PowerOn>
 80063ee:	1e03      	subs	r3, r0, #0
 80063f0:	d006      	beq.n	8006400 <ParseBuffer+0xc4>
    printf_USB("%s\r\n", tempBuf);
 80063f2:	235c      	movs	r3, #92	@ 0x5c
 80063f4:	18fa      	adds	r2, r7, r3
 80063f6:	4b99      	ldr	r3, [pc, #612]	@ (800665c <ParseBuffer+0x320>)
 80063f8:	0011      	movs	r1, r2
 80063fa:	0018      	movs	r0, r3
 80063fc:	f002 fb80 	bl	8008b00 <printf_USB>
  }
  printf("Receive ParseBuffer: %s", tempBuf );
 8006400:	235c      	movs	r3, #92	@ 0x5c
 8006402:	18fa      	adds	r2, r7, r3
 8006404:	4b96      	ldr	r3, [pc, #600]	@ (8006660 <ParseBuffer+0x324>)
 8006406:	0011      	movs	r1, r2
 8006408:	0018      	movs	r0, r3
 800640a:	f020 f849 	bl	80264a0 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	26b8      	movs	r6, #184	@ 0xb8
 8006412:	0076      	lsls	r6, r6, #1
 8006414:	19ba      	adds	r2, r7, r6
 8006416:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8006418:	4b92      	ldr	r3, [pc, #584]	@ (8006664 <ParseBuffer+0x328>)
 800641a:	25bc      	movs	r5, #188	@ 0xbc
 800641c:	006d      	lsls	r5, r5, #1
 800641e:	195b      	adds	r3, r3, r5
 8006420:	19db      	adds	r3, r3, r7
 8006422:	4a91      	ldr	r2, [pc, #580]	@ (8006668 <ParseBuffer+0x32c>)
 8006424:	8811      	ldrh	r1, [r2, #0]
 8006426:	8019      	strh	r1, [r3, #0]
 8006428:	7892      	ldrb	r2, [r2, #2]
 800642a:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 800642c:	4b8f      	ldr	r3, [pc, #572]	@ (800666c <ParseBuffer+0x330>)
 800642e:	195b      	adds	r3, r3, r5
 8006430:	19db      	adds	r3, r3, r7
 8006432:	4a8f      	ldr	r2, [pc, #572]	@ (8006670 <ParseBuffer+0x334>)
 8006434:	6811      	ldr	r1, [r2, #0]
 8006436:	6019      	str	r1, [r3, #0]
 8006438:	8892      	ldrh	r2, [r2, #4]
 800643a:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800643c:	4b8d      	ldr	r3, [pc, #564]	@ (8006674 <ParseBuffer+0x338>)
 800643e:	195b      	adds	r3, r3, r5
 8006440:	19db      	adds	r3, r3, r7
 8006442:	4a8d      	ldr	r2, [pc, #564]	@ (8006678 <ParseBuffer+0x33c>)
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	2200      	movs	r2, #0
 8006448:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800644a:	4b8c      	ldr	r3, [pc, #560]	@ (800667c <ParseBuffer+0x340>)
 800644c:	195b      	adds	r3, r3, r5
 800644e:	19db      	adds	r3, r3, r7
 8006450:	4a8b      	ldr	r2, [pc, #556]	@ (8006680 <ParseBuffer+0x344>)
 8006452:	6811      	ldr	r1, [r2, #0]
 8006454:	6019      	str	r1, [r3, #0]
 8006456:	8892      	ldrh	r2, [r2, #4]
 8006458:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800645a:	4b8a      	ldr	r3, [pc, #552]	@ (8006684 <ParseBuffer+0x348>)
 800645c:	195b      	adds	r3, r3, r5
 800645e:	19db      	adds	r3, r3, r7
 8006460:	223e      	movs	r2, #62	@ 0x3e
 8006462:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8006464:	4b88      	ldr	r3, [pc, #544]	@ (8006688 <ParseBuffer+0x34c>)
 8006466:	195b      	adds	r3, r3, r5
 8006468:	19db      	adds	r3, r3, r7
 800646a:	4a88      	ldr	r2, [pc, #544]	@ (800668c <ParseBuffer+0x350>)
 800646c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800646e:	c313      	stmia	r3!, {r0, r1, r4}
 8006470:	8811      	ldrh	r1, [r2, #0]
 8006472:	8019      	strh	r1, [r3, #0]
 8006474:	7892      	ldrb	r2, [r2, #2]
 8006476:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8006478:	4b85      	ldr	r3, [pc, #532]	@ (8006690 <ParseBuffer+0x354>)
 800647a:	195b      	adds	r3, r3, r5
 800647c:	19db      	adds	r3, r3, r7
 800647e:	4a85      	ldr	r2, [pc, #532]	@ (8006694 <ParseBuffer+0x358>)
 8006480:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006482:	c313      	stmia	r3!, {r0, r1, r4}
 8006484:	8812      	ldrh	r2, [r2, #0]
 8006486:	801a      	strh	r2, [r3, #0]
  const char MAIL_API[] = AT_RESPONSE_MAIL_API;
 8006488:	4b83      	ldr	r3, [pc, #524]	@ (8006698 <ParseBuffer+0x35c>)
 800648a:	195b      	adds	r3, r3, r5
 800648c:	19db      	adds	r3, r3, r7
 800648e:	4a83      	ldr	r2, [pc, #524]	@ (800669c <ParseBuffer+0x360>)
 8006490:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006492:	c313      	stmia	r3!, {r0, r1, r4}
 8006494:	8811      	ldrh	r1, [r2, #0]
 8006496:	8019      	strh	r1, [r3, #0]
 8006498:	7892      	ldrb	r2, [r2, #2]
 800649a:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800649c:	4b6c      	ldr	r3, [pc, #432]	@ (8006650 <ParseBuffer+0x314>)
 800649e:	195b      	adds	r3, r3, r5
 80064a0:	19db      	adds	r3, r3, r7
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <ParseBuffer+0x182>
    ParsePoint = strstr(tempBuf, OK);
 80064a8:	2358      	movs	r3, #88	@ 0x58
 80064aa:	18fa      	adds	r2, r7, r3
 80064ac:	235c      	movs	r3, #92	@ 0x5c
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	0011      	movs	r1, r2
 80064b2:	0018      	movs	r0, r3
 80064b4:	f020 f9e7 	bl	8026886 <strstr>
 80064b8:	0003      	movs	r3, r0
 80064ba:	19ba      	adds	r2, r7, r6
 80064bc:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80064be:	4b64      	ldr	r3, [pc, #400]	@ (8006650 <ParseBuffer+0x314>)
 80064c0:	22bc      	movs	r2, #188	@ 0xbc
 80064c2:	0052      	lsls	r2, r2, #1
 80064c4:	189b      	adds	r3, r3, r2
 80064c6:	19db      	adds	r3, r3, r7
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10c      	bne.n	80064e8 <ParseBuffer+0x1ac>
    ParsePoint = strstr(tempBuf, ready);
 80064ce:	2340      	movs	r3, #64	@ 0x40
 80064d0:	18fa      	adds	r2, r7, r3
 80064d2:	235c      	movs	r3, #92	@ 0x5c
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	0011      	movs	r1, r2
 80064d8:	0018      	movs	r0, r3
 80064da:	f020 f9d4 	bl	8026886 <strstr>
 80064de:	0003      	movs	r3, r0
 80064e0:	22b8      	movs	r2, #184	@ 0xb8
 80064e2:	0052      	lsls	r2, r2, #1
 80064e4:	18ba      	adds	r2, r7, r2
 80064e6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80064e8:	4b59      	ldr	r3, [pc, #356]	@ (8006650 <ParseBuffer+0x314>)
 80064ea:	22bc      	movs	r2, #188	@ 0xbc
 80064ec:	0052      	lsls	r2, r2, #1
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	19db      	adds	r3, r3, r7
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d10c      	bne.n	8006512 <ParseBuffer+0x1d6>
    ParsePoint = strstr(tempBuf, start);
 80064f8:	233c      	movs	r3, #60	@ 0x3c
 80064fa:	18fa      	adds	r2, r7, r3
 80064fc:	235c      	movs	r3, #92	@ 0x5c
 80064fe:	18fb      	adds	r3, r7, r3
 8006500:	0011      	movs	r1, r2
 8006502:	0018      	movs	r0, r3
 8006504:	f020 f9bf 	bl	8026886 <strstr>
 8006508:	0003      	movs	r3, r0
 800650a:	22b8      	movs	r2, #184	@ 0xb8
 800650c:	0052      	lsls	r2, r2, #1
 800650e:	18ba      	adds	r2, r7, r2
 8006510:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8006512:	4b4f      	ldr	r3, [pc, #316]	@ (8006650 <ParseBuffer+0x314>)
 8006514:	22bc      	movs	r2, #188	@ 0xbc
 8006516:	0052      	lsls	r2, r2, #1
 8006518:	189b      	adds	r3, r3, r2
 800651a:	19db      	adds	r3, r3, r7
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b05      	cmp	r3, #5
 8006520:	d10c      	bne.n	800653c <ParseBuffer+0x200>
    ParsePoint = strstr(tempBuf, TIME);
 8006522:	231c      	movs	r3, #28
 8006524:	18fa      	adds	r2, r7, r3
 8006526:	235c      	movs	r3, #92	@ 0x5c
 8006528:	18fb      	adds	r3, r7, r3
 800652a:	0011      	movs	r1, r2
 800652c:	0018      	movs	r0, r3
 800652e:	f020 f9aa 	bl	8026886 <strstr>
 8006532:	0003      	movs	r3, r0
 8006534:	22b8      	movs	r2, #184	@ 0xb8
 8006536:	0052      	lsls	r2, r2, #1
 8006538:	18ba      	adds	r2, r7, r2
 800653a:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_MAIL_API){
 800653c:	4b44      	ldr	r3, [pc, #272]	@ (8006650 <ParseBuffer+0x314>)
 800653e:	22bc      	movs	r2, #188	@ 0xbc
 8006540:	0052      	lsls	r2, r2, #1
 8006542:	189b      	adds	r3, r3, r2
 8006544:	19db      	adds	r3, r3, r7
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b06      	cmp	r3, #6
 800654a:	d10c      	bne.n	8006566 <ParseBuffer+0x22a>
    ParsePoint = strstr(tempBuf, MAIL_API);
 800654c:	230c      	movs	r3, #12
 800654e:	18fa      	adds	r2, r7, r3
 8006550:	235c      	movs	r3, #92	@ 0x5c
 8006552:	18fb      	adds	r3, r7, r3
 8006554:	0011      	movs	r1, r2
 8006556:	0018      	movs	r0, r3
 8006558:	f020 f995 	bl	8026886 <strstr>
 800655c:	0003      	movs	r3, r0
 800655e:	22b8      	movs	r2, #184	@ 0xb8
 8006560:	0052      	lsls	r2, r2, #1
 8006562:	18ba      	adds	r2, r7, r2
 8006564:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006566:	2350      	movs	r3, #80	@ 0x50
 8006568:	18fa      	adds	r2, r7, r3
 800656a:	245c      	movs	r4, #92	@ 0x5c
 800656c:	193b      	adds	r3, r7, r4
 800656e:	0011      	movs	r1, r2
 8006570:	0018      	movs	r0, r3
 8006572:	f020 f988 	bl	8026886 <strstr>
 8006576:	0003      	movs	r3, r0
 8006578:	22b6      	movs	r2, #182	@ 0xb6
 800657a:	0052      	lsls	r2, r2, #1
 800657c:	18ba      	adds	r2, r7, r2
 800657e:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8006580:	232c      	movs	r3, #44	@ 0x2c
 8006582:	18fa      	adds	r2, r7, r3
 8006584:	193b      	adds	r3, r7, r4
 8006586:	0011      	movs	r1, r2
 8006588:	0018      	movs	r0, r3
 800658a:	f020 f97c 	bl	8026886 <strstr>
 800658e:	0003      	movs	r3, r0
 8006590:	22b4      	movs	r2, #180	@ 0xb4
 8006592:	0052      	lsls	r2, r2, #1
 8006594:	18ba      	adds	r2, r7, r2
 8006596:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, Credentials.SSID);
 8006598:	4a41      	ldr	r2, [pc, #260]	@ (80066a0 <ParseBuffer+0x364>)
 800659a:	193b      	adds	r3, r7, r4
 800659c:	0011      	movs	r1, r2
 800659e:	0018      	movs	r0, r3
 80065a0:	f020 f971 	bl	8026886 <strstr>
 80065a4:	0003      	movs	r3, r0
 80065a6:	22b2      	movs	r2, #178	@ 0xb2
 80065a8:	0052      	lsls	r2, r2, #1
 80065aa:	18ba      	adds	r2, r7, r2
 80065ac:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80065ae:	2348      	movs	r3, #72	@ 0x48
 80065b0:	18fa      	adds	r2, r7, r3
 80065b2:	193b      	adds	r3, r7, r4
 80065b4:	0011      	movs	r1, r2
 80065b6:	0018      	movs	r0, r3
 80065b8:	f020 f965 	bl	8026886 <strstr>
 80065bc:	0003      	movs	r3, r0
 80065be:	22b0      	movs	r2, #176	@ 0xb0
 80065c0:	0052      	lsls	r2, r2, #1
 80065c2:	18ba      	adds	r2, r7, r2
 80065c4:	6013      	str	r3, [r2, #0]
  char *ParsePoint6 = strstr(tempBuf, MAIL_API);
 80065c6:	230c      	movs	r3, #12
 80065c8:	18fa      	adds	r2, r7, r3
 80065ca:	193b      	adds	r3, r7, r4
 80065cc:	0011      	movs	r1, r2
 80065ce:	0018      	movs	r0, r3
 80065d0:	f020 f959 	bl	8026886 <strstr>
 80065d4:	0003      	movs	r3, r0
 80065d6:	22ae      	movs	r2, #174	@ 0xae
 80065d8:	0052      	lsls	r2, r2, #1
 80065da:	18ba      	adds	r2, r7, r2
 80065dc:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80065de:	4b1b      	ldr	r3, [pc, #108]	@ (800664c <ParseBuffer+0x310>)
 80065e0:	21bc      	movs	r1, #188	@ 0xbc
 80065e2:	0049      	lsls	r1, r1, #1
 80065e4:	185b      	adds	r3, r3, r1
 80065e6:	19db      	adds	r3, r3, r7
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d800      	bhi.n	80065f0 <ParseBuffer+0x2b4>
 80065ee:	e0c8      	b.n	8006782 <ParseBuffer+0x446>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80065f0:	22b8      	movs	r2, #184	@ 0xb8
 80065f2:	0052      	lsls	r2, r2, #1
 80065f4:	18bb      	adds	r3, r7, r2
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d059      	beq.n	80066b0 <ParseBuffer+0x374>
 80065fc:	18bb      	adds	r3, r7, r2
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b4f      	cmp	r3, #79	@ 0x4f
 8006604:	d154      	bne.n	80066b0 <ParseBuffer+0x374>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8006606:	2378      	movs	r3, #120	@ 0x78
 8006608:	33ff      	adds	r3, #255	@ 0xff
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8006610:	4b24      	ldr	r3, [pc, #144]	@ (80066a4 <ParseBuffer+0x368>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b12      	cmp	r3, #18
 8006616:	d14b      	bne.n	80066b0 <ParseBuffer+0x374>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8006618:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <ParseBuffer+0x310>)
 800661a:	185b      	adds	r3, r3, r1
 800661c:	19db      	adds	r3, r3, r7
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	2b2b      	cmp	r3, #43	@ 0x2b
 8006622:	d10b      	bne.n	800663c <ParseBuffer+0x300>
 8006624:	4b0b      	ldr	r3, [pc, #44]	@ (8006654 <ParseBuffer+0x318>)
 8006626:	185b      	adds	r3, r3, r1
 8006628:	19db      	adds	r3, r3, r7
 800662a:	2221      	movs	r2, #33	@ 0x21
 800662c:	5c9b      	ldrb	r3, [r3, r2]
 800662e:	2b32      	cmp	r3, #50	@ 0x32
 8006630:	d104      	bne.n	800663c <ParseBuffer+0x300>
          ParseTime(tempBuf);
 8006632:	193b      	adds	r3, r7, r4
 8006634:	0018      	movs	r0, r3
 8006636:	f003 fdc7 	bl	800a1c8 <ParseTime>
 800663a:	e039      	b.n	80066b0 <ParseBuffer+0x374>
        }
        else {
          Error("Error getting time");
 800663c:	4a1a      	ldr	r2, [pc, #104]	@ (80066a8 <ParseBuffer+0x36c>)
 800663e:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <ParseBuffer+0x370>)
 8006640:	0019      	movs	r1, r3
 8006642:	2001      	movs	r0, #1
 8006644:	f00d fdce 	bl	80141e4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8006648:	2306      	movs	r3, #6
 800664a:	e09e      	b.n	800678a <ParseBuffer+0x44e>
 800664c:	fffffe8a 	.word	0xfffffe8a
 8006650:	fffffe89 	.word	0xfffffe89
 8006654:	fffffee4 	.word	0xfffffee4
 8006658:	20001113 	.word	0x20001113
 800665c:	0802b30c 	.word	0x0802b30c
 8006660:	0802b314 	.word	0x0802b314
 8006664:	fffffee0 	.word	0xfffffee0
 8006668:	0802b340 	.word	0x0802b340
 800666c:	fffffed8 	.word	0xfffffed8
 8006670:	0802b344 	.word	0x0802b344
 8006674:	fffffed0 	.word	0xfffffed0
 8006678:	4c494146 	.word	0x4c494146
 800667c:	fffffec8 	.word	0xfffffec8
 8006680:	0802b34c 	.word	0x0802b34c
 8006684:	fffffec4 	.word	0xfffffec4
 8006688:	fffffeb4 	.word	0xfffffeb4
 800668c:	0802b354 	.word	0x0802b354
 8006690:	fffffea4 	.word	0xfffffea4
 8006694:	0802b364 	.word	0x0802b364
 8006698:	fffffe94 	.word	0xfffffe94
 800669c:	0802b374 	.word	0x0802b374
 80066a0:	200006b0 	.word	0x200006b0
 80066a4:	20000711 	.word	0x20000711
 80066a8:	0802b32c 	.word	0x0802b32c
 80066ac:	0802acb8 	.word	0x0802acb8
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80066b0:	22b8      	movs	r2, #184	@ 0xb8
 80066b2:	0052      	lsls	r2, r2, #1
 80066b4:	18bb      	adds	r3, r7, r2
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <ParseBuffer+0x394>
 80066bc:	18bb      	adds	r3, r7, r2
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b72      	cmp	r3, #114	@ 0x72
 80066c4:	d104      	bne.n	80066d0 <ParseBuffer+0x394>
      status = RECEIVE_STATUS_READY;
 80066c6:	2378      	movs	r3, #120	@ 0x78
 80066c8:	33ff      	adds	r3, #255	@ 0xff
 80066ca:	18fb      	adds	r3, r7, r3
 80066cc:	2202      	movs	r2, #2
 80066ce:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80066d0:	22b8      	movs	r2, #184	@ 0xb8
 80066d2:	0052      	lsls	r2, r2, #1
 80066d4:	18bb      	adds	r3, r7, r2
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <ParseBuffer+0x3b4>
 80066dc:	18bb      	adds	r3, r7, r2
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80066e4:	d104      	bne.n	80066f0 <ParseBuffer+0x3b4>
      status = RECEIVE_STATUS_START;
 80066e6:	2378      	movs	r3, #120	@ 0x78
 80066e8:	33ff      	adds	r3, #255	@ 0xff
 80066ea:	18fb      	adds	r3, r7, r3
 80066ec:	2205      	movs	r2, #5
 80066ee:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80066f0:	22b8      	movs	r2, #184	@ 0xb8
 80066f2:	0052      	lsls	r2, r2, #1
 80066f4:	18bb      	adds	r3, r7, r2
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <ParseBuffer+0x3d4>
 80066fc:	18bb      	adds	r3, r7, r2
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b2b      	cmp	r3, #43	@ 0x2b
 8006704:	d104      	bne.n	8006710 <ParseBuffer+0x3d4>
      status = RECEIVE_STATUS_TIME;
 8006706:	2378      	movs	r3, #120	@ 0x78
 8006708:	33ff      	adds	r3, #255	@ 0xff
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	220b      	movs	r2, #11
 800670e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006710:	22b6      	movs	r2, #182	@ 0xb6
 8006712:	0052      	lsls	r2, r2, #1
 8006714:	18bb      	adds	r3, r7, r2
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <ParseBuffer+0x3ea>
 800671c:	18bb      	adds	r3, r7, r2
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b45      	cmp	r3, #69	@ 0x45
 8006724:	d00a      	beq.n	800673c <ParseBuffer+0x400>
 8006726:	22b0      	movs	r2, #176	@ 0xb0
 8006728:	0052      	lsls	r2, r2, #1
 800672a:	18bb      	adds	r3, r7, r2
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <ParseBuffer+0x40a>
 8006732:	18bb      	adds	r3, r7, r2
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b46      	cmp	r3, #70	@ 0x46
 800673a:	d104      	bne.n	8006746 <ParseBuffer+0x40a>
      status = RECEIVE_STATUS_ERROR;
 800673c:	2378      	movs	r3, #120	@ 0x78
 800673e:	33ff      	adds	r3, #255	@ 0xff
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	2201      	movs	r2, #1
 8006744:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8006746:	22b4      	movs	r2, #180	@ 0xb4
 8006748:	0052      	lsls	r2, r2, #1
 800674a:	18bb      	adds	r3, r7, r2
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <ParseBuffer+0x426>
 8006752:	18bb      	adds	r3, r7, r2
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b57      	cmp	r3, #87	@ 0x57
 800675a:	d102      	bne.n	8006762 <ParseBuffer+0x426>
      ConnectionMade = true;
 800675c:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <ParseBuffer+0x458>)
 800675e:	2201      	movs	r2, #1
 8006760:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
#ifdef USE_MAIL
    if(ParsePoint6 != 0 && *ParsePoint6 == '{'){
 8006762:	22ae      	movs	r2, #174	@ 0xae
 8006764:	0052      	lsls	r2, r2, #1
 8006766:	18bb      	adds	r3, r7, r2
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <ParseBuffer+0x446>
 800676e:	18bb      	adds	r3, r7, r2
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b7b      	cmp	r3, #123	@ 0x7b
 8006776:	d104      	bne.n	8006782 <ParseBuffer+0x446>
      status = RECEIVE_STATUS_MAIL_API;
 8006778:	2378      	movs	r3, #120	@ 0x78
 800677a:	33ff      	adds	r3, #255	@ 0xff
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	220c      	movs	r2, #12
 8006780:	701a      	strb	r2, [r3, #0]
    }
#endif
  }
  return(status);
 8006782:	2378      	movs	r3, #120	@ 0x78
 8006784:	33ff      	adds	r3, #255	@ 0xff
 8006786:	18fb      	adds	r3, r7, r3
 8006788:	781b      	ldrb	r3, [r3, #0]

}
 800678a:	0018      	movs	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	b05f      	add	sp, #380	@ 0x17c
 8006790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006792:	46c0      	nop			@ (mov r8, r8)
 8006794:	200005b0 	.word	0x200005b0

08006798 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800679e:	4b0b      	ldr	r3, [pc, #44]	@ (80067cc <PollAwake+0x34>)
 80067a0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7f9 fce1 	bl	800016c <strlen>
 80067aa:	0003      	movs	r3, r0
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0011      	movs	r1, r2
 80067b2:	0018      	movs	r0, r3
 80067b4:	f7fe fb94 	bl	8004ee0 <ESP_Send>
 80067b8:	1e03      	subs	r3, r0, #0
 80067ba:	d001      	beq.n	80067c0 <PollAwake+0x28>
    return true;
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <PollAwake+0x2a>
  }
  else{
    return false;
 80067c0:	2300      	movs	r3, #0
  }
}
 80067c2:	0018      	movs	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b002      	add	sp, #8
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	46c0      	nop			@ (mov r8, r8)
 80067cc:	0802b384 	.word	0x0802b384

080067d0 <RFPower>:

bool RFPower(){
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80067d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <RFPower+0x34>)
 80067d8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	0018      	movs	r0, r3
 80067de:	f7f9 fcc5 	bl	800016c <strlen>
 80067e2:	0003      	movs	r3, r0
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	0011      	movs	r1, r2
 80067ea:	0018      	movs	r0, r3
 80067ec:	f7fe fb78 	bl	8004ee0 <ESP_Send>
 80067f0:	1e03      	subs	r3, r0, #0
 80067f2:	d001      	beq.n	80067f8 <RFPower+0x28>
    return true;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <RFPower+0x2a>
  }
  else{
    return false;
 80067f8:	2300      	movs	r3, #0
  }
}
 80067fa:	0018      	movs	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b002      	add	sp, #8
 8006800:	bd80      	pop	{r7, pc}
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	0802b38c 	.word	0x0802b38c

08006808 <CheckRFPower>:

bool CheckRFPower(){
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800680e:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <CheckRFPower+0x34>)
 8006810:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0018      	movs	r0, r3
 8006816:	f7f9 fca9 	bl	800016c <strlen>
 800681a:	0003      	movs	r3, r0
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0011      	movs	r1, r2
 8006822:	0018      	movs	r0, r3
 8006824:	f7fe fb5c 	bl	8004ee0 <ESP_Send>
 8006828:	1e03      	subs	r3, r0, #0
 800682a:	d001      	beq.n	8006830 <CheckRFPower+0x28>
    return true;
 800682c:	2301      	movs	r3, #1
 800682e:	e000      	b.n	8006832 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8006830:	2300      	movs	r3, #0
  }
}
 8006832:	0018      	movs	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	b002      	add	sp, #8
 8006838:	bd80      	pop	{r7, pc}
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	0802b39c 	.word	0x0802b39c

08006840 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8006846:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <ATRestore+0x34>)
 8006848:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	0018      	movs	r0, r3
 800684e:	f7f9 fc8d 	bl	800016c <strlen>
 8006852:	0003      	movs	r3, r0
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0011      	movs	r1, r2
 800685a:	0018      	movs	r0, r3
 800685c:	f7fe fb40 	bl	8004ee0 <ESP_Send>
 8006860:	1e03      	subs	r3, r0, #0
 8006862:	d001      	beq.n	8006868 <ATRestore+0x28>
    return true;
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <ATRestore+0x2a>
  }
  else{
    return false;
 8006868:	2300      	movs	r3, #0
  }
}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b002      	add	sp, #8
 8006870:	bd80      	pop	{r7, pc}
 8006872:	46c0      	nop			@ (mov r8, r8)
 8006874:	0802b3ac 	.word	0x0802b3ac

08006878 <CWINIT>:

bool CWINIT(){
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800687e:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <CWINIT+0x34>)
 8006880:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	0018      	movs	r0, r3
 8006886:	f7f9 fc71 	bl	800016c <strlen>
 800688a:	0003      	movs	r3, r0
 800688c:	b29a      	uxth	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	0011      	movs	r1, r2
 8006892:	0018      	movs	r0, r3
 8006894:	f7fe fb24 	bl	8004ee0 <ESP_Send>
 8006898:	1e03      	subs	r3, r0, #0
 800689a:	d001      	beq.n	80068a0 <CWINIT+0x28>
    return true;
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <CWINIT+0x2a>
  }
  else{
    return false;
 80068a0:	2300      	movs	r3, #0
  }
}
 80068a2:	0018      	movs	r0, r3
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b002      	add	sp, #8
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	46c0      	nop			@ (mov r8, r8)
 80068ac:	0802b3bc 	.word	0x0802b3bc

080068b0 <CWMODE1>:

bool CWMODE1(){
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <CWMODE1+0x34>)
 80068b8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	0018      	movs	r0, r3
 80068be:	f7f9 fc55 	bl	800016c <strlen>
 80068c2:	0003      	movs	r3, r0
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	0011      	movs	r1, r2
 80068ca:	0018      	movs	r0, r3
 80068cc:	f7fe fb08 	bl	8004ee0 <ESP_Send>
 80068d0:	1e03      	subs	r3, r0, #0
 80068d2:	d001      	beq.n	80068d8 <CWMODE1+0x28>
    return true;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <CWMODE1+0x2a>
  }
  else{
    return false;
 80068d8:	2300      	movs	r3, #0
  }
}
 80068da:	0018      	movs	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	b002      	add	sp, #8
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	0802b3cc 	.word	0x0802b3cc

080068e8 <CWMODE2>:

bool CWMODE2(){
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <CWMODE2+0x34>)
 80068f0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f7f9 fc39 	bl	800016c <strlen>
 80068fa:	0003      	movs	r3, r0
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	0011      	movs	r1, r2
 8006902:	0018      	movs	r0, r3
 8006904:	f7fe faec 	bl	8004ee0 <ESP_Send>
 8006908:	1e03      	subs	r3, r0, #0
 800690a:	d001      	beq.n	8006910 <CWMODE2+0x28>
    return true;
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <CWMODE2+0x2a>
  }
  else{
    return false;
 8006910:	2300      	movs	r3, #0
  }
}
 8006912:	0018      	movs	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	b002      	add	sp, #8
 8006918:	bd80      	pop	{r7, pc}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	0802b3dc 	.word	0x0802b3dc

08006920 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8006926:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <CWAUTOCONN+0x34>)
 8006928:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	0018      	movs	r0, r3
 800692e:	f7f9 fc1d 	bl	800016c <strlen>
 8006932:	0003      	movs	r3, r0
 8006934:	b29a      	uxth	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0011      	movs	r1, r2
 800693a:	0018      	movs	r0, r3
 800693c:	f7fe fad0 	bl	8004ee0 <ESP_Send>
 8006940:	1e03      	subs	r3, r0, #0
 8006942:	d001      	beq.n	8006948 <CWAUTOCONN+0x28>
    return true;
 8006944:	2301      	movs	r3, #1
 8006946:	e000      	b.n	800694a <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8006948:	2300      	movs	r3, #0
  }
}
 800694a:	0018      	movs	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	b002      	add	sp, #8
 8006950:	bd80      	pop	{r7, pc}
 8006952:	46c0      	nop			@ (mov r8, r8)
 8006954:	0802b3ec 	.word	0x0802b3ec

08006958 <CWJAP>:
  }
}
*/

bool CWJAP()
{
 8006958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800695a:	46c6      	mov	lr, r8
 800695c:	b500      	push	{lr}
 800695e:	b08a      	sub	sp, #40	@ 0x28
 8006960:	af00      	add	r7, sp, #0
 8006962:	466b      	mov	r3, sp
 8006964:	4698      	mov	r8, r3
  APtested = true;
 8006966:	4b36      	ldr	r3, [pc, #216]	@ (8006a40 <CWJAP+0xe8>)
 8006968:	2201      	movs	r2, #1
 800696a:	701a      	strb	r2, [r3, #0]
  getWifiCred();
 800696c:	f7fe f80c 	bl	8004988 <getWifiCred>
  static char atCommandBuff[112];
  memset(atCommandBuff, '\0', 112);
 8006970:	4b34      	ldr	r3, [pc, #208]	@ (8006a44 <CWJAP+0xec>)
 8006972:	2270      	movs	r2, #112	@ 0x70
 8006974:	2100      	movs	r1, #0
 8006976:	0018      	movs	r0, r3
 8006978:	f01f ff4a 	bl	8026810 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", Credentials.SSID, Credentials.Password);
 800697c:	4b32      	ldr	r3, [pc, #200]	@ (8006a48 <CWJAP+0xf0>)
 800697e:	4a33      	ldr	r2, [pc, #204]	@ (8006a4c <CWJAP+0xf4>)
 8006980:	4933      	ldr	r1, [pc, #204]	@ (8006a50 <CWJAP+0xf8>)
 8006982:	4830      	ldr	r0, [pc, #192]	@ (8006a44 <CWJAP+0xec>)
 8006984:	f01f fdfc 	bl	8026580 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8006988:	4b2e      	ldr	r3, [pc, #184]	@ (8006a44 <CWJAP+0xec>)
 800698a:	0018      	movs	r0, r3
 800698c:	f7f9 fbee 	bl	800016c <strlen>
 8006990:	0002      	movs	r2, r0
 8006992:	210f      	movs	r1, #15
 8006994:	2018      	movs	r0, #24
 8006996:	180b      	adds	r3, r1, r0
 8006998:	19db      	adds	r3, r3, r7
 800699a:	701a      	strb	r2, [r3, #0]
  char atCommand[len + 1];
 800699c:	180b      	adds	r3, r1, r0
 800699e:	19db      	adds	r3, r3, r7
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	3301      	adds	r3, #1
 80069a4:	1e5a      	subs	r2, r3, #1
 80069a6:	623a      	str	r2, [r7, #32]
 80069a8:	001a      	movs	r2, r3
 80069aa:	60ba      	str	r2, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	60fa      	str	r2, [r7, #12]
 80069b0:	68b8      	ldr	r0, [r7, #8]
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	0002      	movs	r2, r0
 80069b6:	0f52      	lsrs	r2, r2, #29
 80069b8:	000e      	movs	r6, r1
 80069ba:	00f6      	lsls	r6, r6, #3
 80069bc:	617e      	str	r6, [r7, #20]
 80069be:	697e      	ldr	r6, [r7, #20]
 80069c0:	4316      	orrs	r6, r2
 80069c2:	617e      	str	r6, [r7, #20]
 80069c4:	0002      	movs	r2, r0
 80069c6:	00d2      	lsls	r2, r2, #3
 80069c8:	613a      	str	r2, [r7, #16]
 80069ca:	001a      	movs	r2, r3
 80069cc:	603a      	str	r2, [r7, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	607a      	str	r2, [r7, #4]
 80069d2:	6838      	ldr	r0, [r7, #0]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	0002      	movs	r2, r0
 80069d8:	0f52      	lsrs	r2, r2, #29
 80069da:	000e      	movs	r6, r1
 80069dc:	00f5      	lsls	r5, r6, #3
 80069de:	4315      	orrs	r5, r2
 80069e0:	0002      	movs	r2, r0
 80069e2:	00d4      	lsls	r4, r2, #3
 80069e4:	3307      	adds	r3, #7
 80069e6:	08db      	lsrs	r3, r3, #3
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	466a      	mov	r2, sp
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	469d      	mov	sp, r3
 80069f0:	466b      	mov	r3, sp
 80069f2:	3300      	adds	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
  memset(atCommand, '\0', len + 1);
 80069f6:	240f      	movs	r4, #15
 80069f8:	2518      	movs	r5, #24
 80069fa:	1963      	adds	r3, r4, r5
 80069fc:	19db      	adds	r3, r3, r7
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	001a      	movs	r2, r3
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2100      	movs	r1, #0
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f01f ff01 	bl	8026810 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006a0e:	1963      	adds	r3, r4, r5
 8006a10:	19db      	adds	r3, r3, r7
 8006a12:	781a      	ldrb	r2, [r3, #0]
 8006a14:	490b      	ldr	r1, [pc, #44]	@ (8006a44 <CWJAP+0xec>)
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f01f ff20 	bl	802685e <strncpy>
  return ESP_Send((uint8_t*)atCommand, len);
 8006a1e:	1963      	adds	r3, r4, r5
 8006a20:	19db      	adds	r3, r3, r7
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	0011      	movs	r1, r2
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f7fe fa58 	bl	8004ee0 <ESP_Send>
 8006a30:	0003      	movs	r3, r0
 8006a32:	46c5      	mov	sp, r8
}
 8006a34:	0018      	movs	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b00a      	add	sp, #40	@ 0x28
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	46b8      	mov	r8, r7
 8006a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a40:	200005b1 	.word	0x200005b1
 8006a44:	2000087c 	.word	0x2000087c
 8006a48:	200006d0 	.word	0x200006d0
 8006a4c:	200006b0 	.word	0x200006b0
 8006a50:	0802b400 	.word	0x0802b400

08006a54 <CWMODE3>:


bool CWMODE3(){
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <CWMODE3+0x34>)
 8006a5c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7f9 fb83 	bl	800016c <strlen>
 8006a66:	0003      	movs	r3, r0
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	0011      	movs	r1, r2
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f7fe fa36 	bl	8004ee0 <ESP_Send>
 8006a74:	1e03      	subs	r3, r0, #0
 8006a76:	d001      	beq.n	8006a7c <CWMODE3+0x28>
    return true;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <CWMODE3+0x2a>
  }
  else{
    return false;
 8006a7c:	2300      	movs	r3, #0
  }
}
 8006a7e:	0018      	movs	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	b002      	add	sp, #8
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	46c0      	nop			@ (mov r8, r8)
 8006a88:	0802b418 	.word	0x0802b418

08006a8c <CWSTATE>:

bool CWSTATE(){
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006a92:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <CWSTATE+0x34>)
 8006a94:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7f9 fb67 	bl	800016c <strlen>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	0011      	movs	r1, r2
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f7fe fa1a 	bl	8004ee0 <ESP_Send>
 8006aac:	1e03      	subs	r3, r0, #0
 8006aae:	d001      	beq.n	8006ab4 <CWSTATE+0x28>
    return true;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006ab4:	2300      	movs	r3, #0
  }
}
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b002      	add	sp, #8
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	46c0      	nop			@ (mov r8, r8)
 8006ac0:	0802b428 	.word	0x0802b428

08006ac4 <CWSAP>:

bool CWSAP(){
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <CWSAP+0x34>)
 8006acc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f7f9 fb4b 	bl	800016c <strlen>
 8006ad6:	0003      	movs	r3, r0
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	0011      	movs	r1, r2
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7fe f9fe 	bl	8004ee0 <ESP_Send>
 8006ae4:	1e03      	subs	r3, r0, #0
 8006ae6:	d001      	beq.n	8006aec <CWSAP+0x28>
    return true;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <CWSAP+0x2a>
  }
  else{
    return false;
 8006aec:	2300      	movs	r3, #0
  }
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b002      	add	sp, #8
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	0802b438 	.word	0x0802b438

08006afc <CIPMUX>:

bool CIPMUX(){
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006b02:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <CIPMUX+0x34>)
 8006b04:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7f9 fb2f 	bl	800016c <strlen>
 8006b0e:	0003      	movs	r3, r0
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	0011      	movs	r1, r2
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7fe f9e2 	bl	8004ee0 <ESP_Send>
 8006b1c:	1e03      	subs	r3, r0, #0
 8006b1e:	d001      	beq.n	8006b24 <CIPMUX+0x28>
    return true;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <CIPMUX+0x2a>
  }
  else{
    return false;
 8006b24:	2300      	movs	r3, #0
  }
}
 8006b26:	0018      	movs	r0, r3
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b002      	add	sp, #8
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	46c0      	nop			@ (mov r8, r8)
 8006b30:	0802b45c 	.word	0x0802b45c

08006b34 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b68 <WEBSERVER+0x34>)
 8006b3c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	0018      	movs	r0, r3
 8006b42:	f7f9 fb13 	bl	800016c <strlen>
 8006b46:	0003      	movs	r3, r0
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	0011      	movs	r1, r2
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7fe f9c6 	bl	8004ee0 <ESP_Send>
 8006b54:	1e03      	subs	r3, r0, #0
 8006b56:	d001      	beq.n	8006b5c <WEBSERVER+0x28>
    return true;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006b5c:	2300      	movs	r3, #0
  }
}
 8006b5e:	0018      	movs	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	0802b46c 	.word	0x0802b46c

08006b6c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006b6c:	b5b0      	push	{r4, r5, r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006b72:	1cfb      	adds	r3, r7, #3
 8006b74:	2200      	movs	r2, #0
 8006b76:	701a      	strb	r2, [r3, #0]
  uint16_t length = CreateMessage(&txresult, false);
 8006b78:	1dbc      	adds	r4, r7, #6
 8006b7a:	1cfb      	adds	r3, r7, #3
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f7fe fca8 	bl	80054d4 <CreateMessage>
 8006b84:	0003      	movs	r3, r0
 8006b86:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[1+(2*IdSize)];
  static uint8_t URLToUpload[URLToUploadMaxLength];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006b88:	4b28      	ldr	r3, [pc, #160]	@ (8006c2c <HTTPCPOST+0xc0>)
 8006b8a:	4829      	ldr	r0, [pc, #164]	@ (8006c30 <HTTPCPOST+0xc4>)
 8006b8c:	220c      	movs	r2, #12
 8006b8e:	0019      	movs	r1, r3
 8006b90:	f005 fcce 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8006b94:	4a25      	ldr	r2, [pc, #148]	@ (8006c2c <HTTPCPOST+0xc0>)
 8006b96:	4b27      	ldr	r3, [pc, #156]	@ (8006c34 <HTTPCPOST+0xc8>)
 8006b98:	0011      	movs	r1, r2
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f7fe fbd2 	bl	8005344 <uint8ArrayToString>
//  sprintf(message, "AT+HTTPCPOST=%s/%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUpload, URLToUploadMaxLength);
 8006ba0:	4b25      	ldr	r3, [pc, #148]	@ (8006c38 <HTTPCPOST+0xcc>)
 8006ba2:	4826      	ldr	r0, [pc, #152]	@ (8006c3c <HTTPCPOST+0xd0>)
 8006ba4:	2230      	movs	r2, #48	@ 0x30
 8006ba6:	0019      	movs	r1, r3
 8006ba8:	f005 fcc2 	bl	800c530 <ReadUint8ArrayEEprom>
  if (strlen((char*)URLToUpload) == 0) {
 8006bac:	4b22      	ldr	r3, [pc, #136]	@ (8006c38 <HTTPCPOST+0xcc>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10b      	bne.n	8006bcc <HTTPCPOST+0x60>
    strcpy ((char*)URLToUpload,API);
 8006bb4:	4b20      	ldr	r3, [pc, #128]	@ (8006c38 <HTTPCPOST+0xcc>)
 8006bb6:	4a22      	ldr	r2, [pc, #136]	@ (8006c40 <HTTPCPOST+0xd4>)
 8006bb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006bba:	c313      	stmia	r3!, {r0, r1, r4}
 8006bbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006bbe:	c313      	stmia	r3!, {r0, r1, r4}
 8006bc0:	ca03      	ldmia	r2!, {r0, r1}
 8006bc2:	c303      	stmia	r3!, {r0, r1}
 8006bc4:	8811      	ldrh	r1, [r2, #0]
 8006bc6:	8019      	strh	r1, [r3, #0]
 8006bc8:	7892      	ldrb	r2, [r2, #2]
 8006bca:	709a      	strb	r2, [r3, #2]
  }
  sprintf(message, "AT+HTTPCPOST=\"%s/%s/data\",%d,1,%s\r\n", (char*)URLToUpload, Buffer, length, HEADER1);
 8006bcc:	1dbb      	adds	r3, r7, #6
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	4d18      	ldr	r5, [pc, #96]	@ (8006c34 <HTTPCPOST+0xc8>)
 8006bd2:	4c19      	ldr	r4, [pc, #100]	@ (8006c38 <HTTPCPOST+0xcc>)
 8006bd4:	491b      	ldr	r1, [pc, #108]	@ (8006c44 <HTTPCPOST+0xd8>)
 8006bd6:	481c      	ldr	r0, [pc, #112]	@ (8006c48 <HTTPCPOST+0xdc>)
 8006bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c4c <HTTPCPOST+0xe0>)
 8006bda:	9201      	str	r2, [sp, #4]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	002b      	movs	r3, r5
 8006be0:	0022      	movs	r2, r4
 8006be2:	f01f fccd 	bl	8026580 <siprintf>
  uint16_t len = strlen(message);
 8006be6:	4b18      	ldr	r3, [pc, #96]	@ (8006c48 <HTTPCPOST+0xdc>)
 8006be8:	0018      	movs	r0, r3
 8006bea:	f7f9 fabf 	bl	800016c <strlen>
 8006bee:	0002      	movs	r2, r0
 8006bf0:	1d3b      	adds	r3, r7, #4
 8006bf2:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d, bool value of tx result %d", len, txresult);
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	8818      	ldrh	r0, [r3, #0]
 8006bf8:	1cfb      	adds	r3, r7, #3
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	4a14      	ldr	r2, [pc, #80]	@ (8006c50 <HTTPCPOST+0xe4>)
 8006bfe:	4915      	ldr	r1, [pc, #84]	@ (8006c54 <HTTPCPOST+0xe8>)
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	0003      	movs	r3, r0
 8006c04:	2003      	movs	r0, #3
 8006c06:	f00d faed 	bl	80141e4 <CreateLine>
  if(ESP_Send((uint8_t*)message, len)){
 8006c0a:	1d3b      	adds	r3, r7, #4
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c48 <HTTPCPOST+0xdc>)
 8006c10:	0011      	movs	r1, r2
 8006c12:	0018      	movs	r0, r3
 8006c14:	f7fe f964 	bl	8004ee0 <ESP_Send>
 8006c18:	1e03      	subs	r3, r0, #0
 8006c1a:	d001      	beq.n	8006c20 <HTTPCPOST+0xb4>
    return true;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <HTTPCPOST+0xb6>
  }
  else{
    return false;
 8006c20:	2300      	movs	r3, #0
  }
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b002      	add	sp, #8
 8006c28:	bdb0      	pop	{r4, r5, r7, pc}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	200008ec 	.word	0x200008ec
 8006c30:	08080000 	.word	0x08080000
 8006c34:	200008f8 	.word	0x200008f8
 8006c38:	20000914 	.word	0x20000914
 8006c3c:	08080110 	.word	0x08080110
 8006c40:	0802b484 	.word	0x0802b484
 8006c44:	0802b4a8 	.word	0x0802b4a8
 8006c48:	200005d4 	.word	0x200005d4
 8006c4c:	0802b4cc 	.word	0x0802b4cc
 8006c50:	0802b4f0 	.word	0x0802b4f0
 8006c54:	0802ad1c 	.word	0x0802ad1c

08006c58 <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af02      	add	r7, sp, #8
  bool result = false;
 8006c5e:	1dfb      	adds	r3, r7, #7
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006c64:	1dfb      	adds	r3, r7, #7
 8006c66:	2101      	movs	r1, #1
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f7fe fb8f 	bl	800538c <CreateMailMessage>
 8006c6e:	0003      	movs	r3, r0
 8006c70:	001a      	movs	r2, r3
 8006c72:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <SENDMAIL+0x44>)
 8006c74:	801a      	strh	r2, [r3, #0]
  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006c76:	1dfb      	adds	r3, r7, #7
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <SENDMAIL+0x44>)
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	4a07      	ldr	r2, [pc, #28]	@ (8006ca0 <SENDMAIL+0x48>)
 8006c82:	4908      	ldr	r1, [pc, #32]	@ (8006ca4 <SENDMAIL+0x4c>)
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	0003      	movs	r3, r0
 8006c88:	2003      	movs	r0, #3
 8006c8a:	f00d faab 	bl	80141e4 <CreateLine>
  return result;
 8006c8e:	1dfb      	adds	r3, r7, #7
 8006c90:	781b      	ldrb	r3, [r3, #0]
}
 8006c92:	0018      	movs	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b002      	add	sp, #8
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			@ (mov r8, r8)
 8006c9c:	200005c8 	.word	0x200005c8
 8006ca0:	0802b54c 	.word	0x0802b54c
 8006ca4:	0802ad1c 	.word	0x0802ad1c

08006ca8 <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006ca8:	b5b0      	push	{r4, r5, r7, lr}
 8006caa:	b090      	sub	sp, #64	@ 0x40
 8006cac:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006cae:	2133      	movs	r1, #51	@ 0x33
 8006cb0:	187b      	adds	r3, r7, r1
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006cb6:	2536      	movs	r5, #54	@ 0x36
 8006cb8:	197c      	adds	r4, r7, r5
 8006cba:	187b      	adds	r3, r7, r1
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f7fe fb64 	bl	800538c <CreateMailMessage>
 8006cc4:	0003      	movs	r3, r0
 8006cc6:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006cc8:	003b      	movs	r3, r7
 8006cca:	4814      	ldr	r0, [pc, #80]	@ (8006d1c <HTTPCPOST_MAILAPI+0x74>)
 8006ccc:	2230      	movs	r2, #48	@ 0x30
 8006cce:	0019      	movs	r1, r3
 8006cd0:	f005 fc2e 	bl	800c530 <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, HEADER1, (char*)MailAPIKeyConfig);
 8006cd4:	197b      	adds	r3, r7, r5
 8006cd6:	881c      	ldrh	r4, [r3, #0]
 8006cd8:	4a11      	ldr	r2, [pc, #68]	@ (8006d20 <HTTPCPOST_MAILAPI+0x78>)
 8006cda:	4912      	ldr	r1, [pc, #72]	@ (8006d24 <HTTPCPOST_MAILAPI+0x7c>)
 8006cdc:	4812      	ldr	r0, [pc, #72]	@ (8006d28 <HTTPCPOST_MAILAPI+0x80>)
 8006cde:	003b      	movs	r3, r7
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	4b12      	ldr	r3, [pc, #72]	@ (8006d2c <HTTPCPOST_MAILAPI+0x84>)
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	0023      	movs	r3, r4
 8006ce8:	f01f fc4a 	bl	8026580 <siprintf>
  uint16_t len = strlen(message);
 8006cec:	4b0e      	ldr	r3, [pc, #56]	@ (8006d28 <HTTPCPOST_MAILAPI+0x80>)
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7f9 fa3c 	bl	800016c <strlen>
 8006cf4:	0002      	movs	r2, r0
 8006cf6:	2134      	movs	r1, #52	@ 0x34
 8006cf8:	187b      	adds	r3, r7, r1
 8006cfa:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006cfc:	187b      	adds	r3, r7, r1
 8006cfe:	881a      	ldrh	r2, [r3, #0]
 8006d00:	4b09      	ldr	r3, [pc, #36]	@ (8006d28 <HTTPCPOST_MAILAPI+0x80>)
 8006d02:	0011      	movs	r1, r2
 8006d04:	0018      	movs	r0, r3
 8006d06:	f7fe f8eb 	bl	8004ee0 <ESP_Send>
 8006d0a:	1e03      	subs	r3, r0, #0
 8006d0c:	d001      	beq.n	8006d12 <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	0018      	movs	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	b00e      	add	sp, #56	@ 0x38
 8006d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d1c:	080802c0 	.word	0x080802c0
 8006d20:	0802e818 	.word	0x0802e818
 8006d24:	0802b588 	.word	0x0802b588
 8006d28:	200005d4 	.word	0x200005d4
 8006d2c:	0802b4cc 	.word	0x0802b4cc

08006d30 <SENDDATA>:
#endif

bool SENDDATA(){
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af02      	add	r7, sp, #8
  bool result = false;
 8006d36:	1dfb      	adds	r3, r7, #7
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006d3c:	1dfb      	adds	r3, r7, #7
 8006d3e:	2101      	movs	r1, #1
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7fe fbc7 	bl	80054d4 <CreateMessage>
 8006d46:	0003      	movs	r3, r0
 8006d48:	001a      	movs	r2, r3
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d74 <SENDDATA+0x44>)
 8006d4c:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006d4e:	1dfb      	adds	r3, r7, #7
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	0018      	movs	r0, r3
 8006d54:	4b07      	ldr	r3, [pc, #28]	@ (8006d74 <SENDDATA+0x44>)
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	4a07      	ldr	r2, [pc, #28]	@ (8006d78 <SENDDATA+0x48>)
 8006d5a:	4908      	ldr	r1, [pc, #32]	@ (8006d7c <SENDDATA+0x4c>)
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	0003      	movs	r3, r0
 8006d60:	2003      	movs	r0, #3
 8006d62:	f00d fa3f 	bl	80141e4 <CreateLine>
  return result;
 8006d66:	1dfb      	adds	r3, r7, #7
 8006d68:	781b      	ldrb	r3, [r3, #0]
}
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	b002      	add	sp, #8
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	46c0      	nop			@ (mov r8, r8)
 8006d74:	200005c8 	.word	0x200005c8
 8006d78:	0802b5d8 	.word	0x0802b5d8
 8006d7c:	0802ad1c 	.word	0x0802ad1c

08006d80 <SLEEP>:

bool SLEEP(){
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <SLEEP+0x34>)
 8006d88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f7f9 f9ed 	bl	800016c <strlen>
 8006d92:	0003      	movs	r3, r0
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0011      	movs	r1, r2
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7fe f8a0 	bl	8004ee0 <ESP_Send>
 8006da0:	1e03      	subs	r3, r0, #0
 8006da2:	d001      	beq.n	8006da8 <SLEEP+0x28>
    return true;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <SLEEP+0x2a>
  }
  else{
    return false;
 8006da8:	2300      	movs	r3, #0
  }
}
 8006daa:	0018      	movs	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b002      	add	sp, #8
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	0802b614 	.word	0x0802b614

08006db8 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <CIPSNTPCFG+0x3c>)
 8006dc0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f7f9 f9d1 	bl	800016c <strlen>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0011      	movs	r1, r2
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f7fe f884 	bl	8004ee0 <ESP_Send>
 8006dd8:	1e03      	subs	r3, r0, #0
 8006dda:	d006      	beq.n	8006dea <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006ddc:	23fa      	movs	r3, #250	@ 0xfa
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	0018      	movs	r0, r3
 8006de2:	f00d ff81 	bl	8014ce8 <HAL_Delay>
    return true;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006dea:	2300      	movs	r3, #0
  }
}
 8006dec:	0018      	movs	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b002      	add	sp, #8
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	0802b624 	.word	0x0802b624

08006df8 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <CIPSNTPTIME+0x34>)
 8006e00:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0018      	movs	r0, r3
 8006e06:	f7f9 f9b1 	bl	800016c <strlen>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	0011      	movs	r1, r2
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7fe f864 	bl	8004ee0 <ESP_Send>
 8006e18:	1e03      	subs	r3, r0, #0
 8006e1a:	d001      	beq.n	8006e20 <CIPSNTPTIME+0x28>
    return true;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006e20:	2300      	movs	r3, #0
  }
}
 8006e22:	0018      	movs	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b002      	add	sp, #8
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	0802b674 	.word	0x0802b674

08006e30 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006e36:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <CIPSNTPINTV+0x34>)
 8006e38:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7f9 f995 	bl	800016c <strlen>
 8006e42:	0003      	movs	r3, r0
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	0011      	movs	r1, r2
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7fe f848 	bl	8004ee0 <ESP_Send>
 8006e50:	1e03      	subs	r3, r0, #0
 8006e52:	d001      	beq.n	8006e58 <CIPSNTPINTV+0x28>
    return true;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006e58:	2300      	movs	r3, #0
  }
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b002      	add	sp, #8
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	0802b688 	.word	0x0802b688

08006e68 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006e68:	b5b0      	push	{r4, r5, r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	0002      	movs	r2, r0
 8006e70:	1dfb      	adds	r3, r7, #7
 8006e72:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006e74:	4b6c      	ldr	r3, [pc, #432]	@ (8007028 <DMA_ProcessBuffer+0x1c0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	200e      	movs	r0, #14
 8006e7e:	183b      	adds	r3, r7, r0
 8006e80:	2180      	movs	r1, #128	@ 0x80
 8006e82:	0049      	lsls	r1, r1, #1
 8006e84:	1a8a      	subs	r2, r1, r2
 8006e86:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006e88:	230d      	movs	r3, #13
 8006e8a:	18fb      	adds	r3, r7, r3
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006e90:	183b      	adds	r3, r7, r0
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	2380      	movs	r3, #128	@ 0x80
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d903      	bls.n	8006ea4 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006e9c:	183b      	adds	r3, r7, r0
 8006e9e:	2280      	movs	r2, #128	@ 0x80
 8006ea0:	0052      	lsls	r2, r2, #1
 8006ea2:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006ea4:	4b61      	ldr	r3, [pc, #388]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	001a      	movs	r2, r3
 8006eac:	230e      	movs	r3, #14
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d131      	bne.n	8006f1a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b14      	cmp	r3, #20
 8006ebc:	d91b      	bls.n	8006ef6 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8007034 <DMA_ProcessBuffer+0x1cc>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <DMA_ProcessBuffer+0x74>
 8006ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8007038 <DMA_ProcessBuffer+0x1d0>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006ed4:	230d      	movs	r3, #13
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	2207      	movs	r2, #7
 8006eda:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006edc:	4b55      	ldr	r3, [pc, #340]	@ (8007034 <DMA_ProcessBuffer+0x1cc>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d103      	bne.n	8006eec <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006ee4:	4b55      	ldr	r3, [pc, #340]	@ (800703c <DMA_ProcessBuffer+0x1d4>)
 8006ee6:	220b      	movs	r2, #11
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e016      	b.n	8006f1a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006eec:	230d      	movs	r3, #13
 8006eee:	18fb      	adds	r3, r7, r3
 8006ef0:	2206      	movs	r2, #6
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e011      	b.n	8006f1a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4b4c      	ldr	r3, [pc, #304]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006f00:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006f02:	f00d fee7 	bl	8014cd4 <HAL_GetTick>
 8006f06:	0003      	movs	r3, r0
 8006f08:	33f5      	adds	r3, #245	@ 0xf5
 8006f0a:	33ff      	adds	r3, #255	@ 0xff
 8006f0c:	001a      	movs	r2, r3
 8006f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8007040 <DMA_ProcessBuffer+0x1d8>)
 8006f10:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006f12:	230d      	movs	r3, #13
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2204      	movs	r2, #4
 8006f18:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006f1a:	4b44      	ldr	r3, [pc, #272]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	001a      	movs	r2, r3
 8006f22:	210e      	movs	r1, #14
 8006f24:	187b      	adds	r3, r7, r1
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <DMA_ProcessBuffer+0xc6>
 8006f2c:	e075      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006f2e:	4b40      	ldr	r3, [pc, #256]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006f34:	4b43      	ldr	r3, [pc, #268]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d109      	bne.n	8006f58 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006f44:	187b      	adds	r3, r7, r1
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f4c:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006f4e:	230d      	movs	r3, #13
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	220a      	movs	r2, #10
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e060      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006f58:	4b3a      	ldr	r3, [pc, #232]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	001a      	movs	r2, r3
 8006f60:	210e      	movs	r1, #14
 8006f62:	187b      	adds	r3, r7, r1
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	4b34      	ldr	r3, [pc, #208]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f72:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006f74:	230d      	movs	r3, #13
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	220a      	movs	r2, #10
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e04d      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	001a      	movs	r2, r3
 8006f86:	210e      	movs	r1, #14
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d917      	bls.n	8006fc0 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006f90:	4b26      	ldr	r3, [pc, #152]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	001a      	movs	r2, r3
 8006f98:	4b2b      	ldr	r3, [pc, #172]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8006f9a:	18d0      	adds	r0, r2, r3
 8006f9c:	4b23      	ldr	r3, [pc, #140]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	001a      	movs	r2, r3
 8006fa4:	187b      	adds	r3, r7, r1
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	1a9b      	subs	r3, r3, r2
 8006faa:	b299      	uxth	r1, r3
 8006fac:	230d      	movs	r3, #13
 8006fae:	18fc      	adds	r4, r7, r3
 8006fb0:	1dfb      	adds	r3, r7, #7
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	f7ff f9c1 	bl	800633c <ParseBuffer>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	7023      	strb	r3, [r4, #0]
 8006fbe:	e026      	b.n	800700e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	001a      	movs	r2, r3
 8006fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8006fca:	18d0      	adds	r0, r2, r3
 8006fcc:	4b17      	ldr	r3, [pc, #92]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	001a      	movs	r2, r3
 8006fd4:	2380      	movs	r3, #128	@ 0x80
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	b299      	uxth	r1, r3
 8006fdc:	250d      	movs	r5, #13
 8006fde:	197c      	adds	r4, r7, r5
 8006fe0:	1dfb      	adds	r3, r7, #7
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	001a      	movs	r2, r3
 8006fe6:	f7ff f9a9 	bl	800633c <ParseBuffer>
 8006fea:	0003      	movs	r3, r0
 8006fec:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006fee:	210e      	movs	r1, #14
 8006ff0:	187b      	adds	r3, r7, r1
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006ff8:	197c      	adds	r4, r7, r5
 8006ffa:	1dfb      	adds	r3, r7, #7
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	187b      	adds	r3, r7, r1
 8007000:	8819      	ldrh	r1, [r3, #0]
 8007002:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8007004:	0018      	movs	r0, r3
 8007006:	f7ff f999 	bl	800633c <ParseBuffer>
 800700a:	0003      	movs	r3, r0
 800700c:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800700e:	230e      	movs	r3, #14
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4b05      	ldr	r3, [pc, #20]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8007018:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 800701a:	230d      	movs	r3, #13
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	781b      	ldrb	r3, [r3, #0]
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b004      	add	sp, #16
 8007026:	bdb0      	pop	{r4, r5, r7, pc}
 8007028:	2000246c 	.word	0x2000246c
 800702c:	20000944 	.word	0x20000944
 8007030:	200006ac 	.word	0x200006ac
 8007034:	20000711 	.word	0x20000711
 8007038:	20000001 	.word	0x20000001
 800703c:	20000030 	.word	0x20000030
 8007040:	200006a4 	.word	0x200006a4
 8007044:	20000945 	.word	0x20000945
 8007048:	200004ac 	.word	0x200004ac

0800704c <clearDMABuffer>:

void clearDMABuffer(){
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8007050:	2380      	movs	r3, #128	@ 0x80
 8007052:	005a      	lsls	r2, r3, #1
 8007054:	4b03      	ldr	r3, [pc, #12]	@ (8007064 <clearDMABuffer+0x18>)
 8007056:	2100      	movs	r1, #0
 8007058:	0018      	movs	r0, r3
 800705a:	f01f fbd9 	bl	8026810 <memset>
}
 800705e:	46c0      	nop			@ (mov r8, r8)
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	200004ac 	.word	0x200004ac

08007068 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	0002      	movs	r2, r0
 8007070:	1dfb      	adds	r3, r7, #7
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	1dbb      	adds	r3, r7, #6
 8007076:	1c0a      	adds	r2, r1, #0
 8007078:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800707a:	210f      	movs	r1, #15
 800707c:	187b      	adds	r3, r7, r1
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8007082:	1dbb      	adds	r3, r7, #6
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800708a:	187b      	adds	r3, r7, r1
 800708c:	1dfa      	adds	r2, r7, #7
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	4251      	negs	r1, r2
 8007092:	414a      	adcs	r2, r1
 8007094:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8007096:	1dbb      	adds	r3, r7, #6
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d107      	bne.n	80070ae <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800709e:	230f      	movs	r3, #15
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	1dfa      	adds	r2, r7, #7
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	3a02      	subs	r2, #2
 80070a8:	4251      	negs	r1, r2
 80070aa:	414a      	adcs	r2, r1
 80070ac:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80070ae:	1dbb      	adds	r3, r7, #6
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d107      	bne.n	80070c6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80070b6:	230f      	movs	r3, #15
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	1dfa      	adds	r2, r7, #7
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	3a05      	subs	r2, #5
 80070c0:	4251      	negs	r1, r2
 80070c2:	414a      	adcs	r2, r1
 80070c4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 80070c6:	1dbb      	adds	r3, r7, #6
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d107      	bne.n	80070de <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80070ce:	230f      	movs	r3, #15
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	1dfa      	adds	r2, r7, #7
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	3a0b      	subs	r2, #11
 80070d8:	4251      	negs	r1, r2
 80070da:	414a      	adcs	r2, r1
 80070dc:	701a      	strb	r2, [r3, #0]
  }
#ifdef USE_MAIL
  if(AT_Command_Expected == RECEIVE_EXPECTATION_MAIL_API){
 80070de:	1dbb      	adds	r3, r7, #6
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b06      	cmp	r3, #6
 80070e4:	d107      	bne.n	80070f6 <ATCompare+0x8e>
    value = (AT_Command_Received == RECEIVE_STATUS_MAIL_API);
 80070e6:	230f      	movs	r3, #15
 80070e8:	18fb      	adds	r3, r7, r3
 80070ea:	1dfa      	adds	r2, r7, #7
 80070ec:	7812      	ldrb	r2, [r2, #0]
 80070ee:	3a0c      	subs	r2, #12
 80070f0:	4251      	negs	r1, r2
 80070f2:	414a      	adcs	r2, r1
 80070f4:	701a      	strb	r2, [r3, #0]
  }
#endif
  return(value);
 80070f6:	230f      	movs	r3, #15
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	781b      	ldrb	r3, [r3, #0]
}
 80070fc:	0018      	movs	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	b004      	add	sp, #16
 8007102:	bd80      	pop	{r7, pc}

08007104 <AT_Send>:

bool AT_Send(AT_Commands state){
 8007104:	b590      	push	{r4, r7, lr}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	0002      	movs	r2, r0
 800710c:	1dfb      	adds	r3, r7, #7
 800710e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8007110:	230f      	movs	r3, #15
 8007112:	18fb      	adds	r3, r7, r3
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
  switch (state){
 8007118:	1dfb      	adds	r3, r7, #7
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b16      	cmp	r3, #22
 800711e:	d900      	bls.n	8007122 <AT_Send+0x1e>
 8007120:	e1c7      	b.n	80074b2 <AT_Send+0x3ae>
 8007122:	009a      	lsls	r2, r3, #2
 8007124:	4be6      	ldr	r3, [pc, #920]	@ (80074c0 <AT_Send+0x3bc>)
 8007126:	18d3      	adds	r3, r2, r3
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 800712c:	4be5      	ldr	r3, [pc, #916]	@ (80074c4 <AT_Send+0x3c0>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	0018      	movs	r0, r3
 8007132:	f00d f801 	bl	8014138 <TimestampIsReached>
 8007136:	1e03      	subs	r3, r0, #0
 8007138:	d100      	bne.n	800713c <AT_Send+0x38>
 800713a:	e1b9      	b.n	80074b0 <AT_Send+0x3ac>
    Debug("AT_WAKEUP");
 800713c:	4ae2      	ldr	r2, [pc, #904]	@ (80074c8 <AT_Send+0x3c4>)
 800713e:	4be3      	ldr	r3, [pc, #908]	@ (80074cc <AT_Send+0x3c8>)
 8007140:	0019      	movs	r1, r3
 8007142:	2003      	movs	r0, #3
 8007144:	f00d f84e 	bl	80141e4 <CreateLine>
    ATCommandSend = PollAwake();
 8007148:	230f      	movs	r3, #15
 800714a:	18fc      	adds	r4, r7, r3
 800714c:	f7ff fb24 	bl	8006798 <PollAwake>
 8007150:	0003      	movs	r3, r0
 8007152:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007154:	f00d fdbe 	bl	8014cd4 <HAL_GetTick>
 8007158:	0003      	movs	r3, r0
 800715a:	3332      	adds	r3, #50	@ 0x32
 800715c:	001a      	movs	r2, r3
 800715e:	4bd9      	ldr	r3, [pc, #868]	@ (80074c4 <AT_Send+0x3c0>)
 8007160:	601a      	str	r2, [r3, #0]
  }
  break;
 8007162:	e1a5      	b.n	80074b0 <AT_Send+0x3ac>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8007164:	4ada      	ldr	r2, [pc, #872]	@ (80074d0 <AT_Send+0x3cc>)
 8007166:	4bd9      	ldr	r3, [pc, #868]	@ (80074cc <AT_Send+0x3c8>)
 8007168:	0019      	movs	r1, r3
 800716a:	2003      	movs	r0, #3
 800716c:	f00d f83a 	bl	80141e4 <CreateLine>
    ATCommandSend = RFPower();
 8007170:	230f      	movs	r3, #15
 8007172:	18fc      	adds	r4, r7, r3
 8007174:	f7ff fb2c 	bl	80067d0 <RFPower>
 8007178:	0003      	movs	r3, r0
 800717a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800717c:	f00d fdaa 	bl	8014cd4 <HAL_GetTick>
 8007180:	0003      	movs	r3, r0
 8007182:	330a      	adds	r3, #10
 8007184:	001a      	movs	r2, r3
 8007186:	4bcf      	ldr	r3, [pc, #828]	@ (80074c4 <AT_Send+0x3c0>)
 8007188:	601a      	str	r2, [r3, #0]
    break;
 800718a:	e192      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800718c:	4ad1      	ldr	r2, [pc, #836]	@ (80074d4 <AT_Send+0x3d0>)
 800718e:	4bcf      	ldr	r3, [pc, #828]	@ (80074cc <AT_Send+0x3c8>)
 8007190:	0019      	movs	r1, r3
 8007192:	2003      	movs	r0, #3
 8007194:	f00d f826 	bl	80141e4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8007198:	230f      	movs	r3, #15
 800719a:	18fc      	adds	r4, r7, r3
 800719c:	f7ff fb34 	bl	8006808 <CheckRFPower>
 80071a0:	0003      	movs	r3, r0
 80071a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071a4:	f00d fd96 	bl	8014cd4 <HAL_GetTick>
 80071a8:	0003      	movs	r3, r0
 80071aa:	330a      	adds	r3, #10
 80071ac:	001a      	movs	r2, r3
 80071ae:	4bc5      	ldr	r3, [pc, #788]	@ (80074c4 <AT_Send+0x3c0>)
 80071b0:	601a      	str	r2, [r3, #0]
    break;
 80071b2:	e17e      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_RESTORE:
    Debug("Restoring ESP");
 80071b4:	4ac8      	ldr	r2, [pc, #800]	@ (80074d8 <AT_Send+0x3d4>)
 80071b6:	4bc5      	ldr	r3, [pc, #788]	@ (80074cc <AT_Send+0x3c8>)
 80071b8:	0019      	movs	r1, r3
 80071ba:	2003      	movs	r0, #3
 80071bc:	f00d f812 	bl	80141e4 <CreateLine>
    ATCommandSend = ATRestore();
 80071c0:	230f      	movs	r3, #15
 80071c2:	18fc      	adds	r4, r7, r3
 80071c4:	f7ff fb3c 	bl	8006840 <ATRestore>
 80071c8:	0003      	movs	r3, r0
 80071ca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80071cc:	f00d fd82 	bl	8014cd4 <HAL_GetTick>
 80071d0:	0003      	movs	r3, r0
 80071d2:	3332      	adds	r3, #50	@ 0x32
 80071d4:	001a      	movs	r2, r3
 80071d6:	4bbb      	ldr	r3, [pc, #748]	@ (80074c4 <AT_Send+0x3c0>)
 80071d8:	601a      	str	r2, [r3, #0]
    break;
 80071da:	e16a      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80071dc:	4abf      	ldr	r2, [pc, #764]	@ (80074dc <AT_Send+0x3d8>)
 80071de:	4bbb      	ldr	r3, [pc, #748]	@ (80074cc <AT_Send+0x3c8>)
 80071e0:	0019      	movs	r1, r3
 80071e2:	2003      	movs	r0, #3
 80071e4:	f00c fffe 	bl	80141e4 <CreateLine>
    ATCommandSend = CWINIT();
 80071e8:	230f      	movs	r3, #15
 80071ea:	18fc      	adds	r4, r7, r3
 80071ec:	f7ff fb44 	bl	8006878 <CWINIT>
 80071f0:	0003      	movs	r3, r0
 80071f2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071f4:	f00d fd6e 	bl	8014cd4 <HAL_GetTick>
 80071f8:	0003      	movs	r3, r0
 80071fa:	33f5      	adds	r3, #245	@ 0xf5
 80071fc:	33ff      	adds	r3, #255	@ 0xff
 80071fe:	001a      	movs	r2, r3
 8007200:	4bb0      	ldr	r3, [pc, #704]	@ (80074c4 <AT_Send+0x3c0>)
 8007202:	601a      	str	r2, [r3, #0]
    break;
 8007204:	e155      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8007206:	4ab6      	ldr	r2, [pc, #728]	@ (80074e0 <AT_Send+0x3dc>)
 8007208:	4bb0      	ldr	r3, [pc, #704]	@ (80074cc <AT_Send+0x3c8>)
 800720a:	0019      	movs	r1, r3
 800720c:	2003      	movs	r0, #3
 800720e:	f00c ffe9 	bl	80141e4 <CreateLine>
    ATCommandSend = CWSTATE();
 8007212:	230f      	movs	r3, #15
 8007214:	18fc      	adds	r4, r7, r3
 8007216:	f7ff fc39 	bl	8006a8c <CWSTATE>
 800721a:	0003      	movs	r3, r0
 800721c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800721e:	f00d fd59 	bl	8014cd4 <HAL_GetTick>
 8007222:	0003      	movs	r3, r0
 8007224:	33f5      	adds	r3, #245	@ 0xf5
 8007226:	33ff      	adds	r3, #255	@ 0xff
 8007228:	001a      	movs	r2, r3
 800722a:	4ba6      	ldr	r3, [pc, #664]	@ (80074c4 <AT_Send+0x3c0>)
 800722c:	601a      	str	r2, [r3, #0]
    break;
 800722e:	e140      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8007230:	4aac      	ldr	r2, [pc, #688]	@ (80074e4 <AT_Send+0x3e0>)
 8007232:	4ba6      	ldr	r3, [pc, #664]	@ (80074cc <AT_Send+0x3c8>)
 8007234:	0019      	movs	r1, r3
 8007236:	2003      	movs	r0, #3
 8007238:	f00c ffd4 	bl	80141e4 <CreateLine>
    ATCommandSend = CWMODE1();
 800723c:	230f      	movs	r3, #15
 800723e:	18fc      	adds	r4, r7, r3
 8007240:	f7ff fb36 	bl	80068b0 <CWMODE1>
 8007244:	0003      	movs	r3, r0
 8007246:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007248:	f00d fd44 	bl	8014cd4 <HAL_GetTick>
 800724c:	0003      	movs	r3, r0
 800724e:	330a      	adds	r3, #10
 8007250:	001a      	movs	r2, r3
 8007252:	4b9c      	ldr	r3, [pc, #624]	@ (80074c4 <AT_Send+0x3c0>)
 8007254:	601a      	str	r2, [r3, #0]
    break;
 8007256:	e12c      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8007258:	4aa2      	ldr	r2, [pc, #648]	@ (80074e4 <AT_Send+0x3e0>)
 800725a:	4b9c      	ldr	r3, [pc, #624]	@ (80074cc <AT_Send+0x3c8>)
 800725c:	0019      	movs	r1, r3
 800725e:	2003      	movs	r0, #3
 8007260:	f00c ffc0 	bl	80141e4 <CreateLine>
    ATCommandSend = CWMODE2();
 8007264:	230f      	movs	r3, #15
 8007266:	18fc      	adds	r4, r7, r3
 8007268:	f7ff fb3e 	bl	80068e8 <CWMODE2>
 800726c:	0003      	movs	r3, r0
 800726e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007270:	f00d fd30 	bl	8014cd4 <HAL_GetTick>
 8007274:	0003      	movs	r3, r0
 8007276:	330a      	adds	r3, #10
 8007278:	001a      	movs	r2, r3
 800727a:	4b92      	ldr	r3, [pc, #584]	@ (80074c4 <AT_Send+0x3c0>)
 800727c:	601a      	str	r2, [r3, #0]
    break;
 800727e:	e118      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8007280:	4a99      	ldr	r2, [pc, #612]	@ (80074e8 <AT_Send+0x3e4>)
 8007282:	4b92      	ldr	r3, [pc, #584]	@ (80074cc <AT_Send+0x3c8>)
 8007284:	0019      	movs	r1, r3
 8007286:	2003      	movs	r0, #3
 8007288:	f00c ffac 	bl	80141e4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800728c:	230f      	movs	r3, #15
 800728e:	18fc      	adds	r4, r7, r3
 8007290:	f7ff fb46 	bl	8006920 <CWAUTOCONN>
 8007294:	0003      	movs	r3, r0
 8007296:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007298:	f00d fd1c 	bl	8014cd4 <HAL_GetTick>
 800729c:	0003      	movs	r3, r0
 800729e:	330a      	adds	r3, #10
 80072a0:	001a      	movs	r2, r3
 80072a2:	4b88      	ldr	r3, [pc, #544]	@ (80074c4 <AT_Send+0x3c0>)
 80072a4:	601a      	str	r2, [r3, #0]
    break;
 80072a6:	e104      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80072a8:	4a90      	ldr	r2, [pc, #576]	@ (80074ec <AT_Send+0x3e8>)
 80072aa:	4b88      	ldr	r3, [pc, #544]	@ (80074cc <AT_Send+0x3c8>)
 80072ac:	0019      	movs	r1, r3
 80072ae:	2003      	movs	r0, #3
 80072b0:	f00c ff98 	bl	80141e4 <CreateLine>
    ATCommandSend = CWJAP();
 80072b4:	230f      	movs	r3, #15
 80072b6:	18fc      	adds	r4, r7, r3
 80072b8:	f7ff fb4e 	bl	8006958 <CWJAP>
 80072bc:	0003      	movs	r3, r0
 80072be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80072c0:	f00d fd08 	bl	8014cd4 <HAL_GetTick>
 80072c4:	0003      	movs	r3, r0
 80072c6:	3332      	adds	r3, #50	@ 0x32
 80072c8:	001a      	movs	r2, r3
 80072ca:	4b7e      	ldr	r3, [pc, #504]	@ (80074c4 <AT_Send+0x3c0>)
 80072cc:	601a      	str	r2, [r3, #0]
    break;
 80072ce:	e0f0      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80072d0:	4a87      	ldr	r2, [pc, #540]	@ (80074f0 <AT_Send+0x3ec>)
 80072d2:	4b7e      	ldr	r3, [pc, #504]	@ (80074cc <AT_Send+0x3c8>)
 80072d4:	0019      	movs	r1, r3
 80072d6:	2003      	movs	r0, #3
 80072d8:	f00c ff84 	bl	80141e4 <CreateLine>
    ATCommandSend = CWMODE3();
 80072dc:	230f      	movs	r3, #15
 80072de:	18fc      	adds	r4, r7, r3
 80072e0:	f7ff fbb8 	bl	8006a54 <CWMODE3>
 80072e4:	0003      	movs	r3, r0
 80072e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072e8:	f00d fcf4 	bl	8014cd4 <HAL_GetTick>
 80072ec:	0003      	movs	r3, r0
 80072ee:	330a      	adds	r3, #10
 80072f0:	001a      	movs	r2, r3
 80072f2:	4b74      	ldr	r3, [pc, #464]	@ (80074c4 <AT_Send+0x3c0>)
 80072f4:	601a      	str	r2, [r3, #0]
    break;
 80072f6:	e0dc      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80072f8:	4a7e      	ldr	r2, [pc, #504]	@ (80074f4 <AT_Send+0x3f0>)
 80072fa:	4b74      	ldr	r3, [pc, #464]	@ (80074cc <AT_Send+0x3c8>)
 80072fc:	0019      	movs	r1, r3
 80072fe:	2003      	movs	r0, #3
 8007300:	f00c ff70 	bl	80141e4 <CreateLine>
    ATCommandSend = CWSAP();
 8007304:	230f      	movs	r3, #15
 8007306:	18fc      	adds	r4, r7, r3
 8007308:	f7ff fbdc 	bl	8006ac4 <CWSAP>
 800730c:	0003      	movs	r3, r0
 800730e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007310:	f00d fce0 	bl	8014cd4 <HAL_GetTick>
 8007314:	0003      	movs	r3, r0
 8007316:	330a      	adds	r3, #10
 8007318:	001a      	movs	r2, r3
 800731a:	4b6a      	ldr	r3, [pc, #424]	@ (80074c4 <AT_Send+0x3c0>)
 800731c:	601a      	str	r2, [r3, #0]
    break;
 800731e:	e0c8      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8007320:	4a75      	ldr	r2, [pc, #468]	@ (80074f8 <AT_Send+0x3f4>)
 8007322:	4b6a      	ldr	r3, [pc, #424]	@ (80074cc <AT_Send+0x3c8>)
 8007324:	0019      	movs	r1, r3
 8007326:	2003      	movs	r0, #3
 8007328:	f00c ff5c 	bl	80141e4 <CreateLine>
    ATCommandSend = CIPMUX();
 800732c:	230f      	movs	r3, #15
 800732e:	18fc      	adds	r4, r7, r3
 8007330:	f7ff fbe4 	bl	8006afc <CIPMUX>
 8007334:	0003      	movs	r3, r0
 8007336:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007338:	f00d fccc 	bl	8014cd4 <HAL_GetTick>
 800733c:	0003      	movs	r3, r0
 800733e:	330a      	adds	r3, #10
 8007340:	001a      	movs	r2, r3
 8007342:	4b60      	ldr	r3, [pc, #384]	@ (80074c4 <AT_Send+0x3c0>)
 8007344:	601a      	str	r2, [r3, #0]
    break;
 8007346:	e0b4      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8007348:	4a6c      	ldr	r2, [pc, #432]	@ (80074fc <AT_Send+0x3f8>)
 800734a:	4b60      	ldr	r3, [pc, #384]	@ (80074cc <AT_Send+0x3c8>)
 800734c:	0019      	movs	r1, r3
 800734e:	2003      	movs	r0, #3
 8007350:	f00c ff48 	bl	80141e4 <CreateLine>
    ATCommandSend = WEBSERVER();
 8007354:	230f      	movs	r3, #15
 8007356:	18fc      	adds	r4, r7, r3
 8007358:	f7ff fbec 	bl	8006b34 <WEBSERVER>
 800735c:	0003      	movs	r3, r0
 800735e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007360:	f00d fcb8 	bl	8014cd4 <HAL_GetTick>
 8007364:	0003      	movs	r3, r0
 8007366:	330a      	adds	r3, #10
 8007368:	001a      	movs	r2, r3
 800736a:	4b56      	ldr	r3, [pc, #344]	@ (80074c4 <AT_Send+0x3c0>)
 800736c:	601a      	str	r2, [r3, #0]
    break;
 800736e:	e0a0      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8007370:	230f      	movs	r3, #15
 8007372:	18fc      	adds	r4, r7, r3
 8007374:	f7ff fbfa 	bl	8006b6c <HTTPCPOST>
 8007378:	0003      	movs	r3, r0
 800737a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800737c:	f00d fcaa 	bl	8014cd4 <HAL_GetTick>
 8007380:	0003      	movs	r3, r0
 8007382:	33f5      	adds	r3, #245	@ 0xf5
 8007384:	33ff      	adds	r3, #255	@ 0xff
 8007386:	001a      	movs	r2, r3
 8007388:	4b4e      	ldr	r3, [pc, #312]	@ (80074c4 <AT_Send+0x3c0>)
 800738a:	601a      	str	r2, [r3, #0]
    break;
 800738c:	e091      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_SENDDATA:
    Debug("Send the data");
 800738e:	4a5c      	ldr	r2, [pc, #368]	@ (8007500 <AT_Send+0x3fc>)
 8007390:	4b4e      	ldr	r3, [pc, #312]	@ (80074cc <AT_Send+0x3c8>)
 8007392:	0019      	movs	r1, r3
 8007394:	2003      	movs	r0, #3
 8007396:	f00c ff25 	bl	80141e4 <CreateLine>
    ATCommandSend = SENDDATA();
 800739a:	230f      	movs	r3, #15
 800739c:	18fc      	adds	r4, r7, r3
 800739e:	f7ff fcc7 	bl	8006d30 <SENDDATA>
 80073a2:	0003      	movs	r3, r0
 80073a4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80073a6:	f00d fc95 	bl	8014cd4 <HAL_GetTick>
 80073aa:	0003      	movs	r3, r0
 80073ac:	33f5      	adds	r3, #245	@ 0xf5
 80073ae:	33ff      	adds	r3, #255	@ 0xff
 80073b0:	001a      	movs	r2, r3
 80073b2:	4b44      	ldr	r3, [pc, #272]	@ (80074c4 <AT_Send+0x3c0>)
 80073b4:	601a      	str	r2, [r3, #0]
    break;
 80073b6:	e07c      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80073b8:	4a52      	ldr	r2, [pc, #328]	@ (8007504 <AT_Send+0x400>)
 80073ba:	4b44      	ldr	r3, [pc, #272]	@ (80074cc <AT_Send+0x3c8>)
 80073bc:	0019      	movs	r1, r3
 80073be:	2003      	movs	r0, #3
 80073c0:	f00c ff10 	bl	80141e4 <CreateLine>
    ATCommandSend = SLEEP();
 80073c4:	230f      	movs	r3, #15
 80073c6:	18fc      	adds	r4, r7, r3
 80073c8:	f7ff fcda 	bl	8006d80 <SLEEP>
 80073cc:	0003      	movs	r3, r0
 80073ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80073d0:	f00d fc80 	bl	8014cd4 <HAL_GetTick>
 80073d4:	0003      	movs	r3, r0
 80073d6:	330a      	adds	r3, #10
 80073d8:	001a      	movs	r2, r3
 80073da:	4b3a      	ldr	r3, [pc, #232]	@ (80074c4 <AT_Send+0x3c0>)
 80073dc:	601a      	str	r2, [r3, #0]
    break;
 80073de:	e068      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 80073e0:	4a49      	ldr	r2, [pc, #292]	@ (8007508 <AT_Send+0x404>)
 80073e2:	4b3a      	ldr	r3, [pc, #232]	@ (80074cc <AT_Send+0x3c8>)
 80073e4:	0019      	movs	r1, r3
 80073e6:	2003      	movs	r0, #3
 80073e8:	f00c fefc 	bl	80141e4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80073ec:	230f      	movs	r3, #15
 80073ee:	18fc      	adds	r4, r7, r3
 80073f0:	f7ff fce2 	bl	8006db8 <CIPSNTPCFG>
 80073f4:	0003      	movs	r3, r0
 80073f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80073f8:	f00d fc6c 	bl	8014cd4 <HAL_GetTick>
 80073fc:	0003      	movs	r3, r0
 80073fe:	330a      	adds	r3, #10
 8007400:	001a      	movs	r2, r3
 8007402:	4b30      	ldr	r3, [pc, #192]	@ (80074c4 <AT_Send+0x3c0>)
 8007404:	601a      	str	r2, [r3, #0]
    break;
 8007406:	e054      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8007408:	4a40      	ldr	r2, [pc, #256]	@ (800750c <AT_Send+0x408>)
 800740a:	4b30      	ldr	r3, [pc, #192]	@ (80074cc <AT_Send+0x3c8>)
 800740c:	0019      	movs	r1, r3
 800740e:	2003      	movs	r0, #3
 8007410:	f00c fee8 	bl	80141e4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8007414:	230f      	movs	r3, #15
 8007416:	18fc      	adds	r4, r7, r3
 8007418:	f7ff fcee 	bl	8006df8 <CIPSNTPTIME>
 800741c:	0003      	movs	r3, r0
 800741e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007420:	f00d fc58 	bl	8014cd4 <HAL_GetTick>
 8007424:	0003      	movs	r3, r0
 8007426:	33f5      	adds	r3, #245	@ 0xf5
 8007428:	33ff      	adds	r3, #255	@ 0xff
 800742a:	001a      	movs	r2, r3
 800742c:	4b25      	ldr	r3, [pc, #148]	@ (80074c4 <AT_Send+0x3c0>)
 800742e:	601a      	str	r2, [r3, #0]
    break;
 8007430:	e03f      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8007432:	4a37      	ldr	r2, [pc, #220]	@ (8007510 <AT_Send+0x40c>)
 8007434:	4b25      	ldr	r3, [pc, #148]	@ (80074cc <AT_Send+0x3c8>)
 8007436:	0019      	movs	r1, r3
 8007438:	2003      	movs	r0, #3
 800743a:	f00c fed3 	bl	80141e4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800743e:	230f      	movs	r3, #15
 8007440:	18fc      	adds	r4, r7, r3
 8007442:	f7ff fcf5 	bl	8006e30 <CIPSNTPINTV>
 8007446:	0003      	movs	r3, r0
 8007448:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800744a:	f00d fc43 	bl	8014cd4 <HAL_GetTick>
 800744e:	0003      	movs	r3, r0
 8007450:	330a      	adds	r3, #10
 8007452:	001a      	movs	r2, r3
 8007454:	4b1b      	ldr	r3, [pc, #108]	@ (80074c4 <AT_Send+0x3c0>)
 8007456:	601a      	str	r2, [r3, #0]
    break;
 8007458:	e02b      	b.n	80074b2 <AT_Send+0x3ae>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL Post via HTTP");
 800745a:	4a2e      	ldr	r2, [pc, #184]	@ (8007514 <AT_Send+0x410>)
 800745c:	4b1b      	ldr	r3, [pc, #108]	@ (80074cc <AT_Send+0x3c8>)
 800745e:	0019      	movs	r1, r3
 8007460:	2003      	movs	r0, #3
 8007462:	f00c febf 	bl	80141e4 <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 8007466:	230f      	movs	r3, #15
 8007468:	18fc      	adds	r4, r7, r3
 800746a:	f7ff fc1d 	bl	8006ca8 <HTTPCPOST_MAILAPI>
 800746e:	0003      	movs	r3, r0
 8007470:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007472:	f00d fc2f 	bl	8014cd4 <HAL_GetTick>
 8007476:	0003      	movs	r3, r0
 8007478:	3332      	adds	r3, #50	@ 0x32
 800747a:	001a      	movs	r2, r3
 800747c:	4b11      	ldr	r3, [pc, #68]	@ (80074c4 <AT_Send+0x3c0>)
 800747e:	601a      	str	r2, [r3, #0]
    break;
 8007480:	e017      	b.n	80074b2 <AT_Send+0x3ae>

  case AT_SENDMAIL:
    Debug("Send Email content");
 8007482:	4a25      	ldr	r2, [pc, #148]	@ (8007518 <AT_Send+0x414>)
 8007484:	4b11      	ldr	r3, [pc, #68]	@ (80074cc <AT_Send+0x3c8>)
 8007486:	0019      	movs	r1, r3
 8007488:	2003      	movs	r0, #3
 800748a:	f00c feab 	bl	80141e4 <CreateLine>
    ATCommandSend = SENDMAIL();
 800748e:	230f      	movs	r3, #15
 8007490:	18fc      	adds	r4, r7, r3
 8007492:	f7ff fbe1 	bl	8006c58 <SENDMAIL>
 8007496:	0003      	movs	r3, r0
 8007498:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800749a:	f00d fc1b 	bl	8014cd4 <HAL_GetTick>
 800749e:	0003      	movs	r3, r0
 80074a0:	33f5      	adds	r3, #245	@ 0xf5
 80074a2:	33ff      	adds	r3, #255	@ 0xff
 80074a4:	001a      	movs	r2, r3
 80074a6:	4b07      	ldr	r3, [pc, #28]	@ (80074c4 <AT_Send+0x3c0>)
 80074a8:	601a      	str	r2, [r3, #0]
    break;
 80074aa:	e002      	b.n	80074b2 <AT_Send+0x3ae>
#endif

  case AT_END:
    break;
 80074ac:	46c0      	nop			@ (mov r8, r8)
 80074ae:	e000      	b.n	80074b2 <AT_Send+0x3ae>
  break;
 80074b0:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80074b2:	230f      	movs	r3, #15
 80074b4:	18fb      	adds	r3, r7, r3
 80074b6:	781b      	ldrb	r3, [r3, #0]
}
 80074b8:	0018      	movs	r0, r3
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b005      	add	sp, #20
 80074be:	bd90      	pop	{r4, r7, pc}
 80074c0:	0802e874 	.word	0x0802e874
 80074c4:	200006a4 	.word	0x200006a4
 80074c8:	0802b6a0 	.word	0x0802b6a0
 80074cc:	0802ad1c 	.word	0x0802ad1c
 80074d0:	0802b6ac 	.word	0x0802b6ac
 80074d4:	0802b6c0 	.word	0x0802b6c0
 80074d8:	0802b6d4 	.word	0x0802b6d4
 80074dc:	0802b6e4 	.word	0x0802b6e4
 80074e0:	0802b6f8 	.word	0x0802b6f8
 80074e4:	0802b710 	.word	0x0802b710
 80074e8:	0802b728 	.word	0x0802b728
 80074ec:	0802b740 	.word	0x0802b740
 80074f0:	0802b754 	.word	0x0802b754
 80074f4:	0802b770 	.word	0x0802b770
 80074f8:	0802b78c 	.word	0x0802b78c
 80074fc:	0802b7a8 	.word	0x0802b7a8
 8007500:	0802b7c4 	.word	0x0802b7c4
 8007504:	0802b7d4 	.word	0x0802b7d4
 8007508:	0802b7f8 	.word	0x0802b7f8
 800750c:	0802b80c 	.word	0x0802b80c
 8007510:	0802b824 	.word	0x0802b824
 8007514:	0802b844 	.word	0x0802b844
 8007518:	0802b860 	.word	0x0802b860

0800751c <ESP_WakeTest>:

void ESP_WakeTest(void) {
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8007522:	1dfb      	adds	r3, r7, #7
 8007524:	2200      	movs	r2, #0
 8007526:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8007528:	4b7e      	ldr	r3, [pc, #504]	@ (8007724 <ESP_WakeTest+0x208>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b05      	cmp	r3, #5
 800752e:	d900      	bls.n	8007532 <ESP_WakeTest+0x16>
 8007530:	e0dc      	b.n	80076ec <ESP_WakeTest+0x1d0>
 8007532:	009a      	lsls	r2, r3, #2
 8007534:	4b7c      	ldr	r3, [pc, #496]	@ (8007728 <ESP_WakeTest+0x20c>)
 8007536:	18d3      	adds	r3, r2, r3
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 800753c:	4b7b      	ldr	r3, [pc, #492]	@ (800772c <ESP_WakeTest+0x210>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2201      	movs	r2, #1
 8007542:	4053      	eors	r3, r2
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d039      	beq.n	80075be <ESP_WakeTest+0xa2>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800754a:	2380      	movs	r3, #128	@ 0x80
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	4878      	ldr	r0, [pc, #480]	@ (8007730 <ESP_WakeTest+0x214>)
 8007550:	2200      	movs	r2, #0
 8007552:	0019      	movs	r1, r3
 8007554:	f00e fe4f 	bl	80161f6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8007558:	2032      	movs	r0, #50	@ 0x32
 800755a:	f00d fbc5 	bl	8014ce8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800755e:	2380      	movs	r3, #128	@ 0x80
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	4873      	ldr	r0, [pc, #460]	@ (8007730 <ESP_WakeTest+0x214>)
 8007564:	2201      	movs	r2, #1
 8007566:	0019      	movs	r1, r3
 8007568:	f00e fe45 	bl	80161f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800756c:	200a      	movs	r0, #10
 800756e:	f00d fbbb 	bl	8014ce8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007572:	4b70      	ldr	r3, [pc, #448]	@ (8007734 <ESP_WakeTest+0x218>)
 8007574:	2200      	movs	r2, #0
 8007576:	2101      	movs	r1, #1
 8007578:	0018      	movs	r0, r3
 800757a:	f00e fe3c 	bl	80161f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800757e:	200a      	movs	r0, #10
 8007580:	f00d fbb2 	bl	8014ce8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8007584:	4b6b      	ldr	r3, [pc, #428]	@ (8007734 <ESP_WakeTest+0x218>)
 8007586:	2201      	movs	r2, #1
 8007588:	2102      	movs	r1, #2
 800758a:	0018      	movs	r0, r3
 800758c:	f00e fe33 	bl	80161f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007590:	200a      	movs	r0, #10
 8007592:	f00d fba9 	bl	8014ce8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007596:	4b67      	ldr	r3, [pc, #412]	@ (8007734 <ESP_WakeTest+0x218>)
 8007598:	2201      	movs	r2, #1
 800759a:	2101      	movs	r1, #1
 800759c:	0018      	movs	r0, r3
 800759e:	f00e fe2a 	bl	80161f6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80075a2:	f00d fb97 	bl	8014cd4 <HAL_GetTick>
 80075a6:	0003      	movs	r3, r0
 80075a8:	22af      	movs	r2, #175	@ 0xaf
 80075aa:	0092      	lsls	r2, r2, #2
 80075ac:	189a      	adds	r2, r3, r2
 80075ae:	4b62      	ldr	r3, [pc, #392]	@ (8007738 <ESP_WakeTest+0x21c>)
 80075b0:	601a      	str	r2, [r3, #0]
        HAL_Delay(10);
 80075b2:	200a      	movs	r0, #10
 80075b4:	f00d fb98 	bl	8014ce8 <HAL_Delay>
        EspTurnedOn = true;
 80075b8:	4b5c      	ldr	r3, [pc, #368]	@ (800772c <ESP_WakeTest+0x210>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80075be:	2380      	movs	r3, #128	@ 0x80
 80075c0:	005a      	lsls	r2, r3, #1
 80075c2:	4b5e      	ldr	r3, [pc, #376]	@ (800773c <ESP_WakeTest+0x220>)
 80075c4:	0011      	movs	r1, r2
 80075c6:	0018      	movs	r0, r3
 80075c8:	f7fd fce8 	bl	8004f9c <ESP_Receive>
 80075cc:	1e03      	subs	r3, r0, #0
 80075ce:	d100      	bne.n	80075d2 <ESP_WakeTest+0xb6>
 80075d0:	e09f      	b.n	8007712 <ESP_WakeTest+0x1f6>
        TestState = ESP_TEST_SEND;
 80075d2:	4b54      	ldr	r3, [pc, #336]	@ (8007724 <ESP_WakeTest+0x208>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	701a      	strb	r2, [r3, #0]
      }
      break;
 80075d8:	e09b      	b.n	8007712 <ESP_WakeTest+0x1f6>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80075da:	4b57      	ldr	r3, [pc, #348]	@ (8007738 <ESP_WakeTest+0x21c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	0018      	movs	r0, r3
 80075e0:	f00c fdaa 	bl	8014138 <TimestampIsReached>
 80075e4:	1e03      	subs	r3, r0, #0
 80075e6:	d100      	bne.n	80075ea <ESP_WakeTest+0xce>
 80075e8:	e095      	b.n	8007716 <ESP_WakeTest+0x1fa>
        ATSend = AT_Send(ATCommand);
 80075ea:	4b55      	ldr	r3, [pc, #340]	@ (8007740 <ESP_WakeTest+0x224>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	1dfc      	adds	r4, r7, #7
 80075f0:	0018      	movs	r0, r3
 80075f2:	f7ff fd87 	bl	8007104 <AT_Send>
 80075f6:	0003      	movs	r3, r0
 80075f8:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80075fa:	1dfb      	adds	r3, r7, #7
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d100      	bne.n	8007604 <ESP_WakeTest+0xe8>
 8007602:	e088      	b.n	8007716 <ESP_WakeTest+0x1fa>
          TestState = ESP_TEST_RECEIVE;
 8007604:	4b47      	ldr	r3, [pc, #284]	@ (8007724 <ESP_WakeTest+0x208>)
 8007606:	2202      	movs	r2, #2
 8007608:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800760a:	e084      	b.n	8007716 <ESP_WakeTest+0x1fa>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800760c:	4b4a      	ldr	r3, [pc, #296]	@ (8007738 <ESP_WakeTest+0x21c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	0018      	movs	r0, r3
 8007612:	f00c fd91 	bl	8014138 <TimestampIsReached>
 8007616:	1e03      	subs	r3, r0, #0
 8007618:	d100      	bne.n	800761c <ESP_WakeTest+0x100>
 800761a:	e07e      	b.n	800771a <ESP_WakeTest+0x1fe>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800761c:	4b49      	ldr	r3, [pc, #292]	@ (8007744 <ESP_WakeTest+0x228>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	0018      	movs	r0, r3
 8007622:	f7ff fc21 	bl	8006e68 <DMA_ProcessBuffer>
 8007626:	0003      	movs	r3, r0
 8007628:	001a      	movs	r2, r3
 800762a:	4b47      	ldr	r3, [pc, #284]	@ (8007748 <ESP_WakeTest+0x22c>)
 800762c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800762e:	4b46      	ldr	r3, [pc, #280]	@ (8007748 <ESP_WakeTest+0x22c>)
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	4b44      	ldr	r3, [pc, #272]	@ (8007744 <ESP_WakeTest+0x228>)
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	1dbc      	adds	r4, r7, #6
 8007638:	0019      	movs	r1, r3
 800763a:	0010      	movs	r0, r2
 800763c:	f7ff fd14 	bl	8007068 <ATCompare>
 8007640:	0003      	movs	r3, r0
 8007642:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007644:	4b40      	ldr	r3, [pc, #256]	@ (8007748 <ESP_WakeTest+0x22c>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d102      	bne.n	8007652 <ESP_WakeTest+0x136>
          TestState = ESP_TEST_SEND;
 800764c:	4b35      	ldr	r3, [pc, #212]	@ (8007724 <ESP_WakeTest+0x208>)
 800764e:	2201      	movs	r2, #1
 8007650:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8007652:	4b3d      	ldr	r3, [pc, #244]	@ (8007748 <ESP_WakeTest+0x22c>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b07      	cmp	r3, #7
 8007658:	d104      	bne.n	8007664 <ESP_WakeTest+0x148>
          StartProg();
 800765a:	f7fe fe3d 	bl	80062d8 <StartProg>
          TestState = ESP_TEST_BOOT;
 800765e:	4b31      	ldr	r3, [pc, #196]	@ (8007724 <ESP_WakeTest+0x208>)
 8007660:	2205      	movs	r2, #5
 8007662:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007664:	4b38      	ldr	r3, [pc, #224]	@ (8007748 <ESP_WakeTest+0x22c>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b03      	cmp	r3, #3
 800766a:	d109      	bne.n	8007680 <ESP_WakeTest+0x164>
          ESPTimeStamp = HAL_GetTick() + 50;
 800766c:	f00d fb32 	bl	8014cd4 <HAL_GetTick>
 8007670:	0003      	movs	r3, r0
 8007672:	3332      	adds	r3, #50	@ 0x32
 8007674:	001a      	movs	r2, r3
 8007676:	4b30      	ldr	r3, [pc, #192]	@ (8007738 <ESP_WakeTest+0x21c>)
 8007678:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800767a:	4b2a      	ldr	r3, [pc, #168]	@ (8007724 <ESP_WakeTest+0x208>)
 800767c:	2201      	movs	r2, #1
 800767e:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8007680:	1dbb      	adds	r3, r7, #6
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d048      	beq.n	800771a <ESP_WakeTest+0x1fe>
          TestState = ESP_TEST_VALIDATE;
 8007688:	4b26      	ldr	r3, [pc, #152]	@ (8007724 <ESP_WakeTest+0x208>)
 800768a:	2203      	movs	r2, #3
 800768c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800768e:	e044      	b.n	800771a <ESP_WakeTest+0x1fe>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8007690:	4b2e      	ldr	r3, [pc, #184]	@ (800774c <ESP_WakeTest+0x230>)
 8007692:	22fa      	movs	r2, #250	@ 0xfa
 8007694:	0112      	lsls	r2, r2, #4
 8007696:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 8007698:	f00b f9fc 	bl	8012a94 <Calculate_LED_ON>
 800769c:	0003      	movs	r3, r0
 800769e:	001a      	movs	r2, r3
 80076a0:	4b2a      	ldr	r3, [pc, #168]	@ (800774c <ESP_WakeTest+0x230>)
 80076a2:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80076a4:	4b29      	ldr	r3, [pc, #164]	@ (800774c <ESP_WakeTest+0x230>)
 80076a6:	22fa      	movs	r2, #250	@ 0xfa
 80076a8:	0112      	lsls	r2, r2, #4
 80076aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80076ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007724 <ESP_WakeTest+0x208>)
 80076ae:	2204      	movs	r2, #4
 80076b0:	701a      	strb	r2, [r3, #0]

      break;
 80076b2:	e033      	b.n	800771c <ESP_WakeTest+0x200>

    case ESP_TEST_DEINIT:
      testRound = false;
 80076b4:	4b26      	ldr	r3, [pc, #152]	@ (8007750 <ESP_WakeTest+0x234>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80076ba:	4b1c      	ldr	r3, [pc, #112]	@ (800772c <ESP_WakeTest+0x210>)
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80076c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007734 <ESP_WakeTest+0x218>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	2101      	movs	r1, #1
 80076c6:	0018      	movs	r0, r3
 80076c8:	f00e fd95 	bl	80161f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80076cc:	2380      	movs	r3, #128	@ 0x80
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	4817      	ldr	r0, [pc, #92]	@ (8007730 <ESP_WakeTest+0x214>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	0019      	movs	r1, r3
 80076d6:	f00e fd8e 	bl	80161f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80076da:	4b16      	ldr	r3, [pc, #88]	@ (8007734 <ESP_WakeTest+0x218>)
 80076dc:	2200      	movs	r2, #0
 80076de:	2102      	movs	r1, #2
 80076e0:	0018      	movs	r0, r3
 80076e2:	f00e fd88 	bl	80161f6 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 80076e6:	f006 f91d 	bl	800d924 <SetESPMeasurementDone>
      break;
 80076ea:	e017      	b.n	800771c <ESP_WakeTest+0x200>

    default:
      TestState = ESP_TEST_INIT;
 80076ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007724 <ESP_WakeTest+0x208>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	701a      	strb	r2, [r3, #0]
      break;
 80076f2:	e013      	b.n	800771c <ESP_WakeTest+0x200>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 80076f4:	4b15      	ldr	r3, [pc, #84]	@ (800774c <ESP_WakeTest+0x230>)
 80076f6:	22fa      	movs	r2, #250	@ 0xfa
 80076f8:	0112      	lsls	r2, r2, #4
 80076fa:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 80076fc:	4b13      	ldr	r3, [pc, #76]	@ (800774c <ESP_WakeTest+0x230>)
 80076fe:	22fa      	movs	r2, #250	@ 0xfa
 8007700:	0112      	lsls	r2, r2, #4
 8007702:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007704:	f00b f9c6 	bl	8012a94 <Calculate_LED_ON>
 8007708:	0003      	movs	r3, r0
 800770a:	001a      	movs	r2, r3
 800770c:	4b0f      	ldr	r3, [pc, #60]	@ (800774c <ESP_WakeTest+0x230>)
 800770e:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8007710:	e004      	b.n	800771c <ESP_WakeTest+0x200>
      break;
 8007712:	46c0      	nop			@ (mov r8, r8)
 8007714:	e002      	b.n	800771c <ESP_WakeTest+0x200>
      break;
 8007716:	46c0      	nop			@ (mov r8, r8)
 8007718:	e000      	b.n	800771c <ESP_WakeTest+0x200>
      break;
 800771a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800771c:	46c0      	nop			@ (mov r8, r8)
 800771e:	46bd      	mov	sp, r7
 8007720:	b003      	add	sp, #12
 8007722:	bd90      	pop	{r4, r7, pc}
 8007724:	20000713 	.word	0x20000713
 8007728:	0802e8d0 	.word	0x0802e8d0
 800772c:	200005ac 	.word	0x200005ac
 8007730:	50000800 	.word	0x50000800
 8007734:	50001c00 	.word	0x50001c00
 8007738:	200006a4 	.word	0x200006a4
 800773c:	200004ac 	.word	0x200004ac
 8007740:	20000711 	.word	0x20000711
 8007744:	20000710 	.word	0x20000710
 8007748:	20000033 	.word	0x20000033
 800774c:	40000400 	.word	0x40000400
 8007750:	20000001 	.word	0x20000001

08007754 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8007754:	b5b0      	push	{r4, r5, r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800775a:	1dfb      	adds	r3, r7, #7
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8007760:	4b66      	ldr	r3, [pc, #408]	@ (80078fc <ESP_Upkeep+0x1a8>)
 8007762:	781a      	ldrb	r2, [r3, #0]
 8007764:	4b66      	ldr	r3, [pc, #408]	@ (8007900 <ESP_Upkeep+0x1ac>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d028      	beq.n	80077be <ESP_Upkeep+0x6a>
 800776c:	f00c fdc4 	bl	80142f8 <GetVerboseLevel>
 8007770:	0003      	movs	r3, r0
 8007772:	2b03      	cmp	r3, #3
 8007774:	d123      	bne.n	80077be <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 8007776:	4b61      	ldr	r3, [pc, #388]	@ (80078fc <ESP_Upkeep+0x1a8>)
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	4b61      	ldr	r3, [pc, #388]	@ (8007900 <ESP_Upkeep+0x1ac>)
 800777c:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 800777e:	4b60      	ldr	r3, [pc, #384]	@ (8007900 <ESP_Upkeep+0x1ac>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b03      	cmp	r3, #3
 8007784:	d107      	bne.n	8007796 <ESP_Upkeep+0x42>
 8007786:	4b5f      	ldr	r3, [pc, #380]	@ (8007904 <ESP_Upkeep+0x1b0>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b0e      	cmp	r3, #14
 800778c:	d017      	beq.n	80077be <ESP_Upkeep+0x6a>
 800778e:	4b5d      	ldr	r3, [pc, #372]	@ (8007904 <ESP_Upkeep+0x1b0>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b14      	cmp	r3, #20
 8007794:	d013      	beq.n	80077be <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8007796:	4b5a      	ldr	r3, [pc, #360]	@ (8007900 <ESP_Upkeep+0x1ac>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	001d      	movs	r5, r3
 800779c:	4b59      	ldr	r3, [pc, #356]	@ (8007904 <ESP_Upkeep+0x1b0>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	0018      	movs	r0, r3
 80077a2:	4b59      	ldr	r3, [pc, #356]	@ (8007908 <ESP_Upkeep+0x1b4>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	001c      	movs	r4, r3
 80077a8:	4b58      	ldr	r3, [pc, #352]	@ (800790c <ESP_Upkeep+0x1b8>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	4a58      	ldr	r2, [pc, #352]	@ (8007910 <ESP_Upkeep+0x1bc>)
 80077ae:	4959      	ldr	r1, [pc, #356]	@ (8007914 <ESP_Upkeep+0x1c0>)
 80077b0:	9302      	str	r3, [sp, #8]
 80077b2:	9401      	str	r4, [sp, #4]
 80077b4:	9000      	str	r0, [sp, #0]
 80077b6:	002b      	movs	r3, r5
 80077b8:	2003      	movs	r0, #3
 80077ba:	f00c fd13 	bl	80141e4 <CreateLine>
    }
  }
  switch (EspState) {
 80077be:	4b4f      	ldr	r3, [pc, #316]	@ (80078fc <ESP_Upkeep+0x1a8>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d901      	bls.n	80077ca <ESP_Upkeep+0x76>
 80077c6:	f000 fce8 	bl	800819a <ESP_Upkeep+0xa46>
 80077ca:	009a      	lsls	r2, r3, #2
 80077cc:	4b52      	ldr	r3, [pc, #328]	@ (8007918 <ESP_Upkeep+0x1c4>)
 80077ce:	18d3      	adds	r3, r2, r3
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80077d4:	4b49      	ldr	r3, [pc, #292]	@ (80078fc <ESP_Upkeep+0x1a8>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	701a      	strb	r2, [r3, #0]
      break;
 80077da:	f000 fcf9 	bl	80081d0 <ESP_Upkeep+0xa7c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 80077de:	4b4f      	ldr	r3, [pc, #316]	@ (800791c <ESP_Upkeep+0x1c8>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 80077e4:	f006 fafe 	bl	800dde4 <AllDevicesReady>
 80077e8:	0003      	movs	r3, r0
 80077ea:	001a      	movs	r2, r3
 80077ec:	2301      	movs	r3, #1
 80077ee:	4053      	eors	r3, r2
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <ESP_Upkeep+0xa6>
 80077f6:	f000 fcdc 	bl	80081b2 <ESP_Upkeep+0xa5e>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 80077fa:	f00b fadd 	bl	8012db8 <SetESPIndicator>
      if(!EspTurnedOn){
 80077fe:	4b48      	ldr	r3, [pc, #288]	@ (8007920 <ESP_Upkeep+0x1cc>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2201      	movs	r2, #1
 8007804:	4053      	eors	r3, r2
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d03c      	beq.n	8007886 <ESP_Upkeep+0x132>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800780c:	2380      	movs	r3, #128	@ 0x80
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	4844      	ldr	r0, [pc, #272]	@ (8007924 <ESP_Upkeep+0x1d0>)
 8007812:	2200      	movs	r2, #0
 8007814:	0019      	movs	r1, r3
 8007816:	f00e fcee 	bl	80161f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800781a:	2001      	movs	r0, #1
 800781c:	f00d fa64 	bl	8014ce8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007820:	2380      	movs	r3, #128	@ 0x80
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	483f      	ldr	r0, [pc, #252]	@ (8007924 <ESP_Upkeep+0x1d0>)
 8007826:	2201      	movs	r2, #1
 8007828:	0019      	movs	r1, r3
 800782a:	f00e fce4 	bl	80161f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800782e:	2001      	movs	r0, #1
 8007830:	f00d fa5a 	bl	8014ce8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007834:	4b3c      	ldr	r3, [pc, #240]	@ (8007928 <ESP_Upkeep+0x1d4>)
 8007836:	2200      	movs	r2, #0
 8007838:	2101      	movs	r1, #1
 800783a:	0018      	movs	r0, r3
 800783c:	f00e fcdb 	bl	80161f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007840:	2001      	movs	r0, #1
 8007842:	f00d fa51 	bl	8014ce8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8007846:	4b38      	ldr	r3, [pc, #224]	@ (8007928 <ESP_Upkeep+0x1d4>)
 8007848:	2201      	movs	r2, #1
 800784a:	2102      	movs	r1, #2
 800784c:	0018      	movs	r0, r3
 800784e:	f00e fcd2 	bl	80161f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007852:	2001      	movs	r0, #1
 8007854:	f00d fa48 	bl	8014ce8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007858:	4b33      	ldr	r3, [pc, #204]	@ (8007928 <ESP_Upkeep+0x1d4>)
 800785a:	2201      	movs	r2, #1
 800785c:	2101      	movs	r1, #1
 800785e:	0018      	movs	r0, r3
 8007860:	f00e fcc9 	bl	80161f6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007864:	f00d fa36 	bl	8014cd4 <HAL_GetTick>
 8007868:	0003      	movs	r3, r0
 800786a:	22af      	movs	r2, #175	@ 0xaf
 800786c:	0092      	lsls	r2, r2, #2
 800786e:	189a      	adds	r2, r3, r2
 8007870:	4b2e      	ldr	r3, [pc, #184]	@ (800792c <ESP_Upkeep+0x1d8>)
 8007872:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007874:	4b2a      	ldr	r3, [pc, #168]	@ (8007920 <ESP_Upkeep+0x1cc>)
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 800787a:	4a2d      	ldr	r2, [pc, #180]	@ (8007930 <ESP_Upkeep+0x1dc>)
 800787c:	4b25      	ldr	r3, [pc, #148]	@ (8007914 <ESP_Upkeep+0x1c0>)
 800787e:	0019      	movs	r1, r3
 8007880:	2003      	movs	r0, #3
 8007882:	f00c fcaf 	bl	80141e4 <CreateLine>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8007886:	2380      	movs	r3, #128	@ 0x80
 8007888:	005a      	lsls	r2, r3, #1
 800788a:	4b2a      	ldr	r3, [pc, #168]	@ (8007934 <ESP_Upkeep+0x1e0>)
 800788c:	0011      	movs	r1, r2
 800788e:	0018      	movs	r0, r3
 8007890:	f7fd fb84 	bl	8004f9c <ESP_Receive>
 8007894:	1e03      	subs	r3, r0, #0
 8007896:	d101      	bne.n	800789c <ESP_Upkeep+0x148>
 8007898:	f000 fc8d 	bl	80081b6 <ESP_Upkeep+0xa62>
        EspState = ESP_STATE_WAIT_AWAKE;
 800789c:	4b17      	ldr	r3, [pc, #92]	@ (80078fc <ESP_Upkeep+0x1a8>)
 800789e:	220f      	movs	r2, #15
 80078a0:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80078a2:	f00d fa17 	bl	8014cd4 <HAL_GetTick>
 80078a6:	0003      	movs	r3, r0
 80078a8:	22fa      	movs	r2, #250	@ 0xfa
 80078aa:	00d2      	lsls	r2, r2, #3
 80078ac:	189a      	adds	r2, r3, r2
 80078ae:	4b22      	ldr	r3, [pc, #136]	@ (8007938 <ESP_Upkeep+0x1e4>)
 80078b0:	601a      	str	r2, [r3, #0]
      }
      break;
 80078b2:	f000 fc80 	bl	80081b6 <ESP_Upkeep+0xa62>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80078b6:	2001      	movs	r0, #1
 80078b8:	f7ff fad6 	bl	8006e68 <DMA_ProcessBuffer>
 80078bc:	0003      	movs	r3, r0
 80078be:	001a      	movs	r2, r3
 80078c0:	4b1e      	ldr	r3, [pc, #120]	@ (800793c <ESP_Upkeep+0x1e8>)
 80078c2:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80078c4:	4b1d      	ldr	r3, [pc, #116]	@ (800793c <ESP_Upkeep+0x1e8>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	1dbc      	adds	r4, r7, #6
 80078ca:	2101      	movs	r1, #1
 80078cc:	0018      	movs	r0, r3
 80078ce:	f7ff fbcb 	bl	8007068 <ATCompare>
 80078d2:	0003      	movs	r3, r0
 80078d4:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80078d6:	1dbb      	adds	r3, r7, #6
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d108      	bne.n	80078f0 <ESP_Upkeep+0x19c>
 80078de:	4b16      	ldr	r3, [pc, #88]	@ (8007938 <ESP_Upkeep+0x1e4>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	0018      	movs	r0, r3
 80078e4:	f00c fc28 	bl	8014138 <TimestampIsReached>
 80078e8:	1e03      	subs	r3, r0, #0
 80078ea:	d101      	bne.n	80078f0 <ESP_Upkeep+0x19c>
 80078ec:	f000 fc65 	bl	80081ba <ESP_Upkeep+0xa66>
          EspState = ESP_STATE_MODE_SELECT;
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <ESP_Upkeep+0x1a8>)
 80078f2:	220b      	movs	r2, #11
 80078f4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80078f6:	f000 fc60 	bl	80081ba <ESP_Upkeep+0xa66>
 80078fa:	46c0      	nop			@ (mov r8, r8)
 80078fc:	20000030 	.word	0x20000030
 8007900:	20000003 	.word	0x20000003
 8007904:	20000711 	.word	0x20000711
 8007908:	20000712 	.word	0x20000712
 800790c:	20000710 	.word	0x20000710
 8007910:	0802b874 	.word	0x0802b874
 8007914:	0802ad1c 	.word	0x0802ad1c
 8007918:	0802e8e8 	.word	0x0802e8e8
 800791c:	20001128 	.word	0x20001128
 8007920:	200005ac 	.word	0x200005ac
 8007924:	50000800 	.word	0x50000800
 8007928:	50001c00 	.word	0x50001c00
 800792c:	200006a4 	.word	0x200006a4
 8007930:	0802b8a0 	.word	0x0802b8a0
 8007934:	200004ac 	.word	0x200004ac
 8007938:	20000948 	.word	0x20000948
 800793c:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8007940:	4bd2      	ldr	r3, [pc, #840]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007942:	2209      	movs	r2, #9
 8007944:	2116      	movs	r1, #22
 8007946:	0018      	movs	r0, r3
 8007948:	f01e ff62 	bl	8026810 <memset>
      if(!InitIsDone || WifiReset){
 800794c:	4bd0      	ldr	r3, [pc, #832]	@ (8007c90 <ESP_Upkeep+0x53c>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2201      	movs	r2, #1
 8007952:	4053      	eors	r3, r2
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d103      	bne.n	8007962 <ESP_Upkeep+0x20e>
 800795a:	4bce      	ldr	r3, [pc, #824]	@ (8007c94 <ESP_Upkeep+0x540>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d01a      	beq.n	8007998 <ESP_Upkeep+0x244>
        memcpy(ATCommandArray, AT_INIT, 7);
 8007962:	4bca      	ldr	r3, [pc, #808]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007964:	4acc      	ldr	r2, [pc, #816]	@ (8007c98 <ESP_Upkeep+0x544>)
 8007966:	6811      	ldr	r1, [r2, #0]
 8007968:	6019      	str	r1, [r3, #0]
 800796a:	8891      	ldrh	r1, [r2, #4]
 800796c:	8099      	strh	r1, [r3, #4]
 800796e:	7992      	ldrb	r2, [r2, #6]
 8007970:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8007972:	4bca      	ldr	r3, [pc, #808]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007974:	2204      	movs	r2, #4
 8007976:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007978:	4bc9      	ldr	r3, [pc, #804]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 800797e:	4bc9      	ldr	r3, [pc, #804]	@ (8007ca4 <ESP_Upkeep+0x550>)
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007984:	4bc6      	ldr	r3, [pc, #792]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	001a      	movs	r2, r3
 800798a:	4bc0      	ldr	r3, [pc, #768]	@ (8007c8c <ESP_Upkeep+0x538>)
 800798c:	5c9a      	ldrb	r2, [r3, r2]
 800798e:	4bc6      	ldr	r3, [pc, #792]	@ (8007ca8 <ESP_Upkeep+0x554>)
 8007990:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007992:	4bc6      	ldr	r3, [pc, #792]	@ (8007cac <ESP_Upkeep+0x558>)
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8007998:	4bbd      	ldr	r3, [pc, #756]	@ (8007c90 <ESP_Upkeep+0x53c>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01f      	beq.n	80079e0 <ESP_Upkeep+0x28c>
 80079a0:	4bc3      	ldr	r3, [pc, #780]	@ (8007cb0 <ESP_Upkeep+0x55c>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2201      	movs	r2, #1
 80079a6:	4053      	eors	r3, r2
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d018      	beq.n	80079e0 <ESP_Upkeep+0x28c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80079ae:	4bb7      	ldr	r3, [pc, #732]	@ (8007c8c <ESP_Upkeep+0x538>)
 80079b0:	4ac0      	ldr	r2, [pc, #768]	@ (8007cb4 <ESP_Upkeep+0x560>)
 80079b2:	6811      	ldr	r1, [r2, #0]
 80079b4:	6019      	str	r1, [r3, #0]
 80079b6:	8892      	ldrh	r2, [r2, #4]
 80079b8:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80079ba:	4bb8      	ldr	r3, [pc, #736]	@ (8007c9c <ESP_Upkeep+0x548>)
 80079bc:	2204      	movs	r2, #4
 80079be:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80079c0:	4bb7      	ldr	r3, [pc, #732]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80079c6:	4bb7      	ldr	r3, [pc, #732]	@ (8007ca4 <ESP_Upkeep+0x550>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80079cc:	4bb4      	ldr	r3, [pc, #720]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	001a      	movs	r2, r3
 80079d2:	4bae      	ldr	r3, [pc, #696]	@ (8007c8c <ESP_Upkeep+0x538>)
 80079d4:	5c9a      	ldrb	r2, [r3, r2]
 80079d6:	4bb4      	ldr	r3, [pc, #720]	@ (8007ca8 <ESP_Upkeep+0x554>)
 80079d8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079da:	4bb4      	ldr	r3, [pc, #720]	@ (8007cac <ESP_Upkeep+0x558>)
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
      }
//      if(InitIsDone && ConnectionMade && !beursTest){
      if(InitIsDone && ConnectionMade && !APtested){
 80079e0:	4bab      	ldr	r3, [pc, #684]	@ (8007c90 <ESP_Upkeep+0x53c>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d021      	beq.n	8007a2c <ESP_Upkeep+0x2d8>
 80079e8:	4bb1      	ldr	r3, [pc, #708]	@ (8007cb0 <ESP_Upkeep+0x55c>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01d      	beq.n	8007a2c <ESP_Upkeep+0x2d8>
 80079f0:	4bb1      	ldr	r3, [pc, #708]	@ (8007cb8 <ESP_Upkeep+0x564>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2201      	movs	r2, #1
 80079f6:	4053      	eors	r3, r2
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d016      	beq.n	8007a2c <ESP_Upkeep+0x2d8>
        memcpy(ATCommandArray, AT_TEST, 2);
 80079fe:	4baf      	ldr	r3, [pc, #700]	@ (8007cbc <ESP_Upkeep+0x568>)
 8007a00:	881a      	ldrh	r2, [r3, #0]
 8007a02:	4ba2      	ldr	r3, [pc, #648]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007a04:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007a06:	4ba5      	ldr	r3, [pc, #660]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007a08:	2204      	movs	r2, #4
 8007a0a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a0c:	4ba4      	ldr	r3, [pc, #656]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8007a12:	4ba4      	ldr	r3, [pc, #656]	@ (8007ca4 <ESP_Upkeep+0x550>)
 8007a14:	2204      	movs	r2, #4
 8007a16:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a18:	4ba1      	ldr	r3, [pc, #644]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	001a      	movs	r2, r3
 8007a1e:	4b9b      	ldr	r3, [pc, #620]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007a20:	5c9a      	ldrb	r2, [r3, r2]
 8007a22:	4ba1      	ldr	r3, [pc, #644]	@ (8007ca8 <ESP_Upkeep+0x554>)
 8007a24:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a26:	4ba1      	ldr	r3, [pc, #644]	@ (8007cac <ESP_Upkeep+0x558>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 8007a2c:	4b98      	ldr	r3, [pc, #608]	@ (8007c90 <ESP_Upkeep+0x53c>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d024      	beq.n	8007a7e <ESP_Upkeep+0x32a>
 8007a34:	4b9e      	ldr	r3, [pc, #632]	@ (8007cb0 <ESP_Upkeep+0x55c>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d020      	beq.n	8007a7e <ESP_Upkeep+0x32a>
 8007a3c:	4b9e      	ldr	r3, [pc, #632]	@ (8007cb8 <ESP_Upkeep+0x564>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01c      	beq.n	8007a7e <ESP_Upkeep+0x32a>
 8007a44:	4b9e      	ldr	r3, [pc, #632]	@ (8007cc0 <ESP_Upkeep+0x56c>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d118      	bne.n	8007a7e <ESP_Upkeep+0x32a>
        memcpy(ATCommandArray, AT_MAIL, 3);
 8007a4c:	4b8f      	ldr	r3, [pc, #572]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007a4e:	4a9d      	ldr	r2, [pc, #628]	@ (8007cc4 <ESP_Upkeep+0x570>)
 8007a50:	8811      	ldrh	r1, [r2, #0]
 8007a52:	8019      	strh	r1, [r3, #0]
 8007a54:	7892      	ldrb	r2, [r2, #2]
 8007a56:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007a58:	4b90      	ldr	r3, [pc, #576]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a5e:	4b90      	ldr	r3, [pc, #576]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 8007a64:	4b8f      	ldr	r3, [pc, #572]	@ (8007ca4 <ESP_Upkeep+0x550>)
 8007a66:	2206      	movs	r2, #6
 8007a68:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	001a      	movs	r2, r3
 8007a70:	4b86      	ldr	r3, [pc, #536]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007a72:	5c9a      	ldrb	r2, [r3, r2]
 8007a74:	4b8c      	ldr	r3, [pc, #560]	@ (8007ca8 <ESP_Upkeep+0x554>)
 8007a76:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a78:	4b8c      	ldr	r3, [pc, #560]	@ (8007cac <ESP_Upkeep+0x558>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
      }
#endif
//      if(InitIsDone && ConnectionMade && beursTest && !setTime){
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 8007a7e:	4b84      	ldr	r3, [pc, #528]	@ (8007c90 <ESP_Upkeep+0x53c>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d030      	beq.n	8007ae8 <ESP_Upkeep+0x394>
 8007a86:	4b8a      	ldr	r3, [pc, #552]	@ (8007cb0 <ESP_Upkeep+0x55c>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02c      	beq.n	8007ae8 <ESP_Upkeep+0x394>
 8007a8e:	4b8a      	ldr	r3, [pc, #552]	@ (8007cb8 <ESP_Upkeep+0x564>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d028      	beq.n	8007ae8 <ESP_Upkeep+0x394>
 8007a96:	4b8c      	ldr	r3, [pc, #560]	@ (8007cc8 <ESP_Upkeep+0x574>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	4053      	eors	r3, r2
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d021      	beq.n	8007ae8 <ESP_Upkeep+0x394>
 8007aa4:	4b86      	ldr	r3, [pc, #536]	@ (8007cc0 <ESP_Upkeep+0x56c>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d01d      	beq.n	8007ae8 <ESP_Upkeep+0x394>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007aac:	4b77      	ldr	r3, [pc, #476]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007aae:	4a87      	ldr	r2, [pc, #540]	@ (8007ccc <ESP_Upkeep+0x578>)
 8007ab0:	8811      	ldrh	r1, [r2, #0]
 8007ab2:	8019      	strh	r1, [r3, #0]
 8007ab4:	7892      	ldrb	r2, [r2, #2]
 8007ab6:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007ab8:	4b78      	ldr	r3, [pc, #480]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007aba:	2204      	movs	r2, #4
 8007abc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007abe:	4b78      	ldr	r3, [pc, #480]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007ac4:	4b77      	ldr	r3, [pc, #476]	@ (8007ca4 <ESP_Upkeep+0x550>)
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007aca:	f00d f903 	bl	8014cd4 <HAL_GetTick>
 8007ace:	0002      	movs	r2, r0
 8007ad0:	4b7f      	ldr	r3, [pc, #508]	@ (8007cd0 <ESP_Upkeep+0x57c>)
 8007ad2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007ad4:	4b72      	ldr	r3, [pc, #456]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	001a      	movs	r2, r3
 8007ada:	4b6c      	ldr	r3, [pc, #432]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007adc:	5c9a      	ldrb	r2, [r3, r2]
 8007ade:	4b72      	ldr	r3, [pc, #456]	@ (8007ca8 <ESP_Upkeep+0x554>)
 8007ae0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007ae2:	4b72      	ldr	r3, [pc, #456]	@ (8007cac <ESP_Upkeep+0x558>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
      }
//      if(InitIsDone && ConnectionMade && beursTest && setTime){
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 8007ae8:	4b69      	ldr	r3, [pc, #420]	@ (8007c90 <ESP_Upkeep+0x53c>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d02b      	beq.n	8007b48 <ESP_Upkeep+0x3f4>
 8007af0:	4b6f      	ldr	r3, [pc, #444]	@ (8007cb0 <ESP_Upkeep+0x55c>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d027      	beq.n	8007b48 <ESP_Upkeep+0x3f4>
 8007af8:	4b6f      	ldr	r3, [pc, #444]	@ (8007cb8 <ESP_Upkeep+0x564>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d023      	beq.n	8007b48 <ESP_Upkeep+0x3f4>
 8007b00:	4b71      	ldr	r3, [pc, #452]	@ (8007cc8 <ESP_Upkeep+0x574>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01f      	beq.n	8007b48 <ESP_Upkeep+0x3f4>
 8007b08:	4b6d      	ldr	r3, [pc, #436]	@ (8007cc0 <ESP_Upkeep+0x56c>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d01b      	beq.n	8007b48 <ESP_Upkeep+0x3f4>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007b10:	4b70      	ldr	r3, [pc, #448]	@ (8007cd4 <ESP_Upkeep+0x580>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	4b5d      	ldr	r3, [pc, #372]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007b16:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007b18:	4b60      	ldr	r3, [pc, #384]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007b1e:	4b60      	ldr	r3, [pc, #384]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007b24:	4b5f      	ldr	r3, [pc, #380]	@ (8007ca4 <ESP_Upkeep+0x550>)
 8007b26:	2205      	movs	r2, #5
 8007b28:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007b2a:	f00d f8d3 	bl	8014cd4 <HAL_GetTick>
 8007b2e:	0002      	movs	r2, r0
 8007b30:	4b67      	ldr	r3, [pc, #412]	@ (8007cd0 <ESP_Upkeep+0x57c>)
 8007b32:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007b34:	4b5a      	ldr	r3, [pc, #360]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	001a      	movs	r2, r3
 8007b3a:	4b54      	ldr	r3, [pc, #336]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007b3c:	5c9a      	ldrb	r2, [r3, r2]
 8007b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8007ca8 <ESP_Upkeep+0x554>)
 8007b40:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007b42:	4b5a      	ldr	r3, [pc, #360]	@ (8007cac <ESP_Upkeep+0x558>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007b48:	4b63      	ldr	r3, [pc, #396]	@ (8007cd8 <ESP_Upkeep+0x584>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d100      	bne.n	8007b52 <ESP_Upkeep+0x3fe>
 8007b50:	e335      	b.n	80081be <ESP_Upkeep+0xa6a>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007b52:	4b4e      	ldr	r3, [pc, #312]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007b54:	4a61      	ldr	r2, [pc, #388]	@ (8007cdc <ESP_Upkeep+0x588>)
 8007b56:	6811      	ldr	r1, [r2, #0]
 8007b58:	6019      	str	r1, [r3, #0]
 8007b5a:	7912      	ldrb	r2, [r2, #4]
 8007b5c:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 8007b5e:	4a60      	ldr	r2, [pc, #384]	@ (8007ce0 <ESP_Upkeep+0x58c>)
 8007b60:	4b60      	ldr	r3, [pc, #384]	@ (8007ce4 <ESP_Upkeep+0x590>)
 8007b62:	0019      	movs	r1, r3
 8007b64:	2003      	movs	r0, #3
 8007b66:	f00c fb3d 	bl	80141e4 <CreateLine>
        DisableConnectedDevices();
 8007b6a:	f006 fae7 	bl	800e13c <DisableConnectedDevices>
        usblog = false;
 8007b6e:	4b5e      	ldr	r3, [pc, #376]	@ (8007ce8 <ESP_Upkeep+0x594>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007b74:	4b49      	ldr	r3, [pc, #292]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007b76:	2204      	movs	r2, #4
 8007b78:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007b7a:	4b49      	ldr	r3, [pc, #292]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007b80:	4b48      	ldr	r3, [pc, #288]	@ (8007ca4 <ESP_Upkeep+0x550>)
 8007b82:	2203      	movs	r2, #3
 8007b84:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007b86:	4b46      	ldr	r3, [pc, #280]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8007c8c <ESP_Upkeep+0x538>)
 8007b8e:	5c9a      	ldrb	r2, [r3, r2]
 8007b90:	4b45      	ldr	r3, [pc, #276]	@ (8007ca8 <ESP_Upkeep+0x554>)
 8007b92:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007b94:	4b45      	ldr	r3, [pc, #276]	@ (8007cac <ESP_Upkeep+0x558>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007b9a:	e310      	b.n	80081be <ESP_Upkeep+0xa6a>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007b9c:	4b42      	ldr	r3, [pc, #264]	@ (8007ca8 <ESP_Upkeep+0x554>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	1dfc      	adds	r4, r7, #7
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f7ff faae 	bl	8007104 <AT_Send>
 8007ba8:	0003      	movs	r3, r0
 8007baa:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007bac:	1dfb      	adds	r3, r7, #7
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d100      	bne.n	8007bb6 <ESP_Upkeep+0x462>
 8007bb4:	e305      	b.n	80081c2 <ESP_Upkeep+0xa6e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007bb6:	4b39      	ldr	r3, [pc, #228]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007bb8:	2203      	movs	r2, #3
 8007bba:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007bbc:	e301      	b.n	80081c2 <ESP_Upkeep+0xa6e>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007bbe:	4b46      	ldr	r3, [pc, #280]	@ (8007cd8 <ESP_Upkeep+0x584>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d007      	beq.n	8007bd6 <ESP_Upkeep+0x482>
 8007bc6:	4b37      	ldr	r3, [pc, #220]	@ (8007ca4 <ESP_Upkeep+0x550>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d003      	beq.n	8007bd6 <ESP_Upkeep+0x482>
        EspState = ESP_STATE_MODE_SELECT;
 8007bce:	4b33      	ldr	r3, [pc, #204]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007bd0:	220b      	movs	r2, #11
 8007bd2:	701a      	strb	r2, [r3, #0]
        break;
 8007bd4:	e2fc      	b.n	80081d0 <ESP_Upkeep+0xa7c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007bd6:	4b45      	ldr	r3, [pc, #276]	@ (8007cec <ESP_Upkeep+0x598>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f00c faac 	bl	8014138 <TimestampIsReached>
 8007be0:	1e03      	subs	r3, r0, #0
 8007be2:	d100      	bne.n	8007be6 <ESP_Upkeep+0x492>
 8007be4:	e2ef      	b.n	80081c6 <ESP_Upkeep+0xa72>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007be6:	4b31      	ldr	r3, [pc, #196]	@ (8007cac <ESP_Upkeep+0x558>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	0018      	movs	r0, r3
 8007bec:	f7ff f93c 	bl	8006e68 <DMA_ProcessBuffer>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	001a      	movs	r2, r3
 8007bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8007cf0 <ESP_Upkeep+0x59c>)
 8007bf6:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8007cf0 <ESP_Upkeep+0x59c>)
 8007bfa:	781a      	ldrb	r2, [r3, #0]
 8007bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8007cac <ESP_Upkeep+0x558>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	1d7c      	adds	r4, r7, #5
 8007c02:	0019      	movs	r1, r3
 8007c04:	0010      	movs	r0, r2
 8007c06:	f7ff fa2f 	bl	8007068 <ATCompare>
 8007c0a:	0003      	movs	r3, r0
 8007c0c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007c0e:	4b38      	ldr	r3, [pc, #224]	@ (8007cf0 <ESP_Upkeep+0x59c>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d000      	beq.n	8007c18 <ESP_Upkeep+0x4c4>
 8007c16:	e079      	b.n	8007d0c <ESP_Upkeep+0x5b8>
          if(ATCommand == AT_SENDDATA){
 8007c18:	4b23      	ldr	r3, [pc, #140]	@ (8007ca8 <ESP_Upkeep+0x554>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b0f      	cmp	r3, #15
 8007c1e:	d108      	bne.n	8007c32 <ESP_Upkeep+0x4de>
            ATCommand = AT_HTTPCPOST;
 8007c20:	4b21      	ldr	r3, [pc, #132]	@ (8007ca8 <ESP_Upkeep+0x554>)
 8007c22:	220e      	movs	r2, #14
 8007c24:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007c26:	4b21      	ldr	r3, [pc, #132]	@ (8007cac <ESP_Upkeep+0x558>)
 8007c28:	2202      	movs	r2, #2
 8007c2a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca0 <ESP_Upkeep+0x54c>)
 8007c2e:	2201      	movs	r2, #1
 8007c30:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007c32:	4b1a      	ldr	r3, [pc, #104]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007c34:	2204      	movs	r2, #4
 8007c36:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007c38:	4b2e      	ldr	r3, [pc, #184]	@ (8007cf4 <ESP_Upkeep+0x5a0>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	4b2c      	ldr	r3, [pc, #176]	@ (8007cf4 <ESP_Upkeep+0x5a0>)
 8007c42:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007c44:	4b2b      	ldr	r3, [pc, #172]	@ (8007cf4 <ESP_Upkeep+0x5a0>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d95f      	bls.n	8007d0c <ESP_Upkeep+0x5b8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007c4c:	f00d f842 	bl	8014cd4 <HAL_GetTick>
 8007c50:	0003      	movs	r3, r0
 8007c52:	4a29      	ldr	r2, [pc, #164]	@ (8007cf8 <ESP_Upkeep+0x5a4>)
 8007c54:	189a      	adds	r2, r3, r2
 8007c56:	4b25      	ldr	r3, [pc, #148]	@ (8007cec <ESP_Upkeep+0x598>)
 8007c58:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007c5a:	4b28      	ldr	r3, [pc, #160]	@ (8007cfc <ESP_Upkeep+0x5a8>)
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007c60:	f7ff f9f4 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007c64:	f00d f836 	bl	8014cd4 <HAL_GetTick>
 8007c68:	0002      	movs	r2, r0
 8007c6a:	4b25      	ldr	r3, [pc, #148]	@ (8007d00 <ESP_Upkeep+0x5ac>)
 8007c6c:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007c6e:	4b24      	ldr	r3, [pc, #144]	@ (8007d00 <ESP_Upkeep+0x5ac>)
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b17      	ldr	r3, [pc, #92]	@ (8007cd0 <ESP_Upkeep+0x57c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	4a22      	ldr	r2, [pc, #136]	@ (8007d04 <ESP_Upkeep+0x5b0>)
 8007c7a:	4923      	ldr	r1, [pc, #140]	@ (8007d08 <ESP_Upkeep+0x5b4>)
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	f00c fab1 	bl	80141e4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007c82:	4b06      	ldr	r3, [pc, #24]	@ (8007c9c <ESP_Upkeep+0x548>)
 8007c84:	220d      	movs	r2, #13
 8007c86:	701a      	strb	r2, [r3, #0]
            break;
 8007c88:	e2a2      	b.n	80081d0 <ESP_Upkeep+0xa7c>
 8007c8a:	46c0      	nop			@ (mov r8, r8)
 8007c8c:	20000694 	.word	0x20000694
 8007c90:	200005ad 	.word	0x200005ad
 8007c94:	200005ae 	.word	0x200005ae
 8007c98:	20000004 	.word	0x20000004
 8007c9c:	20000030 	.word	0x20000030
 8007ca0:	2000069e 	.word	0x2000069e
 8007ca4:	20000712 	.word	0x20000712
 8007ca8:	20000711 	.word	0x20000711
 8007cac:	20000710 	.word	0x20000710
 8007cb0:	200005b0 	.word	0x200005b0
 8007cb4:	20000014 	.word	0x20000014
 8007cb8:	200005b1 	.word	0x200005b1
 8007cbc:	20000010 	.word	0x20000010
 8007cc0:	20001114 	.word	0x20001114
 8007cc4:	20000028 	.word	0x20000028
 8007cc8:	20000002 	.word	0x20000002
 8007ccc:	2000000c 	.word	0x2000000c
 8007cd0:	200005c0 	.word	0x200005c0
 8007cd4:	20000024 	.word	0x20000024
 8007cd8:	200005af 	.word	0x200005af
 8007cdc:	2000001c 	.word	0x2000001c
 8007ce0:	0802b8b0 	.word	0x0802b8b0
 8007ce4:	0802ad1c 	.word	0x0802ad1c
 8007ce8:	20001113 	.word	0x20001113
 8007cec:	200006a4 	.word	0x200006a4
 8007cf0:	20000034 	.word	0x20000034
 8007cf4:	2000069f 	.word	0x2000069f
 8007cf8:	0003a980 	.word	0x0003a980
 8007cfc:	200005b3 	.word	0x200005b3
 8007d00:	200005c4 	.word	0x200005c4
 8007d04:	0802b8e0 	.word	0x0802b8e0
 8007d08:	0802acb8 	.word	0x0802acb8
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007d0c:	4bb6      	ldr	r3, [pc, #728]	@ (8007fe8 <ESP_Upkeep+0x894>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d106      	bne.n	8007d22 <ESP_Upkeep+0x5ce>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007d14:	f00c ffde 	bl	8014cd4 <HAL_GetTick>
 8007d18:	0003      	movs	r3, r0
 8007d1a:	330a      	adds	r3, #10
 8007d1c:	001a      	movs	r2, r3
 8007d1e:	4bb3      	ldr	r3, [pc, #716]	@ (8007fec <ESP_Upkeep+0x898>)
 8007d20:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007d22:	4bb1      	ldr	r3, [pc, #708]	@ (8007fe8 <ESP_Upkeep+0x894>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b0a      	cmp	r3, #10
 8007d28:	d106      	bne.n	8007d38 <ESP_Upkeep+0x5e4>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007d2a:	f00c ffd3 	bl	8014cd4 <HAL_GetTick>
 8007d2e:	0003      	movs	r3, r0
 8007d30:	330a      	adds	r3, #10
 8007d32:	001a      	movs	r2, r3
 8007d34:	4bad      	ldr	r3, [pc, #692]	@ (8007fec <ESP_Upkeep+0x898>)
 8007d36:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007d38:	4bab      	ldr	r3, [pc, #684]	@ (8007fe8 <ESP_Upkeep+0x894>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b06      	cmp	r3, #6
 8007d3e:	d14b      	bne.n	8007dd8 <ESP_Upkeep+0x684>
          timeoutcntr++;
 8007d40:	4bab      	ldr	r3, [pc, #684]	@ (8007ff0 <ESP_Upkeep+0x89c>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	4ba9      	ldr	r3, [pc, #676]	@ (8007ff0 <ESP_Upkeep+0x89c>)
 8007d4a:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007d4c:	4aa9      	ldr	r2, [pc, #676]	@ (8007ff4 <ESP_Upkeep+0x8a0>)
 8007d4e:	4baa      	ldr	r3, [pc, #680]	@ (8007ff8 <ESP_Upkeep+0x8a4>)
 8007d50:	0019      	movs	r1, r3
 8007d52:	2001      	movs	r0, #1
 8007d54:	f00c fa46 	bl	80141e4 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007d58:	4ba5      	ldr	r3, [pc, #660]	@ (8007ff0 <ESP_Upkeep+0x89c>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d924      	bls.n	8007daa <ESP_Upkeep+0x656>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007d60:	f00c ffb8 	bl	8014cd4 <HAL_GetTick>
 8007d64:	0003      	movs	r3, r0
 8007d66:	4aa5      	ldr	r2, [pc, #660]	@ (8007ffc <ESP_Upkeep+0x8a8>)
 8007d68:	189a      	adds	r2, r3, r2
 8007d6a:	4ba0      	ldr	r3, [pc, #640]	@ (8007fec <ESP_Upkeep+0x898>)
 8007d6c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007d6e:	4ba4      	ldr	r3, [pc, #656]	@ (8008000 <ESP_Upkeep+0x8ac>)
 8007d70:	2201      	movs	r2, #1
 8007d72:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007d74:	f7ff f96a 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007d78:	f00c ffac 	bl	8014cd4 <HAL_GetTick>
 8007d7c:	0002      	movs	r2, r0
 8007d7e:	4ba1      	ldr	r3, [pc, #644]	@ (8008004 <ESP_Upkeep+0x8b0>)
 8007d80:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007d82:	4ba0      	ldr	r3, [pc, #640]	@ (8008004 <ESP_Upkeep+0x8b0>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	4ba0      	ldr	r3, [pc, #640]	@ (8008008 <ESP_Upkeep+0x8b4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	4a9f      	ldr	r2, [pc, #636]	@ (800800c <ESP_Upkeep+0x8b8>)
 8007d8e:	499a      	ldr	r1, [pc, #616]	@ (8007ff8 <ESP_Upkeep+0x8a4>)
 8007d90:	2001      	movs	r0, #1
 8007d92:	f00c fa27 	bl	80141e4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007d96:	4b9e      	ldr	r3, [pc, #632]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007d98:	220d      	movs	r2, #13
 8007d9a:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007d9c:	4b9d      	ldr	r3, [pc, #628]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007d9e:	2216      	movs	r2, #22
 8007da0:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007da2:	4b9d      	ldr	r3, [pc, #628]	@ (8008018 <ESP_Upkeep+0x8c4>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	701a      	strb	r2, [r3, #0]
            break;
 8007da8:	e212      	b.n	80081d0 <ESP_Upkeep+0xa7c>
          }
          if(ATCommand != AT_SENDDATA){
 8007daa:	4b9a      	ldr	r3, [pc, #616]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b0f      	cmp	r3, #15
 8007db0:	d003      	beq.n	8007dba <ESP_Upkeep+0x666>
            EspState = ESP_STATE_SEND;
 8007db2:	4b97      	ldr	r3, [pc, #604]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007db4:	2204      	movs	r2, #4
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e00e      	b.n	8007dd8 <ESP_Upkeep+0x684>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007dba:	4b96      	ldr	r3, [pc, #600]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007dbc:	220e      	movs	r2, #14
 8007dbe:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007dc0:	4b96      	ldr	r3, [pc, #600]	@ (800801c <ESP_Upkeep+0x8c8>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	4b94      	ldr	r3, [pc, #592]	@ (800801c <ESP_Upkeep+0x8c8>)
 8007dca:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007dcc:	4b92      	ldr	r3, [pc, #584]	@ (8008018 <ESP_Upkeep+0x8c4>)
 8007dce:	2202      	movs	r2, #2
 8007dd0:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007dd8:	1d7b      	adds	r3, r7, #5
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d100      	bne.n	8007de2 <ESP_Upkeep+0x68e>
 8007de0:	e1f1      	b.n	80081c6 <ESP_Upkeep+0xa72>
          EspState = ESP_STATE_NEXT_AT;
 8007de2:	4b8b      	ldr	r3, [pc, #556]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007de4:	2205      	movs	r2, #5
 8007de6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007de8:	e1ed      	b.n	80081c6 <ESP_Upkeep+0xa72>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007dea:	4b8c      	ldr	r3, [pc, #560]	@ (800801c <ESP_Upkeep+0x8c8>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	4b8a      	ldr	r3, [pc, #552]	@ (800801c <ESP_Upkeep+0x8c8>)
 8007df4:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007df6:	4b89      	ldr	r3, [pc, #548]	@ (800801c <ESP_Upkeep+0x8c8>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	001a      	movs	r2, r3
 8007dfc:	4b88      	ldr	r3, [pc, #544]	@ (8008020 <ESP_Upkeep+0x8cc>)
 8007dfe:	5c9a      	ldrb	r2, [r3, r2]
 8007e00:	4b84      	ldr	r3, [pc, #528]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007e02:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007e04:	4b83      	ldr	r3, [pc, #524]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d102      	bne.n	8007e12 <ESP_Upkeep+0x6be>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007e0c:	4b82      	ldr	r3, [pc, #520]	@ (8008018 <ESP_Upkeep+0x8c4>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007e12:	4b80      	ldr	r3, [pc, #512]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b0e      	cmp	r3, #14
 8007e18:	d102      	bne.n	8007e20 <ESP_Upkeep+0x6cc>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007e1a:	4b7f      	ldr	r3, [pc, #508]	@ (8008018 <ESP_Upkeep+0x8c4>)
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007e20:	4b7c      	ldr	r3, [pc, #496]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b0e      	cmp	r3, #14
 8007e26:	d006      	beq.n	8007e36 <ESP_Upkeep+0x6e2>
 8007e28:	4b7a      	ldr	r3, [pc, #488]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d002      	beq.n	8007e36 <ESP_Upkeep+0x6e2>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007e30:	4b79      	ldr	r3, [pc, #484]	@ (8008018 <ESP_Upkeep+0x8c4>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007e36:	4b77      	ldr	r3, [pc, #476]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b11      	cmp	r3, #17
 8007e3c:	d102      	bne.n	8007e44 <ESP_Upkeep+0x6f0>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007e3e:	4b76      	ldr	r3, [pc, #472]	@ (8008018 <ESP_Upkeep+0x8c4>)
 8007e40:	2205      	movs	r2, #5
 8007e42:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007e44:	4b73      	ldr	r3, [pc, #460]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b15      	cmp	r3, #21
 8007e4a:	d102      	bne.n	8007e52 <ESP_Upkeep+0x6fe>
         ATExpectation = RECEIVE_EXPECTATION_MAIL_API;
 8007e4c:	4b72      	ldr	r3, [pc, #456]	@ (8008018 <ESP_Upkeep+0x8c4>)
 8007e4e:	2206      	movs	r2, #6
 8007e50:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007e52:	4b6f      	ldr	r3, [pc, #444]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007e54:	2204      	movs	r2, #4
 8007e56:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007e58:	4b6e      	ldr	r3, [pc, #440]	@ (8008014 <ESP_Upkeep+0x8c0>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	2b16      	cmp	r3, #22
 8007e5e:	d000      	beq.n	8007e62 <ESP_Upkeep+0x70e>
 8007e60:	e1b3      	b.n	80081ca <ESP_Upkeep+0xa76>
        if(Mode == AT_MODE_SEND){
 8007e62:	4b70      	ldr	r3, [pc, #448]	@ (8008024 <ESP_Upkeep+0x8d0>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d124      	bne.n	8007eb4 <ESP_Upkeep+0x760>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007e6a:	f00c ff33 	bl	8014cd4 <HAL_GetTick>
 8007e6e:	0003      	movs	r3, r0
 8007e70:	4a6d      	ldr	r2, [pc, #436]	@ (8008028 <ESP_Upkeep+0x8d4>)
 8007e72:	189a      	adds	r2, r3, r2
 8007e74:	4b5d      	ldr	r3, [pc, #372]	@ (8007fec <ESP_Upkeep+0x898>)
 8007e76:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007e78:	f7ff f8e8 	bl	800704c <clearDMABuffer>
          stop = HAL_GetTick();
 8007e7c:	f00c ff2a 	bl	8014cd4 <HAL_GetTick>
 8007e80:	0002      	movs	r2, r0
 8007e82:	4b60      	ldr	r3, [pc, #384]	@ (8008004 <ESP_Upkeep+0x8b0>)
 8007e84:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007e86:	4b5f      	ldr	r3, [pc, #380]	@ (8008004 <ESP_Upkeep+0x8b0>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8008008 <ESP_Upkeep+0x8b4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	4a66      	ldr	r2, [pc, #408]	@ (800802c <ESP_Upkeep+0x8d8>)
 8007e92:	4967      	ldr	r1, [pc, #412]	@ (8008030 <ESP_Upkeep+0x8dc>)
 8007e94:	2002      	movs	r0, #2
 8007e96:	f00c f9a5 	bl	80141e4 <CreateLine>
          ResetdBAmax();
 8007e9a:	f006 f9d7 	bl	800e24c <ResetdBAmax>
          resetMaxMeasurementValues();
 8007e9e:	f7fc ffa7 	bl	8004df0 <resetMaxMeasurementValues>
          showTime();
 8007ea2:	f001 fff3 	bl	8009e8c <showTime>
          ESPTransmitDone = true;
 8007ea6:	4b56      	ldr	r3, [pc, #344]	@ (8008000 <ESP_Upkeep+0x8ac>)
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007eac:	4b58      	ldr	r3, [pc, #352]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007eae:	220d      	movs	r2, #13
 8007eb0:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007eb2:	e18a      	b.n	80081ca <ESP_Upkeep+0xa76>
        else if (Mode == AT_MODE_GETTIME) {
 8007eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8008024 <ESP_Upkeep+0x8d0>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b05      	cmp	r3, #5
 8007eba:	d13a      	bne.n	8007f32 <ESP_Upkeep+0x7de>
            setTime = false;
 8007ebc:	4b5d      	ldr	r3, [pc, #372]	@ (8008034 <ESP_Upkeep+0x8e0>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007ec2:	f002 f883 	bl	8009fcc <calculateNextNTPTime>
 8007ec6:	0002      	movs	r2, r0
 8007ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8008038 <ESP_Upkeep+0x8e4>)
 8007eca:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8008038 <ESP_Upkeep+0x8e4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a5a      	ldr	r2, [pc, #360]	@ (800803c <ESP_Upkeep+0x8e8>)
 8007ed2:	189a      	adds	r2, r3, r2
 8007ed4:	4b58      	ldr	r3, [pc, #352]	@ (8008038 <ESP_Upkeep+0x8e4>)
 8007ed6:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007ed8:	4b58      	ldr	r3, [pc, #352]	@ (800803c <ESP_Upkeep+0x8e8>)
 8007eda:	4a59      	ldr	r2, [pc, #356]	@ (8008040 <ESP_Upkeep+0x8ec>)
 8007edc:	4954      	ldr	r1, [pc, #336]	@ (8008030 <ESP_Upkeep+0x8dc>)
 8007ede:	2002      	movs	r0, #2
 8007ee0:	f00c f980 	bl	80141e4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007ee4:	4b57      	ldr	r3, [pc, #348]	@ (8008044 <ESP_Upkeep+0x8f0>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	4b40      	ldr	r3, [pc, #256]	@ (8007fec <ESP_Upkeep+0x898>)
 8007eea:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007eec:	f7ff f8ae 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007ef0:	f00c fef0 	bl	8014cd4 <HAL_GetTick>
 8007ef4:	0002      	movs	r2, r0
 8007ef6:	4b43      	ldr	r3, [pc, #268]	@ (8008004 <ESP_Upkeep+0x8b0>)
 8007ef8:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007efa:	4b42      	ldr	r3, [pc, #264]	@ (8008004 <ESP_Upkeep+0x8b0>)
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b42      	ldr	r3, [pc, #264]	@ (8008008 <ESP_Upkeep+0x8b4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	4a50      	ldr	r2, [pc, #320]	@ (8008048 <ESP_Upkeep+0x8f4>)
 8007f06:	494a      	ldr	r1, [pc, #296]	@ (8008030 <ESP_Upkeep+0x8dc>)
 8007f08:	2002      	movs	r0, #2
 8007f0a:	f00c f96b 	bl	80141e4 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007f0e:	f00c fee1 	bl	8014cd4 <HAL_GetTick>
 8007f12:	0003      	movs	r3, r0
 8007f14:	4a4d      	ldr	r2, [pc, #308]	@ (800804c <ESP_Upkeep+0x8f8>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d804      	bhi.n	8007f24 <ESP_Upkeep+0x7d0>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8008050 <ESP_Upkeep+0x8fc>)
 8007f1c:	4a4d      	ldr	r2, [pc, #308]	@ (8008054 <ESP_Upkeep+0x900>)
 8007f1e:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007f20:	f006 f886 	bl	800e030 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007f24:	4b3a      	ldr	r3, [pc, #232]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007f26:	220d      	movs	r2, #13
 8007f28:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8008024 <ESP_Upkeep+0x8d0>)
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	701a      	strb	r2, [r3, #0]
    break;
 8007f30:	e14b      	b.n	80081ca <ESP_Upkeep+0xa76>
        else if (Mode == AT_MODE_MAIL) {
 8007f32:	4b3c      	ldr	r3, [pc, #240]	@ (8008024 <ESP_Upkeep+0x8d0>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b06      	cmp	r3, #6
 8007f38:	d117      	bne.n	8007f6a <ESP_Upkeep+0x816>
            clearDMABuffer();
 8007f3a:	f7ff f887 	bl	800704c <clearDMABuffer>
            Info("Email message send");
 8007f3e:	4a46      	ldr	r2, [pc, #280]	@ (8008058 <ESP_Upkeep+0x904>)
 8007f40:	4b3b      	ldr	r3, [pc, #236]	@ (8008030 <ESP_Upkeep+0x8dc>)
 8007f42:	0019      	movs	r1, r3
 8007f44:	2002      	movs	r0, #2
 8007f46:	f00c f94d 	bl	80141e4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8008044 <ESP_Upkeep+0x8f0>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	4b27      	ldr	r3, [pc, #156]	@ (8007fec <ESP_Upkeep+0x898>)
 8007f50:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007f52:	4b42      	ldr	r3, [pc, #264]	@ (800805c <ESP_Upkeep+0x908>)
 8007f54:	2202      	movs	r2, #2
 8007f56:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007f58:	4b2d      	ldr	r3, [pc, #180]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007f5a:	220d      	movs	r2, #13
 8007f5c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007f5e:	4b31      	ldr	r3, [pc, #196]	@ (8008024 <ESP_Upkeep+0x8d0>)
 8007f60:	2202      	movs	r2, #2
 8007f62:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007f64:	f006 f864 	bl	800e030 <EnabledConnectedDevices>
    break;
 8007f68:	e12f      	b.n	80081ca <ESP_Upkeep+0xa76>
          EspState = ESP_STATE_RESET;
 8007f6a:	4b29      	ldr	r3, [pc, #164]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007f6c:	2209      	movs	r2, #9
 8007f6e:	701a      	strb	r2, [r3, #0]
    break;
 8007f70:	e12b      	b.n	80081ca <ESP_Upkeep+0xa76>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007f72:	4b3b      	ldr	r3, [pc, #236]	@ (8008060 <ESP_Upkeep+0x90c>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007f78:	4b3a      	ldr	r3, [pc, #232]	@ (8008064 <ESP_Upkeep+0x910>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f00e f939 	bl	80161f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007f84:	2001      	movs	r0, #1
 8007f86:	f00c feaf 	bl	8014ce8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007f8a:	2380      	movs	r3, #128	@ 0x80
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	4836      	ldr	r0, [pc, #216]	@ (8008068 <ESP_Upkeep+0x914>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	0019      	movs	r1, r3
 8007f94:	f00e f92f 	bl	80161f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007f98:	2001      	movs	r0, #1
 8007f9a:	f00c fea5 	bl	8014ce8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007f9e:	4b31      	ldr	r3, [pc, #196]	@ (8008064 <ESP_Upkeep+0x910>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2102      	movs	r1, #2
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f00e f926 	bl	80161f6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007faa:	4b19      	ldr	r3, [pc, #100]	@ (8008010 <ESP_Upkeep+0x8bc>)
 8007fac:	2209      	movs	r2, #9
 8007fae:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	f00c fe99 	bl	8014ce8 <HAL_Delay>
      ResetESPIndicator();
 8007fb6:	f00a ff17 	bl	8012de8 <ResetESPIndicator>
      Debug("ESP powered off.");
 8007fba:	4a2c      	ldr	r2, [pc, #176]	@ (800806c <ESP_Upkeep+0x918>)
 8007fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8008070 <ESP_Upkeep+0x91c>)
 8007fbe:	0019      	movs	r1, r3
 8007fc0:	2003      	movs	r0, #3
 8007fc2:	f00c f90f 	bl	80141e4 <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007fc6:	f001 feaf 	bl	8009d28 <Check_USB_PowerOn>
 8007fca:	1e03      	subs	r3, r0, #0
 8007fcc:	d103      	bne.n	8007fd6 <ESP_Upkeep+0x882>
 8007fce:	4b29      	ldr	r3, [pc, #164]	@ (8008074 <ESP_Upkeep+0x920>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <ESP_Upkeep+0x886>
        EnabledConnectedDevices();
 8007fd6:	f006 f82b 	bl	800e030 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007fda:	4b27      	ldr	r3, [pc, #156]	@ (8008078 <ESP_Upkeep+0x924>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007fe0:	4b03      	ldr	r3, [pc, #12]	@ (8007ff0 <ESP_Upkeep+0x89c>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
      break;
 8007fe6:	e0f3      	b.n	80081d0 <ESP_Upkeep+0xa7c>
 8007fe8:	20000034 	.word	0x20000034
 8007fec:	200006a4 	.word	0x200006a4
 8007ff0:	200006a0 	.word	0x200006a0
 8007ff4:	0802b914 	.word	0x0802b914
 8007ff8:	0802acb8 	.word	0x0802acb8
 8007ffc:	0000c350 	.word	0x0000c350
 8008000:	200005b3 	.word	0x200005b3
 8008004:	200005c4 	.word	0x200005c4
 8008008:	200005c0 	.word	0x200005c0
 800800c:	0802b950 	.word	0x0802b950
 8008010:	20000030 	.word	0x20000030
 8008014:	20000711 	.word	0x20000711
 8008018:	20000710 	.word	0x20000710
 800801c:	2000069e 	.word	0x2000069e
 8008020:	20000694 	.word	0x20000694
 8008024:	20000712 	.word	0x20000712
 8008028:	0003a980 	.word	0x0003a980
 800802c:	0802b980 	.word	0x0802b980
 8008030:	0802accc 	.word	0x0802accc
 8008034:	20000002 	.word	0x20000002
 8008038:	200006a8 	.word	0x200006a8
 800803c:	00012686 	.word	0x00012686
 8008040:	0802b998 	.word	0x0802b998
 8008044:	2000002c 	.word	0x2000002c
 8008048:	0802b9dc 	.word	0x0802b9dc
 800804c:	000061a7 	.word	0x000061a7
 8008050:	20001128 	.word	0x20001128
 8008054:	000061a8 	.word	0x000061a8
 8008058:	0802b9fc 	.word	0x0802b9fc
 800805c:	20001114 	.word	0x20001114
 8008060:	200005ac 	.word	0x200005ac
 8008064:	50001c00 	.word	0x50001c00
 8008068:	50000800 	.word	0x50000800
 800806c:	0802ba10 	.word	0x0802ba10
 8008070:	0802ad1c 	.word	0x0802ad1c
 8008074:	20002166 	.word	0x20002166
 8008078:	2000069f 	.word	0x2000069f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 800807c:	4b57      	ldr	r3, [pc, #348]	@ (80081dc <ESP_Upkeep+0xa88>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	0018      	movs	r0, r3
 8008082:	f00c f859 	bl	8014138 <TimestampIsReached>
 8008086:	1e03      	subs	r3, r0, #0
 8008088:	d103      	bne.n	8008092 <ESP_Upkeep+0x93e>
 800808a:	4b55      	ldr	r3, [pc, #340]	@ (80081e0 <ESP_Upkeep+0xa8c>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d047      	beq.n	8008122 <ESP_Upkeep+0x9ce>
        ESPTransmitDone = false;
 8008092:	4b54      	ldr	r3, [pc, #336]	@ (80081e4 <ESP_Upkeep+0xa90>)
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8008098:	4b53      	ldr	r3, [pc, #332]	@ (80081e8 <ESP_Upkeep+0xa94>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d105      	bne.n	80080ac <ESP_Upkeep+0x958>
          InitIsDone = true;
 80080a0:	4b52      	ldr	r3, [pc, #328]	@ (80081ec <ESP_Upkeep+0xa98>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80080a6:	4b52      	ldr	r3, [pc, #328]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 80080a8:	220b      	movs	r2, #11
 80080aa:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 80080ac:	4b4e      	ldr	r3, [pc, #312]	@ (80081e8 <ESP_Upkeep+0xa94>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d105      	bne.n	80080c0 <ESP_Upkeep+0x96c>
          ConnectionMade = true;
 80080b4:	4b4f      	ldr	r3, [pc, #316]	@ (80081f4 <ESP_Upkeep+0xaa0>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80080ba:	4b4d      	ldr	r3, [pc, #308]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 80080bc:	220b      	movs	r2, #11
 80080be:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 80080c0:	4b49      	ldr	r3, [pc, #292]	@ (80081e8 <ESP_Upkeep+0xa94>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d102      	bne.n	80080ce <ESP_Upkeep+0x97a>
          EspState = ESP_STATE_INIT;
 80080c8:	4b49      	ldr	r3, [pc, #292]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 80080ca:	2202      	movs	r2, #2
 80080cc:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if(Mode == AT_MODE_MAIL){
 80080ce:	4b46      	ldr	r3, [pc, #280]	@ (80081e8 <ESP_Upkeep+0xa94>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b06      	cmp	r3, #6
 80080d4:	d102      	bne.n	80080dc <ESP_Upkeep+0x988>
          EspState = ESP_STATE_CONFIG;
 80080d6:	4b46      	ldr	r3, [pc, #280]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 80080d8:	220e      	movs	r2, #14
 80080da:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 80080dc:	4b42      	ldr	r3, [pc, #264]	@ (80081e8 <ESP_Upkeep+0xa94>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d108      	bne.n	80080f6 <ESP_Upkeep+0x9a2>
          EspState = ESP_STATE_CONFIG;
 80080e4:	4b42      	ldr	r3, [pc, #264]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 80080e6:	220e      	movs	r2, #14
 80080e8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 80080ea:	4a43      	ldr	r2, [pc, #268]	@ (80081f8 <ESP_Upkeep+0xaa4>)
 80080ec:	4b43      	ldr	r3, [pc, #268]	@ (80081fc <ESP_Upkeep+0xaa8>)
 80080ee:	0019      	movs	r1, r3
 80080f0:	2002      	movs	r0, #2
 80080f2:	f00c f877 	bl	80141e4 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 80080f6:	4b3c      	ldr	r3, [pc, #240]	@ (80081e8 <ESP_Upkeep+0xa94>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	d105      	bne.n	800810a <ESP_Upkeep+0x9b6>
          EspState = ESP_STATE_MODE_SELECT;
 80080fe:	4b3c      	ldr	r3, [pc, #240]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 8008100:	220b      	movs	r2, #11
 8008102:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 8008104:	4b3e      	ldr	r3, [pc, #248]	@ (8008200 <ESP_Upkeep+0xaac>)
 8008106:	2201      	movs	r2, #1
 8008108:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800810a:	4b35      	ldr	r3, [pc, #212]	@ (80081e0 <ESP_Upkeep+0xa8c>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d020      	beq.n	8008154 <ESP_Upkeep+0xa00>
 8008112:	4b35      	ldr	r3, [pc, #212]	@ (80081e8 <ESP_Upkeep+0xa94>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d01c      	beq.n	8008154 <ESP_Upkeep+0xa00>
          EspState = ESP_STATE_INIT;
 800811a:	4b35      	ldr	r3, [pc, #212]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 800811c:	2202      	movs	r2, #2
 800811e:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008120:	e018      	b.n	8008154 <ESP_Upkeep+0xa00>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8008122:	f001 ff53 	bl	8009fcc <calculateNextNTPTime>
 8008126:	0002      	movs	r2, r0
 8008128:	4b36      	ldr	r3, [pc, #216]	@ (8008204 <ESP_Upkeep+0xab0>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d94e      	bls.n	80081ce <ESP_Upkeep+0xa7a>
        if(Mode == AT_MODE_SEND ) {
 8008130:	4b2d      	ldr	r3, [pc, #180]	@ (80081e8 <ESP_Upkeep+0xa94>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b02      	cmp	r3, #2
 8008136:	d14a      	bne.n	80081ce <ESP_Upkeep+0xa7a>
           Mode = AT_MODE_GETTIME;
 8008138:	4b2b      	ldr	r3, [pc, #172]	@ (80081e8 <ESP_Upkeep+0xa94>)
 800813a:	2205      	movs	r2, #5
 800813c:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 800813e:	4b2c      	ldr	r3, [pc, #176]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 8008140:	2202      	movs	r2, #2
 8008142:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8008144:	4b25      	ldr	r3, [pc, #148]	@ (80081dc <ESP_Upkeep+0xa88>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	4b2f      	ldr	r3, [pc, #188]	@ (8008208 <ESP_Upkeep+0xab4>)
 800814a:	601a      	str	r2, [r3, #0]
           setTime = true;
 800814c:	4b2f      	ldr	r3, [pc, #188]	@ (800820c <ESP_Upkeep+0xab8>)
 800814e:	2201      	movs	r2, #1
 8008150:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8008152:	e03c      	b.n	80081ce <ESP_Upkeep+0xa7a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008154:	46c0      	nop			@ (mov r8, r8)
      break;
 8008156:	e03a      	b.n	80081ce <ESP_Upkeep+0xa7a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8008158:	4b2d      	ldr	r3, [pc, #180]	@ (8008210 <ESP_Upkeep+0xabc>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2201      	movs	r2, #1
 800815e:	4053      	eors	r3, r2
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d008      	beq.n	8008178 <ESP_Upkeep+0xa24>
        Info("Do nothing until reset");
 8008166:	4a24      	ldr	r2, [pc, #144]	@ (80081f8 <ESP_Upkeep+0xaa4>)
 8008168:	4b24      	ldr	r3, [pc, #144]	@ (80081fc <ESP_Upkeep+0xaa8>)
 800816a:	0019      	movs	r1, r3
 800816c:	2002      	movs	r0, #2
 800816e:	f00c f839 	bl	80141e4 <CreateLine>
        msgdone = true;
 8008172:	4b27      	ldr	r3, [pc, #156]	@ (8008210 <ESP_Upkeep+0xabc>)
 8008174:	2201      	movs	r2, #1
 8008176:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8008178:	f01b f924 	bl	80233c4 <GetUsbRxPointer>
 800817c:	0003      	movs	r3, r0
 800817e:	0018      	movs	r0, r3
 8008180:	f000 f97e 	bl	8008480 <Process_PC_Config>
      break;
 8008184:	e024      	b.n	80081d0 <ESP_Upkeep+0xa7c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8008186:	4a23      	ldr	r2, [pc, #140]	@ (8008214 <ESP_Upkeep+0xac0>)
 8008188:	4b23      	ldr	r3, [pc, #140]	@ (8008218 <ESP_Upkeep+0xac4>)
 800818a:	0019      	movs	r1, r3
 800818c:	2001      	movs	r0, #1
 800818e:	f00c f829 	bl	80141e4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8008192:	4b17      	ldr	r3, [pc, #92]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 8008194:	2202      	movs	r2, #2
 8008196:	701a      	strb	r2, [r3, #0]
      break;
 8008198:	e01a      	b.n	80081d0 <ESP_Upkeep+0xa7c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 800819a:	4a20      	ldr	r2, [pc, #128]	@ (800821c <ESP_Upkeep+0xac8>)
 800819c:	4b1e      	ldr	r3, [pc, #120]	@ (8008218 <ESP_Upkeep+0xac4>)
 800819e:	0019      	movs	r1, r3
 80081a0:	2001      	movs	r0, #1
 80081a2:	f00c f81f 	bl	80141e4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 80081a6:	4b12      	ldr	r3, [pc, #72]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 80081a8:	2207      	movs	r2, #7
 80081aa:	701a      	strb	r2, [r3, #0]
      break;
 80081ac:	e010      	b.n	80081d0 <ESP_Upkeep+0xa7c>
      break;
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	e00e      	b.n	80081d0 <ESP_Upkeep+0xa7c>
        break;
 80081b2:	46c0      	nop			@ (mov r8, r8)
 80081b4:	e00c      	b.n	80081d0 <ESP_Upkeep+0xa7c>
      break;
 80081b6:	46c0      	nop			@ (mov r8, r8)
 80081b8:	e00a      	b.n	80081d0 <ESP_Upkeep+0xa7c>
        break;
 80081ba:	46c0      	nop			@ (mov r8, r8)
 80081bc:	e008      	b.n	80081d0 <ESP_Upkeep+0xa7c>
    break;
 80081be:	46c0      	nop			@ (mov r8, r8)
 80081c0:	e006      	b.n	80081d0 <ESP_Upkeep+0xa7c>
    break;
 80081c2:	46c0      	nop			@ (mov r8, r8)
 80081c4:	e004      	b.n	80081d0 <ESP_Upkeep+0xa7c>
      break;
 80081c6:	46c0      	nop			@ (mov r8, r8)
 80081c8:	e002      	b.n	80081d0 <ESP_Upkeep+0xa7c>
    break;
 80081ca:	46c0      	nop			@ (mov r8, r8)
 80081cc:	e000      	b.n	80081d0 <ESP_Upkeep+0xa7c>
      break;
 80081ce:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 80081d0:	4b07      	ldr	r3, [pc, #28]	@ (80081f0 <ESP_Upkeep+0xa9c>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
}
 80081d4:	0018      	movs	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	b002      	add	sp, #8
 80081da:	bdb0      	pop	{r4, r5, r7, pc}
 80081dc:	200006a4 	.word	0x200006a4
 80081e0:	200005af 	.word	0x200005af
 80081e4:	200005b3 	.word	0x200005b3
 80081e8:	20000712 	.word	0x20000712
 80081ec:	200005ad 	.word	0x200005ad
 80081f0:	20000030 	.word	0x20000030
 80081f4:	200005b0 	.word	0x200005b0
 80081f8:	0802ba24 	.word	0x0802ba24
 80081fc:	0802accc 	.word	0x0802accc
 8008200:	200005b1 	.word	0x200005b1
 8008204:	200006a8 	.word	0x200006a8
 8008208:	2000002c 	.word	0x2000002c
 800820c:	20000002 	.word	0x20000002
 8008210:	200005b2 	.word	0x200005b2
 8008214:	0802ba3c 	.word	0x0802ba3c
 8008218:	0802acb8 	.word	0x0802acb8
 800821c:	0802ba50 	.word	0x0802ba50

08008220 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8008228:	4b12      	ldr	r3, [pc, #72]	@ (8008274 <I2CSensors_Init+0x54>)
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 800822e:	4a12      	ldr	r2, [pc, #72]	@ (8008278 <I2CSensors_Init+0x58>)
 8008230:	4b12      	ldr	r3, [pc, #72]	@ (800827c <I2CSensors_Init+0x5c>)
 8008232:	0011      	movs	r1, r2
 8008234:	0018      	movs	r0, r3
 8008236:	f00c fa0b 	bl	8014650 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 800823a:	4a0f      	ldr	r2, [pc, #60]	@ (8008278 <I2CSensors_Init+0x58>)
 800823c:	4b0f      	ldr	r3, [pc, #60]	@ (800827c <I2CSensors_Init+0x5c>)
 800823e:	0011      	movs	r1, r2
 8008240:	0018      	movs	r0, r3
 8008242:	f008 ff8b 	bl	801115c <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8008246:	4a0e      	ldr	r2, [pc, #56]	@ (8008280 <I2CSensors_Init+0x60>)
 8008248:	490b      	ldr	r1, [pc, #44]	@ (8008278 <I2CSensors_Init+0x58>)
 800824a:	4b0c      	ldr	r3, [pc, #48]	@ (800827c <I2CSensors_Init+0x5c>)
 800824c:	0018      	movs	r0, r3
 800824e:	f002 fed1 	bl	800aff4 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8008252:	4a0c      	ldr	r2, [pc, #48]	@ (8008284 <I2CSensors_Init+0x64>)
 8008254:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <I2CSensors_Init+0x68>)
 8008256:	0011      	movs	r1, r2
 8008258:	0018      	movs	r0, r3
 800825a:	f003 fcdb 	bl	800bc14 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 800825e:	4a09      	ldr	r2, [pc, #36]	@ (8008284 <I2CSensors_Init+0x64>)
 8008260:	4b09      	ldr	r3, [pc, #36]	@ (8008288 <I2CSensors_Init+0x68>)
 8008262:	0011      	movs	r1, r2
 8008264:	0018      	movs	r0, r3
 8008266:	f7fb fc85 	bl	8003b74 <ENS_Init>
}
 800826a:	46c0      	nop			@ (mov r8, r8)
 800826c:	46bd      	mov	sp, r7
 800826e:	b002      	add	sp, #8
 8008270:	bd80      	pop	{r7, pc}
 8008272:	46c0      	nop			@ (mov r8, r8)
 8008274:	2000094c 	.word	0x2000094c
 8008278:	08008339 	.word	0x08008339
 800827c:	080082e5 	.word	0x080082e5
 8008280:	0800828d 	.word	0x0800828d
 8008284:	08008409 	.word	0x08008409
 8008288:	0800838d 	.word	0x0800838d

0800828c <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800828c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800828e:	b087      	sub	sp, #28
 8008290:	af02      	add	r7, sp, #8
 8008292:	6039      	str	r1, [r7, #0]
 8008294:	0011      	movs	r1, r2
 8008296:	1dfb      	adds	r3, r7, #7
 8008298:	1c02      	adds	r2, r0, #0
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	1dbb      	adds	r3, r7, #6
 800829e:	1c0a      	adds	r2, r1, #0
 80082a0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 80082a2:	4b0f      	ldr	r3, [pc, #60]	@ (80082e0 <ReadI2CDirect+0x54>)
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	1dfb      	adds	r3, r7, #7
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	18db      	adds	r3, r3, r3
 80082ae:	b299      	uxth	r1, r3
 80082b0:	1dbb      	adds	r3, r7, #6
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	260f      	movs	r6, #15
 80082b8:	19bc      	adds	r4, r7, r6
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	25fa      	movs	r5, #250	@ 0xfa
 80082be:	9500      	str	r5, [sp, #0]
 80082c0:	f00e f970 	bl	80165a4 <HAL_I2C_Master_Receive>
 80082c4:	0003      	movs	r3, r0
 80082c6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80082c8:	19bb      	adds	r3, r7, r6
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <ReadI2CDirect+0x48>
        return false;
 80082d0:	2300      	movs	r3, #0
 80082d2:	e000      	b.n	80082d6 <ReadI2CDirect+0x4a>
    }
    return true;
 80082d4:	2301      	movs	r3, #1
}
 80082d6:	0018      	movs	r0, r3
 80082d8:	46bd      	mov	sp, r7
 80082da:	b005      	add	sp, #20
 80082dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082de:	46c0      	nop			@ (mov r8, r8)
 80082e0:	2000094c 	.word	0x2000094c

080082e4 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80082e4:	b5b0      	push	{r4, r5, r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6039      	str	r1, [r7, #0]
 80082ec:	0011      	movs	r1, r2
 80082ee:	1dfb      	adds	r3, r7, #7
 80082f0:	1c02      	adds	r2, r0, #0
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	1dbb      	adds	r3, r7, #6
 80082f6:	1c0a      	adds	r2, r1, #0
 80082f8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80082fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008334 <ReadI2C+0x50>)
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	1dfb      	adds	r3, r7, #7
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	18db      	adds	r3, r3, r3
 8008306:	b299      	uxth	r1, r3
 8008308:	1dbb      	adds	r3, r7, #6
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	250f      	movs	r5, #15
 8008310:	197c      	adds	r4, r7, r5
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	f00e fb54 	bl	80169c0 <HAL_I2C_Master_Receive_DMA>
 8008318:	0003      	movs	r3, r0
 800831a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800831c:	197b      	adds	r3, r7, r5
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <ReadI2C+0x44>
        return false;
 8008324:	2300      	movs	r3, #0
 8008326:	e000      	b.n	800832a <ReadI2C+0x46>
    }
    return true;
 8008328:	2301      	movs	r3, #1
}
 800832a:	0018      	movs	r0, r3
 800832c:	46bd      	mov	sp, r7
 800832e:	b004      	add	sp, #16
 8008330:	bdb0      	pop	{r4, r5, r7, pc}
 8008332:	46c0      	nop			@ (mov r8, r8)
 8008334:	2000094c 	.word	0x2000094c

08008338 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008338:	b5b0      	push	{r4, r5, r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6039      	str	r1, [r7, #0]
 8008340:	0011      	movs	r1, r2
 8008342:	1dfb      	adds	r3, r7, #7
 8008344:	1c02      	adds	r2, r0, #0
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	1dbb      	adds	r3, r7, #6
 800834a:	1c0a      	adds	r2, r1, #0
 800834c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800834e:	4b0e      	ldr	r3, [pc, #56]	@ (8008388 <WriteI2C+0x50>)
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	1dfb      	adds	r3, r7, #7
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	18db      	adds	r3, r3, r3
 800835a:	b299      	uxth	r1, r3
 800835c:	1dbb      	adds	r3, r7, #6
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	250f      	movs	r5, #15
 8008364:	197c      	adds	r4, r7, r5
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	f00e fa24 	bl	80167b4 <HAL_I2C_Master_Transmit_DMA>
 800836c:	0003      	movs	r3, r0
 800836e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008370:	197b      	adds	r3, r7, r5
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <WriteI2C+0x44>
        return false;
 8008378:	2300      	movs	r3, #0
 800837a:	e000      	b.n	800837e <WriteI2C+0x46>
    }
    return true;
 800837c:	2301      	movs	r3, #1
}
 800837e:	0018      	movs	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	b004      	add	sp, #16
 8008384:	bdb0      	pop	{r4, r5, r7, pc}
 8008386:	46c0      	nop			@ (mov r8, r8)
 8008388:	2000094c 	.word	0x2000094c

0800838c <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	b08b      	sub	sp, #44	@ 0x2c
 8008390:	af04      	add	r7, sp, #16
 8008392:	0004      	movs	r4, r0
 8008394:	0008      	movs	r0, r1
 8008396:	0011      	movs	r1, r2
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	250f      	movs	r5, #15
 800839c:	197b      	adds	r3, r7, r5
 800839e:	1c22      	adds	r2, r4, #0
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	260c      	movs	r6, #12
 80083a4:	19bb      	adds	r3, r7, r6
 80083a6:	1c02      	adds	r2, r0, #0
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	230a      	movs	r3, #10
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	1c0a      	adds	r2, r1, #0
 80083b0:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 80083b2:	4b14      	ldr	r3, [pc, #80]	@ (8008404 <ReadI2CMem+0x78>)
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	197b      	adds	r3, r7, r5
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	18db      	adds	r3, r3, r3
 80083be:	b299      	uxth	r1, r3
 80083c0:	2217      	movs	r2, #23
 80083c2:	18bc      	adds	r4, r7, r2
 80083c4:	230a      	movs	r3, #10
 80083c6:	18fb      	adds	r3, r7, r3
 80083c8:	881d      	ldrh	r5, [r3, #0]
 80083ca:	19bb      	adds	r3, r7, r6
 80083cc:	881a      	ldrh	r2, [r3, #0]
 80083ce:	2364      	movs	r3, #100	@ 0x64
 80083d0:	9302      	str	r3, [sp, #8]
 80083d2:	2328      	movs	r3, #40	@ 0x28
 80083d4:	2608      	movs	r6, #8
 80083d6:	199b      	adds	r3, r3, r6
 80083d8:	19db      	adds	r3, r3, r7
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	002b      	movs	r3, r5
 80083e4:	f00e fbf2 	bl	8016bcc <HAL_I2C_Mem_Read>
 80083e8:	0003      	movs	r3, r0
 80083ea:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80083ec:	2217      	movs	r2, #23
 80083ee:	18bb      	adds	r3, r7, r2
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <ReadI2CMem+0x6e>
     return false;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e000      	b.n	80083fc <ReadI2CMem+0x70>
   }
   return true;
 80083fa:	2301      	movs	r3, #1
}
 80083fc:	0018      	movs	r0, r3
 80083fe:	46bd      	mov	sp, r7
 8008400:	b007      	add	sp, #28
 8008402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008404:	2000094c 	.word	0x2000094c

08008408 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800840a:	b089      	sub	sp, #36	@ 0x24
 800840c:	af02      	add	r7, sp, #8
 800840e:	0004      	movs	r4, r0
 8008410:	0008      	movs	r0, r1
 8008412:	0011      	movs	r1, r2
 8008414:	607b      	str	r3, [r7, #4]
 8008416:	250f      	movs	r5, #15
 8008418:	197b      	adds	r3, r7, r5
 800841a:	1c22      	adds	r2, r4, #0
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	260c      	movs	r6, #12
 8008420:	19bb      	adds	r3, r7, r6
 8008422:	1c02      	adds	r2, r0, #0
 8008424:	801a      	strh	r2, [r3, #0]
 8008426:	230a      	movs	r3, #10
 8008428:	18fb      	adds	r3, r7, r3
 800842a:	1c0a      	adds	r2, r1, #0
 800842c:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 800842e:	4b13      	ldr	r3, [pc, #76]	@ (800847c <WriteI2CMem+0x74>)
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	197b      	adds	r3, r7, r5
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	b29b      	uxth	r3, r3
 8008438:	18db      	adds	r3, r3, r3
 800843a:	b299      	uxth	r1, r3
 800843c:	2217      	movs	r2, #23
 800843e:	18bc      	adds	r4, r7, r2
 8008440:	230a      	movs	r3, #10
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	881d      	ldrh	r5, [r3, #0]
 8008446:	19bb      	adds	r3, r7, r6
 8008448:	881a      	ldrh	r2, [r3, #0]
 800844a:	2328      	movs	r3, #40	@ 0x28
 800844c:	2608      	movs	r6, #8
 800844e:	199b      	adds	r3, r3, r6
 8008450:	19db      	adds	r3, r3, r7
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	002b      	movs	r3, r5
 800845c:	f00e fcea 	bl	8016e34 <HAL_I2C_Mem_Write_DMA>
 8008460:	0003      	movs	r3, r0
 8008462:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008464:	2217      	movs	r2, #23
 8008466:	18bb      	adds	r3, r7, r2
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <WriteI2CMem+0x6a>
     return false;
 800846e:	2300      	movs	r3, #0
 8008470:	e000      	b.n	8008474 <WriteI2CMem+0x6c>
   }
   return true;
 8008472:	2301      	movs	r3, #1
}
 8008474:	0018      	movs	r0, r3
 8008476:	46bd      	mov	sp, r7
 8008478:	b007      	add	sp, #28
 800847a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800847c:	2000094c 	.word	0x2000094c

08008480 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8008480:	b590      	push	{r4, r7, lr}
 8008482:	b0c3      	sub	sp, #268	@ 0x10c
 8008484:	af3e      	add	r7, sp, #248	@ 0xf8
 8008486:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8008488:	f01a ffbc 	bl	8023404 <GetUsbRxDataSize>
 800848c:	0003      	movs	r3, r0
 800848e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b05      	cmp	r3, #5
 8008494:	d972      	bls.n	800857c <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2123      	movs	r1, #35	@ 0x23
 800849a:	0018      	movs	r0, r3
 800849c:	f01e f9c0 	bl	8026820 <strchr>
 80084a0:	0003      	movs	r3, r0
 80084a2:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d066      	beq.n	8008578 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	785a      	ldrb	r2, [r3, #1]
 80084ae:	4b35      	ldr	r3, [pc, #212]	@ (8008584 <Process_PC_Config+0x104>)
 80084b0:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	789a      	ldrb	r2, [r3, #2]
 80084b6:	4b33      	ldr	r3, [pc, #204]	@ (8008584 <Process_PC_Config+0x104>)
 80084b8:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80084ba:	4b32      	ldr	r3, [pc, #200]	@ (8008584 <Process_PC_Config+0x104>)
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	3305      	adds	r3, #5
 80084c0:	001a      	movs	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d352      	bcc.n	800856e <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	1cd9      	adds	r1, r3, #3
 80084cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008584 <Process_PC_Config+0x104>)
 80084ce:	785b      	ldrb	r3, [r3, #1]
 80084d0:	001a      	movs	r2, r3
 80084d2:	4b2d      	ldr	r3, [pc, #180]	@ (8008588 <Process_PC_Config+0x108>)
 80084d4:	0018      	movs	r0, r3
 80084d6:	f01e fa77 	bl	80269c8 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80084da:	4b2a      	ldr	r3, [pc, #168]	@ (8008584 <Process_PC_Config+0x104>)
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	3303      	adds	r3, #3
 80084e0:	001a      	movs	r2, r3
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	189b      	adds	r3, r3, r2
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	b21b      	sxth	r3, r3
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	b21a      	sxth	r2, r3
 80084ee:	4b25      	ldr	r3, [pc, #148]	@ (8008584 <Process_PC_Config+0x104>)
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	3304      	adds	r3, #4
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	18cb      	adds	r3, r1, r3
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b21b      	sxth	r3, r3
 80084fc:	4313      	orrs	r3, r2
 80084fe:	b21b      	sxth	r3, r3
 8008500:	b299      	uxth	r1, r3
 8008502:	4a20      	ldr	r2, [pc, #128]	@ (8008584 <Process_PC_Config+0x104>)
 8008504:	2381      	movs	r3, #129	@ 0x81
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 800850a:	4a1e      	ldr	r2, [pc, #120]	@ (8008584 <Process_PC_Config+0x104>)
 800850c:	2381      	movs	r3, #129	@ 0x81
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	5ad4      	ldrh	r4, [r2, r3]
 8008512:	4b1c      	ldr	r3, [pc, #112]	@ (8008584 <Process_PC_Config+0x104>)
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	3303      	adds	r3, #3
 8008518:	b29a      	uxth	r2, r3
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	0011      	movs	r1, r2
 800851e:	0018      	movs	r0, r3
 8008520:	f000 faa2 	bl	8008a68 <CRC16_ARC>
 8008524:	0003      	movs	r3, r0
 8008526:	429c      	cmp	r4, r3
 8008528:	d007      	beq.n	800853a <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 800852a:	4b16      	ldr	r3, [pc, #88]	@ (8008584 <Process_PC_Config+0x104>)
 800852c:	785a      	ldrb	r2, [r3, #1]
 800852e:	4b16      	ldr	r3, [pc, #88]	@ (8008588 <Process_PC_Config+0x108>)
 8008530:	0019      	movs	r1, r3
 8008532:	2001      	movs	r0, #1
 8008534:	f000 fa46 	bl	80089c4 <Create_Message>
 8008538:	e016      	b.n	8008568 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 800853a:	4c12      	ldr	r4, [pc, #72]	@ (8008584 <Process_PC_Config+0x104>)
 800853c:	466b      	mov	r3, sp
 800853e:	0018      	movs	r0, r3
 8008540:	0023      	movs	r3, r4
 8008542:	3310      	adds	r3, #16
 8008544:	22f4      	movs	r2, #244	@ 0xf4
 8008546:	0019      	movs	r1, r3
 8008548:	f01e fa3e 	bl	80269c8 <memcpy>
 800854c:	6820      	ldr	r0, [r4, #0]
 800854e:	6861      	ldr	r1, [r4, #4]
 8008550:	68a2      	ldr	r2, [r4, #8]
 8008552:	68e3      	ldr	r3, [r4, #12]
 8008554:	f000 f81a 	bl	800858c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8008558:	4b0a      	ldr	r3, [pc, #40]	@ (8008584 <Process_PC_Config+0x104>)
 800855a:	7818      	ldrb	r0, [r3, #0]
 800855c:	4b09      	ldr	r3, [pc, #36]	@ (8008584 <Process_PC_Config+0x104>)
 800855e:	785a      	ldrb	r2, [r3, #1]
 8008560:	4b09      	ldr	r3, [pc, #36]	@ (8008588 <Process_PC_Config+0x108>)
 8008562:	0019      	movs	r1, r3
 8008564:	f000 fa2e 	bl	80089c4 <Create_Message>
                }
                ResetUsbRxDataSize();
 8008568:	f01a ff34 	bl	80233d4 <ResetUsbRxDataSize>
                return;
 800856c:	e006      	b.n	800857c <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	0018      	movs	r0, r3
 8008572:	f01a ff51 	bl	8023418 <GetUsbRxNextChunk>
 8008576:	e001      	b.n	800857c <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 8008578:	f01a ff2c 	bl	80233d4 <ResetUsbRxDataSize>
        }
    }
}
 800857c:	46bd      	mov	sp, r7
 800857e:	b005      	add	sp, #20
 8008580:	bd90      	pop	{r4, r7, pc}
 8008582:	46c0      	nop			@ (mov r8, r8)
 8008584:	20000950 	.word	0x20000950
 8008588:	20000952 	.word	0x20000952

0800858c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 800858c:	b084      	sub	sp, #16
 800858e:	b5b0      	push	{r4, r5, r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	2518      	movs	r5, #24
 8008596:	197c      	adds	r4, r7, r5
 8008598:	6020      	str	r0, [r4, #0]
 800859a:	6061      	str	r1, [r4, #4]
 800859c:	60a2      	str	r2, [r4, #8]
 800859e:	60e3      	str	r3, [r4, #12]
  switch (msg.Command)
 80085a0:	197b      	adds	r3, r7, r5
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2bfe      	cmp	r3, #254	@ 0xfe
 80085a6:	d900      	bls.n	80085aa <ProcessCmd+0x1e>
 80085a8:	e202      	b.n	80089b0 <ProcessCmd+0x424>
 80085aa:	009a      	lsls	r2, r3, #2
 80085ac:	4bdc      	ldr	r3, [pc, #880]	@ (8008920 <ProcessCmd+0x394>)
 80085ae:	18d3      	adds	r3, r2, r3
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	469f      	mov	pc, r3
    {
        case BoxConfigCmd:  // 0
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085b4:	2118      	movs	r1, #24
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	785b      	ldrb	r3, [r3, #1]
 80085ba:	001a      	movs	r2, r3
 80085bc:	187b      	adds	r3, r7, r1
 80085be:	1c99      	adds	r1, r3, #2
 80085c0:	48d8      	ldr	r0, [pc, #864]	@ (8008924 <ProcessCmd+0x398>)
 80085c2:	230c      	movs	r3, #12
 80085c4:	f003 ff98 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80085c8:	e1f2      	b.n	80089b0 <ProcessCmd+0x424>
        case TempConfigCmd:  // 1
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085ca:	2118      	movs	r1, #24
 80085cc:	187b      	adds	r3, r7, r1
 80085ce:	785b      	ldrb	r3, [r3, #1]
 80085d0:	001a      	movs	r2, r3
 80085d2:	187b      	adds	r3, r7, r1
 80085d4:	1c99      	adds	r1, r3, #2
 80085d6:	48d4      	ldr	r0, [pc, #848]	@ (8008928 <ProcessCmd+0x39c>)
 80085d8:	230c      	movs	r3, #12
 80085da:	f003 ff8d 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80085de:	e1e7      	b.n	80089b0 <ProcessCmd+0x424>
        case HumidConfigCmd:  // 2
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085e0:	2118      	movs	r1, #24
 80085e2:	187b      	adds	r3, r7, r1
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	001a      	movs	r2, r3
 80085e8:	187b      	adds	r3, r7, r1
 80085ea:	1c99      	adds	r1, r3, #2
 80085ec:	48cf      	ldr	r0, [pc, #828]	@ (800892c <ProcessCmd+0x3a0>)
 80085ee:	230c      	movs	r3, #12
 80085f0:	f003 ff82 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80085f4:	e1dc      	b.n	80089b0 <ProcessCmd+0x424>
        case NOxIndexConfigCmd:  // 3
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085f6:	2118      	movs	r1, #24
 80085f8:	187b      	adds	r3, r7, r1
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	001a      	movs	r2, r3
 80085fe:	187b      	adds	r3, r7, r1
 8008600:	1c99      	adds	r1, r3, #2
 8008602:	48cb      	ldr	r0, [pc, #812]	@ (8008930 <ProcessCmd+0x3a4>)
 8008604:	230c      	movs	r3, #12
 8008606:	f003 ff77 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 800860a:	e1d1      	b.n	80089b0 <ProcessCmd+0x424>
        case VocIndexConfigCmd:  // 4
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800860c:	2118      	movs	r1, #24
 800860e:	187b      	adds	r3, r7, r1
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	001a      	movs	r2, r3
 8008614:	187b      	adds	r3, r7, r1
 8008616:	1c99      	adds	r1, r3, #2
 8008618:	48c6      	ldr	r0, [pc, #792]	@ (8008934 <ProcessCmd+0x3a8>)
 800861a:	230c      	movs	r3, #12
 800861c:	f003 ff6c 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008620:	e1c6      	b.n	80089b0 <ProcessCmd+0x424>
        case dBAConfigCmd: // 5 was 6 will be dBAConfigCMD
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008622:	2118      	movs	r1, #24
 8008624:	187b      	adds	r3, r7, r1
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	001a      	movs	r2, r3
 800862a:	187b      	adds	r3, r7, r1
 800862c:	1c99      	adds	r1, r3, #2
 800862e:	48c2      	ldr	r0, [pc, #776]	@ (8008938 <ProcessCmd+0x3ac>)
 8008630:	230c      	movs	r3, #12
 8008632:	f003 ff61 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008636:	e1bb      	b.n	80089b0 <ProcessCmd+0x424>
        case dBcConfigCmd:  // 6
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008638:	2118      	movs	r1, #24
 800863a:	187b      	adds	r3, r7, r1
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	001a      	movs	r2, r3
 8008640:	187b      	adds	r3, r7, r1
 8008642:	1c99      	adds	r1, r3, #2
 8008644:	48bd      	ldr	r0, [pc, #756]	@ (800893c <ProcessCmd+0x3b0>)
 8008646:	230c      	movs	r3, #12
 8008648:	f003 ff56 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 800864c:	e1b0      	b.n	80089b0 <ProcessCmd+0x424>
        case PM2ConfigCmd:  // 7
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800864e:	2118      	movs	r1, #24
 8008650:	187b      	adds	r3, r7, r1
 8008652:	785b      	ldrb	r3, [r3, #1]
 8008654:	001a      	movs	r2, r3
 8008656:	187b      	adds	r3, r7, r1
 8008658:	1c99      	adds	r1, r3, #2
 800865a:	48b9      	ldr	r0, [pc, #740]	@ (8008940 <ProcessCmd+0x3b4>)
 800865c:	230c      	movs	r3, #12
 800865e:	f003 ff4b 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008662:	e1a5      	b.n	80089b0 <ProcessCmd+0x424>
        case PM10ConfigCmd:  // 8
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008664:	2118      	movs	r1, #24
 8008666:	187b      	adds	r3, r7, r1
 8008668:	785b      	ldrb	r3, [r3, #1]
 800866a:	001a      	movs	r2, r3
 800866c:	187b      	adds	r3, r7, r1
 800866e:	1c99      	adds	r1, r3, #2
 8008670:	48b4      	ldr	r0, [pc, #720]	@ (8008944 <ProcessCmd+0x3b8>)
 8008672:	230c      	movs	r3, #12
 8008674:	f003 ff40 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008678:	e19a      	b.n	80089b0 <ProcessCmd+0x424>
        case BatVoltConfigCmd:  // 9
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800867a:	2118      	movs	r1, #24
 800867c:	187b      	adds	r3, r7, r1
 800867e:	785b      	ldrb	r3, [r3, #1]
 8008680:	001a      	movs	r2, r3
 8008682:	187b      	adds	r3, r7, r1
 8008684:	1c99      	adds	r1, r3, #2
 8008686:	48b0      	ldr	r0, [pc, #704]	@ (8008948 <ProcessCmd+0x3bc>)
 8008688:	230c      	movs	r3, #12
 800868a:	f003 ff35 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 800868e:	e18f      	b.n	80089b0 <ProcessCmd+0x424>
        case SolVoltConfigCmd:  // 10
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008690:	2118      	movs	r1, #24
 8008692:	187b      	adds	r3, r7, r1
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	001a      	movs	r2, r3
 8008698:	187b      	adds	r3, r7, r1
 800869a:	1c99      	adds	r1, r3, #2
 800869c:	48ab      	ldr	r0, [pc, #684]	@ (800894c <ProcessCmd+0x3c0>)
 800869e:	230c      	movs	r3, #12
 80086a0:	f003 ff2a 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80086a4:	e184      	b.n	80089b0 <ProcessCmd+0x424>
        case CustomNameConfigCmd:  // 12
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80086a6:	2118      	movs	r1, #24
 80086a8:	187b      	adds	r3, r7, r1
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	001a      	movs	r2, r3
 80086ae:	187b      	adds	r3, r7, r1
 80086b0:	1c99      	adds	r1, r3, #2
 80086b2:	48a7      	ldr	r0, [pc, #668]	@ (8008950 <ProcessCmd+0x3c4>)
 80086b4:	2320      	movs	r3, #32
 80086b6:	f003 ff1f 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80086ba:	e179      	b.n	80089b0 <ProcessCmd+0x424>
        case SSIDConfigCmd: // 13 was 21
          ClearEEprom(SSIDConfigAddr, SSIDMaxLength);
 80086bc:	4ba5      	ldr	r3, [pc, #660]	@ (8008954 <ProcessCmd+0x3c8>)
 80086be:	2120      	movs	r1, #32
 80086c0:	0018      	movs	r0, r3
 80086c2:	f003 ff5e 	bl	800c582 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, SSIDMaxLength);
 80086c6:	2118      	movs	r1, #24
 80086c8:	187b      	adds	r3, r7, r1
 80086ca:	785b      	ldrb	r3, [r3, #1]
 80086cc:	001a      	movs	r2, r3
 80086ce:	187b      	adds	r3, r7, r1
 80086d0:	1c99      	adds	r1, r3, #2
 80086d2:	48a0      	ldr	r0, [pc, #640]	@ (8008954 <ProcessCmd+0x3c8>)
 80086d4:	2320      	movs	r3, #32
 80086d6:	f003 ff0f 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80086da:	e169      	b.n	80089b0 <ProcessCmd+0x424>
        case PasswordConfigCmd: // 14 was 22
          ClearEEprom(pwdConfigAddr, pwdMaxLength);
 80086dc:	4b9e      	ldr	r3, [pc, #632]	@ (8008958 <ProcessCmd+0x3cc>)
 80086de:	2140      	movs	r1, #64	@ 0x40
 80086e0:	0018      	movs	r0, r3
 80086e2:	f003 ff4e 	bl	800c582 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80086e6:	2218      	movs	r2, #24
 80086e8:	18bb      	adds	r3, r7, r2
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	0019      	movs	r1, r3
 80086ee:	18bb      	adds	r3, r7, r2
 80086f0:	785b      	ldrb	r3, [r3, #1]
 80086f2:	001c      	movs	r4, r3
 80086f4:	0015      	movs	r5, r2
 80086f6:	18bb      	adds	r3, r7, r2
 80086f8:	1c9a      	adds	r2, r3, #2
 80086fa:	4898      	ldr	r0, [pc, #608]	@ (800895c <ProcessCmd+0x3d0>)
 80086fc:	0023      	movs	r3, r4
 80086fe:	f000 f9ff 	bl	8008b00 <printf_USB>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, pwdMaxLength);
 8008702:	0029      	movs	r1, r5
 8008704:	187b      	adds	r3, r7, r1
 8008706:	785b      	ldrb	r3, [r3, #1]
 8008708:	001a      	movs	r2, r3
 800870a:	187b      	adds	r3, r7, r1
 800870c:	1c99      	adds	r1, r3, #2
 800870e:	4892      	ldr	r0, [pc, #584]	@ (8008958 <ProcessCmd+0x3cc>)
 8008710:	2340      	movs	r3, #64	@ 0x40
 8008712:	f003 fef1 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008716:	e14b      	b.n	80089b0 <ProcessCmd+0x424>
        case PM1ConfigCmd:  // 21 was 13
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008718:	2118      	movs	r1, #24
 800871a:	187b      	adds	r3, r7, r1
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	001a      	movs	r2, r3
 8008720:	187b      	adds	r3, r7, r1
 8008722:	1c99      	adds	r1, r3, #2
 8008724:	488e      	ldr	r0, [pc, #568]	@ (8008960 <ProcessCmd+0x3d4>)
 8008726:	230c      	movs	r3, #12
 8008728:	f003 fee6 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 800872c:	e140      	b.n	80089b0 <ProcessCmd+0x424>
        case PM4ConfigCmd:  // 22 was 14
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800872e:	2118      	movs	r1, #24
 8008730:	187b      	adds	r3, r7, r1
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	001a      	movs	r2, r3
 8008736:	187b      	adds	r3, r7, r1
 8008738:	1c99      	adds	r1, r3, #2
 800873a:	488a      	ldr	r0, [pc, #552]	@ (8008964 <ProcessCmd+0x3d8>)
 800873c:	230c      	movs	r3, #12
 800873e:	f003 fedb 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008742:	e135      	b.n	80089b0 <ProcessCmd+0x424>
        case AHTTempConfigCmd: // 15
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008744:	2118      	movs	r1, #24
 8008746:	187b      	adds	r3, r7, r1
 8008748:	785b      	ldrb	r3, [r3, #1]
 800874a:	001a      	movs	r2, r3
 800874c:	187b      	adds	r3, r7, r1
 800874e:	1c99      	adds	r1, r3, #2
 8008750:	4885      	ldr	r0, [pc, #532]	@ (8008968 <ProcessCmd+0x3dc>)
 8008752:	230c      	movs	r3, #12
 8008754:	f003 fed0 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008758:	e12a      	b.n	80089b0 <ProcessCmd+0x424>
        case AHTHumidConfigCmd: // 16
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800875a:	2118      	movs	r1, #24
 800875c:	187b      	adds	r3, r7, r1
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	001a      	movs	r2, r3
 8008762:	187b      	adds	r3, r7, r1
 8008764:	1c99      	adds	r1, r3, #2
 8008766:	4881      	ldr	r0, [pc, #516]	@ (800896c <ProcessCmd+0x3e0>)
 8008768:	230c      	movs	r3, #12
 800876a:	f003 fec5 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 800876e:	e11f      	b.n	80089b0 <ProcessCmd+0x424>
        case BMPTempConfigCmd: // 17
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008770:	2118      	movs	r1, #24
 8008772:	187b      	adds	r3, r7, r1
 8008774:	785b      	ldrb	r3, [r3, #1]
 8008776:	001a      	movs	r2, r3
 8008778:	187b      	adds	r3, r7, r1
 800877a:	1c99      	adds	r1, r3, #2
 800877c:	487c      	ldr	r0, [pc, #496]	@ (8008970 <ProcessCmd+0x3e4>)
 800877e:	230c      	movs	r3, #12
 8008780:	f003 feba 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008784:	e114      	b.n	80089b0 <ProcessCmd+0x424>
        case ENSAQIConfigCmd: // 18
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008786:	2118      	movs	r1, #24
 8008788:	187b      	adds	r3, r7, r1
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	001a      	movs	r2, r3
 800878e:	187b      	adds	r3, r7, r1
 8008790:	1c99      	adds	r1, r3, #2
 8008792:	4878      	ldr	r0, [pc, #480]	@ (8008974 <ProcessCmd+0x3e8>)
 8008794:	230c      	movs	r3, #12
 8008796:	f003 feaf 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 800879a:	e109      	b.n	80089b0 <ProcessCmd+0x424>
        case ENSTVOCConfigCmd: // 19
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800879c:	2118      	movs	r1, #24
 800879e:	187b      	adds	r3, r7, r1
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	001a      	movs	r2, r3
 80087a4:	187b      	adds	r3, r7, r1
 80087a6:	1c99      	adds	r1, r3, #2
 80087a8:	4873      	ldr	r0, [pc, #460]	@ (8008978 <ProcessCmd+0x3ec>)
 80087aa:	230c      	movs	r3, #12
 80087ac:	f003 fea4 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80087b0:	e0fe      	b.n	80089b0 <ProcessCmd+0x424>
        case ENSeCO2ConfigCmd: // 20
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80087b2:	2118      	movs	r1, #24
 80087b4:	187b      	adds	r3, r7, r1
 80087b6:	785b      	ldrb	r3, [r3, #1]
 80087b8:	001a      	movs	r2, r3
 80087ba:	187b      	adds	r3, r7, r1
 80087bc:	1c99      	adds	r1, r3, #2
 80087be:	486f      	ldr	r0, [pc, #444]	@ (800897c <ProcessCmd+0x3f0>)
 80087c0:	230c      	movs	r3, #12
 80087c2:	f003 fe99 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80087c6:	e0f3      	b.n	80089b0 <ProcessCmd+0x424>
        case SEN55TempConfigCmd: // 23
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80087c8:	2118      	movs	r1, #24
 80087ca:	187b      	adds	r3, r7, r1
 80087cc:	785b      	ldrb	r3, [r3, #1]
 80087ce:	001a      	movs	r2, r3
 80087d0:	187b      	adds	r3, r7, r1
 80087d2:	1c99      	adds	r1, r3, #2
 80087d4:	486a      	ldr	r0, [pc, #424]	@ (8008980 <ProcessCmd+0x3f4>)
 80087d6:	230c      	movs	r3, #12
 80087d8:	f003 fe8e 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80087dc:	e0e8      	b.n	80089b0 <ProcessCmd+0x424>
        case SEN55HumidConfigCmd: // 24
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80087de:	2118      	movs	r1, #24
 80087e0:	187b      	adds	r3, r7, r1
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	001a      	movs	r2, r3
 80087e6:	187b      	adds	r3, r7, r1
 80087e8:	1c99      	adds	r1, r3, #2
 80087ea:	4866      	ldr	r0, [pc, #408]	@ (8008984 <ProcessCmd+0x3f8>)
 80087ec:	230c      	movs	r3, #12
 80087ee:	f003 fe83 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80087f2:	e0dd      	b.n	80089b0 <ProcessCmd+0x424>
        case SendFromNameConfigCmd:  // 25
          ClearEEprom(SendFromNameConfigAddr, SendFromNameMaxLength);
 80087f4:	4b64      	ldr	r3, [pc, #400]	@ (8008988 <ProcessCmd+0x3fc>)
 80087f6:	2130      	movs	r1, #48	@ 0x30
 80087f8:	0018      	movs	r0, r3
 80087fa:	f003 fec2 	bl	800c582 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 80087fe:	2118      	movs	r1, #24
 8008800:	187b      	adds	r3, r7, r1
 8008802:	785b      	ldrb	r3, [r3, #1]
 8008804:	001a      	movs	r2, r3
 8008806:	187b      	adds	r3, r7, r1
 8008808:	1c99      	adds	r1, r3, #2
 800880a:	485f      	ldr	r0, [pc, #380]	@ (8008988 <ProcessCmd+0x3fc>)
 800880c:	2330      	movs	r3, #48	@ 0x30
 800880e:	f003 fe73 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008812:	e0cd      	b.n	80089b0 <ProcessCmd+0x424>
        case SendToNameConfigCmd:  // 26
          ClearEEprom(SendToNameConfigAddr, SendToNameMaxLength);
 8008814:	4b5d      	ldr	r3, [pc, #372]	@ (800898c <ProcessCmd+0x400>)
 8008816:	2130      	movs	r1, #48	@ 0x30
 8008818:	0018      	movs	r0, r3
 800881a:	f003 feb2 	bl	800c582 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 800881e:	2218      	movs	r2, #24
 8008820:	18bb      	adds	r3, r7, r2
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	0019      	movs	r1, r3
 8008826:	18bb      	adds	r3, r7, r2
 8008828:	785b      	ldrb	r3, [r3, #1]
 800882a:	001c      	movs	r4, r3
 800882c:	0015      	movs	r5, r2
 800882e:	18bb      	adds	r3, r7, r2
 8008830:	1c9a      	adds	r2, r3, #2
 8008832:	484a      	ldr	r0, [pc, #296]	@ (800895c <ProcessCmd+0x3d0>)
 8008834:	0023      	movs	r3, r4
 8008836:	f000 f963 	bl	8008b00 <printf_USB>
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 800883a:	0029      	movs	r1, r5
 800883c:	187b      	adds	r3, r7, r1
 800883e:	785b      	ldrb	r3, [r3, #1]
 8008840:	001a      	movs	r2, r3
 8008842:	187b      	adds	r3, r7, r1
 8008844:	1c99      	adds	r1, r3, #2
 8008846:	4851      	ldr	r0, [pc, #324]	@ (800898c <ProcessCmd+0x400>)
 8008848:	2330      	movs	r3, #48	@ 0x30
 800884a:	f003 fe55 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 800884e:	e0af      	b.n	80089b0 <ProcessCmd+0x424>
        case MailAPIKeyConfigCmd:  // 27
          ClearEEprom(MailAPIKeyConfigAddr, MailAPIKeyMaxLength);
 8008850:	4b4f      	ldr	r3, [pc, #316]	@ (8008990 <ProcessCmd+0x404>)
 8008852:	2130      	movs	r1, #48	@ 0x30
 8008854:	0018      	movs	r0, r3
 8008856:	f003 fe94 	bl	800c582 <ClearEEprom>
          WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 800885a:	2118      	movs	r1, #24
 800885c:	187b      	adds	r3, r7, r1
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	001a      	movs	r2, r3
 8008862:	187b      	adds	r3, r7, r1
 8008864:	1c99      	adds	r1, r3, #2
 8008866:	484a      	ldr	r0, [pc, #296]	@ (8008990 <ProcessCmd+0x404>)
 8008868:	2330      	movs	r3, #48	@ 0x30
 800886a:	f003 fe45 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 800886e:	e09f      	b.n	80089b0 <ProcessCmd+0x424>
        case hPaConfigCmd:  // 28 will be airpressure => hPaconfigCMD hPaConfigAddr ??
          WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008870:	2118      	movs	r1, #24
 8008872:	187b      	adds	r3, r7, r1
 8008874:	785b      	ldrb	r3, [r3, #1]
 8008876:	001a      	movs	r2, r3
 8008878:	187b      	adds	r3, r7, r1
 800887a:	1c99      	adds	r1, r3, #2
 800887c:	4845      	ldr	r0, [pc, #276]	@ (8008994 <ProcessCmd+0x408>)
 800887e:	230c      	movs	r3, #12
 8008880:	f003 fe3a 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 8008884:	e094      	b.n	80089b0 <ProcessCmd+0x424>
        case UptimeConfigCmd: // 29
          WriteUint8ArrayEepromSafe(UptimeConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008886:	2118      	movs	r1, #24
 8008888:	187b      	adds	r3, r7, r1
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	001a      	movs	r2, r3
 800888e:	187b      	adds	r3, r7, r1
 8008890:	1c99      	adds	r1, r3, #2
 8008892:	4841      	ldr	r0, [pc, #260]	@ (8008998 <ProcessCmd+0x40c>)
 8008894:	230c      	movs	r3, #12
 8008896:	f003 fe2f 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 800889a:	e089      	b.n	80089b0 <ProcessCmd+0x424>
        case URLToUploadConfigCmd: // 30
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 800889c:	2218      	movs	r2, #24
 800889e:	18bb      	adds	r3, r7, r2
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	0019      	movs	r1, r3
 80088a4:	18bb      	adds	r3, r7, r2
 80088a6:	785b      	ldrb	r3, [r3, #1]
 80088a8:	001c      	movs	r4, r3
 80088aa:	0015      	movs	r5, r2
 80088ac:	18bb      	adds	r3, r7, r2
 80088ae:	1c9a      	adds	r2, r3, #2
 80088b0:	482a      	ldr	r0, [pc, #168]	@ (800895c <ProcessCmd+0x3d0>)
 80088b2:	0023      	movs	r3, r4
 80088b4:	f000 f924 	bl	8008b00 <printf_USB>
          WriteUint8ArrayEepromSafe(URLToUploadConfigAddr, msg.Payload, msg.PayloadLength, URLToUploadMaxLength);
 80088b8:	0029      	movs	r1, r5
 80088ba:	187b      	adds	r3, r7, r1
 80088bc:	785b      	ldrb	r3, [r3, #1]
 80088be:	001a      	movs	r2, r3
 80088c0:	187b      	adds	r3, r7, r1
 80088c2:	1c99      	adds	r1, r3, #2
 80088c4:	4835      	ldr	r0, [pc, #212]	@ (800899c <ProcessCmd+0x410>)
 80088c6:	2330      	movs	r3, #48	@ 0x30
 80088c8:	f003 fe16 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
        break;
 80088cc:	e070      	b.n	80089b0 <ProcessCmd+0x424>

        case ClearConfigCmd: // 253
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80088ce:	2396      	movs	r3, #150	@ 0x96
 80088d0:	33ff      	adds	r3, #255	@ 0xff
 80088d2:	4a14      	ldr	r2, [pc, #80]	@ (8008924 <ProcessCmd+0x398>)
 80088d4:	0019      	movs	r1, r3
 80088d6:	0010      	movs	r0, r2
 80088d8:	f003 fe53 	bl	800c582 <ClearEEprom>
            ClearEEprom(SSIDStartAddr, IPrelatedConfigSize);
 80088dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008954 <ProcessCmd+0x3c8>)
 80088de:	21f0      	movs	r1, #240	@ 0xf0
 80088e0:	0018      	movs	r0, r3
 80088e2:	f003 fe4e 	bl	800c582 <ClearEEprom>
        break;
 80088e6:	e063      	b.n	80089b0 <ProcessCmd+0x424>
        case ClearEepromCmd: //254
        {
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80088e8:	2118      	movs	r1, #24
 80088ea:	187b      	adds	r3, r7, r1
 80088ec:	789b      	ldrb	r3, [r3, #2]
 80088ee:	b21b      	sxth	r3, r3
 80088f0:	021b      	lsls	r3, r3, #8
 80088f2:	b21a      	sxth	r2, r3
 80088f4:	187b      	adds	r3, r7, r1
 80088f6:	78db      	ldrb	r3, [r3, #3]
 80088f8:	b21b      	sxth	r3, r3
 80088fa:	4313      	orrs	r3, r2
 80088fc:	b21a      	sxth	r2, r3
 80088fe:	1dbb      	adds	r3, r7, #6
 8008900:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8008902:	1dbb      	adds	r3, r7, #6
 8008904:	881a      	ldrh	r2, [r3, #0]
 8008906:	23c0      	movs	r3, #192	@ 0xc0
 8008908:	015b      	lsls	r3, r3, #5
 800890a:	429a      	cmp	r2, r3
 800890c:	d248      	bcs.n	80089a0 <ProcessCmd+0x414>
            {
                ClearEEprom(EEPromStartAddr, size);
 800890e:	1dbb      	adds	r3, r7, #6
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	4a04      	ldr	r2, [pc, #16]	@ (8008924 <ProcessCmd+0x398>)
 8008914:	0019      	movs	r1, r3
 8008916:	0010      	movs	r0, r2
 8008918:	f003 fe33 	bl	800c582 <ClearEEprom>
            }
            else
            {
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
 800891c:	e047      	b.n	80089ae <ProcessCmd+0x422>
 800891e:	46c0      	nop			@ (mov r8, r8)
 8008920:	0802e928 	.word	0x0802e928
 8008924:	08080000 	.word	0x08080000
 8008928:	0808000c 	.word	0x0808000c
 800892c:	08080018 	.word	0x08080018
 8008930:	08080024 	.word	0x08080024
 8008934:	08080030 	.word	0x08080030
 8008938:	08080048 	.word	0x08080048
 800893c:	0808003c 	.word	0x0808003c
 8008940:	08080054 	.word	0x08080054
 8008944:	08080060 	.word	0x08080060
 8008948:	0808006c 	.word	0x0808006c
 800894c:	08080078 	.word	0x08080078
 8008950:	08080090 	.word	0x08080090
 8008954:	08080200 	.word	0x08080200
 8008958:	08080220 	.word	0x08080220
 800895c:	0802ba80 	.word	0x0802ba80
 8008960:	080800b0 	.word	0x080800b0
 8008964:	080800bc 	.word	0x080800bc
 8008968:	080800c8 	.word	0x080800c8
 800896c:	080800d4 	.word	0x080800d4
 8008970:	080800e0 	.word	0x080800e0
 8008974:	080800ec 	.word	0x080800ec
 8008978:	080800f8 	.word	0x080800f8
 800897c:	08080104 	.word	0x08080104
 8008980:	08080170 	.word	0x08080170
 8008984:	0808017c 	.word	0x0808017c
 8008988:	08080260 	.word	0x08080260
 800898c:	08080290 	.word	0x08080290
 8008990:	080802c0 	.word	0x080802c0
 8008994:	08080188 	.word	0x08080188
 8008998:	080801a0 	.word	0x080801a0
 800899c:	08080110 	.word	0x08080110
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80089a0:	23c0      	movs	r3, #192	@ 0xc0
 80089a2:	015b      	lsls	r3, r3, #5
 80089a4:	4a06      	ldr	r2, [pc, #24]	@ (80089c0 <ProcessCmd+0x434>)
 80089a6:	0019      	movs	r1, r3
 80089a8:	0010      	movs	r0, r2
 80089aa:	f003 fdea 	bl	800c582 <ClearEEprom>
            break;
 80089ae:	46c0      	nop			@ (mov r8, r8)
        }
    }

}
 80089b0:	46c0      	nop			@ (mov r8, r8)
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b002      	add	sp, #8
 80089b6:	bcb0      	pop	{r4, r5, r7}
 80089b8:	bc08      	pop	{r3}
 80089ba:	b004      	add	sp, #16
 80089bc:	4718      	bx	r3
 80089be:	46c0      	nop			@ (mov r8, r8)
 80089c0:	08080000 	.word	0x08080000

080089c4 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80089c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6039      	str	r1, [r7, #0]
 80089cc:	0011      	movs	r1, r2
 80089ce:	1dfb      	adds	r3, r7, #7
 80089d0:	1c02      	adds	r2, r0, #0
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	1dbb      	adds	r3, r7, #6
 80089d6:	1c0a      	adds	r2, r1, #0
 80089d8:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80089da:	2223      	movs	r2, #35	@ 0x23
 80089dc:	4b20      	ldr	r3, [pc, #128]	@ (8008a60 <Create_Message+0x9c>)
 80089de:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80089e0:	4b1f      	ldr	r3, [pc, #124]	@ (8008a60 <Create_Message+0x9c>)
 80089e2:	1dfa      	adds	r2, r7, #7
 80089e4:	7812      	ldrb	r2, [r2, #0]
 80089e6:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80089e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008a60 <Create_Message+0x9c>)
 80089ea:	1dba      	adds	r2, r7, #6
 80089ec:	7812      	ldrb	r2, [r2, #0]
 80089ee:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80089f0:	1dbb      	adds	r3, r7, #6
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a64 <Create_Message+0xa0>)
 80089f8:	0018      	movs	r0, r3
 80089fa:	f01d ffe5 	bl	80269c8 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80089fe:	1dbb      	adds	r3, r7, #6
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	250e      	movs	r5, #14
 8008a06:	197b      	adds	r3, r7, r5
 8008a08:	3203      	adds	r2, #3
 8008a0a:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008a0c:	260c      	movs	r6, #12
 8008a0e:	19bc      	adds	r4, r7, r6
 8008a10:	197b      	adds	r3, r7, r5
 8008a12:	881a      	ldrh	r2, [r3, #0]
 8008a14:	4b12      	ldr	r3, [pc, #72]	@ (8008a60 <Create_Message+0x9c>)
 8008a16:	0011      	movs	r1, r2
 8008a18:	0018      	movs	r0, r3
 8008a1a:	f000 f825 	bl	8008a68 <CRC16_ARC>
 8008a1e:	0003      	movs	r3, r0
 8008a20:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8008a22:	0030      	movs	r0, r6
 8008a24:	183b      	adds	r3, r7, r0
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	0a1b      	lsrs	r3, r3, #8
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	197b      	adds	r3, r7, r5
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b2d1      	uxtb	r1, r2
 8008a32:	4a0b      	ldr	r2, [pc, #44]	@ (8008a60 <Create_Message+0x9c>)
 8008a34:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008a36:	197b      	adds	r3, r7, r5
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	183a      	adds	r2, r7, r0
 8008a3e:	8812      	ldrh	r2, [r2, #0]
 8008a40:	b2d1      	uxtb	r1, r2
 8008a42:	4a07      	ldr	r2, [pc, #28]	@ (8008a60 <Create_Message+0x9c>)
 8008a44:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8008a46:	197b      	adds	r3, r7, r5
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	3302      	adds	r3, #2
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	4b04      	ldr	r3, [pc, #16]	@ (8008a60 <Create_Message+0x9c>)
 8008a50:	0011      	movs	r1, r2
 8008a52:	0018      	movs	r0, r3
 8008a54:	f01a fc7c 	bl	8023350 <CDC_Transmit_FS>
}
 8008a58:	46c0      	nop			@ (mov r8, r8)
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	b005      	add	sp, #20
 8008a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a60:	20000a5c 	.word	0x20000a5c
 8008a64:	20000a5f 	.word	0x20000a5f

08008a68 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	000a      	movs	r2, r1
 8008a72:	1cbb      	adds	r3, r7, #2
 8008a74:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8008a76:	2316      	movs	r3, #22
 8008a78:	18fb      	adds	r3, r7, r3
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8008a7e:	2300      	movs	r3, #0
 8008a80:	613b      	str	r3, [r7, #16]
 8008a82:	e02e      	b.n	8008ae2 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	18d3      	adds	r3, r2, r3
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	0019      	movs	r1, r3
 8008a8e:	2216      	movs	r2, #22
 8008a90:	18bb      	adds	r3, r7, r2
 8008a92:	18ba      	adds	r2, r7, r2
 8008a94:	8812      	ldrh	r2, [r2, #0]
 8008a96:	404a      	eors	r2, r1
 8008a98:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e01a      	b.n	8008ad6 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008aa0:	2116      	movs	r1, #22
 8008aa2:	187b      	adds	r3, r7, r1
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	d00b      	beq.n	8008ac4 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008aac:	187b      	adds	r3, r7, r1
 8008aae:	187a      	adds	r2, r7, r1
 8008ab0:	8812      	ldrh	r2, [r2, #0]
 8008ab2:	0852      	lsrs	r2, r2, #1
 8008ab4:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8008ab6:	187b      	adds	r3, r7, r1
 8008ab8:	187a      	adds	r2, r7, r1
 8008aba:	8812      	ldrh	r2, [r2, #0]
 8008abc:	490f      	ldr	r1, [pc, #60]	@ (8008afc <CRC16_ARC+0x94>)
 8008abe:	404a      	eors	r2, r1
 8008ac0:	801a      	strh	r2, [r3, #0]
 8008ac2:	e005      	b.n	8008ad0 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008ac4:	2216      	movs	r2, #22
 8008ac6:	18bb      	adds	r3, r7, r2
 8008ac8:	18ba      	adds	r2, r7, r2
 8008aca:	8812      	ldrh	r2, [r2, #0]
 8008acc:	0852      	lsrs	r2, r2, #1
 8008ace:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b07      	cmp	r3, #7
 8008ada:	dde1      	ble.n	8008aa0 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	1cbb      	adds	r3, r7, #2
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	dbcb      	blt.n	8008a84 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008aec:	2316      	movs	r3, #22
 8008aee:	18fb      	adds	r3, r7, r3
 8008af0:	881b      	ldrh	r3, [r3, #0]
}
 8008af2:	0018      	movs	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b006      	add	sp, #24
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	ffffa001 	.word	0xffffa001

08008b00 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8008b00:	b40f      	push	{r0, r1, r2, r3}
 8008b02:	b590      	push	{r4, r7, lr}
 8008b04:	b0a9      	sub	sp, #164	@ 0xa4
 8008b06:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008b08:	23ac      	movs	r3, #172	@ 0xac
 8008b0a:	2108      	movs	r1, #8
 8008b0c:	185b      	adds	r3, r3, r1
 8008b0e:	19db      	adds	r3, r3, r7
 8008b10:	607b      	str	r3, [r7, #4]
  vsnprintf(string, 150, message, args);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	22a8      	movs	r2, #168	@ 0xa8
 8008b16:	1852      	adds	r2, r2, r1
 8008b18:	19d2      	adds	r2, r2, r7
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	2408      	movs	r4, #8
 8008b1e:	1938      	adds	r0, r7, r4
 8008b20:	2196      	movs	r1, #150	@ 0x96
 8008b22:	f01d fdc9 	bl	80266b8 <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008b26:	193b      	adds	r3, r7, r4
 8008b28:	0018      	movs	r0, r3
 8008b2a:	f7f7 fb1f 	bl	800016c <strlen>
 8008b2e:	0003      	movs	r3, r0
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	193b      	adds	r3, r7, r4
 8008b34:	0011      	movs	r1, r2
 8008b36:	0018      	movs	r0, r3
 8008b38:	f01a fc0a 	bl	8023350 <CDC_Transmit_FS>
}
 8008b3c:	46c0      	nop			@ (mov r8, r8)
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b029      	add	sp, #164	@ 0xa4
 8008b42:	bc90      	pop	{r4, r7}
 8008b44:	bc08      	pop	{r3}
 8008b46:	b004      	add	sp, #16
 8008b48:	4718      	bx	r3

08008b4a <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	000a      	movs	r2, r1
 8008b54:	1cfb      	adds	r3, r7, #3
 8008b56:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008b58:	1cfb      	adds	r3, r7, #3
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d006      	beq.n	8008b6e <PC_selectout+0x24>
    printf_USB(msg);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	0018      	movs	r0, r3
 8008b64:	f7ff ffcc 	bl	8008b00 <printf_USB>
    HAL_Delay(10); //wait for the host poll of the USB buffer
 8008b68:	200a      	movs	r0, #10
 8008b6a:	f00c f8bd 	bl	8014ce8 <HAL_Delay>
  }
//  else {
    printf(msg);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	0018      	movs	r0, r3
 8008b72:	f01d fc95 	bl	80264a0 <iprintf>
//  }
}
 8008b76:	46c0      	nop			@ (mov r8, r8)
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	b002      	add	sp, #8
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <PC_show_Keys>:

void PC_show_Keys() {
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
  static uint8_t hPaConfig[IdSize];               // 28 was 5
  static uint8_t UptimeConfig[IdSize];            // 29
  static uint8_t URLToUploadConfig[URLToUploadMaxLength]; // 30
  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008b84:	f001 f8d0 	bl	8009d28 <Check_USB_PowerOn>
 8008b88:	1e03      	subs	r3, r0, #0
 8008b8a:	d005      	beq.n	8008b98 <PC_show_Keys+0x18>
    usb_out = true;
 8008b8c:	4b01      	ldr	r3, [pc, #4]	@ (8008b94 <PC_show_Keys+0x14>)
 8008b8e:	2201      	movs	r2, #1
 8008b90:	701a      	strb	r2, [r3, #0]
 8008b92:	e004      	b.n	8008b9e <PC_show_Keys+0x1e>
 8008b94:	20000b61 	.word	0x20000b61
  }
  else {
    usb_out = false;
 8008b98:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f90 <PC_show_Keys+0x410>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "\r\nOverview of stored keys:\r\n");
 8008b9e:	4afd      	ldr	r2, [pc, #1012]	@ (8008f94 <PC_show_Keys+0x414>)
 8008ba0:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f98 <PC_show_Keys+0x418>)
 8008ba2:	0011      	movs	r1, r2
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f01d fceb 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008baa:	4bf9      	ldr	r3, [pc, #996]	@ (8008f90 <PC_show_Keys+0x410>)
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	4bfa      	ldr	r3, [pc, #1000]	@ (8008f98 <PC_show_Keys+0x418>)
 8008bb0:	0011      	movs	r1, r2
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f7ff ffc9 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008bb8:	4bf8      	ldr	r3, [pc, #992]	@ (8008f9c <PC_show_Keys+0x41c>)
 8008bba:	48f9      	ldr	r0, [pc, #996]	@ (8008fa0 <PC_show_Keys+0x420>)
 8008bbc:	220c      	movs	r2, #12
 8008bbe:	0019      	movs	r1, r3
 8008bc0:	f003 fcb6 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008bc4:	4af5      	ldr	r2, [pc, #980]	@ (8008f9c <PC_show_Keys+0x41c>)
 8008bc6:	4bf7      	ldr	r3, [pc, #988]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008bc8:	0011      	movs	r1, r2
 8008bca:	0018      	movs	r0, r3
 8008bcc:	f7fc fbba 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - Box id ------------------------: %s\r\n", BoxConfigCmd, Buffer);
 8008bd0:	4bf4      	ldr	r3, [pc, #976]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008bd2:	49f5      	ldr	r1, [pc, #980]	@ (8008fa8 <PC_show_Keys+0x428>)
 8008bd4:	48f0      	ldr	r0, [pc, #960]	@ (8008f98 <PC_show_Keys+0x418>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f01d fcd2 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bdc:	4bec      	ldr	r3, [pc, #944]	@ (8008f90 <PC_show_Keys+0x410>)
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	4bed      	ldr	r3, [pc, #948]	@ (8008f98 <PC_show_Keys+0x418>)
 8008be2:	0011      	movs	r1, r2
 8008be4:	0018      	movs	r0, r3
 8008be6:	f7ff ffb0 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008bea:	4bf0      	ldr	r3, [pc, #960]	@ (8008fac <PC_show_Keys+0x42c>)
 8008bec:	48f0      	ldr	r0, [pc, #960]	@ (8008fb0 <PC_show_Keys+0x430>)
 8008bee:	220c      	movs	r2, #12
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	f003 fc9d 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008bf6:	4aed      	ldr	r2, [pc, #948]	@ (8008fac <PC_show_Keys+0x42c>)
 8008bf8:	4bea      	ldr	r3, [pc, #936]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008bfa:	0011      	movs	r1, r2
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	f7fc fba1 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - Temperature sensor id: --------: %s\r\n", TempConfigCmd, Buffer);
 8008c02:	4be8      	ldr	r3, [pc, #928]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008c04:	49eb      	ldr	r1, [pc, #940]	@ (8008fb4 <PC_show_Keys+0x434>)
 8008c06:	48e4      	ldr	r0, [pc, #912]	@ (8008f98 <PC_show_Keys+0x418>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f01d fcb9 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c0e:	4be0      	ldr	r3, [pc, #896]	@ (8008f90 <PC_show_Keys+0x410>)
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	4be1      	ldr	r3, [pc, #900]	@ (8008f98 <PC_show_Keys+0x418>)
 8008c14:	0011      	movs	r1, r2
 8008c16:	0018      	movs	r0, r3
 8008c18:	f7ff ff97 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008c1c:	4be6      	ldr	r3, [pc, #920]	@ (8008fb8 <PC_show_Keys+0x438>)
 8008c1e:	48e7      	ldr	r0, [pc, #924]	@ (8008fbc <PC_show_Keys+0x43c>)
 8008c20:	220c      	movs	r2, #12
 8008c22:	0019      	movs	r1, r3
 8008c24:	f003 fc84 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008c28:	4ae3      	ldr	r2, [pc, #908]	@ (8008fb8 <PC_show_Keys+0x438>)
 8008c2a:	4bde      	ldr	r3, [pc, #888]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008c2c:	0011      	movs	r1, r2
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f7fc fb88 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - Humidity sensor id ------------: %s\r\n", HumidConfigCmd, Buffer);
 8008c34:	4bdb      	ldr	r3, [pc, #876]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008c36:	49e2      	ldr	r1, [pc, #904]	@ (8008fc0 <PC_show_Keys+0x440>)
 8008c38:	48d7      	ldr	r0, [pc, #860]	@ (8008f98 <PC_show_Keys+0x418>)
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f01d fca0 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c40:	4bd3      	ldr	r3, [pc, #844]	@ (8008f90 <PC_show_Keys+0x410>)
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	4bd4      	ldr	r3, [pc, #848]	@ (8008f98 <PC_show_Keys+0x418>)
 8008c46:	0011      	movs	r1, r2
 8008c48:	0018      	movs	r0, r3
 8008c4a:	f7ff ff7e 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8008c4e:	4bdd      	ldr	r3, [pc, #884]	@ (8008fc4 <PC_show_Keys+0x444>)
 8008c50:	48dd      	ldr	r0, [pc, #884]	@ (8008fc8 <PC_show_Keys+0x448>)
 8008c52:	220c      	movs	r2, #12
 8008c54:	0019      	movs	r1, r3
 8008c56:	f003 fc6b 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008c5a:	4ada      	ldr	r2, [pc, #872]	@ (8008fc4 <PC_show_Keys+0x444>)
 8008c5c:	4bd1      	ldr	r3, [pc, #836]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008c5e:	0011      	movs	r1, r2
 8008c60:	0018      	movs	r0, r3
 8008c62:	f7fc fb6f 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - NOx sensor id -----------------: %s\r\n", NOxIndexConfigCmd, Buffer);
 8008c66:	4bcf      	ldr	r3, [pc, #828]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008c68:	49d8      	ldr	r1, [pc, #864]	@ (8008fcc <PC_show_Keys+0x44c>)
 8008c6a:	48cb      	ldr	r0, [pc, #812]	@ (8008f98 <PC_show_Keys+0x418>)
 8008c6c:	2203      	movs	r2, #3
 8008c6e:	f01d fc87 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c72:	4bc7      	ldr	r3, [pc, #796]	@ (8008f90 <PC_show_Keys+0x410>)
 8008c74:	781a      	ldrb	r2, [r3, #0]
 8008c76:	4bc8      	ldr	r3, [pc, #800]	@ (8008f98 <PC_show_Keys+0x418>)
 8008c78:	0011      	movs	r1, r2
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f7ff ff65 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008c80:	4bd3      	ldr	r3, [pc, #844]	@ (8008fd0 <PC_show_Keys+0x450>)
 8008c82:	48d4      	ldr	r0, [pc, #848]	@ (8008fd4 <PC_show_Keys+0x454>)
 8008c84:	220c      	movs	r2, #12
 8008c86:	0019      	movs	r1, r3
 8008c88:	f003 fc52 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008c8c:	4ad0      	ldr	r2, [pc, #832]	@ (8008fd0 <PC_show_Keys+0x450>)
 8008c8e:	4bc5      	ldr	r3, [pc, #788]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008c90:	0011      	movs	r1, r2
 8008c92:	0018      	movs	r0, r3
 8008c94:	f7fc fb56 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - VOC sensor id -----------------: %s\r\n", VocIndexConfigCmd, Buffer);
 8008c98:	4bc2      	ldr	r3, [pc, #776]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008c9a:	49cf      	ldr	r1, [pc, #828]	@ (8008fd8 <PC_show_Keys+0x458>)
 8008c9c:	48be      	ldr	r0, [pc, #760]	@ (8008f98 <PC_show_Keys+0x418>)
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	f01d fc6e 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ca4:	4bba      	ldr	r3, [pc, #744]	@ (8008f90 <PC_show_Keys+0x410>)
 8008ca6:	781a      	ldrb	r2, [r3, #0]
 8008ca8:	4bbb      	ldr	r3, [pc, #748]	@ (8008f98 <PC_show_Keys+0x418>)
 8008caa:	0011      	movs	r1, r2
 8008cac:	0018      	movs	r0, r3
 8008cae:	f7ff ff4c 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008cb2:	4bca      	ldr	r3, [pc, #808]	@ (8008fdc <PC_show_Keys+0x45c>)
 8008cb4:	48ca      	ldr	r0, [pc, #808]	@ (8008fe0 <PC_show_Keys+0x460>)
 8008cb6:	220c      	movs	r2, #12
 8008cb8:	0019      	movs	r1, r3
 8008cba:	f003 fc39 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008cbe:	4ac7      	ldr	r2, [pc, #796]	@ (8008fdc <PC_show_Keys+0x45c>)
 8008cc0:	4bb8      	ldr	r3, [pc, #736]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008cc2:	0011      	movs	r1, r2
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f7fc fb3d 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - dBA sensor id -----------------: %s\r\n", dBAConfigCmd, Buffer);
 8008cca:	4bb6      	ldr	r3, [pc, #728]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008ccc:	49c5      	ldr	r1, [pc, #788]	@ (8008fe4 <PC_show_Keys+0x464>)
 8008cce:	48b2      	ldr	r0, [pc, #712]	@ (8008f98 <PC_show_Keys+0x418>)
 8008cd0:	2205      	movs	r2, #5
 8008cd2:	f01d fc55 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cd6:	4bae      	ldr	r3, [pc, #696]	@ (8008f90 <PC_show_Keys+0x410>)
 8008cd8:	781a      	ldrb	r2, [r3, #0]
 8008cda:	4baf      	ldr	r3, [pc, #700]	@ (8008f98 <PC_show_Keys+0x418>)
 8008cdc:	0011      	movs	r1, r2
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f7ff ff33 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(dBcConfigAddr, dBcConfig, IdSize);
 8008ce4:	4bc0      	ldr	r3, [pc, #768]	@ (8008fe8 <PC_show_Keys+0x468>)
 8008ce6:	48c1      	ldr	r0, [pc, #772]	@ (8008fec <PC_show_Keys+0x46c>)
 8008ce8:	220c      	movs	r2, #12
 8008cea:	0019      	movs	r1, r3
 8008cec:	f003 fc20 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, dBcConfig);
 8008cf0:	4abd      	ldr	r2, [pc, #756]	@ (8008fe8 <PC_show_Keys+0x468>)
 8008cf2:	4bac      	ldr	r3, [pc, #688]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008cf4:	0011      	movs	r1, r2
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f7fc fb24 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - Sound dBc sensor id -----------: %s\r\n", dBcConfigCmd, Buffer);
 8008cfc:	4ba9      	ldr	r3, [pc, #676]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008cfe:	49bc      	ldr	r1, [pc, #752]	@ (8008ff0 <PC_show_Keys+0x470>)
 8008d00:	48a5      	ldr	r0, [pc, #660]	@ (8008f98 <PC_show_Keys+0x418>)
 8008d02:	2206      	movs	r2, #6
 8008d04:	f01d fc3c 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d08:	4ba1      	ldr	r3, [pc, #644]	@ (8008f90 <PC_show_Keys+0x410>)
 8008d0a:	781a      	ldrb	r2, [r3, #0]
 8008d0c:	4ba2      	ldr	r3, [pc, #648]	@ (8008f98 <PC_show_Keys+0x418>)
 8008d0e:	0011      	movs	r1, r2
 8008d10:	0018      	movs	r0, r3
 8008d12:	f7ff ff1a 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008d16:	4bb7      	ldr	r3, [pc, #732]	@ (8008ff4 <PC_show_Keys+0x474>)
 8008d18:	48b7      	ldr	r0, [pc, #732]	@ (8008ff8 <PC_show_Keys+0x478>)
 8008d1a:	220c      	movs	r2, #12
 8008d1c:	0019      	movs	r1, r3
 8008d1e:	f003 fc07 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008d22:	4ab4      	ldr	r2, [pc, #720]	@ (8008ff4 <PC_show_Keys+0x474>)
 8008d24:	4b9f      	ldr	r3, [pc, #636]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008d26:	0011      	movs	r1, r2
 8008d28:	0018      	movs	r0, r3
 8008d2a:	f7fc fb0b 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - PM2p5 sensor id ---------------: %s\r\n", PM2ConfigCmd, Buffer);
 8008d2e:	4b9d      	ldr	r3, [pc, #628]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008d30:	49b2      	ldr	r1, [pc, #712]	@ (8008ffc <PC_show_Keys+0x47c>)
 8008d32:	4899      	ldr	r0, [pc, #612]	@ (8008f98 <PC_show_Keys+0x418>)
 8008d34:	2207      	movs	r2, #7
 8008d36:	f01d fc23 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d3a:	4b95      	ldr	r3, [pc, #596]	@ (8008f90 <PC_show_Keys+0x410>)
 8008d3c:	781a      	ldrb	r2, [r3, #0]
 8008d3e:	4b96      	ldr	r3, [pc, #600]	@ (8008f98 <PC_show_Keys+0x418>)
 8008d40:	0011      	movs	r1, r2
 8008d42:	0018      	movs	r0, r3
 8008d44:	f7ff ff01 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008d48:	4bad      	ldr	r3, [pc, #692]	@ (8009000 <PC_show_Keys+0x480>)
 8008d4a:	48ae      	ldr	r0, [pc, #696]	@ (8009004 <PC_show_Keys+0x484>)
 8008d4c:	220c      	movs	r2, #12
 8008d4e:	0019      	movs	r1, r3
 8008d50:	f003 fbee 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008d54:	4aaa      	ldr	r2, [pc, #680]	@ (8009000 <PC_show_Keys+0x480>)
 8008d56:	4b93      	ldr	r3, [pc, #588]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008d58:	0011      	movs	r1, r2
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f7fc faf2 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - PM10 sensor id ----------------: %s\r\n", PM10ConfigCmd, Buffer);
 8008d60:	4b90      	ldr	r3, [pc, #576]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008d62:	49a9      	ldr	r1, [pc, #676]	@ (8009008 <PC_show_Keys+0x488>)
 8008d64:	488c      	ldr	r0, [pc, #560]	@ (8008f98 <PC_show_Keys+0x418>)
 8008d66:	2208      	movs	r2, #8
 8008d68:	f01d fc0a 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d6c:	4b88      	ldr	r3, [pc, #544]	@ (8008f90 <PC_show_Keys+0x410>)
 8008d6e:	781a      	ldrb	r2, [r3, #0]
 8008d70:	4b89      	ldr	r3, [pc, #548]	@ (8008f98 <PC_show_Keys+0x418>)
 8008d72:	0011      	movs	r1, r2
 8008d74:	0018      	movs	r0, r3
 8008d76:	f7ff fee8 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008d7a:	4ba4      	ldr	r3, [pc, #656]	@ (800900c <PC_show_Keys+0x48c>)
 8008d7c:	48a4      	ldr	r0, [pc, #656]	@ (8009010 <PC_show_Keys+0x490>)
 8008d7e:	220c      	movs	r2, #12
 8008d80:	0019      	movs	r1, r3
 8008d82:	f003 fbd5 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008d86:	4aa1      	ldr	r2, [pc, #644]	@ (800900c <PC_show_Keys+0x48c>)
 8008d88:	4b86      	ldr	r3, [pc, #536]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008d8a:	0011      	movs	r1, r2
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f7fc fad9 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - Battery voltage sensor id -----: %s\r\n", BatVoltConfigCmd, Buffer);
 8008d92:	4b84      	ldr	r3, [pc, #528]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008d94:	499f      	ldr	r1, [pc, #636]	@ (8009014 <PC_show_Keys+0x494>)
 8008d96:	4880      	ldr	r0, [pc, #512]	@ (8008f98 <PC_show_Keys+0x418>)
 8008d98:	2209      	movs	r2, #9
 8008d9a:	f01d fbf1 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8008f90 <PC_show_Keys+0x410>)
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	4b7d      	ldr	r3, [pc, #500]	@ (8008f98 <PC_show_Keys+0x418>)
 8008da4:	0011      	movs	r1, r2
 8008da6:	0018      	movs	r0, r3
 8008da8:	f7ff fecf 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008dac:	4b9a      	ldr	r3, [pc, #616]	@ (8009018 <PC_show_Keys+0x498>)
 8008dae:	489b      	ldr	r0, [pc, #620]	@ (800901c <PC_show_Keys+0x49c>)
 8008db0:	220c      	movs	r2, #12
 8008db2:	0019      	movs	r1, r3
 8008db4:	f003 fbbc 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008db8:	4a97      	ldr	r2, [pc, #604]	@ (8009018 <PC_show_Keys+0x498>)
 8008dba:	4b7a      	ldr	r3, [pc, #488]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008dbc:	0011      	movs	r1, r2
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7fc fac0 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - Solar voltage sensor id -------: %s\r\n", SolVoltConfigCmd, Buffer);
 8008dc4:	4b77      	ldr	r3, [pc, #476]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008dc6:	4996      	ldr	r1, [pc, #600]	@ (8009020 <PC_show_Keys+0x4a0>)
 8008dc8:	4873      	ldr	r0, [pc, #460]	@ (8008f98 <PC_show_Keys+0x418>)
 8008dca:	220a      	movs	r2, #10
 8008dcc:	f01d fbd8 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8008f90 <PC_show_Keys+0x410>)
 8008dd2:	781a      	ldrb	r2, [r3, #0]
 8008dd4:	4b70      	ldr	r3, [pc, #448]	@ (8008f98 <PC_show_Keys+0x418>)
 8008dd6:	0011      	movs	r1, r2
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f7ff feb6 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008dde:	4b91      	ldr	r3, [pc, #580]	@ (8009024 <PC_show_Keys+0x4a4>)
 8008de0:	4891      	ldr	r0, [pc, #580]	@ (8009028 <PC_show_Keys+0x4a8>)
 8008de2:	220c      	movs	r2, #12
 8008de4:	0019      	movs	r1, r3
 8008de6:	f003 fba3 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008dea:	4a8e      	ldr	r2, [pc, #568]	@ (8009024 <PC_show_Keys+0x4a4>)
 8008dec:	4b6d      	ldr	r3, [pc, #436]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008dee:	0011      	movs	r1, r2
 8008df0:	0018      	movs	r0, r3
 8008df2:	f7fc faa7 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - Charger status (not used) -----: %s\r\n", ChargerStatConfigCmd, Buffer);
 8008df6:	4b6b      	ldr	r3, [pc, #428]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008df8:	498c      	ldr	r1, [pc, #560]	@ (800902c <PC_show_Keys+0x4ac>)
 8008dfa:	4867      	ldr	r0, [pc, #412]	@ (8008f98 <PC_show_Keys+0x418>)
 8008dfc:	220b      	movs	r2, #11
 8008dfe:	f01d fbbf 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e02:	4b63      	ldr	r3, [pc, #396]	@ (8008f90 <PC_show_Keys+0x410>)
 8008e04:	781a      	ldrb	r2, [r3, #0]
 8008e06:	4b64      	ldr	r3, [pc, #400]	@ (8008f98 <PC_show_Keys+0x418>)
 8008e08:	0011      	movs	r1, r2
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	f7ff fe9d 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008e10:	4b87      	ldr	r3, [pc, #540]	@ (8009030 <PC_show_Keys+0x4b0>)
 8008e12:	4888      	ldr	r0, [pc, #544]	@ (8009034 <PC_show_Keys+0x4b4>)
 8008e14:	2220      	movs	r2, #32
 8008e16:	0019      	movs	r1, r3
 8008e18:	f003 fb8a 	bl	800c530 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Box name ----------------------: ", CustomNameConfigCmd);
 8008e1c:	4986      	ldr	r1, [pc, #536]	@ (8009038 <PC_show_Keys+0x4b8>)
 8008e1e:	4b5e      	ldr	r3, [pc, #376]	@ (8008f98 <PC_show_Keys+0x418>)
 8008e20:	220c      	movs	r2, #12
 8008e22:	0018      	movs	r0, r3
 8008e24:	f01d fbac 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e28:	4b59      	ldr	r3, [pc, #356]	@ (8008f90 <PC_show_Keys+0x410>)
 8008e2a:	781a      	ldrb	r2, [r3, #0]
 8008e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8008f98 <PC_show_Keys+0x418>)
 8008e2e:	0011      	movs	r1, r2
 8008e30:	0018      	movs	r0, r3
 8008e32:	f7ff fe8a 	bl	8008b4a <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008e36:	4a7e      	ldr	r2, [pc, #504]	@ (8009030 <PC_show_Keys+0x4b0>)
 8008e38:	4980      	ldr	r1, [pc, #512]	@ (800903c <PC_show_Keys+0x4bc>)
 8008e3a:	4b57      	ldr	r3, [pc, #348]	@ (8008f98 <PC_show_Keys+0x418>)
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f01d fb9f 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e42:	4b53      	ldr	r3, [pc, #332]	@ (8008f90 <PC_show_Keys+0x410>)
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	4b54      	ldr	r3, [pc, #336]	@ (8008f98 <PC_show_Keys+0x418>)
 8008e48:	0011      	movs	r1, r2
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	f7ff fe7d 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(SSIDConfigAddr, SSIDConfig, SSIDMaxLength);
 8008e50:	4b7b      	ldr	r3, [pc, #492]	@ (8009040 <PC_show_Keys+0x4c0>)
 8008e52:	487c      	ldr	r0, [pc, #496]	@ (8009044 <PC_show_Keys+0x4c4>)
 8008e54:	2220      	movs	r2, #32
 8008e56:	0019      	movs	r1, r3
 8008e58:	f003 fb6a 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SSIDConfig);
 8008e5c:	4a78      	ldr	r2, [pc, #480]	@ (8009040 <PC_show_Keys+0x4c0>)
 8008e5e:	4b51      	ldr	r3, [pc, #324]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008e60:	0011      	movs	r1, r2
 8008e62:	0018      	movs	r0, r3
 8008e64:	f7fc fa6e 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - SSID name ---------------------: ", SSIDConfigCmd);
 8008e68:	4977      	ldr	r1, [pc, #476]	@ (8009048 <PC_show_Keys+0x4c8>)
 8008e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8008f98 <PC_show_Keys+0x418>)
 8008e6c:	220d      	movs	r2, #13
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f01d fb86 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e74:	4b46      	ldr	r3, [pc, #280]	@ (8008f90 <PC_show_Keys+0x410>)
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	4b47      	ldr	r3, [pc, #284]	@ (8008f98 <PC_show_Keys+0x418>)
 8008e7a:	0011      	movs	r1, r2
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f7ff fe64 	bl	8008b4a <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SSIDConfig);  // probably too long to held in same buffer
 8008e82:	4a6f      	ldr	r2, [pc, #444]	@ (8009040 <PC_show_Keys+0x4c0>)
 8008e84:	496d      	ldr	r1, [pc, #436]	@ (800903c <PC_show_Keys+0x4bc>)
 8008e86:	4b44      	ldr	r3, [pc, #272]	@ (8008f98 <PC_show_Keys+0x418>)
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f01d fb79 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e8e:	4b40      	ldr	r3, [pc, #256]	@ (8008f90 <PC_show_Keys+0x410>)
 8008e90:	781a      	ldrb	r2, [r3, #0]
 8008e92:	4b41      	ldr	r3, [pc, #260]	@ (8008f98 <PC_show_Keys+0x418>)
 8008e94:	0011      	movs	r1, r2
 8008e96:	0018      	movs	r0, r3
 8008e98:	f7ff fe57 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(pwdConfigAddr, pwdConfig, pwdMaxLength);
 8008e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800904c <PC_show_Keys+0x4cc>)
 8008e9e:	486c      	ldr	r0, [pc, #432]	@ (8009050 <PC_show_Keys+0x4d0>)
 8008ea0:	2240      	movs	r2, #64	@ 0x40
 8008ea2:	0019      	movs	r1, r3
 8008ea4:	f003 fb44 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, pwdConfig);
 8008ea8:	4a68      	ldr	r2, [pc, #416]	@ (800904c <PC_show_Keys+0x4cc>)
 8008eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008eac:	0011      	movs	r1, r2
 8008eae:	0018      	movs	r0, r3
 8008eb0:	f7fc fa48 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - WiFi password -----------------: ", PasswordConfigCmd);
 8008eb4:	4967      	ldr	r1, [pc, #412]	@ (8009054 <PC_show_Keys+0x4d4>)
 8008eb6:	4b38      	ldr	r3, [pc, #224]	@ (8008f98 <PC_show_Keys+0x418>)
 8008eb8:	220e      	movs	r2, #14
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f01d fb60 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ec0:	4b33      	ldr	r3, [pc, #204]	@ (8008f90 <PC_show_Keys+0x410>)
 8008ec2:	781a      	ldrb	r2, [r3, #0]
 8008ec4:	4b34      	ldr	r3, [pc, #208]	@ (8008f98 <PC_show_Keys+0x418>)
 8008ec6:	0011      	movs	r1, r2
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f7ff fe3e 	bl	8008b4a <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)pwdConfig);  // probably too long to held in same buffer
 8008ece:	4a5f      	ldr	r2, [pc, #380]	@ (800904c <PC_show_Keys+0x4cc>)
 8008ed0:	495a      	ldr	r1, [pc, #360]	@ (800903c <PC_show_Keys+0x4bc>)
 8008ed2:	4b31      	ldr	r3, [pc, #196]	@ (8008f98 <PC_show_Keys+0x418>)
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f01d fb53 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008eda:	4b2d      	ldr	r3, [pc, #180]	@ (8008f90 <PC_show_Keys+0x410>)
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	4b2e      	ldr	r3, [pc, #184]	@ (8008f98 <PC_show_Keys+0x418>)
 8008ee0:	0011      	movs	r1, r2
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f7ff fe31 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008ee8:	4b5b      	ldr	r3, [pc, #364]	@ (8009058 <PC_show_Keys+0x4d8>)
 8008eea:	485c      	ldr	r0, [pc, #368]	@ (800905c <PC_show_Keys+0x4dc>)
 8008eec:	220c      	movs	r2, #12
 8008eee:	0019      	movs	r1, r3
 8008ef0:	f003 fb1e 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008ef4:	4a58      	ldr	r2, [pc, #352]	@ (8009058 <PC_show_Keys+0x4d8>)
 8008ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008ef8:	0011      	movs	r1, r2
 8008efa:	0018      	movs	r0, r3
 8008efc:	f7fc fa22 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Temperature sensor id ---: %s\r\n", AHTTempConfigCmd, Buffer);
 8008f00:	4b28      	ldr	r3, [pc, #160]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008f02:	4957      	ldr	r1, [pc, #348]	@ (8009060 <PC_show_Keys+0x4e0>)
 8008f04:	4824      	ldr	r0, [pc, #144]	@ (8008f98 <PC_show_Keys+0x418>)
 8008f06:	220f      	movs	r2, #15
 8008f08:	f01d fb3a 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f0c:	4b20      	ldr	r3, [pc, #128]	@ (8008f90 <PC_show_Keys+0x410>)
 8008f0e:	781a      	ldrb	r2, [r3, #0]
 8008f10:	4b21      	ldr	r3, [pc, #132]	@ (8008f98 <PC_show_Keys+0x418>)
 8008f12:	0011      	movs	r1, r2
 8008f14:	0018      	movs	r0, r3
 8008f16:	f7ff fe18 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008f1a:	4b52      	ldr	r3, [pc, #328]	@ (8009064 <PC_show_Keys+0x4e4>)
 8008f1c:	4852      	ldr	r0, [pc, #328]	@ (8009068 <PC_show_Keys+0x4e8>)
 8008f1e:	220c      	movs	r2, #12
 8008f20:	0019      	movs	r1, r3
 8008f22:	f003 fb05 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008f26:	4a4f      	ldr	r2, [pc, #316]	@ (8009064 <PC_show_Keys+0x4e4>)
 8008f28:	4b1e      	ldr	r3, [pc, #120]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008f2a:	0011      	movs	r1, r2
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	f7fc fa09 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Humidity sensor id ------: %s\r\n", AHTHumidConfigCmd, Buffer);
 8008f32:	4b1c      	ldr	r3, [pc, #112]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008f34:	494d      	ldr	r1, [pc, #308]	@ (800906c <PC_show_Keys+0x4ec>)
 8008f36:	4818      	ldr	r0, [pc, #96]	@ (8008f98 <PC_show_Keys+0x418>)
 8008f38:	2210      	movs	r2, #16
 8008f3a:	f01d fb21 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f3e:	4b14      	ldr	r3, [pc, #80]	@ (8008f90 <PC_show_Keys+0x410>)
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	4b15      	ldr	r3, [pc, #84]	@ (8008f98 <PC_show_Keys+0x418>)
 8008f44:	0011      	movs	r1, r2
 8008f46:	0018      	movs	r0, r3
 8008f48:	f7ff fdff 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008f4c:	4b48      	ldr	r3, [pc, #288]	@ (8009070 <PC_show_Keys+0x4f0>)
 8008f4e:	4849      	ldr	r0, [pc, #292]	@ (8009074 <PC_show_Keys+0x4f4>)
 8008f50:	220c      	movs	r2, #12
 8008f52:	0019      	movs	r1, r3
 8008f54:	f003 faec 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008f58:	4a45      	ldr	r2, [pc, #276]	@ (8009070 <PC_show_Keys+0x4f0>)
 8008f5a:	4b12      	ldr	r3, [pc, #72]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008f5c:	0011      	movs	r1, r2
 8008f5e:	0018      	movs	r0, r3
 8008f60:	f7fc f9f0 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Temperature sensor id --: %s\r\n", BMPTempConfigCmd, Buffer);
 8008f64:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa4 <PC_show_Keys+0x424>)
 8008f66:	4944      	ldr	r1, [pc, #272]	@ (8009078 <PC_show_Keys+0x4f8>)
 8008f68:	480b      	ldr	r0, [pc, #44]	@ (8008f98 <PC_show_Keys+0x418>)
 8008f6a:	2211      	movs	r2, #17
 8008f6c:	f01d fb08 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f70:	4b07      	ldr	r3, [pc, #28]	@ (8008f90 <PC_show_Keys+0x410>)
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	4b08      	ldr	r3, [pc, #32]	@ (8008f98 <PC_show_Keys+0x418>)
 8008f76:	0011      	movs	r1, r2
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f7ff fde6 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800907c <PC_show_Keys+0x4fc>)
 8008f80:	483f      	ldr	r0, [pc, #252]	@ (8009080 <PC_show_Keys+0x500>)
 8008f82:	220c      	movs	r2, #12
 8008f84:	0019      	movs	r1, r3
 8008f86:	f003 fad3 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008f8a:	4a3c      	ldr	r2, [pc, #240]	@ (800907c <PC_show_Keys+0x4fc>)
 8008f8c:	e07a      	b.n	8009084 <PC_show_Keys+0x504>
 8008f8e:	46c0      	nop			@ (mov r8, r8)
 8008f90:	20000b61 	.word	0x20000b61
 8008f94:	0802bab4 	.word	0x0802bab4
 8008f98:	20000b64 	.word	0x20000b64
 8008f9c:	20000bac 	.word	0x20000bac
 8008fa0:	08080000 	.word	0x08080000
 8008fa4:	20000bb8 	.word	0x20000bb8
 8008fa8:	0802bad4 	.word	0x0802bad4
 8008fac:	20000bd4 	.word	0x20000bd4
 8008fb0:	0808000c 	.word	0x0808000c
 8008fb4:	0802bb04 	.word	0x0802bb04
 8008fb8:	20000be0 	.word	0x20000be0
 8008fbc:	08080018 	.word	0x08080018
 8008fc0:	0802bb34 	.word	0x0802bb34
 8008fc4:	20000bec 	.word	0x20000bec
 8008fc8:	08080024 	.word	0x08080024
 8008fcc:	0802bb64 	.word	0x0802bb64
 8008fd0:	20000bf8 	.word	0x20000bf8
 8008fd4:	08080030 	.word	0x08080030
 8008fd8:	0802bb94 	.word	0x0802bb94
 8008fdc:	20000c04 	.word	0x20000c04
 8008fe0:	08080048 	.word	0x08080048
 8008fe4:	0802bbc4 	.word	0x0802bbc4
 8008fe8:	20000c10 	.word	0x20000c10
 8008fec:	0808003c 	.word	0x0808003c
 8008ff0:	0802bbf4 	.word	0x0802bbf4
 8008ff4:	20000c1c 	.word	0x20000c1c
 8008ff8:	08080054 	.word	0x08080054
 8008ffc:	0802bc24 	.word	0x0802bc24
 8009000:	20000c28 	.word	0x20000c28
 8009004:	08080060 	.word	0x08080060
 8009008:	0802bc54 	.word	0x0802bc54
 800900c:	20000c34 	.word	0x20000c34
 8009010:	0808006c 	.word	0x0808006c
 8009014:	0802bc84 	.word	0x0802bc84
 8009018:	20000c40 	.word	0x20000c40
 800901c:	08080078 	.word	0x08080078
 8009020:	0802bcb4 	.word	0x0802bcb4
 8009024:	20000c4c 	.word	0x20000c4c
 8009028:	08080084 	.word	0x08080084
 800902c:	0802bce4 	.word	0x0802bce4
 8009030:	20000c58 	.word	0x20000c58
 8009034:	08080090 	.word	0x08080090
 8009038:	0802bd14 	.word	0x0802bd14
 800903c:	0802bd40 	.word	0x0802bd40
 8009040:	20000c78 	.word	0x20000c78
 8009044:	08080200 	.word	0x08080200
 8009048:	0802bd48 	.word	0x0802bd48
 800904c:	20000c98 	.word	0x20000c98
 8009050:	08080220 	.word	0x08080220
 8009054:	0802bd74 	.word	0x0802bd74
 8009058:	20000cd8 	.word	0x20000cd8
 800905c:	080800c8 	.word	0x080800c8
 8009060:	0802bda0 	.word	0x0802bda0
 8009064:	20000ce4 	.word	0x20000ce4
 8009068:	080800d4 	.word	0x080800d4
 800906c:	0802bdd0 	.word	0x0802bdd0
 8009070:	20000cf0 	.word	0x20000cf0
 8009074:	080800e0 	.word	0x080800e0
 8009078:	0802be00 	.word	0x0802be00
 800907c:	20000cfc 	.word	0x20000cfc
 8009080:	080800ec 	.word	0x080800ec
 8009084:	4be5      	ldr	r3, [pc, #916]	@ (800941c <PC_show_Keys+0x89c>)
 8009086:	0011      	movs	r1, r2
 8009088:	0018      	movs	r0, r3
 800908a:	f7fc f95b 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 AQI sensor id ----------: %s\r\n", ENSAQIConfigCmd, Buffer);
 800908e:	4be3      	ldr	r3, [pc, #908]	@ (800941c <PC_show_Keys+0x89c>)
 8009090:	49e3      	ldr	r1, [pc, #908]	@ (8009420 <PC_show_Keys+0x8a0>)
 8009092:	48e4      	ldr	r0, [pc, #912]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009094:	2212      	movs	r2, #18
 8009096:	f01d fa73 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800909a:	4be3      	ldr	r3, [pc, #908]	@ (8009428 <PC_show_Keys+0x8a8>)
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	4be1      	ldr	r3, [pc, #900]	@ (8009424 <PC_show_Keys+0x8a4>)
 80090a0:	0011      	movs	r1, r2
 80090a2:	0018      	movs	r0, r3
 80090a4:	f7ff fd51 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 80090a8:	4be0      	ldr	r3, [pc, #896]	@ (800942c <PC_show_Keys+0x8ac>)
 80090aa:	48e1      	ldr	r0, [pc, #900]	@ (8009430 <PC_show_Keys+0x8b0>)
 80090ac:	220c      	movs	r2, #12
 80090ae:	0019      	movs	r1, r3
 80090b0:	f003 fa3e 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 80090b4:	4add      	ldr	r2, [pc, #884]	@ (800942c <PC_show_Keys+0x8ac>)
 80090b6:	4bd9      	ldr	r3, [pc, #868]	@ (800941c <PC_show_Keys+0x89c>)
 80090b8:	0011      	movs	r1, r2
 80090ba:	0018      	movs	r0, r3
 80090bc:	f7fc f942 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 TVOC sensor id ---------: %s\r\n", ENSTVOCConfigCmd, Buffer);
 80090c0:	4bd6      	ldr	r3, [pc, #856]	@ (800941c <PC_show_Keys+0x89c>)
 80090c2:	49dc      	ldr	r1, [pc, #880]	@ (8009434 <PC_show_Keys+0x8b4>)
 80090c4:	48d7      	ldr	r0, [pc, #860]	@ (8009424 <PC_show_Keys+0x8a4>)
 80090c6:	2213      	movs	r2, #19
 80090c8:	f01d fa5a 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090cc:	4bd6      	ldr	r3, [pc, #856]	@ (8009428 <PC_show_Keys+0x8a8>)
 80090ce:	781a      	ldrb	r2, [r3, #0]
 80090d0:	4bd4      	ldr	r3, [pc, #848]	@ (8009424 <PC_show_Keys+0x8a4>)
 80090d2:	0011      	movs	r1, r2
 80090d4:	0018      	movs	r0, r3
 80090d6:	f7ff fd38 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 80090da:	4bd7      	ldr	r3, [pc, #860]	@ (8009438 <PC_show_Keys+0x8b8>)
 80090dc:	48d7      	ldr	r0, [pc, #860]	@ (800943c <PC_show_Keys+0x8bc>)
 80090de:	220c      	movs	r2, #12
 80090e0:	0019      	movs	r1, r3
 80090e2:	f003 fa25 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 80090e6:	4ad4      	ldr	r2, [pc, #848]	@ (8009438 <PC_show_Keys+0x8b8>)
 80090e8:	4bcc      	ldr	r3, [pc, #816]	@ (800941c <PC_show_Keys+0x89c>)
 80090ea:	0011      	movs	r1, r2
 80090ec:	0018      	movs	r0, r3
 80090ee:	f7fc f929 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 eCO2 sensor id ---------: %s\r\n", ENSeCO2ConfigCmd, Buffer);
 80090f2:	4bca      	ldr	r3, [pc, #808]	@ (800941c <PC_show_Keys+0x89c>)
 80090f4:	49d2      	ldr	r1, [pc, #840]	@ (8009440 <PC_show_Keys+0x8c0>)
 80090f6:	48cb      	ldr	r0, [pc, #812]	@ (8009424 <PC_show_Keys+0x8a4>)
 80090f8:	2214      	movs	r2, #20
 80090fa:	f01d fa41 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090fe:	4bca      	ldr	r3, [pc, #808]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	4bc8      	ldr	r3, [pc, #800]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009104:	0011      	movs	r1, r2
 8009106:	0018      	movs	r0, r3
 8009108:	f7ff fd1f 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 800910c:	4bcd      	ldr	r3, [pc, #820]	@ (8009444 <PC_show_Keys+0x8c4>)
 800910e:	48ce      	ldr	r0, [pc, #824]	@ (8009448 <PC_show_Keys+0x8c8>)
 8009110:	220c      	movs	r2, #12
 8009112:	0019      	movs	r1, r3
 8009114:	f003 fa0c 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 8009118:	4aca      	ldr	r2, [pc, #808]	@ (8009444 <PC_show_Keys+0x8c4>)
 800911a:	4bc0      	ldr	r3, [pc, #768]	@ (800941c <PC_show_Keys+0x89c>)
 800911c:	0011      	movs	r1, r2
 800911e:	0018      	movs	r0, r3
 8009120:	f7fc f910 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - PM1p0 sensor id ---------------: %s\r\n", PM1ConfigCmd, Buffer);
 8009124:	4bbd      	ldr	r3, [pc, #756]	@ (800941c <PC_show_Keys+0x89c>)
 8009126:	49c9      	ldr	r1, [pc, #804]	@ (800944c <PC_show_Keys+0x8cc>)
 8009128:	48be      	ldr	r0, [pc, #760]	@ (8009424 <PC_show_Keys+0x8a4>)
 800912a:	2215      	movs	r2, #21
 800912c:	f01d fa28 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009130:	4bbd      	ldr	r3, [pc, #756]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	4bbb      	ldr	r3, [pc, #748]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009136:	0011      	movs	r1, r2
 8009138:	0018      	movs	r0, r3
 800913a:	f7ff fd06 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 800913e:	4bc4      	ldr	r3, [pc, #784]	@ (8009450 <PC_show_Keys+0x8d0>)
 8009140:	48c4      	ldr	r0, [pc, #784]	@ (8009454 <PC_show_Keys+0x8d4>)
 8009142:	220c      	movs	r2, #12
 8009144:	0019      	movs	r1, r3
 8009146:	f003 f9f3 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 800914a:	4ac1      	ldr	r2, [pc, #772]	@ (8009450 <PC_show_Keys+0x8d0>)
 800914c:	4bb3      	ldr	r3, [pc, #716]	@ (800941c <PC_show_Keys+0x89c>)
 800914e:	0011      	movs	r1, r2
 8009150:	0018      	movs	r0, r3
 8009152:	f7fc f8f7 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - PM4p0 sensor id ---------------: %s\r\n", PM4ConfigCmd, Buffer);
 8009156:	4bb1      	ldr	r3, [pc, #708]	@ (800941c <PC_show_Keys+0x89c>)
 8009158:	49bf      	ldr	r1, [pc, #764]	@ (8009458 <PC_show_Keys+0x8d8>)
 800915a:	48b2      	ldr	r0, [pc, #712]	@ (8009424 <PC_show_Keys+0x8a4>)
 800915c:	2216      	movs	r2, #22
 800915e:	f01d fa0f 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009162:	4bb1      	ldr	r3, [pc, #708]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009164:	781a      	ldrb	r2, [r3, #0]
 8009166:	4baf      	ldr	r3, [pc, #700]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009168:	0011      	movs	r1, r2
 800916a:	0018      	movs	r0, r3
 800916c:	f7ff fced 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8009170:	4bba      	ldr	r3, [pc, #744]	@ (800945c <PC_show_Keys+0x8dc>)
 8009172:	48bb      	ldr	r0, [pc, #748]	@ (8009460 <PC_show_Keys+0x8e0>)
 8009174:	220c      	movs	r2, #12
 8009176:	0019      	movs	r1, r3
 8009178:	f003 f9da 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 800917c:	4ab7      	ldr	r2, [pc, #732]	@ (800945c <PC_show_Keys+0x8dc>)
 800917e:	4ba7      	ldr	r3, [pc, #668]	@ (800941c <PC_show_Keys+0x89c>)
 8009180:	0011      	movs	r1, r2
 8009182:	0018      	movs	r0, r3
 8009184:	f7fc f8de 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Temperature sensor id : %s\r\n", SEN55TempConfigCmd, Buffer);
 8009188:	4ba4      	ldr	r3, [pc, #656]	@ (800941c <PC_show_Keys+0x89c>)
 800918a:	49b6      	ldr	r1, [pc, #728]	@ (8009464 <PC_show_Keys+0x8e4>)
 800918c:	48a5      	ldr	r0, [pc, #660]	@ (8009424 <PC_show_Keys+0x8a4>)
 800918e:	2217      	movs	r2, #23
 8009190:	f01d f9f6 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009194:	4ba4      	ldr	r3, [pc, #656]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	4ba2      	ldr	r3, [pc, #648]	@ (8009424 <PC_show_Keys+0x8a4>)
 800919a:	0011      	movs	r1, r2
 800919c:	0018      	movs	r0, r3
 800919e:	f7ff fcd4 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 80091a2:	4bb1      	ldr	r3, [pc, #708]	@ (8009468 <PC_show_Keys+0x8e8>)
 80091a4:	48b1      	ldr	r0, [pc, #708]	@ (800946c <PC_show_Keys+0x8ec>)
 80091a6:	220c      	movs	r2, #12
 80091a8:	0019      	movs	r1, r3
 80091aa:	f003 f9c1 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 80091ae:	4aae      	ldr	r2, [pc, #696]	@ (8009468 <PC_show_Keys+0x8e8>)
 80091b0:	4b9a      	ldr	r3, [pc, #616]	@ (800941c <PC_show_Keys+0x89c>)
 80091b2:	0011      	movs	r1, r2
 80091b4:	0018      	movs	r0, r3
 80091b6:	f7fc f8c5 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Humidity sensor id ---: %s\r\n", SEN55HumidConfigCmd, Buffer);
 80091ba:	4b98      	ldr	r3, [pc, #608]	@ (800941c <PC_show_Keys+0x89c>)
 80091bc:	49ac      	ldr	r1, [pc, #688]	@ (8009470 <PC_show_Keys+0x8f0>)
 80091be:	4899      	ldr	r0, [pc, #612]	@ (8009424 <PC_show_Keys+0x8a4>)
 80091c0:	2218      	movs	r2, #24
 80091c2:	f01d f9dd 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091c6:	4b98      	ldr	r3, [pc, #608]	@ (8009428 <PC_show_Keys+0x8a8>)
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	4b96      	ldr	r3, [pc, #600]	@ (8009424 <PC_show_Keys+0x8a4>)
 80091cc:	0011      	movs	r1, r2
 80091ce:	0018      	movs	r0, r3
 80091d0:	f7ff fcbb 	bl	8008b4a <PC_selectout>

#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 80091d4:	4ba7      	ldr	r3, [pc, #668]	@ (8009474 <PC_show_Keys+0x8f4>)
 80091d6:	48a8      	ldr	r0, [pc, #672]	@ (8009478 <PC_show_Keys+0x8f8>)
 80091d8:	2230      	movs	r2, #48	@ 0x30
 80091da:	0019      	movs	r1, r3
 80091dc:	f003 f9a8 	bl	800c530 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send from name ---------: ", SendFromNameConfigCmd);
 80091e0:	49a6      	ldr	r1, [pc, #664]	@ (800947c <PC_show_Keys+0x8fc>)
 80091e2:	4b90      	ldr	r3, [pc, #576]	@ (8009424 <PC_show_Keys+0x8a4>)
 80091e4:	2219      	movs	r2, #25
 80091e6:	0018      	movs	r0, r3
 80091e8:	f01d f9ca 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091ec:	4b8e      	ldr	r3, [pc, #568]	@ (8009428 <PC_show_Keys+0x8a8>)
 80091ee:	781a      	ldrb	r2, [r3, #0]
 80091f0:	4b8c      	ldr	r3, [pc, #560]	@ (8009424 <PC_show_Keys+0x8a4>)
 80091f2:	0011      	movs	r1, r2
 80091f4:	0018      	movs	r0, r3
 80091f6:	f7ff fca8 	bl	8008b4a <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 80091fa:	4a9e      	ldr	r2, [pc, #632]	@ (8009474 <PC_show_Keys+0x8f4>)
 80091fc:	49a0      	ldr	r1, [pc, #640]	@ (8009480 <PC_show_Keys+0x900>)
 80091fe:	4b89      	ldr	r3, [pc, #548]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009200:	0018      	movs	r0, r3
 8009202:	f01d f9bd 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009206:	4b88      	ldr	r3, [pc, #544]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	4b86      	ldr	r3, [pc, #536]	@ (8009424 <PC_show_Keys+0x8a4>)
 800920c:	0011      	movs	r1, r2
 800920e:	0018      	movs	r0, r3
 8009210:	f7ff fc9b 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 8009214:	4b9b      	ldr	r3, [pc, #620]	@ (8009484 <PC_show_Keys+0x904>)
 8009216:	489c      	ldr	r0, [pc, #624]	@ (8009488 <PC_show_Keys+0x908>)
 8009218:	2230      	movs	r2, #48	@ 0x30
 800921a:	0019      	movs	r1, r3
 800921c:	f003 f988 	bl	800c530 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send to name -----------: ", SendToNameConfigCmd);
 8009220:	499a      	ldr	r1, [pc, #616]	@ (800948c <PC_show_Keys+0x90c>)
 8009222:	4b80      	ldr	r3, [pc, #512]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009224:	221a      	movs	r2, #26
 8009226:	0018      	movs	r0, r3
 8009228:	f01d f9aa 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800922c:	4b7e      	ldr	r3, [pc, #504]	@ (8009428 <PC_show_Keys+0x8a8>)
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	4b7c      	ldr	r3, [pc, #496]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009232:	0011      	movs	r1, r2
 8009234:	0018      	movs	r0, r3
 8009236:	f7ff fc88 	bl	8008b4a <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 800923a:	4a92      	ldr	r2, [pc, #584]	@ (8009484 <PC_show_Keys+0x904>)
 800923c:	4990      	ldr	r1, [pc, #576]	@ (8009480 <PC_show_Keys+0x900>)
 800923e:	4b79      	ldr	r3, [pc, #484]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009240:	0018      	movs	r0, r3
 8009242:	f01d f99d 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009246:	4b78      	ldr	r3, [pc, #480]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009248:	781a      	ldrb	r2, [r3, #0]
 800924a:	4b76      	ldr	r3, [pc, #472]	@ (8009424 <PC_show_Keys+0x8a4>)
 800924c:	0011      	movs	r1, r2
 800924e:	0018      	movs	r0, r3
 8009250:	f7ff fc7b 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8009254:	4b8e      	ldr	r3, [pc, #568]	@ (8009490 <PC_show_Keys+0x910>)
 8009256:	488f      	ldr	r0, [pc, #572]	@ (8009494 <PC_show_Keys+0x914>)
 8009258:	2230      	movs	r2, #48	@ 0x30
 800925a:	0019      	movs	r1, r3
 800925c:	f003 f968 	bl	800c530 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored SMTP2go API key --------: ", MailAPIKeyConfigCmd);
 8009260:	498d      	ldr	r1, [pc, #564]	@ (8009498 <PC_show_Keys+0x918>)
 8009262:	4b70      	ldr	r3, [pc, #448]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009264:	221b      	movs	r2, #27
 8009266:	0018      	movs	r0, r3
 8009268:	f01d f98a 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800926c:	4b6e      	ldr	r3, [pc, #440]	@ (8009428 <PC_show_Keys+0x8a8>)
 800926e:	781a      	ldrb	r2, [r3, #0]
 8009270:	4b6c      	ldr	r3, [pc, #432]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009272:	0011      	movs	r1, r2
 8009274:	0018      	movs	r0, r3
 8009276:	f7ff fc68 	bl	8008b4a <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 800927a:	4a85      	ldr	r2, [pc, #532]	@ (8009490 <PC_show_Keys+0x910>)
 800927c:	4980      	ldr	r1, [pc, #512]	@ (8009480 <PC_show_Keys+0x900>)
 800927e:	4b69      	ldr	r3, [pc, #420]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009280:	0018      	movs	r0, r3
 8009282:	f01d f97d 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009286:	4b68      	ldr	r3, [pc, #416]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009288:	781a      	ldrb	r2, [r3, #0]
 800928a:	4b66      	ldr	r3, [pc, #408]	@ (8009424 <PC_show_Keys+0x8a4>)
 800928c:	0011      	movs	r1, r2
 800928e:	0018      	movs	r0, r3
 8009290:	f7ff fc5b 	bl	8008b4a <PC_selectout>
#endif

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8009294:	4b81      	ldr	r3, [pc, #516]	@ (800949c <PC_show_Keys+0x91c>)
 8009296:	4882      	ldr	r0, [pc, #520]	@ (80094a0 <PC_show_Keys+0x920>)
 8009298:	220c      	movs	r2, #12
 800929a:	0019      	movs	r1, r3
 800929c:	f003 f948 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 80092a0:	4a7e      	ldr	r2, [pc, #504]	@ (800949c <PC_show_Keys+0x91c>)
 80092a2:	4b5e      	ldr	r3, [pc, #376]	@ (800941c <PC_show_Keys+0x89c>)
 80092a4:	0011      	movs	r1, r2
 80092a6:	0018      	movs	r0, r3
 80092a8:	f7fc f84c 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - Air pressure sensor id --------: %s\r\n", hPaConfigCmd, Buffer);
 80092ac:	4b5b      	ldr	r3, [pc, #364]	@ (800941c <PC_show_Keys+0x89c>)
 80092ae:	497d      	ldr	r1, [pc, #500]	@ (80094a4 <PC_show_Keys+0x924>)
 80092b0:	485c      	ldr	r0, [pc, #368]	@ (8009424 <PC_show_Keys+0x8a4>)
 80092b2:	221c      	movs	r2, #28
 80092b4:	f01d f964 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80092b8:	4b5b      	ldr	r3, [pc, #364]	@ (8009428 <PC_show_Keys+0x8a8>)
 80092ba:	781a      	ldrb	r2, [r3, #0]
 80092bc:	4b59      	ldr	r3, [pc, #356]	@ (8009424 <PC_show_Keys+0x8a4>)
 80092be:	0011      	movs	r1, r2
 80092c0:	0018      	movs	r0, r3
 80092c2:	f7ff fc42 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(UptimeConfigAddr, UptimeConfig, IdSize);
 80092c6:	4b78      	ldr	r3, [pc, #480]	@ (80094a8 <PC_show_Keys+0x928>)
 80092c8:	4878      	ldr	r0, [pc, #480]	@ (80094ac <PC_show_Keys+0x92c>)
 80092ca:	220c      	movs	r2, #12
 80092cc:	0019      	movs	r1, r3
 80092ce:	f003 f92f 	bl	800c530 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, UptimeConfig);
 80092d2:	4a75      	ldr	r2, [pc, #468]	@ (80094a8 <PC_show_Keys+0x928>)
 80092d4:	4b51      	ldr	r3, [pc, #324]	@ (800941c <PC_show_Keys+0x89c>)
 80092d6:	0011      	movs	r1, r2
 80092d8:	0018      	movs	r0, r3
 80092da:	f7fc f833 	bl	8005344 <uint8ArrayToString>
  sprintf(msg, "%02d - Uptime sensor id --------------: %s\r\n", UptimeConfigCmd, Buffer);
 80092de:	4b4f      	ldr	r3, [pc, #316]	@ (800941c <PC_show_Keys+0x89c>)
 80092e0:	4973      	ldr	r1, [pc, #460]	@ (80094b0 <PC_show_Keys+0x930>)
 80092e2:	4850      	ldr	r0, [pc, #320]	@ (8009424 <PC_show_Keys+0x8a4>)
 80092e4:	221d      	movs	r2, #29
 80092e6:	f01d f94b 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80092ea:	4b4f      	ldr	r3, [pc, #316]	@ (8009428 <PC_show_Keys+0x8a8>)
 80092ec:	781a      	ldrb	r2, [r3, #0]
 80092ee:	4b4d      	ldr	r3, [pc, #308]	@ (8009424 <PC_show_Keys+0x8a4>)
 80092f0:	0011      	movs	r1, r2
 80092f2:	0018      	movs	r0, r3
 80092f4:	f7ff fc29 	bl	8008b4a <PC_selectout>

  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUploadConfig, URLToUploadMaxLength);
 80092f8:	4b6e      	ldr	r3, [pc, #440]	@ (80094b4 <PC_show_Keys+0x934>)
 80092fa:	486f      	ldr	r0, [pc, #444]	@ (80094b8 <PC_show_Keys+0x938>)
 80092fc:	2230      	movs	r2, #48	@ 0x30
 80092fe:	0019      	movs	r1, r3
 8009300:	f003 f916 	bl	800c530 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - URL to upload -----------------: ", URLToUploadConfigCmd);
 8009304:	496d      	ldr	r1, [pc, #436]	@ (80094bc <PC_show_Keys+0x93c>)
 8009306:	4b47      	ldr	r3, [pc, #284]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009308:	221e      	movs	r2, #30
 800930a:	0018      	movs	r0, r3
 800930c:	f01d f938 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009310:	4b45      	ldr	r3, [pc, #276]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009312:	781a      	ldrb	r2, [r3, #0]
 8009314:	4b43      	ldr	r3, [pc, #268]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009316:	0011      	movs	r1, r2
 8009318:	0018      	movs	r0, r3
 800931a:	f7ff fc16 	bl	8008b4a <PC_selectout>
  if (strlen((char*)URLToUploadConfig) == 0) {
 800931e:	4b65      	ldr	r3, [pc, #404]	@ (80094b4 <PC_show_Keys+0x934>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d11b      	bne.n	800935e <PC_show_Keys+0x7de>
    sprintf(msg, "Undefined, defaulted to ");
 8009326:	4a66      	ldr	r2, [pc, #408]	@ (80094c0 <PC_show_Keys+0x940>)
 8009328:	4b3e      	ldr	r3, [pc, #248]	@ (8009424 <PC_show_Keys+0x8a4>)
 800932a:	0011      	movs	r1, r2
 800932c:	0018      	movs	r0, r3
 800932e:	f01d f927 	bl	8026580 <siprintf>
    PC_selectout(&msg[0], usb_out);
 8009332:	4b3d      	ldr	r3, [pc, #244]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009334:	781a      	ldrb	r2, [r3, #0]
 8009336:	4b3b      	ldr	r3, [pc, #236]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009338:	0011      	movs	r1, r2
 800933a:	0018      	movs	r0, r3
 800933c:	f7ff fc05 	bl	8008b4a <PC_selectout>
    PC_selectout((char*)API, usb_out);
 8009340:	4b39      	ldr	r3, [pc, #228]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	4b5f      	ldr	r3, [pc, #380]	@ (80094c4 <PC_show_Keys+0x944>)
 8009346:	0011      	movs	r1, r2
 8009348:	0018      	movs	r0, r3
 800934a:	f7ff fbfe 	bl	8008b4a <PC_selectout>
    PC_selectout("\r\n\0", usb_out);
 800934e:	4b36      	ldr	r3, [pc, #216]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	4b5d      	ldr	r3, [pc, #372]	@ (80094c8 <PC_show_Keys+0x948>)
 8009354:	0011      	movs	r1, r2
 8009356:	0018      	movs	r0, r3
 8009358:	f7ff fbf7 	bl	8008b4a <PC_selectout>
 800935c:	e00c      	b.n	8009378 <PC_show_Keys+0x7f8>
  }
  else {
    sprintf(msg, "%s\r\n", (char*)URLToUploadConfig);  // probably too long to held in same buffer
 800935e:	4a55      	ldr	r2, [pc, #340]	@ (80094b4 <PC_show_Keys+0x934>)
 8009360:	4947      	ldr	r1, [pc, #284]	@ (8009480 <PC_show_Keys+0x900>)
 8009362:	4b30      	ldr	r3, [pc, #192]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009364:	0018      	movs	r0, r3
 8009366:	f01d f90b 	bl	8026580 <siprintf>
    PC_selectout(&msg[0], usb_out);
 800936a:	4b2f      	ldr	r3, [pc, #188]	@ (8009428 <PC_show_Keys+0x8a8>)
 800936c:	781a      	ldrb	r2, [r3, #0]
 800936e:	4b2d      	ldr	r3, [pc, #180]	@ (8009424 <PC_show_Keys+0x8a4>)
 8009370:	0011      	movs	r1, r2
 8009372:	0018      	movs	r0, r3
 8009374:	f7ff fbe9 	bl	8008b4a <PC_selectout>
  }

  sprintf(msg, "%02d - Clear all definitions in EEPROM\r\n", clearDefsCmd);
 8009378:	4954      	ldr	r1, [pc, #336]	@ (80094cc <PC_show_Keys+0x94c>)
 800937a:	4b2a      	ldr	r3, [pc, #168]	@ (8009424 <PC_show_Keys+0x8a4>)
 800937c:	221f      	movs	r2, #31
 800937e:	0018      	movs	r0, r3
 8009380:	f01d f8fe 	bl	8026580 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009384:	4b28      	ldr	r3, [pc, #160]	@ (8009428 <PC_show_Keys+0x8a8>)
 8009386:	781a      	ldrb	r2, [r3, #0]
 8009388:	4b26      	ldr	r3, [pc, #152]	@ (8009424 <PC_show_Keys+0x8a4>)
 800938a:	0011      	movs	r1, r2
 800938c:	0018      	movs	r0, r3
 800938e:	f7ff fbdc 	bl	8008b4a <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8009392:	4b4f      	ldr	r3, [pc, #316]	@ (80094d0 <PC_show_Keys+0x950>)
 8009394:	0018      	movs	r0, r3
 8009396:	f7ff fbb3 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 800939a:	200a      	movs	r0, #10
 800939c:	f00b fca4 	bl	8014ce8 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 80093a0:	4b4c      	ldr	r3, [pc, #304]	@ (80094d4 <PC_show_Keys+0x954>)
 80093a2:	0018      	movs	r0, r3
 80093a4:	f7ff fbac 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 80093a8:	200a      	movs	r0, #10
 80093aa:	f00b fc9d 	bl	8014ce8 <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 80093ae:	4b4a      	ldr	r3, [pc, #296]	@ (80094d8 <PC_show_Keys+0x958>)
 80093b0:	0018      	movs	r0, r3
 80093b2:	f7ff fba5 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 80093b6:	200a      	movs	r0, #10
 80093b8:	f00b fc96 	bl	8014ce8 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 80093bc:	4b47      	ldr	r3, [pc, #284]	@ (80094dc <PC_show_Keys+0x95c>)
 80093be:	0018      	movs	r0, r3
 80093c0:	f7ff fb9e 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 80093c4:	200a      	movs	r0, #10
 80093c6:	f00b fc8f 	bl	8014ce8 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 80093ca:	4b45      	ldr	r3, [pc, #276]	@ (80094e0 <PC_show_Keys+0x960>)
 80093cc:	0018      	movs	r0, r3
 80093ce:	f7ff fb97 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 80093d2:	200a      	movs	r0, #10
 80093d4:	f00b fc88 	bl	8014ce8 <HAL_Delay>
  printf_USB("Command example for a full key for PM10 sensor =>");
 80093d8:	4b42      	ldr	r3, [pc, #264]	@ (80094e4 <PC_show_Keys+0x964>)
 80093da:	0018      	movs	r0, r3
 80093dc:	f7ff fb90 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 80093e0:	200a      	movs	r0, #10
 80093e2:	f00b fc81 	bl	8014ce8 <HAL_Delay>
  printf_USB(" $08,67af09374cdef30007b35055\r\n");
 80093e6:	4b40      	ldr	r3, [pc, #256]	@ (80094e8 <PC_show_Keys+0x968>)
 80093e8:	0018      	movs	r0, r3
 80093ea:	f7ff fb89 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 80093ee:	200a      	movs	r0, #10
 80093f0:	f00b fc7a 	bl	8014ce8 <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 80093f4:	4b3d      	ldr	r3, [pc, #244]	@ (80094ec <PC_show_Keys+0x96c>)
 80093f6:	0018      	movs	r0, r3
 80093f8:	f7ff fb82 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 80093fc:	200a      	movs	r0, #10
 80093fe:	f00b fc73 	bl	8014ce8 <HAL_Delay>
  printf_USB("S12,Testsysteem (max 12 chars)\r\n");
 8009402:	4b3b      	ldr	r3, [pc, #236]	@ (80094f0 <PC_show_Keys+0x970>)
 8009404:	0018      	movs	r0, r3
 8009406:	f7ff fb7b 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 800940a:	200a      	movs	r0, #10
 800940c:	f00b fc6c 	bl	8014ce8 <HAL_Delay>
  printf_USB("L - toggle logging on/off, current: %s\r\n", usblog?"on":"off");
 8009410:	4b38      	ldr	r3, [pc, #224]	@ (80094f4 <PC_show_Keys+0x974>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d071      	beq.n	80094fc <PC_show_Keys+0x97c>
 8009418:	4b37      	ldr	r3, [pc, #220]	@ (80094f8 <PC_show_Keys+0x978>)
 800941a:	e070      	b.n	80094fe <PC_show_Keys+0x97e>
 800941c:	20000bb8 	.word	0x20000bb8
 8009420:	0802be30 	.word	0x0802be30
 8009424:	20000b64 	.word	0x20000b64
 8009428:	20000b61 	.word	0x20000b61
 800942c:	20000d08 	.word	0x20000d08
 8009430:	080800f8 	.word	0x080800f8
 8009434:	0802be60 	.word	0x0802be60
 8009438:	20000d14 	.word	0x20000d14
 800943c:	08080104 	.word	0x08080104
 8009440:	0802be90 	.word	0x0802be90
 8009444:	20000d20 	.word	0x20000d20
 8009448:	080800b0 	.word	0x080800b0
 800944c:	0802bec0 	.word	0x0802bec0
 8009450:	20000d2c 	.word	0x20000d2c
 8009454:	080800bc 	.word	0x080800bc
 8009458:	0802bef0 	.word	0x0802bef0
 800945c:	20000d38 	.word	0x20000d38
 8009460:	08080170 	.word	0x08080170
 8009464:	0802bf20 	.word	0x0802bf20
 8009468:	20000d44 	.word	0x20000d44
 800946c:	0808017c 	.word	0x0808017c
 8009470:	0802bf50 	.word	0x0802bf50
 8009474:	20000d50 	.word	0x20000d50
 8009478:	08080260 	.word	0x08080260
 800947c:	0802bf80 	.word	0x0802bf80
 8009480:	0802bd40 	.word	0x0802bd40
 8009484:	20000d80 	.word	0x20000d80
 8009488:	08080290 	.word	0x08080290
 800948c:	0802bfac 	.word	0x0802bfac
 8009490:	20000db0 	.word	0x20000db0
 8009494:	080802c0 	.word	0x080802c0
 8009498:	0802bfd8 	.word	0x0802bfd8
 800949c:	20000de0 	.word	0x20000de0
 80094a0:	08080188 	.word	0x08080188
 80094a4:	0802c004 	.word	0x0802c004
 80094a8:	20000dec 	.word	0x20000dec
 80094ac:	080801a0 	.word	0x080801a0
 80094b0:	0802c034 	.word	0x0802c034
 80094b4:	20000df8 	.word	0x20000df8
 80094b8:	08080110 	.word	0x08080110
 80094bc:	0802c064 	.word	0x0802c064
 80094c0:	0802c090 	.word	0x0802c090
 80094c4:	0802c0ac 	.word	0x0802c0ac
 80094c8:	0802c0d0 	.word	0x0802c0d0
 80094cc:	0802c0d4 	.word	0x0802c0d4
 80094d0:	0802c100 	.word	0x0802c100
 80094d4:	0802c118 	.word	0x0802c118
 80094d8:	0802c144 	.word	0x0802c144
 80094dc:	0802c174 	.word	0x0802c174
 80094e0:	0802c1b0 	.word	0x0802c1b0
 80094e4:	0802c1e8 	.word	0x0802c1e8
 80094e8:	0802c21c 	.word	0x0802c21c
 80094ec:	0802c23c 	.word	0x0802c23c
 80094f0:	0802c270 	.word	0x0802c270
 80094f4:	20001113 	.word	0x20001113
 80094f8:	0802c294 	.word	0x0802c294
 80094fc:	4b12      	ldr	r3, [pc, #72]	@ (8009548 <PC_show_Keys+0x9c8>)
 80094fe:	4a13      	ldr	r2, [pc, #76]	@ (800954c <PC_show_Keys+0x9cc>)
 8009500:	0019      	movs	r1, r3
 8009502:	0010      	movs	r0, r2
 8009504:	f7ff fafc 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 8009508:	200a      	movs	r0, #10
 800950a:	f00b fbed 	bl	8014ce8 <HAL_Delay>
  printf_USB("B - show build information\r\n");
 800950e:	4b10      	ldr	r3, [pc, #64]	@ (8009550 <PC_show_Keys+0x9d0>)
 8009510:	0018      	movs	r0, r3
 8009512:	f7ff faf5 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 8009516:	200a      	movs	r0, #10
 8009518:	f00b fbe6 	bl	8014ce8 <HAL_Delay>
  printf_USB("Example to clear a string: $30,000000000000000000000000\r\n");
 800951c:	4b0d      	ldr	r3, [pc, #52]	@ (8009554 <PC_show_Keys+0x9d4>)
 800951e:	0018      	movs	r0, r3
 8009520:	f7ff faee 	bl	8008b00 <printf_USB>
  HAL_Delay(10);
 8009524:	200a      	movs	r0, #10
 8009526:	f00b fbdf 	bl	8014ce8 <HAL_Delay>
  if (!usb_out) {
 800952a:	4b0b      	ldr	r3, [pc, #44]	@ (8009558 <PC_show_Keys+0x9d8>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2201      	movs	r2, #1
 8009530:	4053      	eors	r3, r2
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <PC_show_Keys+0x9c0>
    printf("A sensor key can only be changed by USB input or the by configuration programm.\r\n");
 8009538:	4b08      	ldr	r3, [pc, #32]	@ (800955c <PC_show_Keys+0x9dc>)
 800953a:	0018      	movs	r0, r3
 800953c:	f01d f816 	bl	802656c <puts>
  }
}
 8009540:	46c0      	nop			@ (mov r8, r8)
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	46c0      	nop			@ (mov r8, r8)
 8009548:	0802c298 	.word	0x0802c298
 800954c:	0802c29c 	.word	0x0802c29c
 8009550:	0802c2c8 	.word	0x0802c2c8
 8009554:	0802c2e8 	.word	0x0802c2e8
 8009558:	20000b61 	.word	0x20000b61
 800955c:	0802c324 	.word	0x0802c324

08009560 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	4b20      	ldr	r3, [pc, #128]	@ (80095f0 <ascii_to_uint8+0x90>)
 8009570:	18d3      	adds	r3, r2, r3
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	001a      	movs	r2, r3
 8009576:	2304      	movs	r3, #4
 8009578:	4013      	ands	r3, r2
 800957a:	d00a      	beq.n	8009592 <ascii_to_uint8+0x32>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3301      	adds	r3, #1
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	4b1a      	ldr	r3, [pc, #104]	@ (80095f0 <ascii_to_uint8+0x90>)
 8009586:	18d3      	adds	r3, r2, r3
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	001a      	movs	r2, r3
 800958c:	2304      	movs	r3, #4
 800958e:	4013      	ands	r3, r2
 8009590:	d105      	bne.n	800959e <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 8009592:	4b18      	ldr	r3, [pc, #96]	@ (80095f4 <ascii_to_uint8+0x94>)
 8009594:	0018      	movs	r0, r3
 8009596:	f7ff fab3 	bl	8008b00 <printf_USB>
    return 100;
 800959a:	2364      	movs	r3, #100	@ 0x64
 800959c:	e024      	b.n	80095e8 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	1c1a      	adds	r2, r3, #0
 80095a4:	0092      	lsls	r2, r2, #2
 80095a6:	18d3      	adds	r3, r2, r3
 80095a8:	18db      	adds	r3, r3, r3
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3301      	adds	r3, #1
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	18d3      	adds	r3, r2, r3
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	210f      	movs	r1, #15
 80095b8:	187b      	adds	r3, r7, r1
 80095ba:	3a10      	subs	r2, #16
 80095bc:	701a      	strb	r2, [r3, #0]

  if (value >= maxCmd) {
 80095be:	187b      	adds	r3, r7, r1
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b1f      	cmp	r3, #31
 80095c4:	d905      	bls.n	80095d2 <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 80095c6:	4b0c      	ldr	r3, [pc, #48]	@ (80095f8 <ascii_to_uint8+0x98>)
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7ff fa99 	bl	8008b00 <printf_USB>
    return 100;
 80095ce:	2364      	movs	r3, #100	@ 0x64
 80095d0:	e00a      	b.n	80095e8 <ascii_to_uint8+0x88>
  }
  if (value == clearDefsCmd) {
 80095d2:	220f      	movs	r2, #15
 80095d4:	18bb      	adds	r3, r7, r2
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b1f      	cmp	r3, #31
 80095da:	d102      	bne.n	80095e2 <ascii_to_uint8+0x82>
    value = ClearConfigCmd;
 80095dc:	18bb      	adds	r3, r7, r2
 80095de:	22fd      	movs	r2, #253	@ 0xfd
 80095e0:	701a      	strb	r2, [r3, #0]
  }
  return (uint8_t)value;
 80095e2:	230f      	movs	r3, #15
 80095e4:	18fb      	adds	r3, r7, r3
 80095e6:	781b      	ldrb	r3, [r3, #0]
}
 80095e8:	0018      	movs	r0, r3
 80095ea:	46bd      	mov	sp, r7
 80095ec:	b004      	add	sp, #16
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	0802f718 	.word	0x0802f718
 80095f4:	0802c378 	.word	0x0802c378
 80095f8:	0802c3a0 	.word	0x0802c3a0

080095fc <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 80095fc:	b590      	push	{r4, r7, lr}
 80095fe:	b0d9      	sub	sp, #356	@ 0x164
 8009600:	af3e      	add	r7, sp, #248	@ 0xf8
 8009602:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8009604:	f019 fefe 	bl	8023404 <GetUsbRxDataSize>
 8009608:	0003      	movs	r3, r0
 800960a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint8_t r = 0;
 800960c:	2367      	movs	r3, #103	@ 0x67
 800960e:	18fb      	adds	r3, r7, r3
 8009610:	2200      	movs	r2, #0
 8009612:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 8009614:	2366      	movs	r3, #102	@ 0x66
 8009616:	18fb      	adds	r3, r7, r3
 8009618:	2200      	movs	r2, #0
 800961a:	701a      	strb	r2, [r3, #0]
//  char Buffer[48];
  char Buffer[pwdMaxLength];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2124      	movs	r1, #36	@ 0x24
 8009620:	0018      	movs	r0, r3
 8009622:	f01d f8fd 	bl	8026820 <strchr>
 8009626:	0003      	movs	r3, r0
 8009628:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != 28)){
 800962a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800962c:	2b01      	cmp	r3, #1
 800962e:	d10f      	bne.n	8009650 <Process_USB_input+0x54>
 8009630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00c      	beq.n	8009650 <Process_USB_input+0x54>
 8009636:	4bd4      	ldr	r3, [pc, #848]	@ (8009988 <Process_USB_input+0x38c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b1c      	cmp	r3, #28
 800963c:	d008      	beq.n	8009650 <Process_USB_input+0x54>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 800963e:	4ad3      	ldr	r2, [pc, #844]	@ (800998c <Process_USB_input+0x390>)
 8009640:	4bd3      	ldr	r3, [pc, #844]	@ (8009990 <Process_USB_input+0x394>)
 8009642:	0019      	movs	r1, r3
 8009644:	2003      	movs	r0, #3
 8009646:	f00a fdcd 	bl	80141e4 <CreateLine>
      len = 28;
 800964a:	4bcf      	ldr	r3, [pc, #828]	@ (8009988 <Process_USB_input+0x38c>)
 800964c:	221c      	movs	r2, #28
 800964e:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2153      	movs	r1, #83	@ 0x53
 8009654:	0018      	movs	r0, r3
 8009656:	f01d f8e3 	bl	8026820 <strchr>
 800965a:	0003      	movs	r3, r0
 800965c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != pwdMaxLength)){
 800965e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009660:	2b01      	cmp	r3, #1
 8009662:	d10f      	bne.n	8009684 <Process_USB_input+0x88>
 8009664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00c      	beq.n	8009684 <Process_USB_input+0x88>
 800966a:	4bc7      	ldr	r3, [pc, #796]	@ (8009988 <Process_USB_input+0x38c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b40      	cmp	r3, #64	@ 0x40
 8009670:	d008      	beq.n	8009684 <Process_USB_input+0x88>
      Debug("Switching to input length of %d for full name strings", pwdMaxLength);
 8009672:	4ac8      	ldr	r2, [pc, #800]	@ (8009994 <Process_USB_input+0x398>)
 8009674:	49c6      	ldr	r1, [pc, #792]	@ (8009990 <Process_USB_input+0x394>)
 8009676:	2340      	movs	r3, #64	@ 0x40
 8009678:	2003      	movs	r0, #3
 800967a:	f00a fdb3 	bl	80141e4 <CreateLine>
      len = pwdMaxLength;
 800967e:	4bc2      	ldr	r3, [pc, #776]	@ (8009988 <Process_USB_input+0x38c>)
 8009680:	2240      	movs	r2, #64	@ 0x40
 8009682:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_L);  // Search for 'U'to toggle USB logging
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	214c      	movs	r1, #76	@ 0x4c
 8009688:	0018      	movs	r0, r3
 800968a:	f01d f8c9 	bl	8026820 <strchr>
 800968e:	0003      	movs	r3, r0
 8009690:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 8009692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009694:	2b01      	cmp	r3, #1
 8009696:	d137      	bne.n	8009708 <Process_USB_input+0x10c>
 8009698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800969a:	2b00      	cmp	r3, #0
 800969c:	d034      	beq.n	8009708 <Process_USB_input+0x10c>
    printf_USB("address of usblog eeprom %ul\r\n", (uint8_t*)&usblog);
 800969e:	4abe      	ldr	r2, [pc, #760]	@ (8009998 <Process_USB_input+0x39c>)
 80096a0:	4bbe      	ldr	r3, [pc, #760]	@ (800999c <Process_USB_input+0x3a0>)
 80096a2:	0011      	movs	r1, r2
 80096a4:	0018      	movs	r0, r3
 80096a6:	f7ff fa2b 	bl	8008b00 <printf_USB>
    ReadUint8ArrayEEprom(USBlogstatusConfigAddr, (uint8_t*)&usblog, 1);
 80096aa:	4bbb      	ldr	r3, [pc, #748]	@ (8009998 <Process_USB_input+0x39c>)
 80096ac:	48bc      	ldr	r0, [pc, #752]	@ (80099a0 <Process_USB_input+0x3a4>)
 80096ae:	2201      	movs	r2, #1
 80096b0:	0019      	movs	r1, r3
 80096b2:	f002 ff3d 	bl	800c530 <ReadUint8ArrayEEprom>
    usblog = !usblog; // log info to usb too
 80096b6:	4bb8      	ldr	r3, [pc, #736]	@ (8009998 <Process_USB_input+0x39c>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	1e5a      	subs	r2, r3, #1
 80096bc:	4193      	sbcs	r3, r2
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2201      	movs	r2, #1
 80096c2:	4053      	eors	r3, r2
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	1c1a      	adds	r2, r3, #0
 80096c8:	2301      	movs	r3, #1
 80096ca:	4013      	ands	r3, r2
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	4bb2      	ldr	r3, [pc, #712]	@ (8009998 <Process_USB_input+0x39c>)
 80096d0:	701a      	strb	r2, [r3, #0]
    WriteUint8ArrayEepromSafe(USBlogstatusConfigAddr, (uint8_t*)&usblog, uint8_tSize, uint8_tSize);
 80096d2:	49b1      	ldr	r1, [pc, #708]	@ (8009998 <Process_USB_input+0x39c>)
 80096d4:	48b2      	ldr	r0, [pc, #712]	@ (80099a0 <Process_USB_input+0x3a4>)
 80096d6:	2301      	movs	r3, #1
 80096d8:	2201      	movs	r2, #1
 80096da:	f002 ff0d 	bl	800c4f8 <WriteUint8ArrayEepromSafe>
    printf_USB("\r\nSwitching USB logging to %s\r\n", usblog?"on":"off");
 80096de:	4bae      	ldr	r3, [pc, #696]	@ (8009998 <Process_USB_input+0x39c>)
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <Process_USB_input+0xee>
 80096e6:	4baf      	ldr	r3, [pc, #700]	@ (80099a4 <Process_USB_input+0x3a8>)
 80096e8:	e000      	b.n	80096ec <Process_USB_input+0xf0>
 80096ea:	4baf      	ldr	r3, [pc, #700]	@ (80099a8 <Process_USB_input+0x3ac>)
 80096ec:	4aaf      	ldr	r2, [pc, #700]	@ (80099ac <Process_USB_input+0x3b0>)
 80096ee:	0019      	movs	r1, r3
 80096f0:	0010      	movs	r0, r2
 80096f2:	f7ff fa05 	bl	8008b00 <printf_USB>
    length = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009700:	f019 fe68 	bl	80233d4 <ResetUsbRxDataSize>
    return true;
 8009704:	2301      	movs	r3, #1
 8009706:	e241      	b.n	8009b8c <Process_USB_input+0x590>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_B);  // Search for 'B'to show the build
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2142      	movs	r1, #66	@ 0x42
 800970c:	0018      	movs	r0, r3
 800970e:	f01d f887 	bl	8026820 <strchr>
 8009712:	0003      	movs	r3, r0
 8009714:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 8009716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009718:	2b01      	cmp	r3, #1
 800971a:	d10d      	bne.n	8009738 <Process_USB_input+0x13c>
 800971c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <Process_USB_input+0x13c>
    BinaryReleaseInfo();
 8009722:	f00a fdf3 	bl	801430c <BinaryReleaseInfo>
    length = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009730:	f019 fe50 	bl	80233d4 <ResetUsbRxDataSize>
    return true;
 8009734:	2301      	movs	r3, #1
 8009736:	e229      	b.n	8009b8c <Process_USB_input+0x590>
  }
  if ((length >= len) || (data[length-1] == 13)) {
 8009738:	4b93      	ldr	r3, [pc, #588]	@ (8009988 <Process_USB_input+0x38c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800973e:	429a      	cmp	r2, r3
 8009740:	d207      	bcs.n	8009752 <Process_USB_input+0x156>
 8009742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009744:	3b01      	subs	r3, #1
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	18d3      	adds	r3, r2, r3
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b0d      	cmp	r3, #13
 800974e:	d000      	beq.n	8009752 <Process_USB_input+0x156>
 8009750:	e209      	b.n	8009b66 <Process_USB_input+0x56a>
    // 'S' is for entering a ASCII string
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S') || (data[0] == 'E')) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b23      	cmp	r3, #35	@ 0x23
 8009758:	d00c      	beq.n	8009774 <Process_USB_input+0x178>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	2b24      	cmp	r3, #36	@ 0x24
 8009760:	d008      	beq.n	8009774 <Process_USB_input+0x178>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b53      	cmp	r3, #83	@ 0x53
 8009768:	d004      	beq.n	8009774 <Process_USB_input+0x178>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b45      	cmp	r3, #69	@ 0x45
 8009770:	d000      	beq.n	8009774 <Process_USB_input+0x178>
 8009772:	e1da      	b.n	8009b2a <Process_USB_input+0x52e>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3301      	adds	r3, #1
 8009778:	0018      	movs	r0, r3
 800977a:	f7ff fef1 	bl	8009560 <ascii_to_uint8>
 800977e:	0003      	movs	r3, r0
 8009780:	001a      	movs	r2, r3
 8009782:	4b8b      	ldr	r3, [pc, #556]	@ (80099b0 <Process_USB_input+0x3b4>)
 8009784:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100)
 8009786:	4b8a      	ldr	r3, [pc, #552]	@ (80099b0 <Process_USB_input+0x3b4>)
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	2b64      	cmp	r3, #100	@ 0x64
 800978c:	d11b      	bne.n	80097c6 <Process_USB_input+0x1ca>
      {
        ResetUsbRxDataSize();
 800978e:	f019 fe21 	bl	80233d4 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009792:	f7ff f9f5 	bl	8008b80 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8009796:	2365      	movs	r3, #101	@ 0x65
 8009798:	18fb      	adds	r3, r7, r3
 800979a:	2200      	movs	r2, #0
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	e00b      	b.n	80097b8 <Process_USB_input+0x1bc>
          data[i] = '\0';
 80097a0:	2165      	movs	r1, #101	@ 0x65
 80097a2:	187b      	adds	r3, r7, r1
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	18d3      	adds	r3, r2, r3
 80097aa:	2200      	movs	r2, #0
 80097ac:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 80097ae:	187b      	adds	r3, r7, r1
 80097b0:	781a      	ldrb	r2, [r3, #0]
 80097b2:	187b      	adds	r3, r7, r1
 80097b4:	3201      	adds	r2, #1
 80097b6:	701a      	strb	r2, [r3, #0]
 80097b8:	2365      	movs	r3, #101	@ 0x65
 80097ba:	18fb      	adds	r3, r7, r3
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b1f      	cmp	r3, #31
 80097c0:	d9ee      	bls.n	80097a0 <Process_USB_input+0x1a4>
        }
        return false; // value out of range
 80097c2:	2300      	movs	r3, #0
 80097c4:	e1e2      	b.n	8009b8c <Process_USB_input+0x590>
      }
      if (data[3] == ',') {
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3303      	adds	r3, #3
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b2c      	cmp	r3, #44	@ 0x2c
 80097ce:	d000      	beq.n	80097d2 <Process_USB_input+0x1d6>
 80097d0:	e18f      	b.n	8009af2 <Process_USB_input+0x4f6>
        for (i=4; i < len; i++) {
 80097d2:	2366      	movs	r3, #102	@ 0x66
 80097d4:	18fb      	adds	r3, r7, r3
 80097d6:	2204      	movs	r2, #4
 80097d8:	701a      	strb	r2, [r3, #0]
 80097da:	e0fd      	b.n	80099d8 <Process_USB_input+0x3dc>
          if (data[0] == ('S' || 'E')) {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d120      	bne.n	8009826 <Process_USB_input+0x22a>
            if ((data[0] == 'E') && (received.Command == clearDefsCmd)) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b45      	cmp	r3, #69	@ 0x45
 80097ea:	d10c      	bne.n	8009806 <Process_USB_input+0x20a>
 80097ec:	4b70      	ldr	r3, [pc, #448]	@ (80099b0 <Process_USB_input+0x3b4>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b1f      	cmp	r3, #31
 80097f2:	d108      	bne.n	8009806 <Process_USB_input+0x20a>
              Debug("\r\nClear EEPROM request\r\n");
 80097f4:	4a6f      	ldr	r2, [pc, #444]	@ (80099b4 <Process_USB_input+0x3b8>)
 80097f6:	4b66      	ldr	r3, [pc, #408]	@ (8009990 <Process_USB_input+0x394>)
 80097f8:	0019      	movs	r1, r3
 80097fa:	2003      	movs	r0, #3
 80097fc:	f00a fcf2 	bl	80141e4 <CreateLine>
              received.Command = ClearConfigCmd;
 8009800:	4b6b      	ldr	r3, [pc, #428]	@ (80099b0 <Process_USB_input+0x3b4>)
 8009802:	22fd      	movs	r2, #253	@ 0xfd
 8009804:	701a      	strb	r2, [r3, #0]
            }
            if (data[i] == 13) {
 8009806:	2166      	movs	r1, #102	@ 0x66
 8009808:	187b      	adds	r3, r7, r1
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	18d3      	adds	r3, r2, r3
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b0d      	cmp	r3, #13
 8009814:	d000      	beq.n	8009818 <Process_USB_input+0x21c>
 8009816:	e0d9      	b.n	80099cc <Process_USB_input+0x3d0>
              data[i] = 0;
 8009818:	187b      	adds	r3, r7, r1
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	18d3      	adds	r3, r2, r3
 8009820:	2200      	movs	r2, #0
 8009822:	701a      	strb	r2, [r3, #0]
              break;
 8009824:	e0e0      	b.n	80099e8 <Process_USB_input+0x3ec>
            }
          }
          else {
          HAL_Delay(10);
 8009826:	200a      	movs	r0, #10
 8009828:	f00b fa5e 	bl	8014ce8 <HAL_Delay>
            if (isxdigit(data[i])) {
 800982c:	2166      	movs	r1, #102	@ 0x66
 800982e:	187b      	adds	r3, r7, r1
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	18d3      	adds	r3, r2, r3
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	1c5a      	adds	r2, r3, #1
 800983a:	4b5f      	ldr	r3, [pc, #380]	@ (80099b8 <Process_USB_input+0x3bc>)
 800983c:	18d3      	adds	r3, r2, r3
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	001a      	movs	r2, r3
 8009842:	2344      	movs	r3, #68	@ 0x44
 8009844:	4013      	ands	r3, r2
 8009846:	d072      	beq.n	800992e <Process_USB_input+0x332>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8009848:	4b5c      	ldr	r3, [pc, #368]	@ (80099bc <Process_USB_input+0x3c0>)
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b25b      	sxtb	r3, r3
 800984e:	011b      	lsls	r3, r3, #4
 8009850:	b25a      	sxtb	r2, r3
 8009852:	0008      	movs	r0, r1
 8009854:	187b      	adds	r3, r7, r1
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	18cb      	adds	r3, r1, r3
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	1c59      	adds	r1, r3, #1
 8009860:	4b55      	ldr	r3, [pc, #340]	@ (80099b8 <Process_USB_input+0x3bc>)
 8009862:	18cb      	adds	r3, r1, r3
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	0019      	movs	r1, r3
 8009868:	2304      	movs	r3, #4
 800986a:	400b      	ands	r3, r1
 800986c:	d008      	beq.n	8009880 <Process_USB_input+0x284>
 800986e:	183b      	adds	r3, r7, r0
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	18cb      	adds	r3, r1, r3
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	3b30      	subs	r3, #48	@ 0x30
 800987a:	b2db      	uxtb	r3, r3
 800987c:	b25b      	sxtb	r3, r3
 800987e:	e01e      	b.n	80098be <Process_USB_input+0x2c2>
 8009880:	2366      	movs	r3, #102	@ 0x66
 8009882:	18fb      	adds	r3, r7, r3
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	6879      	ldr	r1, [r7, #4]
 8009888:	18c9      	adds	r1, r1, r3
 800988a:	2057      	movs	r0, #87	@ 0x57
 800988c:	183b      	adds	r3, r7, r0
 800988e:	7809      	ldrb	r1, [r1, #0]
 8009890:	7019      	strb	r1, [r3, #0]
 8009892:	183b      	adds	r3, r7, r0
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	1c59      	adds	r1, r3, #1
 8009898:	4b47      	ldr	r3, [pc, #284]	@ (80099b8 <Process_USB_input+0x3bc>)
 800989a:	18cb      	adds	r3, r1, r3
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	0019      	movs	r1, r3
 80098a0:	2303      	movs	r3, #3
 80098a2:	400b      	ands	r3, r1
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d103      	bne.n	80098b0 <Process_USB_input+0x2b4>
 80098a8:	183b      	adds	r3, r7, r0
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	3b20      	subs	r3, #32
 80098ae:	e002      	b.n	80098b6 <Process_USB_input+0x2ba>
 80098b0:	2357      	movs	r3, #87	@ 0x57
 80098b2:	18fb      	adds	r3, r7, r3
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	3b37      	subs	r3, #55	@ 0x37
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	b25b      	sxtb	r3, r3
 80098be:	4313      	orrs	r3, r2
 80098c0:	b25b      	sxtb	r3, r3
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	4b3d      	ldr	r3, [pc, #244]	@ (80099bc <Process_USB_input+0x3c0>)
 80098c6:	701a      	strb	r2, [r3, #0]
              printf_USB("Result is 0x%02X\r\n", result);
 80098c8:	4b3c      	ldr	r3, [pc, #240]	@ (80099bc <Process_USB_input+0x3c0>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	001a      	movs	r2, r3
 80098ce:	4b3c      	ldr	r3, [pc, #240]	@ (80099c0 <Process_USB_input+0x3c4>)
 80098d0:	0011      	movs	r1, r2
 80098d2:	0018      	movs	r0, r3
 80098d4:	f7ff f914 	bl	8008b00 <printf_USB>
              HAL_Delay(10);
 80098d8:	200a      	movs	r0, #10
 80098da:	f00b fa05 	bl	8014ce8 <HAL_Delay>
              if (len == 28) {
 80098de:	4b2a      	ldr	r3, [pc, #168]	@ (8009988 <Process_USB_input+0x38c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b1c      	cmp	r3, #28
 80098e4:	d172      	bne.n	80099cc <Process_USB_input+0x3d0>
                if ((i % 2) == 1) {
 80098e6:	2366      	movs	r3, #102	@ 0x66
 80098e8:	18fb      	adds	r3, r7, r3
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2201      	movs	r2, #1
 80098ee:	4013      	ands	r3, r2
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d06a      	beq.n	80099cc <Process_USB_input+0x3d0>
                  data[r] = result;
 80098f6:	2467      	movs	r4, #103	@ 0x67
 80098f8:	193b      	adds	r3, r7, r4
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	18d3      	adds	r3, r2, r3
 8009900:	4a2e      	ldr	r2, [pc, #184]	@ (80099bc <Process_USB_input+0x3c0>)
 8009902:	7812      	ldrb	r2, [r2, #0]
 8009904:	701a      	strb	r2, [r3, #0]
                  Debug("data[%d] = 0x%02X",r, data[r]);
 8009906:	193b      	adds	r3, r7, r4
 8009908:	7818      	ldrb	r0, [r3, #0]
 800990a:	193b      	adds	r3, r7, r4
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	18d3      	adds	r3, r2, r3
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	4a2b      	ldr	r2, [pc, #172]	@ (80099c4 <Process_USB_input+0x3c8>)
 8009916:	491e      	ldr	r1, [pc, #120]	@ (8009990 <Process_USB_input+0x394>)
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	0003      	movs	r3, r0
 800991c:	2003      	movs	r0, #3
 800991e:	f00a fc61 	bl	80141e4 <CreateLine>
                  r++;
 8009922:	193b      	adds	r3, r7, r4
 8009924:	781a      	ldrb	r2, [r3, #0]
 8009926:	193b      	adds	r3, r7, r4
 8009928:	3201      	adds	r2, #1
 800992a:	701a      	strb	r2, [r3, #0]
 800992c:	e04e      	b.n	80099cc <Process_USB_input+0x3d0>
                }
              }
            }
            else {
              Debug("Invalid hexadecimal character: '%c at position %d", data[i], i);
 800992e:	2166      	movs	r1, #102	@ 0x66
 8009930:	187b      	adds	r3, r7, r1
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	18d3      	adds	r3, r2, r3
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	0018      	movs	r0, r3
 800993c:	187b      	adds	r3, r7, r1
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	4a21      	ldr	r2, [pc, #132]	@ (80099c8 <Process_USB_input+0x3cc>)
 8009942:	4913      	ldr	r1, [pc, #76]	@ (8009990 <Process_USB_input+0x394>)
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	0003      	movs	r3, r0
 8009948:	2003      	movs	r0, #3
 800994a:	f00a fc4b 	bl	80141e4 <CreateLine>
              ResetUsbRxDataSize();
 800994e:	f019 fd41 	bl	80233d4 <ResetUsbRxDataSize>
              PC_show_Keys();
 8009952:	f7ff f915 	bl	8008b80 <PC_show_Keys>
              for (uint8_t i=0; i < 32; i++) {
 8009956:	2364      	movs	r3, #100	@ 0x64
 8009958:	18fb      	adds	r3, r7, r3
 800995a:	2200      	movs	r2, #0
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	e00b      	b.n	8009978 <Process_USB_input+0x37c>
                data[i] = '\0';
 8009960:	2164      	movs	r1, #100	@ 0x64
 8009962:	187b      	adds	r3, r7, r1
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	18d3      	adds	r3, r2, r3
 800996a:	2200      	movs	r2, #0
 800996c:	701a      	strb	r2, [r3, #0]
              for (uint8_t i=0; i < 32; i++) {
 800996e:	187b      	adds	r3, r7, r1
 8009970:	781a      	ldrb	r2, [r3, #0]
 8009972:	187b      	adds	r3, r7, r1
 8009974:	3201      	adds	r2, #1
 8009976:	701a      	strb	r2, [r3, #0]
 8009978:	2364      	movs	r3, #100	@ 0x64
 800997a:	18fb      	adds	r3, r7, r3
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b1f      	cmp	r3, #31
 8009980:	d9ee      	bls.n	8009960 <Process_USB_input+0x364>
              }
              return false; // Of een andere foutwaarde
 8009982:	2300      	movs	r3, #0
 8009984:	e102      	b.n	8009b8c <Process_USB_input+0x590>
 8009986:	46c0      	nop			@ (mov r8, r8)
 8009988:	20000038 	.word	0x20000038
 800998c:	0802c3bc 	.word	0x0802c3bc
 8009990:	0802c3fc 	.word	0x0802c3fc
 8009994:	0802c400 	.word	0x0802c400
 8009998:	20001113 	.word	0x20001113
 800999c:	0802c438 	.word	0x0802c438
 80099a0:	08080194 	.word	0x08080194
 80099a4:	0802c294 	.word	0x0802c294
 80099a8:	0802c298 	.word	0x0802c298
 80099ac:	0802c458 	.word	0x0802c458
 80099b0:	20000950 	.word	0x20000950
 80099b4:	0802c478 	.word	0x0802c478
 80099b8:	0802f718 	.word	0x0802f718
 80099bc:	20000a54 	.word	0x20000a54
 80099c0:	0802c494 	.word	0x0802c494
 80099c4:	0802c4a8 	.word	0x0802c4a8
 80099c8:	0802c4bc 	.word	0x0802c4bc
        for (i=4; i < len; i++) {
 80099cc:	2166      	movs	r1, #102	@ 0x66
 80099ce:	187b      	adds	r3, r7, r1
 80099d0:	781a      	ldrb	r2, [r3, #0]
 80099d2:	187b      	adds	r3, r7, r1
 80099d4:	3201      	adds	r2, #1
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	2366      	movs	r3, #102	@ 0x66
 80099da:	18fb      	adds	r3, r7, r3
 80099dc:	781a      	ldrb	r2, [r3, #0]
 80099de:	4b6d      	ldr	r3, [pc, #436]	@ (8009b94 <Process_USB_input+0x598>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d200      	bcs.n	80099e8 <Process_USB_input+0x3ec>
 80099e6:	e6f9      	b.n	80097dc <Process_USB_input+0x1e0>
            }
          }
        }
        if (len < pwdMaxLength) {
 80099e8:	4b6a      	ldr	r3, [pc, #424]	@ (8009b94 <Process_USB_input+0x598>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80099ee:	d825      	bhi.n	8009a3c <Process_USB_input+0x440>
          if (len == 6) {
 80099f0:	4b68      	ldr	r3, [pc, #416]	@ (8009b94 <Process_USB_input+0x598>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b06      	cmp	r3, #6
 80099f6:	d114      	bne.n	8009a22 <Process_USB_input+0x426>
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80099f8:	2448      	movs	r4, #72	@ 0x48
 80099fa:	193b      	adds	r3, r7, r4
 80099fc:	4866      	ldr	r0, [pc, #408]	@ (8009b98 <Process_USB_input+0x59c>)
 80099fe:	220c      	movs	r2, #12
 8009a00:	0019      	movs	r1, r3
 8009a02:	f002 fd95 	bl	800c530 <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 8009a06:	4b65      	ldr	r3, [pc, #404]	@ (8009b9c <Process_USB_input+0x5a0>)
 8009a08:	781a      	ldrb	r2, [r3, #0]
 8009a0a:	0021      	movs	r1, r4
 8009a0c:	187b      	adds	r3, r7, r1
 8009a0e:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 8009a10:	4b63      	ldr	r3, [pc, #396]	@ (8009ba0 <Process_USB_input+0x5a4>)
 8009a12:	2202      	movs	r2, #2
 8009a14:	1879      	adds	r1, r7, r1
 8009a16:	189b      	adds	r3, r3, r2
 8009a18:	220c      	movs	r2, #12
 8009a1a:	0018      	movs	r0, r3
 8009a1c:	f01c ffd4 	bl	80269c8 <memcpy>
 8009a20:	e005      	b.n	8009a2e <Process_USB_input+0x432>
          }
          else {
            memcpy(received.Payload, data, IdSize);
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	4b5f      	ldr	r3, [pc, #380]	@ (8009ba4 <Process_USB_input+0x5a8>)
 8009a26:	220c      	movs	r2, #12
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f01c ffcd 	bl	80269c8 <memcpy>
          }
          received.Payload[12] = '\0';
 8009a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8009ba0 <Process_USB_input+0x5a4>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 8009a34:	4b5a      	ldr	r3, [pc, #360]	@ (8009ba0 <Process_USB_input+0x5a4>)
 8009a36:	220c      	movs	r2, #12
 8009a38:	705a      	strb	r2, [r3, #1]
 8009a3a:	e006      	b.n	8009a4a <Process_USB_input+0x44e>
        }
        else {
          received.PayloadLength = i-3;  // The string terminator counts
 8009a3c:	2366      	movs	r3, #102	@ 0x66
 8009a3e:	18fb      	adds	r3, r7, r3
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	3b03      	subs	r3, #3
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	4b56      	ldr	r3, [pc, #344]	@ (8009ba0 <Process_USB_input+0x5a4>)
 8009a48:	705a      	strb	r2, [r3, #1]
        }
        if ((len < pwdMaxLength) && (len != 6))  {
 8009a4a:	4b52      	ldr	r3, [pc, #328]	@ (8009b94 <Process_USB_input+0x598>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009a50:	d811      	bhi.n	8009a76 <Process_USB_input+0x47a>
 8009a52:	4b50      	ldr	r3, [pc, #320]	@ (8009b94 <Process_USB_input+0x598>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b06      	cmp	r3, #6
 8009a58:	d00d      	beq.n	8009a76 <Process_USB_input+0x47a>
//        if (len < 48) {
          uint8ArrayToString(Buffer, received.Payload);
 8009a5a:	4a52      	ldr	r2, [pc, #328]	@ (8009ba4 <Process_USB_input+0x5a8>)
 8009a5c:	2408      	movs	r4, #8
 8009a5e:	193b      	adds	r3, r7, r4
 8009a60:	0011      	movs	r1, r2
 8009a62:	0018      	movs	r0, r3
 8009a64:	f7fb fc6e 	bl	8005344 <uint8ArrayToString>
          Debug("received Payload to write %s", Buffer);
 8009a68:	193b      	adds	r3, r7, r4
 8009a6a:	4a4f      	ldr	r2, [pc, #316]	@ (8009ba8 <Process_USB_input+0x5ac>)
 8009a6c:	494f      	ldr	r1, [pc, #316]	@ (8009bac <Process_USB_input+0x5b0>)
 8009a6e:	2003      	movs	r0, #3
 8009a70:	f00a fbb8 	bl	80141e4 <CreateLine>
 8009a74:	e012      	b.n	8009a9c <Process_USB_input+0x4a0>
        }
//        else if (len == 48) {
        else if (len == pwdMaxLength) {
 8009a76:	4b47      	ldr	r3, [pc, #284]	@ (8009b94 <Process_USB_input+0x598>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b40      	cmp	r3, #64	@ 0x40
 8009a7c:	d10e      	bne.n	8009a9c <Process_USB_input+0x4a0>
          memcpy(received.Payload, data+4, i);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	1d19      	adds	r1, r3, #4
 8009a82:	2366      	movs	r3, #102	@ 0x66
 8009a84:	18fb      	adds	r3, r7, r3
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	4b46      	ldr	r3, [pc, #280]	@ (8009ba4 <Process_USB_input+0x5a8>)
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	f01c ff9c 	bl	80269c8 <memcpy>
          Debug("received Payload to write %s", received.Payload);
 8009a90:	4b44      	ldr	r3, [pc, #272]	@ (8009ba4 <Process_USB_input+0x5a8>)
 8009a92:	4a45      	ldr	r2, [pc, #276]	@ (8009ba8 <Process_USB_input+0x5ac>)
 8009a94:	4945      	ldr	r1, [pc, #276]	@ (8009bac <Process_USB_input+0x5b0>)
 8009a96:	2003      	movs	r0, #3
 8009a98:	f00a fba4 	bl	80141e4 <CreateLine>
        }
        ProcessCmd(received);
 8009a9c:	4c40      	ldr	r4, [pc, #256]	@ (8009ba0 <Process_USB_input+0x5a4>)
 8009a9e:	466b      	mov	r3, sp
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	0023      	movs	r3, r4
 8009aa4:	3310      	adds	r3, #16
 8009aa6:	22f4      	movs	r2, #244	@ 0xf4
 8009aa8:	0019      	movs	r1, r3
 8009aaa:	f01c ff8d 	bl	80269c8 <memcpy>
 8009aae:	6820      	ldr	r0, [r4, #0]
 8009ab0:	6861      	ldr	r1, [r4, #4]
 8009ab2:	68a2      	ldr	r2, [r4, #8]
 8009ab4:	68e3      	ldr	r3, [r4, #12]
 8009ab6:	f7fe fd69 	bl	800858c <ProcessCmd>
        ResetUsbRxDataSize();
 8009aba:	f019 fc8b 	bl	80233d4 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009abe:	f7ff f85f 	bl	8008b80 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8009ac2:	2363      	movs	r3, #99	@ 0x63
 8009ac4:	18fb      	adds	r3, r7, r3
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	e00b      	b.n	8009ae4 <Process_USB_input+0x4e8>
//        for (uint8_t i=0; i < pwdMaxLength; i++) {
          data[i] = '\0';
 8009acc:	2163      	movs	r1, #99	@ 0x63
 8009ace:	187b      	adds	r3, r7, r1
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	18d3      	adds	r3, r2, r3
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009ada:	187b      	adds	r3, r7, r1
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	187b      	adds	r3, r7, r1
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	701a      	strb	r2, [r3, #0]
 8009ae4:	2363      	movs	r3, #99	@ 0x63
 8009ae6:	18fb      	adds	r3, r7, r3
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	2b1f      	cmp	r3, #31
 8009aec:	d9ee      	bls.n	8009acc <Process_USB_input+0x4d0>
        }
        return true;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e04c      	b.n	8009b8c <Process_USB_input+0x590>
      }
      else {
        printf_USB("\r\nInvalid input; Command comma not found\r\n");
 8009af2:	4b2f      	ldr	r3, [pc, #188]	@ (8009bb0 <Process_USB_input+0x5b4>)
 8009af4:	0018      	movs	r0, r3
 8009af6:	f7ff f803 	bl	8008b00 <printf_USB>
        ResetUsbRxDataSize();
 8009afa:	f019 fc6b 	bl	80233d4 <ResetUsbRxDataSize>
//        for (uint8_t i=0; i < pwdMaxLength; i++) {
        for (uint8_t i=0; i < 32; i++) {
 8009afe:	2362      	movs	r3, #98	@ 0x62
 8009b00:	18fb      	adds	r3, r7, r3
 8009b02:	2200      	movs	r2, #0
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	e00b      	b.n	8009b20 <Process_USB_input+0x524>
          data[i] = '\0';
 8009b08:	2162      	movs	r1, #98	@ 0x62
 8009b0a:	187b      	adds	r3, r7, r1
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	18d3      	adds	r3, r2, r3
 8009b12:	2200      	movs	r2, #0
 8009b14:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009b16:	187b      	adds	r3, r7, r1
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	187b      	adds	r3, r7, r1
 8009b1c:	3201      	adds	r2, #1
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	2362      	movs	r3, #98	@ 0x62
 8009b22:	18fb      	adds	r3, r7, r3
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b1f      	cmp	r3, #31
 8009b28:	d9ee      	bls.n	8009b08 <Process_USB_input+0x50c>
        }
      }
    }
//    else {
    PC_show_Keys();
 8009b2a:	f7ff f829 	bl	8008b80 <PC_show_Keys>
    ResetUsbRxDataSize();
 8009b2e:	f019 fc51 	bl	80233d4 <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < length; i++) {
 8009b32:	2361      	movs	r3, #97	@ 0x61
 8009b34:	18fb      	adds	r3, r7, r3
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	e00b      	b.n	8009b54 <Process_USB_input+0x558>
      data[i] = '\0';
 8009b3c:	2161      	movs	r1, #97	@ 0x61
 8009b3e:	187b      	adds	r3, r7, r1
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	18d3      	adds	r3, r2, r3
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 8009b4a:	187b      	adds	r3, r7, r1
 8009b4c:	781a      	ldrb	r2, [r3, #0]
 8009b4e:	187b      	adds	r3, r7, r1
 8009b50:	3201      	adds	r2, #1
 8009b52:	701a      	strb	r2, [r3, #0]
 8009b54:	2361      	movs	r3, #97	@ 0x61
 8009b56:	18fb      	adds	r3, r7, r3
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d8ed      	bhi.n	8009b3c <Process_USB_input+0x540>
    }
    len = 6;
 8009b60:	4b0c      	ldr	r3, [pc, #48]	@ (8009b94 <Process_USB_input+0x598>)
 8009b62:	2206      	movs	r2, #6
 8009b64:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 8009b66:	4b13      	ldr	r3, [pc, #76]	@ (8009bb4 <Process_USB_input+0x5b8>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d008      	beq.n	8009b82 <Process_USB_input+0x586>
    printf_USB("USB input: %s\r", (const char*)data);
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	4b11      	ldr	r3, [pc, #68]	@ (8009bb8 <Process_USB_input+0x5bc>)
 8009b74:	0011      	movs	r1, r2
 8009b76:	0018      	movs	r0, r3
 8009b78:	f7fe ffc2 	bl	8008b00 <printf_USB>
    formerlength = length;
 8009b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb4 <Process_USB_input+0x5b8>)
 8009b7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b80:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b84:	0018      	movs	r0, r3
 8009b86:	f019 fc47 	bl	8023418 <GetUsbRxNextChunk>
  return false;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	b01b      	add	sp, #108	@ 0x6c
 8009b92:	bd90      	pop	{r4, r7, pc}
 8009b94:	20000038 	.word	0x20000038
 8009b98:	08080000 	.word	0x08080000
 8009b9c:	20000a54 	.word	0x20000a54
 8009ba0:	20000950 	.word	0x20000950
 8009ba4:	20000952 	.word	0x20000952
 8009ba8:	0802c4f0 	.word	0x0802c4f0
 8009bac:	0802c3fc 	.word	0x0802c3fc
 8009bb0:	0802c510 	.word	0x0802c510
 8009bb4:	20000a58 	.word	0x20000a58
 8009bb8:	0802c53c 	.word	0x0802c53c

08009bbc <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009bc0:	4b26      	ldr	r3, [pc, #152]	@ (8009c5c <ReadBatteryVoltage+0xa0>)
 8009bc2:	4a27      	ldr	r2, [pc, #156]	@ (8009c60 <ReadBatteryVoltage+0xa4>)
 8009bc4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009bc6:	4b25      	ldr	r3, [pc, #148]	@ (8009c5c <ReadBatteryVoltage+0xa0>)
 8009bc8:	2280      	movs	r2, #128	@ 0x80
 8009bca:	0152      	lsls	r2, r2, #5
 8009bcc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009bce:	4a23      	ldr	r2, [pc, #140]	@ (8009c5c <ReadBatteryVoltage+0xa0>)
 8009bd0:	4b24      	ldr	r3, [pc, #144]	@ (8009c64 <ReadBatteryVoltage+0xa8>)
 8009bd2:	0011      	movs	r1, r2
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	f00b fb55 	bl	8015284 <HAL_ADC_ConfigChannel>
 8009bda:	1e03      	subs	r3, r0, #0
 8009bdc:	d001      	beq.n	8009be2 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8009bde:	f003 fdb9 	bl	800d754 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009be2:	4b20      	ldr	r3, [pc, #128]	@ (8009c64 <ReadBatteryVoltage+0xa8>)
 8009be4:	0018      	movs	r0, r3
 8009be6:	f00b fa51 	bl	801508c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009bea:	4b1e      	ldr	r3, [pc, #120]	@ (8009c64 <ReadBatteryVoltage+0xa8>)
 8009bec:	2101      	movs	r1, #1
 8009bee:	0018      	movs	r0, r3
 8009bf0:	f00b faa0 	bl	8015134 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8009c64 <ReadBatteryVoltage+0xa8>)
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	f00b fb38 	bl	801526c <HAL_ADC_GetValue>
 8009bfc:	0002      	movs	r2, r0
 8009bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8009c68 <ReadBatteryVoltage+0xac>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4353      	muls	r3, r2
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	4919      	ldr	r1, [pc, #100]	@ (8009c6c <ReadBatteryVoltage+0xb0>)
 8009c08:	0018      	movs	r0, r3
 8009c0a:	f7f6 facb 	bl	80001a4 <__udivsi3>
 8009c0e:	0003      	movs	r3, r0
 8009c10:	001a      	movs	r2, r3
 8009c12:	4b17      	ldr	r3, [pc, #92]	@ (8009c70 <ReadBatteryVoltage+0xb4>)
 8009c14:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009c16:	4b16      	ldr	r3, [pc, #88]	@ (8009c70 <ReadBatteryVoltage+0xb4>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	f7f7 fe54 	bl	80018c8 <__aeabi_ui2f>
 8009c20:	1c03      	adds	r3, r0, #0
 8009c22:	4914      	ldr	r1, [pc, #80]	@ (8009c74 <ReadBatteryVoltage+0xb8>)
 8009c24:	1c18      	adds	r0, r3, #0
 8009c26:	f7f7 f83d 	bl	8000ca4 <__aeabi_fdiv>
 8009c2a:	1c03      	adds	r3, r0, #0
 8009c2c:	1c1a      	adds	r2, r3, #0
 8009c2e:	4b12      	ldr	r3, [pc, #72]	@ (8009c78 <ReadBatteryVoltage+0xbc>)
 8009c30:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009c32:	4b0a      	ldr	r3, [pc, #40]	@ (8009c5c <ReadBatteryVoltage+0xa0>)
 8009c34:	4a0a      	ldr	r2, [pc, #40]	@ (8009c60 <ReadBatteryVoltage+0xa4>)
 8009c36:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009c38:	4b08      	ldr	r3, [pc, #32]	@ (8009c5c <ReadBatteryVoltage+0xa0>)
 8009c3a:	4a10      	ldr	r2, [pc, #64]	@ (8009c7c <ReadBatteryVoltage+0xc0>)
 8009c3c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009c3e:	4a07      	ldr	r2, [pc, #28]	@ (8009c5c <ReadBatteryVoltage+0xa0>)
 8009c40:	4b08      	ldr	r3, [pc, #32]	@ (8009c64 <ReadBatteryVoltage+0xa8>)
 8009c42:	0011      	movs	r1, r2
 8009c44:	0018      	movs	r0, r3
 8009c46:	f00b fb1d 	bl	8015284 <HAL_ADC_ConfigChannel>
 8009c4a:	1e03      	subs	r3, r0, #0
 8009c4c:	d001      	beq.n	8009c52 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009c4e:	f003 fd81 	bl	800d754 <Error_Handler>
  }
  return trueValue;
 8009c52:	4b09      	ldr	r3, [pc, #36]	@ (8009c78 <ReadBatteryVoltage+0xbc>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 }
 8009c56:	1c18      	adds	r0, r3, #0
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20000e28 	.word	0x20000e28
 8009c60:	38004000 	.word	0x38004000
 8009c64:	20000e7c 	.word	0x20000e7c
 8009c68:	2000003c 	.word	0x2000003c
 8009c6c:	00000fff 	.word	0x00000fff
 8009c70:	20000e44 	.word	0x20000e44
 8009c74:	447a0000 	.word	0x447a0000
 8009c78:	20000e48 	.word	0x20000e48
 8009c7c:	00001001 	.word	0x00001001

08009c80 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009c84:	4b21      	ldr	r3, [pc, #132]	@ (8009d0c <ReadSolarVoltage+0x8c>)
 8009c86:	4a22      	ldr	r2, [pc, #136]	@ (8009d10 <ReadSolarVoltage+0x90>)
 8009c88:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009c8a:	4b20      	ldr	r3, [pc, #128]	@ (8009d0c <ReadSolarVoltage+0x8c>)
 8009c8c:	2280      	movs	r2, #128	@ 0x80
 8009c8e:	0152      	lsls	r2, r2, #5
 8009c90:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009c92:	4a1e      	ldr	r2, [pc, #120]	@ (8009d0c <ReadSolarVoltage+0x8c>)
 8009c94:	4b1f      	ldr	r3, [pc, #124]	@ (8009d14 <ReadSolarVoltage+0x94>)
 8009c96:	0011      	movs	r1, r2
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f00b faf3 	bl	8015284 <HAL_ADC_ConfigChannel>
 8009c9e:	1e03      	subs	r3, r0, #0
 8009ca0:	d001      	beq.n	8009ca6 <ReadSolarVoltage+0x26>
    Error_Handler();
 8009ca2:	f003 fd57 	bl	800d754 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8009d14 <ReadSolarVoltage+0x94>)
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f00b f9ef 	bl	801508c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009cae:	4b19      	ldr	r3, [pc, #100]	@ (8009d14 <ReadSolarVoltage+0x94>)
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f00b fa3e 	bl	8015134 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009cb8:	4b16      	ldr	r3, [pc, #88]	@ (8009d14 <ReadSolarVoltage+0x94>)
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f00b fad6 	bl	801526c <HAL_ADC_GetValue>
 8009cc0:	0002      	movs	r2, r0
 8009cc2:	4b15      	ldr	r3, [pc, #84]	@ (8009d18 <ReadSolarVoltage+0x98>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	435a      	muls	r2, r3
 8009cc8:	0013      	movs	r3, r2
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	189b      	adds	r3, r3, r2
 8009cce:	4913      	ldr	r1, [pc, #76]	@ (8009d1c <ReadSolarVoltage+0x9c>)
 8009cd0:	0018      	movs	r0, r3
 8009cd2:	f7f6 fa67 	bl	80001a4 <__udivsi3>
 8009cd6:	0003      	movs	r3, r0
 8009cd8:	001a      	movs	r2, r3
 8009cda:	4b11      	ldr	r3, [pc, #68]	@ (8009d20 <ReadSolarVoltage+0xa0>)
 8009cdc:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8009cde:	4b0b      	ldr	r3, [pc, #44]	@ (8009d0c <ReadSolarVoltage+0x8c>)
 8009ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8009d10 <ReadSolarVoltage+0x90>)
 8009ce2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009ce4:	4b09      	ldr	r3, [pc, #36]	@ (8009d0c <ReadSolarVoltage+0x8c>)
 8009ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8009d24 <ReadSolarVoltage+0xa4>)
 8009ce8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009cea:	4a08      	ldr	r2, [pc, #32]	@ (8009d0c <ReadSolarVoltage+0x8c>)
 8009cec:	4b09      	ldr	r3, [pc, #36]	@ (8009d14 <ReadSolarVoltage+0x94>)
 8009cee:	0011      	movs	r1, r2
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	f00b fac7 	bl	8015284 <HAL_ADC_ConfigChannel>
 8009cf6:	1e03      	subs	r3, r0, #0
 8009cf8:	d001      	beq.n	8009cfe <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009cfa:	f003 fd2b 	bl	800d754 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8009cfe:	4b08      	ldr	r3, [pc, #32]	@ (8009d20 <ReadSolarVoltage+0xa0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	b29b      	uxth	r3, r3
 }
 8009d04:	0018      	movs	r0, r3
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	46c0      	nop			@ (mov r8, r8)
 8009d0c:	20000e28 	.word	0x20000e28
 8009d10:	3c008000 	.word	0x3c008000
 8009d14:	20000e7c 	.word	0x20000e7c
 8009d18:	2000003c 	.word	0x2000003c
 8009d1c:	00000fff 	.word	0x00000fff
 8009d20:	20000e4c 	.word	0x20000e4c
 8009d24:	00001001 	.word	0x00001001

08009d28 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009d2c:	23a0      	movs	r3, #160	@ 0xa0
 8009d2e:	05db      	lsls	r3, r3, #23
 8009d30:	2180      	movs	r1, #128	@ 0x80
 8009d32:	0018      	movs	r0, r3
 8009d34:	f00c fa42 	bl	80161bc <HAL_GPIO_ReadPin>
 8009d38:	1e03      	subs	r3, r0, #0
 8009d3a:	d008      	beq.n	8009d4e <Check_USB_PowerOn+0x26>
     if (sendpwremail == DONE) {
 8009d3c:	4b06      	ldr	r3, [pc, #24]	@ (8009d58 <Check_USB_PowerOn+0x30>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d102      	bne.n	8009d4a <Check_USB_PowerOn+0x22>
       sendpwremail = CLEAR;
 8009d44:	4b04      	ldr	r3, [pc, #16]	@ (8009d58 <Check_USB_PowerOn+0x30>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e000      	b.n	8009d50 <Check_USB_PowerOn+0x28>
   }
   return false;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	0018      	movs	r0, r3
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	46c0      	nop			@ (mov r8, r8)
 8009d58:	20001114 	.word	0x20001114

08009d5c <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 8009d62:	1dfb      	adds	r3, r7, #7
 8009d64:	2201      	movs	r2, #1
 8009d66:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009d68:	1dbb      	adds	r3, r7, #6
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009d6e:	4b27      	ldr	r3, [pc, #156]	@ (8009e0c <Read_Charge_Status+0xb0>)
 8009d70:	2280      	movs	r2, #128	@ 0x80
 8009d72:	0092      	lsls	r2, r2, #2
 8009d74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d76:	4b25      	ldr	r3, [pc, #148]	@ (8009e0c <Read_Charge_Status+0xb0>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009d7c:	4b23      	ldr	r3, [pc, #140]	@ (8009e0c <Read_Charge_Status+0xb0>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009d82:	4b22      	ldr	r3, [pc, #136]	@ (8009e0c <Read_Charge_Status+0xb0>)
 8009d84:	4a22      	ldr	r2, [pc, #136]	@ (8009e10 <Read_Charge_Status+0xb4>)
 8009d86:	0019      	movs	r1, r3
 8009d88:	0010      	movs	r0, r2
 8009d8a:	f00c f899 	bl	8015ec0 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009d8e:	2380      	movs	r3, #128	@ 0x80
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4a1f      	ldr	r2, [pc, #124]	@ (8009e10 <Read_Charge_Status+0xb4>)
 8009d94:	0019      	movs	r1, r3
 8009d96:	0010      	movs	r0, r2
 8009d98:	f00c fa10 	bl	80161bc <HAL_GPIO_ReadPin>
 8009d9c:	0003      	movs	r3, r0
 8009d9e:	001a      	movs	r2, r3
 8009da0:	1dfb      	adds	r3, r7, #7
 8009da2:	1e51      	subs	r1, r2, #1
 8009da4:	418a      	sbcs	r2, r1
 8009da6:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009da8:	4b18      	ldr	r3, [pc, #96]	@ (8009e0c <Read_Charge_Status+0xb0>)
 8009daa:	2280      	movs	r2, #128	@ 0x80
 8009dac:	0092      	lsls	r2, r2, #2
 8009dae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009db0:	4b16      	ldr	r3, [pc, #88]	@ (8009e0c <Read_Charge_Status+0xb0>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009db6:	4b15      	ldr	r3, [pc, #84]	@ (8009e0c <Read_Charge_Status+0xb0>)
 8009db8:	2202      	movs	r2, #2
 8009dba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009dbc:	4b13      	ldr	r3, [pc, #76]	@ (8009e0c <Read_Charge_Status+0xb0>)
 8009dbe:	4a14      	ldr	r2, [pc, #80]	@ (8009e10 <Read_Charge_Status+0xb4>)
 8009dc0:	0019      	movs	r1, r3
 8009dc2:	0010      	movs	r0, r2
 8009dc4:	f00c f87c 	bl	8015ec0 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009dc8:	2380      	movs	r3, #128	@ 0x80
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4a10      	ldr	r2, [pc, #64]	@ (8009e10 <Read_Charge_Status+0xb4>)
 8009dce:	0019      	movs	r1, r3
 8009dd0:	0010      	movs	r0, r2
 8009dd2:	f00c f9f3 	bl	80161bc <HAL_GPIO_ReadPin>
 8009dd6:	0003      	movs	r3, r0
 8009dd8:	001a      	movs	r2, r3
 8009dda:	1dbb      	adds	r3, r7, #6
 8009ddc:	1e51      	subs	r1, r2, #1
 8009dde:	418a      	sbcs	r2, r1
 8009de0:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 8009de2:	1dfb      	adds	r3, r7, #7
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2201      	movs	r2, #1
 8009de8:	4053      	eors	r3, r2
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e006      	b.n	8009e02 <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 8009df4:	1dbb      	adds	r3, r7, #6
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	e000      	b.n	8009e02 <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	0018      	movs	r0, r3
 8009e04:	46bd      	mov	sp, r7
 8009e06:	b002      	add	sp, #8
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	46c0      	nop			@ (mov r8, r8)
 8009e0c:	20000e30 	.word	0x20000e30
 8009e10:	50000800 	.word	0x50000800

08009e14 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009e18:	2380      	movs	r3, #128	@ 0x80
 8009e1a:	021a      	lsls	r2, r3, #8
 8009e1c:	23a0      	movs	r3, #160	@ 0xa0
 8009e1e:	05db      	lsls	r3, r3, #23
 8009e20:	0011      	movs	r1, r2
 8009e22:	0018      	movs	r0, r3
 8009e24:	f00c f9ca 	bl	80161bc <HAL_GPIO_ReadPin>
 8009e28:	0003      	movs	r3, r0
 8009e2a:	1e5a      	subs	r2, r3, #1
 8009e2c:	4193      	sbcs	r3, r2
 8009e2e:	b2db      	uxtb	r3, r3
}
 8009e30:	0018      	movs	r0, r3
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009e3c:	4b05      	ldr	r3, [pc, #20]	@ (8009e54 <UserButton_Pressed+0x1c>)
 8009e3e:	2104      	movs	r1, #4
 8009e40:	0018      	movs	r0, r3
 8009e42:	f00c f9bb 	bl	80161bc <HAL_GPIO_ReadPin>
 8009e46:	0003      	movs	r3, r0
 8009e48:	425a      	negs	r2, r3
 8009e4a:	4153      	adcs	r3, r2
 8009e4c:	b2db      	uxtb	r3, r3
}
 8009e4e:	0018      	movs	r0, r3
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	50000c00 	.word	0x50000c00

08009e58 <getUptime>:

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

#ifndef PUBLIC
void getUptime(char* uptbuffer) {
 8009e58:	b590      	push	{r4, r7, lr}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	6078      	str	r0, [r7, #4]
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
 8009e60:	4b08      	ldr	r3, [pc, #32]	@ (8009e84 <getUptime+0x2c>)
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	001a      	movs	r2, r3
 8009e66:	4b07      	ldr	r3, [pc, #28]	@ (8009e84 <getUptime+0x2c>)
 8009e68:	789b      	ldrb	r3, [r3, #2]
 8009e6a:	001c      	movs	r4, r3
 8009e6c:	4b05      	ldr	r3, [pc, #20]	@ (8009e84 <getUptime+0x2c>)
 8009e6e:	78db      	ldrb	r3, [r3, #3]
 8009e70:	4905      	ldr	r1, [pc, #20]	@ (8009e88 <getUptime+0x30>)
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	0023      	movs	r3, r4
 8009e78:	f01c fb82 	bl	8026580 <siprintf>
}
 8009e7c:	46c0      	nop			@ (mov r8, r8)
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	b003      	add	sp, #12
 8009e82:	bd90      	pop	{r4, r7, pc}
 8009e84:	20000e54 	.word	0x20000e54
 8009e88:	0802c598 	.word	0x0802c598

08009e8c <showTime>:
#endif

void showTime() {
 8009e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8e:	46de      	mov	lr, fp
 8009e90:	4657      	mov	r7, sl
 8009e92:	464e      	mov	r6, r9
 8009e94:	4645      	mov	r5, r8
 8009e96:	b5e0      	push	{r5, r6, r7, lr}
 8009e98:	b093      	sub	sp, #76	@ 0x4c
 8009e9a:	af0a      	add	r7, sp, #40	@ 0x28
  if (posixBootTime == 0) {
 8009e9c:	4b43      	ldr	r3, [pc, #268]	@ (8009fac <showTime+0x120>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d100      	bne.n	8009ea6 <showTime+0x1a>
 8009ea4:	e079      	b.n	8009f9a <showTime+0x10e>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009ea6:	2308      	movs	r3, #8
 8009ea8:	18fa      	adds	r2, r7, r3
 8009eaa:	230c      	movs	r3, #12
 8009eac:	18fb      	adds	r3, r7, r3
 8009eae:	0011      	movs	r1, r2
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	f000 fb07 	bl	800a4c4 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009eb6:	230c      	movs	r3, #12
 8009eb8:	18fb      	adds	r3, r7, r3
 8009eba:	781a      	ldrb	r2, [r3, #0]
 8009ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8009fb0 <showTime+0x124>)
 8009ebe:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	18fb      	adds	r3, r7, r3
 8009ec4:	781a      	ldrb	r2, [r3, #0]
 8009ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8009fb4 <showTime+0x128>)
 8009ec8:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009eca:	f000 f893 	bl	8009ff4 <UpdateSystemUptime>
  Info("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds",
 8009ece:	2308      	movs	r3, #8
 8009ed0:	18fb      	adds	r3, r7, r3
 8009ed2:	789b      	ldrb	r3, [r3, #2]
 8009ed4:	469b      	mov	fp, r3
 8009ed6:	2308      	movs	r3, #8
 8009ed8:	18fb      	adds	r3, r7, r3
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	1e5a      	subs	r2, r3, #1
 8009ede:	4b36      	ldr	r3, [pc, #216]	@ (8009fb8 <showTime+0x12c>)
 8009ee0:	0092      	lsls	r2, r2, #2
 8009ee2:	58d3      	ldr	r3, [r2, r3]
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	2308      	movs	r3, #8
 8009ee8:	18fa      	adds	r2, r7, r3
 8009eea:	78d2      	ldrb	r2, [r2, #3]
 8009eec:	0010      	movs	r0, r2
 8009eee:	230c      	movs	r3, #12
 8009ef0:	18fa      	adds	r2, r7, r3
 8009ef2:	7812      	ldrb	r2, [r2, #0]
 8009ef4:	0014      	movs	r4, r2
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	18fa      	adds	r2, r7, r3
 8009efa:	7852      	ldrb	r2, [r2, #1]
 8009efc:	0015      	movs	r5, r2
 8009efe:	230c      	movs	r3, #12
 8009f00:	18fa      	adds	r2, r7, r3
 8009f02:	7892      	ldrb	r2, [r2, #2]
 8009f04:	0016      	movs	r6, r2
 8009f06:	4a2d      	ldr	r2, [pc, #180]	@ (8009fbc <showTime+0x130>)
 8009f08:	8812      	ldrh	r2, [r2, #0]
 8009f0a:	4694      	mov	ip, r2
 8009f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8009fbc <showTime+0x130>)
 8009f0e:	7892      	ldrb	r2, [r2, #2]
 8009f10:	4690      	mov	r8, r2
 8009f12:	4a2a      	ldr	r2, [pc, #168]	@ (8009fbc <showTime+0x130>)
 8009f14:	78d2      	ldrb	r2, [r2, #3]
 8009f16:	4691      	mov	r9, r2
 8009f18:	4a28      	ldr	r2, [pc, #160]	@ (8009fbc <showTime+0x130>)
 8009f1a:	7912      	ldrb	r2, [r2, #4]
 8009f1c:	4692      	mov	sl, r2
 8009f1e:	4a28      	ldr	r2, [pc, #160]	@ (8009fc0 <showTime+0x134>)
 8009f20:	4928      	ldr	r1, [pc, #160]	@ (8009fc4 <showTime+0x138>)
 8009f22:	4653      	mov	r3, sl
 8009f24:	9308      	str	r3, [sp, #32]
 8009f26:	464b      	mov	r3, r9
 8009f28:	9307      	str	r3, [sp, #28]
 8009f2a:	4643      	mov	r3, r8
 8009f2c:	9306      	str	r3, [sp, #24]
 8009f2e:	4663      	mov	r3, ip
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	9604      	str	r6, [sp, #16]
 8009f34:	9503      	str	r5, [sp, #12]
 8009f36:	9402      	str	r4, [sp, #8]
 8009f38:	9001      	str	r0, [sp, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	465b      	mov	r3, fp
 8009f40:	2002      	movs	r0, #2
 8009f42:	f00a f94f 	bl	80141e4 <CreateLine>
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009f46:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb4 <showTime+0x128>)
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b07      	cmp	r3, #7
 8009f4c:	d126      	bne.n	8009f9c <showTime+0x110>
 8009f4e:	4b18      	ldr	r3, [pc, #96]	@ (8009fb0 <showTime+0x124>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d122      	bne.n	8009f9c <showTime+0x110>
 8009f56:	230c      	movs	r3, #12
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	785b      	ldrb	r3, [r3, #1]
 8009f5c:	2b10      	cmp	r3, #16
 8009f5e:	d81d      	bhi.n	8009f9c <showTime+0x110>
 8009f60:	4b19      	ldr	r3, [pc, #100]	@ (8009fc8 <showTime+0x13c>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	2201      	movs	r2, #1
 8009f66:	4053      	eors	r3, r2
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d016      	beq.n	8009f9c <showTime+0x110>
 8009f6e:	2308      	movs	r3, #8
 8009f70:	18fb      	adds	r3, r7, r3
 8009f72:	789b      	ldrb	r3, [r3, #2]
 8009f74:	2b18      	cmp	r3, #24
 8009f76:	d911      	bls.n	8009f9c <showTime+0x110>
 8009f78:	2308      	movs	r3, #8
 8009f7a:	18fb      	adds	r3, r7, r3
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d004      	beq.n	8009f8c <showTime+0x100>
 8009f82:	2308      	movs	r3, #8
 8009f84:	18fb      	adds	r3, r7, r3
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b0a      	cmp	r3, #10
 8009f8a:	d107      	bne.n	8009f9c <showTime+0x110>
    dstchkd = true;
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8009fc8 <showTime+0x13c>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009f92:	2000      	movs	r0, #0
 8009f94:	f7fa fcc2 	bl	800491c <setESPTimeStamp>
 8009f98:	e000      	b.n	8009f9c <showTime+0x110>
    return;
 8009f9a:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	b009      	add	sp, #36	@ 0x24
 8009fa0:	bcf0      	pop	{r4, r5, r6, r7}
 8009fa2:	46bb      	mov	fp, r7
 8009fa4:	46b2      	mov	sl, r6
 8009fa6:	46a9      	mov	r9, r5
 8009fa8:	46a0      	mov	r8, r4
 8009faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fac:	20000e60 	.word	0x20000e60
 8009fb0:	20000e51 	.word	0x20000e51
 8009fb4:	20000e52 	.word	0x20000e52
 8009fb8:	2000005c 	.word	0x2000005c
 8009fbc:	20000e54 	.word	0x20000e54
 8009fc0:	0802c5a4 	.word	0x0802c5a4
 8009fc4:	0802c5fc 	.word	0x0802c5fc
 8009fc8:	20000e50 	.word	0x20000e50

08009fcc <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009fd2:	003a      	movs	r2, r7
 8009fd4:	1d3b      	adds	r3, r7, #4
 8009fd6:	0011      	movs	r1, r2
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f000 fa73 	bl	800a4c4 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009fde:	1d3a      	adds	r2, r7, #4
 8009fe0:	003b      	movs	r3, r7
 8009fe2:	0011      	movs	r1, r2
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f000 fc97 	bl	800a918 <makeTime>
 8009fea:	0003      	movs	r3, r0
}
 8009fec:	0018      	movs	r0, r3
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	b006      	add	sp, #24
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8009ffa:	003a      	movs	r2, r7
 8009ffc:	1d3b      	adds	r3, r7, #4
 8009ffe:	0011      	movs	r1, r2
 800a000:	0018      	movs	r0, r3
 800a002:	f000 fa5f 	bl	800a4c4 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800a006:	1d3a      	adds	r2, r7, #4
 800a008:	003b      	movs	r3, r7
 800a00a:	0011      	movs	r1, r2
 800a00c:	0018      	movs	r0, r3
 800a00e:	f000 fc83 	bl	800a918 <makeTime>
 800a012:	0002      	movs	r2, r0
 800a014:	4b1e      	ldr	r3, [pc, #120]	@ (800a090 <UpdateSystemUptime+0x9c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	213c      	movs	r1, #60	@ 0x3c
 800a024:	0018      	movs	r0, r3
 800a026:	f7f6 f943 	bl	80002b0 <__aeabi_uidivmod>
 800a02a:	000b      	movs	r3, r1
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	4b19      	ldr	r3, [pc, #100]	@ (800a094 <UpdateSystemUptime+0xa0>)
 800a030:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	213c      	movs	r1, #60	@ 0x3c
 800a036:	0018      	movs	r0, r3
 800a038:	f7f6 f8b4 	bl	80001a4 <__udivsi3>
 800a03c:	0003      	movs	r3, r0
 800a03e:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	213c      	movs	r1, #60	@ 0x3c
 800a044:	0018      	movs	r0, r3
 800a046:	f7f6 f933 	bl	80002b0 <__aeabi_uidivmod>
 800a04a:	000b      	movs	r3, r1
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	4b11      	ldr	r3, [pc, #68]	@ (800a094 <UpdateSystemUptime+0xa0>)
 800a050:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	213c      	movs	r1, #60	@ 0x3c
 800a056:	0018      	movs	r0, r3
 800a058:	f7f6 f8a4 	bl	80001a4 <__udivsi3>
 800a05c:	0003      	movs	r3, r0
 800a05e:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	2118      	movs	r1, #24
 800a064:	0018      	movs	r0, r3
 800a066:	f7f6 f923 	bl	80002b0 <__aeabi_uidivmod>
 800a06a:	000b      	movs	r3, r1
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	4b09      	ldr	r3, [pc, #36]	@ (800a094 <UpdateSystemUptime+0xa0>)
 800a070:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	2118      	movs	r1, #24
 800a076:	0018      	movs	r0, r3
 800a078:	f7f6 f894 	bl	80001a4 <__udivsi3>
 800a07c:	0003      	movs	r3, r0
 800a07e:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	b29a      	uxth	r2, r3
 800a084:	4b03      	ldr	r3, [pc, #12]	@ (800a094 <UpdateSystemUptime+0xa0>)
 800a086:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800a088:	46c0      	nop			@ (mov r8, r8)
 800a08a:	46bd      	mov	sp, r7
 800a08c:	b008      	add	sp, #32
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20000e60 	.word	0x20000e60
 800a094:	20000e54 	.word	0x20000e54

0800a098 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800a098:	b590      	push	{r4, r7, lr}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	0008      	movs	r0, r1
 800a0a2:	0011      	movs	r1, r2
 800a0a4:	1cfb      	adds	r3, r7, #3
 800a0a6:	1c02      	adds	r2, r0, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
 800a0aa:	1cbb      	adds	r3, r7, #2
 800a0ac:	1c0a      	adds	r2, r1, #0
 800a0ae:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800a0b0:	230e      	movs	r3, #14
 800a0b2:	18fb      	adds	r3, r7, r3
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a0b8:	230f      	movs	r3, #15
 800a0ba:	18fb      	adds	r3, r7, r3
 800a0bc:	1cfa      	adds	r2, r7, #3
 800a0be:	7812      	ldrb	r2, [r2, #0]
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	e015      	b.n	800a0f0 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800a0c4:	200f      	movs	r0, #15
 800a0c6:	183b      	adds	r3, r7, r0
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	18d2      	adds	r2, r2, r3
 800a0ce:	240e      	movs	r4, #14
 800a0d0:	193b      	adds	r3, r7, r4
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	7811      	ldrb	r1, [r2, #0]
 800a0d6:	2208      	movs	r2, #8
 800a0d8:	18ba      	adds	r2, r7, r2
 800a0da:	54d1      	strb	r1, [r2, r3]
    pos++;
 800a0dc:	193b      	adds	r3, r7, r4
 800a0de:	781a      	ldrb	r2, [r3, #0]
 800a0e0:	193b      	adds	r3, r7, r4
 800a0e2:	3201      	adds	r2, #1
 800a0e4:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a0e6:	183b      	adds	r3, r7, r0
 800a0e8:	781a      	ldrb	r2, [r3, #0]
 800a0ea:	183b      	adds	r3, r7, r0
 800a0ec:	3201      	adds	r2, #1
 800a0ee:	701a      	strb	r2, [r3, #0]
 800a0f0:	200f      	movs	r0, #15
 800a0f2:	183a      	adds	r2, r7, r0
 800a0f4:	1cbb      	adds	r3, r7, #2
 800a0f6:	7812      	ldrb	r2, [r2, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d9e2      	bls.n	800a0c4 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800a0fe:	230e      	movs	r3, #14
 800a100:	18fb      	adds	r3, r7, r3
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2208      	movs	r2, #8
 800a106:	18ba      	adds	r2, r7, r2
 800a108:	2100      	movs	r1, #0
 800a10a:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800a10c:	1cfb      	adds	r3, r7, #3
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b13      	cmp	r3, #19
 800a112:	d849      	bhi.n	800a1a8 <aBuff2int+0x110>
    if (start == 17) { //month
 800a114:	1cfb      	adds	r3, r7, #3
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b11      	cmp	r3, #17
 800a11a:	d122      	bne.n	800a162 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800a11c:	183b      	adds	r3, r7, r0
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
 800a122:	e018      	b.n	800a156 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800a124:	240f      	movs	r4, #15
 800a126:	193b      	adds	r3, r7, r4
 800a128:	781a      	ldrb	r2, [r3, #0]
 800a12a:	4b25      	ldr	r3, [pc, #148]	@ (800a1c0 <aBuff2int+0x128>)
 800a12c:	0092      	lsls	r2, r2, #2
 800a12e:	58d2      	ldr	r2, [r2, r3]
 800a130:	2308      	movs	r3, #8
 800a132:	18fb      	adds	r3, r7, r3
 800a134:	0011      	movs	r1, r2
 800a136:	0018      	movs	r0, r3
 800a138:	f7f6 f80e 	bl	8000158 <strcmp>
 800a13c:	1e03      	subs	r3, r0, #0
 800a13e:	d104      	bne.n	800a14a <aBuff2int+0xb2>
          return i+1;
 800a140:	193b      	adds	r3, r7, r4
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	3301      	adds	r3, #1
 800a146:	b2db      	uxtb	r3, r3
 800a148:	e035      	b.n	800a1b6 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800a14a:	210f      	movs	r1, #15
 800a14c:	187b      	adds	r3, r7, r1
 800a14e:	781a      	ldrb	r2, [r3, #0]
 800a150:	187b      	adds	r3, r7, r1
 800a152:	3201      	adds	r2, #1
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	230f      	movs	r3, #15
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b0b      	cmp	r3, #11
 800a15e:	d9e1      	bls.n	800a124 <aBuff2int+0x8c>
 800a160:	e022      	b.n	800a1a8 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800a162:	230f      	movs	r3, #15
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
 800a16a:	e018      	b.n	800a19e <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800a16c:	240f      	movs	r4, #15
 800a16e:	193b      	adds	r3, r7, r4
 800a170:	781a      	ldrb	r2, [r3, #0]
 800a172:	4b14      	ldr	r3, [pc, #80]	@ (800a1c4 <aBuff2int+0x12c>)
 800a174:	0092      	lsls	r2, r2, #2
 800a176:	58d2      	ldr	r2, [r2, r3]
 800a178:	2308      	movs	r3, #8
 800a17a:	18fb      	adds	r3, r7, r3
 800a17c:	0011      	movs	r1, r2
 800a17e:	0018      	movs	r0, r3
 800a180:	f7f5 ffea 	bl	8000158 <strcmp>
 800a184:	1e03      	subs	r3, r0, #0
 800a186:	d104      	bne.n	800a192 <aBuff2int+0xfa>
          return i+1;
 800a188:	193b      	adds	r3, r7, r4
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	3301      	adds	r3, #1
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	e011      	b.n	800a1b6 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800a192:	210f      	movs	r1, #15
 800a194:	187b      	adds	r3, r7, r1
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	187b      	adds	r3, r7, r1
 800a19a:	3201      	adds	r2, #1
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	230f      	movs	r3, #15
 800a1a0:	18fb      	adds	r3, r7, r3
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b06      	cmp	r3, #6
 800a1a6:	d9e1      	bls.n	800a16c <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800a1a8:	2308      	movs	r3, #8
 800a1aa:	18fb      	adds	r3, r7, r3
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	f01a fd92 	bl	8024cd6 <atoi>
 800a1b2:	0003      	movs	r3, r0
 800a1b4:	b2db      	uxtb	r3, r3
}
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	b005      	add	sp, #20
 800a1bc:	bd90      	pop	{r4, r7, pc}
 800a1be:	46c0      	nop			@ (mov r8, r8)
 800a1c0:	2000005c 	.word	0x2000005c
 800a1c4:	20000040 	.word	0x20000040

0800a1c8 <ParseTime>:

void ParseTime(char* buffer) {
 800a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ca:	b08d      	sub	sp, #52	@ 0x34
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a1d0:	2408      	movs	r4, #8
 800a1d2:	193a      	adds	r2, r7, r4
 800a1d4:	260c      	movs	r6, #12
 800a1d6:	19bb      	adds	r3, r7, r6
 800a1d8:	0011      	movs	r1, r2
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f000 f972 	bl	800a4c4 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2219      	movs	r2, #25
 800a1e4:	2118      	movs	r1, #24
 800a1e6:	0018      	movs	r0, r3
 800a1e8:	f7ff ff56 	bl	800a098 <aBuff2int>
 800a1ec:	0003      	movs	r3, r0
 800a1ee:	001a      	movs	r2, r3
 800a1f0:	19bb      	adds	r3, r7, r6
 800a1f2:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	221c      	movs	r2, #28
 800a1f8:	211b      	movs	r1, #27
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	f7ff ff4c 	bl	800a098 <aBuff2int>
 800a200:	0003      	movs	r3, r0
 800a202:	001a      	movs	r2, r3
 800a204:	19bb      	adds	r3, r7, r6
 800a206:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	221f      	movs	r2, #31
 800a20c:	211e      	movs	r1, #30
 800a20e:	0018      	movs	r0, r3
 800a210:	f7ff ff42 	bl	800a098 <aBuff2int>
 800a214:	0003      	movs	r3, r0
 800a216:	001a      	movs	r2, r3
 800a218:	19bb      	adds	r3, r7, r6
 800a21a:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2224      	movs	r2, #36	@ 0x24
 800a220:	2123      	movs	r1, #35	@ 0x23
 800a222:	0018      	movs	r0, r3
 800a224:	f7ff ff38 	bl	800a098 <aBuff2int>
 800a228:	0003      	movs	r3, r0
 800a22a:	001a      	movs	r2, r3
 800a22c:	0025      	movs	r5, r4
 800a22e:	197b      	adds	r3, r7, r5
 800a230:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2213      	movs	r2, #19
 800a236:	2111      	movs	r1, #17
 800a238:	0018      	movs	r0, r3
 800a23a:	f7ff ff2d 	bl	800a098 <aBuff2int>
 800a23e:	0003      	movs	r3, r0
 800a240:	001a      	movs	r2, r3
 800a242:	197b      	adds	r3, r7, r5
 800a244:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2216      	movs	r2, #22
 800a24a:	2115      	movs	r1, #21
 800a24c:	0018      	movs	r0, r3
 800a24e:	f7ff ff23 	bl	800a098 <aBuff2int>
 800a252:	0003      	movs	r3, r0
 800a254:	001a      	movs	r2, r3
 800a256:	197b      	adds	r3, r7, r5
 800a258:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	220f      	movs	r2, #15
 800a25e:	210d      	movs	r1, #13
 800a260:	0018      	movs	r0, r3
 800a262:	f7ff ff19 	bl	800a098 <aBuff2int>
 800a266:	0003      	movs	r3, r0
 800a268:	001a      	movs	r2, r3
 800a26a:	197b      	adds	r3, r7, r5
 800a26c:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a26e:	19bb      	adds	r3, r7, r6
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	001c      	movs	r4, r3
 800a274:	19bb      	adds	r3, r7, r6
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	0018      	movs	r0, r3
 800a27a:	19bb      	adds	r3, r7, r6
 800a27c:	789b      	ldrb	r3, [r3, #2]
 800a27e:	4a56      	ldr	r2, [pc, #344]	@ (800a3d8 <ParseTime+0x210>)
 800a280:	4956      	ldr	r1, [pc, #344]	@ (800a3dc <ParseTime+0x214>)
 800a282:	9301      	str	r3, [sp, #4]
 800a284:	9000      	str	r0, [sp, #0]
 800a286:	0023      	movs	r3, r4
 800a288:	2003      	movs	r0, #3
 800a28a:	f009 ffab 	bl	80141e4 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800a28e:	197b      	adds	r3, r7, r5
 800a290:	789b      	ldrb	r3, [r3, #2]
 800a292:	001c      	movs	r4, r3
 800a294:	197b      	adds	r3, r7, r5
 800a296:	785b      	ldrb	r3, [r3, #1]
 800a298:	0018      	movs	r0, r3
 800a29a:	197b      	adds	r3, r7, r5
 800a29c:	78db      	ldrb	r3, [r3, #3]
 800a29e:	4a50      	ldr	r2, [pc, #320]	@ (800a3e0 <ParseTime+0x218>)
 800a2a0:	494e      	ldr	r1, [pc, #312]	@ (800a3dc <ParseTime+0x214>)
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	9000      	str	r0, [sp, #0]
 800a2a6:	0023      	movs	r3, r4
 800a2a8:	2003      	movs	r0, #3
 800a2aa:	f009 ff9b 	bl	80141e4 <CreateLine>
  RTC_SetTime(&currentTime);
 800a2ae:	19bb      	adds	r3, r7, r6
 800a2b0:	0018      	movs	r0, r3
 800a2b2:	f000 f8a3 	bl	800a3fc <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800a2b6:	197b      	adds	r3, r7, r5
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f000 f8c5 	bl	800a448 <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800a2be:	2327      	movs	r3, #39	@ 0x27
 800a2c0:	18fb      	adds	r3, r7, r3
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 800a2c6:	197b      	adds	r3, r7, r5
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	623b      	str	r3, [r7, #32]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	dd04      	ble.n	800a2dc <ParseTime+0x114>
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	2b0a      	cmp	r3, #10
 800a2d6:	dc01      	bgt.n	800a2dc <ParseTime+0x114>
 800a2d8:	2201      	movs	r2, #1
 800a2da:	e000      	b.n	800a2de <ParseTime+0x116>
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2027      	movs	r0, #39	@ 0x27
 800a2e0:	183b      	adds	r3, r7, r0
 800a2e2:	701a      	strb	r2, [r3, #0]
 800a2e4:	781a      	ldrb	r2, [r3, #0]
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	400a      	ands	r2, r1
 800a2ea:	701a      	strb	r2, [r3, #0]
  if (dst)
 800a2ec:	0002      	movs	r2, r0
 800a2ee:	18bb      	adds	r3, r7, r2
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d01f      	beq.n	800a336 <ParseTime+0x16e>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d10c      	bne.n	800a316 <ParseTime+0x14e>
 800a2fc:	2108      	movs	r1, #8
 800a2fe:	187b      	adds	r3, r7, r1
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b07      	cmp	r3, #7
 800a304:	d107      	bne.n	800a316 <ParseTime+0x14e>
 800a306:	187b      	adds	r3, r7, r1
 800a308:	789b      	ldrb	r3, [r3, #2]
 800a30a:	2b18      	cmp	r3, #24
 800a30c:	d803      	bhi.n	800a316 <ParseTime+0x14e>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 800a30e:	18bb      	adds	r3, r7, r2
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
 800a314:	e00f      	b.n	800a336 <ParseTime+0x16e>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	2b0a      	cmp	r3, #10
 800a31a:	d10c      	bne.n	800a336 <ParseTime+0x16e>
 800a31c:	2208      	movs	r2, #8
 800a31e:	18bb      	adds	r3, r7, r2
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	2b07      	cmp	r3, #7
 800a324:	d107      	bne.n	800a336 <ParseTime+0x16e>
 800a326:	18bb      	adds	r3, r7, r2
 800a328:	789b      	ldrb	r3, [r3, #2]
 800a32a:	2b18      	cmp	r3, #24
 800a32c:	d803      	bhi.n	800a336 <ParseTime+0x16e>
    {
        dst = false;
 800a32e:	2327      	movs	r3, #39	@ 0x27
 800a330:	18fb      	adds	r3, r7, r3
 800a332:	2200      	movs	r2, #0
 800a334:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800a336:	2327      	movs	r3, #39	@ 0x27
 800a338:	18fb      	adds	r3, r7, r3
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d02d      	beq.n	800a39c <ParseTime+0x1d4>
    Info("Daylight Saving Time active");
 800a340:	4a28      	ldr	r2, [pc, #160]	@ (800a3e4 <ParseTime+0x21c>)
 800a342:	4b29      	ldr	r3, [pc, #164]	@ (800a3e8 <ParseTime+0x220>)
 800a344:	0019      	movs	r1, r3
 800a346:	2002      	movs	r0, #2
 800a348:	f009 ff4c 	bl	80141e4 <CreateLine>
    HAL_Delay(1000);
 800a34c:	23fa      	movs	r3, #250	@ 0xfa
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	0018      	movs	r0, r3
 800a352:	f00a fcc9 	bl	8014ce8 <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800a356:	4b25      	ldr	r3, [pc, #148]	@ (800a3ec <ParseTime+0x224>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	0018      	movs	r0, r3
 800a35c:	f012 fafa 	bl	801c954 <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 800a360:	23fa      	movs	r3, #250	@ 0xfa
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	0018      	movs	r0, r3
 800a366:	f00a fcbf 	bl	8014ce8 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 800a36a:	2308      	movs	r3, #8
 800a36c:	18fa      	adds	r2, r7, r3
 800a36e:	240c      	movs	r4, #12
 800a370:	193b      	adds	r3, r7, r4
 800a372:	0011      	movs	r1, r2
 800a374:	0018      	movs	r0, r3
 800a376:	f000 f8a5 	bl	800a4c4 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a37a:	0022      	movs	r2, r4
 800a37c:	18bb      	adds	r3, r7, r2
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	001c      	movs	r4, r3
 800a382:	18bb      	adds	r3, r7, r2
 800a384:	785b      	ldrb	r3, [r3, #1]
 800a386:	0018      	movs	r0, r3
 800a388:	18bb      	adds	r3, r7, r2
 800a38a:	789b      	ldrb	r3, [r3, #2]
 800a38c:	4a18      	ldr	r2, [pc, #96]	@ (800a3f0 <ParseTime+0x228>)
 800a38e:	4913      	ldr	r1, [pc, #76]	@ (800a3dc <ParseTime+0x214>)
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	9000      	str	r0, [sp, #0]
 800a394:	0023      	movs	r3, r4
 800a396:	2003      	movs	r0, #3
 800a398:	f009 ff24 	bl	80141e4 <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800a39c:	2308      	movs	r3, #8
 800a39e:	18fb      	adds	r3, r7, r3
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d104      	bne.n	800a3b0 <ParseTime+0x1e8>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800a3a6:	f004 fbb3 	bl	800eb10 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 800a3aa:	4b12      	ldr	r3, [pc, #72]	@ (800a3f4 <ParseTime+0x22c>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800a3b0:	4b11      	ldr	r3, [pc, #68]	@ (800a3f8 <ParseTime+0x230>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10a      	bne.n	800a3ce <ParseTime+0x206>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800a3b8:	230c      	movs	r3, #12
 800a3ba:	18fa      	adds	r2, r7, r3
 800a3bc:	2308      	movs	r3, #8
 800a3be:	18fb      	adds	r3, r7, r3
 800a3c0:	0011      	movs	r1, r2
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f000 faa8 	bl	800a918 <makeTime>
 800a3c8:	0002      	movs	r2, r0
 800a3ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f8 <ParseTime+0x230>)
 800a3cc:	601a      	str	r2, [r3, #0]
  }
}
 800a3ce:	46c0      	nop			@ (mov r8, r8)
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	b00b      	add	sp, #44	@ 0x2c
 800a3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d6:	46c0      	nop			@ (mov r8, r8)
 800a3d8:	0802c600 	.word	0x0802c600
 800a3dc:	0802c638 	.word	0x0802c638
 800a3e0:	0802c63c 	.word	0x0802c63c
 800a3e4:	0802c670 	.word	0x0802c670
 800a3e8:	0802c5fc 	.word	0x0802c5fc
 800a3ec:	20000e5c 	.word	0x20000e5c
 800a3f0:	0802c68c 	.word	0x0802c68c
 800a3f4:	20000e50 	.word	0x20000e50
 800a3f8:	20000e60 	.word	0x20000e60

0800a3fc <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a416:	4b09      	ldr	r3, [pc, #36]	@ (800a43c <RTC_SetTime+0x40>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	0018      	movs	r0, r3
 800a420:	f012 f884 	bl	801c52c <HAL_RTC_SetTime>
 800a424:	1e03      	subs	r3, r0, #0
 800a426:	d005      	beq.n	800a434 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800a428:	4a05      	ldr	r2, [pc, #20]	@ (800a440 <RTC_SetTime+0x44>)
 800a42a:	4b06      	ldr	r3, [pc, #24]	@ (800a444 <RTC_SetTime+0x48>)
 800a42c:	0019      	movs	r1, r3
 800a42e:	2001      	movs	r0, #1
 800a430:	f009 fed8 	bl	80141e4 <CreateLine>
    }
}
 800a434:	46c0      	nop			@ (mov r8, r8)
 800a436:	46bd      	mov	sp, r7
 800a438:	b002      	add	sp, #8
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20000e5c 	.word	0x20000e5c
 800a440:	0802c6c0 	.word	0x0802c6c0
 800a444:	0802c6dc 	.word	0x0802c6dc

0800a448 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a450:	4b16      	ldr	r3, [pc, #88]	@ (800a4ac <RTC_SetDate+0x64>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6879      	ldr	r1, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	0018      	movs	r0, r3
 800a45a:	f012 f96f 	bl	801c73c <HAL_RTC_SetDate>
 800a45e:	1e03      	subs	r3, r0, #0
 800a460:	d005      	beq.n	800a46e <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800a462:	4a13      	ldr	r2, [pc, #76]	@ (800a4b0 <RTC_SetDate+0x68>)
 800a464:	4b13      	ldr	r3, [pc, #76]	@ (800a4b4 <RTC_SetDate+0x6c>)
 800a466:	0019      	movs	r1, r3
 800a468:	2001      	movs	r0, #1
 800a46a:	f009 febb 	bl	80141e4 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800a46e:	4b0f      	ldr	r3, [pc, #60]	@ (800a4ac <RTC_SetDate+0x64>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2101      	movs	r1, #1
 800a474:	0018      	movs	r0, r3
 800a476:	f012 fcc5 	bl	801ce04 <HAL_RTCEx_BKUPRead>
 800a47a:	0003      	movs	r3, r0
 800a47c:	4a0e      	ldr	r2, [pc, #56]	@ (800a4b8 <RTC_SetDate+0x70>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d010      	beq.n	800a4a4 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800a482:	4a0e      	ldr	r2, [pc, #56]	@ (800a4bc <RTC_SetDate+0x74>)
 800a484:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c0 <RTC_SetDate+0x78>)
 800a486:	0019      	movs	r1, r3
 800a488:	2003      	movs	r0, #3
 800a48a:	f009 feab 	bl	80141e4 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800a48e:	f010 ffcd 	bl	801b42c <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800a492:	4b06      	ldr	r3, [pc, #24]	@ (800a4ac <RTC_SetDate+0x64>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a08      	ldr	r2, [pc, #32]	@ (800a4b8 <RTC_SetDate+0x70>)
 800a498:	2101      	movs	r1, #1
 800a49a:	0018      	movs	r0, r3
 800a49c:	f012 fc9a 	bl	801cdd4 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800a4a0:	f010 ffd2 	bl	801b448 <HAL_PWR_DisableBkUpAccess>
    }
}
 800a4a4:	46c0      	nop			@ (mov r8, r8)
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	b002      	add	sp, #8
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	20000e5c 	.word	0x20000e5c
 800a4b0:	0802c6e0 	.word	0x0802c6e0
 800a4b4:	0802c6dc 	.word	0x0802c6dc
 800a4b8:	0000bebe 	.word	0x0000bebe
 800a4bc:	0802c6fc 	.word	0x0802c6fc
 800a4c0:	0802c638 	.word	0x0802c638

0800a4c4 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800a4ce:	250f      	movs	r5, #15
 800a4d0:	197b      	adds	r3, r7, r5
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800a4d6:	230e      	movs	r3, #14
 800a4d8:	18fb      	adds	r3, r7, r3
 800a4da:	2200      	movs	r2, #0
 800a4dc:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800a4de:	260c      	movs	r6, #12
 800a4e0:	19bc      	adds	r4, r7, r6
 800a4e2:	f008 fed3 	bl	801328c <powerCheck>
 800a4e6:	0003      	movs	r3, r0
 800a4e8:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800a4ea:	19bb      	adds	r3, r7, r6
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d104      	bne.n	800a4fc <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800a4f2:	197b      	adds	r3, r7, r5
 800a4f4:	781a      	ldrb	r2, [r3, #0]
 800a4f6:	197b      	adds	r3, r7, r5
 800a4f8:	3201      	adds	r2, #1
 800a4fa:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800a4fc:	230d      	movs	r3, #13
 800a4fe:	18fb      	adds	r3, r7, r3
 800a500:	2200      	movs	r2, #0
 800a502:	701a      	strb	r2, [r3, #0]
 800a504:	e039      	b.n	800a57a <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a506:	4b23      	ldr	r3, [pc, #140]	@ (800a594 <RTC_GetTime+0xd0>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	0018      	movs	r0, r3
 800a510:	f012 f8b6 	bl	801c680 <HAL_RTC_GetTime>
 800a514:	1e03      	subs	r3, r0, #0
 800a516:	d005      	beq.n	800a524 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 800a518:	4a1f      	ldr	r2, [pc, #124]	@ (800a598 <RTC_GetTime+0xd4>)
 800a51a:	4b20      	ldr	r3, [pc, #128]	@ (800a59c <RTC_GetTime+0xd8>)
 800a51c:	0019      	movs	r1, r3
 800a51e:	2001      	movs	r0, #1
 800a520:	f009 fe60 	bl	80141e4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a524:	4b1b      	ldr	r3, [pc, #108]	@ (800a594 <RTC_GetTime+0xd0>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	2200      	movs	r2, #0
 800a52c:	0018      	movs	r0, r3
 800a52e:	f012 f999 	bl	801c864 <HAL_RTC_GetDate>
 800a532:	1e03      	subs	r3, r0, #0
 800a534:	d005      	beq.n	800a542 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 800a536:	4a1a      	ldr	r2, [pc, #104]	@ (800a5a0 <RTC_GetTime+0xdc>)
 800a538:	4b18      	ldr	r3, [pc, #96]	@ (800a59c <RTC_GetTime+0xd8>)
 800a53a:	0019      	movs	r1, r3
 800a53c:	2001      	movs	r0, #1
 800a53e:	f009 fe51 	bl	80141e4 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800a542:	230c      	movs	r3, #12
 800a544:	18fb      	adds	r3, r7, r3
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d110      	bne.n	800a56e <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	210e      	movs	r1, #14
 800a552:	187a      	adds	r2, r7, r1
 800a554:	7812      	ldrb	r2, [r2, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d018      	beq.n	800a58c <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 800a55a:	187b      	adds	r3, r7, r1
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	7812      	ldrb	r2, [r2, #0]
 800a560:	701a      	strb	r2, [r3, #0]
        t++;
 800a562:	210f      	movs	r1, #15
 800a564:	187b      	adds	r3, r7, r1
 800a566:	781a      	ldrb	r2, [r3, #0]
 800a568:	187b      	adds	r3, r7, r1
 800a56a:	3201      	adds	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800a56e:	210d      	movs	r1, #13
 800a570:	187b      	adds	r3, r7, r1
 800a572:	781a      	ldrb	r2, [r3, #0]
 800a574:	187b      	adds	r3, r7, r1
 800a576:	3201      	adds	r2, #1
 800a578:	701a      	strb	r2, [r3, #0]
 800a57a:	230d      	movs	r3, #13
 800a57c:	18fa      	adds	r2, r7, r3
 800a57e:	230f      	movs	r3, #15
 800a580:	18fb      	adds	r3, r7, r3
 800a582:	7812      	ldrb	r2, [r2, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d3bd      	bcc.n	800a506 <RTC_GetTime+0x42>
 800a58a:	e000      	b.n	800a58e <RTC_GetTime+0xca>
      }
      else {
        return;
 800a58c:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800a58e:	46bd      	mov	sp, r7
 800a590:	b005      	add	sp, #20
 800a592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a594:	20000e5c 	.word	0x20000e5c
 800a598:	0802c714 	.word	0x0802c714
 800a59c:	0802c6dc 	.word	0x0802c6dc
 800a5a0:	0802c730 	.word	0x0802c730

0800a5a4 <getPosixTime>:

uint32_t getPosixTime(void) {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a5aa:	003a      	movs	r2, r7
 800a5ac:	1d3b      	adds	r3, r7, #4
 800a5ae:	0011      	movs	r1, r2
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f7ff ff87 	bl	800a4c4 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a5b6:	1d3a      	adds	r2, r7, #4
 800a5b8:	003b      	movs	r3, r7
 800a5ba:	0011      	movs	r1, r2
 800a5bc:	0018      	movs	r0, r3
 800a5be:	f000 f9ab 	bl	800a918 <makeTime>
 800a5c2:	0003      	movs	r3, r0
}
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	b006      	add	sp, #24
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800a5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ce:	b08d      	sub	sp, #52	@ 0x34
 800a5d0:	af04      	add	r7, sp, #16
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800a5d6:	240c      	movs	r4, #12
 800a5d8:	193a      	adds	r2, r7, r4
 800a5da:	2508      	movs	r5, #8
 800a5dc:	1979      	adds	r1, r7, r5
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	f000 fa63 	bl	800aaac <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a5e6:	002a      	movs	r2, r5
 800a5e8:	18bb      	adds	r3, r7, r2
 800a5ea:	789b      	ldrb	r3, [r3, #2]
 800a5ec:	001e      	movs	r6, r3
 800a5ee:	18bb      	adds	r3, r7, r2
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	469c      	mov	ip, r3
 800a5f4:	18bb      	adds	r3, r7, r2
 800a5f6:	78db      	ldrb	r3, [r3, #3]
 800a5f8:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a5fa:	0021      	movs	r1, r4
 800a5fc:	187b      	adds	r3, r7, r1
 800a5fe:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a600:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a602:	187b      	adds	r3, r7, r1
 800a604:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a606:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a608:	187b      	adds	r3, r7, r1
 800a60a:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a60c:	4906      	ldr	r1, [pc, #24]	@ (800a628 <getUTCfromPosixTime+0x5c>)
 800a60e:	6838      	ldr	r0, [r7, #0]
 800a610:	9303      	str	r3, [sp, #12]
 800a612:	9502      	str	r5, [sp, #8]
 800a614:	9401      	str	r4, [sp, #4]
 800a616:	9200      	str	r2, [sp, #0]
 800a618:	4663      	mov	r3, ip
 800a61a:	0032      	movs	r2, r6
 800a61c:	f01b ffb0 	bl	8026580 <siprintf>
}
 800a620:	46c0      	nop			@ (mov r8, r8)
 800a622:	46bd      	mov	sp, r7
 800a624:	b009      	add	sp, #36	@ 0x24
 800a626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a628:	0802c74c 	.word	0x0802c74c

0800a62c <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a634:	4b10      	ldr	r3, [pc, #64]	@ (800a678 <RTC_SetWakeUpTimer+0x4c>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	0018      	movs	r0, r3
 800a63a:	f012 fb2f 	bl	801cc9c <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800a63e:	4b0e      	ldr	r3, [pc, #56]	@ (800a678 <RTC_SetWakeUpTimer+0x4c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	22ff      	movs	r2, #255	@ 0xff
 800a648:	401a      	ands	r2, r3
 800a64a:	4b0b      	ldr	r3, [pc, #44]	@ (800a678 <RTC_SetWakeUpTimer+0x4c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	490a      	ldr	r1, [pc, #40]	@ (800a67c <RTC_SetWakeUpTimer+0x50>)
 800a652:	430a      	orrs	r2, r1
 800a654:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a656:	4b0a      	ldr	r3, [pc, #40]	@ (800a680 <RTC_SetWakeUpTimer+0x54>)
 800a658:	2280      	movs	r2, #128	@ 0x80
 800a65a:	0352      	lsls	r2, r2, #13
 800a65c:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800a65e:	4b06      	ldr	r3, [pc, #24]	@ (800a678 <RTC_SetWakeUpTimer+0x4c>)
 800a660:	6818      	ldr	r0, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3b01      	subs	r3, #1
 800a666:	2204      	movs	r2, #4
 800a668:	0019      	movs	r1, r3
 800a66a:	f012 fa3f 	bl	801caec <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a66e:	46c0      	nop			@ (mov r8, r8)
 800a670:	46bd      	mov	sp, r7
 800a672:	b002      	add	sp, #8
 800a674:	bd80      	pop	{r7, pc}
 800a676:	46c0      	nop			@ (mov r8, r8)
 800a678:	20000e5c 	.word	0x20000e5c
 800a67c:	fffffb7f 	.word	0xfffffb7f
 800a680:	40010400 	.word	0x40010400

0800a684 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 800a688:	4a0b      	ldr	r2, [pc, #44]	@ (800a6b8 <Enter_Standby_Mode+0x34>)
 800a68a:	4b0c      	ldr	r3, [pc, #48]	@ (800a6bc <Enter_Standby_Mode+0x38>)
 800a68c:	0019      	movs	r1, r3
 800a68e:	2003      	movs	r0, #3
 800a690:	f009 fda8 	bl	80141e4 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 800a694:	2064      	movs	r0, #100	@ 0x64
 800a696:	f00a fb27 	bl	8014ce8 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a69a:	4b09      	ldr	r3, [pc, #36]	@ (800a6c0 <Enter_Standby_Mode+0x3c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f012 fafc 	bl	801cc9c <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 800a6a4:	f002 fa1e 	bl	800cae4 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 800a6a8:	f00a fb42 	bl	8014d30 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 800a6ac:	f010 ff38 	bl	801b520 <HAL_PWR_EnterSTANDBYMode>
}
 800a6b0:	46c0      	nop			@ (mov r8, r8)
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	46c0      	nop			@ (mov r8, r8)
 800a6b8:	0802c7a0 	.word	0x0802c7a0
 800a6bc:	0802c638 	.word	0x0802c638
 800a6c0:	20000e5c 	.word	0x20000e5c

0800a6c4 <Enter_Stop_Mode_for_empty_battery>:


void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af02      	add	r7, sp, #8
 800a6ca:	0002      	movs	r2, r0
 800a6cc:	1dbb      	adds	r3, r7, #6
 800a6ce:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a6d0:	4b25      	ldr	r3, [pc, #148]	@ (800a768 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a6d8:	f004 f9ee 	bl	800eab8 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 800a6dc:	f7ff fa6e 	bl	8009bbc <ReadBatteryVoltage>
 800a6e0:	1c03      	adds	r3, r0, #0
 800a6e2:	1c18      	adds	r0, r3, #0
 800a6e4:	f7f9 f8d6 	bl	8003894 <__aeabi_f2d>
 800a6e8:	0002      	movs	r2, r0
 800a6ea:	000b      	movs	r3, r1
 800a6ec:	481f      	ldr	r0, [pc, #124]	@ (800a76c <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a6ee:	4920      	ldr	r1, [pc, #128]	@ (800a770 <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a6f0:	9200      	str	r2, [sp, #0]
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	0002      	movs	r2, r0
 800a6f6:	2002      	movs	r0, #2
 800a6f8:	f009 fd74 	bl	80141e4 <CreateLine>
  powerDisplay(powerCheck());
 800a6fc:	f008 fdc6 	bl	801328c <powerCheck>
 800a700:	0003      	movs	r3, r0
 800a702:	0018      	movs	r0, r3
 800a704:	f008 fdde 	bl	80132c4 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a708:	1dbb      	adds	r3, r7, #6
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	4a19      	ldr	r2, [pc, #100]	@ (800a774 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a70e:	491a      	ldr	r1, [pc, #104]	@ (800a778 <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a710:	2003      	movs	r0, #3
 800a712:	f009 fd67 	bl	80141e4 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a716:	f7ff ff45 	bl	800a5a4 <getPosixTime>
 800a71a:	0002      	movs	r2, r0
 800a71c:	1dbb      	adds	r3, r7, #6
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	18d3      	adds	r3, r2, r3
 800a722:	4a16      	ldr	r2, [pc, #88]	@ (800a77c <Enter_Stop_Mode_for_empty_battery+0xb8>)
 800a724:	0011      	movs	r1, r2
 800a726:	0018      	movs	r0, r3
 800a728:	f7ff ff50 	bl	800a5cc <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a72c:	4b13      	ldr	r3, [pc, #76]	@ (800a77c <Enter_Stop_Mode_for_empty_battery+0xb8>)
 800a72e:	4a14      	ldr	r2, [pc, #80]	@ (800a780 <Enter_Stop_Mode_for_empty_battery+0xbc>)
 800a730:	490f      	ldr	r1, [pc, #60]	@ (800a770 <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a732:	2002      	movs	r0, #2
 800a734:	f009 fd56 	bl	80141e4 <CreateLine>
  HAL_Delay(100);
 800a738:	2064      	movs	r0, #100	@ 0x64
 800a73a:	f00a fad5 	bl	8014ce8 <HAL_Delay>
  HAL_SuspendTick();
 800a73e:	f00a faf7 	bl	8014d30 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a742:	1dbb      	adds	r3, r7, #6
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	0018      	movs	r0, r3
 800a748:	f7ff ff70 	bl	800a62c <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a74c:	2101      	movs	r1, #1
 800a74e:	2001      	movs	r0, #1
 800a750:	f010 fe8a 	bl	801b468 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a754:	f002 fe92 	bl	800d47c <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a758:	f00a faf8 	bl	8014d4c <HAL_ResumeTick>
  showTime();
 800a75c:	f7ff fb96 	bl	8009e8c <showTime>
}
 800a760:	46c0      	nop			@ (mov r8, r8)
 800a762:	46bd      	mov	sp, r7
 800a764:	b002      	add	sp, #8
 800a766:	bd80      	pop	{r7, pc}
 800a768:	200011d5 	.word	0x200011d5
 800a76c:	0802c7c4 	.word	0x0802c7c4
 800a770:	0802c5fc 	.word	0x0802c5fc
 800a774:	0802c7dc 	.word	0x0802c7dc
 800a778:	0802c638 	.word	0x0802c638
 800a77c:	20000e64 	.word	0x20000e64
 800a780:	0802c800 	.word	0x0802c800

0800a784 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af02      	add	r7, sp, #8
 800a78a:	0002      	movs	r2, r0
 800a78c:	1dbb      	adds	r3, r7, #6
 800a78e:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a790:	4b4f      	ldr	r3, [pc, #316]	@ (800a8d0 <Enter_Stop_Mode+0x14c>)
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a798:	f004 f98e 	bl	800eab8 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 800a79c:	f7ff fa0e 	bl	8009bbc <ReadBatteryVoltage>
 800a7a0:	1c03      	adds	r3, r0, #0
 800a7a2:	1c18      	adds	r0, r3, #0
 800a7a4:	f7f9 f876 	bl	8003894 <__aeabi_f2d>
 800a7a8:	0002      	movs	r2, r0
 800a7aa:	000b      	movs	r3, r1
 800a7ac:	4849      	ldr	r0, [pc, #292]	@ (800a8d4 <Enter_Stop_Mode+0x150>)
 800a7ae:	494a      	ldr	r1, [pc, #296]	@ (800a8d8 <Enter_Stop_Mode+0x154>)
 800a7b0:	9200      	str	r2, [sp, #0]
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	0002      	movs	r2, r0
 800a7b6:	2002      	movs	r0, #2
 800a7b8:	f009 fd14 	bl	80141e4 <CreateLine>
  powerDisplay(powerCheck());
 800a7bc:	f008 fd66 	bl	801328c <powerCheck>
 800a7c0:	0003      	movs	r3, r0
 800a7c2:	0018      	movs	r0, r3
 800a7c4:	f008 fd7e 	bl	80132c4 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a7c8:	1dbb      	adds	r3, r7, #6
 800a7ca:	881b      	ldrh	r3, [r3, #0]
 800a7cc:	4a43      	ldr	r2, [pc, #268]	@ (800a8dc <Enter_Stop_Mode+0x158>)
 800a7ce:	4944      	ldr	r1, [pc, #272]	@ (800a8e0 <Enter_Stop_Mode+0x15c>)
 800a7d0:	2003      	movs	r0, #3
 800a7d2:	f009 fd07 	bl	80141e4 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a7d6:	f7ff fee5 	bl	800a5a4 <getPosixTime>
 800a7da:	0002      	movs	r2, r0
 800a7dc:	1dbb      	adds	r3, r7, #6
 800a7de:	881b      	ldrh	r3, [r3, #0]
 800a7e0:	18d3      	adds	r3, r2, r3
 800a7e2:	4a40      	ldr	r2, [pc, #256]	@ (800a8e4 <Enter_Stop_Mode+0x160>)
 800a7e4:	0011      	movs	r1, r2
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	f7ff fef0 	bl	800a5cc <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a7ec:	4b3d      	ldr	r3, [pc, #244]	@ (800a8e4 <Enter_Stop_Mode+0x160>)
 800a7ee:	4a3e      	ldr	r2, [pc, #248]	@ (800a8e8 <Enter_Stop_Mode+0x164>)
 800a7f0:	4939      	ldr	r1, [pc, #228]	@ (800a8d8 <Enter_Stop_Mode+0x154>)
 800a7f2:	2002      	movs	r0, #2
 800a7f4:	f009 fcf6 	bl	80141e4 <CreateLine>
  HAL_Delay(100);
 800a7f8:	2064      	movs	r0, #100	@ 0x64
 800a7fa:	f00a fa75 	bl	8014ce8 <HAL_Delay>
  HAL_SuspendTick();
 800a7fe:	f00a fa97 	bl	8014d30 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a802:	1dbb      	adds	r3, r7, #6
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	0018      	movs	r0, r3
 800a808:	f7ff ff10 	bl	800a62c <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a80c:	2101      	movs	r1, #1
 800a80e:	2001      	movs	r0, #1
 800a810:	f010 fe2a 	bl	801b468 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a814:	f002 fe32 	bl	800d47c <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a818:	f00a fa98 	bl	8014d4c <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a81c:	1dbb      	adds	r3, r7, #6
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	0018      	movs	r0, r3
 800a822:	f004 f8bd 	bl	800e9a0 <sen5x_enable>
 800a826:	1e03      	subs	r3, r0, #0
 800a828:	d01e      	beq.n	800a868 <Enter_Stop_Mode+0xe4>
    showTime();
 800a82a:	f7ff fb2f 	bl	8009e8c <showTime>
    set_light_on_state();
 800a82e:	f004 fe13 	bl	800f458 <set_light_on_state>
    if (!userToggle) {
 800a832:	4b2e      	ldr	r3, [pc, #184]	@ (800a8ec <Enter_Stop_Mode+0x168>)
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2201      	movs	r2, #1
 800a838:	4053      	eors	r3, r2
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d013      	beq.n	800a868 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a840:	201c      	movs	r0, #28
 800a842:	f7ff fef3 	bl	800a62c <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a846:	4a25      	ldr	r2, [pc, #148]	@ (800a8dc <Enter_Stop_Mode+0x158>)
 800a848:	4925      	ldr	r1, [pc, #148]	@ (800a8e0 <Enter_Stop_Mode+0x15c>)
 800a84a:	231c      	movs	r3, #28
 800a84c:	2003      	movs	r0, #3
 800a84e:	f009 fcc9 	bl	80141e4 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a852:	2101      	movs	r1, #1
 800a854:	2001      	movs	r0, #1
 800a856:	f010 fe07 	bl	801b468 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a85a:	f002 fe0f 	bl	800d47c <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a85e:	f00a fa75 	bl	8014d4c <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a862:	2000      	movs	r0, #0
 800a864:	f004 f87a 	bl	800e95c <setsen5xReadTimer>
    }
  }
  showTime();
 800a868:	f7ff fb10 	bl	8009e8c <showTime>
  EnabledConnectedDevices();
 800a86c:	f003 fbe0 	bl	800e030 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a870:	f003 fd08 	bl	800e284 <ResetDBACalculator>
  ResetBMP280samplecounter();
 800a874:	f000 ffa4 	bl	800b7c0 <ResetBMP280samplecounter>
  ResetSGP40samplecounter();
 800a878:	f006 fc66 	bl	8011148 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a87c:	f7f9 f95e 	bl	8003b3c <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 800a880:	2000      	movs	r0, #0
 800a882:	f004 f87d 	bl	800e980 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a886:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f0 <Enter_Stop_Mode+0x16c>)
 800a888:	0018      	movs	r0, r3
 800a88a:	f7fa f847 	bl	800491c <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a88e:	201e      	movs	r0, #30
 800a890:	f006 fc48 	bl	8011124 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a894:	205a      	movs	r0, #90	@ 0x5a
 800a896:	f009 ff3b 	bl	8014710 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a89a:	203c      	movs	r0, #60	@ 0x3c
 800a89c:	f000 fb98 	bl	800afd0 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a8a0:	205a      	movs	r0, #90	@ 0x5a
 800a8a2:	f000 ff7b 	bl	800b79c <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	f7f9 f952 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	f003 fcd7 	bl	800e260 <setMICTimeStamp>
  ESPTransmitDone = false;
 800a8b2:	4b10      	ldr	r3, [pc, #64]	@ (800a8f4 <Enter_Stop_Mode+0x170>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a8b8:	f00a fa0c 	bl	8014cd4 <HAL_GetTick>
 800a8bc:	0003      	movs	r3, r0
 800a8be:	4a0c      	ldr	r2, [pc, #48]	@ (800a8f0 <Enter_Stop_Mode+0x16c>)
 800a8c0:	189a      	adds	r2, r3, r2
 800a8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f8 <Enter_Stop_Mode+0x174>)
 800a8c4:	601a      	str	r2, [r3, #0]
}
 800a8c6:	46c0      	nop			@ (mov r8, r8)
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	b002      	add	sp, #8
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	46c0      	nop			@ (mov r8, r8)
 800a8d0:	200011d5 	.word	0x200011d5
 800a8d4:	0802c7c4 	.word	0x0802c7c4
 800a8d8:	0802c5fc 	.word	0x0802c5fc
 800a8dc:	0802c7dc 	.word	0x0802c7dc
 800a8e0:	0802c638 	.word	0x0802c638
 800a8e4:	20000e64 	.word	0x20000e64
 800a8e8:	0802c800 	.word	0x0802c800
 800a8ec:	20002166 	.word	0x20002166
 800a8f0:	00001194 	.word	0x00001194
 800a8f4:	200005b3 	.word	0x200005b3
 800a8f8:	20001128 	.word	0x20001128

0800a8fc <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a904:	4b03      	ldr	r3, [pc, #12]	@ (800a914 <InitClock+0x18>)
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	601a      	str	r2, [r3, #0]
}
 800a90a:	46c0      	nop			@ (mov r8, r8)
 800a90c:	46bd      	mov	sp, r7
 800a90e:	b002      	add	sp, #8
 800a910:	bd80      	pop	{r7, pc}
 800a912:	46c0      	nop			@ (mov r8, r8)
 800a914:	20000e5c 	.word	0x20000e5c

0800a918 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	78db      	ldrb	r3, [r3, #3]
 800a926:	001a      	movs	r2, r3
 800a928:	0013      	movs	r3, r2
 800a92a:	025b      	lsls	r3, r3, #9
 800a92c:	189b      	adds	r3, r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	189b      	adds	r3, r3, r2
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	189b      	adds	r3, r3, r2
 800a936:	011a      	lsls	r2, r3, #4
 800a938:	1ad2      	subs	r2, r2, r3
 800a93a:	01d3      	lsls	r3, r2, #7
 800a93c:	001a      	movs	r2, r3
 800a93e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a940:	2300      	movs	r3, #0
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	e028      	b.n	800a998 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4a53      	ldr	r2, [pc, #332]	@ (800aa98 <makeTime+0x180>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	db21      	blt.n	800a992 <makeTime+0x7a>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4a52      	ldr	r2, [pc, #328]	@ (800aa9c <makeTime+0x184>)
 800a952:	4694      	mov	ip, r2
 800a954:	4463      	add	r3, ip
 800a956:	001a      	movs	r2, r3
 800a958:	2303      	movs	r3, #3
 800a95a:	4013      	ands	r3, r2
 800a95c:	d119      	bne.n	800a992 <makeTime+0x7a>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4a4e      	ldr	r2, [pc, #312]	@ (800aa9c <makeTime+0x184>)
 800a962:	4694      	mov	ip, r2
 800a964:	4463      	add	r3, ip
 800a966:	2164      	movs	r1, #100	@ 0x64
 800a968:	0018      	movs	r0, r3
 800a96a:	f7f5 fd8b 	bl	8000484 <__aeabi_idivmod>
 800a96e:	1e0b      	subs	r3, r1, #0
 800a970:	d10a      	bne.n	800a988 <makeTime+0x70>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4a49      	ldr	r2, [pc, #292]	@ (800aa9c <makeTime+0x184>)
 800a976:	4694      	mov	ip, r2
 800a978:	4463      	add	r3, ip
 800a97a:	22c8      	movs	r2, #200	@ 0xc8
 800a97c:	0051      	lsls	r1, r2, #1
 800a97e:	0018      	movs	r0, r3
 800a980:	f7f5 fd80 	bl	8000484 <__aeabi_idivmod>
 800a984:	1e0b      	subs	r3, r1, #0
 800a986:	d104      	bne.n	800a992 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	4a45      	ldr	r2, [pc, #276]	@ (800aaa0 <makeTime+0x188>)
 800a98c:	4694      	mov	ip, r2
 800a98e:	4463      	add	r3, ip
 800a990:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3301      	adds	r3, #1
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	78db      	ldrb	r3, [r3, #3]
 800a99c:	001a      	movs	r2, r3
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	dbd0      	blt.n	800a946 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	e03c      	b.n	800aa24 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d125      	bne.n	800a9fc <makeTime+0xe4>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	78db      	ldrb	r3, [r3, #3]
 800a9b4:	4a39      	ldr	r2, [pc, #228]	@ (800aa9c <makeTime+0x184>)
 800a9b6:	4694      	mov	ip, r2
 800a9b8:	4463      	add	r3, ip
 800a9ba:	001a      	movs	r2, r3
 800a9bc:	2303      	movs	r3, #3
 800a9be:	4013      	ands	r3, r2
 800a9c0:	d11c      	bne.n	800a9fc <makeTime+0xe4>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	78db      	ldrb	r3, [r3, #3]
 800a9c6:	4a35      	ldr	r2, [pc, #212]	@ (800aa9c <makeTime+0x184>)
 800a9c8:	4694      	mov	ip, r2
 800a9ca:	4463      	add	r3, ip
 800a9cc:	2164      	movs	r1, #100	@ 0x64
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	f7f5 fd58 	bl	8000484 <__aeabi_idivmod>
 800a9d4:	1e0b      	subs	r3, r1, #0
 800a9d6:	d10b      	bne.n	800a9f0 <makeTime+0xd8>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	78db      	ldrb	r3, [r3, #3]
 800a9dc:	4a2f      	ldr	r2, [pc, #188]	@ (800aa9c <makeTime+0x184>)
 800a9de:	4694      	mov	ip, r2
 800a9e0:	4463      	add	r3, ip
 800a9e2:	22c8      	movs	r2, #200	@ 0xc8
 800a9e4:	0051      	lsls	r1, r2, #1
 800a9e6:	0018      	movs	r0, r3
 800a9e8:	f7f5 fd4c 	bl	8000484 <__aeabi_idivmod>
 800a9ec:	1e0b      	subs	r3, r1, #0
 800a9ee:	d105      	bne.n	800a9fc <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	4a2c      	ldr	r2, [pc, #176]	@ (800aaa4 <makeTime+0x18c>)
 800a9f4:	4694      	mov	ip, r2
 800a9f6:	4463      	add	r3, ip
 800a9f8:	60bb      	str	r3, [r7, #8]
 800a9fa:	e010      	b.n	800aa1e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	4a29      	ldr	r2, [pc, #164]	@ (800aaa8 <makeTime+0x190>)
 800aa02:	5cd3      	ldrb	r3, [r2, r3]
 800aa04:	001a      	movs	r2, r3
 800aa06:	0013      	movs	r3, r2
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	189b      	adds	r3, r3, r2
 800aa0c:	011a      	lsls	r2, r3, #4
 800aa0e:	1ad2      	subs	r2, r2, r3
 800aa10:	0113      	lsls	r3, r2, #4
 800aa12:	1a9b      	subs	r3, r3, r2
 800aa14:	01db      	lsls	r3, r3, #7
 800aa16:	001a      	movs	r2, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	189b      	adds	r3, r3, r2
 800aa1c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	3301      	adds	r3, #1
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	785b      	ldrb	r3, [r3, #1]
 800aa28:	001a      	movs	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	dbbc      	blt.n	800a9aa <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	789b      	ldrb	r3, [r3, #2]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	001a      	movs	r2, r3
 800aa38:	0013      	movs	r3, r2
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	189b      	adds	r3, r3, r2
 800aa3e:	011a      	lsls	r2, r3, #4
 800aa40:	1ad2      	subs	r2, r2, r3
 800aa42:	0113      	lsls	r3, r2, #4
 800aa44:	1a9b      	subs	r3, r3, r2
 800aa46:	01db      	lsls	r3, r3, #7
 800aa48:	001a      	movs	r2, r3
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	189b      	adds	r3, r3, r2
 800aa4e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	001a      	movs	r2, r3
 800aa56:	0013      	movs	r3, r2
 800aa58:	011b      	lsls	r3, r3, #4
 800aa5a:	1a9b      	subs	r3, r3, r2
 800aa5c:	011a      	lsls	r2, r3, #4
 800aa5e:	1ad2      	subs	r2, r2, r3
 800aa60:	0113      	lsls	r3, r2, #4
 800aa62:	001a      	movs	r2, r3
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	189b      	adds	r3, r3, r2
 800aa68:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	785b      	ldrb	r3, [r3, #1]
 800aa6e:	001a      	movs	r2, r3
 800aa70:	0013      	movs	r3, r2
 800aa72:	011b      	lsls	r3, r3, #4
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	001a      	movs	r2, r3
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	189b      	adds	r3, r3, r2
 800aa7e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	789b      	ldrb	r3, [r3, #2]
 800aa84:	001a      	movs	r2, r3
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	189b      	adds	r3, r3, r2
 800aa8a:	60bb      	str	r3, [r7, #8]
  return seconds;
 800aa8c:	68bb      	ldr	r3, [r7, #8]
}
 800aa8e:	0018      	movs	r0, r3
 800aa90:	46bd      	mov	sp, r7
 800aa92:	b004      	add	sp, #16
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	46c0      	nop			@ (mov r8, r8)
 800aa98:	fffff84f 	.word	0xfffff84f
 800aa9c:	000007b2 	.word	0x000007b2
 800aaa0:	00015180 	.word	0x00015180
 800aaa4:	00263b80 	.word	0x00263b80
 800aaa8:	0802ed24 	.word	0x0802ed24

0800aaac <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800aaac:	b590      	push	{r4, r7, lr}
 800aaae:	b089      	sub	sp, #36	@ 0x24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	213c      	movs	r1, #60	@ 0x3c
 800aac0:	0018      	movs	r0, r3
 800aac2:	f7f5 fbf5 	bl	80002b0 <__aeabi_uidivmod>
 800aac6:	000b      	movs	r3, r1
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	213c      	movs	r1, #60	@ 0x3c
 800aad2:	0018      	movs	r0, r3
 800aad4:	f7f5 fb66 	bl	80001a4 <__udivsi3>
 800aad8:	0003      	movs	r3, r0
 800aada:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	213c      	movs	r1, #60	@ 0x3c
 800aae0:	0018      	movs	r0, r3
 800aae2:	f7f5 fbe5 	bl	80002b0 <__aeabi_uidivmod>
 800aae6:	000b      	movs	r3, r1
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	213c      	movs	r1, #60	@ 0x3c
 800aaf2:	0018      	movs	r0, r3
 800aaf4:	f7f5 fb56 	bl	80001a4 <__udivsi3>
 800aaf8:	0003      	movs	r3, r0
 800aafa:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	2118      	movs	r1, #24
 800ab00:	0018      	movs	r0, r3
 800ab02:	f7f5 fbd5 	bl	80002b0 <__aeabi_uidivmod>
 800ab06:	000b      	movs	r3, r1
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	2118      	movs	r1, #24
 800ab12:	0018      	movs	r0, r3
 800ab14:	f7f5 fb46 	bl	80001a4 <__udivsi3>
 800ab18:	0003      	movs	r3, r0
 800ab1a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	2107      	movs	r1, #7
 800ab22:	0018      	movs	r0, r3
 800ab24:	f7f5 fbc4 	bl	80002b0 <__aeabi_uidivmod>
 800ab28:	000b      	movs	r3, r1
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	701a      	strb	r2, [r3, #0]
  year = 0;
 800ab34:	231f      	movs	r3, #31
 800ab36:	18fb      	adds	r3, r7, r3
 800ab38:	2200      	movs	r2, #0
 800ab3a:	701a      	strb	r2, [r3, #0]
  days = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800ab40:	e005      	b.n	800ab4e <breakPosixTime+0xa2>
    year++;
 800ab42:	211f      	movs	r1, #31
 800ab44:	187b      	adds	r3, r7, r1
 800ab46:	781a      	ldrb	r2, [r3, #0]
 800ab48:	187b      	adds	r3, r7, r1
 800ab4a:	3201      	adds	r2, #1
 800ab4c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800ab4e:	241f      	movs	r4, #31
 800ab50:	193b      	adds	r3, r7, r4
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	4a64      	ldr	r2, [pc, #400]	@ (800ace8 <breakPosixTime+0x23c>)
 800ab56:	4694      	mov	ip, r2
 800ab58:	4463      	add	r3, ip
 800ab5a:	001a      	movs	r2, r3
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	4013      	ands	r3, r2
 800ab60:	d119      	bne.n	800ab96 <breakPosixTime+0xea>
 800ab62:	193b      	adds	r3, r7, r4
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	4a60      	ldr	r2, [pc, #384]	@ (800ace8 <breakPosixTime+0x23c>)
 800ab68:	4694      	mov	ip, r2
 800ab6a:	4463      	add	r3, ip
 800ab6c:	2164      	movs	r1, #100	@ 0x64
 800ab6e:	0018      	movs	r0, r3
 800ab70:	f7f5 fc88 	bl	8000484 <__aeabi_idivmod>
 800ab74:	1e0b      	subs	r3, r1, #0
 800ab76:	d10b      	bne.n	800ab90 <breakPosixTime+0xe4>
 800ab78:	193b      	adds	r3, r7, r4
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	4a5a      	ldr	r2, [pc, #360]	@ (800ace8 <breakPosixTime+0x23c>)
 800ab7e:	4694      	mov	ip, r2
 800ab80:	4463      	add	r3, ip
 800ab82:	22c8      	movs	r2, #200	@ 0xc8
 800ab84:	0051      	lsls	r1, r2, #1
 800ab86:	0018      	movs	r0, r3
 800ab88:	f7f5 fc7c 	bl	8000484 <__aeabi_idivmod>
 800ab8c:	1e0b      	subs	r3, r1, #0
 800ab8e:	d102      	bne.n	800ab96 <breakPosixTime+0xea>
 800ab90:	23b7      	movs	r3, #183	@ 0xb7
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	e001      	b.n	800ab9a <breakPosixTime+0xee>
 800ab96:	236e      	movs	r3, #110	@ 0x6e
 800ab98:	33ff      	adds	r3, #255	@ 0xff
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	18d3      	adds	r3, r2, r3
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d9cc      	bls.n	800ab42 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	241f      	movs	r4, #31
 800abac:	193a      	adds	r2, r7, r4
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800abb2:	193b      	adds	r3, r7, r4
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	4a4c      	ldr	r2, [pc, #304]	@ (800ace8 <breakPosixTime+0x23c>)
 800abb8:	4694      	mov	ip, r2
 800abba:	4463      	add	r3, ip
 800abbc:	001a      	movs	r2, r3
 800abbe:	2303      	movs	r3, #3
 800abc0:	4013      	ands	r3, r2
 800abc2:	d119      	bne.n	800abf8 <breakPosixTime+0x14c>
 800abc4:	193b      	adds	r3, r7, r4
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	4a47      	ldr	r2, [pc, #284]	@ (800ace8 <breakPosixTime+0x23c>)
 800abca:	4694      	mov	ip, r2
 800abcc:	4463      	add	r3, ip
 800abce:	2164      	movs	r1, #100	@ 0x64
 800abd0:	0018      	movs	r0, r3
 800abd2:	f7f5 fc57 	bl	8000484 <__aeabi_idivmod>
 800abd6:	1e0b      	subs	r3, r1, #0
 800abd8:	d10b      	bne.n	800abf2 <breakPosixTime+0x146>
 800abda:	193b      	adds	r3, r7, r4
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	4a42      	ldr	r2, [pc, #264]	@ (800ace8 <breakPosixTime+0x23c>)
 800abe0:	4694      	mov	ip, r2
 800abe2:	4463      	add	r3, ip
 800abe4:	22c8      	movs	r2, #200	@ 0xc8
 800abe6:	0051      	lsls	r1, r2, #1
 800abe8:	0018      	movs	r0, r3
 800abea:	f7f5 fc4b 	bl	8000484 <__aeabi_idivmod>
 800abee:	1e0b      	subs	r3, r1, #0
 800abf0:	d102      	bne.n	800abf8 <breakPosixTime+0x14c>
 800abf2:	23b7      	movs	r3, #183	@ 0xb7
 800abf4:	005b      	lsls	r3, r3, #1
 800abf6:	e001      	b.n	800abfc <breakPosixTime+0x150>
 800abf8:	236e      	movs	r3, #110	@ 0x6e
 800abfa:	33ff      	adds	r3, #255	@ 0xff
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800ac02:	69ba      	ldr	r2, [r7, #24]
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	61bb      	str	r3, [r7, #24]

  days=0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	617b      	str	r3, [r7, #20]
  month=0;
 800ac0e:	211e      	movs	r1, #30
 800ac10:	187b      	adds	r3, r7, r1
 800ac12:	2200      	movs	r2, #0
 800ac14:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800ac16:	231d      	movs	r3, #29
 800ac18:	18fb      	adds	r3, r7, r3
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800ac1e:	187b      	adds	r3, r7, r1
 800ac20:	2200      	movs	r2, #0
 800ac22:	701a      	strb	r2, [r3, #0]
 800ac24:	e048      	b.n	800acb8 <breakPosixTime+0x20c>
    if (month==1) { // february
 800ac26:	231e      	movs	r3, #30
 800ac28:	18fb      	adds	r3, r7, r3
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d12a      	bne.n	800ac86 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800ac30:	241f      	movs	r4, #31
 800ac32:	193b      	adds	r3, r7, r4
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	4a2c      	ldr	r2, [pc, #176]	@ (800ace8 <breakPosixTime+0x23c>)
 800ac38:	4694      	mov	ip, r2
 800ac3a:	4463      	add	r3, ip
 800ac3c:	001a      	movs	r2, r3
 800ac3e:	2303      	movs	r3, #3
 800ac40:	4013      	ands	r3, r2
 800ac42:	d11b      	bne.n	800ac7c <breakPosixTime+0x1d0>
 800ac44:	193b      	adds	r3, r7, r4
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	4a27      	ldr	r2, [pc, #156]	@ (800ace8 <breakPosixTime+0x23c>)
 800ac4a:	4694      	mov	ip, r2
 800ac4c:	4463      	add	r3, ip
 800ac4e:	2164      	movs	r1, #100	@ 0x64
 800ac50:	0018      	movs	r0, r3
 800ac52:	f7f5 fc17 	bl	8000484 <__aeabi_idivmod>
 800ac56:	1e0b      	subs	r3, r1, #0
 800ac58:	d10b      	bne.n	800ac72 <breakPosixTime+0x1c6>
 800ac5a:	193b      	adds	r3, r7, r4
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	4a22      	ldr	r2, [pc, #136]	@ (800ace8 <breakPosixTime+0x23c>)
 800ac60:	4694      	mov	ip, r2
 800ac62:	4463      	add	r3, ip
 800ac64:	22c8      	movs	r2, #200	@ 0xc8
 800ac66:	0051      	lsls	r1, r2, #1
 800ac68:	0018      	movs	r0, r3
 800ac6a:	f7f5 fc0b 	bl	8000484 <__aeabi_idivmod>
 800ac6e:	1e0b      	subs	r3, r1, #0
 800ac70:	d104      	bne.n	800ac7c <breakPosixTime+0x1d0>
        monthLength=29;
 800ac72:	231d      	movs	r3, #29
 800ac74:	18fb      	adds	r3, r7, r3
 800ac76:	221d      	movs	r2, #29
 800ac78:	701a      	strb	r2, [r3, #0]
 800ac7a:	e00c      	b.n	800ac96 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800ac7c:	231d      	movs	r3, #29
 800ac7e:	18fb      	adds	r3, r7, r3
 800ac80:	221c      	movs	r2, #28
 800ac82:	701a      	strb	r2, [r3, #0]
 800ac84:	e007      	b.n	800ac96 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800ac86:	231e      	movs	r3, #30
 800ac88:	18fb      	adds	r3, r7, r3
 800ac8a:	781a      	ldrb	r2, [r3, #0]
 800ac8c:	231d      	movs	r3, #29
 800ac8e:	18fb      	adds	r3, r7, r3
 800ac90:	4916      	ldr	r1, [pc, #88]	@ (800acec <breakPosixTime+0x240>)
 800ac92:	5c8a      	ldrb	r2, [r1, r2]
 800ac94:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800ac96:	211d      	movs	r1, #29
 800ac98:	187b      	adds	r3, r7, r1
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d310      	bcc.n	800acc4 <breakPosixTime+0x218>
      time -= monthLength;
 800aca2:	187b      	adds	r3, r7, r1
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	69ba      	ldr	r2, [r7, #24]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800acac:	211e      	movs	r1, #30
 800acae:	187b      	adds	r3, r7, r1
 800acb0:	781a      	ldrb	r2, [r3, #0]
 800acb2:	187b      	adds	r3, r7, r1
 800acb4:	3201      	adds	r2, #1
 800acb6:	701a      	strb	r2, [r3, #0]
 800acb8:	231e      	movs	r3, #30
 800acba:	18fb      	adds	r3, r7, r3
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	2b0b      	cmp	r3, #11
 800acc0:	d9b1      	bls.n	800ac26 <breakPosixTime+0x17a>
 800acc2:	e000      	b.n	800acc6 <breakPosixTime+0x21a>
    } else {
        break;
 800acc4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800acc6:	231e      	movs	r3, #30
 800acc8:	18fb      	adds	r3, r7, r3
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	3301      	adds	r3, #1
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	3301      	adds	r3, #1
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	709a      	strb	r2, [r3, #2]
}
 800ace0:	46c0      	nop			@ (mov r8, r8)
 800ace2:	46bd      	mov	sp, r7
 800ace4:	b009      	add	sp, #36	@ 0x24
 800ace6:	bd90      	pop	{r4, r7, pc}
 800ace8:	000007b2 	.word	0x000007b2
 800acec:	0802ed24 	.word	0x0802ed24

0800acf0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800acf6:	003b      	movs	r3, r7
 800acf8:	0018      	movs	r0, r3
 800acfa:	2308      	movs	r3, #8
 800acfc:	001a      	movs	r2, r3
 800acfe:	2100      	movs	r1, #0
 800ad00:	f01b fd86 	bl	8026810 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800ad04:	4b30      	ldr	r3, [pc, #192]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad06:	4a31      	ldr	r2, [pc, #196]	@ (800adcc <MX_ADC_Init+0xdc>)
 800ad08:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800ad0a:	4b2f      	ldr	r3, [pc, #188]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ad10:	4b2d      	ldr	r3, [pc, #180]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad12:	22c0      	movs	r2, #192	@ 0xc0
 800ad14:	0612      	lsls	r2, r2, #24
 800ad16:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800ad18:	4b2b      	ldr	r3, [pc, #172]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ad1e:	4b2a      	ldr	r3, [pc, #168]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800ad24:	4b28      	ldr	r3, [pc, #160]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad26:	2201      	movs	r2, #1
 800ad28:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ad2a:	4b27      	ldr	r3, [pc, #156]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800ad30:	4b25      	ldr	r3, [pc, #148]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad32:	2220      	movs	r2, #32
 800ad34:	2100      	movs	r1, #0
 800ad36:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800ad38:	4b23      	ldr	r3, [pc, #140]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad3a:	2221      	movs	r2, #33	@ 0x21
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ad40:	4b21      	ldr	r3, [pc, #132]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ad46:	4b20      	ldr	r3, [pc, #128]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad48:	22c2      	movs	r2, #194	@ 0xc2
 800ad4a:	32ff      	adds	r2, #255	@ 0xff
 800ad4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800ad4e:	4b1e      	ldr	r3, [pc, #120]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad50:	222c      	movs	r2, #44	@ 0x2c
 800ad52:	2100      	movs	r1, #0
 800ad54:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ad56:	4b1c      	ldr	r3, [pc, #112]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad58:	2204      	movs	r2, #4
 800ad5a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ad5c:	4b1a      	ldr	r3, [pc, #104]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800ad62:	4b19      	ldr	r3, [pc, #100]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800ad68:	4b17      	ldr	r3, [pc, #92]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800ad6e:	4b16      	ldr	r3, [pc, #88]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800ad74:	4b14      	ldr	r3, [pc, #80]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad76:	0018      	movs	r0, r3
 800ad78:	f00a f814 	bl	8014da4 <HAL_ADC_Init>
 800ad7c:	1e03      	subs	r3, r0, #0
 800ad7e:	d001      	beq.n	800ad84 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800ad80:	f002 fce8 	bl	800d754 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ad84:	003b      	movs	r3, r7
 800ad86:	4a12      	ldr	r2, [pc, #72]	@ (800add0 <MX_ADC_Init+0xe0>)
 800ad88:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ad8a:	003b      	movs	r3, r7
 800ad8c:	2280      	movs	r2, #128	@ 0x80
 800ad8e:	0152      	lsls	r2, r2, #5
 800ad90:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800ad92:	003a      	movs	r2, r7
 800ad94:	4b0c      	ldr	r3, [pc, #48]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800ad96:	0011      	movs	r1, r2
 800ad98:	0018      	movs	r0, r3
 800ad9a:	f00a fa73 	bl	8015284 <HAL_ADC_ConfigChannel>
 800ad9e:	1e03      	subs	r3, r0, #0
 800ada0:	d001      	beq.n	800ada6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800ada2:	f002 fcd7 	bl	800d754 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800ada6:	003b      	movs	r3, r7
 800ada8:	4a0a      	ldr	r2, [pc, #40]	@ (800add4 <MX_ADC_Init+0xe4>)
 800adaa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800adac:	003a      	movs	r2, r7
 800adae:	4b06      	ldr	r3, [pc, #24]	@ (800adc8 <MX_ADC_Init+0xd8>)
 800adb0:	0011      	movs	r1, r2
 800adb2:	0018      	movs	r0, r3
 800adb4:	f00a fa66 	bl	8015284 <HAL_ADC_ConfigChannel>
 800adb8:	1e03      	subs	r3, r0, #0
 800adba:	d001      	beq.n	800adc0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800adbc:	f002 fcca 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800adc0:	46c0      	nop			@ (mov r8, r8)
 800adc2:	46bd      	mov	sp, r7
 800adc4:	b002      	add	sp, #8
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20000e7c 	.word	0x20000e7c
 800adcc:	40012400 	.word	0x40012400
 800add0:	38004000 	.word	0x38004000
 800add4:	3c008000 	.word	0x3c008000

0800add8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800add8:	b590      	push	{r4, r7, lr}
 800adda:	b089      	sub	sp, #36	@ 0x24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ade0:	240c      	movs	r4, #12
 800ade2:	193b      	adds	r3, r7, r4
 800ade4:	0018      	movs	r0, r3
 800ade6:	2314      	movs	r3, #20
 800ade8:	001a      	movs	r2, r3
 800adea:	2100      	movs	r1, #0
 800adec:	f01b fd10 	bl	8026810 <memset>
  if(adcHandle->Instance==ADC1)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a14      	ldr	r2, [pc, #80]	@ (800ae48 <HAL_ADC_MspInit+0x70>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d121      	bne.n	800ae3e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800adfa:	4b14      	ldr	r3, [pc, #80]	@ (800ae4c <HAL_ADC_MspInit+0x74>)
 800adfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adfe:	4b13      	ldr	r3, [pc, #76]	@ (800ae4c <HAL_ADC_MspInit+0x74>)
 800ae00:	2180      	movs	r1, #128	@ 0x80
 800ae02:	0089      	lsls	r1, r1, #2
 800ae04:	430a      	orrs	r2, r1
 800ae06:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae08:	4b10      	ldr	r3, [pc, #64]	@ (800ae4c <HAL_ADC_MspInit+0x74>)
 800ae0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae4c <HAL_ADC_MspInit+0x74>)
 800ae0e:	2104      	movs	r1, #4
 800ae10:	430a      	orrs	r2, r1
 800ae12:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae14:	4b0d      	ldr	r3, [pc, #52]	@ (800ae4c <HAL_ADC_MspInit+0x74>)
 800ae16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae18:	2204      	movs	r2, #4
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	60bb      	str	r3, [r7, #8]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800ae20:	193b      	adds	r3, r7, r4
 800ae22:	2230      	movs	r2, #48	@ 0x30
 800ae24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae26:	193b      	adds	r3, r7, r4
 800ae28:	2203      	movs	r2, #3
 800ae2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae2c:	193b      	adds	r3, r7, r4
 800ae2e:	2200      	movs	r2, #0
 800ae30:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae32:	193b      	adds	r3, r7, r4
 800ae34:	4a06      	ldr	r2, [pc, #24]	@ (800ae50 <HAL_ADC_MspInit+0x78>)
 800ae36:	0019      	movs	r1, r3
 800ae38:	0010      	movs	r0, r2
 800ae3a:	f00b f841 	bl	8015ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ae3e:	46c0      	nop			@ (mov r8, r8)
 800ae40:	46bd      	mov	sp, r7
 800ae42:	b009      	add	sp, #36	@ 0x24
 800ae44:	bd90      	pop	{r4, r7, pc}
 800ae46:	46c0      	nop			@ (mov r8, r8)
 800ae48:	40012400 	.word	0x40012400
 800ae4c:	40021000 	.word	0x40021000
 800ae50:	50000800 	.word	0x50000800

0800ae54 <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ae54:	b590      	push	{r4, r7, lr}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6039      	str	r1, [r7, #0]
 800ae5c:	0011      	movs	r1, r2
 800ae5e:	1dfb      	adds	r3, r7, #7
 800ae60:	1c02      	adds	r2, r0, #0
 800ae62:	701a      	strb	r2, [r3, #0]
 800ae64:	1dbb      	adds	r3, r7, #6
 800ae66:	1c0a      	adds	r2, r1, #0
 800ae68:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae94 <ReadDirRegister+0x40>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00a      	beq.n	800ae88 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800ae72:	4b08      	ldr	r3, [pc, #32]	@ (800ae94 <ReadDirRegister+0x40>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	1dba      	adds	r2, r7, #6
 800ae78:	7814      	ldrb	r4, [r2, #0]
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	1dfa      	adds	r2, r7, #7
 800ae7e:	7810      	ldrb	r0, [r2, #0]
 800ae80:	0022      	movs	r2, r4
 800ae82:	4798      	blx	r3
 800ae84:	0003      	movs	r3, r0
 800ae86:	e000      	b.n	800ae8a <ReadDirRegister+0x36>
  }
  return false;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	b003      	add	sp, #12
 800ae90:	bd90      	pop	{r4, r7, pc}
 800ae92:	46c0      	nop			@ (mov r8, r8)
 800ae94:	20000ee8 	.word	0x20000ee8

0800ae98 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ae98:	b590      	push	{r4, r7, lr}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6039      	str	r1, [r7, #0]
 800aea0:	0011      	movs	r1, r2
 800aea2:	1dfb      	adds	r3, r7, #7
 800aea4:	1c02      	adds	r2, r0, #0
 800aea6:	701a      	strb	r2, [r3, #0]
 800aea8:	1dbb      	adds	r3, r7, #6
 800aeaa:	1c0a      	adds	r2, r1, #0
 800aeac:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800aeae:	4b0a      	ldr	r3, [pc, #40]	@ (800aed8 <ReadRegister+0x40>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00a      	beq.n	800aecc <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800aeb6:	4b08      	ldr	r3, [pc, #32]	@ (800aed8 <ReadRegister+0x40>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	1dba      	adds	r2, r7, #6
 800aebc:	7814      	ldrb	r4, [r2, #0]
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	1dfa      	adds	r2, r7, #7
 800aec2:	7810      	ldrb	r0, [r2, #0]
 800aec4:	0022      	movs	r2, r4
 800aec6:	4798      	blx	r3
 800aec8:	0003      	movs	r3, r0
 800aeca:	e000      	b.n	800aece <ReadRegister+0x36>
  }
  return false;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	0018      	movs	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b003      	add	sp, #12
 800aed4:	bd90      	pop	{r4, r7, pc}
 800aed6:	46c0      	nop			@ (mov r8, r8)
 800aed8:	20000ee0 	.word	0x20000ee0

0800aedc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800aedc:	b590      	push	{r4, r7, lr}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6039      	str	r1, [r7, #0]
 800aee4:	0011      	movs	r1, r2
 800aee6:	1dfb      	adds	r3, r7, #7
 800aee8:	1c02      	adds	r2, r0, #0
 800aeea:	701a      	strb	r2, [r3, #0]
 800aeec:	1dbb      	adds	r3, r7, #6
 800aeee:	1c0a      	adds	r2, r1, #0
 800aef0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800aef2:	4b0a      	ldr	r3, [pc, #40]	@ (800af1c <WriteRegister+0x40>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00a      	beq.n	800af10 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800aefa:	4b08      	ldr	r3, [pc, #32]	@ (800af1c <WriteRegister+0x40>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	1dba      	adds	r2, r7, #6
 800af00:	7814      	ldrb	r4, [r2, #0]
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	1dfa      	adds	r2, r7, #7
 800af06:	7810      	ldrb	r0, [r2, #0]
 800af08:	0022      	movs	r2, r4
 800af0a:	4798      	blx	r3
 800af0c:	0003      	movs	r3, r0
 800af0e:	e000      	b.n	800af12 <WriteRegister+0x36>
  }
  return false;
 800af10:	2300      	movs	r3, #0
}
 800af12:	0018      	movs	r0, r3
 800af14:	46bd      	mov	sp, r7
 800af16:	b003      	add	sp, #12
 800af18:	bd90      	pop	{r4, r7, pc}
 800af1a:	46c0      	nop			@ (mov r8, r8)
 800af1c:	20000ee4 	.word	0x20000ee4

0800af20 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	000a      	movs	r2, r1
 800af2a:	1cfb      	adds	r3, r7, #3
 800af2c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800af2e:	230f      	movs	r3, #15
 800af30:	18fb      	adds	r3, r7, r3
 800af32:	22ff      	movs	r2, #255	@ 0xff
 800af34:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800af36:	230e      	movs	r3, #14
 800af38:	18fb      	adds	r3, r7, r3
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	e038      	b.n	800afb2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800af40:	230e      	movs	r3, #14
 800af42:	18fb      	adds	r3, r7, r3
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	18d3      	adds	r3, r2, r3
 800af4a:	7819      	ldrb	r1, [r3, #0]
 800af4c:	220f      	movs	r2, #15
 800af4e:	18bb      	adds	r3, r7, r2
 800af50:	18ba      	adds	r2, r7, r2
 800af52:	7812      	ldrb	r2, [r2, #0]
 800af54:	404a      	eors	r2, r1
 800af56:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800af58:	230d      	movs	r3, #13
 800af5a:	18fb      	adds	r3, r7, r3
 800af5c:	2200      	movs	r2, #0
 800af5e:	701a      	strb	r2, [r3, #0]
 800af60:	e01c      	b.n	800af9c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800af62:	210f      	movs	r1, #15
 800af64:	187b      	adds	r3, r7, r1
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	b25b      	sxtb	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da0a      	bge.n	800af84 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800af6e:	187b      	adds	r3, r7, r1
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	b25b      	sxtb	r3, r3
 800af74:	18db      	adds	r3, r3, r3
 800af76:	b25b      	sxtb	r3, r3
 800af78:	2231      	movs	r2, #49	@ 0x31
 800af7a:	4053      	eors	r3, r2
 800af7c:	b25a      	sxtb	r2, r3
 800af7e:	187b      	adds	r3, r7, r1
 800af80:	701a      	strb	r2, [r3, #0]
 800af82:	e005      	b.n	800af90 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800af84:	230f      	movs	r3, #15
 800af86:	18fa      	adds	r2, r7, r3
 800af88:	18fb      	adds	r3, r7, r3
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	18db      	adds	r3, r3, r3
 800af8e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800af90:	210d      	movs	r1, #13
 800af92:	187b      	adds	r3, r7, r1
 800af94:	781a      	ldrb	r2, [r3, #0]
 800af96:	187b      	adds	r3, r7, r1
 800af98:	3201      	adds	r2, #1
 800af9a:	701a      	strb	r2, [r3, #0]
 800af9c:	230d      	movs	r3, #13
 800af9e:	18fb      	adds	r3, r7, r3
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b07      	cmp	r3, #7
 800afa4:	d9dd      	bls.n	800af62 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800afa6:	210e      	movs	r1, #14
 800afa8:	187b      	adds	r3, r7, r1
 800afaa:	781a      	ldrb	r2, [r3, #0]
 800afac:	187b      	adds	r3, r7, r1
 800afae:	3201      	adds	r2, #1
 800afb0:	701a      	strb	r2, [r3, #0]
 800afb2:	230e      	movs	r3, #14
 800afb4:	18fa      	adds	r2, r7, r3
 800afb6:	1cfb      	adds	r3, r7, #3
 800afb8:	7812      	ldrb	r2, [r2, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d3bf      	bcc.n	800af40 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800afc0:	230f      	movs	r3, #15
 800afc2:	18fb      	adds	r3, r7, r3
 800afc4:	781b      	ldrb	r3, [r3, #0]
}
 800afc6:	0018      	movs	r0, r3
 800afc8:	46bd      	mov	sp, r7
 800afca:	b004      	add	sp, #16
 800afcc:	bd80      	pop	{r7, pc}
	...

0800afd0 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800afd8:	f009 fe7c 	bl	8014cd4 <HAL_GetTick>
 800afdc:	0002      	movs	r2, r0
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	18d2      	adds	r2, r2, r3
 800afe2:	4b03      	ldr	r3, [pc, #12]	@ (800aff0 <setAHT20TimeStamp+0x20>)
 800afe4:	601a      	str	r2, [r3, #0]
}
 800afe6:	46c0      	nop			@ (mov r8, r8)
 800afe8:	46bd      	mov	sp, r7
 800afea:	b002      	add	sp, #8
 800afec:	bd80      	pop	{r7, pc}
 800afee:	46c0      	nop			@ (mov r8, r8)
 800aff0:	20000ed8 	.word	0x20000ed8

0800aff4 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800b000:	4b06      	ldr	r3, [pc, #24]	@ (800b01c <AHT_Init+0x28>)
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800b006:	4b06      	ldr	r3, [pc, #24]	@ (800b020 <AHT_Init+0x2c>)
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b00c:	4b05      	ldr	r3, [pc, #20]	@ (800b024 <AHT_Init+0x30>)
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	601a      	str	r2, [r3, #0]
}
 800b012:	46c0      	nop			@ (mov r8, r8)
 800b014:	46bd      	mov	sp, r7
 800b016:	b004      	add	sp, #16
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	46c0      	nop			@ (mov r8, r8)
 800b01c:	20000ee8 	.word	0x20000ee8
 800b020:	20000ee0 	.word	0x20000ee0
 800b024:	20000ee4 	.word	0x20000ee4

0800b028 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af02      	add	r7, sp, #8
 800b02e:	0002      	movs	r2, r0
 800b030:	1dfb      	adds	r3, r7, #7
 800b032:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800b034:	4b18      	ldr	r3, [pc, #96]	@ (800b098 <AHT20_register_reset+0x70>)
 800b036:	1dfa      	adds	r2, r7, #7
 800b038:	7812      	ldrb	r2, [r2, #0]
 800b03a:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800b03c:	4b16      	ldr	r3, [pc, #88]	@ (800b098 <AHT20_register_reset+0x70>)
 800b03e:	2203      	movs	r2, #3
 800b040:	0019      	movs	r1, r3
 800b042:	2038      	movs	r0, #56	@ 0x38
 800b044:	f7ff ff4a 	bl	800aedc <WriteRegister>
  HAL_Delay(15);
 800b048:	200f      	movs	r0, #15
 800b04a:	f009 fe4d 	bl	8014ce8 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800b04e:	4b13      	ldr	r3, [pc, #76]	@ (800b09c <AHT20_register_reset+0x74>)
 800b050:	2203      	movs	r2, #3
 800b052:	0019      	movs	r1, r3
 800b054:	2038      	movs	r0, #56	@ 0x38
 800b056:	f7ff ff1f 	bl	800ae98 <ReadRegister>
  HAL_Delay(15);
 800b05a:	200f      	movs	r0, #15
 800b05c:	f009 fe44 	bl	8014ce8 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800b060:	4b0e      	ldr	r3, [pc, #56]	@ (800b09c <AHT20_register_reset+0x74>)
 800b062:	22b0      	movs	r2, #176	@ 0xb0
 800b064:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800b066:	4b0d      	ldr	r3, [pc, #52]	@ (800b09c <AHT20_register_reset+0x74>)
 800b068:	789b      	ldrb	r3, [r3, #2]
 800b06a:	0018      	movs	r0, r3
 800b06c:	4b0b      	ldr	r3, [pc, #44]	@ (800b09c <AHT20_register_reset+0x74>)
 800b06e:	78db      	ldrb	r3, [r3, #3]
 800b070:	4a0b      	ldr	r2, [pc, #44]	@ (800b0a0 <AHT20_register_reset+0x78>)
 800b072:	490c      	ldr	r1, [pc, #48]	@ (800b0a4 <AHT20_register_reset+0x7c>)
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	0003      	movs	r3, r0
 800b078:	2003      	movs	r0, #3
 800b07a:	f009 f8b3 	bl	80141e4 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800b07e:	4b07      	ldr	r3, [pc, #28]	@ (800b09c <AHT20_register_reset+0x74>)
 800b080:	2203      	movs	r2, #3
 800b082:	0019      	movs	r1, r3
 800b084:	2038      	movs	r0, #56	@ 0x38
 800b086:	f7ff ff29 	bl	800aedc <WriteRegister>
  HAL_Delay(15);
 800b08a:	200f      	movs	r0, #15
 800b08c:	f009 fe2c 	bl	8014ce8 <HAL_Delay>
}
 800b090:	46c0      	nop			@ (mov r8, r8)
 800b092:	46bd      	mov	sp, r7
 800b094:	b002      	add	sp, #8
 800b096:	bd80      	pop	{r7, pc}
 800b098:	2000009c 	.word	0x2000009c
 800b09c:	20000eec 	.word	0x20000eec
 800b0a0:	0802c820 	.word	0x0802c820
 800b0a4:	0802c870 	.word	0x0802c870

0800b0a8 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800b0ac:	201b      	movs	r0, #27
 800b0ae:	f7ff ffbb 	bl	800b028 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800b0b2:	201c      	movs	r0, #28
 800b0b4:	f7ff ffb8 	bl	800b028 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800b0b8:	201e      	movs	r0, #30
 800b0ba:	f7ff ffb5 	bl	800b028 <AHT20_register_reset>
}
 800b0be:	46c0      	nop			@ (mov r8, r8)
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b0c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b0fc <AHT20_read_status+0x38>)
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	0019      	movs	r1, r3
 800b0ce:	2038      	movs	r0, #56	@ 0x38
 800b0d0:	f7ff ff04 	bl	800aedc <WriteRegister>
  HAL_Delay(10);
 800b0d4:	200a      	movs	r0, #10
 800b0d6:	f009 fe07 	bl	8014ce8 <HAL_Delay>
  airtemphumraw[0] = 0;
 800b0da:	4b09      	ldr	r3, [pc, #36]	@ (800b100 <AHT20_read_status+0x3c>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800b0e0:	4b07      	ldr	r3, [pc, #28]	@ (800b100 <AHT20_read_status+0x3c>)
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	0019      	movs	r1, r3
 800b0e6:	2038      	movs	r0, #56	@ 0x38
 800b0e8:	f7ff fed6 	bl	800ae98 <ReadRegister>
  HAL_Delay(10);
 800b0ec:	200a      	movs	r0, #10
 800b0ee:	f009 fdfb 	bl	8014ce8 <HAL_Delay>
  return airtemphumraw[0];
 800b0f2:	4b03      	ldr	r3, [pc, #12]	@ (800b100 <AHT20_read_status+0x3c>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
}
 800b0f6:	0018      	movs	r0, r3
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	20000098 	.word	0x20000098
 800b100:	20000eec 	.word	0x20000eec

0800b104 <AHT20_init>:

bool AHT20_init(void) {
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800b10a:	f009 fde3 	bl	8014cd4 <HAL_GetTick>
 800b10e:	0003      	movs	r3, r0
 800b110:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b77      	cmp	r3, #119	@ 0x77
 800b116:	d805      	bhi.n	800b124 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2278      	movs	r2, #120	@ 0x78
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	0018      	movs	r0, r3
 800b120:	f009 fde2 	bl	8014ce8 <HAL_Delay>
  }
  AHT20_read_status();
 800b124:	f7ff ffce 	bl	800b0c4 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800b128:	4b0e      	ldr	r3, [pc, #56]	@ (800b164 <AHT20_init+0x60>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	4a0e      	ldr	r2, [pc, #56]	@ (800b168 <AHT20_init+0x64>)
 800b12e:	490f      	ldr	r1, [pc, #60]	@ (800b16c <AHT20_init+0x68>)
 800b130:	2003      	movs	r0, #3
 800b132:	f009 f857 	bl	80141e4 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800b136:	4b0b      	ldr	r3, [pc, #44]	@ (800b164 <AHT20_init+0x60>)
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	001a      	movs	r2, r3
 800b13c:	2318      	movs	r3, #24
 800b13e:	4013      	ands	r3, r2
 800b140:	2b18      	cmp	r3, #24
 800b142:	d00a      	beq.n	800b15a <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800b144:	4b0a      	ldr	r3, [pc, #40]	@ (800b170 <AHT20_init+0x6c>)
 800b146:	2203      	movs	r2, #3
 800b148:	0019      	movs	r1, r3
 800b14a:	2038      	movs	r0, #56	@ 0x38
 800b14c:	f7ff fec6 	bl	800aedc <WriteRegister>
    HAL_Delay(10);
 800b150:	200a      	movs	r0, #10
 800b152:	f009 fdc9 	bl	8014ce8 <HAL_Delay>
    AHT20_Start_Init();
 800b156:	f7ff ffa7 	bl	800b0a8 <AHT20_Start_Init>
  }
  return true;
 800b15a:	2301      	movs	r3, #1
}
 800b15c:	0018      	movs	r0, r3
 800b15e:	46bd      	mov	sp, r7
 800b160:	b002      	add	sp, #8
 800b162:	bd80      	pop	{r7, pc}
 800b164:	20000eec 	.word	0x20000eec
 800b168:	0802c874 	.word	0x0802c874
 800b16c:	0802c870 	.word	0x0802c870
 800b170:	2000008c 	.word	0x2000008c

0800b174 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800b174:	b590      	push	{r4, r7, lr}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b17a:	1dfc      	adds	r4, r7, #7
 800b17c:	4b10      	ldr	r3, [pc, #64]	@ (800b1c0 <AHT20_calibrate+0x4c>)
 800b17e:	2201      	movs	r2, #1
 800b180:	0019      	movs	r1, r3
 800b182:	2038      	movs	r0, #56	@ 0x38
 800b184:	f7ff feaa 	bl	800aedc <WriteRegister>
 800b188:	0003      	movs	r3, r0
 800b18a:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800b18c:	1dfb      	adds	r3, r7, #7
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2201      	movs	r2, #1
 800b192:	4053      	eors	r3, r2
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d005      	beq.n	800b1a6 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800b19a:	4a0a      	ldr	r2, [pc, #40]	@ (800b1c4 <AHT20_calibrate+0x50>)
 800b19c:	4b0a      	ldr	r3, [pc, #40]	@ (800b1c8 <AHT20_calibrate+0x54>)
 800b19e:	0019      	movs	r1, r3
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	f009 f81f 	bl	80141e4 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b1a6:	f009 fd95 	bl	8014cd4 <HAL_GetTick>
 800b1aa:	0003      	movs	r3, r0
 800b1ac:	3332      	adds	r3, #50	@ 0x32
 800b1ae:	001a      	movs	r2, r3
 800b1b0:	4b06      	ldr	r3, [pc, #24]	@ (800b1cc <AHT20_calibrate+0x58>)
 800b1b2:	601a      	str	r2, [r3, #0]
  return response;
 800b1b4:	1dfb      	adds	r3, r7, #7
 800b1b6:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	b003      	add	sp, #12
 800b1be:	bd90      	pop	{r4, r7, pc}
 800b1c0:	20000098 	.word	0x20000098
 800b1c4:	0802c89c 	.word	0x0802c89c
 800b1c8:	0802c8d4 	.word	0x0802c8d4
 800b1cc:	20000ed8 	.word	0x20000ed8

0800b1d0 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800b1d4:	4a0a      	ldr	r2, [pc, #40]	@ (800b200 <AHT20_DeviceConnected+0x30>)
 800b1d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b204 <AHT20_DeviceConnected+0x34>)
 800b1d8:	0019      	movs	r1, r3
 800b1da:	2003      	movs	r0, #3
 800b1dc:	f009 f802 	bl	80141e4 <CreateLine>
   AHT20_init();
 800b1e0:	f7ff ff90 	bl	800b104 <AHT20_init>
   HAL_Delay(10);
 800b1e4:	200a      	movs	r0, #10
 800b1e6:	f009 fd7f 	bl	8014ce8 <HAL_Delay>
   AHT20_calibrate();
 800b1ea:	f7ff ffc3 	bl	800b174 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800b1ee:	f7ff ff69 	bl	800b0c4 <AHT20_read_status>
 800b1f2:	0003      	movs	r3, r0
 800b1f4:	1e5a      	subs	r2, r3, #1
 800b1f6:	4193      	sbcs	r3, r2
 800b1f8:	b2db      	uxtb	r3, r3
 }
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	0802c8d8 	.word	0x0802c8d8
 800b204:	0802c870 	.word	0x0802c870

0800b208 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800b208:	b590      	push	{r4, r7, lr}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800b20e:	1dfc      	adds	r4, r7, #7
 800b210:	4b10      	ldr	r3, [pc, #64]	@ (800b254 <AHT20_StartMeasurement+0x4c>)
 800b212:	2203      	movs	r2, #3
 800b214:	0019      	movs	r1, r3
 800b216:	2038      	movs	r0, #56	@ 0x38
 800b218:	f7ff fe60 	bl	800aedc <WriteRegister>
 800b21c:	0003      	movs	r3, r0
 800b21e:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800b220:	1dfb      	adds	r3, r7, #7
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2201      	movs	r2, #1
 800b226:	4053      	eors	r3, r2
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d005      	beq.n	800b23a <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800b22e:	4a0a      	ldr	r2, [pc, #40]	@ (800b258 <AHT20_StartMeasurement+0x50>)
 800b230:	4b0a      	ldr	r3, [pc, #40]	@ (800b25c <AHT20_StartMeasurement+0x54>)
 800b232:	0019      	movs	r1, r3
 800b234:	2001      	movs	r0, #1
 800b236:	f008 ffd5 	bl	80141e4 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800b23a:	f009 fd4b 	bl	8014cd4 <HAL_GetTick>
 800b23e:	0003      	movs	r3, r0
 800b240:	33fa      	adds	r3, #250	@ 0xfa
 800b242:	001a      	movs	r2, r3
 800b244:	4b06      	ldr	r3, [pc, #24]	@ (800b260 <AHT20_StartMeasurement+0x58>)
 800b246:	601a      	str	r2, [r3, #0]
  return response;
 800b248:	1dfb      	adds	r3, r7, #7
 800b24a:	781b      	ldrb	r3, [r3, #0]
}
 800b24c:	0018      	movs	r0, r3
 800b24e:	46bd      	mov	sp, r7
 800b250:	b003      	add	sp, #12
 800b252:	bd90      	pop	{r4, r7, pc}
 800b254:	20000094 	.word	0x20000094
 800b258:	0802c8f0 	.word	0x0802c8f0
 800b25c:	0802c8d4 	.word	0x0802c8d4
 800b260:	20000ed8 	.word	0x20000ed8

0800b264 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800b264:	b590      	push	{r4, r7, lr}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800b26a:	f009 fd33 	bl	8014cd4 <HAL_GetTick>
 800b26e:	0003      	movs	r3, r0
 800b270:	22fa      	movs	r2, #250	@ 0xfa
 800b272:	0092      	lsls	r2, r2, #2
 800b274:	189a      	adds	r2, r3, r2
 800b276:	4b2c      	ldr	r3, [pc, #176]	@ (800b328 <AHT20_GetMeasurementValues+0xc4>)
 800b278:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b27a:	e01f      	b.n	800b2bc <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800b27c:	4a2b      	ldr	r2, [pc, #172]	@ (800b32c <AHT20_GetMeasurementValues+0xc8>)
 800b27e:	4b2c      	ldr	r3, [pc, #176]	@ (800b330 <AHT20_GetMeasurementValues+0xcc>)
 800b280:	0019      	movs	r1, r3
 800b282:	2002      	movs	r0, #2
 800b284:	f008 ffae 	bl	80141e4 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800b288:	4b27      	ldr	r3, [pc, #156]	@ (800b328 <AHT20_GetMeasurementValues+0xc4>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	0018      	movs	r0, r3
 800b28e:	f008 ff53 	bl	8014138 <TimestampIsReached>
 800b292:	1e03      	subs	r3, r0, #0
 800b294:	d00f      	beq.n	800b2b6 <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800b296:	4a27      	ldr	r2, [pc, #156]	@ (800b334 <AHT20_GetMeasurementValues+0xd0>)
 800b298:	4b27      	ldr	r3, [pc, #156]	@ (800b338 <AHT20_GetMeasurementValues+0xd4>)
 800b29a:	0019      	movs	r1, r3
 800b29c:	2001      	movs	r0, #1
 800b29e:	f008 ffa1 	bl	80141e4 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800b2a2:	f009 fd17 	bl	8014cd4 <HAL_GetTick>
 800b2a6:	0003      	movs	r3, r0
 800b2a8:	22fa      	movs	r2, #250	@ 0xfa
 800b2aa:	00d2      	lsls	r2, r2, #3
 800b2ac:	189a      	adds	r2, r3, r2
 800b2ae:	4b1e      	ldr	r3, [pc, #120]	@ (800b328 <AHT20_GetMeasurementValues+0xc4>)
 800b2b0:	601a      	str	r2, [r3, #0]
      return false;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e034      	b.n	800b320 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800b2b6:	200a      	movs	r0, #10
 800b2b8:	f009 fd16 	bl	8014ce8 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b2bc:	f7ff ff02 	bl	800b0c4 <AHT20_read_status>
 800b2c0:	0003      	movs	r3, r0
 800b2c2:	001a      	movs	r2, r3
 800b2c4:	2380      	movs	r3, #128	@ 0x80
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	2b80      	cmp	r3, #128	@ 0x80
 800b2ca:	d0d7      	beq.n	800b27c <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800b2cc:	200a      	movs	r0, #10
 800b2ce:	f009 fd0b 	bl	8014ce8 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800b2d2:	1dfb      	adds	r3, r7, #7
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	701a      	strb	r2, [r3, #0]
 800b2d8:	e009      	b.n	800b2ee <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800b2da:	1dfb      	adds	r3, r7, #7
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	4a17      	ldr	r2, [pc, #92]	@ (800b33c <AHT20_GetMeasurementValues+0xd8>)
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800b2e4:	1dfb      	adds	r3, r7, #7
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	1dfb      	adds	r3, r7, #7
 800b2ea:	3201      	adds	r2, #1
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	1dfb      	adds	r3, r7, #7
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b06      	cmp	r3, #6
 800b2f4:	d9f1      	bls.n	800b2da <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800b2f6:	1dbc      	adds	r4, r7, #6
 800b2f8:	4b10      	ldr	r3, [pc, #64]	@ (800b33c <AHT20_GetMeasurementValues+0xd8>)
 800b2fa:	2207      	movs	r2, #7
 800b2fc:	0019      	movs	r1, r3
 800b2fe:	2038      	movs	r0, #56	@ 0x38
 800b300:	f7ff fda8 	bl	800ae54 <ReadDirRegister>
 800b304:	0003      	movs	r3, r0
 800b306:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800b308:	200a      	movs	r0, #10
 800b30a:	f009 fced 	bl	8014ce8 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800b30e:	f009 fce1 	bl	8014cd4 <HAL_GetTick>
 800b312:	0003      	movs	r3, r0
 800b314:	3364      	adds	r3, #100	@ 0x64
 800b316:	001a      	movs	r2, r3
 800b318:	4b03      	ldr	r3, [pc, #12]	@ (800b328 <AHT20_GetMeasurementValues+0xc4>)
 800b31a:	601a      	str	r2, [r3, #0]
  return response;
 800b31c:	1dbb      	adds	r3, r7, #6
 800b31e:	781b      	ldrb	r3, [r3, #0]
}
 800b320:	0018      	movs	r0, r3
 800b322:	46bd      	mov	sp, r7
 800b324:	b003      	add	sp, #12
 800b326:	bd90      	pop	{r4, r7, pc}
 800b328:	20000ed8 	.word	0x20000ed8
 800b32c:	0802c91c 	.word	0x0802c91c
 800b330:	0802c944 	.word	0x0802c944
 800b334:	0802c948 	.word	0x0802c948
 800b338:	0802c8d4 	.word	0x0802c8d4
 800b33c:	20000eec 	.word	0x20000eec

0800b340 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800b340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b342:	46c6      	mov	lr, r8
 800b344:	b500      	push	{lr}
 800b346:	b08a      	sub	sp, #40	@ 0x28
 800b348:	af06      	add	r7, sp, #24
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800b34e:	4b5a      	ldr	r3, [pc, #360]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b350:	799c      	ldrb	r4, [r3, #6]
 800b352:	4b59      	ldr	r3, [pc, #356]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b354:	2106      	movs	r1, #6
 800b356:	0018      	movs	r0, r3
 800b358:	f7ff fde2 	bl	800af20 <CalculateCRC>
 800b35c:	0003      	movs	r3, r0
 800b35e:	429c      	cmp	r4, r3
 800b360:	d044      	beq.n	800b3ec <AHT20_Calculate+0xac>
 800b362:	4b55      	ldr	r3, [pc, #340]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b364:	799b      	ldrb	r3, [r3, #6]
 800b366:	2bff      	cmp	r3, #255	@ 0xff
 800b368:	d040      	beq.n	800b3ec <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800b36a:	4b53      	ldr	r3, [pc, #332]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	4698      	mov	r8, r3
 800b370:	4b51      	ldr	r3, [pc, #324]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b372:	785b      	ldrb	r3, [r3, #1]
 800b374:	0018      	movs	r0, r3
 800b376:	4b50      	ldr	r3, [pc, #320]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b378:	789b      	ldrb	r3, [r3, #2]
 800b37a:	001c      	movs	r4, r3
 800b37c:	4b4e      	ldr	r3, [pc, #312]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b37e:	78db      	ldrb	r3, [r3, #3]
 800b380:	001d      	movs	r5, r3
 800b382:	4b4d      	ldr	r3, [pc, #308]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b384:	791b      	ldrb	r3, [r3, #4]
 800b386:	001e      	movs	r6, r3
 800b388:	4b4b      	ldr	r3, [pc, #300]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b38a:	795b      	ldrb	r3, [r3, #5]
 800b38c:	469c      	mov	ip, r3
 800b38e:	4b4a      	ldr	r3, [pc, #296]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b390:	799b      	ldrb	r3, [r3, #6]
 800b392:	4a4a      	ldr	r2, [pc, #296]	@ (800b4bc <AHT20_Calculate+0x17c>)
 800b394:	494a      	ldr	r1, [pc, #296]	@ (800b4c0 <AHT20_Calculate+0x180>)
 800b396:	9305      	str	r3, [sp, #20]
 800b398:	4663      	mov	r3, ip
 800b39a:	9304      	str	r3, [sp, #16]
 800b39c:	9603      	str	r6, [sp, #12]
 800b39e:	9502      	str	r5, [sp, #8]
 800b3a0:	9401      	str	r4, [sp, #4]
 800b3a2:	9000      	str	r0, [sp, #0]
 800b3a4:	4643      	mov	r3, r8
 800b3a6:	2003      	movs	r0, #3
 800b3a8:	f008 ff1c 	bl	80141e4 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800b3ac:	4b42      	ldr	r3, [pc, #264]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b3ae:	799b      	ldrb	r3, [r3, #6]
 800b3b0:	001c      	movs	r4, r3
 800b3b2:	4b41      	ldr	r3, [pc, #260]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b3b4:	2106      	movs	r1, #6
 800b3b6:	0018      	movs	r0, r3
 800b3b8:	f7ff fdb2 	bl	800af20 <CalculateCRC>
 800b3bc:	0003      	movs	r3, r0
 800b3be:	4a41      	ldr	r2, [pc, #260]	@ (800b4c4 <AHT20_Calculate+0x184>)
 800b3c0:	4941      	ldr	r1, [pc, #260]	@ (800b4c8 <AHT20_Calculate+0x188>)
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	0023      	movs	r3, r4
 800b3c6:	2001      	movs	r0, #1
 800b3c8:	f008 ff0c 	bl	80141e4 <CreateLine>
    *airtemp = 0.0;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800b3d8:	f009 fc7c 	bl	8014cd4 <HAL_GetTick>
 800b3dc:	0003      	movs	r3, r0
 800b3de:	22fa      	movs	r2, #250	@ 0xfa
 800b3e0:	00d2      	lsls	r2, r2, #3
 800b3e2:	189a      	adds	r2, r3, r2
 800b3e4:	4b39      	ldr	r3, [pc, #228]	@ (800b4cc <AHT20_Calculate+0x18c>)
 800b3e6:	601a      	str	r2, [r3, #0]
    return false;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e05f      	b.n	800b4ac <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800b3ec:	4b38      	ldr	r3, [pc, #224]	@ (800b4d0 <AHT20_Calculate+0x190>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800b3f2:	4b31      	ldr	r3, [pc, #196]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b3f4:	78db      	ldrb	r3, [r3, #3]
 800b3f6:	041a      	lsls	r2, r3, #16
 800b3f8:	23f0      	movs	r3, #240	@ 0xf0
 800b3fa:	031b      	lsls	r3, r3, #12
 800b3fc:	401a      	ands	r2, r3
 800b3fe:	4b2e      	ldr	r3, [pc, #184]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b400:	791b      	ldrb	r3, [r3, #4]
 800b402:	021b      	lsls	r3, r3, #8
 800b404:	18d3      	adds	r3, r2, r3
 800b406:	4a2c      	ldr	r2, [pc, #176]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b408:	7952      	ldrb	r2, [r2, #5]
 800b40a:	189b      	adds	r3, r3, r2
 800b40c:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f7f6 fa5a 	bl	80018c8 <__aeabi_ui2f>
 800b414:	1c03      	adds	r3, r0, #0
 800b416:	2193      	movs	r1, #147	@ 0x93
 800b418:	05c9      	lsls	r1, r1, #23
 800b41a:	1c18      	adds	r0, r3, #0
 800b41c:	f7f5 fc42 	bl	8000ca4 <__aeabi_fdiv>
 800b420:	1c03      	adds	r3, r0, #0
 800b422:	492c      	ldr	r1, [pc, #176]	@ (800b4d4 <AHT20_Calculate+0x194>)
 800b424:	1c18      	adds	r0, r3, #0
 800b426:	f7f5 fe0b 	bl	8001040 <__aeabi_fmul>
 800b42a:	1c03      	adds	r3, r0, #0
 800b42c:	492a      	ldr	r1, [pc, #168]	@ (800b4d8 <AHT20_Calculate+0x198>)
 800b42e:	1c18      	adds	r0, r3, #0
 800b430:	f7f5 ff60 	bl	80012f4 <__aeabi_fsub>
 800b434:	1c03      	adds	r3, r0, #0
 800b436:	1c1a      	adds	r2, r3, #0
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800b43c:	4b1e      	ldr	r3, [pc, #120]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b43e:	785b      	ldrb	r3, [r3, #1]
 800b440:	031a      	lsls	r2, r3, #12
 800b442:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b444:	789b      	ldrb	r3, [r3, #2]
 800b446:	011b      	lsls	r3, r3, #4
 800b448:	18d3      	adds	r3, r2, r3
 800b44a:	4a1b      	ldr	r2, [pc, #108]	@ (800b4b8 <AHT20_Calculate+0x178>)
 800b44c:	78d2      	ldrb	r2, [r2, #3]
 800b44e:	0912      	lsrs	r2, r2, #4
 800b450:	b2d2      	uxtb	r2, r2
 800b452:	189b      	adds	r3, r3, r2
 800b454:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800b456:	68b8      	ldr	r0, [r7, #8]
 800b458:	f7f6 fa36 	bl	80018c8 <__aeabi_ui2f>
 800b45c:	1c03      	adds	r3, r0, #0
 800b45e:	2193      	movs	r1, #147	@ 0x93
 800b460:	05c9      	lsls	r1, r1, #23
 800b462:	1c18      	adds	r0, r3, #0
 800b464:	f7f5 fc1e 	bl	8000ca4 <__aeabi_fdiv>
 800b468:	1c03      	adds	r3, r0, #0
 800b46a:	491c      	ldr	r1, [pc, #112]	@ (800b4dc <AHT20_Calculate+0x19c>)
 800b46c:	1c18      	adds	r0, r3, #0
 800b46e:	f7f5 fde7 	bl	8001040 <__aeabi_fmul>
 800b472:	1c03      	adds	r3, r0, #0
 800b474:	1c1a      	adds	r2, r3, #0
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	601a      	str	r2, [r3, #0]
  Info("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	1c18      	adds	r0, r3, #0
 800b480:	f7f8 fa08 	bl	8003894 <__aeabi_f2d>
 800b484:	0004      	movs	r4, r0
 800b486:	000d      	movs	r5, r1
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	1c18      	adds	r0, r3, #0
 800b48e:	f7f8 fa01 	bl	8003894 <__aeabi_f2d>
 800b492:	0002      	movs	r2, r0
 800b494:	000b      	movs	r3, r1
 800b496:	4812      	ldr	r0, [pc, #72]	@ (800b4e0 <AHT20_Calculate+0x1a0>)
 800b498:	4912      	ldr	r1, [pc, #72]	@ (800b4e4 <AHT20_Calculate+0x1a4>)
 800b49a:	9202      	str	r2, [sp, #8]
 800b49c:	9303      	str	r3, [sp, #12]
 800b49e:	9400      	str	r4, [sp, #0]
 800b4a0:	9501      	str	r5, [sp, #4]
 800b4a2:	0002      	movs	r2, r0
 800b4a4:	2002      	movs	r0, #2
 800b4a6:	f008 fe9d 	bl	80141e4 <CreateLine>
  return true;
 800b4aa:	2301      	movs	r3, #1
}
 800b4ac:	0018      	movs	r0, r3
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	b004      	add	sp, #16
 800b4b2:	bc80      	pop	{r7}
 800b4b4:	46b8      	mov	r8, r7
 800b4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b8:	20000eec 	.word	0x20000eec
 800b4bc:	0802c96c 	.word	0x0802c96c
 800b4c0:	0802c870 	.word	0x0802c870
 800b4c4:	0802c9ec 	.word	0x0802c9ec
 800b4c8:	0802c8d4 	.word	0x0802c8d4
 800b4cc:	20000ed8 	.word	0x20000ed8
 800b4d0:	20000ef3 	.word	0x20000ef3
 800b4d4:	43480000 	.word	0x43480000
 800b4d8:	42480000 	.word	0x42480000
 800b4dc:	42c80000 	.word	0x42c80000
 800b4e0:	0802ca14 	.word	0x0802ca14
 800b4e4:	0802c944 	.word	0x0802c944

0800b4e8 <AHT20_reset>:

bool AHT20_reset(void) {
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b4ec:	f009 fbf2 	bl	8014cd4 <HAL_GetTick>
 800b4f0:	0003      	movs	r3, r0
 800b4f2:	3332      	adds	r3, #50	@ 0x32
 800b4f4:	001a      	movs	r2, r3
 800b4f6:	4b07      	ldr	r3, [pc, #28]	@ (800b514 <AHT20_reset+0x2c>)
 800b4f8:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800b4fa:	4b07      	ldr	r3, [pc, #28]	@ (800b518 <AHT20_reset+0x30>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800b500:	4b06      	ldr	r3, [pc, #24]	@ (800b51c <AHT20_reset+0x34>)
 800b502:	2201      	movs	r2, #1
 800b504:	0019      	movs	r1, r3
 800b506:	2038      	movs	r0, #56	@ 0x38
 800b508:	f7ff fce8 	bl	800aedc <WriteRegister>
 800b50c:	0003      	movs	r3, r0
}
 800b50e:	0018      	movs	r0, r3
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20000ed8 	.word	0x20000ed8
 800b518:	20000edc 	.word	0x20000edc
 800b51c:	20000090 	.word	0x20000090

0800b520 <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800b526:	4b61      	ldr	r3, [pc, #388]	@ (800b6ac <AHT_Upkeep+0x18c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	0018      	movs	r0, r3
 800b52c:	f008 fe04 	bl	8014138 <TimestampIsReached>
 800b530:	0003      	movs	r3, r0
 800b532:	001a      	movs	r2, r3
 800b534:	2301      	movs	r3, #1
 800b536:	4053      	eors	r3, r2
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <AHT_Upkeep+0x24>
    return AHTState;
 800b53e:	4b5c      	ldr	r3, [pc, #368]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	e0ae      	b.n	800b6a2 <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800b544:	4b5a      	ldr	r3, [pc, #360]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b05      	cmp	r3, #5
 800b54a:	d900      	bls.n	800b54e <AHT_Upkeep+0x2e>
 800b54c:	e07d      	b.n	800b64a <AHT_Upkeep+0x12a>
 800b54e:	009a      	lsls	r2, r3, #2
 800b550:	4b58      	ldr	r3, [pc, #352]	@ (800b6b4 <AHT_Upkeep+0x194>)
 800b552:	18d3      	adds	r3, r2, r3
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800b558:	4a57      	ldr	r2, [pc, #348]	@ (800b6b8 <AHT_Upkeep+0x198>)
 800b55a:	4b58      	ldr	r3, [pc, #352]	@ (800b6bc <AHT_Upkeep+0x19c>)
 800b55c:	0019      	movs	r1, r3
 800b55e:	2003      	movs	r0, #3
 800b560:	f008 fe40 	bl	80141e4 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800b564:	f009 fbb6 	bl	8014cd4 <HAL_GetTick>
 800b568:	0003      	movs	r3, r0
 800b56a:	4a55      	ldr	r2, [pc, #340]	@ (800b6c0 <AHT_Upkeep+0x1a0>)
 800b56c:	189a      	adds	r2, r3, r2
 800b56e:	4b4f      	ldr	r3, [pc, #316]	@ (800b6ac <AHT_Upkeep+0x18c>)
 800b570:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b572:	4b54      	ldr	r3, [pc, #336]	@ (800b6c4 <AHT_Upkeep+0x1a4>)
 800b574:	781a      	ldrb	r2, [r3, #0]
 800b576:	4b54      	ldr	r3, [pc, #336]	@ (800b6c8 <AHT_Upkeep+0x1a8>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d100      	bne.n	800b580 <AHT_Upkeep+0x60>
 800b57e:	e087      	b.n	800b690 <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800b580:	4b4b      	ldr	r3, [pc, #300]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b582:	2205      	movs	r2, #5
 800b584:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b586:	e083      	b.n	800b690 <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b588:	f002 fe12 	bl	800e1b0 <getSensorLock>
 800b58c:	1e03      	subs	r3, r0, #0
 800b58e:	d000      	beq.n	800b592 <AHT_Upkeep+0x72>
 800b590:	e080      	b.n	800b694 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800b592:	2002      	movs	r0, #2
 800b594:	f002 fdf8 	bl	800e188 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800b598:	f7ff fe36 	bl	800b208 <AHT20_StartMeasurement>
 800b59c:	0003      	movs	r3, r0
 800b59e:	001a      	movs	r2, r3
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	4053      	eors	r3, r2
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00c      	beq.n	800b5c4 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800b5aa:	f7ff ff9d 	bl	800b4e8 <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800b5ae:	f009 fb91 	bl	8014cd4 <HAL_GetTick>
 800b5b2:	0003      	movs	r3, r0
 800b5b4:	33c8      	adds	r3, #200	@ 0xc8
 800b5b6:	001a      	movs	r2, r3
 800b5b8:	4b3c      	ldr	r3, [pc, #240]	@ (800b6ac <AHT_Upkeep+0x18c>)
 800b5ba:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800b5bc:	4b3c      	ldr	r3, [pc, #240]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b5be:	22ff      	movs	r2, #255	@ 0xff
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	e002      	b.n	800b5ca <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800b5c4:	4b3a      	ldr	r3, [pc, #232]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b5ca:	200a      	movs	r0, #10
 800b5cc:	f009 fb8c 	bl	8014ce8 <HAL_Delay>
    break;
 800b5d0:	e065      	b.n	800b69e <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800b5d2:	f7ff fe47 	bl	800b264 <AHT20_GetMeasurementValues>
 800b5d6:	1e03      	subs	r3, r0, #0
 800b5d8:	d05e      	beq.n	800b698 <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800b5da:	200a      	movs	r0, #10
 800b5dc:	f009 fb84 	bl	8014ce8 <HAL_Delay>
      setSensorLock(FREE);
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f002 fdd1 	bl	800e188 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800b5e6:	4b32      	ldr	r3, [pc, #200]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b5e8:	2203      	movs	r2, #3
 800b5ea:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800b5ec:	e054      	b.n	800b698 <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800b5ee:	003a      	movs	r2, r7
 800b5f0:	1d3b      	adds	r3, r7, #4
 800b5f2:	0011      	movs	r1, r2
 800b5f4:	0018      	movs	r0, r3
 800b5f6:	f7ff fea3 	bl	800b340 <AHT20_Calculate>
 800b5fa:	0003      	movs	r3, r0
 800b5fc:	001a      	movs	r2, r3
 800b5fe:	2301      	movs	r3, #1
 800b600:	4053      	eors	r3, r2
 800b602:	b2db      	uxtb	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d005      	beq.n	800b614 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800b608:	4b29      	ldr	r3, [pc, #164]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b60a:	22ff      	movs	r2, #255	@ 0xff
 800b60c:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800b60e:	4b28      	ldr	r3, [pc, #160]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	e046      	b.n	800b6a2 <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	1c11      	adds	r1, r2, #0
 800b61a:	1c18      	adds	r0, r3, #0
 800b61c:	f7f9 fa84 	bl	8004b28 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	1c11      	adds	r1, r2, #0
 800b626:	1c18      	adds	r0, r3, #0
 800b628:	f7f8 fee2 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800b62c:	4b20      	ldr	r3, [pc, #128]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b62e:	2205      	movs	r2, #5
 800b630:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800b632:	f009 fb4f 	bl	8014cd4 <HAL_GetTick>
 800b636:	0003      	movs	r3, r0
 800b638:	4a24      	ldr	r2, [pc, #144]	@ (800b6cc <AHT_Upkeep+0x1ac>)
 800b63a:	189a      	adds	r2, r3, r2
 800b63c:	4b1b      	ldr	r3, [pc, #108]	@ (800b6ac <AHT_Upkeep+0x18c>)
 800b63e:	601a      	str	r2, [r3, #0]
    break;
 800b640:	e02d      	b.n	800b69e <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b642:	4b1b      	ldr	r3, [pc, #108]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b644:	2201      	movs	r2, #1
 800b646:	701a      	strb	r2, [r3, #0]
  break;
 800b648:	e029      	b.n	800b69e <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b64a:	4b19      	ldr	r3, [pc, #100]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b64c:	2201      	movs	r2, #1
 800b64e:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800b650:	f002 fdae 	bl	800e1b0 <getSensorLock>
 800b654:	0003      	movs	r3, r0
 800b656:	2b02      	cmp	r3, #2
 800b658:	d102      	bne.n	800b660 <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800b65a:	2000      	movs	r0, #0
 800b65c:	f002 fd94 	bl	800e188 <setSensorLock>
    }
    AHTerrors++;
 800b660:	4b1b      	ldr	r3, [pc, #108]	@ (800b6d0 <AHT_Upkeep+0x1b0>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	b2da      	uxtb	r2, r3
 800b668:	4b19      	ldr	r3, [pc, #100]	@ (800b6d0 <AHT_Upkeep+0x1b0>)
 800b66a:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800b66c:	4b18      	ldr	r3, [pc, #96]	@ (800b6d0 <AHT_Upkeep+0x1b0>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b19      	cmp	r3, #25
 800b672:	d913      	bls.n	800b69c <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b674:	4a17      	ldr	r2, [pc, #92]	@ (800b6d4 <AHT_Upkeep+0x1b4>)
 800b676:	4b18      	ldr	r3, [pc, #96]	@ (800b6d8 <AHT_Upkeep+0x1b8>)
 800b678:	0019      	movs	r1, r3
 800b67a:	2001      	movs	r0, #1
 800b67c:	f008 fdb2 	bl	80141e4 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b680:	4b0b      	ldr	r3, [pc, #44]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b682:	2200      	movs	r2, #0
 800b684:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b686:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c4 <AHT_Upkeep+0x1a4>)
 800b688:	781a      	ldrb	r2, [r3, #0]
 800b68a:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c8 <AHT_Upkeep+0x1a8>)
 800b68c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b68e:	e005      	b.n	800b69c <AHT_Upkeep+0x17c>
    break;
 800b690:	46c0      	nop			@ (mov r8, r8)
 800b692:	e004      	b.n	800b69e <AHT_Upkeep+0x17e>
      break;
 800b694:	46c0      	nop			@ (mov r8, r8)
 800b696:	e002      	b.n	800b69e <AHT_Upkeep+0x17e>
    break;
 800b698:	46c0      	nop			@ (mov r8, r8)
 800b69a:	e000      	b.n	800b69e <AHT_Upkeep+0x17e>
    break;
 800b69c:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b69e:	4b04      	ldr	r3, [pc, #16]	@ (800b6b0 <AHT_Upkeep+0x190>)
 800b6a0:	781b      	ldrb	r3, [r3, #0]
}
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	b002      	add	sp, #8
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	46c0      	nop			@ (mov r8, r8)
 800b6ac:	20000ed8 	.word	0x20000ed8
 800b6b0:	2000009f 	.word	0x2000009f
 800b6b4:	0802ed30 	.word	0x0802ed30
 800b6b8:	0802ca48 	.word	0x0802ca48
 800b6bc:	0802c870 	.word	0x0802c870
 800b6c0:	000dbba0 	.word	0x000dbba0
 800b6c4:	20000e52 	.word	0x20000e52
 800b6c8:	20000ef4 	.word	0x20000ef4
 800b6cc:	0000ea60 	.word	0x0000ea60
 800b6d0:	20000ef3 	.word	0x20000ef3
 800b6d4:	0802ca70 	.word	0x0802ca70
 800b6d8:	0802c8d4 	.word	0x0802c8d4

0800b6dc <WriteMemRegister>:
static uint32_t BMP280TimeStamp;
static uint8_t offday;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6de:	b087      	sub	sp, #28
 800b6e0:	af02      	add	r7, sp, #8
 800b6e2:	0004      	movs	r4, r0
 800b6e4:	0008      	movs	r0, r1
 800b6e6:	60ba      	str	r2, [r7, #8]
 800b6e8:	0019      	movs	r1, r3
 800b6ea:	260e      	movs	r6, #14
 800b6ec:	19bb      	adds	r3, r7, r6
 800b6ee:	1c22      	adds	r2, r4, #0
 800b6f0:	801a      	strh	r2, [r3, #0]
 800b6f2:	230c      	movs	r3, #12
 800b6f4:	18fb      	adds	r3, r7, r3
 800b6f6:	1c02      	adds	r2, r0, #0
 800b6f8:	801a      	strh	r2, [r3, #0]
 800b6fa:	1dbb      	adds	r3, r7, #6
 800b6fc:	1c0a      	adds	r2, r1, #0
 800b6fe:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b700:	4b0c      	ldr	r3, [pc, #48]	@ (800b734 <WriteMemRegister+0x58>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d010      	beq.n	800b72a <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b708:	4b0a      	ldr	r3, [pc, #40]	@ (800b734 <WriteMemRegister+0x58>)
 800b70a:	681c      	ldr	r4, [r3, #0]
 800b70c:	4b0a      	ldr	r3, [pc, #40]	@ (800b738 <WriteMemRegister+0x5c>)
 800b70e:	7818      	ldrb	r0, [r3, #0]
 800b710:	68bd      	ldr	r5, [r7, #8]
 800b712:	230c      	movs	r3, #12
 800b714:	18fb      	adds	r3, r7, r3
 800b716:	881a      	ldrh	r2, [r3, #0]
 800b718:	19bb      	adds	r3, r7, r6
 800b71a:	8819      	ldrh	r1, [r3, #0]
 800b71c:	1dbb      	adds	r3, r7, #6
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	002b      	movs	r3, r5
 800b724:	47a0      	blx	r4
 800b726:	0003      	movs	r3, r0
 800b728:	e000      	b.n	800b72c <WriteMemRegister+0x50>
  }
  return false;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	0018      	movs	r0, r3
 800b72e:	46bd      	mov	sp, r7
 800b730:	b005      	add	sp, #20
 800b732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b734:	20000ef8 	.word	0x20000ef8
 800b738:	200000a0 	.word	0x200000a0

0800b73c <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b73e:	b087      	sub	sp, #28
 800b740:	af02      	add	r7, sp, #8
 800b742:	0004      	movs	r4, r0
 800b744:	0008      	movs	r0, r1
 800b746:	60ba      	str	r2, [r7, #8]
 800b748:	0019      	movs	r1, r3
 800b74a:	260e      	movs	r6, #14
 800b74c:	19bb      	adds	r3, r7, r6
 800b74e:	1c22      	adds	r2, r4, #0
 800b750:	801a      	strh	r2, [r3, #0]
 800b752:	230c      	movs	r3, #12
 800b754:	18fb      	adds	r3, r7, r3
 800b756:	1c02      	adds	r2, r0, #0
 800b758:	801a      	strh	r2, [r3, #0]
 800b75a:	1dbb      	adds	r3, r7, #6
 800b75c:	1c0a      	adds	r2, r1, #0
 800b75e:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b760:	4b0c      	ldr	r3, [pc, #48]	@ (800b794 <ReadMemRegister+0x58>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d010      	beq.n	800b78a <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b768:	4b0a      	ldr	r3, [pc, #40]	@ (800b794 <ReadMemRegister+0x58>)
 800b76a:	681c      	ldr	r4, [r3, #0]
 800b76c:	4b0a      	ldr	r3, [pc, #40]	@ (800b798 <ReadMemRegister+0x5c>)
 800b76e:	7818      	ldrb	r0, [r3, #0]
 800b770:	68bd      	ldr	r5, [r7, #8]
 800b772:	230c      	movs	r3, #12
 800b774:	18fb      	adds	r3, r7, r3
 800b776:	881a      	ldrh	r2, [r3, #0]
 800b778:	19bb      	adds	r3, r7, r6
 800b77a:	8819      	ldrh	r1, [r3, #0]
 800b77c:	1dbb      	adds	r3, r7, #6
 800b77e:	881b      	ldrh	r3, [r3, #0]
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	002b      	movs	r3, r5
 800b784:	47a0      	blx	r4
 800b786:	0003      	movs	r3, r0
 800b788:	e000      	b.n	800b78c <ReadMemRegister+0x50>
  }
  return false;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	0018      	movs	r0, r3
 800b78e:	46bd      	mov	sp, r7
 800b790:	b005      	add	sp, #20
 800b792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b794:	20000efc 	.word	0x20000efc
 800b798:	200000a0 	.word	0x200000a0

0800b79c <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b7a4:	f009 fa96 	bl	8014cd4 <HAL_GetTick>
 800b7a8:	0002      	movs	r2, r0
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	18d2      	adds	r2, r2, r3
 800b7ae:	4b03      	ldr	r3, [pc, #12]	@ (800b7bc <setBMP280TimeStamp+0x20>)
 800b7b0:	601a      	str	r2, [r3, #0]
}
 800b7b2:	46c0      	nop			@ (mov r8, r8)
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	b002      	add	sp, #8
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	46c0      	nop			@ (mov r8, r8)
 800b7bc:	20000f28 	.word	0x20000f28

0800b7c0 <ResetBMP280samplecounter>:

void ResetBMP280samplecounter() {
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	af00      	add	r7, sp, #0
  bmp280samplecounter = 0;
 800b7c4:	4b02      	ldr	r3, [pc, #8]	@ (800b7d0 <ResetBMP280samplecounter+0x10>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	701a      	strb	r2, [r3, #0]
}
 800b7ca:	46c0      	nop			@ (mov r8, r8)
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	20000f18 	.word	0x20000f18

0800b7d4 <BMP280_reset>:


static void BMP280_reset() {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b7da:	1dfb      	adds	r3, r7, #7
 800b7dc:	22b6      	movs	r2, #182	@ 0xb6
 800b7de:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b7e0:	1dfa      	adds	r2, r7, #7
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	20e0      	movs	r0, #224	@ 0xe0
 800b7e8:	f7ff ff78 	bl	800b6dc <WriteMemRegister>
  Info("BMP280 has been reset");
 800b7ec:	4a06      	ldr	r2, [pc, #24]	@ (800b808 <BMP280_reset+0x34>)
 800b7ee:	4b07      	ldr	r3, [pc, #28]	@ (800b80c <BMP280_reset+0x38>)
 800b7f0:	0019      	movs	r1, r3
 800b7f2:	2002      	movs	r0, #2
 800b7f4:	f008 fcf6 	bl	80141e4 <CreateLine>
  HAL_Delay(100);
 800b7f8:	2064      	movs	r0, #100	@ 0x64
 800b7fa:	f009 fa75 	bl	8014ce8 <HAL_Delay>
}
 800b7fe:	46c0      	nop			@ (mov r8, r8)
 800b800:	46bd      	mov	sp, r7
 800b802:	b002      	add	sp, #8
 800b804:	bd80      	pop	{r7, pc}
 800b806:	46c0      	nop			@ (mov r8, r8)
 800b808:	0802cab4 	.word	0x0802cab4
 800b80c:	0802cacc 	.word	0x0802cacc

0800b810 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b810:	b590      	push	{r4, r7, lr}
 800b812:	b083      	sub	sp, #12
 800b814:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800b816:	4aae      	ldr	r2, [pc, #696]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b818:	231a      	movs	r3, #26
 800b81a:	2101      	movs	r1, #1
 800b81c:	2088      	movs	r0, #136	@ 0x88
 800b81e:	f7ff ff8d 	bl	800b73c <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800b822:	4bab      	ldr	r3, [pc, #684]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b824:	785b      	ldrb	r3, [r3, #1]
 800b826:	021b      	lsls	r3, r3, #8
 800b828:	b29b      	uxth	r3, r3
 800b82a:	4aa9      	ldr	r2, [pc, #676]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b82c:	7812      	ldrb	r2, [r2, #0]
 800b82e:	189b      	adds	r3, r3, r2
 800b830:	b29a      	uxth	r2, r3
 800b832:	4ba8      	ldr	r3, [pc, #672]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b834:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800b836:	4ba6      	ldr	r3, [pc, #664]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b838:	78db      	ldrb	r3, [r3, #3]
 800b83a:	021b      	lsls	r3, r3, #8
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	4aa4      	ldr	r2, [pc, #656]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b840:	7892      	ldrb	r2, [r2, #2]
 800b842:	189b      	adds	r3, r3, r2
 800b844:	b29b      	uxth	r3, r3
 800b846:	b21a      	sxth	r2, r3
 800b848:	4ba2      	ldr	r3, [pc, #648]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b84a:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800b84c:	4ba0      	ldr	r3, [pc, #640]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b84e:	795b      	ldrb	r3, [r3, #5]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	b29b      	uxth	r3, r3
 800b854:	4a9e      	ldr	r2, [pc, #632]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b856:	7912      	ldrb	r2, [r2, #4]
 800b858:	189b      	adds	r3, r3, r2
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	b21a      	sxth	r2, r3
 800b85e:	4b9d      	ldr	r3, [pc, #628]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b860:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800b862:	4b9b      	ldr	r3, [pc, #620]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b864:	79db      	ldrb	r3, [r3, #7]
 800b866:	021b      	lsls	r3, r3, #8
 800b868:	b29b      	uxth	r3, r3
 800b86a:	4a99      	ldr	r2, [pc, #612]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b86c:	7992      	ldrb	r2, [r2, #6]
 800b86e:	189b      	adds	r3, r3, r2
 800b870:	b29a      	uxth	r2, r3
 800b872:	4b98      	ldr	r3, [pc, #608]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b874:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800b876:	4b96      	ldr	r3, [pc, #600]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b878:	7a5b      	ldrb	r3, [r3, #9]
 800b87a:	021b      	lsls	r3, r3, #8
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	4a94      	ldr	r2, [pc, #592]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b880:	7a12      	ldrb	r2, [r2, #8]
 800b882:	189b      	adds	r3, r3, r2
 800b884:	b29b      	uxth	r3, r3
 800b886:	b21a      	sxth	r2, r3
 800b888:	4b92      	ldr	r3, [pc, #584]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b88a:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800b88c:	4b90      	ldr	r3, [pc, #576]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b88e:	7adb      	ldrb	r3, [r3, #11]
 800b890:	021b      	lsls	r3, r3, #8
 800b892:	b29b      	uxth	r3, r3
 800b894:	4a8e      	ldr	r2, [pc, #568]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b896:	7a92      	ldrb	r2, [r2, #10]
 800b898:	189b      	adds	r3, r3, r2
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	b21a      	sxth	r2, r3
 800b89e:	4b8d      	ldr	r3, [pc, #564]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b8a0:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800b8a2:	4b8b      	ldr	r3, [pc, #556]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b8a4:	7b5b      	ldrb	r3, [r3, #13]
 800b8a6:	021b      	lsls	r3, r3, #8
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	4a89      	ldr	r2, [pc, #548]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b8ac:	7b12      	ldrb	r2, [r2, #12]
 800b8ae:	189b      	adds	r3, r3, r2
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	b21a      	sxth	r2, r3
 800b8b4:	4b87      	ldr	r3, [pc, #540]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b8b6:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800b8b8:	4b85      	ldr	r3, [pc, #532]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b8ba:	7bdb      	ldrb	r3, [r3, #15]
 800b8bc:	021b      	lsls	r3, r3, #8
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	4a83      	ldr	r2, [pc, #524]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b8c2:	7b92      	ldrb	r2, [r2, #14]
 800b8c4:	189b      	adds	r3, r3, r2
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	b21a      	sxth	r2, r3
 800b8ca:	4b82      	ldr	r3, [pc, #520]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b8cc:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800b8ce:	4b80      	ldr	r3, [pc, #512]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b8d0:	7c5b      	ldrb	r3, [r3, #17]
 800b8d2:	021b      	lsls	r3, r3, #8
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	4a7e      	ldr	r2, [pc, #504]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b8d8:	7c12      	ldrb	r2, [r2, #16]
 800b8da:	189b      	adds	r3, r3, r2
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	b21a      	sxth	r2, r3
 800b8e0:	4b7c      	ldr	r3, [pc, #496]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b8e2:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800b8e4:	4b7a      	ldr	r3, [pc, #488]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b8e6:	7cdb      	ldrb	r3, [r3, #19]
 800b8e8:	021b      	lsls	r3, r3, #8
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	4a78      	ldr	r2, [pc, #480]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b8ee:	7c92      	ldrb	r2, [r2, #18]
 800b8f0:	189b      	adds	r3, r3, r2
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	b21a      	sxth	r2, r3
 800b8f6:	4b77      	ldr	r3, [pc, #476]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b8f8:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800b8fa:	4b75      	ldr	r3, [pc, #468]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b8fc:	7d5b      	ldrb	r3, [r3, #21]
 800b8fe:	021b      	lsls	r3, r3, #8
 800b900:	b29b      	uxth	r3, r3
 800b902:	4a73      	ldr	r2, [pc, #460]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b904:	7d12      	ldrb	r2, [r2, #20]
 800b906:	189b      	adds	r3, r3, r2
 800b908:	b29b      	uxth	r3, r3
 800b90a:	b21a      	sxth	r2, r3
 800b90c:	4b71      	ldr	r3, [pc, #452]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b90e:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800b910:	4b6f      	ldr	r3, [pc, #444]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b912:	7ddb      	ldrb	r3, [r3, #23]
 800b914:	021b      	lsls	r3, r3, #8
 800b916:	b29b      	uxth	r3, r3
 800b918:	4a6d      	ldr	r2, [pc, #436]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b91a:	7d92      	ldrb	r2, [r2, #22]
 800b91c:	189b      	adds	r3, r3, r2
 800b91e:	b29b      	uxth	r3, r3
 800b920:	b21a      	sxth	r2, r3
 800b922:	4b6c      	ldr	r3, [pc, #432]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b924:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800b926:	4a6c      	ldr	r2, [pc, #432]	@ (800bad8 <BMP280_get_calibration+0x2c8>)
 800b928:	4b6c      	ldr	r3, [pc, #432]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800b92a:	0019      	movs	r1, r3
 800b92c:	2003      	movs	r0, #3
 800b92e:	f008 fc59 	bl	80141e4 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800b932:	4b67      	ldr	r3, [pc, #412]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	001c      	movs	r4, r3
 800b938:	4b65      	ldr	r3, [pc, #404]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	0018      	movs	r0, r3
 800b93e:	4b65      	ldr	r3, [pc, #404]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	4a67      	ldr	r2, [pc, #412]	@ (800bae0 <BMP280_get_calibration+0x2d0>)
 800b944:	4965      	ldr	r1, [pc, #404]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	9000      	str	r0, [sp, #0]
 800b94a:	0023      	movs	r3, r4
 800b94c:	2003      	movs	r0, #3
 800b94e:	f008 fc49 	bl	80141e4 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800b952:	4b5f      	ldr	r3, [pc, #380]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b954:	78db      	ldrb	r3, [r3, #3]
 800b956:	001c      	movs	r4, r3
 800b958:	4b5d      	ldr	r3, [pc, #372]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b95a:	789b      	ldrb	r3, [r3, #2]
 800b95c:	0018      	movs	r0, r3
 800b95e:	4b5d      	ldr	r3, [pc, #372]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b960:	2202      	movs	r2, #2
 800b962:	5e9b      	ldrsh	r3, [r3, r2]
 800b964:	4a5f      	ldr	r2, [pc, #380]	@ (800bae4 <BMP280_get_calibration+0x2d4>)
 800b966:	495d      	ldr	r1, [pc, #372]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	9000      	str	r0, [sp, #0]
 800b96c:	0023      	movs	r3, r4
 800b96e:	2003      	movs	r0, #3
 800b970:	f008 fc38 	bl	80141e4 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800b974:	4b56      	ldr	r3, [pc, #344]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b976:	795b      	ldrb	r3, [r3, #5]
 800b978:	001c      	movs	r4, r3
 800b97a:	4b55      	ldr	r3, [pc, #340]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b97c:	791b      	ldrb	r3, [r3, #4]
 800b97e:	0018      	movs	r0, r3
 800b980:	4b54      	ldr	r3, [pc, #336]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b982:	2204      	movs	r2, #4
 800b984:	5e9b      	ldrsh	r3, [r3, r2]
 800b986:	4a58      	ldr	r2, [pc, #352]	@ (800bae8 <BMP280_get_calibration+0x2d8>)
 800b988:	4954      	ldr	r1, [pc, #336]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800b98a:	9301      	str	r3, [sp, #4]
 800b98c:	9000      	str	r0, [sp, #0]
 800b98e:	0023      	movs	r3, r4
 800b990:	2003      	movs	r0, #3
 800b992:	f008 fc27 	bl	80141e4 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800b996:	4b4e      	ldr	r3, [pc, #312]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b998:	79db      	ldrb	r3, [r3, #7]
 800b99a:	001c      	movs	r4, r3
 800b99c:	4b4c      	ldr	r3, [pc, #304]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b99e:	799b      	ldrb	r3, [r3, #6]
 800b9a0:	0018      	movs	r0, r3
 800b9a2:	4b4c      	ldr	r3, [pc, #304]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b9a4:	88db      	ldrh	r3, [r3, #6]
 800b9a6:	4a51      	ldr	r2, [pc, #324]	@ (800baec <BMP280_get_calibration+0x2dc>)
 800b9a8:	494c      	ldr	r1, [pc, #304]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	9000      	str	r0, [sp, #0]
 800b9ae:	0023      	movs	r3, r4
 800b9b0:	2003      	movs	r0, #3
 800b9b2:	f008 fc17 	bl	80141e4 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800b9b6:	4b46      	ldr	r3, [pc, #280]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b9b8:	7a5b      	ldrb	r3, [r3, #9]
 800b9ba:	001c      	movs	r4, r3
 800b9bc:	4b44      	ldr	r3, [pc, #272]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b9be:	7a1b      	ldrb	r3, [r3, #8]
 800b9c0:	0018      	movs	r0, r3
 800b9c2:	4b44      	ldr	r3, [pc, #272]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b9c4:	2208      	movs	r2, #8
 800b9c6:	5e9b      	ldrsh	r3, [r3, r2]
 800b9c8:	4a49      	ldr	r2, [pc, #292]	@ (800baf0 <BMP280_get_calibration+0x2e0>)
 800b9ca:	4944      	ldr	r1, [pc, #272]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	9000      	str	r0, [sp, #0]
 800b9d0:	0023      	movs	r3, r4
 800b9d2:	2003      	movs	r0, #3
 800b9d4:	f008 fc06 	bl	80141e4 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800b9d8:	4b3d      	ldr	r3, [pc, #244]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b9da:	7adb      	ldrb	r3, [r3, #11]
 800b9dc:	001c      	movs	r4, r3
 800b9de:	4b3c      	ldr	r3, [pc, #240]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b9e0:	7a9b      	ldrb	r3, [r3, #10]
 800b9e2:	0018      	movs	r0, r3
 800b9e4:	4b3b      	ldr	r3, [pc, #236]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800b9e6:	220a      	movs	r2, #10
 800b9e8:	5e9b      	ldrsh	r3, [r3, r2]
 800b9ea:	4a42      	ldr	r2, [pc, #264]	@ (800baf4 <BMP280_get_calibration+0x2e4>)
 800b9ec:	493b      	ldr	r1, [pc, #236]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	9000      	str	r0, [sp, #0]
 800b9f2:	0023      	movs	r3, r4
 800b9f4:	2003      	movs	r0, #3
 800b9f6:	f008 fbf5 	bl	80141e4 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800b9fa:	4b35      	ldr	r3, [pc, #212]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800b9fc:	7b5b      	ldrb	r3, [r3, #13]
 800b9fe:	001c      	movs	r4, r3
 800ba00:	4b33      	ldr	r3, [pc, #204]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800ba02:	7b1b      	ldrb	r3, [r3, #12]
 800ba04:	0018      	movs	r0, r3
 800ba06:	4b33      	ldr	r3, [pc, #204]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800ba08:	220c      	movs	r2, #12
 800ba0a:	5e9b      	ldrsh	r3, [r3, r2]
 800ba0c:	4a3a      	ldr	r2, [pc, #232]	@ (800baf8 <BMP280_get_calibration+0x2e8>)
 800ba0e:	4933      	ldr	r1, [pc, #204]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800ba10:	9301      	str	r3, [sp, #4]
 800ba12:	9000      	str	r0, [sp, #0]
 800ba14:	0023      	movs	r3, r4
 800ba16:	2003      	movs	r0, #3
 800ba18:	f008 fbe4 	bl	80141e4 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800ba1c:	4b2c      	ldr	r3, [pc, #176]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800ba1e:	7bdb      	ldrb	r3, [r3, #15]
 800ba20:	001c      	movs	r4, r3
 800ba22:	4b2b      	ldr	r3, [pc, #172]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800ba24:	7b9b      	ldrb	r3, [r3, #14]
 800ba26:	0018      	movs	r0, r3
 800ba28:	4b2a      	ldr	r3, [pc, #168]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800ba2a:	220e      	movs	r2, #14
 800ba2c:	5e9b      	ldrsh	r3, [r3, r2]
 800ba2e:	4a33      	ldr	r2, [pc, #204]	@ (800bafc <BMP280_get_calibration+0x2ec>)
 800ba30:	492a      	ldr	r1, [pc, #168]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800ba32:	9301      	str	r3, [sp, #4]
 800ba34:	9000      	str	r0, [sp, #0]
 800ba36:	0023      	movs	r3, r4
 800ba38:	2003      	movs	r0, #3
 800ba3a:	f008 fbd3 	bl	80141e4 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800ba3e:	4b24      	ldr	r3, [pc, #144]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800ba40:	7c5b      	ldrb	r3, [r3, #17]
 800ba42:	001c      	movs	r4, r3
 800ba44:	4b22      	ldr	r3, [pc, #136]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800ba46:	7c1b      	ldrb	r3, [r3, #16]
 800ba48:	0018      	movs	r0, r3
 800ba4a:	4b22      	ldr	r3, [pc, #136]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800ba4c:	2210      	movs	r2, #16
 800ba4e:	5e9b      	ldrsh	r3, [r3, r2]
 800ba50:	4a2b      	ldr	r2, [pc, #172]	@ (800bb00 <BMP280_get_calibration+0x2f0>)
 800ba52:	4922      	ldr	r1, [pc, #136]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	9000      	str	r0, [sp, #0]
 800ba58:	0023      	movs	r3, r4
 800ba5a:	2003      	movs	r0, #3
 800ba5c:	f008 fbc2 	bl	80141e4 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800ba60:	4b1b      	ldr	r3, [pc, #108]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800ba62:	7cdb      	ldrb	r3, [r3, #19]
 800ba64:	001c      	movs	r4, r3
 800ba66:	4b1a      	ldr	r3, [pc, #104]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800ba68:	7c9b      	ldrb	r3, [r3, #18]
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	4b19      	ldr	r3, [pc, #100]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800ba6e:	2212      	movs	r2, #18
 800ba70:	5e9b      	ldrsh	r3, [r3, r2]
 800ba72:	4a24      	ldr	r2, [pc, #144]	@ (800bb04 <BMP280_get_calibration+0x2f4>)
 800ba74:	4919      	ldr	r1, [pc, #100]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800ba76:	9301      	str	r3, [sp, #4]
 800ba78:	9000      	str	r0, [sp, #0]
 800ba7a:	0023      	movs	r3, r4
 800ba7c:	2003      	movs	r0, #3
 800ba7e:	f008 fbb1 	bl	80141e4 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800ba82:	4b13      	ldr	r3, [pc, #76]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800ba84:	7d5b      	ldrb	r3, [r3, #21]
 800ba86:	001c      	movs	r4, r3
 800ba88:	4b11      	ldr	r3, [pc, #68]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800ba8a:	7d1b      	ldrb	r3, [r3, #20]
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	4b11      	ldr	r3, [pc, #68]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800ba90:	2214      	movs	r2, #20
 800ba92:	5e9b      	ldrsh	r3, [r3, r2]
 800ba94:	4a1c      	ldr	r2, [pc, #112]	@ (800bb08 <BMP280_get_calibration+0x2f8>)
 800ba96:	4911      	ldr	r1, [pc, #68]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800ba98:	9301      	str	r3, [sp, #4]
 800ba9a:	9000      	str	r0, [sp, #0]
 800ba9c:	0023      	movs	r3, r4
 800ba9e:	2003      	movs	r0, #3
 800baa0:	f008 fba0 	bl	80141e4 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800baa4:	4b0a      	ldr	r3, [pc, #40]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800baa6:	7ddb      	ldrb	r3, [r3, #23]
 800baa8:	001c      	movs	r4, r3
 800baaa:	4b09      	ldr	r3, [pc, #36]	@ (800bad0 <BMP280_get_calibration+0x2c0>)
 800baac:	7d9b      	ldrb	r3, [r3, #22]
 800baae:	0018      	movs	r0, r3
 800bab0:	4b08      	ldr	r3, [pc, #32]	@ (800bad4 <BMP280_get_calibration+0x2c4>)
 800bab2:	2216      	movs	r2, #22
 800bab4:	5e9b      	ldrsh	r3, [r3, r2]
 800bab6:	4a15      	ldr	r2, [pc, #84]	@ (800bb0c <BMP280_get_calibration+0x2fc>)
 800bab8:	4908      	ldr	r1, [pc, #32]	@ (800badc <BMP280_get_calibration+0x2cc>)
 800baba:	9301      	str	r3, [sp, #4]
 800babc:	9000      	str	r0, [sp, #0]
 800babe:	0023      	movs	r3, r4
 800bac0:	2003      	movs	r0, #3
 800bac2:	f008 fb8f 	bl	80141e4 <CreateLine>
}
 800bac6:	46c0      	nop			@ (mov r8, r8)
 800bac8:	46bd      	mov	sp, r7
 800baca:	b001      	add	sp, #4
 800bacc:	bd90      	pop	{r4, r7, pc}
 800bace:	46c0      	nop			@ (mov r8, r8)
 800bad0:	20000f30 	.word	0x20000f30
 800bad4:	20000f00 	.word	0x20000f00
 800bad8:	0802cad0 	.word	0x0802cad0
 800badc:	0802caec 	.word	0x0802caec
 800bae0:	0802caf0 	.word	0x0802caf0
 800bae4:	0802cb24 	.word	0x0802cb24
 800bae8:	0802cb58 	.word	0x0802cb58
 800baec:	0802cb8c 	.word	0x0802cb8c
 800baf0:	0802cbc0 	.word	0x0802cbc0
 800baf4:	0802cbf4 	.word	0x0802cbf4
 800baf8:	0802cc28 	.word	0x0802cc28
 800bafc:	0802cc5c 	.word	0x0802cc5c
 800bb00:	0802cc90 	.word	0x0802cc90
 800bb04:	0802ccc4 	.word	0x0802ccc4
 800bb08:	0802ccf8 	.word	0x0802ccf8
 800bb0c:	0802cd2c 	.word	0x0802cd2c

0800bb10 <BMP280_probe>:

static bool BMP280_probe() {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800bb16:	4b34      	ldr	r3, [pc, #208]	@ (800bbe8 <BMP280_probe+0xd8>)
 800bb18:	2276      	movs	r2, #118	@ 0x76
 800bb1a:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800bb1c:	1dba      	adds	r2, r7, #6
 800bb1e:	2301      	movs	r3, #1
 800bb20:	2101      	movs	r1, #1
 800bb22:	20d0      	movs	r0, #208	@ 0xd0
 800bb24:	f7ff fe0a 	bl	800b73c <ReadMemRegister>
 800bb28:	0003      	movs	r3, r0
 800bb2a:	001a      	movs	r2, r3
 800bb2c:	1dfb      	adds	r3, r7, #7
 800bb2e:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800bb30:	1dfb      	adds	r3, r7, #7
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	b25b      	sxtb	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00a      	beq.n	800bb50 <BMP280_probe+0x40>
 800bb3a:	1dbb      	adds	r3, r7, #6
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d006      	beq.n	800bb50 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800bb42:	1dbb      	adds	r3, r7, #6
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	4a29      	ldr	r2, [pc, #164]	@ (800bbec <BMP280_probe+0xdc>)
 800bb48:	4929      	ldr	r1, [pc, #164]	@ (800bbf0 <BMP280_probe+0xe0>)
 800bb4a:	2003      	movs	r0, #3
 800bb4c:	f008 fb4a 	bl	80141e4 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800bb50:	1dbb      	adds	r3, r7, #6
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b58      	cmp	r3, #88	@ 0x58
 800bb56:	d01f      	beq.n	800bb98 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800bb58:	4b23      	ldr	r3, [pc, #140]	@ (800bbe8 <BMP280_probe+0xd8>)
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	4b21      	ldr	r3, [pc, #132]	@ (800bbe8 <BMP280_probe+0xd8>)
 800bb62:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800bb64:	1dba      	adds	r2, r7, #6
 800bb66:	2301      	movs	r3, #1
 800bb68:	2101      	movs	r1, #1
 800bb6a:	20d0      	movs	r0, #208	@ 0xd0
 800bb6c:	f7ff fde6 	bl	800b73c <ReadMemRegister>
 800bb70:	0003      	movs	r3, r0
 800bb72:	001a      	movs	r2, r3
 800bb74:	1dfb      	adds	r3, r7, #7
 800bb76:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800bb78:	1dfb      	adds	r3, r7, #7
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	b25b      	sxtb	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <BMP280_probe+0x88>
 800bb82:	1dbb      	adds	r3, r7, #6
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d006      	beq.n	800bb98 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800bb8a:	1dbb      	adds	r3, r7, #6
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	4a17      	ldr	r2, [pc, #92]	@ (800bbec <BMP280_probe+0xdc>)
 800bb90:	4917      	ldr	r1, [pc, #92]	@ (800bbf0 <BMP280_probe+0xe0>)
 800bb92:	2003      	movs	r0, #3
 800bb94:	f008 fb26 	bl	80141e4 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800bb98:	1dbb      	adds	r3, r7, #6
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b58      	cmp	r3, #88	@ 0x58
 800bb9e:	d110      	bne.n	800bbc2 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800bba0:	1dbb      	adds	r3, r7, #6
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	0018      	movs	r0, r3
 800bba6:	4b10      	ldr	r3, [pc, #64]	@ (800bbe8 <BMP280_probe+0xd8>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	4a12      	ldr	r2, [pc, #72]	@ (800bbf4 <BMP280_probe+0xe4>)
 800bbac:	4912      	ldr	r1, [pc, #72]	@ (800bbf8 <BMP280_probe+0xe8>)
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	0003      	movs	r3, r0
 800bbb2:	2002      	movs	r0, #2
 800bbb4:	f008 fb16 	bl	80141e4 <CreateLine>
      BMP280_reset(); // get an initial state
 800bbb8:	f7ff fe0c 	bl	800b7d4 <BMP280_reset>
      BMP280_get_calibration();
 800bbbc:	f7ff fe28 	bl	800b810 <BMP280_get_calibration>
 800bbc0:	e008      	b.n	800bbd4 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800bbc2:	4b09      	ldr	r3, [pc, #36]	@ (800bbe8 <BMP280_probe+0xd8>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800bbc8:	4a0c      	ldr	r2, [pc, #48]	@ (800bbfc <BMP280_probe+0xec>)
 800bbca:	4b0d      	ldr	r3, [pc, #52]	@ (800bc00 <BMP280_probe+0xf0>)
 800bbcc:	0019      	movs	r1, r3
 800bbce:	2001      	movs	r0, #1
 800bbd0:	f008 fb08 	bl	80141e4 <CreateLine>
    }
    return bmp280I2Caddr;
 800bbd4:	4b04      	ldr	r3, [pc, #16]	@ (800bbe8 <BMP280_probe+0xd8>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	1e5a      	subs	r2, r3, #1
 800bbda:	4193      	sbcs	r3, r2
 800bbdc:	b2db      	uxtb	r3, r3
}
 800bbde:	0018      	movs	r0, r3
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	b002      	add	sp, #8
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	46c0      	nop			@ (mov r8, r8)
 800bbe8:	200000a0 	.word	0x200000a0
 800bbec:	0802cd60 	.word	0x0802cd60
 800bbf0:	0802caec 	.word	0x0802caec
 800bbf4:	0802cd90 	.word	0x0802cd90
 800bbf8:	0802cacc 	.word	0x0802cacc
 800bbfc:	0802cdc8 	.word	0x0802cdc8
 800bc00:	0802cddc 	.word	0x0802cddc

0800bc04 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800bc08:	f7ff ff82 	bl	800bb10 <BMP280_probe>
 800bc0c:	0003      	movs	r3, r0
}
 800bc0e:	0018      	movs	r0, r3
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800bc1e:	4b05      	ldr	r3, [pc, #20]	@ (800bc34 <BMP_Init+0x20>)
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800bc24:	4b04      	ldr	r3, [pc, #16]	@ (800bc38 <BMP_Init+0x24>)
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	601a      	str	r2, [r3, #0]
}
 800bc2a:	46c0      	nop			@ (mov r8, r8)
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	b002      	add	sp, #8
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	46c0      	nop			@ (mov r8, r8)
 800bc34:	20000efc 	.word	0x20000efc
 800bc38:	20000ef8 	.word	0x20000ef8

0800bc3c <BMP280_set_config>:


static bool BMP280_set_config() {
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800bc42:	1dbb      	adds	r3, r7, #6
 800bc44:	228c      	movs	r2, #140	@ 0x8c
 800bc46:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800bc48:	1dba      	adds	r2, r7, #6
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	20f5      	movs	r0, #245	@ 0xf5
 800bc50:	f7ff fd44 	bl	800b6dc <WriteMemRegister>
 800bc54:	0003      	movs	r3, r0
 800bc56:	001a      	movs	r2, r3
 800bc58:	1dfb      	adds	r3, r7, #7
 800bc5a:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800bc5c:	f009 f83a 	bl	8014cd4 <HAL_GetTick>
 800bc60:	0003      	movs	r3, r0
 800bc62:	330a      	adds	r3, #10
 800bc64:	001a      	movs	r2, r3
 800bc66:	4b06      	ldr	r3, [pc, #24]	@ (800bc80 <BMP280_set_config+0x44>)
 800bc68:	601a      	str	r2, [r3, #0]
  return rslt;
 800bc6a:	1dfb      	adds	r3, r7, #7
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	b25b      	sxtb	r3, r3
 800bc70:	1e5a      	subs	r2, r3, #1
 800bc72:	4193      	sbcs	r3, r2
 800bc74:	b2db      	uxtb	r3, r3
}
 800bc76:	0018      	movs	r0, r3
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	b002      	add	sp, #8
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	46c0      	nop			@ (mov r8, r8)
 800bc80:	20000f28 	.word	0x20000f28

0800bc84 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800bc8a:	1dbb      	adds	r3, r7, #6
 800bc8c:	2208      	movs	r2, #8
 800bc8e:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800bc90:	4b22      	ldr	r3, [pc, #136]	@ (800bd1c <BMP280_set_mode+0x98>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	224c      	movs	r2, #76	@ 0x4c
 800bc96:	4313      	orrs	r3, r2
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	1d7b      	adds	r3, r7, #5
 800bc9c:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800bc9e:	1d7a      	adds	r2, r7, #5
 800bca0:	2301      	movs	r3, #1
 800bca2:	2101      	movs	r1, #1
 800bca4:	20f4      	movs	r0, #244	@ 0xf4
 800bca6:	f7ff fd19 	bl	800b6dc <WriteMemRegister>
 800bcaa:	0003      	movs	r3, r0
 800bcac:	001a      	movs	r2, r3
 800bcae:	1dfb      	adds	r3, r7, #7
 800bcb0:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800bcb2:	f009 f80f 	bl	8014cd4 <HAL_GetTick>
 800bcb6:	0003      	movs	r3, r0
 800bcb8:	22fa      	movs	r2, #250	@ 0xfa
 800bcba:	0092      	lsls	r2, r2, #2
 800bcbc:	189a      	adds	r2, r3, r2
 800bcbe:	4b18      	ldr	r3, [pc, #96]	@ (800bd20 <BMP280_set_mode+0x9c>)
 800bcc0:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800bcc2:	e016      	b.n	800bcf2 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800bcc4:	1dba      	adds	r2, r7, #6
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	2101      	movs	r1, #1
 800bcca:	20f3      	movs	r0, #243	@ 0xf3
 800bccc:	f7ff fd36 	bl	800b73c <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800bcd0:	4b13      	ldr	r3, [pc, #76]	@ (800bd20 <BMP280_set_mode+0x9c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	0018      	movs	r0, r3
 800bcd6:	f008 fa2f 	bl	8014138 <TimestampIsReached>
 800bcda:	1e03      	subs	r3, r0, #0
 800bcdc:	d006      	beq.n	800bcec <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800bcde:	4a11      	ldr	r2, [pc, #68]	@ (800bd24 <BMP280_set_mode+0xa0>)
 800bce0:	4b11      	ldr	r3, [pc, #68]	@ (800bd28 <BMP280_set_mode+0xa4>)
 800bce2:	0019      	movs	r1, r3
 800bce4:	2001      	movs	r0, #1
 800bce6:	f008 fa7d 	bl	80141e4 <CreateLine>
      break;
 800bcea:	e008      	b.n	800bcfe <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800bcec:	2001      	movs	r0, #1
 800bcee:	f008 fffb 	bl	8014ce8 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800bcf2:	1dbb      	adds	r3, r7, #6
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	001a      	movs	r2, r3
 800bcf8:	2308      	movs	r3, #8
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	d1e2      	bne.n	800bcc4 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800bcfe:	f008 ffe9 	bl	8014cd4 <HAL_GetTick>
 800bd02:	0002      	movs	r2, r0
 800bd04:	4b06      	ldr	r3, [pc, #24]	@ (800bd20 <BMP280_set_mode+0x9c>)
 800bd06:	601a      	str	r2, [r3, #0]
  return rslt;
 800bd08:	1dfb      	adds	r3, r7, #7
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	b25b      	sxtb	r3, r3
 800bd0e:	1e5a      	subs	r2, r3, #1
 800bd10:	4193      	sbcs	r3, r2
 800bd12:	b2db      	uxtb	r3, r3
}
 800bd14:	0018      	movs	r0, r3
 800bd16:	46bd      	mov	sp, r7
 800bd18:	b002      	add	sp, #8
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	200000a1 	.word	0x200000a1
 800bd20:	20000f28 	.word	0x20000f28
 800bd24:	0802cde0 	.word	0x0802cde0
 800bd28:	0802cddc 	.word	0x0802cddc

0800bd2c <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800bd32:	1dba      	adds	r2, r7, #6
 800bd34:	2301      	movs	r3, #1
 800bd36:	2101      	movs	r1, #1
 800bd38:	20f4      	movs	r0, #244	@ 0xf4
 800bd3a:	f7ff fcff 	bl	800b73c <ReadMemRegister>
 800bd3e:	0003      	movs	r3, r0
 800bd40:	001a      	movs	r2, r3
 800bd42:	1dfb      	adds	r3, r7, #7
 800bd44:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800bd46:	1dbb      	adds	r3, r7, #6
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	2203      	movs	r2, #3
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	1dbb      	adds	r3, r7, #6
 800bd52:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800bd54:	f008 ffbe 	bl	8014cd4 <HAL_GetTick>
 800bd58:	0003      	movs	r3, r0
 800bd5a:	330a      	adds	r3, #10
 800bd5c:	001a      	movs	r2, r3
 800bd5e:	4b08      	ldr	r3, [pc, #32]	@ (800bd80 <BMP280_get_mode+0x54>)
 800bd60:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800bd62:	1dfb      	adds	r3, r7, #7
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	b25b      	sxtb	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d102      	bne.n	800bd72 <BMP280_get_mode+0x46>
    bmpData = 255;
 800bd6c:	1dbb      	adds	r3, r7, #6
 800bd6e:	22ff      	movs	r2, #255	@ 0xff
 800bd70:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800bd72:	1dbb      	adds	r3, r7, #6
 800bd74:	781b      	ldrb	r3, [r3, #0]
}
 800bd76:	0018      	movs	r0, r3
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	b002      	add	sp, #8
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	46c0      	nop			@ (mov r8, r8)
 800bd80:	20000f28 	.word	0x20000f28

0800bd84 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800bd84:	b5b0      	push	{r4, r5, r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800bd8a:	1d3a      	adds	r2, r7, #4
 800bd8c:	2306      	movs	r3, #6
 800bd8e:	2101      	movs	r1, #1
 800bd90:	20f7      	movs	r0, #247	@ 0xf7
 800bd92:	f7ff fcd3 	bl	800b73c <ReadMemRegister>
 800bd96:	0003      	movs	r3, r0
 800bd98:	001a      	movs	r2, r3
 800bd9a:	230f      	movs	r3, #15
 800bd9c:	18fb      	adds	r3, r7, r3
 800bd9e:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800bda0:	1d3b      	adds	r3, r7, #4
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b80      	cmp	r3, #128	@ 0x80
 800bda6:	d013      	beq.n	800bdd0 <BMP280_get_measurement_values+0x4c>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800bda8:	1d3b      	adds	r3, r7, #4
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	031a      	lsls	r2, r3, #12
 800bdae:	1d3b      	adds	r3, r7, #4
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	18d3      	adds	r3, r2, r3
 800bdb6:	1d3a      	adds	r2, r7, #4
 800bdb8:	7892      	ldrb	r2, [r2, #2]
 800bdba:	0912      	lsrs	r2, r2, #4
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	189b      	adds	r3, r3, r2
 800bdc0:	001a      	movs	r2, r3
 800bdc2:	4b2e      	ldr	r3, [pc, #184]	@ (800be7c <BMP280_get_measurement_values+0xf8>)
 800bdc4:	601a      	str	r2, [r3, #0]
    Error("BMP280 Invalid read of barometric pressure.");
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
    SetAllBlueLED();
    return false;
  }
  if (bmpData[3] != 0x80) {
 800bdc6:	1d3b      	adds	r3, r7, #4
 800bdc8:	78db      	ldrb	r3, [r3, #3]
 800bdca:	2b80      	cmp	r3, #128	@ 0x80
 800bdcc:	d035      	beq.n	800be3a <BMP280_get_measurement_values+0xb6>
 800bdce:	e01d      	b.n	800be0c <BMP280_get_measurement_values+0x88>
    Error("BMP280 Invalid read of barometric pressure.");
 800bdd0:	4a2b      	ldr	r2, [pc, #172]	@ (800be80 <BMP280_get_measurement_values+0xfc>)
 800bdd2:	4b2c      	ldr	r3, [pc, #176]	@ (800be84 <BMP280_get_measurement_values+0x100>)
 800bdd4:	0019      	movs	r1, r3
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	f008 fa04 	bl	80141e4 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800bddc:	1d3b      	adds	r3, r7, #4
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	001d      	movs	r5, r3
 800bde2:	1d3b      	adds	r3, r7, #4
 800bde4:	785b      	ldrb	r3, [r3, #1]
 800bde6:	0018      	movs	r0, r3
 800bde8:	1d3b      	adds	r3, r7, #4
 800bdea:	789b      	ldrb	r3, [r3, #2]
 800bdec:	001c      	movs	r4, r3
 800bdee:	4b23      	ldr	r3, [pc, #140]	@ (800be7c <BMP280_get_measurement_values+0xf8>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a25      	ldr	r2, [pc, #148]	@ (800be88 <BMP280_get_measurement_values+0x104>)
 800bdf4:	4925      	ldr	r1, [pc, #148]	@ (800be8c <BMP280_get_measurement_values+0x108>)
 800bdf6:	9302      	str	r3, [sp, #8]
 800bdf8:	9401      	str	r4, [sp, #4]
 800bdfa:	9000      	str	r0, [sp, #0]
 800bdfc:	002b      	movs	r3, r5
 800bdfe:	2003      	movs	r0, #3
 800be00:	f008 f9f0 	bl	80141e4 <CreateLine>
    SetAllBlueLED();
 800be04:	f007 f8fe 	bl	8013004 <SetAllBlueLED>
    return false;
 800be08:	2300      	movs	r3, #0
 800be0a:	e033      	b.n	800be74 <BMP280_get_measurement_values+0xf0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800be0c:	1d3b      	adds	r3, r7, #4
 800be0e:	78db      	ldrb	r3, [r3, #3]
 800be10:	031a      	lsls	r2, r3, #12
 800be12:	1d3b      	adds	r3, r7, #4
 800be14:	791b      	ldrb	r3, [r3, #4]
 800be16:	011b      	lsls	r3, r3, #4
 800be18:	18d3      	adds	r3, r2, r3
 800be1a:	1d3a      	adds	r2, r7, #4
 800be1c:	7952      	ldrb	r2, [r2, #5]
 800be1e:	0912      	lsrs	r2, r2, #4
 800be20:	b2d2      	uxtb	r2, r2
 800be22:	189b      	adds	r3, r3, r2
 800be24:	001a      	movs	r2, r3
 800be26:	4b1a      	ldr	r3, [pc, #104]	@ (800be90 <BMP280_get_measurement_values+0x10c>)
 800be28:	601a      	str	r2, [r3, #0]
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
    SetAllBlueLED();
    return false;
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800be2a:	230f      	movs	r3, #15
 800be2c:	18fb      	adds	r3, r7, r3
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	b25b      	sxtb	r3, r3
 800be32:	1e5a      	subs	r2, r3, #1
 800be34:	4193      	sbcs	r3, r2
 800be36:	b2db      	uxtb	r3, r3
 800be38:	e01c      	b.n	800be74 <BMP280_get_measurement_values+0xf0>
    Error("BMP280 Invalid read of temperature.");
 800be3a:	4a16      	ldr	r2, [pc, #88]	@ (800be94 <BMP280_get_measurement_values+0x110>)
 800be3c:	4b11      	ldr	r3, [pc, #68]	@ (800be84 <BMP280_get_measurement_values+0x100>)
 800be3e:	0019      	movs	r1, r3
 800be40:	2001      	movs	r0, #1
 800be42:	f008 f9cf 	bl	80141e4 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800be46:	1d3b      	adds	r3, r7, #4
 800be48:	78db      	ldrb	r3, [r3, #3]
 800be4a:	001d      	movs	r5, r3
 800be4c:	1d3b      	adds	r3, r7, #4
 800be4e:	791b      	ldrb	r3, [r3, #4]
 800be50:	0018      	movs	r0, r3
 800be52:	1d3b      	adds	r3, r7, #4
 800be54:	795b      	ldrb	r3, [r3, #5]
 800be56:	001c      	movs	r4, r3
 800be58:	4b0d      	ldr	r3, [pc, #52]	@ (800be90 <BMP280_get_measurement_values+0x10c>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a0e      	ldr	r2, [pc, #56]	@ (800be98 <BMP280_get_measurement_values+0x114>)
 800be5e:	490b      	ldr	r1, [pc, #44]	@ (800be8c <BMP280_get_measurement_values+0x108>)
 800be60:	9302      	str	r3, [sp, #8]
 800be62:	9401      	str	r4, [sp, #4]
 800be64:	9000      	str	r0, [sp, #0]
 800be66:	002b      	movs	r3, r5
 800be68:	2003      	movs	r0, #3
 800be6a:	f008 f9bb 	bl	80141e4 <CreateLine>
    SetAllBlueLED();
 800be6e:	f007 f8c9 	bl	8013004 <SetAllBlueLED>
    return false;
 800be72:	2300      	movs	r3, #0
}
 800be74:	0018      	movs	r0, r3
 800be76:	46bd      	mov	sp, r7
 800be78:	b004      	add	sp, #16
 800be7a:	bdb0      	pop	{r4, r5, r7, pc}
 800be7c:	20000f24 	.word	0x20000f24
 800be80:	0802ce0c 	.word	0x0802ce0c
 800be84:	0802cddc 	.word	0x0802cddc
 800be88:	0802ce38 	.word	0x0802ce38
 800be8c:	0802caec 	.word	0x0802caec
 800be90:	20000f20 	.word	0x20000f20
 800be94:	0802ce80 	.word	0x0802ce80
 800be98:	0802cea4 	.word	0x0802cea4

0800be9c <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800bea2:	4b1e      	ldr	r3, [pc, #120]	@ (800bf1c <BMP280_calc_temperature+0x80>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	10da      	asrs	r2, r3, #3
 800beac:	4b1c      	ldr	r3, [pc, #112]	@ (800bf20 <BMP280_calc_temperature+0x84>)
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	1ad3      	subs	r3, r2, r3
 800beb4:	4a1a      	ldr	r2, [pc, #104]	@ (800bf20 <BMP280_calc_temperature+0x84>)
 800beb6:	2102      	movs	r1, #2
 800beb8:	5e52      	ldrsh	r2, [r2, r1]
 800beba:	4353      	muls	r3, r2
 800bebc:	12db      	asrs	r3, r3, #11
 800bebe:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	111b      	asrs	r3, r3, #4
 800bec4:	4a16      	ldr	r2, [pc, #88]	@ (800bf20 <BMP280_calc_temperature+0x84>)
 800bec6:	8812      	ldrh	r2, [r2, #0]
 800bec8:	1a9b      	subs	r3, r3, r2
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	1112      	asrs	r2, r2, #4
 800bece:	4914      	ldr	r1, [pc, #80]	@ (800bf20 <BMP280_calc_temperature+0x84>)
 800bed0:	8809      	ldrh	r1, [r1, #0]
 800bed2:	1a52      	subs	r2, r2, r1
 800bed4:	4353      	muls	r3, r2
 800bed6:	131b      	asrs	r3, r3, #12
 800bed8:	4a11      	ldr	r2, [pc, #68]	@ (800bf20 <BMP280_calc_temperature+0x84>)
 800beda:	2104      	movs	r1, #4
 800bedc:	5e52      	ldrsh	r2, [r2, r1]
 800bede:	4353      	muls	r3, r2
 800bee0:	139b      	asrs	r3, r3, #14
 800bee2:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	18d2      	adds	r2, r2, r3
 800beea:	4b0e      	ldr	r3, [pc, #56]	@ (800bf24 <BMP280_calc_temperature+0x88>)
 800beec:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800beee:	4b0d      	ldr	r3, [pc, #52]	@ (800bf24 <BMP280_calc_temperature+0x88>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	0013      	movs	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	189b      	adds	r3, r3, r2
 800bef8:	3380      	adds	r3, #128	@ 0x80
 800befa:	121b      	asrs	r3, r3, #8
 800befc:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800befe:	68b8      	ldr	r0, [r7, #8]
 800bf00:	f7f5 fc92 	bl	8001828 <__aeabi_i2f>
 800bf04:	1c03      	adds	r3, r0, #0
 800bf06:	4908      	ldr	r1, [pc, #32]	@ (800bf28 <BMP280_calc_temperature+0x8c>)
 800bf08:	1c18      	adds	r0, r3, #0
 800bf0a:	f7f4 fecb 	bl	8000ca4 <__aeabi_fdiv>
 800bf0e:	1c03      	adds	r3, r0, #0
 800bf10:	607b      	str	r3, [r7, #4]
  return airTemp;
 800bf12:	687b      	ldr	r3, [r7, #4]
}
 800bf14:	1c18      	adds	r0, r3, #0
 800bf16:	46bd      	mov	sp, r7
 800bf18:	b006      	add	sp, #24
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	20000f20 	.word	0x20000f20
 800bf20:	20000f00 	.word	0x20000f00
 800bf24:	20000f1c 	.word	0x20000f1c
 800bf28:	42c80000 	.word	0x42c80000

0800bf2c <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800bf32:	4b4e      	ldr	r3, [pc, #312]	@ (800c06c <BMP280_calc_pressure+0x140>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800bf38:	4b4d      	ldr	r3, [pc, #308]	@ (800c070 <BMP280_calc_pressure+0x144>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	105b      	asrs	r3, r3, #1
 800bf3e:	4a4d      	ldr	r2, [pc, #308]	@ (800c074 <BMP280_calc_pressure+0x148>)
 800bf40:	4694      	mov	ip, r2
 800bf42:	4463      	add	r3, ip
 800bf44:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	109b      	asrs	r3, r3, #2
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	1092      	asrs	r2, r2, #2
 800bf4e:	4353      	muls	r3, r2
 800bf50:	12db      	asrs	r3, r3, #11
 800bf52:	4a49      	ldr	r2, [pc, #292]	@ (800c078 <BMP280_calc_pressure+0x14c>)
 800bf54:	2110      	movs	r1, #16
 800bf56:	5e52      	ldrsh	r2, [r2, r1]
 800bf58:	4353      	muls	r3, r2
 800bf5a:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800bf5c:	4b46      	ldr	r3, [pc, #280]	@ (800c078 <BMP280_calc_pressure+0x14c>)
 800bf5e:	220e      	movs	r2, #14
 800bf60:	5e9b      	ldrsh	r3, [r3, r2]
 800bf62:	001a      	movs	r2, r3
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	4353      	muls	r3, r2
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	18d3      	adds	r3, r2, r3
 800bf6e:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	109a      	asrs	r2, r3, #2
 800bf74:	4b40      	ldr	r3, [pc, #256]	@ (800c078 <BMP280_calc_pressure+0x14c>)
 800bf76:	210c      	movs	r1, #12
 800bf78:	5e5b      	ldrsh	r3, [r3, r1]
 800bf7a:	041b      	lsls	r3, r3, #16
 800bf7c:	18d3      	adds	r3, r2, r3
 800bf7e:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800bf80:	4b3d      	ldr	r3, [pc, #244]	@ (800c078 <BMP280_calc_pressure+0x14c>)
 800bf82:	220a      	movs	r2, #10
 800bf84:	5e9b      	ldrsh	r3, [r3, r2]
 800bf86:	0019      	movs	r1, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	109b      	asrs	r3, r3, #2
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	1092      	asrs	r2, r2, #2
 800bf90:	4353      	muls	r3, r2
 800bf92:	135b      	asrs	r3, r3, #13
 800bf94:	434b      	muls	r3, r1
 800bf96:	10da      	asrs	r2, r3, #3
 800bf98:	4b37      	ldr	r3, [pc, #220]	@ (800c078 <BMP280_calc_pressure+0x14c>)
 800bf9a:	2108      	movs	r1, #8
 800bf9c:	5e5b      	ldrsh	r3, [r3, r1]
 800bf9e:	0019      	movs	r1, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	434b      	muls	r3, r1
 800bfa4:	105b      	asrs	r3, r3, #1
 800bfa6:	18d3      	adds	r3, r2, r3
 800bfa8:	149b      	asrs	r3, r3, #18
 800bfaa:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2280      	movs	r2, #128	@ 0x80
 800bfb0:	0212      	lsls	r2, r2, #8
 800bfb2:	4694      	mov	ip, r2
 800bfb4:	4463      	add	r3, ip
 800bfb6:	4a30      	ldr	r2, [pc, #192]	@ (800c078 <BMP280_calc_pressure+0x14c>)
 800bfb8:	88d2      	ldrh	r2, [r2, #6]
 800bfba:	4353      	muls	r3, r2
 800bfbc:	13db      	asrs	r3, r3, #15
 800bfbe:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d101      	bne.n	800bfca <BMP280_calc_pressure+0x9e>
    return 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e04b      	b.n	800c062 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	2280      	movs	r2, #128	@ 0x80
 800bfce:	0352      	lsls	r2, r2, #13
 800bfd0:	1ad2      	subs	r2, r2, r3
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	131b      	asrs	r3, r3, #12
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	001a      	movs	r2, r3
 800bfda:	4b28      	ldr	r3, [pc, #160]	@ (800c07c <BMP280_calc_pressure+0x150>)
 800bfdc:	4353      	muls	r3, r2
 800bfde:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	db09      	blt.n	800bffa <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	005b      	lsls	r3, r3, #1
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	0011      	movs	r1, r2
 800bfee:	0018      	movs	r0, r3
 800bff0:	f7f4 f8d8 	bl	80001a4 <__udivsi3>
 800bff4:	0003      	movs	r3, r0
 800bff6:	617b      	str	r3, [r7, #20]
 800bff8:	e007      	b.n	800c00a <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	0019      	movs	r1, r3
 800bffe:	6978      	ldr	r0, [r7, #20]
 800c000:	f7f4 f8d0 	bl	80001a4 <__udivsi3>
 800c004:	0003      	movs	r3, r0
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800c00a:	4b1b      	ldr	r3, [pc, #108]	@ (800c078 <BMP280_calc_pressure+0x14c>)
 800c00c:	2216      	movs	r2, #22
 800c00e:	5e9b      	ldrsh	r3, [r3, r2]
 800c010:	0019      	movs	r1, r3
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	08db      	lsrs	r3, r3, #3
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	08d2      	lsrs	r2, r2, #3
 800c01a:	4353      	muls	r3, r2
 800c01c:	0b5b      	lsrs	r3, r3, #13
 800c01e:	434b      	muls	r3, r1
 800c020:	131b      	asrs	r3, r3, #12
 800c022:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	089b      	lsrs	r3, r3, #2
 800c028:	001a      	movs	r2, r3
 800c02a:	4b13      	ldr	r3, [pc, #76]	@ (800c078 <BMP280_calc_pressure+0x14c>)
 800c02c:	2114      	movs	r1, #20
 800c02e:	5e5b      	ldrsh	r3, [r3, r1]
 800c030:	4353      	muls	r3, r2
 800c032:	135b      	asrs	r3, r3, #13
 800c034:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	18d3      	adds	r3, r2, r3
 800c03c:	4a0e      	ldr	r2, [pc, #56]	@ (800c078 <BMP280_calc_pressure+0x14c>)
 800c03e:	2112      	movs	r1, #18
 800c040:	5e52      	ldrsh	r2, [r2, r1]
 800c042:	189b      	adds	r3, r3, r2
 800c044:	111a      	asrs	r2, r3, #4
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	18d3      	adds	r3, r2, r3
 800c04a:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800c04c:	6978      	ldr	r0, [r7, #20]
 800c04e:	f7f5 fc3b 	bl	80018c8 <__aeabi_ui2f>
 800c052:	1c03      	adds	r3, r0, #0
 800c054:	490a      	ldr	r1, [pc, #40]	@ (800c080 <BMP280_calc_pressure+0x154>)
 800c056:	1c18      	adds	r0, r3, #0
 800c058:	f7f4 fe24 	bl	8000ca4 <__aeabi_fdiv>
 800c05c:	1c03      	adds	r3, r0, #0
 800c05e:	607b      	str	r3, [r7, #4]
  return airhPa;
 800c060:	687b      	ldr	r3, [r7, #4]
}
 800c062:	1c18      	adds	r0, r3, #0
 800c064:	46bd      	mov	sp, r7
 800c066:	b006      	add	sp, #24
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	46c0      	nop			@ (mov r8, r8)
 800c06c:	20000f24 	.word	0x20000f24
 800c070:	20000f1c 	.word	0x20000f1c
 800c074:	ffff0600 	.word	0xffff0600
 800c078:	20000f00 	.word	0x20000f00
 800c07c:	00000c35 	.word	0x00000c35
 800c080:	42c80000 	.word	0x42c80000

0800c084 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800c084:	b5b0      	push	{r4, r5, r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800c08a:	4bcc      	ldr	r3, [pc, #816]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	0018      	movs	r0, r3
 800c090:	f008 f852 	bl	8014138 <TimestampIsReached>
 800c094:	0003      	movs	r3, r0
 800c096:	001a      	movs	r2, r3
 800c098:	2301      	movs	r3, #1
 800c09a:	4053      	eors	r3, r2
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <BMP_Upkeep+0x24>
    return BMPState;
 800c0a2:	4bc7      	ldr	r3, [pc, #796]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	e1c2      	b.n	800c42e <BMP_Upkeep+0x3aa>
  }
  switch(BMPState) {
 800c0a8:	4bc5      	ldr	r3, [pc, #788]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	2b09      	cmp	r3, #9
 800c0ae:	d900      	bls.n	800c0b2 <BMP_Upkeep+0x2e>
 800c0b0:	e16d      	b.n	800c38e <BMP_Upkeep+0x30a>
 800c0b2:	009a      	lsls	r2, r3, #2
 800c0b4:	4bc3      	ldr	r3, [pc, #780]	@ (800c3c4 <BMP_Upkeep+0x340>)
 800c0b6:	18d3      	adds	r3, r2, r3
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800c0bc:	4ac2      	ldr	r2, [pc, #776]	@ (800c3c8 <BMP_Upkeep+0x344>)
 800c0be:	4bc3      	ldr	r3, [pc, #780]	@ (800c3cc <BMP_Upkeep+0x348>)
 800c0c0:	0019      	movs	r1, r3
 800c0c2:	2003      	movs	r0, #3
 800c0c4:	f008 f88e 	bl	80141e4 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 780000;  // about 4 times an hour if powered
 800c0c8:	f008 fe04 	bl	8014cd4 <HAL_GetTick>
 800c0cc:	0003      	movs	r3, r0
 800c0ce:	4ac0      	ldr	r2, [pc, #768]	@ (800c3d0 <BMP_Upkeep+0x34c>)
 800c0d0:	189a      	adds	r2, r3, r2
 800c0d2:	4bba      	ldr	r3, [pc, #744]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c0d4:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800c0d6:	4bbf      	ldr	r3, [pc, #764]	@ (800c3d4 <BMP_Upkeep+0x350>)
 800c0d8:	781a      	ldrb	r2, [r3, #0]
 800c0da:	4bbf      	ldr	r3, [pc, #764]	@ (800c3d8 <BMP_Upkeep+0x354>)
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d100      	bne.n	800c0e4 <BMP_Upkeep+0x60>
 800c0e2:	e160      	b.n	800c3a6 <BMP_Upkeep+0x322>
      BMPState = BMP_STATE_WAIT;
 800c0e4:	4bb6      	ldr	r3, [pc, #728]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c0e6:	2208      	movs	r2, #8
 800c0e8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0ea:	e15c      	b.n	800c3a6 <BMP_Upkeep+0x322>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800c0ec:	f002 f860 	bl	800e1b0 <getSensorLock>
 800c0f0:	1e03      	subs	r3, r0, #0
 800c0f2:	d000      	beq.n	800c0f6 <BMP_Upkeep+0x72>
 800c0f4:	e159      	b.n	800c3aa <BMP_Upkeep+0x326>
      break;
    }
    setSensorLock(BMP280);
 800c0f6:	2003      	movs	r0, #3
 800c0f8:	f002 f846 	bl	800e188 <setSensorLock>
    BMP280_reset();
 800c0fc:	f7ff fb6a 	bl	800b7d4 <BMP280_reset>
    HAL_Delay(10); // wait for deferred DMA transfers
 800c100:	200a      	movs	r0, #10
 800c102:	f008 fdf1 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 800c106:	2000      	movs	r0, #0
 800c108:	f002 f83e 	bl	800e188 <setSensorLock>
    BMPState = BMP_SET_CONFIG;
 800c10c:	4bac      	ldr	r3, [pc, #688]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c10e:	2201      	movs	r2, #1
 800c110:	701a      	strb	r2, [r3, #0]
    break;
 800c112:	e18a      	b.n	800c42a <BMP_Upkeep+0x3a6>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800c114:	f002 f84c 	bl	800e1b0 <getSensorLock>
 800c118:	1e03      	subs	r3, r0, #0
 800c11a:	d000      	beq.n	800c11e <BMP_Upkeep+0x9a>
 800c11c:	e147      	b.n	800c3ae <BMP_Upkeep+0x32a>
      break;
    }
    setSensorLock(BMP280);
 800c11e:	2003      	movs	r0, #3
 800c120:	f002 f832 	bl	800e188 <setSensorLock>
    if (BMP280_set_config()) {
 800c124:	f7ff fd8a 	bl	800bc3c <BMP280_set_config>
 800c128:	1e03      	subs	r3, r0, #0
 800c12a:	d003      	beq.n	800c134 <BMP_Upkeep+0xb0>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800c12c:	4ba4      	ldr	r3, [pc, #656]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c12e:	2202      	movs	r2, #2
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	e00f      	b.n	800c154 <BMP_Upkeep+0xd0>
    }
    else {
      Error("Error while configuring BMP280");
 800c134:	4aa9      	ldr	r2, [pc, #676]	@ (800c3dc <BMP_Upkeep+0x358>)
 800c136:	4baa      	ldr	r3, [pc, #680]	@ (800c3e0 <BMP_Upkeep+0x35c>)
 800c138:	0019      	movs	r1, r3
 800c13a:	2001      	movs	r0, #1
 800c13c:	f008 f852 	bl	80141e4 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800c140:	f008 fdc8 	bl	8014cd4 <HAL_GetTick>
 800c144:	0003      	movs	r3, r0
 800c146:	4aa7      	ldr	r2, [pc, #668]	@ (800c3e4 <BMP_Upkeep+0x360>)
 800c148:	189a      	adds	r2, r3, r2
 800c14a:	4b9c      	ldr	r3, [pc, #624]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c14c:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800c14e:	4b9c      	ldr	r3, [pc, #624]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c150:	2208      	movs	r2, #8
 800c152:	701a      	strb	r2, [r3, #0]
     }
    HAL_Delay(10); // wait for deferred DMA transfers
 800c154:	200a      	movs	r0, #10
 800c156:	f008 fdc7 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 800c15a:	2000      	movs	r0, #0
 800c15c:	f002 f814 	bl	800e188 <setSensorLock>
  break;
 800c160:	e163      	b.n	800c42a <BMP_Upkeep+0x3a6>

  case BMP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800c162:	f002 f825 	bl	800e1b0 <getSensorLock>
 800c166:	1e03      	subs	r3, r0, #0
 800c168:	d030      	beq.n	800c1cc <BMP_Upkeep+0x148>
      uint8_t locktype = getSensorLock();
 800c16a:	1dfc      	adds	r4, r7, #7
 800c16c:	f002 f820 	bl	800e1b0 <getSensorLock>
 800c170:	0003      	movs	r3, r0
 800c172:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800c174:	1dfb      	adds	r3, r7, #7
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d019      	beq.n	800c1b0 <BMP_Upkeep+0x12c>
 800c17c:	1dfb      	adds	r3, r7, #7
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d013      	beq.n	800c1ac <BMP_Upkeep+0x128>
 800c184:	1dfb      	adds	r3, r7, #7
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	2b05      	cmp	r3, #5
 800c18a:	d00d      	beq.n	800c1a8 <BMP_Upkeep+0x124>
 800c18c:	1dfb      	adds	r3, r7, #7
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b02      	cmp	r3, #2
 800c192:	d007      	beq.n	800c1a4 <BMP_Upkeep+0x120>
 800c194:	1dfb      	adds	r3, r7, #7
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b03      	cmp	r3, #3
 800c19a:	d101      	bne.n	800c1a0 <BMP_Upkeep+0x11c>
 800c19c:	4b92      	ldr	r3, [pc, #584]	@ (800c3e8 <BMP_Upkeep+0x364>)
 800c19e:	e008      	b.n	800c1b2 <BMP_Upkeep+0x12e>
 800c1a0:	4b92      	ldr	r3, [pc, #584]	@ (800c3ec <BMP_Upkeep+0x368>)
 800c1a2:	e006      	b.n	800c1b2 <BMP_Upkeep+0x12e>
 800c1a4:	4b92      	ldr	r3, [pc, #584]	@ (800c3f0 <BMP_Upkeep+0x36c>)
 800c1a6:	e004      	b.n	800c1b2 <BMP_Upkeep+0x12e>
 800c1a8:	4b92      	ldr	r3, [pc, #584]	@ (800c3f4 <BMP_Upkeep+0x370>)
 800c1aa:	e002      	b.n	800c1b2 <BMP_Upkeep+0x12e>
 800c1ac:	4b92      	ldr	r3, [pc, #584]	@ (800c3f8 <BMP_Upkeep+0x374>)
 800c1ae:	e000      	b.n	800c1b2 <BMP_Upkeep+0x12e>
 800c1b0:	4b92      	ldr	r3, [pc, #584]	@ (800c3fc <BMP_Upkeep+0x378>)
 800c1b2:	4a93      	ldr	r2, [pc, #588]	@ (800c400 <BMP_Upkeep+0x37c>)
 800c1b4:	4985      	ldr	r1, [pc, #532]	@ (800c3cc <BMP_Upkeep+0x348>)
 800c1b6:	2003      	movs	r0, #3
 800c1b8:	f008 f814 	bl	80141e4 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800c1bc:	f008 fd8a 	bl	8014cd4 <HAL_GetTick>
 800c1c0:	0003      	movs	r3, r0
 800c1c2:	3361      	adds	r3, #97	@ 0x61
 800c1c4:	001a      	movs	r2, r3
 800c1c6:	4b7d      	ldr	r3, [pc, #500]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c1c8:	601a      	str	r2, [r3, #0]
      break;
 800c1ca:	e12e      	b.n	800c42a <BMP_Upkeep+0x3a6>
    }
    if (getSensorLock() == FREE) {
 800c1cc:	f001 fff0 	bl	800e1b0 <getSensorLock>
 800c1d0:	1e03      	subs	r3, r0, #0
 800c1d2:	d105      	bne.n	800c1e0 <BMP_Upkeep+0x15c>
      HAL_Delay(10);
 800c1d4:	200a      	movs	r0, #10
 800c1d6:	f008 fd87 	bl	8014ce8 <HAL_Delay>
      setSensorLock(BMP280);
 800c1da:	2003      	movs	r0, #3
 800c1dc:	f001 ffd4 	bl	800e188 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800c1e0:	f7ff fd50 	bl	800bc84 <BMP280_set_mode>
 800c1e4:	1e03      	subs	r3, r0, #0
 800c1e6:	d003      	beq.n	800c1f0 <BMP_Upkeep+0x16c>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800c1e8:	4b75      	ldr	r3, [pc, #468]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c1ea:	2205      	movs	r2, #5
 800c1ec:	701a      	strb	r2, [r3, #0]
 800c1ee:	e00f      	b.n	800c210 <BMP_Upkeep+0x18c>
    }
    else {
      Error("Error while setting BMP280 to forced mode");
 800c1f0:	4a84      	ldr	r2, [pc, #528]	@ (800c404 <BMP_Upkeep+0x380>)
 800c1f2:	4b7b      	ldr	r3, [pc, #492]	@ (800c3e0 <BMP_Upkeep+0x35c>)
 800c1f4:	0019      	movs	r1, r3
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	f007 fff4 	bl	80141e4 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800c1fc:	f008 fd6a 	bl	8014cd4 <HAL_GetTick>
 800c200:	0003      	movs	r3, r0
 800c202:	4a78      	ldr	r2, [pc, #480]	@ (800c3e4 <BMP_Upkeep+0x360>)
 800c204:	189a      	adds	r2, r3, r2
 800c206:	4b6d      	ldr	r3, [pc, #436]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c208:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800c20a:	4b6d      	ldr	r3, [pc, #436]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c20c:	2208      	movs	r2, #8
 800c20e:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800c210:	200a      	movs	r0, #10
 800c212:	f008 fd69 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 800c216:	2000      	movs	r0, #0
 800c218:	f001 ffb6 	bl	800e188 <setSensorLock>
    break;
 800c21c:	e105      	b.n	800c42a <BMP_Upkeep+0x3a6>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (getSensorLock() != FREE) {
 800c21e:	f001 ffc7 	bl	800e1b0 <getSensorLock>
 800c222:	1e03      	subs	r3, r0, #0
 800c224:	d000      	beq.n	800c228 <BMP_Upkeep+0x1a4>
 800c226:	e0c4      	b.n	800c3b2 <BMP_Upkeep+0x32e>
      break;
    }
    HAL_Delay(10);
 800c228:	200a      	movs	r0, #10
 800c22a:	f008 fd5d 	bl	8014ce8 <HAL_Delay>
    setSensorLock(BMP280);
 800c22e:	2003      	movs	r0, #3
 800c230:	f001 ffaa 	bl	800e188 <setSensorLock>
    if (BMP280_get_measurement_values()) {
 800c234:	f7ff fda6 	bl	800bd84 <BMP280_get_measurement_values>
 800c238:	1e03      	subs	r3, r0, #0
 800c23a:	d003      	beq.n	800c244 <BMP_Upkeep+0x1c0>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800c23c:	4b60      	ldr	r3, [pc, #384]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c23e:	2203      	movs	r2, #3
 800c240:	701a      	strb	r2, [r3, #0]
 800c242:	e00f      	b.n	800c264 <BMP_Upkeep+0x1e0>
    }
    else {
      Error("BMP280 Error during reading measurement results array");
 800c244:	4a70      	ldr	r2, [pc, #448]	@ (800c408 <BMP_Upkeep+0x384>)
 800c246:	4b66      	ldr	r3, [pc, #408]	@ (800c3e0 <BMP_Upkeep+0x35c>)
 800c248:	0019      	movs	r1, r3
 800c24a:	2001      	movs	r0, #1
 800c24c:	f007 ffca 	bl	80141e4 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800c250:	f008 fd40 	bl	8014cd4 <HAL_GetTick>
 800c254:	0003      	movs	r3, r0
 800c256:	4a63      	ldr	r2, [pc, #396]	@ (800c3e4 <BMP_Upkeep+0x360>)
 800c258:	189a      	adds	r2, r3, r2
 800c25a:	4b58      	ldr	r3, [pc, #352]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c25c:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800c25e:	4b58      	ldr	r3, [pc, #352]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c260:	2208      	movs	r2, #8
 800c262:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800c264:	200a      	movs	r0, #10
 800c266:	f008 fd3f 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 800c26a:	2000      	movs	r0, #0
 800c26c:	f001 ff8c 	bl	800e188 <setSensorLock>
  break;
 800c270:	e0db      	b.n	800c42a <BMP_Upkeep+0x3a6>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800c272:	f7ff fe13 	bl	800be9c <BMP280_calc_temperature>
 800c276:	1c03      	adds	r3, r0, #0
 800c278:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800c27a:	f7ff fe57 	bl	800bf2c <BMP280_calc_pressure>
 800c27e:	1c03      	adds	r3, r0, #0
 800c280:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800c282:	4962      	ldr	r1, [pc, #392]	@ (800c40c <BMP_Upkeep+0x388>)
 800c284:	68b8      	ldr	r0, [r7, #8]
 800c286:	f7f4 f967 	bl	8000558 <__aeabi_fcmpgt>
 800c28a:	1e03      	subs	r3, r0, #0
 800c28c:	d049      	beq.n	800c322 <BMP_Upkeep+0x29e>
 800c28e:	4960      	ldr	r1, [pc, #384]	@ (800c410 <BMP_Upkeep+0x38c>)
 800c290:	68b8      	ldr	r0, [r7, #8]
 800c292:	f7f4 f94d 	bl	8000530 <__aeabi_fcmplt>
 800c296:	1e03      	subs	r3, r0, #0
 800c298:	d043      	beq.n	800c322 <BMP_Upkeep+0x29e>
      bmp280samplecounter++;
 800c29a:	4b5e      	ldr	r3, [pc, #376]	@ (800c414 <BMP_Upkeep+0x390>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	4b5c      	ldr	r3, [pc, #368]	@ (800c414 <BMP_Upkeep+0x390>)
 800c2a4:	701a      	strb	r2, [r3, #0]
      if (bmp280samplecounter == 2) {
 800c2a6:	4b5b      	ldr	r3, [pc, #364]	@ (800c414 <BMP_Upkeep+0x390>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d114      	bne.n	800c2d8 <BMP_Upkeep+0x254>
        Info("BMP280 barometric value: %.2fhPa  airtemperature: %2.2fC", airhpa, airtemp);
 800c2ae:	68b8      	ldr	r0, [r7, #8]
 800c2b0:	f7f7 faf0 	bl	8003894 <__aeabi_f2d>
 800c2b4:	0004      	movs	r4, r0
 800c2b6:	000d      	movs	r5, r1
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f7f7 faeb 	bl	8003894 <__aeabi_f2d>
 800c2be:	0002      	movs	r2, r0
 800c2c0:	000b      	movs	r3, r1
 800c2c2:	4855      	ldr	r0, [pc, #340]	@ (800c418 <BMP_Upkeep+0x394>)
 800c2c4:	4955      	ldr	r1, [pc, #340]	@ (800c41c <BMP_Upkeep+0x398>)
 800c2c6:	9202      	str	r2, [sp, #8]
 800c2c8:	9303      	str	r3, [sp, #12]
 800c2ca:	9400      	str	r4, [sp, #0]
 800c2cc:	9501      	str	r5, [sp, #4]
 800c2ce:	0002      	movs	r2, r0
 800c2d0:	2002      	movs	r0, #2
 800c2d2:	f007 ff87 	bl	80141e4 <CreateLine>
 800c2d6:	e006      	b.n	800c2e6 <BMP_Upkeep+0x262>
      }
      else {
        if (bmp280samplecounter == 11) {
 800c2d8:	4b4e      	ldr	r3, [pc, #312]	@ (800c414 <BMP_Upkeep+0x390>)
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	2b0b      	cmp	r3, #11
 800c2de:	d102      	bne.n	800c2e6 <BMP_Upkeep+0x262>
          bmp280samplecounter = 0;
 800c2e0:	4b4c      	ldr	r3, [pc, #304]	@ (800c414 <BMP_Upkeep+0x390>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	701a      	strb	r2, [r3, #0]
        }
      }


      setBMP280(airtemp, airhpa);
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	1c11      	adds	r1, r2, #0
 800c2ec:	1c18      	adds	r0, r3, #0
 800c2ee:	f7f8 fc2d 	bl	8004b4c <setBMP280>
      if (Check_USB_PowerOn()) {
 800c2f2:	f7fd fd19 	bl	8009d28 <Check_USB_PowerOn>
 800c2f6:	1e03      	subs	r3, r0, #0
 800c2f8:	d00a      	beq.n	800c310 <BMP_Upkeep+0x28c>
        BMP280TimeStamp = HAL_GetTick() + 60000;
 800c2fa:	f008 fceb 	bl	8014cd4 <HAL_GetTick>
 800c2fe:	0003      	movs	r3, r0
 800c300:	4a47      	ldr	r2, [pc, #284]	@ (800c420 <BMP_Upkeep+0x39c>)
 800c302:	189a      	adds	r2, r3, r2
 800c304:	4b2d      	ldr	r3, [pc, #180]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c306:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800c308:	4b42      	ldr	r3, [pc, #264]	@ (800c414 <BMP_Upkeep+0x390>)
 800c30a:	2201      	movs	r2, #1
 800c30c:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800c30e:	e015      	b.n	800c33c <BMP_Upkeep+0x2b8>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 1000;
 800c310:	f008 fce0 	bl	8014cd4 <HAL_GetTick>
 800c314:	0003      	movs	r3, r0
 800c316:	22fa      	movs	r2, #250	@ 0xfa
 800c318:	0092      	lsls	r2, r2, #2
 800c31a:	189a      	adds	r2, r3, r2
 800c31c:	4b27      	ldr	r3, [pc, #156]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c31e:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800c320:	e00c      	b.n	800c33c <BMP_Upkeep+0x2b8>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800c322:	4a40      	ldr	r2, [pc, #256]	@ (800c424 <BMP_Upkeep+0x3a0>)
 800c324:	4b2e      	ldr	r3, [pc, #184]	@ (800c3e0 <BMP_Upkeep+0x35c>)
 800c326:	0019      	movs	r1, r3
 800c328:	2001      	movs	r0, #1
 800c32a:	f007 ff5b 	bl	80141e4 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800c32e:	f008 fcd1 	bl	8014cd4 <HAL_GetTick>
 800c332:	0003      	movs	r3, r0
 800c334:	4a2b      	ldr	r2, [pc, #172]	@ (800c3e4 <BMP_Upkeep+0x360>)
 800c336:	189a      	adds	r2, r3, r2
 800c338:	4b20      	ldr	r3, [pc, #128]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c33a:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800c33c:	4b20      	ldr	r3, [pc, #128]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c33e:	2208      	movs	r2, #8
 800c340:	701a      	strb	r2, [r3, #0]
    break;
 800c342:	e072      	b.n	800c42a <BMP_Upkeep+0x3a6>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800c344:	4b1e      	ldr	r3, [pc, #120]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c346:	2209      	movs	r2, #9
 800c348:	701a      	strb	r2, [r3, #0]
    break;
 800c34a:	e06e      	b.n	800c42a <BMP_Upkeep+0x3a6>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800c34c:	f001 ff30 	bl	800e1b0 <getSensorLock>
 800c350:	1e03      	subs	r3, r0, #0
 800c352:	d130      	bne.n	800c3b6 <BMP_Upkeep+0x332>
      break;
    }
    setSensorLock(BMP280);
 800c354:	2003      	movs	r0, #3
 800c356:	f001 ff17 	bl	800e188 <setSensorLock>
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800c35a:	f7ff fce7 	bl	800bd2c <BMP280_get_mode>
 800c35e:	0003      	movs	r3, r0
 800c360:	2b03      	cmp	r3, #3
 800c362:	d103      	bne.n	800c36c <BMP_Upkeep+0x2e8>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800c364:	4b16      	ldr	r3, [pc, #88]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c366:	2205      	movs	r2, #5
 800c368:	701a      	strb	r2, [r3, #0]
 800c36a:	e002      	b.n	800c372 <BMP_Upkeep+0x2ee>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800c36c:	4b14      	ldr	r3, [pc, #80]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c36e:	2202      	movs	r2, #2
 800c370:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800c372:	200a      	movs	r0, #10
 800c374:	f008 fcb8 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 800c378:	2000      	movs	r0, #0
 800c37a:	f001 ff05 	bl	800e188 <setSensorLock>
    BMP280TimeStamp = HAL_GetTick() + 23;
 800c37e:	f008 fca9 	bl	8014cd4 <HAL_GetTick>
 800c382:	0003      	movs	r3, r0
 800c384:	3317      	adds	r3, #23
 800c386:	001a      	movs	r2, r3
 800c388:	4b0c      	ldr	r3, [pc, #48]	@ (800c3bc <BMP_Upkeep+0x338>)
 800c38a:	601a      	str	r2, [r3, #0]
    break;
 800c38c:	e04d      	b.n	800c42a <BMP_Upkeep+0x3a6>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800c38e:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c0 <BMP_Upkeep+0x33c>)
 800c390:	2200      	movs	r2, #0
 800c392:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800c394:	f001 ff0c 	bl	800e1b0 <getSensorLock>
 800c398:	0003      	movs	r3, r0
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d144      	bne.n	800c428 <BMP_Upkeep+0x3a4>
      setSensorLock(FREE);
 800c39e:	2000      	movs	r0, #0
 800c3a0:	f001 fef2 	bl	800e188 <setSensorLock>
    }
    break;
 800c3a4:	e040      	b.n	800c428 <BMP_Upkeep+0x3a4>
    break;
 800c3a6:	46c0      	nop			@ (mov r8, r8)
 800c3a8:	e03f      	b.n	800c42a <BMP_Upkeep+0x3a6>
      break;
 800c3aa:	46c0      	nop			@ (mov r8, r8)
 800c3ac:	e03d      	b.n	800c42a <BMP_Upkeep+0x3a6>
      break;
 800c3ae:	46c0      	nop			@ (mov r8, r8)
 800c3b0:	e03b      	b.n	800c42a <BMP_Upkeep+0x3a6>
      break;
 800c3b2:	46c0      	nop			@ (mov r8, r8)
 800c3b4:	e039      	b.n	800c42a <BMP_Upkeep+0x3a6>
      break;
 800c3b6:	46c0      	nop			@ (mov r8, r8)
 800c3b8:	e037      	b.n	800c42a <BMP_Upkeep+0x3a6>
 800c3ba:	46c0      	nop			@ (mov r8, r8)
 800c3bc:	20000f28 	.word	0x20000f28
 800c3c0:	200000a2 	.word	0x200000a2
 800c3c4:	0802ed48 	.word	0x0802ed48
 800c3c8:	0802ceec 	.word	0x0802ceec
 800c3cc:	0802caec 	.word	0x0802caec
 800c3d0:	000be6e0 	.word	0x000be6e0
 800c3d4:	20000e52 	.word	0x20000e52
 800c3d8:	20000f2c 	.word	0x20000f2c
 800c3dc:	0802cf28 	.word	0x0802cf28
 800c3e0:	0802cddc 	.word	0x0802cddc
 800c3e4:	00002710 	.word	0x00002710
 800c3e8:	0802cf48 	.word	0x0802cf48
 800c3ec:	0802cf50 	.word	0x0802cf50
 800c3f0:	0802cf58 	.word	0x0802cf58
 800c3f4:	0802cf60 	.word	0x0802cf60
 800c3f8:	0802cf68 	.word	0x0802cf68
 800c3fc:	0802cf70 	.word	0x0802cf70
 800c400:	0802cf78 	.word	0x0802cf78
 800c404:	0802cfa0 	.word	0x0802cfa0
 800c408:	0802cfcc 	.word	0x0802cfcc
 800c40c:	44548000 	.word	0x44548000
 800c410:	44898000 	.word	0x44898000
 800c414:	20000f18 	.word	0x20000f18
 800c418:	0802d004 	.word	0x0802d004
 800c41c:	0802cacc 	.word	0x0802cacc
 800c420:	0000ea60 	.word	0x0000ea60
 800c424:	0802d040 	.word	0x0802d040
    break;
 800c428:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800c42a:	4b03      	ldr	r3, [pc, #12]	@ (800c438 <BMP_Upkeep+0x3b4>)
 800c42c:	781b      	ldrb	r3, [r3, #0]
}
 800c42e:	0018      	movs	r0, r3
 800c430:	46bd      	mov	sp, r7
 800c432:	b004      	add	sp, #16
 800c434:	bdb0      	pop	{r4, r5, r7, pc}
 800c436:	46c0      	nop			@ (mov r8, r8)
 800c438:	200000a2 	.word	0x200000a2

0800c43c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c442:	4b10      	ldr	r3, [pc, #64]	@ (800c484 <MX_DMA_Init+0x48>)
 800c444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c446:	4b0f      	ldr	r3, [pc, #60]	@ (800c484 <MX_DMA_Init+0x48>)
 800c448:	2101      	movs	r1, #1
 800c44a:	430a      	orrs	r2, r1
 800c44c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c44e:	4b0d      	ldr	r3, [pc, #52]	@ (800c484 <MX_DMA_Init+0x48>)
 800c450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c452:	2201      	movs	r2, #1
 800c454:	4013      	ands	r3, r2
 800c456:	607b      	str	r3, [r7, #4]
 800c458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800c45a:	2200      	movs	r2, #0
 800c45c:	2100      	movs	r1, #0
 800c45e:	200a      	movs	r0, #10
 800c460:	f009 f8dc 	bl	801561c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800c464:	200a      	movs	r0, #10
 800c466:	f009 f8ee 	bl	8015646 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800c46a:	2200      	movs	r2, #0
 800c46c:	2103      	movs	r1, #3
 800c46e:	200b      	movs	r0, #11
 800c470:	f009 f8d4 	bl	801561c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800c474:	200b      	movs	r0, #11
 800c476:	f009 f8e6 	bl	8015646 <HAL_NVIC_EnableIRQ>

}
 800c47a:	46c0      	nop			@ (mov r8, r8)
 800c47c:	46bd      	mov	sp, r7
 800c47e:	b002      	add	sp, #8
 800c480:	bd80      	pop	{r7, pc}
 800c482:	46c0      	nop			@ (mov r8, r8)
 800c484:	40021000 	.word	0x40021000

0800c488 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c488:	b590      	push	{r4, r7, lr}
 800c48a:	b087      	sub	sp, #28
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	1dbb      	adds	r3, r7, #6
 800c494:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800c496:	4b17      	ldr	r3, [pc, #92]	@ (800c4f4 <WriteUint8ArrayEeprom+0x6c>)
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c49c:	f009 fc50 	bl	8015d40 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800c4a0:	2316      	movs	r3, #22
 800c4a2:	18fb      	adds	r3, r7, r3
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	801a      	strh	r2, [r3, #0]
 800c4a8:	e015      	b.n	800c4d6 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800c4aa:	4b12      	ldr	r3, [pc, #72]	@ (800c4f4 <WriteUint8ArrayEeprom+0x6c>)
 800c4ac:	6819      	ldr	r1, [r3, #0]
 800c4ae:	2416      	movs	r4, #22
 800c4b0:	193b      	adds	r3, r7, r4
 800c4b2:	881b      	ldrh	r3, [r3, #0]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	18d3      	adds	r3, r2, r3
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	001a      	movs	r2, r3
 800c4bc:	2000      	movs	r0, #0
 800c4be:	f009 fca7 	bl	8015e10 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800c4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c4f4 <WriteUint8ArrayEeprom+0x6c>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f4 <WriteUint8ArrayEeprom+0x6c>)
 800c4ca:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c4cc:	193b      	adds	r3, r7, r4
 800c4ce:	881a      	ldrh	r2, [r3, #0]
 800c4d0:	193b      	adds	r3, r7, r4
 800c4d2:	3201      	adds	r2, #1
 800c4d4:	801a      	strh	r2, [r3, #0]
 800c4d6:	2316      	movs	r3, #22
 800c4d8:	18fa      	adds	r2, r7, r3
 800c4da:	1dbb      	adds	r3, r7, #6
 800c4dc:	8812      	ldrh	r2, [r2, #0]
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d3e2      	bcc.n	800c4aa <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c4e4:	f009 fc5a 	bl	8015d9c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800c4e8:	4b02      	ldr	r3, [pc, #8]	@ (800c4f4 <WriteUint8ArrayEeprom+0x6c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
}
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	b007      	add	sp, #28
 800c4f2:	bd90      	pop	{r4, r7, pc}
 800c4f4:	20000f50 	.word	0x20000f50

0800c4f8 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	0019      	movs	r1, r3
 800c504:	1dbb      	adds	r3, r7, #6
 800c506:	801a      	strh	r2, [r3, #0]
 800c508:	1d3b      	adds	r3, r7, #4
 800c50a:	1c0a      	adds	r2, r1, #0
 800c50c:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800c50e:	1dba      	adds	r2, r7, #6
 800c510:	1d3b      	adds	r3, r7, #4
 800c512:	8812      	ldrh	r2, [r2, #0]
 800c514:	881b      	ldrh	r3, [r3, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d806      	bhi.n	800c528 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800c51a:	1dbb      	adds	r3, r7, #6
 800c51c:	881a      	ldrh	r2, [r3, #0]
 800c51e:	68b9      	ldr	r1, [r7, #8]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	0018      	movs	r0, r3
 800c524:	f7ff ffb0 	bl	800c488 <WriteUint8ArrayEeprom>
    }
}
 800c528:	46c0      	nop			@ (mov r8, r8)
 800c52a:	46bd      	mov	sp, r7
 800c52c:	b004      	add	sp, #16
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	1dbb      	adds	r3, r7, #6
 800c53c:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c53e:	2316      	movs	r3, #22
 800c540:	18fb      	adds	r3, r7, r3
 800c542:	2200      	movs	r2, #0
 800c544:	801a      	strh	r2, [r3, #0]
 800c546:	e010      	b.n	800c56a <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800c548:	2016      	movs	r0, #22
 800c54a:	183b      	adds	r3, r7, r0
 800c54c:	881a      	ldrh	r2, [r3, #0]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	18d3      	adds	r3, r2, r3
 800c552:	0019      	movs	r1, r3
 800c554:	183b      	adds	r3, r7, r0
 800c556:	881b      	ldrh	r3, [r3, #0]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	18d3      	adds	r3, r2, r3
 800c55c:	780a      	ldrb	r2, [r1, #0]
 800c55e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c560:	183b      	adds	r3, r7, r0
 800c562:	881a      	ldrh	r2, [r3, #0]
 800c564:	183b      	adds	r3, r7, r0
 800c566:	3201      	adds	r2, #1
 800c568:	801a      	strh	r2, [r3, #0]
 800c56a:	2316      	movs	r3, #22
 800c56c:	18fa      	adds	r2, r7, r3
 800c56e:	1dbb      	adds	r3, r7, #6
 800c570:	8812      	ldrh	r2, [r2, #0]
 800c572:	881b      	ldrh	r3, [r3, #0]
 800c574:	429a      	cmp	r2, r3
 800c576:	d3e7      	bcc.n	800c548 <ReadUint8ArrayEEprom+0x18>
    }
}
 800c578:	46c0      	nop			@ (mov r8, r8)
 800c57a:	46c0      	nop			@ (mov r8, r8)
 800c57c:	46bd      	mov	sp, r7
 800c57e:	b006      	add	sp, #24
 800c580:	bd80      	pop	{r7, pc}

0800c582 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800c582:	b590      	push	{r4, r7, lr}
 800c584:	b085      	sub	sp, #20
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	000a      	movs	r2, r1
 800c58c:	1cbb      	adds	r3, r7, #2
 800c58e:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c590:	f009 fbd6 	bl	8015d40 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800c594:	230e      	movs	r3, #14
 800c596:	18fb      	adds	r3, r7, r3
 800c598:	2200      	movs	r2, #0
 800c59a:	801a      	strh	r2, [r3, #0]
 800c59c:	e00c      	b.n	800c5b8 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800c59e:	240e      	movs	r4, #14
 800c5a0:	193b      	adds	r3, r7, r4
 800c5a2:	881a      	ldrh	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	18d3      	adds	r3, r2, r3
 800c5a8:	0018      	movs	r0, r3
 800c5aa:	f009 fc05 	bl	8015db8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800c5ae:	193b      	adds	r3, r7, r4
 800c5b0:	193a      	adds	r2, r7, r4
 800c5b2:	8812      	ldrh	r2, [r2, #0]
 800c5b4:	3204      	adds	r2, #4
 800c5b6:	801a      	strh	r2, [r3, #0]
 800c5b8:	230e      	movs	r3, #14
 800c5ba:	18fa      	adds	r2, r7, r3
 800c5bc:	1cbb      	adds	r3, r7, #2
 800c5be:	8812      	ldrh	r2, [r2, #0]
 800c5c0:	881b      	ldrh	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d3eb      	bcc.n	800c59e <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c5c6:	f009 fbe9 	bl	8015d9c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800c5ca:	46c0      	nop			@ (mov r8, r8)
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	b005      	add	sp, #20
 800c5d0:	bd90      	pop	{r4, r7, pc}
	...

0800c5d4 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5e4:	d901      	bls.n	800c5ea <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800c5e6:	237f      	movs	r3, #127	@ 0x7f
 800c5e8:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800c5ea:	2017      	movs	r0, #23
 800c5ec:	183b      	adds	r3, r7, r0
 800c5ee:	490d      	ldr	r1, [pc, #52]	@ (800c624 <accessLUT10log10+0x50>)
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	188a      	adds	r2, r1, r2
 800c5f4:	7812      	ldrb	r2, [r2, #0]
 800c5f6:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800c5f8:	0001      	movs	r1, r0
 800c5fa:	187b      	adds	r3, r7, r1
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2206      	movs	r2, #6
 800c600:	4113      	asrs	r3, r2
 800c602:	001a      	movs	r2, r3
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800c608:	187b      	adds	r3, r7, r1
 800c60a:	781a      	ldrb	r2, [r3, #0]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2106      	movs	r1, #6
 800c612:	408b      	lsls	r3, r1
 800c614:	1ad2      	subs	r2, r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	601a      	str	r2, [r3, #0]
}
 800c61a:	46c0      	nop			@ (mov r8, r8)
 800c61c:	46bd      	mov	sp, r7
 800c61e:	b006      	add	sp, #24
 800c620:	bd80      	pop	{r7, pc}
 800c622:	46c0      	nop			@ (mov r8, r8)
 800c624:	0802ed70 	.word	0x0802ed70

0800c628 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800c628:	b5b0      	push	{r4, r5, r7, lr}
 800c62a:	b090      	sub	sp, #64	@ 0x40
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6138      	str	r0, [r7, #16]
 800c630:	6179      	str	r1, [r7, #20]
 800c632:	60fa      	str	r2, [r7, #12]
 800c634:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800c636:	2308      	movs	r3, #8
 800c638:	001a      	movs	r2, r3
 800c63a:	3a20      	subs	r2, #32
 800c63c:	2a00      	cmp	r2, #0
 800c63e:	db03      	blt.n	800c648 <efficient10log10+0x20>
 800c640:	2101      	movs	r1, #1
 800c642:	4091      	lsls	r1, r2
 800c644:	000d      	movs	r5, r1
 800c646:	e008      	b.n	800c65a <efficient10log10+0x32>
 800c648:	2220      	movs	r2, #32
 800c64a:	1ad2      	subs	r2, r2, r3
 800c64c:	2101      	movs	r1, #1
 800c64e:	40d1      	lsrs	r1, r2
 800c650:	000a      	movs	r2, r1
 800c652:	2100      	movs	r1, #0
 800c654:	4099      	lsls	r1, r3
 800c656:	000d      	movs	r5, r1
 800c658:	4315      	orrs	r5, r2
 800c65a:	2201      	movs	r2, #1
 800c65c:	409a      	lsls	r2, r3
 800c65e:	0014      	movs	r4, r2
 800c660:	2201      	movs	r2, #1
 800c662:	4252      	negs	r2, r2
 800c664:	17d3      	asrs	r3, r2, #31
 800c666:	1912      	adds	r2, r2, r4
 800c668:	416b      	adcs	r3, r5
 800c66a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c66c:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800c66e:	2336      	movs	r3, #54	@ 0x36
 800c670:	2208      	movs	r2, #8
 800c672:	189b      	adds	r3, r3, r2
 800c674:	19db      	adds	r3, r3, r7
 800c676:	2200      	movs	r2, #0
 800c678:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c67a:	e017      	b.n	800c6ac <efficient10log10+0x84>
    {
        P = P >> 1;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	07db      	lsls	r3, r3, #31
 800c680:	693a      	ldr	r2, [r7, #16]
 800c682:	0852      	lsrs	r2, r2, #1
 800c684:	603a      	str	r2, [r7, #0]
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	431a      	orrs	r2, r3
 800c68a:	603a      	str	r2, [r7, #0]
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	085b      	lsrs	r3, r3, #1
 800c690:	607b      	str	r3, [r7, #4]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	687c      	ldr	r4, [r7, #4]
 800c696:	613b      	str	r3, [r7, #16]
 800c698:	617c      	str	r4, [r7, #20]
        bShift++;
 800c69a:	2136      	movs	r1, #54	@ 0x36
 800c69c:	2008      	movs	r0, #8
 800c69e:	180b      	adds	r3, r1, r0
 800c6a0:	19db      	adds	r3, r3, r7
 800c6a2:	881a      	ldrh	r2, [r3, #0]
 800c6a4:	180b      	adds	r3, r1, r0
 800c6a6:	19db      	adds	r3, r3, r7
 800c6a8:	3201      	adds	r2, #1
 800c6aa:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d8e3      	bhi.n	800c67c <efficient10log10+0x54>
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d103      	bne.n	800c6c4 <efficient10log10+0x9c>
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d8db      	bhi.n	800c67c <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	2308      	movs	r3, #8
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	4099      	lsls	r1, r3
 800c6ce:	000b      	movs	r3, r1
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c6dc:	231c      	movs	r3, #28
 800c6de:	2408      	movs	r4, #8
 800c6e0:	191b      	adds	r3, r3, r4
 800c6e2:	19da      	adds	r2, r3, r7
 800c6e4:	2320      	movs	r3, #32
 800c6e6:	191b      	adds	r3, r3, r4
 800c6e8:	19d9      	adds	r1, r3, r7
 800c6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ec:	0018      	movs	r0, r3
 800c6ee:	f7ff ff71 	bl	800c5d4 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c6f2:	2215      	movs	r2, #21
 800c6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f6:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c6f8:	2036      	movs	r0, #54	@ 0x36
 800c6fa:	1902      	adds	r2, r0, r4
 800c6fc:	19d2      	adds	r2, r2, r7
 800c6fe:	8812      	ldrh	r2, [r2, #0]
 800c700:	2103      	movs	r1, #3
 800c702:	434a      	muls	r2, r1
 800c704:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c706:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c708:	0021      	movs	r1, r4
 800c70a:	1843      	adds	r3, r0, r1
 800c70c:	19db      	adds	r3, r3, r7
 800c70e:	881b      	ldrh	r3, [r3, #0]
 800c710:	2201      	movs	r2, #1
 800c712:	4353      	muls	r3, r2
 800c714:	2203      	movs	r2, #3
 800c716:	4113      	asrs	r3, r2
 800c718:	001a      	movs	r2, r3
 800c71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c71e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c720:	2314      	movs	r3, #20
 800c722:	185b      	adds	r3, r3, r1
 800c724:	19da      	adds	r2, r3, r7
 800c726:	2318      	movs	r3, #24
 800c728:	185b      	adds	r3, r3, r1
 800c72a:	19db      	adds	r3, r3, r7
 800c72c:	0011      	movs	r1, r2
 800c72e:	0018      	movs	r0, r3
 800c730:	f000 f80a 	bl	800c748 <correctIntFracNumber>
    integerPart[0] = intPart;
 800c734:	6a3a      	ldr	r2, [r7, #32]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c73a:	69fa      	ldr	r2, [r7, #28]
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	601a      	str	r2, [r3, #0]
}
 800c740:	46c0      	nop			@ (mov r8, r8)
 800c742:	46bd      	mov	sp, r7
 800c744:	b010      	add	sp, #64	@ 0x40
 800c746:	bdb0      	pop	{r4, r5, r7, pc}

0800c748 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c752:	e00a      	b.n	800c76a <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3b0a      	subs	r3, #10
 800c764:	001a      	movs	r2, r3
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b09      	cmp	r3, #9
 800c770:	dcf0      	bgt.n	800c754 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c772:	e00a      	b.n	800c78a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	1e5a      	subs	r2, r3, #1
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	330a      	adds	r3, #10
 800c784:	001a      	movs	r2, r3
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3309      	adds	r3, #9
 800c790:	dbf0      	blt.n	800c774 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	da0f      	bge.n	800c7ba <correctIntFracNumber+0x72>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	dd0b      	ble.n	800c7ba <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	1c5a      	adds	r2, r3, #1
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3b0a      	subs	r3, #10
 800c7b2:	001a      	movs	r2, r3
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c7b8:	e012      	b.n	800c7e0 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	dd0e      	ble.n	800c7e0 <correctIntFracNumber+0x98>
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	da0a      	bge.n	800c7e0 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	1e5a      	subs	r2, r3, #1
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	330a      	adds	r3, #10
 800c7da:	001a      	movs	r2, r3
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	601a      	str	r2, [r3, #0]
}
 800c7e0:	46c0      	nop			@ (mov r8, r8)
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	b002      	add	sp, #8
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c7e8:	b590      	push	{r4, r7, lr}
 800c7ea:	b08b      	sub	sp, #44	@ 0x2c
 800c7ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7ee:	2414      	movs	r4, #20
 800c7f0:	193b      	adds	r3, r7, r4
 800c7f2:	0018      	movs	r0, r3
 800c7f4:	2314      	movs	r3, #20
 800c7f6:	001a      	movs	r2, r3
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	f01a f809 	bl	8026810 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7fe:	4b8a      	ldr	r3, [pc, #552]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c802:	4b89      	ldr	r3, [pc, #548]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c804:	2104      	movs	r1, #4
 800c806:	430a      	orrs	r2, r1
 800c808:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c80a:	4b87      	ldr	r3, [pc, #540]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c80e:	2204      	movs	r2, #4
 800c810:	4013      	ands	r3, r2
 800c812:	613b      	str	r3, [r7, #16]
 800c814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c816:	4b84      	ldr	r3, [pc, #528]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c81a:	4b83      	ldr	r3, [pc, #524]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c81c:	2180      	movs	r1, #128	@ 0x80
 800c81e:	430a      	orrs	r2, r1
 800c820:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c822:	4b81      	ldr	r3, [pc, #516]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c826:	2280      	movs	r2, #128	@ 0x80
 800c828:	4013      	ands	r3, r2
 800c82a:	60fb      	str	r3, [r7, #12]
 800c82c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c82e:	4b7e      	ldr	r3, [pc, #504]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c832:	4b7d      	ldr	r3, [pc, #500]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c834:	2101      	movs	r1, #1
 800c836:	430a      	orrs	r2, r1
 800c838:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c83a:	4b7b      	ldr	r3, [pc, #492]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c83e:	2201      	movs	r2, #1
 800c840:	4013      	ands	r3, r2
 800c842:	60bb      	str	r3, [r7, #8]
 800c844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c846:	4b78      	ldr	r3, [pc, #480]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c84a:	4b77      	ldr	r3, [pc, #476]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c84c:	2102      	movs	r1, #2
 800c84e:	430a      	orrs	r2, r1
 800c850:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c852:	4b75      	ldr	r3, [pc, #468]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c856:	2202      	movs	r2, #2
 800c858:	4013      	ands	r3, r2
 800c85a:	607b      	str	r3, [r7, #4]
 800c85c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c85e:	4b72      	ldr	r3, [pc, #456]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c862:	4b71      	ldr	r3, [pc, #452]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c864:	2108      	movs	r1, #8
 800c866:	430a      	orrs	r2, r1
 800c868:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c86a:	4b6f      	ldr	r3, [pc, #444]	@ (800ca28 <MX_GPIO_Init+0x240>)
 800c86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86e:	2208      	movs	r2, #8
 800c870:	4013      	ands	r3, r2
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c876:	4b6d      	ldr	r3, [pc, #436]	@ (800ca2c <MX_GPIO_Init+0x244>)
 800c878:	2201      	movs	r2, #1
 800c87a:	2101      	movs	r1, #1
 800c87c:	0018      	movs	r0, r3
 800c87e:	f009 fcba 	bl	80161f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c882:	4b6a      	ldr	r3, [pc, #424]	@ (800ca2c <MX_GPIO_Init+0x244>)
 800c884:	2200      	movs	r2, #0
 800c886:	2102      	movs	r1, #2
 800c888:	0018      	movs	r0, r3
 800c88a:	f009 fcb4 	bl	80161f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c88e:	4968      	ldr	r1, [pc, #416]	@ (800ca30 <MX_GPIO_Init+0x248>)
 800c890:	4b68      	ldr	r3, [pc, #416]	@ (800ca34 <MX_GPIO_Init+0x24c>)
 800c892:	2201      	movs	r2, #1
 800c894:	0018      	movs	r0, r3
 800c896:	f009 fcae 	bl	80161f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c89a:	2380      	movs	r3, #128	@ 0x80
 800c89c:	011b      	lsls	r3, r3, #4
 800c89e:	4866      	ldr	r0, [pc, #408]	@ (800ca38 <MX_GPIO_Init+0x250>)
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	0019      	movs	r1, r3
 800c8a4:	f009 fca7 	bl	80161f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c8a8:	2380      	movs	r3, #128	@ 0x80
 800c8aa:	015b      	lsls	r3, r3, #5
 800c8ac:	4862      	ldr	r0, [pc, #392]	@ (800ca38 <MX_GPIO_Init+0x250>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	0019      	movs	r1, r3
 800c8b2:	f009 fca0 	bl	80161f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c8b6:	193b      	adds	r3, r7, r4
 800c8b8:	4a60      	ldr	r2, [pc, #384]	@ (800ca3c <MX_GPIO_Init+0x254>)
 800c8ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8bc:	193b      	adds	r3, r7, r4
 800c8be:	2203      	movs	r2, #3
 800c8c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8c2:	193b      	adds	r3, r7, r4
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c8c8:	193b      	adds	r3, r7, r4
 800c8ca:	4a5b      	ldr	r2, [pc, #364]	@ (800ca38 <MX_GPIO_Init+0x250>)
 800c8cc:	0019      	movs	r1, r3
 800c8ce:	0010      	movs	r0, r2
 800c8d0:	f009 faf6 	bl	8015ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c8d4:	193b      	adds	r3, r7, r4
 800c8d6:	2203      	movs	r2, #3
 800c8d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8da:	193b      	adds	r3, r7, r4
 800c8dc:	2201      	movs	r2, #1
 800c8de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8e0:	193b      	adds	r3, r7, r4
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8e6:	193b      	adds	r3, r7, r4
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c8ec:	193b      	adds	r3, r7, r4
 800c8ee:	4a4f      	ldr	r2, [pc, #316]	@ (800ca2c <MX_GPIO_Init+0x244>)
 800c8f0:	0019      	movs	r1, r3
 800c8f2:	0010      	movs	r0, r2
 800c8f4:	f009 fae4 	bl	8015ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c8f8:	193b      	adds	r3, r7, r4
 800c8fa:	2270      	movs	r2, #112	@ 0x70
 800c8fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8fe:	193b      	adds	r3, r7, r4
 800c900:	2203      	movs	r2, #3
 800c902:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c904:	193b      	adds	r3, r7, r4
 800c906:	2200      	movs	r2, #0
 800c908:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c90a:	193a      	adds	r2, r7, r4
 800c90c:	23a0      	movs	r3, #160	@ 0xa0
 800c90e:	05db      	lsls	r3, r3, #23
 800c910:	0011      	movs	r1, r2
 800c912:	0018      	movs	r0, r3
 800c914:	f009 fad4 	bl	8015ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c918:	193b      	adds	r3, r7, r4
 800c91a:	22c0      	movs	r2, #192	@ 0xc0
 800c91c:	0052      	lsls	r2, r2, #1
 800c91e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c920:	193b      	adds	r3, r7, r4
 800c922:	2200      	movs	r2, #0
 800c924:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c926:	193b      	adds	r3, r7, r4
 800c928:	2200      	movs	r2, #0
 800c92a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c92c:	193a      	adds	r2, r7, r4
 800c92e:	23a0      	movs	r3, #160	@ 0xa0
 800c930:	05db      	lsls	r3, r3, #23
 800c932:	0011      	movs	r1, r2
 800c934:	0018      	movs	r0, r3
 800c936:	f009 fac3 	bl	8015ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c93a:	193b      	adds	r3, r7, r4
 800c93c:	4a3c      	ldr	r2, [pc, #240]	@ (800ca30 <MX_GPIO_Init+0x248>)
 800c93e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c940:	193b      	adds	r3, r7, r4
 800c942:	2201      	movs	r2, #1
 800c944:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c946:	193b      	adds	r3, r7, r4
 800c948:	2200      	movs	r2, #0
 800c94a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c94c:	193b      	adds	r3, r7, r4
 800c94e:	2200      	movs	r2, #0
 800c950:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c952:	193b      	adds	r3, r7, r4
 800c954:	4a37      	ldr	r2, [pc, #220]	@ (800ca34 <MX_GPIO_Init+0x24c>)
 800c956:	0019      	movs	r1, r3
 800c958:	0010      	movs	r0, r2
 800c95a:	f009 fab1 	bl	8015ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c95e:	193b      	adds	r3, r7, r4
 800c960:	4a37      	ldr	r2, [pc, #220]	@ (800ca40 <MX_GPIO_Init+0x258>)
 800c962:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c964:	193b      	adds	r3, r7, r4
 800c966:	2203      	movs	r2, #3
 800c968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c96a:	193b      	adds	r3, r7, r4
 800c96c:	2200      	movs	r2, #0
 800c96e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c970:	193b      	adds	r3, r7, r4
 800c972:	4a30      	ldr	r2, [pc, #192]	@ (800ca34 <MX_GPIO_Init+0x24c>)
 800c974:	0019      	movs	r1, r3
 800c976:	0010      	movs	r0, r2
 800c978:	f009 faa2 	bl	8015ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c97c:	0021      	movs	r1, r4
 800c97e:	187b      	adds	r3, r7, r1
 800c980:	2280      	movs	r2, #128	@ 0x80
 800c982:	0092      	lsls	r2, r2, #2
 800c984:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c986:	000c      	movs	r4, r1
 800c988:	193b      	adds	r3, r7, r4
 800c98a:	2200      	movs	r2, #0
 800c98c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c98e:	193b      	adds	r3, r7, r4
 800c990:	2200      	movs	r2, #0
 800c992:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c994:	193b      	adds	r3, r7, r4
 800c996:	4a28      	ldr	r2, [pc, #160]	@ (800ca38 <MX_GPIO_Init+0x250>)
 800c998:	0019      	movs	r1, r3
 800c99a:	0010      	movs	r0, r2
 800c99c:	f009 fa90 	bl	8015ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c9a0:	193b      	adds	r3, r7, r4
 800c9a2:	2280      	movs	r2, #128	@ 0x80
 800c9a4:	0212      	lsls	r2, r2, #8
 800c9a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c9a8:	193b      	adds	r3, r7, r4
 800c9aa:	2288      	movs	r2, #136	@ 0x88
 800c9ac:	0352      	lsls	r2, r2, #13
 800c9ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9b0:	193b      	adds	r3, r7, r4
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c9b6:	193a      	adds	r2, r7, r4
 800c9b8:	23a0      	movs	r3, #160	@ 0xa0
 800c9ba:	05db      	lsls	r3, r3, #23
 800c9bc:	0011      	movs	r1, r2
 800c9be:	0018      	movs	r0, r3
 800c9c0:	f009 fa7e 	bl	8015ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c9c4:	0021      	movs	r1, r4
 800c9c6:	187b      	adds	r3, r7, r1
 800c9c8:	22c0      	movs	r2, #192	@ 0xc0
 800c9ca:	0152      	lsls	r2, r2, #5
 800c9cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c9ce:	000c      	movs	r4, r1
 800c9d0:	193b      	adds	r3, r7, r4
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9d6:	193b      	adds	r3, r7, r4
 800c9d8:	2200      	movs	r2, #0
 800c9da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9dc:	193b      	adds	r3, r7, r4
 800c9de:	2200      	movs	r2, #0
 800c9e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c9e2:	193b      	adds	r3, r7, r4
 800c9e4:	4a14      	ldr	r2, [pc, #80]	@ (800ca38 <MX_GPIO_Init+0x250>)
 800c9e6:	0019      	movs	r1, r3
 800c9e8:	0010      	movs	r0, r2
 800c9ea:	f009 fa69 	bl	8015ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c9ee:	0021      	movs	r1, r4
 800c9f0:	187b      	adds	r3, r7, r1
 800c9f2:	2204      	movs	r2, #4
 800c9f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c9f6:	187b      	adds	r3, r7, r1
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c9fc:	187b      	adds	r3, r7, r1
 800c9fe:	2201      	movs	r2, #1
 800ca00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800ca02:	187b      	adds	r3, r7, r1
 800ca04:	4a0f      	ldr	r2, [pc, #60]	@ (800ca44 <MX_GPIO_Init+0x25c>)
 800ca06:	0019      	movs	r1, r3
 800ca08:	0010      	movs	r0, r2
 800ca0a:	f009 fa59 	bl	8015ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800ca0e:	2200      	movs	r2, #0
 800ca10:	2100      	movs	r1, #0
 800ca12:	2007      	movs	r0, #7
 800ca14:	f008 fe02 	bl	801561c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800ca18:	2007      	movs	r0, #7
 800ca1a:	f008 fe14 	bl	8015646 <HAL_NVIC_EnableIRQ>

}
 800ca1e:	46c0      	nop			@ (mov r8, r8)
 800ca20:	46bd      	mov	sp, r7
 800ca22:	b00b      	add	sp, #44	@ 0x2c
 800ca24:	bd90      	pop	{r4, r7, pc}
 800ca26:	46c0      	nop			@ (mov r8, r8)
 800ca28:	40021000 	.word	0x40021000
 800ca2c:	50001c00 	.word	0x50001c00
 800ca30:	00000301 	.word	0x00000301
 800ca34:	50000400 	.word	0x50000400
 800ca38:	50000800 	.word	0x50000800
 800ca3c:	0000200c 	.word	0x0000200c
 800ca40:	0000403e 	.word	0x0000403e
 800ca44:	50000c00 	.word	0x50000c00

0800ca48 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2100      	movs	r1, #0
 800ca56:	0018      	movs	r0, r3
 800ca58:	f010 fad2 	bl	801d000 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2108      	movs	r1, #8
 800ca60:	0018      	movs	r0, r3
 800ca62:	f010 facd 	bl	801d000 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	210c      	movs	r1, #12
 800ca6a:	0018      	movs	r0, r3
 800ca6c:	f010 fac8 	bl	801d000 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800ca70:	2380      	movs	r3, #128	@ 0x80
 800ca72:	05db      	lsls	r3, r3, #23
 800ca74:	22fa      	movs	r2, #250	@ 0xfa
 800ca76:	0112      	lsls	r2, r2, #4
 800ca78:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800ca7a:	2380      	movs	r3, #128	@ 0x80
 800ca7c:	05db      	lsls	r3, r3, #23
 800ca7e:	22fa      	movs	r2, #250	@ 0xfa
 800ca80:	0112      	lsls	r2, r2, #4
 800ca82:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800ca84:	2380      	movs	r3, #128	@ 0x80
 800ca86:	05db      	lsls	r3, r3, #23
 800ca88:	22fa      	movs	r2, #250	@ 0xfa
 800ca8a:	0112      	lsls	r2, r2, #4
 800ca8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800ca8e:	2380      	movs	r3, #128	@ 0x80
 800ca90:	05db      	lsls	r3, r3, #23
 800ca92:	22fa      	movs	r2, #250	@ 0xfa
 800ca94:	0112      	lsls	r2, r2, #4
 800ca96:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	0018      	movs	r0, r3
 800ca9e:	f010 faaf 	bl	801d000 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	2104      	movs	r1, #4
 800caa6:	0018      	movs	r0, r3
 800caa8:	f010 faaa 	bl	801d000 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2108      	movs	r1, #8
 800cab0:	0018      	movs	r0, r3
 800cab2:	f010 faa5 	bl	801d000 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800cab6:	4b0a      	ldr	r3, [pc, #40]	@ (800cae0 <GPIO_InitPWMLEDs+0x98>)
 800cab8:	22fa      	movs	r2, #250	@ 0xfa
 800caba:	0112      	lsls	r2, r2, #4
 800cabc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800cabe:	4b08      	ldr	r3, [pc, #32]	@ (800cae0 <GPIO_InitPWMLEDs+0x98>)
 800cac0:	22fa      	movs	r2, #250	@ 0xfa
 800cac2:	0112      	lsls	r2, r2, #4
 800cac4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800cac6:	4b06      	ldr	r3, [pc, #24]	@ (800cae0 <GPIO_InitPWMLEDs+0x98>)
 800cac8:	22fa      	movs	r2, #250	@ 0xfa
 800caca:	0112      	lsls	r2, r2, #4
 800cacc:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800cace:	4b04      	ldr	r3, [pc, #16]	@ (800cae0 <GPIO_InitPWMLEDs+0x98>)
 800cad0:	22fa      	movs	r2, #250	@ 0xfa
 800cad2:	0112      	lsls	r2, r2, #4
 800cad4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800cad6:	46c0      	nop			@ (mov r8, r8)
 800cad8:	46bd      	mov	sp, r7
 800cada:	b002      	add	sp, #8
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	46c0      	nop			@ (mov r8, r8)
 800cae0:	40000400 	.word	0x40000400

0800cae4 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800caea:	1d3b      	adds	r3, r7, #4
 800caec:	0018      	movs	r0, r3
 800caee:	2314      	movs	r3, #20
 800caf0:	001a      	movs	r2, r3
 800caf2:	2100      	movs	r1, #0
 800caf4:	f019 fe8c 	bl	8026810 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800caf8:	1d3b      	adds	r3, r7, #4
 800cafa:	2205      	movs	r2, #5
 800cafc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cafe:	1d3b      	adds	r3, r7, #4
 800cb00:	2203      	movs	r2, #3
 800cb02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb04:	1d3b      	adds	r3, r7, #4
 800cb06:	2200      	movs	r2, #0
 800cb08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb0a:	1d3a      	adds	r2, r7, #4
 800cb0c:	23a0      	movs	r3, #160	@ 0xa0
 800cb0e:	05db      	lsls	r3, r3, #23
 800cb10:	0011      	movs	r1, r2
 800cb12:	0018      	movs	r0, r3
 800cb14:	f009 f9d4 	bl	8015ec0 <HAL_GPIO_Init>
}
 800cb18:	46c0      	nop			@ (mov r8, r8)
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	b006      	add	sp, #24
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800cb24:	4b1b      	ldr	r3, [pc, #108]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb26:	4a1c      	ldr	r2, [pc, #112]	@ (800cb98 <MX_I2C1_Init+0x78>)
 800cb28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800cb2a:	4b1a      	ldr	r3, [pc, #104]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb2c:	4a1b      	ldr	r2, [pc, #108]	@ (800cb9c <MX_I2C1_Init+0x7c>)
 800cb2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800cb30:	4b18      	ldr	r3, [pc, #96]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cb36:	4b17      	ldr	r3, [pc, #92]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb38:	2201      	movs	r2, #1
 800cb3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cb3c:	4b15      	ldr	r3, [pc, #84]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800cb42:	4b14      	ldr	r3, [pc, #80]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800cb48:	4b12      	ldr	r3, [pc, #72]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cb4e:	4b11      	ldr	r3, [pc, #68]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cb54:	4b0f      	ldr	r3, [pc, #60]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800cb5a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb5c:	0018      	movs	r0, r3
 800cb5e:	f009 fb83 	bl	8016268 <HAL_I2C_Init>
 800cb62:	1e03      	subs	r3, r0, #0
 800cb64:	d001      	beq.n	800cb6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800cb66:	f000 fdf5 	bl	800d754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800cb6a:	4b0a      	ldr	r3, [pc, #40]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	0018      	movs	r0, r3
 800cb70:	f00c fa60 	bl	8019034 <HAL_I2CEx_ConfigAnalogFilter>
 800cb74:	1e03      	subs	r3, r0, #0
 800cb76:	d001      	beq.n	800cb7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800cb78:	f000 fdec 	bl	800d754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800cb7c:	4b05      	ldr	r3, [pc, #20]	@ (800cb94 <MX_I2C1_Init+0x74>)
 800cb7e:	2100      	movs	r1, #0
 800cb80:	0018      	movs	r0, r3
 800cb82:	f00c faa3 	bl	80190cc <HAL_I2CEx_ConfigDigitalFilter>
 800cb86:	1e03      	subs	r3, r0, #0
 800cb88:	d001      	beq.n	800cb8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800cb8a:	f000 fde3 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800cb8e:	46c0      	nop			@ (mov r8, r8)
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	20000f54 	.word	0x20000f54
 800cb98:	40005400 	.word	0x40005400
 800cb9c:	00503d58 	.word	0x00503d58

0800cba0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800cba4:	4b1b      	ldr	r3, [pc, #108]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cba6:	4a1c      	ldr	r2, [pc, #112]	@ (800cc18 <MX_I2C2_Init+0x78>)
 800cba8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800cbaa:	4b1a      	ldr	r3, [pc, #104]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbac:	4a1b      	ldr	r2, [pc, #108]	@ (800cc1c <MX_I2C2_Init+0x7c>)
 800cbae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800cbb0:	4b18      	ldr	r3, [pc, #96]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cbb6:	4b17      	ldr	r3, [pc, #92]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbb8:	2201      	movs	r2, #1
 800cbba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cbbc:	4b15      	ldr	r3, [pc, #84]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800cbc2:	4b14      	ldr	r3, [pc, #80]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800cbc8:	4b12      	ldr	r3, [pc, #72]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cbce:	4b11      	ldr	r3, [pc, #68]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cbd4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800cbda:	4b0e      	ldr	r3, [pc, #56]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f009 fb43 	bl	8016268 <HAL_I2C_Init>
 800cbe2:	1e03      	subs	r3, r0, #0
 800cbe4:	d001      	beq.n	800cbea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800cbe6:	f000 fdb5 	bl	800d754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800cbea:	4b0a      	ldr	r3, [pc, #40]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbec:	2100      	movs	r1, #0
 800cbee:	0018      	movs	r0, r3
 800cbf0:	f00c fa20 	bl	8019034 <HAL_I2CEx_ConfigAnalogFilter>
 800cbf4:	1e03      	subs	r3, r0, #0
 800cbf6:	d001      	beq.n	800cbfc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800cbf8:	f000 fdac 	bl	800d754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800cbfc:	4b05      	ldr	r3, [pc, #20]	@ (800cc14 <MX_I2C2_Init+0x74>)
 800cbfe:	2100      	movs	r1, #0
 800cc00:	0018      	movs	r0, r3
 800cc02:	f00c fa63 	bl	80190cc <HAL_I2CEx_ConfigDigitalFilter>
 800cc06:	1e03      	subs	r3, r0, #0
 800cc08:	d001      	beq.n	800cc0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800cc0a:	f000 fda3 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800cc0e:	46c0      	nop			@ (mov r8, r8)
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	20000fa8 	.word	0x20000fa8
 800cc18:	40005800 	.word	0x40005800
 800cc1c:	00503d58 	.word	0x00503d58

0800cc20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	b08b      	sub	sp, #44	@ 0x2c
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc28:	2414      	movs	r4, #20
 800cc2a:	193b      	adds	r3, r7, r4
 800cc2c:	0018      	movs	r0, r3
 800cc2e:	2314      	movs	r3, #20
 800cc30:	001a      	movs	r2, r3
 800cc32:	2100      	movs	r1, #0
 800cc34:	f019 fdec 	bl	8026810 <memset>
  if(i2cHandle->Instance==I2C1)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a5d      	ldr	r2, [pc, #372]	@ (800cdb4 <HAL_I2C_MspInit+0x194>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d000      	beq.n	800cc44 <HAL_I2C_MspInit+0x24>
 800cc42:	e083      	b.n	800cd4c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc44:	4b5c      	ldr	r3, [pc, #368]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cc46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc48:	4b5b      	ldr	r3, [pc, #364]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cc4a:	2102      	movs	r1, #2
 800cc4c:	430a      	orrs	r2, r1
 800cc4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cc50:	4b59      	ldr	r3, [pc, #356]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc54:	2202      	movs	r2, #2
 800cc56:	4013      	ands	r3, r2
 800cc58:	613b      	str	r3, [r7, #16]
 800cc5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cc5c:	0021      	movs	r1, r4
 800cc5e:	187b      	adds	r3, r7, r1
 800cc60:	22c0      	movs	r2, #192	@ 0xc0
 800cc62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cc64:	187b      	adds	r3, r7, r1
 800cc66:	2212      	movs	r2, #18
 800cc68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc6a:	187b      	adds	r3, r7, r1
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc70:	187b      	adds	r3, r7, r1
 800cc72:	2203      	movs	r2, #3
 800cc74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800cc76:	187b      	adds	r3, r7, r1
 800cc78:	2201      	movs	r2, #1
 800cc7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc7c:	187b      	adds	r3, r7, r1
 800cc7e:	4a4f      	ldr	r2, [pc, #316]	@ (800cdbc <HAL_I2C_MspInit+0x19c>)
 800cc80:	0019      	movs	r1, r3
 800cc82:	0010      	movs	r0, r2
 800cc84:	f009 f91c 	bl	8015ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800cc88:	4b4b      	ldr	r3, [pc, #300]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cc8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc8c:	4b4a      	ldr	r3, [pc, #296]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cc8e:	2180      	movs	r1, #128	@ 0x80
 800cc90:	0389      	lsls	r1, r1, #14
 800cc92:	430a      	orrs	r2, r1
 800cc94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800cc96:	4b4a      	ldr	r3, [pc, #296]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800cc98:	4a4a      	ldr	r2, [pc, #296]	@ (800cdc4 <HAL_I2C_MspInit+0x1a4>)
 800cc9a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800cc9c:	4b48      	ldr	r3, [pc, #288]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800cc9e:	2206      	movs	r2, #6
 800cca0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cca2:	4b47      	ldr	r3, [pc, #284]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cca8:	4b45      	ldr	r3, [pc, #276]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ccae:	4b44      	ldr	r3, [pc, #272]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800ccb0:	2280      	movs	r2, #128	@ 0x80
 800ccb2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ccb4:	4b42      	ldr	r3, [pc, #264]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ccba:	4b41      	ldr	r3, [pc, #260]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800ccc0:	4b3f      	ldr	r3, [pc, #252]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ccc6:	4b3e      	ldr	r3, [pc, #248]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800cccc:	4b3c      	ldr	r3, [pc, #240]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800ccce:	0018      	movs	r0, r3
 800ccd0:	f008 fcda 	bl	8015688 <HAL_DMA_Init>
 800ccd4:	1e03      	subs	r3, r0, #0
 800ccd6:	d001      	beq.n	800ccdc <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800ccd8:	f000 fd3c 	bl	800d754 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a38      	ldr	r2, [pc, #224]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800cce0:	63da      	str	r2, [r3, #60]	@ 0x3c
 800cce2:	4b37      	ldr	r3, [pc, #220]	@ (800cdc0 <HAL_I2C_MspInit+0x1a0>)
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800cce8:	4b37      	ldr	r3, [pc, #220]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800ccea:	4a38      	ldr	r2, [pc, #224]	@ (800cdcc <HAL_I2C_MspInit+0x1ac>)
 800ccec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800ccee:	4b36      	ldr	r3, [pc, #216]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800ccf0:	2206      	movs	r2, #6
 800ccf2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ccf4:	4b34      	ldr	r3, [pc, #208]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800ccf6:	2210      	movs	r2, #16
 800ccf8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ccfa:	4b33      	ldr	r3, [pc, #204]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cd00:	4b31      	ldr	r3, [pc, #196]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800cd02:	2280      	movs	r2, #128	@ 0x80
 800cd04:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cd06:	4b30      	ldr	r3, [pc, #192]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cd0c:	4b2e      	ldr	r3, [pc, #184]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800cd12:	4b2d      	ldr	r3, [pc, #180]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800cd18:	4b2b      	ldr	r3, [pc, #172]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800cd1e:	4b2a      	ldr	r3, [pc, #168]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800cd20:	0018      	movs	r0, r3
 800cd22:	f008 fcb1 	bl	8015688 <HAL_DMA_Init>
 800cd26:	1e03      	subs	r3, r0, #0
 800cd28:	d001      	beq.n	800cd2e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800cd2a:	f000 fd13 	bl	800d754 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a25      	ldr	r2, [pc, #148]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800cd32:	639a      	str	r2, [r3, #56]	@ 0x38
 800cd34:	4b24      	ldr	r3, [pc, #144]	@ (800cdc8 <HAL_I2C_MspInit+0x1a8>)
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	2017      	movs	r0, #23
 800cd40:	f008 fc6c 	bl	801561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800cd44:	2017      	movs	r0, #23
 800cd46:	f008 fc7e 	bl	8015646 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800cd4a:	e02e      	b.n	800cdaa <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a1f      	ldr	r2, [pc, #124]	@ (800cdd0 <HAL_I2C_MspInit+0x1b0>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d129      	bne.n	800cdaa <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd56:	4b18      	ldr	r3, [pc, #96]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd5a:	4b17      	ldr	r3, [pc, #92]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cd5c:	2102      	movs	r1, #2
 800cd5e:	430a      	orrs	r2, r1
 800cd60:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cd62:	4b15      	ldr	r3, [pc, #84]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd66:	2202      	movs	r2, #2
 800cd68:	4013      	ands	r3, r2
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800cd6e:	2114      	movs	r1, #20
 800cd70:	187b      	adds	r3, r7, r1
 800cd72:	22c0      	movs	r2, #192	@ 0xc0
 800cd74:	0112      	lsls	r2, r2, #4
 800cd76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cd78:	187b      	adds	r3, r7, r1
 800cd7a:	2212      	movs	r2, #18
 800cd7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd7e:	187b      	adds	r3, r7, r1
 800cd80:	2200      	movs	r2, #0
 800cd82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd84:	187b      	adds	r3, r7, r1
 800cd86:	2203      	movs	r2, #3
 800cd88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800cd8a:	187b      	adds	r3, r7, r1
 800cd8c:	2206      	movs	r2, #6
 800cd8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd90:	187b      	adds	r3, r7, r1
 800cd92:	4a0a      	ldr	r2, [pc, #40]	@ (800cdbc <HAL_I2C_MspInit+0x19c>)
 800cd94:	0019      	movs	r1, r3
 800cd96:	0010      	movs	r0, r2
 800cd98:	f009 f892 	bl	8015ec0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800cd9c:	4b06      	ldr	r3, [pc, #24]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cd9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cda0:	4b05      	ldr	r3, [pc, #20]	@ (800cdb8 <HAL_I2C_MspInit+0x198>)
 800cda2:	2180      	movs	r1, #128	@ 0x80
 800cda4:	03c9      	lsls	r1, r1, #15
 800cda6:	430a      	orrs	r2, r1
 800cda8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	46bd      	mov	sp, r7
 800cdae:	b00b      	add	sp, #44	@ 0x2c
 800cdb0:	bd90      	pop	{r4, r7, pc}
 800cdb2:	46c0      	nop			@ (mov r8, r8)
 800cdb4:	40005400 	.word	0x40005400
 800cdb8:	40021000 	.word	0x40021000
 800cdbc:	50000400 	.word	0x50000400
 800cdc0:	20000ffc 	.word	0x20000ffc
 800cdc4:	40020030 	.word	0x40020030
 800cdc8:	20001044 	.word	0x20001044
 800cdcc:	4002001c 	.word	0x4002001c
 800cdd0:	40005800 	.word	0x40005800

0800cdd4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800cdd8:	4b10      	ldr	r3, [pc, #64]	@ (800ce1c <MX_I2S2_Init+0x48>)
 800cdda:	4a11      	ldr	r2, [pc, #68]	@ (800ce20 <MX_I2S2_Init+0x4c>)
 800cddc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800cdde:	4b0f      	ldr	r3, [pc, #60]	@ (800ce1c <MX_I2S2_Init+0x48>)
 800cde0:	22c0      	movs	r2, #192	@ 0xc0
 800cde2:	0092      	lsls	r2, r2, #2
 800cde4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800cde6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce1c <MX_I2S2_Init+0x48>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800cdec:	4b0b      	ldr	r3, [pc, #44]	@ (800ce1c <MX_I2S2_Init+0x48>)
 800cdee:	2203      	movs	r2, #3
 800cdf0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800cdf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ce1c <MX_I2S2_Init+0x48>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800cdf8:	4b08      	ldr	r3, [pc, #32]	@ (800ce1c <MX_I2S2_Init+0x48>)
 800cdfa:	22fa      	movs	r2, #250	@ 0xfa
 800cdfc:	0192      	lsls	r2, r2, #6
 800cdfe:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800ce00:	4b06      	ldr	r3, [pc, #24]	@ (800ce1c <MX_I2S2_Init+0x48>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800ce06:	4b05      	ldr	r3, [pc, #20]	@ (800ce1c <MX_I2S2_Init+0x48>)
 800ce08:	0018      	movs	r0, r3
 800ce0a:	f00c f9ab 	bl	8019164 <HAL_I2S_Init>
 800ce0e:	1e03      	subs	r3, r0, #0
 800ce10:	d001      	beq.n	800ce16 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800ce12:	f000 fc9f 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800ce16:	46c0      	nop			@ (mov r8, r8)
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	2000108c 	.word	0x2000108c
 800ce20:	40003800 	.word	0x40003800

0800ce24 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b089      	sub	sp, #36	@ 0x24
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce2c:	240c      	movs	r4, #12
 800ce2e:	193b      	adds	r3, r7, r4
 800ce30:	0018      	movs	r0, r3
 800ce32:	2314      	movs	r3, #20
 800ce34:	001a      	movs	r2, r3
 800ce36:	2100      	movs	r1, #0
 800ce38:	f019 fcea 	bl	8026810 <memset>
  if(i2sHandle->Instance==SPI2)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a2d      	ldr	r2, [pc, #180]	@ (800cef8 <HAL_I2S_MspInit+0xd4>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d154      	bne.n	800cef0 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ce46:	4b2d      	ldr	r3, [pc, #180]	@ (800cefc <HAL_I2S_MspInit+0xd8>)
 800ce48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce4a:	4b2c      	ldr	r3, [pc, #176]	@ (800cefc <HAL_I2S_MspInit+0xd8>)
 800ce4c:	2180      	movs	r1, #128	@ 0x80
 800ce4e:	01c9      	lsls	r1, r1, #7
 800ce50:	430a      	orrs	r2, r1
 800ce52:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce54:	4b29      	ldr	r3, [pc, #164]	@ (800cefc <HAL_I2S_MspInit+0xd8>)
 800ce56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce58:	4b28      	ldr	r3, [pc, #160]	@ (800cefc <HAL_I2S_MspInit+0xd8>)
 800ce5a:	2102      	movs	r1, #2
 800ce5c:	430a      	orrs	r2, r1
 800ce5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ce60:	4b26      	ldr	r3, [pc, #152]	@ (800cefc <HAL_I2S_MspInit+0xd8>)
 800ce62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce64:	2202      	movs	r2, #2
 800ce66:	4013      	ands	r3, r2
 800ce68:	60bb      	str	r3, [r7, #8]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800ce6c:	193b      	adds	r3, r7, r4
 800ce6e:	22b0      	movs	r2, #176	@ 0xb0
 800ce70:	0212      	lsls	r2, r2, #8
 800ce72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce74:	0021      	movs	r1, r4
 800ce76:	187b      	adds	r3, r7, r1
 800ce78:	2202      	movs	r2, #2
 800ce7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce7c:	187b      	adds	r3, r7, r1
 800ce7e:	2200      	movs	r2, #0
 800ce80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce82:	187b      	adds	r3, r7, r1
 800ce84:	2200      	movs	r2, #0
 800ce86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800ce88:	187b      	adds	r3, r7, r1
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce8e:	187b      	adds	r3, r7, r1
 800ce90:	4a1b      	ldr	r2, [pc, #108]	@ (800cf00 <HAL_I2S_MspInit+0xdc>)
 800ce92:	0019      	movs	r1, r3
 800ce94:	0010      	movs	r0, r2
 800ce96:	f009 f813 	bl	8015ec0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800ce9a:	4b1a      	ldr	r3, [pc, #104]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800ce9c:	4a1a      	ldr	r2, [pc, #104]	@ (800cf08 <HAL_I2S_MspInit+0xe4>)
 800ce9e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800cea0:	4b18      	ldr	r3, [pc, #96]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800cea2:	2202      	movs	r2, #2
 800cea4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cea6:	4b17      	ldr	r3, [pc, #92]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ceac:	4b15      	ldr	r3, [pc, #84]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800ceae:	2200      	movs	r2, #0
 800ceb0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ceb2:	4b14      	ldr	r3, [pc, #80]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800ceb4:	2280      	movs	r2, #128	@ 0x80
 800ceb6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ceb8:	4b12      	ldr	r3, [pc, #72]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800ceba:	2280      	movs	r2, #128	@ 0x80
 800cebc:	0052      	lsls	r2, r2, #1
 800cebe:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cec0:	4b10      	ldr	r3, [pc, #64]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800cec2:	2280      	movs	r2, #128	@ 0x80
 800cec4:	00d2      	lsls	r2, r2, #3
 800cec6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800cec8:	4b0e      	ldr	r3, [pc, #56]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800ceca:	2220      	movs	r2, #32
 800cecc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cece:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800ced0:	2200      	movs	r2, #0
 800ced2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800ced4:	4b0b      	ldr	r3, [pc, #44]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800ced6:	0018      	movs	r0, r3
 800ced8:	f008 fbd6 	bl	8015688 <HAL_DMA_Init>
 800cedc:	1e03      	subs	r3, r0, #0
 800cede:	d001      	beq.n	800cee4 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800cee0:	f000 fc38 	bl	800d754 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4a07      	ldr	r2, [pc, #28]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800cee8:	631a      	str	r2, [r3, #48]	@ 0x30
 800ceea:	4b06      	ldr	r3, [pc, #24]	@ (800cf04 <HAL_I2S_MspInit+0xe0>)
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800cef0:	46c0      	nop			@ (mov r8, r8)
 800cef2:	46bd      	mov	sp, r7
 800cef4:	b009      	add	sp, #36	@ 0x24
 800cef6:	bd90      	pop	{r4, r7, pc}
 800cef8:	40003800 	.word	0x40003800
 800cefc:	40021000 	.word	0x40021000
 800cf00:	50000400 	.word	0x50000400
 800cf04:	200010c8 	.word	0x200010c8
 800cf08:	40020044 	.word	0x40020044

0800cf0c <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
  testDone = true;
 800cf10:	4b14      	ldr	r3, [pc, #80]	@ (800cf64 <SetTestDone+0x58>)
 800cf12:	2201      	movs	r2, #1
 800cf14:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800cf16:	23fa      	movs	r3, #250	@ 0xfa
 800cf18:	005b      	lsls	r3, r3, #1
 800cf1a:	0018      	movs	r0, r3
 800cf1c:	f007 fee4 	bl	8014ce8 <HAL_Delay>
  SetDBLED(false, false, true);
 800cf20:	2201      	movs	r2, #1
 800cf22:	2100      	movs	r1, #0
 800cf24:	2000      	movs	r0, #0
 800cf26:	f005 fe31 	bl	8012b8c <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800cf2a:	4a0f      	ldr	r2, [pc, #60]	@ (800cf68 <SetTestDone+0x5c>)
 800cf2c:	23fa      	movs	r3, #250	@ 0xfa
 800cf2e:	0119      	lsls	r1, r3, #4
 800cf30:	23fa      	movs	r3, #250	@ 0xfa
 800cf32:	011b      	lsls	r3, r3, #4
 800cf34:	0018      	movs	r0, r3
 800cf36:	f005 fdf5 	bl	8012b24 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800cf3a:	4a0b      	ldr	r2, [pc, #44]	@ (800cf68 <SetTestDone+0x5c>)
 800cf3c:	23fa      	movs	r3, #250	@ 0xfa
 800cf3e:	0119      	lsls	r1, r3, #4
 800cf40:	23fa      	movs	r3, #250	@ 0xfa
 800cf42:	011b      	lsls	r3, r3, #4
 800cf44:	0018      	movs	r0, r3
 800cf46:	f005 fe6b 	bl	8012c20 <SetVocLED>
  HAL_Delay(500);
 800cf4a:	23fa      	movs	r3, #250	@ 0xfa
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	0018      	movs	r0, r3
 800cf50:	f007 feca 	bl	8014ce8 <HAL_Delay>
  SetLEDsOff();
 800cf54:	f005 ffa4 	bl	8012ea0 <SetLEDsOff>
  InitDone();
 800cf58:	f005 fd30 	bl	80129bc <InitDone>
}
 800cf5c:	46c0      	nop			@ (mov r8, r8)
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	46c0      	nop			@ (mov r8, r8)
 800cf64:	20001110 	.word	0x20001110
 800cf68:	00000bb8 	.word	0x00000bb8

0800cf6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cf72:	f007 fe49 	bl	8014c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cf76:	f000 fa81 	bl	800d47c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cf7a:	f7ff fc35 	bl	800c7e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800cf7e:	f7ff fa5d 	bl	800c43c <MX_DMA_Init>
  MX_I2C1_Init();
 800cf82:	f7ff fdcd 	bl	800cb20 <MX_I2C1_Init>
  MX_I2S2_Init();
 800cf86:	f7ff ff25 	bl	800cdd4 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800cf8a:	f006 ff3d 	bl	8013e08 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800cf8e:	f7ff fe07 	bl	800cba0 <MX_I2C2_Init>
  MX_TIM2_Init();
 800cf92:	f006 fd31 	bl	80139f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800cf96:	f006 fda3 	bl	8013ae0 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800cf9a:	f006 ff65 	bl	8013e68 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800cf9e:	f7fd fea7 	bl	800acf0 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800cfa2:	f016 f929 	bl	80231f8 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800cfa6:	f001 fc31 	bl	800e80c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800cfaa:	f006 fef7 	bl	8013d9c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800cfae:	f006 fe15 	bl	8013bdc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (Check_USB_PowerOn())
 800cfb2:	f7fc feb9 	bl	8009d28 <Check_USB_PowerOn>
 800cfb6:	1e03      	subs	r3, r0, #0
 800cfb8:	d006      	beq.n	800cfc8 <main+0x5c>
    while (HAL_GetTick() < 650);  // Wait for the USB to become ready
 800cfba:	46c0      	nop			@ (mov r8, r8)
 800cfbc:	f007 fe8a 	bl	8014cd4 <HAL_GetTick>
 800cfc0:	0003      	movs	r3, r0
 800cfc2:	4aac      	ldr	r2, [pc, #688]	@ (800d274 <main+0x308>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d9f9      	bls.n	800cfbc <main+0x50>
	 * : Put SSID in EEPROM
	 * : Turn on heater if humidity is too high
	 * : LEDs indicator for air quality
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800cfc8:	4aab      	ldr	r2, [pc, #684]	@ (800d278 <main+0x30c>)
 800cfca:	4bac      	ldr	r3, [pc, #688]	@ (800d27c <main+0x310>)
 800cfcc:	0011      	movs	r1, r2
 800cfce:	0018      	movs	r0, r3
 800cfd0:	f7ff fd3a 	bl	800ca48 <GPIO_InitPWMLEDs>
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800cfd4:	4aaa      	ldr	r2, [pc, #680]	@ (800d280 <main+0x314>)
 800cfd6:	4bab      	ldr	r3, [pc, #684]	@ (800d284 <main+0x318>)
 800cfd8:	0019      	movs	r1, r3
 800cfda:	2002      	movs	r0, #2
 800cfdc:	f007 f902 	bl	80141e4 <CreateLine>
  BinaryReleaseInfo();
 800cfe0:	f007 f994 	bl	801430c <BinaryReleaseInfo>
  ReadUint8ArrayEEprom(USBlogstatusConfigAddr, (uint8_t*)&usblog, uint8_tSize);
 800cfe4:	4ba8      	ldr	r3, [pc, #672]	@ (800d288 <main+0x31c>)
 800cfe6:	48a9      	ldr	r0, [pc, #676]	@ (800d28c <main+0x320>)
 800cfe8:	2201      	movs	r2, #1
 800cfea:	0019      	movs	r1, r3
 800cfec:	f7ff faa0 	bl	800c530 <ReadUint8ArrayEEprom>
  charge = Battery_Upkeep();
 800cff0:	f006 fb8a 	bl	8013708 <Battery_Upkeep>
 800cff4:	0003      	movs	r3, r0
 800cff6:	001a      	movs	r2, r3
 800cff8:	4ba5      	ldr	r3, [pc, #660]	@ (800d290 <main+0x324>)
 800cffa:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800cffc:	4ba4      	ldr	r3, [pc, #656]	@ (800d290 <main+0x324>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d113      	bne.n	800d02c <main+0xc0>
    SetAllREDLED();
 800d004:	f005 ff68 	bl	8012ed8 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800d008:	f7fc fdd8 	bl	8009bbc <ReadBatteryVoltage>
 800d00c:	1c03      	adds	r3, r0, #0
 800d00e:	1c18      	adds	r0, r3, #0
 800d010:	f7f6 fc40 	bl	8003894 <__aeabi_f2d>
 800d014:	0002      	movs	r2, r0
 800d016:	000b      	movs	r3, r1
 800d018:	489e      	ldr	r0, [pc, #632]	@ (800d294 <main+0x328>)
 800d01a:	499a      	ldr	r1, [pc, #616]	@ (800d284 <main+0x318>)
 800d01c:	9200      	str	r2, [sp, #0]
 800d01e:	9301      	str	r3, [sp, #4]
 800d020:	0002      	movs	r2, r0
 800d022:	2002      	movs	r0, #2
 800d024:	f007 f8de 	bl	80141e4 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800d028:	f7fd fb2c 	bl	800a684 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800d02c:	f7fc ff04 	bl	8009e38 <UserButton_Pressed>
 800d030:	1e03      	subs	r3, r0, #0
 800d032:	d004      	beq.n	800d03e <main+0xd2>
    EnableESPProg();
 800d034:	f016 f9bc 	bl	80233b0 <EnableESPProg>
    ESP_Programming = true;
 800d038:	4b97      	ldr	r3, [pc, #604]	@ (800d298 <main+0x32c>)
 800d03a:	2201      	movs	r2, #1
 800d03c:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800d03e:	2003      	movs	r0, #3
 800d040:	f007 f94a 	bl	80142d8 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d044:	4995      	ldr	r1, [pc, #596]	@ (800d29c <main+0x330>)
 800d046:	4b96      	ldr	r3, [pc, #600]	@ (800d2a0 <main+0x334>)
 800d048:	2201      	movs	r2, #1
 800d04a:	0018      	movs	r0, r3
 800d04c:	f010 fc38 	bl	801d8c0 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800d050:	4b94      	ldr	r3, [pc, #592]	@ (800d2a4 <main+0x338>)
 800d052:	0018      	movs	r0, r3
 800d054:	f7fd fc52 	bl	800a8fc <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800d058:	4a93      	ldr	r2, [pc, #588]	@ (800d2a8 <main+0x33c>)
 800d05a:	4994      	ldr	r1, [pc, #592]	@ (800d2ac <main+0x340>)
 800d05c:	4894      	ldr	r0, [pc, #592]	@ (800d2b0 <main+0x344>)
 800d05e:	230b      	movs	r3, #11
 800d060:	f004 fe22 	bl	8011ca8 <soundInit>
 800d064:	0003      	movs	r3, r0
 800d066:	001a      	movs	r2, r3
 800d068:	2301      	movs	r3, #1
 800d06a:	4053      	eors	r3, r2
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d005      	beq.n	800d07e <main+0x112>
    errorHandler(__func__, __LINE__, __FILE__);
 800d072:	4a90      	ldr	r2, [pc, #576]	@ (800d2b4 <main+0x348>)
 800d074:	4b90      	ldr	r3, [pc, #576]	@ (800d2b8 <main+0x34c>)
 800d076:	21f4      	movs	r1, #244	@ 0xf4
 800d078:	0018      	movs	r0, r3
 800d07a:	f007 f99b 	bl	80143b4 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800d07e:	4b8f      	ldr	r3, [pc, #572]	@ (800d2bc <main+0x350>)
 800d080:	4a8f      	ldr	r2, [pc, #572]	@ (800d2c0 <main+0x354>)
 800d082:	498a      	ldr	r1, [pc, #552]	@ (800d2ac <main+0x340>)
 800d084:	488f      	ldr	r0, [pc, #572]	@ (800d2c4 <main+0x358>)
 800d086:	f000 fc57 	bl	800d938 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800d08a:	f007 fe23 	bl	8014cd4 <HAL_GetTick>
 800d08e:	0003      	movs	r3, r0
 800d090:	4a8d      	ldr	r2, [pc, #564]	@ (800d2c8 <main+0x35c>)
 800d092:	189a      	adds	r2, r3, r2
 800d094:	4b8d      	ldr	r3, [pc, #564]	@ (800d2cc <main+0x360>)
 800d096:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800d098:	f7fc fe46 	bl	8009d28 <Check_USB_PowerOn>
 800d09c:	0003      	movs	r3, r0
 800d09e:	1e5a      	subs	r2, r3, #1
 800d0a0:	4193      	sbcs	r3, r2
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	4053      	eors	r3, r2
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	1c1a      	adds	r2, r3, #0
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	4b87      	ldr	r3, [pc, #540]	@ (800d2d0 <main+0x364>)
 800d0b4:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800d0b6:	f7fc fe37 	bl	8009d28 <Check_USB_PowerOn>
 800d0ba:	1e03      	subs	r3, r0, #0
 800d0bc:	d003      	beq.n	800d0c6 <main+0x15a>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800d0be:	4b85      	ldr	r3, [pc, #532]	@ (800d2d4 <main+0x368>)
 800d0c0:	0018      	movs	r0, r3
 800d0c2:	f7fb fd1d 	bl	8008b00 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800d0c6:	4b84      	ldr	r3, [pc, #528]	@ (800d2d8 <main+0x36c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	f007 f834 	bl	8014138 <TimestampIsReached>
 800d0d0:	1e03      	subs	r3, r0, #0
 800d0d2:	d00e      	beq.n	800d0f2 <main+0x186>
      charge = Battery_Upkeep();
 800d0d4:	f006 fb18 	bl	8013708 <Battery_Upkeep>
 800d0d8:	0003      	movs	r3, r0
 800d0da:	001a      	movs	r2, r3
 800d0dc:	4b6c      	ldr	r3, [pc, #432]	@ (800d290 <main+0x324>)
 800d0de:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800d0e0:	f007 fdf8 	bl	8014cd4 <HAL_GetTick>
 800d0e4:	0003      	movs	r3, r0
 800d0e6:	4a7d      	ldr	r2, [pc, #500]	@ (800d2dc <main+0x370>)
 800d0e8:	189a      	adds	r2, r3, r2
 800d0ea:	4b7b      	ldr	r3, [pc, #492]	@ (800d2d8 <main+0x36c>)
 800d0ec:	601a      	str	r2, [r3, #0]
      showTime();
 800d0ee:	f7fc fecd 	bl	8009e8c <showTime>

    }
    configCheck();
 800d0f2:	f006 f965 	bl	80133c0 <configCheck>
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800d0f6:	4b66      	ldr	r3, [pc, #408]	@ (800d290 <main+0x324>)
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d003      	beq.n	800d106 <main+0x19a>
 800d0fe:	4b64      	ldr	r3, [pc, #400]	@ (800d290 <main+0x324>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d120      	bne.n	800d148 <main+0x1dc>
      WalkAllRedLED();
 800d106:	f005 ff27 	bl	8012f58 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800d10a:	4b75      	ldr	r3, [pc, #468]	@ (800d2e0 <main+0x374>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      if ((charge == BATTERY_LOW) && (sendpwremail == CLEAR) && !EspTurnedOn && (!Check_USB_PowerOn())) {
 800d110:	4b5f      	ldr	r3, [pc, #380]	@ (800d290 <main+0x324>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d117      	bne.n	800d148 <main+0x1dc>
 800d118:	4b72      	ldr	r3, [pc, #456]	@ (800d2e4 <main+0x378>)
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d113      	bne.n	800d148 <main+0x1dc>
 800d120:	4b71      	ldr	r3, [pc, #452]	@ (800d2e8 <main+0x37c>)
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	2201      	movs	r2, #1
 800d126:	4053      	eors	r3, r2
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00c      	beq.n	800d148 <main+0x1dc>
 800d12e:	f7fc fdfb 	bl	8009d28 <Check_USB_PowerOn>
 800d132:	0003      	movs	r3, r0
 800d134:	001a      	movs	r2, r3
 800d136:	2301      	movs	r3, #1
 800d138:	4053      	eors	r3, r2
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d003      	beq.n	800d148 <main+0x1dc>
        setModePowerMail();
 800d140:	f7f7 fc96 	bl	8004a70 <setModePowerMail>
        ESP_Upkeep();
 800d144:	f7fa fb06 	bl	8007754 <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800d148:	4b68      	ldr	r3, [pc, #416]	@ (800d2ec <main+0x380>)
 800d14a:	2200      	movs	r2, #0
 800d14c:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800d14e:	4b50      	ldr	r3, [pc, #320]	@ (800d290 <main+0x324>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10a      	bne.n	800d16c <main+0x200>
 800d156:	4b66      	ldr	r3, [pc, #408]	@ (800d2f0 <main+0x384>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b09      	cmp	r3, #9
 800d15c:	d106      	bne.n	800d16c <main+0x200>
       batteryEmpty = true;
 800d15e:	4b65      	ldr	r3, [pc, #404]	@ (800d2f4 <main+0x388>)
 800d160:	2201      	movs	r2, #1
 800d162:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(120); // light up the leds every 2 minutes
 800d164:	2078      	movs	r0, #120	@ 0x78
 800d166:	f7fd faad 	bl	800a6c4 <Enter_Stop_Mode_for_empty_battery>
 800d16a:	e002      	b.n	800d172 <main+0x206>
    }
    else{
      batteryEmpty = false;
 800d16c:	4b61      	ldr	r3, [pc, #388]	@ (800d2f4 <main+0x388>)
 800d16e:	2200      	movs	r2, #0
 800d170:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800d172:	4b61      	ldr	r3, [pc, #388]	@ (800d2f8 <main+0x38c>)
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d100      	bne.n	800d17c <main+0x210>
 800d17a:	e0f2      	b.n	800d362 <main+0x3f6>
 800d17c:	4b46      	ldr	r3, [pc, #280]	@ (800d298 <main+0x32c>)
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	2201      	movs	r2, #1
 800d182:	4053      	eors	r3, r2
 800d184:	b2db      	uxtb	r3, r3
 800d186:	2b00      	cmp	r3, #0
 800d188:	d100      	bne.n	800d18c <main+0x220>
 800d18a:	e0ea      	b.n	800d362 <main+0x3f6>
 800d18c:	4b59      	ldr	r3, [pc, #356]	@ (800d2f4 <main+0x388>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	2201      	movs	r2, #1
 800d192:	4053      	eors	r3, r2
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b00      	cmp	r3, #0
 800d198:	d100      	bne.n	800d19c <main+0x230>
 800d19a:	e0e2      	b.n	800d362 <main+0x3f6>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800d19c:	4b4c      	ldr	r3, [pc, #304]	@ (800d2d0 <main+0x364>)
 800d19e:	781a      	ldrb	r2, [r3, #0]
 800d1a0:	4b56      	ldr	r3, [pc, #344]	@ (800d2fc <main+0x390>)
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d03a      	beq.n	800d21e <main+0x2b2>
        if (IsSGPPresent() && !usbPluggedIn) {
 800d1a8:	f000 fb58 	bl	800d85c <IsSGPPresent>
 800d1ac:	1e03      	subs	r3, r0, #0
 800d1ae:	d009      	beq.n	800d1c4 <main+0x258>
 800d1b0:	4b52      	ldr	r3, [pc, #328]	@ (800d2fc <main+0x390>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	4053      	eors	r3, r2
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d002      	beq.n	800d1c4 <main+0x258>
          SetVOCSensorDIS_ENA(true);
 800d1be:	2001      	movs	r0, #1
 800d1c0:	f000 fb56 	bl	800d870 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800d1c4:	4b4e      	ldr	r3, [pc, #312]	@ (800d300 <main+0x394>)
 800d1c6:	791b      	ldrb	r3, [r3, #4]
 800d1c8:	2b34      	cmp	r3, #52	@ 0x34
 800d1ca:	d003      	beq.n	800d1d4 <main+0x268>
 800d1cc:	4b4c      	ldr	r3, [pc, #304]	@ (800d300 <main+0x394>)
 800d1ce:	791b      	ldrb	r3, [r3, #4]
 800d1d0:	2b35      	cmp	r3, #53	@ 0x35
 800d1d2:	d106      	bne.n	800d1e2 <main+0x276>
 800d1d4:	4b49      	ldr	r3, [pc, #292]	@ (800d2fc <main+0x390>)
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d002      	beq.n	800d1e2 <main+0x276>
          SetVOCSensorDIS_ENA(false);
 800d1dc:	2000      	movs	r0, #0
 800d1de:	f000 fb47 	bl	800d870 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800d1e2:	4b46      	ldr	r3, [pc, #280]	@ (800d2fc <main+0x390>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	4053      	eors	r3, r2
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d012      	beq.n	800d216 <main+0x2aa>
 800d1f0:	f007 fd70 	bl	8014cd4 <HAL_GetTick>
 800d1f4:	0003      	movs	r3, r0
 800d1f6:	4a34      	ldr	r2, [pc, #208]	@ (800d2c8 <main+0x35c>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d90c      	bls.n	800d216 <main+0x2aa>
          Debug("Device time out set in main due to powerstatus shift");
 800d1fc:	4a41      	ldr	r2, [pc, #260]	@ (800d304 <main+0x398>)
 800d1fe:	4b42      	ldr	r3, [pc, #264]	@ (800d308 <main+0x39c>)
 800d200:	0019      	movs	r1, r3
 800d202:	2003      	movs	r0, #3
 800d204:	f006 ffee 	bl	80141e4 <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800d208:	f007 fd64 	bl	8014cd4 <HAL_GetTick>
 800d20c:	0003      	movs	r3, r0
 800d20e:	4a3f      	ldr	r2, [pc, #252]	@ (800d30c <main+0x3a0>)
 800d210:	189a      	adds	r2, r3, r2
 800d212:	4b2e      	ldr	r3, [pc, #184]	@ (800d2cc <main+0x360>)
 800d214:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800d216:	4b39      	ldr	r3, [pc, #228]	@ (800d2fc <main+0x390>)
 800d218:	781a      	ldrb	r2, [r3, #0]
 800d21a:	4b2d      	ldr	r3, [pc, #180]	@ (800d2d0 <main+0x364>)
 800d21c:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800d21e:	f000 ffd1 	bl	800e1c4 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800d222:	4b2f      	ldr	r3, [pc, #188]	@ (800d2e0 <main+0x374>)
 800d224:	78db      	ldrb	r3, [r3, #3]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d005      	beq.n	800d236 <main+0x2ca>
        MICstate = Mic_Upkeep();
 800d22a:	f001 f9db 	bl	800e5e4 <Mic_Upkeep>
 800d22e:	0003      	movs	r3, r0
 800d230:	001a      	movs	r2, r3
 800d232:	4b37      	ldr	r3, [pc, #220]	@ (800d310 <main+0x3a4>)
 800d234:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800d236:	4b16      	ldr	r3, [pc, #88]	@ (800d290 <main+0x324>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d803      	bhi.n	800d246 <main+0x2da>
 800d23e:	4b2b      	ldr	r3, [pc, #172]	@ (800d2ec <main+0x380>)
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d066      	beq.n	800d314 <main+0x3a8>
 800d246:	4b26      	ldr	r3, [pc, #152]	@ (800d2e0 <main+0x374>)
 800d248:	789b      	ldrb	r3, [r3, #2]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d062      	beq.n	800d314 <main+0x3a8>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800d24e:	f001 fb6b 	bl	800e928 <sen5x_Get_sen5x_enable_state>
 800d252:	0003      	movs	r3, r0
 800d254:	001a      	movs	r2, r3
 800d256:	2301      	movs	r3, #1
 800d258:	4053      	eors	r3, r2
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d006      	beq.n	800d26e <main+0x302>
 800d260:	4b26      	ldr	r3, [pc, #152]	@ (800d2fc <main+0x390>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <main+0x302>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800d268:	2000      	movs	r0, #0
 800d26a:	f001 fb99 	bl	800e9a0 <sen5x_enable>
        }
        sen5x_statemachine();
 800d26e:	f002 f931 	bl	800f4d4 <sen5x_statemachine>
 800d272:	e070      	b.n	800d356 <main+0x3ea>
 800d274:	00000289 	.word	0x00000289
 800d278:	200021c4 	.word	0x200021c4
 800d27c:	20002184 	.word	0x20002184
 800d280:	0802d074 	.word	0x0802d074
 800d284:	0802d0a0 	.word	0x0802d0a0
 800d288:	20001113 	.word	0x20001113
 800d28c:	08080194 	.word	0x08080194
 800d290:	2000112c 	.word	0x2000112c
 800d294:	0802d0a4 	.word	0x0802d0a4
 800d298:	20001111 	.word	0x20001111
 800d29c:	20001118 	.word	0x20001118
 800d2a0:	200022fc 	.word	0x200022fc
 800d2a4:	200011b0 	.word	0x200011b0
 800d2a8:	20002204 	.word	0x20002204
 800d2ac:	2000108c 	.word	0x2000108c
 800d2b0:	200010c8 	.word	0x200010c8
 800d2b4:	0802d0c8 	.word	0x0802d0c8
 800d2b8:	0802ee48 	.word	0x0802ee48
 800d2bc:	200023b4 	.word	0x200023b4
 800d2c0:	20000e7c 	.word	0x20000e7c
 800d2c4:	20000f54 	.word	0x20000f54
 800d2c8:	000061a8 	.word	0x000061a8
 800d2cc:	20001128 	.word	0x20001128
 800d2d0:	20001115 	.word	0x20001115
 800d2d4:	0802d0dc 	.word	0x0802d0dc
 800d2d8:	200000a4 	.word	0x200000a4
 800d2dc:	0000c350 	.word	0x0000c350
 800d2e0:	20001130 	.word	0x20001130
 800d2e4:	20001114 	.word	0x20001114
 800d2e8:	200005ac 	.word	0x200005ac
 800d2ec:	200000a3 	.word	0x200000a3
 800d2f0:	20001117 	.word	0x20001117
 800d2f4:	20001112 	.word	0x20001112
 800d2f8:	20001110 	.word	0x20001110
 800d2fc:	20002165 	.word	0x20002165
 800d300:	200011d8 	.word	0x200011d8
 800d304:	0802d110 	.word	0x0802d110
 800d308:	0802d148 	.word	0x0802d148
 800d30c:	00001194 	.word	0x00001194
 800d310:	20001116 	.word	0x20001116
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800d314:	4b47      	ldr	r3, [pc, #284]	@ (800d434 <main+0x4c8>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d81c      	bhi.n	800d356 <main+0x3ea>
 800d31c:	4b46      	ldr	r3, [pc, #280]	@ (800d438 <main+0x4cc>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	2201      	movs	r2, #1
 800d322:	4053      	eors	r3, r2
 800d324:	b2db      	uxtb	r3, r3
 800d326:	2b00      	cmp	r3, #0
 800d328:	d015      	beq.n	800d356 <main+0x3ea>
 800d32a:	4b44      	ldr	r3, [pc, #272]	@ (800d43c <main+0x4d0>)
 800d32c:	789b      	ldrb	r3, [r3, #2]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d011      	beq.n	800d356 <main+0x3ea>
        Info("Battery level insufficient for sen5x operation");
 800d332:	4a43      	ldr	r2, [pc, #268]	@ (800d440 <main+0x4d4>)
 800d334:	4b43      	ldr	r3, [pc, #268]	@ (800d444 <main+0x4d8>)
 800d336:	0019      	movs	r1, r3
 800d338:	2002      	movs	r0, #2
 800d33a:	f006 ff53 	bl	80141e4 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800d33e:	4b3f      	ldr	r3, [pc, #252]	@ (800d43c <main+0x4d0>)
 800d340:	2200      	movs	r2, #0
 800d342:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800d344:	4b40      	ldr	r3, [pc, #256]	@ (800d448 <main+0x4dc>)
 800d346:	2200      	movs	r2, #0
 800d348:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800d34a:	4b40      	ldr	r3, [pc, #256]	@ (800d44c <main+0x4e0>)
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <main+0x3ea>
          sen5x_Power_Off();
 800d352:	f001 fbb1 	bl	800eab8 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800d356:	f7fa f9fd 	bl	8007754 <ESP_Upkeep>
 800d35a:	0003      	movs	r3, r0
 800d35c:	001a      	movs	r2, r3
 800d35e:	4b3c      	ldr	r3, [pc, #240]	@ (800d450 <main+0x4e4>)
 800d360:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800d362:	4b3c      	ldr	r3, [pc, #240]	@ (800d454 <main+0x4e8>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	2201      	movs	r2, #1
 800d368:	4053      	eors	r3, r2
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00f      	beq.n	800d390 <main+0x424>
 800d370:	4b39      	ldr	r3, [pc, #228]	@ (800d458 <main+0x4ec>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2201      	movs	r2, #1
 800d376:	4053      	eors	r3, r2
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d008      	beq.n	800d390 <main+0x424>
 800d37e:	4b37      	ldr	r3, [pc, #220]	@ (800d45c <main+0x4f0>)
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	2201      	movs	r2, #1
 800d384:	4053      	eors	r3, r2
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d001      	beq.n	800d390 <main+0x424>
      Device_Test();  // for device with startup time
 800d38c:	f000 fcac 	bl	800dce8 <Device_Test>
    }
    if (!usbPluggedIn) {
 800d390:	4b33      	ldr	r3, [pc, #204]	@ (800d460 <main+0x4f4>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2201      	movs	r2, #1
 800d396:	4053      	eors	r3, r2
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d030      	beq.n	800d400 <main+0x494>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800d39e:	4b31      	ldr	r3, [pc, #196]	@ (800d464 <main+0x4f8>)
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	4053      	eors	r3, r2
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d029      	beq.n	800d400 <main+0x494>
 800d3ac:	f000 fd1a 	bl	800dde4 <AllDevicesReady>
 800d3b0:	1e03      	subs	r3, r0, #0
 800d3b2:	d025      	beq.n	800d400 <main+0x494>
 800d3b4:	4b2c      	ldr	r3, [pc, #176]	@ (800d468 <main+0x4fc>)
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d021      	beq.n	800d400 <main+0x494>
        EnabledConnectedDevices();
 800d3bc:	f000 fe38 	bl	800e030 <EnabledConnectedDevices>
        if (ReadSolarVoltage() > 4900) {  // if battery is fully charged and sun is shining wake-up about every 5 minutes
 800d3c0:	f7fc fc5e 	bl	8009c80 <ReadSolarVoltage>
 800d3c4:	0003      	movs	r3, r0
 800d3c6:	001a      	movs	r2, r3
 800d3c8:	4b28      	ldr	r3, [pc, #160]	@ (800d46c <main+0x500>)
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d90c      	bls.n	800d3e8 <main+0x47c>
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM_SUN:WAIT_WITHOUT_PM_SUN);
 800d3ce:	4b28      	ldr	r3, [pc, #160]	@ (800d470 <main+0x504>)
 800d3d0:	795b      	ldrb	r3, [r3, #5]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d002      	beq.n	800d3dc <main+0x470>
 800d3d6:	2382      	movs	r3, #130	@ 0x82
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	e001      	b.n	800d3e0 <main+0x474>
 800d3dc:	238c      	movs	r3, #140	@ 0x8c
 800d3de:	005b      	lsls	r3, r3, #1
 800d3e0:	0018      	movs	r0, r3
 800d3e2:	f7fd f9cf 	bl	800a784 <Enter_Stop_Mode>
 800d3e6:	e00b      	b.n	800d400 <main+0x494>
        }
        else {
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800d3e8:	4b21      	ldr	r3, [pc, #132]	@ (800d470 <main+0x504>)
 800d3ea:	795b      	ldrb	r3, [r3, #5]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <main+0x48a>
 800d3f0:	23d7      	movs	r3, #215	@ 0xd7
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	e001      	b.n	800d3fa <main+0x48e>
 800d3f6:	23dc      	movs	r3, #220	@ 0xdc
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	0018      	movs	r0, r3
 800d3fc:	f7fd f9c2 	bl	800a784 <Enter_Stop_Mode>
        }
      }
    }
    if (u1_rx_buff[0] != '\0') {
 800d400:	4b1c      	ldr	r3, [pc, #112]	@ (800d474 <main+0x508>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <main+0x4a0>
      check_cli_command();
 800d408:	f000 f8c2 	bl	800d590 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800d40c:	f7fc fc8c 	bl	8009d28 <Check_USB_PowerOn>
 800d410:	1e03      	subs	r3, r0, #0
 800d412:	d100      	bne.n	800d416 <main+0x4aa>
 800d414:	e657      	b.n	800d0c6 <main+0x15a>
 800d416:	4b18      	ldr	r3, [pc, #96]	@ (800d478 <main+0x50c>)
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	2201      	movs	r2, #1
 800d41c:	4053      	eors	r3, r2
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b00      	cmp	r3, #0
 800d422:	d100      	bne.n	800d426 <main+0x4ba>
 800d424:	e64f      	b.n	800d0c6 <main+0x15a>
      Process_USB_input(GetUsbRxPointer());
 800d426:	f015 ffcd 	bl	80233c4 <GetUsbRxPointer>
 800d42a:	0003      	movs	r3, r0
 800d42c:	0018      	movs	r0, r3
 800d42e:	f7fc f8e5 	bl	80095fc <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800d432:	e648      	b.n	800d0c6 <main+0x15a>
 800d434:	2000112c 	.word	0x2000112c
 800d438:	200000a3 	.word	0x200000a3
 800d43c:	20001130 	.word	0x20001130
 800d440:	0802d14c 	.word	0x0802d14c
 800d444:	0802d0a0 	.word	0x0802d0a0
 800d448:	200011d6 	.word	0x200011d6
 800d44c:	200011d5 	.word	0x200011d5
 800d450:	20001117 	.word	0x20001117
 800d454:	20001110 	.word	0x20001110
 800d458:	20001111 	.word	0x20001111
 800d45c:	20001112 	.word	0x20001112
 800d460:	20002165 	.word	0x20002165
 800d464:	20002166 	.word	0x20002166
 800d468:	200005b3 	.word	0x200005b3
 800d46c:	00001324 	.word	0x00001324
 800d470:	20001138 	.word	0x20001138
 800d474:	20001118 	.word	0x20001118
 800d478:	200005af 	.word	0x200005af

0800d47c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d47c:	b590      	push	{r4, r7, lr}
 800d47e:	b09d      	sub	sp, #116	@ 0x74
 800d480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d482:	2438      	movs	r4, #56	@ 0x38
 800d484:	193b      	adds	r3, r7, r4
 800d486:	0018      	movs	r0, r3
 800d488:	2338      	movs	r3, #56	@ 0x38
 800d48a:	001a      	movs	r2, r3
 800d48c:	2100      	movs	r1, #0
 800d48e:	f019 f9bf 	bl	8026810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d492:	2324      	movs	r3, #36	@ 0x24
 800d494:	18fb      	adds	r3, r7, r3
 800d496:	0018      	movs	r0, r3
 800d498:	2314      	movs	r3, #20
 800d49a:	001a      	movs	r2, r3
 800d49c:	2100      	movs	r1, #0
 800d49e:	f019 f9b7 	bl	8026810 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d4a2:	003b      	movs	r3, r7
 800d4a4:	0018      	movs	r0, r3
 800d4a6:	2324      	movs	r3, #36	@ 0x24
 800d4a8:	001a      	movs	r2, r3
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	f019 f9b0 	bl	8026810 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d4b0:	4b34      	ldr	r3, [pc, #208]	@ (800d584 <SystemClock_Config+0x108>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a34      	ldr	r2, [pc, #208]	@ (800d588 <SystemClock_Config+0x10c>)
 800d4b6:	401a      	ands	r2, r3
 800d4b8:	4b32      	ldr	r3, [pc, #200]	@ (800d584 <SystemClock_Config+0x108>)
 800d4ba:	2180      	movs	r1, #128	@ 0x80
 800d4bc:	0109      	lsls	r1, r1, #4
 800d4be:	430a      	orrs	r2, r1
 800d4c0:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d4c2:	f00d ffb3 	bl	801b42c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800d4c6:	4b31      	ldr	r3, [pc, #196]	@ (800d58c <SystemClock_Config+0x110>)
 800d4c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4ca:	4a2f      	ldr	r2, [pc, #188]	@ (800d588 <SystemClock_Config+0x10c>)
 800d4cc:	401a      	ands	r2, r3
 800d4ce:	4b2f      	ldr	r3, [pc, #188]	@ (800d58c <SystemClock_Config+0x110>)
 800d4d0:	2180      	movs	r1, #128	@ 0x80
 800d4d2:	0149      	lsls	r1, r1, #5
 800d4d4:	430a      	orrs	r2, r1
 800d4d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800d4d8:	193b      	adds	r3, r7, r4
 800d4da:	2226      	movs	r2, #38	@ 0x26
 800d4dc:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d4de:	193b      	adds	r3, r7, r4
 800d4e0:	2280      	movs	r2, #128	@ 0x80
 800d4e2:	0052      	lsls	r2, r2, #1
 800d4e4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d4e6:	0021      	movs	r1, r4
 800d4e8:	187b      	adds	r3, r7, r1
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d4ee:	187b      	adds	r3, r7, r1
 800d4f0:	2210      	movs	r2, #16
 800d4f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d4f4:	187b      	adds	r3, r7, r1
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d4fa:	187b      	adds	r3, r7, r1
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d500:	187b      	adds	r3, r7, r1
 800d502:	0018      	movs	r0, r3
 800d504:	f00e f822 	bl	801b54c <HAL_RCC_OscConfig>
 800d508:	1e03      	subs	r3, r0, #0
 800d50a:	d001      	beq.n	800d510 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d50c:	f000 f922 	bl	800d754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d510:	2124      	movs	r1, #36	@ 0x24
 800d512:	187b      	adds	r3, r7, r1
 800d514:	220f      	movs	r2, #15
 800d516:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d518:	187b      	adds	r3, r7, r1
 800d51a:	2201      	movs	r2, #1
 800d51c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d51e:	187b      	adds	r3, r7, r1
 800d520:	2200      	movs	r2, #0
 800d522:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d524:	187b      	adds	r3, r7, r1
 800d526:	2200      	movs	r2, #0
 800d528:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d52a:	187b      	adds	r3, r7, r1
 800d52c:	2200      	movs	r2, #0
 800d52e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d530:	187b      	adds	r3, r7, r1
 800d532:	2100      	movs	r1, #0
 800d534:	0018      	movs	r0, r3
 800d536:	f00e fbdd 	bl	801bcf4 <HAL_RCC_ClockConfig>
 800d53a:	1e03      	subs	r3, r0, #0
 800d53c:	d001      	beq.n	800d542 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d53e:	f000 f909 	bl	800d754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800d542:	003b      	movs	r3, r7
 800d544:	226d      	movs	r2, #109	@ 0x6d
 800d546:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d548:	003b      	movs	r3, r7
 800d54a:	2200      	movs	r2, #0
 800d54c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800d54e:	003b      	movs	r3, r7
 800d550:	2200      	movs	r2, #0
 800d552:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d554:	003b      	movs	r3, r7
 800d556:	2200      	movs	r2, #0
 800d558:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d55a:	003b      	movs	r3, r7
 800d55c:	2280      	movs	r2, #128	@ 0x80
 800d55e:	0252      	lsls	r2, r2, #9
 800d560:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d562:	003b      	movs	r3, r7
 800d564:	2280      	movs	r2, #128	@ 0x80
 800d566:	04d2      	lsls	r2, r2, #19
 800d568:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d56a:	003b      	movs	r3, r7
 800d56c:	0018      	movs	r0, r3
 800d56e:	f00e fde5 	bl	801c13c <HAL_RCCEx_PeriphCLKConfig>
 800d572:	1e03      	subs	r3, r0, #0
 800d574:	d001      	beq.n	800d57a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800d576:	f000 f8ed 	bl	800d754 <Error_Handler>
  }
}
 800d57a:	46c0      	nop			@ (mov r8, r8)
 800d57c:	46bd      	mov	sp, r7
 800d57e:	b01d      	add	sp, #116	@ 0x74
 800d580:	bd90      	pop	{r4, r7, pc}
 800d582:	46c0      	nop			@ (mov r8, r8)
 800d584:	40007000 	.word	0x40007000
 800d588:	ffffe7ff 	.word	0xffffe7ff
 800d58c:	40021000 	.word	0x40021000

0800d590 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800d590:	b580      	push	{r7, lr}
 800d592:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800d594:	4b40      	ldr	r3, [pc, #256]	@ (800d698 <check_cli_command+0x108>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	3b61      	subs	r3, #97	@ 0x61
 800d59a:	2b15      	cmp	r3, #21
 800d59c:	d845      	bhi.n	800d62a <check_cli_command+0x9a>
 800d59e:	009a      	lsls	r2, r3, #2
 800d5a0:	4b3e      	ldr	r3, [pc, #248]	@ (800d69c <check_cli_command+0x10c>)
 800d5a2:	18d3      	adds	r3, r2, r3
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800d5a8:	4b3d      	ldr	r3, [pc, #244]	@ (800d6a0 <check_cli_command+0x110>)
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	f018 ffde 	bl	802656c <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800d5b0:	2003      	movs	r0, #3
 800d5b2:	f006 fe91 	bl	80142d8 <SetVerboseLevel>
      break;
 800d5b6:	e069      	b.n	800d68c <check_cli_command+0xfc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800d5b8:	f7fb fae2 	bl	8008b80 <PC_show_Keys>
    break;
 800d5bc:	e066      	b.n	800d68c <check_cli_command+0xfc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800d5be:	f7f7 f9a3 	bl	8004908 <forceNTPupdate>
    break;
 800d5c2:	e063      	b.n	800d68c <check_cli_command+0xfc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800d5c4:	4b37      	ldr	r3, [pc, #220]	@ (800d6a4 <check_cli_command+0x114>)
 800d5c6:	0018      	movs	r0, r3
 800d5c8:	f018 ffd0 	bl	802656c <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800d5cc:	2002      	movs	r0, #2
 800d5ce:	f006 fe83 	bl	80142d8 <SetVerboseLevel>
      break;
 800d5d2:	e05b      	b.n	800d68c <check_cli_command+0xfc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800d5d4:	4b34      	ldr	r3, [pc, #208]	@ (800d6a8 <check_cli_command+0x118>)
 800d5d6:	0018      	movs	r0, r3
 800d5d8:	f018 ffc8 	bl	802656c <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800d5dc:	2001      	movs	r0, #1
 800d5de:	f006 fe7b 	bl	80142d8 <SetVerboseLevel>
      break;
 800d5e2:	e053      	b.n	800d68c <check_cli_command+0xfc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800d5e4:	4b31      	ldr	r3, [pc, #196]	@ (800d6ac <check_cli_command+0x11c>)
 800d5e6:	0018      	movs	r0, r3
 800d5e8:	f018 ffc0 	bl	802656c <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	f006 fe73 	bl	80142d8 <SetVerboseLevel>
      break;
 800d5f2:	e04b      	b.n	800d68c <check_cli_command+0xfc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800d5f4:	f007 fb6e 	bl	8014cd4 <HAL_GetTick>
 800d5f8:	0002      	movs	r2, r0
 800d5fa:	4b2d      	ldr	r3, [pc, #180]	@ (800d6b0 <check_cli_command+0x120>)
 800d5fc:	601a      	str	r2, [r3, #0]
      break;
 800d5fe:	e045      	b.n	800d68c <check_cli_command+0xfc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800d600:	f7fc fc44 	bl	8009e8c <showTime>
      break;
 800d604:	e042      	b.n	800d68c <check_cli_command+0xfc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800d606:	4b2b      	ldr	r3, [pc, #172]	@ (800d6b4 <check_cli_command+0x124>)
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	1e5a      	subs	r2, r3, #1
 800d60c:	4193      	sbcs	r3, r2
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	2201      	movs	r2, #1
 800d612:	4053      	eors	r3, r2
 800d614:	b2db      	uxtb	r3, r3
 800d616:	1c1a      	adds	r2, r3, #0
 800d618:	2301      	movs	r3, #1
 800d61a:	4013      	ands	r3, r2
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	4b25      	ldr	r3, [pc, #148]	@ (800d6b4 <check_cli_command+0x124>)
 800d620:	701a      	strb	r2, [r3, #0]
      break;
 800d622:	e033      	b.n	800d68c <check_cli_command+0xfc>
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800d624:	f006 fe72 	bl	801430c <BinaryReleaseInfo>
      break;
 800d628:	e030      	b.n	800d68c <check_cli_command+0xfc>
    default:
      printf("Error unknown request from Serial UART1 (TTY)\r\n");
 800d62a:	4b23      	ldr	r3, [pc, #140]	@ (800d6b8 <check_cli_command+0x128>)
 800d62c:	0018      	movs	r0, r3
 800d62e:	f018 ff9d 	bl	802656c <puts>
      printf("\r\n\r\nPossible commands:\r\n\r\n");
 800d632:	4b22      	ldr	r3, [pc, #136]	@ (800d6bc <check_cli_command+0x12c>)
 800d634:	0018      	movs	r0, r3
 800d636:	f018 ff99 	bl	802656c <puts>
      printf("a - VerboseLevel set to all\r\n");
 800d63a:	4b21      	ldr	r3, [pc, #132]	@ (800d6c0 <check_cli_command+0x130>)
 800d63c:	0018      	movs	r0, r3
 800d63e:	f018 ff95 	bl	802656c <puts>
      printf("e - show EEPROM\r\n");
 800d642:	4b20      	ldr	r3, [pc, #128]	@ (800d6c4 <check_cli_command+0x134>)
 800d644:	0018      	movs	r0, r3
 800d646:	f018 ff91 	bl	802656c <puts>
      printf("f - Force NTP time synchronization\r\n");
 800d64a:	4b1f      	ldr	r3, [pc, #124]	@ (800d6c8 <check_cli_command+0x138>)
 800d64c:	0018      	movs	r0, r3
 800d64e:	f018 ff8d 	bl	802656c <puts>
      printf("i - VerboseLevel set to info\r\n");
 800d652:	4b1e      	ldr	r3, [pc, #120]	@ (800d6cc <check_cli_command+0x13c>)
 800d654:	0018      	movs	r0, r3
 800d656:	f018 ff89 	bl	802656c <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800d65a:	4b1d      	ldr	r3, [pc, #116]	@ (800d6d0 <check_cli_command+0x140>)
 800d65c:	0018      	movs	r0, r3
 800d65e:	f018 ff85 	bl	802656c <puts>
      printf("n - VerboseLevel set to none\r\n");
 800d662:	4b1c      	ldr	r3, [pc, #112]	@ (800d6d4 <check_cli_command+0x144>)
 800d664:	0018      	movs	r0, r3
 800d666:	f018 ff81 	bl	802656c <puts>
      printf("s - Start particle measurement\r\n");
 800d66a:	4b1b      	ldr	r3, [pc, #108]	@ (800d6d8 <check_cli_command+0x148>)
 800d66c:	0018      	movs	r0, r3
 800d66e:	f018 ff7d 	bl	802656c <puts>
      printf("t - Show actual system time\r\n");
 800d672:	4b1a      	ldr	r3, [pc, #104]	@ (800d6dc <check_cli_command+0x14c>)
 800d674:	0018      	movs	r0, r3
 800d676:	f018 ff79 	bl	802656c <puts>
      printf("u - USB logging toggle\r\n");
 800d67a:	4b19      	ldr	r3, [pc, #100]	@ (800d6e0 <check_cli_command+0x150>)
 800d67c:	0018      	movs	r0, r3
 800d67e:	f018 ff75 	bl	802656c <puts>
      printf("v - Show system version\r\n");
 800d682:	4b18      	ldr	r3, [pc, #96]	@ (800d6e4 <check_cli_command+0x154>)
 800d684:	0018      	movs	r0, r3
 800d686:	f018 ff71 	bl	802656c <puts>
  break;
 800d68a:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800d68c:	4b02      	ldr	r3, [pc, #8]	@ (800d698 <check_cli_command+0x108>)
 800d68e:	2200      	movs	r2, #0
 800d690:	701a      	strb	r2, [r3, #0]
}
 800d692:	46c0      	nop			@ (mov r8, r8)
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	20001118 	.word	0x20001118
 800d69c:	0802edf0 	.word	0x0802edf0
 800d6a0:	0802d17c 	.word	0x0802d17c
 800d6a4:	0802d198 	.word	0x0802d198
 800d6a8:	0802d1b4 	.word	0x0802d1b4
 800d6ac:	0802d1d4 	.word	0x0802d1d4
 800d6b0:	200011e4 	.word	0x200011e4
 800d6b4:	20001113 	.word	0x20001113
 800d6b8:	0802d1f0 	.word	0x0802d1f0
 800d6bc:	0802d220 	.word	0x0802d220
 800d6c0:	0802d23c 	.word	0x0802d23c
 800d6c4:	0802d25c 	.word	0x0802d25c
 800d6c8:	0802d270 	.word	0x0802d270
 800d6cc:	0802d294 	.word	0x0802d294
 800d6d0:	0802d2b4 	.word	0x0802d2b4
 800d6d4:	0802d2d8 	.word	0x0802d2d8
 800d6d8:	0802d2f8 	.word	0x0802d2f8
 800d6dc:	0802d318 	.word	0x0802d318
 800d6e0:	0802d338 	.word	0x0802d338
 800d6e4:	0802d350 	.word	0x0802d350

0800d6e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d6f0:	4907      	ldr	r1, [pc, #28]	@ (800d710 <HAL_UART_RxCpltCallback+0x28>)
 800d6f2:	4b08      	ldr	r3, [pc, #32]	@ (800d714 <HAL_UART_RxCpltCallback+0x2c>)
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	0018      	movs	r0, r3
 800d6f8:	f010 f8e2 	bl	801d8c0 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d6fc:	4904      	ldr	r1, [pc, #16]	@ (800d710 <HAL_UART_RxCpltCallback+0x28>)
 800d6fe:	4b05      	ldr	r3, [pc, #20]	@ (800d714 <HAL_UART_RxCpltCallback+0x2c>)
 800d700:	2201      	movs	r2, #1
 800d702:	0018      	movs	r0, r3
 800d704:	f010 f8dc 	bl	801d8c0 <HAL_UART_Receive_IT>
}
 800d708:	46c0      	nop			@ (mov r8, r8)
 800d70a:	46bd      	mov	sp, r7
 800d70c:	b002      	add	sp, #8
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	20001118 	.word	0x20001118
 800d714:	200022fc 	.word	0x200022fc

0800d718 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	0002      	movs	r2, r0
 800d720:	1dbb      	adds	r3, r7, #6
 800d722:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d724:	1dbb      	adds	r3, r7, #6
 800d726:	881a      	ldrh	r2, [r3, #0]
 800d728:	2380      	movs	r3, #128	@ 0x80
 800d72a:	021b      	lsls	r3, r3, #8
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d10b      	bne.n	800d748 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d730:	f005 fffe 	bl	8013730 <setuserToggle>
    if (GetPMSensorPresence()) {
 800d734:	f000 f860 	bl	800d7f8 <GetPMSensorPresence>
 800d738:	1e03      	subs	r3, r0, #0
 800d73a:	d005      	beq.n	800d748 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d73c:	4b04      	ldr	r3, [pc, #16]	@ (800d750 <HAL_GPIO_EXTI_Callback+0x38>)
 800d73e:	2201      	movs	r2, #1
 800d740:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d742:	2000      	movs	r0, #0
 800d744:	f001 f8fa 	bl	800e93c <sen5x_Set_sen5x_state>
    }
  }
}
 800d748:	46c0      	nop			@ (mov r8, r8)
 800d74a:	46bd      	mov	sp, r7
 800d74c:	b002      	add	sp, #8
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	20001130 	.word	0x20001130

0800d754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d758:	f005 fbbe 	bl	8012ed8 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d75c:	b672      	cpsid	i
}
 800d75e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d760:	4a05      	ldr	r2, [pc, #20]	@ (800d778 <Error_Handler+0x24>)
 800d762:	4b06      	ldr	r3, [pc, #24]	@ (800d77c <Error_Handler+0x28>)
 800d764:	0019      	movs	r1, r3
 800d766:	2001      	movs	r0, #1
 800d768:	f006 fd3c 	bl	80141e4 <CreateLine>

    HAL_Delay(2500);
 800d76c:	4b04      	ldr	r3, [pc, #16]	@ (800d780 <Error_Handler+0x2c>)
 800d76e:	0018      	movs	r0, r3
 800d770:	f007 faba 	bl	8014ce8 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d774:	46c0      	nop			@ (mov r8, r8)
 800d776:	e7f3      	b.n	800d760 <Error_Handler+0xc>
 800d778:	0802d36c 	.word	0x0802d36c
 800d77c:	0802d398 	.word	0x0802d398
 800d780:	000009c4 	.word	0x000009c4

0800d784 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d784:	b580      	push	{r7, lr}
 800d786:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d788:	4b19      	ldr	r3, [pc, #100]	@ (800d7f0 <testInit+0x6c>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d78e:	4b18      	ldr	r3, [pc, #96]	@ (800d7f0 <testInit+0x6c>)
 800d790:	2200      	movs	r2, #0
 800d792:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d794:	4b16      	ldr	r3, [pc, #88]	@ (800d7f0 <testInit+0x6c>)
 800d796:	2200      	movs	r2, #0
 800d798:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d79a:	4b15      	ldr	r3, [pc, #84]	@ (800d7f0 <testInit+0x6c>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d7a0:	4b13      	ldr	r3, [pc, #76]	@ (800d7f0 <testInit+0x6c>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d7a6:	4b12      	ldr	r3, [pc, #72]	@ (800d7f0 <testInit+0x6c>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d7ac:	4b10      	ldr	r3, [pc, #64]	@ (800d7f0 <testInit+0x6c>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d7b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f0 <testInit+0x6c>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d7b8:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f0 <testInit+0x6c>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d7be:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f4 <testInit+0x70>)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d7c4:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f4 <testInit+0x70>)
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d7ca:	4b0a      	ldr	r3, [pc, #40]	@ (800d7f4 <testInit+0x70>)
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d7d0:	4b08      	ldr	r3, [pc, #32]	@ (800d7f4 <testInit+0x70>)
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d7d6:	4b07      	ldr	r3, [pc, #28]	@ (800d7f4 <testInit+0x70>)
 800d7d8:	2201      	movs	r2, #1
 800d7da:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d7dc:	4b05      	ldr	r3, [pc, #20]	@ (800d7f4 <testInit+0x70>)
 800d7de:	2201      	movs	r2, #1
 800d7e0:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d7e2:	4b04      	ldr	r3, [pc, #16]	@ (800d7f4 <testInit+0x70>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	719a      	strb	r2, [r3, #6]
}
 800d7e8:	46c0      	nop			@ (mov r8, r8)
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	46c0      	nop			@ (mov r8, r8)
 800d7f0:	20001138 	.word	0x20001138
 800d7f4:	20001130 	.word	0x20001130

0800d7f8 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d7fc:	4b02      	ldr	r3, [pc, #8]	@ (800d808 <GetPMSensorPresence+0x10>)
 800d7fe:	795b      	ldrb	r3, [r3, #5]
}
 800d800:	0018      	movs	r0, r3
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	46c0      	nop			@ (mov r8, r8)
 800d808:	20001138 	.word	0x20001138

0800d80c <DisablePMSensor>:

void DisablePMSensor() {
 800d80c:	b580      	push	{r7, lr}
 800d80e:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d810:	4b02      	ldr	r3, [pc, #8]	@ (800d81c <DisablePMSensor+0x10>)
 800d812:	2200      	movs	r2, #0
 800d814:	715a      	strb	r2, [r3, #5]
}
 800d816:	46c0      	nop			@ (mov r8, r8)
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	20001138 	.word	0x20001138

0800d820 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d820:	b580      	push	{r7, lr}
 800d822:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d824:	4b02      	ldr	r3, [pc, #8]	@ (800d830 <IsAHT20SensorPresent+0x10>)
 800d826:	789b      	ldrb	r3, [r3, #2]
}
 800d828:	0018      	movs	r0, r3
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	46c0      	nop			@ (mov r8, r8)
 800d830:	20001138 	.word	0x20001138

0800d834 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d838:	4b02      	ldr	r3, [pc, #8]	@ (800d844 <IsBMP280SensorPresent+0x10>)
 800d83a:	791b      	ldrb	r3, [r3, #4]
}
 800d83c:	0018      	movs	r0, r3
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	46c0      	nop			@ (mov r8, r8)
 800d844:	20001138 	.word	0x20001138

0800d848 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d848:	b580      	push	{r7, lr}
 800d84a:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d84c:	4b02      	ldr	r3, [pc, #8]	@ (800d858 <IsENS160SensorPresent+0x10>)
 800d84e:	78db      	ldrb	r3, [r3, #3]
}
 800d850:	0018      	movs	r0, r3
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	46c0      	nop			@ (mov r8, r8)
 800d858:	20001138 	.word	0x20001138

0800d85c <IsSGPPresent>:

bool IsSGPPresent() {
 800d85c:	b580      	push	{r7, lr}
 800d85e:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d860:	4b02      	ldr	r3, [pc, #8]	@ (800d86c <IsSGPPresent+0x10>)
 800d862:	785b      	ldrb	r3, [r3, #1]
}
 800d864:	0018      	movs	r0, r3
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	46c0      	nop			@ (mov r8, r8)
 800d86c:	20001138 	.word	0x20001138

0800d870 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	0002      	movs	r2, r0
 800d878:	1dfb      	adds	r3, r7, #7
 800d87a:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d87c:	4b0b      	ldr	r3, [pc, #44]	@ (800d8ac <SetVOCSensorDIS_ENA+0x3c>)
 800d87e:	1dfa      	adds	r2, r7, #7
 800d880:	7812      	ldrb	r2, [r2, #0]
 800d882:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d884:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b0 <SetVOCSensorDIS_ENA+0x40>)
 800d886:	1dfa      	adds	r2, r7, #7
 800d888:	7812      	ldrb	r2, [r2, #0]
 800d88a:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d88c:	1dfb      	adds	r3, r7, #7
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <SetVOCSensorDIS_ENA+0x28>
 800d894:	4b07      	ldr	r3, [pc, #28]	@ (800d8b4 <SetVOCSensorDIS_ENA+0x44>)
 800d896:	e000      	b.n	800d89a <SetVOCSensorDIS_ENA+0x2a>
 800d898:	4b07      	ldr	r3, [pc, #28]	@ (800d8b8 <SetVOCSensorDIS_ENA+0x48>)
 800d89a:	4a08      	ldr	r2, [pc, #32]	@ (800d8bc <SetVOCSensorDIS_ENA+0x4c>)
 800d89c:	4908      	ldr	r1, [pc, #32]	@ (800d8c0 <SetVOCSensorDIS_ENA+0x50>)
 800d89e:	2003      	movs	r0, #3
 800d8a0:	f006 fca0 	bl	80141e4 <CreateLine>
}
 800d8a4:	46c0      	nop			@ (mov r8, r8)
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	b002      	add	sp, #8
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	20001138 	.word	0x20001138
 800d8b0:	20001130 	.word	0x20001130
 800d8b4:	0802d39c 	.word	0x0802d39c
 800d8b8:	0802d3a4 	.word	0x0802d3a4
 800d8bc:	0802d3b0 	.word	0x0802d3b0
 800d8c0:	0802d3c4 	.word	0x0802d3c4

0800d8c4 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d8c8:	4b02      	ldr	r3, [pc, #8]	@ (800d8d4 <IsPMSensorEnabled+0x10>)
 800d8ca:	789b      	ldrb	r3, [r3, #2]
}
 800d8cc:	0018      	movs	r0, r3
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	46c0      	nop			@ (mov r8, r8)
 800d8d4:	20001130 	.word	0x20001130

0800d8d8 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	0002      	movs	r2, r0
 800d8e0:	1dfb      	adds	r3, r7, #7
 800d8e2:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d8e4:	4b05      	ldr	r3, [pc, #20]	@ (800d8fc <SetVOCSensorStatus+0x24>)
 800d8e6:	7a1b      	ldrb	r3, [r3, #8]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d003      	beq.n	800d8f4 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d8ec:	4b04      	ldr	r3, [pc, #16]	@ (800d900 <SetVOCSensorStatus+0x28>)
 800d8ee:	1dfa      	adds	r2, r7, #7
 800d8f0:	7812      	ldrb	r2, [r2, #0]
 800d8f2:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d8f4:	46c0      	nop			@ (mov r8, r8)
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	b002      	add	sp, #8
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	20001138 	.word	0x20001138
 800d900:	20001130 	.word	0x20001130

0800d904 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	0002      	movs	r2, r0
 800d90c:	1dfb      	adds	r3, r7, #7
 800d90e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d910:	4b03      	ldr	r3, [pc, #12]	@ (800d920 <SetPMSensorStatus+0x1c>)
 800d912:	1dfa      	adds	r2, r7, #7
 800d914:	7812      	ldrb	r2, [r2, #0]
 800d916:	709a      	strb	r2, [r3, #2]
}
 800d918:	46c0      	nop			@ (mov r8, r8)
 800d91a:	46bd      	mov	sp, r7
 800d91c:	b002      	add	sp, #8
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20001130 	.word	0x20001130

0800d924 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d924:	b580      	push	{r7, lr}
 800d926:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d928:	4b02      	ldr	r3, [pc, #8]	@ (800d934 <SetESPMeasurementDone+0x10>)
 800d92a:	2201      	movs	r2, #1
 800d92c:	71da      	strb	r2, [r3, #7]
}
 800d92e:	46c0      	nop			@ (mov r8, r8)
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	20001138 	.word	0x20001138

0800d938 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
 800d944:	603b      	str	r3, [r7, #0]
  testInit();
 800d946:	f7ff ff1d 	bl	800d784 <testInit>
  I2CSensors_Init(sensorI2C);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	0018      	movs	r0, r3
 800d94e:	f7fa fc67 	bl	8008220 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d952:	f006 ff4b 	bl	80147ec <HIDS_DeviceConnected>
 800d956:	0003      	movs	r3, r0
 800d958:	001a      	movs	r2, r3
 800d95a:	2301      	movs	r3, #1
 800d95c:	4053      	eors	r3, r2
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00c      	beq.n	800d97e <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d964:	4abf      	ldr	r2, [pc, #764]	@ (800dc64 <Device_Init+0x32c>)
 800d966:	4bc0      	ldr	r3, [pc, #768]	@ (800dc68 <Device_Init+0x330>)
 800d968:	0019      	movs	r1, r3
 800d96a:	2001      	movs	r0, #1
 800d96c:	f006 fc3a 	bl	80141e4 <CreateLine>
     SensorProbe.HT_Present = false;
 800d970:	4bbe      	ldr	r3, [pc, #760]	@ (800dc6c <Device_Init+0x334>)
 800d972:	2200      	movs	r2, #0
 800d974:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d976:	4bbe      	ldr	r3, [pc, #760]	@ (800dc70 <Device_Init+0x338>)
 800d978:	2200      	movs	r2, #0
 800d97a:	701a      	strb	r2, [r3, #0]
 800d97c:	e008      	b.n	800d990 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d97e:	4bbb      	ldr	r3, [pc, #748]	@ (800dc6c <Device_Init+0x334>)
 800d980:	2201      	movs	r2, #1
 800d982:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d984:	4abb      	ldr	r2, [pc, #748]	@ (800dc74 <Device_Init+0x33c>)
 800d986:	4bbc      	ldr	r3, [pc, #752]	@ (800dc78 <Device_Init+0x340>)
 800d988:	0019      	movs	r1, r3
 800d98a:	2003      	movs	r0, #3
 800d98c:	f006 fc2a 	bl	80141e4 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d990:	f7fe f938 	bl	800bc04 <BMP280_DeviceConnected>
 800d994:	0003      	movs	r3, r0
 800d996:	001a      	movs	r2, r3
 800d998:	2301      	movs	r3, #1
 800d99a:	4053      	eors	r3, r2
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00c      	beq.n	800d9bc <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d9a2:	4ab6      	ldr	r2, [pc, #728]	@ (800dc7c <Device_Init+0x344>)
 800d9a4:	4bb0      	ldr	r3, [pc, #704]	@ (800dc68 <Device_Init+0x330>)
 800d9a6:	0019      	movs	r1, r3
 800d9a8:	2001      	movs	r0, #1
 800d9aa:	f006 fc1b 	bl	80141e4 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d9ae:	4baf      	ldr	r3, [pc, #700]	@ (800dc6c <Device_Init+0x334>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d9b4:	4bae      	ldr	r3, [pc, #696]	@ (800dc70 <Device_Init+0x338>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	715a      	strb	r2, [r3, #5]
 800d9ba:	e008      	b.n	800d9ce <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d9bc:	4bab      	ldr	r3, [pc, #684]	@ (800dc6c <Device_Init+0x334>)
 800d9be:	2201      	movs	r2, #1
 800d9c0:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d9c2:	4aaf      	ldr	r2, [pc, #700]	@ (800dc80 <Device_Init+0x348>)
 800d9c4:	4bac      	ldr	r3, [pc, #688]	@ (800dc78 <Device_Init+0x340>)
 800d9c6:	0019      	movs	r1, r3
 800d9c8:	2003      	movs	r0, #3
 800d9ca:	f006 fc0b 	bl	80141e4 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d9ce:	f003 fd9d 	bl	801150c <SGP_DeviceConnected>
 800d9d2:	0003      	movs	r3, r0
 800d9d4:	001a      	movs	r2, r3
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	4053      	eors	r3, r2
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00c      	beq.n	800d9fa <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d9e0:	4ba2      	ldr	r3, [pc, #648]	@ (800dc6c <Device_Init+0x334>)
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d9e6:	4aa7      	ldr	r2, [pc, #668]	@ (800dc84 <Device_Init+0x34c>)
 800d9e8:	4b9f      	ldr	r3, [pc, #636]	@ (800dc68 <Device_Init+0x330>)
 800d9ea:	0019      	movs	r1, r3
 800d9ec:	2001      	movs	r0, #1
 800d9ee:	f006 fbf9 	bl	80141e4 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d9f2:	4b9f      	ldr	r3, [pc, #636]	@ (800dc70 <Device_Init+0x338>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	705a      	strb	r2, [r3, #1]
 800d9f8:	e00b      	b.n	800da12 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d9fa:	4b9c      	ldr	r3, [pc, #624]	@ (800dc6c <Device_Init+0x334>)
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800da00:	4b9a      	ldr	r3, [pc, #616]	@ (800dc6c <Device_Init+0x334>)
 800da02:	2201      	movs	r2, #1
 800da04:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800da06:	4aa0      	ldr	r2, [pc, #640]	@ (800dc88 <Device_Init+0x350>)
 800da08:	4b9b      	ldr	r3, [pc, #620]	@ (800dc78 <Device_Init+0x340>)
 800da0a:	0019      	movs	r1, r3
 800da0c:	2003      	movs	r0, #3
 800da0e:	f006 fbe9 	bl	80141e4 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800da12:	f7f6 fa29 	bl	8003e68 <ENS_DeviceConnected>
 800da16:	0003      	movs	r3, r0
 800da18:	001a      	movs	r2, r3
 800da1a:	2301      	movs	r3, #1
 800da1c:	4053      	eors	r3, r2
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00c      	beq.n	800da3e <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800da24:	4b91      	ldr	r3, [pc, #580]	@ (800dc6c <Device_Init+0x334>)
 800da26:	2200      	movs	r2, #0
 800da28:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800da2a:	4a98      	ldr	r2, [pc, #608]	@ (800dc8c <Device_Init+0x354>)
 800da2c:	4b8e      	ldr	r3, [pc, #568]	@ (800dc68 <Device_Init+0x330>)
 800da2e:	0019      	movs	r1, r3
 800da30:	2001      	movs	r0, #1
 800da32:	f006 fbd7 	bl	80141e4 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800da36:	4b8e      	ldr	r3, [pc, #568]	@ (800dc70 <Device_Init+0x338>)
 800da38:	2200      	movs	r2, #0
 800da3a:	719a      	strb	r2, [r3, #6]
 800da3c:	e008      	b.n	800da50 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800da3e:	4b8b      	ldr	r3, [pc, #556]	@ (800dc6c <Device_Init+0x334>)
 800da40:	2201      	movs	r2, #1
 800da42:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800da44:	4a92      	ldr	r2, [pc, #584]	@ (800dc90 <Device_Init+0x358>)
 800da46:	4b8c      	ldr	r3, [pc, #560]	@ (800dc78 <Device_Init+0x340>)
 800da48:	0019      	movs	r1, r3
 800da4a:	2003      	movs	r0, #3
 800da4c:	f006 fbca 	bl	80141e4 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800da50:	f7fd fbbe 	bl	800b1d0 <AHT20_DeviceConnected>
 800da54:	0003      	movs	r3, r0
 800da56:	001a      	movs	r2, r3
 800da58:	2301      	movs	r3, #1
 800da5a:	4053      	eors	r3, r2
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00c      	beq.n	800da7c <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800da62:	4a8c      	ldr	r2, [pc, #560]	@ (800dc94 <Device_Init+0x35c>)
 800da64:	4b80      	ldr	r3, [pc, #512]	@ (800dc68 <Device_Init+0x330>)
 800da66:	0019      	movs	r1, r3
 800da68:	2001      	movs	r0, #1
 800da6a:	f006 fbbb 	bl	80141e4 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800da6e:	4b7f      	ldr	r3, [pc, #508]	@ (800dc6c <Device_Init+0x334>)
 800da70:	2200      	movs	r2, #0
 800da72:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800da74:	4b7e      	ldr	r3, [pc, #504]	@ (800dc70 <Device_Init+0x338>)
 800da76:	2200      	movs	r2, #0
 800da78:	711a      	strb	r2, [r3, #4]
 800da7a:	e008      	b.n	800da8e <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800da7c:	4b7b      	ldr	r3, [pc, #492]	@ (800dc6c <Device_Init+0x334>)
 800da7e:	2201      	movs	r2, #1
 800da80:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800da82:	4a85      	ldr	r2, [pc, #532]	@ (800dc98 <Device_Init+0x360>)
 800da84:	4b7c      	ldr	r3, [pc, #496]	@ (800dc78 <Device_Init+0x340>)
 800da86:	0019      	movs	r1, r3
 800da88:	2003      	movs	r0, #3
 800da8a:	f006 fbab 	bl	80141e4 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800da8e:	4b77      	ldr	r3, [pc, #476]	@ (800dc6c <Device_Init+0x334>)
 800da90:	785b      	ldrb	r3, [r3, #1]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d009      	beq.n	800daaa <Device_Init+0x172>
 800da96:	4b75      	ldr	r3, [pc, #468]	@ (800dc6c <Device_Init+0x334>)
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d005      	beq.n	800daaa <Device_Init+0x172>
    SetDBLED(false, true, false);
 800da9e:	2200      	movs	r2, #0
 800daa0:	2101      	movs	r1, #1
 800daa2:	2000      	movs	r0, #0
 800daa4:	f005 f872 	bl	8012b8c <SetDBLED>
 800daa8:	e018      	b.n	800dadc <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800daaa:	2200      	movs	r2, #0
 800daac:	2100      	movs	r1, #0
 800daae:	2001      	movs	r0, #1
 800dab0:	f005 f86c 	bl	8012b8c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800dab4:	4b79      	ldr	r3, [pc, #484]	@ (800dc9c <Device_Init+0x364>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	2101      	movs	r1, #1
 800daba:	0018      	movs	r0, r3
 800dabc:	f008 fb9b 	bl	80161f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800dac0:	2380      	movs	r3, #128	@ 0x80
 800dac2:	005b      	lsls	r3, r3, #1
 800dac4:	4875      	ldr	r0, [pc, #468]	@ (800dc9c <Device_Init+0x364>)
 800dac6:	2201      	movs	r2, #1
 800dac8:	0019      	movs	r1, r3
 800daca:	f008 fb94 	bl	80161f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800dace:	2380      	movs	r3, #128	@ 0x80
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	4872      	ldr	r0, [pc, #456]	@ (800dc9c <Device_Init+0x364>)
 800dad4:	2201      	movs	r2, #1
 800dad6:	0019      	movs	r1, r3
 800dad8:	f008 fb8d 	bl	80161f6 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800dadc:	4b64      	ldr	r3, [pc, #400]	@ (800dc70 <Device_Init+0x338>)
 800dade:	78db      	ldrb	r3, [r3, #3]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d028      	beq.n	800db36 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800dae4:	4a6e      	ldr	r2, [pc, #440]	@ (800dca0 <Device_Init+0x368>)
 800dae6:	4b6f      	ldr	r3, [pc, #444]	@ (800dca4 <Device_Init+0x36c>)
 800dae8:	0019      	movs	r1, r3
 800daea:	2002      	movs	r0, #2
 800daec:	f006 fb7a 	bl	80141e4 <CreateLine>
    if (!enableMicrophone(true)) {
 800daf0:	2001      	movs	r0, #1
 800daf2:	f004 f941 	bl	8011d78 <enableMicrophone>
 800daf6:	0003      	movs	r3, r0
 800daf8:	001a      	movs	r2, r3
 800dafa:	2301      	movs	r3, #1
 800dafc:	4053      	eors	r3, r2
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00c      	beq.n	800db1e <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800db04:	4a68      	ldr	r2, [pc, #416]	@ (800dca8 <Device_Init+0x370>)
 800db06:	4b58      	ldr	r3, [pc, #352]	@ (800dc68 <Device_Init+0x330>)
 800db08:	0019      	movs	r1, r3
 800db0a:	2001      	movs	r0, #1
 800db0c:	f006 fb6a 	bl	80141e4 <CreateLine>
      SensorProbe.MIC_Present = false;
 800db10:	4b56      	ldr	r3, [pc, #344]	@ (800dc6c <Device_Init+0x334>)
 800db12:	2200      	movs	r2, #0
 800db14:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800db16:	4b56      	ldr	r3, [pc, #344]	@ (800dc70 <Device_Init+0x338>)
 800db18:	2200      	movs	r2, #0
 800db1a:	70da      	strb	r2, [r3, #3]
 800db1c:	e00b      	b.n	800db36 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800db1e:	4b53      	ldr	r3, [pc, #332]	@ (800dc6c <Device_Init+0x334>)
 800db20:	2201      	movs	r2, #1
 800db22:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800db24:	4b52      	ldr	r3, [pc, #328]	@ (800dc70 <Device_Init+0x338>)
 800db26:	2201      	movs	r2, #1
 800db28:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800db2a:	4a60      	ldr	r2, [pc, #384]	@ (800dcac <Device_Init+0x374>)
 800db2c:	4b52      	ldr	r3, [pc, #328]	@ (800dc78 <Device_Init+0x340>)
 800db2e:	0019      	movs	r1, r3
 800db30:	2003      	movs	r0, #3
 800db32:	f006 fb57 	bl	80141e4 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800db36:	f000 fff5 	bl	800eb24 <probe_sen5x>
 800db3a:	1e03      	subs	r3, r0, #0
 800db3c:	d122      	bne.n	800db84 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800db3e:	4a5c      	ldr	r2, [pc, #368]	@ (800dcb0 <Device_Init+0x378>)
 800db40:	4b4d      	ldr	r3, [pc, #308]	@ (800dc78 <Device_Init+0x340>)
 800db42:	0019      	movs	r1, r3
 800db44:	2003      	movs	r0, #3
 800db46:	f006 fb4d 	bl	80141e4 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800db4a:	4b48      	ldr	r3, [pc, #288]	@ (800dc6c <Device_Init+0x334>)
 800db4c:	2201      	movs	r2, #1
 800db4e:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800db50:	4b47      	ldr	r3, [pc, #284]	@ (800dc70 <Device_Init+0x338>)
 800db52:	2201      	movs	r2, #1
 800db54:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800db56:	4b57      	ldr	r3, [pc, #348]	@ (800dcb4 <Device_Init+0x37c>)
 800db58:	791b      	ldrb	r3, [r3, #4]
 800db5a:	2b34      	cmp	r3, #52	@ 0x34
 800db5c:	d003      	beq.n	800db66 <Device_Init+0x22e>
 800db5e:	4b55      	ldr	r3, [pc, #340]	@ (800dcb4 <Device_Init+0x37c>)
 800db60:	791b      	ldrb	r3, [r3, #4]
 800db62:	2b35      	cmp	r3, #53	@ 0x35
 800db64:	d11c      	bne.n	800dba0 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800db66:	4a54      	ldr	r2, [pc, #336]	@ (800dcb8 <Device_Init+0x380>)
 800db68:	4b4e      	ldr	r3, [pc, #312]	@ (800dca4 <Device_Init+0x36c>)
 800db6a:	0019      	movs	r1, r3
 800db6c:	2002      	movs	r0, #2
 800db6e:	f006 fb39 	bl	80141e4 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800db72:	4b3f      	ldr	r3, [pc, #252]	@ (800dc70 <Device_Init+0x338>)
 800db74:	2200      	movs	r2, #0
 800db76:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800db78:	4b3c      	ldr	r3, [pc, #240]	@ (800dc6c <Device_Init+0x334>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800db7e:	f003 feab 	bl	80118d8 <SGP_SoftReset>
 800db82:	e00d      	b.n	800dba0 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800db84:	f000 ff98 	bl	800eab8 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800db88:	4a4c      	ldr	r2, [pc, #304]	@ (800dcbc <Device_Init+0x384>)
 800db8a:	4b3b      	ldr	r3, [pc, #236]	@ (800dc78 <Device_Init+0x340>)
 800db8c:	0019      	movs	r1, r3
 800db8e:	2003      	movs	r0, #3
 800db90:	f006 fb28 	bl	80141e4 <CreateLine>
    SensorProbe.PM_Present = false;
 800db94:	4b35      	ldr	r3, [pc, #212]	@ (800dc6c <Device_Init+0x334>)
 800db96:	2200      	movs	r2, #0
 800db98:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800db9a:	4b35      	ldr	r3, [pc, #212]	@ (800dc70 <Device_Init+0x338>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800dba0:	4b32      	ldr	r3, [pc, #200]	@ (800dc6c <Device_Init+0x334>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <Device_Init+0x274>
 800dba8:	4b45      	ldr	r3, [pc, #276]	@ (800dcc0 <Device_Init+0x388>)
 800dbaa:	e000      	b.n	800dbae <Device_Init+0x276>
 800dbac:	4b45      	ldr	r3, [pc, #276]	@ (800dcc4 <Device_Init+0x38c>)
 800dbae:	4a46      	ldr	r2, [pc, #280]	@ (800dcc8 <Device_Init+0x390>)
 800dbb0:	493c      	ldr	r1, [pc, #240]	@ (800dca4 <Device_Init+0x36c>)
 800dbb2:	2002      	movs	r0, #2
 800dbb4:	f006 fb16 	bl	80141e4 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800dbb8:	4b2c      	ldr	r3, [pc, #176]	@ (800dc6c <Device_Init+0x334>)
 800dbba:	785b      	ldrb	r3, [r3, #1]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d001      	beq.n	800dbc4 <Device_Init+0x28c>
 800dbc0:	4b3f      	ldr	r3, [pc, #252]	@ (800dcc0 <Device_Init+0x388>)
 800dbc2:	e000      	b.n	800dbc6 <Device_Init+0x28e>
 800dbc4:	4b3f      	ldr	r3, [pc, #252]	@ (800dcc4 <Device_Init+0x38c>)
 800dbc6:	4a41      	ldr	r2, [pc, #260]	@ (800dccc <Device_Init+0x394>)
 800dbc8:	4936      	ldr	r1, [pc, #216]	@ (800dca4 <Device_Init+0x36c>)
 800dbca:	2002      	movs	r0, #2
 800dbcc:	f006 fb0a 	bl	80141e4 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800dbd0:	4b26      	ldr	r3, [pc, #152]	@ (800dc6c <Device_Init+0x334>)
 800dbd2:	789b      	ldrb	r3, [r3, #2]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <Device_Init+0x2a4>
 800dbd8:	4b39      	ldr	r3, [pc, #228]	@ (800dcc0 <Device_Init+0x388>)
 800dbda:	e000      	b.n	800dbde <Device_Init+0x2a6>
 800dbdc:	4b39      	ldr	r3, [pc, #228]	@ (800dcc4 <Device_Init+0x38c>)
 800dbde:	4a3c      	ldr	r2, [pc, #240]	@ (800dcd0 <Device_Init+0x398>)
 800dbe0:	4930      	ldr	r1, [pc, #192]	@ (800dca4 <Device_Init+0x36c>)
 800dbe2:	2002      	movs	r0, #2
 800dbe4:	f006 fafe 	bl	80141e4 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800dbe8:	4b20      	ldr	r3, [pc, #128]	@ (800dc6c <Device_Init+0x334>)
 800dbea:	791b      	ldrb	r3, [r3, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d001      	beq.n	800dbf4 <Device_Init+0x2bc>
 800dbf0:	4b33      	ldr	r3, [pc, #204]	@ (800dcc0 <Device_Init+0x388>)
 800dbf2:	e000      	b.n	800dbf6 <Device_Init+0x2be>
 800dbf4:	4b33      	ldr	r3, [pc, #204]	@ (800dcc4 <Device_Init+0x38c>)
 800dbf6:	4a37      	ldr	r2, [pc, #220]	@ (800dcd4 <Device_Init+0x39c>)
 800dbf8:	492a      	ldr	r1, [pc, #168]	@ (800dca4 <Device_Init+0x36c>)
 800dbfa:	2002      	movs	r0, #2
 800dbfc:	f006 faf2 	bl	80141e4 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800dc00:	4b1a      	ldr	r3, [pc, #104]	@ (800dc6c <Device_Init+0x334>)
 800dc02:	78db      	ldrb	r3, [r3, #3]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <Device_Init+0x2d4>
 800dc08:	4b2d      	ldr	r3, [pc, #180]	@ (800dcc0 <Device_Init+0x388>)
 800dc0a:	e000      	b.n	800dc0e <Device_Init+0x2d6>
 800dc0c:	4b2d      	ldr	r3, [pc, #180]	@ (800dcc4 <Device_Init+0x38c>)
 800dc0e:	4a32      	ldr	r2, [pc, #200]	@ (800dcd8 <Device_Init+0x3a0>)
 800dc10:	4924      	ldr	r1, [pc, #144]	@ (800dca4 <Device_Init+0x36c>)
 800dc12:	2002      	movs	r0, #2
 800dc14:	f006 fae6 	bl	80141e4 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800dc18:	4b14      	ldr	r3, [pc, #80]	@ (800dc6c <Device_Init+0x334>)
 800dc1a:	795b      	ldrb	r3, [r3, #5]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <Device_Init+0x2ec>
 800dc20:	4b27      	ldr	r3, [pc, #156]	@ (800dcc0 <Device_Init+0x388>)
 800dc22:	e000      	b.n	800dc26 <Device_Init+0x2ee>
 800dc24:	4b27      	ldr	r3, [pc, #156]	@ (800dcc4 <Device_Init+0x38c>)
 800dc26:	4a2d      	ldr	r2, [pc, #180]	@ (800dcdc <Device_Init+0x3a4>)
 800dc28:	491e      	ldr	r1, [pc, #120]	@ (800dca4 <Device_Init+0x36c>)
 800dc2a:	2002      	movs	r0, #2
 800dc2c:	f006 fada 	bl	80141e4 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800dc30:	4b0e      	ldr	r3, [pc, #56]	@ (800dc6c <Device_Init+0x334>)
 800dc32:	799b      	ldrb	r3, [r3, #6]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <Device_Init+0x304>
 800dc38:	4b21      	ldr	r3, [pc, #132]	@ (800dcc0 <Device_Init+0x388>)
 800dc3a:	e000      	b.n	800dc3e <Device_Init+0x306>
 800dc3c:	4b21      	ldr	r3, [pc, #132]	@ (800dcc4 <Device_Init+0x38c>)
 800dc3e:	4a28      	ldr	r2, [pc, #160]	@ (800dce0 <Device_Init+0x3a8>)
 800dc40:	4918      	ldr	r1, [pc, #96]	@ (800dca4 <Device_Init+0x36c>)
 800dc42:	2002      	movs	r0, #2
 800dc44:	f006 face 	bl	80141e4 <CreateLine>
  ESP_Init(espUart);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	0018      	movs	r0, r3
 800dc4c:	f7f7 f934 	bl	8004eb8 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800dc50:	4a24      	ldr	r2, [pc, #144]	@ (800dce4 <Device_Init+0x3ac>)
 800dc52:	4b09      	ldr	r3, [pc, #36]	@ (800dc78 <Device_Init+0x340>)
 800dc54:	0019      	movs	r1, r3
 800dc56:	2003      	movs	r0, #3
 800dc58:	f006 fac4 	bl	80141e4 <CreateLine>
}
 800dc5c:	46c0      	nop			@ (mov r8, r8)
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	b004      	add	sp, #16
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	0802d3c8 	.word	0x0802d3c8
 800dc68:	0802d3f8 	.word	0x0802d3f8
 800dc6c:	20001138 	.word	0x20001138
 800dc70:	20001130 	.word	0x20001130
 800dc74:	0802d3fc 	.word	0x0802d3fc
 800dc78:	0802d3c4 	.word	0x0802d3c4
 800dc7c:	0802d428 	.word	0x0802d428
 800dc80:	0802d45c 	.word	0x0802d45c
 800dc84:	0802d48c 	.word	0x0802d48c
 800dc88:	0802d4a8 	.word	0x0802d4a8
 800dc8c:	0802d4c0 	.word	0x0802d4c0
 800dc90:	0802d4dc 	.word	0x0802d4dc
 800dc94:	0802d4f4 	.word	0x0802d4f4
 800dc98:	0802d528 	.word	0x0802d528
 800dc9c:	50000400 	.word	0x50000400
 800dca0:	0802d55c 	.word	0x0802d55c
 800dca4:	0802d580 	.word	0x0802d580
 800dca8:	0802d584 	.word	0x0802d584
 800dcac:	0802d5b0 	.word	0x0802d5b0
 800dcb0:	0802d5dc 	.word	0x0802d5dc
 800dcb4:	200011d8 	.word	0x200011d8
 800dcb8:	0802d5f4 	.word	0x0802d5f4
 800dcbc:	0802d644 	.word	0x0802d644
 800dcc0:	0802d668 	.word	0x0802d668
 800dcc4:	0802d66c 	.word	0x0802d66c
 800dcc8:	0802d670 	.word	0x0802d670
 800dccc:	0802d68c 	.word	0x0802d68c
 800dcd0:	0802d6a8 	.word	0x0802d6a8
 800dcd4:	0802d6c8 	.word	0x0802d6c8
 800dcd8:	0802d6e8 	.word	0x0802d6e8
 800dcdc:	0802d708 	.word	0x0802d708
 800dce0:	0802d724 	.word	0x0802d724
 800dce4:	0802d740 	.word	0x0802d740

0800dce8 <Device_Test>:

void Device_Test(){
 800dce8:	b580      	push	{r7, lr}
 800dcea:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800dcec:	4b34      	ldr	r3, [pc, #208]	@ (800ddc0 <Device_Test+0xd8>)
 800dcee:	799b      	ldrb	r3, [r3, #6]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	4053      	eors	r3, r2
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d027      	beq.n	800dd4a <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800dcfa:	f000 fc43 	bl	800e584 <MIC_TestMeasurementDone>
 800dcfe:	1e03      	subs	r3, r0, #0
 800dd00:	d011      	beq.n	800dd26 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800dd02:	4b2f      	ldr	r3, [pc, #188]	@ (800ddc0 <Device_Test+0xd8>)
 800dd04:	2201      	movs	r2, #1
 800dd06:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800dd08:	4b2e      	ldr	r3, [pc, #184]	@ (800ddc4 <Device_Test+0xdc>)
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800dd0e:	f004 fec1 	bl	8012a94 <Calculate_LED_ON>
 800dd12:	0003      	movs	r3, r0
 800dd14:	0019      	movs	r1, r3
 800dd16:	23fa      	movs	r3, #250	@ 0xfa
 800dd18:	011a      	lsls	r2, r3, #4
 800dd1a:	23fa      	movs	r3, #250	@ 0xfa
 800dd1c:	011b      	lsls	r3, r3, #4
 800dd1e:	0018      	movs	r0, r3
 800dd20:	f004 ff00 	bl	8012b24 <SetStatusLED>
 800dd24:	e011      	b.n	800dd4a <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800dd26:	f004 f803 	bl	8011d30 <micSettlingComplete>
 800dd2a:	1e03      	subs	r3, r0, #0
 800dd2c:	d00d      	beq.n	800dd4a <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800dd2e:	4b25      	ldr	r3, [pc, #148]	@ (800ddc4 <Device_Test+0xdc>)
 800dd30:	2201      	movs	r2, #1
 800dd32:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800dd34:	f004 feae 	bl	8012a94 <Calculate_LED_ON>
 800dd38:	0003      	movs	r3, r0
 800dd3a:	0018      	movs	r0, r3
 800dd3c:	23fa      	movs	r3, #250	@ 0xfa
 800dd3e:	011a      	lsls	r2, r3, #4
 800dd40:	23fa      	movs	r3, #250	@ 0xfa
 800dd42:	011b      	lsls	r3, r3, #4
 800dd44:	0019      	movs	r1, r3
 800dd46:	f004 feed 	bl	8012b24 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800dd4a:	4b1d      	ldr	r3, [pc, #116]	@ (800ddc0 <Device_Test+0xd8>)
 800dd4c:	79db      	ldrb	r3, [r3, #7]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	4053      	eors	r3, r2
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800dd58:	f7f9 fbe0 	bl	800751c <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800dd5c:	4b18      	ldr	r3, [pc, #96]	@ (800ddc0 <Device_Test+0xd8>)
 800dd5e:	79db      	ldrb	r3, [r3, #7]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d003      	beq.n	800dd6c <Device_Test+0x84>
 800dd64:	4b16      	ldr	r3, [pc, #88]	@ (800ddc0 <Device_Test+0xd8>)
 800dd66:	799b      	ldrb	r3, [r3, #6]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d106      	bne.n	800dd7a <Device_Test+0x92>
 800dd6c:	4b16      	ldr	r3, [pc, #88]	@ (800ddc8 <Device_Test+0xe0>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	0018      	movs	r0, r3
 800dd72:	f006 f9e1 	bl	8014138 <TimestampIsReached>
 800dd76:	1e03      	subs	r3, r0, #0
 800dd78:	d01f      	beq.n	800ddba <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800dd7a:	4b11      	ldr	r3, [pc, #68]	@ (800ddc0 <Device_Test+0xd8>)
 800dd7c:	79db      	ldrb	r3, [r3, #7]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <Device_Test+0x9e>
 800dd82:	4b12      	ldr	r3, [pc, #72]	@ (800ddcc <Device_Test+0xe4>)
 800dd84:	e000      	b.n	800dd88 <Device_Test+0xa0>
 800dd86:	4b12      	ldr	r3, [pc, #72]	@ (800ddd0 <Device_Test+0xe8>)
 800dd88:	4a12      	ldr	r2, [pc, #72]	@ (800ddd4 <Device_Test+0xec>)
 800dd8a:	4913      	ldr	r1, [pc, #76]	@ (800ddd8 <Device_Test+0xf0>)
 800dd8c:	2002      	movs	r0, #2
 800dd8e:	f006 fa29 	bl	80141e4 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800dd92:	4b0b      	ldr	r3, [pc, #44]	@ (800ddc0 <Device_Test+0xd8>)
 800dd94:	799b      	ldrb	r3, [r3, #6]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d001      	beq.n	800dd9e <Device_Test+0xb6>
 800dd9a:	4b0c      	ldr	r3, [pc, #48]	@ (800ddcc <Device_Test+0xe4>)
 800dd9c:	e000      	b.n	800dda0 <Device_Test+0xb8>
 800dd9e:	4b0c      	ldr	r3, [pc, #48]	@ (800ddd0 <Device_Test+0xe8>)
 800dda0:	4a0e      	ldr	r2, [pc, #56]	@ (800dddc <Device_Test+0xf4>)
 800dda2:	490d      	ldr	r1, [pc, #52]	@ (800ddd8 <Device_Test+0xf0>)
 800dda4:	2002      	movs	r0, #2
 800dda6:	f006 fa1d 	bl	80141e4 <CreateLine>
    Info("Test completed");
 800ddaa:	4a0d      	ldr	r2, [pc, #52]	@ (800dde0 <Device_Test+0xf8>)
 800ddac:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd8 <Device_Test+0xf0>)
 800ddae:	0019      	movs	r1, r3
 800ddb0:	2002      	movs	r0, #2
 800ddb2:	f006 fa17 	bl	80141e4 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800ddb6:	f7ff f8a9 	bl	800cf0c <SetTestDone>
  }
}
 800ddba:	46c0      	nop			@ (mov r8, r8)
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	20001138 	.word	0x20001138
 800ddc4:	20001130 	.word	0x20001130
 800ddc8:	20001128 	.word	0x20001128
 800ddcc:	0802d764 	.word	0x0802d764
 800ddd0:	0802d76c 	.word	0x0802d76c
 800ddd4:	0802d774 	.word	0x0802d774
 800ddd8:	0802d580 	.word	0x0802d580
 800dddc:	0802d788 	.word	0x0802d788
 800dde0:	0802d79c 	.word	0x0802d79c

0800dde4 <AllDevicesReady>:

bool AllDevicesReady() {
 800dde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dde6:	46de      	mov	lr, fp
 800dde8:	4657      	mov	r7, sl
 800ddea:	464e      	mov	r6, r9
 800ddec:	4645      	mov	r5, r8
 800ddee:	b5e0      	push	{r5, r6, r7, lr}
 800ddf0:	b08b      	sub	sp, #44	@ 0x2c
 800ddf2:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  if (TimestampIsReached(deviceTimeOut)) {
 800ddf4:	4b7c      	ldr	r3, [pc, #496]	@ (800dfe8 <AllDevicesReady+0x204>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	0018      	movs	r0, r3
 800ddfa:	f006 f99d 	bl	8014138 <TimestampIsReached>
 800ddfe:	1e03      	subs	r3, r0, #0
 800de00:	d100      	bne.n	800de04 <AllDevicesReady+0x20>
 800de02:	e0e7      	b.n	800dfd4 <AllDevicesReady+0x1f0>
    if (!sensorsdisablereq) {
 800de04:	4b79      	ldr	r3, [pc, #484]	@ (800dfec <AllDevicesReady+0x208>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	2201      	movs	r2, #1
 800de0a:	4053      	eors	r3, r2
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d008      	beq.n	800de24 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800de12:	4a77      	ldr	r2, [pc, #476]	@ (800dff0 <AllDevicesReady+0x20c>)
 800de14:	4b77      	ldr	r3, [pc, #476]	@ (800dff4 <AllDevicesReady+0x210>)
 800de16:	0019      	movs	r1, r3
 800de18:	2003      	movs	r0, #3
 800de1a:	f006 f9e3 	bl	80141e4 <CreateLine>
      sensorsdisablereq = true;
 800de1e:	4b73      	ldr	r3, [pc, #460]	@ (800dfec <AllDevicesReady+0x208>)
 800de20:	2201      	movs	r2, #1
 800de22:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800de24:	4b74      	ldr	r3, [pc, #464]	@ (800dff8 <AllDevicesReady+0x214>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2b06      	cmp	r3, #6
 800de2a:	d102      	bne.n	800de32 <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800de2c:	4b73      	ldr	r3, [pc, #460]	@ (800dffc <AllDevicesReady+0x218>)
 800de2e:	2200      	movs	r2, #0
 800de30:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800de32:	4b73      	ldr	r3, [pc, #460]	@ (800e000 <AllDevicesReady+0x21c>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b05      	cmp	r3, #5
 800de38:	d006      	beq.n	800de48 <AllDevicesReady+0x64>
 800de3a:	4b72      	ldr	r3, [pc, #456]	@ (800e004 <AllDevicesReady+0x220>)
 800de3c:	789b      	ldrb	r3, [r3, #2]
 800de3e:	2201      	movs	r2, #1
 800de40:	4053      	eors	r3, r2
 800de42:	b2db      	uxtb	r3, r3
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800de48:	4b6c      	ldr	r3, [pc, #432]	@ (800dffc <AllDevicesReady+0x218>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800de4e:	4b6e      	ldr	r3, [pc, #440]	@ (800e008 <AllDevicesReady+0x224>)
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b08      	cmp	r3, #8
 800de54:	d006      	beq.n	800de64 <AllDevicesReady+0x80>
 800de56:	4b6b      	ldr	r3, [pc, #428]	@ (800e004 <AllDevicesReady+0x220>)
 800de58:	791b      	ldrb	r3, [r3, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	4053      	eors	r3, r2
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d002      	beq.n	800de6a <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800de64:	4b65      	ldr	r3, [pc, #404]	@ (800dffc <AllDevicesReady+0x218>)
 800de66:	2200      	movs	r2, #0
 800de68:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800de6a:	4b68      	ldr	r3, [pc, #416]	@ (800e00c <AllDevicesReady+0x228>)
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	2b08      	cmp	r3, #8
 800de70:	d006      	beq.n	800de80 <AllDevicesReady+0x9c>
 800de72:	4b64      	ldr	r3, [pc, #400]	@ (800e004 <AllDevicesReady+0x220>)
 800de74:	78db      	ldrb	r3, [r3, #3]
 800de76:	2201      	movs	r2, #1
 800de78:	4053      	eors	r3, r2
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d002      	beq.n	800de86 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800de80:	4b5e      	ldr	r3, [pc, #376]	@ (800dffc <AllDevicesReady+0x218>)
 800de82:	2200      	movs	r2, #0
 800de84:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800de86:	4b62      	ldr	r3, [pc, #392]	@ (800e010 <AllDevicesReady+0x22c>)
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	2b07      	cmp	r3, #7
 800de8c:	d006      	beq.n	800de9c <AllDevicesReady+0xb8>
 800de8e:	4b5d      	ldr	r3, [pc, #372]	@ (800e004 <AllDevicesReady+0x220>)
 800de90:	7a1b      	ldrb	r3, [r3, #8]
 800de92:	2201      	movs	r2, #1
 800de94:	4053      	eors	r3, r2
 800de96:	b2db      	uxtb	r3, r3
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d002      	beq.n	800dea2 <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800de9c:	4b57      	ldr	r3, [pc, #348]	@ (800dffc <AllDevicesReady+0x218>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800dea2:	4b5c      	ldr	r3, [pc, #368]	@ (800e014 <AllDevicesReady+0x230>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d003      	beq.n	800deb2 <AllDevicesReady+0xce>
 800deaa:	4b5a      	ldr	r3, [pc, #360]	@ (800e014 <AllDevicesReady+0x230>)
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	2b03      	cmp	r3, #3
 800deb0:	d102      	bne.n	800deb8 <AllDevicesReady+0xd4>
      Sensor.PM_measurementEnabled = false;
 800deb2:	4b52      	ldr	r3, [pc, #328]	@ (800dffc <AllDevicesReady+0x218>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800deb8:	4b57      	ldr	r3, [pc, #348]	@ (800e018 <AllDevicesReady+0x234>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b03      	cmp	r3, #3
 800debe:	d102      	bne.n	800dec6 <AllDevicesReady+0xe2>
      Sensor.MIC_measurementEnabled = false;
 800dec0:	4b4e      	ldr	r3, [pc, #312]	@ (800dffc <AllDevicesReady+0x218>)
 800dec2:	2200      	movs	r2, #0
 800dec4:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800dec6:	4b55      	ldr	r3, [pc, #340]	@ (800e01c <AllDevicesReady+0x238>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	2b09      	cmp	r3, #9
 800decc:	d004      	beq.n	800ded8 <AllDevicesReady+0xf4>
 800dece:	4b53      	ldr	r3, [pc, #332]	@ (800e01c <AllDevicesReady+0x238>)
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d000      	beq.n	800ded8 <AllDevicesReady+0xf4>
 800ded6:	e07d      	b.n	800dfd4 <AllDevicesReady+0x1f0>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800ded8:	4b48      	ldr	r3, [pc, #288]	@ (800dffc <AllDevicesReady+0x218>)
 800deda:	781a      	ldrb	r2, [r3, #0]
 800dedc:	4b47      	ldr	r3, [pc, #284]	@ (800dffc <AllDevicesReady+0x218>)
 800dede:	785b      	ldrb	r3, [r3, #1]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	4b45      	ldr	r3, [pc, #276]	@ (800dffc <AllDevicesReady+0x218>)
 800dee6:	791b      	ldrb	r3, [r3, #4]
 800dee8:	4313      	orrs	r3, r2
 800deea:	b2da      	uxtb	r2, r3
 800deec:	4b43      	ldr	r3, [pc, #268]	@ (800dffc <AllDevicesReady+0x218>)
 800deee:	795b      	ldrb	r3, [r3, #5]
 800def0:	4313      	orrs	r3, r2
 800def2:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800def4:	4b41      	ldr	r3, [pc, #260]	@ (800dffc <AllDevicesReady+0x218>)
 800def6:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800def8:	4313      	orrs	r3, r2
 800defa:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800defc:	4b3f      	ldr	r3, [pc, #252]	@ (800dffc <AllDevicesReady+0x218>)
 800defe:	789b      	ldrb	r3, [r3, #2]
 800df00:	4313      	orrs	r3, r2
 800df02:	b2da      	uxtb	r2, r3
 800df04:	4b3d      	ldr	r3, [pc, #244]	@ (800dffc <AllDevicesReady+0x218>)
 800df06:	78db      	ldrb	r3, [r3, #3]
 800df08:	4313      	orrs	r3, r2
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	1e5a      	subs	r2, r3, #1
 800df0e:	4193      	sbcs	r3, r2
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2201      	movs	r2, #1
 800df14:	4053      	eors	r3, r2
 800df16:	b2db      	uxtb	r3, r3
 800df18:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800df1a:	1dfb      	adds	r3, r7, #7
 800df1c:	701a      	strb	r2, [r3, #0]
 800df1e:	781a      	ldrb	r2, [r3, #0]
 800df20:	2101      	movs	r1, #1
 800df22:	400a      	ands	r2, r1
 800df24:	701a      	strb	r2, [r3, #0]
      if (!status && (prevstatus != status)) {
 800df26:	1dfb      	adds	r3, r7, #7
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2201      	movs	r2, #1
 800df2c:	4053      	eors	r3, r2
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	2b00      	cmp	r3, #0
 800df32:	d034      	beq.n	800df9e <AllDevicesReady+0x1ba>
 800df34:	4b3a      	ldr	r3, [pc, #232]	@ (800e020 <AllDevicesReady+0x23c>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	1dfa      	adds	r2, r7, #7
 800df3a:	7812      	ldrb	r2, [r2, #0]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d02e      	beq.n	800df9e <AllDevicesReady+0x1ba>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800df40:	4b2e      	ldr	r3, [pc, #184]	@ (800dffc <AllDevicesReady+0x218>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	469b      	mov	fp, r3
 800df46:	4b2d      	ldr	r3, [pc, #180]	@ (800dffc <AllDevicesReady+0x218>)
 800df48:	791b      	ldrb	r3, [r3, #4]
 800df4a:	001c      	movs	r4, r3
 800df4c:	4b2b      	ldr	r3, [pc, #172]	@ (800dffc <AllDevicesReady+0x218>)
 800df4e:	795b      	ldrb	r3, [r3, #5]
 800df50:	001d      	movs	r5, r3
 800df52:	4b2a      	ldr	r3, [pc, #168]	@ (800dffc <AllDevicesReady+0x218>)
 800df54:	799b      	ldrb	r3, [r3, #6]
 800df56:	001e      	movs	r6, r3
 800df58:	4b28      	ldr	r3, [pc, #160]	@ (800dffc <AllDevicesReady+0x218>)
 800df5a:	785b      	ldrb	r3, [r3, #1]
 800df5c:	4698      	mov	r8, r3
 800df5e:	4b27      	ldr	r3, [pc, #156]	@ (800dffc <AllDevicesReady+0x218>)
 800df60:	789b      	ldrb	r3, [r3, #2]
 800df62:	4699      	mov	r9, r3
 800df64:	4b25      	ldr	r3, [pc, #148]	@ (800dffc <AllDevicesReady+0x218>)
 800df66:	78db      	ldrb	r3, [r3, #3]
 800df68:	469a      	mov	sl, r3
 800df6a:	f000 f921 	bl	800e1b0 <getSensorLock>
 800df6e:	0003      	movs	r3, r0
 800df70:	4a2c      	ldr	r2, [pc, #176]	@ (800e024 <AllDevicesReady+0x240>)
 800df72:	4920      	ldr	r1, [pc, #128]	@ (800dff4 <AllDevicesReady+0x210>)
 800df74:	9306      	str	r3, [sp, #24]
 800df76:	4653      	mov	r3, sl
 800df78:	9305      	str	r3, [sp, #20]
 800df7a:	464b      	mov	r3, r9
 800df7c:	9304      	str	r3, [sp, #16]
 800df7e:	4643      	mov	r3, r8
 800df80:	9303      	str	r3, [sp, #12]
 800df82:	9602      	str	r6, [sp, #8]
 800df84:	9501      	str	r5, [sp, #4]
 800df86:	9400      	str	r4, [sp, #0]
 800df88:	465b      	mov	r3, fp
 800df8a:	2003      	movs	r0, #3
 800df8c:	f006 f92a 	bl	80141e4 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800df90:	4b23      	ldr	r3, [pc, #140]	@ (800e020 <AllDevicesReady+0x23c>)
 800df92:	1dfa      	adds	r2, r7, #7
 800df94:	7812      	ldrb	r2, [r2, #0]
 800df96:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800df98:	4b23      	ldr	r3, [pc, #140]	@ (800e028 <AllDevicesReady+0x244>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800df9e:	1dfb      	adds	r3, r7, #7
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d013      	beq.n	800dfce <AllDevicesReady+0x1ea>
 800dfa6:	4b20      	ldr	r3, [pc, #128]	@ (800e028 <AllDevicesReady+0x244>)
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	4053      	eors	r3, r2
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00c      	beq.n	800dfce <AllDevicesReady+0x1ea>
        Debug("All sensors in wait");
 800dfb4:	4a1d      	ldr	r2, [pc, #116]	@ (800e02c <AllDevicesReady+0x248>)
 800dfb6:	4b0f      	ldr	r3, [pc, #60]	@ (800dff4 <AllDevicesReady+0x210>)
 800dfb8:	0019      	movs	r1, r3
 800dfba:	2003      	movs	r0, #3
 800dfbc:	f006 f912 	bl	80141e4 <CreateLine>
        prevstatus = status;
 800dfc0:	4b17      	ldr	r3, [pc, #92]	@ (800e020 <AllDevicesReady+0x23c>)
 800dfc2:	1dfa      	adds	r2, r7, #7
 800dfc4:	7812      	ldrb	r2, [r2, #0]
 800dfc6:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800dfc8:	4b17      	ldr	r3, [pc, #92]	@ (800e028 <AllDevicesReady+0x244>)
 800dfca:	2201      	movs	r2, #1
 800dfcc:	701a      	strb	r2, [r3, #0]
      }
      return status;
 800dfce:	1dfb      	adds	r3, r7, #7
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	e000      	b.n	800dfd6 <AllDevicesReady+0x1f2>
    }
  }
  return false;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	0018      	movs	r0, r3
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	b003      	add	sp, #12
 800dfdc:	bcf0      	pop	{r4, r5, r6, r7}
 800dfde:	46bb      	mov	fp, r7
 800dfe0:	46b2      	mov	sl, r6
 800dfe2:	46a9      	mov	r9, r5
 800dfe4:	46a0      	mov	r8, r4
 800dfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfe8:	20001128 	.word	0x20001128
 800dfec:	20001147 	.word	0x20001147
 800dff0:	0802d7ac 	.word	0x0802d7ac
 800dff4:	0802d3c4 	.word	0x0802d3c4
 800dff8:	20001143 	.word	0x20001143
 800dffc:	20001130 	.word	0x20001130
 800e000:	20001144 	.word	0x20001144
 800e004:	20001138 	.word	0x20001138
 800e008:	20001145 	.word	0x20001145
 800e00c:	20001146 	.word	0x20001146
 800e010:	20001142 	.word	0x20001142
 800e014:	200000aa 	.word	0x200000aa
 800e018:	20001116 	.word	0x20001116
 800e01c:	20001117 	.word	0x20001117
 800e020:	200000a8 	.word	0x200000a8
 800e024:	0802d7cc 	.word	0x0802d7cc
 800e028:	20001148 	.word	0x20001148
 800e02c:	0802d830 	.word	0x0802d830

0800e030 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800e030:	b580      	push	{r7, lr}
 800e032:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800e034:	4b35      	ldr	r3, [pc, #212]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800e03c:	4b34      	ldr	r3, [pc, #208]	@ (800e110 <EnabledConnectedDevices+0xe0>)
 800e03e:	2201      	movs	r2, #1
 800e040:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800e042:	4b32      	ldr	r3, [pc, #200]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e044:	789b      	ldrb	r3, [r3, #2]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d006      	beq.n	800e058 <EnabledConnectedDevices+0x28>
 800e04a:	4b32      	ldr	r3, [pc, #200]	@ (800e114 <EnabledConnectedDevices+0xe4>)
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d002      	beq.n	800e058 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800e052:	4b2f      	ldr	r3, [pc, #188]	@ (800e110 <EnabledConnectedDevices+0xe0>)
 800e054:	2201      	movs	r2, #1
 800e056:	711a      	strb	r2, [r3, #4]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
 800e058:	4b2c      	ldr	r3, [pc, #176]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e05a:	789b      	ldrb	r3, [r3, #2]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d009      	beq.n	800e074 <EnabledConnectedDevices+0x44>
 800e060:	4b2c      	ldr	r3, [pc, #176]	@ (800e114 <EnabledConnectedDevices+0xe4>)
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d105      	bne.n	800e074 <EnabledConnectedDevices+0x44>
    Info("AHT2x sensor is disabled");
 800e068:	4a2b      	ldr	r2, [pc, #172]	@ (800e118 <EnabledConnectedDevices+0xe8>)
 800e06a:	4b2c      	ldr	r3, [pc, #176]	@ (800e11c <EnabledConnectedDevices+0xec>)
 800e06c:	0019      	movs	r1, r3
 800e06e:	2002      	movs	r0, #2
 800e070:	f006 f8b8 	bl	80141e4 <CreateLine>
  }
  if ((SensorProbe.BMP280_Present) && (BMPState != BMP_STATE_OFF)) {
 800e074:	4b25      	ldr	r3, [pc, #148]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e076:	791b      	ldrb	r3, [r3, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d006      	beq.n	800e08a <EnabledConnectedDevices+0x5a>
 800e07c:	4b28      	ldr	r3, [pc, #160]	@ (800e120 <EnabledConnectedDevices+0xf0>)
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	2b06      	cmp	r3, #6
 800e082:	d002      	beq.n	800e08a <EnabledConnectedDevices+0x5a>
    Sensor.BMP_measurementEnabled = true;
 800e084:	4b22      	ldr	r3, [pc, #136]	@ (800e110 <EnabledConnectedDevices+0xe0>)
 800e086:	2201      	movs	r2, #1
 800e088:	715a      	strb	r2, [r3, #5]
  }
  if ((SensorProbe.BMP280_Present) && (BMPState == BMP_STATE_OFF)) {
 800e08a:	4b20      	ldr	r3, [pc, #128]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e08c:	791b      	ldrb	r3, [r3, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d009      	beq.n	800e0a6 <EnabledConnectedDevices+0x76>
 800e092:	4b23      	ldr	r3, [pc, #140]	@ (800e120 <EnabledConnectedDevices+0xf0>)
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	2b06      	cmp	r3, #6
 800e098:	d105      	bne.n	800e0a6 <EnabledConnectedDevices+0x76>
    Info("BMP20 sensor is disabled");
 800e09a:	4a22      	ldr	r2, [pc, #136]	@ (800e124 <EnabledConnectedDevices+0xf4>)
 800e09c:	4b1f      	ldr	r3, [pc, #124]	@ (800e11c <EnabledConnectedDevices+0xec>)
 800e09e:	0019      	movs	r1, r3
 800e0a0:	2002      	movs	r0, #2
 800e0a2:	f006 f89f 	bl	80141e4 <CreateLine>
  }
  if (SensorProbe.ENS160_Present) {
 800e0a6:	4b19      	ldr	r3, [pc, #100]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e0a8:	78db      	ldrb	r3, [r3, #3]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d002      	beq.n	800e0b4 <EnabledConnectedDevices+0x84>
    Sensor.ENS_measurementEnabled = true;
 800e0ae:	4b18      	ldr	r3, [pc, #96]	@ (800e110 <EnabledConnectedDevices+0xe0>)
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800e0b4:	4b15      	ldr	r3, [pc, #84]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e0b6:	785b      	ldrb	r3, [r3, #1]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d006      	beq.n	800e0ca <EnabledConnectedDevices+0x9a>
 800e0bc:	4b13      	ldr	r3, [pc, #76]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e0be:	7a1b      	ldrb	r3, [r3, #8]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <EnabledConnectedDevices+0x9a>
    Sensor.VOC_measurementEnabled = true;
 800e0c4:	4b12      	ldr	r3, [pc, #72]	@ (800e110 <EnabledConnectedDevices+0xe0>)
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800e0ca:	4b10      	ldr	r3, [pc, #64]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e0cc:	795b      	ldrb	r3, [r3, #5]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d002      	beq.n	800e0d8 <EnabledConnectedDevices+0xa8>
    Sensor.PM_measurementEnabled = true;
 800e0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e110 <EnabledConnectedDevices+0xe0>)
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800e0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800e10c <EnabledConnectedDevices+0xdc>)
 800e0da:	799b      	ldrb	r3, [r3, #6]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <EnabledConnectedDevices+0xb6>
    Sensor.MIC_measurementEnabled = true;
 800e0e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e110 <EnabledConnectedDevices+0xe0>)
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800e0e6:	f006 fdf5 	bl	8014cd4 <HAL_GetTick>
 800e0ea:	0003      	movs	r3, r0
 800e0ec:	4a0e      	ldr	r2, [pc, #56]	@ (800e128 <EnabledConnectedDevices+0xf8>)
 800e0ee:	189a      	adds	r2, r3, r2
 800e0f0:	4b0e      	ldr	r3, [pc, #56]	@ (800e12c <EnabledConnectedDevices+0xfc>)
 800e0f2:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800e0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e130 <EnabledConnectedDevices+0x100>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800e0fa:	4a0e      	ldr	r2, [pc, #56]	@ (800e134 <EnabledConnectedDevices+0x104>)
 800e0fc:	4b0e      	ldr	r3, [pc, #56]	@ (800e138 <EnabledConnectedDevices+0x108>)
 800e0fe:	0019      	movs	r1, r3
 800e100:	2003      	movs	r0, #3
 800e102:	f006 f86f 	bl	80141e4 <CreateLine>
}
 800e106:	46c0      	nop			@ (mov r8, r8)
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	20001138 	.word	0x20001138
 800e110:	20001130 	.word	0x20001130
 800e114:	2000009f 	.word	0x2000009f
 800e118:	0802d844 	.word	0x0802d844
 800e11c:	0802d580 	.word	0x0802d580
 800e120:	200000a2 	.word	0x200000a2
 800e124:	0802d860 	.word	0x0802d860
 800e128:	00124f80 	.word	0x00124f80
 800e12c:	20001128 	.word	0x20001128
 800e130:	20001147 	.word	0x20001147
 800e134:	0802d87c 	.word	0x0802d87c
 800e138:	0802d3c4 	.word	0x0802d3c4

0800e13c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800e13c:	b580      	push	{r7, lr}
 800e13e:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800e140:	4b0e      	ldr	r3, [pc, #56]	@ (800e17c <DisableConnectedDevices+0x40>)
 800e142:	2200      	movs	r2, #0
 800e144:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800e146:	4b0d      	ldr	r3, [pc, #52]	@ (800e17c <DisableConnectedDevices+0x40>)
 800e148:	2200      	movs	r2, #0
 800e14a:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800e14c:	4b0b      	ldr	r3, [pc, #44]	@ (800e17c <DisableConnectedDevices+0x40>)
 800e14e:	2200      	movs	r2, #0
 800e150:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800e152:	4b0a      	ldr	r3, [pc, #40]	@ (800e17c <DisableConnectedDevices+0x40>)
 800e154:	2200      	movs	r2, #0
 800e156:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800e158:	4b08      	ldr	r3, [pc, #32]	@ (800e17c <DisableConnectedDevices+0x40>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800e15e:	4b07      	ldr	r3, [pc, #28]	@ (800e17c <DisableConnectedDevices+0x40>)
 800e160:	2200      	movs	r2, #0
 800e162:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800e164:	4b05      	ldr	r3, [pc, #20]	@ (800e17c <DisableConnectedDevices+0x40>)
 800e166:	2200      	movs	r2, #0
 800e168:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800e16a:	4a05      	ldr	r2, [pc, #20]	@ (800e180 <DisableConnectedDevices+0x44>)
 800e16c:	4b05      	ldr	r3, [pc, #20]	@ (800e184 <DisableConnectedDevices+0x48>)
 800e16e:	0019      	movs	r1, r3
 800e170:	2003      	movs	r0, #3
 800e172:	f006 f837 	bl	80141e4 <CreateLine>
}
 800e176:	46c0      	nop			@ (mov r8, r8)
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	20001130 	.word	0x20001130
 800e180:	0802d88c 	.word	0x0802d88c
 800e184:	0802d3c4 	.word	0x0802d3c4

0800e188 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	0002      	movs	r2, r0
 800e190:	1dfb      	adds	r3, r7, #7
 800e192:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800e194:	4b05      	ldr	r3, [pc, #20]	@ (800e1ac <setSensorLock+0x24>)
 800e196:	1dfa      	adds	r2, r7, #7
 800e198:	7812      	ldrb	r2, [r2, #0]
 800e19a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800e19c:	200a      	movs	r0, #10
 800e19e:	f006 fda3 	bl	8014ce8 <HAL_Delay>
}
 800e1a2:	46c0      	nop			@ (mov r8, r8)
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	b002      	add	sp, #8
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	46c0      	nop			@ (mov r8, r8)
 800e1ac:	20001141 	.word	0x20001141

0800e1b0 <getSensorLock>:

uint8_t getSensorLock() {
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800e1b4:	4b02      	ldr	r3, [pc, #8]	@ (800e1c0 <getSensorLock+0x10>)
 800e1b6:	781b      	ldrb	r3, [r3, #0]
}
 800e1b8:	0018      	movs	r0, r3
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	46c0      	nop			@ (mov r8, r8)
 800e1c0:	20001141 	.word	0x20001141

0800e1c4 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800e1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800e234 <UpkeepI2Csensors+0x70>)
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d005      	beq.n	800e1dc <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800e1d0:	f006 fbfe 	bl	80149d0 <HIDS_Upkeep>
 800e1d4:	0003      	movs	r3, r0
 800e1d6:	001a      	movs	r2, r3
 800e1d8:	4b17      	ldr	r3, [pc, #92]	@ (800e238 <UpkeepI2Csensors+0x74>)
 800e1da:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800e1dc:	4b15      	ldr	r3, [pc, #84]	@ (800e234 <UpkeepI2Csensors+0x70>)
 800e1de:	785b      	ldrb	r3, [r3, #1]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d005      	beq.n	800e1f0 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800e1e4:	f003 fb9e 	bl	8011924 <SGP_Upkeep>
 800e1e8:	0003      	movs	r3, r0
 800e1ea:	001a      	movs	r2, r3
 800e1ec:	4b13      	ldr	r3, [pc, #76]	@ (800e23c <UpkeepI2Csensors+0x78>)
 800e1ee:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800e1f0:	4b10      	ldr	r3, [pc, #64]	@ (800e234 <UpkeepI2Csensors+0x70>)
 800e1f2:	791b      	ldrb	r3, [r3, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d005      	beq.n	800e204 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800e1f8:	f7fd f992 	bl	800b520 <AHT_Upkeep>
 800e1fc:	0003      	movs	r3, r0
 800e1fe:	001a      	movs	r2, r3
 800e200:	4b0f      	ldr	r3, [pc, #60]	@ (800e240 <UpkeepI2Csensors+0x7c>)
 800e202:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800e204:	4b0b      	ldr	r3, [pc, #44]	@ (800e234 <UpkeepI2Csensors+0x70>)
 800e206:	795b      	ldrb	r3, [r3, #5]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d005      	beq.n	800e218 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800e20c:	f7fd ff3a 	bl	800c084 <BMP_Upkeep>
 800e210:	0003      	movs	r3, r0
 800e212:	001a      	movs	r2, r3
 800e214:	4b0b      	ldr	r3, [pc, #44]	@ (800e244 <UpkeepI2Csensors+0x80>)
 800e216:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800e218:	4b06      	ldr	r3, [pc, #24]	@ (800e234 <UpkeepI2Csensors+0x70>)
 800e21a:	799b      	ldrb	r3, [r3, #6]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d005      	beq.n	800e22c <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800e220:	f7f6 f91a 	bl	8004458 <ENS_Upkeep>
 800e224:	0003      	movs	r3, r0
 800e226:	001a      	movs	r2, r3
 800e228:	4b07      	ldr	r3, [pc, #28]	@ (800e248 <UpkeepI2Csensors+0x84>)
 800e22a:	701a      	strb	r2, [r3, #0]
  }
}
 800e22c:	46c0      	nop			@ (mov r8, r8)
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	46c0      	nop			@ (mov r8, r8)
 800e234:	20001130 	.word	0x20001130
 800e238:	20001143 	.word	0x20001143
 800e23c:	20001142 	.word	0x20001142
 800e240:	20001144 	.word	0x20001144
 800e244:	20001145 	.word	0x20001145
 800e248:	20001146 	.word	0x20001146

0800e24c <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800e24c:	b580      	push	{r7, lr}
 800e24e:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800e250:	4b02      	ldr	r3, [pc, #8]	@ (800e25c <ResetdBAmax+0x10>)
 800e252:	2200      	movs	r2, #0
 800e254:	601a      	str	r2, [r3, #0]
}
 800e256:	46c0      	nop			@ (mov r8, r8)
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	20001190 	.word	0x20001190

0800e260 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800e268:	f006 fd34 	bl	8014cd4 <HAL_GetTick>
 800e26c:	0002      	movs	r2, r0
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	18d2      	adds	r2, r2, r3
 800e272:	4b03      	ldr	r3, [pc, #12]	@ (800e280 <setMICTimeStamp+0x20>)
 800e274:	601a      	str	r2, [r3, #0]
}
 800e276:	46c0      	nop			@ (mov r8, r8)
 800e278:	46bd      	mov	sp, r7
 800e27a:	b002      	add	sp, #8
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	46c0      	nop			@ (mov r8, r8)
 800e280:	20001198 	.word	0x20001198

0800e284 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800e284:	b580      	push	{r7, lr}
 800e286:	af00      	add	r7, sp, #0
  counter = 0;
 800e288:	4b05      	ldr	r3, [pc, #20]	@ (800e2a0 <ResetDBACalculator+0x1c>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800e28e:	4b05      	ldr	r3, [pc, #20]	@ (800e2a4 <ResetDBACalculator+0x20>)
 800e290:	2201      	movs	r2, #1
 800e292:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800e294:	4b04      	ldr	r3, [pc, #16]	@ (800e2a8 <ResetDBACalculator+0x24>)
 800e296:	2200      	movs	r2, #0
 800e298:	701a      	strb	r2, [r3, #0]
}
 800e29a:	46c0      	nop			@ (mov r8, r8)
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	20001194 	.word	0x20001194
 800e2a4:	200000a9 	.word	0x200000a9
 800e2a8:	20001195 	.word	0x20001195

0800e2ac <MIC_Print>:

void MIC_Print(void) {
 800e2ac:	b5b0      	push	{r4, r5, r7, lr}
 800e2ae:	b08c      	sub	sp, #48	@ 0x30
 800e2b0:	af08      	add	r7, sp, #32
  dBA = dBValue; // dBValue is the actual sample
 800e2b2:	4ba1      	ldr	r3, [pc, #644]	@ (800e538 <MIC_Print+0x28c>)
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	4ba1      	ldr	r3, [pc, #644]	@ (800e53c <MIC_Print+0x290>)
 800e2b8:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800e2ba:	4ba1      	ldr	r3, [pc, #644]	@ (800e540 <MIC_Print+0x294>)
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	001a      	movs	r2, r3
 800e2c0:	4b9e      	ldr	r3, [pc, #632]	@ (800e53c <MIC_Print+0x290>)
 800e2c2:	6819      	ldr	r1, [r3, #0]
 800e2c4:	4b9f      	ldr	r3, [pc, #636]	@ (800e544 <MIC_Print+0x298>)
 800e2c6:	0092      	lsls	r2, r2, #2
 800e2c8:	50d1      	str	r1, [r2, r3]
  counter++;
 800e2ca:	4b9d      	ldr	r3, [pc, #628]	@ (800e540 <MIC_Print+0x294>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	4b9b      	ldr	r3, [pc, #620]	@ (800e540 <MIC_Print+0x294>)
 800e2d4:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800e2d6:	4b9a      	ldr	r3, [pc, #616]	@ (800e540 <MIC_Print+0x294>)
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	2b09      	cmp	r3, #9
 800e2dc:	d80b      	bhi.n	800e2f6 <MIC_Print+0x4a>
 800e2de:	4b9a      	ldr	r3, [pc, #616]	@ (800e548 <MIC_Print+0x29c>)
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	4053      	eors	r3, r2
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d004      	beq.n	800e2f6 <MIC_Print+0x4a>
    denominator = counter;
 800e2ec:	4b94      	ldr	r3, [pc, #592]	@ (800e540 <MIC_Print+0x294>)
 800e2ee:	781a      	ldrb	r2, [r3, #0]
 800e2f0:	4b96      	ldr	r3, [pc, #600]	@ (800e54c <MIC_Print+0x2a0>)
 800e2f2:	701a      	strb	r2, [r3, #0]
 800e2f4:	e005      	b.n	800e302 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800e2f6:	4b95      	ldr	r3, [pc, #596]	@ (800e54c <MIC_Print+0x2a0>)
 800e2f8:	220a      	movs	r2, #10
 800e2fa:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800e2fc:	4b92      	ldr	r3, [pc, #584]	@ (800e548 <MIC_Print+0x29c>)
 800e2fe:	2201      	movs	r2, #1
 800e300:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800e302:	4b93      	ldr	r3, [pc, #588]	@ (800e550 <MIC_Print+0x2a4>)
 800e304:	2200      	movs	r2, #0
 800e306:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800e308:	230f      	movs	r3, #15
 800e30a:	18fb      	adds	r3, r7, r3
 800e30c:	2200      	movs	r2, #0
 800e30e:	701a      	strb	r2, [r3, #0]
 800e310:	e042      	b.n	800e398 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800e312:	240f      	movs	r4, #15
 800e314:	193b      	adds	r3, r7, r4
 800e316:	781a      	ldrb	r2, [r3, #0]
 800e318:	4b8a      	ldr	r3, [pc, #552]	@ (800e544 <MIC_Print+0x298>)
 800e31a:	0092      	lsls	r2, r2, #2
 800e31c:	58d2      	ldr	r2, [r2, r3]
 800e31e:	4b8c      	ldr	r3, [pc, #560]	@ (800e550 <MIC_Print+0x2a4>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	1c19      	adds	r1, r3, #0
 800e324:	1c10      	adds	r0, r2, #0
 800e326:	f7f2 facb 	bl	80008c0 <__aeabi_fadd>
 800e32a:	1c03      	adds	r3, r0, #0
 800e32c:	1c1a      	adds	r2, r3, #0
 800e32e:	4b88      	ldr	r3, [pc, #544]	@ (800e550 <MIC_Print+0x2a4>)
 800e330:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800e332:	193b      	adds	r3, r7, r4
 800e334:	781a      	ldrb	r2, [r3, #0]
 800e336:	4b83      	ldr	r3, [pc, #524]	@ (800e544 <MIC_Print+0x298>)
 800e338:	0092      	lsls	r2, r2, #2
 800e33a:	58d2      	ldr	r2, [r2, r3]
 800e33c:	4b85      	ldr	r3, [pc, #532]	@ (800e554 <MIC_Print+0x2a8>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	1c19      	adds	r1, r3, #0
 800e342:	1c10      	adds	r0, r2, #0
 800e344:	f7f2 f908 	bl	8000558 <__aeabi_fcmpgt>
 800e348:	1e03      	subs	r3, r0, #0
 800e34a:	d006      	beq.n	800e35a <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800e34c:	193b      	adds	r3, r7, r4
 800e34e:	781a      	ldrb	r2, [r3, #0]
 800e350:	4b7c      	ldr	r3, [pc, #496]	@ (800e544 <MIC_Print+0x298>)
 800e352:	0092      	lsls	r2, r2, #2
 800e354:	58d2      	ldr	r2, [r2, r3]
 800e356:	4b7f      	ldr	r3, [pc, #508]	@ (800e554 <MIC_Print+0x2a8>)
 800e358:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800e35a:	4b7d      	ldr	r3, [pc, #500]	@ (800e550 <MIC_Print+0x2a4>)
 800e35c:	681c      	ldr	r4, [r3, #0]
 800e35e:	4b7b      	ldr	r3, [pc, #492]	@ (800e54c <MIC_Print+0x2a0>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	0018      	movs	r0, r3
 800e364:	f7f3 fab0 	bl	80018c8 <__aeabi_ui2f>
 800e368:	1c03      	adds	r3, r0, #0
 800e36a:	1c19      	adds	r1, r3, #0
 800e36c:	1c20      	adds	r0, r4, #0
 800e36e:	f7f2 fc99 	bl	8000ca4 <__aeabi_fdiv>
 800e372:	1c03      	adds	r3, r0, #0
 800e374:	1c1a      	adds	r2, r3, #0
 800e376:	4b78      	ldr	r3, [pc, #480]	@ (800e558 <MIC_Print+0x2ac>)
 800e378:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800e37a:	4b70      	ldr	r3, [pc, #448]	@ (800e53c <MIC_Print+0x290>)
 800e37c:	6818      	ldr	r0, [r3, #0]
 800e37e:	4b75      	ldr	r3, [pc, #468]	@ (800e554 <MIC_Print+0x2a8>)
 800e380:	6819      	ldr	r1, [r3, #0]
 800e382:	4b75      	ldr	r3, [pc, #468]	@ (800e558 <MIC_Print+0x2ac>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	1c1a      	adds	r2, r3, #0
 800e388:	f7f6 fc2e 	bl	8004be8 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800e38c:	210f      	movs	r1, #15
 800e38e:	187b      	adds	r3, r7, r1
 800e390:	781a      	ldrb	r2, [r3, #0]
 800e392:	187b      	adds	r3, r7, r1
 800e394:	3201      	adds	r2, #1
 800e396:	701a      	strb	r2, [r3, #0]
 800e398:	4b6c      	ldr	r3, [pc, #432]	@ (800e54c <MIC_Print+0x2a0>)
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	220f      	movs	r2, #15
 800e39e:	18ba      	adds	r2, r7, r2
 800e3a0:	7812      	ldrb	r2, [r2, #0]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d3b5      	bcc.n	800e312 <MIC_Print+0x66>
  }
  Info("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f", dBA,mPabuffer, dBAmax, dBAAverage);
 800e3a6:	4b65      	ldr	r3, [pc, #404]	@ (800e53c <MIC_Print+0x290>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	1c18      	adds	r0, r3, #0
 800e3ac:	f7f5 fa72 	bl	8003894 <__aeabi_f2d>
 800e3b0:	0004      	movs	r4, r0
 800e3b2:	000d      	movs	r5, r1
 800e3b4:	4b67      	ldr	r3, [pc, #412]	@ (800e554 <MIC_Print+0x2a8>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	1c18      	adds	r0, r3, #0
 800e3ba:	f7f5 fa6b 	bl	8003894 <__aeabi_f2d>
 800e3be:	6038      	str	r0, [r7, #0]
 800e3c0:	6079      	str	r1, [r7, #4]
 800e3c2:	4b65      	ldr	r3, [pc, #404]	@ (800e558 <MIC_Print+0x2ac>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	1c18      	adds	r0, r3, #0
 800e3c8:	f7f5 fa64 	bl	8003894 <__aeabi_f2d>
 800e3cc:	0002      	movs	r2, r0
 800e3ce:	000b      	movs	r3, r1
 800e3d0:	4862      	ldr	r0, [pc, #392]	@ (800e55c <MIC_Print+0x2b0>)
 800e3d2:	4963      	ldr	r1, [pc, #396]	@ (800e560 <MIC_Print+0x2b4>)
 800e3d4:	9206      	str	r2, [sp, #24]
 800e3d6:	9307      	str	r3, [sp, #28]
 800e3d8:	683a      	ldr	r2, [r7, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	9204      	str	r2, [sp, #16]
 800e3de:	9305      	str	r3, [sp, #20]
 800e3e0:	4b60      	ldr	r3, [pc, #384]	@ (800e564 <MIC_Print+0x2b8>)
 800e3e2:	9302      	str	r3, [sp, #8]
 800e3e4:	9400      	str	r4, [sp, #0]
 800e3e6:	9501      	str	r5, [sp, #4]
 800e3e8:	0002      	movs	r2, r0
 800e3ea:	2002      	movs	r0, #2
 800e3ec:	f005 fefa 	bl	80141e4 <CreateLine>

  if(counter > NUMBER_OF_SAMPLES){
 800e3f0:	4b53      	ldr	r3, [pc, #332]	@ (800e540 <MIC_Print+0x294>)
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	2b0a      	cmp	r3, #10
 800e3f6:	d902      	bls.n	800e3fe <MIC_Print+0x152>
    counter = 0;
 800e3f8:	4b51      	ldr	r3, [pc, #324]	@ (800e540 <MIC_Print+0x294>)
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800e3fe:	4b4f      	ldr	r3, [pc, #316]	@ (800e53c <MIC_Print+0x290>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4959      	ldr	r1, [pc, #356]	@ (800e568 <MIC_Print+0x2bc>)
 800e404:	1c18      	adds	r0, r3, #0
 800e406:	f7f2 f8b1 	bl	800056c <__aeabi_fcmpge>
 800e40a:	1e03      	subs	r3, r0, #0
 800e40c:	d004      	beq.n	800e418 <MIC_Print+0x16c>
    SetDBLED(true, true, true);
 800e40e:	2201      	movs	r2, #1
 800e410:	2101      	movs	r1, #1
 800e412:	2001      	movs	r0, #1
 800e414:	f004 fbba 	bl	8012b8c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800e418:	4b48      	ldr	r3, [pc, #288]	@ (800e53c <MIC_Print+0x290>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4953      	ldr	r1, [pc, #332]	@ (800e56c <MIC_Print+0x2c0>)
 800e41e:	1c18      	adds	r0, r3, #0
 800e420:	f7f2 f8a4 	bl	800056c <__aeabi_fcmpge>
 800e424:	1e03      	subs	r3, r0, #0
 800e426:	d00c      	beq.n	800e442 <MIC_Print+0x196>
 800e428:	4b44      	ldr	r3, [pc, #272]	@ (800e53c <MIC_Print+0x290>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	494e      	ldr	r1, [pc, #312]	@ (800e568 <MIC_Print+0x2bc>)
 800e42e:	1c18      	adds	r0, r3, #0
 800e430:	f7f2 f87e 	bl	8000530 <__aeabi_fcmplt>
 800e434:	1e03      	subs	r3, r0, #0
 800e436:	d004      	beq.n	800e442 <MIC_Print+0x196>
    SetDBLED(true, false, false);
 800e438:	2200      	movs	r2, #0
 800e43a:	2100      	movs	r1, #0
 800e43c:	2001      	movs	r0, #1
 800e43e:	f004 fba5 	bl	8012b8c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800e442:	4b3e      	ldr	r3, [pc, #248]	@ (800e53c <MIC_Print+0x290>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	494a      	ldr	r1, [pc, #296]	@ (800e570 <MIC_Print+0x2c4>)
 800e448:	1c18      	adds	r0, r3, #0
 800e44a:	f7f2 f88f 	bl	800056c <__aeabi_fcmpge>
 800e44e:	1e03      	subs	r3, r0, #0
 800e450:	d00c      	beq.n	800e46c <MIC_Print+0x1c0>
 800e452:	4b3a      	ldr	r3, [pc, #232]	@ (800e53c <MIC_Print+0x290>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4945      	ldr	r1, [pc, #276]	@ (800e56c <MIC_Print+0x2c0>)
 800e458:	1c18      	adds	r0, r3, #0
 800e45a:	f7f2 f869 	bl	8000530 <__aeabi_fcmplt>
 800e45e:	1e03      	subs	r3, r0, #0
 800e460:	d004      	beq.n	800e46c <MIC_Print+0x1c0>
    SetDBLED(true, true, false);
 800e462:	2200      	movs	r2, #0
 800e464:	2101      	movs	r1, #1
 800e466:	2001      	movs	r0, #1
 800e468:	f004 fb90 	bl	8012b8c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800e46c:	4b33      	ldr	r3, [pc, #204]	@ (800e53c <MIC_Print+0x290>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4940      	ldr	r1, [pc, #256]	@ (800e574 <MIC_Print+0x2c8>)
 800e472:	1c18      	adds	r0, r3, #0
 800e474:	f7f2 f87a 	bl	800056c <__aeabi_fcmpge>
 800e478:	1e03      	subs	r3, r0, #0
 800e47a:	d00c      	beq.n	800e496 <MIC_Print+0x1ea>
 800e47c:	4b2f      	ldr	r3, [pc, #188]	@ (800e53c <MIC_Print+0x290>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	493b      	ldr	r1, [pc, #236]	@ (800e570 <MIC_Print+0x2c4>)
 800e482:	1c18      	adds	r0, r3, #0
 800e484:	f7f2 f854 	bl	8000530 <__aeabi_fcmplt>
 800e488:	1e03      	subs	r3, r0, #0
 800e48a:	d004      	beq.n	800e496 <MIC_Print+0x1ea>
    SetDBLED(false, true, false);
 800e48c:	2200      	movs	r2, #0
 800e48e:	2101      	movs	r1, #1
 800e490:	2000      	movs	r0, #0
 800e492:	f004 fb7b 	bl	8012b8c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800e496:	4b29      	ldr	r3, [pc, #164]	@ (800e53c <MIC_Print+0x290>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4937      	ldr	r1, [pc, #220]	@ (800e578 <MIC_Print+0x2cc>)
 800e49c:	1c18      	adds	r0, r3, #0
 800e49e:	f7f2 f865 	bl	800056c <__aeabi_fcmpge>
 800e4a2:	1e03      	subs	r3, r0, #0
 800e4a4:	d00c      	beq.n	800e4c0 <MIC_Print+0x214>
 800e4a6:	4b25      	ldr	r3, [pc, #148]	@ (800e53c <MIC_Print+0x290>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4932      	ldr	r1, [pc, #200]	@ (800e574 <MIC_Print+0x2c8>)
 800e4ac:	1c18      	adds	r0, r3, #0
 800e4ae:	f7f2 f83f 	bl	8000530 <__aeabi_fcmplt>
 800e4b2:	1e03      	subs	r3, r0, #0
 800e4b4:	d004      	beq.n	800e4c0 <MIC_Print+0x214>
    SetDBLED(false, true, true);
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	2101      	movs	r1, #1
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	f004 fb66 	bl	8012b8c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800e4c0:	4b1e      	ldr	r3, [pc, #120]	@ (800e53c <MIC_Print+0x290>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	492d      	ldr	r1, [pc, #180]	@ (800e57c <MIC_Print+0x2d0>)
 800e4c6:	1c18      	adds	r0, r3, #0
 800e4c8:	f7f2 f850 	bl	800056c <__aeabi_fcmpge>
 800e4cc:	1e03      	subs	r3, r0, #0
 800e4ce:	d00c      	beq.n	800e4ea <MIC_Print+0x23e>
 800e4d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e53c <MIC_Print+0x290>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4928      	ldr	r1, [pc, #160]	@ (800e578 <MIC_Print+0x2cc>)
 800e4d6:	1c18      	adds	r0, r3, #0
 800e4d8:	f7f2 f82a 	bl	8000530 <__aeabi_fcmplt>
 800e4dc:	1e03      	subs	r3, r0, #0
 800e4de:	d004      	beq.n	800e4ea <MIC_Print+0x23e>
    SetDBLED(false, false, true);
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	2100      	movs	r1, #0
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	f004 fb51 	bl	8012b8c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800e4ea:	4b14      	ldr	r3, [pc, #80]	@ (800e53c <MIC_Print+0x290>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4924      	ldr	r1, [pc, #144]	@ (800e580 <MIC_Print+0x2d4>)
 800e4f0:	1c18      	adds	r0, r3, #0
 800e4f2:	f7f2 f83b 	bl	800056c <__aeabi_fcmpge>
 800e4f6:	1e03      	subs	r3, r0, #0
 800e4f8:	d00c      	beq.n	800e514 <MIC_Print+0x268>
 800e4fa:	4b10      	ldr	r3, [pc, #64]	@ (800e53c <MIC_Print+0x290>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	491f      	ldr	r1, [pc, #124]	@ (800e57c <MIC_Print+0x2d0>)
 800e500:	1c18      	adds	r0, r3, #0
 800e502:	f7f2 f815 	bl	8000530 <__aeabi_fcmplt>
 800e506:	1e03      	subs	r3, r0, #0
 800e508:	d004      	beq.n	800e514 <MIC_Print+0x268>
    SetDBLED(true, false, true);
 800e50a:	2201      	movs	r2, #1
 800e50c:	2100      	movs	r1, #0
 800e50e:	2001      	movs	r0, #1
 800e510:	f004 fb3c 	bl	8012b8c <SetDBLED>
  }
  if(dBA < 35){//off
 800e514:	4b09      	ldr	r3, [pc, #36]	@ (800e53c <MIC_Print+0x290>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4919      	ldr	r1, [pc, #100]	@ (800e580 <MIC_Print+0x2d4>)
 800e51a:	1c18      	adds	r0, r3, #0
 800e51c:	f7f2 f808 	bl	8000530 <__aeabi_fcmplt>
 800e520:	1e03      	subs	r3, r0, #0
 800e522:	d100      	bne.n	800e526 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
  }
}
 800e524:	e004      	b.n	800e530 <MIC_Print+0x284>
    SetDBLED(false, false, false);
 800e526:	2200      	movs	r2, #0
 800e528:	2100      	movs	r1, #0
 800e52a:	2000      	movs	r0, #0
 800e52c:	f004 fb2e 	bl	8012b8c <SetDBLED>
}
 800e530:	46c0      	nop			@ (mov r8, r8)
 800e532:	46bd      	mov	sp, r7
 800e534:	b004      	add	sp, #16
 800e536:	bdb0      	pop	{r4, r5, r7, pc}
 800e538:	2000118c 	.word	0x2000118c
 800e53c:	20001158 	.word	0x20001158
 800e540:	20001194 	.word	0x20001194
 800e544:	2000115c 	.word	0x2000115c
 800e548:	20001195 	.word	0x20001195
 800e54c:	200000a9 	.word	0x200000a9
 800e550:	20001188 	.word	0x20001188
 800e554:	20001190 	.word	0x20001190
 800e558:	20001184 	.word	0x20001184
 800e55c:	0802d8a0 	.word	0x0802d8a0
 800e560:	0802d8e4 	.word	0x0802d8e4
 800e564:	2000114c 	.word	0x2000114c
 800e568:	42b40000 	.word	0x42b40000
 800e56c:	42a00000 	.word	0x42a00000
 800e570:	428c0000 	.word	0x428c0000
 800e574:	42700000 	.word	0x42700000
 800e578:	42480000 	.word	0x42480000
 800e57c:	42200000 	.word	0x42200000
 800e580:	420c0000 	.word	0x420c0000

0800e584 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800e58a:	4b11      	ldr	r3, [pc, #68]	@ (800e5d0 <MIC_TestMeasurementDone+0x4c>)
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	4a10      	ldr	r2, [pc, #64]	@ (800e5d4 <MIC_TestMeasurementDone+0x50>)
 800e592:	4911      	ldr	r1, [pc, #68]	@ (800e5d8 <MIC_TestMeasurementDone+0x54>)
 800e594:	2002      	movs	r0, #2
 800e596:	f005 fe25 	bl	80141e4 <CreateLine>
  if(DataReady) {
 800e59a:	4b0d      	ldr	r3, [pc, #52]	@ (800e5d0 <MIC_TestMeasurementDone+0x4c>)
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d010      	beq.n	800e5c6 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800e5a4:	1dfb      	adds	r3, r7, #7
 800e5a6:	4a0d      	ldr	r2, [pc, #52]	@ (800e5dc <MIC_TestMeasurementDone+0x58>)
 800e5a8:	7812      	ldrb	r2, [r2, #0]
 800e5aa:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800e5ac:	4b0b      	ldr	r3, [pc, #44]	@ (800e5dc <MIC_TestMeasurementDone+0x58>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	4a0b      	ldr	r2, [pc, #44]	@ (800e5e0 <MIC_TestMeasurementDone+0x5c>)
 800e5b4:	4908      	ldr	r1, [pc, #32]	@ (800e5d8 <MIC_TestMeasurementDone+0x54>)
 800e5b6:	2002      	movs	r0, #2
 800e5b8:	f005 fe14 	bl	80141e4 <CreateLine>
    ResetMICIndicator();
 800e5bc:	f004 fbd4 	bl	8012d68 <ResetMICIndicator>
    return Check;
 800e5c0:	1dfb      	adds	r3, r7, #7
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	e000      	b.n	800e5c8 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800e5c6:	2300      	movs	r3, #0
}
 800e5c8:	0018      	movs	r0, r3
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	b002      	add	sp, #8
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	200012c9 	.word	0x200012c9
 800e5d4:	0802d8e8 	.word	0x0802d8e8
 800e5d8:	0802d8e4 	.word	0x0802d8e4
 800e5dc:	200012ca 	.word	0x200012ca
 800e5e0:	0802d914 	.word	0x0802d914

0800e5e4 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800e5ea:	4b78      	ldr	r3, [pc, #480]	@ (800e7cc <Mic_Upkeep+0x1e8>)
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d100      	bne.n	800e5f4 <Mic_Upkeep+0x10>
 800e5f2:	e0b8      	b.n	800e766 <Mic_Upkeep+0x182>
 800e5f4:	dd00      	ble.n	800e5f8 <Mic_Upkeep+0x14>
 800e5f6:	e0d3      	b.n	800e7a0 <Mic_Upkeep+0x1bc>
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	d037      	beq.n	800e66c <Mic_Upkeep+0x88>
 800e5fc:	dd00      	ble.n	800e600 <Mic_Upkeep+0x1c>
 800e5fe:	e0cf      	b.n	800e7a0 <Mic_Upkeep+0x1bc>
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <Mic_Upkeep+0x26>
 800e604:	2b01      	cmp	r3, #1
 800e606:	d014      	beq.n	800e632 <Mic_Upkeep+0x4e>
 800e608:	e0ca      	b.n	800e7a0 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800e60a:	2001      	movs	r0, #1
 800e60c:	f003 fbb4 	bl	8011d78 <enableMicrophone>
 800e610:	0003      	movs	r3, r0
 800e612:	001a      	movs	r2, r3
 800e614:	2301      	movs	r3, #1
 800e616:	4053      	eors	r3, r2
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d005      	beq.n	800e62a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800e61e:	4a6c      	ldr	r2, [pc, #432]	@ (800e7d0 <Mic_Upkeep+0x1ec>)
 800e620:	4b6c      	ldr	r3, [pc, #432]	@ (800e7d4 <Mic_Upkeep+0x1f0>)
 800e622:	217f      	movs	r1, #127	@ 0x7f
 800e624:	0018      	movs	r0, r3
 800e626:	f005 fec5 	bl	80143b4 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800e62a:	4b68      	ldr	r3, [pc, #416]	@ (800e7cc <Mic_Upkeep+0x1e8>)
 800e62c:	2201      	movs	r2, #1
 800e62e:	701a      	strb	r2, [r3, #0]
    break;
 800e630:	e0c5      	b.n	800e7be <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800e632:	f003 fb7d 	bl	8011d30 <micSettlingComplete>
 800e636:	1e03      	subs	r3, r0, #0
 800e638:	d105      	bne.n	800e646 <Mic_Upkeep+0x62>
 800e63a:	4b67      	ldr	r3, [pc, #412]	@ (800e7d8 <Mic_Upkeep+0x1f4>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b00      	cmp	r3, #0
 800e642:	d100      	bne.n	800e646 <Mic_Upkeep+0x62>
 800e644:	e0b6      	b.n	800e7b4 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800e646:	f003 fc01 	bl	8011e4c <startSPLcalculation>
 800e64a:	0003      	movs	r3, r0
 800e64c:	001a      	movs	r2, r3
 800e64e:	2301      	movs	r3, #1
 800e650:	4053      	eors	r3, r2
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	d005      	beq.n	800e664 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800e658:	4a5d      	ldr	r2, [pc, #372]	@ (800e7d0 <Mic_Upkeep+0x1ec>)
 800e65a:	4b5e      	ldr	r3, [pc, #376]	@ (800e7d4 <Mic_Upkeep+0x1f0>)
 800e65c:	2188      	movs	r1, #136	@ 0x88
 800e65e:	0018      	movs	r0, r3
 800e660:	f005 fea8 	bl	80143b4 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800e664:	4b59      	ldr	r3, [pc, #356]	@ (800e7cc <Mic_Upkeep+0x1e8>)
 800e666:	2202      	movs	r2, #2
 800e668:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e66a:	e0a3      	b.n	800e7b4 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800e66c:	4b5b      	ldr	r3, [pc, #364]	@ (800e7dc <Mic_Upkeep+0x1f8>)
 800e66e:	2201      	movs	r2, #1
 800e670:	2101      	movs	r1, #1
 800e672:	0018      	movs	r0, r3
 800e674:	f003 fa3e 	bl	8011af4 <getSoundData>
 800e678:	1e03      	subs	r3, r0, #0
 800e67a:	d100      	bne.n	800e67e <Mic_Upkeep+0x9a>
 800e67c:	e09c      	b.n	800e7b8 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800e67e:	f003 fb37 	bl	8011cf0 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800e682:	4b56      	ldr	r3, [pc, #344]	@ (800e7dc <Mic_Upkeep+0x1f8>)
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	001a      	movs	r2, r3
 800e688:	4b54      	ldr	r3, [pc, #336]	@ (800e7dc <Mic_Upkeep+0x1f8>)
 800e68a:	785b      	ldrb	r3, [r3, #1]
 800e68c:	4954      	ldr	r1, [pc, #336]	@ (800e7e0 <Mic_Upkeep+0x1fc>)
 800e68e:	0038      	movs	r0, r7
 800e690:	f017 ff76 	bl	8026580 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800e694:	4b51      	ldr	r3, [pc, #324]	@ (800e7dc <Mic_Upkeep+0x1f8>)
 800e696:	89db      	ldrh	r3, [r3, #14]
 800e698:	001a      	movs	r2, r3
 800e69a:	4b50      	ldr	r3, [pc, #320]	@ (800e7dc <Mic_Upkeep+0x1f8>)
 800e69c:	7c1b      	ldrb	r3, [r3, #16]
 800e69e:	4951      	ldr	r1, [pc, #324]	@ (800e7e4 <Mic_Upkeep+0x200>)
 800e6a0:	4851      	ldr	r0, [pc, #324]	@ (800e7e8 <Mic_Upkeep+0x204>)
 800e6a2:	f017 ff6d 	bl	8026580 <siprintf>
      dBValue = atof(dBbuffer);
 800e6a6:	003b      	movs	r3, r7
 800e6a8:	0018      	movs	r0, r3
 800e6aa:	f016 fb0f 	bl	8024ccc <atof>
 800e6ae:	0002      	movs	r2, r0
 800e6b0:	000b      	movs	r3, r1
 800e6b2:	0010      	movs	r0, r2
 800e6b4:	0019      	movs	r1, r3
 800e6b6:	f7f5 f935 	bl	8003924 <__aeabi_d2f>
 800e6ba:	1c02      	adds	r2, r0, #0
 800e6bc:	4b4b      	ldr	r3, [pc, #300]	@ (800e7ec <Mic_Upkeep+0x208>)
 800e6be:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800e6c0:	4b4a      	ldr	r3, [pc, #296]	@ (800e7ec <Mic_Upkeep+0x208>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	494a      	ldr	r1, [pc, #296]	@ (800e7f0 <Mic_Upkeep+0x20c>)
 800e6c6:	1c18      	adds	r0, r3, #0
 800e6c8:	f7f2 fcba 	bl	8001040 <__aeabi_fmul>
 800e6cc:	1c03      	adds	r3, r0, #0
 800e6ce:	1c18      	adds	r0, r3, #0
 800e6d0:	f7f5 f8e0 	bl	8003894 <__aeabi_f2d>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	4b47      	ldr	r3, [pc, #284]	@ (800e7f4 <Mic_Upkeep+0x210>)
 800e6d8:	f7f3 f93c 	bl	8001954 <__aeabi_dadd>
 800e6dc:	0002      	movs	r2, r0
 800e6de:	000b      	movs	r3, r1
 800e6e0:	0010      	movs	r0, r2
 800e6e2:	0019      	movs	r1, r3
 800e6e4:	f7f5 f848 	bl	8003778 <__aeabi_d2iz>
 800e6e8:	0003      	movs	r3, r0
 800e6ea:	0018      	movs	r0, r3
 800e6ec:	f7f5 f880 	bl	80037f0 <__aeabi_i2d>
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	4b41      	ldr	r3, [pc, #260]	@ (800e7f8 <Mic_Upkeep+0x214>)
 800e6f4:	f7f3 fcf4 	bl	80020e0 <__aeabi_ddiv>
 800e6f8:	0002      	movs	r2, r0
 800e6fa:	000b      	movs	r3, r1
 800e6fc:	0010      	movs	r0, r2
 800e6fe:	0019      	movs	r1, r3
 800e700:	f7f5 f910 	bl	8003924 <__aeabi_d2f>
 800e704:	1c02      	adds	r2, r0, #0
 800e706:	4b39      	ldr	r3, [pc, #228]	@ (800e7ec <Mic_Upkeep+0x208>)
 800e708:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e70a:	f7ff fdcf 	bl	800e2ac <MIC_Print>
      if (!startSPLcalculation()) {
 800e70e:	f003 fb9d 	bl	8011e4c <startSPLcalculation>
 800e712:	0003      	movs	r3, r0
 800e714:	001a      	movs	r2, r3
 800e716:	2301      	movs	r3, #1
 800e718:	4053      	eors	r3, r2
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d005      	beq.n	800e72c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e720:	4a2b      	ldr	r2, [pc, #172]	@ (800e7d0 <Mic_Upkeep+0x1ec>)
 800e722:	4b2c      	ldr	r3, [pc, #176]	@ (800e7d4 <Mic_Upkeep+0x1f0>)
 800e724:	2198      	movs	r1, #152	@ 0x98
 800e726:	0018      	movs	r0, r3
 800e728:	f005 fe44 	bl	80143b4 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e72c:	2000      	movs	r0, #0
 800e72e:	f003 fb23 	bl	8011d78 <enableMicrophone>
 800e732:	0003      	movs	r3, r0
 800e734:	001a      	movs	r2, r3
 800e736:	2301      	movs	r3, #1
 800e738:	4053      	eors	r3, r2
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d005      	beq.n	800e74c <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e740:	4a23      	ldr	r2, [pc, #140]	@ (800e7d0 <Mic_Upkeep+0x1ec>)
 800e742:	4b24      	ldr	r3, [pc, #144]	@ (800e7d4 <Mic_Upkeep+0x1f0>)
 800e744:	219b      	movs	r1, #155	@ 0x9b
 800e746:	0018      	movs	r0, r3
 800e748:	f005 fe34 	bl	80143b4 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800e74c:	f006 fac2 	bl	8014cd4 <HAL_GetTick>
 800e750:	0003      	movs	r3, r0
 800e752:	4a2a      	ldr	r2, [pc, #168]	@ (800e7fc <Mic_Upkeep+0x218>)
 800e754:	189a      	adds	r2, r3, r2
 800e756:	4b2a      	ldr	r3, [pc, #168]	@ (800e800 <Mic_Upkeep+0x21c>)
 800e758:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e75a:	4b1c      	ldr	r3, [pc, #112]	@ (800e7cc <Mic_Upkeep+0x1e8>)
 800e75c:	2203      	movs	r2, #3
 800e75e:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800e760:	f004 fb02 	bl	8012d68 <ResetMICIndicator>
    }
    break;
 800e764:	e028      	b.n	800e7b8 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e766:	4b26      	ldr	r3, [pc, #152]	@ (800e800 <Mic_Upkeep+0x21c>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	0018      	movs	r0, r3
 800e76c:	f005 fce4 	bl	8014138 <TimestampIsReached>
 800e770:	1e03      	subs	r3, r0, #0
 800e772:	d023      	beq.n	800e7bc <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800e774:	2001      	movs	r0, #1
 800e776:	f003 faff 	bl	8011d78 <enableMicrophone>
 800e77a:	0003      	movs	r3, r0
 800e77c:	001a      	movs	r2, r3
 800e77e:	2301      	movs	r3, #1
 800e780:	4053      	eors	r3, r2
 800e782:	b2db      	uxtb	r3, r3
 800e784:	2b00      	cmp	r3, #0
 800e786:	d005      	beq.n	800e794 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800e788:	4a11      	ldr	r2, [pc, #68]	@ (800e7d0 <Mic_Upkeep+0x1ec>)
 800e78a:	4b12      	ldr	r3, [pc, #72]	@ (800e7d4 <Mic_Upkeep+0x1f0>)
 800e78c:	21a6      	movs	r1, #166	@ 0xa6
 800e78e:	0018      	movs	r0, r3
 800e790:	f005 fe10 	bl	80143b4 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e794:	4b0d      	ldr	r3, [pc, #52]	@ (800e7cc <Mic_Upkeep+0x1e8>)
 800e796:	2201      	movs	r2, #1
 800e798:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800e79a:	f004 faa3 	bl	8012ce4 <SetMICIndicator>
    }
    break;
 800e79e:	e00d      	b.n	800e7bc <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800e7a0:	4a18      	ldr	r2, [pc, #96]	@ (800e804 <Mic_Upkeep+0x220>)
 800e7a2:	4b19      	ldr	r3, [pc, #100]	@ (800e808 <Mic_Upkeep+0x224>)
 800e7a4:	0019      	movs	r1, r3
 800e7a6:	2003      	movs	r0, #3
 800e7a8:	f005 fd1c 	bl	80141e4 <CreateLine>
    MicState = MIC_STATE_INIT;
 800e7ac:	4b07      	ldr	r3, [pc, #28]	@ (800e7cc <Mic_Upkeep+0x1e8>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	701a      	strb	r2, [r3, #0]
    break;
 800e7b2:	e004      	b.n	800e7be <Mic_Upkeep+0x1da>
    break;
 800e7b4:	46c0      	nop			@ (mov r8, r8)
 800e7b6:	e002      	b.n	800e7be <Mic_Upkeep+0x1da>
    break;
 800e7b8:	46c0      	nop			@ (mov r8, r8)
 800e7ba:	e000      	b.n	800e7be <Mic_Upkeep+0x1da>
    break;
 800e7bc:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e7be:	4b03      	ldr	r3, [pc, #12]	@ (800e7cc <Mic_Upkeep+0x1e8>)
 800e7c0:	781b      	ldrb	r3, [r3, #0]
}
 800e7c2:	0018      	movs	r0, r3
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	b002      	add	sp, #8
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	46c0      	nop			@ (mov r8, r8)
 800e7cc:	200011ae 	.word	0x200011ae
 800e7d0:	0802d92c 	.word	0x0802d92c
 800e7d4:	0802ee50 	.word	0x0802ee50
 800e7d8:	200012c9 	.word	0x200012c9
 800e7dc:	2000119c 	.word	0x2000119c
 800e7e0:	0802d948 	.word	0x0802d948
 800e7e4:	0802d950 	.word	0x0802d950
 800e7e8:	2000114c 	.word	0x2000114c
 800e7ec:	2000118c 	.word	0x2000118c
 800e7f0:	42c80000 	.word	0x42c80000
 800e7f4:	3fe00000 	.word	0x3fe00000
 800e7f8:	40590000 	.word	0x40590000
 800e7fc:	000002f3 	.word	0x000002f3
 800e800:	20001198 	.word	0x20001198
 800e804:	0802d958 	.word	0x0802d958
 800e808:	0802d978 	.word	0x0802d978

0800e80c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e812:	1d3b      	adds	r3, r7, #4
 800e814:	0018      	movs	r0, r3
 800e816:	2314      	movs	r3, #20
 800e818:	001a      	movs	r2, r3
 800e81a:	2100      	movs	r1, #0
 800e81c:	f017 fff8 	bl	8026810 <memset>
  RTC_DateTypeDef sDate = {0};
 800e820:	003b      	movs	r3, r7
 800e822:	2200      	movs	r2, #0
 800e824:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e826:	4b2e      	ldr	r3, [pc, #184]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e828:	4a2e      	ldr	r2, [pc, #184]	@ (800e8e4 <MX_RTC_Init+0xd8>)
 800e82a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e82c:	4b2c      	ldr	r3, [pc, #176]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e82e:	2200      	movs	r2, #0
 800e830:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e832:	4b2b      	ldr	r3, [pc, #172]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e834:	227f      	movs	r2, #127	@ 0x7f
 800e836:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e838:	4b29      	ldr	r3, [pc, #164]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e83a:	22ff      	movs	r2, #255	@ 0xff
 800e83c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e83e:	4b28      	ldr	r3, [pc, #160]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e840:	2200      	movs	r2, #0
 800e842:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e844:	4b26      	ldr	r3, [pc, #152]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e846:	2200      	movs	r2, #0
 800e848:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e84a:	4b25      	ldr	r3, [pc, #148]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e850:	4b23      	ldr	r3, [pc, #140]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e852:	2200      	movs	r2, #0
 800e854:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e856:	4b22      	ldr	r3, [pc, #136]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e858:	0018      	movs	r0, r3
 800e85a:	f00d fdcb 	bl	801c3f4 <HAL_RTC_Init>
 800e85e:	1e03      	subs	r3, r0, #0
 800e860:	d001      	beq.n	800e866 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e862:	f7fe ff77 	bl	800d754 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e866:	1d3b      	adds	r3, r7, #4
 800e868:	220d      	movs	r2, #13
 800e86a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e86c:	1d3b      	adds	r3, r7, #4
 800e86e:	2200      	movs	r2, #0
 800e870:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e872:	1d3b      	adds	r3, r7, #4
 800e874:	2200      	movs	r2, #0
 800e876:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e878:	1d3b      	adds	r3, r7, #4
 800e87a:	2200      	movs	r2, #0
 800e87c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e87e:	1d3b      	adds	r3, r7, #4
 800e880:	2200      	movs	r2, #0
 800e882:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e884:	1d39      	adds	r1, r7, #4
 800e886:	4b16      	ldr	r3, [pc, #88]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e888:	2200      	movs	r2, #0
 800e88a:	0018      	movs	r0, r3
 800e88c:	f00d fe4e 	bl	801c52c <HAL_RTC_SetTime>
 800e890:	1e03      	subs	r3, r0, #0
 800e892:	d001      	beq.n	800e898 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e894:	f7fe ff5e 	bl	800d754 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e898:	003b      	movs	r3, r7
 800e89a:	2206      	movs	r2, #6
 800e89c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e89e:	003b      	movs	r3, r7
 800e8a0:	2211      	movs	r2, #17
 800e8a2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e8a4:	003b      	movs	r3, r7
 800e8a6:	2217      	movs	r2, #23
 800e8a8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e8aa:	003b      	movs	r3, r7
 800e8ac:	2218      	movs	r2, #24
 800e8ae:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e8b0:	0039      	movs	r1, r7
 800e8b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	0018      	movs	r0, r3
 800e8b8:	f00d ff40 	bl	801c73c <HAL_RTC_SetDate>
 800e8bc:	1e03      	subs	r3, r0, #0
 800e8be:	d001      	beq.n	800e8c4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e8c0:	f7fe ff48 	bl	800d754 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e8c4:	4b06      	ldr	r3, [pc, #24]	@ (800e8e0 <MX_RTC_Init+0xd4>)
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	2100      	movs	r1, #0
 800e8ca:	0018      	movs	r0, r3
 800e8cc:	f00e f90e 	bl	801caec <HAL_RTCEx_SetWakeUpTimer_IT>
 800e8d0:	1e03      	subs	r3, r0, #0
 800e8d2:	d001      	beq.n	800e8d8 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e8d4:	f7fe ff3e 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e8d8:	46c0      	nop			@ (mov r8, r8)
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	b006      	add	sp, #24
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	200011b0 	.word	0x200011b0
 800e8e4:	40002800 	.word	0x40002800

0800e8e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a0a      	ldr	r2, [pc, #40]	@ (800e920 <HAL_RTC_MspInit+0x38>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d10e      	bne.n	800e918 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e8fa:	4b0a      	ldr	r3, [pc, #40]	@ (800e924 <HAL_RTC_MspInit+0x3c>)
 800e8fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e8fe:	4b09      	ldr	r3, [pc, #36]	@ (800e924 <HAL_RTC_MspInit+0x3c>)
 800e900:	2180      	movs	r1, #128	@ 0x80
 800e902:	02c9      	lsls	r1, r1, #11
 800e904:	430a      	orrs	r2, r1
 800e906:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e908:	2200      	movs	r2, #0
 800e90a:	2100      	movs	r1, #0
 800e90c:	2002      	movs	r0, #2
 800e90e:	f006 fe85 	bl	801561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e912:	2002      	movs	r0, #2
 800e914:	f006 fe97 	bl	8015646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e918:	46c0      	nop			@ (mov r8, r8)
 800e91a:	46bd      	mov	sp, r7
 800e91c:	b002      	add	sp, #8
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	40002800 	.word	0x40002800
 800e924:	40021000 	.word	0x40021000

0800e928 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e928:	b580      	push	{r7, lr}
 800e92a:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e92c:	4b02      	ldr	r3, [pc, #8]	@ (800e938 <sen5x_Get_sen5x_enable_state+0x10>)
 800e92e:	781b      	ldrb	r3, [r3, #0]
}
 800e930:	0018      	movs	r0, r3
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	46c0      	nop			@ (mov r8, r8)
 800e938:	200011d7 	.word	0x200011d7

0800e93c <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	0002      	movs	r2, r0
 800e944:	1dfb      	adds	r3, r7, #7
 800e946:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e948:	4b03      	ldr	r3, [pc, #12]	@ (800e958 <sen5x_Set_sen5x_state+0x1c>)
 800e94a:	1dfa      	adds	r2, r7, #7
 800e94c:	7812      	ldrb	r2, [r2, #0]
 800e94e:	701a      	strb	r2, [r3, #0]
}
 800e950:	46c0      	nop			@ (mov r8, r8)
 800e952:	46bd      	mov	sp, r7
 800e954:	b002      	add	sp, #8
 800e956:	bd80      	pop	{r7, pc}
 800e958:	200011d7 	.word	0x200011d7

0800e95c <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e964:	f006 f9b6 	bl	8014cd4 <HAL_GetTick>
 800e968:	0002      	movs	r2, r0
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	18d2      	adds	r2, r2, r3
 800e96e:	4b03      	ldr	r3, [pc, #12]	@ (800e97c <setsen5xReadTimer+0x20>)
 800e970:	601a      	str	r2, [r3, #0]
}
 800e972:	46c0      	nop			@ (mov r8, r8)
 800e974:	46bd      	mov	sp, r7
 800e976:	b002      	add	sp, #8
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	46c0      	nop			@ (mov r8, r8)
 800e97c:	200011e4 	.word	0x200011e4

0800e980 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	0002      	movs	r2, r0
 800e988:	1dfb      	adds	r3, r7, #7
 800e98a:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e98c:	4b03      	ldr	r3, [pc, #12]	@ (800e99c <setsen5xSamplecounter+0x1c>)
 800e98e:	2200      	movs	r2, #0
 800e990:	701a      	strb	r2, [r3, #0]
}
 800e992:	46c0      	nop			@ (mov r8, r8)
 800e994:	46bd      	mov	sp, r7
 800e996:	b002      	add	sp, #8
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	46c0      	nop			@ (mov r8, r8)
 800e99c:	200011e0 	.word	0x200011e0

0800e9a0 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e9a8:	f7fe ff8c 	bl	800d8c4 <IsPMSensorEnabled>
 800e9ac:	1e03      	subs	r3, r0, #0
 800e9ae:	d035      	beq.n	800ea1c <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800e9b0:	f004 f80e 	bl	80129d0 <batteryChargeCheck>
 800e9b4:	0003      	movs	r3, r0
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d103      	bne.n	800e9c2 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800e9ba:	4b20      	ldr	r3, [pc, #128]	@ (800ea3c <sen5x_enable+0x9c>)
 800e9bc:	2201      	movs	r2, #1
 800e9be:	701a      	strb	r2, [r3, #0]
 800e9c0:	e00d      	b.n	800e9de <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e9c2:	4b1e      	ldr	r3, [pc, #120]	@ (800ea3c <sen5x_enable+0x9c>)
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	1e5a      	subs	r2, r3, #1
 800e9c8:	4193      	sbcs	r3, r2
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	4053      	eors	r3, r2
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	1c1a      	adds	r2, r3, #0
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	4013      	ands	r3, r2
 800e9d8:	b2da      	uxtb	r2, r3
 800e9da:	4b18      	ldr	r3, [pc, #96]	@ (800ea3c <sen5x_enable+0x9c>)
 800e9dc:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e9de:	4b17      	ldr	r3, [pc, #92]	@ (800ea3c <sen5x_enable+0x9c>)
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	f7ff ffb8 	bl	800e95c <setsen5xReadTimer>
 800e9ec:	e009      	b.n	800ea02 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e9ee:	f006 f971 	bl	8014cd4 <HAL_GetTick>
 800e9f2:	0002      	movs	r2, r0
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2164      	movs	r1, #100	@ 0x64
 800e9f8:	434b      	muls	r3, r1
 800e9fa:	18d3      	adds	r3, r2, r3
 800e9fc:	0018      	movs	r0, r3
 800e9fe:	f7ff ffad 	bl	800e95c <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800ea02:	4b0e      	ldr	r3, [pc, #56]	@ (800ea3c <sen5x_enable+0x9c>)
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d001      	beq.n	800ea0e <sen5x_enable+0x6e>
 800ea0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea40 <sen5x_enable+0xa0>)
 800ea0c:	e000      	b.n	800ea10 <sen5x_enable+0x70>
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea44 <sen5x_enable+0xa4>)
 800ea10:	4a0d      	ldr	r2, [pc, #52]	@ (800ea48 <sen5x_enable+0xa8>)
 800ea12:	490e      	ldr	r1, [pc, #56]	@ (800ea4c <sen5x_enable+0xac>)
 800ea14:	2002      	movs	r0, #2
 800ea16:	f005 fbe5 	bl	80141e4 <CreateLine>
 800ea1a:	e005      	b.n	800ea28 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800ea1c:	4a0c      	ldr	r2, [pc, #48]	@ (800ea50 <sen5x_enable+0xb0>)
 800ea1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea4c <sen5x_enable+0xac>)
 800ea20:	0019      	movs	r1, r3
 800ea22:	2002      	movs	r0, #2
 800ea24:	f005 fbde 	bl	80141e4 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800ea28:	4b0a      	ldr	r3, [pc, #40]	@ (800ea54 <sen5x_enable+0xb4>)
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800ea2e:	4b03      	ldr	r3, [pc, #12]	@ (800ea3c <sen5x_enable+0x9c>)
 800ea30:	781b      	ldrb	r3, [r3, #0]
}
 800ea32:	0018      	movs	r0, r3
 800ea34:	46bd      	mov	sp, r7
 800ea36:	b002      	add	sp, #8
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	46c0      	nop			@ (mov r8, r8)
 800ea3c:	200011d7 	.word	0x200011d7
 800ea40:	0802d97c 	.word	0x0802d97c
 800ea44:	0802d984 	.word	0x0802d984
 800ea48:	0802d990 	.word	0x0802d990
 800ea4c:	0802d9ac 	.word	0x0802d9ac
 800ea50:	0802d9b0 	.word	0x0802d9b0
 800ea54:	200000aa 	.word	0x200000aa

0800ea58 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800ea5c:	2380      	movs	r3, #128	@ 0x80
 800ea5e:	015b      	lsls	r3, r3, #5
 800ea60:	480f      	ldr	r0, [pc, #60]	@ (800eaa0 <sen5x_Power_On+0x48>)
 800ea62:	2201      	movs	r2, #1
 800ea64:	0019      	movs	r1, r3
 800ea66:	f007 fbc6 	bl	80161f6 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800ea6a:	4a0e      	ldr	r2, [pc, #56]	@ (800eaa4 <sen5x_Power_On+0x4c>)
 800ea6c:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa8 <sen5x_Power_On+0x50>)
 800ea6e:	0019      	movs	r1, r3
 800ea70:	2003      	movs	r0, #3
 800ea72:	f005 fbb7 	bl	80141e4 <CreateLine>
  HAL_Delay(150);
 800ea76:	2096      	movs	r0, #150	@ 0x96
 800ea78:	f006 f936 	bl	8014ce8 <HAL_Delay>
  if (sen5x_device_reset()) {
 800ea7c:	f001 f9f6 	bl	800fe6c <sen5x_device_reset>
 800ea80:	1e03      	subs	r3, r0, #0
 800ea82:	d006      	beq.n	800ea92 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800ea84:	4a09      	ldr	r2, [pc, #36]	@ (800eaac <sen5x_Power_On+0x54>)
 800ea86:	4b0a      	ldr	r3, [pc, #40]	@ (800eab0 <sen5x_Power_On+0x58>)
 800ea88:	0019      	movs	r1, r3
 800ea8a:	2001      	movs	r0, #1
 800ea8c:	f005 fbaa 	bl	80141e4 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800ea90:	e002      	b.n	800ea98 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800ea92:	4b08      	ldr	r3, [pc, #32]	@ (800eab4 <sen5x_Power_On+0x5c>)
 800ea94:	2201      	movs	r2, #1
 800ea96:	701a      	strb	r2, [r3, #0]
}
 800ea98:	46c0      	nop			@ (mov r8, r8)
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	46c0      	nop			@ (mov r8, r8)
 800eaa0:	50000800 	.word	0x50000800
 800eaa4:	0802d9d0 	.word	0x0802d9d0
 800eaa8:	0802d9ec 	.word	0x0802d9ec
 800eaac:	0802d9f0 	.word	0x0802d9f0
 800eab0:	0802da18 	.word	0x0802da18
 800eab4:	200011d5 	.word	0x200011d5

0800eab8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800eab8:	b580      	push	{r7, lr}
 800eaba:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800eabc:	4b0e      	ldr	r3, [pc, #56]	@ (800eaf8 <sen5x_Power_Off+0x40>)
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d006      	beq.n	800ead2 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800eac4:	4a0d      	ldr	r2, [pc, #52]	@ (800eafc <sen5x_Power_Off+0x44>)
 800eac6:	4b0e      	ldr	r3, [pc, #56]	@ (800eb00 <sen5x_Power_Off+0x48>)
 800eac8:	0019      	movs	r1, r3
 800eaca:	2003      	movs	r0, #3
 800eacc:	f005 fb8a 	bl	80141e4 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800ead0:	e00f      	b.n	800eaf2 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800ead2:	4a0c      	ldr	r2, [pc, #48]	@ (800eb04 <sen5x_Power_Off+0x4c>)
 800ead4:	4b0a      	ldr	r3, [pc, #40]	@ (800eb00 <sen5x_Power_Off+0x48>)
 800ead6:	0019      	movs	r1, r3
 800ead8:	2003      	movs	r0, #3
 800eada:	f005 fb83 	bl	80141e4 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800eade:	2380      	movs	r3, #128	@ 0x80
 800eae0:	015b      	lsls	r3, r3, #5
 800eae2:	4809      	ldr	r0, [pc, #36]	@ (800eb08 <sen5x_Power_Off+0x50>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	0019      	movs	r1, r3
 800eae8:	f007 fb85 	bl	80161f6 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800eaec:	4b07      	ldr	r3, [pc, #28]	@ (800eb0c <sen5x_Power_Off+0x54>)
 800eaee:	2200      	movs	r2, #0
 800eaf0:	701a      	strb	r2, [r3, #0]
}
 800eaf2:	46c0      	nop			@ (mov r8, r8)
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	200011d6 	.word	0x200011d6
 800eafc:	0802da1c 	.word	0x0802da1c
 800eb00:	0802d9ec 	.word	0x0802d9ec
 800eb04:	0802da4c 	.word	0x0802da4c
 800eb08:	50000800 	.word	0x50000800
 800eb0c:	200011d5 	.word	0x200011d5

0800eb10 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800eb10:	b580      	push	{r7, lr}
 800eb12:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800eb14:	4b02      	ldr	r3, [pc, #8]	@ (800eb20 <reset_fanCleaningDone+0x10>)
 800eb16:	2200      	movs	r2, #0
 800eb18:	701a      	strb	r2, [r3, #0]
}
 800eb1a:	46c0      	nop			@ (mov r8, r8)
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	200011d4 	.word	0x200011d4

0800eb24 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800eb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb26:	b093      	sub	sp, #76	@ 0x4c
 800eb28:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800eb2a:	2436      	movs	r4, #54	@ 0x36
 800eb2c:	193b      	adds	r3, r7, r4
 800eb2e:	2200      	movs	r2, #0
 800eb30:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800eb32:	2335      	movs	r3, #53	@ 0x35
 800eb34:	18fb      	adds	r3, r7, r3
 800eb36:	2220      	movs	r2, #32
 800eb38:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800eb3a:	2334      	movs	r3, #52	@ 0x34
 800eb3c:	18fb      	adds	r3, r7, r3
 800eb3e:	2220      	movs	r2, #32
 800eb40:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800eb42:	f7ff ff89 	bl	800ea58 <sen5x_Power_On>
  error = sen5x_device_reset();
 800eb46:	0025      	movs	r5, r4
 800eb48:	193c      	adds	r4, r7, r4
 800eb4a:	f001 f98f 	bl	800fe6c <sen5x_device_reset>
 800eb4e:	0003      	movs	r3, r0
 800eb50:	8023      	strh	r3, [r4, #0]
  if (error) {
 800eb52:	002c      	movs	r4, r5
 800eb54:	193b      	adds	r3, r7, r4
 800eb56:	2200      	movs	r2, #0
 800eb58:	5e9b      	ldrsh	r3, [r3, r2]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00b      	beq.n	800eb76 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800eb5e:	193b      	adds	r3, r7, r4
 800eb60:	2200      	movs	r2, #0
 800eb62:	5e9b      	ldrsh	r3, [r3, r2]
 800eb64:	4a77      	ldr	r2, [pc, #476]	@ (800ed44 <probe_sen5x+0x220>)
 800eb66:	4978      	ldr	r1, [pc, #480]	@ (800ed48 <probe_sen5x+0x224>)
 800eb68:	2001      	movs	r0, #1
 800eb6a:	f005 fb3b 	bl	80141e4 <CreateLine>
      return error;
 800eb6e:	193b      	adds	r3, r7, r4
 800eb70:	2200      	movs	r2, #0
 800eb72:	5e9b      	ldrsh	r3, [r3, r2]
 800eb74:	e0e2      	b.n	800ed3c <probe_sen5x+0x218>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800eb76:	2536      	movs	r5, #54	@ 0x36
 800eb78:	197c      	adds	r4, r7, r5
 800eb7a:	2335      	movs	r3, #53	@ 0x35
 800eb7c:	18fb      	adds	r3, r7, r3
 800eb7e:	781a      	ldrb	r2, [r3, #0]
 800eb80:	230c      	movs	r3, #12
 800eb82:	18fb      	adds	r3, r7, r3
 800eb84:	0011      	movs	r1, r2
 800eb86:	0018      	movs	r0, r3
 800eb88:	f001 f85c 	bl	800fc44 <sen5x_get_serial_number>
 800eb8c:	0003      	movs	r3, r0
 800eb8e:	8023      	strh	r3, [r4, #0]
  if (error) {
 800eb90:	197b      	adds	r3, r7, r5
 800eb92:	2200      	movs	r2, #0
 800eb94:	5e9b      	ldrsh	r3, [r3, r2]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00b      	beq.n	800ebb2 <probe_sen5x+0x8e>
      Error("Error executing sen5x_get_serial_number(): %i", error);
 800eb9a:	197b      	adds	r3, r7, r5
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	5e9b      	ldrsh	r3, [r3, r2]
 800eba0:	4a6a      	ldr	r2, [pc, #424]	@ (800ed4c <probe_sen5x+0x228>)
 800eba2:	4969      	ldr	r1, [pc, #420]	@ (800ed48 <probe_sen5x+0x224>)
 800eba4:	2001      	movs	r0, #1
 800eba6:	f005 fb1d 	bl	80141e4 <CreateLine>
      return error;
 800ebaa:	197b      	adds	r3, r7, r5
 800ebac:	2200      	movs	r2, #0
 800ebae:	5e9b      	ldrsh	r3, [r3, r2]
 800ebb0:	e0c4      	b.n	800ed3c <probe_sen5x+0x218>
  } else {
      Info("Serial number: %s", serial_number);
 800ebb2:	230c      	movs	r3, #12
 800ebb4:	18fb      	adds	r3, r7, r3
 800ebb6:	4a66      	ldr	r2, [pc, #408]	@ (800ed50 <probe_sen5x+0x22c>)
 800ebb8:	4966      	ldr	r1, [pc, #408]	@ (800ed54 <probe_sen5x+0x230>)
 800ebba:	2002      	movs	r0, #2
 800ebbc:	f005 fb12 	bl	80141e4 <CreateLine>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800ebc0:	2536      	movs	r5, #54	@ 0x36
 800ebc2:	197c      	adds	r4, r7, r5
 800ebc4:	2334      	movs	r3, #52	@ 0x34
 800ebc6:	18fb      	adds	r3, r7, r3
 800ebc8:	781a      	ldrb	r2, [r3, #0]
 800ebca:	4b63      	ldr	r3, [pc, #396]	@ (800ed58 <probe_sen5x+0x234>)
 800ebcc:	0011      	movs	r1, r2
 800ebce:	0018      	movs	r0, r3
 800ebd0:	f000 ffe2 	bl	800fb98 <sen5x_get_product_name>
 800ebd4:	0003      	movs	r3, r0
 800ebd6:	8023      	strh	r3, [r4, #0]
  if (error) {
 800ebd8:	197b      	adds	r3, r7, r5
 800ebda:	2200      	movs	r2, #0
 800ebdc:	5e9b      	ldrsh	r3, [r3, r2]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00b      	beq.n	800ebfa <probe_sen5x+0xd6>
      Error("Error executing sen5x_get_product_name(): %i", error);
 800ebe2:	197b      	adds	r3, r7, r5
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	5e9b      	ldrsh	r3, [r3, r2]
 800ebe8:	4a5c      	ldr	r2, [pc, #368]	@ (800ed5c <probe_sen5x+0x238>)
 800ebea:	4957      	ldr	r1, [pc, #348]	@ (800ed48 <probe_sen5x+0x224>)
 800ebec:	2001      	movs	r0, #1
 800ebee:	f005 faf9 	bl	80141e4 <CreateLine>
      return error;
 800ebf2:	197b      	adds	r3, r7, r5
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	5e9b      	ldrsh	r3, [r3, r2]
 800ebf8:	e0a0      	b.n	800ed3c <probe_sen5x+0x218>
  } else {
      Info("Product name: %s", product_name);
 800ebfa:	4b57      	ldr	r3, [pc, #348]	@ (800ed58 <probe_sen5x+0x234>)
 800ebfc:	4a58      	ldr	r2, [pc, #352]	@ (800ed60 <probe_sen5x+0x23c>)
 800ebfe:	4955      	ldr	r1, [pc, #340]	@ (800ed54 <probe_sen5x+0x230>)
 800ec00:	2002      	movs	r0, #2
 800ec02:	f005 faef 	bl	80141e4 <CreateLine>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800ec06:	2636      	movs	r6, #54	@ 0x36
 800ec08:	19bc      	adds	r4, r7, r6
 800ec0a:	2308      	movs	r3, #8
 800ec0c:	18fd      	adds	r5, r7, r3
 800ec0e:	2309      	movs	r3, #9
 800ec10:	18fa      	adds	r2, r7, r3
 800ec12:	230a      	movs	r3, #10
 800ec14:	18f9      	adds	r1, r7, r3
 800ec16:	230b      	movs	r3, #11
 800ec18:	18f8      	adds	r0, r7, r3
 800ec1a:	1d7b      	adds	r3, r7, #5
 800ec1c:	9302      	str	r3, [sp, #8]
 800ec1e:	1dbb      	adds	r3, r7, #6
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	1dfb      	adds	r3, r7, #7
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	002b      	movs	r3, r5
 800ec28:	f001 f862 	bl	800fcf0 <sen5x_get_version>
 800ec2c:	0003      	movs	r3, r0
 800ec2e:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800ec30:	19bb      	adds	r3, r7, r6
 800ec32:	2200      	movs	r2, #0
 800ec34:	5e9b      	ldrsh	r3, [r3, r2]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00b      	beq.n	800ec52 <probe_sen5x+0x12e>
      Error("Error executing sen5x_get_version(): %i", error);
 800ec3a:	19bb      	adds	r3, r7, r6
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	5e9b      	ldrsh	r3, [r3, r2]
 800ec40:	4a48      	ldr	r2, [pc, #288]	@ (800ed64 <probe_sen5x+0x240>)
 800ec42:	4941      	ldr	r1, [pc, #260]	@ (800ed48 <probe_sen5x+0x224>)
 800ec44:	2001      	movs	r0, #1
 800ec46:	f005 facd 	bl	80141e4 <CreateLine>
      return error;
 800ec4a:	19bb      	adds	r3, r7, r6
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	5e9b      	ldrsh	r3, [r3, r2]
 800ec50:	e074      	b.n	800ed3c <probe_sen5x+0x218>
  } else {
      Info("Firmware: %u.%u, Hardware: %u.%u", firmware_major,
 800ec52:	230b      	movs	r3, #11
 800ec54:	18fb      	adds	r3, r7, r3
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	001d      	movs	r5, r3
 800ec5a:	230a      	movs	r3, #10
 800ec5c:	18fb      	adds	r3, r7, r3
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	0018      	movs	r0, r3
 800ec62:	2308      	movs	r3, #8
 800ec64:	18fb      	adds	r3, r7, r3
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	001c      	movs	r4, r3
 800ec6a:	1dfb      	adds	r3, r7, #7
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	4a3e      	ldr	r2, [pc, #248]	@ (800ed68 <probe_sen5x+0x244>)
 800ec70:	4938      	ldr	r1, [pc, #224]	@ (800ed54 <probe_sen5x+0x230>)
 800ec72:	9302      	str	r3, [sp, #8]
 800ec74:	9401      	str	r4, [sp, #4]
 800ec76:	9000      	str	r0, [sp, #0]
 800ec78:	002b      	movs	r3, r5
 800ec7a:	2002      	movs	r0, #2
 800ec7c:	f005 fab2 	bl	80141e4 <CreateLine>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800ec80:	2300      	movs	r3, #0
 800ec82:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800ec84:	262e      	movs	r6, #46	@ 0x2e
 800ec86:	19bb      	adds	r3, r7, r6
 800ec88:	2200      	movs	r2, #0
 800ec8a:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800ec8c:	232c      	movs	r3, #44	@ 0x2c
 800ec8e:	18fb      	adds	r3, r7, r3
 800ec90:	2200      	movs	r2, #0
 800ec92:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800ec94:	4935      	ldr	r1, [pc, #212]	@ (800ed6c <probe_sen5x+0x248>)
 800ec96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec98:	f7f2 f9d2 	bl	8001040 <__aeabi_fmul>
 800ec9c:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800ec9e:	1c18      	adds	r0, r3, #0
 800eca0:	f7f2 fda2 	bl	80017e8 <__aeabi_f2iz>
 800eca4:	0003      	movs	r3, r0
 800eca6:	b218      	sxth	r0, r3
 800eca8:	2536      	movs	r5, #54	@ 0x36
 800ecaa:	197c      	adds	r4, r7, r5
 800ecac:	232c      	movs	r3, #44	@ 0x2c
 800ecae:	18fb      	adds	r3, r7, r3
 800ecb0:	881a      	ldrh	r2, [r3, #0]
 800ecb2:	19bb      	adds	r3, r7, r6
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	5e5b      	ldrsh	r3, [r3, r1]
 800ecb8:	0019      	movs	r1, r3
 800ecba:	f000 ff09 	bl	800fad0 <sen5x_set_temperature_offset_parameters>
 800ecbe:	0003      	movs	r3, r0
 800ecc0:	8023      	strh	r3, [r4, #0]
  if (error) {
 800ecc2:	197b      	adds	r3, r7, r5
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	5e9b      	ldrsh	r3, [r3, r2]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00b      	beq.n	800ece4 <probe_sen5x+0x1c0>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800eccc:	197b      	adds	r3, r7, r5
 800ecce:	2200      	movs	r2, #0
 800ecd0:	5e9b      	ldrsh	r3, [r3, r2]
 800ecd2:	4a27      	ldr	r2, [pc, #156]	@ (800ed70 <probe_sen5x+0x24c>)
 800ecd4:	491c      	ldr	r1, [pc, #112]	@ (800ed48 <probe_sen5x+0x224>)
 800ecd6:	2001      	movs	r0, #1
 800ecd8:	f005 fa84 	bl	80141e4 <CreateLine>
      return error;
 800ecdc:	197b      	adds	r3, r7, r5
 800ecde:	2200      	movs	r2, #0
 800ece0:	5e9b      	ldrsh	r3, [r3, r2]
 800ece2:	e02b      	b.n	800ed3c <probe_sen5x+0x218>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800ece4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ece6:	f7f4 fdd5 	bl	8003894 <__aeabi_f2d>
 800ecea:	0002      	movs	r2, r0
 800ecec:	000b      	movs	r3, r1
 800ecee:	4821      	ldr	r0, [pc, #132]	@ (800ed74 <probe_sen5x+0x250>)
 800ecf0:	4918      	ldr	r1, [pc, #96]	@ (800ed54 <probe_sen5x+0x230>)
 800ecf2:	9200      	str	r2, [sp, #0]
 800ecf4:	9301      	str	r3, [sp, #4]
 800ecf6:	0002      	movs	r2, r0
 800ecf8:	2002      	movs	r0, #2
 800ecfa:	f005 fa73 	bl	80141e4 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800ecfe:	f7fb f813 	bl	8009d28 <Check_USB_PowerOn>
 800ed02:	0003      	movs	r3, r0
 800ed04:	001a      	movs	r2, r3
 800ed06:	2301      	movs	r3, #1
 800ed08:	4053      	eors	r3, r2
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d00a      	beq.n	800ed26 <probe_sen5x+0x202>
    sen5x_Power_Off();
 800ed10:	f7ff fed2 	bl	800eab8 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800ed14:	f005 ffde 	bl	8014cd4 <HAL_GetTick>
 800ed18:	0003      	movs	r3, r0
 800ed1a:	22fa      	movs	r2, #250	@ 0xfa
 800ed1c:	00d2      	lsls	r2, r2, #3
 800ed1e:	189a      	adds	r2, r3, r2
 800ed20:	4b15      	ldr	r3, [pc, #84]	@ (800ed78 <probe_sen5x+0x254>)
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	e006      	b.n	800ed34 <probe_sen5x+0x210>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800ed26:	f005 ffd5 	bl	8014cd4 <HAL_GetTick>
 800ed2a:	0003      	movs	r3, r0
 800ed2c:	4a13      	ldr	r2, [pc, #76]	@ (800ed7c <probe_sen5x+0x258>)
 800ed2e:	189a      	adds	r2, r3, r2
 800ed30:	4b11      	ldr	r3, [pc, #68]	@ (800ed78 <probe_sen5x+0x254>)
 800ed32:	601a      	str	r2, [r3, #0]
  }
  return error;
 800ed34:	2336      	movs	r3, #54	@ 0x36
 800ed36:	18fb      	adds	r3, r7, r3
 800ed38:	2200      	movs	r2, #0
 800ed3a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ed3c:	0018      	movs	r0, r3
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	b00f      	add	sp, #60	@ 0x3c
 800ed42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed44:	0802da68 	.word	0x0802da68
 800ed48:	0802da18 	.word	0x0802da18
 800ed4c:	0802da94 	.word	0x0802da94
 800ed50:	0802dac4 	.word	0x0802dac4
 800ed54:	0802d9ac 	.word	0x0802d9ac
 800ed58:	200011d8 	.word	0x200011d8
 800ed5c:	0802dad8 	.word	0x0802dad8
 800ed60:	0802db08 	.word	0x0802db08
 800ed64:	0802db1c 	.word	0x0802db1c
 800ed68:	0802db44 	.word	0x0802db44
 800ed6c:	43480000 	.word	0x43480000
 800ed70:	0802db68 	.word	0x0802db68
 800ed74:	0802dba8 	.word	0x0802dba8
 800ed78:	200011e4 	.word	0x200011e4
 800ed7c:	00006d60 	.word	0x00006d60

0800ed80 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800ed80:	b590      	push	{r4, r7, lr}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800ed86:	1dbb      	adds	r3, r7, #6
 800ed88:	2200      	movs	r2, #0
 800ed8a:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800ed8c:	4b1b      	ldr	r3, [pc, #108]	@ (800edfc <sen5x_lightup_measurement+0x7c>)
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00b      	beq.n	800edac <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800ed94:	4a1a      	ldr	r2, [pc, #104]	@ (800ee00 <sen5x_lightup_measurement+0x80>)
 800ed96:	4b1b      	ldr	r3, [pc, #108]	@ (800ee04 <sen5x_lightup_measurement+0x84>)
 800ed98:	0019      	movs	r1, r3
 800ed9a:	2002      	movs	r0, #2
 800ed9c:	f005 fa22 	bl	80141e4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800eda0:	1dbc      	adds	r4, r7, #6
 800eda2:	f000 fd21 	bl	800f7e8 <sen5x_start_measurement_without_pm>
 800eda6:	0003      	movs	r3, r0
 800eda8:	8023      	strh	r3, [r4, #0]
 800edaa:	e00a      	b.n	800edc2 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800edac:	4a16      	ldr	r2, [pc, #88]	@ (800ee08 <sen5x_lightup_measurement+0x88>)
 800edae:	4b15      	ldr	r3, [pc, #84]	@ (800ee04 <sen5x_lightup_measurement+0x84>)
 800edb0:	0019      	movs	r1, r3
 800edb2:	2002      	movs	r0, #2
 800edb4:	f005 fa16 	bl	80141e4 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800edb8:	1dbc      	adds	r4, r7, #6
 800edba:	f000 fce7 	bl	800f78c <sen5x_start_measurement>
 800edbe:	0003      	movs	r3, r0
 800edc0:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800edc2:	1dbb      	adds	r3, r7, #6
 800edc4:	2200      	movs	r2, #0
 800edc6:	5e9b      	ldrsh	r3, [r3, r2]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d008      	beq.n	800edde <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800edcc:	1dbb      	adds	r3, r7, #6
 800edce:	2200      	movs	r2, #0
 800edd0:	5e9b      	ldrsh	r3, [r3, r2]
 800edd2:	4a0e      	ldr	r2, [pc, #56]	@ (800ee0c <sen5x_lightup_measurement+0x8c>)
 800edd4:	490e      	ldr	r1, [pc, #56]	@ (800ee10 <sen5x_lightup_measurement+0x90>)
 800edd6:	2001      	movs	r0, #1
 800edd8:	f005 fa04 	bl	80141e4 <CreateLine>
 800eddc:	e007      	b.n	800edee <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800edde:	f7fb f855 	bl	8009e8c <showTime>
    Info("sen5x_start_measurement executed");
 800ede2:	4a0c      	ldr	r2, [pc, #48]	@ (800ee14 <sen5x_lightup_measurement+0x94>)
 800ede4:	4b07      	ldr	r3, [pc, #28]	@ (800ee04 <sen5x_lightup_measurement+0x84>)
 800ede6:	0019      	movs	r1, r3
 800ede8:	2002      	movs	r0, #2
 800edea:	f005 f9fb 	bl	80141e4 <CreateLine>
  }
  return error;
 800edee:	1dbb      	adds	r3, r7, #6
 800edf0:	2200      	movs	r2, #0
 800edf2:	5e9b      	ldrsh	r3, [r3, r2]
}
 800edf4:	0018      	movs	r0, r3
 800edf6:	46bd      	mov	sp, r7
 800edf8:	b003      	add	sp, #12
 800edfa:	bd90      	pop	{r4, r7, pc}
 800edfc:	200011d6 	.word	0x200011d6
 800ee00:	0802dbe0 	.word	0x0802dbe0
 800ee04:	0802d9ac 	.word	0x0802d9ac
 800ee08:	0802dc0c 	.word	0x0802dc0c
 800ee0c:	0802dc2c 	.word	0x0802dc2c
 800ee10:	0802da18 	.word	0x0802da18
 800ee14:	0802dc5c 	.word	0x0802dc5c

0800ee18 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800ee18:	b590      	push	{r4, r7, lr}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800ee1e:	1dbb      	adds	r3, r7, #6
 800ee20:	2200      	movs	r2, #0
 800ee22:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800ee24:	4b21      	ldr	r3, [pc, #132]	@ (800eeac <sen5x_extinguish_measurement+0x94>)
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d01e      	beq.n	800ee6a <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800ee2c:	4a20      	ldr	r2, [pc, #128]	@ (800eeb0 <sen5x_extinguish_measurement+0x98>)
 800ee2e:	4b21      	ldr	r3, [pc, #132]	@ (800eeb4 <sen5x_extinguish_measurement+0x9c>)
 800ee30:	0019      	movs	r1, r3
 800ee32:	2002      	movs	r0, #2
 800ee34:	f005 f9d6 	bl	80141e4 <CreateLine>
    Info("PM measurement is disabled");
 800ee38:	4a1f      	ldr	r2, [pc, #124]	@ (800eeb8 <sen5x_extinguish_measurement+0xa0>)
 800ee3a:	4b1e      	ldr	r3, [pc, #120]	@ (800eeb4 <sen5x_extinguish_measurement+0x9c>)
 800ee3c:	0019      	movs	r1, r3
 800ee3e:	2002      	movs	r0, #2
 800ee40:	f005 f9d0 	bl	80141e4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ee44:	1dbc      	adds	r4, r7, #6
 800ee46:	f000 fccf 	bl	800f7e8 <sen5x_start_measurement_without_pm>
 800ee4a:	0003      	movs	r3, r0
 800ee4c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ee4e:	1dbb      	adds	r3, r7, #6
 800ee50:	2200      	movs	r2, #0
 800ee52:	5e9b      	ldrsh	r3, [r3, r2]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d022      	beq.n	800ee9e <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800ee58:	1dbb      	adds	r3, r7, #6
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	5e9b      	ldrsh	r3, [r3, r2]
 800ee5e:	4a17      	ldr	r2, [pc, #92]	@ (800eebc <sen5x_extinguish_measurement+0xa4>)
 800ee60:	4917      	ldr	r1, [pc, #92]	@ (800eec0 <sen5x_extinguish_measurement+0xa8>)
 800ee62:	2001      	movs	r0, #1
 800ee64:	f005 f9be 	bl	80141e4 <CreateLine>
 800ee68:	e019      	b.n	800ee9e <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800ee6a:	1dbc      	adds	r4, r7, #6
 800ee6c:	f000 fcea 	bl	800f844 <sen5x_stop_measurement>
 800ee70:	0003      	movs	r3, r0
 800ee72:	8023      	strh	r3, [r4, #0]
    showTime();
 800ee74:	f7fb f80a 	bl	8009e8c <showTime>
    Info("sen5x_stop_measurement executed");
 800ee78:	4a12      	ldr	r2, [pc, #72]	@ (800eec4 <sen5x_extinguish_measurement+0xac>)
 800ee7a:	4b0e      	ldr	r3, [pc, #56]	@ (800eeb4 <sen5x_extinguish_measurement+0x9c>)
 800ee7c:	0019      	movs	r1, r3
 800ee7e:	2002      	movs	r0, #2
 800ee80:	f005 f9b0 	bl	80141e4 <CreateLine>
    if (error) {
 800ee84:	1dbb      	adds	r3, r7, #6
 800ee86:	2200      	movs	r2, #0
 800ee88:	5e9b      	ldrsh	r3, [r3, r2]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d007      	beq.n	800ee9e <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800ee8e:	1dbb      	adds	r3, r7, #6
 800ee90:	2200      	movs	r2, #0
 800ee92:	5e9b      	ldrsh	r3, [r3, r2]
 800ee94:	4a0c      	ldr	r2, [pc, #48]	@ (800eec8 <sen5x_extinguish_measurement+0xb0>)
 800ee96:	490a      	ldr	r1, [pc, #40]	@ (800eec0 <sen5x_extinguish_measurement+0xa8>)
 800ee98:	2001      	movs	r0, #1
 800ee9a:	f005 f9a3 	bl	80141e4 <CreateLine>
    }
  }
  return error;
 800ee9e:	1dbb      	adds	r3, r7, #6
 800eea0:	2200      	movs	r2, #0
 800eea2:	5e9b      	ldrsh	r3, [r3, r2]
}
 800eea4:	0018      	movs	r0, r3
 800eea6:	46bd      	mov	sp, r7
 800eea8:	b003      	add	sp, #12
 800eeaa:	bd90      	pop	{r4, r7, pc}
 800eeac:	200011d6 	.word	0x200011d6
 800eeb0:	0802dc80 	.word	0x0802dc80
 800eeb4:	0802d9ac 	.word	0x0802d9ac
 800eeb8:	0802dcb8 	.word	0x0802dcb8
 800eebc:	0802dcd4 	.word	0x0802dcd4
 800eec0:	0802da18 	.word	0x0802da18
 800eec4:	0802dd14 	.word	0x0802dd14
 800eec8:	0802dd34 	.word	0x0802dd34

0800eecc <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800eecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eece:	b08d      	sub	sp, #52	@ 0x34
 800eed0:	af04      	add	r7, sp, #16
 800eed2:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800eed4:	261e      	movs	r6, #30
 800eed6:	19bb      	adds	r3, r7, r6
 800eed8:	2200      	movs	r2, #0
 800eeda:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800eedc:	19bc      	adds	r4, r7, r6
 800eede:	2316      	movs	r3, #22
 800eee0:	18fd      	adds	r5, r7, r3
 800eee2:	2318      	movs	r3, #24
 800eee4:	18fa      	adds	r2, r7, r3
 800eee6:	231a      	movs	r3, #26
 800eee8:	18f9      	adds	r1, r7, r3
 800eeea:	231c      	movs	r3, #28
 800eeec:	18f8      	adds	r0, r7, r3
 800eeee:	230e      	movs	r3, #14
 800eef0:	18fb      	adds	r3, r7, r3
 800eef2:	9303      	str	r3, [sp, #12]
 800eef4:	2310      	movs	r3, #16
 800eef6:	18fb      	adds	r3, r7, r3
 800eef8:	9302      	str	r3, [sp, #8]
 800eefa:	2312      	movs	r3, #18
 800eefc:	18fb      	adds	r3, r7, r3
 800eefe:	9301      	str	r3, [sp, #4]
 800ef00:	2314      	movs	r3, #20
 800ef02:	18fb      	adds	r3, r7, r3
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	002b      	movs	r3, r5
 800ef08:	f000 fd1e 	bl	800f948 <sen5x_read_measured_values>
 800ef0c:	0003      	movs	r3, r0
 800ef0e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800ef10:	19bb      	adds	r3, r7, r6
 800ef12:	2200      	movs	r2, #0
 800ef14:	5e9b      	ldrsh	r3, [r3, r2]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d003      	beq.n	800ef22 <sen5x_read_measurement+0x56>
    return error;
 800ef1a:	19bb      	adds	r3, r7, r6
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	5e9b      	ldrsh	r3, [r3, r2]
 800ef20:	e02c      	b.n	800ef7c <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800ef22:	231c      	movs	r3, #28
 800ef24:	18fb      	adds	r3, r7, r3
 800ef26:	881a      	ldrh	r2, [r3, #0]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800ef2c:	231a      	movs	r3, #26
 800ef2e:	18fb      	adds	r3, r7, r3
 800ef30:	881a      	ldrh	r2, [r3, #0]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800ef36:	2318      	movs	r3, #24
 800ef38:	18fb      	adds	r3, r7, r3
 800ef3a:	881a      	ldrh	r2, [r3, #0]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800ef40:	2316      	movs	r3, #22
 800ef42:	18fb      	adds	r3, r7, r3
 800ef44:	881a      	ldrh	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800ef4a:	2314      	movs	r3, #20
 800ef4c:	18fb      	adds	r3, r7, r3
 800ef4e:	2200      	movs	r2, #0
 800ef50:	5e9a      	ldrsh	r2, [r3, r2]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800ef56:	2312      	movs	r3, #18
 800ef58:	18fb      	adds	r3, r7, r3
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	5e9a      	ldrsh	r2, [r3, r2]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800ef62:	2310      	movs	r3, #16
 800ef64:	18fb      	adds	r3, r7, r3
 800ef66:	2200      	movs	r2, #0
 800ef68:	5e9a      	ldrsh	r2, [r3, r2]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800ef6e:	230e      	movs	r3, #14
 800ef70:	18fb      	adds	r3, r7, r3
 800ef72:	2200      	movs	r2, #0
 800ef74:	5e9a      	ldrsh	r2, [r3, r2]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	81da      	strh	r2, [r3, #14]
  return 0;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	0018      	movs	r0, r3
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	b009      	add	sp, #36	@ 0x24
 800ef82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef84 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af02      	add	r7, sp, #8
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ef8a:	4b6e      	ldr	r3, [pc, #440]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800ef8c:	881b      	ldrh	r3, [r3, #0]
 800ef8e:	4a6e      	ldr	r2, [pc, #440]	@ (800f148 <sen5x_printvalues+0x1c4>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d017      	beq.n	800efc4 <sen5x_printvalues+0x40>
      Info("Mass concentration pm1p0: %.1f µg/m³", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800ef94:	4b6b      	ldr	r3, [pc, #428]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	0018      	movs	r0, r3
 800ef9a:	f7f2 fc45 	bl	8001828 <__aeabi_i2f>
 800ef9e:	1c03      	adds	r3, r0, #0
 800efa0:	496a      	ldr	r1, [pc, #424]	@ (800f14c <sen5x_printvalues+0x1c8>)
 800efa2:	1c18      	adds	r0, r3, #0
 800efa4:	f7f1 fe7e 	bl	8000ca4 <__aeabi_fdiv>
 800efa8:	1c03      	adds	r3, r0, #0
 800efaa:	1c18      	adds	r0, r3, #0
 800efac:	f7f4 fc72 	bl	8003894 <__aeabi_f2d>
 800efb0:	0002      	movs	r2, r0
 800efb2:	000b      	movs	r3, r1
 800efb4:	4866      	ldr	r0, [pc, #408]	@ (800f150 <sen5x_printvalues+0x1cc>)
 800efb6:	4967      	ldr	r1, [pc, #412]	@ (800f154 <sen5x_printvalues+0x1d0>)
 800efb8:	9200      	str	r2, [sp, #0]
 800efba:	9301      	str	r3, [sp, #4]
 800efbc:	0002      	movs	r2, r0
 800efbe:	2002      	movs	r0, #2
 800efc0:	f005 f910 	bl	80141e4 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800efc4:	4b5f      	ldr	r3, [pc, #380]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800efc6:	885b      	ldrh	r3, [r3, #2]
 800efc8:	4a5f      	ldr	r2, [pc, #380]	@ (800f148 <sen5x_printvalues+0x1c4>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d017      	beq.n	800effe <sen5x_printvalues+0x7a>
        Info("Mass concentration pm2p5: %.1f µg/m³", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800efce:	4b5d      	ldr	r3, [pc, #372]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800efd0:	885b      	ldrh	r3, [r3, #2]
 800efd2:	0018      	movs	r0, r3
 800efd4:	f7f2 fc28 	bl	8001828 <__aeabi_i2f>
 800efd8:	1c03      	adds	r3, r0, #0
 800efda:	495c      	ldr	r1, [pc, #368]	@ (800f14c <sen5x_printvalues+0x1c8>)
 800efdc:	1c18      	adds	r0, r3, #0
 800efde:	f7f1 fe61 	bl	8000ca4 <__aeabi_fdiv>
 800efe2:	1c03      	adds	r3, r0, #0
 800efe4:	1c18      	adds	r0, r3, #0
 800efe6:	f7f4 fc55 	bl	8003894 <__aeabi_f2d>
 800efea:	0002      	movs	r2, r0
 800efec:	000b      	movs	r3, r1
 800efee:	485a      	ldr	r0, [pc, #360]	@ (800f158 <sen5x_printvalues+0x1d4>)
 800eff0:	4958      	ldr	r1, [pc, #352]	@ (800f154 <sen5x_printvalues+0x1d0>)
 800eff2:	9200      	str	r2, [sp, #0]
 800eff4:	9301      	str	r3, [sp, #4]
 800eff6:	0002      	movs	r2, r0
 800eff8:	2002      	movs	r0, #2
 800effa:	f005 f8f3 	bl	80141e4 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800effe:	4b51      	ldr	r3, [pc, #324]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f000:	889b      	ldrh	r3, [r3, #4]
 800f002:	4a51      	ldr	r2, [pc, #324]	@ (800f148 <sen5x_printvalues+0x1c4>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d017      	beq.n	800f038 <sen5x_printvalues+0xb4>
        Info("Mass concentration pm4p0: %.1f µg/m³", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800f008:	4b4e      	ldr	r3, [pc, #312]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f00a:	889b      	ldrh	r3, [r3, #4]
 800f00c:	0018      	movs	r0, r3
 800f00e:	f7f2 fc0b 	bl	8001828 <__aeabi_i2f>
 800f012:	1c03      	adds	r3, r0, #0
 800f014:	494d      	ldr	r1, [pc, #308]	@ (800f14c <sen5x_printvalues+0x1c8>)
 800f016:	1c18      	adds	r0, r3, #0
 800f018:	f7f1 fe44 	bl	8000ca4 <__aeabi_fdiv>
 800f01c:	1c03      	adds	r3, r0, #0
 800f01e:	1c18      	adds	r0, r3, #0
 800f020:	f7f4 fc38 	bl	8003894 <__aeabi_f2d>
 800f024:	0002      	movs	r2, r0
 800f026:	000b      	movs	r3, r1
 800f028:	484c      	ldr	r0, [pc, #304]	@ (800f15c <sen5x_printvalues+0x1d8>)
 800f02a:	494a      	ldr	r1, [pc, #296]	@ (800f154 <sen5x_printvalues+0x1d0>)
 800f02c:	9200      	str	r2, [sp, #0]
 800f02e:	9301      	str	r3, [sp, #4]
 800f030:	0002      	movs	r2, r0
 800f032:	2002      	movs	r0, #2
 800f034:	f005 f8d6 	bl	80141e4 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800f038:	4b42      	ldr	r3, [pc, #264]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f03a:	88db      	ldrh	r3, [r3, #6]
 800f03c:	4a42      	ldr	r2, [pc, #264]	@ (800f148 <sen5x_printvalues+0x1c4>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d017      	beq.n	800f072 <sen5x_printvalues+0xee>
        Info("Mass concentration pm10p0: %.1f µg/m³", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800f042:	4b40      	ldr	r3, [pc, #256]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f044:	88db      	ldrh	r3, [r3, #6]
 800f046:	0018      	movs	r0, r3
 800f048:	f7f2 fbee 	bl	8001828 <__aeabi_i2f>
 800f04c:	1c03      	adds	r3, r0, #0
 800f04e:	493f      	ldr	r1, [pc, #252]	@ (800f14c <sen5x_printvalues+0x1c8>)
 800f050:	1c18      	adds	r0, r3, #0
 800f052:	f7f1 fe27 	bl	8000ca4 <__aeabi_fdiv>
 800f056:	1c03      	adds	r3, r0, #0
 800f058:	1c18      	adds	r0, r3, #0
 800f05a:	f7f4 fc1b 	bl	8003894 <__aeabi_f2d>
 800f05e:	0002      	movs	r2, r0
 800f060:	000b      	movs	r3, r1
 800f062:	483f      	ldr	r0, [pc, #252]	@ (800f160 <sen5x_printvalues+0x1dc>)
 800f064:	493b      	ldr	r1, [pc, #236]	@ (800f154 <sen5x_printvalues+0x1d0>)
 800f066:	9200      	str	r2, [sp, #0]
 800f068:	9301      	str	r3, [sp, #4]
 800f06a:	0002      	movs	r2, r0
 800f06c:	2002      	movs	r0, #2
 800f06e:	f005 f8b9 	bl	80141e4 <CreateLine>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800f072:	4b34      	ldr	r3, [pc, #208]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f074:	2208      	movs	r2, #8
 800f076:	5e9b      	ldrsh	r3, [r3, r2]
 800f078:	4a3a      	ldr	r2, [pc, #232]	@ (800f164 <sen5x_printvalues+0x1e0>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d018      	beq.n	800f0b0 <sen5x_printvalues+0x12c>
        Info("sen5x Ambient humidity: %.1f %%RH", sen5x_data.ambient_humidity / 100.0f);
 800f07e:	4b31      	ldr	r3, [pc, #196]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f080:	2208      	movs	r2, #8
 800f082:	5e9b      	ldrsh	r3, [r3, r2]
 800f084:	0018      	movs	r0, r3
 800f086:	f7f2 fbcf 	bl	8001828 <__aeabi_i2f>
 800f08a:	1c03      	adds	r3, r0, #0
 800f08c:	4936      	ldr	r1, [pc, #216]	@ (800f168 <sen5x_printvalues+0x1e4>)
 800f08e:	1c18      	adds	r0, r3, #0
 800f090:	f7f1 fe08 	bl	8000ca4 <__aeabi_fdiv>
 800f094:	1c03      	adds	r3, r0, #0
 800f096:	1c18      	adds	r0, r3, #0
 800f098:	f7f4 fbfc 	bl	8003894 <__aeabi_f2d>
 800f09c:	0002      	movs	r2, r0
 800f09e:	000b      	movs	r3, r1
 800f0a0:	4832      	ldr	r0, [pc, #200]	@ (800f16c <sen5x_printvalues+0x1e8>)
 800f0a2:	492c      	ldr	r1, [pc, #176]	@ (800f154 <sen5x_printvalues+0x1d0>)
 800f0a4:	9200      	str	r2, [sp, #0]
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	0002      	movs	r2, r0
 800f0aa:	2002      	movs	r0, #2
 800f0ac:	f005 f89a 	bl	80141e4 <CreateLine>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800f0b0:	4b24      	ldr	r3, [pc, #144]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f0b2:	220a      	movs	r2, #10
 800f0b4:	5e9b      	ldrsh	r3, [r3, r2]
 800f0b6:	4a2b      	ldr	r2, [pc, #172]	@ (800f164 <sen5x_printvalues+0x1e0>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d018      	beq.n	800f0ee <sen5x_printvalues+0x16a>
        Info("sen5x Ambient temperature: %.1f °C", sen5x_data.ambient_temperature / 200.0f);
 800f0bc:	4b21      	ldr	r3, [pc, #132]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f0be:	220a      	movs	r2, #10
 800f0c0:	5e9b      	ldrsh	r3, [r3, r2]
 800f0c2:	0018      	movs	r0, r3
 800f0c4:	f7f2 fbb0 	bl	8001828 <__aeabi_i2f>
 800f0c8:	1c03      	adds	r3, r0, #0
 800f0ca:	4929      	ldr	r1, [pc, #164]	@ (800f170 <sen5x_printvalues+0x1ec>)
 800f0cc:	1c18      	adds	r0, r3, #0
 800f0ce:	f7f1 fde9 	bl	8000ca4 <__aeabi_fdiv>
 800f0d2:	1c03      	adds	r3, r0, #0
 800f0d4:	1c18      	adds	r0, r3, #0
 800f0d6:	f7f4 fbdd 	bl	8003894 <__aeabi_f2d>
 800f0da:	0002      	movs	r2, r0
 800f0dc:	000b      	movs	r3, r1
 800f0de:	4825      	ldr	r0, [pc, #148]	@ (800f174 <sen5x_printvalues+0x1f0>)
 800f0e0:	491c      	ldr	r1, [pc, #112]	@ (800f154 <sen5x_printvalues+0x1d0>)
 800f0e2:	9200      	str	r2, [sp, #0]
 800f0e4:	9301      	str	r3, [sp, #4]
 800f0e6:	0002      	movs	r2, r0
 800f0e8:	2002      	movs	r0, #2
 800f0ea:	f005 f87b 	bl	80141e4 <CreateLine>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800f0ee:	4b15      	ldr	r3, [pc, #84]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f0f0:	220c      	movs	r2, #12
 800f0f2:	5e9b      	ldrsh	r3, [r3, r2]
 800f0f4:	4a1b      	ldr	r2, [pc, #108]	@ (800f164 <sen5x_printvalues+0x1e0>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d00d      	beq.n	800f116 <sen5x_printvalues+0x192>
        Info("sen55 VOC index: %d", sen5x_data.voc_index / 10);
 800f0fa:	4b12      	ldr	r3, [pc, #72]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f0fc:	220c      	movs	r2, #12
 800f0fe:	5e9b      	ldrsh	r3, [r3, r2]
 800f100:	210a      	movs	r1, #10
 800f102:	0018      	movs	r0, r3
 800f104:	f7f1 f8d8 	bl	80002b8 <__divsi3>
 800f108:	0003      	movs	r3, r0
 800f10a:	b21b      	sxth	r3, r3
 800f10c:	4a1a      	ldr	r2, [pc, #104]	@ (800f178 <sen5x_printvalues+0x1f4>)
 800f10e:	4911      	ldr	r1, [pc, #68]	@ (800f154 <sen5x_printvalues+0x1d0>)
 800f110:	2002      	movs	r0, #2
 800f112:	f005 f867 	bl	80141e4 <CreateLine>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800f116:	4b0b      	ldr	r3, [pc, #44]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f118:	220e      	movs	r2, #14
 800f11a:	5e9b      	ldrsh	r3, [r3, r2]
 800f11c:	4a11      	ldr	r2, [pc, #68]	@ (800f164 <sen5x_printvalues+0x1e0>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d00d      	beq.n	800f13e <sen5x_printvalues+0x1ba>
        Info("sen55 NOx index: %d", sen5x_data.nox_index / 10);
 800f122:	4b08      	ldr	r3, [pc, #32]	@ (800f144 <sen5x_printvalues+0x1c0>)
 800f124:	220e      	movs	r2, #14
 800f126:	5e9b      	ldrsh	r3, [r3, r2]
 800f128:	210a      	movs	r1, #10
 800f12a:	0018      	movs	r0, r3
 800f12c:	f7f1 f8c4 	bl	80002b8 <__divsi3>
 800f130:	0003      	movs	r3, r0
 800f132:	b21b      	sxth	r3, r3
 800f134:	4a11      	ldr	r2, [pc, #68]	@ (800f17c <sen5x_printvalues+0x1f8>)
 800f136:	4907      	ldr	r1, [pc, #28]	@ (800f154 <sen5x_printvalues+0x1d0>)
 800f138:	2002      	movs	r0, #2
 800f13a:	f005 f853 	bl	80141e4 <CreateLine>
  }
}
 800f13e:	46c0      	nop			@ (mov r8, r8)
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	200011e8 	.word	0x200011e8
 800f148:	0000ffff 	.word	0x0000ffff
 800f14c:	41200000 	.word	0x41200000
 800f150:	0802dd64 	.word	0x0802dd64
 800f154:	0802d9ac 	.word	0x0802d9ac
 800f158:	0802dd8c 	.word	0x0802dd8c
 800f15c:	0802ddb4 	.word	0x0802ddb4
 800f160:	0802dddc 	.word	0x0802dddc
 800f164:	00007fff 	.word	0x00007fff
 800f168:	42c80000 	.word	0x42c80000
 800f16c:	0802de04 	.word	0x0802de04
 800f170:	43480000 	.word	0x43480000
 800f174:	0802de28 	.word	0x0802de28
 800f178:	0802de4c 	.word	0x0802de4c
 800f17c:	0802de60 	.word	0x0802de60

0800f180 <sen5xStore>:

void sen5xStore() {
 800f180:	b5b0      	push	{r4, r5, r7, lr}
 800f182:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800f184:	4b41      	ldr	r3, [pc, #260]	@ (800f28c <sen5xStore+0x10c>)
 800f186:	881b      	ldrh	r3, [r3, #0]
 800f188:	4a41      	ldr	r2, [pc, #260]	@ (800f290 <sen5xStore+0x110>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d004      	beq.n	800f198 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800f18e:	4b3f      	ldr	r3, [pc, #252]	@ (800f28c <sen5xStore+0x10c>)
 800f190:	881b      	ldrh	r3, [r3, #0]
 800f192:	0018      	movs	r0, r3
 800f194:	f7f5 fd3e 	bl	8004c14 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800f198:	4b3c      	ldr	r3, [pc, #240]	@ (800f28c <sen5xStore+0x10c>)
 800f19a:	885b      	ldrh	r3, [r3, #2]
 800f19c:	4a3c      	ldr	r2, [pc, #240]	@ (800f290 <sen5xStore+0x110>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d004      	beq.n	800f1ac <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800f1a2:	4b3a      	ldr	r3, [pc, #232]	@ (800f28c <sen5xStore+0x10c>)
 800f1a4:	885b      	ldrh	r3, [r3, #2]
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	f7f5 fd60 	bl	8004c6c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800f1ac:	4b37      	ldr	r3, [pc, #220]	@ (800f28c <sen5xStore+0x10c>)
 800f1ae:	889b      	ldrh	r3, [r3, #4]
 800f1b0:	4a37      	ldr	r2, [pc, #220]	@ (800f290 <sen5xStore+0x110>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d004      	beq.n	800f1c0 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800f1b6:	4b35      	ldr	r3, [pc, #212]	@ (800f28c <sen5xStore+0x10c>)
 800f1b8:	889b      	ldrh	r3, [r3, #4]
 800f1ba:	0018      	movs	r0, r3
 800f1bc:	f7f5 fd82 	bl	8004cc4 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800f1c0:	4b32      	ldr	r3, [pc, #200]	@ (800f28c <sen5xStore+0x10c>)
 800f1c2:	88db      	ldrh	r3, [r3, #6]
 800f1c4:	4a32      	ldr	r2, [pc, #200]	@ (800f290 <sen5xStore+0x110>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d004      	beq.n	800f1d4 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800f1ca:	4b30      	ldr	r3, [pc, #192]	@ (800f28c <sen5xStore+0x10c>)
 800f1cc:	88db      	ldrh	r3, [r3, #6]
 800f1ce:	0018      	movs	r0, r3
 800f1d0:	f7f5 fda4 	bl	8004d1c <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800f1d4:	4b2f      	ldr	r3, [pc, #188]	@ (800f294 <sen5xStore+0x114>)
 800f1d6:	791b      	ldrb	r3, [r3, #4]
 800f1d8:	2b34      	cmp	r3, #52	@ 0x34
 800f1da:	d003      	beq.n	800f1e4 <sen5xStore+0x64>
 800f1dc:	4b2d      	ldr	r3, [pc, #180]	@ (800f294 <sen5xStore+0x114>)
 800f1de:	791b      	ldrb	r3, [r3, #4]
 800f1e0:	2b35      	cmp	r3, #53	@ 0x35
 800f1e2:	d14f      	bne.n	800f284 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800f1e4:	4b29      	ldr	r3, [pc, #164]	@ (800f28c <sen5xStore+0x10c>)
 800f1e6:	220a      	movs	r2, #10
 800f1e8:	5e9b      	ldrsh	r3, [r3, r2]
 800f1ea:	0018      	movs	r0, r3
 800f1ec:	f7f2 fb1c 	bl	8001828 <__aeabi_i2f>
 800f1f0:	1c04      	adds	r4, r0, #0
 800f1f2:	4b26      	ldr	r3, [pc, #152]	@ (800f28c <sen5xStore+0x10c>)
 800f1f4:	2208      	movs	r2, #8
 800f1f6:	5e9b      	ldrsh	r3, [r3, r2]
 800f1f8:	0018      	movs	r0, r3
 800f1fa:	f7f2 fb15 	bl	8001828 <__aeabi_i2f>
 800f1fe:	1c03      	adds	r3, r0, #0
 800f200:	1c19      	adds	r1, r3, #0
 800f202:	1c20      	adds	r0, r4, #0
 800f204:	f7f5 fdd4 	bl	8004db0 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800f208:	4b23      	ldr	r3, [pc, #140]	@ (800f298 <sen5xStore+0x118>)
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	2201      	movs	r2, #1
 800f20e:	4053      	eors	r3, r2
 800f210:	b2db      	uxtb	r3, r3
 800f212:	2b00      	cmp	r3, #0
 800f214:	d103      	bne.n	800f21e <sen5xStore+0x9e>
 800f216:	4b21      	ldr	r3, [pc, #132]	@ (800f29c <sen5xStore+0x11c>)
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d032      	beq.n	800f284 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800f21e:	4b1b      	ldr	r3, [pc, #108]	@ (800f28c <sen5xStore+0x10c>)
 800f220:	220c      	movs	r2, #12
 800f222:	5e9b      	ldrsh	r3, [r3, r2]
 800f224:	4a1e      	ldr	r2, [pc, #120]	@ (800f2a0 <sen5xStore+0x120>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d019      	beq.n	800f25e <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800f22a:	4b18      	ldr	r3, [pc, #96]	@ (800f28c <sen5xStore+0x10c>)
 800f22c:	220c      	movs	r2, #12
 800f22e:	5e9b      	ldrsh	r3, [r3, r2]
 800f230:	210a      	movs	r1, #10
 800f232:	0018      	movs	r0, r3
 800f234:	f7f1 f840 	bl	80002b8 <__divsi3>
 800f238:	0003      	movs	r3, r0
 800f23a:	b21b      	sxth	r3, r3
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	0018      	movs	r0, r3
 800f240:	f003 ff42 	bl	80130c8 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800f244:	4b11      	ldr	r3, [pc, #68]	@ (800f28c <sen5xStore+0x10c>)
 800f246:	220c      	movs	r2, #12
 800f248:	5e9b      	ldrsh	r3, [r3, r2]
 800f24a:	210a      	movs	r1, #10
 800f24c:	0018      	movs	r0, r3
 800f24e:	f7f1 f833 	bl	80002b8 <__divsi3>
 800f252:	0003      	movs	r3, r0
 800f254:	b21b      	sxth	r3, r3
 800f256:	b29b      	uxth	r3, r3
 800f258:	0018      	movs	r0, r3
 800f25a:	f7f5 fc53 	bl	8004b04 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800f25e:	4b0b      	ldr	r3, [pc, #44]	@ (800f28c <sen5xStore+0x10c>)
 800f260:	220e      	movs	r2, #14
 800f262:	5e9b      	ldrsh	r3, [r3, r2]
 800f264:	4a0e      	ldr	r2, [pc, #56]	@ (800f2a0 <sen5xStore+0x120>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d00c      	beq.n	800f284 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800f26a:	4b08      	ldr	r3, [pc, #32]	@ (800f28c <sen5xStore+0x10c>)
 800f26c:	220e      	movs	r2, #14
 800f26e:	5e9b      	ldrsh	r3, [r3, r2]
 800f270:	210a      	movs	r1, #10
 800f272:	0018      	movs	r0, r3
 800f274:	f7f1 f820 	bl	80002b8 <__divsi3>
 800f278:	0003      	movs	r3, r0
 800f27a:	b21b      	sxth	r3, r3
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	0018      	movs	r0, r3
 800f280:	f7f5 fd78 	bl	8004d74 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800f284:	46c0      	nop			@ (mov r8, r8)
 800f286:	46bd      	mov	sp, r7
 800f288:	bdb0      	pop	{r4, r5, r7, pc}
 800f28a:	46c0      	nop			@ (mov r8, r8)
 800f28c:	200011e8 	.word	0x200011e8
 800f290:	0000ffff 	.word	0x0000ffff
 800f294:	200011d8 	.word	0x200011d8
 800f298:	200011d6 	.word	0x200011d6
 800f29c:	20002165 	.word	0x20002165
 800f2a0:	00007fff 	.word	0x00007fff

0800f2a4 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800f2a4:	b590      	push	{r4, r7, lr}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af02      	add	r7, sp, #8
 800f2aa:	6039      	str	r1, [r7, #0]
 800f2ac:	0011      	movs	r1, r2
 800f2ae:	1dfb      	adds	r3, r7, #7
 800f2b0:	1c02      	adds	r2, r0, #0
 800f2b2:	701a      	strb	r2, [r3, #0]
 800f2b4:	1d3b      	adds	r3, r7, #4
 800f2b6:	1c0a      	adds	r2, r1, #0
 800f2b8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800f2ba:	1dfb      	adds	r3, r7, #7
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	18db      	adds	r3, r3, r3
 800f2c2:	b299      	uxth	r1, r3
 800f2c4:	1d3b      	adds	r3, r7, #4
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	683a      	ldr	r2, [r7, #0]
 800f2ca:	4805      	ldr	r0, [pc, #20]	@ (800f2e0 <sensirion_i2c_hal_read+0x3c>)
 800f2cc:	2464      	movs	r4, #100	@ 0x64
 800f2ce:	9400      	str	r4, [sp, #0]
 800f2d0:	f007 f968 	bl	80165a4 <HAL_I2C_Master_Receive>
 800f2d4:	0003      	movs	r3, r0
 800f2d6:	b25b      	sxtb	r3, r3
}
 800f2d8:	0018      	movs	r0, r3
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	b003      	add	sp, #12
 800f2de:	bd90      	pop	{r4, r7, pc}
 800f2e0:	20000fa8 	.word	0x20000fa8

0800f2e4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800f2e4:	b590      	push	{r4, r7, lr}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af02      	add	r7, sp, #8
 800f2ea:	6039      	str	r1, [r7, #0]
 800f2ec:	0011      	movs	r1, r2
 800f2ee:	1dfb      	adds	r3, r7, #7
 800f2f0:	1c02      	adds	r2, r0, #0
 800f2f2:	701a      	strb	r2, [r3, #0]
 800f2f4:	1d3b      	adds	r3, r7, #4
 800f2f6:	1c0a      	adds	r2, r1, #0
 800f2f8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800f2fa:	1dfb      	adds	r3, r7, #7
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	18db      	adds	r3, r3, r3
 800f302:	b299      	uxth	r1, r3
 800f304:	1d3b      	adds	r3, r7, #4
 800f306:	881b      	ldrh	r3, [r3, #0]
 800f308:	683a      	ldr	r2, [r7, #0]
 800f30a:	4805      	ldr	r0, [pc, #20]	@ (800f320 <sensirion_i2c_hal_write+0x3c>)
 800f30c:	2464      	movs	r4, #100	@ 0x64
 800f30e:	9400      	str	r4, [sp, #0]
 800f310:	f007 f840 	bl	8016394 <HAL_I2C_Master_Transmit>
 800f314:	0003      	movs	r3, r0
 800f316:	b25b      	sxtb	r3, r3
}
 800f318:	0018      	movs	r0, r3
 800f31a:	46bd      	mov	sp, r7
 800f31c:	b003      	add	sp, #12
 800f31e:	bd90      	pop	{r4, r7, pc}
 800f320:	20000fa8 	.word	0x20000fa8

0800f324 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800f324:	b580      	push	{r7, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	22fa      	movs	r2, #250	@ 0xfa
 800f330:	0091      	lsls	r1, r2, #2
 800f332:	0018      	movs	r0, r3
 800f334:	f7f0 ff36 	bl	80001a4 <__udivsi3>
 800f338:	0003      	movs	r3, r0
 800f33a:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	22fa      	movs	r2, #250	@ 0xfa
 800f340:	0091      	lsls	r1, r2, #2
 800f342:	0018      	movs	r0, r3
 800f344:	f7f0 ffb4 	bl	80002b0 <__aeabi_uidivmod>
 800f348:	1e0b      	subs	r3, r1, #0
 800f34a:	d002      	beq.n	800f352 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	3301      	adds	r3, #1
 800f350:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	0018      	movs	r0, r3
 800f356:	f005 fcc7 	bl	8014ce8 <HAL_Delay>
}
 800f35a:	46c0      	nop			@ (mov r8, r8)
 800f35c:	46bd      	mov	sp, r7
 800f35e:	b004      	add	sp, #16
 800f360:	bd80      	pop	{r7, pc}
	...

0800f364 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800f36a:	1d3b      	adds	r3, r7, #4
 800f36c:	0018      	movs	r0, r3
 800f36e:	f000 fd2b 	bl	800fdc8 <sen5x_read_device_status>
 800f372:	0003      	movs	r3, r0
 800f374:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a2c      	ldr	r2, [pc, #176]	@ (800f42c <sen5x_check_for_errors+0xc8>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d107      	bne.n	800f38e <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800f37e:	4a2c      	ldr	r2, [pc, #176]	@ (800f430 <sen5x_check_for_errors+0xcc>)
 800f380:	4b2c      	ldr	r3, [pc, #176]	@ (800f434 <sen5x_check_for_errors+0xd0>)
 800f382:	0019      	movs	r1, r3
 800f384:	2001      	movs	r0, #1
 800f386:	f004 ff2d 	bl	80141e4 <CreateLine>
    return true;
 800f38a:	2301      	movs	r3, #1
 800f38c:	e049      	b.n	800f422 <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d101      	bne.n	800f398 <sen5x_check_for_errors+0x34>
    return false;
 800f394:	2300      	movs	r3, #0
 800f396:	e044      	b.n	800f422 <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	2380      	movs	r3, #128	@ 0x80
 800f39c:	039b      	lsls	r3, r3, #14
 800f39e:	4013      	ands	r3, r2
 800f3a0:	d005      	beq.n	800f3ae <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800f3a2:	4a25      	ldr	r2, [pc, #148]	@ (800f438 <sen5x_check_for_errors+0xd4>)
 800f3a4:	4b25      	ldr	r3, [pc, #148]	@ (800f43c <sen5x_check_for_errors+0xd8>)
 800f3a6:	0019      	movs	r1, r3
 800f3a8:	2003      	movs	r0, #3
 800f3aa:	f004 ff1b 	bl	80141e4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	2380      	movs	r3, #128	@ 0x80
 800f3b2:	031b      	lsls	r3, r3, #12
 800f3b4:	4013      	ands	r3, r2
 800f3b6:	d005      	beq.n	800f3c4 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800f3b8:	4a21      	ldr	r2, [pc, #132]	@ (800f440 <sen5x_check_for_errors+0xdc>)
 800f3ba:	4b20      	ldr	r3, [pc, #128]	@ (800f43c <sen5x_check_for_errors+0xd8>)
 800f3bc:	0019      	movs	r1, r3
 800f3be:	2003      	movs	r0, #3
 800f3c0:	f004 ff10 	bl	80141e4 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2280      	movs	r2, #128	@ 0x80
 800f3c8:	4013      	ands	r3, r2
 800f3ca:	d005      	beq.n	800f3d8 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800f3cc:	4a1d      	ldr	r2, [pc, #116]	@ (800f444 <sen5x_check_for_errors+0xe0>)
 800f3ce:	4b1b      	ldr	r3, [pc, #108]	@ (800f43c <sen5x_check_for_errors+0xd8>)
 800f3d0:	0019      	movs	r1, r3
 800f3d2:	2003      	movs	r0, #3
 800f3d4:	f004 ff06 	bl	80141e4 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2240      	movs	r2, #64	@ 0x40
 800f3dc:	4013      	ands	r3, r2
 800f3de:	d005      	beq.n	800f3ec <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800f3e0:	4a19      	ldr	r2, [pc, #100]	@ (800f448 <sen5x_check_for_errors+0xe4>)
 800f3e2:	4b16      	ldr	r3, [pc, #88]	@ (800f43c <sen5x_check_for_errors+0xd8>)
 800f3e4:	0019      	movs	r1, r3
 800f3e6:	2003      	movs	r0, #3
 800f3e8:	f004 fefc 	bl	80141e4 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2220      	movs	r2, #32
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	d005      	beq.n	800f400 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800f3f4:	4a15      	ldr	r2, [pc, #84]	@ (800f44c <sen5x_check_for_errors+0xe8>)
 800f3f6:	4b11      	ldr	r3, [pc, #68]	@ (800f43c <sen5x_check_for_errors+0xd8>)
 800f3f8:	0019      	movs	r1, r3
 800f3fa:	2003      	movs	r0, #3
 800f3fc:	f004 fef2 	bl	80141e4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2210      	movs	r2, #16
 800f404:	4013      	ands	r3, r2
 800f406:	d005      	beq.n	800f414 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800f408:	4a11      	ldr	r2, [pc, #68]	@ (800f450 <sen5x_check_for_errors+0xec>)
 800f40a:	4b0c      	ldr	r3, [pc, #48]	@ (800f43c <sen5x_check_for_errors+0xd8>)
 800f40c:	0019      	movs	r1, r3
 800f40e:	2003      	movs	r0, #3
 800f410:	f004 fee8 	bl	80141e4 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4a0f      	ldr	r2, [pc, #60]	@ (800f454 <sen5x_check_for_errors+0xf0>)
 800f418:	4908      	ldr	r1, [pc, #32]	@ (800f43c <sen5x_check_for_errors+0xd8>)
 800f41a:	2003      	movs	r0, #3
 800f41c:	f004 fee2 	bl	80141e4 <CreateLine>
  return true;
 800f420:	2301      	movs	r3, #1
}
 800f422:	0018      	movs	r0, r3
 800f424:	46bd      	mov	sp, r7
 800f426:	b002      	add	sp, #8
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	46c0      	nop			@ (mov r8, r8)
 800f42c:	0000d206 	.word	0x0000d206
 800f430:	0802de74 	.word	0x0802de74
 800f434:	0802da18 	.word	0x0802da18
 800f438:	0802deb4 	.word	0x0802deb4
 800f43c:	0802d9ec 	.word	0x0802d9ec
 800f440:	0802ded4 	.word	0x0802ded4
 800f444:	0802def0 	.word	0x0802def0
 800f448:	0802df14 	.word	0x0802df14
 800f44c:	0802df34 	.word	0x0802df34
 800f450:	0802df48 	.word	0x0802df48
 800f454:	0802df84 	.word	0x0802df84

0800f458 <set_light_on_state>:

void set_light_on_state(void) {
 800f458:	b580      	push	{r7, lr}
 800f45a:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800f45c:	4b15      	ldr	r3, [pc, #84]	@ (800f4b4 <set_light_on_state+0x5c>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	2201      	movs	r2, #1
 800f462:	4053      	eors	r3, r2
 800f464:	b2db      	uxtb	r3, r3
 800f466:	2b00      	cmp	r3, #0
 800f468:	d008      	beq.n	800f47c <set_light_on_state+0x24>
    sen5x_Power_On();
 800f46a:	f7ff faf5 	bl	800ea58 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800f46e:	4a12      	ldr	r2, [pc, #72]	@ (800f4b8 <set_light_on_state+0x60>)
 800f470:	4b12      	ldr	r3, [pc, #72]	@ (800f4bc <set_light_on_state+0x64>)
 800f472:	0019      	movs	r1, r3
 800f474:	2003      	movs	r0, #3
 800f476:	f004 feb5 	bl	80141e4 <CreateLine>
 800f47a:	e00a      	b.n	800f492 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800f47c:	f005 fc2a 	bl	8014cd4 <HAL_GetTick>
 800f480:	0002      	movs	r2, r0
 800f482:	4b0f      	ldr	r3, [pc, #60]	@ (800f4c0 <set_light_on_state+0x68>)
 800f484:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800f486:	4a0f      	ldr	r2, [pc, #60]	@ (800f4c4 <set_light_on_state+0x6c>)
 800f488:	4b0c      	ldr	r3, [pc, #48]	@ (800f4bc <set_light_on_state+0x64>)
 800f48a:	0019      	movs	r1, r3
 800f48c:	2003      	movs	r0, #3
 800f48e:	f004 fea9 	bl	80141e4 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800f492:	f7ff fc75 	bl	800ed80 <sen5x_lightup_measurement>
 800f496:	1e03      	subs	r3, r0, #0
 800f498:	d005      	beq.n	800f4a6 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800f49a:	4a0b      	ldr	r2, [pc, #44]	@ (800f4c8 <set_light_on_state+0x70>)
 800f49c:	4b0b      	ldr	r3, [pc, #44]	@ (800f4cc <set_light_on_state+0x74>)
 800f49e:	0019      	movs	r1, r3
 800f4a0:	2001      	movs	r0, #1
 800f4a2:	f004 fe9f 	bl	80141e4 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800f4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f4d0 <set_light_on_state+0x78>)
 800f4a8:	2203      	movs	r2, #3
 800f4aa:	701a      	strb	r2, [r3, #0]
}
 800f4ac:	46c0      	nop			@ (mov r8, r8)
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	46c0      	nop			@ (mov r8, r8)
 800f4b4:	200011d5 	.word	0x200011d5
 800f4b8:	0802dfb4 	.word	0x0802dfb4
 800f4bc:	0802d9ec 	.word	0x0802d9ec
 800f4c0:	200011e4 	.word	0x200011e4
 800f4c4:	0802dfd4 	.word	0x0802dfd4
 800f4c8:	0802dfec 	.word	0x0802dfec
 800f4cc:	0802da18 	.word	0x0802da18
 800f4d0:	200000aa 	.word	0x200000aa

0800f4d4 <sen5x_statemachine>:

void sen5x_statemachine() {
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800f4da:	1dfb      	adds	r3, r7, #7
 800f4dc:	2200      	movs	r2, #0
 800f4de:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800f4e0:	4b92      	ldr	r3, [pc, #584]	@ (800f72c <sen5x_statemachine+0x258>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	0018      	movs	r0, r3
 800f4e6:	f004 fe27 	bl	8014138 <TimestampIsReached>
 800f4ea:	1e03      	subs	r3, r0, #0
 800f4ec:	d100      	bne.n	800f4f0 <sen5x_statemachine+0x1c>
 800f4ee:	e118      	b.n	800f722 <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800f4f0:	4b8f      	ldr	r3, [pc, #572]	@ (800f730 <sen5x_statemachine+0x25c>)
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	2b05      	cmp	r3, #5
 800f4f6:	d900      	bls.n	800f4fa <sen5x_statemachine+0x26>
 800f4f8:	e113      	b.n	800f722 <sen5x_statemachine+0x24e>
 800f4fa:	009a      	lsls	r2, r3, #2
 800f4fc:	4b8d      	ldr	r3, [pc, #564]	@ (800f734 <sen5x_statemachine+0x260>)
 800f4fe:	18d3      	adds	r3, r2, r3
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800f504:	4a8c      	ldr	r2, [pc, #560]	@ (800f738 <sen5x_statemachine+0x264>)
 800f506:	4b8d      	ldr	r3, [pc, #564]	@ (800f73c <sen5x_statemachine+0x268>)
 800f508:	0019      	movs	r1, r3
 800f50a:	2001      	movs	r0, #1
 800f50c:	f004 fe6a 	bl	80141e4 <CreateLine>
      SetPMSensorStatus(false);
 800f510:	2000      	movs	r0, #0
 800f512:	f7fe f9f7 	bl	800d904 <SetPMSensorStatus>
      DisablePMSensor();
 800f516:	f7fe f979 	bl	800d80c <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800f51a:	f005 fbdb 	bl	8014cd4 <HAL_GetTick>
 800f51e:	0003      	movs	r3, r0
 800f520:	4a87      	ldr	r2, [pc, #540]	@ (800f740 <sen5x_statemachine+0x26c>)
 800f522:	189a      	adds	r2, r3, r2
 800f524:	4b81      	ldr	r3, [pc, #516]	@ (800f72c <sen5x_statemachine+0x258>)
 800f526:	601a      	str	r2, [r3, #0]
      break;
 800f528:	e0fb      	b.n	800f722 <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f52a:	f005 fbd3 	bl	8014cd4 <HAL_GetTick>
 800f52e:	0003      	movs	r3, r0
 800f530:	4a84      	ldr	r2, [pc, #528]	@ (800f744 <sen5x_statemachine+0x270>)
 800f532:	189a      	adds	r2, r3, r2
 800f534:	4b7d      	ldr	r3, [pc, #500]	@ (800f72c <sen5x_statemachine+0x258>)
 800f536:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800f538:	f7ff ff8e 	bl	800f458 <set_light_on_state>
      break;
 800f53c:	e0f1      	b.n	800f722 <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800f53e:	4b7c      	ldr	r3, [pc, #496]	@ (800f730 <sen5x_statemachine+0x25c>)
 800f540:	2202      	movs	r2, #2
 800f542:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800f544:	4b80      	ldr	r3, [pc, #512]	@ (800f748 <sen5x_statemachine+0x274>)
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	2b05      	cmp	r3, #5
 800f54a:	d905      	bls.n	800f558 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800f54c:	4b78      	ldr	r3, [pc, #480]	@ (800f730 <sen5x_statemachine+0x25c>)
 800f54e:	2200      	movs	r2, #0
 800f550:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f552:	f7ff fab1 	bl	800eab8 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800f556:	e0e1      	b.n	800f71c <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800f558:	f7ff ff04 	bl	800f364 <sen5x_check_for_errors>
 800f55c:	1e03      	subs	r3, r0, #0
 800f55e:	d028      	beq.n	800f5b2 <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800f560:	f000 fc84 	bl	800fe6c <sen5x_device_reset>
 800f564:	1e03      	subs	r3, r0, #0
 800f566:	d018      	beq.n	800f59a <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800f568:	4a78      	ldr	r2, [pc, #480]	@ (800f74c <sen5x_statemachine+0x278>)
 800f56a:	4b74      	ldr	r3, [pc, #464]	@ (800f73c <sen5x_statemachine+0x268>)
 800f56c:	0019      	movs	r1, r3
 800f56e:	2001      	movs	r0, #1
 800f570:	f004 fe38 	bl	80141e4 <CreateLine>
            sen5xErrors++;
 800f574:	4b74      	ldr	r3, [pc, #464]	@ (800f748 <sen5x_statemachine+0x274>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	3301      	adds	r3, #1
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	4b72      	ldr	r3, [pc, #456]	@ (800f748 <sen5x_statemachine+0x274>)
 800f57e:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800f580:	f7ff fa9a 	bl	800eab8 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f584:	f005 fba6 	bl	8014cd4 <HAL_GetTick>
 800f588:	0003      	movs	r3, r0
 800f58a:	4a6e      	ldr	r2, [pc, #440]	@ (800f744 <sen5x_statemachine+0x270>)
 800f58c:	189a      	adds	r2, r3, r2
 800f58e:	4b67      	ldr	r3, [pc, #412]	@ (800f72c <sen5x_statemachine+0x258>)
 800f590:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800f592:	4b67      	ldr	r3, [pc, #412]	@ (800f730 <sen5x_statemachine+0x25c>)
 800f594:	2205      	movs	r2, #5
 800f596:	701a      	strb	r2, [r3, #0]
 800f598:	e005      	b.n	800f5a6 <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800f59a:	4a6d      	ldr	r2, [pc, #436]	@ (800f750 <sen5x_statemachine+0x27c>)
 800f59c:	4b6d      	ldr	r3, [pc, #436]	@ (800f754 <sen5x_statemachine+0x280>)
 800f59e:	0019      	movs	r1, r3
 800f5a0:	2002      	movs	r0, #2
 800f5a2:	f004 fe1f 	bl	80141e4 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800f5a6:	f005 fb95 	bl	8014cd4 <HAL_GetTick>
 800f5aa:	0002      	movs	r2, r0
 800f5ac:	4b5f      	ldr	r3, [pc, #380]	@ (800f72c <sen5x_statemachine+0x258>)
 800f5ae:	601a      	str	r2, [r3, #0]
      break;
 800f5b0:	e0b4      	b.n	800f71c <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800f5b2:	4b65      	ldr	r3, [pc, #404]	@ (800f748 <sen5x_statemachine+0x274>)
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d100      	bne.n	800f5bc <sen5x_statemachine+0xe8>
 800f5ba:	e0af      	b.n	800f71c <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800f5bc:	4b62      	ldr	r3, [pc, #392]	@ (800f748 <sen5x_statemachine+0x274>)
 800f5be:	2200      	movs	r2, #0
 800f5c0:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800f5c2:	4a65      	ldr	r2, [pc, #404]	@ (800f758 <sen5x_statemachine+0x284>)
 800f5c4:	4b65      	ldr	r3, [pc, #404]	@ (800f75c <sen5x_statemachine+0x288>)
 800f5c6:	0019      	movs	r1, r3
 800f5c8:	2003      	movs	r0, #3
 800f5ca:	f004 fe0b 	bl	80141e4 <CreateLine>
      break;
 800f5ce:	e0a5      	b.n	800f71c <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800f5d0:	1dfb      	adds	r3, r7, #7
 800f5d2:	0018      	movs	r0, r3
 800f5d4:	f000 f966 	bl	800f8a4 <sen5x_read_data_ready>
      if (data_ready) {
 800f5d8:	1dfb      	adds	r3, r7, #7
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d038      	beq.n	800f652 <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800f5e0:	f003 fc18 	bl	8012e14 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800f5e4:	4b5e      	ldr	r3, [pc, #376]	@ (800f760 <sen5x_statemachine+0x28c>)
 800f5e6:	0018      	movs	r0, r3
 800f5e8:	f7ff fc70 	bl	800eecc <sen5x_read_measurement>
 800f5ec:	1e03      	subs	r3, r0, #0
 800f5ee:	d017      	beq.n	800f620 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800f5f0:	4a5c      	ldr	r2, [pc, #368]	@ (800f764 <sen5x_statemachine+0x290>)
 800f5f2:	4b52      	ldr	r3, [pc, #328]	@ (800f73c <sen5x_statemachine+0x268>)
 800f5f4:	0019      	movs	r1, r3
 800f5f6:	2001      	movs	r0, #1
 800f5f8:	f004 fdf4 	bl	80141e4 <CreateLine>
          sen5xErrors++;
 800f5fc:	4b52      	ldr	r3, [pc, #328]	@ (800f748 <sen5x_statemachine+0x274>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	3301      	adds	r3, #1
 800f602:	b2da      	uxtb	r2, r3
 800f604:	4b50      	ldr	r3, [pc, #320]	@ (800f748 <sen5x_statemachine+0x274>)
 800f606:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800f608:	f7ff fa56 	bl	800eab8 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f60c:	f005 fb62 	bl	8014cd4 <HAL_GetTick>
 800f610:	0003      	movs	r3, r0
 800f612:	4a4c      	ldr	r2, [pc, #304]	@ (800f744 <sen5x_statemachine+0x270>)
 800f614:	189a      	adds	r2, r3, r2
 800f616:	4b45      	ldr	r3, [pc, #276]	@ (800f72c <sen5x_statemachine+0x258>)
 800f618:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800f61a:	4b45      	ldr	r3, [pc, #276]	@ (800f730 <sen5x_statemachine+0x25c>)
 800f61c:	2205      	movs	r2, #5
 800f61e:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800f620:	4b51      	ldr	r3, [pc, #324]	@ (800f768 <sen5x_statemachine+0x294>)
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	3301      	adds	r3, #1
 800f626:	b2da      	uxtb	r2, r3
 800f628:	4b4f      	ldr	r3, [pc, #316]	@ (800f768 <sen5x_statemachine+0x294>)
 800f62a:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800f62c:	4b4e      	ldr	r3, [pc, #312]	@ (800f768 <sen5x_statemachine+0x294>)
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b1f      	cmp	r3, #31
 800f632:	d102      	bne.n	800f63a <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800f634:	4b4c      	ldr	r3, [pc, #304]	@ (800f768 <sen5x_statemachine+0x294>)
 800f636:	2200      	movs	r2, #0
 800f638:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800f63a:	4b4b      	ldr	r3, [pc, #300]	@ (800f768 <sen5x_statemachine+0x294>)
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d901      	bls.n	800f646 <sen5x_statemachine+0x172>
          sen5xStore();
 800f642:	f7ff fd9d 	bl	800f180 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800f646:	4b48      	ldr	r3, [pc, #288]	@ (800f768 <sen5x_statemachine+0x294>)
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	d101      	bne.n	800f652 <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800f64e:	f7ff fc99 	bl	800ef84 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800f652:	4b46      	ldr	r3, [pc, #280]	@ (800f76c <sen5x_statemachine+0x298>)
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d103      	bne.n	800f662 <sen5x_statemachine+0x18e>
 800f65a:	4b43      	ldr	r3, [pc, #268]	@ (800f768 <sen5x_statemachine+0x294>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d95e      	bls.n	800f720 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800f662:	4b33      	ldr	r3, [pc, #204]	@ (800f730 <sen5x_statemachine+0x25c>)
 800f664:	2204      	movs	r2, #4
 800f666:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f668:	e05a      	b.n	800f720 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800f66a:	4b41      	ldr	r3, [pc, #260]	@ (800f770 <sen5x_statemachine+0x29c>)
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d11e      	bne.n	800f6b0 <sen5x_statemachine+0x1dc>
 800f672:	4b40      	ldr	r3, [pc, #256]	@ (800f774 <sen5x_statemachine+0x2a0>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	2b01      	cmp	r3, #1
 800f678:	d11a      	bne.n	800f6b0 <sen5x_statemachine+0x1dc>
 800f67a:	4b3f      	ldr	r3, [pc, #252]	@ (800f778 <sen5x_statemachine+0x2a4>)
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	2201      	movs	r2, #1
 800f680:	4053      	eors	r3, r2
 800f682:	b2db      	uxtb	r3, r3
 800f684:	2b00      	cmp	r3, #0
 800f686:	d013      	beq.n	800f6b0 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800f688:	f000 f9f2 	bl	800fa70 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800f68c:	4a3b      	ldr	r2, [pc, #236]	@ (800f77c <sen5x_statemachine+0x2a8>)
 800f68e:	4b31      	ldr	r3, [pc, #196]	@ (800f754 <sen5x_statemachine+0x280>)
 800f690:	0019      	movs	r1, r3
 800f692:	2002      	movs	r0, #2
 800f694:	f004 fda6 	bl	80141e4 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800f698:	f005 fb1c 	bl	8014cd4 <HAL_GetTick>
 800f69c:	0003      	movs	r3, r0
 800f69e:	4a38      	ldr	r2, [pc, #224]	@ (800f780 <sen5x_statemachine+0x2ac>)
 800f6a0:	189a      	adds	r2, r3, r2
 800f6a2:	4b22      	ldr	r3, [pc, #136]	@ (800f72c <sen5x_statemachine+0x258>)
 800f6a4:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800f6a6:	4b34      	ldr	r3, [pc, #208]	@ (800f778 <sen5x_statemachine+0x2a4>)
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800f6ac:	f7ff fb68 	bl	800ed80 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800f6b0:	4b1f      	ldr	r3, [pc, #124]	@ (800f730 <sen5x_statemachine+0x25c>)
 800f6b2:	2205      	movs	r2, #5
 800f6b4:	701a      	strb	r2, [r3, #0]
      break;
 800f6b6:	e034      	b.n	800f722 <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800f6b8:	4b2c      	ldr	r3, [pc, #176]	@ (800f76c <sen5x_statemachine+0x298>)
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	4053      	eors	r3, r2
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d01c      	beq.n	800f700 <sen5x_statemachine+0x22c>
 800f6c6:	4b2f      	ldr	r3, [pc, #188]	@ (800f784 <sen5x_statemachine+0x2b0>)
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	4053      	eors	r3, r2
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d015      	beq.n	800f700 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800f6d4:	f7ff fba0 	bl	800ee18 <sen5x_extinguish_measurement>
 800f6d8:	1e03      	subs	r3, r0, #0
 800f6da:	d005      	beq.n	800f6e8 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800f6dc:	4a2a      	ldr	r2, [pc, #168]	@ (800f788 <sen5x_statemachine+0x2b4>)
 800f6de:	4b17      	ldr	r3, [pc, #92]	@ (800f73c <sen5x_statemachine+0x268>)
 800f6e0:	0019      	movs	r1, r3
 800f6e2:	2001      	movs	r0, #1
 800f6e4:	f004 fd7e 	bl	80141e4 <CreateLine>
        }
        sen5xSamples = 0;
 800f6e8:	4b1f      	ldr	r3, [pc, #124]	@ (800f768 <sen5x_statemachine+0x294>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f6ee:	f7ff f9e3 	bl	800eab8 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800f6f2:	2000      	movs	r0, #0
 800f6f4:	f7fe f906 	bl	800d904 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800f6f8:	4b0d      	ldr	r3, [pc, #52]	@ (800f730 <sen5x_statemachine+0x25c>)
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	701a      	strb	r2, [r3, #0]
 800f6fe:	e002      	b.n	800f706 <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800f700:	4b0b      	ldr	r3, [pc, #44]	@ (800f730 <sen5x_statemachine+0x25c>)
 800f702:	2203      	movs	r2, #3
 800f704:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800f706:	f003 fbab 	bl	8012e60 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800f70a:	f005 fae3 	bl	8014cd4 <HAL_GetTick>
 800f70e:	0003      	movs	r3, r0
 800f710:	22fa      	movs	r2, #250	@ 0xfa
 800f712:	0092      	lsls	r2, r2, #2
 800f714:	189a      	adds	r2, r3, r2
 800f716:	4b05      	ldr	r3, [pc, #20]	@ (800f72c <sen5x_statemachine+0x258>)
 800f718:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f71a:	e002      	b.n	800f722 <sen5x_statemachine+0x24e>
      break;
 800f71c:	46c0      	nop			@ (mov r8, r8)
 800f71e:	e000      	b.n	800f722 <sen5x_statemachine+0x24e>
      break;
 800f720:	46c0      	nop			@ (mov r8, r8)
}
 800f722:	46c0      	nop			@ (mov r8, r8)
 800f724:	46bd      	mov	sp, r7
 800f726:	b002      	add	sp, #8
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	46c0      	nop			@ (mov r8, r8)
 800f72c:	200011e4 	.word	0x200011e4
 800f730:	200000aa 	.word	0x200000aa
 800f734:	0802ee5c 	.word	0x0802ee5c
 800f738:	0802e018 	.word	0x0802e018
 800f73c:	0802da18 	.word	0x0802da18
 800f740:	002fefd8 	.word	0x002fefd8
 800f744:	00005910 	.word	0x00005910
 800f748:	200011e1 	.word	0x200011e1
 800f74c:	0802e048 	.word	0x0802e048
 800f750:	0802e060 	.word	0x0802e060
 800f754:	0802d9ac 	.word	0x0802d9ac
 800f758:	0802e078 	.word	0x0802e078
 800f75c:	0802d9ec 	.word	0x0802d9ec
 800f760:	200011e8 	.word	0x200011e8
 800f764:	0802e08c 	.word	0x0802e08c
 800f768:	200011e0 	.word	0x200011e0
 800f76c:	20002165 	.word	0x20002165
 800f770:	20000e52 	.word	0x20000e52
 800f774:	20000e51 	.word	0x20000e51
 800f778:	200011d4 	.word	0x200011d4
 800f77c:	0802e0bc 	.word	0x0802e0bc
 800f780:	00002710 	.word	0x00002710
 800f784:	20002166 	.word	0x20002166
 800f788:	0802e0d4 	.word	0x0802e0d4

0800f78c <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f78c:	b590      	push	{r4, r7, lr}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f792:	1dbb      	adds	r3, r7, #6
 800f794:	2200      	movs	r2, #0
 800f796:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f798:	1dbc      	adds	r4, r7, #6
 800f79a:	1dbb      	adds	r3, r7, #6
 800f79c:	8819      	ldrh	r1, [r3, #0]
 800f79e:	003b      	movs	r3, r7
 800f7a0:	2221      	movs	r2, #33	@ 0x21
 800f7a2:	0018      	movs	r0, r3
 800f7a4:	f001 fb57 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800f7a8:	0003      	movs	r3, r0
 800f7aa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f7ac:	1d3c      	adds	r4, r7, #4
 800f7ae:	1dbb      	adds	r3, r7, #6
 800f7b0:	881a      	ldrh	r2, [r3, #0]
 800f7b2:	003b      	movs	r3, r7
 800f7b4:	0019      	movs	r1, r3
 800f7b6:	2069      	movs	r0, #105	@ 0x69
 800f7b8:	f001 fbd1 	bl	8010f5e <sensirion_i2c_write_data>
 800f7bc:	0003      	movs	r3, r0
 800f7be:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f7c0:	1d3b      	adds	r3, r7, #4
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	5e9b      	ldrsh	r3, [r3, r2]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <sen5x_start_measurement+0x46>
        return error;
 800f7ca:	1d3b      	adds	r3, r7, #4
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	5e9b      	ldrsh	r3, [r3, r2]
 800f7d0:	e004      	b.n	800f7dc <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f7d2:	4b04      	ldr	r3, [pc, #16]	@ (800f7e4 <sen5x_start_measurement+0x58>)
 800f7d4:	0018      	movs	r0, r3
 800f7d6:	f7ff fda5 	bl	800f324 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	0018      	movs	r0, r3
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	b003      	add	sp, #12
 800f7e2:	bd90      	pop	{r4, r7, pc}
 800f7e4:	0000c350 	.word	0x0000c350

0800f7e8 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f7e8:	b590      	push	{r4, r7, lr}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f7ee:	1dbb      	adds	r3, r7, #6
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f7f4:	1dbc      	adds	r4, r7, #6
 800f7f6:	1dbb      	adds	r3, r7, #6
 800f7f8:	8819      	ldrh	r1, [r3, #0]
 800f7fa:	003b      	movs	r3, r7
 800f7fc:	2237      	movs	r2, #55	@ 0x37
 800f7fe:	0018      	movs	r0, r3
 800f800:	f001 fb29 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800f804:	0003      	movs	r3, r0
 800f806:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f808:	1d3c      	adds	r4, r7, #4
 800f80a:	1dbb      	adds	r3, r7, #6
 800f80c:	881a      	ldrh	r2, [r3, #0]
 800f80e:	003b      	movs	r3, r7
 800f810:	0019      	movs	r1, r3
 800f812:	2069      	movs	r0, #105	@ 0x69
 800f814:	f001 fba3 	bl	8010f5e <sensirion_i2c_write_data>
 800f818:	0003      	movs	r3, r0
 800f81a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f81c:	1d3b      	adds	r3, r7, #4
 800f81e:	2200      	movs	r2, #0
 800f820:	5e9b      	ldrsh	r3, [r3, r2]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d003      	beq.n	800f82e <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f826:	1d3b      	adds	r3, r7, #4
 800f828:	2200      	movs	r2, #0
 800f82a:	5e9b      	ldrsh	r3, [r3, r2]
 800f82c:	e004      	b.n	800f838 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f82e:	4b04      	ldr	r3, [pc, #16]	@ (800f840 <sen5x_start_measurement_without_pm+0x58>)
 800f830:	0018      	movs	r0, r3
 800f832:	f7ff fd77 	bl	800f324 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f836:	2300      	movs	r3, #0
}
 800f838:	0018      	movs	r0, r3
 800f83a:	46bd      	mov	sp, r7
 800f83c:	b003      	add	sp, #12
 800f83e:	bd90      	pop	{r4, r7, pc}
 800f840:	0000c350 	.word	0x0000c350

0800f844 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f844:	b590      	push	{r4, r7, lr}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f84a:	1dbb      	adds	r3, r7, #6
 800f84c:	2200      	movs	r2, #0
 800f84e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f850:	1dbc      	adds	r4, r7, #6
 800f852:	2382      	movs	r3, #130	@ 0x82
 800f854:	005a      	lsls	r2, r3, #1
 800f856:	1dbb      	adds	r3, r7, #6
 800f858:	8819      	ldrh	r1, [r3, #0]
 800f85a:	003b      	movs	r3, r7
 800f85c:	0018      	movs	r0, r3
 800f85e:	f001 fafa 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800f862:	0003      	movs	r3, r0
 800f864:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f866:	1d3c      	adds	r4, r7, #4
 800f868:	1dbb      	adds	r3, r7, #6
 800f86a:	881a      	ldrh	r2, [r3, #0]
 800f86c:	003b      	movs	r3, r7
 800f86e:	0019      	movs	r1, r3
 800f870:	2069      	movs	r0, #105	@ 0x69
 800f872:	f001 fb74 	bl	8010f5e <sensirion_i2c_write_data>
 800f876:	0003      	movs	r3, r0
 800f878:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f87a:	1d3b      	adds	r3, r7, #4
 800f87c:	2200      	movs	r2, #0
 800f87e:	5e9b      	ldrsh	r3, [r3, r2]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d003      	beq.n	800f88c <sen5x_stop_measurement+0x48>
        return error;
 800f884:	1d3b      	adds	r3, r7, #4
 800f886:	2200      	movs	r2, #0
 800f888:	5e9b      	ldrsh	r3, [r3, r2]
 800f88a:	e004      	b.n	800f896 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f88c:	4b04      	ldr	r3, [pc, #16]	@ (800f8a0 <sen5x_stop_measurement+0x5c>)
 800f88e:	0018      	movs	r0, r3
 800f890:	f7ff fd48 	bl	800f324 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f894:	2300      	movs	r3, #0
}
 800f896:	0018      	movs	r0, r3
 800f898:	46bd      	mov	sp, r7
 800f89a:	b003      	add	sp, #12
 800f89c:	bd90      	pop	{r4, r7, pc}
 800f89e:	46c0      	nop			@ (mov r8, r8)
 800f8a0:	00030d40 	.word	0x00030d40

0800f8a4 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f8ac:	250e      	movs	r5, #14
 800f8ae:	197b      	adds	r3, r7, r5
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f8b4:	197c      	adds	r4, r7, r5
 800f8b6:	4a22      	ldr	r2, [pc, #136]	@ (800f940 <sen5x_read_data_ready+0x9c>)
 800f8b8:	197b      	adds	r3, r7, r5
 800f8ba:	8819      	ldrh	r1, [r3, #0]
 800f8bc:	2308      	movs	r3, #8
 800f8be:	18fb      	adds	r3, r7, r3
 800f8c0:	0018      	movs	r0, r3
 800f8c2:	f001 fac8 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800f8c6:	0003      	movs	r3, r0
 800f8c8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f8ca:	260c      	movs	r6, #12
 800f8cc:	19bc      	adds	r4, r7, r6
 800f8ce:	197b      	adds	r3, r7, r5
 800f8d0:	881a      	ldrh	r2, [r3, #0]
 800f8d2:	2308      	movs	r3, #8
 800f8d4:	18fb      	adds	r3, r7, r3
 800f8d6:	0019      	movs	r1, r3
 800f8d8:	2069      	movs	r0, #105	@ 0x69
 800f8da:	f001 fb40 	bl	8010f5e <sensirion_i2c_write_data>
 800f8de:	0003      	movs	r3, r0
 800f8e0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f8e2:	19bb      	adds	r3, r7, r6
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	5e9b      	ldrsh	r3, [r3, r2]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d003      	beq.n	800f8f4 <sen5x_read_data_ready+0x50>
        return error;
 800f8ec:	19bb      	adds	r3, r7, r6
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	5e9b      	ldrsh	r3, [r3, r2]
 800f8f2:	e020      	b.n	800f936 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f8f4:	4b13      	ldr	r3, [pc, #76]	@ (800f944 <sen5x_read_data_ready+0xa0>)
 800f8f6:	0018      	movs	r0, r3
 800f8f8:	f7ff fd14 	bl	800f324 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f8fc:	250c      	movs	r5, #12
 800f8fe:	197c      	adds	r4, r7, r5
 800f900:	2308      	movs	r3, #8
 800f902:	18fb      	adds	r3, r7, r3
 800f904:	2202      	movs	r2, #2
 800f906:	0019      	movs	r1, r3
 800f908:	2069      	movs	r0, #105	@ 0x69
 800f90a:	f001 fb40 	bl	8010f8e <sensirion_i2c_read_data_inplace>
 800f90e:	0003      	movs	r3, r0
 800f910:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f912:	197b      	adds	r3, r7, r5
 800f914:	2200      	movs	r2, #0
 800f916:	5e9b      	ldrsh	r3, [r3, r2]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d003      	beq.n	800f924 <sen5x_read_data_ready+0x80>
        return error;
 800f91c:	197b      	adds	r3, r7, r5
 800f91e:	2200      	movs	r2, #0
 800f920:	5e9b      	ldrsh	r3, [r3, r2]
 800f922:	e008      	b.n	800f936 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f924:	2308      	movs	r3, #8
 800f926:	18fb      	adds	r3, r7, r3
 800f928:	785b      	ldrb	r3, [r3, #1]
 800f92a:	1e5a      	subs	r2, r3, #1
 800f92c:	4193      	sbcs	r3, r2
 800f92e:	b2da      	uxtb	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f934:	2300      	movs	r3, #0
}
 800f936:	0018      	movs	r0, r3
 800f938:	46bd      	mov	sp, r7
 800f93a:	b005      	add	sp, #20
 800f93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f93e:	46c0      	nop			@ (mov r8, r8)
 800f940:	00000202 	.word	0x00000202
 800f944:	00004e20 	.word	0x00004e20

0800f948 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f94a:	b08d      	sub	sp, #52	@ 0x34
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
 800f954:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f956:	252e      	movs	r5, #46	@ 0x2e
 800f958:	197b      	adds	r3, r7, r5
 800f95a:	2200      	movs	r2, #0
 800f95c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f95e:	197c      	adds	r4, r7, r5
 800f960:	23f1      	movs	r3, #241	@ 0xf1
 800f962:	009a      	lsls	r2, r3, #2
 800f964:	197b      	adds	r3, r7, r5
 800f966:	8819      	ldrh	r1, [r3, #0]
 800f968:	2314      	movs	r3, #20
 800f96a:	18fb      	adds	r3, r7, r3
 800f96c:	0018      	movs	r0, r3
 800f96e:	f001 fa72 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800f972:	0003      	movs	r3, r0
 800f974:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f976:	262c      	movs	r6, #44	@ 0x2c
 800f978:	19bc      	adds	r4, r7, r6
 800f97a:	197b      	adds	r3, r7, r5
 800f97c:	881a      	ldrh	r2, [r3, #0]
 800f97e:	2314      	movs	r3, #20
 800f980:	18fb      	adds	r3, r7, r3
 800f982:	0019      	movs	r1, r3
 800f984:	2069      	movs	r0, #105	@ 0x69
 800f986:	f001 faea 	bl	8010f5e <sensirion_i2c_write_data>
 800f98a:	0003      	movs	r3, r0
 800f98c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f98e:	19bb      	adds	r3, r7, r6
 800f990:	2200      	movs	r2, #0
 800f992:	5e9b      	ldrsh	r3, [r3, r2]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d003      	beq.n	800f9a0 <sen5x_read_measured_values+0x58>
        return error;
 800f998:	19bb      	adds	r3, r7, r6
 800f99a:	2200      	movs	r2, #0
 800f99c:	5e9b      	ldrsh	r3, [r3, r2]
 800f99e:	e060      	b.n	800fa62 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f9a0:	4b32      	ldr	r3, [pc, #200]	@ (800fa6c <sen5x_read_measured_values+0x124>)
 800f9a2:	0018      	movs	r0, r3
 800f9a4:	f7ff fcbe 	bl	800f324 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f9a8:	252c      	movs	r5, #44	@ 0x2c
 800f9aa:	197c      	adds	r4, r7, r5
 800f9ac:	2314      	movs	r3, #20
 800f9ae:	18fb      	adds	r3, r7, r3
 800f9b0:	2210      	movs	r2, #16
 800f9b2:	0019      	movs	r1, r3
 800f9b4:	2069      	movs	r0, #105	@ 0x69
 800f9b6:	f001 faea 	bl	8010f8e <sensirion_i2c_read_data_inplace>
 800f9ba:	0003      	movs	r3, r0
 800f9bc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f9be:	197b      	adds	r3, r7, r5
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	5e9b      	ldrsh	r3, [r3, r2]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d003      	beq.n	800f9d0 <sen5x_read_measured_values+0x88>
        return error;
 800f9c8:	197b      	adds	r3, r7, r5
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	5e9b      	ldrsh	r3, [r3, r2]
 800f9ce:	e048      	b.n	800fa62 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f9d0:	2414      	movs	r4, #20
 800f9d2:	193b      	adds	r3, r7, r4
 800f9d4:	0018      	movs	r0, r3
 800f9d6:	f000 fa79 	bl	800fecc <sensirion_common_bytes_to_uint16_t>
 800f9da:	0003      	movs	r3, r0
 800f9dc:	001a      	movs	r2, r3
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f9e2:	193b      	adds	r3, r7, r4
 800f9e4:	3302      	adds	r3, #2
 800f9e6:	0018      	movs	r0, r3
 800f9e8:	f000 fa70 	bl	800fecc <sensirion_common_bytes_to_uint16_t>
 800f9ec:	0003      	movs	r3, r0
 800f9ee:	001a      	movs	r2, r3
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f9f4:	193b      	adds	r3, r7, r4
 800f9f6:	3304      	adds	r3, #4
 800f9f8:	0018      	movs	r0, r3
 800f9fa:	f000 fa67 	bl	800fecc <sensirion_common_bytes_to_uint16_t>
 800f9fe:	0003      	movs	r3, r0
 800fa00:	001a      	movs	r2, r3
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800fa06:	193b      	adds	r3, r7, r4
 800fa08:	3306      	adds	r3, #6
 800fa0a:	0018      	movs	r0, r3
 800fa0c:	f000 fa5e 	bl	800fecc <sensirion_common_bytes_to_uint16_t>
 800fa10:	0003      	movs	r3, r0
 800fa12:	001a      	movs	r2, r3
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800fa18:	193b      	adds	r3, r7, r4
 800fa1a:	3308      	adds	r3, #8
 800fa1c:	0018      	movs	r0, r3
 800fa1e:	f000 fa82 	bl	800ff26 <sensirion_common_bytes_to_int16_t>
 800fa22:	0003      	movs	r3, r0
 800fa24:	001a      	movs	r2, r3
 800fa26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa28:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800fa2a:	193b      	adds	r3, r7, r4
 800fa2c:	330a      	adds	r3, #10
 800fa2e:	0018      	movs	r0, r3
 800fa30:	f000 fa79 	bl	800ff26 <sensirion_common_bytes_to_int16_t>
 800fa34:	0003      	movs	r3, r0
 800fa36:	001a      	movs	r2, r3
 800fa38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa3a:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800fa3c:	193b      	adds	r3, r7, r4
 800fa3e:	330c      	adds	r3, #12
 800fa40:	0018      	movs	r0, r3
 800fa42:	f000 fa70 	bl	800ff26 <sensirion_common_bytes_to_int16_t>
 800fa46:	0003      	movs	r3, r0
 800fa48:	001a      	movs	r2, r3
 800fa4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa4c:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800fa4e:	193b      	adds	r3, r7, r4
 800fa50:	330e      	adds	r3, #14
 800fa52:	0018      	movs	r0, r3
 800fa54:	f000 fa67 	bl	800ff26 <sensirion_common_bytes_to_int16_t>
 800fa58:	0003      	movs	r3, r0
 800fa5a:	001a      	movs	r2, r3
 800fa5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa5e:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	0018      	movs	r0, r3
 800fa64:	46bd      	mov	sp, r7
 800fa66:	b00d      	add	sp, #52	@ 0x34
 800fa68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa6a:	46c0      	nop			@ (mov r8, r8)
 800fa6c:	00004e20 	.word	0x00004e20

0800fa70 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800fa70:	b590      	push	{r4, r7, lr}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fa76:	1dbb      	adds	r3, r7, #6
 800fa78:	2200      	movs	r2, #0
 800fa7a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800fa7c:	1dbc      	adds	r4, r7, #6
 800fa7e:	4a12      	ldr	r2, [pc, #72]	@ (800fac8 <sen5x_start_fan_cleaning+0x58>)
 800fa80:	1dbb      	adds	r3, r7, #6
 800fa82:	8819      	ldrh	r1, [r3, #0]
 800fa84:	003b      	movs	r3, r7
 800fa86:	0018      	movs	r0, r3
 800fa88:	f001 f9e5 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800fa8c:	0003      	movs	r3, r0
 800fa8e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fa90:	1d3c      	adds	r4, r7, #4
 800fa92:	1dbb      	adds	r3, r7, #6
 800fa94:	881a      	ldrh	r2, [r3, #0]
 800fa96:	003b      	movs	r3, r7
 800fa98:	0019      	movs	r1, r3
 800fa9a:	2069      	movs	r0, #105	@ 0x69
 800fa9c:	f001 fa5f 	bl	8010f5e <sensirion_i2c_write_data>
 800faa0:	0003      	movs	r3, r0
 800faa2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800faa4:	1d3b      	adds	r3, r7, #4
 800faa6:	2200      	movs	r2, #0
 800faa8:	5e9b      	ldrsh	r3, [r3, r2]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d003      	beq.n	800fab6 <sen5x_start_fan_cleaning+0x46>
        return error;
 800faae:	1d3b      	adds	r3, r7, #4
 800fab0:	2200      	movs	r2, #0
 800fab2:	5e9b      	ldrsh	r3, [r3, r2]
 800fab4:	e004      	b.n	800fac0 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800fab6:	4b05      	ldr	r3, [pc, #20]	@ (800facc <sen5x_start_fan_cleaning+0x5c>)
 800fab8:	0018      	movs	r0, r3
 800faba:	f7ff fc33 	bl	800f324 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	0018      	movs	r0, r3
 800fac2:	46bd      	mov	sp, r7
 800fac4:	b003      	add	sp, #12
 800fac6:	bd90      	pop	{r4, r7, pc}
 800fac8:	00005607 	.word	0x00005607
 800facc:	00004e20 	.word	0x00004e20

0800fad0 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800fad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fad2:	b087      	sub	sp, #28
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	0004      	movs	r4, r0
 800fad8:	0008      	movs	r0, r1
 800fada:	0011      	movs	r1, r2
 800fadc:	1dbb      	adds	r3, r7, #6
 800fade:	1c22      	adds	r2, r4, #0
 800fae0:	801a      	strh	r2, [r3, #0]
 800fae2:	1d3b      	adds	r3, r7, #4
 800fae4:	1c02      	adds	r2, r0, #0
 800fae6:	801a      	strh	r2, [r3, #0]
 800fae8:	1cbb      	adds	r3, r7, #2
 800faea:	1c0a      	adds	r2, r1, #0
 800faec:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800faee:	2516      	movs	r5, #22
 800faf0:	197b      	adds	r3, r7, r5
 800faf2:	2200      	movs	r2, #0
 800faf4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800faf6:	197c      	adds	r4, r7, r5
 800faf8:	4a25      	ldr	r2, [pc, #148]	@ (800fb90 <sen5x_set_temperature_offset_parameters+0xc0>)
 800fafa:	197b      	adds	r3, r7, r5
 800fafc:	8819      	ldrh	r1, [r3, #0]
 800fafe:	2608      	movs	r6, #8
 800fb00:	19bb      	adds	r3, r7, r6
 800fb02:	0018      	movs	r0, r3
 800fb04:	f001 f9a7 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800fb08:	0003      	movs	r3, r0
 800fb0a:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800fb0c:	197c      	adds	r4, r7, r5
 800fb0e:	1dbb      	adds	r3, r7, #6
 800fb10:	2200      	movs	r2, #0
 800fb12:	5e9a      	ldrsh	r2, [r3, r2]
 800fb14:	197b      	adds	r3, r7, r5
 800fb16:	8819      	ldrh	r1, [r3, #0]
 800fb18:	19bb      	adds	r3, r7, r6
 800fb1a:	0018      	movs	r0, r3
 800fb1c:	f001 fa06 	bl	8010f2c <sensirion_i2c_add_int16_t_to_buffer>
 800fb20:	0003      	movs	r3, r0
 800fb22:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800fb24:	197c      	adds	r4, r7, r5
 800fb26:	1d3b      	adds	r3, r7, #4
 800fb28:	2200      	movs	r2, #0
 800fb2a:	5e9a      	ldrsh	r2, [r3, r2]
 800fb2c:	197b      	adds	r3, r7, r5
 800fb2e:	8819      	ldrh	r1, [r3, #0]
 800fb30:	19bb      	adds	r3, r7, r6
 800fb32:	0018      	movs	r0, r3
 800fb34:	f001 f9fa 	bl	8010f2c <sensirion_i2c_add_int16_t_to_buffer>
 800fb38:	0003      	movs	r3, r0
 800fb3a:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800fb3c:	197c      	adds	r4, r7, r5
 800fb3e:	1cbb      	adds	r3, r7, #2
 800fb40:	881a      	ldrh	r2, [r3, #0]
 800fb42:	197b      	adds	r3, r7, r5
 800fb44:	8819      	ldrh	r1, [r3, #0]
 800fb46:	19bb      	adds	r3, r7, r6
 800fb48:	0018      	movs	r0, r3
 800fb4a:	f001 f9b0 	bl	8010eae <sensirion_i2c_add_uint16_t_to_buffer>
 800fb4e:	0003      	movs	r3, r0
 800fb50:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fb52:	2214      	movs	r2, #20
 800fb54:	18bc      	adds	r4, r7, r2
 800fb56:	197b      	adds	r3, r7, r5
 800fb58:	881a      	ldrh	r2, [r3, #0]
 800fb5a:	19bb      	adds	r3, r7, r6
 800fb5c:	0019      	movs	r1, r3
 800fb5e:	2069      	movs	r0, #105	@ 0x69
 800fb60:	f001 f9fd 	bl	8010f5e <sensirion_i2c_write_data>
 800fb64:	0003      	movs	r3, r0
 800fb66:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fb68:	2214      	movs	r2, #20
 800fb6a:	18bb      	adds	r3, r7, r2
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	5e5b      	ldrsh	r3, [r3, r1]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d003      	beq.n	800fb7c <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800fb74:	18bb      	adds	r3, r7, r2
 800fb76:	2200      	movs	r2, #0
 800fb78:	5e9b      	ldrsh	r3, [r3, r2]
 800fb7a:	e004      	b.n	800fb86 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800fb7c:	4b05      	ldr	r3, [pc, #20]	@ (800fb94 <sen5x_set_temperature_offset_parameters+0xc4>)
 800fb7e:	0018      	movs	r0, r3
 800fb80:	f7ff fbd0 	bl	800f324 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	0018      	movs	r0, r3
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	b007      	add	sp, #28
 800fb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb8e:	46c0      	nop			@ (mov r8, r8)
 800fb90:	000060b2 	.word	0x000060b2
 800fb94:	00004e20 	.word	0x00004e20

0800fb98 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800fb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb9a:	b091      	sub	sp, #68	@ 0x44
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	000a      	movs	r2, r1
 800fba2:	1cfb      	adds	r3, r7, #3
 800fba4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800fba6:	253e      	movs	r5, #62	@ 0x3e
 800fba8:	197b      	adds	r3, r7, r5
 800fbaa:	2200      	movs	r2, #0
 800fbac:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800fbae:	197c      	adds	r4, r7, r5
 800fbb0:	4a22      	ldr	r2, [pc, #136]	@ (800fc3c <sen5x_get_product_name+0xa4>)
 800fbb2:	197b      	adds	r3, r7, r5
 800fbb4:	8819      	ldrh	r1, [r3, #0]
 800fbb6:	230c      	movs	r3, #12
 800fbb8:	18fb      	adds	r3, r7, r3
 800fbba:	0018      	movs	r0, r3
 800fbbc:	f001 f94b 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800fbc0:	0003      	movs	r3, r0
 800fbc2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fbc4:	263c      	movs	r6, #60	@ 0x3c
 800fbc6:	19bc      	adds	r4, r7, r6
 800fbc8:	197b      	adds	r3, r7, r5
 800fbca:	881a      	ldrh	r2, [r3, #0]
 800fbcc:	230c      	movs	r3, #12
 800fbce:	18fb      	adds	r3, r7, r3
 800fbd0:	0019      	movs	r1, r3
 800fbd2:	2069      	movs	r0, #105	@ 0x69
 800fbd4:	f001 f9c3 	bl	8010f5e <sensirion_i2c_write_data>
 800fbd8:	0003      	movs	r3, r0
 800fbda:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fbdc:	19bb      	adds	r3, r7, r6
 800fbde:	2200      	movs	r2, #0
 800fbe0:	5e9b      	ldrsh	r3, [r3, r2]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d003      	beq.n	800fbee <sen5x_get_product_name+0x56>
        return error;
 800fbe6:	19bb      	adds	r3, r7, r6
 800fbe8:	2200      	movs	r2, #0
 800fbea:	5e9b      	ldrsh	r3, [r3, r2]
 800fbec:	e021      	b.n	800fc32 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800fbee:	4b14      	ldr	r3, [pc, #80]	@ (800fc40 <sen5x_get_product_name+0xa8>)
 800fbf0:	0018      	movs	r0, r3
 800fbf2:	f7ff fb97 	bl	800f324 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800fbf6:	253c      	movs	r5, #60	@ 0x3c
 800fbf8:	197c      	adds	r4, r7, r5
 800fbfa:	230c      	movs	r3, #12
 800fbfc:	18fb      	adds	r3, r7, r3
 800fbfe:	2220      	movs	r2, #32
 800fc00:	0019      	movs	r1, r3
 800fc02:	2069      	movs	r0, #105	@ 0x69
 800fc04:	f001 f9c3 	bl	8010f8e <sensirion_i2c_read_data_inplace>
 800fc08:	0003      	movs	r3, r0
 800fc0a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fc0c:	197b      	adds	r3, r7, r5
 800fc0e:	2200      	movs	r2, #0
 800fc10:	5e9b      	ldrsh	r3, [r3, r2]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d003      	beq.n	800fc1e <sen5x_get_product_name+0x86>
        return error;
 800fc16:	197b      	adds	r3, r7, r5
 800fc18:	2200      	movs	r2, #0
 800fc1a:	5e9b      	ldrsh	r3, [r3, r2]
 800fc1c:	e009      	b.n	800fc32 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800fc1e:	1cfb      	adds	r3, r7, #3
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	b29a      	uxth	r2, r3
 800fc24:	6879      	ldr	r1, [r7, #4]
 800fc26:	230c      	movs	r3, #12
 800fc28:	18fb      	adds	r3, r7, r3
 800fc2a:	0018      	movs	r0, r3
 800fc2c:	f000 f989 	bl	800ff42 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	0018      	movs	r0, r3
 800fc34:	46bd      	mov	sp, r7
 800fc36:	b011      	add	sp, #68	@ 0x44
 800fc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc3a:	46c0      	nop			@ (mov r8, r8)
 800fc3c:	0000d014 	.word	0x0000d014
 800fc40:	0000c350 	.word	0x0000c350

0800fc44 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800fc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc46:	b091      	sub	sp, #68	@ 0x44
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	000a      	movs	r2, r1
 800fc4e:	1cfb      	adds	r3, r7, #3
 800fc50:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800fc52:	253e      	movs	r5, #62	@ 0x3e
 800fc54:	197b      	adds	r3, r7, r5
 800fc56:	2200      	movs	r2, #0
 800fc58:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800fc5a:	197c      	adds	r4, r7, r5
 800fc5c:	4a22      	ldr	r2, [pc, #136]	@ (800fce8 <sen5x_get_serial_number+0xa4>)
 800fc5e:	197b      	adds	r3, r7, r5
 800fc60:	8819      	ldrh	r1, [r3, #0]
 800fc62:	230c      	movs	r3, #12
 800fc64:	18fb      	adds	r3, r7, r3
 800fc66:	0018      	movs	r0, r3
 800fc68:	f001 f8f5 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800fc6c:	0003      	movs	r3, r0
 800fc6e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fc70:	263c      	movs	r6, #60	@ 0x3c
 800fc72:	19bc      	adds	r4, r7, r6
 800fc74:	197b      	adds	r3, r7, r5
 800fc76:	881a      	ldrh	r2, [r3, #0]
 800fc78:	230c      	movs	r3, #12
 800fc7a:	18fb      	adds	r3, r7, r3
 800fc7c:	0019      	movs	r1, r3
 800fc7e:	2069      	movs	r0, #105	@ 0x69
 800fc80:	f001 f96d 	bl	8010f5e <sensirion_i2c_write_data>
 800fc84:	0003      	movs	r3, r0
 800fc86:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fc88:	19bb      	adds	r3, r7, r6
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	5e9b      	ldrsh	r3, [r3, r2]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d003      	beq.n	800fc9a <sen5x_get_serial_number+0x56>
        return error;
 800fc92:	19bb      	adds	r3, r7, r6
 800fc94:	2200      	movs	r2, #0
 800fc96:	5e9b      	ldrsh	r3, [r3, r2]
 800fc98:	e021      	b.n	800fcde <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800fc9a:	4b14      	ldr	r3, [pc, #80]	@ (800fcec <sen5x_get_serial_number+0xa8>)
 800fc9c:	0018      	movs	r0, r3
 800fc9e:	f7ff fb41 	bl	800f324 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800fca2:	253c      	movs	r5, #60	@ 0x3c
 800fca4:	197c      	adds	r4, r7, r5
 800fca6:	230c      	movs	r3, #12
 800fca8:	18fb      	adds	r3, r7, r3
 800fcaa:	2220      	movs	r2, #32
 800fcac:	0019      	movs	r1, r3
 800fcae:	2069      	movs	r0, #105	@ 0x69
 800fcb0:	f001 f96d 	bl	8010f8e <sensirion_i2c_read_data_inplace>
 800fcb4:	0003      	movs	r3, r0
 800fcb6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fcb8:	197b      	adds	r3, r7, r5
 800fcba:	2200      	movs	r2, #0
 800fcbc:	5e9b      	ldrsh	r3, [r3, r2]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d003      	beq.n	800fcca <sen5x_get_serial_number+0x86>
        return error;
 800fcc2:	197b      	adds	r3, r7, r5
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	5e9b      	ldrsh	r3, [r3, r2]
 800fcc8:	e009      	b.n	800fcde <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800fcca:	1cfb      	adds	r3, r7, #3
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	6879      	ldr	r1, [r7, #4]
 800fcd2:	230c      	movs	r3, #12
 800fcd4:	18fb      	adds	r3, r7, r3
 800fcd6:	0018      	movs	r0, r3
 800fcd8:	f000 f933 	bl	800ff42 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800fcdc:	2300      	movs	r3, #0
}
 800fcde:	0018      	movs	r0, r3
 800fce0:	46bd      	mov	sp, r7
 800fce2:	b011      	add	sp, #68	@ 0x44
 800fce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fce6:	46c0      	nop			@ (mov r8, r8)
 800fce8:	0000d033 	.word	0x0000d033
 800fcec:	0000c350 	.word	0x0000c350

0800fcf0 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800fcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcf2:	b089      	sub	sp, #36	@ 0x24
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	607a      	str	r2, [r7, #4]
 800fcfc:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800fcfe:	251e      	movs	r5, #30
 800fd00:	197b      	adds	r3, r7, r5
 800fd02:	2200      	movs	r2, #0
 800fd04:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800fd06:	197c      	adds	r4, r7, r5
 800fd08:	23d1      	movs	r3, #209	@ 0xd1
 800fd0a:	021a      	lsls	r2, r3, #8
 800fd0c:	197b      	adds	r3, r7, r5
 800fd0e:	8819      	ldrh	r1, [r3, #0]
 800fd10:	2310      	movs	r3, #16
 800fd12:	18fb      	adds	r3, r7, r3
 800fd14:	0018      	movs	r0, r3
 800fd16:	f001 f89e 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800fd1a:	0003      	movs	r3, r0
 800fd1c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fd1e:	261c      	movs	r6, #28
 800fd20:	19bc      	adds	r4, r7, r6
 800fd22:	197b      	adds	r3, r7, r5
 800fd24:	881a      	ldrh	r2, [r3, #0]
 800fd26:	2310      	movs	r3, #16
 800fd28:	18fb      	adds	r3, r7, r3
 800fd2a:	0019      	movs	r1, r3
 800fd2c:	2069      	movs	r0, #105	@ 0x69
 800fd2e:	f001 f916 	bl	8010f5e <sensirion_i2c_write_data>
 800fd32:	0003      	movs	r3, r0
 800fd34:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fd36:	19bb      	adds	r3, r7, r6
 800fd38:	2200      	movs	r2, #0
 800fd3a:	5e9b      	ldrsh	r3, [r3, r2]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d003      	beq.n	800fd48 <sen5x_get_version+0x58>
        return error;
 800fd40:	19bb      	adds	r3, r7, r6
 800fd42:	2200      	movs	r2, #0
 800fd44:	5e9b      	ldrsh	r3, [r3, r2]
 800fd46:	e038      	b.n	800fdba <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fd48:	4b1e      	ldr	r3, [pc, #120]	@ (800fdc4 <sen5x_get_version+0xd4>)
 800fd4a:	0018      	movs	r0, r3
 800fd4c:	f7ff faea 	bl	800f324 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800fd50:	251c      	movs	r5, #28
 800fd52:	197c      	adds	r4, r7, r5
 800fd54:	2310      	movs	r3, #16
 800fd56:	18fb      	adds	r3, r7, r3
 800fd58:	2208      	movs	r2, #8
 800fd5a:	0019      	movs	r1, r3
 800fd5c:	2069      	movs	r0, #105	@ 0x69
 800fd5e:	f001 f916 	bl	8010f8e <sensirion_i2c_read_data_inplace>
 800fd62:	0003      	movs	r3, r0
 800fd64:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fd66:	197b      	adds	r3, r7, r5
 800fd68:	2200      	movs	r2, #0
 800fd6a:	5e9b      	ldrsh	r3, [r3, r2]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d003      	beq.n	800fd78 <sen5x_get_version+0x88>
        return error;
 800fd70:	197b      	adds	r3, r7, r5
 800fd72:	2200      	movs	r2, #0
 800fd74:	5e9b      	ldrsh	r3, [r3, r2]
 800fd76:	e020      	b.n	800fdba <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800fd78:	2110      	movs	r1, #16
 800fd7a:	187b      	adds	r3, r7, r1
 800fd7c:	781a      	ldrb	r2, [r3, #0]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800fd82:	187b      	adds	r3, r7, r1
 800fd84:	785a      	ldrb	r2, [r3, #1]
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800fd8a:	187b      	adds	r3, r7, r1
 800fd8c:	789b      	ldrb	r3, [r3, #2]
 800fd8e:	1e5a      	subs	r2, r3, #1
 800fd90:	4193      	sbcs	r3, r2
 800fd92:	b2da      	uxtb	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800fd98:	187b      	adds	r3, r7, r1
 800fd9a:	78da      	ldrb	r2, [r3, #3]
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800fda0:	187b      	adds	r3, r7, r1
 800fda2:	791a      	ldrb	r2, [r3, #4]
 800fda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda6:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800fda8:	187b      	adds	r3, r7, r1
 800fdaa:	795a      	ldrb	r2, [r3, #5]
 800fdac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdae:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800fdb0:	187b      	adds	r3, r7, r1
 800fdb2:	799a      	ldrb	r2, [r3, #6]
 800fdb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fdb6:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	0018      	movs	r0, r3
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	b009      	add	sp, #36	@ 0x24
 800fdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdc2:	46c0      	nop			@ (mov r8, r8)
 800fdc4:	00004e20 	.word	0x00004e20

0800fdc8 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800fdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdca:	b087      	sub	sp, #28
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800fdd0:	2516      	movs	r5, #22
 800fdd2:	197b      	adds	r3, r7, r5
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800fdd8:	197c      	adds	r4, r7, r5
 800fdda:	4a21      	ldr	r2, [pc, #132]	@ (800fe60 <sen5x_read_device_status+0x98>)
 800fddc:	197b      	adds	r3, r7, r5
 800fdde:	8819      	ldrh	r1, [r3, #0]
 800fde0:	260c      	movs	r6, #12
 800fde2:	19bb      	adds	r3, r7, r6
 800fde4:	0018      	movs	r0, r3
 800fde6:	f001 f836 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800fdea:	0003      	movs	r3, r0
 800fdec:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fdee:	2314      	movs	r3, #20
 800fdf0:	18fc      	adds	r4, r7, r3
 800fdf2:	197b      	adds	r3, r7, r5
 800fdf4:	881a      	ldrh	r2, [r3, #0]
 800fdf6:	19bb      	adds	r3, r7, r6
 800fdf8:	0019      	movs	r1, r3
 800fdfa:	2069      	movs	r0, #105	@ 0x69
 800fdfc:	f001 f8af 	bl	8010f5e <sensirion_i2c_write_data>
 800fe00:	0003      	movs	r3, r0
 800fe02:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fe04:	2314      	movs	r3, #20
 800fe06:	18fb      	adds	r3, r7, r3
 800fe08:	2200      	movs	r2, #0
 800fe0a:	5e9b      	ldrsh	r3, [r3, r2]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d001      	beq.n	800fe14 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800fe10:	4b14      	ldr	r3, [pc, #80]	@ (800fe64 <sen5x_read_device_status+0x9c>)
 800fe12:	e020      	b.n	800fe56 <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fe14:	4b14      	ldr	r3, [pc, #80]	@ (800fe68 <sen5x_read_device_status+0xa0>)
 800fe16:	0018      	movs	r0, r3
 800fe18:	f7ff fa84 	bl	800f324 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800fe1c:	2514      	movs	r5, #20
 800fe1e:	197c      	adds	r4, r7, r5
 800fe20:	230c      	movs	r3, #12
 800fe22:	18fb      	adds	r3, r7, r3
 800fe24:	2204      	movs	r2, #4
 800fe26:	0019      	movs	r1, r3
 800fe28:	2069      	movs	r0, #105	@ 0x69
 800fe2a:	f001 f8b0 	bl	8010f8e <sensirion_i2c_read_data_inplace>
 800fe2e:	0003      	movs	r3, r0
 800fe30:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fe32:	197b      	adds	r3, r7, r5
 800fe34:	2200      	movs	r2, #0
 800fe36:	5e9b      	ldrsh	r3, [r3, r2]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d003      	beq.n	800fe44 <sen5x_read_device_status+0x7c>
        return error;
 800fe3c:	197b      	adds	r3, r7, r5
 800fe3e:	2200      	movs	r2, #0
 800fe40:	5e9b      	ldrsh	r3, [r3, r2]
 800fe42:	e008      	b.n	800fe56 <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800fe44:	230c      	movs	r3, #12
 800fe46:	18fb      	adds	r3, r7, r3
 800fe48:	0018      	movs	r0, r3
 800fe4a:	f000 f853 	bl	800fef4 <sensirion_common_bytes_to_uint32_t>
 800fe4e:	0002      	movs	r2, r0
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	0018      	movs	r0, r3
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	b007      	add	sp, #28
 800fe5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe5e:	46c0      	nop			@ (mov r8, r8)
 800fe60:	0000d206 	.word	0x0000d206
 800fe64:	ffffd206 	.word	0xffffd206
 800fe68:	00004e20 	.word	0x00004e20

0800fe6c <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800fe6c:	b590      	push	{r4, r7, lr}
 800fe6e:	b083      	sub	sp, #12
 800fe70:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fe72:	1dbb      	adds	r3, r7, #6
 800fe74:	2200      	movs	r2, #0
 800fe76:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800fe78:	1dbc      	adds	r4, r7, #6
 800fe7a:	4a12      	ldr	r2, [pc, #72]	@ (800fec4 <sen5x_device_reset+0x58>)
 800fe7c:	1dbb      	adds	r3, r7, #6
 800fe7e:	8819      	ldrh	r1, [r3, #0]
 800fe80:	003b      	movs	r3, r7
 800fe82:	0018      	movs	r0, r3
 800fe84:	f000 ffe7 	bl	8010e56 <sensirion_i2c_add_command_to_buffer>
 800fe88:	0003      	movs	r3, r0
 800fe8a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fe8c:	1d3c      	adds	r4, r7, #4
 800fe8e:	1dbb      	adds	r3, r7, #6
 800fe90:	881a      	ldrh	r2, [r3, #0]
 800fe92:	003b      	movs	r3, r7
 800fe94:	0019      	movs	r1, r3
 800fe96:	2069      	movs	r0, #105	@ 0x69
 800fe98:	f001 f861 	bl	8010f5e <sensirion_i2c_write_data>
 800fe9c:	0003      	movs	r3, r0
 800fe9e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fea0:	1d3b      	adds	r3, r7, #4
 800fea2:	2200      	movs	r2, #0
 800fea4:	5e9b      	ldrsh	r3, [r3, r2]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d003      	beq.n	800feb2 <sen5x_device_reset+0x46>
        return error;
 800feaa:	1d3b      	adds	r3, r7, #4
 800feac:	2200      	movs	r2, #0
 800feae:	5e9b      	ldrsh	r3, [r3, r2]
 800feb0:	e004      	b.n	800febc <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800feb2:	4b05      	ldr	r3, [pc, #20]	@ (800fec8 <sen5x_device_reset+0x5c>)
 800feb4:	0018      	movs	r0, r3
 800feb6:	f7ff fa35 	bl	800f324 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800feba:	2300      	movs	r3, #0
}
 800febc:	0018      	movs	r0, r3
 800febe:	46bd      	mov	sp, r7
 800fec0:	b003      	add	sp, #12
 800fec2:	bd90      	pop	{r4, r7, pc}
 800fec4:	0000d304 	.word	0x0000d304
 800fec8:	00030d40 	.word	0x00030d40

0800fecc <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	b21b      	sxth	r3, r3
 800feda:	021b      	lsls	r3, r3, #8
 800fedc:	b21a      	sxth	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	3301      	adds	r3, #1
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	b21b      	sxth	r3, r3
 800fee6:	4313      	orrs	r3, r2
 800fee8:	b21b      	sxth	r3, r3
 800feea:	b29b      	uxth	r3, r3
}
 800feec:	0018      	movs	r0, r3
 800feee:	46bd      	mov	sp, r7
 800fef0:	b002      	add	sp, #8
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	061a      	lsls	r2, r3, #24
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	3301      	adds	r3, #1
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	041b      	lsls	r3, r3, #16
 800ff0a:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	3302      	adds	r3, #2
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800ff14:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	3203      	adds	r2, #3
 800ff1a:	7812      	ldrb	r2, [r2, #0]
 800ff1c:	4313      	orrs	r3, r2
}
 800ff1e:	0018      	movs	r0, r3
 800ff20:	46bd      	mov	sp, r7
 800ff22:	b002      	add	sp, #8
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b082      	sub	sp, #8
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	0018      	movs	r0, r3
 800ff32:	f7ff ffcb 	bl	800fecc <sensirion_common_bytes_to_uint16_t>
 800ff36:	0003      	movs	r3, r0
 800ff38:	b21b      	sxth	r3, r3
}
 800ff3a:	0018      	movs	r0, r3
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	b002      	add	sp, #8
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b086      	sub	sp, #24
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	60f8      	str	r0, [r7, #12]
 800ff4a:	60b9      	str	r1, [r7, #8]
 800ff4c:	1dbb      	adds	r3, r7, #6
 800ff4e:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800ff50:	2316      	movs	r3, #22
 800ff52:	18fb      	adds	r3, r7, r3
 800ff54:	2200      	movs	r2, #0
 800ff56:	801a      	strh	r2, [r3, #0]
 800ff58:	e00f      	b.n	800ff7a <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800ff5a:	2016      	movs	r0, #22
 800ff5c:	183b      	adds	r3, r7, r0
 800ff5e:	881b      	ldrh	r3, [r3, #0]
 800ff60:	68fa      	ldr	r2, [r7, #12]
 800ff62:	18d2      	adds	r2, r2, r3
 800ff64:	183b      	adds	r3, r7, r0
 800ff66:	881b      	ldrh	r3, [r3, #0]
 800ff68:	68b9      	ldr	r1, [r7, #8]
 800ff6a:	18cb      	adds	r3, r1, r3
 800ff6c:	7812      	ldrb	r2, [r2, #0]
 800ff6e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800ff70:	183b      	adds	r3, r7, r0
 800ff72:	881a      	ldrh	r2, [r3, #0]
 800ff74:	183b      	adds	r3, r7, r0
 800ff76:	3201      	adds	r2, #1
 800ff78:	801a      	strh	r2, [r3, #0]
 800ff7a:	2316      	movs	r3, #22
 800ff7c:	18fa      	adds	r2, r7, r3
 800ff7e:	1dbb      	adds	r3, r7, #6
 800ff80:	8812      	ldrh	r2, [r2, #0]
 800ff82:	881b      	ldrh	r3, [r3, #0]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d3e8      	bcc.n	800ff5a <sensirion_common_copy_bytes+0x18>
    }
}
 800ff88:	46c0      	nop			@ (mov r8, r8)
 800ff8a:	46c0      	nop			@ (mov r8, r8)
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	b006      	add	sp, #24
 800ff90:	bd80      	pop	{r7, pc}
	...

0800ff94 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	68ba      	ldr	r2, [r7, #8]
 800ffa4:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d113      	bne.n	800ffda <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	22fe      	movs	r2, #254	@ 0xfe
 800ffb6:	0592      	lsls	r2, r2, #22
 800ffb8:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	4a1a      	ldr	r2, [pc, #104]	@ (8010028 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800ffbe:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	4a1a      	ldr	r2, [pc, #104]	@ (801002c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800ffc4:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	4a19      	ldr	r2, [pc, #100]	@ (8010030 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800ffca:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	4a19      	ldr	r2, [pc, #100]	@ (8010034 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800ffd0:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	4a18      	ldr	r2, [pc, #96]	@ (8010038 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800ffd6:	61da      	str	r2, [r3, #28]
 800ffd8:	e011      	b.n	800fffe <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	4a17      	ldr	r2, [pc, #92]	@ (801003c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800ffde:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	4a17      	ldr	r2, [pc, #92]	@ (8010040 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800ffe4:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	4a16      	ldr	r2, [pc, #88]	@ (8010044 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800ffea:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	4a16      	ldr	r2, [pc, #88]	@ (8010048 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800fff0:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	4a15      	ldr	r2, [pc, #84]	@ (801004c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800fff6:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	4a15      	ldr	r2, [pc, #84]	@ (8010050 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800fffc:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	4a14      	ldr	r2, [pc, #80]	@ (8010054 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8010002:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	4a14      	ldr	r2, [pc, #80]	@ (8010058 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8010008:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	4a12      	ldr	r2, [pc, #72]	@ (8010058 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 801000e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	4a12      	ldr	r2, [pc, #72]	@ (801005c <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8010014:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	0018      	movs	r0, r3
 801001a:	f000 f831 	bl	8010080 <GasIndexAlgorithm_reset>
}
 801001e:	46c0      	nop			@ (mov r8, r8)
 8010020:	46bd      	mov	sp, r7
 8010022:	b004      	add	sp, #16
 8010024:	bd80      	pop	{r7, pc}
 8010026:	46c0      	nop			@ (mov r8, r8)
 8010028:	00002710 	.word	0x00002710
 801002c:	44340000 	.word	0x44340000
 8010030:	46859800 	.word	0x46859800
 8010034:	46a05000 	.word	0x46a05000
 8010038:	41f00000 	.word	0x41f00000
 801003c:	42c80000 	.word	0x42c80000
 8010040:	00004e20 	.word	0x00004e20
 8010044:	43340000 	.word	0x43340000
 8010048:	4528c000 	.word	0x4528c000
 801004c:	45a32000 	.word	0x45a32000
 8010050:	43aa0000 	.word	0x43aa0000
 8010054:	43660000 	.word	0x43660000
 8010058:	41400000 	.word	0x41400000
 801005c:	42480000 	.word	0x42480000

08010060 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 801006a:	22fe      	movs	r2, #254	@ 0xfe
 801006c:	0592      	lsls	r2, r2, #22
 801006e:	6839      	ldr	r1, [r7, #0]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	0018      	movs	r0, r3
 8010074:	f7ff ff8e 	bl	800ff94 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8010078:	46c0      	nop			@ (mov r8, r8)
 801007a:	46bd      	mov	sp, r7
 801007c:	b002      	add	sp, #8
 801007e:	bd80      	pop	{r7, pc}

08010080 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2200      	movs	r2, #0
 8010092:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	0018      	movs	r0, r3
 801009e:	f000 f805 	bl	80100ac <GasIndexAlgorithm__init_instances>
}
 80100a2:	46c0      	nop			@ (mov r8, r8)
 80100a4:	46bd      	mov	sp, r7
 80100a6:	b002      	add	sp, #8
 80100a8:	bd80      	pop	{r7, pc}
	...

080100ac <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80100ac:	b590      	push	{r4, r7, lr}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	0018      	movs	r0, r3
 80100b8:	f000 f8e8 	bl	801028c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	0018      	movs	r0, r3
 80100c0:	f000 f9a6 	bl	8010410 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80100c4:	1c04      	adds	r4, r0, #0
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	0018      	movs	r0, r3
 80100ca:	f000 f9ab 	bl	8010424 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80100ce:	1c02      	adds	r2, r0, #0
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	1c21      	adds	r1, r4, #0
 80100d4:	0018      	movs	r0, r3
 80100d6:	f000 fc3b 	bl	8010950 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2b01      	cmp	r3, #1
 80100e0:	d107      	bne.n	80100f2 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80100e2:	23fe      	movs	r3, #254	@ 0xfe
 80100e4:	059b      	lsls	r3, r3, #22
 80100e6:	4a0a      	ldr	r2, [pc, #40]	@ (8010110 <GasIndexAlgorithm__init_instances+0x64>)
 80100e8:	490a      	ldr	r1, [pc, #40]	@ (8010114 <GasIndexAlgorithm__init_instances+0x68>)
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 fc86 	bl	80109fc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80100f0:	e005      	b.n	80100fe <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80100f2:	4b09      	ldr	r3, [pc, #36]	@ (8010118 <GasIndexAlgorithm__init_instances+0x6c>)
 80100f4:	4a09      	ldr	r2, [pc, #36]	@ (801011c <GasIndexAlgorithm__init_instances+0x70>)
 80100f6:	490a      	ldr	r1, [pc, #40]	@ (8010120 <GasIndexAlgorithm__init_instances+0x74>)
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 fc7f 	bl	80109fc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	0018      	movs	r0, r3
 8010102:	f000 fd35 	bl	8010b70 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8010106:	46c0      	nop			@ (mov r8, r8)
 8010108:	46bd      	mov	sp, r7
 801010a:	b003      	add	sp, #12
 801010c:	bd90      	pop	{r4, r7, pc}
 801010e:	46c0      	nop			@ (mov r8, r8)
 8010110:	bc257a78 	.word	0xbc257a78
 8010114:	44198000 	.word	0x44198000
 8010118:	42c80000 	.word	0x42c80000
 801011c:	bbd4fdf4 	.word	0xbbd4fdf4
 8010120:	43550000 	.word	0x43550000

08010124 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8010124:	b590      	push	{r4, r7, lr}
 8010126:	b085      	sub	sp, #20
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010134:	4952      	ldr	r1, [pc, #328]	@ (8010280 <GasIndexAlgorithm_process+0x15c>)
 8010136:	1c18      	adds	r0, r3, #0
 8010138:	f7f0 fa04 	bl	8000544 <__aeabi_fcmple>
 801013c:	1e03      	subs	r3, r0, #0
 801013e:	d00c      	beq.n	801015a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	1c19      	adds	r1, r3, #0
 801014a:	1c10      	adds	r0, r2, #0
 801014c:	f7f0 fbb8 	bl	80008c0 <__aeabi_fadd>
 8010150:	1c03      	adds	r3, r0, #0
 8010152:	1c1a      	adds	r2, r3, #0
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	631a      	str	r2, [r3, #48]	@ 0x30
 8010158:	e080      	b.n	801025c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	2b00      	cmp	r3, #0
 801015e:	dd25      	ble.n	80101ac <GasIndexAlgorithm_process+0x88>
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	4a48      	ldr	r2, [pc, #288]	@ (8010284 <GasIndexAlgorithm_process+0x160>)
 8010164:	4293      	cmp	r3, r2
 8010166:	dc21      	bgt.n	80101ac <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	68ba      	ldr	r2, [r7, #8]
 801016e:	429a      	cmp	r2, r3
 8010170:	dc04      	bgt.n	801017c <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	3301      	adds	r3, #1
 8010178:	60bb      	str	r3, [r7, #8]
 801017a:	e00d      	b.n	8010198 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	4a41      	ldr	r2, [pc, #260]	@ (8010288 <GasIndexAlgorithm_process+0x164>)
 8010182:	4694      	mov	ip, r2
 8010184:	4463      	add	r3, ip
 8010186:	68ba      	ldr	r2, [r7, #8]
 8010188:	429a      	cmp	r2, r3
 801018a:	dd05      	ble.n	8010198 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	4a3d      	ldr	r2, [pc, #244]	@ (8010288 <GasIndexAlgorithm_process+0x164>)
 8010192:	4694      	mov	ip, r2
 8010194:	4463      	add	r3, ip
 8010196:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	68ba      	ldr	r2, [r7, #8]
 801019e:	1ad3      	subs	r3, r2, r3
 80101a0:	0018      	movs	r0, r3
 80101a2:	f7f1 fb41 	bl	8001828 <__aeabi_i2f>
 80101a6:	1c02      	adds	r2, r0, #0
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d005      	beq.n	80101c0 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	0018      	movs	r0, r3
 80101b8:	f000 f945 	bl	8010446 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80101bc:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80101be:	d014      	beq.n	80101ea <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	1c11      	adds	r1, r2, #0
 80101c8:	0018      	movs	r0, r3
 80101ca:	f000 fbd1 	bl	8010970 <GasIndexAlgorithm__mox_model__process>
 80101ce:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	1c11      	adds	r1, r2, #0
 80101dc:	0018      	movs	r0, r3
 80101de:	f000 fc25 	bl	8010a2c <GasIndexAlgorithm__sigmoid_scaled__process>
 80101e2:	1c02      	adds	r2, r0, #0
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80101e8:	e003      	b.n	80101f2 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	689a      	ldr	r2, [r3, #8]
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	1c11      	adds	r1, r2, #0
 80101fa:	0018      	movs	r0, r3
 80101fc:	f000 fcec 	bl	8010bd8 <GasIndexAlgorithm__adaptive_lowpass__process>
 8010200:	1c02      	adds	r2, r0, #0
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801020a:	21fc      	movs	r1, #252	@ 0xfc
 801020c:	0589      	lsls	r1, r1, #22
 801020e:	1c18      	adds	r0, r3, #0
 8010210:	f7f0 f98e 	bl	8000530 <__aeabi_fcmplt>
 8010214:	1e03      	subs	r3, r0, #0
 8010216:	d003      	beq.n	8010220 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	22fc      	movs	r2, #252	@ 0xfc
 801021c:	0592      	lsls	r2, r2, #22
 801021e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010224:	2100      	movs	r1, #0
 8010226:	1c18      	adds	r0, r3, #0
 8010228:	f7f0 f996 	bl	8000558 <__aeabi_fcmpgt>
 801022c:	1e03      	subs	r3, r0, #0
 801022e:	d015      	beq.n	801025c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	1c11      	adds	r1, r2, #0
 8010238:	0018      	movs	r0, r3
 801023a:	f000 fa4f 	bl	80106dc <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	0018      	movs	r0, r3
 8010242:	f000 f8e5 	bl	8010410 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8010246:	1c04      	adds	r4, r0, #0
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	0018      	movs	r0, r3
 801024c:	f000 f8ea 	bl	8010424 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8010250:	1c02      	adds	r2, r0, #0
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	1c21      	adds	r1, r4, #0
 8010256:	0018      	movs	r0, r3
 8010258:	f000 fb7a 	bl	8010950 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010260:	21fc      	movs	r1, #252	@ 0xfc
 8010262:	0589      	lsls	r1, r1, #22
 8010264:	1c18      	adds	r0, r3, #0
 8010266:	f7f0 fb2b 	bl	80008c0 <__aeabi_fadd>
 801026a:	1c03      	adds	r3, r0, #0
 801026c:	1c18      	adds	r0, r3, #0
 801026e:	f7f1 fabb 	bl	80017e8 <__aeabi_f2iz>
 8010272:	0002      	movs	r2, r0
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	601a      	str	r2, [r3, #0]
    return;
 8010278:	46c0      	nop			@ (mov r8, r8)
}
 801027a:	46bd      	mov	sp, r7
 801027c:	b005      	add	sp, #20
 801027e:	bd90      	pop	{r4, r7, pc}
 8010280:	42340000 	.word	0x42340000
 8010284:	0000fde7 	.word	0x0000fde7
 8010288:	00007fff 	.word	0x00007fff

0801028c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 801028c:	b5b0      	push	{r4, r5, r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	223c      	movs	r2, #60	@ 0x3c
 8010298:	2100      	movs	r1, #0
 801029a:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2200      	movs	r2, #0
 80102a0:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	4952      	ldr	r1, [pc, #328]	@ (8010400 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80102b6:	1c18      	adds	r0, r3, #0
 80102b8:	f7f0 fcf4 	bl	8000ca4 <__aeabi_fdiv>
 80102bc:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80102be:	2188      	movs	r1, #136	@ 0x88
 80102c0:	05c9      	lsls	r1, r1, #23
 80102c2:	1c18      	adds	r0, r3, #0
 80102c4:	f7f0 febc 	bl	8001040 <__aeabi_fmul>
 80102c8:	1c03      	adds	r3, r0, #0
 80102ca:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	494a      	ldr	r1, [pc, #296]	@ (8010400 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80102d6:	1c18      	adds	r0, r3, #0
 80102d8:	f7f0 fce4 	bl	8000ca4 <__aeabi_fdiv>
 80102dc:	1c03      	adds	r3, r0, #0
 80102de:	1c19      	adds	r1, r3, #0
 80102e0:	1c20      	adds	r0, r4, #0
 80102e2:	f7f0 faed 	bl	80008c0 <__aeabi_fadd>
 80102e6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80102e8:	1c19      	adds	r1, r3, #0
 80102ea:	1c28      	adds	r0, r5, #0
 80102ec:	f7f0 fcda 	bl	8000ca4 <__aeabi_fdiv>
 80102f0:	1c03      	adds	r3, r0, #0
 80102f2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	4940      	ldr	r1, [pc, #256]	@ (8010400 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80102fe:	1c18      	adds	r0, r3, #0
 8010300:	f7f0 fcd0 	bl	8000ca4 <__aeabi_fdiv>
 8010304:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8010306:	2185      	movs	r1, #133	@ 0x85
 8010308:	05c9      	lsls	r1, r1, #23
 801030a:	1c18      	adds	r0, r3, #0
 801030c:	f7f0 fe98 	bl	8001040 <__aeabi_fmul>
 8010310:	1c03      	adds	r3, r0, #0
 8010312:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	4938      	ldr	r1, [pc, #224]	@ (8010400 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 801031e:	1c18      	adds	r0, r3, #0
 8010320:	f7f0 fcc0 	bl	8000ca4 <__aeabi_fdiv>
 8010324:	1c03      	adds	r3, r0, #0
 8010326:	1c19      	adds	r1, r3, #0
 8010328:	1c20      	adds	r0, r4, #0
 801032a:	f7f0 fac9 	bl	80008c0 <__aeabi_fadd>
 801032e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8010330:	1c19      	adds	r1, r3, #0
 8010332:	1c28      	adds	r0, r5, #0
 8010334:	f7f0 fcb6 	bl	8000ca4 <__aeabi_fdiv>
 8010338:	1c03      	adds	r3, r0, #0
 801033a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2b01      	cmp	r3, #1
 8010346:	d118      	bne.n	801037a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 801034c:	2188      	movs	r1, #136	@ 0x88
 801034e:	05c9      	lsls	r1, r1, #23
 8010350:	1c18      	adds	r0, r3, #0
 8010352:	f7f0 fe75 	bl	8001040 <__aeabi_fmul>
 8010356:	1c03      	adds	r3, r0, #0
 8010358:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 801035e:	4929      	ldr	r1, [pc, #164]	@ (8010404 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8010360:	1c18      	adds	r0, r3, #0
 8010362:	f7f0 faad 	bl	80008c0 <__aeabi_fadd>
 8010366:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8010368:	1c19      	adds	r1, r3, #0
 801036a:	1c20      	adds	r0, r4, #0
 801036c:	f7f0 fc9a 	bl	8000ca4 <__aeabi_fdiv>
 8010370:	1c03      	adds	r3, r0, #0
 8010372:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	655a      	str	r2, [r3, #84]	@ 0x54
 8010378:	e017      	b.n	80103aa <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 801037e:	2188      	movs	r1, #136	@ 0x88
 8010380:	05c9      	lsls	r1, r1, #23
 8010382:	1c18      	adds	r0, r3, #0
 8010384:	f7f0 fe5c 	bl	8001040 <__aeabi_fmul>
 8010388:	1c03      	adds	r3, r0, #0
 801038a:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8010390:	491d      	ldr	r1, [pc, #116]	@ (8010408 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8010392:	1c18      	adds	r0, r3, #0
 8010394:	f7f0 fa94 	bl	80008c0 <__aeabi_fadd>
 8010398:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 801039a:	1c19      	adds	r1, r3, #0
 801039c:	1c20      	adds	r0, r4, #0
 801039e:	f7f0 fc81 	bl	8000ca4 <__aeabi_fdiv>
 80103a2:	1c03      	adds	r3, r0, #0
 80103a4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80103ae:	2185      	movs	r1, #133	@ 0x85
 80103b0:	05c9      	lsls	r1, r1, #23
 80103b2:	1c18      	adds	r0, r3, #0
 80103b4:	f7f0 fe44 	bl	8001040 <__aeabi_fmul>
 80103b8:	1c03      	adds	r3, r0, #0
 80103ba:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	4912      	ldr	r1, [pc, #72]	@ (801040c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80103c2:	1c18      	adds	r0, r3, #0
 80103c4:	f7f0 fa7c 	bl	80008c0 <__aeabi_fadd>
 80103c8:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80103ca:	1c19      	adds	r1, r3, #0
 80103cc:	1c20      	adds	r0, r4, #0
 80103ce:	f7f0 fc69 	bl	8000ca4 <__aeabi_fdiv>
 80103d2:	1c03      	adds	r3, r0, #0
 80103d4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2200      	movs	r2, #0
 80103de:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2200      	movs	r2, #0
 80103e4:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2200      	movs	r2, #0
 80103f6:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80103f8:	46c0      	nop			@ (mov r8, r8)
 80103fa:	46bd      	mov	sp, r7
 80103fc:	b002      	add	sp, #8
 80103fe:	bdb0      	pop	{r4, r5, r7, pc}
 8010400:	45610000 	.word	0x45610000
 8010404:	44960000 	.word	0x44960000
 8010408:	41a00000 	.word	0x41a00000
 801040c:	451c4000 	.word	0x451c4000

08010410 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 801041c:	1c18      	adds	r0, r3, #0
 801041e:	46bd      	mov	sp, r7
 8010420:	b002      	add	sp, #8
 8010422:	bd80      	pop	{r7, pc}

08010424 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8010434:	1c19      	adds	r1, r3, #0
 8010436:	1c10      	adds	r0, r2, #0
 8010438:	f7f0 fa42 	bl	80008c0 <__aeabi_fadd>
 801043c:	1c03      	adds	r3, r0, #0
}
 801043e:	1c18      	adds	r0, r3, #0
 8010440:	46bd      	mov	sp, r7
 8010442:	b002      	add	sp, #8
 8010444:	bd80      	pop	{r7, pc}

08010446 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8010446:	b580      	push	{r7, lr}
 8010448:	b082      	sub	sp, #8
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	223c      	movs	r2, #60	@ 0x3c
 8010452:	5c9b      	ldrb	r3, [r3, r2]
}
 8010454:	0018      	movs	r0, r3
 8010456:	46bd      	mov	sp, r7
 8010458:	b002      	add	sp, #8
 801045a:	bd80      	pop	{r7, pc}

0801045c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 801045c:	b5b0      	push	{r4, r5, r7, lr}
 801045e:	b08c      	sub	sp, #48	@ 0x30
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8010468:	1c19      	adds	r1, r3, #0
 801046a:	4895      	ldr	r0, [pc, #596]	@ (80106c0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 801046c:	f7f0 ff42 	bl	80012f4 <__aeabi_fsub>
 8010470:	1c03      	adds	r3, r0, #0
 8010472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010478:	1c19      	adds	r1, r3, #0
 801047a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801047c:	f7f0 f86c 	bl	8000558 <__aeabi_fcmpgt>
 8010480:	1e03      	subs	r3, r0, #0
 8010482:	d00b      	beq.n	801049c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 801048c:	1c19      	adds	r1, r3, #0
 801048e:	1c10      	adds	r0, r2, #0
 8010490:	f7f0 fa16 	bl	80008c0 <__aeabi_fadd>
 8010494:	1c03      	adds	r3, r0, #0
 8010496:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104a0:	1c19      	adds	r1, r3, #0
 80104a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80104a4:	f7f0 f858 	bl	8000558 <__aeabi_fcmpgt>
 80104a8:	1e03      	subs	r3, r0, #0
 80104aa:	d00b      	beq.n	80104c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80104b4:	1c19      	adds	r1, r3, #0
 80104b6:	1c10      	adds	r0, r2, #0
 80104b8:	f7f0 fa02 	bl	80008c0 <__aeabi_fadd>
 80104bc:	1c03      	adds	r3, r0, #0
 80104be:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6959      	ldr	r1, [r3, #20]
 80104c8:	4a7e      	ldr	r2, [pc, #504]	@ (80106c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	0018      	movs	r0, r3
 80104ce:	f000 f9f1 	bl	80108b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	1c11      	adds	r1, r2, #0
 80104da:	0018      	movs	r0, r3
 80104dc:	f000 f9fa 	bl	80108d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80104e0:	1c03      	adds	r3, r0, #0
 80104e2:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80104f0:	1c19      	adds	r1, r3, #0
 80104f2:	1c10      	adds	r0, r2, #0
 80104f4:	f7f0 fefe 	bl	80012f4 <__aeabi_fsub>
 80104f8:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80104fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80104fc:	1c18      	adds	r0, r3, #0
 80104fe:	f7f0 fd9f 	bl	8001040 <__aeabi_fmul>
 8010502:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010504:	1c19      	adds	r1, r3, #0
 8010506:	1c20      	adds	r0, r4, #0
 8010508:	f7f0 f9da 	bl	80008c0 <__aeabi_fadd>
 801050c:	1c03      	adds	r3, r0, #0
 801050e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010518:	1c19      	adds	r1, r3, #0
 801051a:	486b      	ldr	r0, [pc, #428]	@ (80106c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 801051c:	f7f0 feea 	bl	80012f4 <__aeabi_fsub>
 8010520:	1c03      	adds	r3, r0, #0
 8010522:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	1c11      	adds	r1, r2, #0
 801052c:	0018      	movs	r0, r3
 801052e:	f000 f9d1 	bl	80108d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010532:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010534:	1c19      	adds	r1, r3, #0
 8010536:	1c28      	adds	r0, r5, #0
 8010538:	f7f0 fd82 	bl	8001040 <__aeabi_fmul>
 801053c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 801053e:	1c19      	adds	r1, r3, #0
 8010540:	1c20      	adds	r0, r4, #0
 8010542:	f7f0 f9bd 	bl	80008c0 <__aeabi_fadd>
 8010546:	1c03      	adds	r3, r0, #0
 8010548:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801054a:	4a60      	ldr	r2, [pc, #384]	@ (80106cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 801054c:	6a39      	ldr	r1, [r7, #32]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	0018      	movs	r0, r3
 8010552:	f000 f9af 	bl	80108b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	1c11      	adds	r1, r2, #0
 801055e:	0018      	movs	r0, r3
 8010560:	f000 f9b8 	bl	80108d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010564:	1c03      	adds	r3, r0, #0
 8010566:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8010568:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801056a:	69f8      	ldr	r0, [r7, #28]
 801056c:	f7f0 fd68 	bl	8001040 <__aeabi_fmul>
 8010570:	1c03      	adds	r3, r0, #0
 8010572:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6999      	ldr	r1, [r3, #24]
 801057c:	4a51      	ldr	r2, [pc, #324]	@ (80106c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	0018      	movs	r0, r3
 8010582:	f000 f997 	bl	80108b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	1c11      	adds	r1, r2, #0
 801058e:	0018      	movs	r0, r3
 8010590:	f000 f9a0 	bl	80108d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010594:	1c03      	adds	r3, r0, #0
 8010596:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80105a4:	1c19      	adds	r1, r3, #0
 80105a6:	1c10      	adds	r0, r2, #0
 80105a8:	f7f0 fea4 	bl	80012f4 <__aeabi_fsub>
 80105ac:	1c03      	adds	r3, r0, #0
 80105ae:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80105b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80105b2:	69b8      	ldr	r0, [r7, #24]
 80105b4:	f7f0 fe9e 	bl	80012f4 <__aeabi_fsub>
 80105b8:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80105ba:	1c19      	adds	r1, r3, #0
 80105bc:	1c28      	adds	r0, r5, #0
 80105be:	f7f0 fd3f 	bl	8001040 <__aeabi_fmul>
 80105c2:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80105c4:	1c19      	adds	r1, r3, #0
 80105c6:	1c20      	adds	r0, r4, #0
 80105c8:	f7f0 f97a 	bl	80008c0 <__aeabi_fadd>
 80105cc:	1c03      	adds	r3, r0, #0
 80105ce:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80105d8:	1c19      	adds	r1, r3, #0
 80105da:	483b      	ldr	r0, [pc, #236]	@ (80106c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80105dc:	f7f0 fe8a 	bl	80012f4 <__aeabi_fsub>
 80105e0:	1c03      	adds	r3, r0, #0
 80105e2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	1c11      	adds	r1, r2, #0
 80105ec:	0018      	movs	r0, r3
 80105ee:	f000 f971 	bl	80108d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80105f2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80105f4:	1c19      	adds	r1, r3, #0
 80105f6:	1c28      	adds	r0, r5, #0
 80105f8:	f7f0 fd22 	bl	8001040 <__aeabi_fmul>
 80105fc:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80105fe:	1c19      	adds	r1, r3, #0
 8010600:	1c20      	adds	r0, r4, #0
 8010602:	f7f0 f95d 	bl	80008c0 <__aeabi_fadd>
 8010606:	1c03      	adds	r3, r0, #0
 8010608:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801060a:	4a30      	ldr	r2, [pc, #192]	@ (80106cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 801060c:	6939      	ldr	r1, [r7, #16]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	0018      	movs	r0, r3
 8010612:	f000 f94f 	bl	80108b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	1c11      	adds	r1, r2, #0
 801061e:	0018      	movs	r0, r3
 8010620:	f000 f958 	bl	80108d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010624:	1c03      	adds	r3, r0, #0
 8010626:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8010628:	6979      	ldr	r1, [r7, #20]
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f7f0 fd08 	bl	8001040 <__aeabi_fmul>
 8010630:	1c03      	adds	r3, r0, #0
 8010632:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	4923      	ldr	r1, [pc, #140]	@ (80106d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8010642:	1c18      	adds	r0, r3, #0
 8010644:	f7f0 fb2e 	bl	8000ca4 <__aeabi_fdiv>
 8010648:	1c03      	adds	r3, r0, #0
 801064a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 801064c:	69f9      	ldr	r1, [r7, #28]
 801064e:	20fe      	movs	r0, #254	@ 0xfe
 8010650:	0580      	lsls	r0, r0, #22
 8010652:	f7f0 fe4f 	bl	80012f4 <__aeabi_fsub>
 8010656:	1c03      	adds	r3, r0, #0
 8010658:	491e      	ldr	r1, [pc, #120]	@ (80106d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 801065a:	1c18      	adds	r0, r3, #0
 801065c:	f7f0 fcf0 	bl	8001040 <__aeabi_fmul>
 8010660:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8010662:	491d      	ldr	r1, [pc, #116]	@ (80106d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8010664:	1c18      	adds	r0, r3, #0
 8010666:	f7f0 fe45 	bl	80012f4 <__aeabi_fsub>
 801066a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 801066c:	1c19      	adds	r1, r3, #0
 801066e:	1c28      	adds	r0, r5, #0
 8010670:	f7f0 fce6 	bl	8001040 <__aeabi_fmul>
 8010674:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8010676:	1c19      	adds	r1, r3, #0
 8010678:	1c20      	adds	r0, r4, #0
 801067a:	f7f0 f921 	bl	80008c0 <__aeabi_fadd>
 801067e:	1c03      	adds	r3, r0, #0
 8010680:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801068a:	2100      	movs	r1, #0
 801068c:	1c18      	adds	r0, r3, #0
 801068e:	f7ef ff4f 	bl	8000530 <__aeabi_fcmplt>
 8010692:	1e03      	subs	r3, r0, #0
 8010694:	d002      	beq.n	801069c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80106a4:	1c19      	adds	r1, r3, #0
 80106a6:	1c10      	adds	r0, r2, #0
 80106a8:	f7ef ff56 	bl	8000558 <__aeabi_fcmpgt>
 80106ac:	1e03      	subs	r3, r0, #0
 80106ae:	d100      	bne.n	80106b2 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80106b0:	e002      	b.n	80106b8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2200      	movs	r2, #0
 80106b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80106b8:	46c0      	nop			@ (mov r8, r8)
 80106ba:	46bd      	mov	sp, r7
 80106bc:	b00c      	add	sp, #48	@ 0x30
 80106be:	bdb0      	pop	{r4, r5, r7, pc}
 80106c0:	46fffe00 	.word	0x46fffe00
 80106c4:	3c23d70a 	.word	0x3c23d70a
 80106c8:	43ff0000 	.word	0x43ff0000
 80106cc:	3db851ec 	.word	0x3db851ec
 80106d0:	42700000 	.word	0x42700000
 80106d4:	3fa66666 	.word	0x3fa66666
 80106d8:	3e99999a 	.word	0x3e99999a

080106dc <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80106dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106de:	b087      	sub	sp, #28
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	223c      	movs	r2, #60	@ 0x3c
 80106ea:	5c9b      	ldrb	r3, [r3, r2]
 80106ec:	2201      	movs	r2, #1
 80106ee:	4053      	eors	r3, r2
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00a      	beq.n	801070c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	223c      	movs	r2, #60	@ 0x3c
 80106fa:	2101      	movs	r1, #1
 80106fc:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	683a      	ldr	r2, [r7, #0]
 8010702:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2200      	movs	r2, #0
 8010708:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 801070a:	e0c8      	b.n	801089e <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010710:	4965      	ldr	r1, [pc, #404]	@ (80108a8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8010712:	1c18      	adds	r0, r3, #0
 8010714:	f7ef ff2a 	bl	800056c <__aeabi_fcmpge>
 8010718:	1e03      	subs	r3, r0, #0
 801071a:	d107      	bne.n	801072c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010720:	4962      	ldr	r1, [pc, #392]	@ (80108ac <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8010722:	1c18      	adds	r0, r3, #0
 8010724:	f7ef ff0e 	bl	8000544 <__aeabi_fcmple>
 8010728:	1e03      	subs	r3, r0, #0
 801072a:	d00e      	beq.n	801074a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010734:	1c19      	adds	r1, r3, #0
 8010736:	1c10      	adds	r0, r2, #0
 8010738:	f7f0 f8c2 	bl	80008c0 <__aeabi_fadd>
 801073c:	1c03      	adds	r3, r0, #0
 801073e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801074e:	1c19      	adds	r1, r3, #0
 8010750:	6838      	ldr	r0, [r7, #0]
 8010752:	f7f0 fdcf 	bl	80012f4 <__aeabi_fsub>
 8010756:	1c03      	adds	r3, r0, #0
 8010758:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	0018      	movs	r0, r3
 801075e:	f7ff fe7d 	bl	801045c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010766:	1c19      	adds	r1, r3, #0
 8010768:	6838      	ldr	r0, [r7, #0]
 801076a:	f7f0 fdc3 	bl	80012f4 <__aeabi_fsub>
 801076e:	1c03      	adds	r3, r0, #0
 8010770:	2185      	movs	r1, #133	@ 0x85
 8010772:	05c9      	lsls	r1, r1, #23
 8010774:	1c18      	adds	r0, r3, #0
 8010776:	f7f0 fa95 	bl	8000ca4 <__aeabi_fdiv>
 801077a:	1c03      	adds	r3, r0, #0
 801077c:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 801077e:	2100      	movs	r1, #0
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	f7ef fed5 	bl	8000530 <__aeabi_fcmplt>
 8010786:	1e03      	subs	r3, r0, #0
 8010788:	d008      	beq.n	801079c <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801078e:	68f9      	ldr	r1, [r7, #12]
 8010790:	1c18      	adds	r0, r3, #0
 8010792:	f7f0 fdaf 	bl	80012f4 <__aeabi_fsub>
 8010796:	1c03      	adds	r3, r0, #0
 8010798:	617b      	str	r3, [r7, #20]
 801079a:	e007      	b.n	80107ac <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80107a0:	1c19      	adds	r1, r3, #0
 80107a2:	68f8      	ldr	r0, [r7, #12]
 80107a4:	f7f0 f88c 	bl	80008c0 <__aeabi_fadd>
 80107a8:	1c03      	adds	r3, r0, #0
 80107aa:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80107ac:	23fe      	movs	r3, #254	@ 0xfe
 80107ae:	059b      	lsls	r3, r3, #22
 80107b0:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80107b2:	493f      	ldr	r1, [pc, #252]	@ (80108b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80107b4:	6978      	ldr	r0, [r7, #20]
 80107b6:	f7ef fecf 	bl	8000558 <__aeabi_fcmpgt>
 80107ba:	1e03      	subs	r3, r0, #0
 80107bc:	d010      	beq.n	80107e0 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80107be:	493c      	ldr	r1, [pc, #240]	@ (80108b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80107c0:	6978      	ldr	r0, [r7, #20]
 80107c2:	f7f0 fa6f 	bl	8000ca4 <__aeabi_fdiv>
 80107c6:	1c03      	adds	r3, r0, #0
 80107c8:	1c1c      	adds	r4, r3, #0
 80107ca:	4939      	ldr	r1, [pc, #228]	@ (80108b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80107cc:	6978      	ldr	r0, [r7, #20]
 80107ce:	f7f0 fa69 	bl	8000ca4 <__aeabi_fdiv>
 80107d2:	1c03      	adds	r3, r0, #0
 80107d4:	1c19      	adds	r1, r3, #0
 80107d6:	1c20      	adds	r0, r4, #0
 80107d8:	f7f0 fc32 	bl	8001040 <__aeabi_fmul>
 80107dc:	1c03      	adds	r3, r0, #0
 80107de:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 80107e4:	1c19      	adds	r1, r3, #0
 80107e6:	2085      	movs	r0, #133	@ 0x85
 80107e8:	05c0      	lsls	r0, r0, #23
 80107ea:	f7f0 fd83 	bl	80012f4 <__aeabi_fsub>
 80107ee:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 80107f0:	6939      	ldr	r1, [r7, #16]
 80107f2:	1c18      	adds	r0, r3, #0
 80107f4:	f7f0 fc24 	bl	8001040 <__aeabi_fmul>
 80107f8:	1c03      	adds	r3, r0, #0
 80107fa:	1c18      	adds	r0, r3, #0
 80107fc:	f018 fe64 	bl	80294c8 <sqrtf>
 8010800:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 801080a:	2185      	movs	r1, #133	@ 0x85
 801080c:	05c9      	lsls	r1, r1, #23
 801080e:	6938      	ldr	r0, [r7, #16]
 8010810:	f7f0 fc16 	bl	8001040 <__aeabi_fmul>
 8010814:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8010816:	1c19      	adds	r1, r3, #0
 8010818:	1c28      	adds	r0, r5, #0
 801081a:	f7f0 fa43 	bl	8000ca4 <__aeabi_fdiv>
 801081e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010820:	1c19      	adds	r1, r3, #0
 8010822:	1c20      	adds	r0, r4, #0
 8010824:	f7f0 fc0c 	bl	8001040 <__aeabi_fmul>
 8010828:	1c03      	adds	r3, r0, #0
 801082a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010830:	68f9      	ldr	r1, [r7, #12]
 8010832:	1c18      	adds	r0, r3, #0
 8010834:	f7f0 fc04 	bl	8001040 <__aeabi_fmul>
 8010838:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 801083a:	6939      	ldr	r1, [r7, #16]
 801083c:	1c18      	adds	r0, r3, #0
 801083e:	f7f0 fa31 	bl	8000ca4 <__aeabi_fdiv>
 8010842:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8010844:	68f9      	ldr	r1, [r7, #12]
 8010846:	1c18      	adds	r0, r3, #0
 8010848:	f7f0 fbfa 	bl	8001040 <__aeabi_fmul>
 801084c:	1c03      	adds	r3, r0, #0
             sqrtf(
 801084e:	1c19      	adds	r1, r3, #0
 8010850:	1c20      	adds	r0, r4, #0
 8010852:	f7f0 f835 	bl	80008c0 <__aeabi_fadd>
 8010856:	1c03      	adds	r3, r0, #0
 8010858:	1c18      	adds	r0, r3, #0
 801085a:	f018 fe35 	bl	80294c8 <sqrtf>
 801085e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010860:	1c19      	adds	r1, r3, #0
 8010862:	1c30      	adds	r0, r6, #0
 8010864:	f7f0 fbec 	bl	8001040 <__aeabi_fmul>
 8010868:	1c03      	adds	r3, r0, #0
 801086a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010878:	68f9      	ldr	r1, [r7, #12]
 801087a:	1c18      	adds	r0, r3, #0
 801087c:	f7f0 fbe0 	bl	8001040 <__aeabi_fmul>
 8010880:	1c03      	adds	r3, r0, #0
 8010882:	2182      	movs	r1, #130	@ 0x82
 8010884:	05c9      	lsls	r1, r1, #23
 8010886:	1c18      	adds	r0, r3, #0
 8010888:	f7f0 fa0c 	bl	8000ca4 <__aeabi_fdiv>
 801088c:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 801088e:	1c19      	adds	r1, r3, #0
 8010890:	1c20      	adds	r0, r4, #0
 8010892:	f7f0 f815 	bl	80008c0 <__aeabi_fadd>
 8010896:	1c03      	adds	r3, r0, #0
 8010898:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801089e:	46c0      	nop			@ (mov r8, r8)
 80108a0:	46bd      	mov	sp, r7
 80108a2:	b007      	add	sp, #28
 80108a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108a6:	46c0      	nop			@ (mov r8, r8)
 80108a8:	42c80000 	.word	0x42c80000
 80108ac:	c2c80000 	.word	0xc2c80000
 80108b0:	44b40000 	.word	0x44b40000

080108b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	60f8      	str	r0, [r7, #12]
 80108bc:	60b9      	str	r1, [r7, #8]
 80108be:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	68ba      	ldr	r2, [r7, #8]
 80108ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80108cc:	46c0      	nop			@ (mov r8, r8)
 80108ce:	46bd      	mov	sp, r7
 80108d0:	b004      	add	sp, #16
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80108d4:	b590      	push	{r4, r7, lr}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80108e6:	1c19      	adds	r1, r3, #0
 80108e8:	6838      	ldr	r0, [r7, #0]
 80108ea:	f7f0 fd03 	bl	80012f4 <__aeabi_fsub>
 80108ee:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80108f0:	1c19      	adds	r1, r3, #0
 80108f2:	1c20      	adds	r0, r4, #0
 80108f4:	f7f0 fba4 	bl	8001040 <__aeabi_fmul>
 80108f8:	1c03      	adds	r3, r0, #0
 80108fa:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 80108fc:	4912      	ldr	r1, [pc, #72]	@ (8010948 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	f7ef fe16 	bl	8000530 <__aeabi_fcmplt>
 8010904:	1e03      	subs	r3, r0, #0
 8010906:	d002      	beq.n	801090e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8010908:	23fe      	movs	r3, #254	@ 0xfe
 801090a:	059b      	lsls	r3, r3, #22
 801090c:	e018      	b.n	8010940 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 801090e:	490f      	ldr	r1, [pc, #60]	@ (801094c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f7ef fe21 	bl	8000558 <__aeabi_fcmpgt>
 8010916:	1e03      	subs	r3, r0, #0
 8010918:	d001      	beq.n	801091e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 801091a:	2300      	movs	r3, #0
 801091c:	e010      	b.n	8010940 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	1c18      	adds	r0, r3, #0
 8010922:	f018 fda9 	bl	8029478 <expf>
 8010926:	1c03      	adds	r3, r0, #0
 8010928:	21fe      	movs	r1, #254	@ 0xfe
 801092a:	0589      	lsls	r1, r1, #22
 801092c:	1c18      	adds	r0, r3, #0
 801092e:	f7ef ffc7 	bl	80008c0 <__aeabi_fadd>
 8010932:	1c03      	adds	r3, r0, #0
 8010934:	1c19      	adds	r1, r3, #0
 8010936:	20fe      	movs	r0, #254	@ 0xfe
 8010938:	0580      	lsls	r0, r0, #22
 801093a:	f7f0 f9b3 	bl	8000ca4 <__aeabi_fdiv>
 801093e:	1c03      	adds	r3, r0, #0
    }
}
 8010940:	1c18      	adds	r0, r3, #0
 8010942:	46bd      	mov	sp, r7
 8010944:	b005      	add	sp, #20
 8010946:	bd90      	pop	{r4, r7, pc}
 8010948:	c2480000 	.word	0xc2480000
 801094c:	42480000 	.word	0x42480000

08010950 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	68ba      	ldr	r2, [r7, #8]
 8010960:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010968:	46c0      	nop			@ (mov r8, r8)
 801096a:	46bd      	mov	sp, r7
 801096c:	b004      	add	sp, #16
 801096e:	bd80      	pop	{r7, pc}

08010970 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8010970:	b590      	push	{r4, r7, lr}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b01      	cmp	r3, #1
 8010980:	d114      	bne.n	80109ac <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010986:	1c19      	adds	r1, r3, #0
 8010988:	6838      	ldr	r0, [r7, #0]
 801098a:	f7f0 fcb3 	bl	80012f4 <__aeabi_fsub>
 801098e:	1c03      	adds	r3, r0, #0
 8010990:	4918      	ldr	r1, [pc, #96]	@ (80109f4 <GasIndexAlgorithm__mox_model__process+0x84>)
 8010992:	1c18      	adds	r0, r3, #0
 8010994:	f7f0 f986 	bl	8000ca4 <__aeabi_fdiv>
 8010998:	1c03      	adds	r3, r0, #0
 801099a:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80109a0:	1c19      	adds	r1, r3, #0
 80109a2:	1c10      	adds	r0, r2, #0
 80109a4:	f7f0 fb4c 	bl	8001040 <__aeabi_fmul>
 80109a8:	1c03      	adds	r3, r0, #0
 80109aa:	e01f      	b.n	80109ec <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109b0:	1c19      	adds	r1, r3, #0
 80109b2:	6838      	ldr	r0, [r7, #0]
 80109b4:	f7f0 fc9e 	bl	80012f4 <__aeabi_fsub>
 80109b8:	1c03      	adds	r3, r0, #0
 80109ba:	1c1a      	adds	r2, r3, #0
 80109bc:	2380      	movs	r3, #128	@ 0x80
 80109be:	061b      	lsls	r3, r3, #24
 80109c0:	4053      	eors	r3, r2
 80109c2:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109c8:	490b      	ldr	r1, [pc, #44]	@ (80109f8 <GasIndexAlgorithm__mox_model__process+0x88>)
 80109ca:	1c18      	adds	r0, r3, #0
 80109cc:	f7ef ff78 	bl	80008c0 <__aeabi_fadd>
 80109d0:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80109d2:	1c19      	adds	r1, r3, #0
 80109d4:	1c20      	adds	r0, r4, #0
 80109d6:	f7f0 f965 	bl	8000ca4 <__aeabi_fdiv>
 80109da:	1c03      	adds	r3, r0, #0
 80109dc:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 80109e2:	1c19      	adds	r1, r3, #0
 80109e4:	1c10      	adds	r0, r2, #0
 80109e6:	f7f0 fb2b 	bl	8001040 <__aeabi_fmul>
 80109ea:	1c03      	adds	r3, r0, #0
    }
}
 80109ec:	1c18      	adds	r0, r3, #0
 80109ee:	46bd      	mov	sp, r7
 80109f0:	b003      	add	sp, #12
 80109f2:	bd90      	pop	{r4, r7, pc}
 80109f4:	44fa0000 	.word	0x44fa0000
 80109f8:	435c0000 	.word	0x435c0000

080109fc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
 8010a08:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2180      	movs	r1, #128	@ 0x80
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2184      	movs	r1, #132	@ 0x84
 8010a16:	68ba      	ldr	r2, [r7, #8]
 8010a18:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2188      	movs	r1, #136	@ 0x88
 8010a1e:	683a      	ldr	r2, [r7, #0]
 8010a20:	505a      	str	r2, [r3, r1]
}
 8010a22:	46c0      	nop			@ (mov r8, r8)
 8010a24:	46bd      	mov	sp, r7
 8010a26:	b004      	add	sp, #16
 8010a28:	bd80      	pop	{r7, pc}
	...

08010a2c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8010a2c:	b590      	push	{r4, r7, lr}
 8010a2e:	b085      	sub	sp, #20
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2280      	movs	r2, #128	@ 0x80
 8010a3a:	589c      	ldr	r4, [r3, r2]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2284      	movs	r2, #132	@ 0x84
 8010a40:	589b      	ldr	r3, [r3, r2]
 8010a42:	1c19      	adds	r1, r3, #0
 8010a44:	6838      	ldr	r0, [r7, #0]
 8010a46:	f7f0 fc55 	bl	80012f4 <__aeabi_fsub>
 8010a4a:	1c03      	adds	r3, r0, #0
 8010a4c:	1c19      	adds	r1, r3, #0
 8010a4e:	1c20      	adds	r0, r4, #0
 8010a50:	f7f0 faf6 	bl	8001040 <__aeabi_fmul>
 8010a54:	1c03      	adds	r3, r0, #0
 8010a56:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8010a58:	4940      	ldr	r1, [pc, #256]	@ (8010b5c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8010a5a:	68b8      	ldr	r0, [r7, #8]
 8010a5c:	f7ef fd68 	bl	8000530 <__aeabi_fcmplt>
 8010a60:	1e03      	subs	r3, r0, #0
 8010a62:	d001      	beq.n	8010a68 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8010a64:	4b3e      	ldr	r3, [pc, #248]	@ (8010b60 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010a66:	e075      	b.n	8010b54 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8010a68:	493e      	ldr	r1, [pc, #248]	@ (8010b64 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8010a6a:	68b8      	ldr	r0, [r7, #8]
 8010a6c:	f7ef fd74 	bl	8000558 <__aeabi_fcmpgt>
 8010a70:	1e03      	subs	r3, r0, #0
 8010a72:	d001      	beq.n	8010a78 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8010a74:	2300      	movs	r3, #0
 8010a76:	e06d      	b.n	8010b54 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8010a78:	2100      	movs	r1, #0
 8010a7a:	6838      	ldr	r0, [r7, #0]
 8010a7c:	f7ef fd76 	bl	800056c <__aeabi_fcmpge>
 8010a80:	1e03      	subs	r3, r0, #0
 8010a82:	d047      	beq.n	8010b14 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2288      	movs	r2, #136	@ 0x88
 8010a88:	589b      	ldr	r3, [r3, r2]
 8010a8a:	21fe      	movs	r1, #254	@ 0xfe
 8010a8c:	0589      	lsls	r1, r1, #22
 8010a8e:	1c18      	adds	r0, r3, #0
 8010a90:	f7ef fd48 	bl	8000524 <__aeabi_fcmpeq>
 8010a94:	1e03      	subs	r3, r0, #0
 8010a96:	d00e      	beq.n	8010ab6 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	1c19      	adds	r1, r3, #0
 8010a9e:	20fe      	movs	r0, #254	@ 0xfe
 8010aa0:	0580      	lsls	r0, r0, #22
 8010aa2:	f7f0 fc27 	bl	80012f4 <__aeabi_fsub>
 8010aa6:	1c03      	adds	r3, r0, #0
 8010aa8:	492f      	ldr	r1, [pc, #188]	@ (8010b68 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8010aaa:	1c18      	adds	r0, r3, #0
 8010aac:	f7f0 fac8 	bl	8001040 <__aeabi_fmul>
 8010ab0:	1c03      	adds	r3, r0, #0
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	e012      	b.n	8010adc <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	689b      	ldr	r3, [r3, #8]
 8010aba:	492c      	ldr	r1, [pc, #176]	@ (8010b6c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8010abc:	1c18      	adds	r0, r3, #0
 8010abe:	f7f0 fabf 	bl	8001040 <__aeabi_fmul>
 8010ac2:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8010ac4:	1c19      	adds	r1, r3, #0
 8010ac6:	4826      	ldr	r0, [pc, #152]	@ (8010b60 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010ac8:	f7f0 fc14 	bl	80012f4 <__aeabi_fsub>
 8010acc:	1c03      	adds	r3, r0, #0
 8010ace:	2181      	movs	r1, #129	@ 0x81
 8010ad0:	05c9      	lsls	r1, r1, #23
 8010ad2:	1c18      	adds	r0, r3, #0
 8010ad4:	f7f0 f8e6 	bl	8000ca4 <__aeabi_fdiv>
 8010ad8:	1c03      	adds	r3, r0, #0
 8010ada:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8010adc:	4920      	ldr	r1, [pc, #128]	@ (8010b60 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010ade:	68f8      	ldr	r0, [r7, #12]
 8010ae0:	f7ef feee 	bl	80008c0 <__aeabi_fadd>
 8010ae4:	1c03      	adds	r3, r0, #0
 8010ae6:	1c1c      	adds	r4, r3, #0
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	1c18      	adds	r0, r3, #0
 8010aec:	f018 fcc4 	bl	8029478 <expf>
 8010af0:	1c03      	adds	r3, r0, #0
 8010af2:	21fe      	movs	r1, #254	@ 0xfe
 8010af4:	0589      	lsls	r1, r1, #22
 8010af6:	1c18      	adds	r0, r3, #0
 8010af8:	f7ef fee2 	bl	80008c0 <__aeabi_fadd>
 8010afc:	1c03      	adds	r3, r0, #0
 8010afe:	1c19      	adds	r1, r3, #0
 8010b00:	1c20      	adds	r0, r4, #0
 8010b02:	f7f0 f8cf 	bl	8000ca4 <__aeabi_fdiv>
 8010b06:	1c03      	adds	r3, r0, #0
 8010b08:	68f9      	ldr	r1, [r7, #12]
 8010b0a:	1c18      	adds	r0, r3, #0
 8010b0c:	f7f0 fbf2 	bl	80012f4 <__aeabi_fsub>
 8010b10:	1c03      	adds	r3, r0, #0
 8010b12:	e01f      	b.n	8010b54 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2188      	movs	r1, #136	@ 0x88
 8010b1c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8010b1e:	1c19      	adds	r1, r3, #0
 8010b20:	1c10      	adds	r0, r2, #0
 8010b22:	f7f0 f8bf 	bl	8000ca4 <__aeabi_fdiv>
 8010b26:	1c03      	adds	r3, r0, #0
 8010b28:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	1c18      	adds	r0, r3, #0
 8010b2e:	f018 fca3 	bl	8029478 <expf>
 8010b32:	1c03      	adds	r3, r0, #0
 8010b34:	21fe      	movs	r1, #254	@ 0xfe
 8010b36:	0589      	lsls	r1, r1, #22
 8010b38:	1c18      	adds	r0, r3, #0
 8010b3a:	f7ef fec1 	bl	80008c0 <__aeabi_fadd>
 8010b3e:	1c03      	adds	r3, r0, #0
 8010b40:	1c19      	adds	r1, r3, #0
 8010b42:	4807      	ldr	r0, [pc, #28]	@ (8010b60 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010b44:	f7f0 f8ae 	bl	8000ca4 <__aeabi_fdiv>
 8010b48:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010b4a:	1c19      	adds	r1, r3, #0
 8010b4c:	1c20      	adds	r0, r4, #0
 8010b4e:	f7f0 fa77 	bl	8001040 <__aeabi_fmul>
 8010b52:	1c03      	adds	r3, r0, #0
        }
    }
}
 8010b54:	1c18      	adds	r0, r3, #0
 8010b56:	46bd      	mov	sp, r7
 8010b58:	b005      	add	sp, #20
 8010b5a:	bd90      	pop	{r4, r7, pc}
 8010b5c:	c2480000 	.word	0xc2480000
 8010b60:	43fa0000 	.word	0x43fa0000
 8010b64:	42480000 	.word	0x42480000
 8010b68:	3f8041ab 	.word	0x3f8041ab
 8010b6c:	40a00000 	.word	0x40a00000

08010b70 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8010b70:	b590      	push	{r4, r7, lr}
 8010b72:	b083      	sub	sp, #12
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	4913      	ldr	r1, [pc, #76]	@ (8010bd0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8010b82:	1c18      	adds	r0, r3, #0
 8010b84:	f7ef fe9c 	bl	80008c0 <__aeabi_fadd>
 8010b88:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8010b8a:	1c19      	adds	r1, r3, #0
 8010b8c:	1c20      	adds	r0, r4, #0
 8010b8e:	f7f0 f889 	bl	8000ca4 <__aeabi_fdiv>
 8010b92:	1c03      	adds	r3, r0, #0
 8010b94:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	228c      	movs	r2, #140	@ 0x8c
 8010b9a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	490b      	ldr	r1, [pc, #44]	@ (8010bd4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8010ba6:	1c18      	adds	r0, r3, #0
 8010ba8:	f7ef fe8a 	bl	80008c0 <__aeabi_fadd>
 8010bac:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8010bae:	1c19      	adds	r1, r3, #0
 8010bb0:	1c20      	adds	r0, r4, #0
 8010bb2:	f7f0 f877 	bl	8000ca4 <__aeabi_fdiv>
 8010bb6:	1c03      	adds	r3, r0, #0
 8010bb8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2290      	movs	r2, #144	@ 0x90
 8010bbe:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2294      	movs	r2, #148	@ 0x94
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	5499      	strb	r1, [r3, r2]
}
 8010bc8:	46c0      	nop			@ (mov r8, r8)
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	b003      	add	sp, #12
 8010bce:	bd90      	pop	{r4, r7, pc}
 8010bd0:	41a00000 	.word	0x41a00000
 8010bd4:	43fa0000 	.word	0x43fa0000

08010bd8 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8010bd8:	b590      	push	{r4, r7, lr}
 8010bda:	b087      	sub	sp, #28
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2294      	movs	r2, #148	@ 0x94
 8010be6:	5c9b      	ldrb	r3, [r3, r2]
 8010be8:	2201      	movs	r2, #1
 8010bea:	4053      	eors	r3, r2
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d00f      	beq.n	8010c12 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2198      	movs	r1, #152	@ 0x98
 8010bf6:	683a      	ldr	r2, [r7, #0]
 8010bf8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	219c      	movs	r1, #156	@ 0x9c
 8010bfe:	683a      	ldr	r2, [r7, #0]
 8010c00:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	21a0      	movs	r1, #160	@ 0xa0
 8010c06:	683a      	ldr	r2, [r7, #0]
 8010c08:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2294      	movs	r2, #148	@ 0x94
 8010c0e:	2101      	movs	r1, #1
 8010c10:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	228c      	movs	r2, #140	@ 0x8c
 8010c16:	589b      	ldr	r3, [r3, r2]
 8010c18:	1c19      	adds	r1, r3, #0
 8010c1a:	20fe      	movs	r0, #254	@ 0xfe
 8010c1c:	0580      	lsls	r0, r0, #22
 8010c1e:	f7f0 fb69 	bl	80012f4 <__aeabi_fsub>
 8010c22:	1c03      	adds	r3, r0, #0
 8010c24:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2298      	movs	r2, #152	@ 0x98
 8010c2a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010c2c:	1c19      	adds	r1, r3, #0
 8010c2e:	f7f0 fa07 	bl	8001040 <__aeabi_fmul>
 8010c32:	1c03      	adds	r3, r0, #0
 8010c34:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	228c      	movs	r2, #140	@ 0x8c
 8010c3a:	589b      	ldr	r3, [r3, r2]
 8010c3c:	6839      	ldr	r1, [r7, #0]
 8010c3e:	1c18      	adds	r0, r3, #0
 8010c40:	f7f0 f9fe 	bl	8001040 <__aeabi_fmul>
 8010c44:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8010c46:	1c19      	adds	r1, r3, #0
 8010c48:	1c20      	adds	r0, r4, #0
 8010c4a:	f7ef fe39 	bl	80008c0 <__aeabi_fadd>
 8010c4e:	1c03      	adds	r3, r0, #0
 8010c50:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2298      	movs	r2, #152	@ 0x98
 8010c56:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2290      	movs	r2, #144	@ 0x90
 8010c5c:	589b      	ldr	r3, [r3, r2]
 8010c5e:	1c19      	adds	r1, r3, #0
 8010c60:	20fe      	movs	r0, #254	@ 0xfe
 8010c62:	0580      	lsls	r0, r0, #22
 8010c64:	f7f0 fb46 	bl	80012f4 <__aeabi_fsub>
 8010c68:	1c03      	adds	r3, r0, #0
 8010c6a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	229c      	movs	r2, #156	@ 0x9c
 8010c70:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8010c72:	1c19      	adds	r1, r3, #0
 8010c74:	f7f0 f9e4 	bl	8001040 <__aeabi_fmul>
 8010c78:	1c03      	adds	r3, r0, #0
 8010c7a:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2290      	movs	r2, #144	@ 0x90
 8010c80:	589b      	ldr	r3, [r3, r2]
 8010c82:	6839      	ldr	r1, [r7, #0]
 8010c84:	1c18      	adds	r0, r3, #0
 8010c86:	f7f0 f9db 	bl	8001040 <__aeabi_fmul>
 8010c8a:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8010c8c:	1c19      	adds	r1, r3, #0
 8010c8e:	1c20      	adds	r0, r4, #0
 8010c90:	f7ef fe16 	bl	80008c0 <__aeabi_fadd>
 8010c94:	1c03      	adds	r3, r0, #0
 8010c96:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	229c      	movs	r2, #156	@ 0x9c
 8010c9c:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2298      	movs	r2, #152	@ 0x98
 8010ca2:	589a      	ldr	r2, [r3, r2]
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	219c      	movs	r1, #156	@ 0x9c
 8010ca8:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8010caa:	1c19      	adds	r1, r3, #0
 8010cac:	1c10      	adds	r0, r2, #0
 8010cae:	f7f0 fb21 	bl	80012f4 <__aeabi_fsub>
 8010cb2:	1c03      	adds	r3, r0, #0
 8010cb4:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	6978      	ldr	r0, [r7, #20]
 8010cba:	f7ef fc39 	bl	8000530 <__aeabi_fcmplt>
 8010cbe:	1e03      	subs	r3, r0, #0
 8010cc0:	d004      	beq.n	8010ccc <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	2280      	movs	r2, #128	@ 0x80
 8010cc6:	0612      	lsls	r2, r2, #24
 8010cc8:	4053      	eors	r3, r2
 8010cca:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8010ccc:	4923      	ldr	r1, [pc, #140]	@ (8010d5c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8010cce:	6978      	ldr	r0, [r7, #20]
 8010cd0:	f7f0 f9b6 	bl	8001040 <__aeabi_fmul>
 8010cd4:	1c03      	adds	r3, r0, #0
 8010cd6:	1c18      	adds	r0, r3, #0
 8010cd8:	f018 fbce 	bl	8029478 <expf>
 8010cdc:	1c03      	adds	r3, r0, #0
 8010cde:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8010ce0:	491f      	ldr	r1, [pc, #124]	@ (8010d60 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8010ce2:	6938      	ldr	r0, [r7, #16]
 8010ce4:	f7f0 f9ac 	bl	8001040 <__aeabi_fmul>
 8010ce8:	1c03      	adds	r3, r0, #0
 8010cea:	491e      	ldr	r1, [pc, #120]	@ (8010d64 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8010cec:	1c18      	adds	r0, r3, #0
 8010cee:	f7ef fde7 	bl	80008c0 <__aeabi_fadd>
 8010cf2:	1c03      	adds	r3, r0, #0
 8010cf4:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	685c      	ldr	r4, [r3, #4]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	68f9      	ldr	r1, [r7, #12]
 8010d00:	1c18      	adds	r0, r3, #0
 8010d02:	f7ef fddd 	bl	80008c0 <__aeabi_fadd>
 8010d06:	1c03      	adds	r3, r0, #0
 8010d08:	1c19      	adds	r1, r3, #0
 8010d0a:	1c20      	adds	r0, r4, #0
 8010d0c:	f7ef ffca 	bl	8000ca4 <__aeabi_fdiv>
 8010d10:	1c03      	adds	r3, r0, #0
 8010d12:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8010d14:	68b9      	ldr	r1, [r7, #8]
 8010d16:	20fe      	movs	r0, #254	@ 0xfe
 8010d18:	0580      	lsls	r0, r0, #22
 8010d1a:	f7f0 faeb 	bl	80012f4 <__aeabi_fsub>
 8010d1e:	1c03      	adds	r3, r0, #0
 8010d20:	1c18      	adds	r0, r3, #0
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	22a0      	movs	r2, #160	@ 0xa0
 8010d26:	589b      	ldr	r3, [r3, r2]
 8010d28:	1c19      	adds	r1, r3, #0
 8010d2a:	f7f0 f989 	bl	8001040 <__aeabi_fmul>
 8010d2e:	1c03      	adds	r3, r0, #0
 8010d30:	1c1c      	adds	r4, r3, #0
 8010d32:	6839      	ldr	r1, [r7, #0]
 8010d34:	68b8      	ldr	r0, [r7, #8]
 8010d36:	f7f0 f983 	bl	8001040 <__aeabi_fmul>
 8010d3a:	1c03      	adds	r3, r0, #0
 8010d3c:	1c19      	adds	r1, r3, #0
 8010d3e:	1c20      	adds	r0, r4, #0
 8010d40:	f7ef fdbe 	bl	80008c0 <__aeabi_fadd>
 8010d44:	1c03      	adds	r3, r0, #0
 8010d46:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	22a0      	movs	r2, #160	@ 0xa0
 8010d4c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	22a0      	movs	r2, #160	@ 0xa0
 8010d52:	589b      	ldr	r3, [r3, r2]
}
 8010d54:	1c18      	adds	r0, r3, #0
 8010d56:	46bd      	mov	sp, r7
 8010d58:	b007      	add	sp, #28
 8010d5a:	bd90      	pop	{r4, r7, pc}
 8010d5c:	be4ccccd 	.word	0xbe4ccccd
 8010d60:	43f00000 	.word	0x43f00000
 8010d64:	41a00000 	.word	0x41a00000

08010d68 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	000a      	movs	r2, r1
 8010d72:	1cbb      	adds	r3, r7, #2
 8010d74:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8010d76:	230d      	movs	r3, #13
 8010d78:	18fb      	adds	r3, r7, r3
 8010d7a:	22ff      	movs	r2, #255	@ 0xff
 8010d7c:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010d7e:	230e      	movs	r3, #14
 8010d80:	18fb      	adds	r3, r7, r3
 8010d82:	2200      	movs	r2, #0
 8010d84:	801a      	strh	r2, [r3, #0]
 8010d86:	e038      	b.n	8010dfa <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8010d88:	230e      	movs	r3, #14
 8010d8a:	18fb      	adds	r3, r7, r3
 8010d8c:	881b      	ldrh	r3, [r3, #0]
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	18d3      	adds	r3, r2, r3
 8010d92:	7819      	ldrb	r1, [r3, #0]
 8010d94:	220d      	movs	r2, #13
 8010d96:	18bb      	adds	r3, r7, r2
 8010d98:	18ba      	adds	r2, r7, r2
 8010d9a:	7812      	ldrb	r2, [r2, #0]
 8010d9c:	404a      	eors	r2, r1
 8010d9e:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010da0:	230c      	movs	r3, #12
 8010da2:	18fb      	adds	r3, r7, r3
 8010da4:	2208      	movs	r2, #8
 8010da6:	701a      	strb	r2, [r3, #0]
 8010da8:	e01c      	b.n	8010de4 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8010daa:	210d      	movs	r1, #13
 8010dac:	187b      	adds	r3, r7, r1
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	b25b      	sxtb	r3, r3
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	da0a      	bge.n	8010dcc <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8010db6:	187b      	adds	r3, r7, r1
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	b25b      	sxtb	r3, r3
 8010dbc:	18db      	adds	r3, r3, r3
 8010dbe:	b25b      	sxtb	r3, r3
 8010dc0:	2231      	movs	r2, #49	@ 0x31
 8010dc2:	4053      	eors	r3, r2
 8010dc4:	b25a      	sxtb	r2, r3
 8010dc6:	187b      	adds	r3, r7, r1
 8010dc8:	701a      	strb	r2, [r3, #0]
 8010dca:	e005      	b.n	8010dd8 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8010dcc:	230d      	movs	r3, #13
 8010dce:	18fa      	adds	r2, r7, r3
 8010dd0:	18fb      	adds	r3, r7, r3
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	18db      	adds	r3, r3, r3
 8010dd6:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010dd8:	220c      	movs	r2, #12
 8010dda:	18bb      	adds	r3, r7, r2
 8010ddc:	18ba      	adds	r2, r7, r2
 8010dde:	7812      	ldrb	r2, [r2, #0]
 8010de0:	3a01      	subs	r2, #1
 8010de2:	701a      	strb	r2, [r3, #0]
 8010de4:	230c      	movs	r3, #12
 8010de6:	18fb      	adds	r3, r7, r3
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d1dd      	bne.n	8010daa <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010dee:	220e      	movs	r2, #14
 8010df0:	18bb      	adds	r3, r7, r2
 8010df2:	18ba      	adds	r2, r7, r2
 8010df4:	8812      	ldrh	r2, [r2, #0]
 8010df6:	3201      	adds	r2, #1
 8010df8:	801a      	strh	r2, [r3, #0]
 8010dfa:	230e      	movs	r3, #14
 8010dfc:	18fa      	adds	r2, r7, r3
 8010dfe:	1cbb      	adds	r3, r7, #2
 8010e00:	8812      	ldrh	r2, [r2, #0]
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d3bf      	bcc.n	8010d88 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8010e08:	230d      	movs	r3, #13
 8010e0a:	18fb      	adds	r3, r7, r3
 8010e0c:	781b      	ldrb	r3, [r3, #0]
}
 8010e0e:	0018      	movs	r0, r3
 8010e10:	46bd      	mov	sp, r7
 8010e12:	b004      	add	sp, #16
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b082      	sub	sp, #8
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
 8010e1e:	0008      	movs	r0, r1
 8010e20:	0011      	movs	r1, r2
 8010e22:	1cbb      	adds	r3, r7, #2
 8010e24:	1c02      	adds	r2, r0, #0
 8010e26:	801a      	strh	r2, [r3, #0]
 8010e28:	1c7b      	adds	r3, r7, #1
 8010e2a:	1c0a      	adds	r2, r1, #0
 8010e2c:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010e2e:	1cbb      	adds	r3, r7, #2
 8010e30:	881a      	ldrh	r2, [r3, #0]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	0011      	movs	r1, r2
 8010e36:	0018      	movs	r0, r3
 8010e38:	f7ff ff96 	bl	8010d68 <sensirion_i2c_generate_crc>
 8010e3c:	0003      	movs	r3, r0
 8010e3e:	001a      	movs	r2, r3
 8010e40:	1c7b      	adds	r3, r7, #1
 8010e42:	781b      	ldrb	r3, [r3, #0]
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d001      	beq.n	8010e4c <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	e000      	b.n	8010e4e <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010e4c:	2300      	movs	r3, #0
}
 8010e4e:	0018      	movs	r0, r3
 8010e50:	46bd      	mov	sp, r7
 8010e52:	b002      	add	sp, #8
 8010e54:	bd80      	pop	{r7, pc}

08010e56 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010e56:	b580      	push	{r7, lr}
 8010e58:	b082      	sub	sp, #8
 8010e5a:	af00      	add	r7, sp, #0
 8010e5c:	6078      	str	r0, [r7, #4]
 8010e5e:	0008      	movs	r0, r1
 8010e60:	0011      	movs	r1, r2
 8010e62:	1cbb      	adds	r3, r7, #2
 8010e64:	1c02      	adds	r2, r0, #0
 8010e66:	801a      	strh	r2, [r3, #0]
 8010e68:	003b      	movs	r3, r7
 8010e6a:	1c0a      	adds	r2, r1, #0
 8010e6c:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010e6e:	003b      	movs	r3, r7
 8010e70:	881b      	ldrh	r3, [r3, #0]
 8010e72:	0a1b      	lsrs	r3, r3, #8
 8010e74:	b299      	uxth	r1, r3
 8010e76:	1cbb      	adds	r3, r7, #2
 8010e78:	881b      	ldrh	r3, [r3, #0]
 8010e7a:	1cba      	adds	r2, r7, #2
 8010e7c:	1c58      	adds	r0, r3, #1
 8010e7e:	8010      	strh	r0, [r2, #0]
 8010e80:	001a      	movs	r2, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	189b      	adds	r3, r3, r2
 8010e86:	b2ca      	uxtb	r2, r1
 8010e88:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010e8a:	1cbb      	adds	r3, r7, #2
 8010e8c:	881b      	ldrh	r3, [r3, #0]
 8010e8e:	1cba      	adds	r2, r7, #2
 8010e90:	1c59      	adds	r1, r3, #1
 8010e92:	8011      	strh	r1, [r2, #0]
 8010e94:	001a      	movs	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	189b      	adds	r3, r3, r2
 8010e9a:	003a      	movs	r2, r7
 8010e9c:	8812      	ldrh	r2, [r2, #0]
 8010e9e:	b2d2      	uxtb	r2, r2
 8010ea0:	701a      	strb	r2, [r3, #0]
    return offset;
 8010ea2:	1cbb      	adds	r3, r7, #2
 8010ea4:	881b      	ldrh	r3, [r3, #0]
}
 8010ea6:	0018      	movs	r0, r3
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	b002      	add	sp, #8
 8010eac:	bd80      	pop	{r7, pc}

08010eae <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010eae:	b590      	push	{r4, r7, lr}
 8010eb0:	b083      	sub	sp, #12
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
 8010eb6:	0008      	movs	r0, r1
 8010eb8:	0011      	movs	r1, r2
 8010eba:	1cbb      	adds	r3, r7, #2
 8010ebc:	1c02      	adds	r2, r0, #0
 8010ebe:	801a      	strh	r2, [r3, #0]
 8010ec0:	003b      	movs	r3, r7
 8010ec2:	1c0a      	adds	r2, r1, #0
 8010ec4:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010ec6:	003b      	movs	r3, r7
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	0a1b      	lsrs	r3, r3, #8
 8010ecc:	b299      	uxth	r1, r3
 8010ece:	1cbb      	adds	r3, r7, #2
 8010ed0:	881b      	ldrh	r3, [r3, #0]
 8010ed2:	1cba      	adds	r2, r7, #2
 8010ed4:	1c58      	adds	r0, r3, #1
 8010ed6:	8010      	strh	r0, [r2, #0]
 8010ed8:	001a      	movs	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	189b      	adds	r3, r3, r2
 8010ede:	b2ca      	uxtb	r2, r1
 8010ee0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010ee2:	1cbb      	adds	r3, r7, #2
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	1cba      	adds	r2, r7, #2
 8010ee8:	1c59      	adds	r1, r3, #1
 8010eea:	8011      	strh	r1, [r2, #0]
 8010eec:	001a      	movs	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	189b      	adds	r3, r3, r2
 8010ef2:	003a      	movs	r2, r7
 8010ef4:	8812      	ldrh	r2, [r2, #0]
 8010ef6:	b2d2      	uxtb	r2, r2
 8010ef8:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010efa:	1cbb      	adds	r3, r7, #2
 8010efc:	881b      	ldrh	r3, [r3, #0]
 8010efe:	3b02      	subs	r3, #2
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010f04:	1cbb      	adds	r3, r7, #2
 8010f06:	881b      	ldrh	r3, [r3, #0]
 8010f08:	687a      	ldr	r2, [r7, #4]
 8010f0a:	18d4      	adds	r4, r2, r3
 8010f0c:	2102      	movs	r1, #2
 8010f0e:	f7ff ff2b 	bl	8010d68 <sensirion_i2c_generate_crc>
 8010f12:	0003      	movs	r3, r0
 8010f14:	7023      	strb	r3, [r4, #0]
    offset++;
 8010f16:	1cbb      	adds	r3, r7, #2
 8010f18:	881a      	ldrh	r2, [r3, #0]
 8010f1a:	1cbb      	adds	r3, r7, #2
 8010f1c:	3201      	adds	r2, #1
 8010f1e:	801a      	strh	r2, [r3, #0]

    return offset;
 8010f20:	1cbb      	adds	r3, r7, #2
 8010f22:	881b      	ldrh	r3, [r3, #0]
}
 8010f24:	0018      	movs	r0, r3
 8010f26:	46bd      	mov	sp, r7
 8010f28:	b003      	add	sp, #12
 8010f2a:	bd90      	pop	{r4, r7, pc}

08010f2c <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	0008      	movs	r0, r1
 8010f36:	0011      	movs	r1, r2
 8010f38:	1cbb      	adds	r3, r7, #2
 8010f3a:	1c02      	adds	r2, r0, #0
 8010f3c:	801a      	strh	r2, [r3, #0]
 8010f3e:	003b      	movs	r3, r7
 8010f40:	1c0a      	adds	r2, r1, #0
 8010f42:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010f44:	003b      	movs	r3, r7
 8010f46:	881a      	ldrh	r2, [r3, #0]
 8010f48:	1cbb      	adds	r3, r7, #2
 8010f4a:	8819      	ldrh	r1, [r3, #0]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	0018      	movs	r0, r3
 8010f50:	f7ff ffad 	bl	8010eae <sensirion_i2c_add_uint16_t_to_buffer>
 8010f54:	0003      	movs	r3, r0
}
 8010f56:	0018      	movs	r0, r3
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	b002      	add	sp, #8
 8010f5c:	bd80      	pop	{r7, pc}

08010f5e <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010f5e:	b580      	push	{r7, lr}
 8010f60:	b082      	sub	sp, #8
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6039      	str	r1, [r7, #0]
 8010f66:	0011      	movs	r1, r2
 8010f68:	1dfb      	adds	r3, r7, #7
 8010f6a:	1c02      	adds	r2, r0, #0
 8010f6c:	701a      	strb	r2, [r3, #0]
 8010f6e:	1d3b      	adds	r3, r7, #4
 8010f70:	1c0a      	adds	r2, r1, #0
 8010f72:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010f74:	1d3b      	adds	r3, r7, #4
 8010f76:	881a      	ldrh	r2, [r3, #0]
 8010f78:	6839      	ldr	r1, [r7, #0]
 8010f7a:	1dfb      	adds	r3, r7, #7
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	0018      	movs	r0, r3
 8010f80:	f7fe f9b0 	bl	800f2e4 <sensirion_i2c_hal_write>
 8010f84:	0003      	movs	r3, r0
}
 8010f86:	0018      	movs	r0, r3
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	b002      	add	sp, #8
 8010f8c:	bd80      	pop	{r7, pc}

08010f8e <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010f8e:	b5b0      	push	{r4, r5, r7, lr}
 8010f90:	b084      	sub	sp, #16
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6039      	str	r1, [r7, #0]
 8010f96:	0011      	movs	r1, r2
 8010f98:	1dfb      	adds	r3, r7, #7
 8010f9a:	1c02      	adds	r2, r0, #0
 8010f9c:	701a      	strb	r2, [r3, #0]
 8010f9e:	1d3b      	adds	r3, r7, #4
 8010fa0:	1c0a      	adds	r2, r1, #0
 8010fa2:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010fa4:	1d3b      	adds	r3, r7, #4
 8010fa6:	881b      	ldrh	r3, [r3, #0]
 8010fa8:	085b      	lsrs	r3, r3, #1
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	220a      	movs	r2, #10
 8010fae:	18ba      	adds	r2, r7, r2
 8010fb0:	1c19      	adds	r1, r3, #0
 8010fb2:	1c0b      	adds	r3, r1, #0
 8010fb4:	18db      	adds	r3, r3, r3
 8010fb6:	185b      	adds	r3, r3, r1
 8010fb8:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010fba:	1d3b      	adds	r3, r7, #4
 8010fbc:	881b      	ldrh	r3, [r3, #0]
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	4013      	ands	r3, r2
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d001      	beq.n	8010fcc <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010fc8:	2304      	movs	r3, #4
 8010fca:	e06b      	b.n	80110a4 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010fcc:	230a      	movs	r3, #10
 8010fce:	18fb      	adds	r3, r7, r3
 8010fd0:	881a      	ldrh	r2, [r3, #0]
 8010fd2:	6839      	ldr	r1, [r7, #0]
 8010fd4:	1dfb      	adds	r3, r7, #7
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	0018      	movs	r0, r3
 8010fda:	f7fe f963 	bl	800f2a4 <sensirion_i2c_hal_read>
 8010fde:	0003      	movs	r3, r0
 8010fe0:	001a      	movs	r2, r3
 8010fe2:	2108      	movs	r1, #8
 8010fe4:	187b      	adds	r3, r7, r1
 8010fe6:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010fe8:	000a      	movs	r2, r1
 8010fea:	18bb      	adds	r3, r7, r2
 8010fec:	2100      	movs	r1, #0
 8010fee:	5e5b      	ldrsh	r3, [r3, r1]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d003      	beq.n	8010ffc <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010ff4:	18bb      	adds	r3, r7, r2
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	5e9b      	ldrsh	r3, [r3, r2]
 8010ffa:	e053      	b.n	80110a4 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010ffc:	230e      	movs	r3, #14
 8010ffe:	18fb      	adds	r3, r7, r3
 8011000:	2200      	movs	r2, #0
 8011002:	801a      	strh	r2, [r3, #0]
 8011004:	230c      	movs	r3, #12
 8011006:	18fb      	adds	r3, r7, r3
 8011008:	2200      	movs	r2, #0
 801100a:	801a      	strh	r2, [r3, #0]
 801100c:	e041      	b.n	8011092 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 801100e:	210e      	movs	r1, #14
 8011010:	187b      	adds	r3, r7, r1
 8011012:	881b      	ldrh	r3, [r3, #0]
 8011014:	683a      	ldr	r2, [r7, #0]
 8011016:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8011018:	187b      	adds	r3, r7, r1
 801101a:	881b      	ldrh	r3, [r3, #0]
 801101c:	3302      	adds	r3, #2
 801101e:	683a      	ldr	r2, [r7, #0]
 8011020:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	001a      	movs	r2, r3
 8011026:	2102      	movs	r1, #2
 8011028:	f7ff fef5 	bl	8010e16 <sensirion_i2c_check_crc>
 801102c:	0003      	movs	r3, r0
 801102e:	001a      	movs	r2, r3
 8011030:	2108      	movs	r1, #8
 8011032:	187b      	adds	r3, r7, r1
 8011034:	801a      	strh	r2, [r3, #0]
        if (error) {
 8011036:	000a      	movs	r2, r1
 8011038:	18bb      	adds	r3, r7, r2
 801103a:	2100      	movs	r1, #0
 801103c:	5e5b      	ldrsh	r3, [r3, r1]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d003      	beq.n	801104a <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8011042:	18bb      	adds	r3, r7, r2
 8011044:	2200      	movs	r2, #0
 8011046:	5e9b      	ldrsh	r3, [r3, r2]
 8011048:	e02c      	b.n	80110a4 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 801104a:	240e      	movs	r4, #14
 801104c:	193b      	adds	r3, r7, r4
 801104e:	881b      	ldrh	r3, [r3, #0]
 8011050:	683a      	ldr	r2, [r7, #0]
 8011052:	18d2      	adds	r2, r2, r3
 8011054:	250c      	movs	r5, #12
 8011056:	197b      	adds	r3, r7, r5
 8011058:	881b      	ldrh	r3, [r3, #0]
 801105a:	1979      	adds	r1, r7, r5
 801105c:	1c58      	adds	r0, r3, #1
 801105e:	8008      	strh	r0, [r1, #0]
 8011060:	0019      	movs	r1, r3
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	185b      	adds	r3, r3, r1
 8011066:	7812      	ldrb	r2, [r2, #0]
 8011068:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 801106a:	193b      	adds	r3, r7, r4
 801106c:	881b      	ldrh	r3, [r3, #0]
 801106e:	3301      	adds	r3, #1
 8011070:	683a      	ldr	r2, [r7, #0]
 8011072:	18d2      	adds	r2, r2, r3
 8011074:	197b      	adds	r3, r7, r5
 8011076:	881b      	ldrh	r3, [r3, #0]
 8011078:	1979      	adds	r1, r7, r5
 801107a:	1c58      	adds	r0, r3, #1
 801107c:	8008      	strh	r0, [r1, #0]
 801107e:	0019      	movs	r1, r3
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	185b      	adds	r3, r3, r1
 8011084:	7812      	ldrb	r2, [r2, #0]
 8011086:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8011088:	193b      	adds	r3, r7, r4
 801108a:	193a      	adds	r2, r7, r4
 801108c:	8812      	ldrh	r2, [r2, #0]
 801108e:	3203      	adds	r2, #3
 8011090:	801a      	strh	r2, [r3, #0]
 8011092:	230e      	movs	r3, #14
 8011094:	18fa      	adds	r2, r7, r3
 8011096:	230a      	movs	r3, #10
 8011098:	18fb      	adds	r3, r7, r3
 801109a:	8812      	ldrh	r2, [r2, #0]
 801109c:	881b      	ldrh	r3, [r3, #0]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d3b5      	bcc.n	801100e <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 80110a2:	2300      	movs	r3, #0
}
 80110a4:	0018      	movs	r0, r3
 80110a6:	46bd      	mov	sp, r7
 80110a8:	b004      	add	sp, #16
 80110aa:	bdb0      	pop	{r4, r5, r7, pc}

080110ac <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80110ac:	b590      	push	{r4, r7, lr}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6039      	str	r1, [r7, #0]
 80110b4:	0011      	movs	r1, r2
 80110b6:	1dfb      	adds	r3, r7, #7
 80110b8:	1c02      	adds	r2, r0, #0
 80110ba:	701a      	strb	r2, [r3, #0]
 80110bc:	1dbb      	adds	r3, r7, #6
 80110be:	1c0a      	adds	r2, r1, #0
 80110c0:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80110c2:	4b08      	ldr	r3, [pc, #32]	@ (80110e4 <ReadRegister+0x38>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d008      	beq.n	80110dc <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80110ca:	4b06      	ldr	r3, [pc, #24]	@ (80110e4 <ReadRegister+0x38>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	1dba      	adds	r2, r7, #6
 80110d0:	7814      	ldrb	r4, [r2, #0]
 80110d2:	6839      	ldr	r1, [r7, #0]
 80110d4:	1dfa      	adds	r2, r7, #7
 80110d6:	7810      	ldrb	r0, [r2, #0]
 80110d8:	0022      	movs	r2, r4
 80110da:	4798      	blx	r3
  }
}
 80110dc:	46c0      	nop			@ (mov r8, r8)
 80110de:	46bd      	mov	sp, r7
 80110e0:	b003      	add	sp, #12
 80110e2:	bd90      	pop	{r4, r7, pc}
 80110e4:	200011fc 	.word	0x200011fc

080110e8 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80110e8:	b590      	push	{r4, r7, lr}
 80110ea:	b083      	sub	sp, #12
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6039      	str	r1, [r7, #0]
 80110f0:	0011      	movs	r1, r2
 80110f2:	1dfb      	adds	r3, r7, #7
 80110f4:	1c02      	adds	r2, r0, #0
 80110f6:	701a      	strb	r2, [r3, #0]
 80110f8:	1dbb      	adds	r3, r7, #6
 80110fa:	1c0a      	adds	r2, r1, #0
 80110fc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80110fe:	4b08      	ldr	r3, [pc, #32]	@ (8011120 <WriteRegister+0x38>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d008      	beq.n	8011118 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8011106:	4b06      	ldr	r3, [pc, #24]	@ (8011120 <WriteRegister+0x38>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	1dba      	adds	r2, r7, #6
 801110c:	7814      	ldrb	r4, [r2, #0]
 801110e:	6839      	ldr	r1, [r7, #0]
 8011110:	1dfa      	adds	r2, r7, #7
 8011112:	7810      	ldrb	r0, [r2, #0]
 8011114:	0022      	movs	r2, r4
 8011116:	4798      	blx	r3
  }
}
 8011118:	46c0      	nop			@ (mov r8, r8)
 801111a:	46bd      	mov	sp, r7
 801111c:	b003      	add	sp, #12
 801111e:	bd90      	pop	{r4, r7, pc}
 8011120:	20001200 	.word	0x20001200

08011124 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 801112c:	f003 fdd2 	bl	8014cd4 <HAL_GetTick>
 8011130:	0002      	movs	r2, r0
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	18d2      	adds	r2, r2, r3
 8011136:	4b03      	ldr	r3, [pc, #12]	@ (8011144 <setSGP40TimeStamp+0x20>)
 8011138:	601a      	str	r2, [r3, #0]
}
 801113a:	46c0      	nop			@ (mov r8, r8)
 801113c:	46bd      	mov	sp, r7
 801113e:	b002      	add	sp, #8
 8011140:	bd80      	pop	{r7, pc}
 8011142:	46c0      	nop			@ (mov r8, r8)
 8011144:	20001210 	.word	0x20001210

08011148 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 801114c:	4b02      	ldr	r3, [pc, #8]	@ (8011158 <ResetSGP40samplecounter+0x10>)
 801114e:	2200      	movs	r2, #0
 8011150:	701a      	strb	r2, [r3, #0]
}
 8011152:	46c0      	nop			@ (mov r8, r8)
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	2000120e 	.word	0x2000120e

0801115c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8011166:	4b07      	ldr	r3, [pc, #28]	@ (8011184 <SGP_Init+0x28>)
 8011168:	687a      	ldr	r2, [r7, #4]
 801116a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 801116c:	4b06      	ldr	r3, [pc, #24]	@ (8011188 <SGP_Init+0x2c>)
 801116e:	683a      	ldr	r2, [r7, #0]
 8011170:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8011172:	4b06      	ldr	r3, [pc, #24]	@ (801118c <SGP_Init+0x30>)
 8011174:	2100      	movs	r1, #0
 8011176:	0018      	movs	r0, r3
 8011178:	f7fe ff72 	bl	8010060 <GasIndexAlgorithm_init>
}
 801117c:	46c0      	nop			@ (mov r8, r8)
 801117e:	46bd      	mov	sp, r7
 8011180:	b002      	add	sp, #8
 8011182:	bd80      	pop	{r7, pc}
 8011184:	200011fc 	.word	0x200011fc
 8011188:	20001200 	.word	0x20001200
 801118c:	20001218 	.word	0x20001218

08011190 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8011190:	b580      	push	{r7, lr}
 8011192:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8011194:	4b07      	ldr	r3, [pc, #28]	@ (80111b4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d004      	beq.n	80111a6 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 801119c:	4b06      	ldr	r3, [pc, #24]	@ (80111b8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 801119e:	22fe      	movs	r2, #254	@ 0xfe
 80111a0:	0592      	lsls	r2, r2, #22
 80111a2:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 80111a4:	e002      	b.n	80111ac <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 80111a6:	4b04      	ldr	r3, [pc, #16]	@ (80111b8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 80111a8:	4a04      	ldr	r2, [pc, #16]	@ (80111bc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 80111aa:	605a      	str	r2, [r3, #4]
}
 80111ac:	46c0      	nop			@ (mov r8, r8)
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	46c0      	nop			@ (mov r8, r8)
 80111b4:	20002165 	.word	0x20002165
 80111b8:	20001218 	.word	0x20001218
 80111bc:	44610000 	.word	0x44610000

080111c0 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80111c0:	b580      	push	{r7, lr}
 80111c2:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80111c4:	4b13      	ldr	r3, [pc, #76]	@ (8011214 <SGP_StartMeasurement+0x54>)
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00d      	beq.n	80111e8 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80111cc:	4b12      	ldr	r3, [pc, #72]	@ (8011218 <SGP_StartMeasurement+0x58>)
 80111ce:	2208      	movs	r2, #8
 80111d0:	0019      	movs	r1, r3
 80111d2:	2059      	movs	r0, #89	@ 0x59
 80111d4:	f7ff ff88 	bl	80110e8 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 80111d8:	f003 fd7c 	bl	8014cd4 <HAL_GetTick>
 80111dc:	0003      	movs	r3, r0
 80111de:	331e      	adds	r3, #30
 80111e0:	001a      	movs	r2, r3
 80111e2:	4b0e      	ldr	r3, [pc, #56]	@ (801121c <SGP_StartMeasurement+0x5c>)
 80111e4:	601a      	str	r2, [r3, #0]
 80111e6:	e00c      	b.n	8011202 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80111e8:	4b0d      	ldr	r3, [pc, #52]	@ (8011220 <SGP_StartMeasurement+0x60>)
 80111ea:	2208      	movs	r2, #8
 80111ec:	0019      	movs	r1, r3
 80111ee:	2059      	movs	r0, #89	@ 0x59
 80111f0:	f7ff ff7a 	bl	80110e8 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 80111f4:	f003 fd6e 	bl	8014cd4 <HAL_GetTick>
 80111f8:	0003      	movs	r3, r0
 80111fa:	33aa      	adds	r3, #170	@ 0xaa
 80111fc:	001a      	movs	r2, r3
 80111fe:	4b09      	ldr	r3, [pc, #36]	@ (8011224 <SGP_StartMeasurement+0x64>)
 8011200:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8011202:	4b09      	ldr	r3, [pc, #36]	@ (8011228 <SGP_StartMeasurement+0x68>)
 8011204:	2200      	movs	r2, #0
 8011206:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8011208:	4b08      	ldr	r3, [pc, #32]	@ (801122c <SGP_StartMeasurement+0x6c>)
 801120a:	2200      	movs	r2, #0
 801120c:	701a      	strb	r2, [r3, #0]
}
 801120e:	46c0      	nop			@ (mov r8, r8)
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	200012c0 	.word	0x200012c0
 8011218:	200000bc 	.word	0x200000bc
 801121c:	200000d0 	.word	0x200000d0
 8011220:	200000b4 	.word	0x200000b4
 8011224:	200000c8 	.word	0x200000c8
 8011228:	20001214 	.word	0x20001214
 801122c:	20001215 	.word	0x20001215

08011230 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8011230:	b580      	push	{r7, lr}
 8011232:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8011234:	4b04      	ldr	r3, [pc, #16]	@ (8011248 <SGP_HeatedUp+0x18>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	0018      	movs	r0, r3
 801123a:	f002 ff7d 	bl	8014138 <TimestampIsReached>
 801123e:	0003      	movs	r3, r0
}
 8011240:	0018      	movs	r0, r3
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	46c0      	nop			@ (mov r8, r8)
 8011248:	200000c8 	.word	0x200000c8

0801124c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 801124c:	b580      	push	{r7, lr}
 801124e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8011250:	4b04      	ldr	r3, [pc, #16]	@ (8011264 <SGP_MeasurementReady+0x18>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	0018      	movs	r0, r3
 8011256:	f002 ff6f 	bl	8014138 <TimestampIsReached>
 801125a:	0003      	movs	r3, r0
}
 801125c:	0018      	movs	r0, r3
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	46c0      	nop			@ (mov r8, r8)
 8011264:	200000d0 	.word	0x200000d0

08011268 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8011268:	b580      	push	{r7, lr}
 801126a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 801126c:	4b04      	ldr	r3, [pc, #16]	@ (8011280 <SGP_MeasurementDone+0x18>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	0018      	movs	r0, r3
 8011272:	f002 ff61 	bl	8014138 <TimestampIsReached>
 8011276:	0003      	movs	r3, r0
}
 8011278:	0018      	movs	r0, r3
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	46c0      	nop			@ (mov r8, r8)
 8011280:	200000cc 	.word	0x200000cc

08011284 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8011284:	b580      	push	{r7, lr}
 8011286:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8011288:	4b04      	ldr	r3, [pc, #16]	@ (801129c <SGP_TurnHeaterOff+0x18>)
 801128a:	2202      	movs	r2, #2
 801128c:	0019      	movs	r1, r3
 801128e:	2059      	movs	r0, #89	@ 0x59
 8011290:	f7ff ff2a 	bl	80110e8 <WriteRegister>
}
 8011294:	46c0      	nop			@ (mov r8, r8)
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	46c0      	nop			@ (mov r8, r8)
 801129c:	200000ac 	.word	0x200000ac

080112a0 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80112a0:	b590      	push	{r4, r7, lr}
 80112a2:	b087      	sub	sp, #28
 80112a4:	af02      	add	r7, sp, #8
 80112a6:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80112a8:	f7ff ffc2 	bl	8011230 <SGP_HeatedUp>
 80112ac:	1e03      	subs	r3, r0, #0
 80112ae:	d032      	beq.n	8011316 <SGP_GetMeasurementValues+0x76>
 80112b0:	4b80      	ldr	r3, [pc, #512]	@ (80114b4 <SGP_GetMeasurementValues+0x214>)
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	2201      	movs	r2, #1
 80112b6:	4053      	eors	r3, r2
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d02b      	beq.n	8011316 <SGP_GetMeasurementValues+0x76>
 80112be:	4b7e      	ldr	r3, [pc, #504]	@ (80114b8 <SGP_GetMeasurementValues+0x218>)
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	2201      	movs	r2, #1
 80112c4:	4053      	eors	r3, r2
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d024      	beq.n	8011316 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 80112cc:	4b79      	ldr	r3, [pc, #484]	@ (80114b4 <SGP_GetMeasurementValues+0x214>)
 80112ce:	2201      	movs	r2, #1
 80112d0:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80112d2:	4b7a      	ldr	r3, [pc, #488]	@ (80114bc <SGP_GetMeasurementValues+0x21c>)
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d00d      	beq.n	80112f6 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80112da:	4b79      	ldr	r3, [pc, #484]	@ (80114c0 <SGP_GetMeasurementValues+0x220>)
 80112dc:	2208      	movs	r2, #8
 80112de:	0019      	movs	r1, r3
 80112e0:	2059      	movs	r0, #89	@ 0x59
 80112e2:	f7ff ff01 	bl	80110e8 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 80112e6:	f003 fcf5 	bl	8014cd4 <HAL_GetTick>
 80112ea:	0003      	movs	r3, r0
 80112ec:	331e      	adds	r3, #30
 80112ee:	001a      	movs	r2, r3
 80112f0:	4b74      	ldr	r3, [pc, #464]	@ (80114c4 <SGP_GetMeasurementValues+0x224>)
 80112f2:	601a      	str	r2, [r3, #0]
 80112f4:	e00c      	b.n	8011310 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80112f6:	4b74      	ldr	r3, [pc, #464]	@ (80114c8 <SGP_GetMeasurementValues+0x228>)
 80112f8:	2208      	movs	r2, #8
 80112fa:	0019      	movs	r1, r3
 80112fc:	2059      	movs	r0, #89	@ 0x59
 80112fe:	f7ff fef3 	bl	80110e8 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8011302:	f003 fce7 	bl	8014cd4 <HAL_GetTick>
 8011306:	0003      	movs	r3, r0
 8011308:	331e      	adds	r3, #30
 801130a:	001a      	movs	r2, r3
 801130c:	4b6d      	ldr	r3, [pc, #436]	@ (80114c4 <SGP_GetMeasurementValues+0x224>)
 801130e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8011310:	4b69      	ldr	r3, [pc, #420]	@ (80114b8 <SGP_GetMeasurementValues+0x218>)
 8011312:	2201      	movs	r2, #1
 8011314:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8011316:	4b67      	ldr	r3, [pc, #412]	@ (80114b4 <SGP_GetMeasurementValues+0x214>)
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d100      	bne.n	8011320 <SGP_GetMeasurementValues+0x80>
 801131e:	e0ac      	b.n	801147a <SGP_GetMeasurementValues+0x1da>
 8011320:	f7ff ff94 	bl	801124c <SGP_MeasurementReady>
 8011324:	1e03      	subs	r3, r0, #0
 8011326:	d100      	bne.n	801132a <SGP_GetMeasurementValues+0x8a>
 8011328:	e0a7      	b.n	801147a <SGP_GetMeasurementValues+0x1da>
 801132a:	4b68      	ldr	r3, [pc, #416]	@ (80114cc <SGP_GetMeasurementValues+0x22c>)
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	2201      	movs	r2, #1
 8011330:	4053      	eors	r3, r2
 8011332:	b2db      	uxtb	r3, r3
 8011334:	2b00      	cmp	r3, #0
 8011336:	d100      	bne.n	801133a <SGP_GetMeasurementValues+0x9a>
 8011338:	e09f      	b.n	801147a <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 801133a:	4b64      	ldr	r3, [pc, #400]	@ (80114cc <SGP_GetMeasurementValues+0x22c>)
 801133c:	2201      	movs	r2, #1
 801133e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8011340:	4b63      	ldr	r3, [pc, #396]	@ (80114d0 <SGP_GetMeasurementValues+0x230>)
 8011342:	2203      	movs	r2, #3
 8011344:	0019      	movs	r1, r3
 8011346:	2059      	movs	r0, #89	@ 0x59
 8011348:	f7ff feb0 	bl	80110ac <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 801134c:	4b60      	ldr	r3, [pc, #384]	@ (80114d0 <SGP_GetMeasurementValues+0x230>)
 801134e:	2203      	movs	r2, #3
 8011350:	2103      	movs	r1, #3
 8011352:	0018      	movs	r0, r3
 8011354:	f000 f91a 	bl	801158c <CheckCRC>
 8011358:	0003      	movs	r3, r0
 801135a:	001a      	movs	r2, r3
 801135c:	2301      	movs	r3, #1
 801135e:	4053      	eors	r3, r2
 8011360:	b2db      	uxtb	r3, r3
 8011362:	2b00      	cmp	r3, #0
 8011364:	d02a      	beq.n	80113bc <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 8011366:	4a5b      	ldr	r2, [pc, #364]	@ (80114d4 <SGP_GetMeasurementValues+0x234>)
 8011368:	4b5b      	ldr	r3, [pc, #364]	@ (80114d8 <SGP_GetMeasurementValues+0x238>)
 801136a:	0019      	movs	r1, r3
 801136c:	2001      	movs	r0, #1
 801136e:	f002 ff39 	bl	80141e4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8011372:	4a5a      	ldr	r2, [pc, #360]	@ (80114dc <SGP_GetMeasurementValues+0x23c>)
 8011374:	4b5a      	ldr	r3, [pc, #360]	@ (80114e0 <SGP_GetMeasurementValues+0x240>)
 8011376:	0019      	movs	r1, r3
 8011378:	2002      	movs	r0, #2
 801137a:	f002 ff33 	bl	80141e4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 801137e:	230f      	movs	r3, #15
 8011380:	18fb      	adds	r3, r7, r3
 8011382:	2200      	movs	r2, #0
 8011384:	701a      	strb	r2, [r3, #0]
 8011386:	e012      	b.n	80113ae <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8011388:	240f      	movs	r4, #15
 801138a:	193b      	adds	r3, r7, r4
 801138c:	7818      	ldrb	r0, [r3, #0]
 801138e:	193b      	adds	r3, r7, r4
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	4a4f      	ldr	r2, [pc, #316]	@ (80114d0 <SGP_GetMeasurementValues+0x230>)
 8011394:	5cd3      	ldrb	r3, [r2, r3]
 8011396:	4a53      	ldr	r2, [pc, #332]	@ (80114e4 <SGP_GetMeasurementValues+0x244>)
 8011398:	4953      	ldr	r1, [pc, #332]	@ (80114e8 <SGP_GetMeasurementValues+0x248>)
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	0003      	movs	r3, r0
 801139e:	2003      	movs	r0, #3
 80113a0:	f002 ff20 	bl	80141e4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80113a4:	193b      	adds	r3, r7, r4
 80113a6:	781a      	ldrb	r2, [r3, #0]
 80113a8:	193b      	adds	r3, r7, r4
 80113aa:	3201      	adds	r2, #1
 80113ac:	701a      	strb	r2, [r3, #0]
 80113ae:	230f      	movs	r3, #15
 80113b0:	18fb      	adds	r3, r7, r3
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	2b02      	cmp	r3, #2
 80113b6:	d9e7      	bls.n	8011388 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 80113b8:	2300      	movs	r3, #0
 80113ba:	e076      	b.n	80114aa <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 80113bc:	f003 fc8a 	bl	8014cd4 <HAL_GetTick>
 80113c0:	0003      	movs	r3, r0
 80113c2:	22fa      	movs	r2, #250	@ 0xfa
 80113c4:	0092      	lsls	r2, r2, #2
 80113c6:	189a      	adds	r2, r3, r2
 80113c8:	4b48      	ldr	r3, [pc, #288]	@ (80114ec <SGP_GetMeasurementValues+0x24c>)
 80113ca:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80113cc:	f7ff ff5a 	bl	8011284 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 80113d0:	4b47      	ldr	r3, [pc, #284]	@ (80114f0 <SGP_GetMeasurementValues+0x250>)
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	3301      	adds	r3, #1
 80113d6:	b2da      	uxtb	r2, r3
 80113d8:	4b45      	ldr	r3, [pc, #276]	@ (80114f0 <SGP_GetMeasurementValues+0x250>)
 80113da:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80113dc:	4b44      	ldr	r3, [pc, #272]	@ (80114f0 <SGP_GetMeasurementValues+0x250>)
 80113de:	781a      	ldrb	r2, [r3, #0]
 80113e0:	4b44      	ldr	r3, [pc, #272]	@ (80114f4 <SGP_GetMeasurementValues+0x254>)
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d348      	bcc.n	801147a <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80113e8:	4b39      	ldr	r3, [pc, #228]	@ (80114d0 <SGP_GetMeasurementValues+0x230>)
 80113ea:	785b      	ldrb	r3, [r3, #1]
 80113ec:	b21b      	sxth	r3, r3
 80113ee:	021b      	lsls	r3, r3, #8
 80113f0:	b21a      	sxth	r2, r3
 80113f2:	4b37      	ldr	r3, [pc, #220]	@ (80114d0 <SGP_GetMeasurementValues+0x230>)
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	b21b      	sxth	r3, r3
 80113f8:	4313      	orrs	r3, r2
 80113fa:	b21a      	sxth	r2, r3
 80113fc:	240c      	movs	r4, #12
 80113fe:	193b      	adds	r3, r7, r4
 8011400:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 8011402:	2300      	movs	r3, #0
 8011404:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8011406:	193b      	adds	r3, r7, r4
 8011408:	8819      	ldrh	r1, [r3, #0]
 801140a:	2308      	movs	r3, #8
 801140c:	18fa      	adds	r2, r7, r3
 801140e:	4b3a      	ldr	r3, [pc, #232]	@ (80114f8 <SGP_GetMeasurementValues+0x258>)
 8011410:	0018      	movs	r0, r3
 8011412:	f7fe fe87 	bl	8010124 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 8011416:	68ba      	ldr	r2, [r7, #8]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 801141c:	4b37      	ldr	r3, [pc, #220]	@ (80114fc <SGP_GetMeasurementValues+0x25c>)
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	3301      	adds	r3, #1
 8011422:	b2da      	uxtb	r2, r3
 8011424:	4b35      	ldr	r3, [pc, #212]	@ (80114fc <SGP_GetMeasurementValues+0x25c>)
 8011426:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8011428:	4b34      	ldr	r3, [pc, #208]	@ (80114fc <SGP_GetMeasurementValues+0x25c>)
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	2b01      	cmp	r3, #1
 801142e:	d10d      	bne.n	801144c <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8011430:	193b      	adds	r3, r7, r4
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	4a32      	ldr	r2, [pc, #200]	@ (8011500 <SGP_GetMeasurementValues+0x260>)
 8011436:	492c      	ldr	r1, [pc, #176]	@ (80114e8 <SGP_GetMeasurementValues+0x248>)
 8011438:	2003      	movs	r0, #3
 801143a:	f002 fed3 	bl	80141e4 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	4a30      	ldr	r2, [pc, #192]	@ (8011504 <SGP_GetMeasurementValues+0x264>)
 8011442:	4929      	ldr	r1, [pc, #164]	@ (80114e8 <SGP_GetMeasurementValues+0x248>)
 8011444:	2003      	movs	r0, #3
 8011446:	f002 fecd 	bl	80141e4 <CreateLine>
 801144a:	e006      	b.n	801145a <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 801144c:	4b2b      	ldr	r3, [pc, #172]	@ (80114fc <SGP_GetMeasurementValues+0x25c>)
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	2b0b      	cmp	r3, #11
 8011452:	d102      	bne.n	801145a <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 8011454:	4b29      	ldr	r3, [pc, #164]	@ (80114fc <SGP_GetMeasurementValues+0x25c>)
 8011456:	2200      	movs	r2, #0
 8011458:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	b29b      	uxth	r3, r3
 801145e:	0018      	movs	r0, r3
 8011460:	f001 fe32 	bl	80130c8 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 8011464:	4b22      	ldr	r3, [pc, #136]	@ (80114f0 <SGP_GetMeasurementValues+0x250>)
 8011466:	2200      	movs	r2, #0
 8011468:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 801146a:	4b14      	ldr	r3, [pc, #80]	@ (80114bc <SGP_GetMeasurementValues+0x21c>)
 801146c:	2200      	movs	r2, #0
 801146e:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8011470:	4b11      	ldr	r3, [pc, #68]	@ (80114b8 <SGP_GetMeasurementValues+0x218>)
 8011472:	2200      	movs	r2, #0
 8011474:	701a      	strb	r2, [r3, #0]
      return true;
 8011476:	2301      	movs	r3, #1
 8011478:	e017      	b.n	80114aa <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 801147a:	f7ff fef5 	bl	8011268 <SGP_MeasurementDone>
 801147e:	1e03      	subs	r3, r0, #0
 8011480:	d012      	beq.n	80114a8 <SGP_GetMeasurementValues+0x208>
 8011482:	4b0c      	ldr	r3, [pc, #48]	@ (80114b4 <SGP_GetMeasurementValues+0x214>)
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d00e      	beq.n	80114a8 <SGP_GetMeasurementValues+0x208>
 801148a:	4b10      	ldr	r3, [pc, #64]	@ (80114cc <SGP_GetMeasurementValues+0x22c>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d00a      	beq.n	80114a8 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8011492:	4a1d      	ldr	r2, [pc, #116]	@ (8011508 <SGP_GetMeasurementValues+0x268>)
 8011494:	4b14      	ldr	r3, [pc, #80]	@ (80114e8 <SGP_GetMeasurementValues+0x248>)
 8011496:	0019      	movs	r1, r3
 8011498:	2003      	movs	r0, #3
 801149a:	f002 fea3 	bl	80141e4 <CreateLine>
    SGP_StartMeasurement();
 801149e:	f7ff fe8f 	bl	80111c0 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80114a2:	4b05      	ldr	r3, [pc, #20]	@ (80114b8 <SGP_GetMeasurementValues+0x218>)
 80114a4:	2200      	movs	r2, #0
 80114a6:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80114a8:	2300      	movs	r3, #0
}
 80114aa:	0018      	movs	r0, r3
 80114ac:	46bd      	mov	sp, r7
 80114ae:	b005      	add	sp, #20
 80114b0:	bd90      	pop	{r4, r7, pc}
 80114b2:	46c0      	nop			@ (mov r8, r8)
 80114b4:	20001214 	.word	0x20001214
 80114b8:	200012c1 	.word	0x200012c1
 80114bc:	200012c0 	.word	0x200012c0
 80114c0:	200000bc 	.word	0x200000bc
 80114c4:	200000d0 	.word	0x200000d0
 80114c8:	200000b4 	.word	0x200000b4
 80114cc:	20001215 	.word	0x20001215
 80114d0:	20001204 	.word	0x20001204
 80114d4:	0802e104 	.word	0x0802e104
 80114d8:	0802e12c 	.word	0x0802e12c
 80114dc:	0802e130 	.word	0x0802e130
 80114e0:	0802e150 	.word	0x0802e150
 80114e4:	0802e154 	.word	0x0802e154
 80114e8:	0802e174 	.word	0x0802e174
 80114ec:	200000cc 	.word	0x200000cc
 80114f0:	2000120d 	.word	0x2000120d
 80114f4:	200000c6 	.word	0x200000c6
 80114f8:	20001218 	.word	0x20001218
 80114fc:	2000120e 	.word	0x2000120e
 8011500:	0802e178 	.word	0x0802e178
 8011504:	0802e194 	.word	0x0802e194
 8011508:	0802e1b0 	.word	0x0802e1b0

0801150c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8011512:	4b1a      	ldr	r3, [pc, #104]	@ (801157c <SGP_DeviceConnected+0x70>)
 8011514:	2202      	movs	r2, #2
 8011516:	0019      	movs	r1, r3
 8011518:	2059      	movs	r0, #89	@ 0x59
 801151a:	f7ff fde5 	bl	80110e8 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 801151e:	2001      	movs	r0, #1
 8011520:	f003 fbe2 	bl	8014ce8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8011524:	4b16      	ldr	r3, [pc, #88]	@ (8011580 <SGP_DeviceConnected+0x74>)
 8011526:	2209      	movs	r2, #9
 8011528:	0019      	movs	r1, r3
 801152a:	2059      	movs	r0, #89	@ 0x59
 801152c:	f7ff fdbe 	bl	80110ac <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8011530:	1dfb      	adds	r3, r7, #7
 8011532:	2200      	movs	r2, #0
 8011534:	701a      	strb	r2, [r3, #0]
 8011536:	e011      	b.n	801155c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8011538:	1dfb      	adds	r3, r7, #7
 801153a:	7818      	ldrb	r0, [r3, #0]
 801153c:	1dfb      	adds	r3, r7, #7
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	4a0f      	ldr	r2, [pc, #60]	@ (8011580 <SGP_DeviceConnected+0x74>)
 8011542:	5cd3      	ldrb	r3, [r2, r3]
 8011544:	4a0f      	ldr	r2, [pc, #60]	@ (8011584 <SGP_DeviceConnected+0x78>)
 8011546:	4910      	ldr	r1, [pc, #64]	@ (8011588 <SGP_DeviceConnected+0x7c>)
 8011548:	9300      	str	r3, [sp, #0]
 801154a:	0003      	movs	r3, r0
 801154c:	2002      	movs	r0, #2
 801154e:	f002 fe49 	bl	80141e4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8011552:	1dfb      	adds	r3, r7, #7
 8011554:	781a      	ldrb	r2, [r3, #0]
 8011556:	1dfb      	adds	r3, r7, #7
 8011558:	3201      	adds	r2, #1
 801155a:	701a      	strb	r2, [r3, #0]
 801155c:	1dfb      	adds	r3, r7, #7
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	2b08      	cmp	r3, #8
 8011562:	d9e9      	bls.n	8011538 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8011564:	4b06      	ldr	r3, [pc, #24]	@ (8011580 <SGP_DeviceConnected+0x74>)
 8011566:	2203      	movs	r2, #3
 8011568:	2109      	movs	r1, #9
 801156a:	0018      	movs	r0, r3
 801156c:	f000 f80e 	bl	801158c <CheckCRC>
 8011570:	0003      	movs	r3, r0
}
 8011572:	0018      	movs	r0, r3
 8011574:	46bd      	mov	sp, r7
 8011576:	b002      	add	sp, #8
 8011578:	bd80      	pop	{r7, pc}
 801157a:	46c0      	nop			@ (mov r8, r8)
 801157c:	200000b0 	.word	0x200000b0
 8011580:	20001204 	.word	0x20001204
 8011584:	0802e1d0 	.word	0x0802e1d0
 8011588:	0802e150 	.word	0x0802e150

0801158c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 801158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801158e:	b08f      	sub	sp, #60	@ 0x3c
 8011590:	af00      	add	r7, sp, #0
 8011592:	6278      	str	r0, [r7, #36]	@ 0x24
 8011594:	0008      	movs	r0, r1
 8011596:	0011      	movs	r1, r2
 8011598:	2323      	movs	r3, #35	@ 0x23
 801159a:	18fb      	adds	r3, r7, r3
 801159c:	1c02      	adds	r2, r0, #0
 801159e:	701a      	strb	r2, [r3, #0]
 80115a0:	2322      	movs	r3, #34	@ 0x22
 80115a2:	18fb      	adds	r3, r7, r3
 80115a4:	1c0a      	adds	r2, r1, #0
 80115a6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80115a8:	2317      	movs	r3, #23
 80115aa:	2220      	movs	r2, #32
 80115ac:	189b      	adds	r3, r3, r2
 80115ae:	19db      	adds	r3, r3, r7
 80115b0:	2200      	movs	r2, #0
 80115b2:	701a      	strb	r2, [r3, #0]
 80115b4:	e09f      	b.n	80116f6 <CheckCRC+0x16a>
 80115b6:	466b      	mov	r3, sp
 80115b8:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80115ba:	2322      	movs	r3, #34	@ 0x22
 80115bc:	18fb      	adds	r3, r7, r3
 80115be:	781b      	ldrb	r3, [r3, #0]
 80115c0:	001a      	movs	r2, r3
 80115c2:	3a01      	subs	r2, #1
 80115c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80115c6:	60bb      	str	r3, [r7, #8]
 80115c8:	2200      	movs	r2, #0
 80115ca:	60fa      	str	r2, [r7, #12]
 80115cc:	68b8      	ldr	r0, [r7, #8]
 80115ce:	68f9      	ldr	r1, [r7, #12]
 80115d0:	0002      	movs	r2, r0
 80115d2:	0f52      	lsrs	r2, r2, #29
 80115d4:	000c      	movs	r4, r1
 80115d6:	00e4      	lsls	r4, r4, #3
 80115d8:	61fc      	str	r4, [r7, #28]
 80115da:	69fc      	ldr	r4, [r7, #28]
 80115dc:	4314      	orrs	r4, r2
 80115de:	61fc      	str	r4, [r7, #28]
 80115e0:	0002      	movs	r2, r0
 80115e2:	00d2      	lsls	r2, r2, #3
 80115e4:	61ba      	str	r2, [r7, #24]
 80115e6:	603b      	str	r3, [r7, #0]
 80115e8:	2200      	movs	r2, #0
 80115ea:	607a      	str	r2, [r7, #4]
 80115ec:	6838      	ldr	r0, [r7, #0]
 80115ee:	6879      	ldr	r1, [r7, #4]
 80115f0:	0002      	movs	r2, r0
 80115f2:	0f52      	lsrs	r2, r2, #29
 80115f4:	000c      	movs	r4, r1
 80115f6:	00e4      	lsls	r4, r4, #3
 80115f8:	617c      	str	r4, [r7, #20]
 80115fa:	697c      	ldr	r4, [r7, #20]
 80115fc:	4314      	orrs	r4, r2
 80115fe:	617c      	str	r4, [r7, #20]
 8011600:	0002      	movs	r2, r0
 8011602:	00d2      	lsls	r2, r2, #3
 8011604:	613a      	str	r2, [r7, #16]
 8011606:	3307      	adds	r3, #7
 8011608:	08db      	lsrs	r3, r3, #3
 801160a:	00db      	lsls	r3, r3, #3
 801160c:	466a      	mov	r2, sp
 801160e:	1ad3      	subs	r3, r2, r3
 8011610:	469d      	mov	sp, r3
 8011612:	466b      	mov	r3, sp
 8011614:	3300      	adds	r3, #0
 8011616:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8011618:	2316      	movs	r3, #22
 801161a:	2220      	movs	r2, #32
 801161c:	189b      	adds	r3, r3, r2
 801161e:	19db      	adds	r3, r3, r7
 8011620:	2200      	movs	r2, #0
 8011622:	701a      	strb	r2, [r3, #0]
 8011624:	e01e      	b.n	8011664 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8011626:	2317      	movs	r3, #23
 8011628:	2220      	movs	r2, #32
 801162a:	189b      	adds	r3, r3, r2
 801162c:	19db      	adds	r3, r3, r7
 801162e:	781a      	ldrb	r2, [r3, #0]
 8011630:	2116      	movs	r1, #22
 8011632:	2320      	movs	r3, #32
 8011634:	18cb      	adds	r3, r1, r3
 8011636:	19db      	adds	r3, r3, r7
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	18d3      	adds	r3, r2, r3
 801163c:	001a      	movs	r2, r3
 801163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011640:	189a      	adds	r2, r3, r2
 8011642:	0008      	movs	r0, r1
 8011644:	2320      	movs	r3, #32
 8011646:	18cb      	adds	r3, r1, r3
 8011648:	19db      	adds	r3, r3, r7
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	7811      	ldrb	r1, [r2, #0]
 801164e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011650:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8011652:	2320      	movs	r3, #32
 8011654:	18c3      	adds	r3, r0, r3
 8011656:	19db      	adds	r3, r3, r7
 8011658:	781a      	ldrb	r2, [r3, #0]
 801165a:	2320      	movs	r3, #32
 801165c:	18c3      	adds	r3, r0, r3
 801165e:	19db      	adds	r3, r3, r7
 8011660:	3201      	adds	r2, #1
 8011662:	701a      	strb	r2, [r3, #0]
 8011664:	2316      	movs	r3, #22
 8011666:	2220      	movs	r2, #32
 8011668:	189b      	adds	r3, r3, r2
 801166a:	19da      	adds	r2, r3, r7
 801166c:	2322      	movs	r3, #34	@ 0x22
 801166e:	18fb      	adds	r3, r7, r3
 8011670:	7812      	ldrb	r2, [r2, #0]
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	429a      	cmp	r2, r3
 8011676:	d3d6      	bcc.n	8011626 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8011678:	2417      	movs	r4, #23
 801167a:	2320      	movs	r3, #32
 801167c:	18e3      	adds	r3, r4, r3
 801167e:	19db      	adds	r3, r3, r7
 8011680:	781a      	ldrb	r2, [r3, #0]
 8011682:	2322      	movs	r3, #34	@ 0x22
 8011684:	18fb      	adds	r3, r7, r3
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	18d3      	adds	r3, r2, r3
 801168a:	3b01      	subs	r3, #1
 801168c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801168e:	18d2      	adds	r2, r2, r3
 8011690:	250b      	movs	r5, #11
 8011692:	2320      	movs	r3, #32
 8011694:	18eb      	adds	r3, r5, r3
 8011696:	19db      	adds	r3, r3, r7
 8011698:	7812      	ldrb	r2, [r2, #0]
 801169a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 801169c:	2322      	movs	r3, #34	@ 0x22
 801169e:	18fb      	adds	r3, r7, r3
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	3b01      	subs	r3, #1
 80116a4:	b2da      	uxtb	r2, r3
 80116a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116a8:	0011      	movs	r1, r2
 80116aa:	0018      	movs	r0, r3
 80116ac:	f000 f838 	bl	8011720 <CalculateCRC>
 80116b0:	0003      	movs	r3, r0
 80116b2:	001a      	movs	r2, r3
 80116b4:	2320      	movs	r3, #32
 80116b6:	18eb      	adds	r3, r5, r3
 80116b8:	19db      	adds	r3, r3, r7
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	4293      	cmp	r3, r2
 80116be:	d00c      	beq.n	80116da <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80116c0:	2320      	movs	r3, #32
 80116c2:	18e3      	adds	r3, r4, r3
 80116c4:	19db      	adds	r3, r3, r7
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	3301      	adds	r3, #1
 80116ca:	4a13      	ldr	r2, [pc, #76]	@ (8011718 <CheckCRC+0x18c>)
 80116cc:	4913      	ldr	r1, [pc, #76]	@ (801171c <CheckCRC+0x190>)
 80116ce:	2001      	movs	r0, #1
 80116d0:	f002 fd88 	bl	80141e4 <CreateLine>
      return false;
 80116d4:	2300      	movs	r3, #0
 80116d6:	46b5      	mov	sp, r6
 80116d8:	e019      	b.n	801170e <CheckCRC+0x182>
 80116da:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80116dc:	2217      	movs	r2, #23
 80116de:	2320      	movs	r3, #32
 80116e0:	18d3      	adds	r3, r2, r3
 80116e2:	19db      	adds	r3, r3, r7
 80116e4:	2120      	movs	r1, #32
 80116e6:	1852      	adds	r2, r2, r1
 80116e8:	19d1      	adds	r1, r2, r7
 80116ea:	2222      	movs	r2, #34	@ 0x22
 80116ec:	18ba      	adds	r2, r7, r2
 80116ee:	7809      	ldrb	r1, [r1, #0]
 80116f0:	7812      	ldrb	r2, [r2, #0]
 80116f2:	188a      	adds	r2, r1, r2
 80116f4:	701a      	strb	r2, [r3, #0]
 80116f6:	2317      	movs	r3, #23
 80116f8:	2220      	movs	r2, #32
 80116fa:	189b      	adds	r3, r3, r2
 80116fc:	19da      	adds	r2, r3, r7
 80116fe:	2323      	movs	r3, #35	@ 0x23
 8011700:	18fb      	adds	r3, r7, r3
 8011702:	7812      	ldrb	r2, [r2, #0]
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	429a      	cmp	r2, r3
 8011708:	d200      	bcs.n	801170c <CheckCRC+0x180>
 801170a:	e754      	b.n	80115b6 <CheckCRC+0x2a>
    }
  }
  return true;
 801170c:	2301      	movs	r3, #1
}
 801170e:	0018      	movs	r0, r3
 8011710:	46bd      	mov	sp, r7
 8011712:	b00f      	add	sp, #60	@ 0x3c
 8011714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011716:	46c0      	nop			@ (mov r8, r8)
 8011718:	0802e1f0 	.word	0x0802e1f0
 801171c:	0802e12c 	.word	0x0802e12c

08011720 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8011720:	b580      	push	{r7, lr}
 8011722:	b084      	sub	sp, #16
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	000a      	movs	r2, r1
 801172a:	1cfb      	adds	r3, r7, #3
 801172c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 801172e:	230f      	movs	r3, #15
 8011730:	18fb      	adds	r3, r7, r3
 8011732:	22ff      	movs	r2, #255	@ 0xff
 8011734:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8011736:	230e      	movs	r3, #14
 8011738:	18fb      	adds	r3, r7, r3
 801173a:	2200      	movs	r2, #0
 801173c:	701a      	strb	r2, [r3, #0]
 801173e:	e038      	b.n	80117b2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011740:	230e      	movs	r3, #14
 8011742:	18fb      	adds	r3, r7, r3
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	18d3      	adds	r3, r2, r3
 801174a:	7819      	ldrb	r1, [r3, #0]
 801174c:	220f      	movs	r2, #15
 801174e:	18bb      	adds	r3, r7, r2
 8011750:	18ba      	adds	r2, r7, r2
 8011752:	7812      	ldrb	r2, [r2, #0]
 8011754:	404a      	eors	r2, r1
 8011756:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8011758:	230d      	movs	r3, #13
 801175a:	18fb      	adds	r3, r7, r3
 801175c:	2200      	movs	r2, #0
 801175e:	701a      	strb	r2, [r3, #0]
 8011760:	e01c      	b.n	801179c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8011762:	210f      	movs	r1, #15
 8011764:	187b      	adds	r3, r7, r1
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	b25b      	sxtb	r3, r3
 801176a:	2b00      	cmp	r3, #0
 801176c:	da0a      	bge.n	8011784 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 801176e:	187b      	adds	r3, r7, r1
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	b25b      	sxtb	r3, r3
 8011774:	18db      	adds	r3, r3, r3
 8011776:	b25b      	sxtb	r3, r3
 8011778:	2231      	movs	r2, #49	@ 0x31
 801177a:	4053      	eors	r3, r2
 801177c:	b25a      	sxtb	r2, r3
 801177e:	187b      	adds	r3, r7, r1
 8011780:	701a      	strb	r2, [r3, #0]
 8011782:	e005      	b.n	8011790 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 8011784:	230f      	movs	r3, #15
 8011786:	18fa      	adds	r2, r7, r3
 8011788:	18fb      	adds	r3, r7, r3
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	18db      	adds	r3, r3, r3
 801178e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8011790:	210d      	movs	r1, #13
 8011792:	187b      	adds	r3, r7, r1
 8011794:	781a      	ldrb	r2, [r3, #0]
 8011796:	187b      	adds	r3, r7, r1
 8011798:	3201      	adds	r2, #1
 801179a:	701a      	strb	r2, [r3, #0]
 801179c:	230d      	movs	r3, #13
 801179e:	18fb      	adds	r3, r7, r3
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	2b07      	cmp	r3, #7
 80117a4:	d9dd      	bls.n	8011762 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80117a6:	210e      	movs	r1, #14
 80117a8:	187b      	adds	r3, r7, r1
 80117aa:	781a      	ldrb	r2, [r3, #0]
 80117ac:	187b      	adds	r3, r7, r1
 80117ae:	3201      	adds	r2, #1
 80117b0:	701a      	strb	r2, [r3, #0]
 80117b2:	230e      	movs	r3, #14
 80117b4:	18fa      	adds	r2, r7, r3
 80117b6:	1cfb      	adds	r3, r7, #3
 80117b8:	7812      	ldrb	r2, [r2, #0]
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d3bf      	bcc.n	8011740 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80117c0:	230f      	movs	r3, #15
 80117c2:	18fb      	adds	r3, r7, r3
 80117c4:	781b      	ldrb	r3, [r3, #0]
}
 80117c6:	0018      	movs	r0, r3
 80117c8:	46bd      	mov	sp, r7
 80117ca:	b004      	add	sp, #16
 80117cc:	bd80      	pop	{r7, pc}
	...

080117d0 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b084      	sub	sp, #16
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	4936      	ldr	r1, [pc, #216]	@ (80118b8 <SGP_SetHT+0xe8>)
 80117e0:	1c18      	adds	r0, r3, #0
 80117e2:	f7ef f86d 	bl	80008c0 <__aeabi_fadd>
 80117e6:	1c03      	adds	r3, r0, #0
 80117e8:	4934      	ldr	r1, [pc, #208]	@ (80118bc <SGP_SetHT+0xec>)
 80117ea:	1c18      	adds	r0, r3, #0
 80117ec:	f7ef fa5a 	bl	8000ca4 <__aeabi_fdiv>
 80117f0:	1c03      	adds	r3, r0, #0
 80117f2:	4933      	ldr	r1, [pc, #204]	@ (80118c0 <SGP_SetHT+0xf0>)
 80117f4:	1c18      	adds	r0, r3, #0
 80117f6:	f7ef fc23 	bl	8001040 <__aeabi_fmul>
 80117fa:	1c03      	adds	r3, r0, #0
 80117fc:	1c18      	adds	r0, r3, #0
 80117fe:	f7ee ff0d 	bl	800061c <__aeabi_f2uiz>
 8011802:	0003      	movs	r3, r0
 8011804:	b29a      	uxth	r2, r3
 8011806:	4b2f      	ldr	r3, [pc, #188]	@ (80118c4 <SGP_SetHT+0xf4>)
 8011808:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	492e      	ldr	r1, [pc, #184]	@ (80118c8 <SGP_SetHT+0xf8>)
 8011810:	1c18      	adds	r0, r3, #0
 8011812:	f7ef fa47 	bl	8000ca4 <__aeabi_fdiv>
 8011816:	1c03      	adds	r3, r0, #0
 8011818:	4929      	ldr	r1, [pc, #164]	@ (80118c0 <SGP_SetHT+0xf0>)
 801181a:	1c18      	adds	r0, r3, #0
 801181c:	f7ef fc10 	bl	8001040 <__aeabi_fmul>
 8011820:	1c03      	adds	r3, r0, #0
 8011822:	1c18      	adds	r0, r3, #0
 8011824:	f7ee fefa 	bl	800061c <__aeabi_f2uiz>
 8011828:	0003      	movs	r3, r0
 801182a:	b29a      	uxth	r2, r3
 801182c:	4b27      	ldr	r3, [pc, #156]	@ (80118cc <SGP_SetHT+0xfc>)
 801182e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8011830:	4b26      	ldr	r3, [pc, #152]	@ (80118cc <SGP_SetHT+0xfc>)
 8011832:	881b      	ldrh	r3, [r3, #0]
 8011834:	0a1b      	lsrs	r3, r3, #8
 8011836:	b29b      	uxth	r3, r3
 8011838:	b2da      	uxtb	r2, r3
 801183a:	4b25      	ldr	r3, [pc, #148]	@ (80118d0 <SGP_SetHT+0x100>)
 801183c:	709a      	strb	r2, [r3, #2]
 801183e:	4b24      	ldr	r3, [pc, #144]	@ (80118d0 <SGP_SetHT+0x100>)
 8011840:	789a      	ldrb	r2, [r3, #2]
 8011842:	210c      	movs	r1, #12
 8011844:	187b      	adds	r3, r7, r1
 8011846:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8011848:	4b20      	ldr	r3, [pc, #128]	@ (80118cc <SGP_SetHT+0xfc>)
 801184a:	881b      	ldrh	r3, [r3, #0]
 801184c:	b2da      	uxtb	r2, r3
 801184e:	4b20      	ldr	r3, [pc, #128]	@ (80118d0 <SGP_SetHT+0x100>)
 8011850:	70da      	strb	r2, [r3, #3]
 8011852:	4b1f      	ldr	r3, [pc, #124]	@ (80118d0 <SGP_SetHT+0x100>)
 8011854:	78da      	ldrb	r2, [r3, #3]
 8011856:	187b      	adds	r3, r7, r1
 8011858:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 801185a:	187b      	adds	r3, r7, r1
 801185c:	2102      	movs	r1, #2
 801185e:	0018      	movs	r0, r3
 8011860:	f7ff ff5e 	bl	8011720 <CalculateCRC>
 8011864:	0003      	movs	r3, r0
 8011866:	001a      	movs	r2, r3
 8011868:	4b19      	ldr	r3, [pc, #100]	@ (80118d0 <SGP_SetHT+0x100>)
 801186a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 801186c:	4b15      	ldr	r3, [pc, #84]	@ (80118c4 <SGP_SetHT+0xf4>)
 801186e:	881b      	ldrh	r3, [r3, #0]
 8011870:	0a1b      	lsrs	r3, r3, #8
 8011872:	b29b      	uxth	r3, r3
 8011874:	b2da      	uxtb	r2, r3
 8011876:	4b16      	ldr	r3, [pc, #88]	@ (80118d0 <SGP_SetHT+0x100>)
 8011878:	715a      	strb	r2, [r3, #5]
 801187a:	4b15      	ldr	r3, [pc, #84]	@ (80118d0 <SGP_SetHT+0x100>)
 801187c:	795a      	ldrb	r2, [r3, #5]
 801187e:	2108      	movs	r1, #8
 8011880:	187b      	adds	r3, r7, r1
 8011882:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8011884:	4b0f      	ldr	r3, [pc, #60]	@ (80118c4 <SGP_SetHT+0xf4>)
 8011886:	881b      	ldrh	r3, [r3, #0]
 8011888:	b2da      	uxtb	r2, r3
 801188a:	4b11      	ldr	r3, [pc, #68]	@ (80118d0 <SGP_SetHT+0x100>)
 801188c:	719a      	strb	r2, [r3, #6]
 801188e:	4b10      	ldr	r3, [pc, #64]	@ (80118d0 <SGP_SetHT+0x100>)
 8011890:	799a      	ldrb	r2, [r3, #6]
 8011892:	187b      	adds	r3, r7, r1
 8011894:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8011896:	187b      	adds	r3, r7, r1
 8011898:	2102      	movs	r1, #2
 801189a:	0018      	movs	r0, r3
 801189c:	f7ff ff40 	bl	8011720 <CalculateCRC>
 80118a0:	0003      	movs	r3, r0
 80118a2:	001a      	movs	r2, r3
 80118a4:	4b0a      	ldr	r3, [pc, #40]	@ (80118d0 <SGP_SetHT+0x100>)
 80118a6:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80118a8:	4b0a      	ldr	r3, [pc, #40]	@ (80118d4 <SGP_SetHT+0x104>)
 80118aa:	2201      	movs	r2, #1
 80118ac:	701a      	strb	r2, [r3, #0]
}
 80118ae:	46c0      	nop			@ (mov r8, r8)
 80118b0:	46bd      	mov	sp, r7
 80118b2:	b004      	add	sp, #16
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	46c0      	nop			@ (mov r8, r8)
 80118b8:	42340000 	.word	0x42340000
 80118bc:	432f0000 	.word	0x432f0000
 80118c0:	477fff00 	.word	0x477fff00
 80118c4:	200012be 	.word	0x200012be
 80118c8:	42c80000 	.word	0x42c80000
 80118cc:	200012bc 	.word	0x200012bc
 80118d0:	200000bc 	.word	0x200000bc
 80118d4:	200012c0 	.word	0x200012c0

080118d8 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 80118d8:	b580      	push	{r7, lr}
 80118da:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 80118dc:	4a09      	ldr	r2, [pc, #36]	@ (8011904 <SGP_SoftReset+0x2c>)
 80118de:	4b0a      	ldr	r3, [pc, #40]	@ (8011908 <SGP_SoftReset+0x30>)
 80118e0:	0019      	movs	r1, r3
 80118e2:	2003      	movs	r0, #3
 80118e4:	f002 fc7e 	bl	80141e4 <CreateLine>
  SGP_TurnHeaterOff();
 80118e8:	f7ff fccc 	bl	8011284 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 80118ec:	200a      	movs	r0, #10
 80118ee:	f003 f9fb 	bl	8014ce8 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80118f2:	4b06      	ldr	r3, [pc, #24]	@ (801190c <SGP_SoftReset+0x34>)
 80118f4:	2202      	movs	r2, #2
 80118f6:	0019      	movs	r1, r3
 80118f8:	2059      	movs	r0, #89	@ 0x59
 80118fa:	f7ff fbf5 	bl	80110e8 <WriteRegister>
}
 80118fe:	46c0      	nop			@ (mov r8, r8)
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	0802e298 	.word	0x0802e298
 8011908:	0802e174 	.word	0x0802e174
 801190c:	200000c4 	.word	0x200000c4

08011910 <ResetVOCresult>:

void ResetVOCresult(void) {
 8011910:	b580      	push	{r7, lr}
 8011912:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8011914:	4b02      	ldr	r3, [pc, #8]	@ (8011920 <ResetVOCresult+0x10>)
 8011916:	2200      	movs	r2, #0
 8011918:	601a      	str	r2, [r3, #0]
}
 801191a:	46c0      	nop			@ (mov r8, r8)
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	200012c4 	.word	0x200012c4

08011924 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8011924:	b580      	push	{r7, lr}
 8011926:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8011928:	4b4b      	ldr	r3, [pc, #300]	@ (8011a58 <SGP_Upkeep+0x134>)
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	2b07      	cmp	r3, #7
 801192e:	d900      	bls.n	8011932 <SGP_Upkeep+0xe>
 8011930:	e07a      	b.n	8011a28 <SGP_Upkeep+0x104>
 8011932:	009a      	lsls	r2, r3, #2
 8011934:	4b49      	ldr	r3, [pc, #292]	@ (8011a5c <SGP_Upkeep+0x138>)
 8011936:	18d3      	adds	r3, r2, r3
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 801193c:	4a48      	ldr	r2, [pc, #288]	@ (8011a60 <SGP_Upkeep+0x13c>)
 801193e:	4b49      	ldr	r3, [pc, #292]	@ (8011a64 <SGP_Upkeep+0x140>)
 8011940:	0019      	movs	r1, r3
 8011942:	2003      	movs	r0, #3
 8011944:	f002 fc4e 	bl	80141e4 <CreateLine>
    break;
 8011948:	e081      	b.n	8011a4e <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 801194a:	f7ff ffe1 	bl	8011910 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 801194e:	4b42      	ldr	r3, [pc, #264]	@ (8011a58 <SGP_Upkeep+0x134>)
 8011950:	2201      	movs	r2, #1
 8011952:	701a      	strb	r2, [r3, #0]
    break;
 8011954:	e07b      	b.n	8011a4e <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8011956:	f7fc fc2b 	bl	800e1b0 <getSensorLock>
 801195a:	1e03      	subs	r3, r0, #0
 801195c:	d000      	beq.n	8011960 <SGP_Upkeep+0x3c>
 801195e:	e06f      	b.n	8011a40 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8011960:	2005      	movs	r0, #5
 8011962:	f7fc fc11 	bl	800e188 <setSensorLock>
    SetMeasurementIndicator();
 8011966:	f001 f98f 	bl	8012c88 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 801196a:	f7ff fc29 	bl	80111c0 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 801196e:	200a      	movs	r0, #10
 8011970:	f003 f9ba 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 8011974:	2000      	movs	r0, #0
 8011976:	f7fc fc07 	bl	800e188 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 801197a:	4b37      	ldr	r3, [pc, #220]	@ (8011a58 <SGP_Upkeep+0x134>)
 801197c:	2202      	movs	r2, #2
 801197e:	701a      	strb	r2, [r3, #0]
    break;
 8011980:	e065      	b.n	8011a4e <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 8011982:	f7fc fc15 	bl	800e1b0 <getSensorLock>
 8011986:	1e03      	subs	r3, r0, #0
 8011988:	d15c      	bne.n	8011a44 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 801198a:	2005      	movs	r0, #5
 801198c:	f7fc fbfc 	bl	800e188 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 8011990:	4b35      	ldr	r3, [pc, #212]	@ (8011a68 <SGP_Upkeep+0x144>)
 8011992:	0018      	movs	r0, r3
 8011994:	f7ff fc84 	bl	80112a0 <SGP_GetMeasurementValues>
 8011998:	1e03      	subs	r3, r0, #0
 801199a:	d002      	beq.n	80119a2 <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 801199c:	4b2e      	ldr	r3, [pc, #184]	@ (8011a58 <SGP_Upkeep+0x134>)
 801199e:	2203      	movs	r2, #3
 80119a0:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 80119a2:	200a      	movs	r0, #10
 80119a4:	f003 f9a0 	bl	8014ce8 <HAL_Delay>
    setSensorLock(FREE);
 80119a8:	2000      	movs	r0, #0
 80119aa:	f7fc fbed 	bl	800e188 <setSensorLock>
    break;
 80119ae:	e04e      	b.n	8011a4e <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 80119b0:	4b2d      	ldr	r3, [pc, #180]	@ (8011a68 <SGP_Upkeep+0x144>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	0018      	movs	r0, r3
 80119b8:	f7f3 f8a4 	bl	8004b04 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 80119bc:	4b26      	ldr	r3, [pc, #152]	@ (8011a58 <SGP_Upkeep+0x134>)
 80119be:	2206      	movs	r2, #6
 80119c0:	701a      	strb	r2, [r3, #0]
    break;
 80119c2:	e044      	b.n	8011a4e <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 80119c4:	4b24      	ldr	r3, [pc, #144]	@ (8011a58 <SGP_Upkeep+0x134>)
 80119c6:	2207      	movs	r2, #7
 80119c8:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 80119ca:	4b28      	ldr	r3, [pc, #160]	@ (8011a6c <SGP_Upkeep+0x148>)
 80119cc:	781b      	ldrb	r3, [r3, #0]
 80119ce:	2b03      	cmp	r3, #3
 80119d0:	d912      	bls.n	80119f8 <SGP_Upkeep+0xd4>
 80119d2:	4b27      	ldr	r3, [pc, #156]	@ (8011a70 <SGP_Upkeep+0x14c>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	2201      	movs	r2, #1
 80119d8:	4053      	eors	r3, r2
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d00b      	beq.n	80119f8 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 80119e0:	4b24      	ldr	r3, [pc, #144]	@ (8011a74 <SGP_Upkeep+0x150>)
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d004      	beq.n	80119f2 <SGP_Upkeep+0xce>
        SGP_SoftReset();
 80119e8:	f7ff ff76 	bl	80118d8 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 80119ec:	2000      	movs	r0, #0
 80119ee:	f7fb ff73 	bl	800d8d8 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 80119f2:	4b20      	ldr	r3, [pc, #128]	@ (8011a74 <SGP_Upkeep+0x150>)
 80119f4:	2201      	movs	r2, #1
 80119f6:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 80119f8:	f003 f96c 	bl	8014cd4 <HAL_GetTick>
 80119fc:	0003      	movs	r3, r0
 80119fe:	22c8      	movs	r2, #200	@ 0xc8
 8011a00:	0092      	lsls	r2, r2, #2
 8011a02:	189a      	adds	r2, r3, r2
 8011a04:	4b1c      	ldr	r3, [pc, #112]	@ (8011a78 <SGP_Upkeep+0x154>)
 8011a06:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8011a08:	f001 f956 	bl	8012cb8 <ResetMeasurementIndicator>
  break;
 8011a0c:	e01f      	b.n	8011a4e <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8011a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8011a78 <SGP_Upkeep+0x154>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	0018      	movs	r0, r3
 8011a14:	f002 fb90 	bl	8014138 <TimestampIsReached>
 8011a18:	1e03      	subs	r3, r0, #0
 8011a1a:	d015      	beq.n	8011a48 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8011a1c:	f7ff fbb8 	bl	8011190 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8011a20:	4b0d      	ldr	r3, [pc, #52]	@ (8011a58 <SGP_Upkeep+0x134>)
 8011a22:	2200      	movs	r2, #0
 8011a24:	701a      	strb	r2, [r3, #0]
    }
    break;
 8011a26:	e00f      	b.n	8011a48 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8011a28:	4b0b      	ldr	r3, [pc, #44]	@ (8011a58 <SGP_Upkeep+0x134>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8011a2e:	f7fc fbbf 	bl	800e1b0 <getSensorLock>
 8011a32:	0003      	movs	r3, r0
 8011a34:	2b05      	cmp	r3, #5
 8011a36:	d109      	bne.n	8011a4c <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8011a38:	2000      	movs	r0, #0
 8011a3a:	f7fc fba5 	bl	800e188 <setSensorLock>
    }
    break;
 8011a3e:	e005      	b.n	8011a4c <SGP_Upkeep+0x128>
      break;
 8011a40:	46c0      	nop			@ (mov r8, r8)
 8011a42:	e004      	b.n	8011a4e <SGP_Upkeep+0x12a>
      break;
 8011a44:	46c0      	nop			@ (mov r8, r8)
 8011a46:	e002      	b.n	8011a4e <SGP_Upkeep+0x12a>
    break;
 8011a48:	46c0      	nop			@ (mov r8, r8)
 8011a4a:	e000      	b.n	8011a4e <SGP_Upkeep+0x12a>
    break;
 8011a4c:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8011a4e:	4b02      	ldr	r3, [pc, #8]	@ (8011a58 <SGP_Upkeep+0x134>)
 8011a50:	781b      	ldrb	r3, [r3, #0]
}
 8011a52:	0018      	movs	r0, r3
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	200012c8 	.word	0x200012c8
 8011a5c:	0802ee74 	.word	0x0802ee74
 8011a60:	0802e2b0 	.word	0x0802e2b0
 8011a64:	0802e174 	.word	0x0802e174
 8011a68:	200012c4 	.word	0x200012c4
 8011a6c:	2000120e 	.word	0x2000120e
 8011a70:	20002165 	.word	0x20002165
 8011a74:	200011f8 	.word	0x200011f8
 8011a78:	20001210 	.word	0x20001210

08011a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	0002      	movs	r2, r0
 8011a84:	1dfb      	adds	r3, r7, #7
 8011a86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8011a88:	1dfb      	adds	r3, r7, #7
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8011a8e:	d809      	bhi.n	8011aa4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011a90:	1dfb      	adds	r3, r7, #7
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	001a      	movs	r2, r3
 8011a96:	231f      	movs	r3, #31
 8011a98:	401a      	ands	r2, r3
 8011a9a:	4b04      	ldr	r3, [pc, #16]	@ (8011aac <__NVIC_EnableIRQ+0x30>)
 8011a9c:	2101      	movs	r1, #1
 8011a9e:	4091      	lsls	r1, r2
 8011aa0:	000a      	movs	r2, r1
 8011aa2:	601a      	str	r2, [r3, #0]
  }
}
 8011aa4:	46c0      	nop			@ (mov r8, r8)
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	b002      	add	sp, #8
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	e000e100 	.word	0xe000e100

08011ab0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	0002      	movs	r2, r0
 8011ab8:	1dfb      	adds	r3, r7, #7
 8011aba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8011abc:	1dfb      	adds	r3, r7, #7
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	2b7f      	cmp	r3, #127	@ 0x7f
 8011ac2:	d810      	bhi.n	8011ae6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011ac4:	1dfb      	adds	r3, r7, #7
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	001a      	movs	r2, r3
 8011aca:	231f      	movs	r3, #31
 8011acc:	4013      	ands	r3, r2
 8011ace:	4908      	ldr	r1, [pc, #32]	@ (8011af0 <__NVIC_DisableIRQ+0x40>)
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	409a      	lsls	r2, r3
 8011ad4:	0013      	movs	r3, r2
 8011ad6:	2280      	movs	r2, #128	@ 0x80
 8011ad8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011ada:	f3bf 8f4f 	dsb	sy
}
 8011ade:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011ae0:	f3bf 8f6f 	isb	sy
}
 8011ae4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8011ae6:	46c0      	nop			@ (mov r8, r8)
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	b002      	add	sp, #8
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	46c0      	nop			@ (mov r8, r8)
 8011af0:	e000e100 	.word	0xe000e100

08011af4 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8011af4:	b5b0      	push	{r4, r5, r7, lr}
 8011af6:	b088      	sub	sp, #32
 8011af8:	af02      	add	r7, sp, #8
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	0008      	movs	r0, r1
 8011afe:	0011      	movs	r1, r2
 8011b00:	1cfb      	adds	r3, r7, #3
 8011b02:	1c02      	adds	r2, r0, #0
 8011b04:	701a      	strb	r2, [r3, #0]
 8011b06:	1cbb      	adds	r3, r7, #2
 8011b08:	1c0a      	adds	r2, r1, #0
 8011b0a:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8011b0c:	4b5b      	ldr	r3, [pc, #364]	@ (8011c7c <getSoundData+0x188>)
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2201      	movs	r2, #1
 8011b14:	4053      	eors	r3, r2
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d107      	bne.n	8011b2c <getSoundData+0x38>
 8011b1c:	4b58      	ldr	r3, [pc, #352]	@ (8011c80 <getSoundData+0x18c>)
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	2201      	movs	r2, #1
 8011b24:	4053      	eors	r3, r2
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d001      	beq.n	8011b30 <getSoundData+0x3c>
    {
        return false;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	e0a0      	b.n	8011c72 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8011b30:	4b54      	ldr	r3, [pc, #336]	@ (8011c84 <getSoundData+0x190>)
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	b2db      	uxtb	r3, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d005      	beq.n	8011b46 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011b3a:	4b53      	ldr	r3, [pc, #332]	@ (8011c88 <getSoundData+0x194>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	b25b      	sxtb	r3, r3
 8011b40:	0018      	movs	r0, r3
 8011b42:	f7ff ffb5 	bl	8011ab0 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8011b46:	f3bf 8f4f 	dsb	sy
}
 8011b4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011b4c:	f3bf 8f6f 	isb	sy
}
 8011b50:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8011b52:	1cfb      	adds	r3, r7, #3
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d04c      	beq.n	8011bf4 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8011b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8011c8c <getSoundData+0x198>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d11b      	bne.n	8011b9a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2200      	movs	r2, #0
 8011b66:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011b6e:	2300      	movs	r3, #0
 8011b70:	617b      	str	r3, [r7, #20]
 8011b72:	e00e      	b.n	8011b92 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	18d3      	adds	r3, r2, r3
 8011b7a:	3302      	adds	r3, #2
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	18d3      	adds	r3, r2, r3
 8011b86:	3308      	adds	r3, #8
 8011b88:	2200      	movs	r2, #0
 8011b8a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	3301      	adds	r3, #1
 8011b90:	617b      	str	r3, [r7, #20]
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	2b05      	cmp	r3, #5
 8011b96:	d9ed      	bls.n	8011b74 <getSoundData+0x80>
 8011b98:	e02c      	b.n	8011bf4 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	1c59      	adds	r1, r3, #1
 8011ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8011c90 <getSoundData+0x19c>)
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8011c94 <getSoundData+0x1a0>)
 8011ba6:	681c      	ldr	r4, [r3, #0]
 8011ba8:	4b38      	ldr	r3, [pc, #224]	@ (8011c8c <getSoundData+0x198>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	9300      	str	r3, [sp, #0]
 8011bae:	0023      	movs	r3, r4
 8011bb0:	f000 fde8 	bl	8012784 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	613b      	str	r3, [r7, #16]
 8011bb8:	e019      	b.n	8011bee <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	18d3      	adds	r3, r2, r3
 8011bc0:	1c98      	adds	r0, r3, #2
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	3308      	adds	r3, #8
 8011bc6:	687a      	ldr	r2, [r7, #4]
 8011bc8:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8011bca:	4b33      	ldr	r3, [pc, #204]	@ (8011c98 <getSoundData+0x1a4>)
 8011bcc:	693a      	ldr	r2, [r7, #16]
 8011bce:	0092      	lsls	r2, r2, #2
 8011bd0:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8011bd2:	4b32      	ldr	r3, [pc, #200]	@ (8011c9c <getSoundData+0x1a8>)
 8011bd4:	693a      	ldr	r2, [r7, #16]
 8011bd6:	0092      	lsls	r2, r2, #2
 8011bd8:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011bda:	4b2c      	ldr	r3, [pc, #176]	@ (8011c8c <getSoundData+0x198>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	9300      	str	r3, [sp, #0]
 8011be0:	0013      	movs	r3, r2
 8011be2:	0022      	movs	r2, r4
 8011be4:	f000 fdce 	bl	8012784 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	3301      	adds	r3, #1
 8011bec:	613b      	str	r3, [r7, #16]
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	2b05      	cmp	r3, #5
 8011bf2:	d9e2      	bls.n	8011bba <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8011bf4:	1cbb      	adds	r3, r7, #2
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d028      	beq.n	8011c4e <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8011bfc:	240e      	movs	r4, #14
 8011bfe:	193b      	adds	r3, r7, r4
 8011c00:	2200      	movs	r2, #0
 8011c02:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8011c04:	250d      	movs	r5, #13
 8011c06:	197b      	adds	r3, r7, r5
 8011c08:	2200      	movs	r2, #0
 8011c0a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8011c0c:	4b24      	ldr	r3, [pc, #144]	@ (8011ca0 <getSoundData+0x1ac>)
 8011c0e:	6818      	ldr	r0, [r3, #0]
 8011c10:	4924      	ldr	r1, [pc, #144]	@ (8011ca4 <getSoundData+0x1b0>)
 8011c12:	197b      	adds	r3, r7, r5
 8011c14:	193a      	adds	r2, r7, r4
 8011c16:	f000 fe59 	bl	80128cc <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8011c1a:	193b      	adds	r3, r7, r4
 8011c1c:	881a      	ldrh	r2, [r3, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	21ff      	movs	r1, #255	@ 0xff
 8011c22:	4011      	ands	r1, r2
 8011c24:	000c      	movs	r4, r1
 8011c26:	7b99      	ldrb	r1, [r3, #14]
 8011c28:	2000      	movs	r0, #0
 8011c2a:	4001      	ands	r1, r0
 8011c2c:	1c08      	adds	r0, r1, #0
 8011c2e:	1c21      	adds	r1, r4, #0
 8011c30:	4301      	orrs	r1, r0
 8011c32:	7399      	strb	r1, [r3, #14]
 8011c34:	0a12      	lsrs	r2, r2, #8
 8011c36:	b290      	uxth	r0, r2
 8011c38:	7bda      	ldrb	r2, [r3, #15]
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	400a      	ands	r2, r1
 8011c3e:	1c11      	adds	r1, r2, #0
 8011c40:	1c02      	adds	r2, r0, #0
 8011c42:	430a      	orrs	r2, r1
 8011c44:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8011c46:	197b      	adds	r3, r7, r5
 8011c48:	781a      	ldrb	r2, [r3, #0]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8011c4e:	f000 f86f 	bl	8011d30 <micSettlingComplete>
 8011c52:	0003      	movs	r3, r0
 8011c54:	001a      	movs	r2, r3
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8011c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8011c84 <getSoundData+0x190>)
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	b2db      	uxtb	r3, r3
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d005      	beq.n	8011c70 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011c64:	4b08      	ldr	r3, [pc, #32]	@ (8011c88 <getSoundData+0x194>)
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	b25b      	sxtb	r3, r3
 8011c6a:	0018      	movs	r0, r3
 8011c6c:	f7ff ff06 	bl	8011a7c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8011c70:	2301      	movs	r3, #1
}
 8011c72:	0018      	movs	r0, r3
 8011c74:	46bd      	mov	sp, r7
 8011c76:	b006      	add	sp, #24
 8011c78:	bdb0      	pop	{r4, r5, r7, pc}
 8011c7a:	46c0      	nop			@ (mov r8, r8)
 8011c7c:	200012ca 	.word	0x200012ca
 8011c80:	200012cd 	.word	0x200012cd
 8011c84:	200012cc 	.word	0x200012cc
 8011c88:	20001d1c 	.word	0x20001d1c
 8011c8c:	20001d58 	.word	0x20001d58
 8011c90:	20001d20 	.word	0x20001d20
 8011c94:	20001d24 	.word	0x20001d24
 8011c98:	20001d28 	.word	0x20001d28
 8011c9c:	20001d40 	.word	0x20001d40
 8011ca0:	200012d4 	.word	0x200012d4
 8011ca4:	3b5c7333 	.word	0x3b5c7333

08011ca8 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b084      	sub	sp, #16
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	607a      	str	r2, [r7, #4]
 8011cb4:	001a      	movs	r2, r3
 8011cb6:	1cfb      	adds	r3, r7, #3
 8011cb8:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8011cba:	4b09      	ldr	r3, [pc, #36]	@ (8011ce0 <soundInit+0x38>)
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8011cc0:	4b08      	ldr	r3, [pc, #32]	@ (8011ce4 <soundInit+0x3c>)
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8011cc6:	4b08      	ldr	r3, [pc, #32]	@ (8011ce8 <soundInit+0x40>)
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8011ccc:	4b07      	ldr	r3, [pc, #28]	@ (8011cec <soundInit+0x44>)
 8011cce:	2200      	movs	r2, #0
 8011cd0:	569a      	ldrsb	r2, [r3, r2]
 8011cd2:	4b06      	ldr	r3, [pc, #24]	@ (8011cec <soundInit+0x44>)
 8011cd4:	701a      	strb	r2, [r3, #0]

    return true;
 8011cd6:	2301      	movs	r3, #1
}
 8011cd8:	0018      	movs	r0, r3
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	b004      	add	sp, #16
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	20001d14 	.word	0x20001d14
 8011ce4:	20001d10 	.word	0x20001d10
 8011ce8:	20001d18 	.word	0x20001d18
 8011cec:	20001d1c 	.word	0x20001d1c

08011cf0 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8011cf4:	4b02      	ldr	r3, [pc, #8]	@ (8011d00 <clearMaximumAmplitude+0x10>)
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	601a      	str	r2, [r3, #0]
}
 8011cfa:	46c0      	nop			@ (mov r8, r8)
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	200012d4 	.word	0x200012d4

08011d04 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8011d08:	4b08      	ldr	r3, [pc, #32]	@ (8011d2c <startMicSettlingPeriod+0x28>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8011d12:	4b06      	ldr	r3, [pc, #24]	@ (8011d2c <startMicSettlingPeriod+0x28>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	0018      	movs	r0, r3
 8011d18:	f00b f8ca 	bl	801ceb0 <HAL_TIM_Base_Start>
 8011d1c:	1e03      	subs	r3, r0, #0
 8011d1e:	d001      	beq.n	8011d24 <startMicSettlingPeriod+0x20>
    {
        return false;
 8011d20:	2300      	movs	r3, #0
 8011d22:	e000      	b.n	8011d26 <startMicSettlingPeriod+0x22>
    }
    return true;
 8011d24:	2301      	movs	r3, #1
}
 8011d26:	0018      	movs	r0, r3
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	20001d10 	.word	0x20001d10

08011d30 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b082      	sub	sp, #8
 8011d34:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8011d36:	4b0e      	ldr	r3, [pc, #56]	@ (8011d70 <micSettlingComplete+0x40>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	691b      	ldr	r3, [r3, #16]
 8011d3e:	2201      	movs	r2, #1
 8011d40:	401a      	ands	r2, r3
 8011d42:	1dfb      	adds	r3, r7, #7
 8011d44:	3a01      	subs	r2, #1
 8011d46:	4251      	negs	r1, r2
 8011d48:	414a      	adcs	r2, r1
 8011d4a:	701a      	strb	r2, [r3, #0]
    if (complete)
 8011d4c:	1dfb      	adds	r3, r7, #7
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d007      	beq.n	8011d64 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8011d54:	4b06      	ldr	r3, [pc, #24]	@ (8011d70 <micSettlingComplete+0x40>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	0018      	movs	r0, r3
 8011d5a:	f00b f8f3 	bl	801cf44 <HAL_TIM_Base_Stop>
      DataReady = true;
 8011d5e:	4b05      	ldr	r3, [pc, #20]	@ (8011d74 <micSettlingComplete+0x44>)
 8011d60:	2201      	movs	r2, #1
 8011d62:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8011d64:	1dfb      	adds	r3, r7, #7
 8011d66:	781b      	ldrb	r3, [r3, #0]
}
 8011d68:	0018      	movs	r0, r3
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	b002      	add	sp, #8
 8011d6e:	bd80      	pop	{r7, pc}
 8011d70:	20001d10 	.word	0x20001d10
 8011d74:	200012c9 	.word	0x200012c9

08011d78 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b082      	sub	sp, #8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	0002      	movs	r2, r0
 8011d80:	1dfb      	adds	r3, r7, #7
 8011d82:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8011d84:	4b29      	ldr	r3, [pc, #164]	@ (8011e2c <enableMicrophone+0xb4>)
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	b2db      	uxtb	r3, r3
 8011d8a:	1dfa      	adds	r2, r7, #7
 8011d8c:	7812      	ldrb	r2, [r2, #0]
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d101      	bne.n	8011d96 <enableMicrophone+0x1e>
    {
        return true;
 8011d92:	2301      	movs	r3, #1
 8011d94:	e045      	b.n	8011e22 <enableMicrophone+0xaa>
    }
    if (bEnable)
 8011d96:	1dfb      	adds	r3, r7, #7
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d025      	beq.n	8011dea <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8011d9e:	f7ff ffb1 	bl	8011d04 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8011da2:	4b23      	ldr	r3, [pc, #140]	@ (8011e30 <enableMicrophone+0xb8>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2280      	movs	r2, #128	@ 0x80
 8011da8:	0092      	lsls	r2, r2, #2
 8011daa:	4922      	ldr	r1, [pc, #136]	@ (8011e34 <enableMicrophone+0xbc>)
 8011dac:	0018      	movs	r0, r3
 8011dae:	f007 facb 	bl	8019348 <HAL_I2S_Receive_DMA>
 8011db2:	1e03      	subs	r3, r0, #0
 8011db4:	d001      	beq.n	8011dba <enableMicrophone+0x42>
        {
            return false;
 8011db6:	2300      	movs	r3, #0
 8011db8:	e033      	b.n	8011e22 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8011dba:	f7ff ff99 	bl	8011cf0 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8011dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8011e38 <enableMicrophone+0xc0>)
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8011e3c <enableMicrophone+0xc4>)
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	b25b      	sxtb	r3, r3
 8011dca:	0018      	movs	r0, r3
 8011dcc:	f7ff fe56 	bl	8011a7c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8011dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8011e40 <enableMicrophone+0xc8>)
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8011dd6:	4b15      	ldr	r3, [pc, #84]	@ (8011e2c <enableMicrophone+0xb4>)
 8011dd8:	2201      	movs	r2, #1
 8011dda:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011ddc:	4b19      	ldr	r3, [pc, #100]	@ (8011e44 <enableMicrophone+0xcc>)
 8011dde:	2200      	movs	r2, #0
 8011de0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011de2:	4b19      	ldr	r3, [pc, #100]	@ (8011e48 <enableMicrophone+0xd0>)
 8011de4:	2200      	movs	r2, #0
 8011de6:	701a      	strb	r2, [r3, #0]
 8011de8:	e01a      	b.n	8011e20 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011dea:	4b14      	ldr	r3, [pc, #80]	@ (8011e3c <enableMicrophone+0xc4>)
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	b25b      	sxtb	r3, r3
 8011df0:	0018      	movs	r0, r3
 8011df2:	f7ff fe5d 	bl	8011ab0 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8011df6:	4b12      	ldr	r3, [pc, #72]	@ (8011e40 <enableMicrophone+0xc8>)
 8011df8:	2200      	movs	r2, #0
 8011dfa:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011dfc:	4b11      	ldr	r3, [pc, #68]	@ (8011e44 <enableMicrophone+0xcc>)
 8011dfe:	2200      	movs	r2, #0
 8011e00:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011e02:	4b11      	ldr	r3, [pc, #68]	@ (8011e48 <enableMicrophone+0xd0>)
 8011e04:	2200      	movs	r2, #0
 8011e06:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8011e08:	4b09      	ldr	r3, [pc, #36]	@ (8011e30 <enableMicrophone+0xb8>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	0018      	movs	r0, r3
 8011e0e:	f007 fb5d 	bl	80194cc <HAL_I2S_DMAStop>
 8011e12:	1e03      	subs	r3, r0, #0
 8011e14:	d001      	beq.n	8011e1a <enableMicrophone+0xa2>
        {
            return false;
 8011e16:	2300      	movs	r3, #0
 8011e18:	e003      	b.n	8011e22 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011e1a:	4b04      	ldr	r3, [pc, #16]	@ (8011e2c <enableMicrophone+0xb4>)
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011e20:	2301      	movs	r3, #1
}
 8011e22:	0018      	movs	r0, r3
 8011e24:	46bd      	mov	sp, r7
 8011e26:	b002      	add	sp, #8
 8011e28:	bd80      	pop	{r7, pc}
 8011e2a:	46c0      	nop			@ (mov r8, r8)
 8011e2c:	200012ca 	.word	0x200012ca
 8011e30:	20001d14 	.word	0x20001d14
 8011e34:	20001310 	.word	0x20001310
 8011e38:	200012d0 	.word	0x200012d0
 8011e3c:	20001d1c 	.word	0x20001d1c
 8011e40:	200012cc 	.word	0x200012cc
 8011e44:	200012cb 	.word	0x200012cb
 8011e48:	200012cd 	.word	0x200012cd

08011e4c <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011e50:	4b0c      	ldr	r3, [pc, #48]	@ (8011e84 <startSPLcalculation+0x38>)
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	2201      	movs	r2, #1
 8011e58:	4053      	eors	r3, r2
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d001      	beq.n	8011e64 <startSPLcalculation+0x18>
    {
        return false;
 8011e60:	2300      	movs	r3, #0
 8011e62:	e00c      	b.n	8011e7e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8011e64:	4b08      	ldr	r3, [pc, #32]	@ (8011e88 <startSPLcalculation+0x3c>)
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d001      	beq.n	8011e72 <startSPLcalculation+0x26>
    {
        return true;
 8011e6e:	2301      	movs	r3, #1
 8011e70:	e005      	b.n	8011e7e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8011e72:	f000 fb63 	bl	801253c <resetSPLstate>
    SPLcalcEnabled = true;
 8011e76:	4b04      	ldr	r3, [pc, #16]	@ (8011e88 <startSPLcalculation+0x3c>)
 8011e78:	2201      	movs	r2, #1
 8011e7a:	701a      	strb	r2, [r3, #0]
    return true;
 8011e7c:	2301      	movs	r3, #1
}
 8011e7e:	0018      	movs	r0, r3
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	200012ca 	.word	0x200012ca
 8011e88:	200012cb 	.word	0x200012cb

08011e8c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011e94:	4b05      	ldr	r3, [pc, #20]	@ (8011eac <HAL_I2S_RxHalfCpltCallback+0x20>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	687a      	ldr	r2, [r7, #4]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d102      	bne.n	8011ea4 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	f000 f81a 	bl	8011ed8 <processHalfDMAbuffer>
  }
}
 8011ea4:	46c0      	nop			@ (mov r8, r8)
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	b002      	add	sp, #8
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	20001d14 	.word	0x20001d14

08011eb0 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011eb8:	4b06      	ldr	r3, [pc, #24]	@ (8011ed4 <HAL_I2S_RxCpltCallback+0x24>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	687a      	ldr	r2, [r7, #4]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d104      	bne.n	8011ecc <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011ec2:	2380      	movs	r3, #128	@ 0x80
 8011ec4:	009b      	lsls	r3, r3, #2
 8011ec6:	0018      	movs	r0, r3
 8011ec8:	f000 f806 	bl	8011ed8 <processHalfDMAbuffer>
  }
}
 8011ecc:	46c0      	nop			@ (mov r8, r8)
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	b002      	add	sp, #8
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	20001d14 	.word	0x20001d14

08011ed8 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	005a      	lsls	r2, r3, #1
 8011ee4:	4b15      	ldr	r3, [pc, #84]	@ (8011f3c <processHalfDMAbuffer+0x64>)
 8011ee6:	18d3      	adds	r3, r2, r3
 8011ee8:	4a15      	ldr	r2, [pc, #84]	@ (8011f40 <processHalfDMAbuffer+0x68>)
 8011eea:	2180      	movs	r1, #128	@ 0x80
 8011eec:	0089      	lsls	r1, r1, #2
 8011eee:	0018      	movs	r0, r3
 8011ef0:	f000 fd35 	bl	801295e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011ef4:	4b13      	ldr	r3, [pc, #76]	@ (8011f44 <processHalfDMAbuffer+0x6c>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	425a      	negs	r2, r3
 8011efa:	4153      	adcs	r3, r2
 8011efc:	b2da      	uxtb	r2, r3
 8011efe:	4b11      	ldr	r3, [pc, #68]	@ (8011f44 <processHalfDMAbuffer+0x6c>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2109      	movs	r1, #9
 8011f04:	4299      	cmp	r1, r3
 8011f06:	419b      	sbcs	r3, r3
 8011f08:	425b      	negs	r3, r3
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	480c      	ldr	r0, [pc, #48]	@ (8011f40 <processHalfDMAbuffer+0x68>)
 8011f0e:	2180      	movs	r1, #128	@ 0x80
 8011f10:	f000 fb46 	bl	80125a0 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011f14:	4b0b      	ldr	r3, [pc, #44]	@ (8011f44 <processHalfDMAbuffer+0x6c>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b09      	cmp	r3, #9
 8011f1a:	d804      	bhi.n	8011f26 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011f1c:	4b09      	ldr	r3, [pc, #36]	@ (8011f44 <processHalfDMAbuffer+0x6c>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	1c5a      	adds	r2, r3, #1
 8011f22:	4b08      	ldr	r3, [pc, #32]	@ (8011f44 <processHalfDMAbuffer+0x6c>)
 8011f24:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8011f26:	4b08      	ldr	r3, [pc, #32]	@ (8011f48 <processHalfDMAbuffer+0x70>)
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	b2db      	uxtb	r3, r3
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d001      	beq.n	8011f34 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011f30:	f000 f826 	bl	8011f80 <calculateSPLQ31>
    }
}
 8011f34:	46c0      	nop			@ (mov r8, r8)
 8011f36:	46bd      	mov	sp, r7
 8011f38:	b002      	add	sp, #8
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	20001310 	.word	0x20001310
 8011f40:	20001b10 	.word	0x20001b10
 8011f44:	200012d0 	.word	0x200012d0
 8011f48:	200012cb 	.word	0x200012cb

08011f4c <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011f54:	4b07      	ldr	r3, [pc, #28]	@ (8011f74 <HAL_I2S_ErrorCallback+0x28>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d106      	bne.n	8011f6c <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011f5e:	4a06      	ldr	r2, [pc, #24]	@ (8011f78 <HAL_I2S_ErrorCallback+0x2c>)
 8011f60:	239e      	movs	r3, #158	@ 0x9e
 8011f62:	0059      	lsls	r1, r3, #1
 8011f64:	4b05      	ldr	r3, [pc, #20]	@ (8011f7c <HAL_I2S_ErrorCallback+0x30>)
 8011f66:	0018      	movs	r0, r3
 8011f68:	f002 fa24 	bl	80143b4 <errorHandler>
  }
}
 8011f6c:	46c0      	nop			@ (mov r8, r8)
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	b002      	add	sp, #8
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	20001d14 	.word	0x20001d14
 8011f78:	0802e2d8 	.word	0x0802e2d8
 8011f7c:	0802ef64 	.word	0x0802ef64

08011f80 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f82:	b0b3      	sub	sp, #204	@ 0xcc
 8011f84:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011f86:	4ae2      	ldr	r2, [pc, #904]	@ (8012310 <calculateSPLQ31+0x390>)
 8011f88:	2338      	movs	r3, #56	@ 0x38
 8011f8a:	2030      	movs	r0, #48	@ 0x30
 8011f8c:	181b      	adds	r3, r3, r0
 8011f8e:	19d9      	adds	r1, r3, r7
 8011f90:	2334      	movs	r3, #52	@ 0x34
 8011f92:	181b      	adds	r3, r3, r0
 8011f94:	19d8      	adds	r0, r3, r7
 8011f96:	2380      	movs	r3, #128	@ 0x80
 8011f98:	f000 fc36 	bl	8012808 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011f9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	da00      	bge.n	8011fa4 <calculateSPLQ31+0x24>
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	105b      	asrs	r3, r3, #1
 8011fa6:	001a      	movs	r2, r3
 8011fa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	da00      	bge.n	8011fb0 <calculateSPLQ31+0x30>
 8011fae:	3301      	adds	r3, #1
 8011fb0:	105b      	asrs	r3, r3, #1
 8011fb2:	18d3      	adds	r3, r2, r3
 8011fb4:	2188      	movs	r1, #136	@ 0x88
 8011fb6:	187a      	adds	r2, r7, r1
 8011fb8:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011fba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011fbc:	187b      	adds	r3, r7, r1
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	1ad3      	subs	r3, r2, r3
 8011fc2:	3304      	adds	r3, #4
 8011fc4:	2284      	movs	r2, #132	@ 0x84
 8011fc6:	18b9      	adds	r1, r7, r2
 8011fc8:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011fca:	18bb      	adds	r3, r7, r2
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	4ad1      	ldr	r2, [pc, #836]	@ (8012314 <calculateSPLQ31+0x394>)
 8011fd0:	0019      	movs	r1, r3
 8011fd2:	0010      	movs	r0, r2
 8011fd4:	f000 fc58 	bl	8012888 <getPo2factor>
 8011fd8:	0003      	movs	r3, r0
 8011fda:	2280      	movs	r2, #128	@ 0x80
 8011fdc:	18ba      	adds	r2, r7, r2
 8011fde:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	2284      	movs	r2, #132	@ 0x84
 8011fe4:	2130      	movs	r1, #48	@ 0x30
 8011fe6:	1852      	adds	r2, r2, r1
 8011fe8:	19d2      	adds	r2, r2, r7
 8011fea:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011fec:	2300      	movs	r3, #0
 8011fee:	2280      	movs	r2, #128	@ 0x80
 8011ff0:	1852      	adds	r2, r2, r1
 8011ff2:	19d2      	adds	r2, r2, r7
 8011ff4:	6013      	str	r3, [r2, #0]
 8011ff6:	e032      	b.n	801205e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011ff8:	4ac5      	ldr	r2, [pc, #788]	@ (8012310 <calculateSPLQ31+0x390>)
 8011ffa:	2680      	movs	r6, #128	@ 0x80
 8011ffc:	2330      	movs	r3, #48	@ 0x30
 8011ffe:	18f1      	adds	r1, r6, r3
 8012000:	19cb      	adds	r3, r1, r7
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	589a      	ldr	r2, [r3, r2]
 8012008:	2188      	movs	r1, #136	@ 0x88
 801200a:	1879      	adds	r1, r7, r1
 801200c:	680b      	ldr	r3, [r1, #0]
 801200e:	1ad2      	subs	r2, r2, r3
 8012010:	2180      	movs	r1, #128	@ 0x80
 8012012:	1879      	adds	r1, r7, r1
 8012014:	680b      	ldr	r3, [r1, #0]
 8012016:	409a      	lsls	r2, r3
 8012018:	0011      	movs	r1, r2
 801201a:	4abf      	ldr	r2, [pc, #764]	@ (8012318 <calculateSPLQ31+0x398>)
 801201c:	2084      	movs	r0, #132	@ 0x84
 801201e:	2330      	movs	r3, #48	@ 0x30
 8012020:	18c3      	adds	r3, r0, r3
 8012022:	19db      	adds	r3, r3, r7
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	009b      	lsls	r3, r3, #2
 8012028:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 801202a:	2230      	movs	r2, #48	@ 0x30
 801202c:	1883      	adds	r3, r0, r2
 801202e:	19db      	adds	r3, r3, r7
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	3301      	adds	r3, #1
 8012034:	49b8      	ldr	r1, [pc, #736]	@ (8012318 <calculateSPLQ31+0x398>)
 8012036:	009a      	lsls	r2, r3, #2
 8012038:	2300      	movs	r3, #0
 801203a:	5053      	str	r3, [r2, r1]
        count += 2;
 801203c:	2230      	movs	r2, #48	@ 0x30
 801203e:	1883      	adds	r3, r0, r2
 8012040:	19db      	adds	r3, r3, r7
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	3302      	adds	r3, #2
 8012046:	0011      	movs	r1, r2
 8012048:	1882      	adds	r2, r0, r2
 801204a:	19d2      	adds	r2, r2, r7
 801204c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 801204e:	000a      	movs	r2, r1
 8012050:	18b3      	adds	r3, r6, r2
 8012052:	19db      	adds	r3, r3, r7
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	3301      	adds	r3, #1
 8012058:	18b2      	adds	r2, r6, r2
 801205a:	19d2      	adds	r2, r2, r7
 801205c:	6013      	str	r3, [r2, #0]
 801205e:	2380      	movs	r3, #128	@ 0x80
 8012060:	2630      	movs	r6, #48	@ 0x30
 8012062:	199b      	adds	r3, r3, r6
 8012064:	19db      	adds	r3, r3, r7
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	2b7f      	cmp	r3, #127	@ 0x7f
 801206a:	d9c5      	bls.n	8011ff8 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 801206c:	4bab      	ldr	r3, [pc, #684]	@ (801231c <calculateSPLQ31+0x39c>)
 801206e:	6818      	ldr	r0, [r3, #0]
 8012070:	49a9      	ldr	r1, [pc, #676]	@ (8012318 <calculateSPLQ31+0x398>)
 8012072:	2301      	movs	r3, #1
 8012074:	2200      	movs	r2, #0
 8012076:	f011 ffef 	bl	8024058 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 801207a:	4aa9      	ldr	r2, [pc, #676]	@ (8012320 <calculateSPLQ31+0x3a0>)
 801207c:	2338      	movs	r3, #56	@ 0x38
 801207e:	199b      	adds	r3, r3, r6
 8012080:	19d9      	adds	r1, r3, r7
 8012082:	2334      	movs	r3, #52	@ 0x34
 8012084:	199b      	adds	r3, r3, r6
 8012086:	19d8      	adds	r0, r3, r7
 8012088:	237e      	movs	r3, #126	@ 0x7e
 801208a:	f000 fbbd 	bl	8012808 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 801208e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012090:	2380      	movs	r3, #128	@ 0x80
 8012092:	061b      	lsls	r3, r3, #24
 8012094:	429a      	cmp	r2, r3
 8012096:	d101      	bne.n	801209c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8012098:	4b9e      	ldr	r3, [pc, #632]	@ (8012314 <calculateSPLQ31+0x394>)
 801209a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 801209c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801209e:	2380      	movs	r3, #128	@ 0x80
 80120a0:	061b      	lsls	r3, r3, #24
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d101      	bne.n	80120aa <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 80120a6:	4b9b      	ldr	r3, [pc, #620]	@ (8012314 <calculateSPLQ31+0x394>)
 80120a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 80120aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80120ac:	17da      	asrs	r2, r3, #31
 80120ae:	189b      	adds	r3, r3, r2
 80120b0:	4053      	eors	r3, r2
 80120b2:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 80120b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80120b6:	17da      	asrs	r2, r3, #31
 80120b8:	189b      	adds	r3, r3, r2
 80120ba:	4053      	eors	r3, r2
 80120bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 80120be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80120c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80120c2:	429a      	cmp	r2, r3
 80120c4:	dd01      	ble.n	80120ca <calculateSPLQ31+0x14a>
    {
        max = min;
 80120c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80120c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 80120ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80120cc:	3304      	adds	r3, #4
 80120ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 80120d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80120d2:	4a90      	ldr	r2, [pc, #576]	@ (8012314 <calculateSPLQ31+0x394>)
 80120d4:	0019      	movs	r1, r3
 80120d6:	0010      	movs	r0, r2
 80120d8:	f000 fbd6 	bl	8012888 <getPo2factor>
 80120dc:	0003      	movs	r3, r0
 80120de:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 80120e0:	2302      	movs	r3, #2
 80120e2:	22ac      	movs	r2, #172	@ 0xac
 80120e4:	18ba      	adds	r2, r7, r2
 80120e6:	6013      	str	r3, [r2, #0]
 80120e8:	e012      	b.n	8012110 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 80120ea:	4a8b      	ldr	r2, [pc, #556]	@ (8012318 <calculateSPLQ31+0x398>)
 80120ec:	20ac      	movs	r0, #172	@ 0xac
 80120ee:	183b      	adds	r3, r7, r0
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	589a      	ldr	r2, [r3, r2]
 80120f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80120f8:	409a      	lsls	r2, r3
 80120fa:	0011      	movs	r1, r2
 80120fc:	4a86      	ldr	r2, [pc, #536]	@ (8012318 <calculateSPLQ31+0x398>)
 80120fe:	183b      	adds	r3, r7, r0
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8012106:	183b      	adds	r3, r7, r0
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	3301      	adds	r3, #1
 801210c:	183a      	adds	r2, r7, r0
 801210e:	6013      	str	r3, [r2, #0]
 8012110:	23ac      	movs	r3, #172	@ 0xac
 8012112:	18fb      	adds	r3, r7, r3
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	2b7f      	cmp	r3, #127	@ 0x7f
 8012118:	d9e7      	bls.n	80120ea <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 801211a:	4b7d      	ldr	r3, [pc, #500]	@ (8012310 <calculateSPLQ31+0x390>)
 801211c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 801211e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8012120:	4b7d      	ldr	r3, [pc, #500]	@ (8012318 <calculateSPLQ31+0x398>)
 8012122:	2240      	movs	r2, #64	@ 0x40
 8012124:	0018      	movs	r0, r3
 8012126:	f012 fd41 	bl	8024bac <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 801212a:	2330      	movs	r3, #48	@ 0x30
 801212c:	18fb      	adds	r3, r7, r3
 801212e:	0018      	movs	r0, r3
 8012130:	2330      	movs	r3, #48	@ 0x30
 8012132:	001a      	movs	r2, r3
 8012134:	2100      	movs	r1, #0
 8012136:	f014 fb6b 	bl	8026810 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 801213a:	2200      	movs	r2, #0
 801213c:	2300      	movs	r3, #0
 801213e:	21a0      	movs	r1, #160	@ 0xa0
 8012140:	1879      	adds	r1, r7, r1
 8012142:	600a      	str	r2, [r1, #0]
 8012144:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8012146:	2301      	movs	r3, #1
 8012148:	229c      	movs	r2, #156	@ 0x9c
 801214a:	18ba      	adds	r2, r7, r2
 801214c:	6013      	str	r3, [r2, #0]
 801214e:	e05b      	b.n	8012208 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8012150:	269c      	movs	r6, #156	@ 0x9c
 8012152:	19bb      	adds	r3, r7, r6
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	009a      	lsls	r2, r3, #2
 8012158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801215a:	189b      	adds	r3, r3, r2
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	613b      	str	r3, [r7, #16]
 8012160:	17db      	asrs	r3, r3, #31
 8012162:	617b      	str	r3, [r7, #20]
 8012164:	4b6f      	ldr	r3, [pc, #444]	@ (8012324 <calculateSPLQ31+0x3a4>)
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	19bb      	adds	r3, r7, r6
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	005b      	lsls	r3, r3, #1
 801216e:	18d3      	adds	r3, r2, r3
 8012170:	881b      	ldrh	r3, [r3, #0]
 8012172:	60bb      	str	r3, [r7, #8]
 8012174:	2300      	movs	r3, #0
 8012176:	60fb      	str	r3, [r7, #12]
 8012178:	68ba      	ldr	r2, [r7, #8]
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	6938      	ldr	r0, [r7, #16]
 801217e:	6979      	ldr	r1, [r7, #20]
 8012180:	f7ee fa1e 	bl	80005c0 <__aeabi_lmul>
 8012184:	0002      	movs	r2, r0
 8012186:	000b      	movs	r3, r1
 8012188:	0010      	movs	r0, r2
 801218a:	0019      	movs	r1, r3
 801218c:	23a0      	movs	r3, #160	@ 0xa0
 801218e:	18fa      	adds	r2, r7, r3
 8012190:	6853      	ldr	r3, [r2, #4]
 8012192:	6812      	ldr	r2, [r2, #0]
 8012194:	1812      	adds	r2, r2, r0
 8012196:	414b      	adcs	r3, r1
 8012198:	21a0      	movs	r1, #160	@ 0xa0
 801219a:	1879      	adds	r1, r7, r1
 801219c:	600a      	str	r2, [r1, #0]
 801219e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 80121a0:	4b61      	ldr	r3, [pc, #388]	@ (8012328 <calculateSPLQ31+0x3a8>)
 80121a2:	681a      	ldr	r2, [r3, #0]
 80121a4:	19bb      	adds	r3, r7, r6
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	18d3      	adds	r3, r2, r3
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	2b06      	cmp	r3, #6
 80121ae:	d025      	beq.n	80121fc <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 80121b0:	4b5d      	ldr	r3, [pc, #372]	@ (8012328 <calculateSPLQ31+0x3a8>)
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	19bb      	adds	r3, r7, r6
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	18d3      	adds	r3, r2, r3
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	2230      	movs	r2, #48	@ 0x30
 80121be:	18ba      	adds	r2, r7, r2
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	18d3      	adds	r3, r2, r3
 80121c4:	6818      	ldr	r0, [r3, #0]
 80121c6:	6859      	ldr	r1, [r3, #4]
 80121c8:	19bb      	adds	r3, r7, r6
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	009a      	lsls	r2, r3, #2
 80121ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80121d0:	189b      	adds	r3, r3, r2
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	603b      	str	r3, [r7, #0]
 80121d6:	17db      	asrs	r3, r3, #31
 80121d8:	607b      	str	r3, [r7, #4]
 80121da:	4b53      	ldr	r3, [pc, #332]	@ (8012328 <calculateSPLQ31+0x3a8>)
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	19be      	adds	r6, r7, r6
 80121e0:	6833      	ldr	r3, [r6, #0]
 80121e2:	18d3      	adds	r3, r2, r3
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	001e      	movs	r6, r3
 80121e8:	683a      	ldr	r2, [r7, #0]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	1880      	adds	r0, r0, r2
 80121ee:	4159      	adcs	r1, r3
 80121f0:	2330      	movs	r3, #48	@ 0x30
 80121f2:	18fa      	adds	r2, r7, r3
 80121f4:	00f3      	lsls	r3, r6, #3
 80121f6:	18d3      	adds	r3, r2, r3
 80121f8:	6018      	str	r0, [r3, #0]
 80121fa:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 80121fc:	229c      	movs	r2, #156	@ 0x9c
 80121fe:	18bb      	adds	r3, r7, r2
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	3301      	adds	r3, #1
 8012204:	18ba      	adds	r2, r7, r2
 8012206:	6013      	str	r3, [r2, #0]
 8012208:	239c      	movs	r3, #156	@ 0x9c
 801220a:	18fb      	adds	r3, r7, r3
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2b3f      	cmp	r3, #63	@ 0x3f
 8012210:	d99e      	bls.n	8012150 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8012212:	2380      	movs	r3, #128	@ 0x80
 8012214:	18fb      	adds	r3, r7, r3
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	005b      	lsls	r3, r3, #1
 801221a:	001a      	movs	r2, r3
 801221c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801221e:	005b      	lsls	r3, r3, #1
 8012220:	18d3      	adds	r3, r2, r3
 8012222:	3b22      	subs	r3, #34	@ 0x22
 8012224:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8012226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012228:	17da      	asrs	r2, r3, #31
 801222a:	189b      	adds	r3, r3, r2
 801222c:	4053      	eors	r3, r2
 801222e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8012230:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012232:	2b00      	cmp	r3, #0
 8012234:	da62      	bge.n	80122fc <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8012236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012238:	3b20      	subs	r3, #32
 801223a:	2b00      	cmp	r3, #0
 801223c:	db05      	blt.n	801224a <calculateSPLQ31+0x2ca>
 801223e:	22a0      	movs	r2, #160	@ 0xa0
 8012240:	18ba      	adds	r2, r7, r2
 8012242:	6812      	ldr	r2, [r2, #0]
 8012244:	409a      	lsls	r2, r3
 8012246:	627a      	str	r2, [r7, #36]	@ 0x24
 8012248:	e010      	b.n	801226c <calculateSPLQ31+0x2ec>
 801224a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801224c:	2220      	movs	r2, #32
 801224e:	1ad3      	subs	r3, r2, r3
 8012250:	22a0      	movs	r2, #160	@ 0xa0
 8012252:	18ba      	adds	r2, r7, r2
 8012254:	6812      	ldr	r2, [r2, #0]
 8012256:	40da      	lsrs	r2, r3
 8012258:	0013      	movs	r3, r2
 801225a:	22a4      	movs	r2, #164	@ 0xa4
 801225c:	18ba      	adds	r2, r7, r2
 801225e:	6811      	ldr	r1, [r2, #0]
 8012260:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012262:	4091      	lsls	r1, r2
 8012264:	6279      	str	r1, [r7, #36]	@ 0x24
 8012266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012268:	431a      	orrs	r2, r3
 801226a:	627a      	str	r2, [r7, #36]	@ 0x24
 801226c:	21a0      	movs	r1, #160	@ 0xa0
 801226e:	187b      	adds	r3, r7, r1
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012274:	409a      	lsls	r2, r3
 8012276:	623a      	str	r2, [r7, #32]
 8012278:	6a3b      	ldr	r3, [r7, #32]
 801227a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 801227c:	187a      	adds	r2, r7, r1
 801227e:	6013      	str	r3, [r2, #0]
 8012280:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012282:	2300      	movs	r3, #0
 8012284:	2298      	movs	r2, #152	@ 0x98
 8012286:	18ba      	adds	r2, r7, r2
 8012288:	6013      	str	r3, [r2, #0]
 801228a:	e031      	b.n	80122f0 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 801228c:	2330      	movs	r3, #48	@ 0x30
 801228e:	18fa      	adds	r2, r7, r3
 8012290:	2398      	movs	r3, #152	@ 0x98
 8012292:	18fb      	adds	r3, r7, r3
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	00db      	lsls	r3, r3, #3
 8012298:	18d3      	adds	r3, r2, r3
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80122a0:	3920      	subs	r1, #32
 80122a2:	2900      	cmp	r1, #0
 80122a4:	db03      	blt.n	80122ae <calculateSPLQ31+0x32e>
 80122a6:	0010      	movs	r0, r2
 80122a8:	4088      	lsls	r0, r1
 80122aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80122ac:	e00c      	b.n	80122c8 <calculateSPLQ31+0x348>
 80122ae:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80122b0:	2020      	movs	r0, #32
 80122b2:	1a41      	subs	r1, r0, r1
 80122b4:	0010      	movs	r0, r2
 80122b6:	40c8      	lsrs	r0, r1
 80122b8:	0001      	movs	r1, r0
 80122ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80122bc:	001c      	movs	r4, r3
 80122be:	4084      	lsls	r4, r0
 80122c0:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80122c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80122c4:	4308      	orrs	r0, r1
 80122c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80122c8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80122ca:	0013      	movs	r3, r2
 80122cc:	408b      	lsls	r3, r1
 80122ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80122d0:	2330      	movs	r3, #48	@ 0x30
 80122d2:	18fa      	adds	r2, r7, r3
 80122d4:	2098      	movs	r0, #152	@ 0x98
 80122d6:	183b      	adds	r3, r7, r0
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	00db      	lsls	r3, r3, #3
 80122dc:	18d3      	adds	r3, r2, r3
 80122de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80122e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122e2:	6019      	str	r1, [r3, #0]
 80122e4:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80122e6:	183b      	adds	r3, r7, r0
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	3301      	adds	r3, #1
 80122ec:	183a      	adds	r2, r7, r0
 80122ee:	6013      	str	r3, [r2, #0]
 80122f0:	2398      	movs	r3, #152	@ 0x98
 80122f2:	18fb      	adds	r3, r7, r3
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	2b05      	cmp	r3, #5
 80122f8:	d9c8      	bls.n	801228c <calculateSPLQ31+0x30c>
 80122fa:	e06b      	b.n	80123d4 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 80122fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80122fe:	3b20      	subs	r3, #32
 8012300:	2b00      	cmp	r3, #0
 8012302:	db13      	blt.n	801232c <calculateSPLQ31+0x3ac>
 8012304:	22a4      	movs	r2, #164	@ 0xa4
 8012306:	18ba      	adds	r2, r7, r2
 8012308:	6812      	ldr	r2, [r2, #0]
 801230a:	40da      	lsrs	r2, r3
 801230c:	61ba      	str	r2, [r7, #24]
 801230e:	e01e      	b.n	801234e <calculateSPLQ31+0x3ce>
 8012310:	20001b10 	.word	0x20001b10
 8012314:	7fffffff 	.word	0x7fffffff
 8012318:	20001d5c 	.word	0x20001d5c
 801231c:	200000d4 	.word	0x200000d4
 8012320:	20001d64 	.word	0x20001d64
 8012324:	200000d8 	.word	0x200000d8
 8012328:	200000e4 	.word	0x200000e4
 801232c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801232e:	2220      	movs	r2, #32
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	22a4      	movs	r2, #164	@ 0xa4
 8012334:	18ba      	adds	r2, r7, r2
 8012336:	6812      	ldr	r2, [r2, #0]
 8012338:	409a      	lsls	r2, r3
 801233a:	0013      	movs	r3, r2
 801233c:	22a0      	movs	r2, #160	@ 0xa0
 801233e:	18ba      	adds	r2, r7, r2
 8012340:	6811      	ldr	r1, [r2, #0]
 8012342:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012344:	40d1      	lsrs	r1, r2
 8012346:	61b9      	str	r1, [r7, #24]
 8012348:	69ba      	ldr	r2, [r7, #24]
 801234a:	431a      	orrs	r2, r3
 801234c:	61ba      	str	r2, [r7, #24]
 801234e:	23a4      	movs	r3, #164	@ 0xa4
 8012350:	18fb      	adds	r3, r7, r3
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012356:	40da      	lsrs	r2, r3
 8012358:	61fa      	str	r2, [r7, #28]
 801235a:	69ba      	ldr	r2, [r7, #24]
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	21a0      	movs	r1, #160	@ 0xa0
 8012360:	1879      	adds	r1, r7, r1
 8012362:	600a      	str	r2, [r1, #0]
 8012364:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012366:	2300      	movs	r3, #0
 8012368:	2294      	movs	r2, #148	@ 0x94
 801236a:	18ba      	adds	r2, r7, r2
 801236c:	6013      	str	r3, [r2, #0]
 801236e:	e02c      	b.n	80123ca <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8012370:	2330      	movs	r3, #48	@ 0x30
 8012372:	18fa      	adds	r2, r7, r3
 8012374:	2394      	movs	r3, #148	@ 0x94
 8012376:	18fb      	adds	r3, r7, r3
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	00db      	lsls	r3, r3, #3
 801237c:	18d3      	adds	r3, r2, r3
 801237e:	681a      	ldr	r2, [r3, #0]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012384:	3920      	subs	r1, #32
 8012386:	2900      	cmp	r1, #0
 8012388:	db03      	blt.n	8012392 <calculateSPLQ31+0x412>
 801238a:	0018      	movs	r0, r3
 801238c:	40c8      	lsrs	r0, r1
 801238e:	0004      	movs	r4, r0
 8012390:	e00a      	b.n	80123a8 <calculateSPLQ31+0x428>
 8012392:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012394:	2020      	movs	r0, #32
 8012396:	1a41      	subs	r1, r0, r1
 8012398:	0018      	movs	r0, r3
 801239a:	4088      	lsls	r0, r1
 801239c:	0001      	movs	r1, r0
 801239e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80123a0:	0016      	movs	r6, r2
 80123a2:	40c6      	lsrs	r6, r0
 80123a4:	0034      	movs	r4, r6
 80123a6:	430c      	orrs	r4, r1
 80123a8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80123aa:	40cb      	lsrs	r3, r1
 80123ac:	001d      	movs	r5, r3
 80123ae:	2330      	movs	r3, #48	@ 0x30
 80123b0:	18fa      	adds	r2, r7, r3
 80123b2:	2194      	movs	r1, #148	@ 0x94
 80123b4:	187b      	adds	r3, r7, r1
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	18d3      	adds	r3, r2, r3
 80123bc:	601c      	str	r4, [r3, #0]
 80123be:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80123c0:	187b      	adds	r3, r7, r1
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	3301      	adds	r3, #1
 80123c6:	187a      	adds	r2, r7, r1
 80123c8:	6013      	str	r3, [r2, #0]
 80123ca:	2394      	movs	r3, #148	@ 0x94
 80123cc:	18fb      	adds	r3, r7, r3
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	2b05      	cmp	r3, #5
 80123d2:	d9cd      	bls.n	8012370 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 80123d4:	230f      	movs	r3, #15
 80123d6:	425d      	negs	r5, r3
 80123d8:	2305      	movs	r3, #5
 80123da:	425e      	negs	r6, r3
 80123dc:	4b4a      	ldr	r3, [pc, #296]	@ (8012508 <calculateSPLQ31+0x588>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	4b4a      	ldr	r3, [pc, #296]	@ (801250c <calculateSPLQ31+0x58c>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	21a0      	movs	r1, #160	@ 0xa0
 80123ea:	1879      	adds	r1, r7, r1
 80123ec:	6808      	ldr	r0, [r1, #0]
 80123ee:	6849      	ldr	r1, [r1, #4]
 80123f0:	4c47      	ldr	r4, [pc, #284]	@ (8012510 <calculateSPLQ31+0x590>)
 80123f2:	9403      	str	r4, [sp, #12]
 80123f4:	4c47      	ldr	r4, [pc, #284]	@ (8012514 <calculateSPLQ31+0x594>)
 80123f6:	9402      	str	r4, [sp, #8]
 80123f8:	9301      	str	r3, [sp, #4]
 80123fa:	9200      	str	r2, [sp, #0]
 80123fc:	0033      	movs	r3, r6
 80123fe:	002a      	movs	r2, r5
 8012400:	f000 fa86 	bl	8012910 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012404:	2300      	movs	r3, #0
 8012406:	2290      	movs	r2, #144	@ 0x90
 8012408:	18ba      	adds	r2, r7, r2
 801240a:	6013      	str	r3, [r2, #0]
 801240c:	e026      	b.n	801245c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801240e:	2330      	movs	r3, #48	@ 0x30
 8012410:	18fa      	adds	r2, r7, r3
 8012412:	2490      	movs	r4, #144	@ 0x90
 8012414:	193b      	adds	r3, r7, r4
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	18d3      	adds	r3, r2, r3
 801241c:	6818      	ldr	r0, [r3, #0]
 801241e:	6859      	ldr	r1, [r3, #4]
 8012420:	230f      	movs	r3, #15
 8012422:	425d      	negs	r5, r3
 8012424:	2305      	movs	r3, #5
 8012426:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8012428:	193b      	adds	r3, r7, r4
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	009a      	lsls	r2, r3, #2
 801242e:	4b3a      	ldr	r3, [pc, #232]	@ (8012518 <calculateSPLQ31+0x598>)
 8012430:	18d3      	adds	r3, r2, r3
 8012432:	193a      	adds	r2, r7, r4
 8012434:	6812      	ldr	r2, [r2, #0]
 8012436:	0094      	lsls	r4, r2, #2
 8012438:	4a38      	ldr	r2, [pc, #224]	@ (801251c <calculateSPLQ31+0x59c>)
 801243a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801243c:	9203      	str	r2, [sp, #12]
 801243e:	9302      	str	r3, [sp, #8]
 8012440:	2300      	movs	r3, #0
 8012442:	9301      	str	r3, [sp, #4]
 8012444:	2300      	movs	r3, #0
 8012446:	9300      	str	r3, [sp, #0]
 8012448:	0033      	movs	r3, r6
 801244a:	002a      	movs	r2, r5
 801244c:	f000 fa60 	bl	8012910 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012450:	2490      	movs	r4, #144	@ 0x90
 8012452:	193b      	adds	r3, r7, r4
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	3301      	adds	r3, #1
 8012458:	193a      	adds	r2, r7, r4
 801245a:	6013      	str	r3, [r2, #0]
 801245c:	2390      	movs	r3, #144	@ 0x90
 801245e:	18fb      	adds	r3, r7, r3
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	2b05      	cmp	r3, #5
 8012464:	d9d3      	bls.n	801240e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8012466:	4b2b      	ldr	r3, [pc, #172]	@ (8012514 <calculateSPLQ31+0x594>)
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	4b2d      	ldr	r3, [pc, #180]	@ (8012520 <calculateSPLQ31+0x5a0>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	18d2      	adds	r2, r2, r3
 8012470:	4b2b      	ldr	r3, [pc, #172]	@ (8012520 <calculateSPLQ31+0x5a0>)
 8012472:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8012474:	4b26      	ldr	r3, [pc, #152]	@ (8012510 <calculateSPLQ31+0x590>)
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	4b2a      	ldr	r3, [pc, #168]	@ (8012524 <calculateSPLQ31+0x5a4>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	18d2      	adds	r2, r2, r3
 801247e:	4b29      	ldr	r3, [pc, #164]	@ (8012524 <calculateSPLQ31+0x5a4>)
 8012480:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012482:	2300      	movs	r3, #0
 8012484:	228c      	movs	r2, #140	@ 0x8c
 8012486:	18ba      	adds	r2, r7, r2
 8012488:	6013      	str	r3, [r2, #0]
 801248a:	e025      	b.n	80124d8 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 801248c:	4b22      	ldr	r3, [pc, #136]	@ (8012518 <calculateSPLQ31+0x598>)
 801248e:	208c      	movs	r0, #140	@ 0x8c
 8012490:	183a      	adds	r2, r7, r0
 8012492:	6812      	ldr	r2, [r2, #0]
 8012494:	0092      	lsls	r2, r2, #2
 8012496:	58d2      	ldr	r2, [r2, r3]
 8012498:	4b23      	ldr	r3, [pc, #140]	@ (8012528 <calculateSPLQ31+0x5a8>)
 801249a:	1839      	adds	r1, r7, r0
 801249c:	6809      	ldr	r1, [r1, #0]
 801249e:	0089      	lsls	r1, r1, #2
 80124a0:	58cb      	ldr	r3, [r1, r3]
 80124a2:	18d1      	adds	r1, r2, r3
 80124a4:	4b20      	ldr	r3, [pc, #128]	@ (8012528 <calculateSPLQ31+0x5a8>)
 80124a6:	183a      	adds	r2, r7, r0
 80124a8:	6812      	ldr	r2, [r2, #0]
 80124aa:	0092      	lsls	r2, r2, #2
 80124ac:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80124ae:	4b1b      	ldr	r3, [pc, #108]	@ (801251c <calculateSPLQ31+0x59c>)
 80124b0:	183a      	adds	r2, r7, r0
 80124b2:	6812      	ldr	r2, [r2, #0]
 80124b4:	0092      	lsls	r2, r2, #2
 80124b6:	58d2      	ldr	r2, [r2, r3]
 80124b8:	4b1c      	ldr	r3, [pc, #112]	@ (801252c <calculateSPLQ31+0x5ac>)
 80124ba:	1839      	adds	r1, r7, r0
 80124bc:	6809      	ldr	r1, [r1, #0]
 80124be:	0089      	lsls	r1, r1, #2
 80124c0:	58cb      	ldr	r3, [r1, r3]
 80124c2:	18d1      	adds	r1, r2, r3
 80124c4:	4b19      	ldr	r3, [pc, #100]	@ (801252c <calculateSPLQ31+0x5ac>)
 80124c6:	183a      	adds	r2, r7, r0
 80124c8:	6812      	ldr	r2, [r2, #0]
 80124ca:	0092      	lsls	r2, r2, #2
 80124cc:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80124ce:	183b      	adds	r3, r7, r0
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	3301      	adds	r3, #1
 80124d4:	183a      	adds	r2, r7, r0
 80124d6:	6013      	str	r3, [r2, #0]
 80124d8:	238c      	movs	r3, #140	@ 0x8c
 80124da:	18fb      	adds	r3, r7, r3
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	2b05      	cmp	r3, #5
 80124e0:	d9d4      	bls.n	801248c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 80124e2:	4b13      	ldr	r3, [pc, #76]	@ (8012530 <calculateSPLQ31+0x5b0>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	1c5a      	adds	r2, r3, #1
 80124e8:	4b11      	ldr	r3, [pc, #68]	@ (8012530 <calculateSPLQ31+0x5b0>)
 80124ea:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 80124ec:	4b10      	ldr	r3, [pc, #64]	@ (8012530 <calculateSPLQ31+0x5b0>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b0f      	cmp	r3, #15
 80124f2:	d905      	bls.n	8012500 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 80124f4:	4b0f      	ldr	r3, [pc, #60]	@ (8012534 <calculateSPLQ31+0x5b4>)
 80124f6:	2201      	movs	r2, #1
 80124f8:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80124fa:	4b0f      	ldr	r3, [pc, #60]	@ (8012538 <calculateSPLQ31+0x5b8>)
 80124fc:	2200      	movs	r2, #0
 80124fe:	701a      	strb	r2, [r3, #0]
    }
}
 8012500:	46c0      	nop			@ (mov r8, r8)
 8012502:	46bd      	mov	sp, r7
 8012504:	b02f      	add	sp, #188	@ 0xbc
 8012506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012508:	200000dc 	.word	0x200000dc
 801250c:	200000e0 	.word	0x200000e0
 8012510:	200012dc 	.word	0x200012dc
 8012514:	200012d8 	.word	0x200012d8
 8012518:	200012e0 	.word	0x200012e0
 801251c:	200012f8 	.word	0x200012f8
 8012520:	20001d20 	.word	0x20001d20
 8012524:	20001d24 	.word	0x20001d24
 8012528:	20001d28 	.word	0x20001d28
 801252c:	20001d40 	.word	0x20001d40
 8012530:	20001d58 	.word	0x20001d58
 8012534:	200012cd 	.word	0x200012cd
 8012538:	200012cb 	.word	0x200012cb

0801253c <resetSPLstate>:

static void resetSPLstate(void)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b082      	sub	sp, #8
 8012540:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8012542:	4b11      	ldr	r3, [pc, #68]	@ (8012588 <resetSPLstate+0x4c>)
 8012544:	2200      	movs	r2, #0
 8012546:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8012548:	4b10      	ldr	r3, [pc, #64]	@ (801258c <resetSPLstate+0x50>)
 801254a:	2200      	movs	r2, #0
 801254c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 801254e:	4b10      	ldr	r3, [pc, #64]	@ (8012590 <resetSPLstate+0x54>)
 8012550:	2200      	movs	r2, #0
 8012552:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012554:	2300      	movs	r3, #0
 8012556:	607b      	str	r3, [r7, #4]
 8012558:	e00c      	b.n	8012574 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 801255a:	4b0e      	ldr	r3, [pc, #56]	@ (8012594 <resetSPLstate+0x58>)
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	0092      	lsls	r2, r2, #2
 8012560:	2100      	movs	r1, #0
 8012562:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8012564:	4b0c      	ldr	r3, [pc, #48]	@ (8012598 <resetSPLstate+0x5c>)
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	0092      	lsls	r2, r2, #2
 801256a:	2100      	movs	r1, #0
 801256c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	3301      	adds	r3, #1
 8012572:	607b      	str	r3, [r7, #4]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2b05      	cmp	r3, #5
 8012578:	d9ef      	bls.n	801255a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 801257a:	4b08      	ldr	r3, [pc, #32]	@ (801259c <resetSPLstate+0x60>)
 801257c:	2200      	movs	r2, #0
 801257e:	701a      	strb	r2, [r3, #0]
}
 8012580:	46c0      	nop			@ (mov r8, r8)
 8012582:	46bd      	mov	sp, r7
 8012584:	b002      	add	sp, #8
 8012586:	bd80      	pop	{r7, pc}
 8012588:	20001d20 	.word	0x20001d20
 801258c:	20001d24 	.word	0x20001d24
 8012590:	20001d58 	.word	0x20001d58
 8012594:	20001d28 	.word	0x20001d28
 8012598:	20001d40 	.word	0x20001d40
 801259c:	200012cd 	.word	0x200012cd

080125a0 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80125a0:	b5b0      	push	{r4, r5, r7, lr}
 80125a2:	b090      	sub	sp, #64	@ 0x40
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	60b9      	str	r1, [r7, #8]
 80125aa:	0019      	movs	r1, r3
 80125ac:	1dfb      	adds	r3, r7, #7
 80125ae:	701a      	strb	r2, [r3, #0]
 80125b0:	1dbb      	adds	r3, r7, #6
 80125b2:	1c0a      	adds	r2, r1, #0
 80125b4:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80125b6:	1dfb      	adds	r3, r7, #7
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d005      	beq.n	80125ca <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 80125be:	4b3b      	ldr	r3, [pc, #236]	@ (80126ac <getFilteredMaxAmplitudeQ31+0x10c>)
 80125c0:	2200      	movs	r2, #0
 80125c2:	601a      	str	r2, [r3, #0]
        lastData = 0;
 80125c4:	4b3a      	ldr	r3, [pc, #232]	@ (80126b0 <getFilteredMaxAmplitudeQ31+0x110>)
 80125c6:	2200      	movs	r2, #0
 80125c8:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 80125ca:	2300      	movs	r3, #0
 80125cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 80125ce:	2300      	movs	r3, #0
 80125d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 80125d2:	2305      	movs	r3, #5
 80125d4:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 80125d6:	2300      	movs	r3, #0
 80125d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80125da:	e040      	b.n	801265e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 80125dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125de:	009b      	lsls	r3, r3, #2
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	18d3      	adds	r3, r2, r3
 80125e4:	681a      	ldr	r2, [r3, #0]
 80125e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125e8:	409a      	lsls	r2, r3
 80125ea:	0013      	movs	r3, r2
 80125ec:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 80125ee:	4b30      	ldr	r3, [pc, #192]	@ (80126b0 <getFilteredMaxAmplitudeQ31+0x110>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	425a      	negs	r2, r3
 80125f4:	4b2e      	ldr	r3, [pc, #184]	@ (80126b0 <getFilteredMaxAmplitudeQ31+0x110>)
 80125f6:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 80125f8:	2418      	movs	r4, #24
 80125fa:	193a      	adds	r2, r7, r4
 80125fc:	492c      	ldr	r1, [pc, #176]	@ (80126b0 <getFilteredMaxAmplitudeQ31+0x110>)
 80125fe:	231c      	movs	r3, #28
 8012600:	18f8      	adds	r0, r7, r3
 8012602:	2301      	movs	r3, #1
 8012604:	f012 fb2a 	bl	8024c5c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8012608:	2514      	movs	r5, #20
 801260a:	197a      	adds	r2, r7, r5
 801260c:	1939      	adds	r1, r7, r4
 801260e:	4829      	ldr	r0, [pc, #164]	@ (80126b4 <getFilteredMaxAmplitudeQ31+0x114>)
 8012610:	2301      	movs	r3, #1
 8012612:	f012 faf1 	bl	8024bf8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8012616:	2410      	movs	r4, #16
 8012618:	193a      	adds	r2, r7, r4
 801261a:	4924      	ldr	r1, [pc, #144]	@ (80126ac <getFilteredMaxAmplitudeQ31+0x10c>)
 801261c:	4826      	ldr	r0, [pc, #152]	@ (80126b8 <getFilteredMaxAmplitudeQ31+0x118>)
 801261e:	2301      	movs	r3, #1
 8012620:	f012 faea 	bl	8024bf8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8012624:	4a21      	ldr	r2, [pc, #132]	@ (80126ac <getFilteredMaxAmplitudeQ31+0x10c>)
 8012626:	1939      	adds	r1, r7, r4
 8012628:	1978      	adds	r0, r7, r5
 801262a:	2301      	movs	r3, #1
 801262c:	f012 fb16 	bl	8024c5c <arm_add_q31>

        lastData = fx;
 8012630:	69fa      	ldr	r2, [r7, #28]
 8012632:	4b1f      	ldr	r3, [pc, #124]	@ (80126b0 <getFilteredMaxAmplitudeQ31+0x110>)
 8012634:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8012636:	4b1d      	ldr	r3, [pc, #116]	@ (80126ac <getFilteredMaxAmplitudeQ31+0x10c>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801263c:	429a      	cmp	r2, r3
 801263e:	da03      	bge.n	8012648 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8012640:	4b1a      	ldr	r3, [pc, #104]	@ (80126ac <getFilteredMaxAmplitudeQ31+0x10c>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012646:	e007      	b.n	8012658 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8012648:	4b18      	ldr	r3, [pc, #96]	@ (80126ac <getFilteredMaxAmplitudeQ31+0x10c>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801264e:	429a      	cmp	r2, r3
 8012650:	dd02      	ble.n	8012658 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8012652:	4b16      	ldr	r3, [pc, #88]	@ (80126ac <getFilteredMaxAmplitudeQ31+0x10c>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8012658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801265a:	3301      	adds	r3, #1
 801265c:	637b      	str	r3, [r7, #52]	@ 0x34
 801265e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	429a      	cmp	r2, r3
 8012664:	d3ba      	bcc.n	80125dc <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8012666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012668:	17da      	asrs	r2, r3, #31
 801266a:	189b      	adds	r3, r3, r2
 801266c:	4053      	eors	r3, r2
 801266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8012670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012672:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8012674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012678:	4293      	cmp	r3, r2
 801267a:	d200      	bcs.n	801267e <getFilteredMaxAmplitudeQ31+0xde>
 801267c:	0013      	movs	r3, r2
 801267e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 8012680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012684:	40da      	lsrs	r2, r3
 8012686:	0013      	movs	r3, r2
 8012688:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 801268a:	1dbb      	adds	r3, r7, #6
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d007      	beq.n	80126a2 <getFilteredMaxAmplitudeQ31+0x102>
 8012692:	4b0a      	ldr	r3, [pc, #40]	@ (80126bc <getFilteredMaxAmplitudeQ31+0x11c>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	6a3a      	ldr	r2, [r7, #32]
 8012698:	429a      	cmp	r2, r3
 801269a:	d902      	bls.n	80126a2 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 801269c:	4b07      	ldr	r3, [pc, #28]	@ (80126bc <getFilteredMaxAmplitudeQ31+0x11c>)
 801269e:	6a3a      	ldr	r2, [r7, #32]
 80126a0:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80126a2:	6a3b      	ldr	r3, [r7, #32]
}
 80126a4:	0018      	movs	r0, r3
 80126a6:	46bd      	mov	sp, r7
 80126a8:	b010      	add	sp, #64	@ 0x40
 80126aa:	bdb0      	pop	{r4, r5, r7, pc}
 80126ac:	2000215c 	.word	0x2000215c
 80126b0:	20002160 	.word	0x20002160
 80126b4:	0802ef5c 	.word	0x0802ef5c
 80126b8:	0802ef60 	.word	0x0802ef60
 80126bc:	200012d4 	.word	0x200012d4

080126c0 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b086      	sub	sp, #24
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	60f8      	str	r0, [r7, #12]
 80126c8:	60b9      	str	r1, [r7, #8]
 80126ca:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 80126cc:	4913      	ldr	r1, [pc, #76]	@ (801271c <floatToIntAndFrac2dp+0x5c>)
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f7ee fcb6 	bl	8001040 <__aeabi_fmul>
 80126d4:	1c03      	adds	r3, r0, #0
 80126d6:	1c18      	adds	r0, r3, #0
 80126d8:	f016 ff98 	bl	802960c <roundf>
 80126dc:	1c03      	adds	r3, r0, #0
 80126de:	1c18      	adds	r0, r3, #0
 80126e0:	f7ed ff9c 	bl	800061c <__aeabi_f2uiz>
 80126e4:	0003      	movs	r3, r0
 80126e6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	2164      	movs	r1, #100	@ 0x64
 80126ec:	0018      	movs	r0, r3
 80126ee:	f7ed fd59 	bl	80001a4 <__udivsi3>
 80126f2:	0003      	movs	r3, r0
 80126f4:	001a      	movs	r2, r3
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	b2da      	uxtb	r2, r3
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	b2db      	uxtb	r3, r3
 8012704:	2164      	movs	r1, #100	@ 0x64
 8012706:	434b      	muls	r3, r1
 8012708:	b2db      	uxtb	r3, r3
 801270a:	1ad3      	subs	r3, r2, r3
 801270c:	b2da      	uxtb	r2, r3
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	701a      	strb	r2, [r3, #0]
}
 8012712:	46c0      	nop			@ (mov r8, r8)
 8012714:	46bd      	mov	sp, r7
 8012716:	b006      	add	sp, #24
 8012718:	bd80      	pop	{r7, pc}
 801271a:	46c0      	nop			@ (mov r8, r8)
 801271c:	42c80000 	.word	0x42c80000

08012720 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b086      	sub	sp, #24
 8012724:	af00      	add	r7, sp, #0
 8012726:	60f8      	str	r0, [r7, #12]
 8012728:	60b9      	str	r1, [r7, #8]
 801272a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 801272c:	4914      	ldr	r1, [pc, #80]	@ (8012780 <floatToIntAndFrac1dp+0x60>)
 801272e:	68f8      	ldr	r0, [r7, #12]
 8012730:	f7ee fc86 	bl	8001040 <__aeabi_fmul>
 8012734:	1c03      	adds	r3, r0, #0
 8012736:	1c18      	adds	r0, r3, #0
 8012738:	f016 ff68 	bl	802960c <roundf>
 801273c:	1c03      	adds	r3, r0, #0
 801273e:	1c18      	adds	r0, r3, #0
 8012740:	f7ed ff6c 	bl	800061c <__aeabi_f2uiz>
 8012744:	0003      	movs	r3, r0
 8012746:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	210a      	movs	r1, #10
 801274c:	0018      	movs	r0, r3
 801274e:	f7ed fd29 	bl	80001a4 <__udivsi3>
 8012752:	0003      	movs	r3, r0
 8012754:	001a      	movs	r2, r3
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	b2da      	uxtb	r2, r3
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	b2db      	uxtb	r3, r3
 8012764:	1c19      	adds	r1, r3, #0
 8012766:	0089      	lsls	r1, r1, #2
 8012768:	18cb      	adds	r3, r1, r3
 801276a:	18db      	adds	r3, r3, r3
 801276c:	b2db      	uxtb	r3, r3
 801276e:	1ad3      	subs	r3, r2, r3
 8012770:	b2da      	uxtb	r2, r3
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	701a      	strb	r2, [r3, #0]
}
 8012776:	46c0      	nop			@ (mov r8, r8)
 8012778:	46bd      	mov	sp, r7
 801277a:	b006      	add	sp, #24
 801277c:	bd80      	pop	{r7, pc}
 801277e:	46c0      	nop			@ (mov r8, r8)
 8012780:	41200000 	.word	0x41200000

08012784 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8012784:	b590      	push	{r4, r7, lr}
 8012786:	b087      	sub	sp, #28
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
 8012790:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f7ef f848 	bl	8001828 <__aeabi_i2f>
 8012798:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 801279a:	6838      	ldr	r0, [r7, #0]
 801279c:	f7ef f844 	bl	8001828 <__aeabi_i2f>
 80127a0:	1c03      	adds	r3, r0, #0
 80127a2:	4918      	ldr	r1, [pc, #96]	@ (8012804 <sumToIntAverage+0x80>)
 80127a4:	1c18      	adds	r0, r3, #0
 80127a6:	f7ee fa7d 	bl	8000ca4 <__aeabi_fdiv>
 80127aa:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80127ac:	1c19      	adds	r1, r3, #0
 80127ae:	1c20      	adds	r0, r4, #0
 80127b0:	f7ee f886 	bl	80008c0 <__aeabi_fadd>
 80127b4:	1c03      	adds	r3, r0, #0
 80127b6:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80127b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80127ba:	f7ef f885 	bl	80018c8 <__aeabi_ui2f>
 80127be:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80127c0:	1c19      	adds	r1, r3, #0
 80127c2:	1c20      	adds	r0, r4, #0
 80127c4:	f7ee fa6e 	bl	8000ca4 <__aeabi_fdiv>
 80127c8:	1c03      	adds	r3, r0, #0
 80127ca:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 80127cc:	2300      	movs	r3, #0
 80127ce:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 80127d0:	68ba      	ldr	r2, [r7, #8]
 80127d2:	2310      	movs	r3, #16
 80127d4:	18f9      	adds	r1, r7, r3
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	1c18      	adds	r0, r3, #0
 80127da:	f7ff ffa1 	bl	8012720 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	2bff      	cmp	r3, #255	@ 0xff
 80127e2:	d906      	bls.n	80127f2 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	22ff      	movs	r2, #255	@ 0xff
 80127e8:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	2209      	movs	r2, #9
 80127ee:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 80127f0:	e003      	b.n	80127fa <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	b2da      	uxtb	r2, r3
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	701a      	strb	r2, [r3, #0]
}
 80127fa:	46c0      	nop			@ (mov r8, r8)
 80127fc:	46bd      	mov	sp, r7
 80127fe:	b007      	add	sp, #28
 8012800:	bd90      	pop	{r4, r7, pc}
 8012802:	46c0      	nop			@ (mov r8, r8)
 8012804:	41200000 	.word	0x41200000

08012808 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b086      	sub	sp, #24
 801280c:	af00      	add	r7, sp, #0
 801280e:	60f8      	str	r0, [r7, #12]
 8012810:	60b9      	str	r1, [r7, #8]
 8012812:	607a      	str	r2, [r7, #4]
 8012814:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	2280      	movs	r2, #128	@ 0x80
 801281a:	0612      	lsls	r2, r2, #24
 801281c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	4a18      	ldr	r2, [pc, #96]	@ (8012884 <findMinMax+0x7c>)
 8012822:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012824:	2300      	movs	r3, #0
 8012826:	617b      	str	r3, [r7, #20]
 8012828:	e022      	b.n	8012870 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	009b      	lsls	r3, r3, #2
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	18d3      	adds	r3, r2, r3
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	429a      	cmp	r2, r3
 801283a:	da06      	bge.n	801284a <findMinMax+0x42>
        {
            min[0] = array[i];
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	18d3      	adds	r3, r2, r3
 8012844:	681a      	ldr	r2, [r3, #0]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	009b      	lsls	r3, r3, #2
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	18d3      	adds	r3, r2, r3
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	429a      	cmp	r2, r3
 801285a:	dd06      	ble.n	801286a <findMinMax+0x62>
        {
            max[0] = array[i];
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	009b      	lsls	r3, r3, #2
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	18d3      	adds	r3, r2, r3
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	3301      	adds	r3, #1
 801286e:	617b      	str	r3, [r7, #20]
 8012870:	697a      	ldr	r2, [r7, #20]
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	429a      	cmp	r2, r3
 8012876:	d3d8      	bcc.n	801282a <findMinMax+0x22>
        }
    }
}
 8012878:	46c0      	nop			@ (mov r8, r8)
 801287a:	46c0      	nop			@ (mov r8, r8)
 801287c:	46bd      	mov	sp, r7
 801287e:	b006      	add	sp, #24
 8012880:	bd80      	pop	{r7, pc}
 8012882:	46c0      	nop			@ (mov r8, r8)
 8012884:	7fffffff 	.word	0x7fffffff

08012888 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8012892:	2300      	movs	r3, #0
 8012894:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	429a      	cmp	r2, r3
 801289c:	d302      	bcc.n	80128a4 <getPo2factor+0x1c>
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d107      	bne.n	80128b4 <getPo2factor+0x2c>
    {
        return 0;
 80128a4:	2300      	movs	r3, #0
 80128a6:	e00d      	b.n	80128c4 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	085b      	lsrs	r3, r3, #1
 80128ac:	607b      	str	r3, [r7, #4]
        bitShift++;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	3301      	adds	r3, #1
 80128b2:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d2f5      	bcs.n	80128a8 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	3b01      	subs	r3, #1
 80128c0:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80128c2:	68fb      	ldr	r3, [r7, #12]
}
 80128c4:	0018      	movs	r0, r3
 80128c6:	46bd      	mov	sp, r7
 80128c8:	b004      	add	sp, #16
 80128ca:	bd80      	pop	{r7, pc}

080128cc <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b086      	sub	sp, #24
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
 80128d8:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 80128da:	68f8      	ldr	r0, [r7, #12]
 80128dc:	f7ee fff4 	bl	80018c8 <__aeabi_ui2f>
 80128e0:	1c03      	adds	r3, r0, #0
 80128e2:	1c19      	adds	r1, r3, #0
 80128e4:	68b8      	ldr	r0, [r7, #8]
 80128e6:	f7ee fbab 	bl	8001040 <__aeabi_fmul>
 80128ea:	1c03      	adds	r3, r0, #0
 80128ec:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 80128ee:	2300      	movs	r3, #0
 80128f0:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 80128f2:	683a      	ldr	r2, [r7, #0]
 80128f4:	2310      	movs	r3, #16
 80128f6:	18f9      	adds	r1, r7, r3
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	1c18      	adds	r0, r3, #0
 80128fc:	f7ff fee0 	bl	80126c0 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	b29a      	uxth	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	801a      	strh	r2, [r3, #0]
}
 8012908:	46c0      	nop			@ (mov r8, r8)
 801290a:	46bd      	mov	sp, r7
 801290c:	b006      	add	sp, #24
 801290e:	bd80      	pop	{r7, pc}

08012910 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	60b8      	str	r0, [r7, #8]
 8012918:	60f9      	str	r1, [r7, #12]
 801291a:	607a      	str	r2, [r7, #4]
 801291c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 801291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012920:	6a3a      	ldr	r2, [r7, #32]
 8012922:	68b8      	ldr	r0, [r7, #8]
 8012924:	68f9      	ldr	r1, [r7, #12]
 8012926:	f7f9 fe7f 	bl	800c628 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801292a:	6a3b      	ldr	r3, [r7, #32]
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	18d2      	adds	r2, r2, r3
 8012932:	69bb      	ldr	r3, [r7, #24]
 8012934:	18d2      	adds	r2, r2, r3
 8012936:	6a3b      	ldr	r3, [r7, #32]
 8012938:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 801293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801293c:	681a      	ldr	r2, [r3, #0]
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	18d2      	adds	r2, r2, r3
 8012942:	69fb      	ldr	r3, [r7, #28]
 8012944:	18d2      	adds	r2, r2, r3
 8012946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012948:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 801294a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801294c:	6a3b      	ldr	r3, [r7, #32]
 801294e:	0011      	movs	r1, r2
 8012950:	0018      	movs	r0, r3
 8012952:	f7f9 fef9 	bl	800c748 <correctIntFracNumber>
}
 8012956:	46c0      	nop			@ (mov r8, r8)
 8012958:	46bd      	mov	sp, r7
 801295a:	b004      	add	sp, #16
 801295c:	bd80      	pop	{r7, pc}

0801295e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 801295e:	b580      	push	{r7, lr}
 8012960:	b086      	sub	sp, #24
 8012962:	af00      	add	r7, sp, #0
 8012964:	60f8      	str	r0, [r7, #12]
 8012966:	60b9      	str	r1, [r7, #8]
 8012968:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 801296e:	2300      	movs	r3, #0
 8012970:	613b      	str	r3, [r7, #16]
 8012972:	e019      	b.n	80129a8 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	005b      	lsls	r3, r3, #1
 8012978:	68fa      	ldr	r2, [r7, #12]
 801297a:	18d3      	adds	r3, r2, r3
 801297c:	881b      	ldrh	r3, [r3, #0]
 801297e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8012980:	693a      	ldr	r2, [r7, #16]
 8012982:	3201      	adds	r2, #1
 8012984:	0052      	lsls	r2, r2, #1
 8012986:	68f9      	ldr	r1, [r7, #12]
 8012988:	188a      	adds	r2, r1, r2
 801298a:	8812      	ldrh	r2, [r2, #0]
 801298c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801298e:	0019      	movs	r1, r3
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8012998:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801299a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	3301      	adds	r3, #1
 80129a0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	3304      	adds	r3, #4
 80129a6:	613b      	str	r3, [r7, #16]
 80129a8:	693a      	ldr	r2, [r7, #16]
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d3e1      	bcc.n	8012974 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80129b0:	46c0      	nop			@ (mov r8, r8)
 80129b2:	46c0      	nop			@ (mov r8, r8)
 80129b4:	46bd      	mov	sp, r7
 80129b6:	b006      	add	sp, #24
 80129b8:	bd80      	pop	{r7, pc}
	...

080129bc <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 80129bc:	b580      	push	{r7, lr}
 80129be:	af00      	add	r7, sp, #0
  init = false;
 80129c0:	4b02      	ldr	r3, [pc, #8]	@ (80129cc <InitDone+0x10>)
 80129c2:	2200      	movs	r2, #0
 80129c4:	701a      	strb	r2, [r3, #0]
}
 80129c6:	46c0      	nop			@ (mov r8, r8)
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	200000e8 	.word	0x200000e8

080129d0 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 80129d6:	f7f7 f8f1 	bl	8009bbc <ReadBatteryVoltage>
 80129da:	1c02      	adds	r2, r0, #0
 80129dc:	4b28      	ldr	r3, [pc, #160]	@ (8012a80 <batteryChargeCheck+0xb0>)
 80129de:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.68){
 80129e0:	4b27      	ldr	r3, [pc, #156]	@ (8012a80 <batteryChargeCheck+0xb0>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	1c18      	adds	r0, r3, #0
 80129e6:	f7f0 ff55 	bl	8003894 <__aeabi_f2d>
 80129ea:	4a26      	ldr	r2, [pc, #152]	@ (8012a84 <batteryChargeCheck+0xb4>)
 80129ec:	4b26      	ldr	r3, [pc, #152]	@ (8012a88 <batteryChargeCheck+0xb8>)
 80129ee:	f7ed fd65 	bl	80004bc <__aeabi_dcmplt>
 80129f2:	1e03      	subs	r3, r0, #0
 80129f4:	d002      	beq.n	80129fc <batteryChargeCheck+0x2c>
    status = BATTERY_CRITICAL;
 80129f6:	1dfb      	adds	r3, r7, #7
 80129f8:	2200      	movs	r2, #0
 80129fa:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.68 && batteryCharge < 3.74){
 80129fc:	4b20      	ldr	r3, [pc, #128]	@ (8012a80 <batteryChargeCheck+0xb0>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	1c18      	adds	r0, r3, #0
 8012a02:	f7f0 ff47 	bl	8003894 <__aeabi_f2d>
 8012a06:	4a1f      	ldr	r2, [pc, #124]	@ (8012a84 <batteryChargeCheck+0xb4>)
 8012a08:	4b1f      	ldr	r3, [pc, #124]	@ (8012a88 <batteryChargeCheck+0xb8>)
 8012a0a:	f7ed fd75 	bl	80004f8 <__aeabi_dcmpge>
 8012a0e:	1e03      	subs	r3, r0, #0
 8012a10:	d00d      	beq.n	8012a2e <batteryChargeCheck+0x5e>
 8012a12:	4b1b      	ldr	r3, [pc, #108]	@ (8012a80 <batteryChargeCheck+0xb0>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	1c18      	adds	r0, r3, #0
 8012a18:	f7f0 ff3c 	bl	8003894 <__aeabi_f2d>
 8012a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8012a8c <batteryChargeCheck+0xbc>)
 8012a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8012a90 <batteryChargeCheck+0xc0>)
 8012a20:	f7ed fd4c 	bl	80004bc <__aeabi_dcmplt>
 8012a24:	1e03      	subs	r3, r0, #0
 8012a26:	d002      	beq.n	8012a2e <batteryChargeCheck+0x5e>
    status = BATTERY_LOW;
 8012a28:	1dfb      	adds	r3, r7, #7
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.74 && batteryCharge < 4.00){
 8012a2e:	4b14      	ldr	r3, [pc, #80]	@ (8012a80 <batteryChargeCheck+0xb0>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	1c18      	adds	r0, r3, #0
 8012a34:	f7f0 ff2e 	bl	8003894 <__aeabi_f2d>
 8012a38:	4a14      	ldr	r2, [pc, #80]	@ (8012a8c <batteryChargeCheck+0xbc>)
 8012a3a:	4b15      	ldr	r3, [pc, #84]	@ (8012a90 <batteryChargeCheck+0xc0>)
 8012a3c:	f7ed fd5c 	bl	80004f8 <__aeabi_dcmpge>
 8012a40:	1e03      	subs	r3, r0, #0
 8012a42:	d00b      	beq.n	8012a5c <batteryChargeCheck+0x8c>
 8012a44:	4b0e      	ldr	r3, [pc, #56]	@ (8012a80 <batteryChargeCheck+0xb0>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	2181      	movs	r1, #129	@ 0x81
 8012a4a:	05c9      	lsls	r1, r1, #23
 8012a4c:	1c18      	adds	r0, r3, #0
 8012a4e:	f7ed fd6f 	bl	8000530 <__aeabi_fcmplt>
 8012a52:	1e03      	subs	r3, r0, #0
 8012a54:	d002      	beq.n	8012a5c <batteryChargeCheck+0x8c>
    status = BATTERY_GOOD;
 8012a56:	1dfb      	adds	r3, r7, #7
 8012a58:	2202      	movs	r2, #2
 8012a5a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8012a5c:	4b08      	ldr	r3, [pc, #32]	@ (8012a80 <batteryChargeCheck+0xb0>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	2181      	movs	r1, #129	@ 0x81
 8012a62:	05c9      	lsls	r1, r1, #23
 8012a64:	1c18      	adds	r0, r3, #0
 8012a66:	f7ed fd81 	bl	800056c <__aeabi_fcmpge>
 8012a6a:	1e03      	subs	r3, r0, #0
 8012a6c:	d002      	beq.n	8012a74 <batteryChargeCheck+0xa4>
    status = BATTERY_FULL;
 8012a6e:	1dfb      	adds	r3, r7, #7
 8012a70:	2203      	movs	r2, #3
 8012a72:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8012a74:	1dfb      	adds	r3, r7, #7
 8012a76:	781b      	ldrb	r3, [r3, #0]
}
 8012a78:	0018      	movs	r0, r3
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	b002      	add	sp, #8
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	20002174 	.word	0x20002174
 8012a84:	d70a3d71 	.word	0xd70a3d71
 8012a88:	400d70a3 	.word	0x400d70a3
 8012a8c:	1eb851ec 	.word	0x1eb851ec
 8012a90:	400deb85 	.word	0x400deb85

08012a94 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8012a94:	b5b0      	push	{r4, r5, r7, lr}
 8012a96:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8012a98:	f7f7 f8f2 	bl	8009c80 <ReadSolarVoltage>
 8012a9c:	0003      	movs	r3, r0
 8012a9e:	001a      	movs	r2, r3
 8012aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8012b0c <Calculate_LED_ON+0x78>)
 8012aa2:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8012aa4:	4b19      	ldr	r3, [pc, #100]	@ (8012b0c <Calculate_LED_ON+0x78>)
 8012aa6:	881b      	ldrh	r3, [r3, #0]
 8012aa8:	4a19      	ldr	r2, [pc, #100]	@ (8012b10 <Calculate_LED_ON+0x7c>)
 8012aaa:	4293      	cmp	r3, r2
 8012aac:	d802      	bhi.n	8012ab4 <Calculate_LED_ON+0x20>
    solmV = 2900;
 8012aae:	4b17      	ldr	r3, [pc, #92]	@ (8012b0c <Calculate_LED_ON+0x78>)
 8012ab0:	4a18      	ldr	r2, [pc, #96]	@ (8012b14 <Calculate_LED_ON+0x80>)
 8012ab2:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8012ab4:	4b15      	ldr	r3, [pc, #84]	@ (8012b0c <Calculate_LED_ON+0x78>)
 8012ab6:	881b      	ldrh	r3, [r3, #0]
 8012ab8:	4a17      	ldr	r2, [pc, #92]	@ (8012b18 <Calculate_LED_ON+0x84>)
 8012aba:	4293      	cmp	r3, r2
 8012abc:	d902      	bls.n	8012ac4 <Calculate_LED_ON+0x30>
    solmV = 4700;
 8012abe:	4b13      	ldr	r3, [pc, #76]	@ (8012b0c <Calculate_LED_ON+0x78>)
 8012ac0:	4a15      	ldr	r2, [pc, #84]	@ (8012b18 <Calculate_LED_ON+0x84>)
 8012ac2:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8012ac4:	4b11      	ldr	r3, [pc, #68]	@ (8012b0c <Calculate_LED_ON+0x78>)
 8012ac6:	881b      	ldrh	r3, [r3, #0]
 8012ac8:	0018      	movs	r0, r3
 8012aca:	f7f0 fe91 	bl	80037f0 <__aeabi_i2d>
 8012ace:	0004      	movs	r4, r0
 8012ad0:	000d      	movs	r5, r1
 8012ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8012b0c <Calculate_LED_ON+0x78>)
 8012ad4:	881b      	ldrh	r3, [r3, #0]
 8012ad6:	001a      	movs	r2, r3
 8012ad8:	4b10      	ldr	r3, [pc, #64]	@ (8012b1c <Calculate_LED_ON+0x88>)
 8012ada:	1a9b      	subs	r3, r3, r2
 8012adc:	0018      	movs	r0, r3
 8012ade:	f7f0 fe87 	bl	80037f0 <__aeabi_i2d>
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8012b20 <Calculate_LED_ON+0x8c>)
 8012ae6:	f7ef ff35 	bl	8002954 <__aeabi_dmul>
 8012aea:	0002      	movs	r2, r0
 8012aec:	000b      	movs	r3, r1
 8012aee:	0020      	movs	r0, r4
 8012af0:	0029      	movs	r1, r5
 8012af2:	f7ee ff2f 	bl	8001954 <__aeabi_dadd>
 8012af6:	0002      	movs	r2, r0
 8012af8:	000b      	movs	r3, r1
 8012afa:	0010      	movs	r0, r2
 8012afc:	0019      	movs	r1, r3
 8012afe:	f7ed fda5 	bl	800064c <__aeabi_d2uiz>
 8012b02:	0003      	movs	r3, r0
 8012b04:	b29b      	uxth	r3, r3
}
 8012b06:	0018      	movs	r0, r3
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8012b0c:	20002178 	.word	0x20002178
 8012b10:	00000b53 	.word	0x00000b53
 8012b14:	00000b54 	.word	0x00000b54
 8012b18:	0000125c 	.word	0x0000125c
 8012b1c:	00000dee 	.word	0x00000dee
 8012b20:	3ff80000 	.word	0x3ff80000

08012b24 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8012b24:	b590      	push	{r4, r7, lr}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	0004      	movs	r4, r0
 8012b2c:	0008      	movs	r0, r1
 8012b2e:	0011      	movs	r1, r2
 8012b30:	1dbb      	adds	r3, r7, #6
 8012b32:	1c22      	adds	r2, r4, #0
 8012b34:	801a      	strh	r2, [r3, #0]
 8012b36:	1d3b      	adds	r3, r7, #4
 8012b38:	1c02      	adds	r2, r0, #0
 8012b3a:	801a      	strh	r2, [r3, #0]
 8012b3c:	1cbb      	adds	r3, r7, #2
 8012b3e:	1c0a      	adds	r2, r1, #0
 8012b40:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8012b42:	4b0f      	ldr	r3, [pc, #60]	@ (8012b80 <SetStatusLED+0x5c>)
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d107      	bne.n	8012b5a <SetStatusLED+0x36>
 8012b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8012b84 <SetStatusLED+0x60>)
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d103      	bne.n	8012b5a <SetStatusLED+0x36>
 8012b52:	4b0d      	ldr	r3, [pc, #52]	@ (8012b88 <SetStatusLED+0x64>)
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d00e      	beq.n	8012b78 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8012b5a:	2380      	movs	r3, #128	@ 0x80
 8012b5c:	05db      	lsls	r3, r3, #23
 8012b5e:	1dba      	adds	r2, r7, #6
 8012b60:	8812      	ldrh	r2, [r2, #0]
 8012b62:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8012b64:	2380      	movs	r3, #128	@ 0x80
 8012b66:	05db      	lsls	r3, r3, #23
 8012b68:	1d3a      	adds	r2, r7, #4
 8012b6a:	8812      	ldrh	r2, [r2, #0]
 8012b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8012b6e:	2380      	movs	r3, #128	@ 0x80
 8012b70:	05db      	lsls	r3, r3, #23
 8012b72:	1cba      	adds	r2, r7, #2
 8012b74:	8812      	ldrh	r2, [r2, #0]
 8012b76:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012b78:	46c0      	nop			@ (mov r8, r8)
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	b003      	add	sp, #12
 8012b7e:	bd90      	pop	{r4, r7, pc}
 8012b80:	20002165 	.word	0x20002165
 8012b84:	200000e8 	.word	0x200000e8
 8012b88:	20002166 	.word	0x20002166

08012b8c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8012b8c:	b590      	push	{r4, r7, lr}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	0004      	movs	r4, r0
 8012b94:	0008      	movs	r0, r1
 8012b96:	0011      	movs	r1, r2
 8012b98:	1dfb      	adds	r3, r7, #7
 8012b9a:	1c22      	adds	r2, r4, #0
 8012b9c:	701a      	strb	r2, [r3, #0]
 8012b9e:	1dbb      	adds	r3, r7, #6
 8012ba0:	1c02      	adds	r2, r0, #0
 8012ba2:	701a      	strb	r2, [r3, #0]
 8012ba4:	1d7b      	adds	r3, r7, #5
 8012ba6:	1c0a      	adds	r2, r1, #0
 8012ba8:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8012baa:	4b19      	ldr	r3, [pc, #100]	@ (8012c10 <SetDBLED+0x84>)
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d107      	bne.n	8012bc2 <SetDBLED+0x36>
 8012bb2:	4b18      	ldr	r3, [pc, #96]	@ (8012c14 <SetDBLED+0x88>)
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d103      	bne.n	8012bc2 <SetDBLED+0x36>
 8012bba:	4b17      	ldr	r3, [pc, #92]	@ (8012c18 <SetDBLED+0x8c>)
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d022      	beq.n	8012c08 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8012bc2:	1dfb      	adds	r3, r7, #7
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	4053      	eors	r3, r2
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	001a      	movs	r2, r3
 8012bce:	4b13      	ldr	r3, [pc, #76]	@ (8012c1c <SetDBLED+0x90>)
 8012bd0:	2101      	movs	r1, #1
 8012bd2:	0018      	movs	r0, r3
 8012bd4:	f003 fb0f 	bl	80161f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8012bd8:	1dbb      	adds	r3, r7, #6
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	2201      	movs	r2, #1
 8012bde:	4053      	eors	r3, r2
 8012be0:	b2db      	uxtb	r3, r3
 8012be2:	001a      	movs	r2, r3
 8012be4:	2380      	movs	r3, #128	@ 0x80
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	480c      	ldr	r0, [pc, #48]	@ (8012c1c <SetDBLED+0x90>)
 8012bea:	0019      	movs	r1, r3
 8012bec:	f003 fb03 	bl	80161f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8012bf0:	1d7b      	adds	r3, r7, #5
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	4053      	eors	r3, r2
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	001a      	movs	r2, r3
 8012bfc:	2380      	movs	r3, #128	@ 0x80
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	4806      	ldr	r0, [pc, #24]	@ (8012c1c <SetDBLED+0x90>)
 8012c02:	0019      	movs	r1, r3
 8012c04:	f003 faf7 	bl	80161f6 <HAL_GPIO_WritePin>
  }
}
 8012c08:	46c0      	nop			@ (mov r8, r8)
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	b003      	add	sp, #12
 8012c0e:	bd90      	pop	{r4, r7, pc}
 8012c10:	20002165 	.word	0x20002165
 8012c14:	200000e8 	.word	0x200000e8
 8012c18:	20002166 	.word	0x20002166
 8012c1c:	50000400 	.word	0x50000400

08012c20 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8012c20:	b590      	push	{r4, r7, lr}
 8012c22:	b083      	sub	sp, #12
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	0004      	movs	r4, r0
 8012c28:	0008      	movs	r0, r1
 8012c2a:	0011      	movs	r1, r2
 8012c2c:	1dbb      	adds	r3, r7, #6
 8012c2e:	1c22      	adds	r2, r4, #0
 8012c30:	801a      	strh	r2, [r3, #0]
 8012c32:	1d3b      	adds	r3, r7, #4
 8012c34:	1c02      	adds	r2, r0, #0
 8012c36:	801a      	strh	r2, [r3, #0]
 8012c38:	1cbb      	adds	r3, r7, #2
 8012c3a:	1c0a      	adds	r2, r1, #0
 8012c3c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8012c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8012c78 <SetVocLED+0x58>)
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d107      	bne.n	8012c56 <SetVocLED+0x36>
 8012c46:	4b0d      	ldr	r3, [pc, #52]	@ (8012c7c <SetVocLED+0x5c>)
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d103      	bne.n	8012c56 <SetVocLED+0x36>
 8012c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8012c80 <SetVocLED+0x60>)
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d00b      	beq.n	8012c6e <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8012c56:	4b0b      	ldr	r3, [pc, #44]	@ (8012c84 <SetVocLED+0x64>)
 8012c58:	1dba      	adds	r2, r7, #6
 8012c5a:	8812      	ldrh	r2, [r2, #0]
 8012c5c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8012c5e:	4b09      	ldr	r3, [pc, #36]	@ (8012c84 <SetVocLED+0x64>)
 8012c60:	1d3a      	adds	r2, r7, #4
 8012c62:	8812      	ldrh	r2, [r2, #0]
 8012c64:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8012c66:	4b07      	ldr	r3, [pc, #28]	@ (8012c84 <SetVocLED+0x64>)
 8012c68:	1cba      	adds	r2, r7, #2
 8012c6a:	8812      	ldrh	r2, [r2, #0]
 8012c6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012c6e:	46c0      	nop			@ (mov r8, r8)
 8012c70:	46bd      	mov	sp, r7
 8012c72:	b003      	add	sp, #12
 8012c74:	bd90      	pop	{r4, r7, pc}
 8012c76:	46c0      	nop			@ (mov r8, r8)
 8012c78:	20002165 	.word	0x20002165
 8012c7c:	200000e8 	.word	0x200000e8
 8012c80:	20002166 	.word	0x20002166
 8012c84:	40000400 	.word	0x40000400

08012c88 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012c8c:	4b08      	ldr	r3, [pc, #32]	@ (8012cb0 <SetMeasurementIndicator+0x28>)
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d103      	bne.n	8012c9c <SetMeasurementIndicator+0x14>
 8012c94:	4b07      	ldr	r3, [pc, #28]	@ (8012cb4 <SetMeasurementIndicator+0x2c>)
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d006      	beq.n	8012caa <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012c9c:	f7ff fefa 	bl	8012a94 <Calculate_LED_ON>
 8012ca0:	0003      	movs	r3, r0
 8012ca2:	001a      	movs	r2, r3
 8012ca4:	2380      	movs	r3, #128	@ 0x80
 8012ca6:	05db      	lsls	r3, r3, #23
 8012ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012caa:	46c0      	nop			@ (mov r8, r8)
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	20002165 	.word	0x20002165
 8012cb4:	20002166 	.word	0x20002166

08012cb8 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012cbc:	4b07      	ldr	r3, [pc, #28]	@ (8012cdc <ResetMeasurementIndicator+0x24>)
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d103      	bne.n	8012ccc <ResetMeasurementIndicator+0x14>
 8012cc4:	4b06      	ldr	r3, [pc, #24]	@ (8012ce0 <ResetMeasurementIndicator+0x28>)
 8012cc6:	781b      	ldrb	r3, [r3, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d004      	beq.n	8012cd6 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8012ccc:	2380      	movs	r3, #128	@ 0x80
 8012cce:	05db      	lsls	r3, r3, #23
 8012cd0:	22fa      	movs	r2, #250	@ 0xfa
 8012cd2:	0112      	lsls	r2, r2, #4
 8012cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012cd6:	46c0      	nop			@ (mov r8, r8)
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	20002165 	.word	0x20002165
 8012ce0:	20002166 	.word	0x20002166

08012ce4 <SetMICIndicator>:
void SetMICIndicator(){
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012ce8:	4b19      	ldr	r3, [pc, #100]	@ (8012d50 <SetMICIndicator+0x6c>)
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d103      	bne.n	8012cf8 <SetMICIndicator+0x14>
 8012cf0:	4b18      	ldr	r3, [pc, #96]	@ (8012d54 <SetMICIndicator+0x70>)
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d007      	beq.n	8012d08 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012cf8:	f7ff fecc 	bl	8012a94 <Calculate_LED_ON>
 8012cfc:	0003      	movs	r3, r0
 8012cfe:	001a      	movs	r2, r3
 8012d00:	2380      	movs	r3, #128	@ 0x80
 8012d02:	05db      	lsls	r3, r3, #23
 8012d04:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 8012d06:	e01f      	b.n	8012d48 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8012d08:	4b13      	ldr	r3, [pc, #76]	@ (8012d58 <SetMICIndicator+0x74>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	1c18      	adds	r0, r3, #0
 8012d0e:	f7f0 fdc1 	bl	8003894 <__aeabi_f2d>
 8012d12:	4a12      	ldr	r2, [pc, #72]	@ (8012d5c <SetMICIndicator+0x78>)
 8012d14:	4b12      	ldr	r3, [pc, #72]	@ (8012d60 <SetMICIndicator+0x7c>)
 8012d16:	f7ed fbe5 	bl	80004e4 <__aeabi_dcmpgt>
 8012d1a:	1e03      	subs	r3, r0, #0
 8012d1c:	d00a      	beq.n	8012d34 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8012d1e:	f7ff feb9 	bl	8012a94 <Calculate_LED_ON>
 8012d22:	0003      	movs	r3, r0
 8012d24:	001a      	movs	r2, r3
 8012d26:	2380      	movs	r3, #128	@ 0x80
 8012d28:	05db      	lsls	r3, r3, #23
 8012d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8012d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8012d64 <SetMICIndicator+0x80>)
 8012d2e:	2202      	movs	r2, #2
 8012d30:	701a      	strb	r2, [r3, #0]
}
 8012d32:	e009      	b.n	8012d48 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8012d34:	f7ff feae 	bl	8012a94 <Calculate_LED_ON>
 8012d38:	0003      	movs	r3, r0
 8012d3a:	001a      	movs	r2, r3
 8012d3c:	2380      	movs	r3, #128	@ 0x80
 8012d3e:	05db      	lsls	r3, r3, #23
 8012d40:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8012d42:	4b08      	ldr	r3, [pc, #32]	@ (8012d64 <SetMICIndicator+0x80>)
 8012d44:	2201      	movs	r2, #1
 8012d46:	701a      	strb	r2, [r3, #0]
}
 8012d48:	46c0      	nop			@ (mov r8, r8)
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	46c0      	nop			@ (mov r8, r8)
 8012d50:	20002165 	.word	0x20002165
 8012d54:	20002166 	.word	0x20002166
 8012d58:	20002174 	.word	0x20002174
 8012d5c:	9999999a 	.word	0x9999999a
 8012d60:	400d9999 	.word	0x400d9999
 8012d64:	20002168 	.word	0x20002168

08012d68 <ResetMICIndicator>:
void ResetMICIndicator(){
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8012dac <ResetMICIndicator+0x44>)
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d103      	bne.n	8012d7c <ResetMICIndicator+0x14>
 8012d74:	4b0e      	ldr	r3, [pc, #56]	@ (8012db0 <ResetMICIndicator+0x48>)
 8012d76:	781b      	ldrb	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d005      	beq.n	8012d88 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8012d7c:	2380      	movs	r3, #128	@ 0x80
 8012d7e:	05db      	lsls	r3, r3, #23
 8012d80:	22fa      	movs	r2, #250	@ 0xfa
 8012d82:	0112      	lsls	r2, r2, #4
 8012d84:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 8012d86:	e00e      	b.n	8012da6 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 8012d88:	4b0a      	ldr	r3, [pc, #40]	@ (8012db4 <ResetMICIndicator+0x4c>)
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	2b02      	cmp	r3, #2
 8012d8e:	d105      	bne.n	8012d9c <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8012d90:	2380      	movs	r3, #128	@ 0x80
 8012d92:	05db      	lsls	r3, r3, #23
 8012d94:	22fa      	movs	r2, #250	@ 0xfa
 8012d96:	0112      	lsls	r2, r2, #4
 8012d98:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8012d9a:	e004      	b.n	8012da6 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8012d9c:	2380      	movs	r3, #128	@ 0x80
 8012d9e:	05db      	lsls	r3, r3, #23
 8012da0:	22fa      	movs	r2, #250	@ 0xfa
 8012da2:	0112      	lsls	r2, r2, #4
 8012da4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012da6:	46c0      	nop			@ (mov r8, r8)
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}
 8012dac:	20002165 	.word	0x20002165
 8012db0:	20002166 	.word	0x20002166
 8012db4:	20002168 	.word	0x20002168

08012db8 <SetESPIndicator>:
void SetESPIndicator(){
 8012db8:	b580      	push	{r7, lr}
 8012dba:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012dbc:	4b08      	ldr	r3, [pc, #32]	@ (8012de0 <SetESPIndicator+0x28>)
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d103      	bne.n	8012dcc <SetESPIndicator+0x14>
 8012dc4:	4b07      	ldr	r3, [pc, #28]	@ (8012de4 <SetESPIndicator+0x2c>)
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d006      	beq.n	8012dda <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012dcc:	f7ff fe62 	bl	8012a94 <Calculate_LED_ON>
 8012dd0:	0003      	movs	r3, r0
 8012dd2:	001a      	movs	r2, r3
 8012dd4:	2380      	movs	r3, #128	@ 0x80
 8012dd6:	05db      	lsls	r3, r3, #23
 8012dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012dda:	46c0      	nop			@ (mov r8, r8)
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	20002165 	.word	0x20002165
 8012de4:	20002166 	.word	0x20002166

08012de8 <ResetESPIndicator>:
void ResetESPIndicator(){
 8012de8:	b580      	push	{r7, lr}
 8012dea:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012dec:	4b07      	ldr	r3, [pc, #28]	@ (8012e0c <ResetESPIndicator+0x24>)
 8012dee:	781b      	ldrb	r3, [r3, #0]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d103      	bne.n	8012dfc <ResetESPIndicator+0x14>
 8012df4:	4b06      	ldr	r3, [pc, #24]	@ (8012e10 <ResetESPIndicator+0x28>)
 8012df6:	781b      	ldrb	r3, [r3, #0]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d004      	beq.n	8012e06 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8012dfc:	2380      	movs	r3, #128	@ 0x80
 8012dfe:	05db      	lsls	r3, r3, #23
 8012e00:	22fa      	movs	r2, #250	@ 0xfa
 8012e02:	0112      	lsls	r2, r2, #4
 8012e04:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012e06:	46c0      	nop			@ (mov r8, r8)
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}
 8012e0c:	20002165 	.word	0x20002165
 8012e10:	20002166 	.word	0x20002166

08012e14 <SetPMIndicator>:

void SetPMIndicator() {
 8012e14:	b580      	push	{r7, lr}
 8012e16:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012e18:	4b0f      	ldr	r3, [pc, #60]	@ (8012e58 <SetPMIndicator+0x44>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d103      	bne.n	8012e28 <SetPMIndicator+0x14>
 8012e20:	4b0e      	ldr	r3, [pc, #56]	@ (8012e5c <SetPMIndicator+0x48>)
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d014      	beq.n	8012e52 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012e28:	f7ff fe34 	bl	8012a94 <Calculate_LED_ON>
 8012e2c:	0003      	movs	r3, r0
 8012e2e:	001a      	movs	r2, r3
 8012e30:	2380      	movs	r3, #128	@ 0x80
 8012e32:	05db      	lsls	r3, r3, #23
 8012e34:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012e36:	f7ff fe2d 	bl	8012a94 <Calculate_LED_ON>
 8012e3a:	0003      	movs	r3, r0
 8012e3c:	001a      	movs	r2, r3
 8012e3e:	2380      	movs	r3, #128	@ 0x80
 8012e40:	05db      	lsls	r3, r3, #23
 8012e42:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012e44:	f7ff fe26 	bl	8012a94 <Calculate_LED_ON>
 8012e48:	0003      	movs	r3, r0
 8012e4a:	001a      	movs	r2, r3
 8012e4c:	2380      	movs	r3, #128	@ 0x80
 8012e4e:	05db      	lsls	r3, r3, #23
 8012e50:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012e52:	46c0      	nop			@ (mov r8, r8)
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}
 8012e58:	20002165 	.word	0x20002165
 8012e5c:	20002166 	.word	0x20002166

08012e60 <ResetPMIndicator>:

void ResetPMIndicator() {
 8012e60:	b580      	push	{r7, lr}
 8012e62:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012e64:	4b0c      	ldr	r3, [pc, #48]	@ (8012e98 <ResetPMIndicator+0x38>)
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d103      	bne.n	8012e74 <ResetPMIndicator+0x14>
 8012e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8012e9c <ResetPMIndicator+0x3c>)
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00e      	beq.n	8012e92 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8012e74:	2380      	movs	r3, #128	@ 0x80
 8012e76:	05db      	lsls	r3, r3, #23
 8012e78:	22fa      	movs	r2, #250	@ 0xfa
 8012e7a:	0112      	lsls	r2, r2, #4
 8012e7c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012e7e:	2380      	movs	r3, #128	@ 0x80
 8012e80:	05db      	lsls	r3, r3, #23
 8012e82:	22fa      	movs	r2, #250	@ 0xfa
 8012e84:	0112      	lsls	r2, r2, #4
 8012e86:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012e88:	2380      	movs	r3, #128	@ 0x80
 8012e8a:	05db      	lsls	r3, r3, #23
 8012e8c:	22fa      	movs	r2, #250	@ 0xfa
 8012e8e:	0112      	lsls	r2, r2, #4
 8012e90:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012e92:	46c0      	nop			@ (mov r8, r8)
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	20002165 	.word	0x20002165
 8012e9c:	20002166 	.word	0x20002166

08012ea0 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8012ea4:	23fa      	movs	r3, #250	@ 0xfa
 8012ea6:	011a      	lsls	r2, r3, #4
 8012ea8:	23fa      	movs	r3, #250	@ 0xfa
 8012eaa:	0119      	lsls	r1, r3, #4
 8012eac:	23fa      	movs	r3, #250	@ 0xfa
 8012eae:	011b      	lsls	r3, r3, #4
 8012eb0:	0018      	movs	r0, r3
 8012eb2:	f7ff fe37 	bl	8012b24 <SetStatusLED>
  SetDBLED(false,false,false);
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	2100      	movs	r1, #0
 8012eba:	2000      	movs	r0, #0
 8012ebc:	f7ff fe66 	bl	8012b8c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8012ec0:	23fa      	movs	r3, #250	@ 0xfa
 8012ec2:	011a      	lsls	r2, r3, #4
 8012ec4:	23fa      	movs	r3, #250	@ 0xfa
 8012ec6:	0119      	lsls	r1, r3, #4
 8012ec8:	23fa      	movs	r3, #250	@ 0xfa
 8012eca:	011b      	lsls	r3, r3, #4
 8012ecc:	0018      	movs	r0, r3
 8012ece:	f7ff fea7 	bl	8012c20 <SetVocLED>
return;
 8012ed2:	46c0      	nop			@ (mov r8, r8)
}
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}

08012ed8 <SetAllREDLED>:

void SetAllREDLED() {
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 8012edc:	2380      	movs	r3, #128	@ 0x80
 8012ede:	05db      	lsls	r3, r3, #23
 8012ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8012f4c <SetAllREDLED+0x74>)
 8012ee2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012ee4:	2380      	movs	r3, #128	@ 0x80
 8012ee6:	05db      	lsls	r3, r3, #23
 8012ee8:	22fa      	movs	r2, #250	@ 0xfa
 8012eea:	0112      	lsls	r2, r2, #4
 8012eec:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012eee:	2380      	movs	r3, #128	@ 0x80
 8012ef0:	05db      	lsls	r3, r3, #23
 8012ef2:	22fa      	movs	r2, #250	@ 0xfa
 8012ef4:	0112      	lsls	r2, r2, #4
 8012ef6:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012ef8:	4b15      	ldr	r3, [pc, #84]	@ (8012f50 <SetAllREDLED+0x78>)
 8012efa:	4a14      	ldr	r2, [pc, #80]	@ (8012f4c <SetAllREDLED+0x74>)
 8012efc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012efe:	4b14      	ldr	r3, [pc, #80]	@ (8012f50 <SetAllREDLED+0x78>)
 8012f00:	22fa      	movs	r2, #250	@ 0xfa
 8012f02:	0112      	lsls	r2, r2, #4
 8012f04:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012f06:	4b12      	ldr	r3, [pc, #72]	@ (8012f50 <SetAllREDLED+0x78>)
 8012f08:	22fa      	movs	r2, #250	@ 0xfa
 8012f0a:	0112      	lsls	r2, r2, #4
 8012f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012f0e:	4b11      	ldr	r3, [pc, #68]	@ (8012f54 <SetAllREDLED+0x7c>)
 8012f10:	2200      	movs	r2, #0
 8012f12:	2101      	movs	r1, #1
 8012f14:	0018      	movs	r0, r3
 8012f16:	f003 f96e 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012f1a:	2380      	movs	r3, #128	@ 0x80
 8012f1c:	005b      	lsls	r3, r3, #1
 8012f1e:	480d      	ldr	r0, [pc, #52]	@ (8012f54 <SetAllREDLED+0x7c>)
 8012f20:	2201      	movs	r2, #1
 8012f22:	0019      	movs	r1, r3
 8012f24:	f003 f967 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012f28:	2380      	movs	r3, #128	@ 0x80
 8012f2a:	009b      	lsls	r3, r3, #2
 8012f2c:	4809      	ldr	r0, [pc, #36]	@ (8012f54 <SetAllREDLED+0x7c>)
 8012f2e:	2201      	movs	r2, #1
 8012f30:	0019      	movs	r1, r3
 8012f32:	f003 f960 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8012f36:	23fa      	movs	r3, #250	@ 0xfa
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	0018      	movs	r0, r3
 8012f3c:	f001 fed4 	bl	8014ce8 <HAL_Delay>
  SetLEDsOff();
 8012f40:	f7ff ffae 	bl	8012ea0 <SetLEDsOff>
}
 8012f44:	46c0      	nop			@ (mov r8, r8)
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	46c0      	nop			@ (mov r8, r8)
 8012f4c:	00000bb8 	.word	0x00000bb8
 8012f50:	40000400 	.word	0x40000400
 8012f54:	50000400 	.word	0x50000400

08012f58 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012f5c:	f7ff ffa0 	bl	8012ea0 <SetLEDsOff>
  HAL_Delay(250);
 8012f60:	20fa      	movs	r0, #250	@ 0xfa
 8012f62:	f001 fec1 	bl	8014ce8 <HAL_Delay>
  TIM2 -> CCR1 = LED_ON;
 8012f66:	2380      	movs	r3, #128	@ 0x80
 8012f68:	05db      	lsls	r3, r3, #23
 8012f6a:	4a23      	ldr	r2, [pc, #140]	@ (8012ff8 <WalkAllRedLED+0xa0>)
 8012f6c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012f6e:	2380      	movs	r3, #128	@ 0x80
 8012f70:	05db      	lsls	r3, r3, #23
 8012f72:	22fa      	movs	r2, #250	@ 0xfa
 8012f74:	0112      	lsls	r2, r2, #4
 8012f76:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012f78:	2380      	movs	r3, #128	@ 0x80
 8012f7a:	05db      	lsls	r3, r3, #23
 8012f7c:	22fa      	movs	r2, #250	@ 0xfa
 8012f7e:	0112      	lsls	r2, r2, #4
 8012f80:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(250);
 8012f82:	20fa      	movs	r0, #250	@ 0xfa
 8012f84:	f001 feb0 	bl	8014ce8 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012f88:	2380      	movs	r3, #128	@ 0x80
 8012f8a:	05db      	lsls	r3, r3, #23
 8012f8c:	22fa      	movs	r2, #250	@ 0xfa
 8012f8e:	0112      	lsls	r2, r2, #4
 8012f90:	635a      	str	r2, [r3, #52]	@ 0x34

  TIM3 -> CCR1 = LED_ON;
 8012f92:	4b1a      	ldr	r3, [pc, #104]	@ (8012ffc <WalkAllRedLED+0xa4>)
 8012f94:	4a18      	ldr	r2, [pc, #96]	@ (8012ff8 <WalkAllRedLED+0xa0>)
 8012f96:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012f98:	4b18      	ldr	r3, [pc, #96]	@ (8012ffc <WalkAllRedLED+0xa4>)
 8012f9a:	22fa      	movs	r2, #250	@ 0xfa
 8012f9c:	0112      	lsls	r2, r2, #4
 8012f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012fa0:	4b16      	ldr	r3, [pc, #88]	@ (8012ffc <WalkAllRedLED+0xa4>)
 8012fa2:	22fa      	movs	r2, #250	@ 0xfa
 8012fa4:	0112      	lsls	r2, r2, #4
 8012fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(250);
 8012fa8:	20fa      	movs	r0, #250	@ 0xfa
 8012faa:	f001 fe9d 	bl	8014ce8 <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012fae:	4b13      	ldr	r3, [pc, #76]	@ (8012ffc <WalkAllRedLED+0xa4>)
 8012fb0:	22fa      	movs	r2, #250	@ 0xfa
 8012fb2:	0112      	lsls	r2, r2, #4
 8012fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012fb6:	4b12      	ldr	r3, [pc, #72]	@ (8013000 <WalkAllRedLED+0xa8>)
 8012fb8:	2200      	movs	r2, #0
 8012fba:	2101      	movs	r1, #1
 8012fbc:	0018      	movs	r0, r3
 8012fbe:	f003 f91a 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012fc2:	2380      	movs	r3, #128	@ 0x80
 8012fc4:	005b      	lsls	r3, r3, #1
 8012fc6:	480e      	ldr	r0, [pc, #56]	@ (8013000 <WalkAllRedLED+0xa8>)
 8012fc8:	2201      	movs	r2, #1
 8012fca:	0019      	movs	r1, r3
 8012fcc:	f003 f913 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012fd0:	2380      	movs	r3, #128	@ 0x80
 8012fd2:	009b      	lsls	r3, r3, #2
 8012fd4:	480a      	ldr	r0, [pc, #40]	@ (8013000 <WalkAllRedLED+0xa8>)
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	0019      	movs	r1, r3
 8012fda:	f003 f90c 	bl	80161f6 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8012fde:	20fa      	movs	r0, #250	@ 0xfa
 8012fe0:	f001 fe82 	bl	8014ce8 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012fe4:	4b06      	ldr	r3, [pc, #24]	@ (8013000 <WalkAllRedLED+0xa8>)
 8012fe6:	2201      	movs	r2, #1
 8012fe8:	2101      	movs	r1, #1
 8012fea:	0018      	movs	r0, r3
 8012fec:	f003 f903 	bl	80161f6 <HAL_GPIO_WritePin>
}
 8012ff0:	46c0      	nop			@ (mov r8, r8)
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	46c0      	nop			@ (mov r8, r8)
 8012ff8:	00000bb8 	.word	0x00000bb8
 8012ffc:	40000400 	.word	0x40000400
 8013000:	50000400 	.word	0x50000400

08013004 <SetAllBlueLED>:

void SetAllBlueLED() {
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 801300a:	1dfb      	adds	r3, r7, #7
 801300c:	2200      	movs	r2, #0
 801300e:	701a      	strb	r2, [r3, #0]
 8013010:	e04b      	b.n	80130aa <SetAllBlueLED+0xa6>
    TIM2 -> CCR1 = LED_OFF;
 8013012:	2380      	movs	r3, #128	@ 0x80
 8013014:	05db      	lsls	r3, r3, #23
 8013016:	22fa      	movs	r2, #250	@ 0xfa
 8013018:	0112      	lsls	r2, r2, #4
 801301a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 801301c:	2380      	movs	r3, #128	@ 0x80
 801301e:	05db      	lsls	r3, r3, #23
 8013020:	22fa      	movs	r2, #250	@ 0xfa
 8013022:	0112      	lsls	r2, r2, #4
 8013024:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8013026:	2380      	movs	r3, #128	@ 0x80
 8013028:	05db      	lsls	r3, r3, #23
 801302a:	4a24      	ldr	r2, [pc, #144]	@ (80130bc <SetAllBlueLED+0xb8>)
 801302c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 801302e:	4b24      	ldr	r3, [pc, #144]	@ (80130c0 <SetAllBlueLED+0xbc>)
 8013030:	22fa      	movs	r2, #250	@ 0xfa
 8013032:	0112      	lsls	r2, r2, #4
 8013034:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8013036:	4b22      	ldr	r3, [pc, #136]	@ (80130c0 <SetAllBlueLED+0xbc>)
 8013038:	22fa      	movs	r2, #250	@ 0xfa
 801303a:	0112      	lsls	r2, r2, #4
 801303c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 801303e:	4b20      	ldr	r3, [pc, #128]	@ (80130c0 <SetAllBlueLED+0xbc>)
 8013040:	4a1e      	ldr	r2, [pc, #120]	@ (80130bc <SetAllBlueLED+0xb8>)
 8013042:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8013044:	4b1f      	ldr	r3, [pc, #124]	@ (80130c4 <SetAllBlueLED+0xc0>)
 8013046:	2201      	movs	r2, #1
 8013048:	2101      	movs	r1, #1
 801304a:	0018      	movs	r0, r3
 801304c:	f003 f8d3 	bl	80161f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8013050:	2380      	movs	r3, #128	@ 0x80
 8013052:	005b      	lsls	r3, r3, #1
 8013054:	481b      	ldr	r0, [pc, #108]	@ (80130c4 <SetAllBlueLED+0xc0>)
 8013056:	2201      	movs	r2, #1
 8013058:	0019      	movs	r1, r3
 801305a:	f003 f8cc 	bl	80161f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 801305e:	2380      	movs	r3, #128	@ 0x80
 8013060:	009b      	lsls	r3, r3, #2
 8013062:	4818      	ldr	r0, [pc, #96]	@ (80130c4 <SetAllBlueLED+0xc0>)
 8013064:	2200      	movs	r2, #0
 8013066:	0019      	movs	r1, r3
 8013068:	f003 f8c5 	bl	80161f6 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 801306c:	23fa      	movs	r3, #250	@ 0xfa
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	0018      	movs	r0, r3
 8013072:	f001 fe39 	bl	8014ce8 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8013076:	2380      	movs	r3, #128	@ 0x80
 8013078:	05db      	lsls	r3, r3, #23
 801307a:	22fa      	movs	r2, #250	@ 0xfa
 801307c:	0112      	lsls	r2, r2, #4
 801307e:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR3 = LED_OFF;
 8013080:	4b0f      	ldr	r3, [pc, #60]	@ (80130c0 <SetAllBlueLED+0xbc>)
 8013082:	22fa      	movs	r2, #250	@ 0xfa
 8013084:	0112      	lsls	r2, r2, #4
 8013086:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8013088:	2380      	movs	r3, #128	@ 0x80
 801308a:	009b      	lsls	r3, r3, #2
 801308c:	480d      	ldr	r0, [pc, #52]	@ (80130c4 <SetAllBlueLED+0xc0>)
 801308e:	2201      	movs	r2, #1
 8013090:	0019      	movs	r1, r3
 8013092:	f003 f8b0 	bl	80161f6 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8013096:	23fa      	movs	r3, #250	@ 0xfa
 8013098:	005b      	lsls	r3, r3, #1
 801309a:	0018      	movs	r0, r3
 801309c:	f001 fe24 	bl	8014ce8 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 80130a0:	1dfb      	adds	r3, r7, #7
 80130a2:	781a      	ldrb	r2, [r3, #0]
 80130a4:	1dfb      	adds	r3, r7, #7
 80130a6:	3201      	adds	r2, #1
 80130a8:	701a      	strb	r2, [r3, #0]
 80130aa:	1dfb      	adds	r3, r7, #7
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	2b02      	cmp	r3, #2
 80130b0:	d9af      	bls.n	8013012 <SetAllBlueLED+0xe>
  }
}
 80130b2:	46c0      	nop			@ (mov r8, r8)
 80130b4:	46c0      	nop			@ (mov r8, r8)
 80130b6:	46bd      	mov	sp, r7
 80130b8:	b002      	add	sp, #8
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	00000bb8 	.word	0x00000bb8
 80130c0:	40000400 	.word	0x40000400
 80130c4:	50000400 	.word	0x50000400

080130c8 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 80130c8:	b5b0      	push	{r4, r5, r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	0002      	movs	r2, r0
 80130d0:	1dbb      	adds	r3, r7, #6
 80130d2:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 80130d4:	1dbb      	adds	r3, r7, #6
 80130d6:	881b      	ldrh	r3, [r3, #0]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d05a      	beq.n	8013192 <SetVOCindicator+0xca>
 80130dc:	1dbb      	adds	r3, r7, #6
 80130de:	881b      	ldrh	r3, [r3, #0]
 80130e0:	2b64      	cmp	r3, #100	@ 0x64
 80130e2:	d856      	bhi.n	8013192 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 80130e4:	1dbb      	adds	r3, r7, #6
 80130e6:	881b      	ldrh	r3, [r3, #0]
 80130e8:	0018      	movs	r0, r3
 80130ea:	f7f0 fb81 	bl	80037f0 <__aeabi_i2d>
 80130ee:	2200      	movs	r2, #0
 80130f0:	4b5f      	ldr	r3, [pc, #380]	@ (8013270 <SetVOCindicator+0x1a8>)
 80130f2:	f7ee fff5 	bl	80020e0 <__aeabi_ddiv>
 80130f6:	0002      	movs	r2, r0
 80130f8:	000b      	movs	r3, r1
 80130fa:	2000      	movs	r0, #0
 80130fc:	495d      	ldr	r1, [pc, #372]	@ (8013274 <SetVOCindicator+0x1ac>)
 80130fe:	f7ef ff0f 	bl	8002f20 <__aeabi_dsub>
 8013102:	0002      	movs	r2, r0
 8013104:	000b      	movs	r3, r1
 8013106:	0014      	movs	r4, r2
 8013108:	001d      	movs	r5, r3
 801310a:	4b5b      	ldr	r3, [pc, #364]	@ (8013278 <SetVOCindicator+0x1b0>)
 801310c:	881b      	ldrh	r3, [r3, #0]
 801310e:	0018      	movs	r0, r3
 8013110:	f7f0 fb6e 	bl	80037f0 <__aeabi_i2d>
 8013114:	0002      	movs	r2, r0
 8013116:	000b      	movs	r3, r1
 8013118:	0020      	movs	r0, r4
 801311a:	0029      	movs	r1, r5
 801311c:	f7ef fc1a 	bl	8002954 <__aeabi_dmul>
 8013120:	0002      	movs	r2, r0
 8013122:	000b      	movs	r3, r1
 8013124:	0010      	movs	r0, r2
 8013126:	0019      	movs	r1, r3
 8013128:	f7ed fa90 	bl	800064c <__aeabi_d2uiz>
 801312c:	0003      	movs	r3, r0
 801312e:	b29a      	uxth	r2, r3
 8013130:	4b52      	ldr	r3, [pc, #328]	@ (801327c <SetVOCindicator+0x1b4>)
 8013132:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8013134:	1dbb      	adds	r3, r7, #6
 8013136:	881b      	ldrh	r3, [r3, #0]
 8013138:	0018      	movs	r0, r3
 801313a:	f7f0 fb59 	bl	80037f0 <__aeabi_i2d>
 801313e:	2200      	movs	r2, #0
 8013140:	4b4b      	ldr	r3, [pc, #300]	@ (8013270 <SetVOCindicator+0x1a8>)
 8013142:	f7ee ffcd 	bl	80020e0 <__aeabi_ddiv>
 8013146:	0002      	movs	r2, r0
 8013148:	000b      	movs	r3, r1
 801314a:	0014      	movs	r4, r2
 801314c:	001d      	movs	r5, r3
 801314e:	4b4a      	ldr	r3, [pc, #296]	@ (8013278 <SetVOCindicator+0x1b0>)
 8013150:	881b      	ldrh	r3, [r3, #0]
 8013152:	0018      	movs	r0, r3
 8013154:	f7f0 fb4c 	bl	80037f0 <__aeabi_i2d>
 8013158:	0002      	movs	r2, r0
 801315a:	000b      	movs	r3, r1
 801315c:	0020      	movs	r0, r4
 801315e:	0029      	movs	r1, r5
 8013160:	f7ef fbf8 	bl	8002954 <__aeabi_dmul>
 8013164:	0002      	movs	r2, r0
 8013166:	000b      	movs	r3, r1
 8013168:	0010      	movs	r0, r2
 801316a:	0019      	movs	r1, r3
 801316c:	f7ed fa6e 	bl	800064c <__aeabi_d2uiz>
 8013170:	0003      	movs	r3, r0
 8013172:	b29a      	uxth	r2, r3
 8013174:	4b42      	ldr	r3, [pc, #264]	@ (8013280 <SetVOCindicator+0x1b8>)
 8013176:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8013178:	4b3f      	ldr	r3, [pc, #252]	@ (8013278 <SetVOCindicator+0x1b0>)
 801317a:	881a      	ldrh	r2, [r3, #0]
 801317c:	4b41      	ldr	r3, [pc, #260]	@ (8013284 <SetVOCindicator+0x1bc>)
 801317e:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8013180:	4b40      	ldr	r3, [pc, #256]	@ (8013284 <SetVOCindicator+0x1bc>)
 8013182:	8818      	ldrh	r0, [r3, #0]
 8013184:	4b3d      	ldr	r3, [pc, #244]	@ (801327c <SetVOCindicator+0x1b4>)
 8013186:	8819      	ldrh	r1, [r3, #0]
 8013188:	4b3d      	ldr	r3, [pc, #244]	@ (8013280 <SetVOCindicator+0x1b8>)
 801318a:	881b      	ldrh	r3, [r3, #0]
 801318c:	001a      	movs	r2, r3
 801318e:	f7ff fd47 	bl	8012c20 <SetVocLED>
  }
  if(VOCi > 100){
 8013192:	1dbb      	adds	r3, r7, #6
 8013194:	881b      	ldrh	r3, [r3, #0]
 8013196:	2b64      	cmp	r3, #100	@ 0x64
 8013198:	d966      	bls.n	8013268 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 801319a:	1dbb      	adds	r3, r7, #6
 801319c:	881b      	ldrh	r3, [r3, #0]
 801319e:	0018      	movs	r0, r3
 80131a0:	f7f0 fb26 	bl	80037f0 <__aeabi_i2d>
 80131a4:	2200      	movs	r2, #0
 80131a6:	4b32      	ldr	r3, [pc, #200]	@ (8013270 <SetVOCindicator+0x1a8>)
 80131a8:	f7ef feba 	bl	8002f20 <__aeabi_dsub>
 80131ac:	0002      	movs	r2, r0
 80131ae:	000b      	movs	r3, r1
 80131b0:	0010      	movs	r0, r2
 80131b2:	0019      	movs	r1, r3
 80131b4:	2200      	movs	r2, #0
 80131b6:	4b34      	ldr	r3, [pc, #208]	@ (8013288 <SetVOCindicator+0x1c0>)
 80131b8:	f7ee ff92 	bl	80020e0 <__aeabi_ddiv>
 80131bc:	0002      	movs	r2, r0
 80131be:	000b      	movs	r3, r1
 80131c0:	0014      	movs	r4, r2
 80131c2:	001d      	movs	r5, r3
 80131c4:	4b2c      	ldr	r3, [pc, #176]	@ (8013278 <SetVOCindicator+0x1b0>)
 80131c6:	881b      	ldrh	r3, [r3, #0]
 80131c8:	0018      	movs	r0, r3
 80131ca:	f7f0 fb11 	bl	80037f0 <__aeabi_i2d>
 80131ce:	0002      	movs	r2, r0
 80131d0:	000b      	movs	r3, r1
 80131d2:	0020      	movs	r0, r4
 80131d4:	0029      	movs	r1, r5
 80131d6:	f7ef fbbd 	bl	8002954 <__aeabi_dmul>
 80131da:	0002      	movs	r2, r0
 80131dc:	000b      	movs	r3, r1
 80131de:	0010      	movs	r0, r2
 80131e0:	0019      	movs	r1, r3
 80131e2:	f7ed fa33 	bl	800064c <__aeabi_d2uiz>
 80131e6:	0003      	movs	r3, r0
 80131e8:	b29a      	uxth	r2, r3
 80131ea:	4b24      	ldr	r3, [pc, #144]	@ (801327c <SetVOCindicator+0x1b4>)
 80131ec:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 80131ee:	1dbb      	adds	r3, r7, #6
 80131f0:	881b      	ldrh	r3, [r3, #0]
 80131f2:	0018      	movs	r0, r3
 80131f4:	f7f0 fafc 	bl	80037f0 <__aeabi_i2d>
 80131f8:	2200      	movs	r2, #0
 80131fa:	4b1d      	ldr	r3, [pc, #116]	@ (8013270 <SetVOCindicator+0x1a8>)
 80131fc:	f7ef fe90 	bl	8002f20 <__aeabi_dsub>
 8013200:	0002      	movs	r2, r0
 8013202:	000b      	movs	r3, r1
 8013204:	0010      	movs	r0, r2
 8013206:	0019      	movs	r1, r3
 8013208:	2200      	movs	r2, #0
 801320a:	4b1f      	ldr	r3, [pc, #124]	@ (8013288 <SetVOCindicator+0x1c0>)
 801320c:	f7ee ff68 	bl	80020e0 <__aeabi_ddiv>
 8013210:	0002      	movs	r2, r0
 8013212:	000b      	movs	r3, r1
 8013214:	2000      	movs	r0, #0
 8013216:	4917      	ldr	r1, [pc, #92]	@ (8013274 <SetVOCindicator+0x1ac>)
 8013218:	f7ef fe82 	bl	8002f20 <__aeabi_dsub>
 801321c:	0002      	movs	r2, r0
 801321e:	000b      	movs	r3, r1
 8013220:	0014      	movs	r4, r2
 8013222:	001d      	movs	r5, r3
 8013224:	4b14      	ldr	r3, [pc, #80]	@ (8013278 <SetVOCindicator+0x1b0>)
 8013226:	881b      	ldrh	r3, [r3, #0]
 8013228:	0018      	movs	r0, r3
 801322a:	f7f0 fae1 	bl	80037f0 <__aeabi_i2d>
 801322e:	0002      	movs	r2, r0
 8013230:	000b      	movs	r3, r1
 8013232:	0020      	movs	r0, r4
 8013234:	0029      	movs	r1, r5
 8013236:	f7ef fb8d 	bl	8002954 <__aeabi_dmul>
 801323a:	0002      	movs	r2, r0
 801323c:	000b      	movs	r3, r1
 801323e:	0010      	movs	r0, r2
 8013240:	0019      	movs	r1, r3
 8013242:	f7ed fa03 	bl	800064c <__aeabi_d2uiz>
 8013246:	0003      	movs	r3, r0
 8013248:	b29a      	uxth	r2, r3
 801324a:	4b0e      	ldr	r3, [pc, #56]	@ (8013284 <SetVOCindicator+0x1bc>)
 801324c:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 801324e:	4b0a      	ldr	r3, [pc, #40]	@ (8013278 <SetVOCindicator+0x1b0>)
 8013250:	881a      	ldrh	r2, [r3, #0]
 8013252:	4b0b      	ldr	r3, [pc, #44]	@ (8013280 <SetVOCindicator+0x1b8>)
 8013254:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8013256:	4b0b      	ldr	r3, [pc, #44]	@ (8013284 <SetVOCindicator+0x1bc>)
 8013258:	8818      	ldrh	r0, [r3, #0]
 801325a:	4b08      	ldr	r3, [pc, #32]	@ (801327c <SetVOCindicator+0x1b4>)
 801325c:	8819      	ldrh	r1, [r3, #0]
 801325e:	4b08      	ldr	r3, [pc, #32]	@ (8013280 <SetVOCindicator+0x1b8>)
 8013260:	881b      	ldrh	r3, [r3, #0]
 8013262:	001a      	movs	r2, r3
 8013264:	f7ff fcdc 	bl	8012c20 <SetVocLED>
  }

}
 8013268:	46c0      	nop			@ (mov r8, r8)
 801326a:	46bd      	mov	sp, r7
 801326c:	b002      	add	sp, #8
 801326e:	bdb0      	pop	{r4, r5, r7, pc}
 8013270:	40590000 	.word	0x40590000
 8013274:	3ff00000 	.word	0x3ff00000
 8013278:	200000ea 	.word	0x200000ea
 801327c:	2000217a 	.word	0x2000217a
 8013280:	2000217c 	.word	0x2000217c
 8013284:	2000217e 	.word	0x2000217e
 8013288:	40790000 	.word	0x40790000

0801328c <powerCheck>:

Battery_Status powerCheck(){
 801328c:	b590      	push	{r4, r7, lr}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 8013292:	f7f6 fd49 	bl	8009d28 <Check_USB_PowerOn>
 8013296:	0003      	movs	r3, r0
 8013298:	001a      	movs	r2, r3
 801329a:	2301      	movs	r3, #1
 801329c:	4053      	eors	r3, r2
 801329e:	b2db      	uxtb	r3, r3
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d005      	beq.n	80132b0 <powerCheck+0x24>
    status = batteryChargeCheck();
 80132a4:	1dfc      	adds	r4, r7, #7
 80132a6:	f7ff fb93 	bl	80129d0 <batteryChargeCheck>
 80132aa:	0003      	movs	r3, r0
 80132ac:	7023      	strb	r3, [r4, #0]
 80132ae:	e002      	b.n	80132b6 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 80132b0:	1dfb      	adds	r3, r7, #7
 80132b2:	2204      	movs	r2, #4
 80132b4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80132b6:	1dfb      	adds	r3, r7, #7
 80132b8:	781b      	ldrb	r3, [r3, #0]
}
 80132ba:	0018      	movs	r0, r3
 80132bc:	46bd      	mov	sp, r7
 80132be:	b003      	add	sp, #12
 80132c0:	bd90      	pop	{r4, r7, pc}
	...

080132c4 <powerDisplay>:

void powerDisplay(Battery_Status status){
 80132c4:	b5b0      	push	{r4, r5, r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af04      	add	r7, sp, #16
 80132ca:	0002      	movs	r2, r0
 80132cc:	1dfb      	adds	r3, r7, #7
 80132ce:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 80132d0:	1dfb      	adds	r3, r7, #7
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	2b04      	cmp	r3, #4
 80132d6:	d114      	bne.n	8013302 <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 80132d8:	f7f6 fc70 	bl	8009bbc <ReadBatteryVoltage>
 80132dc:	1c03      	adds	r3, r0, #0
 80132de:	1c18      	adds	r0, r3, #0
 80132e0:	f7f0 fad8 	bl	8003894 <__aeabi_f2d>
 80132e4:	0004      	movs	r4, r0
 80132e6:	000d      	movs	r5, r1
 80132e8:	f7f6 fcca 	bl	8009c80 <ReadSolarVoltage>
 80132ec:	0003      	movs	r3, r0
 80132ee:	0019      	movs	r1, r3
 80132f0:	4a2a      	ldr	r2, [pc, #168]	@ (801339c <powerDisplay+0xd8>)
 80132f2:	4b2b      	ldr	r3, [pc, #172]	@ (80133a0 <powerDisplay+0xdc>)
 80132f4:	9102      	str	r1, [sp, #8]
 80132f6:	9400      	str	r4, [sp, #0]
 80132f8:	9501      	str	r5, [sp, #4]
 80132fa:	0019      	movs	r1, r3
 80132fc:	2003      	movs	r0, #3
 80132fe:	f000 ff71 	bl	80141e4 <CreateLine>
  }
  if(status == BATTERY_FULL){
 8013302:	1dfb      	adds	r3, r7, #7
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	2b03      	cmp	r3, #3
 8013308:	d105      	bne.n	8013316 <powerDisplay+0x52>
    Debug("Battery fully charged");
 801330a:	4a26      	ldr	r2, [pc, #152]	@ (80133a4 <powerDisplay+0xe0>)
 801330c:	4b24      	ldr	r3, [pc, #144]	@ (80133a0 <powerDisplay+0xdc>)
 801330e:	0019      	movs	r1, r3
 8013310:	2003      	movs	r0, #3
 8013312:	f000 ff67 	bl	80141e4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8013316:	1dfb      	adds	r3, r7, #7
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	2b02      	cmp	r3, #2
 801331c:	d105      	bne.n	801332a <powerDisplay+0x66>
    Debug("Battery charge is doing well");
 801331e:	4a22      	ldr	r2, [pc, #136]	@ (80133a8 <powerDisplay+0xe4>)
 8013320:	4b1f      	ldr	r3, [pc, #124]	@ (80133a0 <powerDisplay+0xdc>)
 8013322:	0019      	movs	r1, r3
 8013324:	2003      	movs	r0, #3
 8013326:	f000 ff5d 	bl	80141e4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 801332a:	1dfb      	adds	r3, r7, #7
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	2b01      	cmp	r3, #1
 8013330:	d105      	bne.n	801333e <powerDisplay+0x7a>
    Debug("Battery is getting low");
 8013332:	4a1e      	ldr	r2, [pc, #120]	@ (80133ac <powerDisplay+0xe8>)
 8013334:	4b1a      	ldr	r3, [pc, #104]	@ (80133a0 <powerDisplay+0xdc>)
 8013336:	0019      	movs	r1, r3
 8013338:	2003      	movs	r0, #3
 801333a:	f000 ff53 	bl	80141e4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 801333e:	1dfb      	adds	r3, r7, #7
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d105      	bne.n	8013352 <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 8013346:	4a1a      	ldr	r2, [pc, #104]	@ (80133b0 <powerDisplay+0xec>)
 8013348:	4b15      	ldr	r3, [pc, #84]	@ (80133a0 <powerDisplay+0xdc>)
 801334a:	0019      	movs	r1, r3
 801334c:	2003      	movs	r0, #3
 801334e:	f000 ff49 	bl	80141e4 <CreateLine>
  }
  switch (Read_Charge_Status()) {
 8013352:	f7f6 fd03 	bl	8009d5c <Read_Charge_Status>
 8013356:	0003      	movs	r3, r0
 8013358:	2b02      	cmp	r3, #2
 801335a:	d013      	beq.n	8013384 <powerDisplay+0xc0>
 801335c:	dc19      	bgt.n	8013392 <powerDisplay+0xce>
 801335e:	2b00      	cmp	r3, #0
 8013360:	d002      	beq.n	8013368 <powerDisplay+0xa4>
 8013362:	2b01      	cmp	r3, #1
 8013364:	d007      	beq.n	8013376 <powerDisplay+0xb2>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 8013366:	e014      	b.n	8013392 <powerDisplay+0xce>
    Debug("Battery charging off");
 8013368:	4a12      	ldr	r2, [pc, #72]	@ (80133b4 <powerDisplay+0xf0>)
 801336a:	4b0d      	ldr	r3, [pc, #52]	@ (80133a0 <powerDisplay+0xdc>)
 801336c:	0019      	movs	r1, r3
 801336e:	2003      	movs	r0, #3
 8013370:	f000 ff38 	bl	80141e4 <CreateLine>
    break;
 8013374:	e00d      	b.n	8013392 <powerDisplay+0xce>
    Debug("Battery is charging");
 8013376:	4a10      	ldr	r2, [pc, #64]	@ (80133b8 <powerDisplay+0xf4>)
 8013378:	4b09      	ldr	r3, [pc, #36]	@ (80133a0 <powerDisplay+0xdc>)
 801337a:	0019      	movs	r1, r3
 801337c:	2003      	movs	r0, #3
 801337e:	f000 ff31 	bl	80141e4 <CreateLine>
    break;
 8013382:	e006      	b.n	8013392 <powerDisplay+0xce>
    Debug("Battery full, charging off");
 8013384:	4a0d      	ldr	r2, [pc, #52]	@ (80133bc <powerDisplay+0xf8>)
 8013386:	4b06      	ldr	r3, [pc, #24]	@ (80133a0 <powerDisplay+0xdc>)
 8013388:	0019      	movs	r1, r3
 801338a:	2003      	movs	r0, #3
 801338c:	f000 ff2a 	bl	80141e4 <CreateLine>
    break;
 8013390:	46c0      	nop			@ (mov r8, r8)
}
 8013392:	46c0      	nop			@ (mov r8, r8)
 8013394:	46bd      	mov	sp, r7
 8013396:	b002      	add	sp, #8
 8013398:	bdb0      	pop	{r4, r5, r7, pc}
 801339a:	46c0      	nop			@ (mov r8, r8)
 801339c:	0802e2f8 	.word	0x0802e2f8
 80133a0:	0802e338 	.word	0x0802e338
 80133a4:	0802e33c 	.word	0x0802e33c
 80133a8:	0802e354 	.word	0x0802e354
 80133ac:	0802e374 	.word	0x0802e374
 80133b0:	0802e38c 	.word	0x0802e38c
 80133b4:	0802e3b0 	.word	0x0802e3b0
 80133b8:	0802e3c8 	.word	0x0802e3c8
 80133bc:	0802e3dc 	.word	0x0802e3dc

080133c0 <configCheck>:

void configCheck(){
 80133c0:	b590      	push	{r4, r7, lr}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 80133c6:	f7f6 fd25 	bl	8009e14 <BootButton_Pressed>
 80133ca:	1e03      	subs	r3, r0, #0
 80133cc:	d007      	beq.n	80133de <configCheck+0x1e>
 80133ce:	f7f6 fd33 	bl	8009e38 <UserButton_Pressed>
 80133d2:	1e03      	subs	r3, r0, #0
 80133d4:	d003      	beq.n	80133de <configCheck+0x1e>
    configSet = true;
 80133d6:	4bb5      	ldr	r3, [pc, #724]	@ (80136ac <configCheck+0x2ec>)
 80133d8:	2201      	movs	r2, #1
 80133da:	701a      	strb	r2, [r3, #0]
 80133dc:	e00a      	b.n	80133f4 <configCheck+0x34>
  }
  else{
    configSet = false;
 80133de:	4bb3      	ldr	r3, [pc, #716]	@ (80136ac <configCheck+0x2ec>)
 80133e0:	2200      	movs	r2, #0
 80133e2:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 80133e4:	f001 fc76 	bl	8014cd4 <HAL_GetTick>
 80133e8:	0003      	movs	r3, r0
 80133ea:	22fa      	movs	r2, #250	@ 0xfa
 80133ec:	00d2      	lsls	r2, r2, #3
 80133ee:	189a      	adds	r2, r3, r2
 80133f0:	4baf      	ldr	r3, [pc, #700]	@ (80136b0 <configCheck+0x2f0>)
 80133f2:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 80133f4:	4bad      	ldr	r3, [pc, #692]	@ (80136ac <configCheck+0x2ec>)
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d00d      	beq.n	8013418 <configCheck+0x58>
 80133fc:	4bac      	ldr	r3, [pc, #688]	@ (80136b0 <configCheck+0x2f0>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	0018      	movs	r0, r3
 8013402:	f000 fe99 	bl	8014138 <TimestampIsReached>
 8013406:	1e03      	subs	r3, r0, #0
 8013408:	d006      	beq.n	8013418 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 801340a:	f7f1 fd15 	bl	8004e38 <SetConfigMode>
    SetDBLED(true, true, true);
 801340e:	2201      	movs	r2, #1
 8013410:	2101      	movs	r1, #1
 8013412:	2001      	movs	r0, #1
 8013414:	f7ff fbba 	bl	8012b8c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8013418:	f7f6 fcfc 	bl	8009e14 <BootButton_Pressed>
 801341c:	0003      	movs	r3, r0
 801341e:	001a      	movs	r2, r3
 8013420:	2301      	movs	r3, #1
 8013422:	4053      	eors	r3, r2
 8013424:	b2db      	uxtb	r3, r3
 8013426:	2b00      	cmp	r3, #0
 8013428:	d05a      	beq.n	80134e0 <configCheck+0x120>
 801342a:	f7f6 fd05 	bl	8009e38 <UserButton_Pressed>
 801342e:	1e03      	subs	r3, r0, #0
 8013430:	d056      	beq.n	80134e0 <configCheck+0x120>
 8013432:	4ba0      	ldr	r3, [pc, #640]	@ (80136b4 <configCheck+0x2f4>)
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	2201      	movs	r2, #1
 8013438:	4053      	eors	r3, r2
 801343a:	b2db      	uxtb	r3, r3
 801343c:	2b00      	cmp	r3, #0
 801343e:	d04f      	beq.n	80134e0 <configCheck+0x120>
 8013440:	f7f1 fd1a 	bl	8004e78 <GetReconfigMode>
 8013444:	0003      	movs	r3, r0
 8013446:	001a      	movs	r2, r3
 8013448:	2301      	movs	r3, #1
 801344a:	4053      	eors	r3, r2
 801344c:	b2db      	uxtb	r3, r3
 801344e:	2b00      	cmp	r3, #0
 8013450:	d046      	beq.n	80134e0 <configCheck+0x120>
    SetLEDsOff();
 8013452:	f7ff fd25 	bl	8012ea0 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8013456:	4a98      	ldr	r2, [pc, #608]	@ (80136b8 <configCheck+0x2f8>)
 8013458:	4997      	ldr	r1, [pc, #604]	@ (80136b8 <configCheck+0x2f8>)
 801345a:	4b97      	ldr	r3, [pc, #604]	@ (80136b8 <configCheck+0x2f8>)
 801345c:	0018      	movs	r0, r3
 801345e:	f7ff fbdf 	bl	8012c20 <SetVocLED>
    HAL_Delay(1500);
 8013462:	4b96      	ldr	r3, [pc, #600]	@ (80136bc <configCheck+0x2fc>)
 8013464:	0018      	movs	r0, r3
 8013466:	f001 fc3f 	bl	8014ce8 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 801346a:	23fa      	movs	r3, #250	@ 0xfa
 801346c:	011a      	lsls	r2, r3, #4
 801346e:	23fa      	movs	r3, #250	@ 0xfa
 8013470:	0119      	lsls	r1, r3, #4
 8013472:	23fa      	movs	r3, #250	@ 0xfa
 8013474:	011b      	lsls	r3, r3, #4
 8013476:	0018      	movs	r0, r3
 8013478:	f7ff fbd2 	bl	8012c20 <SetVocLED>
    userToggle = !userToggle;
 801347c:	4b90      	ldr	r3, [pc, #576]	@ (80136c0 <configCheck+0x300>)
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	1e5a      	subs	r2, r3, #1
 8013482:	4193      	sbcs	r3, r2
 8013484:	b2db      	uxtb	r3, r3
 8013486:	2201      	movs	r2, #1
 8013488:	4053      	eors	r3, r2
 801348a:	b2db      	uxtb	r3, r3
 801348c:	1c1a      	adds	r2, r3, #0
 801348e:	2301      	movs	r3, #1
 8013490:	4013      	ands	r3, r2
 8013492:	b2da      	uxtb	r2, r3
 8013494:	4b8a      	ldr	r3, [pc, #552]	@ (80136c0 <configCheck+0x300>)
 8013496:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8013498:	4b89      	ldr	r3, [pc, #548]	@ (80136c0 <configCheck+0x300>)
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d002      	beq.n	80134a6 <configCheck+0xe6>
      EnabledConnectedDevices();
 80134a0:	f7fa fdc6 	bl	800e030 <EnabledConnectedDevices>
 80134a4:	e004      	b.n	80134b0 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 80134a6:	f001 fc15 	bl	8014cd4 <HAL_GetTick>
 80134aa:	0002      	movs	r2, r0
 80134ac:	4b85      	ldr	r3, [pc, #532]	@ (80136c4 <configCheck+0x304>)
 80134ae:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 80134b0:	4b83      	ldr	r3, [pc, #524]	@ (80136c0 <configCheck+0x300>)
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d001      	beq.n	80134bc <configCheck+0xfc>
 80134b8:	4b83      	ldr	r3, [pc, #524]	@ (80136c8 <configCheck+0x308>)
 80134ba:	e000      	b.n	80134be <configCheck+0xfe>
 80134bc:	4b83      	ldr	r3, [pc, #524]	@ (80136cc <configCheck+0x30c>)
 80134be:	4a84      	ldr	r2, [pc, #528]	@ (80136d0 <configCheck+0x310>)
 80134c0:	4984      	ldr	r1, [pc, #528]	@ (80136d4 <configCheck+0x314>)
 80134c2:	2003      	movs	r0, #3
 80134c4:	f000 fe8e 	bl	80141e4 <CreateLine>
    userbuttonHeld = true;
 80134c8:	4b7a      	ldr	r3, [pc, #488]	@ (80136b4 <configCheck+0x2f4>)
 80134ca:	2201      	movs	r2, #1
 80134cc:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 80134ce:	f001 fc01 	bl	8014cd4 <HAL_GetTick>
 80134d2:	0003      	movs	r3, r0
 80134d4:	22fa      	movs	r2, #250	@ 0xfa
 80134d6:	00d2      	lsls	r2, r2, #3
 80134d8:	189a      	adds	r2, r3, r2
 80134da:	4b7f      	ldr	r3, [pc, #508]	@ (80136d8 <configCheck+0x318>)
 80134dc:	601a      	str	r2, [r3, #0]
 80134de:	e002      	b.n	80134e6 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 80134e0:	4b74      	ldr	r3, [pc, #464]	@ (80136b4 <configCheck+0x2f4>)
 80134e2:	2200      	movs	r2, #0
 80134e4:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 80134e6:	f7f6 fc95 	bl	8009e14 <BootButton_Pressed>
 80134ea:	0003      	movs	r3, r0
 80134ec:	001a      	movs	r2, r3
 80134ee:	2301      	movs	r3, #1
 80134f0:	4053      	eors	r3, r2
 80134f2:	b2db      	uxtb	r3, r3
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d100      	bne.n	80134fa <configCheck+0x13a>
 80134f8:	e0a4      	b.n	8013644 <configCheck+0x284>
 80134fa:	4b6e      	ldr	r3, [pc, #440]	@ (80136b4 <configCheck+0x2f4>)
 80134fc:	781b      	ldrb	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d100      	bne.n	8013504 <configCheck+0x144>
 8013502:	e09f      	b.n	8013644 <configCheck+0x284>
 8013504:	4b74      	ldr	r3, [pc, #464]	@ (80136d8 <configCheck+0x318>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	0018      	movs	r0, r3
 801350a:	f000 fe15 	bl	8014138 <TimestampIsReached>
 801350e:	1e03      	subs	r3, r0, #0
 8013510:	d100      	bne.n	8013514 <configCheck+0x154>
 8013512:	e097      	b.n	8013644 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013514:	f7fa f970 	bl	800d7f8 <GetPMSensorPresence>
 8013518:	1e03      	subs	r3, r0, #0
 801351a:	d100      	bne.n	801351e <configCheck+0x15e>
 801351c:	e082      	b.n	8013624 <configCheck+0x264>
 801351e:	4b6f      	ldr	r3, [pc, #444]	@ (80136dc <configCheck+0x31c>)
 8013520:	791b      	ldrb	r3, [r3, #4]
 8013522:	2b34      	cmp	r3, #52	@ 0x34
 8013524:	d004      	beq.n	8013530 <configCheck+0x170>
 8013526:	4b6d      	ldr	r3, [pc, #436]	@ (80136dc <configCheck+0x31c>)
 8013528:	791b      	ldrb	r3, [r3, #4]
 801352a:	2b35      	cmp	r3, #53	@ 0x35
 801352c:	d000      	beq.n	8013530 <configCheck+0x170>
 801352e:	e079      	b.n	8013624 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8013530:	4b6b      	ldr	r3, [pc, #428]	@ (80136e0 <configCheck+0x320>)
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	1e5a      	subs	r2, r3, #1
 8013536:	4193      	sbcs	r3, r2
 8013538:	b2db      	uxtb	r3, r3
 801353a:	2201      	movs	r2, #1
 801353c:	4053      	eors	r3, r2
 801353e:	b2db      	uxtb	r3, r3
 8013540:	1c1a      	adds	r2, r3, #0
 8013542:	2301      	movs	r3, #1
 8013544:	4013      	ands	r3, r2
 8013546:	b2da      	uxtb	r2, r3
 8013548:	4b65      	ldr	r3, [pc, #404]	@ (80136e0 <configCheck+0x320>)
 801354a:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 801354c:	4b64      	ldr	r3, [pc, #400]	@ (80136e0 <configCheck+0x320>)
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d005      	beq.n	8013560 <configCheck+0x1a0>
 8013554:	1dbc      	adds	r4, r7, #6
 8013556:	f7ff fa9d 	bl	8012a94 <Calculate_LED_ON>
 801355a:	0003      	movs	r3, r0
 801355c:	8023      	strh	r3, [r4, #0]
 801355e:	e003      	b.n	8013568 <configCheck+0x1a8>
        else color = 4000;
 8013560:	1dbb      	adds	r3, r7, #6
 8013562:	22fa      	movs	r2, #250	@ 0xfa
 8013564:	0112      	lsls	r2, r2, #4
 8013566:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8013568:	4b5d      	ldr	r3, [pc, #372]	@ (80136e0 <configCheck+0x320>)
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d001      	beq.n	8013574 <configCheck+0x1b4>
 8013570:	4b5c      	ldr	r3, [pc, #368]	@ (80136e4 <configCheck+0x324>)
 8013572:	e000      	b.n	8013576 <configCheck+0x1b6>
 8013574:	4b5c      	ldr	r3, [pc, #368]	@ (80136e8 <configCheck+0x328>)
 8013576:	4a5d      	ldr	r2, [pc, #372]	@ (80136ec <configCheck+0x32c>)
 8013578:	495d      	ldr	r1, [pc, #372]	@ (80136f0 <configCheck+0x330>)
 801357a:	2002      	movs	r0, #2
 801357c:	f000 fe32 	bl	80141e4 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8013580:	1d7b      	adds	r3, r7, #5
 8013582:	2200      	movs	r2, #0
 8013584:	701a      	strb	r2, [r3, #0]
 8013586:	e028      	b.n	80135da <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8013588:	f7ff fa84 	bl	8012a94 <Calculate_LED_ON>
 801358c:	0003      	movs	r3, r0
 801358e:	001a      	movs	r2, r3
 8013590:	4b58      	ldr	r3, [pc, #352]	@ (80136f4 <configCheck+0x334>)
 8013592:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8013594:	4b57      	ldr	r3, [pc, #348]	@ (80136f4 <configCheck+0x334>)
 8013596:	1dba      	adds	r2, r7, #6
 8013598:	8812      	ldrh	r2, [r2, #0]
 801359a:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 801359c:	4b55      	ldr	r3, [pc, #340]	@ (80136f4 <configCheck+0x334>)
 801359e:	1dba      	adds	r2, r7, #6
 80135a0:	8812      	ldrh	r2, [r2, #0]
 80135a2:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 80135a4:	23c8      	movs	r3, #200	@ 0xc8
 80135a6:	005b      	lsls	r3, r3, #1
 80135a8:	0018      	movs	r0, r3
 80135aa:	f001 fb9d 	bl	8014ce8 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 80135ae:	4b51      	ldr	r3, [pc, #324]	@ (80136f4 <configCheck+0x334>)
 80135b0:	22fa      	movs	r2, #250	@ 0xfa
 80135b2:	0112      	lsls	r2, r2, #4
 80135b4:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 80135b6:	4b4f      	ldr	r3, [pc, #316]	@ (80136f4 <configCheck+0x334>)
 80135b8:	22fa      	movs	r2, #250	@ 0xfa
 80135ba:	0112      	lsls	r2, r2, #4
 80135bc:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 80135be:	4b4d      	ldr	r3, [pc, #308]	@ (80136f4 <configCheck+0x334>)
 80135c0:	22fa      	movs	r2, #250	@ 0xfa
 80135c2:	0112      	lsls	r2, r2, #4
 80135c4:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 80135c6:	23c8      	movs	r3, #200	@ 0xc8
 80135c8:	005b      	lsls	r3, r3, #1
 80135ca:	0018      	movs	r0, r3
 80135cc:	f001 fb8c 	bl	8014ce8 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 80135d0:	1d7b      	adds	r3, r7, #5
 80135d2:	781a      	ldrb	r2, [r3, #0]
 80135d4:	1d7b      	adds	r3, r7, #5
 80135d6:	3201      	adds	r2, #1
 80135d8:	701a      	strb	r2, [r3, #0]
 80135da:	1d7b      	adds	r3, r7, #5
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d9d2      	bls.n	8013588 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 80135e2:	4b37      	ldr	r3, [pc, #220]	@ (80136c0 <configCheck+0x300>)
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	1e5a      	subs	r2, r3, #1
 80135e8:	4193      	sbcs	r3, r2
 80135ea:	b2db      	uxtb	r3, r3
 80135ec:	2201      	movs	r2, #1
 80135ee:	4053      	eors	r3, r2
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	1c1a      	adds	r2, r3, #0
 80135f4:	2301      	movs	r3, #1
 80135f6:	4013      	ands	r3, r2
 80135f8:	b2da      	uxtb	r2, r3
 80135fa:	4b31      	ldr	r3, [pc, #196]	@ (80136c0 <configCheck+0x300>)
 80135fc:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 80135fe:	4b30      	ldr	r3, [pc, #192]	@ (80136c0 <configCheck+0x300>)
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d001      	beq.n	801360a <configCheck+0x24a>
 8013606:	4b37      	ldr	r3, [pc, #220]	@ (80136e4 <configCheck+0x324>)
 8013608:	e000      	b.n	801360c <configCheck+0x24c>
 801360a:	4b37      	ldr	r3, [pc, #220]	@ (80136e8 <configCheck+0x328>)
 801360c:	4a3a      	ldr	r2, [pc, #232]	@ (80136f8 <configCheck+0x338>)
 801360e:	4938      	ldr	r1, [pc, #224]	@ (80136f0 <configCheck+0x330>)
 8013610:	2002      	movs	r0, #2
 8013612:	f000 fde7 	bl	80141e4 <CreateLine>
      if (usbPluggedIn) {
 8013616:	4b39      	ldr	r3, [pc, #228]	@ (80136fc <configCheck+0x33c>)
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d009      	beq.n	8013632 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 801361e:	f7fb ff1b 	bl	800f458 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013622:	e006      	b.n	8013632 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8013624:	4a36      	ldr	r2, [pc, #216]	@ (8013700 <configCheck+0x340>)
 8013626:	4b32      	ldr	r3, [pc, #200]	@ (80136f0 <configCheck+0x330>)
 8013628:	0019      	movs	r1, r3
 801362a:	2002      	movs	r0, #2
 801362c:	f000 fdda 	bl	80141e4 <CreateLine>
 8013630:	e000      	b.n	8013634 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013632:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8013634:	46c0      	nop			@ (mov r8, r8)
 8013636:	f7f6 fbff 	bl	8009e38 <UserButton_Pressed>
 801363a:	1e03      	subs	r3, r0, #0
 801363c:	d1fb      	bne.n	8013636 <configCheck+0x276>
    }
    userbuttonHeld = false;
 801363e:	4b1d      	ldr	r3, [pc, #116]	@ (80136b4 <configCheck+0x2f4>)
 8013640:	2200      	movs	r2, #0
 8013642:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8013644:	f7f6 fbe6 	bl	8009e14 <BootButton_Pressed>
 8013648:	0003      	movs	r3, r0
 801364a:	001a      	movs	r2, r3
 801364c:	2301      	movs	r3, #1
 801364e:	4053      	eors	r3, r2
 8013650:	b2db      	uxtb	r3, r3
 8013652:	2b00      	cmp	r3, #0
 8013654:	d00b      	beq.n	801366e <configCheck+0x2ae>
 8013656:	f7f6 fbef 	bl	8009e38 <UserButton_Pressed>
 801365a:	0003      	movs	r3, r0
 801365c:	001a      	movs	r2, r3
 801365e:	2301      	movs	r3, #1
 8013660:	4053      	eors	r3, r2
 8013662:	b2db      	uxtb	r3, r3
 8013664:	2b00      	cmp	r3, #0
 8013666:	d002      	beq.n	801366e <configCheck+0x2ae>
    userbuttonHeld = false;
 8013668:	4b12      	ldr	r3, [pc, #72]	@ (80136b4 <configCheck+0x2f4>)
 801366a:	2200      	movs	r2, #0
 801366c:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 801366e:	f7f6 fb5b 	bl	8009d28 <Check_USB_PowerOn>
 8013672:	1e03      	subs	r3, r0, #0
 8013674:	d003      	beq.n	801367e <configCheck+0x2be>
    usbPluggedIn = true;
 8013676:	4b21      	ldr	r3, [pc, #132]	@ (80136fc <configCheck+0x33c>)
 8013678:	2201      	movs	r2, #1
 801367a:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 801367c:	e012      	b.n	80136a4 <configCheck+0x2e4>
    if(!userToggle && !init){
 801367e:	4b10      	ldr	r3, [pc, #64]	@ (80136c0 <configCheck+0x300>)
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	2201      	movs	r2, #1
 8013684:	4053      	eors	r3, r2
 8013686:	b2db      	uxtb	r3, r3
 8013688:	2b00      	cmp	r3, #0
 801368a:	d008      	beq.n	801369e <configCheck+0x2de>
 801368c:	4b1d      	ldr	r3, [pc, #116]	@ (8013704 <configCheck+0x344>)
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	2201      	movs	r2, #1
 8013692:	4053      	eors	r3, r2
 8013694:	b2db      	uxtb	r3, r3
 8013696:	2b00      	cmp	r3, #0
 8013698:	d001      	beq.n	801369e <configCheck+0x2de>
      SetLEDsOff();
 801369a:	f7ff fc01 	bl	8012ea0 <SetLEDsOff>
    usbPluggedIn = false;
 801369e:	4b17      	ldr	r3, [pc, #92]	@ (80136fc <configCheck+0x33c>)
 80136a0:	2200      	movs	r2, #0
 80136a2:	701a      	strb	r2, [r3, #0]
}
 80136a4:	46c0      	nop			@ (mov r8, r8)
 80136a6:	46bd      	mov	sp, r7
 80136a8:	b003      	add	sp, #12
 80136aa:	bd90      	pop	{r4, r7, pc}
 80136ac:	20002164 	.word	0x20002164
 80136b0:	2000216c 	.word	0x2000216c
 80136b4:	20002167 	.word	0x20002167
 80136b8:	00000bb8 	.word	0x00000bb8
 80136bc:	000005dc 	.word	0x000005dc
 80136c0:	20002166 	.word	0x20002166
 80136c4:	20001128 	.word	0x20001128
 80136c8:	0802e3f8 	.word	0x0802e3f8
 80136cc:	0802e3fc 	.word	0x0802e3fc
 80136d0:	0802e400 	.word	0x0802e400
 80136d4:	0802e338 	.word	0x0802e338
 80136d8:	20002170 	.word	0x20002170
 80136dc:	200011d8 	.word	0x200011d8
 80136e0:	200011d6 	.word	0x200011d6
 80136e4:	0802e420 	.word	0x0802e420
 80136e8:	0802e428 	.word	0x0802e428
 80136ec:	0802e434 	.word	0x0802e434
 80136f0:	0802e454 	.word	0x0802e454
 80136f4:	40000400 	.word	0x40000400
 80136f8:	0802e458 	.word	0x0802e458
 80136fc:	20002165 	.word	0x20002165
 8013700:	0802e470 	.word	0x0802e470
 8013704:	200000e8 	.word	0x200000e8

08013708 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8013708:	b590      	push	{r4, r7, lr}
 801370a:	b083      	sub	sp, #12
 801370c:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 801370e:	1dfc      	adds	r4, r7, #7
 8013710:	f7ff fdbc 	bl	801328c <powerCheck>
 8013714:	0003      	movs	r3, r0
 8013716:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8013718:	1dfb      	adds	r3, r7, #7
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	0018      	movs	r0, r3
 801371e:	f7ff fdd1 	bl	80132c4 <powerDisplay>
  return status;
 8013722:	1dfb      	adds	r3, r7, #7
 8013724:	781b      	ldrb	r3, [r3, #0]
}
 8013726:	0018      	movs	r0, r3
 8013728:	46bd      	mov	sp, r7
 801372a:	b003      	add	sp, #12
 801372c:	bd90      	pop	{r4, r7, pc}
	...

08013730 <setuserToggle>:

void setuserToggle(void) {
 8013730:	b580      	push	{r7, lr}
 8013732:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 8013734:	f7ff fdaa 	bl	801328c <powerCheck>
 8013738:	0003      	movs	r3, r0
 801373a:	2b04      	cmp	r3, #4
 801373c:	d004      	beq.n	8013748 <setuserToggle+0x18>
    userToggle = true;
 801373e:	4b04      	ldr	r3, [pc, #16]	@ (8013750 <setuserToggle+0x20>)
 8013740:	2201      	movs	r2, #1
 8013742:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8013744:	f7fa fc74 	bl	800e030 <EnabledConnectedDevices>
  }
}
 8013748:	46c0      	nop			@ (mov r8, r8)
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
 801374e:	46c0      	nop			@ (mov r8, r8)
 8013750:	20002166 	.word	0x20002166

08013754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013758:	4b07      	ldr	r3, [pc, #28]	@ (8013778 <HAL_MspInit+0x24>)
 801375a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801375c:	4b06      	ldr	r3, [pc, #24]	@ (8013778 <HAL_MspInit+0x24>)
 801375e:	2101      	movs	r1, #1
 8013760:	430a      	orrs	r2, r1
 8013762:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8013764:	4b04      	ldr	r3, [pc, #16]	@ (8013778 <HAL_MspInit+0x24>)
 8013766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013768:	4b03      	ldr	r3, [pc, #12]	@ (8013778 <HAL_MspInit+0x24>)
 801376a:	2180      	movs	r1, #128	@ 0x80
 801376c:	0549      	lsls	r1, r1, #21
 801376e:	430a      	orrs	r2, r1
 8013770:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013772:	46c0      	nop			@ (mov r8, r8)
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}
 8013778:	40021000 	.word	0x40021000

0801377c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8013780:	46c0      	nop			@ (mov r8, r8)
 8013782:	e7fd      	b.n	8013780 <NMI_Handler+0x4>

08013784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013788:	46c0      	nop			@ (mov r8, r8)
 801378a:	e7fd      	b.n	8013788 <HardFault_Handler+0x4>

0801378c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8013790:	46c0      	nop			@ (mov r8, r8)
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}

08013796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013796:	b580      	push	{r7, lr}
 8013798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801379a:	46c0      	nop			@ (mov r8, r8)
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80137a4:	f001 fa84 	bl	8014cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80137a8:	46c0      	nop			@ (mov r8, r8)
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}
	...

080137b0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80137b4:	4b03      	ldr	r3, [pc, #12]	@ (80137c4 <RTC_IRQHandler+0x14>)
 80137b6:	0018      	movs	r0, r3
 80137b8:	f009 fad4 	bl	801cd64 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80137bc:	46c0      	nop			@ (mov r8, r8)
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}
 80137c2:	46c0      	nop			@ (mov r8, r8)
 80137c4:	200011b0 	.word	0x200011b0

080137c8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 80137cc:	2380      	movs	r3, #128	@ 0x80
 80137ce:	021b      	lsls	r3, r3, #8
 80137d0:	0018      	movs	r0, r3
 80137d2:	f002 fd2d 	bl	8016230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80137d6:	46c0      	nop			@ (mov r8, r8)
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80137e0:	4b05      	ldr	r3, [pc, #20]	@ (80137f8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80137e2:	0018      	movs	r0, r3
 80137e4:	f002 f8b5 	bl	8015952 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80137e8:	4b04      	ldr	r3, [pc, #16]	@ (80137fc <DMA1_Channel2_3_IRQHandler+0x20>)
 80137ea:	0018      	movs	r0, r3
 80137ec:	f002 f8b1 	bl	8015952 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80137f0:	46c0      	nop			@ (mov r8, r8)
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	46c0      	nop			@ (mov r8, r8)
 80137f8:	20001044 	.word	0x20001044
 80137fc:	20000ffc 	.word	0x20000ffc

08013800 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8013804:	4b07      	ldr	r3, [pc, #28]	@ (8013824 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8013806:	0018      	movs	r0, r3
 8013808:	f002 f8a3 	bl	8015952 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 801380c:	4b06      	ldr	r3, [pc, #24]	@ (8013828 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 801380e:	0018      	movs	r0, r3
 8013810:	f002 f89f 	bl	8015952 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8013814:	4b05      	ldr	r3, [pc, #20]	@ (801382c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8013816:	0018      	movs	r0, r3
 8013818:	f002 f89b 	bl	8015952 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 801381c:	46c0      	nop			@ (mov r8, r8)
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
 8013822:	46c0      	nop			@ (mov r8, r8)
 8013824:	200010c8 	.word	0x200010c8
 8013828:	2000246c 	.word	0x2000246c
 801382c:	200024b4 	.word	0x200024b4

08013830 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8013834:	4b03      	ldr	r3, [pc, #12]	@ (8013844 <USART4_5_IRQHandler+0x14>)
 8013836:	0018      	movs	r0, r3
 8013838:	f00a f98e 	bl	801db58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 801383c:	46c0      	nop			@ (mov r8, r8)
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
 8013842:	46c0      	nop			@ (mov r8, r8)
 8013844:	200023b4 	.word	0x200023b4

08013848 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 801384c:	4b09      	ldr	r3, [pc, #36]	@ (8013874 <I2C1_IRQHandler+0x2c>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	699a      	ldr	r2, [r3, #24]
 8013852:	23e0      	movs	r3, #224	@ 0xe0
 8013854:	00db      	lsls	r3, r3, #3
 8013856:	4013      	ands	r3, r2
 8013858:	d004      	beq.n	8013864 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 801385a:	4b06      	ldr	r3, [pc, #24]	@ (8013874 <I2C1_IRQHandler+0x2c>)
 801385c:	0018      	movs	r0, r3
 801385e:	f003 fc05 	bl	801706c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8013862:	e003      	b.n	801386c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8013864:	4b03      	ldr	r3, [pc, #12]	@ (8013874 <I2C1_IRQHandler+0x2c>)
 8013866:	0018      	movs	r0, r3
 8013868:	f003 fbe6 	bl	8017038 <HAL_I2C_EV_IRQHandler>
}
 801386c:	46c0      	nop			@ (mov r8, r8)
 801386e:	46bd      	mov	sp, r7
 8013870:	bd80      	pop	{r7, pc}
 8013872:	46c0      	nop			@ (mov r8, r8)
 8013874:	20000f54 	.word	0x20000f54

08013878 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801387c:	4b03      	ldr	r3, [pc, #12]	@ (801388c <USART1_IRQHandler+0x14>)
 801387e:	0018      	movs	r0, r3
 8013880:	f00a f96a 	bl	801db58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8013884:	46c0      	nop			@ (mov r8, r8)
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}
 801388a:	46c0      	nop			@ (mov r8, r8)
 801388c:	200022fc 	.word	0x200022fc

08013890 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8013894:	4b03      	ldr	r3, [pc, #12]	@ (80138a4 <USB_IRQHandler+0x14>)
 8013896:	0018      	movs	r0, r3
 8013898:	f006 f89c 	bl	80199d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 801389c:	46c0      	nop			@ (mov r8, r8)
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	46c0      	nop			@ (mov r8, r8)
 80138a4:	200032d0 	.word	0x200032d0

080138a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	af00      	add	r7, sp, #0
  return 1;
 80138ac:	2301      	movs	r3, #1
}
 80138ae:	0018      	movs	r0, r3
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}

080138b4 <_kill>:

int _kill(int pid, int sig)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
 80138bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80138be:	f013 f84b 	bl	8026958 <__errno>
 80138c2:	0003      	movs	r3, r0
 80138c4:	2216      	movs	r2, #22
 80138c6:	601a      	str	r2, [r3, #0]
  return -1;
 80138c8:	2301      	movs	r3, #1
 80138ca:	425b      	negs	r3, r3
}
 80138cc:	0018      	movs	r0, r3
 80138ce:	46bd      	mov	sp, r7
 80138d0:	b002      	add	sp, #8
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <_exit>:

void _exit (int status)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80138dc:	2301      	movs	r3, #1
 80138de:	425a      	negs	r2, r3
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	0011      	movs	r1, r2
 80138e4:	0018      	movs	r0, r3
 80138e6:	f7ff ffe5 	bl	80138b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80138ea:	46c0      	nop			@ (mov r8, r8)
 80138ec:	e7fd      	b.n	80138ea <_exit+0x16>

080138ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80138ee:	b580      	push	{r7, lr}
 80138f0:	b086      	sub	sp, #24
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	60f8      	str	r0, [r7, #12]
 80138f6:	60b9      	str	r1, [r7, #8]
 80138f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80138fa:	2300      	movs	r3, #0
 80138fc:	617b      	str	r3, [r7, #20]
 80138fe:	e00a      	b.n	8013916 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8013900:	e000      	b.n	8013904 <_read+0x16>
 8013902:	bf00      	nop
 8013904:	0001      	movs	r1, r0
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	1c5a      	adds	r2, r3, #1
 801390a:	60ba      	str	r2, [r7, #8]
 801390c:	b2ca      	uxtb	r2, r1
 801390e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	3301      	adds	r3, #1
 8013914:	617b      	str	r3, [r7, #20]
 8013916:	697a      	ldr	r2, [r7, #20]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	429a      	cmp	r2, r3
 801391c:	dbf0      	blt.n	8013900 <_read+0x12>
  }

  return len;
 801391e:	687b      	ldr	r3, [r7, #4]
}
 8013920:	0018      	movs	r0, r3
 8013922:	46bd      	mov	sp, r7
 8013924:	b006      	add	sp, #24
 8013926:	bd80      	pop	{r7, pc}

08013928 <_close>:
  }
  return len;
}

int _close(int file)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013930:	2301      	movs	r3, #1
 8013932:	425b      	negs	r3, r3
}
 8013934:	0018      	movs	r0, r3
 8013936:	46bd      	mov	sp, r7
 8013938:	b002      	add	sp, #8
 801393a:	bd80      	pop	{r7, pc}

0801393c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	2280      	movs	r2, #128	@ 0x80
 801394a:	0192      	lsls	r2, r2, #6
 801394c:	605a      	str	r2, [r3, #4]
  return 0;
 801394e:	2300      	movs	r3, #0
}
 8013950:	0018      	movs	r0, r3
 8013952:	46bd      	mov	sp, r7
 8013954:	b002      	add	sp, #8
 8013956:	bd80      	pop	{r7, pc}

08013958 <_isatty>:

int _isatty(int file)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8013960:	2301      	movs	r3, #1
}
 8013962:	0018      	movs	r0, r3
 8013964:	46bd      	mov	sp, r7
 8013966:	b002      	add	sp, #8
 8013968:	bd80      	pop	{r7, pc}

0801396a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801396a:	b580      	push	{r7, lr}
 801396c:	b084      	sub	sp, #16
 801396e:	af00      	add	r7, sp, #0
 8013970:	60f8      	str	r0, [r7, #12]
 8013972:	60b9      	str	r1, [r7, #8]
 8013974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8013976:	2300      	movs	r3, #0
}
 8013978:	0018      	movs	r0, r3
 801397a:	46bd      	mov	sp, r7
 801397c:	b004      	add	sp, #16
 801397e:	bd80      	pop	{r7, pc}

08013980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b086      	sub	sp, #24
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013988:	4a14      	ldr	r2, [pc, #80]	@ (80139dc <_sbrk+0x5c>)
 801398a:	4b15      	ldr	r3, [pc, #84]	@ (80139e0 <_sbrk+0x60>)
 801398c:	1ad3      	subs	r3, r2, r3
 801398e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013994:	4b13      	ldr	r3, [pc, #76]	@ (80139e4 <_sbrk+0x64>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d102      	bne.n	80139a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801399c:	4b11      	ldr	r3, [pc, #68]	@ (80139e4 <_sbrk+0x64>)
 801399e:	4a12      	ldr	r2, [pc, #72]	@ (80139e8 <_sbrk+0x68>)
 80139a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80139a2:	4b10      	ldr	r3, [pc, #64]	@ (80139e4 <_sbrk+0x64>)
 80139a4:	681a      	ldr	r2, [r3, #0]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	18d3      	adds	r3, r2, r3
 80139aa:	693a      	ldr	r2, [r7, #16]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d207      	bcs.n	80139c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80139b0:	f012 ffd2 	bl	8026958 <__errno>
 80139b4:	0003      	movs	r3, r0
 80139b6:	220c      	movs	r2, #12
 80139b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80139ba:	2301      	movs	r3, #1
 80139bc:	425b      	negs	r3, r3
 80139be:	e009      	b.n	80139d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80139c0:	4b08      	ldr	r3, [pc, #32]	@ (80139e4 <_sbrk+0x64>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80139c6:	4b07      	ldr	r3, [pc, #28]	@ (80139e4 <_sbrk+0x64>)
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	18d2      	adds	r2, r2, r3
 80139ce:	4b05      	ldr	r3, [pc, #20]	@ (80139e4 <_sbrk+0x64>)
 80139d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80139d2:	68fb      	ldr	r3, [r7, #12]
}
 80139d4:	0018      	movs	r0, r3
 80139d6:	46bd      	mov	sp, r7
 80139d8:	b006      	add	sp, #24
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	20005000 	.word	0x20005000
 80139e0:	00000400 	.word	0x00000400
 80139e4:	20002180 	.word	0x20002180
 80139e8:	20003930 	.word	0x20003930

080139ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80139f0:	46c0      	nop			@ (mov r8, r8)
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
	...

080139f8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b086      	sub	sp, #24
 80139fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80139fe:	2310      	movs	r3, #16
 8013a00:	18fb      	adds	r3, r7, r3
 8013a02:	0018      	movs	r0, r3
 8013a04:	2308      	movs	r3, #8
 8013a06:	001a      	movs	r2, r3
 8013a08:	2100      	movs	r1, #0
 8013a0a:	f012 ff01 	bl	8026810 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013a0e:	003b      	movs	r3, r7
 8013a10:	0018      	movs	r0, r3
 8013a12:	2310      	movs	r3, #16
 8013a14:	001a      	movs	r2, r3
 8013a16:	2100      	movs	r1, #0
 8013a18:	f012 fefa 	bl	8026810 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013a1e:	2280      	movs	r2, #128	@ 0x80
 8013a20:	05d2      	lsls	r2, r2, #23
 8013a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8013a24:	4b2c      	ldr	r3, [pc, #176]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013a26:	2200      	movs	r2, #0
 8013a28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8013a30:	4b29      	ldr	r3, [pc, #164]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013a32:	4a2a      	ldr	r2, [pc, #168]	@ (8013adc <MX_TIM2_Init+0xe4>)
 8013a34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013a36:	4b28      	ldr	r3, [pc, #160]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013a38:	2200      	movs	r2, #0
 8013a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013a3c:	4b26      	ldr	r3, [pc, #152]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013a3e:	2200      	movs	r2, #0
 8013a40:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8013a42:	4b25      	ldr	r3, [pc, #148]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013a44:	0018      	movs	r0, r3
 8013a46:	f009 fa9b 	bl	801cf80 <HAL_TIM_PWM_Init>
 8013a4a:	1e03      	subs	r3, r0, #0
 8013a4c:	d001      	beq.n	8013a52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8013a4e:	f7f9 fe81 	bl	800d754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013a52:	2110      	movs	r1, #16
 8013a54:	187b      	adds	r3, r7, r1
 8013a56:	2200      	movs	r2, #0
 8013a58:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013a5a:	187b      	adds	r3, r7, r1
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8013a60:	187a      	adds	r2, r7, r1
 8013a62:	4b1d      	ldr	r3, [pc, #116]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013a64:	0011      	movs	r1, r2
 8013a66:	0018      	movs	r0, r3
 8013a68:	f009 fda8 	bl	801d5bc <HAL_TIMEx_MasterConfigSynchronization>
 8013a6c:	1e03      	subs	r3, r0, #0
 8013a6e:	d001      	beq.n	8013a74 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8013a70:	f7f9 fe70 	bl	800d754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013a74:	003b      	movs	r3, r7
 8013a76:	2260      	movs	r2, #96	@ 0x60
 8013a78:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8013a7a:	003b      	movs	r3, r7
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013a80:	003b      	movs	r3, r7
 8013a82:	2200      	movs	r2, #0
 8013a84:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013a86:	003b      	movs	r3, r7
 8013a88:	2200      	movs	r2, #0
 8013a8a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013a8c:	0039      	movs	r1, r7
 8013a8e:	4b12      	ldr	r3, [pc, #72]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013a90:	2200      	movs	r2, #0
 8013a92:	0018      	movs	r0, r3
 8013a94:	f009 fb46 	bl	801d124 <HAL_TIM_PWM_ConfigChannel>
 8013a98:	1e03      	subs	r3, r0, #0
 8013a9a:	d001      	beq.n	8013aa0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8013a9c:	f7f9 fe5a 	bl	800d754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013aa0:	0039      	movs	r1, r7
 8013aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013aa4:	2208      	movs	r2, #8
 8013aa6:	0018      	movs	r0, r3
 8013aa8:	f009 fb3c 	bl	801d124 <HAL_TIM_PWM_ConfigChannel>
 8013aac:	1e03      	subs	r3, r0, #0
 8013aae:	d001      	beq.n	8013ab4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8013ab0:	f7f9 fe50 	bl	800d754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013ab4:	0039      	movs	r1, r7
 8013ab6:	4b08      	ldr	r3, [pc, #32]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013ab8:	220c      	movs	r2, #12
 8013aba:	0018      	movs	r0, r3
 8013abc:	f009 fb32 	bl	801d124 <HAL_TIM_PWM_ConfigChannel>
 8013ac0:	1e03      	subs	r3, r0, #0
 8013ac2:	d001      	beq.n	8013ac8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8013ac4:	f7f9 fe46 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013ac8:	4b03      	ldr	r3, [pc, #12]	@ (8013ad8 <MX_TIM2_Init+0xe0>)
 8013aca:	0018      	movs	r0, r3
 8013acc:	f000 f8fe 	bl	8013ccc <HAL_TIM_MspPostInit>

}
 8013ad0:	46c0      	nop			@ (mov r8, r8)
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	b006      	add	sp, #24
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	20002184 	.word	0x20002184
 8013adc:	0000ffff 	.word	0x0000ffff

08013ae0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b086      	sub	sp, #24
 8013ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013ae6:	2310      	movs	r3, #16
 8013ae8:	18fb      	adds	r3, r7, r3
 8013aea:	0018      	movs	r0, r3
 8013aec:	2308      	movs	r3, #8
 8013aee:	001a      	movs	r2, r3
 8013af0:	2100      	movs	r1, #0
 8013af2:	f012 fe8d 	bl	8026810 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013af6:	003b      	movs	r3, r7
 8013af8:	0018      	movs	r0, r3
 8013afa:	2310      	movs	r3, #16
 8013afc:	001a      	movs	r2, r3
 8013afe:	2100      	movs	r1, #0
 8013b00:	f012 fe86 	bl	8026810 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8013b04:	4b32      	ldr	r3, [pc, #200]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b06:	4a33      	ldr	r2, [pc, #204]	@ (8013bd4 <MX_TIM3_Init+0xf4>)
 8013b08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8013b0a:	4b31      	ldr	r3, [pc, #196]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013b10:	4b2f      	ldr	r3, [pc, #188]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b12:	2200      	movs	r2, #0
 8013b14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8013b16:	4b2e      	ldr	r3, [pc, #184]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b18:	4a2f      	ldr	r2, [pc, #188]	@ (8013bd8 <MX_TIM3_Init+0xf8>)
 8013b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b1e:	2200      	movs	r2, #0
 8013b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013b22:	4b2b      	ldr	r3, [pc, #172]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b24:	2200      	movs	r2, #0
 8013b26:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013b28:	4b29      	ldr	r3, [pc, #164]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b2a:	0018      	movs	r0, r3
 8013b2c:	f009 fa28 	bl	801cf80 <HAL_TIM_PWM_Init>
 8013b30:	1e03      	subs	r3, r0, #0
 8013b32:	d001      	beq.n	8013b38 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8013b34:	f7f9 fe0e 	bl	800d754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013b38:	2110      	movs	r1, #16
 8013b3a:	187b      	adds	r3, r7, r1
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013b40:	187b      	adds	r3, r7, r1
 8013b42:	2200      	movs	r2, #0
 8013b44:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8013b46:	187a      	adds	r2, r7, r1
 8013b48:	4b21      	ldr	r3, [pc, #132]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b4a:	0011      	movs	r1, r2
 8013b4c:	0018      	movs	r0, r3
 8013b4e:	f009 fd35 	bl	801d5bc <HAL_TIMEx_MasterConfigSynchronization>
 8013b52:	1e03      	subs	r3, r0, #0
 8013b54:	d001      	beq.n	8013b5a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8013b56:	f7f9 fdfd 	bl	800d754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013b5a:	003b      	movs	r3, r7
 8013b5c:	2260      	movs	r2, #96	@ 0x60
 8013b5e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8013b60:	003b      	movs	r3, r7
 8013b62:	2200      	movs	r2, #0
 8013b64:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013b66:	003b      	movs	r3, r7
 8013b68:	2200      	movs	r2, #0
 8013b6a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013b6c:	003b      	movs	r3, r7
 8013b6e:	2200      	movs	r2, #0
 8013b70:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013b72:	0039      	movs	r1, r7
 8013b74:	4b16      	ldr	r3, [pc, #88]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b76:	2200      	movs	r2, #0
 8013b78:	0018      	movs	r0, r3
 8013b7a:	f009 fad3 	bl	801d124 <HAL_TIM_PWM_ConfigChannel>
 8013b7e:	1e03      	subs	r3, r0, #0
 8013b80:	d001      	beq.n	8013b86 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8013b82:	f7f9 fde7 	bl	800d754 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8013b86:	4b12      	ldr	r3, [pc, #72]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b88:	2104      	movs	r1, #4
 8013b8a:	0018      	movs	r0, r3
 8013b8c:	f009 fd74 	bl	801d678 <HAL_TIMEx_RemapConfig>
 8013b90:	1e03      	subs	r3, r0, #0
 8013b92:	d001      	beq.n	8013b98 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8013b94:	f7f9 fdde 	bl	800d754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013b98:	0039      	movs	r1, r7
 8013b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013b9c:	2204      	movs	r2, #4
 8013b9e:	0018      	movs	r0, r3
 8013ba0:	f009 fac0 	bl	801d124 <HAL_TIM_PWM_ConfigChannel>
 8013ba4:	1e03      	subs	r3, r0, #0
 8013ba6:	d001      	beq.n	8013bac <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8013ba8:	f7f9 fdd4 	bl	800d754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013bac:	0039      	movs	r1, r7
 8013bae:	4b08      	ldr	r3, [pc, #32]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013bb0:	2208      	movs	r2, #8
 8013bb2:	0018      	movs	r0, r3
 8013bb4:	f009 fab6 	bl	801d124 <HAL_TIM_PWM_ConfigChannel>
 8013bb8:	1e03      	subs	r3, r0, #0
 8013bba:	d001      	beq.n	8013bc0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8013bbc:	f7f9 fdca 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8013bc0:	4b03      	ldr	r3, [pc, #12]	@ (8013bd0 <MX_TIM3_Init+0xf0>)
 8013bc2:	0018      	movs	r0, r3
 8013bc4:	f000 f882 	bl	8013ccc <HAL_TIM_MspPostInit>

}
 8013bc8:	46c0      	nop			@ (mov r8, r8)
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	b006      	add	sp, #24
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	200021c4 	.word	0x200021c4
 8013bd4:	40000400 	.word	0x40000400
 8013bd8:	0000ffff 	.word	0x0000ffff

08013bdc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b082      	sub	sp, #8
 8013be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013be2:	003b      	movs	r3, r7
 8013be4:	0018      	movs	r0, r3
 8013be6:	2308      	movs	r3, #8
 8013be8:	001a      	movs	r2, r3
 8013bea:	2100      	movs	r1, #0
 8013bec:	f012 fe10 	bl	8026810 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8013bf0:	4b15      	ldr	r3, [pc, #84]	@ (8013c48 <MX_TIM6_Init+0x6c>)
 8013bf2:	4a16      	ldr	r2, [pc, #88]	@ (8013c4c <MX_TIM6_Init+0x70>)
 8013bf4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8013bf6:	4b14      	ldr	r3, [pc, #80]	@ (8013c48 <MX_TIM6_Init+0x6c>)
 8013bf8:	220a      	movs	r2, #10
 8013bfa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013bfc:	4b12      	ldr	r3, [pc, #72]	@ (8013c48 <MX_TIM6_Init+0x6c>)
 8013bfe:	2200      	movs	r2, #0
 8013c00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8013c02:	4b11      	ldr	r3, [pc, #68]	@ (8013c48 <MX_TIM6_Init+0x6c>)
 8013c04:	4a12      	ldr	r2, [pc, #72]	@ (8013c50 <MX_TIM6_Init+0x74>)
 8013c06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013c08:	4b0f      	ldr	r3, [pc, #60]	@ (8013c48 <MX_TIM6_Init+0x6c>)
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8013c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8013c48 <MX_TIM6_Init+0x6c>)
 8013c10:	0018      	movs	r0, r3
 8013c12:	f009 f90d 	bl	801ce30 <HAL_TIM_Base_Init>
 8013c16:	1e03      	subs	r3, r0, #0
 8013c18:	d001      	beq.n	8013c1e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8013c1a:	f7f9 fd9b 	bl	800d754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013c1e:	003b      	movs	r3, r7
 8013c20:	2200      	movs	r2, #0
 8013c22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013c24:	003b      	movs	r3, r7
 8013c26:	2200      	movs	r2, #0
 8013c28:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8013c2a:	003a      	movs	r2, r7
 8013c2c:	4b06      	ldr	r3, [pc, #24]	@ (8013c48 <MX_TIM6_Init+0x6c>)
 8013c2e:	0011      	movs	r1, r2
 8013c30:	0018      	movs	r0, r3
 8013c32:	f009 fcc3 	bl	801d5bc <HAL_TIMEx_MasterConfigSynchronization>
 8013c36:	1e03      	subs	r3, r0, #0
 8013c38:	d001      	beq.n	8013c3e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8013c3a:	f7f9 fd8b 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8013c3e:	46c0      	nop			@ (mov r8, r8)
 8013c40:	46bd      	mov	sp, r7
 8013c42:	b002      	add	sp, #8
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	46c0      	nop			@ (mov r8, r8)
 8013c48:	20002204 	.word	0x20002204
 8013c4c:	40001000 	.word	0x40001000
 8013c50:	0000ffff 	.word	0x0000ffff

08013c54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	2380      	movs	r3, #128	@ 0x80
 8013c62:	05db      	lsls	r3, r3, #23
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d106      	bne.n	8013c76 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8013c68:	4b0a      	ldr	r3, [pc, #40]	@ (8013c94 <HAL_TIM_PWM_MspInit+0x40>)
 8013c6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c6c:	4b09      	ldr	r3, [pc, #36]	@ (8013c94 <HAL_TIM_PWM_MspInit+0x40>)
 8013c6e:	2101      	movs	r1, #1
 8013c70:	430a      	orrs	r2, r1
 8013c72:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8013c74:	e00a      	b.n	8013c8c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	4a07      	ldr	r2, [pc, #28]	@ (8013c98 <HAL_TIM_PWM_MspInit+0x44>)
 8013c7c:	4293      	cmp	r3, r2
 8013c7e:	d105      	bne.n	8013c8c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8013c80:	4b04      	ldr	r3, [pc, #16]	@ (8013c94 <HAL_TIM_PWM_MspInit+0x40>)
 8013c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c84:	4b03      	ldr	r3, [pc, #12]	@ (8013c94 <HAL_TIM_PWM_MspInit+0x40>)
 8013c86:	2102      	movs	r1, #2
 8013c88:	430a      	orrs	r2, r1
 8013c8a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8013c8c:	46c0      	nop			@ (mov r8, r8)
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	b002      	add	sp, #8
 8013c92:	bd80      	pop	{r7, pc}
 8013c94:	40021000 	.word	0x40021000
 8013c98:	40000400 	.word	0x40000400

08013c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	4a06      	ldr	r2, [pc, #24]	@ (8013cc4 <HAL_TIM_Base_MspInit+0x28>)
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d105      	bne.n	8013cba <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8013cae:	4b06      	ldr	r3, [pc, #24]	@ (8013cc8 <HAL_TIM_Base_MspInit+0x2c>)
 8013cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013cb2:	4b05      	ldr	r3, [pc, #20]	@ (8013cc8 <HAL_TIM_Base_MspInit+0x2c>)
 8013cb4:	2110      	movs	r1, #16
 8013cb6:	430a      	orrs	r2, r1
 8013cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8013cba:	46c0      	nop			@ (mov r8, r8)
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	b002      	add	sp, #8
 8013cc0:	bd80      	pop	{r7, pc}
 8013cc2:	46c0      	nop			@ (mov r8, r8)
 8013cc4:	40001000 	.word	0x40001000
 8013cc8:	40021000 	.word	0x40021000

08013ccc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8013ccc:	b590      	push	{r4, r7, lr}
 8013cce:	b08b      	sub	sp, #44	@ 0x2c
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013cd4:	2414      	movs	r4, #20
 8013cd6:	193b      	adds	r3, r7, r4
 8013cd8:	0018      	movs	r0, r3
 8013cda:	2314      	movs	r3, #20
 8013cdc:	001a      	movs	r2, r3
 8013cde:	2100      	movs	r1, #0
 8013ce0:	f012 fd96 	bl	8026810 <memset>
  if(timHandle->Instance==TIM2)
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681a      	ldr	r2, [r3, #0]
 8013ce8:	2380      	movs	r3, #128	@ 0x80
 8013cea:	05db      	lsls	r3, r3, #23
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d123      	bne.n	8013d38 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013cf0:	4b27      	ldr	r3, [pc, #156]	@ (8013d90 <HAL_TIM_MspPostInit+0xc4>)
 8013cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cf4:	4b26      	ldr	r3, [pc, #152]	@ (8013d90 <HAL_TIM_MspPostInit+0xc4>)
 8013cf6:	2101      	movs	r1, #1
 8013cf8:	430a      	orrs	r2, r1
 8013cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013cfc:	4b24      	ldr	r3, [pc, #144]	@ (8013d90 <HAL_TIM_MspPostInit+0xc4>)
 8013cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d00:	2201      	movs	r2, #1
 8013d02:	4013      	ands	r3, r2
 8013d04:	613b      	str	r3, [r7, #16]
 8013d06:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8013d08:	0021      	movs	r1, r4
 8013d0a:	187b      	adds	r3, r7, r1
 8013d0c:	220d      	movs	r2, #13
 8013d0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d10:	187b      	adds	r3, r7, r1
 8013d12:	2202      	movs	r2, #2
 8013d14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d16:	187b      	adds	r3, r7, r1
 8013d18:	2200      	movs	r2, #0
 8013d1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013d1c:	187b      	adds	r3, r7, r1
 8013d1e:	2200      	movs	r2, #0
 8013d20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8013d22:	187b      	adds	r3, r7, r1
 8013d24:	2202      	movs	r2, #2
 8013d26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013d28:	187a      	adds	r2, r7, r1
 8013d2a:	23a0      	movs	r3, #160	@ 0xa0
 8013d2c:	05db      	lsls	r3, r3, #23
 8013d2e:	0011      	movs	r1, r2
 8013d30:	0018      	movs	r0, r3
 8013d32:	f002 f8c5 	bl	8015ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8013d36:	e027      	b.n	8013d88 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	4a15      	ldr	r2, [pc, #84]	@ (8013d94 <HAL_TIM_MspPostInit+0xc8>)
 8013d3e:	4293      	cmp	r3, r2
 8013d40:	d122      	bne.n	8013d88 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013d42:	4b13      	ldr	r3, [pc, #76]	@ (8013d90 <HAL_TIM_MspPostInit+0xc4>)
 8013d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d46:	4b12      	ldr	r3, [pc, #72]	@ (8013d90 <HAL_TIM_MspPostInit+0xc4>)
 8013d48:	2104      	movs	r1, #4
 8013d4a:	430a      	orrs	r2, r1
 8013d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013d4e:	4b10      	ldr	r3, [pc, #64]	@ (8013d90 <HAL_TIM_MspPostInit+0xc4>)
 8013d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d52:	2204      	movs	r2, #4
 8013d54:	4013      	ands	r3, r2
 8013d56:	60fb      	str	r3, [r7, #12]
 8013d58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8013d5a:	2114      	movs	r1, #20
 8013d5c:	187b      	adds	r3, r7, r1
 8013d5e:	22e0      	movs	r2, #224	@ 0xe0
 8013d60:	0052      	lsls	r2, r2, #1
 8013d62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d64:	187b      	adds	r3, r7, r1
 8013d66:	2202      	movs	r2, #2
 8013d68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d6a:	187b      	adds	r3, r7, r1
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013d70:	187b      	adds	r3, r7, r1
 8013d72:	2200      	movs	r2, #0
 8013d74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013d76:	187b      	adds	r3, r7, r1
 8013d78:	2202      	movs	r2, #2
 8013d7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013d7c:	187b      	adds	r3, r7, r1
 8013d7e:	4a06      	ldr	r2, [pc, #24]	@ (8013d98 <HAL_TIM_MspPostInit+0xcc>)
 8013d80:	0019      	movs	r1, r3
 8013d82:	0010      	movs	r0, r2
 8013d84:	f002 f89c 	bl	8015ec0 <HAL_GPIO_Init>
}
 8013d88:	46c0      	nop			@ (mov r8, r8)
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	b00b      	add	sp, #44	@ 0x2c
 8013d8e:	bd90      	pop	{r4, r7, pc}
 8013d90:	40021000 	.word	0x40021000
 8013d94:	40000400 	.word	0x40000400
 8013d98:	50000800 	.word	0x50000800

08013d9c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8013da0:	4b17      	ldr	r3, [pc, #92]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013da2:	4a18      	ldr	r2, [pc, #96]	@ (8013e04 <MX_LPUART1_UART_Init+0x68>)
 8013da4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8013da6:	4b16      	ldr	r3, [pc, #88]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013da8:	22e1      	movs	r2, #225	@ 0xe1
 8013daa:	0252      	lsls	r2, r2, #9
 8013dac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013dae:	4b14      	ldr	r3, [pc, #80]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013db0:	2200      	movs	r2, #0
 8013db2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8013db4:	4b12      	ldr	r3, [pc, #72]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013db6:	2200      	movs	r2, #0
 8013db8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8013dba:	4b11      	ldr	r3, [pc, #68]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8013dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013dc2:	220c      	movs	r2, #12
 8013dc4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013dc8:	2200      	movs	r2, #0
 8013dca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013dce:	2200      	movs	r2, #0
 8013dd0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8013dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013dd4:	2218      	movs	r2, #24
 8013dd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8013dd8:	4b09      	ldr	r3, [pc, #36]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013dda:	2280      	movs	r2, #128	@ 0x80
 8013ddc:	0212      	lsls	r2, r2, #8
 8013dde:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8013de0:	4b07      	ldr	r3, [pc, #28]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013de2:	2280      	movs	r2, #128	@ 0x80
 8013de4:	0152      	lsls	r2, r2, #5
 8013de6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8013de8:	4b05      	ldr	r3, [pc, #20]	@ (8013e00 <MX_LPUART1_UART_Init+0x64>)
 8013dea:	0018      	movs	r0, r3
 8013dec:	f009 fc62 	bl	801d6b4 <HAL_UART_Init>
 8013df0:	1e03      	subs	r3, r0, #0
 8013df2:	d001      	beq.n	8013df8 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8013df4:	f7f9 fcae 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8013df8:	46c0      	nop			@ (mov r8, r8)
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
 8013dfe:	46c0      	nop			@ (mov r8, r8)
 8013e00:	20002244 	.word	0x20002244
 8013e04:	40004800 	.word	0x40004800

08013e08 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013e0c:	4b14      	ldr	r3, [pc, #80]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e0e:	4a15      	ldr	r2, [pc, #84]	@ (8013e64 <MX_USART1_UART_Init+0x5c>)
 8013e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013e12:	4b13      	ldr	r3, [pc, #76]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e14:	22e1      	movs	r2, #225	@ 0xe1
 8013e16:	0252      	lsls	r2, r2, #9
 8013e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013e1a:	4b11      	ldr	r3, [pc, #68]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013e20:	4b0f      	ldr	r3, [pc, #60]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e22:	2200      	movs	r2, #0
 8013e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013e26:	4b0e      	ldr	r3, [pc, #56]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e28:	2200      	movs	r2, #0
 8013e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e2e:	220c      	movs	r2, #12
 8013e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013e32:	4b0b      	ldr	r3, [pc, #44]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e34:	2200      	movs	r2, #0
 8013e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013e38:	4b09      	ldr	r3, [pc, #36]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013e3e:	4b08      	ldr	r3, [pc, #32]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e40:	2200      	movs	r2, #0
 8013e42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013e44:	4b06      	ldr	r3, [pc, #24]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e46:	2200      	movs	r2, #0
 8013e48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013e4a:	4b05      	ldr	r3, [pc, #20]	@ (8013e60 <MX_USART1_UART_Init+0x58>)
 8013e4c:	0018      	movs	r0, r3
 8013e4e:	f009 fc31 	bl	801d6b4 <HAL_UART_Init>
 8013e52:	1e03      	subs	r3, r0, #0
 8013e54:	d001      	beq.n	8013e5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8013e56:	f7f9 fc7d 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013e5a:	46c0      	nop			@ (mov r8, r8)
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	200022fc 	.word	0x200022fc
 8013e64:	40013800 	.word	0x40013800

08013e68 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013e6c:	4b14      	ldr	r3, [pc, #80]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013e6e:	4a15      	ldr	r2, [pc, #84]	@ (8013ec4 <MX_USART4_UART_Init+0x5c>)
 8013e70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8013e72:	4b13      	ldr	r3, [pc, #76]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013e74:	22e1      	movs	r2, #225	@ 0xe1
 8013e76:	0252      	lsls	r2, r2, #9
 8013e78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013e7a:	4b11      	ldr	r3, [pc, #68]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013e80:	4b0f      	ldr	r3, [pc, #60]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013e82:	2200      	movs	r2, #0
 8013e84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013e86:	4b0e      	ldr	r3, [pc, #56]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013e88:	2200      	movs	r2, #0
 8013e8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013e8e:	220c      	movs	r2, #12
 8013e90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013e92:	4b0b      	ldr	r3, [pc, #44]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013e94:	2200      	movs	r2, #0
 8013e96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013e98:	4b09      	ldr	r3, [pc, #36]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013e9e:	4b08      	ldr	r3, [pc, #32]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013ea4:	4b06      	ldr	r3, [pc, #24]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013eaa:	4b05      	ldr	r3, [pc, #20]	@ (8013ec0 <MX_USART4_UART_Init+0x58>)
 8013eac:	0018      	movs	r0, r3
 8013eae:	f009 fc01 	bl	801d6b4 <HAL_UART_Init>
 8013eb2:	1e03      	subs	r3, r0, #0
 8013eb4:	d001      	beq.n	8013eba <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8013eb6:	f7f9 fc4d 	bl	800d754 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013eba:	46c0      	nop			@ (mov r8, r8)
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	200023b4 	.word	0x200023b4
 8013ec4:	40004c00 	.word	0x40004c00

08013ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013ec8:	b590      	push	{r4, r7, lr}
 8013eca:	b08d      	sub	sp, #52	@ 0x34
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ed0:	241c      	movs	r4, #28
 8013ed2:	193b      	adds	r3, r7, r4
 8013ed4:	0018      	movs	r0, r3
 8013ed6:	2314      	movs	r3, #20
 8013ed8:	001a      	movs	r2, r3
 8013eda:	2100      	movs	r1, #0
 8013edc:	f012 fc98 	bl	8026810 <memset>
  if(uartHandle->Instance==LPUART1)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4a8b      	ldr	r2, [pc, #556]	@ (8014114 <HAL_UART_MspInit+0x24c>)
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d129      	bne.n	8013f3e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013eea:	4b8b      	ldr	r3, [pc, #556]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013eee:	4b8a      	ldr	r3, [pc, #552]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013ef0:	2180      	movs	r1, #128	@ 0x80
 8013ef2:	02c9      	lsls	r1, r1, #11
 8013ef4:	430a      	orrs	r2, r1
 8013ef6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013ef8:	4b87      	ldr	r3, [pc, #540]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013efc:	4b86      	ldr	r3, [pc, #536]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013efe:	2104      	movs	r1, #4
 8013f00:	430a      	orrs	r2, r1
 8013f02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013f04:	4b84      	ldr	r3, [pc, #528]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f08:	2204      	movs	r2, #4
 8013f0a:	4013      	ands	r3, r2
 8013f0c:	61bb      	str	r3, [r7, #24]
 8013f0e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013f10:	0021      	movs	r1, r4
 8013f12:	187b      	adds	r3, r7, r1
 8013f14:	2203      	movs	r2, #3
 8013f16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f18:	187b      	adds	r3, r7, r1
 8013f1a:	2202      	movs	r2, #2
 8013f1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f1e:	187b      	adds	r3, r7, r1
 8013f20:	2200      	movs	r2, #0
 8013f22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f24:	187b      	adds	r3, r7, r1
 8013f26:	2203      	movs	r2, #3
 8013f28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013f2a:	187b      	adds	r3, r7, r1
 8013f2c:	2206      	movs	r2, #6
 8013f2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013f30:	187b      	adds	r3, r7, r1
 8013f32:	4a7a      	ldr	r2, [pc, #488]	@ (801411c <HAL_UART_MspInit+0x254>)
 8013f34:	0019      	movs	r1, r3
 8013f36:	0010      	movs	r0, r2
 8013f38:	f001 ffc2 	bl	8015ec0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013f3c:	e0e5      	b.n	801410a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4a77      	ldr	r2, [pc, #476]	@ (8014120 <HAL_UART_MspInit+0x258>)
 8013f44:	4293      	cmp	r3, r2
 8013f46:	d133      	bne.n	8013fb0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013f48:	4b73      	ldr	r3, [pc, #460]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013f4c:	4b72      	ldr	r3, [pc, #456]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013f4e:	2180      	movs	r1, #128	@ 0x80
 8013f50:	01c9      	lsls	r1, r1, #7
 8013f52:	430a      	orrs	r2, r1
 8013f54:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013f56:	4b70      	ldr	r3, [pc, #448]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f5a:	4b6f      	ldr	r3, [pc, #444]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013f5c:	2101      	movs	r1, #1
 8013f5e:	430a      	orrs	r2, r1
 8013f60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013f62:	4b6d      	ldr	r3, [pc, #436]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f66:	2201      	movs	r2, #1
 8013f68:	4013      	ands	r3, r2
 8013f6a:	617b      	str	r3, [r7, #20]
 8013f6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013f6e:	211c      	movs	r1, #28
 8013f70:	187b      	adds	r3, r7, r1
 8013f72:	22c0      	movs	r2, #192	@ 0xc0
 8013f74:	00d2      	lsls	r2, r2, #3
 8013f76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f78:	187b      	adds	r3, r7, r1
 8013f7a:	2202      	movs	r2, #2
 8013f7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f7e:	187b      	adds	r3, r7, r1
 8013f80:	2200      	movs	r2, #0
 8013f82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f84:	187b      	adds	r3, r7, r1
 8013f86:	2203      	movs	r2, #3
 8013f88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013f8a:	187b      	adds	r3, r7, r1
 8013f8c:	2204      	movs	r2, #4
 8013f8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f90:	187a      	adds	r2, r7, r1
 8013f92:	23a0      	movs	r3, #160	@ 0xa0
 8013f94:	05db      	lsls	r3, r3, #23
 8013f96:	0011      	movs	r1, r2
 8013f98:	0018      	movs	r0, r3
 8013f9a:	f001 ff91 	bl	8015ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	2100      	movs	r1, #0
 8013fa2:	201b      	movs	r0, #27
 8013fa4:	f001 fb3a 	bl	801561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013fa8:	201b      	movs	r0, #27
 8013faa:	f001 fb4c 	bl	8015646 <HAL_NVIC_EnableIRQ>
}
 8013fae:	e0ac      	b.n	801410a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4a5b      	ldr	r2, [pc, #364]	@ (8014124 <HAL_UART_MspInit+0x25c>)
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	d000      	beq.n	8013fbc <HAL_UART_MspInit+0xf4>
 8013fba:	e0a6      	b.n	801410a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013fbc:	4b56      	ldr	r3, [pc, #344]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013fbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013fc0:	4b55      	ldr	r3, [pc, #340]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013fc2:	2180      	movs	r1, #128	@ 0x80
 8013fc4:	0309      	lsls	r1, r1, #12
 8013fc6:	430a      	orrs	r2, r1
 8013fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013fca:	4b53      	ldr	r3, [pc, #332]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fce:	4b52      	ldr	r3, [pc, #328]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013fd0:	2101      	movs	r1, #1
 8013fd2:	430a      	orrs	r2, r1
 8013fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013fd6:	4b50      	ldr	r3, [pc, #320]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fda:	2201      	movs	r2, #1
 8013fdc:	4013      	ands	r3, r2
 8013fde:	613b      	str	r3, [r7, #16]
 8013fe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013fe2:	4b4d      	ldr	r3, [pc, #308]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013fe8:	2104      	movs	r1, #4
 8013fea:	430a      	orrs	r2, r1
 8013fec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013fee:	4b4a      	ldr	r3, [pc, #296]	@ (8014118 <HAL_UART_MspInit+0x250>)
 8013ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ff2:	2204      	movs	r2, #4
 8013ff4:	4013      	ands	r3, r2
 8013ff6:	60fb      	str	r3, [r7, #12]
 8013ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013ffa:	241c      	movs	r4, #28
 8013ffc:	193b      	adds	r3, r7, r4
 8013ffe:	2202      	movs	r2, #2
 8014000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014002:	193b      	adds	r3, r7, r4
 8014004:	2202      	movs	r2, #2
 8014006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014008:	193b      	adds	r3, r7, r4
 801400a:	2200      	movs	r2, #0
 801400c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801400e:	193b      	adds	r3, r7, r4
 8014010:	2203      	movs	r2, #3
 8014012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8014014:	193b      	adds	r3, r7, r4
 8014016:	2206      	movs	r2, #6
 8014018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801401a:	193a      	adds	r2, r7, r4
 801401c:	23a0      	movs	r3, #160	@ 0xa0
 801401e:	05db      	lsls	r3, r3, #23
 8014020:	0011      	movs	r1, r2
 8014022:	0018      	movs	r0, r3
 8014024:	f001 ff4c 	bl	8015ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8014028:	0021      	movs	r1, r4
 801402a:	187b      	adds	r3, r7, r1
 801402c:	2280      	movs	r2, #128	@ 0x80
 801402e:	00d2      	lsls	r2, r2, #3
 8014030:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014032:	187b      	adds	r3, r7, r1
 8014034:	2202      	movs	r2, #2
 8014036:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014038:	187b      	adds	r3, r7, r1
 801403a:	2200      	movs	r2, #0
 801403c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801403e:	187b      	adds	r3, r7, r1
 8014040:	2203      	movs	r2, #3
 8014042:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8014044:	187b      	adds	r3, r7, r1
 8014046:	2206      	movs	r2, #6
 8014048:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801404a:	187b      	adds	r3, r7, r1
 801404c:	4a33      	ldr	r2, [pc, #204]	@ (801411c <HAL_UART_MspInit+0x254>)
 801404e:	0019      	movs	r1, r3
 8014050:	0010      	movs	r0, r2
 8014052:	f001 ff35 	bl	8015ec0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8014056:	4b34      	ldr	r3, [pc, #208]	@ (8014128 <HAL_UART_MspInit+0x260>)
 8014058:	4a34      	ldr	r2, [pc, #208]	@ (801412c <HAL_UART_MspInit+0x264>)
 801405a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 801405c:	4b32      	ldr	r3, [pc, #200]	@ (8014128 <HAL_UART_MspInit+0x260>)
 801405e:	220c      	movs	r2, #12
 8014060:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014062:	4b31      	ldr	r3, [pc, #196]	@ (8014128 <HAL_UART_MspInit+0x260>)
 8014064:	2200      	movs	r2, #0
 8014066:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014068:	4b2f      	ldr	r3, [pc, #188]	@ (8014128 <HAL_UART_MspInit+0x260>)
 801406a:	2200      	movs	r2, #0
 801406c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 801406e:	4b2e      	ldr	r3, [pc, #184]	@ (8014128 <HAL_UART_MspInit+0x260>)
 8014070:	2280      	movs	r2, #128	@ 0x80
 8014072:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014074:	4b2c      	ldr	r3, [pc, #176]	@ (8014128 <HAL_UART_MspInit+0x260>)
 8014076:	2200      	movs	r2, #0
 8014078:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801407a:	4b2b      	ldr	r3, [pc, #172]	@ (8014128 <HAL_UART_MspInit+0x260>)
 801407c:	2200      	movs	r2, #0
 801407e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8014080:	4b29      	ldr	r3, [pc, #164]	@ (8014128 <HAL_UART_MspInit+0x260>)
 8014082:	2220      	movs	r2, #32
 8014084:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014086:	4b28      	ldr	r3, [pc, #160]	@ (8014128 <HAL_UART_MspInit+0x260>)
 8014088:	2200      	movs	r2, #0
 801408a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 801408c:	4b26      	ldr	r3, [pc, #152]	@ (8014128 <HAL_UART_MspInit+0x260>)
 801408e:	0018      	movs	r0, r3
 8014090:	f001 fafa 	bl	8015688 <HAL_DMA_Init>
 8014094:	1e03      	subs	r3, r0, #0
 8014096:	d001      	beq.n	801409c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8014098:	f7f9 fb5c 	bl	800d754 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	4a22      	ldr	r2, [pc, #136]	@ (8014128 <HAL_UART_MspInit+0x260>)
 80140a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80140a2:	4b21      	ldr	r3, [pc, #132]	@ (8014128 <HAL_UART_MspInit+0x260>)
 80140a4:	687a      	ldr	r2, [r7, #4]
 80140a6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80140a8:	4b21      	ldr	r3, [pc, #132]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140aa:	4a22      	ldr	r2, [pc, #136]	@ (8014134 <HAL_UART_MspInit+0x26c>)
 80140ac:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 80140ae:	4b20      	ldr	r3, [pc, #128]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140b0:	220c      	movs	r2, #12
 80140b2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80140b4:	4b1e      	ldr	r3, [pc, #120]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140b6:	2210      	movs	r2, #16
 80140b8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80140ba:	4b1d      	ldr	r3, [pc, #116]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140bc:	2200      	movs	r2, #0
 80140be:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80140c0:	4b1b      	ldr	r3, [pc, #108]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140c2:	2280      	movs	r2, #128	@ 0x80
 80140c4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80140c6:	4b1a      	ldr	r3, [pc, #104]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140c8:	2200      	movs	r2, #0
 80140ca:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80140cc:	4b18      	ldr	r3, [pc, #96]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140ce:	2200      	movs	r2, #0
 80140d0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80140d2:	4b17      	ldr	r3, [pc, #92]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140d4:	2200      	movs	r2, #0
 80140d6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80140d8:	4b15      	ldr	r3, [pc, #84]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140da:	2200      	movs	r2, #0
 80140dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80140de:	4b14      	ldr	r3, [pc, #80]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140e0:	0018      	movs	r0, r3
 80140e2:	f001 fad1 	bl	8015688 <HAL_DMA_Init>
 80140e6:	1e03      	subs	r3, r0, #0
 80140e8:	d001      	beq.n	80140ee <HAL_UART_MspInit+0x226>
      Error_Handler();
 80140ea:	f7f9 fb33 	bl	800d754 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	4a0f      	ldr	r2, [pc, #60]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140f2:	671a      	str	r2, [r3, #112]	@ 0x70
 80140f4:	4b0e      	ldr	r3, [pc, #56]	@ (8014130 <HAL_UART_MspInit+0x268>)
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80140fa:	2200      	movs	r2, #0
 80140fc:	2100      	movs	r1, #0
 80140fe:	200e      	movs	r0, #14
 8014100:	f001 fa8c 	bl	801561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8014104:	200e      	movs	r0, #14
 8014106:	f001 fa9e 	bl	8015646 <HAL_NVIC_EnableIRQ>
}
 801410a:	46c0      	nop			@ (mov r8, r8)
 801410c:	46bd      	mov	sp, r7
 801410e:	b00d      	add	sp, #52	@ 0x34
 8014110:	bd90      	pop	{r4, r7, pc}
 8014112:	46c0      	nop			@ (mov r8, r8)
 8014114:	40004800 	.word	0x40004800
 8014118:	40021000 	.word	0x40021000
 801411c:	50000800 	.word	0x50000800
 8014120:	40013800 	.word	0x40013800
 8014124:	40004c00 	.word	0x40004c00
 8014128:	2000246c 	.word	0x2000246c
 801412c:	4002006c 	.word	0x4002006c
 8014130:	200024b4 	.word	0x200024b4
 8014134:	40020080 	.word	0x40020080

08014138 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 192

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8014138:	b580      	push	{r7, lr}
 801413a:	b086      	sub	sp, #24
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8014140:	f000 fdc8 	bl	8014cd4 <HAL_GetTick>
 8014144:	0003      	movs	r3, r0
 8014146:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8014148:	4b1c      	ldr	r3, [pc, #112]	@ (80141bc <TimestampIsReached+0x84>)
 801414a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 801414c:	697a      	ldr	r2, [r7, #20]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	429a      	cmp	r2, r3
 8014152:	d307      	bcc.n	8014164 <TimestampIsReached+0x2c>
 8014154:	697a      	ldr	r2, [r7, #20]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	1ad3      	subs	r3, r2, r3
 801415a:	693a      	ldr	r2, [r7, #16]
 801415c:	429a      	cmp	r2, r3
 801415e:	d901      	bls.n	8014164 <TimestampIsReached+0x2c>
 8014160:	2201      	movs	r2, #1
 8014162:	e000      	b.n	8014166 <TimestampIsReached+0x2e>
 8014164:	2200      	movs	r2, #0
 8014166:	230f      	movs	r3, #15
 8014168:	18fb      	adds	r3, r7, r3
 801416a:	701a      	strb	r2, [r3, #0]
 801416c:	781a      	ldrb	r2, [r3, #0]
 801416e:	2101      	movs	r1, #1
 8014170:	400a      	ands	r2, r1
 8014172:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8014174:	697a      	ldr	r2, [r7, #20]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	429a      	cmp	r2, r3
 801417a:	d207      	bcs.n	801418c <TimestampIsReached+0x54>
 801417c:	687a      	ldr	r2, [r7, #4]
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	1ad3      	subs	r3, r2, r3
 8014182:	693a      	ldr	r2, [r7, #16]
 8014184:	429a      	cmp	r2, r3
 8014186:	d201      	bcs.n	801418c <TimestampIsReached+0x54>
 8014188:	2201      	movs	r2, #1
 801418a:	e000      	b.n	801418e <TimestampIsReached+0x56>
 801418c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 801418e:	200e      	movs	r0, #14
 8014190:	183b      	adds	r3, r7, r0
 8014192:	701a      	strb	r2, [r3, #0]
 8014194:	781a      	ldrb	r2, [r3, #0]
 8014196:	2101      	movs	r1, #1
 8014198:	400a      	ands	r2, r1
 801419a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 801419c:	230f      	movs	r3, #15
 801419e:	18fb      	adds	r3, r7, r3
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d103      	bne.n	80141ae <TimestampIsReached+0x76>
 80141a6:	183b      	adds	r3, r7, r0
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d001      	beq.n	80141b2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 80141ae:	2301      	movs	r3, #1
 80141b0:	e000      	b.n	80141b4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80141b2:	2300      	movs	r3, #0
}
 80141b4:	0018      	movs	r0, r3
 80141b6:	46bd      	mov	sp, r7
 80141b8:	b006      	add	sp, #24
 80141ba:	bd80      	pop	{r7, pc}
 80141bc:	7fffffff 	.word	0x7fffffff

080141c0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80141c8:	f000 fd84 	bl	8014cd4 <HAL_GetTick>
 80141cc:	0002      	movs	r2, r0
 80141ce:	4904      	ldr	r1, [pc, #16]	@ (80141e0 <AddTimestamp+0x20>)
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	0018      	movs	r0, r3
 80141d4:	f012 f9d4 	bl	8026580 <siprintf>
}
 80141d8:	46c0      	nop			@ (mov r8, r8)
 80141da:	46bd      	mov	sp, r7
 80141dc:	b002      	add	sp, #8
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	0802e4a4 	.word	0x0802e4a4

080141e4 <CreateLine>:


void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80141e4:	b40c      	push	{r2, r3}
 80141e6:	b5b0      	push	{r4, r5, r7, lr}
 80141e8:	b0b4      	sub	sp, #208	@ 0xd0
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	0002      	movs	r2, r0
 80141ee:	6039      	str	r1, [r7, #0]
 80141f0:	1dfb      	adds	r3, r7, #7
 80141f2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80141f4:	4b2a      	ldr	r3, [pc, #168]	@ (80142a0 <CreateLine+0xbc>)
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	1dfa      	adds	r2, r7, #7
 80141fa:	7812      	ldrb	r2, [r2, #0]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d848      	bhi.n	8014292 <CreateLine+0xae>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8014200:	683a      	ldr	r2, [r7, #0]
 8014202:	4928      	ldr	r1, [pc, #160]	@ (80142a4 <CreateLine+0xc0>)
 8014204:	240c      	movs	r4, #12
 8014206:	193b      	adds	r3, r7, r4
 8014208:	0018      	movs	r0, r3
 801420a:	f012 f9b9 	bl	8026580 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 801420e:	4b24      	ldr	r3, [pc, #144]	@ (80142a0 <CreateLine+0xbc>)
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	2b01      	cmp	r3, #1
 8014214:	d909      	bls.n	801422a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8014216:	193b      	adds	r3, r7, r4
 8014218:	0018      	movs	r0, r3
 801421a:	f7eb ffa7 	bl	800016c <strlen>
 801421e:	0002      	movs	r2, r0
 8014220:	193b      	adds	r3, r7, r4
 8014222:	189b      	adds	r3, r3, r2
 8014224:	0018      	movs	r0, r3
 8014226:	f7ff ffcb 	bl	80141c0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 801422a:	240c      	movs	r4, #12
 801422c:	193b      	adds	r3, r7, r4
 801422e:	0018      	movs	r0, r3
 8014230:	f7eb ff9c 	bl	800016c <strlen>
 8014234:	0003      	movs	r3, r0
 8014236:	21cc      	movs	r1, #204	@ 0xcc
 8014238:	187a      	adds	r2, r7, r1
 801423a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 801423c:	23dc      	movs	r3, #220	@ 0xdc
 801423e:	2508      	movs	r5, #8
 8014240:	195b      	adds	r3, r3, r5
 8014242:	19db      	adds	r3, r3, r7
 8014244:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset - 2, format, args);
 8014246:	193a      	adds	r2, r7, r4
 8014248:	187b      	adds	r3, r7, r1
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	18d0      	adds	r0, r2, r3
 801424e:	187b      	adds	r3, r7, r1
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	22be      	movs	r2, #190	@ 0xbe
 8014254:	1ad3      	subs	r3, r2, r3
 8014256:	0019      	movs	r1, r3
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	22d8      	movs	r2, #216	@ 0xd8
 801425c:	1952      	adds	r2, r2, r5
 801425e:	19d2      	adds	r2, r2, r7
 8014260:	6812      	ldr	r2, [r2, #0]
 8014262:	f012 fa29 	bl	80266b8 <vsniprintf>
  va_end(args);

  if (usblog && Check_USB_PowerOn()){
 8014266:	4b10      	ldr	r3, [pc, #64]	@ (80142a8 <CreateLine+0xc4>)
 8014268:	781b      	ldrb	r3, [r3, #0]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d009      	beq.n	8014282 <CreateLine+0x9e>
 801426e:	f7f5 fd5b 	bl	8009d28 <Check_USB_PowerOn>
 8014272:	1e03      	subs	r3, r0, #0
 8014274:	d005      	beq.n	8014282 <CreateLine+0x9e>
    printf_USB("%s\r\n", textBuffer);
 8014276:	193a      	adds	r2, r7, r4
 8014278:	4b0c      	ldr	r3, [pc, #48]	@ (80142ac <CreateLine+0xc8>)
 801427a:	0011      	movs	r1, r2
 801427c:	0018      	movs	r0, r3
 801427e:	f7f4 fc3f 	bl	8008b00 <printf_USB>
      printf_USB("%s\r\n", textBuffer);
    }
*/
  }
  // Print the final formatted message to serial
  printf("%s\r\n", textBuffer);
 8014282:	230c      	movs	r3, #12
 8014284:	18fa      	adds	r2, r7, r3
 8014286:	4b09      	ldr	r3, [pc, #36]	@ (80142ac <CreateLine+0xc8>)
 8014288:	0011      	movs	r1, r2
 801428a:	0018      	movs	r0, r3
 801428c:	f012 f908 	bl	80264a0 <iprintf>
 8014290:	e000      	b.n	8014294 <CreateLine+0xb0>
    return;
 8014292:	46c0      	nop			@ (mov r8, r8)
}
 8014294:	46bd      	mov	sp, r7
 8014296:	b034      	add	sp, #208	@ 0xd0
 8014298:	bcb0      	pop	{r4, r5, r7}
 801429a:	bc08      	pop	{r3}
 801429c:	b002      	add	sp, #8
 801429e:	4718      	bx	r3
 80142a0:	200000f0 	.word	0x200000f0
 80142a4:	0802e4b0 	.word	0x0802e4b0
 80142a8:	20001113 	.word	0x20001113
 80142ac:	0802e4b4 	.word	0x0802e4b4

080142b0 <_write>:

int _write(int fd, void *buf, size_t count) {
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	60f8      	str	r0, [r7, #12]
 80142b8:	60b9      	str	r1, [r7, #8]
 80142ba:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	b29a      	uxth	r2, r3
 80142c0:	68b9      	ldr	r1, [r7, #8]
 80142c2:	4804      	ldr	r0, [pc, #16]	@ (80142d4 <_write+0x24>)
 80142c4:	2364      	movs	r3, #100	@ 0x64
 80142c6:	f009 fa5b 	bl	801d780 <HAL_UART_Transmit>
  return count;
 80142ca:	687b      	ldr	r3, [r7, #4]
}
 80142cc:	0018      	movs	r0, r3
 80142ce:	46bd      	mov	sp, r7
 80142d0:	b004      	add	sp, #16
 80142d2:	bd80      	pop	{r7, pc}
 80142d4:	200022fc 	.word	0x200022fc

080142d8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	0002      	movs	r2, r0
 80142e0:	1dfb      	adds	r3, r7, #7
 80142e2:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 80142e4:	4b03      	ldr	r3, [pc, #12]	@ (80142f4 <SetVerboseLevel+0x1c>)
 80142e6:	1dfa      	adds	r2, r7, #7
 80142e8:	7812      	ldrb	r2, [r2, #0]
 80142ea:	701a      	strb	r2, [r3, #0]
}
 80142ec:	46c0      	nop			@ (mov r8, r8)
 80142ee:	46bd      	mov	sp, r7
 80142f0:	b002      	add	sp, #8
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	200000f0 	.word	0x200000f0

080142f8 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 80142f8:	b580      	push	{r7, lr}
 80142fa:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 80142fc:	4b02      	ldr	r3, [pc, #8]	@ (8014308 <GetVerboseLevel+0x10>)
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	0018      	movs	r0, r3
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	46c0      	nop			@ (mov r8, r8)
 8014308:	200000f0 	.word	0x200000f0

0801430c <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 801430c:	b580      	push	{r7, lr}
 801430e:	b08c      	sub	sp, #48	@ 0x30
 8014310:	af00      	add	r7, sp, #0
  char msgout[41];
  sprintf(msgout,"Build on: %s at %s", __DATE__, __TIME__);
 8014312:	4b1e      	ldr	r3, [pc, #120]	@ (801438c <BinaryReleaseInfo+0x80>)
 8014314:	4a1e      	ldr	r2, [pc, #120]	@ (8014390 <BinaryReleaseInfo+0x84>)
 8014316:	491f      	ldr	r1, [pc, #124]	@ (8014394 <BinaryReleaseInfo+0x88>)
 8014318:	1d38      	adds	r0, r7, #4
 801431a:	f012 f931 	bl	8026580 <siprintf>
  if (!usblog) {
 801431e:	4b1e      	ldr	r3, [pc, #120]	@ (8014398 <BinaryReleaseInfo+0x8c>)
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	2201      	movs	r2, #1
 8014324:	4053      	eors	r3, r2
 8014326:	b2db      	uxtb	r3, r3
 8014328:	2b00      	cmp	r3, #0
 801432a:	d005      	beq.n	8014338 <BinaryReleaseInfo+0x2c>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 801432c:	1d3a      	adds	r2, r7, #4
 801432e:	4b1b      	ldr	r3, [pc, #108]	@ (801439c <BinaryReleaseInfo+0x90>)
 8014330:	0011      	movs	r1, r2
 8014332:	0018      	movs	r0, r3
 8014334:	f7f4 fbe4 	bl	8008b00 <printf_USB>
  }
  Info(msgout);
 8014338:	1d3a      	adds	r2, r7, #4
 801433a:	4b19      	ldr	r3, [pc, #100]	@ (80143a0 <BinaryReleaseInfo+0x94>)
 801433c:	0019      	movs	r1, r3
 801433e:	2002      	movs	r0, #2
 8014340:	f7ff ff50 	bl	80141e4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8014344:	4b17      	ldr	r3, [pc, #92]	@ (80143a4 <BinaryReleaseInfo+0x98>)
 8014346:	4a18      	ldr	r2, [pc, #96]	@ (80143a8 <BinaryReleaseInfo+0x9c>)
 8014348:	4915      	ldr	r1, [pc, #84]	@ (80143a0 <BinaryReleaseInfo+0x94>)
 801434a:	2002      	movs	r0, #2
 801434c:	f7ff ff4a 	bl	80141e4 <CreateLine>
#ifdef DEBUG
  sprintf(msgout,"Software version: %s, Debug build", SRC_VERSION);
 8014350:	4a16      	ldr	r2, [pc, #88]	@ (80143ac <BinaryReleaseInfo+0xa0>)
 8014352:	4917      	ldr	r1, [pc, #92]	@ (80143b0 <BinaryReleaseInfo+0xa4>)
 8014354:	1d3b      	adds	r3, r7, #4
 8014356:	0018      	movs	r0, r3
 8014358:	f012 f912 	bl	8026580 <siprintf>
#else
  sprintf(msgout,"Software version: %s, Release build", SRC_VERSION);
#endif
  if (!usblog) {
 801435c:	4b0e      	ldr	r3, [pc, #56]	@ (8014398 <BinaryReleaseInfo+0x8c>)
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	2201      	movs	r2, #1
 8014362:	4053      	eors	r3, r2
 8014364:	b2db      	uxtb	r3, r3
 8014366:	2b00      	cmp	r3, #0
 8014368:	d005      	beq.n	8014376 <BinaryReleaseInfo+0x6a>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 801436a:	1d3a      	adds	r2, r7, #4
 801436c:	4b0b      	ldr	r3, [pc, #44]	@ (801439c <BinaryReleaseInfo+0x90>)
 801436e:	0011      	movs	r1, r2
 8014370:	0018      	movs	r0, r3
 8014372:	f7f4 fbc5 	bl	8008b00 <printf_USB>
  }
  Info(msgout);
 8014376:	1d3a      	adds	r2, r7, #4
 8014378:	4b09      	ldr	r3, [pc, #36]	@ (80143a0 <BinaryReleaseInfo+0x94>)
 801437a:	0019      	movs	r1, r3
 801437c:	2002      	movs	r0, #2
 801437e:	f7ff ff31 	bl	80141e4 <CreateLine>
}
 8014382:	46c0      	nop			@ (mov r8, r8)
 8014384:	46bd      	mov	sp, r7
 8014386:	b00c      	add	sp, #48	@ 0x30
 8014388:	bd80      	pop	{r7, pc}
 801438a:	46c0      	nop			@ (mov r8, r8)
 801438c:	0802e4bc 	.word	0x0802e4bc
 8014390:	0802e4c8 	.word	0x0802e4c8
 8014394:	0802e4d4 	.word	0x0802e4d4
 8014398:	20001113 	.word	0x20001113
 801439c:	0802e4b4 	.word	0x0802e4b4
 80143a0:	0802e4e8 	.word	0x0802e4e8
 80143a4:	0802e4ec 	.word	0x0802e4ec
 80143a8:	0802e4f8 	.word	0x0802e4f8
 80143ac:	0802e500 	.word	0x0802e500
 80143b0:	0802e508 	.word	0x0802e508

080143b4 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b086      	sub	sp, #24
 80143b8:	af02      	add	r7, sp, #8
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	607a      	str	r2, [r7, #4]
    Error("Error in %s at line %lu in file: %s\r\n", func, line, file);
 80143c0:	68f8      	ldr	r0, [r7, #12]
 80143c2:	4a07      	ldr	r2, [pc, #28]	@ (80143e0 <errorHandler+0x2c>)
 80143c4:	4907      	ldr	r1, [pc, #28]	@ (80143e4 <errorHandler+0x30>)
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	9301      	str	r3, [sp, #4]
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	9300      	str	r3, [sp, #0]
 80143ce:	0003      	movs	r3, r0
 80143d0:	2001      	movs	r0, #1
 80143d2:	f7ff ff07 	bl	80141e4 <CreateLine>
//    while (true)
//    {
//    }
}
 80143d6:	46c0      	nop			@ (mov r8, r8)
 80143d8:	46bd      	mov	sp, r7
 80143da:	b004      	add	sp, #16
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	46c0      	nop			@ (mov r8, r8)
 80143e0:	0802e52c 	.word	0x0802e52c
 80143e4:	0802e554 	.word	0x0802e554

080143e8 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80143e8:	b590      	push	{r4, r7, lr}
 80143ea:	b083      	sub	sp, #12
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6039      	str	r1, [r7, #0]
 80143f0:	0011      	movs	r1, r2
 80143f2:	1dfb      	adds	r3, r7, #7
 80143f4:	1c02      	adds	r2, r0, #0
 80143f6:	701a      	strb	r2, [r3, #0]
 80143f8:	1dbb      	adds	r3, r7, #6
 80143fa:	1c0a      	adds	r2, r1, #0
 80143fc:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80143fe:	4b0a      	ldr	r3, [pc, #40]	@ (8014428 <ReadRegister+0x40>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d00a      	beq.n	801441c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8014406:	4b08      	ldr	r3, [pc, #32]	@ (8014428 <ReadRegister+0x40>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	1dba      	adds	r2, r7, #6
 801440c:	7814      	ldrb	r4, [r2, #0]
 801440e:	6839      	ldr	r1, [r7, #0]
 8014410:	1dfa      	adds	r2, r7, #7
 8014412:	7810      	ldrb	r0, [r2, #0]
 8014414:	0022      	movs	r2, r4
 8014416:	4798      	blx	r3
 8014418:	0003      	movs	r3, r0
 801441a:	e000      	b.n	801441e <ReadRegister+0x36>
	}
	return false;
 801441c:	2300      	movs	r3, #0
}
 801441e:	0018      	movs	r0, r3
 8014420:	46bd      	mov	sp, r7
 8014422:	b003      	add	sp, #12
 8014424:	bd90      	pop	{r4, r7, pc}
 8014426:	46c0      	nop			@ (mov r8, r8)
 8014428:	20002504 	.word	0x20002504

0801442c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 801442c:	b590      	push	{r4, r7, lr}
 801442e:	b083      	sub	sp, #12
 8014430:	af00      	add	r7, sp, #0
 8014432:	6039      	str	r1, [r7, #0]
 8014434:	0011      	movs	r1, r2
 8014436:	1dfb      	adds	r3, r7, #7
 8014438:	1c02      	adds	r2, r0, #0
 801443a:	701a      	strb	r2, [r3, #0]
 801443c:	1dbb      	adds	r3, r7, #6
 801443e:	1c0a      	adds	r2, r1, #0
 8014440:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8014442:	4b0a      	ldr	r3, [pc, #40]	@ (801446c <WriteRegister+0x40>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d00a      	beq.n	8014460 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 801444a:	4b08      	ldr	r3, [pc, #32]	@ (801446c <WriteRegister+0x40>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	1dba      	adds	r2, r7, #6
 8014450:	7814      	ldrb	r4, [r2, #0]
 8014452:	6839      	ldr	r1, [r7, #0]
 8014454:	1dfa      	adds	r2, r7, #7
 8014456:	7810      	ldrb	r0, [r2, #0]
 8014458:	0022      	movs	r2, r4
 801445a:	4798      	blx	r3
 801445c:	0003      	movs	r3, r0
 801445e:	e000      	b.n	8014462 <WriteRegister+0x36>
  }
  return false;
 8014460:	2300      	movs	r3, #0
}
 8014462:	0018      	movs	r0, r3
 8014464:	46bd      	mov	sp, r7
 8014466:	b003      	add	sp, #12
 8014468:	bd90      	pop	{r4, r7, pc}
 801446a:	46c0      	nop			@ (mov r8, r8)
 801446c:	20002508 	.word	0x20002508

08014470 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	000a      	movs	r2, r1
 801447a:	1cfb      	adds	r3, r7, #3
 801447c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 801447e:	230f      	movs	r3, #15
 8014480:	18fb      	adds	r3, r7, r3
 8014482:	22ff      	movs	r2, #255	@ 0xff
 8014484:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8014486:	230e      	movs	r3, #14
 8014488:	18fb      	adds	r3, r7, r3
 801448a:	2200      	movs	r2, #0
 801448c:	701a      	strb	r2, [r3, #0]
 801448e:	e038      	b.n	8014502 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8014490:	230e      	movs	r3, #14
 8014492:	18fb      	adds	r3, r7, r3
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	687a      	ldr	r2, [r7, #4]
 8014498:	18d3      	adds	r3, r2, r3
 801449a:	7819      	ldrb	r1, [r3, #0]
 801449c:	220f      	movs	r2, #15
 801449e:	18bb      	adds	r3, r7, r2
 80144a0:	18ba      	adds	r2, r7, r2
 80144a2:	7812      	ldrb	r2, [r2, #0]
 80144a4:	404a      	eors	r2, r1
 80144a6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80144a8:	230d      	movs	r3, #13
 80144aa:	18fb      	adds	r3, r7, r3
 80144ac:	2200      	movs	r2, #0
 80144ae:	701a      	strb	r2, [r3, #0]
 80144b0:	e01c      	b.n	80144ec <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80144b2:	210f      	movs	r1, #15
 80144b4:	187b      	adds	r3, r7, r1
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	b25b      	sxtb	r3, r3
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	da0a      	bge.n	80144d4 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80144be:	187b      	adds	r3, r7, r1
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	b25b      	sxtb	r3, r3
 80144c4:	18db      	adds	r3, r3, r3
 80144c6:	b25b      	sxtb	r3, r3
 80144c8:	2231      	movs	r2, #49	@ 0x31
 80144ca:	4053      	eors	r3, r2
 80144cc:	b25a      	sxtb	r2, r3
 80144ce:	187b      	adds	r3, r7, r1
 80144d0:	701a      	strb	r2, [r3, #0]
 80144d2:	e005      	b.n	80144e0 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 80144d4:	230f      	movs	r3, #15
 80144d6:	18fa      	adds	r2, r7, r3
 80144d8:	18fb      	adds	r3, r7, r3
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	18db      	adds	r3, r3, r3
 80144de:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80144e0:	210d      	movs	r1, #13
 80144e2:	187b      	adds	r3, r7, r1
 80144e4:	781a      	ldrb	r2, [r3, #0]
 80144e6:	187b      	adds	r3, r7, r1
 80144e8:	3201      	adds	r2, #1
 80144ea:	701a      	strb	r2, [r3, #0]
 80144ec:	230d      	movs	r3, #13
 80144ee:	18fb      	adds	r3, r7, r3
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	2b07      	cmp	r3, #7
 80144f4:	d9dd      	bls.n	80144b2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80144f6:	210e      	movs	r1, #14
 80144f8:	187b      	adds	r3, r7, r1
 80144fa:	781a      	ldrb	r2, [r3, #0]
 80144fc:	187b      	adds	r3, r7, r1
 80144fe:	3201      	adds	r2, #1
 8014500:	701a      	strb	r2, [r3, #0]
 8014502:	230e      	movs	r3, #14
 8014504:	18fa      	adds	r2, r7, r3
 8014506:	1cfb      	adds	r3, r7, #3
 8014508:	7812      	ldrb	r2, [r2, #0]
 801450a:	781b      	ldrb	r3, [r3, #0]
 801450c:	429a      	cmp	r2, r3
 801450e:	d3bf      	bcc.n	8014490 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8014510:	230f      	movs	r3, #15
 8014512:	18fb      	adds	r3, r7, r3
 8014514:	781b      	ldrb	r3, [r3, #0]
}
 8014516:	0018      	movs	r0, r3
 8014518:	46bd      	mov	sp, r7
 801451a:	b004      	add	sp, #16
 801451c:	bd80      	pop	{r7, pc}
	...

08014520 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8014520:	b5b0      	push	{r4, r5, r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	1c18      	adds	r0, r3, #0
 8014530:	f7ef f9b0 	bl	8003894 <__aeabi_f2d>
 8014534:	4a2e      	ldr	r2, [pc, #184]	@ (80145f0 <HIDS_DewPointCalculation+0xd0>)
 8014536:	4b2f      	ldr	r3, [pc, #188]	@ (80145f4 <HIDS_DewPointCalculation+0xd4>)
 8014538:	f7ee fa0c 	bl	8002954 <__aeabi_dmul>
 801453c:	0002      	movs	r2, r0
 801453e:	000b      	movs	r3, r1
 8014540:	0014      	movs	r4, r2
 8014542:	001d      	movs	r5, r3
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	1c18      	adds	r0, r3, #0
 801454a:	f7ef f9a3 	bl	8003894 <__aeabi_f2d>
 801454e:	4a2a      	ldr	r2, [pc, #168]	@ (80145f8 <HIDS_DewPointCalculation+0xd8>)
 8014550:	4b2a      	ldr	r3, [pc, #168]	@ (80145fc <HIDS_DewPointCalculation+0xdc>)
 8014552:	f7ed f9ff 	bl	8001954 <__aeabi_dadd>
 8014556:	0002      	movs	r2, r0
 8014558:	000b      	movs	r3, r1
 801455a:	0020      	movs	r0, r4
 801455c:	0029      	movs	r1, r5
 801455e:	f7ed fdbf 	bl	80020e0 <__aeabi_ddiv>
 8014562:	0002      	movs	r2, r0
 8014564:	000b      	movs	r3, r1
 8014566:	0014      	movs	r4, r2
 8014568:	001d      	movs	r5, r3
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	1c18      	adds	r0, r3, #0
 8014570:	f7ef f990 	bl	8003894 <__aeabi_f2d>
 8014574:	2200      	movs	r2, #0
 8014576:	4b22      	ldr	r3, [pc, #136]	@ (8014600 <HIDS_DewPointCalculation+0xe0>)
 8014578:	f7ed fdb2 	bl	80020e0 <__aeabi_ddiv>
 801457c:	0002      	movs	r2, r0
 801457e:	000b      	movs	r3, r1
 8014580:	0010      	movs	r0, r2
 8014582:	0019      	movs	r1, r3
 8014584:	f014 fed4 	bl	8029330 <log>
 8014588:	0002      	movs	r2, r0
 801458a:	000b      	movs	r3, r1
 801458c:	0020      	movs	r0, r4
 801458e:	0029      	movs	r1, r5
 8014590:	f7ed f9e0 	bl	8001954 <__aeabi_dadd>
 8014594:	0002      	movs	r2, r0
 8014596:	000b      	movs	r3, r1
 8014598:	0010      	movs	r0, r2
 801459a:	0019      	movs	r1, r3
 801459c:	f7ef f9c2 	bl	8003924 <__aeabi_d2f>
 80145a0:	1c03      	adds	r3, r0, #0
 80145a2:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 80145a4:	68f8      	ldr	r0, [r7, #12]
 80145a6:	f7ef f975 	bl	8003894 <__aeabi_f2d>
 80145aa:	4a13      	ldr	r2, [pc, #76]	@ (80145f8 <HIDS_DewPointCalculation+0xd8>)
 80145ac:	4b13      	ldr	r3, [pc, #76]	@ (80145fc <HIDS_DewPointCalculation+0xdc>)
 80145ae:	f7ee f9d1 	bl	8002954 <__aeabi_dmul>
 80145b2:	0002      	movs	r2, r0
 80145b4:	000b      	movs	r3, r1
 80145b6:	0014      	movs	r4, r2
 80145b8:	001d      	movs	r5, r3
 80145ba:	68f8      	ldr	r0, [r7, #12]
 80145bc:	f7ef f96a 	bl	8003894 <__aeabi_f2d>
 80145c0:	0002      	movs	r2, r0
 80145c2:	000b      	movs	r3, r1
 80145c4:	480a      	ldr	r0, [pc, #40]	@ (80145f0 <HIDS_DewPointCalculation+0xd0>)
 80145c6:	490b      	ldr	r1, [pc, #44]	@ (80145f4 <HIDS_DewPointCalculation+0xd4>)
 80145c8:	f7ee fcaa 	bl	8002f20 <__aeabi_dsub>
 80145cc:	0002      	movs	r2, r0
 80145ce:	000b      	movs	r3, r1
 80145d0:	0020      	movs	r0, r4
 80145d2:	0029      	movs	r1, r5
 80145d4:	f7ed fd84 	bl	80020e0 <__aeabi_ddiv>
 80145d8:	0002      	movs	r2, r0
 80145da:	000b      	movs	r3, r1
 80145dc:	0010      	movs	r0, r2
 80145de:	0019      	movs	r1, r3
 80145e0:	f7ef f9a0 	bl	8003924 <__aeabi_d2f>
 80145e4:	1c03      	adds	r3, r0, #0
}
 80145e6:	1c18      	adds	r0, r3, #0
 80145e8:	46bd      	mov	sp, r7
 80145ea:	b004      	add	sp, #16
 80145ec:	bdb0      	pop	{r4, r5, r7, pc}
 80145ee:	46c0      	nop			@ (mov r8, r8)
 80145f0:	b851eb85 	.word	0xb851eb85
 80145f4:	4031451e 	.word	0x4031451e
 80145f8:	66666666 	.word	0x66666666
 80145fc:	406db666 	.word	0x406db666
 8014600:	40590000 	.word	0x40590000

08014604 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 801460a:	4b0d      	ldr	r3, [pc, #52]	@ (8014640 <HIDS_EnableHeater+0x3c>)
 801460c:	781a      	ldrb	r2, [r3, #0]
 801460e:	1dfb      	adds	r3, r7, #7
 8014610:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 8014612:	1dfb      	adds	r3, r7, #7
 8014614:	2201      	movs	r2, #1
 8014616:	0019      	movs	r1, r3
 8014618:	2044      	movs	r0, #68	@ 0x44
 801461a:	f7ff ff07 	bl	801442c <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 801461e:	1dfb      	adds	r3, r7, #7
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	4a08      	ldr	r2, [pc, #32]	@ (8014644 <HIDS_EnableHeater+0x40>)
 8014624:	4908      	ldr	r1, [pc, #32]	@ (8014648 <HIDS_EnableHeater+0x44>)
 8014626:	2002      	movs	r0, #2
 8014628:	f7ff fddc 	bl	80141e4 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 801462c:	f7f5 ffba 	bl	800a5a4 <getPosixTime>
 8014630:	0002      	movs	r2, r0
 8014632:	4b06      	ldr	r3, [pc, #24]	@ (801464c <HIDS_EnableHeater+0x48>)
 8014634:	601a      	str	r2, [r3, #0]
}
 8014636:	46c0      	nop			@ (mov r8, r8)
 8014638:	46bd      	mov	sp, r7
 801463a:	b002      	add	sp, #8
 801463c:	bd80      	pop	{r7, pc}
 801463e:	46c0      	nop			@ (mov r8, r8)
 8014640:	200000f1 	.word	0x200000f1
 8014644:	0802e558 	.word	0x0802e558
 8014648:	0802e578 	.word	0x0802e578
 801464c:	2000251c 	.word	0x2000251c

08014650 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 801465a:	4b0a      	ldr	r3, [pc, #40]	@ (8014684 <HIDS_Init+0x34>)
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8014660:	4b09      	ldr	r3, [pc, #36]	@ (8014688 <HIDS_Init+0x38>)
 8014662:	683a      	ldr	r2, [r7, #0]
 8014664:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8014666:	4b09      	ldr	r3, [pc, #36]	@ (801468c <HIDS_Init+0x3c>)
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	0018      	movs	r0, r3
 801466c:	f000 f840 	bl	80146f0 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8014670:	4b07      	ldr	r3, [pc, #28]	@ (8014690 <HIDS_Init+0x40>)
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	0018      	movs	r0, r3
 8014676:	f000 f82b 	bl	80146d0 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 801467a:	46c0      	nop			@ (mov r8, r8)
 801467c:	46bd      	mov	sp, r7
 801467e:	b002      	add	sp, #8
 8014680:	bd80      	pop	{r7, pc}
 8014682:	46c0      	nop			@ (mov r8, r8)
 8014684:	20002504 	.word	0x20002504
 8014688:	20002508 	.word	0x20002508
 801468c:	200000f2 	.word	0x200000f2
 8014690:	200000f1 	.word	0x200000f1

08014694 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8014694:	b580      	push	{r7, lr}
 8014696:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8014698:	f000 fb1c 	bl	8014cd4 <HAL_GetTick>
 801469c:	0002      	movs	r2, r0
 801469e:	4b08      	ldr	r3, [pc, #32]	@ (80146c0 <HIDS_StartMeasurement+0x2c>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	18d2      	adds	r2, r2, r3
 80146a4:	4b07      	ldr	r3, [pc, #28]	@ (80146c4 <HIDS_StartMeasurement+0x30>)
 80146a6:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80146a8:	4b07      	ldr	r3, [pc, #28]	@ (80146c8 <HIDS_StartMeasurement+0x34>)
 80146aa:	2201      	movs	r2, #1
 80146ac:	0019      	movs	r1, r3
 80146ae:	2044      	movs	r0, #68	@ 0x44
 80146b0:	f7ff febc 	bl	801442c <WriteRegister>
  MeasurementDone = false;
 80146b4:	4b05      	ldr	r3, [pc, #20]	@ (80146cc <HIDS_StartMeasurement+0x38>)
 80146b6:	2200      	movs	r2, #0
 80146b8:	701a      	strb	r2, [r3, #0]
}
 80146ba:	46c0      	nop			@ (mov r8, r8)
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	200000f8 	.word	0x200000f8
 80146c4:	200000f4 	.word	0x200000f4
 80146c8:	200000f2 	.word	0x200000f2
 80146cc:	20002520 	.word	0x20002520

080146d0 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b082      	sub	sp, #8
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	0002      	movs	r2, r0
 80146d8:	1dfb      	adds	r3, r7, #7
 80146da:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80146dc:	4b03      	ldr	r3, [pc, #12]	@ (80146ec <HIDS_SetHeaterMode+0x1c>)
 80146de:	1dfa      	adds	r2, r7, #7
 80146e0:	7812      	ldrb	r2, [r2, #0]
 80146e2:	701a      	strb	r2, [r3, #0]
}
 80146e4:	46c0      	nop			@ (mov r8, r8)
 80146e6:	46bd      	mov	sp, r7
 80146e8:	b002      	add	sp, #8
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	200000f1 	.word	0x200000f1

080146f0 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	0002      	movs	r2, r0
 80146f8:	1dfb      	adds	r3, r7, #7
 80146fa:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 80146fc:	4b03      	ldr	r3, [pc, #12]	@ (801470c <HIDS_SetMeasurementMode+0x1c>)
 80146fe:	1dfa      	adds	r2, r7, #7
 8014700:	7812      	ldrb	r2, [r2, #0]
 8014702:	701a      	strb	r2, [r3, #0]
}
 8014704:	46c0      	nop			@ (mov r8, r8)
 8014706:	46bd      	mov	sp, r7
 8014708:	b002      	add	sp, #8
 801470a:	bd80      	pop	{r7, pc}
 801470c:	200000f2 	.word	0x200000f2

08014710 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8014718:	f000 fadc 	bl	8014cd4 <HAL_GetTick>
 801471c:	0002      	movs	r2, r0
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	18d2      	adds	r2, r2, r3
 8014722:	4b03      	ldr	r3, [pc, #12]	@ (8014730 <setHIDSTimeStamp+0x20>)
 8014724:	601a      	str	r2, [r3, #0]
}
 8014726:	46c0      	nop			@ (mov r8, r8)
 8014728:	46bd      	mov	sp, r7
 801472a:	b002      	add	sp, #8
 801472c:	bd80      	pop	{r7, pc}
 801472e:	46c0      	nop			@ (mov r8, r8)
 8014730:	20002524 	.word	0x20002524

08014734 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8014734:	b590      	push	{r4, r7, lr}
 8014736:	b085      	sub	sp, #20
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	781a      	ldrb	r2, [r3, #0]
 8014740:	210c      	movs	r1, #12
 8014742:	187b      	adds	r3, r7, r1
 8014744:	701a      	strb	r2, [r3, #0]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	785a      	ldrb	r2, [r3, #1]
 801474a:	187b      	adds	r3, r7, r1
 801474c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 801474e:	240f      	movs	r4, #15
 8014750:	193b      	adds	r3, r7, r4
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	7892      	ldrb	r2, [r2, #2]
 8014756:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8014758:	187b      	adds	r3, r7, r1
 801475a:	2102      	movs	r1, #2
 801475c:	0018      	movs	r0, r3
 801475e:	f7ff fe87 	bl	8014470 <CalculateCRC>
 8014762:	0003      	movs	r3, r0
 8014764:	001a      	movs	r2, r3
 8014766:	193b      	adds	r3, r7, r4
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	4293      	cmp	r3, r2
 801476c:	d007      	beq.n	801477e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 801476e:	4a1a      	ldr	r2, [pc, #104]	@ (80147d8 <CheckCRC+0xa4>)
 8014770:	4b1a      	ldr	r3, [pc, #104]	@ (80147dc <CheckCRC+0xa8>)
 8014772:	0019      	movs	r1, r3
 8014774:	2001      	movs	r0, #1
 8014776:	f7ff fd35 	bl	80141e4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 801477a:	2300      	movs	r3, #0
 801477c:	e027      	b.n	80147ce <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	78da      	ldrb	r2, [r3, #3]
 8014782:	2108      	movs	r1, #8
 8014784:	187b      	adds	r3, r7, r1
 8014786:	701a      	strb	r2, [r3, #0]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	791a      	ldrb	r2, [r3, #4]
 801478c:	187b      	adds	r3, r7, r1
 801478e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8014790:	240e      	movs	r4, #14
 8014792:	193b      	adds	r3, r7, r4
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	7952      	ldrb	r2, [r2, #5]
 8014798:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 801479a:	187b      	adds	r3, r7, r1
 801479c:	2102      	movs	r1, #2
 801479e:	0018      	movs	r0, r3
 80147a0:	f7ff fe66 	bl	8014470 <CalculateCRC>
 80147a4:	0003      	movs	r3, r0
 80147a6:	001a      	movs	r2, r3
 80147a8:	193b      	adds	r3, r7, r4
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	4293      	cmp	r3, r2
 80147ae:	d00d      	beq.n	80147cc <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 80147b0:	4a0b      	ldr	r2, [pc, #44]	@ (80147e0 <CheckCRC+0xac>)
 80147b2:	4b0a      	ldr	r3, [pc, #40]	@ (80147dc <CheckCRC+0xa8>)
 80147b4:	0019      	movs	r1, r3
 80147b6:	2001      	movs	r0, #1
 80147b8:	f7ff fd14 	bl	80141e4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 80147bc:	4a09      	ldr	r2, [pc, #36]	@ (80147e4 <CheckCRC+0xb0>)
 80147be:	4b0a      	ldr	r3, [pc, #40]	@ (80147e8 <CheckCRC+0xb4>)
 80147c0:	2185      	movs	r1, #133	@ 0x85
 80147c2:	0018      	movs	r0, r3
 80147c4:	f7ff fdf6 	bl	80143b4 <errorHandler>
		return false;
 80147c8:	2300      	movs	r3, #0
 80147ca:	e000      	b.n	80147ce <CheckCRC+0x9a>
	}
	return true;
 80147cc:	2301      	movs	r3, #1
}
 80147ce:	0018      	movs	r0, r3
 80147d0:	46bd      	mov	sp, r7
 80147d2:	b005      	add	sp, #20
 80147d4:	bd90      	pop	{r4, r7, pc}
 80147d6:	46c0      	nop			@ (mov r8, r8)
 80147d8:	0802e57c 	.word	0x0802e57c
 80147dc:	0802e5a4 	.word	0x0802e5a4
 80147e0:	0802e5a8 	.word	0x0802e5a8
 80147e4:	0802e5d4 	.word	0x0802e5d4
 80147e8:	0802efbc 	.word	0x0802efbc

080147ec <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b084      	sub	sp, #16
 80147f0:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80147f2:	1dbb      	adds	r3, r7, #6
 80147f4:	2289      	movs	r2, #137	@ 0x89
 80147f6:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80147f8:	1dbb      	adds	r3, r7, #6
 80147fa:	2201      	movs	r2, #1
 80147fc:	0019      	movs	r1, r3
 80147fe:	2044      	movs	r0, #68	@ 0x44
 8014800:	f7ff fe14 	bl	801442c <WriteRegister>
	HAL_Delay(30);
 8014804:	201e      	movs	r0, #30
 8014806:	f000 fa6f 	bl	8014ce8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 801480a:	4b14      	ldr	r3, [pc, #80]	@ (801485c <HIDS_DeviceConnected+0x70>)
 801480c:	2206      	movs	r2, #6
 801480e:	0019      	movs	r1, r3
 8014810:	2044      	movs	r0, #68	@ 0x44
 8014812:	f7ff fde9 	bl	80143e8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8014816:	1dfb      	adds	r3, r7, #7
 8014818:	2200      	movs	r2, #0
 801481a:	701a      	strb	r2, [r3, #0]
 801481c:	e011      	b.n	8014842 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 801481e:	1dfb      	adds	r3, r7, #7
 8014820:	7818      	ldrb	r0, [r3, #0]
 8014822:	1dfb      	adds	r3, r7, #7
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	4a0d      	ldr	r2, [pc, #52]	@ (801485c <HIDS_DeviceConnected+0x70>)
 8014828:	5cd3      	ldrb	r3, [r2, r3]
 801482a:	4a0d      	ldr	r2, [pc, #52]	@ (8014860 <HIDS_DeviceConnected+0x74>)
 801482c:	490d      	ldr	r1, [pc, #52]	@ (8014864 <HIDS_DeviceConnected+0x78>)
 801482e:	9300      	str	r3, [sp, #0]
 8014830:	0003      	movs	r3, r0
 8014832:	2002      	movs	r0, #2
 8014834:	f7ff fcd6 	bl	80141e4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8014838:	1dfb      	adds	r3, r7, #7
 801483a:	781a      	ldrb	r2, [r3, #0]
 801483c:	1dfb      	adds	r3, r7, #7
 801483e:	3201      	adds	r2, #1
 8014840:	701a      	strb	r2, [r3, #0]
 8014842:	1dfb      	adds	r3, r7, #7
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	2b05      	cmp	r3, #5
 8014848:	d9e9      	bls.n	801481e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 801484a:	4b04      	ldr	r3, [pc, #16]	@ (801485c <HIDS_DeviceConnected+0x70>)
 801484c:	0018      	movs	r0, r3
 801484e:	f7ff ff71 	bl	8014734 <CheckCRC>
 8014852:	0003      	movs	r3, r0
}
 8014854:	0018      	movs	r0, r3
 8014856:	46bd      	mov	sp, r7
 8014858:	b002      	add	sp, #8
 801485a:	bd80      	pop	{r7, pc}
 801485c:	2000250c 	.word	0x2000250c
 8014860:	0802e5ec 	.word	0x0802e5ec
 8014864:	0802e578 	.word	0x0802e578

08014868 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8014868:	b580      	push	{r7, lr}
 801486a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 801486c:	4b04      	ldr	r3, [pc, #16]	@ (8014880 <HIDS_MeasurementReady+0x18>)
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	0018      	movs	r0, r3
 8014872:	f7ff fc61 	bl	8014138 <TimestampIsReached>
 8014876:	0003      	movs	r3, r0
}
 8014878:	0018      	movs	r0, r3
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	46c0      	nop			@ (mov r8, r8)
 8014880:	200000f4 	.word	0x200000f4

08014884 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8014884:	b580      	push	{r7, lr}
 8014886:	b084      	sub	sp, #16
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 801488e:	4b41      	ldr	r3, [pc, #260]	@ (8014994 <HIDS_GetMeasurementValues+0x110>)
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d001      	beq.n	801489a <HIDS_GetMeasurementValues+0x16>
 8014896:	2301      	movs	r3, #1
 8014898:	e077      	b.n	801498a <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 801489a:	f7ff ffe5 	bl	8014868 <HIDS_MeasurementReady>
 801489e:	0003      	movs	r3, r0
 80148a0:	001a      	movs	r2, r3
 80148a2:	2301      	movs	r3, #1
 80148a4:	4053      	eors	r3, r2
 80148a6:	b2db      	uxtb	r3, r3
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d001      	beq.n	80148b0 <HIDS_GetMeasurementValues+0x2c>
 80148ac:	2300      	movs	r3, #0
 80148ae:	e06c      	b.n	801498a <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 80148b0:	4b39      	ldr	r3, [pc, #228]	@ (8014998 <HIDS_GetMeasurementValues+0x114>)
 80148b2:	2206      	movs	r2, #6
 80148b4:	0019      	movs	r1, r3
 80148b6:	2044      	movs	r0, #68	@ 0x44
 80148b8:	f7ff fd96 	bl	80143e8 <ReadRegister>
 80148bc:	0003      	movs	r3, r0
 80148be:	001a      	movs	r2, r3
 80148c0:	2301      	movs	r3, #1
 80148c2:	4053      	eors	r3, r2
 80148c4:	b2db      	uxtb	r3, r3
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d005      	beq.n	80148d6 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 80148ca:	4a34      	ldr	r2, [pc, #208]	@ (801499c <HIDS_GetMeasurementValues+0x118>)
 80148cc:	4b34      	ldr	r3, [pc, #208]	@ (80149a0 <HIDS_GetMeasurementValues+0x11c>)
 80148ce:	0019      	movs	r1, r3
 80148d0:	2001      	movs	r0, #1
 80148d2:	f7ff fc87 	bl	80141e4 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 80148d6:	4b30      	ldr	r3, [pc, #192]	@ (8014998 <HIDS_GetMeasurementValues+0x114>)
 80148d8:	0018      	movs	r0, r3
 80148da:	f7ff ff2b 	bl	8014734 <CheckCRC>
 80148de:	0003      	movs	r3, r0
 80148e0:	001a      	movs	r2, r3
 80148e2:	2301      	movs	r3, #1
 80148e4:	4053      	eors	r3, r2
 80148e6:	b2db      	uxtb	r3, r3
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d001      	beq.n	80148f0 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 80148ec:	2300      	movs	r3, #0
 80148ee:	e04c      	b.n	801498a <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 80148f0:	4b29      	ldr	r3, [pc, #164]	@ (8014998 <HIDS_GetMeasurementValues+0x114>)
 80148f2:	781b      	ldrb	r3, [r3, #0]
 80148f4:	021b      	lsls	r3, r3, #8
 80148f6:	4a28      	ldr	r2, [pc, #160]	@ (8014998 <HIDS_GetMeasurementValues+0x114>)
 80148f8:	7852      	ldrb	r2, [r2, #1]
 80148fa:	4313      	orrs	r3, r2
 80148fc:	22af      	movs	r2, #175	@ 0xaf
 80148fe:	4353      	muls	r3, r2
 8014900:	0018      	movs	r0, r3
 8014902:	f7ee ff75 	bl	80037f0 <__aeabi_i2d>
 8014906:	2200      	movs	r2, #0
 8014908:	4b26      	ldr	r3, [pc, #152]	@ (80149a4 <HIDS_GetMeasurementValues+0x120>)
 801490a:	f7ed fbe9 	bl	80020e0 <__aeabi_ddiv>
 801490e:	0002      	movs	r2, r0
 8014910:	000b      	movs	r3, r1
 8014912:	0010      	movs	r0, r2
 8014914:	0019      	movs	r1, r3
 8014916:	f7ef f805 	bl	8003924 <__aeabi_d2f>
 801491a:	1c03      	adds	r3, r0, #0
 801491c:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 801491e:	4922      	ldr	r1, [pc, #136]	@ (80149a8 <HIDS_GetMeasurementValues+0x124>)
 8014920:	68f8      	ldr	r0, [r7, #12]
 8014922:	f7ec fce7 	bl	80012f4 <__aeabi_fsub>
 8014926:	1c03      	adds	r3, r0, #0
 8014928:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 801492a:	4b1b      	ldr	r3, [pc, #108]	@ (8014998 <HIDS_GetMeasurementValues+0x114>)
 801492c:	78db      	ldrb	r3, [r3, #3]
 801492e:	021b      	lsls	r3, r3, #8
 8014930:	4a19      	ldr	r2, [pc, #100]	@ (8014998 <HIDS_GetMeasurementValues+0x114>)
 8014932:	7912      	ldrb	r2, [r2, #4]
 8014934:	431a      	orrs	r2, r3
 8014936:	0013      	movs	r3, r2
 8014938:	015b      	lsls	r3, r3, #5
 801493a:	1a9b      	subs	r3, r3, r2
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	189b      	adds	r3, r3, r2
 8014940:	0018      	movs	r0, r3
 8014942:	f7ee ff55 	bl	80037f0 <__aeabi_i2d>
 8014946:	2200      	movs	r2, #0
 8014948:	4b16      	ldr	r3, [pc, #88]	@ (80149a4 <HIDS_GetMeasurementValues+0x120>)
 801494a:	f7ed fbc9 	bl	80020e0 <__aeabi_ddiv>
 801494e:	0002      	movs	r2, r0
 8014950:	000b      	movs	r3, r1
 8014952:	0010      	movs	r0, r2
 8014954:	0019      	movs	r1, r3
 8014956:	f7ee ffe5 	bl	8003924 <__aeabi_d2f>
 801495a:	1c03      	adds	r3, r0, #0
 801495c:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 801495e:	4913      	ldr	r1, [pc, #76]	@ (80149ac <HIDS_GetMeasurementValues+0x128>)
 8014960:	68b8      	ldr	r0, [r7, #8]
 8014962:	f7ec fcc7 	bl	80012f4 <__aeabi_fsub>
 8014966:	1c03      	adds	r3, r0, #0
 8014968:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	68fa      	ldr	r2, [r7, #12]
 801496e:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	68ba      	ldr	r2, [r7, #8]
 8014974:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8014976:	687a      	ldr	r2, [r7, #4]
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	0011      	movs	r1, r2
 801497c:	0018      	movs	r0, r3
 801497e:	f7fc ff27 	bl	80117d0 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8014982:	4b04      	ldr	r3, [pc, #16]	@ (8014994 <HIDS_GetMeasurementValues+0x110>)
 8014984:	2201      	movs	r2, #1
 8014986:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8014988:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 801498a:	0018      	movs	r0, r3
 801498c:	46bd      	mov	sp, r7
 801498e:	b004      	add	sp, #16
 8014990:	bd80      	pop	{r7, pc}
 8014992:	46c0      	nop			@ (mov r8, r8)
 8014994:	20002520 	.word	0x20002520
 8014998:	20002514 	.word	0x20002514
 801499c:	0802e60c 	.word	0x0802e60c
 80149a0:	0802e5a4 	.word	0x0802e5a4
 80149a4:	40efffe0 	.word	0x40efffe0
 80149a8:	42340000 	.word	0x42340000
 80149ac:	40c00000 	.word	0x40c00000

080149b0 <ResetHIDSresults>:

void ResetHIDSresults() {
 80149b0:	b580      	push	{r7, lr}
 80149b2:	af00      	add	r7, sp, #0
  humid = 0.0;
 80149b4:	4b04      	ldr	r3, [pc, #16]	@ (80149c8 <ResetHIDSresults+0x18>)
 80149b6:	2200      	movs	r2, #0
 80149b8:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 80149ba:	4b04      	ldr	r3, [pc, #16]	@ (80149cc <ResetHIDSresults+0x1c>)
 80149bc:	2200      	movs	r2, #0
 80149be:	601a      	str	r2, [r3, #0]
}
 80149c0:	46c0      	nop			@ (mov r8, r8)
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	46c0      	nop			@ (mov r8, r8)
 80149c8:	200024fc 	.word	0x200024fc
 80149cc:	20002500 	.word	0x20002500

080149d0 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 80149d0:	b5b0      	push	{r4, r5, r7, lr}
 80149d2:	b084      	sub	sp, #16
 80149d4:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 80149d6:	4b69      	ldr	r3, [pc, #420]	@ (8014b7c <HIDS_Upkeep+0x1ac>)
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	2b06      	cmp	r3, #6
 80149dc:	d900      	bls.n	80149e0 <HIDS_Upkeep+0x10>
 80149de:	e0bd      	b.n	8014b5c <HIDS_Upkeep+0x18c>
 80149e0:	009a      	lsls	r2, r3, #2
 80149e2:	4b67      	ldr	r3, [pc, #412]	@ (8014b80 <HIDS_Upkeep+0x1b0>)
 80149e4:	18d3      	adds	r3, r2, r3
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 80149ea:	4a66      	ldr	r2, [pc, #408]	@ (8014b84 <HIDS_Upkeep+0x1b4>)
 80149ec:	4b66      	ldr	r3, [pc, #408]	@ (8014b88 <HIDS_Upkeep+0x1b8>)
 80149ee:	0019      	movs	r1, r3
 80149f0:	2003      	movs	r0, #3
 80149f2:	f7ff fbf7 	bl	80141e4 <CreateLine>
      break;
 80149f6:	e0bc      	b.n	8014b72 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 80149f8:	f7ff ffda 	bl	80149b0 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 80149fc:	4b5f      	ldr	r3, [pc, #380]	@ (8014b7c <HIDS_Upkeep+0x1ac>)
 80149fe:	2201      	movs	r2, #1
 8014a00:	701a      	strb	r2, [r3, #0]
      break;
 8014a02:	e0b6      	b.n	8014b72 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 8014a04:	f7f9 fbd4 	bl	800e1b0 <getSensorLock>
 8014a08:	1e03      	subs	r3, r0, #0
 8014a0a:	d000      	beq.n	8014a0e <HIDS_Upkeep+0x3e>
 8014a0c:	e0aa      	b.n	8014b64 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 8014a0e:	2001      	movs	r0, #1
 8014a10:	f7f9 fbba 	bl	800e188 <setSensorLock>
      SetMeasurementIndicator();
 8014a14:	f7fe f938 	bl	8012c88 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8014a18:	f7ff fe3c 	bl	8014694 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8014a1c:	200a      	movs	r0, #10
 8014a1e:	f000 f963 	bl	8014ce8 <HAL_Delay>
      setSensorLock(FREE);
 8014a22:	2000      	movs	r0, #0
 8014a24:	f7f9 fbb0 	bl	800e188 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8014a28:	4b54      	ldr	r3, [pc, #336]	@ (8014b7c <HIDS_Upkeep+0x1ac>)
 8014a2a:	2202      	movs	r2, #2
 8014a2c:	701a      	strb	r2, [r3, #0]
      break;
 8014a2e:	e0a0      	b.n	8014b72 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8014a30:	f7f9 fbbe 	bl	800e1b0 <getSensorLock>
 8014a34:	1e03      	subs	r3, r0, #0
 8014a36:	d000      	beq.n	8014a3a <HIDS_Upkeep+0x6a>
 8014a38:	e096      	b.n	8014b68 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 8014a3a:	2001      	movs	r0, #1
 8014a3c:	f7f9 fba4 	bl	800e188 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8014a40:	4a52      	ldr	r2, [pc, #328]	@ (8014b8c <HIDS_Upkeep+0x1bc>)
 8014a42:	4b53      	ldr	r3, [pc, #332]	@ (8014b90 <HIDS_Upkeep+0x1c0>)
 8014a44:	0011      	movs	r1, r2
 8014a46:	0018      	movs	r0, r3
 8014a48:	f7ff ff1c 	bl	8014884 <HIDS_GetMeasurementValues>
 8014a4c:	1e03      	subs	r3, r0, #0
 8014a4e:	d002      	beq.n	8014a56 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8014a50:	4b4a      	ldr	r3, [pc, #296]	@ (8014b7c <HIDS_Upkeep+0x1ac>)
 8014a52:	2203      	movs	r2, #3
 8014a54:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8014a56:	200a      	movs	r0, #10
 8014a58:	f000 f946 	bl	8014ce8 <HAL_Delay>
      setSensorLock(FREE);
 8014a5c:	2000      	movs	r0, #0
 8014a5e:	f7f9 fb93 	bl	800e188 <setSensorLock>
      break;
 8014a62:	e086      	b.n	8014b72 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Info("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8014a64:	4b4a      	ldr	r3, [pc, #296]	@ (8014b90 <HIDS_Upkeep+0x1c0>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	1c18      	adds	r0, r3, #0
 8014a6a:	f7ee ff13 	bl	8003894 <__aeabi_f2d>
 8014a6e:	0004      	movs	r4, r0
 8014a70:	000d      	movs	r5, r1
 8014a72:	4b46      	ldr	r3, [pc, #280]	@ (8014b8c <HIDS_Upkeep+0x1bc>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	1c18      	adds	r0, r3, #0
 8014a78:	f7ee ff0c 	bl	8003894 <__aeabi_f2d>
 8014a7c:	0002      	movs	r2, r0
 8014a7e:	000b      	movs	r3, r1
 8014a80:	4844      	ldr	r0, [pc, #272]	@ (8014b94 <HIDS_Upkeep+0x1c4>)
 8014a82:	4945      	ldr	r1, [pc, #276]	@ (8014b98 <HIDS_Upkeep+0x1c8>)
 8014a84:	9202      	str	r2, [sp, #8]
 8014a86:	9303      	str	r3, [sp, #12]
 8014a88:	9400      	str	r4, [sp, #0]
 8014a8a:	9501      	str	r5, [sp, #4]
 8014a8c:	0002      	movs	r2, r0
 8014a8e:	2002      	movs	r0, #2
 8014a90:	f7ff fba8 	bl	80141e4 <CreateLine>
      setHIDS(temp, humid);
 8014a94:	4b3d      	ldr	r3, [pc, #244]	@ (8014b8c <HIDS_Upkeep+0x1bc>)
 8014a96:	681a      	ldr	r2, [r3, #0]
 8014a98:	4b3d      	ldr	r3, [pc, #244]	@ (8014b90 <HIDS_Upkeep+0x1c0>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	1c19      	adds	r1, r3, #0
 8014a9e:	1c10      	adds	r0, r2, #0
 8014aa0:	f7f0 f81e 	bl	8004ae0 <setHIDS>
      ResetMeasurementIndicator();
 8014aa4:	f7fe f908 	bl	8012cb8 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8014aa8:	4b38      	ldr	r3, [pc, #224]	@ (8014b8c <HIDS_Upkeep+0x1bc>)
 8014aaa:	681c      	ldr	r4, [r3, #0]
 8014aac:	4a37      	ldr	r2, [pc, #220]	@ (8014b8c <HIDS_Upkeep+0x1bc>)
 8014aae:	4b38      	ldr	r3, [pc, #224]	@ (8014b90 <HIDS_Upkeep+0x1c0>)
 8014ab0:	0011      	movs	r1, r2
 8014ab2:	0018      	movs	r0, r3
 8014ab4:	f7ff fd34 	bl	8014520 <HIDS_DewPointCalculation>
 8014ab8:	1c03      	adds	r3, r0, #0
 8014aba:	1c19      	adds	r1, r3, #0
 8014abc:	1c20      	adds	r0, r4, #0
 8014abe:	f7ec fc19 	bl	80012f4 <__aeabi_fsub>
 8014ac2:	1c03      	adds	r3, r0, #0
 8014ac4:	21fe      	movs	r1, #254	@ 0xfe
 8014ac6:	0589      	lsls	r1, r1, #22
 8014ac8:	1c18      	adds	r0, r3, #0
 8014aca:	f7eb fd31 	bl	8000530 <__aeabi_fcmplt>
 8014ace:	1e03      	subs	r3, r0, #0
 8014ad0:	d023      	beq.n	8014b1a <HIDS_Upkeep+0x14a>
 8014ad2:	f7f5 fd67 	bl	800a5a4 <getPosixTime>
 8014ad6:	0002      	movs	r2, r0
 8014ad8:	4b30      	ldr	r3, [pc, #192]	@ (8014b9c <HIDS_Upkeep+0x1cc>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	1ad2      	subs	r2, r2, r3
 8014ade:	23e1      	movs	r3, #225	@ 0xe1
 8014ae0:	009b      	lsls	r3, r3, #2
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d919      	bls.n	8014b1a <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 8014ae6:	4a2e      	ldr	r2, [pc, #184]	@ (8014ba0 <HIDS_Upkeep+0x1d0>)
 8014ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8014b98 <HIDS_Upkeep+0x1c8>)
 8014aea:	0019      	movs	r1, r3
 8014aec:	2002      	movs	r0, #2
 8014aee:	f7ff fb79 	bl	80141e4 <CreateLine>
        if (getSensorLock() != FREE) {
 8014af2:	f7f9 fb5d 	bl	800e1b0 <getSensorLock>
 8014af6:	1e03      	subs	r3, r0, #0
 8014af8:	d138      	bne.n	8014b6c <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 8014afa:	f7ff fd83 	bl	8014604 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 8014afe:	200a      	movs	r0, #10
 8014b00:	f000 f8f2 	bl	8014ce8 <HAL_Delay>
        setSensorLock(FREE);
 8014b04:	2000      	movs	r0, #0
 8014b06:	f7f9 fb3f 	bl	800e188 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 8014b0a:	f000 f8e3 	bl	8014cd4 <HAL_GetTick>
 8014b0e:	0003      	movs	r3, r0
 8014b10:	4a24      	ldr	r2, [pc, #144]	@ (8014ba4 <HIDS_Upkeep+0x1d4>)
 8014b12:	189a      	adds	r2, r3, r2
 8014b14:	4b24      	ldr	r3, [pc, #144]	@ (8014ba8 <HIDS_Upkeep+0x1d8>)
 8014b16:	601a      	str	r2, [r3, #0]
 8014b18:	e011      	b.n	8014b3e <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8014b1a:	f000 f8db 	bl	8014cd4 <HAL_GetTick>
 8014b1e:	0004      	movs	r4, r0
 8014b20:	f7f5 f902 	bl	8009d28 <Check_USB_PowerOn>
 8014b24:	1e03      	subs	r3, r0, #0
 8014b26:	d103      	bne.n	8014b30 <HIDS_Upkeep+0x160>
 8014b28:	4b20      	ldr	r3, [pc, #128]	@ (8014bac <HIDS_Upkeep+0x1dc>)
 8014b2a:	781b      	ldrb	r3, [r3, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d001      	beq.n	8014b34 <HIDS_Upkeep+0x164>
 8014b30:	4b1f      	ldr	r3, [pc, #124]	@ (8014bb0 <HIDS_Upkeep+0x1e0>)
 8014b32:	e001      	b.n	8014b38 <HIDS_Upkeep+0x168>
 8014b34:	23fa      	movs	r3, #250	@ 0xfa
 8014b36:	009b      	lsls	r3, r3, #2
 8014b38:	191a      	adds	r2, r3, r4
 8014b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8014ba8 <HIDS_Upkeep+0x1d8>)
 8014b3c:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8014b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8014b7c <HIDS_Upkeep+0x1ac>)
 8014b40:	2206      	movs	r2, #6
 8014b42:	701a      	strb	r2, [r3, #0]
      break;
 8014b44:	e015      	b.n	8014b72 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8014b46:	4b18      	ldr	r3, [pc, #96]	@ (8014ba8 <HIDS_Upkeep+0x1d8>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	0018      	movs	r0, r3
 8014b4c:	f7ff faf4 	bl	8014138 <TimestampIsReached>
 8014b50:	1e03      	subs	r3, r0, #0
 8014b52:	d00d      	beq.n	8014b70 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8014b54:	4b09      	ldr	r3, [pc, #36]	@ (8014b7c <HIDS_Upkeep+0x1ac>)
 8014b56:	2200      	movs	r2, #0
 8014b58:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014b5a:	e009      	b.n	8014b70 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8014b5c:	4b07      	ldr	r3, [pc, #28]	@ (8014b7c <HIDS_Upkeep+0x1ac>)
 8014b5e:	2200      	movs	r2, #0
 8014b60:	701a      	strb	r2, [r3, #0]
      break;
 8014b62:	e006      	b.n	8014b72 <HIDS_Upkeep+0x1a2>
        break;
 8014b64:	46c0      	nop			@ (mov r8, r8)
 8014b66:	e004      	b.n	8014b72 <HIDS_Upkeep+0x1a2>
        break;
 8014b68:	46c0      	nop			@ (mov r8, r8)
 8014b6a:	e002      	b.n	8014b72 <HIDS_Upkeep+0x1a2>
          break;
 8014b6c:	46c0      	nop			@ (mov r8, r8)
 8014b6e:	e000      	b.n	8014b72 <HIDS_Upkeep+0x1a2>
      break;
 8014b70:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8014b72:	4b02      	ldr	r3, [pc, #8]	@ (8014b7c <HIDS_Upkeep+0x1ac>)
 8014b74:	781b      	ldrb	r3, [r3, #0]
}
 8014b76:	0018      	movs	r0, r3
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8014b7c:	20002528 	.word	0x20002528
 8014b80:	0802efa0 	.word	0x0802efa0
 8014b84:	0802e640 	.word	0x0802e640
 8014b88:	0802e674 	.word	0x0802e674
 8014b8c:	20002500 	.word	0x20002500
 8014b90:	200024fc 	.word	0x200024fc
 8014b94:	0802e678 	.word	0x0802e678
 8014b98:	0802e578 	.word	0x0802e578
 8014b9c:	2000251c 	.word	0x2000251c
 8014ba0:	0802e6ac 	.word	0x0802e6ac
 8014ba4:	00002ee0 	.word	0x00002ee0
 8014ba8:	20002524 	.word	0x20002524
 8014bac:	20002166 	.word	0x20002166
 8014bb0:	00002710 	.word	0x00002710

08014bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8014bb4:	480d      	ldr	r0, [pc, #52]	@ (8014bec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8014bb6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8014bb8:	f7fe ff18 	bl	80139ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8014bbc:	480c      	ldr	r0, [pc, #48]	@ (8014bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8014bbe:	490d      	ldr	r1, [pc, #52]	@ (8014bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8014bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8014bf8 <LoopForever+0xe>)
  movs r3, #0
 8014bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014bc4:	e002      	b.n	8014bcc <LoopCopyDataInit>

08014bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014bca:	3304      	adds	r3, #4

08014bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014bd0:	d3f9      	bcc.n	8014bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8014bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8014bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8014c00 <LoopForever+0x16>)
  movs r3, #0
 8014bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014bd8:	e001      	b.n	8014bde <LoopFillZerobss>

08014bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014bdc:	3204      	adds	r2, #4

08014bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014be0:	d3fb      	bcc.n	8014bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8014be2:	f011 febf 	bl	8026964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014be6:	f7f8 f9c1 	bl	800cf6c <main>

08014bea <LoopForever>:

LoopForever:
    b LoopForever
 8014bea:	e7fe      	b.n	8014bea <LoopForever>
   ldr   r0, =_estack
 8014bec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8014bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014bf4:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8014bf8:	0802f988 	.word	0x0802f988
  ldr r2, =_sbss
 8014bfc:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8014c00:	20003930 	.word	0x20003930

08014c04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014c04:	e7fe      	b.n	8014c04 <ADC1_COMP_IRQHandler>
	...

08014c08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b082      	sub	sp, #8
 8014c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8014c0e:	1dfb      	adds	r3, r7, #7
 8014c10:	2200      	movs	r2, #0
 8014c12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8014c14:	4b0b      	ldr	r3, [pc, #44]	@ (8014c44 <HAL_Init+0x3c>)
 8014c16:	681a      	ldr	r2, [r3, #0]
 8014c18:	4b0a      	ldr	r3, [pc, #40]	@ (8014c44 <HAL_Init+0x3c>)
 8014c1a:	2140      	movs	r1, #64	@ 0x40
 8014c1c:	430a      	orrs	r2, r1
 8014c1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014c20:	2003      	movs	r0, #3
 8014c22:	f000 f811 	bl	8014c48 <HAL_InitTick>
 8014c26:	1e03      	subs	r3, r0, #0
 8014c28:	d003      	beq.n	8014c32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8014c2a:	1dfb      	adds	r3, r7, #7
 8014c2c:	2201      	movs	r2, #1
 8014c2e:	701a      	strb	r2, [r3, #0]
 8014c30:	e001      	b.n	8014c36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8014c32:	f7fe fd8f 	bl	8013754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8014c36:	1dfb      	adds	r3, r7, #7
 8014c38:	781b      	ldrb	r3, [r3, #0]
}
 8014c3a:	0018      	movs	r0, r3
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	b002      	add	sp, #8
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	46c0      	nop			@ (mov r8, r8)
 8014c44:	40022000 	.word	0x40022000

08014c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014c48:	b590      	push	{r4, r7, lr}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8014c50:	4b14      	ldr	r3, [pc, #80]	@ (8014ca4 <HAL_InitTick+0x5c>)
 8014c52:	681c      	ldr	r4, [r3, #0]
 8014c54:	4b14      	ldr	r3, [pc, #80]	@ (8014ca8 <HAL_InitTick+0x60>)
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	0019      	movs	r1, r3
 8014c5a:	23fa      	movs	r3, #250	@ 0xfa
 8014c5c:	0098      	lsls	r0, r3, #2
 8014c5e:	f7eb faa1 	bl	80001a4 <__udivsi3>
 8014c62:	0003      	movs	r3, r0
 8014c64:	0019      	movs	r1, r3
 8014c66:	0020      	movs	r0, r4
 8014c68:	f7eb fa9c 	bl	80001a4 <__udivsi3>
 8014c6c:	0003      	movs	r3, r0
 8014c6e:	0018      	movs	r0, r3
 8014c70:	f000 fcfd 	bl	801566e <HAL_SYSTICK_Config>
 8014c74:	1e03      	subs	r3, r0, #0
 8014c76:	d001      	beq.n	8014c7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8014c78:	2301      	movs	r3, #1
 8014c7a:	e00f      	b.n	8014c9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2b03      	cmp	r3, #3
 8014c80:	d80b      	bhi.n	8014c9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8014c82:	6879      	ldr	r1, [r7, #4]
 8014c84:	2301      	movs	r3, #1
 8014c86:	425b      	negs	r3, r3
 8014c88:	2200      	movs	r2, #0
 8014c8a:	0018      	movs	r0, r3
 8014c8c:	f000 fcc6 	bl	801561c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8014c90:	4b06      	ldr	r3, [pc, #24]	@ (8014cac <HAL_InitTick+0x64>)
 8014c92:	687a      	ldr	r2, [r7, #4]
 8014c94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8014c96:	2300      	movs	r3, #0
 8014c98:	e000      	b.n	8014c9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8014c9a:	2301      	movs	r3, #1
}
 8014c9c:	0018      	movs	r0, r3
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	b003      	add	sp, #12
 8014ca2:	bd90      	pop	{r4, r7, pc}
 8014ca4:	200000ec 	.word	0x200000ec
 8014ca8:	20000100 	.word	0x20000100
 8014cac:	200000fc 	.word	0x200000fc

08014cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014cb4:	4b05      	ldr	r3, [pc, #20]	@ (8014ccc <HAL_IncTick+0x1c>)
 8014cb6:	781b      	ldrb	r3, [r3, #0]
 8014cb8:	001a      	movs	r2, r3
 8014cba:	4b05      	ldr	r3, [pc, #20]	@ (8014cd0 <HAL_IncTick+0x20>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	18d2      	adds	r2, r2, r3
 8014cc0:	4b03      	ldr	r3, [pc, #12]	@ (8014cd0 <HAL_IncTick+0x20>)
 8014cc2:	601a      	str	r2, [r3, #0]
}
 8014cc4:	46c0      	nop			@ (mov r8, r8)
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}
 8014cca:	46c0      	nop			@ (mov r8, r8)
 8014ccc:	20000100 	.word	0x20000100
 8014cd0:	2000252c 	.word	0x2000252c

08014cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8014cd8:	4b02      	ldr	r3, [pc, #8]	@ (8014ce4 <HAL_GetTick+0x10>)
 8014cda:	681b      	ldr	r3, [r3, #0]
}
 8014cdc:	0018      	movs	r0, r3
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	46c0      	nop			@ (mov r8, r8)
 8014ce4:	2000252c 	.word	0x2000252c

08014ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b084      	sub	sp, #16
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014cf0:	f7ff fff0 	bl	8014cd4 <HAL_GetTick>
 8014cf4:	0003      	movs	r3, r0
 8014cf6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	3301      	adds	r3, #1
 8014d00:	d005      	beq.n	8014d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014d02:	4b0a      	ldr	r3, [pc, #40]	@ (8014d2c <HAL_Delay+0x44>)
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	001a      	movs	r2, r3
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	189b      	adds	r3, r3, r2
 8014d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014d0e:	46c0      	nop			@ (mov r8, r8)
 8014d10:	f7ff ffe0 	bl	8014cd4 <HAL_GetTick>
 8014d14:	0002      	movs	r2, r0
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	68fa      	ldr	r2, [r7, #12]
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d8f7      	bhi.n	8014d10 <HAL_Delay+0x28>
  {
  }
}
 8014d20:	46c0      	nop			@ (mov r8, r8)
 8014d22:	46c0      	nop			@ (mov r8, r8)
 8014d24:	46bd      	mov	sp, r7
 8014d26:	b004      	add	sp, #16
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	46c0      	nop			@ (mov r8, r8)
 8014d2c:	20000100 	.word	0x20000100

08014d30 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8014d34:	4b04      	ldr	r3, [pc, #16]	@ (8014d48 <HAL_SuspendTick+0x18>)
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	4b03      	ldr	r3, [pc, #12]	@ (8014d48 <HAL_SuspendTick+0x18>)
 8014d3a:	2102      	movs	r1, #2
 8014d3c:	438a      	bics	r2, r1
 8014d3e:	601a      	str	r2, [r3, #0]
}
 8014d40:	46c0      	nop			@ (mov r8, r8)
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	46c0      	nop			@ (mov r8, r8)
 8014d48:	e000e010 	.word	0xe000e010

08014d4c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8014d50:	4b04      	ldr	r3, [pc, #16]	@ (8014d64 <HAL_ResumeTick+0x18>)
 8014d52:	681a      	ldr	r2, [r3, #0]
 8014d54:	4b03      	ldr	r3, [pc, #12]	@ (8014d64 <HAL_ResumeTick+0x18>)
 8014d56:	2102      	movs	r1, #2
 8014d58:	430a      	orrs	r2, r1
 8014d5a:	601a      	str	r2, [r3, #0]
}
 8014d5c:	46c0      	nop			@ (mov r8, r8)
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	46c0      	nop			@ (mov r8, r8)
 8014d64:	e000e010 	.word	0xe000e010

08014d68 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8014d6c:	4b02      	ldr	r3, [pc, #8]	@ (8014d78 <HAL_GetUIDw0+0x10>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
}
 8014d70:	0018      	movs	r0, r3
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	46c0      	nop			@ (mov r8, r8)
 8014d78:	1ff80050 	.word	0x1ff80050

08014d7c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8014d80:	4b02      	ldr	r3, [pc, #8]	@ (8014d8c <HAL_GetUIDw1+0x10>)
 8014d82:	681b      	ldr	r3, [r3, #0]
}
 8014d84:	0018      	movs	r0, r3
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	46c0      	nop			@ (mov r8, r8)
 8014d8c:	1ff80054 	.word	0x1ff80054

08014d90 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8014d94:	4b02      	ldr	r3, [pc, #8]	@ (8014da0 <HAL_GetUIDw2+0x10>)
 8014d96:	681b      	ldr	r3, [r3, #0]
}
 8014d98:	0018      	movs	r0, r3
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}
 8014d9e:	46c0      	nop			@ (mov r8, r8)
 8014da0:	1ff80064 	.word	0x1ff80064

08014da4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b082      	sub	sp, #8
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d101      	bne.n	8014db6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8014db2:	2301      	movs	r3, #1
 8014db4:	e159      	b.n	801506a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d10a      	bne.n	8014dd4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2250      	movs	r2, #80	@ 0x50
 8014dc8:	2100      	movs	r1, #0
 8014dca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	0018      	movs	r0, r3
 8014dd0:	f7f6 f802 	bl	800add8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014dd8:	2210      	movs	r2, #16
 8014dda:	4013      	ands	r3, r2
 8014ddc:	2b10      	cmp	r3, #16
 8014dde:	d005      	beq.n	8014dec <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	689b      	ldr	r3, [r3, #8]
 8014de6:	2204      	movs	r2, #4
 8014de8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014dea:	d00b      	beq.n	8014e04 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014df0:	2210      	movs	r2, #16
 8014df2:	431a      	orrs	r2, r3
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2250      	movs	r2, #80	@ 0x50
 8014dfc:	2100      	movs	r1, #0
 8014dfe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014e00:	2301      	movs	r3, #1
 8014e02:	e132      	b.n	801506a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e08:	4a9a      	ldr	r2, [pc, #616]	@ (8015074 <HAL_ADC_Init+0x2d0>)
 8014e0a:	4013      	ands	r3, r2
 8014e0c:	2202      	movs	r2, #2
 8014e0e:	431a      	orrs	r2, r3
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	689b      	ldr	r3, [r3, #8]
 8014e1a:	2203      	movs	r2, #3
 8014e1c:	4013      	ands	r3, r2
 8014e1e:	2b01      	cmp	r3, #1
 8014e20:	d108      	bne.n	8014e34 <HAL_ADC_Init+0x90>
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2201      	movs	r2, #1
 8014e2a:	4013      	ands	r3, r2
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	d101      	bne.n	8014e34 <HAL_ADC_Init+0x90>
 8014e30:	2301      	movs	r3, #1
 8014e32:	e000      	b.n	8014e36 <HAL_ADC_Init+0x92>
 8014e34:	2300      	movs	r3, #0
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d149      	bne.n	8014ece <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	685a      	ldr	r2, [r3, #4]
 8014e3e:	23c0      	movs	r3, #192	@ 0xc0
 8014e40:	061b      	lsls	r3, r3, #24
 8014e42:	429a      	cmp	r2, r3
 8014e44:	d00b      	beq.n	8014e5e <HAL_ADC_Init+0xba>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	685a      	ldr	r2, [r3, #4]
 8014e4a:	2380      	movs	r3, #128	@ 0x80
 8014e4c:	05db      	lsls	r3, r3, #23
 8014e4e:	429a      	cmp	r2, r3
 8014e50:	d005      	beq.n	8014e5e <HAL_ADC_Init+0xba>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	685a      	ldr	r2, [r3, #4]
 8014e56:	2380      	movs	r3, #128	@ 0x80
 8014e58:	061b      	lsls	r3, r3, #24
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d111      	bne.n	8014e82 <HAL_ADC_Init+0xde>
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	691a      	ldr	r2, [r3, #16]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	0092      	lsls	r2, r2, #2
 8014e6a:	0892      	lsrs	r2, r2, #2
 8014e6c:	611a      	str	r2, [r3, #16]
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	6919      	ldr	r1, [r3, #16]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	685a      	ldr	r2, [r3, #4]
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	430a      	orrs	r2, r1
 8014e7e:	611a      	str	r2, [r3, #16]
 8014e80:	e014      	b.n	8014eac <HAL_ADC_Init+0x108>
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	691a      	ldr	r2, [r3, #16]
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	0092      	lsls	r2, r2, #2
 8014e8e:	0892      	lsrs	r2, r2, #2
 8014e90:	611a      	str	r2, [r3, #16]
 8014e92:	4b79      	ldr	r3, [pc, #484]	@ (8015078 <HAL_ADC_Init+0x2d4>)
 8014e94:	681a      	ldr	r2, [r3, #0]
 8014e96:	4b78      	ldr	r3, [pc, #480]	@ (8015078 <HAL_ADC_Init+0x2d4>)
 8014e98:	4978      	ldr	r1, [pc, #480]	@ (801507c <HAL_ADC_Init+0x2d8>)
 8014e9a:	400a      	ands	r2, r1
 8014e9c:	601a      	str	r2, [r3, #0]
 8014e9e:	4b76      	ldr	r3, [pc, #472]	@ (8015078 <HAL_ADC_Init+0x2d4>)
 8014ea0:	6819      	ldr	r1, [r3, #0]
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	685a      	ldr	r2, [r3, #4]
 8014ea6:	4b74      	ldr	r3, [pc, #464]	@ (8015078 <HAL_ADC_Init+0x2d4>)
 8014ea8:	430a      	orrs	r2, r1
 8014eaa:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	68da      	ldr	r2, [r3, #12]
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	2118      	movs	r1, #24
 8014eb8:	438a      	bics	r2, r1
 8014eba:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	68d9      	ldr	r1, [r3, #12]
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	689a      	ldr	r2, [r3, #8]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	430a      	orrs	r2, r1
 8014ecc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014ece:	4b6a      	ldr	r3, [pc, #424]	@ (8015078 <HAL_ADC_Init+0x2d4>)
 8014ed0:	681a      	ldr	r2, [r3, #0]
 8014ed2:	4b69      	ldr	r3, [pc, #420]	@ (8015078 <HAL_ADC_Init+0x2d4>)
 8014ed4:	496a      	ldr	r1, [pc, #424]	@ (8015080 <HAL_ADC_Init+0x2dc>)
 8014ed6:	400a      	ands	r2, r1
 8014ed8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014eda:	4b67      	ldr	r3, [pc, #412]	@ (8015078 <HAL_ADC_Init+0x2d4>)
 8014edc:	6819      	ldr	r1, [r3, #0]
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ee2:	065a      	lsls	r2, r3, #25
 8014ee4:	4b64      	ldr	r3, [pc, #400]	@ (8015078 <HAL_ADC_Init+0x2d4>)
 8014ee6:	430a      	orrs	r2, r1
 8014ee8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	689a      	ldr	r2, [r3, #8]
 8014ef0:	2380      	movs	r3, #128	@ 0x80
 8014ef2:	055b      	lsls	r3, r3, #21
 8014ef4:	4013      	ands	r3, r2
 8014ef6:	d108      	bne.n	8014f0a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	689a      	ldr	r2, [r3, #8]
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	2180      	movs	r1, #128	@ 0x80
 8014f04:	0549      	lsls	r1, r1, #21
 8014f06:	430a      	orrs	r2, r1
 8014f08:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	68da      	ldr	r2, [r3, #12]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	495b      	ldr	r1, [pc, #364]	@ (8015084 <HAL_ADC_Init+0x2e0>)
 8014f16:	400a      	ands	r2, r1
 8014f18:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	68d9      	ldr	r1, [r3, #12]
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	691b      	ldr	r3, [r3, #16]
 8014f28:	2b02      	cmp	r3, #2
 8014f2a:	d101      	bne.n	8014f30 <HAL_ADC_Init+0x18c>
 8014f2c:	2304      	movs	r3, #4
 8014f2e:	e000      	b.n	8014f32 <HAL_ADC_Init+0x18e>
 8014f30:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014f32:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2020      	movs	r0, #32
 8014f38:	5c1b      	ldrb	r3, [r3, r0]
 8014f3a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014f3c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	202c      	movs	r0, #44	@ 0x2c
 8014f42:	5c1b      	ldrb	r3, [r3, r0]
 8014f44:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014f46:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014f4c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	699b      	ldr	r3, [r3, #24]
 8014f52:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8014f54:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	69db      	ldr	r3, [r3, #28]
 8014f5a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014f5c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	430a      	orrs	r2, r1
 8014f64:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f6a:	23c2      	movs	r3, #194	@ 0xc2
 8014f6c:	33ff      	adds	r3, #255	@ 0xff
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d00b      	beq.n	8014f8a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	68d9      	ldr	r1, [r3, #12]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014f80:	431a      	orrs	r2, r3
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	430a      	orrs	r2, r1
 8014f88:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2221      	movs	r2, #33	@ 0x21
 8014f8e:	5c9b      	ldrb	r3, [r3, r2]
 8014f90:	2b01      	cmp	r3, #1
 8014f92:	d11a      	bne.n	8014fca <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2220      	movs	r2, #32
 8014f98:	5c9b      	ldrb	r3, [r3, r2]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d109      	bne.n	8014fb2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	68da      	ldr	r2, [r3, #12]
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	2180      	movs	r1, #128	@ 0x80
 8014faa:	0249      	lsls	r1, r1, #9
 8014fac:	430a      	orrs	r2, r1
 8014fae:	60da      	str	r2, [r3, #12]
 8014fb0:	e00b      	b.n	8014fca <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fb6:	2220      	movs	r2, #32
 8014fb8:	431a      	orrs	r2, r3
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014fc2:	2201      	movs	r2, #1
 8014fc4:	431a      	orrs	r2, r3
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fce:	2b01      	cmp	r3, #1
 8014fd0:	d11f      	bne.n	8015012 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	691a      	ldr	r2, [r3, #16]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	492a      	ldr	r1, [pc, #168]	@ (8015088 <HAL_ADC_Init+0x2e4>)
 8014fde:	400a      	ands	r2, r1
 8014fe0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	6919      	ldr	r1, [r3, #16]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014ff0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014ff6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	430a      	orrs	r2, r1
 8014ffe:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	691a      	ldr	r2, [r3, #16]
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	2101      	movs	r1, #1
 801500c:	430a      	orrs	r2, r1
 801500e:	611a      	str	r2, [r3, #16]
 8015010:	e00e      	b.n	8015030 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	691b      	ldr	r3, [r3, #16]
 8015018:	2201      	movs	r2, #1
 801501a:	4013      	ands	r3, r2
 801501c:	2b01      	cmp	r3, #1
 801501e:	d107      	bne.n	8015030 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	691a      	ldr	r2, [r3, #16]
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2101      	movs	r1, #1
 801502c:	438a      	bics	r2, r1
 801502e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	695a      	ldr	r2, [r3, #20]
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2107      	movs	r1, #7
 801503c:	438a      	bics	r2, r1
 801503e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	6959      	ldr	r1, [r3, #20]
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	430a      	orrs	r2, r1
 8015050:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2200      	movs	r2, #0
 8015056:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801505c:	2203      	movs	r2, #3
 801505e:	4393      	bics	r3, r2
 8015060:	2201      	movs	r2, #1
 8015062:	431a      	orrs	r2, r3
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8015068:	2300      	movs	r3, #0
}
 801506a:	0018      	movs	r0, r3
 801506c:	46bd      	mov	sp, r7
 801506e:	b002      	add	sp, #8
 8015070:	bd80      	pop	{r7, pc}
 8015072:	46c0      	nop			@ (mov r8, r8)
 8015074:	fffffefd 	.word	0xfffffefd
 8015078:	40012708 	.word	0x40012708
 801507c:	ffc3ffff 	.word	0xffc3ffff
 8015080:	fdffffff 	.word	0xfdffffff
 8015084:	fffe0219 	.word	0xfffe0219
 8015088:	fffffc03 	.word	0xfffffc03

0801508c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 801508c:	b590      	push	{r4, r7, lr}
 801508e:	b085      	sub	sp, #20
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015094:	230f      	movs	r3, #15
 8015096:	18fb      	adds	r3, r7, r3
 8015098:	2200      	movs	r2, #0
 801509a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	689b      	ldr	r3, [r3, #8]
 80150a2:	2204      	movs	r2, #4
 80150a4:	4013      	ands	r3, r2
 80150a6:	d138      	bne.n	801511a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2250      	movs	r2, #80	@ 0x50
 80150ac:	5c9b      	ldrb	r3, [r3, r2]
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	d101      	bne.n	80150b6 <HAL_ADC_Start+0x2a>
 80150b2:	2302      	movs	r3, #2
 80150b4:	e038      	b.n	8015128 <HAL_ADC_Start+0x9c>
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2250      	movs	r2, #80	@ 0x50
 80150ba:	2101      	movs	r1, #1
 80150bc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	69db      	ldr	r3, [r3, #28]
 80150c2:	2b01      	cmp	r3, #1
 80150c4:	d007      	beq.n	80150d6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80150c6:	230f      	movs	r3, #15
 80150c8:	18fc      	adds	r4, r7, r3
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	0018      	movs	r0, r3
 80150ce:	f000 f95f 	bl	8015390 <ADC_Enable>
 80150d2:	0003      	movs	r3, r0
 80150d4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80150d6:	230f      	movs	r3, #15
 80150d8:	18fb      	adds	r3, r7, r3
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d120      	bne.n	8015122 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150e4:	4a12      	ldr	r2, [pc, #72]	@ (8015130 <HAL_ADC_Start+0xa4>)
 80150e6:	4013      	ands	r3, r2
 80150e8:	2280      	movs	r2, #128	@ 0x80
 80150ea:	0052      	lsls	r2, r2, #1
 80150ec:	431a      	orrs	r2, r3
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2200      	movs	r2, #0
 80150f6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2250      	movs	r2, #80	@ 0x50
 80150fc:	2100      	movs	r1, #0
 80150fe:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	221c      	movs	r2, #28
 8015106:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	689a      	ldr	r2, [r3, #8]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	2104      	movs	r1, #4
 8015114:	430a      	orrs	r2, r1
 8015116:	609a      	str	r2, [r3, #8]
 8015118:	e003      	b.n	8015122 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801511a:	230f      	movs	r3, #15
 801511c:	18fb      	adds	r3, r7, r3
 801511e:	2202      	movs	r2, #2
 8015120:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8015122:	230f      	movs	r3, #15
 8015124:	18fb      	adds	r3, r7, r3
 8015126:	781b      	ldrb	r3, [r3, #0]
}
 8015128:	0018      	movs	r0, r3
 801512a:	46bd      	mov	sp, r7
 801512c:	b005      	add	sp, #20
 801512e:	bd90      	pop	{r4, r7, pc}
 8015130:	fffff0fe 	.word	0xfffff0fe

08015134 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801513e:	2300      	movs	r3, #0
 8015140:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8015142:	2300      	movs	r3, #0
 8015144:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	695b      	ldr	r3, [r3, #20]
 801514a:	2b08      	cmp	r3, #8
 801514c:	d102      	bne.n	8015154 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 801514e:	2308      	movs	r3, #8
 8015150:	60fb      	str	r3, [r7, #12]
 8015152:	e014      	b.n	801517e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	2201      	movs	r2, #1
 801515c:	4013      	ands	r3, r2
 801515e:	2b01      	cmp	r3, #1
 8015160:	d10b      	bne.n	801517a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015166:	2220      	movs	r2, #32
 8015168:	431a      	orrs	r2, r3
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	2250      	movs	r2, #80	@ 0x50
 8015172:	2100      	movs	r1, #0
 8015174:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8015176:	2301      	movs	r3, #1
 8015178:	e072      	b.n	8015260 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 801517a:	230c      	movs	r3, #12
 801517c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801517e:	f7ff fda9 	bl	8014cd4 <HAL_GetTick>
 8015182:	0003      	movs	r3, r0
 8015184:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8015186:	e01f      	b.n	80151c8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	3301      	adds	r3, #1
 801518c:	d01c      	beq.n	80151c8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d007      	beq.n	80151a4 <HAL_ADC_PollForConversion+0x70>
 8015194:	f7ff fd9e 	bl	8014cd4 <HAL_GetTick>
 8015198:	0002      	movs	r2, r0
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	1ad3      	subs	r3, r2, r3
 801519e:	683a      	ldr	r2, [r7, #0]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d211      	bcs.n	80151c8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	68fa      	ldr	r2, [r7, #12]
 80151ac:	4013      	ands	r3, r2
 80151ae:	d10b      	bne.n	80151c8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80151b4:	2204      	movs	r2, #4
 80151b6:	431a      	orrs	r2, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2250      	movs	r2, #80	@ 0x50
 80151c0:	2100      	movs	r1, #0
 80151c2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80151c4:	2303      	movs	r3, #3
 80151c6:	e04b      	b.n	8015260 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	68fa      	ldr	r2, [r7, #12]
 80151d0:	4013      	ands	r3, r2
 80151d2:	d0d9      	beq.n	8015188 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80151d8:	2280      	movs	r2, #128	@ 0x80
 80151da:	0092      	lsls	r2, r2, #2
 80151dc:	431a      	orrs	r2, r3
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	68da      	ldr	r2, [r3, #12]
 80151e8:	23c0      	movs	r3, #192	@ 0xc0
 80151ea:	011b      	lsls	r3, r3, #4
 80151ec:	4013      	ands	r3, r2
 80151ee:	d12e      	bne.n	801524e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2220      	movs	r2, #32
 80151f4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d129      	bne.n	801524e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	2208      	movs	r2, #8
 8015202:	4013      	ands	r3, r2
 8015204:	2b08      	cmp	r3, #8
 8015206:	d122      	bne.n	801524e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	689b      	ldr	r3, [r3, #8]
 801520e:	2204      	movs	r2, #4
 8015210:	4013      	ands	r3, r2
 8015212:	d110      	bne.n	8015236 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	685a      	ldr	r2, [r3, #4]
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	210c      	movs	r1, #12
 8015220:	438a      	bics	r2, r1
 8015222:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015228:	4a0f      	ldr	r2, [pc, #60]	@ (8015268 <HAL_ADC_PollForConversion+0x134>)
 801522a:	4013      	ands	r3, r2
 801522c:	2201      	movs	r2, #1
 801522e:	431a      	orrs	r2, r3
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	655a      	str	r2, [r3, #84]	@ 0x54
 8015234:	e00b      	b.n	801524e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801523a:	2220      	movs	r2, #32
 801523c:	431a      	orrs	r2, r3
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015246:	2201      	movs	r2, #1
 8015248:	431a      	orrs	r2, r3
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	699b      	ldr	r3, [r3, #24]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d103      	bne.n	801525e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	220c      	movs	r2, #12
 801525c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801525e:	2300      	movs	r3, #0
}
 8015260:	0018      	movs	r0, r3
 8015262:	46bd      	mov	sp, r7
 8015264:	b004      	add	sp, #16
 8015266:	bd80      	pop	{r7, pc}
 8015268:	fffffefe 	.word	0xfffffefe

0801526c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 801527a:	0018      	movs	r0, r3
 801527c:	46bd      	mov	sp, r7
 801527e:	b002      	add	sp, #8
 8015280:	bd80      	pop	{r7, pc}
	...

08015284 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b082      	sub	sp, #8
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	2250      	movs	r2, #80	@ 0x50
 8015292:	5c9b      	ldrb	r3, [r3, r2]
 8015294:	2b01      	cmp	r3, #1
 8015296:	d101      	bne.n	801529c <HAL_ADC_ConfigChannel+0x18>
 8015298:	2302      	movs	r3, #2
 801529a:	e06c      	b.n	8015376 <HAL_ADC_ConfigChannel+0xf2>
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2250      	movs	r2, #80	@ 0x50
 80152a0:	2101      	movs	r1, #1
 80152a2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	689b      	ldr	r3, [r3, #8]
 80152aa:	2204      	movs	r2, #4
 80152ac:	4013      	ands	r3, r2
 80152ae:	d00b      	beq.n	80152c8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80152b4:	2220      	movs	r2, #32
 80152b6:	431a      	orrs	r2, r3
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2250      	movs	r2, #80	@ 0x50
 80152c0:	2100      	movs	r1, #0
 80152c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80152c4:	2301      	movs	r3, #1
 80152c6:	e056      	b.n	8015376 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	685b      	ldr	r3, [r3, #4]
 80152cc:	4a2c      	ldr	r2, [pc, #176]	@ (8015380 <HAL_ADC_ConfigChannel+0xfc>)
 80152ce:	4293      	cmp	r3, r2
 80152d0:	d028      	beq.n	8015324 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	035b      	lsls	r3, r3, #13
 80152de:	0b5a      	lsrs	r2, r3, #13
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	430a      	orrs	r2, r1
 80152e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	681a      	ldr	r2, [r3, #0]
 80152ec:	2380      	movs	r3, #128	@ 0x80
 80152ee:	02db      	lsls	r3, r3, #11
 80152f0:	4013      	ands	r3, r2
 80152f2:	d009      	beq.n	8015308 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80152f4:	4b23      	ldr	r3, [pc, #140]	@ (8015384 <HAL_ADC_ConfigChannel+0x100>)
 80152f6:	681a      	ldr	r2, [r3, #0]
 80152f8:	4b22      	ldr	r3, [pc, #136]	@ (8015384 <HAL_ADC_ConfigChannel+0x100>)
 80152fa:	2180      	movs	r1, #128	@ 0x80
 80152fc:	0409      	lsls	r1, r1, #16
 80152fe:	430a      	orrs	r2, r1
 8015300:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8015302:	200a      	movs	r0, #10
 8015304:	f000 f8ac 	bl	8015460 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	681a      	ldr	r2, [r3, #0]
 801530c:	2380      	movs	r3, #128	@ 0x80
 801530e:	029b      	lsls	r3, r3, #10
 8015310:	4013      	ands	r3, r2
 8015312:	d02b      	beq.n	801536c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8015314:	4b1b      	ldr	r3, [pc, #108]	@ (8015384 <HAL_ADC_ConfigChannel+0x100>)
 8015316:	681a      	ldr	r2, [r3, #0]
 8015318:	4b1a      	ldr	r3, [pc, #104]	@ (8015384 <HAL_ADC_ConfigChannel+0x100>)
 801531a:	2180      	movs	r1, #128	@ 0x80
 801531c:	03c9      	lsls	r1, r1, #15
 801531e:	430a      	orrs	r2, r1
 8015320:	601a      	str	r2, [r3, #0]
 8015322:	e023      	b.n	801536c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	035b      	lsls	r3, r3, #13
 8015330:	0b5b      	lsrs	r3, r3, #13
 8015332:	43d9      	mvns	r1, r3
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	400a      	ands	r2, r1
 801533a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	681a      	ldr	r2, [r3, #0]
 8015340:	2380      	movs	r3, #128	@ 0x80
 8015342:	02db      	lsls	r3, r3, #11
 8015344:	4013      	ands	r3, r2
 8015346:	d005      	beq.n	8015354 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8015348:	4b0e      	ldr	r3, [pc, #56]	@ (8015384 <HAL_ADC_ConfigChannel+0x100>)
 801534a:	681a      	ldr	r2, [r3, #0]
 801534c:	4b0d      	ldr	r3, [pc, #52]	@ (8015384 <HAL_ADC_ConfigChannel+0x100>)
 801534e:	490e      	ldr	r1, [pc, #56]	@ (8015388 <HAL_ADC_ConfigChannel+0x104>)
 8015350:	400a      	ands	r2, r1
 8015352:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	681a      	ldr	r2, [r3, #0]
 8015358:	2380      	movs	r3, #128	@ 0x80
 801535a:	029b      	lsls	r3, r3, #10
 801535c:	4013      	ands	r3, r2
 801535e:	d005      	beq.n	801536c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8015360:	4b08      	ldr	r3, [pc, #32]	@ (8015384 <HAL_ADC_ConfigChannel+0x100>)
 8015362:	681a      	ldr	r2, [r3, #0]
 8015364:	4b07      	ldr	r3, [pc, #28]	@ (8015384 <HAL_ADC_ConfigChannel+0x100>)
 8015366:	4909      	ldr	r1, [pc, #36]	@ (801538c <HAL_ADC_ConfigChannel+0x108>)
 8015368:	400a      	ands	r2, r1
 801536a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	2250      	movs	r2, #80	@ 0x50
 8015370:	2100      	movs	r1, #0
 8015372:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015374:	2300      	movs	r3, #0
}
 8015376:	0018      	movs	r0, r3
 8015378:	46bd      	mov	sp, r7
 801537a:	b002      	add	sp, #8
 801537c:	bd80      	pop	{r7, pc}
 801537e:	46c0      	nop			@ (mov r8, r8)
 8015380:	00001001 	.word	0x00001001
 8015384:	40012708 	.word	0x40012708
 8015388:	ff7fffff 	.word	0xff7fffff
 801538c:	ffbfffff 	.word	0xffbfffff

08015390 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b084      	sub	sp, #16
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015398:	2300      	movs	r3, #0
 801539a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	689b      	ldr	r3, [r3, #8]
 80153a2:	2203      	movs	r2, #3
 80153a4:	4013      	ands	r3, r2
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d108      	bne.n	80153bc <ADC_Enable+0x2c>
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2201      	movs	r2, #1
 80153b2:	4013      	ands	r3, r2
 80153b4:	2b01      	cmp	r3, #1
 80153b6:	d101      	bne.n	80153bc <ADC_Enable+0x2c>
 80153b8:	2301      	movs	r3, #1
 80153ba:	e000      	b.n	80153be <ADC_Enable+0x2e>
 80153bc:	2300      	movs	r3, #0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d146      	bne.n	8015450 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	689b      	ldr	r3, [r3, #8]
 80153c8:	4a24      	ldr	r2, [pc, #144]	@ (801545c <ADC_Enable+0xcc>)
 80153ca:	4013      	ands	r3, r2
 80153cc:	d00d      	beq.n	80153ea <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80153d2:	2210      	movs	r2, #16
 80153d4:	431a      	orrs	r2, r3
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80153de:	2201      	movs	r2, #1
 80153e0:	431a      	orrs	r2, r3
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80153e6:	2301      	movs	r3, #1
 80153e8:	e033      	b.n	8015452 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	689a      	ldr	r2, [r3, #8]
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2101      	movs	r1, #1
 80153f6:	430a      	orrs	r2, r1
 80153f8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80153fa:	2001      	movs	r0, #1
 80153fc:	f000 f830 	bl	8015460 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8015400:	f7ff fc68 	bl	8014cd4 <HAL_GetTick>
 8015404:	0003      	movs	r3, r0
 8015406:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015408:	e01b      	b.n	8015442 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801540a:	f7ff fc63 	bl	8014cd4 <HAL_GetTick>
 801540e:	0002      	movs	r2, r0
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	1ad3      	subs	r3, r2, r3
 8015414:	2b0a      	cmp	r3, #10
 8015416:	d914      	bls.n	8015442 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	2201      	movs	r2, #1
 8015420:	4013      	ands	r3, r2
 8015422:	2b01      	cmp	r3, #1
 8015424:	d00d      	beq.n	8015442 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801542a:	2210      	movs	r2, #16
 801542c:	431a      	orrs	r2, r3
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015436:	2201      	movs	r2, #1
 8015438:	431a      	orrs	r2, r3
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 801543e:	2301      	movs	r3, #1
 8015440:	e007      	b.n	8015452 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	2201      	movs	r2, #1
 801544a:	4013      	ands	r3, r2
 801544c:	2b01      	cmp	r3, #1
 801544e:	d1dc      	bne.n	801540a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8015450:	2300      	movs	r3, #0
}
 8015452:	0018      	movs	r0, r3
 8015454:	46bd      	mov	sp, r7
 8015456:	b004      	add	sp, #16
 8015458:	bd80      	pop	{r7, pc}
 801545a:	46c0      	nop			@ (mov r8, r8)
 801545c:	80000017 	.word	0x80000017

08015460 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b084      	sub	sp, #16
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8015468:	4b0b      	ldr	r3, [pc, #44]	@ (8015498 <ADC_DelayMicroSecond+0x38>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	490b      	ldr	r1, [pc, #44]	@ (801549c <ADC_DelayMicroSecond+0x3c>)
 801546e:	0018      	movs	r0, r3
 8015470:	f7ea fe98 	bl	80001a4 <__udivsi3>
 8015474:	0003      	movs	r3, r0
 8015476:	001a      	movs	r2, r3
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	4353      	muls	r3, r2
 801547c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801547e:	e002      	b.n	8015486 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	3b01      	subs	r3, #1
 8015484:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d1f9      	bne.n	8015480 <ADC_DelayMicroSecond+0x20>
  }
}
 801548c:	46c0      	nop			@ (mov r8, r8)
 801548e:	46c0      	nop			@ (mov r8, r8)
 8015490:	46bd      	mov	sp, r7
 8015492:	b004      	add	sp, #16
 8015494:	bd80      	pop	{r7, pc}
 8015496:	46c0      	nop			@ (mov r8, r8)
 8015498:	200000ec 	.word	0x200000ec
 801549c:	000f4240 	.word	0x000f4240

080154a0 <__NVIC_EnableIRQ>:
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b082      	sub	sp, #8
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	0002      	movs	r2, r0
 80154a8:	1dfb      	adds	r3, r7, #7
 80154aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80154ac:	1dfb      	adds	r3, r7, #7
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80154b2:	d809      	bhi.n	80154c8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80154b4:	1dfb      	adds	r3, r7, #7
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	001a      	movs	r2, r3
 80154ba:	231f      	movs	r3, #31
 80154bc:	401a      	ands	r2, r3
 80154be:	4b04      	ldr	r3, [pc, #16]	@ (80154d0 <__NVIC_EnableIRQ+0x30>)
 80154c0:	2101      	movs	r1, #1
 80154c2:	4091      	lsls	r1, r2
 80154c4:	000a      	movs	r2, r1
 80154c6:	601a      	str	r2, [r3, #0]
}
 80154c8:	46c0      	nop			@ (mov r8, r8)
 80154ca:	46bd      	mov	sp, r7
 80154cc:	b002      	add	sp, #8
 80154ce:	bd80      	pop	{r7, pc}
 80154d0:	e000e100 	.word	0xe000e100

080154d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80154d4:	b590      	push	{r4, r7, lr}
 80154d6:	b083      	sub	sp, #12
 80154d8:	af00      	add	r7, sp, #0
 80154da:	0002      	movs	r2, r0
 80154dc:	6039      	str	r1, [r7, #0]
 80154de:	1dfb      	adds	r3, r7, #7
 80154e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80154e2:	1dfb      	adds	r3, r7, #7
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80154e8:	d828      	bhi.n	801553c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80154ea:	4a2f      	ldr	r2, [pc, #188]	@ (80155a8 <__NVIC_SetPriority+0xd4>)
 80154ec:	1dfb      	adds	r3, r7, #7
 80154ee:	781b      	ldrb	r3, [r3, #0]
 80154f0:	b25b      	sxtb	r3, r3
 80154f2:	089b      	lsrs	r3, r3, #2
 80154f4:	33c0      	adds	r3, #192	@ 0xc0
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	589b      	ldr	r3, [r3, r2]
 80154fa:	1dfa      	adds	r2, r7, #7
 80154fc:	7812      	ldrb	r2, [r2, #0]
 80154fe:	0011      	movs	r1, r2
 8015500:	2203      	movs	r2, #3
 8015502:	400a      	ands	r2, r1
 8015504:	00d2      	lsls	r2, r2, #3
 8015506:	21ff      	movs	r1, #255	@ 0xff
 8015508:	4091      	lsls	r1, r2
 801550a:	000a      	movs	r2, r1
 801550c:	43d2      	mvns	r2, r2
 801550e:	401a      	ands	r2, r3
 8015510:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	019b      	lsls	r3, r3, #6
 8015516:	22ff      	movs	r2, #255	@ 0xff
 8015518:	401a      	ands	r2, r3
 801551a:	1dfb      	adds	r3, r7, #7
 801551c:	781b      	ldrb	r3, [r3, #0]
 801551e:	0018      	movs	r0, r3
 8015520:	2303      	movs	r3, #3
 8015522:	4003      	ands	r3, r0
 8015524:	00db      	lsls	r3, r3, #3
 8015526:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015528:	481f      	ldr	r0, [pc, #124]	@ (80155a8 <__NVIC_SetPriority+0xd4>)
 801552a:	1dfb      	adds	r3, r7, #7
 801552c:	781b      	ldrb	r3, [r3, #0]
 801552e:	b25b      	sxtb	r3, r3
 8015530:	089b      	lsrs	r3, r3, #2
 8015532:	430a      	orrs	r2, r1
 8015534:	33c0      	adds	r3, #192	@ 0xc0
 8015536:	009b      	lsls	r3, r3, #2
 8015538:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801553a:	e031      	b.n	80155a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801553c:	4a1b      	ldr	r2, [pc, #108]	@ (80155ac <__NVIC_SetPriority+0xd8>)
 801553e:	1dfb      	adds	r3, r7, #7
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	0019      	movs	r1, r3
 8015544:	230f      	movs	r3, #15
 8015546:	400b      	ands	r3, r1
 8015548:	3b08      	subs	r3, #8
 801554a:	089b      	lsrs	r3, r3, #2
 801554c:	3306      	adds	r3, #6
 801554e:	009b      	lsls	r3, r3, #2
 8015550:	18d3      	adds	r3, r2, r3
 8015552:	3304      	adds	r3, #4
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	1dfa      	adds	r2, r7, #7
 8015558:	7812      	ldrb	r2, [r2, #0]
 801555a:	0011      	movs	r1, r2
 801555c:	2203      	movs	r2, #3
 801555e:	400a      	ands	r2, r1
 8015560:	00d2      	lsls	r2, r2, #3
 8015562:	21ff      	movs	r1, #255	@ 0xff
 8015564:	4091      	lsls	r1, r2
 8015566:	000a      	movs	r2, r1
 8015568:	43d2      	mvns	r2, r2
 801556a:	401a      	ands	r2, r3
 801556c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	019b      	lsls	r3, r3, #6
 8015572:	22ff      	movs	r2, #255	@ 0xff
 8015574:	401a      	ands	r2, r3
 8015576:	1dfb      	adds	r3, r7, #7
 8015578:	781b      	ldrb	r3, [r3, #0]
 801557a:	0018      	movs	r0, r3
 801557c:	2303      	movs	r3, #3
 801557e:	4003      	ands	r3, r0
 8015580:	00db      	lsls	r3, r3, #3
 8015582:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015584:	4809      	ldr	r0, [pc, #36]	@ (80155ac <__NVIC_SetPriority+0xd8>)
 8015586:	1dfb      	adds	r3, r7, #7
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	001c      	movs	r4, r3
 801558c:	230f      	movs	r3, #15
 801558e:	4023      	ands	r3, r4
 8015590:	3b08      	subs	r3, #8
 8015592:	089b      	lsrs	r3, r3, #2
 8015594:	430a      	orrs	r2, r1
 8015596:	3306      	adds	r3, #6
 8015598:	009b      	lsls	r3, r3, #2
 801559a:	18c3      	adds	r3, r0, r3
 801559c:	3304      	adds	r3, #4
 801559e:	601a      	str	r2, [r3, #0]
}
 80155a0:	46c0      	nop			@ (mov r8, r8)
 80155a2:	46bd      	mov	sp, r7
 80155a4:	b003      	add	sp, #12
 80155a6:	bd90      	pop	{r4, r7, pc}
 80155a8:	e000e100 	.word	0xe000e100
 80155ac:	e000ed00 	.word	0xe000ed00

080155b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80155b4:	f3bf 8f4f 	dsb	sy
}
 80155b8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80155ba:	4b04      	ldr	r3, [pc, #16]	@ (80155cc <__NVIC_SystemReset+0x1c>)
 80155bc:	4a04      	ldr	r2, [pc, #16]	@ (80155d0 <__NVIC_SystemReset+0x20>)
 80155be:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80155c0:	f3bf 8f4f 	dsb	sy
}
 80155c4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80155c6:	46c0      	nop			@ (mov r8, r8)
 80155c8:	e7fd      	b.n	80155c6 <__NVIC_SystemReset+0x16>
 80155ca:	46c0      	nop			@ (mov r8, r8)
 80155cc:	e000ed00 	.word	0xe000ed00
 80155d0:	05fa0004 	.word	0x05fa0004

080155d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b082      	sub	sp, #8
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	1e5a      	subs	r2, r3, #1
 80155e0:	2380      	movs	r3, #128	@ 0x80
 80155e2:	045b      	lsls	r3, r3, #17
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d301      	bcc.n	80155ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80155e8:	2301      	movs	r3, #1
 80155ea:	e010      	b.n	801560e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80155ec:	4b0a      	ldr	r3, [pc, #40]	@ (8015618 <SysTick_Config+0x44>)
 80155ee:	687a      	ldr	r2, [r7, #4]
 80155f0:	3a01      	subs	r2, #1
 80155f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80155f4:	2301      	movs	r3, #1
 80155f6:	425b      	negs	r3, r3
 80155f8:	2103      	movs	r1, #3
 80155fa:	0018      	movs	r0, r3
 80155fc:	f7ff ff6a 	bl	80154d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015600:	4b05      	ldr	r3, [pc, #20]	@ (8015618 <SysTick_Config+0x44>)
 8015602:	2200      	movs	r2, #0
 8015604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015606:	4b04      	ldr	r3, [pc, #16]	@ (8015618 <SysTick_Config+0x44>)
 8015608:	2207      	movs	r2, #7
 801560a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801560c:	2300      	movs	r3, #0
}
 801560e:	0018      	movs	r0, r3
 8015610:	46bd      	mov	sp, r7
 8015612:	b002      	add	sp, #8
 8015614:	bd80      	pop	{r7, pc}
 8015616:	46c0      	nop			@ (mov r8, r8)
 8015618:	e000e010 	.word	0xe000e010

0801561c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801561c:	b580      	push	{r7, lr}
 801561e:	b084      	sub	sp, #16
 8015620:	af00      	add	r7, sp, #0
 8015622:	60b9      	str	r1, [r7, #8]
 8015624:	607a      	str	r2, [r7, #4]
 8015626:	210f      	movs	r1, #15
 8015628:	187b      	adds	r3, r7, r1
 801562a:	1c02      	adds	r2, r0, #0
 801562c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 801562e:	68ba      	ldr	r2, [r7, #8]
 8015630:	187b      	adds	r3, r7, r1
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	b25b      	sxtb	r3, r3
 8015636:	0011      	movs	r1, r2
 8015638:	0018      	movs	r0, r3
 801563a:	f7ff ff4b 	bl	80154d4 <__NVIC_SetPriority>
}
 801563e:	46c0      	nop			@ (mov r8, r8)
 8015640:	46bd      	mov	sp, r7
 8015642:	b004      	add	sp, #16
 8015644:	bd80      	pop	{r7, pc}

08015646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015646:	b580      	push	{r7, lr}
 8015648:	b082      	sub	sp, #8
 801564a:	af00      	add	r7, sp, #0
 801564c:	0002      	movs	r2, r0
 801564e:	1dfb      	adds	r3, r7, #7
 8015650:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015652:	1dfb      	adds	r3, r7, #7
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	b25b      	sxtb	r3, r3
 8015658:	0018      	movs	r0, r3
 801565a:	f7ff ff21 	bl	80154a0 <__NVIC_EnableIRQ>
}
 801565e:	46c0      	nop			@ (mov r8, r8)
 8015660:	46bd      	mov	sp, r7
 8015662:	b002      	add	sp, #8
 8015664:	bd80      	pop	{r7, pc}

08015666 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8015666:	b580      	push	{r7, lr}
 8015668:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801566a:	f7ff ffa1 	bl	80155b0 <__NVIC_SystemReset>

0801566e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801566e:	b580      	push	{r7, lr}
 8015670:	b082      	sub	sp, #8
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	0018      	movs	r0, r3
 801567a:	f7ff ffab 	bl	80155d4 <SysTick_Config>
 801567e:	0003      	movs	r3, r0
}
 8015680:	0018      	movs	r0, r3
 8015682:	46bd      	mov	sp, r7
 8015684:	b002      	add	sp, #8
 8015686:	bd80      	pop	{r7, pc}

08015688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b084      	sub	sp, #16
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d101      	bne.n	801569a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8015696:	2301      	movs	r3, #1
 8015698:	e061      	b.n	801575e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	4a32      	ldr	r2, [pc, #200]	@ (8015768 <HAL_DMA_Init+0xe0>)
 80156a0:	4694      	mov	ip, r2
 80156a2:	4463      	add	r3, ip
 80156a4:	2114      	movs	r1, #20
 80156a6:	0018      	movs	r0, r3
 80156a8:	f7ea fd7c 	bl	80001a4 <__udivsi3>
 80156ac:	0003      	movs	r3, r0
 80156ae:	009a      	lsls	r2, r3, #2
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	4a2d      	ldr	r2, [pc, #180]	@ (801576c <HAL_DMA_Init+0xe4>)
 80156b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2225      	movs	r2, #37	@ 0x25
 80156be:	2102      	movs	r1, #2
 80156c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	4a28      	ldr	r2, [pc, #160]	@ (8015770 <HAL_DMA_Init+0xe8>)
 80156ce:	4013      	ands	r3, r2
 80156d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80156da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	691b      	ldr	r3, [r3, #16]
 80156e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80156e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	699b      	ldr	r3, [r3, #24]
 80156ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80156f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6a1b      	ldr	r3, [r3, #32]
 80156f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80156fa:	68fa      	ldr	r2, [r7, #12]
 80156fc:	4313      	orrs	r3, r2
 80156fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	68fa      	ldr	r2, [r7, #12]
 8015706:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	689a      	ldr	r2, [r3, #8]
 801570c:	2380      	movs	r3, #128	@ 0x80
 801570e:	01db      	lsls	r3, r3, #7
 8015710:	429a      	cmp	r2, r3
 8015712:	d018      	beq.n	8015746 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8015714:	4b17      	ldr	r3, [pc, #92]	@ (8015774 <HAL_DMA_Init+0xec>)
 8015716:	681a      	ldr	r2, [r3, #0]
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801571c:	211c      	movs	r1, #28
 801571e:	400b      	ands	r3, r1
 8015720:	210f      	movs	r1, #15
 8015722:	4099      	lsls	r1, r3
 8015724:	000b      	movs	r3, r1
 8015726:	43d9      	mvns	r1, r3
 8015728:	4b12      	ldr	r3, [pc, #72]	@ (8015774 <HAL_DMA_Init+0xec>)
 801572a:	400a      	ands	r2, r1
 801572c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 801572e:	4b11      	ldr	r3, [pc, #68]	@ (8015774 <HAL_DMA_Init+0xec>)
 8015730:	6819      	ldr	r1, [r3, #0]
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	685a      	ldr	r2, [r3, #4]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801573a:	201c      	movs	r0, #28
 801573c:	4003      	ands	r3, r0
 801573e:	409a      	lsls	r2, r3
 8015740:	4b0c      	ldr	r3, [pc, #48]	@ (8015774 <HAL_DMA_Init+0xec>)
 8015742:	430a      	orrs	r2, r1
 8015744:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	2200      	movs	r2, #0
 801574a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2225      	movs	r2, #37	@ 0x25
 8015750:	2101      	movs	r1, #1
 8015752:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2224      	movs	r2, #36	@ 0x24
 8015758:	2100      	movs	r1, #0
 801575a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801575c:	2300      	movs	r3, #0
}
 801575e:	0018      	movs	r0, r3
 8015760:	46bd      	mov	sp, r7
 8015762:	b004      	add	sp, #16
 8015764:	bd80      	pop	{r7, pc}
 8015766:	46c0      	nop			@ (mov r8, r8)
 8015768:	bffdfff8 	.word	0xbffdfff8
 801576c:	40020000 	.word	0x40020000
 8015770:	ffff800f 	.word	0xffff800f
 8015774:	400200a8 	.word	0x400200a8

08015778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b086      	sub	sp, #24
 801577c:	af00      	add	r7, sp, #0
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	60b9      	str	r1, [r7, #8]
 8015782:	607a      	str	r2, [r7, #4]
 8015784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015786:	2317      	movs	r3, #23
 8015788:	18fb      	adds	r3, r7, r3
 801578a:	2200      	movs	r2, #0
 801578c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	2224      	movs	r2, #36	@ 0x24
 8015792:	5c9b      	ldrb	r3, [r3, r2]
 8015794:	2b01      	cmp	r3, #1
 8015796:	d101      	bne.n	801579c <HAL_DMA_Start_IT+0x24>
 8015798:	2302      	movs	r3, #2
 801579a:	e04f      	b.n	801583c <HAL_DMA_Start_IT+0xc4>
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	2224      	movs	r2, #36	@ 0x24
 80157a0:	2101      	movs	r1, #1
 80157a2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	2225      	movs	r2, #37	@ 0x25
 80157a8:	5c9b      	ldrb	r3, [r3, r2]
 80157aa:	b2db      	uxtb	r3, r3
 80157ac:	2b01      	cmp	r3, #1
 80157ae:	d13a      	bne.n	8015826 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	2225      	movs	r2, #37	@ 0x25
 80157b4:	2102      	movs	r1, #2
 80157b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2200      	movs	r2, #0
 80157bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	681a      	ldr	r2, [r3, #0]
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2101      	movs	r1, #1
 80157ca:	438a      	bics	r2, r1
 80157cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	687a      	ldr	r2, [r7, #4]
 80157d2:	68b9      	ldr	r1, [r7, #8]
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f000 f976 	bl	8015ac6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d008      	beq.n	80157f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	681a      	ldr	r2, [r3, #0]
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	210e      	movs	r1, #14
 80157ee:	430a      	orrs	r2, r1
 80157f0:	601a      	str	r2, [r3, #0]
 80157f2:	e00f      	b.n	8015814 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	681a      	ldr	r2, [r3, #0]
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	2104      	movs	r1, #4
 8015800:	438a      	bics	r2, r1
 8015802:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	210a      	movs	r1, #10
 8015810:	430a      	orrs	r2, r1
 8015812:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	681a      	ldr	r2, [r3, #0]
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	2101      	movs	r1, #1
 8015820:	430a      	orrs	r2, r1
 8015822:	601a      	str	r2, [r3, #0]
 8015824:	e007      	b.n	8015836 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	2224      	movs	r2, #36	@ 0x24
 801582a:	2100      	movs	r1, #0
 801582c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 801582e:	2317      	movs	r3, #23
 8015830:	18fb      	adds	r3, r7, r3
 8015832:	2202      	movs	r2, #2
 8015834:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8015836:	2317      	movs	r3, #23
 8015838:	18fb      	adds	r3, r7, r3
 801583a:	781b      	ldrb	r3, [r3, #0]
}
 801583c:	0018      	movs	r0, r3
 801583e:	46bd      	mov	sp, r7
 8015840:	b006      	add	sp, #24
 8015842:	bd80      	pop	{r7, pc}

08015844 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b084      	sub	sp, #16
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801584c:	230f      	movs	r3, #15
 801584e:	18fb      	adds	r3, r7, r3
 8015850:	2200      	movs	r2, #0
 8015852:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2225      	movs	r2, #37	@ 0x25
 8015858:	5c9b      	ldrb	r3, [r3, r2]
 801585a:	b2db      	uxtb	r3, r3
 801585c:	2b02      	cmp	r3, #2
 801585e:	d008      	beq.n	8015872 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	2204      	movs	r2, #4
 8015864:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2224      	movs	r2, #36	@ 0x24
 801586a:	2100      	movs	r1, #0
 801586c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 801586e:	2301      	movs	r3, #1
 8015870:	e024      	b.n	80158bc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	210e      	movs	r1, #14
 801587e:	438a      	bics	r2, r1
 8015880:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	681a      	ldr	r2, [r3, #0]
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2101      	movs	r1, #1
 801588e:	438a      	bics	r2, r1
 8015890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015896:	221c      	movs	r2, #28
 8015898:	401a      	ands	r2, r3
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801589e:	2101      	movs	r1, #1
 80158a0:	4091      	lsls	r1, r2
 80158a2:	000a      	movs	r2, r1
 80158a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2225      	movs	r2, #37	@ 0x25
 80158aa:	2101      	movs	r1, #1
 80158ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2224      	movs	r2, #36	@ 0x24
 80158b2:	2100      	movs	r1, #0
 80158b4:	5499      	strb	r1, [r3, r2]

    return status;
 80158b6:	230f      	movs	r3, #15
 80158b8:	18fb      	adds	r3, r7, r3
 80158ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80158bc:	0018      	movs	r0, r3
 80158be:	46bd      	mov	sp, r7
 80158c0:	b004      	add	sp, #16
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b084      	sub	sp, #16
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80158cc:	210f      	movs	r1, #15
 80158ce:	187b      	adds	r3, r7, r1
 80158d0:	2200      	movs	r2, #0
 80158d2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2225      	movs	r2, #37	@ 0x25
 80158d8:	5c9b      	ldrb	r3, [r3, r2]
 80158da:	b2db      	uxtb	r3, r3
 80158dc:	2b02      	cmp	r3, #2
 80158de:	d006      	beq.n	80158ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2204      	movs	r2, #4
 80158e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80158e6:	187b      	adds	r3, r7, r1
 80158e8:	2201      	movs	r2, #1
 80158ea:	701a      	strb	r2, [r3, #0]
 80158ec:	e02a      	b.n	8015944 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	681a      	ldr	r2, [r3, #0]
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	210e      	movs	r1, #14
 80158fa:	438a      	bics	r2, r1
 80158fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	681a      	ldr	r2, [r3, #0]
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	2101      	movs	r1, #1
 801590a:	438a      	bics	r2, r1
 801590c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015912:	221c      	movs	r2, #28
 8015914:	401a      	ands	r2, r3
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801591a:	2101      	movs	r1, #1
 801591c:	4091      	lsls	r1, r2
 801591e:	000a      	movs	r2, r1
 8015920:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2225      	movs	r2, #37	@ 0x25
 8015926:	2101      	movs	r1, #1
 8015928:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2224      	movs	r2, #36	@ 0x24
 801592e:	2100      	movs	r1, #0
 8015930:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015936:	2b00      	cmp	r3, #0
 8015938:	d004      	beq.n	8015944 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801593e:	687a      	ldr	r2, [r7, #4]
 8015940:	0010      	movs	r0, r2
 8015942:	4798      	blx	r3
    }
  }
  return status;
 8015944:	230f      	movs	r3, #15
 8015946:	18fb      	adds	r3, r7, r3
 8015948:	781b      	ldrb	r3, [r3, #0]
}
 801594a:	0018      	movs	r0, r3
 801594c:	46bd      	mov	sp, r7
 801594e:	b004      	add	sp, #16
 8015950:	bd80      	pop	{r7, pc}

08015952 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015952:	b580      	push	{r7, lr}
 8015954:	b084      	sub	sp, #16
 8015956:	af00      	add	r7, sp, #0
 8015958:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801596e:	221c      	movs	r2, #28
 8015970:	4013      	ands	r3, r2
 8015972:	2204      	movs	r2, #4
 8015974:	409a      	lsls	r2, r3
 8015976:	0013      	movs	r3, r2
 8015978:	68fa      	ldr	r2, [r7, #12]
 801597a:	4013      	ands	r3, r2
 801597c:	d026      	beq.n	80159cc <HAL_DMA_IRQHandler+0x7a>
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	2204      	movs	r2, #4
 8015982:	4013      	ands	r3, r2
 8015984:	d022      	beq.n	80159cc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2220      	movs	r2, #32
 801598e:	4013      	ands	r3, r2
 8015990:	d107      	bne.n	80159a2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	681a      	ldr	r2, [r3, #0]
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2104      	movs	r1, #4
 801599e:	438a      	bics	r2, r1
 80159a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159a6:	221c      	movs	r2, #28
 80159a8:	401a      	ands	r2, r3
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159ae:	2104      	movs	r1, #4
 80159b0:	4091      	lsls	r1, r2
 80159b2:	000a      	movs	r2, r1
 80159b4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d100      	bne.n	80159c0 <HAL_DMA_IRQHandler+0x6e>
 80159be:	e071      	b.n	8015aa4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159c4:	687a      	ldr	r2, [r7, #4]
 80159c6:	0010      	movs	r0, r2
 80159c8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80159ca:	e06b      	b.n	8015aa4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159d0:	221c      	movs	r2, #28
 80159d2:	4013      	ands	r3, r2
 80159d4:	2202      	movs	r2, #2
 80159d6:	409a      	lsls	r2, r3
 80159d8:	0013      	movs	r3, r2
 80159da:	68fa      	ldr	r2, [r7, #12]
 80159dc:	4013      	ands	r3, r2
 80159de:	d02d      	beq.n	8015a3c <HAL_DMA_IRQHandler+0xea>
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	2202      	movs	r2, #2
 80159e4:	4013      	ands	r3, r2
 80159e6:	d029      	beq.n	8015a3c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	2220      	movs	r2, #32
 80159f0:	4013      	ands	r3, r2
 80159f2:	d10b      	bne.n	8015a0c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	681a      	ldr	r2, [r3, #0]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	210a      	movs	r1, #10
 8015a00:	438a      	bics	r2, r1
 8015a02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2225      	movs	r2, #37	@ 0x25
 8015a08:	2101      	movs	r1, #1
 8015a0a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a10:	221c      	movs	r2, #28
 8015a12:	401a      	ands	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a18:	2102      	movs	r1, #2
 8015a1a:	4091      	lsls	r1, r2
 8015a1c:	000a      	movs	r2, r1
 8015a1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2224      	movs	r2, #36	@ 0x24
 8015a24:	2100      	movs	r1, #0
 8015a26:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d039      	beq.n	8015aa4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a34:	687a      	ldr	r2, [r7, #4]
 8015a36:	0010      	movs	r0, r2
 8015a38:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8015a3a:	e033      	b.n	8015aa4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a40:	221c      	movs	r2, #28
 8015a42:	4013      	ands	r3, r2
 8015a44:	2208      	movs	r2, #8
 8015a46:	409a      	lsls	r2, r3
 8015a48:	0013      	movs	r3, r2
 8015a4a:	68fa      	ldr	r2, [r7, #12]
 8015a4c:	4013      	ands	r3, r2
 8015a4e:	d02a      	beq.n	8015aa6 <HAL_DMA_IRQHandler+0x154>
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	2208      	movs	r2, #8
 8015a54:	4013      	ands	r3, r2
 8015a56:	d026      	beq.n	8015aa6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	681a      	ldr	r2, [r3, #0]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	210e      	movs	r1, #14
 8015a64:	438a      	bics	r2, r1
 8015a66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a6c:	221c      	movs	r2, #28
 8015a6e:	401a      	ands	r2, r3
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a74:	2101      	movs	r1, #1
 8015a76:	4091      	lsls	r1, r2
 8015a78:	000a      	movs	r2, r1
 8015a7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2201      	movs	r2, #1
 8015a80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2225      	movs	r2, #37	@ 0x25
 8015a86:	2101      	movs	r1, #1
 8015a88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	2224      	movs	r2, #36	@ 0x24
 8015a8e:	2100      	movs	r1, #0
 8015a90:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d005      	beq.n	8015aa6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	0010      	movs	r0, r2
 8015aa2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8015aa4:	46c0      	nop			@ (mov r8, r8)
 8015aa6:	46c0      	nop			@ (mov r8, r8)
}
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	b004      	add	sp, #16
 8015aac:	bd80      	pop	{r7, pc}

08015aae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8015aae:	b580      	push	{r7, lr}
 8015ab0:	b082      	sub	sp, #8
 8015ab2:	af00      	add	r7, sp, #0
 8015ab4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2225      	movs	r2, #37	@ 0x25
 8015aba:	5c9b      	ldrb	r3, [r3, r2]
 8015abc:	b2db      	uxtb	r3, r3
}
 8015abe:	0018      	movs	r0, r3
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	b002      	add	sp, #8
 8015ac4:	bd80      	pop	{r7, pc}

08015ac6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015ac6:	b580      	push	{r7, lr}
 8015ac8:	b084      	sub	sp, #16
 8015aca:	af00      	add	r7, sp, #0
 8015acc:	60f8      	str	r0, [r7, #12]
 8015ace:	60b9      	str	r1, [r7, #8]
 8015ad0:	607a      	str	r2, [r7, #4]
 8015ad2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ad8:	221c      	movs	r2, #28
 8015ada:	401a      	ands	r2, r3
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015ae0:	2101      	movs	r1, #1
 8015ae2:	4091      	lsls	r1, r2
 8015ae4:	000a      	movs	r2, r1
 8015ae6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	683a      	ldr	r2, [r7, #0]
 8015aee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	689b      	ldr	r3, [r3, #8]
 8015af4:	2b10      	cmp	r3, #16
 8015af6:	d108      	bne.n	8015b0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	68ba      	ldr	r2, [r7, #8]
 8015b06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8015b08:	e007      	b.n	8015b1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	68ba      	ldr	r2, [r7, #8]
 8015b10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	687a      	ldr	r2, [r7, #4]
 8015b18:	60da      	str	r2, [r3, #12]
}
 8015b1a:	46c0      	nop			@ (mov r8, r8)
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	b004      	add	sp, #16
 8015b20:	bd80      	pop	{r7, pc}
	...

08015b24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b084      	sub	sp, #16
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8015b2c:	f7ff f8d2 	bl	8014cd4 <HAL_GetTick>
 8015b30:	0003      	movs	r3, r0
 8015b32:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8015b34:	e00f      	b.n	8015b56 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	3301      	adds	r3, #1
 8015b3a:	d00c      	beq.n	8015b56 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d007      	beq.n	8015b52 <FLASH_WaitForLastOperation+0x2e>
 8015b42:	f7ff f8c7 	bl	8014cd4 <HAL_GetTick>
 8015b46:	0002      	movs	r2, r0
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	1ad3      	subs	r3, r2, r3
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d201      	bcs.n	8015b56 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8015b52:	2303      	movs	r3, #3
 8015b54:	e052      	b.n	8015bfc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8015b56:	4b2b      	ldr	r3, [pc, #172]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015b58:	699b      	ldr	r3, [r3, #24]
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	4013      	ands	r3, r2
 8015b5e:	2b01      	cmp	r3, #1
 8015b60:	d0e9      	beq.n	8015b36 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8015b62:	4b28      	ldr	r3, [pc, #160]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015b64:	699b      	ldr	r3, [r3, #24]
 8015b66:	2202      	movs	r2, #2
 8015b68:	4013      	ands	r3, r2
 8015b6a:	2b02      	cmp	r3, #2
 8015b6c:	d102      	bne.n	8015b74 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8015b6e:	4b25      	ldr	r3, [pc, #148]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015b70:	2202      	movs	r2, #2
 8015b72:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015b74:	4b23      	ldr	r3, [pc, #140]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015b76:	699a      	ldr	r2, [r3, #24]
 8015b78:	2380      	movs	r3, #128	@ 0x80
 8015b7a:	005b      	lsls	r3, r3, #1
 8015b7c:	401a      	ands	r2, r3
 8015b7e:	2380      	movs	r3, #128	@ 0x80
 8015b80:	005b      	lsls	r3, r3, #1
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d035      	beq.n	8015bf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8015b86:	4b1f      	ldr	r3, [pc, #124]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015b88:	699a      	ldr	r2, [r3, #24]
 8015b8a:	2380      	movs	r3, #128	@ 0x80
 8015b8c:	009b      	lsls	r3, r3, #2
 8015b8e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015b90:	2380      	movs	r3, #128	@ 0x80
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d02c      	beq.n	8015bf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015b98:	4b1a      	ldr	r3, [pc, #104]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015b9a:	699a      	ldr	r2, [r3, #24]
 8015b9c:	2380      	movs	r3, #128	@ 0x80
 8015b9e:	00db      	lsls	r3, r3, #3
 8015ba0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8015ba2:	2380      	movs	r3, #128	@ 0x80
 8015ba4:	00db      	lsls	r3, r3, #3
 8015ba6:	429a      	cmp	r2, r3
 8015ba8:	d023      	beq.n	8015bf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015baa:	4b16      	ldr	r3, [pc, #88]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015bac:	699a      	ldr	r2, [r3, #24]
 8015bae:	2380      	movs	r3, #128	@ 0x80
 8015bb0:	011b      	lsls	r3, r3, #4
 8015bb2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015bb4:	2380      	movs	r3, #128	@ 0x80
 8015bb6:	011b      	lsls	r3, r3, #4
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	d01a      	beq.n	8015bf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015bbc:	4b11      	ldr	r3, [pc, #68]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015bbe:	699a      	ldr	r2, [r3, #24]
 8015bc0:	2380      	movs	r3, #128	@ 0x80
 8015bc2:	019b      	lsls	r3, r3, #6
 8015bc4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015bc6:	2380      	movs	r3, #128	@ 0x80
 8015bc8:	019b      	lsls	r3, r3, #6
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d011      	beq.n	8015bf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015bce:	4b0d      	ldr	r3, [pc, #52]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015bd0:	699a      	ldr	r2, [r3, #24]
 8015bd2:	2380      	movs	r3, #128	@ 0x80
 8015bd4:	029b      	lsls	r3, r3, #10
 8015bd6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015bd8:	2380      	movs	r3, #128	@ 0x80
 8015bda:	029b      	lsls	r3, r3, #10
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d008      	beq.n	8015bf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8015be0:	4b08      	ldr	r3, [pc, #32]	@ (8015c04 <FLASH_WaitForLastOperation+0xe0>)
 8015be2:	699a      	ldr	r2, [r3, #24]
 8015be4:	2380      	movs	r3, #128	@ 0x80
 8015be6:	025b      	lsls	r3, r3, #9
 8015be8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015bea:	2380      	movs	r3, #128	@ 0x80
 8015bec:	025b      	lsls	r3, r3, #9
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d103      	bne.n	8015bfa <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8015bf2:	f000 f809 	bl	8015c08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	e000      	b.n	8015bfc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8015bfa:	2300      	movs	r3, #0
}
 8015bfc:	0018      	movs	r0, r3
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	b004      	add	sp, #16
 8015c02:	bd80      	pop	{r7, pc}
 8015c04:	40022000 	.word	0x40022000

08015c08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8015c12:	4b49      	ldr	r3, [pc, #292]	@ (8015d38 <FLASH_SetErrorCode+0x130>)
 8015c14:	699a      	ldr	r2, [r3, #24]
 8015c16:	2380      	movs	r3, #128	@ 0x80
 8015c18:	005b      	lsls	r3, r3, #1
 8015c1a:	401a      	ands	r2, r3
 8015c1c:	2380      	movs	r3, #128	@ 0x80
 8015c1e:	005b      	lsls	r3, r3, #1
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d10a      	bne.n	8015c3a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8015c24:	4b45      	ldr	r3, [pc, #276]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015c26:	695b      	ldr	r3, [r3, #20]
 8015c28:	2202      	movs	r2, #2
 8015c2a:	431a      	orrs	r2, r3
 8015c2c:	4b43      	ldr	r3, [pc, #268]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015c2e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2280      	movs	r2, #128	@ 0x80
 8015c34:	0052      	lsls	r2, r2, #1
 8015c36:	4313      	orrs	r3, r2
 8015c38:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8015c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8015d38 <FLASH_SetErrorCode+0x130>)
 8015c3c:	699a      	ldr	r2, [r3, #24]
 8015c3e:	2380      	movs	r3, #128	@ 0x80
 8015c40:	009b      	lsls	r3, r3, #2
 8015c42:	401a      	ands	r2, r3
 8015c44:	2380      	movs	r3, #128	@ 0x80
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d10a      	bne.n	8015c62 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8015c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015c4e:	695b      	ldr	r3, [r3, #20]
 8015c50:	2201      	movs	r2, #1
 8015c52:	431a      	orrs	r2, r3
 8015c54:	4b39      	ldr	r3, [pc, #228]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015c56:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	2280      	movs	r2, #128	@ 0x80
 8015c5c:	0092      	lsls	r2, r2, #2
 8015c5e:	4313      	orrs	r3, r2
 8015c60:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8015c62:	4b35      	ldr	r3, [pc, #212]	@ (8015d38 <FLASH_SetErrorCode+0x130>)
 8015c64:	699a      	ldr	r2, [r3, #24]
 8015c66:	2380      	movs	r3, #128	@ 0x80
 8015c68:	00db      	lsls	r3, r3, #3
 8015c6a:	401a      	ands	r2, r3
 8015c6c:	2380      	movs	r3, #128	@ 0x80
 8015c6e:	00db      	lsls	r3, r3, #3
 8015c70:	429a      	cmp	r2, r3
 8015c72:	d10a      	bne.n	8015c8a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8015c74:	4b31      	ldr	r3, [pc, #196]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015c76:	695b      	ldr	r3, [r3, #20]
 8015c78:	2208      	movs	r2, #8
 8015c7a:	431a      	orrs	r2, r3
 8015c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015c7e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2280      	movs	r2, #128	@ 0x80
 8015c84:	00d2      	lsls	r2, r2, #3
 8015c86:	4313      	orrs	r3, r2
 8015c88:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8015c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8015d38 <FLASH_SetErrorCode+0x130>)
 8015c8c:	699a      	ldr	r2, [r3, #24]
 8015c8e:	2380      	movs	r3, #128	@ 0x80
 8015c90:	011b      	lsls	r3, r3, #4
 8015c92:	401a      	ands	r2, r3
 8015c94:	2380      	movs	r3, #128	@ 0x80
 8015c96:	011b      	lsls	r3, r3, #4
 8015c98:	429a      	cmp	r2, r3
 8015c9a:	d10a      	bne.n	8015cb2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8015c9c:	4b27      	ldr	r3, [pc, #156]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015c9e:	695b      	ldr	r3, [r3, #20]
 8015ca0:	2204      	movs	r2, #4
 8015ca2:	431a      	orrs	r2, r3
 8015ca4:	4b25      	ldr	r3, [pc, #148]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015ca6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	2280      	movs	r2, #128	@ 0x80
 8015cac:	0112      	lsls	r2, r2, #4
 8015cae:	4313      	orrs	r3, r2
 8015cb0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8015cb2:	4b21      	ldr	r3, [pc, #132]	@ (8015d38 <FLASH_SetErrorCode+0x130>)
 8015cb4:	699a      	ldr	r2, [r3, #24]
 8015cb6:	2380      	movs	r3, #128	@ 0x80
 8015cb8:	019b      	lsls	r3, r3, #6
 8015cba:	401a      	ands	r2, r3
 8015cbc:	2380      	movs	r3, #128	@ 0x80
 8015cbe:	019b      	lsls	r3, r3, #6
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d10a      	bne.n	8015cda <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8015cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015cc6:	695b      	ldr	r3, [r3, #20]
 8015cc8:	2210      	movs	r2, #16
 8015cca:	431a      	orrs	r2, r3
 8015ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015cce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2280      	movs	r2, #128	@ 0x80
 8015cd4:	0192      	lsls	r2, r2, #6
 8015cd6:	4313      	orrs	r3, r2
 8015cd8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8015cda:	4b17      	ldr	r3, [pc, #92]	@ (8015d38 <FLASH_SetErrorCode+0x130>)
 8015cdc:	699a      	ldr	r2, [r3, #24]
 8015cde:	2380      	movs	r3, #128	@ 0x80
 8015ce0:	029b      	lsls	r3, r3, #10
 8015ce2:	401a      	ands	r2, r3
 8015ce4:	2380      	movs	r3, #128	@ 0x80
 8015ce6:	029b      	lsls	r3, r3, #10
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d109      	bne.n	8015d00 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8015cec:	4b13      	ldr	r3, [pc, #76]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015cee:	695b      	ldr	r3, [r3, #20]
 8015cf0:	2220      	movs	r2, #32
 8015cf2:	431a      	orrs	r2, r3
 8015cf4:	4b11      	ldr	r3, [pc, #68]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015cf6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2220      	movs	r2, #32
 8015cfc:	4313      	orrs	r3, r2
 8015cfe:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8015d00:	4b0d      	ldr	r3, [pc, #52]	@ (8015d38 <FLASH_SetErrorCode+0x130>)
 8015d02:	699a      	ldr	r2, [r3, #24]
 8015d04:	2380      	movs	r3, #128	@ 0x80
 8015d06:	025b      	lsls	r3, r3, #9
 8015d08:	401a      	ands	r2, r3
 8015d0a:	2380      	movs	r3, #128	@ 0x80
 8015d0c:	025b      	lsls	r3, r3, #9
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d10a      	bne.n	8015d28 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8015d12:	4b0a      	ldr	r3, [pc, #40]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015d14:	695b      	ldr	r3, [r3, #20]
 8015d16:	2240      	movs	r2, #64	@ 0x40
 8015d18:	431a      	orrs	r2, r3
 8015d1a:	4b08      	ldr	r3, [pc, #32]	@ (8015d3c <FLASH_SetErrorCode+0x134>)
 8015d1c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2280      	movs	r2, #128	@ 0x80
 8015d22:	0252      	lsls	r2, r2, #9
 8015d24:	4313      	orrs	r3, r2
 8015d26:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8015d28:	4b03      	ldr	r3, [pc, #12]	@ (8015d38 <FLASH_SetErrorCode+0x130>)
 8015d2a:	687a      	ldr	r2, [r7, #4]
 8015d2c:	619a      	str	r2, [r3, #24]
}  
 8015d2e:	46c0      	nop			@ (mov r8, r8)
 8015d30:	46bd      	mov	sp, r7
 8015d32:	b002      	add	sp, #8
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	46c0      	nop			@ (mov r8, r8)
 8015d38:	40022000 	.word	0x40022000
 8015d3c:	20002530 	.word	0x20002530

08015d40 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b084      	sub	sp, #16
 8015d44:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8015d46:	4b12      	ldr	r3, [pc, #72]	@ (8015d90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	2201      	movs	r2, #1
 8015d4c:	4013      	ands	r3, r2
 8015d4e:	d019      	beq.n	8015d84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d50:	f3ef 8310 	mrs	r3, PRIMASK
 8015d54:	607b      	str	r3, [r7, #4]
  return(result);
 8015d56:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8015d58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015d5a:	b672      	cpsid	i
}
 8015d5c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8015d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8015d90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015d60:	4a0c      	ldr	r2, [pc, #48]	@ (8015d94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8015d62:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8015d64:	4b0a      	ldr	r3, [pc, #40]	@ (8015d90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015d66:	4a0c      	ldr	r2, [pc, #48]	@ (8015d98 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8015d68:	60da      	str	r2, [r3, #12]
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d6e:	68bb      	ldr	r3, [r7, #8]
 8015d70:	f383 8810 	msr	PRIMASK, r3
}
 8015d74:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8015d76:	4b06      	ldr	r3, [pc, #24]	@ (8015d90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	2201      	movs	r2, #1
 8015d7c:	4013      	ands	r3, r2
 8015d7e:	d001      	beq.n	8015d84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8015d80:	2301      	movs	r3, #1
 8015d82:	e000      	b.n	8015d86 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8015d84:	2300      	movs	r3, #0
}
 8015d86:	0018      	movs	r0, r3
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	b004      	add	sp, #16
 8015d8c:	bd80      	pop	{r7, pc}
 8015d8e:	46c0      	nop			@ (mov r8, r8)
 8015d90:	40022000 	.word	0x40022000
 8015d94:	89abcdef 	.word	0x89abcdef
 8015d98:	02030405 	.word	0x02030405

08015d9c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8015da0:	4b04      	ldr	r3, [pc, #16]	@ (8015db4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015da2:	685a      	ldr	r2, [r3, #4]
 8015da4:	4b03      	ldr	r3, [pc, #12]	@ (8015db4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015da6:	2101      	movs	r1, #1
 8015da8:	430a      	orrs	r2, r1
 8015daa:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8015dac:	2300      	movs	r3, #0
}
 8015dae:	0018      	movs	r0, r3
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}
 8015db4:	40022000 	.word	0x40022000

08015db8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8015db8:	b5b0      	push	{r4, r5, r7, lr}
 8015dba:	b084      	sub	sp, #16
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015dc0:	250f      	movs	r5, #15
 8015dc2:	197b      	adds	r3, r7, r5
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015dc8:	197c      	adds	r4, r7, r5
 8015dca:	4b0f      	ldr	r3, [pc, #60]	@ (8015e08 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015dcc:	0018      	movs	r0, r3
 8015dce:	f7ff fea9 	bl	8015b24 <FLASH_WaitForLastOperation>
 8015dd2:	0003      	movs	r3, r0
 8015dd4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015dd6:	0029      	movs	r1, r5
 8015dd8:	187b      	adds	r3, r7, r1
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d10c      	bne.n	8015dfa <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015de0:	4b0a      	ldr	r3, [pc, #40]	@ (8015e0c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8015de2:	2200      	movs	r2, #0
 8015de4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	2200      	movs	r2, #0
 8015dea:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015dec:	187c      	adds	r4, r7, r1
 8015dee:	4b06      	ldr	r3, [pc, #24]	@ (8015e08 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015df0:	0018      	movs	r0, r3
 8015df2:	f7ff fe97 	bl	8015b24 <FLASH_WaitForLastOperation>
 8015df6:	0003      	movs	r3, r0
 8015df8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8015dfa:	230f      	movs	r3, #15
 8015dfc:	18fb      	adds	r3, r7, r3
 8015dfe:	781b      	ldrb	r3, [r3, #0]
}  
 8015e00:	0018      	movs	r0, r3
 8015e02:	46bd      	mov	sp, r7
 8015e04:	b004      	add	sp, #16
 8015e06:	bdb0      	pop	{r4, r5, r7, pc}
 8015e08:	0000c350 	.word	0x0000c350
 8015e0c:	20002530 	.word	0x20002530

08015e10 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8015e10:	b5b0      	push	{r4, r5, r7, lr}
 8015e12:	b086      	sub	sp, #24
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	60f8      	str	r0, [r7, #12]
 8015e18:	60b9      	str	r1, [r7, #8]
 8015e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015e1c:	2317      	movs	r3, #23
 8015e1e:	18fb      	adds	r3, r7, r3
 8015e20:	2201      	movs	r2, #1
 8015e22:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015e24:	4b24      	ldr	r3, [pc, #144]	@ (8015eb8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015e26:	7c1b      	ldrb	r3, [r3, #16]
 8015e28:	2b01      	cmp	r3, #1
 8015e2a:	d101      	bne.n	8015e30 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8015e2c:	2302      	movs	r3, #2
 8015e2e:	e03e      	b.n	8015eae <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8015e30:	4b21      	ldr	r3, [pc, #132]	@ (8015eb8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015e32:	2201      	movs	r2, #1
 8015e34:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015e36:	2517      	movs	r5, #23
 8015e38:	197c      	adds	r4, r7, r5
 8015e3a:	4b20      	ldr	r3, [pc, #128]	@ (8015ebc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015e3c:	0018      	movs	r0, r3
 8015e3e:	f7ff fe71 	bl	8015b24 <FLASH_WaitForLastOperation>
 8015e42:	0003      	movs	r3, r0
 8015e44:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015e46:	197b      	adds	r3, r7, r5
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d129      	bne.n	8015ea2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8015eb8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015e50:	2200      	movs	r2, #0
 8015e52:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	2b02      	cmp	r3, #2
 8015e58:	d103      	bne.n	8015e62 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8015e5a:	68bb      	ldr	r3, [r7, #8]
 8015e5c:	687a      	ldr	r2, [r7, #4]
 8015e5e:	601a      	str	r2, [r3, #0]
 8015e60:	e013      	b.n	8015e8a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	2b01      	cmp	r3, #1
 8015e66:	d104      	bne.n	8015e72 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	687a      	ldr	r2, [r7, #4]
 8015e6c:	b292      	uxth	r2, r2
 8015e6e:	801a      	strh	r2, [r3, #0]
 8015e70:	e00b      	b.n	8015e8a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d104      	bne.n	8015e82 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	687a      	ldr	r2, [r7, #4]
 8015e7c:	b2d2      	uxtb	r2, r2
 8015e7e:	701a      	strb	r2, [r3, #0]
 8015e80:	e003      	b.n	8015e8a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8015e82:	2317      	movs	r3, #23
 8015e84:	18fb      	adds	r3, r7, r3
 8015e86:	2201      	movs	r2, #1
 8015e88:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8015e8a:	2217      	movs	r2, #23
 8015e8c:	18bb      	adds	r3, r7, r2
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d106      	bne.n	8015ea2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015e94:	18bc      	adds	r4, r7, r2
 8015e96:	4b09      	ldr	r3, [pc, #36]	@ (8015ebc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015e98:	0018      	movs	r0, r3
 8015e9a:	f7ff fe43 	bl	8015b24 <FLASH_WaitForLastOperation>
 8015e9e:	0003      	movs	r3, r0
 8015ea0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015ea2:	4b05      	ldr	r3, [pc, #20]	@ (8015eb8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	741a      	strb	r2, [r3, #16]

  return status;
 8015ea8:	2317      	movs	r3, #23
 8015eaa:	18fb      	adds	r3, r7, r3
 8015eac:	781b      	ldrb	r3, [r3, #0]
}
 8015eae:	0018      	movs	r0, r3
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	b006      	add	sp, #24
 8015eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8015eb6:	46c0      	nop			@ (mov r8, r8)
 8015eb8:	20002530 	.word	0x20002530
 8015ebc:	0000c350 	.word	0x0000c350

08015ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b086      	sub	sp, #24
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
 8015ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015ed6:	e155      	b.n	8016184 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2101      	movs	r1, #1
 8015ede:	697a      	ldr	r2, [r7, #20]
 8015ee0:	4091      	lsls	r1, r2
 8015ee2:	000a      	movs	r2, r1
 8015ee4:	4013      	ands	r3, r2
 8015ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d100      	bne.n	8015ef0 <HAL_GPIO_Init+0x30>
 8015eee:	e146      	b.n	801617e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	685b      	ldr	r3, [r3, #4]
 8015ef4:	2203      	movs	r2, #3
 8015ef6:	4013      	ands	r3, r2
 8015ef8:	2b01      	cmp	r3, #1
 8015efa:	d005      	beq.n	8015f08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	2203      	movs	r2, #3
 8015f02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015f04:	2b02      	cmp	r3, #2
 8015f06:	d130      	bne.n	8015f6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	689b      	ldr	r3, [r3, #8]
 8015f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015f0e:	697b      	ldr	r3, [r7, #20]
 8015f10:	005b      	lsls	r3, r3, #1
 8015f12:	2203      	movs	r2, #3
 8015f14:	409a      	lsls	r2, r3
 8015f16:	0013      	movs	r3, r2
 8015f18:	43da      	mvns	r2, r3
 8015f1a:	693b      	ldr	r3, [r7, #16]
 8015f1c:	4013      	ands	r3, r2
 8015f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	68da      	ldr	r2, [r3, #12]
 8015f24:	697b      	ldr	r3, [r7, #20]
 8015f26:	005b      	lsls	r3, r3, #1
 8015f28:	409a      	lsls	r2, r3
 8015f2a:	0013      	movs	r3, r2
 8015f2c:	693a      	ldr	r2, [r7, #16]
 8015f2e:	4313      	orrs	r3, r2
 8015f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	693a      	ldr	r2, [r7, #16]
 8015f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015f3e:	2201      	movs	r2, #1
 8015f40:	697b      	ldr	r3, [r7, #20]
 8015f42:	409a      	lsls	r2, r3
 8015f44:	0013      	movs	r3, r2
 8015f46:	43da      	mvns	r2, r3
 8015f48:	693b      	ldr	r3, [r7, #16]
 8015f4a:	4013      	ands	r3, r2
 8015f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	685b      	ldr	r3, [r3, #4]
 8015f52:	091b      	lsrs	r3, r3, #4
 8015f54:	2201      	movs	r2, #1
 8015f56:	401a      	ands	r2, r3
 8015f58:	697b      	ldr	r3, [r7, #20]
 8015f5a:	409a      	lsls	r2, r3
 8015f5c:	0013      	movs	r3, r2
 8015f5e:	693a      	ldr	r2, [r7, #16]
 8015f60:	4313      	orrs	r3, r2
 8015f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	693a      	ldr	r2, [r7, #16]
 8015f68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015f6a:	683b      	ldr	r3, [r7, #0]
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	2203      	movs	r2, #3
 8015f70:	4013      	ands	r3, r2
 8015f72:	2b03      	cmp	r3, #3
 8015f74:	d017      	beq.n	8015fa6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015f7c:	697b      	ldr	r3, [r7, #20]
 8015f7e:	005b      	lsls	r3, r3, #1
 8015f80:	2203      	movs	r2, #3
 8015f82:	409a      	lsls	r2, r3
 8015f84:	0013      	movs	r3, r2
 8015f86:	43da      	mvns	r2, r3
 8015f88:	693b      	ldr	r3, [r7, #16]
 8015f8a:	4013      	ands	r3, r2
 8015f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	689a      	ldr	r2, [r3, #8]
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	005b      	lsls	r3, r3, #1
 8015f96:	409a      	lsls	r2, r3
 8015f98:	0013      	movs	r3, r2
 8015f9a:	693a      	ldr	r2, [r7, #16]
 8015f9c:	4313      	orrs	r3, r2
 8015f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	693a      	ldr	r2, [r7, #16]
 8015fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	2203      	movs	r2, #3
 8015fac:	4013      	ands	r3, r2
 8015fae:	2b02      	cmp	r3, #2
 8015fb0:	d123      	bne.n	8015ffa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	08da      	lsrs	r2, r3, #3
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	3208      	adds	r2, #8
 8015fba:	0092      	lsls	r2, r2, #2
 8015fbc:	58d3      	ldr	r3, [r2, r3]
 8015fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	2207      	movs	r2, #7
 8015fc4:	4013      	ands	r3, r2
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	220f      	movs	r2, #15
 8015fca:	409a      	lsls	r2, r3
 8015fcc:	0013      	movs	r3, r2
 8015fce:	43da      	mvns	r2, r3
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	4013      	ands	r3, r2
 8015fd4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	691a      	ldr	r2, [r3, #16]
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	2107      	movs	r1, #7
 8015fde:	400b      	ands	r3, r1
 8015fe0:	009b      	lsls	r3, r3, #2
 8015fe2:	409a      	lsls	r2, r3
 8015fe4:	0013      	movs	r3, r2
 8015fe6:	693a      	ldr	r2, [r7, #16]
 8015fe8:	4313      	orrs	r3, r2
 8015fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015fec:	697b      	ldr	r3, [r7, #20]
 8015fee:	08da      	lsrs	r2, r3, #3
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	3208      	adds	r2, #8
 8015ff4:	0092      	lsls	r2, r2, #2
 8015ff6:	6939      	ldr	r1, [r7, #16]
 8015ff8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	005b      	lsls	r3, r3, #1
 8016004:	2203      	movs	r2, #3
 8016006:	409a      	lsls	r2, r3
 8016008:	0013      	movs	r3, r2
 801600a:	43da      	mvns	r2, r3
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	4013      	ands	r3, r2
 8016010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	2203      	movs	r2, #3
 8016018:	401a      	ands	r2, r3
 801601a:	697b      	ldr	r3, [r7, #20]
 801601c:	005b      	lsls	r3, r3, #1
 801601e:	409a      	lsls	r2, r3
 8016020:	0013      	movs	r3, r2
 8016022:	693a      	ldr	r2, [r7, #16]
 8016024:	4313      	orrs	r3, r2
 8016026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	693a      	ldr	r2, [r7, #16]
 801602c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	685a      	ldr	r2, [r3, #4]
 8016032:	23c0      	movs	r3, #192	@ 0xc0
 8016034:	029b      	lsls	r3, r3, #10
 8016036:	4013      	ands	r3, r2
 8016038:	d100      	bne.n	801603c <HAL_GPIO_Init+0x17c>
 801603a:	e0a0      	b.n	801617e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801603c:	4b57      	ldr	r3, [pc, #348]	@ (801619c <HAL_GPIO_Init+0x2dc>)
 801603e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016040:	4b56      	ldr	r3, [pc, #344]	@ (801619c <HAL_GPIO_Init+0x2dc>)
 8016042:	2101      	movs	r1, #1
 8016044:	430a      	orrs	r2, r1
 8016046:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8016048:	4a55      	ldr	r2, [pc, #340]	@ (80161a0 <HAL_GPIO_Init+0x2e0>)
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	089b      	lsrs	r3, r3, #2
 801604e:	3302      	adds	r3, #2
 8016050:	009b      	lsls	r3, r3, #2
 8016052:	589b      	ldr	r3, [r3, r2]
 8016054:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	2203      	movs	r2, #3
 801605a:	4013      	ands	r3, r2
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	220f      	movs	r2, #15
 8016060:	409a      	lsls	r2, r3
 8016062:	0013      	movs	r3, r2
 8016064:	43da      	mvns	r2, r3
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	4013      	ands	r3, r2
 801606a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 801606c:	687a      	ldr	r2, [r7, #4]
 801606e:	23a0      	movs	r3, #160	@ 0xa0
 8016070:	05db      	lsls	r3, r3, #23
 8016072:	429a      	cmp	r2, r3
 8016074:	d01f      	beq.n	80160b6 <HAL_GPIO_Init+0x1f6>
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	4a4a      	ldr	r2, [pc, #296]	@ (80161a4 <HAL_GPIO_Init+0x2e4>)
 801607a:	4293      	cmp	r3, r2
 801607c:	d019      	beq.n	80160b2 <HAL_GPIO_Init+0x1f2>
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	4a49      	ldr	r2, [pc, #292]	@ (80161a8 <HAL_GPIO_Init+0x2e8>)
 8016082:	4293      	cmp	r3, r2
 8016084:	d013      	beq.n	80160ae <HAL_GPIO_Init+0x1ee>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	4a48      	ldr	r2, [pc, #288]	@ (80161ac <HAL_GPIO_Init+0x2ec>)
 801608a:	4293      	cmp	r3, r2
 801608c:	d00d      	beq.n	80160aa <HAL_GPIO_Init+0x1ea>
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	4a47      	ldr	r2, [pc, #284]	@ (80161b0 <HAL_GPIO_Init+0x2f0>)
 8016092:	4293      	cmp	r3, r2
 8016094:	d007      	beq.n	80160a6 <HAL_GPIO_Init+0x1e6>
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	4a46      	ldr	r2, [pc, #280]	@ (80161b4 <HAL_GPIO_Init+0x2f4>)
 801609a:	4293      	cmp	r3, r2
 801609c:	d101      	bne.n	80160a2 <HAL_GPIO_Init+0x1e2>
 801609e:	2305      	movs	r3, #5
 80160a0:	e00a      	b.n	80160b8 <HAL_GPIO_Init+0x1f8>
 80160a2:	2306      	movs	r3, #6
 80160a4:	e008      	b.n	80160b8 <HAL_GPIO_Init+0x1f8>
 80160a6:	2304      	movs	r3, #4
 80160a8:	e006      	b.n	80160b8 <HAL_GPIO_Init+0x1f8>
 80160aa:	2303      	movs	r3, #3
 80160ac:	e004      	b.n	80160b8 <HAL_GPIO_Init+0x1f8>
 80160ae:	2302      	movs	r3, #2
 80160b0:	e002      	b.n	80160b8 <HAL_GPIO_Init+0x1f8>
 80160b2:	2301      	movs	r3, #1
 80160b4:	e000      	b.n	80160b8 <HAL_GPIO_Init+0x1f8>
 80160b6:	2300      	movs	r3, #0
 80160b8:	697a      	ldr	r2, [r7, #20]
 80160ba:	2103      	movs	r1, #3
 80160bc:	400a      	ands	r2, r1
 80160be:	0092      	lsls	r2, r2, #2
 80160c0:	4093      	lsls	r3, r2
 80160c2:	693a      	ldr	r2, [r7, #16]
 80160c4:	4313      	orrs	r3, r2
 80160c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80160c8:	4935      	ldr	r1, [pc, #212]	@ (80161a0 <HAL_GPIO_Init+0x2e0>)
 80160ca:	697b      	ldr	r3, [r7, #20]
 80160cc:	089b      	lsrs	r3, r3, #2
 80160ce:	3302      	adds	r3, #2
 80160d0:	009b      	lsls	r3, r3, #2
 80160d2:	693a      	ldr	r2, [r7, #16]
 80160d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80160d6:	4b38      	ldr	r3, [pc, #224]	@ (80161b8 <HAL_GPIO_Init+0x2f8>)
 80160d8:	689b      	ldr	r3, [r3, #8]
 80160da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	43da      	mvns	r2, r3
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	4013      	ands	r3, r2
 80160e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	685a      	ldr	r2, [r3, #4]
 80160ea:	2380      	movs	r3, #128	@ 0x80
 80160ec:	035b      	lsls	r3, r3, #13
 80160ee:	4013      	ands	r3, r2
 80160f0:	d003      	beq.n	80160fa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80160f2:	693a      	ldr	r2, [r7, #16]
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	4313      	orrs	r3, r2
 80160f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80160fa:	4b2f      	ldr	r3, [pc, #188]	@ (80161b8 <HAL_GPIO_Init+0x2f8>)
 80160fc:	693a      	ldr	r2, [r7, #16]
 80160fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8016100:	4b2d      	ldr	r3, [pc, #180]	@ (80161b8 <HAL_GPIO_Init+0x2f8>)
 8016102:	68db      	ldr	r3, [r3, #12]
 8016104:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	43da      	mvns	r2, r3
 801610a:	693b      	ldr	r3, [r7, #16]
 801610c:	4013      	ands	r3, r2
 801610e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	685a      	ldr	r2, [r3, #4]
 8016114:	2380      	movs	r3, #128	@ 0x80
 8016116:	039b      	lsls	r3, r3, #14
 8016118:	4013      	ands	r3, r2
 801611a:	d003      	beq.n	8016124 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 801611c:	693a      	ldr	r2, [r7, #16]
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	4313      	orrs	r3, r2
 8016122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8016124:	4b24      	ldr	r3, [pc, #144]	@ (80161b8 <HAL_GPIO_Init+0x2f8>)
 8016126:	693a      	ldr	r2, [r7, #16]
 8016128:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 801612a:	4b23      	ldr	r3, [pc, #140]	@ (80161b8 <HAL_GPIO_Init+0x2f8>)
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	43da      	mvns	r2, r3
 8016134:	693b      	ldr	r3, [r7, #16]
 8016136:	4013      	ands	r3, r2
 8016138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	685a      	ldr	r2, [r3, #4]
 801613e:	2380      	movs	r3, #128	@ 0x80
 8016140:	029b      	lsls	r3, r3, #10
 8016142:	4013      	ands	r3, r2
 8016144:	d003      	beq.n	801614e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8016146:	693a      	ldr	r2, [r7, #16]
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	4313      	orrs	r3, r2
 801614c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801614e:	4b1a      	ldr	r3, [pc, #104]	@ (80161b8 <HAL_GPIO_Init+0x2f8>)
 8016150:	693a      	ldr	r2, [r7, #16]
 8016152:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016154:	4b18      	ldr	r3, [pc, #96]	@ (80161b8 <HAL_GPIO_Init+0x2f8>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	43da      	mvns	r2, r3
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	4013      	ands	r3, r2
 8016162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	685a      	ldr	r2, [r3, #4]
 8016168:	2380      	movs	r3, #128	@ 0x80
 801616a:	025b      	lsls	r3, r3, #9
 801616c:	4013      	ands	r3, r2
 801616e:	d003      	beq.n	8016178 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8016170:	693a      	ldr	r2, [r7, #16]
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	4313      	orrs	r3, r2
 8016176:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8016178:	4b0f      	ldr	r3, [pc, #60]	@ (80161b8 <HAL_GPIO_Init+0x2f8>)
 801617a:	693a      	ldr	r2, [r7, #16]
 801617c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801617e:	697b      	ldr	r3, [r7, #20]
 8016180:	3301      	adds	r3, #1
 8016182:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	681a      	ldr	r2, [r3, #0]
 8016188:	697b      	ldr	r3, [r7, #20]
 801618a:	40da      	lsrs	r2, r3
 801618c:	1e13      	subs	r3, r2, #0
 801618e:	d000      	beq.n	8016192 <HAL_GPIO_Init+0x2d2>
 8016190:	e6a2      	b.n	8015ed8 <HAL_GPIO_Init+0x18>
  }
}
 8016192:	46c0      	nop			@ (mov r8, r8)
 8016194:	46c0      	nop			@ (mov r8, r8)
 8016196:	46bd      	mov	sp, r7
 8016198:	b006      	add	sp, #24
 801619a:	bd80      	pop	{r7, pc}
 801619c:	40021000 	.word	0x40021000
 80161a0:	40010000 	.word	0x40010000
 80161a4:	50000400 	.word	0x50000400
 80161a8:	50000800 	.word	0x50000800
 80161ac:	50000c00 	.word	0x50000c00
 80161b0:	50001000 	.word	0x50001000
 80161b4:	50001c00 	.word	0x50001c00
 80161b8:	40010400 	.word	0x40010400

080161bc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b084      	sub	sp, #16
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
 80161c4:	000a      	movs	r2, r1
 80161c6:	1cbb      	adds	r3, r7, #2
 80161c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	691b      	ldr	r3, [r3, #16]
 80161ce:	1cba      	adds	r2, r7, #2
 80161d0:	8812      	ldrh	r2, [r2, #0]
 80161d2:	4013      	ands	r3, r2
 80161d4:	d004      	beq.n	80161e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80161d6:	230f      	movs	r3, #15
 80161d8:	18fb      	adds	r3, r7, r3
 80161da:	2201      	movs	r2, #1
 80161dc:	701a      	strb	r2, [r3, #0]
 80161de:	e003      	b.n	80161e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80161e0:	230f      	movs	r3, #15
 80161e2:	18fb      	adds	r3, r7, r3
 80161e4:	2200      	movs	r2, #0
 80161e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80161e8:	230f      	movs	r3, #15
 80161ea:	18fb      	adds	r3, r7, r3
 80161ec:	781b      	ldrb	r3, [r3, #0]
}
 80161ee:	0018      	movs	r0, r3
 80161f0:	46bd      	mov	sp, r7
 80161f2:	b004      	add	sp, #16
 80161f4:	bd80      	pop	{r7, pc}

080161f6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80161f6:	b580      	push	{r7, lr}
 80161f8:	b082      	sub	sp, #8
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	6078      	str	r0, [r7, #4]
 80161fe:	0008      	movs	r0, r1
 8016200:	0011      	movs	r1, r2
 8016202:	1cbb      	adds	r3, r7, #2
 8016204:	1c02      	adds	r2, r0, #0
 8016206:	801a      	strh	r2, [r3, #0]
 8016208:	1c7b      	adds	r3, r7, #1
 801620a:	1c0a      	adds	r2, r1, #0
 801620c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801620e:	1c7b      	adds	r3, r7, #1
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d004      	beq.n	8016220 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016216:	1cbb      	adds	r3, r7, #2
 8016218:	881a      	ldrh	r2, [r3, #0]
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801621e:	e003      	b.n	8016228 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8016220:	1cbb      	adds	r3, r7, #2
 8016222:	881a      	ldrh	r2, [r3, #0]
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8016228:	46c0      	nop			@ (mov r8, r8)
 801622a:	46bd      	mov	sp, r7
 801622c:	b002      	add	sp, #8
 801622e:	bd80      	pop	{r7, pc}

08016230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	af00      	add	r7, sp, #0
 8016236:	0002      	movs	r2, r0
 8016238:	1dbb      	adds	r3, r7, #6
 801623a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801623c:	4b09      	ldr	r3, [pc, #36]	@ (8016264 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801623e:	695b      	ldr	r3, [r3, #20]
 8016240:	1dba      	adds	r2, r7, #6
 8016242:	8812      	ldrh	r2, [r2, #0]
 8016244:	4013      	ands	r3, r2
 8016246:	d008      	beq.n	801625a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8016248:	4b06      	ldr	r3, [pc, #24]	@ (8016264 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801624a:	1dba      	adds	r2, r7, #6
 801624c:	8812      	ldrh	r2, [r2, #0]
 801624e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8016250:	1dbb      	adds	r3, r7, #6
 8016252:	881b      	ldrh	r3, [r3, #0]
 8016254:	0018      	movs	r0, r3
 8016256:	f7f7 fa5f 	bl	800d718 <HAL_GPIO_EXTI_Callback>
  }
}
 801625a:	46c0      	nop			@ (mov r8, r8)
 801625c:	46bd      	mov	sp, r7
 801625e:	b002      	add	sp, #8
 8016260:	bd80      	pop	{r7, pc}
 8016262:	46c0      	nop			@ (mov r8, r8)
 8016264:	40010400 	.word	0x40010400

08016268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d101      	bne.n	801627a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016276:	2301      	movs	r3, #1
 8016278:	e082      	b.n	8016380 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2241      	movs	r2, #65	@ 0x41
 801627e:	5c9b      	ldrb	r3, [r3, r2]
 8016280:	b2db      	uxtb	r3, r3
 8016282:	2b00      	cmp	r3, #0
 8016284:	d107      	bne.n	8016296 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2240      	movs	r2, #64	@ 0x40
 801628a:	2100      	movs	r1, #0
 801628c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	0018      	movs	r0, r3
 8016292:	f7f6 fcc5 	bl	800cc20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2241      	movs	r2, #65	@ 0x41
 801629a:	2124      	movs	r1, #36	@ 0x24
 801629c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	681a      	ldr	r2, [r3, #0]
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	2101      	movs	r1, #1
 80162aa:	438a      	bics	r2, r1
 80162ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	685a      	ldr	r2, [r3, #4]
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	4934      	ldr	r1, [pc, #208]	@ (8016388 <HAL_I2C_Init+0x120>)
 80162b8:	400a      	ands	r2, r1
 80162ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	689a      	ldr	r2, [r3, #8]
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	4931      	ldr	r1, [pc, #196]	@ (801638c <HAL_I2C_Init+0x124>)
 80162c8:	400a      	ands	r2, r1
 80162ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	68db      	ldr	r3, [r3, #12]
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d108      	bne.n	80162e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	689a      	ldr	r2, [r3, #8]
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	2180      	movs	r1, #128	@ 0x80
 80162de:	0209      	lsls	r1, r1, #8
 80162e0:	430a      	orrs	r2, r1
 80162e2:	609a      	str	r2, [r3, #8]
 80162e4:	e007      	b.n	80162f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	689a      	ldr	r2, [r3, #8]
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	2184      	movs	r1, #132	@ 0x84
 80162f0:	0209      	lsls	r1, r1, #8
 80162f2:	430a      	orrs	r2, r1
 80162f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	68db      	ldr	r3, [r3, #12]
 80162fa:	2b02      	cmp	r3, #2
 80162fc:	d104      	bne.n	8016308 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	2280      	movs	r2, #128	@ 0x80
 8016304:	0112      	lsls	r2, r2, #4
 8016306:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	685a      	ldr	r2, [r3, #4]
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	491f      	ldr	r1, [pc, #124]	@ (8016390 <HAL_I2C_Init+0x128>)
 8016314:	430a      	orrs	r2, r1
 8016316:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	68da      	ldr	r2, [r3, #12]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	491a      	ldr	r1, [pc, #104]	@ (801638c <HAL_I2C_Init+0x124>)
 8016324:	400a      	ands	r2, r1
 8016326:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	691a      	ldr	r2, [r3, #16]
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	695b      	ldr	r3, [r3, #20]
 8016330:	431a      	orrs	r2, r3
 8016332:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	699b      	ldr	r3, [r3, #24]
 8016338:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	430a      	orrs	r2, r1
 8016340:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	69d9      	ldr	r1, [r3, #28]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	6a1a      	ldr	r2, [r3, #32]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	430a      	orrs	r2, r1
 8016350:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	2101      	movs	r1, #1
 801635e:	430a      	orrs	r2, r1
 8016360:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2200      	movs	r2, #0
 8016366:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2241      	movs	r2, #65	@ 0x41
 801636c:	2120      	movs	r1, #32
 801636e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	2200      	movs	r2, #0
 8016374:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2242      	movs	r2, #66	@ 0x42
 801637a:	2100      	movs	r1, #0
 801637c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801637e:	2300      	movs	r3, #0
}
 8016380:	0018      	movs	r0, r3
 8016382:	46bd      	mov	sp, r7
 8016384:	b002      	add	sp, #8
 8016386:	bd80      	pop	{r7, pc}
 8016388:	f0ffffff 	.word	0xf0ffffff
 801638c:	ffff7fff 	.word	0xffff7fff
 8016390:	02008000 	.word	0x02008000

08016394 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8016394:	b590      	push	{r4, r7, lr}
 8016396:	b089      	sub	sp, #36	@ 0x24
 8016398:	af02      	add	r7, sp, #8
 801639a:	60f8      	str	r0, [r7, #12]
 801639c:	0008      	movs	r0, r1
 801639e:	607a      	str	r2, [r7, #4]
 80163a0:	0019      	movs	r1, r3
 80163a2:	230a      	movs	r3, #10
 80163a4:	18fb      	adds	r3, r7, r3
 80163a6:	1c02      	adds	r2, r0, #0
 80163a8:	801a      	strh	r2, [r3, #0]
 80163aa:	2308      	movs	r3, #8
 80163ac:	18fb      	adds	r3, r7, r3
 80163ae:	1c0a      	adds	r2, r1, #0
 80163b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	2241      	movs	r2, #65	@ 0x41
 80163b6:	5c9b      	ldrb	r3, [r3, r2]
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	2b20      	cmp	r3, #32
 80163bc:	d000      	beq.n	80163c0 <HAL_I2C_Master_Transmit+0x2c>
 80163be:	e0e7      	b.n	8016590 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	2240      	movs	r2, #64	@ 0x40
 80163c4:	5c9b      	ldrb	r3, [r3, r2]
 80163c6:	2b01      	cmp	r3, #1
 80163c8:	d101      	bne.n	80163ce <HAL_I2C_Master_Transmit+0x3a>
 80163ca:	2302      	movs	r3, #2
 80163cc:	e0e1      	b.n	8016592 <HAL_I2C_Master_Transmit+0x1fe>
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	2240      	movs	r2, #64	@ 0x40
 80163d2:	2101      	movs	r1, #1
 80163d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80163d6:	f7fe fc7d 	bl	8014cd4 <HAL_GetTick>
 80163da:	0003      	movs	r3, r0
 80163dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80163de:	2380      	movs	r3, #128	@ 0x80
 80163e0:	0219      	lsls	r1, r3, #8
 80163e2:	68f8      	ldr	r0, [r7, #12]
 80163e4:	697b      	ldr	r3, [r7, #20]
 80163e6:	9300      	str	r3, [sp, #0]
 80163e8:	2319      	movs	r3, #25
 80163ea:	2201      	movs	r2, #1
 80163ec:	f002 faa4 	bl	8018938 <I2C_WaitOnFlagUntilTimeout>
 80163f0:	1e03      	subs	r3, r0, #0
 80163f2:	d001      	beq.n	80163f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80163f4:	2301      	movs	r3, #1
 80163f6:	e0cc      	b.n	8016592 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	2241      	movs	r2, #65	@ 0x41
 80163fc:	2121      	movs	r1, #33	@ 0x21
 80163fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	2242      	movs	r2, #66	@ 0x42
 8016404:	2110      	movs	r1, #16
 8016406:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	2200      	movs	r2, #0
 801640c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	687a      	ldr	r2, [r7, #4]
 8016412:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2208      	movs	r2, #8
 8016418:	18ba      	adds	r2, r7, r2
 801641a:	8812      	ldrh	r2, [r2, #0]
 801641c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2200      	movs	r2, #0
 8016422:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016428:	b29b      	uxth	r3, r3
 801642a:	2bff      	cmp	r3, #255	@ 0xff
 801642c:	d911      	bls.n	8016452 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	22ff      	movs	r2, #255	@ 0xff
 8016432:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016438:	b2da      	uxtb	r2, r3
 801643a:	2380      	movs	r3, #128	@ 0x80
 801643c:	045c      	lsls	r4, r3, #17
 801643e:	230a      	movs	r3, #10
 8016440:	18fb      	adds	r3, r7, r3
 8016442:	8819      	ldrh	r1, [r3, #0]
 8016444:	68f8      	ldr	r0, [r7, #12]
 8016446:	4b55      	ldr	r3, [pc, #340]	@ (801659c <HAL_I2C_Master_Transmit+0x208>)
 8016448:	9300      	str	r3, [sp, #0]
 801644a:	0023      	movs	r3, r4
 801644c:	f002 fcc6 	bl	8018ddc <I2C_TransferConfig>
 8016450:	e075      	b.n	801653e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016456:	b29a      	uxth	r2, r3
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016460:	b2da      	uxtb	r2, r3
 8016462:	2380      	movs	r3, #128	@ 0x80
 8016464:	049c      	lsls	r4, r3, #18
 8016466:	230a      	movs	r3, #10
 8016468:	18fb      	adds	r3, r7, r3
 801646a:	8819      	ldrh	r1, [r3, #0]
 801646c:	68f8      	ldr	r0, [r7, #12]
 801646e:	4b4b      	ldr	r3, [pc, #300]	@ (801659c <HAL_I2C_Master_Transmit+0x208>)
 8016470:	9300      	str	r3, [sp, #0]
 8016472:	0023      	movs	r3, r4
 8016474:	f002 fcb2 	bl	8018ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016478:	e061      	b.n	801653e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801647a:	697a      	ldr	r2, [r7, #20]
 801647c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	0018      	movs	r0, r3
 8016482:	f002 faa7 	bl	80189d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8016486:	1e03      	subs	r3, r0, #0
 8016488:	d001      	beq.n	801648e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801648a:	2301      	movs	r3, #1
 801648c:	e081      	b.n	8016592 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016492:	781a      	ldrb	r2, [r3, #0]
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801649e:	1c5a      	adds	r2, r3, #1
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164a8:	b29b      	uxth	r3, r3
 80164aa:	3b01      	subs	r3, #1
 80164ac:	b29a      	uxth	r2, r3
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164b6:	3b01      	subs	r3, #1
 80164b8:	b29a      	uxth	r2, r3
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164c2:	b29b      	uxth	r3, r3
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d03a      	beq.n	801653e <HAL_I2C_Master_Transmit+0x1aa>
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d136      	bne.n	801653e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80164d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	9300      	str	r3, [sp, #0]
 80164d8:	0013      	movs	r3, r2
 80164da:	2200      	movs	r2, #0
 80164dc:	2180      	movs	r1, #128	@ 0x80
 80164de:	f002 fa2b 	bl	8018938 <I2C_WaitOnFlagUntilTimeout>
 80164e2:	1e03      	subs	r3, r0, #0
 80164e4:	d001      	beq.n	80164ea <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80164e6:	2301      	movs	r3, #1
 80164e8:	e053      	b.n	8016592 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	2bff      	cmp	r3, #255	@ 0xff
 80164f2:	d911      	bls.n	8016518 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	22ff      	movs	r2, #255	@ 0xff
 80164f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164fe:	b2da      	uxtb	r2, r3
 8016500:	2380      	movs	r3, #128	@ 0x80
 8016502:	045c      	lsls	r4, r3, #17
 8016504:	230a      	movs	r3, #10
 8016506:	18fb      	adds	r3, r7, r3
 8016508:	8819      	ldrh	r1, [r3, #0]
 801650a:	68f8      	ldr	r0, [r7, #12]
 801650c:	2300      	movs	r3, #0
 801650e:	9300      	str	r3, [sp, #0]
 8016510:	0023      	movs	r3, r4
 8016512:	f002 fc63 	bl	8018ddc <I2C_TransferConfig>
 8016516:	e012      	b.n	801653e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801651c:	b29a      	uxth	r2, r3
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016526:	b2da      	uxtb	r2, r3
 8016528:	2380      	movs	r3, #128	@ 0x80
 801652a:	049c      	lsls	r4, r3, #18
 801652c:	230a      	movs	r3, #10
 801652e:	18fb      	adds	r3, r7, r3
 8016530:	8819      	ldrh	r1, [r3, #0]
 8016532:	68f8      	ldr	r0, [r7, #12]
 8016534:	2300      	movs	r3, #0
 8016536:	9300      	str	r3, [sp, #0]
 8016538:	0023      	movs	r3, r4
 801653a:	f002 fc4f 	bl	8018ddc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016542:	b29b      	uxth	r3, r3
 8016544:	2b00      	cmp	r3, #0
 8016546:	d198      	bne.n	801647a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016548:	697a      	ldr	r2, [r7, #20]
 801654a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	0018      	movs	r0, r3
 8016550:	f002 fa86 	bl	8018a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016554:	1e03      	subs	r3, r0, #0
 8016556:	d001      	beq.n	801655c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8016558:	2301      	movs	r3, #1
 801655a:	e01a      	b.n	8016592 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	2220      	movs	r2, #32
 8016562:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	685a      	ldr	r2, [r3, #4]
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	490c      	ldr	r1, [pc, #48]	@ (80165a0 <HAL_I2C_Master_Transmit+0x20c>)
 8016570:	400a      	ands	r2, r1
 8016572:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	2241      	movs	r2, #65	@ 0x41
 8016578:	2120      	movs	r1, #32
 801657a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2242      	movs	r2, #66	@ 0x42
 8016580:	2100      	movs	r1, #0
 8016582:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2240      	movs	r2, #64	@ 0x40
 8016588:	2100      	movs	r1, #0
 801658a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801658c:	2300      	movs	r3, #0
 801658e:	e000      	b.n	8016592 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8016590:	2302      	movs	r3, #2
  }
}
 8016592:	0018      	movs	r0, r3
 8016594:	46bd      	mov	sp, r7
 8016596:	b007      	add	sp, #28
 8016598:	bd90      	pop	{r4, r7, pc}
 801659a:	46c0      	nop			@ (mov r8, r8)
 801659c:	80002000 	.word	0x80002000
 80165a0:	fe00e800 	.word	0xfe00e800

080165a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80165a4:	b590      	push	{r4, r7, lr}
 80165a6:	b089      	sub	sp, #36	@ 0x24
 80165a8:	af02      	add	r7, sp, #8
 80165aa:	60f8      	str	r0, [r7, #12]
 80165ac:	0008      	movs	r0, r1
 80165ae:	607a      	str	r2, [r7, #4]
 80165b0:	0019      	movs	r1, r3
 80165b2:	230a      	movs	r3, #10
 80165b4:	18fb      	adds	r3, r7, r3
 80165b6:	1c02      	adds	r2, r0, #0
 80165b8:	801a      	strh	r2, [r3, #0]
 80165ba:	2308      	movs	r3, #8
 80165bc:	18fb      	adds	r3, r7, r3
 80165be:	1c0a      	adds	r2, r1, #0
 80165c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	2241      	movs	r2, #65	@ 0x41
 80165c6:	5c9b      	ldrb	r3, [r3, r2]
 80165c8:	b2db      	uxtb	r3, r3
 80165ca:	2b20      	cmp	r3, #32
 80165cc:	d000      	beq.n	80165d0 <HAL_I2C_Master_Receive+0x2c>
 80165ce:	e0e8      	b.n	80167a2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	2240      	movs	r2, #64	@ 0x40
 80165d4:	5c9b      	ldrb	r3, [r3, r2]
 80165d6:	2b01      	cmp	r3, #1
 80165d8:	d101      	bne.n	80165de <HAL_I2C_Master_Receive+0x3a>
 80165da:	2302      	movs	r3, #2
 80165dc:	e0e2      	b.n	80167a4 <HAL_I2C_Master_Receive+0x200>
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	2240      	movs	r2, #64	@ 0x40
 80165e2:	2101      	movs	r1, #1
 80165e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80165e6:	f7fe fb75 	bl	8014cd4 <HAL_GetTick>
 80165ea:	0003      	movs	r3, r0
 80165ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80165ee:	2380      	movs	r3, #128	@ 0x80
 80165f0:	0219      	lsls	r1, r3, #8
 80165f2:	68f8      	ldr	r0, [r7, #12]
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	9300      	str	r3, [sp, #0]
 80165f8:	2319      	movs	r3, #25
 80165fa:	2201      	movs	r2, #1
 80165fc:	f002 f99c 	bl	8018938 <I2C_WaitOnFlagUntilTimeout>
 8016600:	1e03      	subs	r3, r0, #0
 8016602:	d001      	beq.n	8016608 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8016604:	2301      	movs	r3, #1
 8016606:	e0cd      	b.n	80167a4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	2241      	movs	r2, #65	@ 0x41
 801660c:	2122      	movs	r1, #34	@ 0x22
 801660e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	2242      	movs	r2, #66	@ 0x42
 8016614:	2110      	movs	r1, #16
 8016616:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	2200      	movs	r2, #0
 801661c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	687a      	ldr	r2, [r7, #4]
 8016622:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	2208      	movs	r2, #8
 8016628:	18ba      	adds	r2, r7, r2
 801662a:	8812      	ldrh	r2, [r2, #0]
 801662c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	2200      	movs	r2, #0
 8016632:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016638:	b29b      	uxth	r3, r3
 801663a:	2bff      	cmp	r3, #255	@ 0xff
 801663c:	d911      	bls.n	8016662 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	22ff      	movs	r2, #255	@ 0xff
 8016642:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016648:	b2da      	uxtb	r2, r3
 801664a:	2380      	movs	r3, #128	@ 0x80
 801664c:	045c      	lsls	r4, r3, #17
 801664e:	230a      	movs	r3, #10
 8016650:	18fb      	adds	r3, r7, r3
 8016652:	8819      	ldrh	r1, [r3, #0]
 8016654:	68f8      	ldr	r0, [r7, #12]
 8016656:	4b55      	ldr	r3, [pc, #340]	@ (80167ac <HAL_I2C_Master_Receive+0x208>)
 8016658:	9300      	str	r3, [sp, #0]
 801665a:	0023      	movs	r3, r4
 801665c:	f002 fbbe 	bl	8018ddc <I2C_TransferConfig>
 8016660:	e076      	b.n	8016750 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016666:	b29a      	uxth	r2, r3
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016670:	b2da      	uxtb	r2, r3
 8016672:	2380      	movs	r3, #128	@ 0x80
 8016674:	049c      	lsls	r4, r3, #18
 8016676:	230a      	movs	r3, #10
 8016678:	18fb      	adds	r3, r7, r3
 801667a:	8819      	ldrh	r1, [r3, #0]
 801667c:	68f8      	ldr	r0, [r7, #12]
 801667e:	4b4b      	ldr	r3, [pc, #300]	@ (80167ac <HAL_I2C_Master_Receive+0x208>)
 8016680:	9300      	str	r3, [sp, #0]
 8016682:	0023      	movs	r3, r4
 8016684:	f002 fbaa 	bl	8018ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016688:	e062      	b.n	8016750 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801668a:	697a      	ldr	r2, [r7, #20]
 801668c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	0018      	movs	r0, r3
 8016692:	f002 fa29 	bl	8018ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016696:	1e03      	subs	r3, r0, #0
 8016698:	d001      	beq.n	801669e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801669a:	2301      	movs	r3, #1
 801669c:	e082      	b.n	80167a4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166a8:	b2d2      	uxtb	r2, r2
 80166aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166b0:	1c5a      	adds	r2, r3, #1
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166ba:	3b01      	subs	r3, #1
 80166bc:	b29a      	uxth	r2, r3
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166c6:	b29b      	uxth	r3, r3
 80166c8:	3b01      	subs	r3, #1
 80166ca:	b29a      	uxth	r2, r3
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166d4:	b29b      	uxth	r3, r3
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d03a      	beq.n	8016750 <HAL_I2C_Master_Receive+0x1ac>
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d136      	bne.n	8016750 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80166e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80166e4:	68f8      	ldr	r0, [r7, #12]
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	9300      	str	r3, [sp, #0]
 80166ea:	0013      	movs	r3, r2
 80166ec:	2200      	movs	r2, #0
 80166ee:	2180      	movs	r1, #128	@ 0x80
 80166f0:	f002 f922 	bl	8018938 <I2C_WaitOnFlagUntilTimeout>
 80166f4:	1e03      	subs	r3, r0, #0
 80166f6:	d001      	beq.n	80166fc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80166f8:	2301      	movs	r3, #1
 80166fa:	e053      	b.n	80167a4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016700:	b29b      	uxth	r3, r3
 8016702:	2bff      	cmp	r3, #255	@ 0xff
 8016704:	d911      	bls.n	801672a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	22ff      	movs	r2, #255	@ 0xff
 801670a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016710:	b2da      	uxtb	r2, r3
 8016712:	2380      	movs	r3, #128	@ 0x80
 8016714:	045c      	lsls	r4, r3, #17
 8016716:	230a      	movs	r3, #10
 8016718:	18fb      	adds	r3, r7, r3
 801671a:	8819      	ldrh	r1, [r3, #0]
 801671c:	68f8      	ldr	r0, [r7, #12]
 801671e:	2300      	movs	r3, #0
 8016720:	9300      	str	r3, [sp, #0]
 8016722:	0023      	movs	r3, r4
 8016724:	f002 fb5a 	bl	8018ddc <I2C_TransferConfig>
 8016728:	e012      	b.n	8016750 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801672e:	b29a      	uxth	r2, r3
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016738:	b2da      	uxtb	r2, r3
 801673a:	2380      	movs	r3, #128	@ 0x80
 801673c:	049c      	lsls	r4, r3, #18
 801673e:	230a      	movs	r3, #10
 8016740:	18fb      	adds	r3, r7, r3
 8016742:	8819      	ldrh	r1, [r3, #0]
 8016744:	68f8      	ldr	r0, [r7, #12]
 8016746:	2300      	movs	r3, #0
 8016748:	9300      	str	r3, [sp, #0]
 801674a:	0023      	movs	r3, r4
 801674c:	f002 fb46 	bl	8018ddc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016754:	b29b      	uxth	r3, r3
 8016756:	2b00      	cmp	r3, #0
 8016758:	d197      	bne.n	801668a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801675a:	697a      	ldr	r2, [r7, #20]
 801675c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	0018      	movs	r0, r3
 8016762:	f002 f97d 	bl	8018a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016766:	1e03      	subs	r3, r0, #0
 8016768:	d001      	beq.n	801676e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 801676a:	2301      	movs	r3, #1
 801676c:	e01a      	b.n	80167a4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	2220      	movs	r2, #32
 8016774:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	685a      	ldr	r2, [r3, #4]
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	490b      	ldr	r1, [pc, #44]	@ (80167b0 <HAL_I2C_Master_Receive+0x20c>)
 8016782:	400a      	ands	r2, r1
 8016784:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	2241      	movs	r2, #65	@ 0x41
 801678a:	2120      	movs	r1, #32
 801678c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	2242      	movs	r2, #66	@ 0x42
 8016792:	2100      	movs	r1, #0
 8016794:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	2240      	movs	r2, #64	@ 0x40
 801679a:	2100      	movs	r1, #0
 801679c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801679e:	2300      	movs	r3, #0
 80167a0:	e000      	b.n	80167a4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80167a2:	2302      	movs	r3, #2
  }
}
 80167a4:	0018      	movs	r0, r3
 80167a6:	46bd      	mov	sp, r7
 80167a8:	b007      	add	sp, #28
 80167aa:	bd90      	pop	{r4, r7, pc}
 80167ac:	80002400 	.word	0x80002400
 80167b0:	fe00e800 	.word	0xfe00e800

080167b4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80167b4:	b5b0      	push	{r4, r5, r7, lr}
 80167b6:	b088      	sub	sp, #32
 80167b8:	af02      	add	r7, sp, #8
 80167ba:	60f8      	str	r0, [r7, #12]
 80167bc:	0008      	movs	r0, r1
 80167be:	607a      	str	r2, [r7, #4]
 80167c0:	0019      	movs	r1, r3
 80167c2:	230a      	movs	r3, #10
 80167c4:	18fb      	adds	r3, r7, r3
 80167c6:	1c02      	adds	r2, r0, #0
 80167c8:	801a      	strh	r2, [r3, #0]
 80167ca:	2308      	movs	r3, #8
 80167cc:	18fb      	adds	r3, r7, r3
 80167ce:	1c0a      	adds	r2, r1, #0
 80167d0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	2241      	movs	r2, #65	@ 0x41
 80167d6:	5c9b      	ldrb	r3, [r3, r2]
 80167d8:	b2db      	uxtb	r3, r3
 80167da:	2b20      	cmp	r3, #32
 80167dc:	d000      	beq.n	80167e0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80167de:	e0dd      	b.n	801699c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	699a      	ldr	r2, [r3, #24]
 80167e6:	2380      	movs	r3, #128	@ 0x80
 80167e8:	021b      	lsls	r3, r3, #8
 80167ea:	401a      	ands	r2, r3
 80167ec:	2380      	movs	r3, #128	@ 0x80
 80167ee:	021b      	lsls	r3, r3, #8
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d101      	bne.n	80167f8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80167f4:	2302      	movs	r3, #2
 80167f6:	e0d2      	b.n	801699e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2240      	movs	r2, #64	@ 0x40
 80167fc:	5c9b      	ldrb	r3, [r3, r2]
 80167fe:	2b01      	cmp	r3, #1
 8016800:	d101      	bne.n	8016806 <HAL_I2C_Master_Transmit_DMA+0x52>
 8016802:	2302      	movs	r3, #2
 8016804:	e0cb      	b.n	801699e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	2240      	movs	r2, #64	@ 0x40
 801680a:	2101      	movs	r1, #1
 801680c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2241      	movs	r2, #65	@ 0x41
 8016812:	2121      	movs	r1, #33	@ 0x21
 8016814:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	2242      	movs	r2, #66	@ 0x42
 801681a:	2110      	movs	r1, #16
 801681c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	2200      	movs	r2, #0
 8016822:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	687a      	ldr	r2, [r7, #4]
 8016828:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	2208      	movs	r2, #8
 801682e:	18ba      	adds	r2, r7, r2
 8016830:	8812      	ldrh	r2, [r2, #0]
 8016832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	4a5c      	ldr	r2, [pc, #368]	@ (80169a8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8016838:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	4a5b      	ldr	r2, [pc, #364]	@ (80169ac <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 801683e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016844:	b29b      	uxth	r3, r3
 8016846:	2bff      	cmp	r3, #255	@ 0xff
 8016848:	d906      	bls.n	8016858 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	22ff      	movs	r2, #255	@ 0xff
 801684e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8016850:	2380      	movs	r3, #128	@ 0x80
 8016852:	045b      	lsls	r3, r3, #17
 8016854:	617b      	str	r3, [r7, #20]
 8016856:	e007      	b.n	8016868 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801685c:	b29a      	uxth	r2, r3
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8016862:	2380      	movs	r3, #128	@ 0x80
 8016864:	049b      	lsls	r3, r3, #18
 8016866:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801686c:	2b00      	cmp	r3, #0
 801686e:	d100      	bne.n	8016872 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8016870:	e078      	b.n	8016964 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016876:	2b00      	cmp	r3, #0
 8016878:	d023      	beq.n	80168c2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801687e:	4a4c      	ldr	r2, [pc, #304]	@ (80169b0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8016880:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016886:	4a4b      	ldr	r2, [pc, #300]	@ (80169b4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8016888:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801688e:	2200      	movs	r2, #0
 8016890:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016896:	2200      	movs	r2, #0
 8016898:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801689e:	6879      	ldr	r1, [r7, #4]
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	3328      	adds	r3, #40	@ 0x28
 80168a6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80168ac:	2513      	movs	r5, #19
 80168ae:	197c      	adds	r4, r7, r5
 80168b0:	f7fe ff62 	bl	8015778 <HAL_DMA_Start_IT>
 80168b4:	0003      	movs	r3, r0
 80168b6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80168b8:	197b      	adds	r3, r7, r5
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d13d      	bne.n	801693c <HAL_I2C_Master_Transmit_DMA+0x188>
 80168c0:	e013      	b.n	80168ea <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	2241      	movs	r2, #65	@ 0x41
 80168c6:	2120      	movs	r1, #32
 80168c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	2242      	movs	r2, #66	@ 0x42
 80168ce:	2100      	movs	r1, #0
 80168d0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80168d6:	2280      	movs	r2, #128	@ 0x80
 80168d8:	431a      	orrs	r2, r3
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	2240      	movs	r2, #64	@ 0x40
 80168e2:	2100      	movs	r1, #0
 80168e4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80168e6:	2301      	movs	r3, #1
 80168e8:	e059      	b.n	801699e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168ee:	b2da      	uxtb	r2, r3
 80168f0:	697c      	ldr	r4, [r7, #20]
 80168f2:	230a      	movs	r3, #10
 80168f4:	18fb      	adds	r3, r7, r3
 80168f6:	8819      	ldrh	r1, [r3, #0]
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	4b2f      	ldr	r3, [pc, #188]	@ (80169b8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80168fc:	9300      	str	r3, [sp, #0]
 80168fe:	0023      	movs	r3, r4
 8016900:	f002 fa6c 	bl	8018ddc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016908:	b29a      	uxth	r2, r3
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801690e:	1ad3      	subs	r3, r2, r3
 8016910:	b29a      	uxth	r2, r3
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	2240      	movs	r2, #64	@ 0x40
 801691a:	2100      	movs	r1, #0
 801691c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	2110      	movs	r1, #16
 8016922:	0018      	movs	r0, r3
 8016924:	f002 fa94 	bl	8018e50 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	681a      	ldr	r2, [r3, #0]
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	2180      	movs	r1, #128	@ 0x80
 8016934:	01c9      	lsls	r1, r1, #7
 8016936:	430a      	orrs	r2, r1
 8016938:	601a      	str	r2, [r3, #0]
 801693a:	e02d      	b.n	8016998 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	2241      	movs	r2, #65	@ 0x41
 8016940:	2120      	movs	r1, #32
 8016942:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	2242      	movs	r2, #66	@ 0x42
 8016948:	2100      	movs	r1, #0
 801694a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016950:	2210      	movs	r2, #16
 8016952:	431a      	orrs	r2, r3
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	2240      	movs	r2, #64	@ 0x40
 801695c:	2100      	movs	r1, #0
 801695e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016960:	2301      	movs	r3, #1
 8016962:	e01c      	b.n	801699e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	4a15      	ldr	r2, [pc, #84]	@ (80169bc <HAL_I2C_Master_Transmit_DMA+0x208>)
 8016968:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801696e:	b2da      	uxtb	r2, r3
 8016970:	2380      	movs	r3, #128	@ 0x80
 8016972:	049c      	lsls	r4, r3, #18
 8016974:	230a      	movs	r3, #10
 8016976:	18fb      	adds	r3, r7, r3
 8016978:	8819      	ldrh	r1, [r3, #0]
 801697a:	68f8      	ldr	r0, [r7, #12]
 801697c:	4b0e      	ldr	r3, [pc, #56]	@ (80169b8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801697e:	9300      	str	r3, [sp, #0]
 8016980:	0023      	movs	r3, r4
 8016982:	f002 fa2b 	bl	8018ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	2240      	movs	r2, #64	@ 0x40
 801698a:	2100      	movs	r1, #0
 801698c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	2101      	movs	r1, #1
 8016992:	0018      	movs	r0, r3
 8016994:	f002 fa5c 	bl	8018e50 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016998:	2300      	movs	r3, #0
 801699a:	e000      	b.n	801699e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801699c:	2302      	movs	r3, #2
  }
}
 801699e:	0018      	movs	r0, r3
 80169a0:	46bd      	mov	sp, r7
 80169a2:	b006      	add	sp, #24
 80169a4:	bdb0      	pop	{r4, r5, r7, pc}
 80169a6:	46c0      	nop			@ (mov r8, r8)
 80169a8:	ffff0000 	.word	0xffff0000
 80169ac:	0801768d 	.word	0x0801768d
 80169b0:	08018789 	.word	0x08018789
 80169b4:	080188c9 	.word	0x080188c9
 80169b8:	80002000 	.word	0x80002000
 80169bc:	080171e1 	.word	0x080171e1

080169c0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80169c0:	b5b0      	push	{r4, r5, r7, lr}
 80169c2:	b088      	sub	sp, #32
 80169c4:	af02      	add	r7, sp, #8
 80169c6:	60f8      	str	r0, [r7, #12]
 80169c8:	0008      	movs	r0, r1
 80169ca:	607a      	str	r2, [r7, #4]
 80169cc:	0019      	movs	r1, r3
 80169ce:	230a      	movs	r3, #10
 80169d0:	18fb      	adds	r3, r7, r3
 80169d2:	1c02      	adds	r2, r0, #0
 80169d4:	801a      	strh	r2, [r3, #0]
 80169d6:	2308      	movs	r3, #8
 80169d8:	18fb      	adds	r3, r7, r3
 80169da:	1c0a      	adds	r2, r1, #0
 80169dc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	2241      	movs	r2, #65	@ 0x41
 80169e2:	5c9b      	ldrb	r3, [r3, r2]
 80169e4:	b2db      	uxtb	r3, r3
 80169e6:	2b20      	cmp	r3, #32
 80169e8:	d000      	beq.n	80169ec <HAL_I2C_Master_Receive_DMA+0x2c>
 80169ea:	e0dd      	b.n	8016ba8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	699a      	ldr	r2, [r3, #24]
 80169f2:	2380      	movs	r3, #128	@ 0x80
 80169f4:	021b      	lsls	r3, r3, #8
 80169f6:	401a      	ands	r2, r3
 80169f8:	2380      	movs	r3, #128	@ 0x80
 80169fa:	021b      	lsls	r3, r3, #8
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d101      	bne.n	8016a04 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8016a00:	2302      	movs	r3, #2
 8016a02:	e0d2      	b.n	8016baa <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	2240      	movs	r2, #64	@ 0x40
 8016a08:	5c9b      	ldrb	r3, [r3, r2]
 8016a0a:	2b01      	cmp	r3, #1
 8016a0c:	d101      	bne.n	8016a12 <HAL_I2C_Master_Receive_DMA+0x52>
 8016a0e:	2302      	movs	r3, #2
 8016a10:	e0cb      	b.n	8016baa <HAL_I2C_Master_Receive_DMA+0x1ea>
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	2240      	movs	r2, #64	@ 0x40
 8016a16:	2101      	movs	r1, #1
 8016a18:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	2241      	movs	r2, #65	@ 0x41
 8016a1e:	2122      	movs	r1, #34	@ 0x22
 8016a20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	2242      	movs	r2, #66	@ 0x42
 8016a26:	2110      	movs	r1, #16
 8016a28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	687a      	ldr	r2, [r7, #4]
 8016a34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	2208      	movs	r2, #8
 8016a3a:	18ba      	adds	r2, r7, r2
 8016a3c:	8812      	ldrh	r2, [r2, #0]
 8016a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	4a5c      	ldr	r2, [pc, #368]	@ (8016bb4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8016a44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	4a5b      	ldr	r2, [pc, #364]	@ (8016bb8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8016a4a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a50:	b29b      	uxth	r3, r3
 8016a52:	2bff      	cmp	r3, #255	@ 0xff
 8016a54:	d906      	bls.n	8016a64 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	22ff      	movs	r2, #255	@ 0xff
 8016a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8016a5c:	2380      	movs	r3, #128	@ 0x80
 8016a5e:	045b      	lsls	r3, r3, #17
 8016a60:	617b      	str	r3, [r7, #20]
 8016a62:	e007      	b.n	8016a74 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a68:	b29a      	uxth	r2, r3
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8016a6e:	2380      	movs	r3, #128	@ 0x80
 8016a70:	049b      	lsls	r3, r3, #18
 8016a72:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d100      	bne.n	8016a7e <HAL_I2C_Master_Receive_DMA+0xbe>
 8016a7c:	e078      	b.n	8016b70 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d023      	beq.n	8016ace <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a8a:	4a4c      	ldr	r2, [pc, #304]	@ (8016bbc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8016a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a92:	4a4b      	ldr	r2, [pc, #300]	@ (8016bc0 <HAL_I2C_Master_Receive_DMA+0x200>)
 8016a94:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	3324      	adds	r3, #36	@ 0x24
 8016ab0:	0019      	movs	r1, r3
 8016ab2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016ab8:	2513      	movs	r5, #19
 8016aba:	197c      	adds	r4, r7, r5
 8016abc:	f7fe fe5c 	bl	8015778 <HAL_DMA_Start_IT>
 8016ac0:	0003      	movs	r3, r0
 8016ac2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016ac4:	197b      	adds	r3, r7, r5
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d13d      	bne.n	8016b48 <HAL_I2C_Master_Receive_DMA+0x188>
 8016acc:	e013      	b.n	8016af6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2241      	movs	r2, #65	@ 0x41
 8016ad2:	2120      	movs	r1, #32
 8016ad4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	2242      	movs	r2, #66	@ 0x42
 8016ada:	2100      	movs	r1, #0
 8016adc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ae2:	2280      	movs	r2, #128	@ 0x80
 8016ae4:	431a      	orrs	r2, r3
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	2240      	movs	r2, #64	@ 0x40
 8016aee:	2100      	movs	r1, #0
 8016af0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8016af2:	2301      	movs	r3, #1
 8016af4:	e059      	b.n	8016baa <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016afa:	b2da      	uxtb	r2, r3
 8016afc:	697c      	ldr	r4, [r7, #20]
 8016afe:	230a      	movs	r3, #10
 8016b00:	18fb      	adds	r3, r7, r3
 8016b02:	8819      	ldrh	r1, [r3, #0]
 8016b04:	68f8      	ldr	r0, [r7, #12]
 8016b06:	4b2f      	ldr	r3, [pc, #188]	@ (8016bc4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8016b08:	9300      	str	r3, [sp, #0]
 8016b0a:	0023      	movs	r3, r4
 8016b0c:	f002 f966 	bl	8018ddc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b14:	b29a      	uxth	r2, r3
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b1a:	1ad3      	subs	r3, r2, r3
 8016b1c:	b29a      	uxth	r2, r3
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	2240      	movs	r2, #64	@ 0x40
 8016b26:	2100      	movs	r1, #0
 8016b28:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	2110      	movs	r1, #16
 8016b2e:	0018      	movs	r0, r3
 8016b30:	f002 f98e 	bl	8018e50 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	681a      	ldr	r2, [r3, #0]
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	2180      	movs	r1, #128	@ 0x80
 8016b40:	0209      	lsls	r1, r1, #8
 8016b42:	430a      	orrs	r2, r1
 8016b44:	601a      	str	r2, [r3, #0]
 8016b46:	e02d      	b.n	8016ba4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	2241      	movs	r2, #65	@ 0x41
 8016b4c:	2120      	movs	r1, #32
 8016b4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	2242      	movs	r2, #66	@ 0x42
 8016b54:	2100      	movs	r1, #0
 8016b56:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b5c:	2210      	movs	r2, #16
 8016b5e:	431a      	orrs	r2, r3
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	2240      	movs	r2, #64	@ 0x40
 8016b68:	2100      	movs	r1, #0
 8016b6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	e01c      	b.n	8016baa <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	4a15      	ldr	r2, [pc, #84]	@ (8016bc8 <HAL_I2C_Master_Receive_DMA+0x208>)
 8016b74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b7a:	b2da      	uxtb	r2, r3
 8016b7c:	2380      	movs	r3, #128	@ 0x80
 8016b7e:	049c      	lsls	r4, r3, #18
 8016b80:	230a      	movs	r3, #10
 8016b82:	18fb      	adds	r3, r7, r3
 8016b84:	8819      	ldrh	r1, [r3, #0]
 8016b86:	68f8      	ldr	r0, [r7, #12]
 8016b88:	4b0e      	ldr	r3, [pc, #56]	@ (8016bc4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8016b8a:	9300      	str	r3, [sp, #0]
 8016b8c:	0023      	movs	r3, r4
 8016b8e:	f002 f925 	bl	8018ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	2240      	movs	r2, #64	@ 0x40
 8016b96:	2100      	movs	r1, #0
 8016b98:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	2101      	movs	r1, #1
 8016b9e:	0018      	movs	r0, r3
 8016ba0:	f002 f956 	bl	8018e50 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	e000      	b.n	8016baa <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016ba8:	2302      	movs	r3, #2
  }
}
 8016baa:	0018      	movs	r0, r3
 8016bac:	46bd      	mov	sp, r7
 8016bae:	b006      	add	sp, #24
 8016bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8016bb2:	46c0      	nop			@ (mov r8, r8)
 8016bb4:	ffff0000 	.word	0xffff0000
 8016bb8:	0801768d 	.word	0x0801768d
 8016bbc:	08018829 	.word	0x08018829
 8016bc0:	080188c9 	.word	0x080188c9
 8016bc4:	80002400 	.word	0x80002400
 8016bc8:	080171e1 	.word	0x080171e1

08016bcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016bcc:	b590      	push	{r4, r7, lr}
 8016bce:	b089      	sub	sp, #36	@ 0x24
 8016bd0:	af02      	add	r7, sp, #8
 8016bd2:	60f8      	str	r0, [r7, #12]
 8016bd4:	000c      	movs	r4, r1
 8016bd6:	0010      	movs	r0, r2
 8016bd8:	0019      	movs	r1, r3
 8016bda:	230a      	movs	r3, #10
 8016bdc:	18fb      	adds	r3, r7, r3
 8016bde:	1c22      	adds	r2, r4, #0
 8016be0:	801a      	strh	r2, [r3, #0]
 8016be2:	2308      	movs	r3, #8
 8016be4:	18fb      	adds	r3, r7, r3
 8016be6:	1c02      	adds	r2, r0, #0
 8016be8:	801a      	strh	r2, [r3, #0]
 8016bea:	1dbb      	adds	r3, r7, #6
 8016bec:	1c0a      	adds	r2, r1, #0
 8016bee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	2241      	movs	r2, #65	@ 0x41
 8016bf4:	5c9b      	ldrb	r3, [r3, r2]
 8016bf6:	b2db      	uxtb	r3, r3
 8016bf8:	2b20      	cmp	r3, #32
 8016bfa:	d000      	beq.n	8016bfe <HAL_I2C_Mem_Read+0x32>
 8016bfc:	e110      	b.n	8016e20 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8016bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d004      	beq.n	8016c0e <HAL_I2C_Mem_Read+0x42>
 8016c04:	232c      	movs	r3, #44	@ 0x2c
 8016c06:	18fb      	adds	r3, r7, r3
 8016c08:	881b      	ldrh	r3, [r3, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d105      	bne.n	8016c1a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	2280      	movs	r2, #128	@ 0x80
 8016c12:	0092      	lsls	r2, r2, #2
 8016c14:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016c16:	2301      	movs	r3, #1
 8016c18:	e103      	b.n	8016e22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	2240      	movs	r2, #64	@ 0x40
 8016c1e:	5c9b      	ldrb	r3, [r3, r2]
 8016c20:	2b01      	cmp	r3, #1
 8016c22:	d101      	bne.n	8016c28 <HAL_I2C_Mem_Read+0x5c>
 8016c24:	2302      	movs	r3, #2
 8016c26:	e0fc      	b.n	8016e22 <HAL_I2C_Mem_Read+0x256>
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2240      	movs	r2, #64	@ 0x40
 8016c2c:	2101      	movs	r1, #1
 8016c2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016c30:	f7fe f850 	bl	8014cd4 <HAL_GetTick>
 8016c34:	0003      	movs	r3, r0
 8016c36:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016c38:	2380      	movs	r3, #128	@ 0x80
 8016c3a:	0219      	lsls	r1, r3, #8
 8016c3c:	68f8      	ldr	r0, [r7, #12]
 8016c3e:	697b      	ldr	r3, [r7, #20]
 8016c40:	9300      	str	r3, [sp, #0]
 8016c42:	2319      	movs	r3, #25
 8016c44:	2201      	movs	r2, #1
 8016c46:	f001 fe77 	bl	8018938 <I2C_WaitOnFlagUntilTimeout>
 8016c4a:	1e03      	subs	r3, r0, #0
 8016c4c:	d001      	beq.n	8016c52 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8016c4e:	2301      	movs	r3, #1
 8016c50:	e0e7      	b.n	8016e22 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	2241      	movs	r2, #65	@ 0x41
 8016c56:	2122      	movs	r1, #34	@ 0x22
 8016c58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	2242      	movs	r2, #66	@ 0x42
 8016c5e:	2140      	movs	r1, #64	@ 0x40
 8016c60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	2200      	movs	r2, #0
 8016c66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	222c      	movs	r2, #44	@ 0x2c
 8016c72:	18ba      	adds	r2, r7, r2
 8016c74:	8812      	ldrh	r2, [r2, #0]
 8016c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016c7e:	1dbb      	adds	r3, r7, #6
 8016c80:	881c      	ldrh	r4, [r3, #0]
 8016c82:	2308      	movs	r3, #8
 8016c84:	18fb      	adds	r3, r7, r3
 8016c86:	881a      	ldrh	r2, [r3, #0]
 8016c88:	230a      	movs	r3, #10
 8016c8a:	18fb      	adds	r3, r7, r3
 8016c8c:	8819      	ldrh	r1, [r3, #0]
 8016c8e:	68f8      	ldr	r0, [r7, #12]
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	9301      	str	r3, [sp, #4]
 8016c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c96:	9300      	str	r3, [sp, #0]
 8016c98:	0023      	movs	r3, r4
 8016c9a:	f001 f829 	bl	8017cf0 <I2C_RequestMemoryRead>
 8016c9e:	1e03      	subs	r3, r0, #0
 8016ca0:	d005      	beq.n	8016cae <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	2240      	movs	r2, #64	@ 0x40
 8016ca6:	2100      	movs	r1, #0
 8016ca8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016caa:	2301      	movs	r3, #1
 8016cac:	e0b9      	b.n	8016e22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	2bff      	cmp	r3, #255	@ 0xff
 8016cb6:	d911      	bls.n	8016cdc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	22ff      	movs	r2, #255	@ 0xff
 8016cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016cc2:	b2da      	uxtb	r2, r3
 8016cc4:	2380      	movs	r3, #128	@ 0x80
 8016cc6:	045c      	lsls	r4, r3, #17
 8016cc8:	230a      	movs	r3, #10
 8016cca:	18fb      	adds	r3, r7, r3
 8016ccc:	8819      	ldrh	r1, [r3, #0]
 8016cce:	68f8      	ldr	r0, [r7, #12]
 8016cd0:	4b56      	ldr	r3, [pc, #344]	@ (8016e2c <HAL_I2C_Mem_Read+0x260>)
 8016cd2:	9300      	str	r3, [sp, #0]
 8016cd4:	0023      	movs	r3, r4
 8016cd6:	f002 f881 	bl	8018ddc <I2C_TransferConfig>
 8016cda:	e012      	b.n	8016d02 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ce0:	b29a      	uxth	r2, r3
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016cea:	b2da      	uxtb	r2, r3
 8016cec:	2380      	movs	r3, #128	@ 0x80
 8016cee:	049c      	lsls	r4, r3, #18
 8016cf0:	230a      	movs	r3, #10
 8016cf2:	18fb      	adds	r3, r7, r3
 8016cf4:	8819      	ldrh	r1, [r3, #0]
 8016cf6:	68f8      	ldr	r0, [r7, #12]
 8016cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8016e2c <HAL_I2C_Mem_Read+0x260>)
 8016cfa:	9300      	str	r3, [sp, #0]
 8016cfc:	0023      	movs	r3, r4
 8016cfe:	f002 f86d 	bl	8018ddc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d04:	68f8      	ldr	r0, [r7, #12]
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	9300      	str	r3, [sp, #0]
 8016d0a:	0013      	movs	r3, r2
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	2104      	movs	r1, #4
 8016d10:	f001 fe12 	bl	8018938 <I2C_WaitOnFlagUntilTimeout>
 8016d14:	1e03      	subs	r3, r0, #0
 8016d16:	d001      	beq.n	8016d1c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016d18:	2301      	movs	r3, #1
 8016d1a:	e082      	b.n	8016e22 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d26:	b2d2      	uxtb	r2, r2
 8016d28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d2e:	1c5a      	adds	r2, r3, #1
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d38:	3b01      	subs	r3, #1
 8016d3a:	b29a      	uxth	r2, r3
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	3b01      	subs	r3, #1
 8016d48:	b29a      	uxth	r2, r3
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d03a      	beq.n	8016dce <HAL_I2C_Mem_Read+0x202>
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d136      	bne.n	8016dce <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d62:	68f8      	ldr	r0, [r7, #12]
 8016d64:	697b      	ldr	r3, [r7, #20]
 8016d66:	9300      	str	r3, [sp, #0]
 8016d68:	0013      	movs	r3, r2
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	2180      	movs	r1, #128	@ 0x80
 8016d6e:	f001 fde3 	bl	8018938 <I2C_WaitOnFlagUntilTimeout>
 8016d72:	1e03      	subs	r3, r0, #0
 8016d74:	d001      	beq.n	8016d7a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016d76:	2301      	movs	r3, #1
 8016d78:	e053      	b.n	8016e22 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016d7e:	b29b      	uxth	r3, r3
 8016d80:	2bff      	cmp	r3, #255	@ 0xff
 8016d82:	d911      	bls.n	8016da8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	22ff      	movs	r2, #255	@ 0xff
 8016d88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d8e:	b2da      	uxtb	r2, r3
 8016d90:	2380      	movs	r3, #128	@ 0x80
 8016d92:	045c      	lsls	r4, r3, #17
 8016d94:	230a      	movs	r3, #10
 8016d96:	18fb      	adds	r3, r7, r3
 8016d98:	8819      	ldrh	r1, [r3, #0]
 8016d9a:	68f8      	ldr	r0, [r7, #12]
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	9300      	str	r3, [sp, #0]
 8016da0:	0023      	movs	r3, r4
 8016da2:	f002 f81b 	bl	8018ddc <I2C_TransferConfig>
 8016da6:	e012      	b.n	8016dce <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016dac:	b29a      	uxth	r2, r3
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016db6:	b2da      	uxtb	r2, r3
 8016db8:	2380      	movs	r3, #128	@ 0x80
 8016dba:	049c      	lsls	r4, r3, #18
 8016dbc:	230a      	movs	r3, #10
 8016dbe:	18fb      	adds	r3, r7, r3
 8016dc0:	8819      	ldrh	r1, [r3, #0]
 8016dc2:	68f8      	ldr	r0, [r7, #12]
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	9300      	str	r3, [sp, #0]
 8016dc8:	0023      	movs	r3, r4
 8016dca:	f002 f807 	bl	8018ddc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d194      	bne.n	8016d02 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016dd8:	697a      	ldr	r2, [r7, #20]
 8016dda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	0018      	movs	r0, r3
 8016de0:	f001 fe3e 	bl	8018a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016de4:	1e03      	subs	r3, r0, #0
 8016de6:	d001      	beq.n	8016dec <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016de8:	2301      	movs	r3, #1
 8016dea:	e01a      	b.n	8016e22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	2220      	movs	r2, #32
 8016df2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	685a      	ldr	r2, [r3, #4]
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	490c      	ldr	r1, [pc, #48]	@ (8016e30 <HAL_I2C_Mem_Read+0x264>)
 8016e00:	400a      	ands	r2, r1
 8016e02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	2241      	movs	r2, #65	@ 0x41
 8016e08:	2120      	movs	r1, #32
 8016e0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2242      	movs	r2, #66	@ 0x42
 8016e10:	2100      	movs	r1, #0
 8016e12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	2240      	movs	r2, #64	@ 0x40
 8016e18:	2100      	movs	r1, #0
 8016e1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	e000      	b.n	8016e22 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016e20:	2302      	movs	r3, #2
  }
}
 8016e22:	0018      	movs	r0, r3
 8016e24:	46bd      	mov	sp, r7
 8016e26:	b007      	add	sp, #28
 8016e28:	bd90      	pop	{r4, r7, pc}
 8016e2a:	46c0      	nop			@ (mov r8, r8)
 8016e2c:	80002400 	.word	0x80002400
 8016e30:	fe00e800 	.word	0xfe00e800

08016e34 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8016e34:	b5b0      	push	{r4, r5, r7, lr}
 8016e36:	b088      	sub	sp, #32
 8016e38:	af02      	add	r7, sp, #8
 8016e3a:	60f8      	str	r0, [r7, #12]
 8016e3c:	000c      	movs	r4, r1
 8016e3e:	0010      	movs	r0, r2
 8016e40:	0019      	movs	r1, r3
 8016e42:	230a      	movs	r3, #10
 8016e44:	18fb      	adds	r3, r7, r3
 8016e46:	1c22      	adds	r2, r4, #0
 8016e48:	801a      	strh	r2, [r3, #0]
 8016e4a:	2308      	movs	r3, #8
 8016e4c:	18fb      	adds	r3, r7, r3
 8016e4e:	1c02      	adds	r2, r0, #0
 8016e50:	801a      	strh	r2, [r3, #0]
 8016e52:	1dbb      	adds	r3, r7, #6
 8016e54:	1c0a      	adds	r2, r1, #0
 8016e56:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	2241      	movs	r2, #65	@ 0x41
 8016e5c:	5c9b      	ldrb	r3, [r3, r2]
 8016e5e:	b2db      	uxtb	r3, r3
 8016e60:	2b20      	cmp	r3, #32
 8016e62:	d000      	beq.n	8016e66 <HAL_I2C_Mem_Write_DMA+0x32>
 8016e64:	e0d8      	b.n	8017018 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8016e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d004      	beq.n	8016e76 <HAL_I2C_Mem_Write_DMA+0x42>
 8016e6c:	232c      	movs	r3, #44	@ 0x2c
 8016e6e:	18fb      	adds	r3, r7, r3
 8016e70:	881b      	ldrh	r3, [r3, #0]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d105      	bne.n	8016e82 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	2280      	movs	r2, #128	@ 0x80
 8016e7a:	0092      	lsls	r2, r2, #2
 8016e7c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016e7e:	2301      	movs	r3, #1
 8016e80:	e0cb      	b.n	801701a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	699a      	ldr	r2, [r3, #24]
 8016e88:	2380      	movs	r3, #128	@ 0x80
 8016e8a:	021b      	lsls	r3, r3, #8
 8016e8c:	401a      	ands	r2, r3
 8016e8e:	2380      	movs	r3, #128	@ 0x80
 8016e90:	021b      	lsls	r3, r3, #8
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d101      	bne.n	8016e9a <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8016e96:	2302      	movs	r3, #2
 8016e98:	e0bf      	b.n	801701a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	2240      	movs	r2, #64	@ 0x40
 8016e9e:	5c9b      	ldrb	r3, [r3, r2]
 8016ea0:	2b01      	cmp	r3, #1
 8016ea2:	d101      	bne.n	8016ea8 <HAL_I2C_Mem_Write_DMA+0x74>
 8016ea4:	2302      	movs	r3, #2
 8016ea6:	e0b8      	b.n	801701a <HAL_I2C_Mem_Write_DMA+0x1e6>
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	2240      	movs	r2, #64	@ 0x40
 8016eac:	2101      	movs	r1, #1
 8016eae:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	2241      	movs	r2, #65	@ 0x41
 8016eb4:	2121      	movs	r1, #33	@ 0x21
 8016eb6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	2242      	movs	r2, #66	@ 0x42
 8016ebc:	2140      	movs	r1, #64	@ 0x40
 8016ebe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016eca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	222c      	movs	r2, #44	@ 0x2c
 8016ed0:	18ba      	adds	r2, r7, r2
 8016ed2:	8812      	ldrh	r2, [r2, #0]
 8016ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	4a52      	ldr	r2, [pc, #328]	@ (8017024 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8016eda:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	4a52      	ldr	r2, [pc, #328]	@ (8017028 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8016ee0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8016ee2:	230a      	movs	r3, #10
 8016ee4:	18fb      	adds	r3, r7, r3
 8016ee6:	881a      	ldrh	r2, [r3, #0]
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ef0:	b29b      	uxth	r3, r3
 8016ef2:	2bff      	cmp	r3, #255	@ 0xff
 8016ef4:	d903      	bls.n	8016efe <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	22ff      	movs	r2, #255	@ 0xff
 8016efa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016efc:	e004      	b.n	8016f08 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f02:	b29a      	uxth	r2, r3
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8016f08:	1dbb      	adds	r3, r7, #6
 8016f0a:	881b      	ldrh	r3, [r3, #0]
 8016f0c:	2b01      	cmp	r3, #1
 8016f0e:	d10b      	bne.n	8016f28 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016f10:	2308      	movs	r3, #8
 8016f12:	18fb      	adds	r3, r7, r3
 8016f14:	881b      	ldrh	r3, [r3, #0]
 8016f16:	b2da      	uxtb	r2, r3
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2201      	movs	r2, #1
 8016f22:	4252      	negs	r2, r2
 8016f24:	651a      	str	r2, [r3, #80]	@ 0x50
 8016f26:	e00e      	b.n	8016f46 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016f28:	2108      	movs	r1, #8
 8016f2a:	187b      	adds	r3, r7, r1
 8016f2c:	881b      	ldrh	r3, [r3, #0]
 8016f2e:	0a1b      	lsrs	r3, r3, #8
 8016f30:	b29b      	uxth	r3, r3
 8016f32:	b2da      	uxtb	r2, r3
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8016f3a:	187b      	adds	r3, r7, r1
 8016f3c:	881b      	ldrh	r3, [r3, #0]
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	001a      	movs	r2, r3
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d023      	beq.n	8016f96 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f52:	4a36      	ldr	r2, [pc, #216]	@ (801702c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8016f54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f5a:	4a35      	ldr	r2, [pc, #212]	@ (8017030 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8016f5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f62:	2200      	movs	r2, #0
 8016f64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	3328      	adds	r3, #40	@ 0x28
 8016f7a:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016f80:	2517      	movs	r5, #23
 8016f82:	197c      	adds	r4, r7, r5
 8016f84:	f7fe fbf8 	bl	8015778 <HAL_DMA_Start_IT>
 8016f88:	0003      	movs	r3, r0
 8016f8a:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8016f8c:	197b      	adds	r3, r7, r5
 8016f8e:	781b      	ldrb	r3, [r3, #0]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d12d      	bne.n	8016ff0 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8016f94:	e013      	b.n	8016fbe <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	2241      	movs	r2, #65	@ 0x41
 8016f9a:	2120      	movs	r1, #32
 8016f9c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	2242      	movs	r2, #66	@ 0x42
 8016fa2:	2100      	movs	r1, #0
 8016fa4:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016faa:	2280      	movs	r2, #128	@ 0x80
 8016fac:	431a      	orrs	r2, r3
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	2240      	movs	r2, #64	@ 0x40
 8016fb6:	2100      	movs	r1, #0
 8016fb8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016fba:	2301      	movs	r3, #1
 8016fbc:	e02d      	b.n	801701a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8016fbe:	1dbb      	adds	r3, r7, #6
 8016fc0:	881b      	ldrh	r3, [r3, #0]
 8016fc2:	b2da      	uxtb	r2, r3
 8016fc4:	2380      	movs	r3, #128	@ 0x80
 8016fc6:	045c      	lsls	r4, r3, #17
 8016fc8:	230a      	movs	r3, #10
 8016fca:	18fb      	adds	r3, r7, r3
 8016fcc:	8819      	ldrh	r1, [r3, #0]
 8016fce:	68f8      	ldr	r0, [r7, #12]
 8016fd0:	4b18      	ldr	r3, [pc, #96]	@ (8017034 <HAL_I2C_Mem_Write_DMA+0x200>)
 8016fd2:	9300      	str	r3, [sp, #0]
 8016fd4:	0023      	movs	r3, r4
 8016fd6:	f001 ff01 	bl	8018ddc <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	2240      	movs	r2, #64	@ 0x40
 8016fde:	2100      	movs	r1, #0
 8016fe0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	2101      	movs	r1, #1
 8016fe6:	0018      	movs	r0, r3
 8016fe8:	f001 ff32 	bl	8018e50 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8016fec:	2300      	movs	r3, #0
 8016fee:	e014      	b.n	801701a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	2241      	movs	r2, #65	@ 0x41
 8016ff4:	2120      	movs	r1, #32
 8016ff6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	2242      	movs	r2, #66	@ 0x42
 8016ffc:	2100      	movs	r1, #0
 8016ffe:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017004:	2210      	movs	r2, #16
 8017006:	431a      	orrs	r2, r3
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	2240      	movs	r2, #64	@ 0x40
 8017010:	2100      	movs	r1, #0
 8017012:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8017014:	2301      	movs	r3, #1
 8017016:	e000      	b.n	801701a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8017018:	2302      	movs	r3, #2
  }
}
 801701a:	0018      	movs	r0, r3
 801701c:	46bd      	mov	sp, r7
 801701e:	b006      	add	sp, #24
 8017020:	bdb0      	pop	{r4, r5, r7, pc}
 8017022:	46c0      	nop			@ (mov r8, r8)
 8017024:	ffff0000 	.word	0xffff0000
 8017028:	080178a5 	.word	0x080178a5
 801702c:	08018789 	.word	0x08018789
 8017030:	080188c9 	.word	0x080188c9
 8017034:	80002000 	.word	0x80002000

08017038 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b084      	sub	sp, #16
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	699b      	ldr	r3, [r3, #24]
 8017046:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017054:	2b00      	cmp	r3, #0
 8017056:	d005      	beq.n	8017064 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801705c:	68ba      	ldr	r2, [r7, #8]
 801705e:	68f9      	ldr	r1, [r7, #12]
 8017060:	6878      	ldr	r0, [r7, #4]
 8017062:	4798      	blx	r3
  }
}
 8017064:	46c0      	nop			@ (mov r8, r8)
 8017066:	46bd      	mov	sp, r7
 8017068:	b004      	add	sp, #16
 801706a:	bd80      	pop	{r7, pc}

0801706c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b086      	sub	sp, #24
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	699b      	ldr	r3, [r3, #24]
 801707a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	0a1b      	lsrs	r3, r3, #8
 8017088:	001a      	movs	r2, r3
 801708a:	2301      	movs	r3, #1
 801708c:	4013      	ands	r3, r2
 801708e:	d010      	beq.n	80170b2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	09db      	lsrs	r3, r3, #7
 8017094:	001a      	movs	r2, r3
 8017096:	2301      	movs	r3, #1
 8017098:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801709a:	d00a      	beq.n	80170b2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170a0:	2201      	movs	r2, #1
 80170a2:	431a      	orrs	r2, r3
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	2280      	movs	r2, #128	@ 0x80
 80170ae:	0052      	lsls	r2, r2, #1
 80170b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80170b2:	697b      	ldr	r3, [r7, #20]
 80170b4:	0a9b      	lsrs	r3, r3, #10
 80170b6:	001a      	movs	r2, r3
 80170b8:	2301      	movs	r3, #1
 80170ba:	4013      	ands	r3, r2
 80170bc:	d010      	beq.n	80170e0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80170be:	693b      	ldr	r3, [r7, #16]
 80170c0:	09db      	lsrs	r3, r3, #7
 80170c2:	001a      	movs	r2, r3
 80170c4:	2301      	movs	r3, #1
 80170c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80170c8:	d00a      	beq.n	80170e0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170ce:	2208      	movs	r2, #8
 80170d0:	431a      	orrs	r2, r3
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	2280      	movs	r2, #128	@ 0x80
 80170dc:	00d2      	lsls	r2, r2, #3
 80170de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80170e0:	697b      	ldr	r3, [r7, #20]
 80170e2:	0a5b      	lsrs	r3, r3, #9
 80170e4:	001a      	movs	r2, r3
 80170e6:	2301      	movs	r3, #1
 80170e8:	4013      	ands	r3, r2
 80170ea:	d010      	beq.n	801710e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80170ec:	693b      	ldr	r3, [r7, #16]
 80170ee:	09db      	lsrs	r3, r3, #7
 80170f0:	001a      	movs	r2, r3
 80170f2:	2301      	movs	r3, #1
 80170f4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80170f6:	d00a      	beq.n	801710e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170fc:	2202      	movs	r2, #2
 80170fe:	431a      	orrs	r2, r3
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	2280      	movs	r2, #128	@ 0x80
 801710a:	0092      	lsls	r2, r2, #2
 801710c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017112:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	220b      	movs	r2, #11
 8017118:	4013      	ands	r3, r2
 801711a:	d005      	beq.n	8017128 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 801711c:	68fa      	ldr	r2, [r7, #12]
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	0011      	movs	r1, r2
 8017122:	0018      	movs	r0, r3
 8017124:	f001 f9e2 	bl	80184ec <I2C_ITError>
  }
}
 8017128:	46c0      	nop			@ (mov r8, r8)
 801712a:	46bd      	mov	sp, r7
 801712c:	b006      	add	sp, #24
 801712e:	bd80      	pop	{r7, pc}

08017130 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b082      	sub	sp, #8
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8017138:	46c0      	nop			@ (mov r8, r8)
 801713a:	46bd      	mov	sp, r7
 801713c:	b002      	add	sp, #8
 801713e:	bd80      	pop	{r7, pc}

08017140 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b082      	sub	sp, #8
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8017148:	46c0      	nop			@ (mov r8, r8)
 801714a:	46bd      	mov	sp, r7
 801714c:	b002      	add	sp, #8
 801714e:	bd80      	pop	{r7, pc}

08017150 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8017158:	46c0      	nop			@ (mov r8, r8)
 801715a:	46bd      	mov	sp, r7
 801715c:	b002      	add	sp, #8
 801715e:	bd80      	pop	{r7, pc}

08017160 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b082      	sub	sp, #8
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8017168:	46c0      	nop			@ (mov r8, r8)
 801716a:	46bd      	mov	sp, r7
 801716c:	b002      	add	sp, #8
 801716e:	bd80      	pop	{r7, pc}

08017170 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b082      	sub	sp, #8
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	0008      	movs	r0, r1
 801717a:	0011      	movs	r1, r2
 801717c:	1cfb      	adds	r3, r7, #3
 801717e:	1c02      	adds	r2, r0, #0
 8017180:	701a      	strb	r2, [r3, #0]
 8017182:	003b      	movs	r3, r7
 8017184:	1c0a      	adds	r2, r1, #0
 8017186:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8017188:	46c0      	nop			@ (mov r8, r8)
 801718a:	46bd      	mov	sp, r7
 801718c:	b002      	add	sp, #8
 801718e:	bd80      	pop	{r7, pc}

08017190 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b082      	sub	sp, #8
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8017198:	46c0      	nop			@ (mov r8, r8)
 801719a:	46bd      	mov	sp, r7
 801719c:	b002      	add	sp, #8
 801719e:	bd80      	pop	{r7, pc}

080171a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b082      	sub	sp, #8
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80171a8:	46c0      	nop			@ (mov r8, r8)
 80171aa:	46bd      	mov	sp, r7
 80171ac:	b002      	add	sp, #8
 80171ae:	bd80      	pop	{r7, pc}

080171b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b082      	sub	sp, #8
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80171b8:	46c0      	nop			@ (mov r8, r8)
 80171ba:	46bd      	mov	sp, r7
 80171bc:	b002      	add	sp, #8
 80171be:	bd80      	pop	{r7, pc}

080171c0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b082      	sub	sp, #8
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80171c8:	46c0      	nop			@ (mov r8, r8)
 80171ca:	46bd      	mov	sp, r7
 80171cc:	b002      	add	sp, #8
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b082      	sub	sp, #8
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80171d8:	46c0      	nop			@ (mov r8, r8)
 80171da:	46bd      	mov	sp, r7
 80171dc:	b002      	add	sp, #8
 80171de:	bd80      	pop	{r7, pc}

080171e0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80171e0:	b590      	push	{r4, r7, lr}
 80171e2:	b089      	sub	sp, #36	@ 0x24
 80171e4:	af02      	add	r7, sp, #8
 80171e6:	60f8      	str	r0, [r7, #12]
 80171e8:	60b9      	str	r1, [r7, #8]
 80171ea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2240      	movs	r2, #64	@ 0x40
 80171f4:	5c9b      	ldrb	r3, [r3, r2]
 80171f6:	2b01      	cmp	r3, #1
 80171f8:	d101      	bne.n	80171fe <I2C_Master_ISR_IT+0x1e>
 80171fa:	2302      	movs	r3, #2
 80171fc:	e12b      	b.n	8017456 <I2C_Master_ISR_IT+0x276>
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	2240      	movs	r2, #64	@ 0x40
 8017202:	2101      	movs	r1, #1
 8017204:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8017206:	697b      	ldr	r3, [r7, #20]
 8017208:	091b      	lsrs	r3, r3, #4
 801720a:	001a      	movs	r2, r3
 801720c:	2301      	movs	r3, #1
 801720e:	4013      	ands	r3, r2
 8017210:	d014      	beq.n	801723c <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	091b      	lsrs	r3, r3, #4
 8017216:	001a      	movs	r2, r3
 8017218:	2301      	movs	r3, #1
 801721a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801721c:	d00e      	beq.n	801723c <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	2210      	movs	r2, #16
 8017224:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801722a:	2204      	movs	r2, #4
 801722c:	431a      	orrs	r2, r3
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	0018      	movs	r0, r3
 8017236:	f001 fa84 	bl	8018742 <I2C_Flush_TXDR>
 801723a:	e0f5      	b.n	8017428 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	089b      	lsrs	r3, r3, #2
 8017240:	001a      	movs	r2, r3
 8017242:	2301      	movs	r3, #1
 8017244:	4013      	ands	r3, r2
 8017246:	d023      	beq.n	8017290 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	089b      	lsrs	r3, r3, #2
 801724c:	001a      	movs	r2, r3
 801724e:	2301      	movs	r3, #1
 8017250:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8017252:	d01d      	beq.n	8017290 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8017254:	697b      	ldr	r3, [r7, #20]
 8017256:	2204      	movs	r2, #4
 8017258:	4393      	bics	r3, r2
 801725a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017266:	b2d2      	uxtb	r2, r2
 8017268:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801726e:	1c5a      	adds	r2, r3, #1
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017278:	3b01      	subs	r3, #1
 801727a:	b29a      	uxth	r2, r3
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017284:	b29b      	uxth	r3, r3
 8017286:	3b01      	subs	r3, #1
 8017288:	b29a      	uxth	r2, r3
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801728e:	e0cb      	b.n	8017428 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	085b      	lsrs	r3, r3, #1
 8017294:	001a      	movs	r2, r3
 8017296:	2301      	movs	r3, #1
 8017298:	4013      	ands	r3, r2
 801729a:	d01e      	beq.n	80172da <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	085b      	lsrs	r3, r3, #1
 80172a0:	001a      	movs	r2, r3
 80172a2:	2301      	movs	r3, #1
 80172a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80172a6:	d018      	beq.n	80172da <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172ac:	781a      	ldrb	r2, [r3, #0]
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172b8:	1c5a      	adds	r2, r3, #1
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172c2:	3b01      	subs	r3, #1
 80172c4:	b29a      	uxth	r2, r3
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172ce:	b29b      	uxth	r3, r3
 80172d0:	3b01      	subs	r3, #1
 80172d2:	b29a      	uxth	r2, r3
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80172d8:	e0a6      	b.n	8017428 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80172da:	697b      	ldr	r3, [r7, #20]
 80172dc:	09db      	lsrs	r3, r3, #7
 80172de:	001a      	movs	r2, r3
 80172e0:	2301      	movs	r3, #1
 80172e2:	4013      	ands	r3, r2
 80172e4:	d100      	bne.n	80172e8 <I2C_Master_ISR_IT+0x108>
 80172e6:	e06b      	b.n	80173c0 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	099b      	lsrs	r3, r3, #6
 80172ec:	001a      	movs	r2, r3
 80172ee:	2301      	movs	r3, #1
 80172f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80172f2:	d065      	beq.n	80173c0 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172f8:	b29b      	uxth	r3, r3
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d04a      	beq.n	8017394 <I2C_Master_ISR_IT+0x1b4>
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017302:	2b00      	cmp	r3, #0
 8017304:	d146      	bne.n	8017394 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	685b      	ldr	r3, [r3, #4]
 801730c:	b29a      	uxth	r2, r3
 801730e:	2112      	movs	r1, #18
 8017310:	187b      	adds	r3, r7, r1
 8017312:	0592      	lsls	r2, r2, #22
 8017314:	0d92      	lsrs	r2, r2, #22
 8017316:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801731c:	b29b      	uxth	r3, r3
 801731e:	2bff      	cmp	r3, #255	@ 0xff
 8017320:	d910      	bls.n	8017344 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	22ff      	movs	r2, #255	@ 0xff
 8017326:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801732c:	b2da      	uxtb	r2, r3
 801732e:	2380      	movs	r3, #128	@ 0x80
 8017330:	045c      	lsls	r4, r3, #17
 8017332:	187b      	adds	r3, r7, r1
 8017334:	8819      	ldrh	r1, [r3, #0]
 8017336:	68f8      	ldr	r0, [r7, #12]
 8017338:	2300      	movs	r3, #0
 801733a:	9300      	str	r3, [sp, #0]
 801733c:	0023      	movs	r3, r4
 801733e:	f001 fd4d 	bl	8018ddc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017342:	e03c      	b.n	80173be <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017348:	b29a      	uxth	r2, r3
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017352:	4a43      	ldr	r2, [pc, #268]	@ (8017460 <I2C_Master_ISR_IT+0x280>)
 8017354:	4293      	cmp	r3, r2
 8017356:	d00e      	beq.n	8017376 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801735c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8017362:	2312      	movs	r3, #18
 8017364:	18fb      	adds	r3, r7, r3
 8017366:	8819      	ldrh	r1, [r3, #0]
 8017368:	68f8      	ldr	r0, [r7, #12]
 801736a:	2300      	movs	r3, #0
 801736c:	9300      	str	r3, [sp, #0]
 801736e:	0023      	movs	r3, r4
 8017370:	f001 fd34 	bl	8018ddc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017374:	e023      	b.n	80173be <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801737a:	b2da      	uxtb	r2, r3
 801737c:	2380      	movs	r3, #128	@ 0x80
 801737e:	049c      	lsls	r4, r3, #18
 8017380:	2312      	movs	r3, #18
 8017382:	18fb      	adds	r3, r7, r3
 8017384:	8819      	ldrh	r1, [r3, #0]
 8017386:	68f8      	ldr	r0, [r7, #12]
 8017388:	2300      	movs	r3, #0
 801738a:	9300      	str	r3, [sp, #0]
 801738c:	0023      	movs	r3, r4
 801738e:	f001 fd25 	bl	8018ddc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017392:	e014      	b.n	80173be <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	685a      	ldr	r2, [r3, #4]
 801739a:	2380      	movs	r3, #128	@ 0x80
 801739c:	049b      	lsls	r3, r3, #18
 801739e:	401a      	ands	r2, r3
 80173a0:	2380      	movs	r3, #128	@ 0x80
 80173a2:	049b      	lsls	r3, r3, #18
 80173a4:	429a      	cmp	r2, r3
 80173a6:	d004      	beq.n	80173b2 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	0018      	movs	r0, r3
 80173ac:	f000 fda6 	bl	8017efc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80173b0:	e03a      	b.n	8017428 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	2140      	movs	r1, #64	@ 0x40
 80173b6:	0018      	movs	r0, r3
 80173b8:	f001 f898 	bl	80184ec <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80173bc:	e034      	b.n	8017428 <I2C_Master_ISR_IT+0x248>
 80173be:	e033      	b.n	8017428 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	099b      	lsrs	r3, r3, #6
 80173c4:	001a      	movs	r2, r3
 80173c6:	2301      	movs	r3, #1
 80173c8:	4013      	ands	r3, r2
 80173ca:	d02d      	beq.n	8017428 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	099b      	lsrs	r3, r3, #6
 80173d0:	001a      	movs	r2, r3
 80173d2:	2301      	movs	r3, #1
 80173d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80173d6:	d027      	beq.n	8017428 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173dc:	b29b      	uxth	r3, r3
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d11d      	bne.n	801741e <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	685a      	ldr	r2, [r3, #4]
 80173e8:	2380      	movs	r3, #128	@ 0x80
 80173ea:	049b      	lsls	r3, r3, #18
 80173ec:	401a      	ands	r2, r3
 80173ee:	2380      	movs	r3, #128	@ 0x80
 80173f0:	049b      	lsls	r3, r3, #18
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d018      	beq.n	8017428 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173fa:	4a19      	ldr	r2, [pc, #100]	@ (8017460 <I2C_Master_ISR_IT+0x280>)
 80173fc:	4293      	cmp	r3, r2
 80173fe:	d109      	bne.n	8017414 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	685a      	ldr	r2, [r3, #4]
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2180      	movs	r1, #128	@ 0x80
 801740c:	01c9      	lsls	r1, r1, #7
 801740e:	430a      	orrs	r2, r1
 8017410:	605a      	str	r2, [r3, #4]
 8017412:	e009      	b.n	8017428 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	0018      	movs	r0, r3
 8017418:	f000 fd70 	bl	8017efc <I2C_ITMasterSeqCplt>
 801741c:	e004      	b.n	8017428 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	2140      	movs	r1, #64	@ 0x40
 8017422:	0018      	movs	r0, r3
 8017424:	f001 f862 	bl	80184ec <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017428:	697b      	ldr	r3, [r7, #20]
 801742a:	095b      	lsrs	r3, r3, #5
 801742c:	001a      	movs	r2, r3
 801742e:	2301      	movs	r3, #1
 8017430:	4013      	ands	r3, r2
 8017432:	d00b      	beq.n	801744c <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	095b      	lsrs	r3, r3, #5
 8017438:	001a      	movs	r2, r3
 801743a:	2301      	movs	r3, #1
 801743c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801743e:	d005      	beq.n	801744c <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8017440:	697a      	ldr	r2, [r7, #20]
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	0011      	movs	r1, r2
 8017446:	0018      	movs	r0, r3
 8017448:	f000 fe00 	bl	801804c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	2240      	movs	r2, #64	@ 0x40
 8017450:	2100      	movs	r1, #0
 8017452:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017454:	2300      	movs	r3, #0
}
 8017456:	0018      	movs	r0, r3
 8017458:	46bd      	mov	sp, r7
 801745a:	b007      	add	sp, #28
 801745c:	bd90      	pop	{r4, r7, pc}
 801745e:	46c0      	nop			@ (mov r8, r8)
 8017460:	ffff0000 	.word	0xffff0000

08017464 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b086      	sub	sp, #24
 8017468:	af00      	add	r7, sp, #0
 801746a:	60f8      	str	r0, [r7, #12]
 801746c:	60b9      	str	r1, [r7, #8]
 801746e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017474:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	2240      	movs	r2, #64	@ 0x40
 801747e:	5c9b      	ldrb	r3, [r3, r2]
 8017480:	2b01      	cmp	r3, #1
 8017482:	d101      	bne.n	8017488 <I2C_Slave_ISR_IT+0x24>
 8017484:	2302      	movs	r3, #2
 8017486:	e0fa      	b.n	801767e <I2C_Slave_ISR_IT+0x21a>
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	2240      	movs	r2, #64	@ 0x40
 801748c:	2101      	movs	r1, #1
 801748e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	095b      	lsrs	r3, r3, #5
 8017494:	001a      	movs	r2, r3
 8017496:	2301      	movs	r3, #1
 8017498:	4013      	ands	r3, r2
 801749a:	d00b      	beq.n	80174b4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	095b      	lsrs	r3, r3, #5
 80174a0:	001a      	movs	r2, r3
 80174a2:	2301      	movs	r3, #1
 80174a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80174a6:	d005      	beq.n	80174b4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80174a8:	693a      	ldr	r2, [r7, #16]
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	0011      	movs	r1, r2
 80174ae:	0018      	movs	r0, r3
 80174b0:	f000 fe9e 	bl	80181f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80174b4:	693b      	ldr	r3, [r7, #16]
 80174b6:	091b      	lsrs	r3, r3, #4
 80174b8:	001a      	movs	r2, r3
 80174ba:	2301      	movs	r3, #1
 80174bc:	4013      	ands	r3, r2
 80174be:	d054      	beq.n	801756a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	091b      	lsrs	r3, r3, #4
 80174c4:	001a      	movs	r2, r3
 80174c6:	2301      	movs	r3, #1
 80174c8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80174ca:	d04e      	beq.n	801756a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80174d0:	b29b      	uxth	r3, r3
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d12d      	bne.n	8017532 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	2241      	movs	r2, #65	@ 0x41
 80174da:	5c9b      	ldrb	r3, [r3, r2]
 80174dc:	b2db      	uxtb	r3, r3
 80174de:	2b28      	cmp	r3, #40	@ 0x28
 80174e0:	d10b      	bne.n	80174fa <I2C_Slave_ISR_IT+0x96>
 80174e2:	697a      	ldr	r2, [r7, #20]
 80174e4:	2380      	movs	r3, #128	@ 0x80
 80174e6:	049b      	lsls	r3, r3, #18
 80174e8:	429a      	cmp	r2, r3
 80174ea:	d106      	bne.n	80174fa <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80174ec:	693a      	ldr	r2, [r7, #16]
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	0011      	movs	r1, r2
 80174f2:	0018      	movs	r0, r3
 80174f4:	f000 ffa0 	bl	8018438 <I2C_ITListenCplt>
 80174f8:	e036      	b.n	8017568 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	2241      	movs	r2, #65	@ 0x41
 80174fe:	5c9b      	ldrb	r3, [r3, r2]
 8017500:	b2db      	uxtb	r3, r3
 8017502:	2b29      	cmp	r3, #41	@ 0x29
 8017504:	d110      	bne.n	8017528 <I2C_Slave_ISR_IT+0xc4>
 8017506:	697b      	ldr	r3, [r7, #20]
 8017508:	4a5f      	ldr	r2, [pc, #380]	@ (8017688 <I2C_Slave_ISR_IT+0x224>)
 801750a:	4293      	cmp	r3, r2
 801750c:	d00c      	beq.n	8017528 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	2210      	movs	r2, #16
 8017514:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	0018      	movs	r0, r3
 801751a:	f001 f912 	bl	8018742 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	0018      	movs	r0, r3
 8017522:	f000 fd2d 	bl	8017f80 <I2C_ITSlaveSeqCplt>
 8017526:	e01f      	b.n	8017568 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	2210      	movs	r2, #16
 801752e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8017530:	e09d      	b.n	801766e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	2210      	movs	r2, #16
 8017538:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801753e:	2204      	movs	r2, #4
 8017540:	431a      	orrs	r2, r3
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8017546:	697b      	ldr	r3, [r7, #20]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d005      	beq.n	8017558 <I2C_Slave_ISR_IT+0xf4>
 801754c:	697a      	ldr	r2, [r7, #20]
 801754e:	2380      	movs	r3, #128	@ 0x80
 8017550:	045b      	lsls	r3, r3, #17
 8017552:	429a      	cmp	r2, r3
 8017554:	d000      	beq.n	8017558 <I2C_Slave_ISR_IT+0xf4>
 8017556:	e08a      	b.n	801766e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	0011      	movs	r1, r2
 8017560:	0018      	movs	r0, r3
 8017562:	f000 ffc3 	bl	80184ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8017566:	e082      	b.n	801766e <I2C_Slave_ISR_IT+0x20a>
 8017568:	e081      	b.n	801766e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	089b      	lsrs	r3, r3, #2
 801756e:	001a      	movs	r2, r3
 8017570:	2301      	movs	r3, #1
 8017572:	4013      	ands	r3, r2
 8017574:	d031      	beq.n	80175da <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	089b      	lsrs	r3, r3, #2
 801757a:	001a      	movs	r2, r3
 801757c:	2301      	movs	r3, #1
 801757e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8017580:	d02b      	beq.n	80175da <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017586:	b29b      	uxth	r3, r3
 8017588:	2b00      	cmp	r3, #0
 801758a:	d018      	beq.n	80175be <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017596:	b2d2      	uxtb	r2, r2
 8017598:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801759e:	1c5a      	adds	r2, r3, #1
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175a8:	3b01      	subs	r3, #1
 80175aa:	b29a      	uxth	r2, r3
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175b4:	b29b      	uxth	r3, r3
 80175b6:	3b01      	subs	r3, #1
 80175b8:	b29a      	uxth	r2, r3
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175c2:	b29b      	uxth	r3, r3
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d154      	bne.n	8017672 <I2C_Slave_ISR_IT+0x20e>
 80175c8:	697b      	ldr	r3, [r7, #20]
 80175ca:	4a2f      	ldr	r2, [pc, #188]	@ (8017688 <I2C_Slave_ISR_IT+0x224>)
 80175cc:	4293      	cmp	r3, r2
 80175ce:	d050      	beq.n	8017672 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	0018      	movs	r0, r3
 80175d4:	f000 fcd4 	bl	8017f80 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80175d8:	e04b      	b.n	8017672 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80175da:	693b      	ldr	r3, [r7, #16]
 80175dc:	08db      	lsrs	r3, r3, #3
 80175de:	001a      	movs	r2, r3
 80175e0:	2301      	movs	r3, #1
 80175e2:	4013      	ands	r3, r2
 80175e4:	d00c      	beq.n	8017600 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	08db      	lsrs	r3, r3, #3
 80175ea:	001a      	movs	r2, r3
 80175ec:	2301      	movs	r3, #1
 80175ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80175f0:	d006      	beq.n	8017600 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80175f2:	693a      	ldr	r2, [r7, #16]
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	0011      	movs	r1, r2
 80175f8:	0018      	movs	r0, r3
 80175fa:	f000 fbdb 	bl	8017db4 <I2C_ITAddrCplt>
 80175fe:	e039      	b.n	8017674 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017600:	693b      	ldr	r3, [r7, #16]
 8017602:	085b      	lsrs	r3, r3, #1
 8017604:	001a      	movs	r2, r3
 8017606:	2301      	movs	r3, #1
 8017608:	4013      	ands	r3, r2
 801760a:	d033      	beq.n	8017674 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	085b      	lsrs	r3, r3, #1
 8017610:	001a      	movs	r2, r3
 8017612:	2301      	movs	r3, #1
 8017614:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017616:	d02d      	beq.n	8017674 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801761c:	b29b      	uxth	r3, r3
 801761e:	2b00      	cmp	r3, #0
 8017620:	d018      	beq.n	8017654 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017626:	781a      	ldrb	r2, [r3, #0]
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017632:	1c5a      	adds	r2, r3, #1
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801763c:	b29b      	uxth	r3, r3
 801763e:	3b01      	subs	r3, #1
 8017640:	b29a      	uxth	r2, r3
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801764a:	3b01      	subs	r3, #1
 801764c:	b29a      	uxth	r2, r3
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017652:	e00f      	b.n	8017674 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8017654:	697a      	ldr	r2, [r7, #20]
 8017656:	2380      	movs	r3, #128	@ 0x80
 8017658:	045b      	lsls	r3, r3, #17
 801765a:	429a      	cmp	r2, r3
 801765c:	d002      	beq.n	8017664 <I2C_Slave_ISR_IT+0x200>
 801765e:	697b      	ldr	r3, [r7, #20]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d107      	bne.n	8017674 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	0018      	movs	r0, r3
 8017668:	f000 fc8a 	bl	8017f80 <I2C_ITSlaveSeqCplt>
 801766c:	e002      	b.n	8017674 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 801766e:	46c0      	nop			@ (mov r8, r8)
 8017670:	e000      	b.n	8017674 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8017672:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	2240      	movs	r2, #64	@ 0x40
 8017678:	2100      	movs	r1, #0
 801767a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801767c:	2300      	movs	r3, #0
}
 801767e:	0018      	movs	r0, r3
 8017680:	46bd      	mov	sp, r7
 8017682:	b006      	add	sp, #24
 8017684:	bd80      	pop	{r7, pc}
 8017686:	46c0      	nop			@ (mov r8, r8)
 8017688:	ffff0000 	.word	0xffff0000

0801768c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 801768c:	b590      	push	{r4, r7, lr}
 801768e:	b089      	sub	sp, #36	@ 0x24
 8017690:	af02      	add	r7, sp, #8
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	2240      	movs	r2, #64	@ 0x40
 801769c:	5c9b      	ldrb	r3, [r3, r2]
 801769e:	2b01      	cmp	r3, #1
 80176a0:	d101      	bne.n	80176a6 <I2C_Master_ISR_DMA+0x1a>
 80176a2:	2302      	movs	r3, #2
 80176a4:	e0f7      	b.n	8017896 <I2C_Master_ISR_DMA+0x20a>
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	2240      	movs	r2, #64	@ 0x40
 80176aa:	2101      	movs	r1, #1
 80176ac:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	091b      	lsrs	r3, r3, #4
 80176b2:	001a      	movs	r2, r3
 80176b4:	2301      	movs	r3, #1
 80176b6:	4013      	ands	r3, r2
 80176b8:	d019      	beq.n	80176ee <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	091b      	lsrs	r3, r3, #4
 80176be:	001a      	movs	r2, r3
 80176c0:	2301      	movs	r3, #1
 80176c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80176c4:	d013      	beq.n	80176ee <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	2210      	movs	r2, #16
 80176cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80176d2:	2204      	movs	r2, #4
 80176d4:	431a      	orrs	r2, r3
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	2120      	movs	r1, #32
 80176de:	0018      	movs	r0, r3
 80176e0:	f001 fbb6 	bl	8018e50 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	0018      	movs	r0, r3
 80176e8:	f001 f82b 	bl	8018742 <I2C_Flush_TXDR>
 80176ec:	e0ce      	b.n	801788c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80176ee:	68bb      	ldr	r3, [r7, #8]
 80176f0:	09db      	lsrs	r3, r3, #7
 80176f2:	001a      	movs	r2, r3
 80176f4:	2301      	movs	r3, #1
 80176f6:	4013      	ands	r3, r2
 80176f8:	d100      	bne.n	80176fc <I2C_Master_ISR_DMA+0x70>
 80176fa:	e07e      	b.n	80177fa <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	099b      	lsrs	r3, r3, #6
 8017700:	001a      	movs	r2, r3
 8017702:	2301      	movs	r3, #1
 8017704:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017706:	d100      	bne.n	801770a <I2C_Master_ISR_DMA+0x7e>
 8017708:	e077      	b.n	80177fa <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	681a      	ldr	r2, [r3, #0]
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	2140      	movs	r1, #64	@ 0x40
 8017716:	438a      	bics	r2, r1
 8017718:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801771e:	b29b      	uxth	r3, r3
 8017720:	2b00      	cmp	r3, #0
 8017722:	d055      	beq.n	80177d0 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	685b      	ldr	r3, [r3, #4]
 801772a:	b29a      	uxth	r2, r3
 801772c:	2312      	movs	r3, #18
 801772e:	18fb      	adds	r3, r7, r3
 8017730:	0592      	lsls	r2, r2, #22
 8017732:	0d92      	lsrs	r2, r2, #22
 8017734:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801773a:	b29b      	uxth	r3, r3
 801773c:	2bff      	cmp	r3, #255	@ 0xff
 801773e:	d906      	bls.n	801774e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	22ff      	movs	r2, #255	@ 0xff
 8017744:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8017746:	2380      	movs	r3, #128	@ 0x80
 8017748:	045b      	lsls	r3, r3, #17
 801774a:	617b      	str	r3, [r7, #20]
 801774c:	e010      	b.n	8017770 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017752:	b29a      	uxth	r2, r3
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801775c:	4a50      	ldr	r2, [pc, #320]	@ (80178a0 <I2C_Master_ISR_DMA+0x214>)
 801775e:	4293      	cmp	r3, r2
 8017760:	d003      	beq.n	801776a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017766:	617b      	str	r3, [r7, #20]
 8017768:	e002      	b.n	8017770 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801776a:	2380      	movs	r3, #128	@ 0x80
 801776c:	049b      	lsls	r3, r3, #18
 801776e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017774:	b2da      	uxtb	r2, r3
 8017776:	697c      	ldr	r4, [r7, #20]
 8017778:	2312      	movs	r3, #18
 801777a:	18fb      	adds	r3, r7, r3
 801777c:	8819      	ldrh	r1, [r3, #0]
 801777e:	68f8      	ldr	r0, [r7, #12]
 8017780:	2300      	movs	r3, #0
 8017782:	9300      	str	r3, [sp, #0]
 8017784:	0023      	movs	r3, r4
 8017786:	f001 fb29 	bl	8018ddc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801778e:	b29a      	uxth	r2, r3
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017794:	1ad3      	subs	r3, r2, r3
 8017796:	b29a      	uxth	r2, r3
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	2241      	movs	r2, #65	@ 0x41
 80177a0:	5c9b      	ldrb	r3, [r3, r2]
 80177a2:	b2db      	uxtb	r3, r3
 80177a4:	2b22      	cmp	r3, #34	@ 0x22
 80177a6:	d109      	bne.n	80177bc <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	681a      	ldr	r2, [r3, #0]
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	2180      	movs	r1, #128	@ 0x80
 80177b4:	0209      	lsls	r1, r1, #8
 80177b6:	430a      	orrs	r2, r1
 80177b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80177ba:	e067      	b.n	801788c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	681a      	ldr	r2, [r3, #0]
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	2180      	movs	r1, #128	@ 0x80
 80177c8:	01c9      	lsls	r1, r1, #7
 80177ca:	430a      	orrs	r2, r1
 80177cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80177ce:	e05d      	b.n	801788c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	685a      	ldr	r2, [r3, #4]
 80177d6:	2380      	movs	r3, #128	@ 0x80
 80177d8:	049b      	lsls	r3, r3, #18
 80177da:	401a      	ands	r2, r3
 80177dc:	2380      	movs	r3, #128	@ 0x80
 80177de:	049b      	lsls	r3, r3, #18
 80177e0:	429a      	cmp	r2, r3
 80177e2:	d004      	beq.n	80177ee <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	0018      	movs	r0, r3
 80177e8:	f000 fb88 	bl	8017efc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80177ec:	e04e      	b.n	801788c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	2140      	movs	r1, #64	@ 0x40
 80177f2:	0018      	movs	r0, r3
 80177f4:	f000 fe7a 	bl	80184ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80177f8:	e048      	b.n	801788c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80177fa:	68bb      	ldr	r3, [r7, #8]
 80177fc:	099b      	lsrs	r3, r3, #6
 80177fe:	001a      	movs	r2, r3
 8017800:	2301      	movs	r3, #1
 8017802:	4013      	ands	r3, r2
 8017804:	d02e      	beq.n	8017864 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	099b      	lsrs	r3, r3, #6
 801780a:	001a      	movs	r2, r3
 801780c:	2301      	movs	r3, #1
 801780e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017810:	d028      	beq.n	8017864 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017816:	b29b      	uxth	r3, r3
 8017818:	2b00      	cmp	r3, #0
 801781a:	d11d      	bne.n	8017858 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	685a      	ldr	r2, [r3, #4]
 8017822:	2380      	movs	r3, #128	@ 0x80
 8017824:	049b      	lsls	r3, r3, #18
 8017826:	401a      	ands	r2, r3
 8017828:	2380      	movs	r3, #128	@ 0x80
 801782a:	049b      	lsls	r3, r3, #18
 801782c:	429a      	cmp	r2, r3
 801782e:	d02c      	beq.n	801788a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017834:	4a1a      	ldr	r2, [pc, #104]	@ (80178a0 <I2C_Master_ISR_DMA+0x214>)
 8017836:	4293      	cmp	r3, r2
 8017838:	d109      	bne.n	801784e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	685a      	ldr	r2, [r3, #4]
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2180      	movs	r1, #128	@ 0x80
 8017846:	01c9      	lsls	r1, r1, #7
 8017848:	430a      	orrs	r2, r1
 801784a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 801784c:	e01d      	b.n	801788a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	0018      	movs	r0, r3
 8017852:	f000 fb53 	bl	8017efc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8017856:	e018      	b.n	801788a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	2140      	movs	r1, #64	@ 0x40
 801785c:	0018      	movs	r0, r3
 801785e:	f000 fe45 	bl	80184ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8017862:	e012      	b.n	801788a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017864:	68bb      	ldr	r3, [r7, #8]
 8017866:	095b      	lsrs	r3, r3, #5
 8017868:	001a      	movs	r2, r3
 801786a:	2301      	movs	r3, #1
 801786c:	4013      	ands	r3, r2
 801786e:	d00d      	beq.n	801788c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	095b      	lsrs	r3, r3, #5
 8017874:	001a      	movs	r2, r3
 8017876:	2301      	movs	r3, #1
 8017878:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801787a:	d007      	beq.n	801788c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801787c:	68ba      	ldr	r2, [r7, #8]
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	0011      	movs	r1, r2
 8017882:	0018      	movs	r0, r3
 8017884:	f000 fbe2 	bl	801804c <I2C_ITMasterCplt>
 8017888:	e000      	b.n	801788c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 801788a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	2240      	movs	r2, #64	@ 0x40
 8017890:	2100      	movs	r1, #0
 8017892:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017894:	2300      	movs	r3, #0
}
 8017896:	0018      	movs	r0, r3
 8017898:	46bd      	mov	sp, r7
 801789a:	b007      	add	sp, #28
 801789c:	bd90      	pop	{r4, r7, pc}
 801789e:	46c0      	nop			@ (mov r8, r8)
 80178a0:	ffff0000 	.word	0xffff0000

080178a4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80178a4:	b590      	push	{r4, r7, lr}
 80178a6:	b089      	sub	sp, #36	@ 0x24
 80178a8:	af02      	add	r7, sp, #8
 80178aa:	60f8      	str	r0, [r7, #12]
 80178ac:	60b9      	str	r1, [r7, #8]
 80178ae:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80178b0:	4b92      	ldr	r3, [pc, #584]	@ (8017afc <I2C_Mem_ISR_DMA+0x258>)
 80178b2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	2240      	movs	r2, #64	@ 0x40
 80178b8:	5c9b      	ldrb	r3, [r3, r2]
 80178ba:	2b01      	cmp	r3, #1
 80178bc:	d101      	bne.n	80178c2 <I2C_Mem_ISR_DMA+0x1e>
 80178be:	2302      	movs	r3, #2
 80178c0:	e118      	b.n	8017af4 <I2C_Mem_ISR_DMA+0x250>
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	2240      	movs	r2, #64	@ 0x40
 80178c6:	2101      	movs	r1, #1
 80178c8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80178ca:	68bb      	ldr	r3, [r7, #8]
 80178cc:	091b      	lsrs	r3, r3, #4
 80178ce:	001a      	movs	r2, r3
 80178d0:	2301      	movs	r3, #1
 80178d2:	4013      	ands	r3, r2
 80178d4:	d019      	beq.n	801790a <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	091b      	lsrs	r3, r3, #4
 80178da:	001a      	movs	r2, r3
 80178dc:	2301      	movs	r3, #1
 80178de:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80178e0:	d013      	beq.n	801790a <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	2210      	movs	r2, #16
 80178e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178ee:	2204      	movs	r2, #4
 80178f0:	431a      	orrs	r2, r3
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	2120      	movs	r1, #32
 80178fa:	0018      	movs	r0, r3
 80178fc:	f001 faa8 	bl	8018e50 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	0018      	movs	r0, r3
 8017904:	f000 ff1d 	bl	8018742 <I2C_Flush_TXDR>
 8017908:	e0ef      	b.n	8017aea <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	085b      	lsrs	r3, r3, #1
 801790e:	001a      	movs	r2, r3
 8017910:	2301      	movs	r3, #1
 8017912:	4013      	ands	r3, r2
 8017914:	d00f      	beq.n	8017936 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	085b      	lsrs	r3, r3, #1
 801791a:	001a      	movs	r2, r3
 801791c:	2301      	movs	r3, #1
 801791e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017920:	d009      	beq.n	8017936 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	68fa      	ldr	r2, [r7, #12]
 8017928:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801792a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	2201      	movs	r2, #1
 8017930:	4252      	negs	r2, r2
 8017932:	651a      	str	r2, [r3, #80]	@ 0x50
 8017934:	e0d9      	b.n	8017aea <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017936:	68bb      	ldr	r3, [r7, #8]
 8017938:	09db      	lsrs	r3, r3, #7
 801793a:	001a      	movs	r2, r3
 801793c:	2301      	movs	r3, #1
 801793e:	4013      	ands	r3, r2
 8017940:	d060      	beq.n	8017a04 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	099b      	lsrs	r3, r3, #6
 8017946:	001a      	movs	r2, r3
 8017948:	2301      	movs	r3, #1
 801794a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801794c:	d05a      	beq.n	8017a04 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	2110      	movs	r1, #16
 8017952:	0018      	movs	r0, r3
 8017954:	f001 fa7c 	bl	8018e50 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801795c:	b29b      	uxth	r3, r3
 801795e:	2b00      	cmp	r3, #0
 8017960:	d04a      	beq.n	80179f8 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017966:	b29b      	uxth	r3, r3
 8017968:	2bff      	cmp	r3, #255	@ 0xff
 801796a:	d910      	bls.n	801798e <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	22ff      	movs	r2, #255	@ 0xff
 8017970:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017976:	b299      	uxth	r1, r3
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801797c:	b2da      	uxtb	r2, r3
 801797e:	2380      	movs	r3, #128	@ 0x80
 8017980:	045b      	lsls	r3, r3, #17
 8017982:	68f8      	ldr	r0, [r7, #12]
 8017984:	2400      	movs	r4, #0
 8017986:	9400      	str	r4, [sp, #0]
 8017988:	f001 fa28 	bl	8018ddc <I2C_TransferConfig>
 801798c:	e011      	b.n	80179b2 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017992:	b29a      	uxth	r2, r3
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801799c:	b299      	uxth	r1, r3
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179a2:	b2da      	uxtb	r2, r3
 80179a4:	2380      	movs	r3, #128	@ 0x80
 80179a6:	049b      	lsls	r3, r3, #18
 80179a8:	68f8      	ldr	r0, [r7, #12]
 80179aa:	2400      	movs	r4, #0
 80179ac:	9400      	str	r4, [sp, #0]
 80179ae:	f001 fa15 	bl	8018ddc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80179b6:	b29a      	uxth	r2, r3
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179bc:	1ad3      	subs	r3, r2, r3
 80179be:	b29a      	uxth	r2, r3
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	2241      	movs	r2, #65	@ 0x41
 80179c8:	5c9b      	ldrb	r3, [r3, r2]
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	2b22      	cmp	r3, #34	@ 0x22
 80179ce:	d109      	bne.n	80179e4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	681a      	ldr	r2, [r3, #0]
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	2180      	movs	r1, #128	@ 0x80
 80179dc:	0209      	lsls	r1, r1, #8
 80179de:	430a      	orrs	r2, r1
 80179e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80179e2:	e082      	b.n	8017aea <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	681a      	ldr	r2, [r3, #0]
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	2180      	movs	r1, #128	@ 0x80
 80179f0:	01c9      	lsls	r1, r1, #7
 80179f2:	430a      	orrs	r2, r1
 80179f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80179f6:	e078      	b.n	8017aea <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	2140      	movs	r1, #64	@ 0x40
 80179fc:	0018      	movs	r0, r3
 80179fe:	f000 fd75 	bl	80184ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8017a02:	e072      	b.n	8017aea <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017a04:	68bb      	ldr	r3, [r7, #8]
 8017a06:	099b      	lsrs	r3, r3, #6
 8017a08:	001a      	movs	r2, r3
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	4013      	ands	r3, r2
 8017a0e:	d05a      	beq.n	8017ac6 <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	099b      	lsrs	r3, r3, #6
 8017a14:	001a      	movs	r2, r3
 8017a16:	2301      	movs	r3, #1
 8017a18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017a1a:	d054      	beq.n	8017ac6 <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	2241      	movs	r2, #65	@ 0x41
 8017a20:	5c9b      	ldrb	r3, [r3, r2]
 8017a22:	b2db      	uxtb	r3, r3
 8017a24:	2b22      	cmp	r3, #34	@ 0x22
 8017a26:	d101      	bne.n	8017a2c <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8017a28:	4b35      	ldr	r3, [pc, #212]	@ (8017b00 <I2C_Mem_ISR_DMA+0x25c>)
 8017a2a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017a30:	b29b      	uxth	r3, r3
 8017a32:	2bff      	cmp	r3, #255	@ 0xff
 8017a34:	d911      	bls.n	8017a5a <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	22ff      	movs	r2, #255	@ 0xff
 8017a3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a40:	b299      	uxth	r1, r3
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017a46:	b2da      	uxtb	r2, r3
 8017a48:	2380      	movs	r3, #128	@ 0x80
 8017a4a:	045c      	lsls	r4, r3, #17
 8017a4c:	68f8      	ldr	r0, [r7, #12]
 8017a4e:	697b      	ldr	r3, [r7, #20]
 8017a50:	9300      	str	r3, [sp, #0]
 8017a52:	0023      	movs	r3, r4
 8017a54:	f001 f9c2 	bl	8018ddc <I2C_TransferConfig>
 8017a58:	e012      	b.n	8017a80 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017a5e:	b29a      	uxth	r2, r3
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a68:	b299      	uxth	r1, r3
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017a6e:	b2da      	uxtb	r2, r3
 8017a70:	2380      	movs	r3, #128	@ 0x80
 8017a72:	049c      	lsls	r4, r3, #18
 8017a74:	68f8      	ldr	r0, [r7, #12]
 8017a76:	697b      	ldr	r3, [r7, #20]
 8017a78:	9300      	str	r3, [sp, #0]
 8017a7a:	0023      	movs	r3, r4
 8017a7c:	f001 f9ae 	bl	8018ddc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017a84:	b29a      	uxth	r2, r3
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017a8a:	1ad3      	subs	r3, r2, r3
 8017a8c:	b29a      	uxth	r2, r3
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	2241      	movs	r2, #65	@ 0x41
 8017a96:	5c9b      	ldrb	r3, [r3, r2]
 8017a98:	b2db      	uxtb	r3, r3
 8017a9a:	2b22      	cmp	r3, #34	@ 0x22
 8017a9c:	d109      	bne.n	8017ab2 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	681a      	ldr	r2, [r3, #0]
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2180      	movs	r1, #128	@ 0x80
 8017aaa:	0209      	lsls	r1, r1, #8
 8017aac:	430a      	orrs	r2, r1
 8017aae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017ab0:	e01b      	b.n	8017aea <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	681a      	ldr	r2, [r3, #0]
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2180      	movs	r1, #128	@ 0x80
 8017abe:	01c9      	lsls	r1, r1, #7
 8017ac0:	430a      	orrs	r2, r1
 8017ac2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017ac4:	e011      	b.n	8017aea <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017ac6:	68bb      	ldr	r3, [r7, #8]
 8017ac8:	095b      	lsrs	r3, r3, #5
 8017aca:	001a      	movs	r2, r3
 8017acc:	2301      	movs	r3, #1
 8017ace:	4013      	ands	r3, r2
 8017ad0:	d00b      	beq.n	8017aea <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	095b      	lsrs	r3, r3, #5
 8017ad6:	001a      	movs	r2, r3
 8017ad8:	2301      	movs	r3, #1
 8017ada:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017adc:	d005      	beq.n	8017aea <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8017ade:	68ba      	ldr	r2, [r7, #8]
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	0011      	movs	r1, r2
 8017ae4:	0018      	movs	r0, r3
 8017ae6:	f000 fab1 	bl	801804c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	2240      	movs	r2, #64	@ 0x40
 8017aee:	2100      	movs	r1, #0
 8017af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017af2:	2300      	movs	r3, #0
}
 8017af4:	0018      	movs	r0, r3
 8017af6:	46bd      	mov	sp, r7
 8017af8:	b007      	add	sp, #28
 8017afa:	bd90      	pop	{r4, r7, pc}
 8017afc:	80002000 	.word	0x80002000
 8017b00:	80002400 	.word	0x80002400

08017b04 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b088      	sub	sp, #32
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b14:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8017b16:	2300      	movs	r3, #0
 8017b18:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	2240      	movs	r2, #64	@ 0x40
 8017b1e:	5c9b      	ldrb	r3, [r3, r2]
 8017b20:	2b01      	cmp	r3, #1
 8017b22:	d101      	bne.n	8017b28 <I2C_Slave_ISR_DMA+0x24>
 8017b24:	2302      	movs	r3, #2
 8017b26:	e0dd      	b.n	8017ce4 <I2C_Slave_ISR_DMA+0x1e0>
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	2240      	movs	r2, #64	@ 0x40
 8017b2c:	2101      	movs	r1, #1
 8017b2e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017b30:	68bb      	ldr	r3, [r7, #8]
 8017b32:	095b      	lsrs	r3, r3, #5
 8017b34:	001a      	movs	r2, r3
 8017b36:	2301      	movs	r3, #1
 8017b38:	4013      	ands	r3, r2
 8017b3a:	d00b      	beq.n	8017b54 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	095b      	lsrs	r3, r3, #5
 8017b40:	001a      	movs	r2, r3
 8017b42:	2301      	movs	r3, #1
 8017b44:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017b46:	d005      	beq.n	8017b54 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8017b48:	68ba      	ldr	r2, [r7, #8]
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	0011      	movs	r1, r2
 8017b4e:	0018      	movs	r0, r3
 8017b50:	f000 fb4e 	bl	80181f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	091b      	lsrs	r3, r3, #4
 8017b58:	001a      	movs	r2, r3
 8017b5a:	2301      	movs	r3, #1
 8017b5c:	4013      	ands	r3, r2
 8017b5e:	d100      	bne.n	8017b62 <I2C_Slave_ISR_DMA+0x5e>
 8017b60:	e0a9      	b.n	8017cb6 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	091b      	lsrs	r3, r3, #4
 8017b66:	001a      	movs	r2, r3
 8017b68:	2301      	movs	r3, #1
 8017b6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017b6c:	d100      	bne.n	8017b70 <I2C_Slave_ISR_DMA+0x6c>
 8017b6e:	e0a2      	b.n	8017cb6 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	0b9b      	lsrs	r3, r3, #14
 8017b74:	001a      	movs	r2, r3
 8017b76:	2301      	movs	r3, #1
 8017b78:	4013      	ands	r3, r2
 8017b7a:	d106      	bne.n	8017b8a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	0bdb      	lsrs	r3, r3, #15
 8017b80:	001a      	movs	r2, r3
 8017b82:	2301      	movs	r3, #1
 8017b84:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017b86:	d100      	bne.n	8017b8a <I2C_Slave_ISR_DMA+0x86>
 8017b88:	e08e      	b.n	8017ca8 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d00d      	beq.n	8017bae <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	0bdb      	lsrs	r3, r3, #15
 8017b96:	001a      	movs	r2, r3
 8017b98:	2301      	movs	r3, #1
 8017b9a:	4013      	ands	r3, r2
 8017b9c:	d007      	beq.n	8017bae <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	685b      	ldr	r3, [r3, #4]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d101      	bne.n	8017bae <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8017baa:	2301      	movs	r3, #1
 8017bac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d00d      	beq.n	8017bd2 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	0b9b      	lsrs	r3, r3, #14
 8017bba:	001a      	movs	r2, r3
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	4013      	ands	r3, r2
 8017bc0:	d007      	beq.n	8017bd2 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	685b      	ldr	r3, [r3, #4]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d101      	bne.n	8017bd2 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8017bce:	2301      	movs	r3, #1
 8017bd0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8017bd2:	69fb      	ldr	r3, [r7, #28]
 8017bd4:	2b01      	cmp	r3, #1
 8017bd6:	d12d      	bne.n	8017c34 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	2241      	movs	r2, #65	@ 0x41
 8017bdc:	5c9b      	ldrb	r3, [r3, r2]
 8017bde:	b2db      	uxtb	r3, r3
 8017be0:	2b28      	cmp	r3, #40	@ 0x28
 8017be2:	d10b      	bne.n	8017bfc <I2C_Slave_ISR_DMA+0xf8>
 8017be4:	69ba      	ldr	r2, [r7, #24]
 8017be6:	2380      	movs	r3, #128	@ 0x80
 8017be8:	049b      	lsls	r3, r3, #18
 8017bea:	429a      	cmp	r2, r3
 8017bec:	d106      	bne.n	8017bfc <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8017bee:	68ba      	ldr	r2, [r7, #8]
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	0011      	movs	r1, r2
 8017bf4:	0018      	movs	r0, r3
 8017bf6:	f000 fc1f 	bl	8018438 <I2C_ITListenCplt>
 8017bfa:	e054      	b.n	8017ca6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	2241      	movs	r2, #65	@ 0x41
 8017c00:	5c9b      	ldrb	r3, [r3, r2]
 8017c02:	b2db      	uxtb	r3, r3
 8017c04:	2b29      	cmp	r3, #41	@ 0x29
 8017c06:	d110      	bne.n	8017c2a <I2C_Slave_ISR_DMA+0x126>
 8017c08:	69bb      	ldr	r3, [r7, #24]
 8017c0a:	4a38      	ldr	r2, [pc, #224]	@ (8017cec <I2C_Slave_ISR_DMA+0x1e8>)
 8017c0c:	4293      	cmp	r3, r2
 8017c0e:	d00c      	beq.n	8017c2a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	2210      	movs	r2, #16
 8017c16:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	0018      	movs	r0, r3
 8017c1c:	f000 fd91 	bl	8018742 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	0018      	movs	r0, r3
 8017c24:	f000 f9ac 	bl	8017f80 <I2C_ITSlaveSeqCplt>
 8017c28:	e03d      	b.n	8017ca6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	2210      	movs	r2, #16
 8017c30:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8017c32:	e03e      	b.n	8017cb2 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	2210      	movs	r2, #16
 8017c3a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c40:	2204      	movs	r2, #4
 8017c42:	431a      	orrs	r2, r3
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8017c48:	2317      	movs	r3, #23
 8017c4a:	18fb      	adds	r3, r7, r3
 8017c4c:	68fa      	ldr	r2, [r7, #12]
 8017c4e:	2141      	movs	r1, #65	@ 0x41
 8017c50:	5c52      	ldrb	r2, [r2, r1]
 8017c52:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8017c54:	69bb      	ldr	r3, [r7, #24]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d004      	beq.n	8017c64 <I2C_Slave_ISR_DMA+0x160>
 8017c5a:	69ba      	ldr	r2, [r7, #24]
 8017c5c:	2380      	movs	r3, #128	@ 0x80
 8017c5e:	045b      	lsls	r3, r3, #17
 8017c60:	429a      	cmp	r2, r3
 8017c62:	d126      	bne.n	8017cb2 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017c64:	2217      	movs	r2, #23
 8017c66:	18bb      	adds	r3, r7, r2
 8017c68:	781b      	ldrb	r3, [r3, #0]
 8017c6a:	2b21      	cmp	r3, #33	@ 0x21
 8017c6c:	d003      	beq.n	8017c76 <I2C_Slave_ISR_DMA+0x172>
 8017c6e:	18bb      	adds	r3, r7, r2
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	2b29      	cmp	r3, #41	@ 0x29
 8017c74:	d103      	bne.n	8017c7e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	2221      	movs	r2, #33	@ 0x21
 8017c7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8017c7c:	e00b      	b.n	8017c96 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017c7e:	2217      	movs	r2, #23
 8017c80:	18bb      	adds	r3, r7, r2
 8017c82:	781b      	ldrb	r3, [r3, #0]
 8017c84:	2b22      	cmp	r3, #34	@ 0x22
 8017c86:	d003      	beq.n	8017c90 <I2C_Slave_ISR_DMA+0x18c>
 8017c88:	18bb      	adds	r3, r7, r2
 8017c8a:	781b      	ldrb	r3, [r3, #0]
 8017c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c8e:	d102      	bne.n	8017c96 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	2222      	movs	r2, #34	@ 0x22
 8017c94:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	0011      	movs	r1, r2
 8017c9e:	0018      	movs	r0, r3
 8017ca0:	f000 fc24 	bl	80184ec <I2C_ITError>
      if (treatdmanack == 1U)
 8017ca4:	e005      	b.n	8017cb2 <I2C_Slave_ISR_DMA+0x1ae>
 8017ca6:	e004      	b.n	8017cb2 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	2210      	movs	r2, #16
 8017cae:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017cb0:	e013      	b.n	8017cda <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8017cb2:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017cb4:	e011      	b.n	8017cda <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017cb6:	68bb      	ldr	r3, [r7, #8]
 8017cb8:	08db      	lsrs	r3, r3, #3
 8017cba:	001a      	movs	r2, r3
 8017cbc:	2301      	movs	r3, #1
 8017cbe:	4013      	ands	r3, r2
 8017cc0:	d00b      	beq.n	8017cda <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	08db      	lsrs	r3, r3, #3
 8017cc6:	001a      	movs	r2, r3
 8017cc8:	2301      	movs	r3, #1
 8017cca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017ccc:	d005      	beq.n	8017cda <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8017cce:	68ba      	ldr	r2, [r7, #8]
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	0011      	movs	r1, r2
 8017cd4:	0018      	movs	r0, r3
 8017cd6:	f000 f86d 	bl	8017db4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	2240      	movs	r2, #64	@ 0x40
 8017cde:	2100      	movs	r1, #0
 8017ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017ce2:	2300      	movs	r3, #0
}
 8017ce4:	0018      	movs	r0, r3
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	b008      	add	sp, #32
 8017cea:	bd80      	pop	{r7, pc}
 8017cec:	ffff0000 	.word	0xffff0000

08017cf0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8017cf0:	b5b0      	push	{r4, r5, r7, lr}
 8017cf2:	b086      	sub	sp, #24
 8017cf4:	af02      	add	r7, sp, #8
 8017cf6:	60f8      	str	r0, [r7, #12]
 8017cf8:	000c      	movs	r4, r1
 8017cfa:	0010      	movs	r0, r2
 8017cfc:	0019      	movs	r1, r3
 8017cfe:	250a      	movs	r5, #10
 8017d00:	197b      	adds	r3, r7, r5
 8017d02:	1c22      	adds	r2, r4, #0
 8017d04:	801a      	strh	r2, [r3, #0]
 8017d06:	2308      	movs	r3, #8
 8017d08:	18fb      	adds	r3, r7, r3
 8017d0a:	1c02      	adds	r2, r0, #0
 8017d0c:	801a      	strh	r2, [r3, #0]
 8017d0e:	1dbb      	adds	r3, r7, #6
 8017d10:	1c0a      	adds	r2, r1, #0
 8017d12:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8017d14:	1dbb      	adds	r3, r7, #6
 8017d16:	881b      	ldrh	r3, [r3, #0]
 8017d18:	b2da      	uxtb	r2, r3
 8017d1a:	197b      	adds	r3, r7, r5
 8017d1c:	8819      	ldrh	r1, [r3, #0]
 8017d1e:	68f8      	ldr	r0, [r7, #12]
 8017d20:	4b23      	ldr	r3, [pc, #140]	@ (8017db0 <I2C_RequestMemoryRead+0xc0>)
 8017d22:	9300      	str	r3, [sp, #0]
 8017d24:	2300      	movs	r3, #0
 8017d26:	f001 f859 	bl	8018ddc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017d2c:	6a39      	ldr	r1, [r7, #32]
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	0018      	movs	r0, r3
 8017d32:	f000 fe4f 	bl	80189d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8017d36:	1e03      	subs	r3, r0, #0
 8017d38:	d001      	beq.n	8017d3e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8017d3a:	2301      	movs	r3, #1
 8017d3c:	e033      	b.n	8017da6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017d3e:	1dbb      	adds	r3, r7, #6
 8017d40:	881b      	ldrh	r3, [r3, #0]
 8017d42:	2b01      	cmp	r3, #1
 8017d44:	d107      	bne.n	8017d56 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017d46:	2308      	movs	r3, #8
 8017d48:	18fb      	adds	r3, r7, r3
 8017d4a:	881b      	ldrh	r3, [r3, #0]
 8017d4c:	b2da      	uxtb	r2, r3
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	629a      	str	r2, [r3, #40]	@ 0x28
 8017d54:	e019      	b.n	8017d8a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017d56:	2308      	movs	r3, #8
 8017d58:	18fb      	adds	r3, r7, r3
 8017d5a:	881b      	ldrh	r3, [r3, #0]
 8017d5c:	0a1b      	lsrs	r3, r3, #8
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	b2da      	uxtb	r2, r3
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017d6a:	6a39      	ldr	r1, [r7, #32]
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	0018      	movs	r0, r3
 8017d70:	f000 fe30 	bl	80189d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8017d74:	1e03      	subs	r3, r0, #0
 8017d76:	d001      	beq.n	8017d7c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8017d78:	2301      	movs	r3, #1
 8017d7a:	e014      	b.n	8017da6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017d7c:	2308      	movs	r3, #8
 8017d7e:	18fb      	adds	r3, r7, r3
 8017d80:	881b      	ldrh	r3, [r3, #0]
 8017d82:	b2da      	uxtb	r2, r3
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017d8a:	6a3a      	ldr	r2, [r7, #32]
 8017d8c:	68f8      	ldr	r0, [r7, #12]
 8017d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d90:	9300      	str	r3, [sp, #0]
 8017d92:	0013      	movs	r3, r2
 8017d94:	2200      	movs	r2, #0
 8017d96:	2140      	movs	r1, #64	@ 0x40
 8017d98:	f000 fdce 	bl	8018938 <I2C_WaitOnFlagUntilTimeout>
 8017d9c:	1e03      	subs	r3, r0, #0
 8017d9e:	d001      	beq.n	8017da4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017da0:	2301      	movs	r3, #1
 8017da2:	e000      	b.n	8017da6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017da4:	2300      	movs	r3, #0
}
 8017da6:	0018      	movs	r0, r3
 8017da8:	46bd      	mov	sp, r7
 8017daa:	b004      	add	sp, #16
 8017dac:	bdb0      	pop	{r4, r5, r7, pc}
 8017dae:	46c0      	nop			@ (mov r8, r8)
 8017db0:	80002000 	.word	0x80002000

08017db4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017db4:	b5b0      	push	{r4, r5, r7, lr}
 8017db6:	b084      	sub	sp, #16
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
 8017dbc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	2241      	movs	r2, #65	@ 0x41
 8017dc2:	5c9b      	ldrb	r3, [r3, r2]
 8017dc4:	b2db      	uxtb	r3, r3
 8017dc6:	001a      	movs	r2, r3
 8017dc8:	2328      	movs	r3, #40	@ 0x28
 8017dca:	4013      	ands	r3, r2
 8017dcc:	2b28      	cmp	r3, #40	@ 0x28
 8017dce:	d000      	beq.n	8017dd2 <I2C_ITAddrCplt+0x1e>
 8017dd0:	e088      	b.n	8017ee4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	699b      	ldr	r3, [r3, #24]
 8017dd8:	0c1b      	lsrs	r3, r3, #16
 8017dda:	b2da      	uxtb	r2, r3
 8017ddc:	250f      	movs	r5, #15
 8017dde:	197b      	adds	r3, r7, r5
 8017de0:	2101      	movs	r1, #1
 8017de2:	400a      	ands	r2, r1
 8017de4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	699b      	ldr	r3, [r3, #24]
 8017dec:	0c1b      	lsrs	r3, r3, #16
 8017dee:	b29a      	uxth	r2, r3
 8017df0:	200c      	movs	r0, #12
 8017df2:	183b      	adds	r3, r7, r0
 8017df4:	21fe      	movs	r1, #254	@ 0xfe
 8017df6:	400a      	ands	r2, r1
 8017df8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	689b      	ldr	r3, [r3, #8]
 8017e00:	b29a      	uxth	r2, r3
 8017e02:	240a      	movs	r4, #10
 8017e04:	193b      	adds	r3, r7, r4
 8017e06:	0592      	lsls	r2, r2, #22
 8017e08:	0d92      	lsrs	r2, r2, #22
 8017e0a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	68db      	ldr	r3, [r3, #12]
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	2308      	movs	r3, #8
 8017e16:	18fb      	adds	r3, r7, r3
 8017e18:	21fe      	movs	r1, #254	@ 0xfe
 8017e1a:	400a      	ands	r2, r1
 8017e1c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	68db      	ldr	r3, [r3, #12]
 8017e22:	2b02      	cmp	r3, #2
 8017e24:	d148      	bne.n	8017eb8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8017e26:	0021      	movs	r1, r4
 8017e28:	187b      	adds	r3, r7, r1
 8017e2a:	881b      	ldrh	r3, [r3, #0]
 8017e2c:	09db      	lsrs	r3, r3, #7
 8017e2e:	b29a      	uxth	r2, r3
 8017e30:	183b      	adds	r3, r7, r0
 8017e32:	881b      	ldrh	r3, [r3, #0]
 8017e34:	4053      	eors	r3, r2
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	001a      	movs	r2, r3
 8017e3a:	2306      	movs	r3, #6
 8017e3c:	4013      	ands	r3, r2
 8017e3e:	d120      	bne.n	8017e82 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8017e40:	183b      	adds	r3, r7, r0
 8017e42:	187a      	adds	r2, r7, r1
 8017e44:	8812      	ldrh	r2, [r2, #0]
 8017e46:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017e4c:	1c5a      	adds	r2, r3, #1
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017e56:	2b02      	cmp	r3, #2
 8017e58:	d14c      	bne.n	8017ef4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	2208      	movs	r2, #8
 8017e66:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	2240      	movs	r2, #64	@ 0x40
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017e70:	183b      	adds	r3, r7, r0
 8017e72:	881a      	ldrh	r2, [r3, #0]
 8017e74:	197b      	adds	r3, r7, r5
 8017e76:	7819      	ldrb	r1, [r3, #0]
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	0018      	movs	r0, r3
 8017e7c:	f7ff f978 	bl	8017170 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017e80:	e038      	b.n	8017ef4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017e82:	240c      	movs	r4, #12
 8017e84:	193b      	adds	r3, r7, r4
 8017e86:	2208      	movs	r2, #8
 8017e88:	18ba      	adds	r2, r7, r2
 8017e8a:	8812      	ldrh	r2, [r2, #0]
 8017e8c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017e8e:	2380      	movs	r3, #128	@ 0x80
 8017e90:	021a      	lsls	r2, r3, #8
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	0011      	movs	r1, r2
 8017e96:	0018      	movs	r0, r3
 8017e98:	f001 f868 	bl	8018f6c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2240      	movs	r2, #64	@ 0x40
 8017ea0:	2100      	movs	r1, #0
 8017ea2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017ea4:	193b      	adds	r3, r7, r4
 8017ea6:	881a      	ldrh	r2, [r3, #0]
 8017ea8:	230f      	movs	r3, #15
 8017eaa:	18fb      	adds	r3, r7, r3
 8017eac:	7819      	ldrb	r1, [r3, #0]
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	0018      	movs	r0, r3
 8017eb2:	f7ff f95d 	bl	8017170 <HAL_I2C_AddrCallback>
}
 8017eb6:	e01d      	b.n	8017ef4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017eb8:	2380      	movs	r3, #128	@ 0x80
 8017eba:	021a      	lsls	r2, r3, #8
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	0011      	movs	r1, r2
 8017ec0:	0018      	movs	r0, r3
 8017ec2:	f001 f853 	bl	8018f6c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	2240      	movs	r2, #64	@ 0x40
 8017eca:	2100      	movs	r1, #0
 8017ecc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017ece:	230c      	movs	r3, #12
 8017ed0:	18fb      	adds	r3, r7, r3
 8017ed2:	881a      	ldrh	r2, [r3, #0]
 8017ed4:	230f      	movs	r3, #15
 8017ed6:	18fb      	adds	r3, r7, r3
 8017ed8:	7819      	ldrb	r1, [r3, #0]
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	0018      	movs	r0, r3
 8017ede:	f7ff f947 	bl	8017170 <HAL_I2C_AddrCallback>
}
 8017ee2:	e007      	b.n	8017ef4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	2208      	movs	r2, #8
 8017eea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	2240      	movs	r2, #64	@ 0x40
 8017ef0:	2100      	movs	r1, #0
 8017ef2:	5499      	strb	r1, [r3, r2]
}
 8017ef4:	46c0      	nop			@ (mov r8, r8)
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	b004      	add	sp, #16
 8017efa:	bdb0      	pop	{r4, r5, r7, pc}

08017efc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b082      	sub	sp, #8
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2242      	movs	r2, #66	@ 0x42
 8017f08:	2100      	movs	r1, #0
 8017f0a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	2241      	movs	r2, #65	@ 0x41
 8017f10:	5c9b      	ldrb	r3, [r3, r2]
 8017f12:	b2db      	uxtb	r3, r3
 8017f14:	2b21      	cmp	r3, #33	@ 0x21
 8017f16:	d117      	bne.n	8017f48 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	2241      	movs	r2, #65	@ 0x41
 8017f1c:	2120      	movs	r1, #32
 8017f1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	2211      	movs	r2, #17
 8017f24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	2200      	movs	r2, #0
 8017f2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	2101      	movs	r1, #1
 8017f30:	0018      	movs	r0, r3
 8017f32:	f001 f81b 	bl	8018f6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2240      	movs	r2, #64	@ 0x40
 8017f3a:	2100      	movs	r1, #0
 8017f3c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	0018      	movs	r0, r3
 8017f42:	f7ff f8f5 	bl	8017130 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017f46:	e016      	b.n	8017f76 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	2241      	movs	r2, #65	@ 0x41
 8017f4c:	2120      	movs	r1, #32
 8017f4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	2212      	movs	r2, #18
 8017f54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	2200      	movs	r2, #0
 8017f5a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	2102      	movs	r1, #2
 8017f60:	0018      	movs	r0, r3
 8017f62:	f001 f803 	bl	8018f6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	2240      	movs	r2, #64	@ 0x40
 8017f6a:	2100      	movs	r1, #0
 8017f6c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	0018      	movs	r0, r3
 8017f72:	f7ff f8e5 	bl	8017140 <HAL_I2C_MasterRxCpltCallback>
}
 8017f76:	46c0      	nop			@ (mov r8, r8)
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	b002      	add	sp, #8
 8017f7c:	bd80      	pop	{r7, pc}
	...

08017f80 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b084      	sub	sp, #16
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	2242      	movs	r2, #66	@ 0x42
 8017f94:	2100      	movs	r1, #0
 8017f96:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	0b9b      	lsrs	r3, r3, #14
 8017f9c:	001a      	movs	r2, r3
 8017f9e:	2301      	movs	r3, #1
 8017fa0:	4013      	ands	r3, r2
 8017fa2:	d008      	beq.n	8017fb6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	681a      	ldr	r2, [r3, #0]
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	4925      	ldr	r1, [pc, #148]	@ (8018044 <I2C_ITSlaveSeqCplt+0xc4>)
 8017fb0:	400a      	ands	r2, r1
 8017fb2:	601a      	str	r2, [r3, #0]
 8017fb4:	e00d      	b.n	8017fd2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	0bdb      	lsrs	r3, r3, #15
 8017fba:	001a      	movs	r2, r3
 8017fbc:	2301      	movs	r3, #1
 8017fbe:	4013      	ands	r3, r2
 8017fc0:	d007      	beq.n	8017fd2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	681a      	ldr	r2, [r3, #0]
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	491e      	ldr	r1, [pc, #120]	@ (8018048 <I2C_ITSlaveSeqCplt+0xc8>)
 8017fce:	400a      	ands	r2, r1
 8017fd0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	2241      	movs	r2, #65	@ 0x41
 8017fd6:	5c9b      	ldrb	r3, [r3, r2]
 8017fd8:	b2db      	uxtb	r3, r3
 8017fda:	2b29      	cmp	r3, #41	@ 0x29
 8017fdc:	d114      	bne.n	8018008 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	2241      	movs	r2, #65	@ 0x41
 8017fe2:	2128      	movs	r1, #40	@ 0x28
 8017fe4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	2221      	movs	r2, #33	@ 0x21
 8017fea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	2101      	movs	r1, #1
 8017ff0:	0018      	movs	r0, r3
 8017ff2:	f000 ffbb 	bl	8018f6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	2240      	movs	r2, #64	@ 0x40
 8017ffa:	2100      	movs	r1, #0
 8017ffc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	0018      	movs	r0, r3
 8018002:	f7ff f8a5 	bl	8017150 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8018006:	e019      	b.n	801803c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2241      	movs	r2, #65	@ 0x41
 801800c:	5c9b      	ldrb	r3, [r3, r2]
 801800e:	b2db      	uxtb	r3, r3
 8018010:	2b2a      	cmp	r3, #42	@ 0x2a
 8018012:	d113      	bne.n	801803c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	2241      	movs	r2, #65	@ 0x41
 8018018:	2128      	movs	r1, #40	@ 0x28
 801801a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2222      	movs	r2, #34	@ 0x22
 8018020:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	2102      	movs	r1, #2
 8018026:	0018      	movs	r0, r3
 8018028:	f000 ffa0 	bl	8018f6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2240      	movs	r2, #64	@ 0x40
 8018030:	2100      	movs	r1, #0
 8018032:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	0018      	movs	r0, r3
 8018038:	f7ff f892 	bl	8017160 <HAL_I2C_SlaveRxCpltCallback>
}
 801803c:	46c0      	nop			@ (mov r8, r8)
 801803e:	46bd      	mov	sp, r7
 8018040:	b004      	add	sp, #16
 8018042:	bd80      	pop	{r7, pc}
 8018044:	ffffbfff 	.word	0xffffbfff
 8018048:	ffff7fff 	.word	0xffff7fff

0801804c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b086      	sub	sp, #24
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
 8018054:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	2220      	movs	r2, #32
 8018060:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	2241      	movs	r2, #65	@ 0x41
 8018066:	5c9b      	ldrb	r3, [r3, r2]
 8018068:	b2db      	uxtb	r3, r3
 801806a:	2b21      	cmp	r3, #33	@ 0x21
 801806c:	d108      	bne.n	8018080 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	2101      	movs	r1, #1
 8018072:	0018      	movs	r0, r3
 8018074:	f000 ff7a 	bl	8018f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	2211      	movs	r2, #17
 801807c:	631a      	str	r2, [r3, #48]	@ 0x30
 801807e:	e00d      	b.n	801809c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	2241      	movs	r2, #65	@ 0x41
 8018084:	5c9b      	ldrb	r3, [r3, r2]
 8018086:	b2db      	uxtb	r3, r3
 8018088:	2b22      	cmp	r3, #34	@ 0x22
 801808a:	d107      	bne.n	801809c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	2102      	movs	r1, #2
 8018090:	0018      	movs	r0, r3
 8018092:	f000 ff6b 	bl	8018f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	2212      	movs	r2, #18
 801809a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	685a      	ldr	r2, [r3, #4]
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	4950      	ldr	r1, [pc, #320]	@ (80181e8 <I2C_ITMasterCplt+0x19c>)
 80180a8:	400a      	ands	r2, r1
 80180aa:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2200      	movs	r2, #0
 80180b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	4a4d      	ldr	r2, [pc, #308]	@ (80181ec <I2C_ITMasterCplt+0x1a0>)
 80180b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	091b      	lsrs	r3, r3, #4
 80180bc:	001a      	movs	r2, r3
 80180be:	2301      	movs	r3, #1
 80180c0:	4013      	ands	r3, r2
 80180c2:	d009      	beq.n	80180d8 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	2210      	movs	r2, #16
 80180ca:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80180d0:	2204      	movs	r2, #4
 80180d2:	431a      	orrs	r2, r3
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	2241      	movs	r2, #65	@ 0x41
 80180dc:	5c9b      	ldrb	r3, [r3, r2]
 80180de:	b2db      	uxtb	r3, r3
 80180e0:	2b60      	cmp	r3, #96	@ 0x60
 80180e2:	d10b      	bne.n	80180fc <I2C_ITMasterCplt+0xb0>
 80180e4:	697b      	ldr	r3, [r7, #20]
 80180e6:	089b      	lsrs	r3, r3, #2
 80180e8:	001a      	movs	r2, r3
 80180ea:	2301      	movs	r3, #1
 80180ec:	4013      	ands	r3, r2
 80180ee:	d005      	beq.n	80180fc <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180f6:	b2db      	uxtb	r3, r3
 80180f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80180fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	0018      	movs	r0, r3
 8018100:	f000 fb1f 	bl	8018742 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018108:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	2241      	movs	r2, #65	@ 0x41
 801810e:	5c9b      	ldrb	r3, [r3, r2]
 8018110:	b2db      	uxtb	r3, r3
 8018112:	2b60      	cmp	r3, #96	@ 0x60
 8018114:	d002      	beq.n	801811c <I2C_ITMasterCplt+0xd0>
 8018116:	693b      	ldr	r3, [r7, #16]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d007      	beq.n	801812c <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	0011      	movs	r1, r2
 8018124:	0018      	movs	r0, r3
 8018126:	f000 f9e1 	bl	80184ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801812a:	e058      	b.n	80181de <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	2241      	movs	r2, #65	@ 0x41
 8018130:	5c9b      	ldrb	r3, [r3, r2]
 8018132:	b2db      	uxtb	r3, r3
 8018134:	2b21      	cmp	r3, #33	@ 0x21
 8018136:	d126      	bne.n	8018186 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	2241      	movs	r2, #65	@ 0x41
 801813c:	2120      	movs	r1, #32
 801813e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	2200      	movs	r2, #0
 8018144:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	2242      	movs	r2, #66	@ 0x42
 801814a:	5c9b      	ldrb	r3, [r3, r2]
 801814c:	b2db      	uxtb	r3, r3
 801814e:	2b40      	cmp	r3, #64	@ 0x40
 8018150:	d10c      	bne.n	801816c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	2242      	movs	r2, #66	@ 0x42
 8018156:	2100      	movs	r1, #0
 8018158:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	2240      	movs	r2, #64	@ 0x40
 801815e:	2100      	movs	r1, #0
 8018160:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	0018      	movs	r0, r3
 8018166:	f7ff f81b 	bl	80171a0 <HAL_I2C_MemTxCpltCallback>
}
 801816a:	e038      	b.n	80181de <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2242      	movs	r2, #66	@ 0x42
 8018170:	2100      	movs	r1, #0
 8018172:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	2240      	movs	r2, #64	@ 0x40
 8018178:	2100      	movs	r1, #0
 801817a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	0018      	movs	r0, r3
 8018180:	f7fe ffd6 	bl	8017130 <HAL_I2C_MasterTxCpltCallback>
}
 8018184:	e02b      	b.n	80181de <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	2241      	movs	r2, #65	@ 0x41
 801818a:	5c9b      	ldrb	r3, [r3, r2]
 801818c:	b2db      	uxtb	r3, r3
 801818e:	2b22      	cmp	r3, #34	@ 0x22
 8018190:	d125      	bne.n	80181de <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2241      	movs	r2, #65	@ 0x41
 8018196:	2120      	movs	r1, #32
 8018198:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	2200      	movs	r2, #0
 801819e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2242      	movs	r2, #66	@ 0x42
 80181a4:	5c9b      	ldrb	r3, [r3, r2]
 80181a6:	b2db      	uxtb	r3, r3
 80181a8:	2b40      	cmp	r3, #64	@ 0x40
 80181aa:	d10c      	bne.n	80181c6 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	2242      	movs	r2, #66	@ 0x42
 80181b0:	2100      	movs	r1, #0
 80181b2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	2240      	movs	r2, #64	@ 0x40
 80181b8:	2100      	movs	r1, #0
 80181ba:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	0018      	movs	r0, r3
 80181c0:	f7fe fff6 	bl	80171b0 <HAL_I2C_MemRxCpltCallback>
}
 80181c4:	e00b      	b.n	80181de <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	2242      	movs	r2, #66	@ 0x42
 80181ca:	2100      	movs	r1, #0
 80181cc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2240      	movs	r2, #64	@ 0x40
 80181d2:	2100      	movs	r1, #0
 80181d4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	0018      	movs	r0, r3
 80181da:	f7fe ffb1 	bl	8017140 <HAL_I2C_MasterRxCpltCallback>
}
 80181de:	46c0      	nop			@ (mov r8, r8)
 80181e0:	46bd      	mov	sp, r7
 80181e2:	b006      	add	sp, #24
 80181e4:	bd80      	pop	{r7, pc}
 80181e6:	46c0      	nop			@ (mov r8, r8)
 80181e8:	fe00e800 	.word	0xfe00e800
 80181ec:	ffff0000 	.word	0xffff0000

080181f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b086      	sub	sp, #24
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
 80181f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8018202:	683b      	ldr	r3, [r7, #0]
 8018204:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8018206:	200f      	movs	r0, #15
 8018208:	183b      	adds	r3, r7, r0
 801820a:	687a      	ldr	r2, [r7, #4]
 801820c:	2141      	movs	r1, #65	@ 0x41
 801820e:	5c52      	ldrb	r2, [r2, r1]
 8018210:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	2220      	movs	r2, #32
 8018218:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801821a:	183b      	adds	r3, r7, r0
 801821c:	781b      	ldrb	r3, [r3, #0]
 801821e:	2b21      	cmp	r3, #33	@ 0x21
 8018220:	d003      	beq.n	801822a <I2C_ITSlaveCplt+0x3a>
 8018222:	183b      	adds	r3, r7, r0
 8018224:	781b      	ldrb	r3, [r3, #0]
 8018226:	2b29      	cmp	r3, #41	@ 0x29
 8018228:	d109      	bne.n	801823e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801822a:	4a7d      	ldr	r2, [pc, #500]	@ (8018420 <I2C_ITSlaveCplt+0x230>)
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	0011      	movs	r1, r2
 8018230:	0018      	movs	r0, r3
 8018232:	f000 fe9b 	bl	8018f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	2221      	movs	r2, #33	@ 0x21
 801823a:	631a      	str	r2, [r3, #48]	@ 0x30
 801823c:	e011      	b.n	8018262 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801823e:	220f      	movs	r2, #15
 8018240:	18bb      	adds	r3, r7, r2
 8018242:	781b      	ldrb	r3, [r3, #0]
 8018244:	2b22      	cmp	r3, #34	@ 0x22
 8018246:	d003      	beq.n	8018250 <I2C_ITSlaveCplt+0x60>
 8018248:	18bb      	adds	r3, r7, r2
 801824a:	781b      	ldrb	r3, [r3, #0]
 801824c:	2b2a      	cmp	r3, #42	@ 0x2a
 801824e:	d108      	bne.n	8018262 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8018250:	4a74      	ldr	r2, [pc, #464]	@ (8018424 <I2C_ITSlaveCplt+0x234>)
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	0011      	movs	r1, r2
 8018256:	0018      	movs	r0, r3
 8018258:	f000 fe88 	bl	8018f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	2222      	movs	r2, #34	@ 0x22
 8018260:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	685a      	ldr	r2, [r3, #4]
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	2180      	movs	r1, #128	@ 0x80
 801826e:	0209      	lsls	r1, r1, #8
 8018270:	430a      	orrs	r2, r1
 8018272:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	685a      	ldr	r2, [r3, #4]
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	496a      	ldr	r1, [pc, #424]	@ (8018428 <I2C_ITSlaveCplt+0x238>)
 8018280:	400a      	ands	r2, r1
 8018282:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	0018      	movs	r0, r3
 8018288:	f000 fa5b 	bl	8018742 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801828c:	693b      	ldr	r3, [r7, #16]
 801828e:	0b9b      	lsrs	r3, r3, #14
 8018290:	001a      	movs	r2, r3
 8018292:	2301      	movs	r3, #1
 8018294:	4013      	ands	r3, r2
 8018296:	d013      	beq.n	80182c0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	681a      	ldr	r2, [r3, #0]
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	4962      	ldr	r1, [pc, #392]	@ (801842c <I2C_ITSlaveCplt+0x23c>)
 80182a4:	400a      	ands	r2, r1
 80182a6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d020      	beq.n	80182f2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	685b      	ldr	r3, [r3, #4]
 80182b8:	b29a      	uxth	r2, r3
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80182be:	e018      	b.n	80182f2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80182c0:	693b      	ldr	r3, [r7, #16]
 80182c2:	0bdb      	lsrs	r3, r3, #15
 80182c4:	001a      	movs	r2, r3
 80182c6:	2301      	movs	r3, #1
 80182c8:	4013      	ands	r3, r2
 80182ca:	d012      	beq.n	80182f2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	681a      	ldr	r2, [r3, #0]
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	4956      	ldr	r1, [pc, #344]	@ (8018430 <I2C_ITSlaveCplt+0x240>)
 80182d8:	400a      	ands	r2, r1
 80182da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d006      	beq.n	80182f2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	685b      	ldr	r3, [r3, #4]
 80182ec:	b29a      	uxth	r2, r3
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80182f2:	697b      	ldr	r3, [r7, #20]
 80182f4:	089b      	lsrs	r3, r3, #2
 80182f6:	001a      	movs	r2, r3
 80182f8:	2301      	movs	r3, #1
 80182fa:	4013      	ands	r3, r2
 80182fc:	d020      	beq.n	8018340 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80182fe:	697b      	ldr	r3, [r7, #20]
 8018300:	2204      	movs	r2, #4
 8018302:	4393      	bics	r3, r2
 8018304:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018310:	b2d2      	uxtb	r2, r2
 8018312:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018318:	1c5a      	adds	r2, r3, #1
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018322:	2b00      	cmp	r3, #0
 8018324:	d00c      	beq.n	8018340 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801832a:	3b01      	subs	r3, #1
 801832c:	b29a      	uxth	r2, r3
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018336:	b29b      	uxth	r3, r3
 8018338:	3b01      	subs	r3, #1
 801833a:	b29a      	uxth	r2, r3
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018344:	b29b      	uxth	r3, r3
 8018346:	2b00      	cmp	r3, #0
 8018348:	d005      	beq.n	8018356 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801834e:	2204      	movs	r2, #4
 8018350:	431a      	orrs	r2, r3
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	2242      	movs	r2, #66	@ 0x42
 801835a:	2100      	movs	r1, #0
 801835c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2200      	movs	r2, #0
 8018362:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018368:	2b00      	cmp	r3, #0
 801836a:	d013      	beq.n	8018394 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	0011      	movs	r1, r2
 8018374:	0018      	movs	r0, r3
 8018376:	f000 f8b9 	bl	80184ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	2241      	movs	r2, #65	@ 0x41
 801837e:	5c9b      	ldrb	r3, [r3, r2]
 8018380:	b2db      	uxtb	r3, r3
 8018382:	2b28      	cmp	r3, #40	@ 0x28
 8018384:	d147      	bne.n	8018416 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8018386:	697a      	ldr	r2, [r7, #20]
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	0011      	movs	r1, r2
 801838c:	0018      	movs	r0, r3
 801838e:	f000 f853 	bl	8018438 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018392:	e040      	b.n	8018416 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018398:	4a26      	ldr	r2, [pc, #152]	@ (8018434 <I2C_ITSlaveCplt+0x244>)
 801839a:	4293      	cmp	r3, r2
 801839c:	d016      	beq.n	80183cc <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	0018      	movs	r0, r3
 80183a2:	f7ff fded 	bl	8017f80 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	4a22      	ldr	r2, [pc, #136]	@ (8018434 <I2C_ITSlaveCplt+0x244>)
 80183aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	2241      	movs	r2, #65	@ 0x41
 80183b0:	2120      	movs	r1, #32
 80183b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	2200      	movs	r2, #0
 80183b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	2240      	movs	r2, #64	@ 0x40
 80183be:	2100      	movs	r1, #0
 80183c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	0018      	movs	r0, r3
 80183c6:	f7fe fee3 	bl	8017190 <HAL_I2C_ListenCpltCallback>
}
 80183ca:	e024      	b.n	8018416 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2241      	movs	r2, #65	@ 0x41
 80183d0:	5c9b      	ldrb	r3, [r3, r2]
 80183d2:	b2db      	uxtb	r3, r3
 80183d4:	2b22      	cmp	r3, #34	@ 0x22
 80183d6:	d10f      	bne.n	80183f8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2241      	movs	r2, #65	@ 0x41
 80183dc:	2120      	movs	r1, #32
 80183de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	2200      	movs	r2, #0
 80183e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	2240      	movs	r2, #64	@ 0x40
 80183ea:	2100      	movs	r1, #0
 80183ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	0018      	movs	r0, r3
 80183f2:	f7fe feb5 	bl	8017160 <HAL_I2C_SlaveRxCpltCallback>
}
 80183f6:	e00e      	b.n	8018416 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2241      	movs	r2, #65	@ 0x41
 80183fc:	2120      	movs	r1, #32
 80183fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	2200      	movs	r2, #0
 8018404:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	2240      	movs	r2, #64	@ 0x40
 801840a:	2100      	movs	r1, #0
 801840c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	0018      	movs	r0, r3
 8018412:	f7fe fe9d 	bl	8017150 <HAL_I2C_SlaveTxCpltCallback>
}
 8018416:	46c0      	nop			@ (mov r8, r8)
 8018418:	46bd      	mov	sp, r7
 801841a:	b006      	add	sp, #24
 801841c:	bd80      	pop	{r7, pc}
 801841e:	46c0      	nop			@ (mov r8, r8)
 8018420:	00008001 	.word	0x00008001
 8018424:	00008002 	.word	0x00008002
 8018428:	fe00e800 	.word	0xfe00e800
 801842c:	ffffbfff 	.word	0xffffbfff
 8018430:	ffff7fff 	.word	0xffff7fff
 8018434:	ffff0000 	.word	0xffff0000

08018438 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b082      	sub	sp, #8
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	4a27      	ldr	r2, [pc, #156]	@ (80184e4 <I2C_ITListenCplt+0xac>)
 8018446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2200      	movs	r2, #0
 801844c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	2241      	movs	r2, #65	@ 0x41
 8018452:	2120      	movs	r1, #32
 8018454:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	2242      	movs	r2, #66	@ 0x42
 801845a:	2100      	movs	r1, #0
 801845c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	2200      	movs	r2, #0
 8018462:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8018464:	683b      	ldr	r3, [r7, #0]
 8018466:	089b      	lsrs	r3, r3, #2
 8018468:	001a      	movs	r2, r3
 801846a:	2301      	movs	r3, #1
 801846c:	4013      	ands	r3, r2
 801846e:	d022      	beq.n	80184b6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801847a:	b2d2      	uxtb	r2, r2
 801847c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018482:	1c5a      	adds	r2, r3, #1
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801848c:	2b00      	cmp	r3, #0
 801848e:	d012      	beq.n	80184b6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018494:	3b01      	subs	r3, #1
 8018496:	b29a      	uxth	r2, r3
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80184a0:	b29b      	uxth	r3, r3
 80184a2:	3b01      	subs	r3, #1
 80184a4:	b29a      	uxth	r2, r3
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80184ae:	2204      	movs	r2, #4
 80184b0:	431a      	orrs	r2, r3
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80184b6:	4a0c      	ldr	r2, [pc, #48]	@ (80184e8 <I2C_ITListenCplt+0xb0>)
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	0011      	movs	r1, r2
 80184bc:	0018      	movs	r0, r3
 80184be:	f000 fd55 	bl	8018f6c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	2210      	movs	r2, #16
 80184c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	2240      	movs	r2, #64	@ 0x40
 80184ce:	2100      	movs	r1, #0
 80184d0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	0018      	movs	r0, r3
 80184d6:	f7fe fe5b 	bl	8017190 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80184da:	46c0      	nop			@ (mov r8, r8)
 80184dc:	46bd      	mov	sp, r7
 80184de:	b002      	add	sp, #8
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	46c0      	nop			@ (mov r8, r8)
 80184e4:	ffff0000 	.word	0xffff0000
 80184e8:	00008003 	.word	0x00008003

080184ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b084      	sub	sp, #16
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
 80184f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80184f6:	200f      	movs	r0, #15
 80184f8:	183b      	adds	r3, r7, r0
 80184fa:	687a      	ldr	r2, [r7, #4]
 80184fc:	2141      	movs	r1, #65	@ 0x41
 80184fe:	5c52      	ldrb	r2, [r2, r1]
 8018500:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	2242      	movs	r2, #66	@ 0x42
 8018506:	2100      	movs	r1, #0
 8018508:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	4a72      	ldr	r2, [pc, #456]	@ (80186d8 <I2C_ITError+0x1ec>)
 801850e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2200      	movs	r2, #0
 8018514:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	431a      	orrs	r2, r3
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8018522:	183b      	adds	r3, r7, r0
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	2b28      	cmp	r3, #40	@ 0x28
 8018528:	d007      	beq.n	801853a <I2C_ITError+0x4e>
 801852a:	183b      	adds	r3, r7, r0
 801852c:	781b      	ldrb	r3, [r3, #0]
 801852e:	2b29      	cmp	r3, #41	@ 0x29
 8018530:	d003      	beq.n	801853a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8018532:	183b      	adds	r3, r7, r0
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	2b2a      	cmp	r3, #42	@ 0x2a
 8018538:	d10c      	bne.n	8018554 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	2103      	movs	r1, #3
 801853e:	0018      	movs	r0, r3
 8018540:	f000 fd14 	bl	8018f6c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2241      	movs	r2, #65	@ 0x41
 8018548:	2128      	movs	r1, #40	@ 0x28
 801854a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	4a63      	ldr	r2, [pc, #396]	@ (80186dc <I2C_ITError+0x1f0>)
 8018550:	635a      	str	r2, [r3, #52]	@ 0x34
 8018552:	e032      	b.n	80185ba <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018554:	4a62      	ldr	r2, [pc, #392]	@ (80186e0 <I2C_ITError+0x1f4>)
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	0011      	movs	r1, r2
 801855a:	0018      	movs	r0, r3
 801855c:	f000 fd06 	bl	8018f6c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	0018      	movs	r0, r3
 8018564:	f000 f8ed 	bl	8018742 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2241      	movs	r2, #65	@ 0x41
 801856c:	5c9b      	ldrb	r3, [r3, r2]
 801856e:	b2db      	uxtb	r3, r3
 8018570:	2b60      	cmp	r3, #96	@ 0x60
 8018572:	d01f      	beq.n	80185b4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	2241      	movs	r2, #65	@ 0x41
 8018578:	2120      	movs	r1, #32
 801857a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	699b      	ldr	r3, [r3, #24]
 8018582:	2220      	movs	r2, #32
 8018584:	4013      	ands	r3, r2
 8018586:	2b20      	cmp	r3, #32
 8018588:	d114      	bne.n	80185b4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	699b      	ldr	r3, [r3, #24]
 8018590:	2210      	movs	r2, #16
 8018592:	4013      	ands	r3, r2
 8018594:	2b10      	cmp	r3, #16
 8018596:	d109      	bne.n	80185ac <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	2210      	movs	r2, #16
 801859e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80185a4:	2204      	movs	r2, #4
 80185a6:	431a      	orrs	r2, r3
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	2220      	movs	r2, #32
 80185b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	2200      	movs	r2, #0
 80185b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80185be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d03b      	beq.n	8018640 <I2C_ITError+0x154>
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	2b11      	cmp	r3, #17
 80185cc:	d002      	beq.n	80185d4 <I2C_ITError+0xe8>
 80185ce:	68bb      	ldr	r3, [r7, #8]
 80185d0:	2b21      	cmp	r3, #33	@ 0x21
 80185d2:	d135      	bne.n	8018640 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	681a      	ldr	r2, [r3, #0]
 80185da:	2380      	movs	r3, #128	@ 0x80
 80185dc:	01db      	lsls	r3, r3, #7
 80185de:	401a      	ands	r2, r3
 80185e0:	2380      	movs	r3, #128	@ 0x80
 80185e2:	01db      	lsls	r3, r3, #7
 80185e4:	429a      	cmp	r2, r3
 80185e6:	d107      	bne.n	80185f8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	681a      	ldr	r2, [r3, #0]
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	493c      	ldr	r1, [pc, #240]	@ (80186e4 <I2C_ITError+0x1f8>)
 80185f4:	400a      	ands	r2, r1
 80185f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185fc:	0018      	movs	r0, r3
 80185fe:	f7fd fa56 	bl	8015aae <HAL_DMA_GetState>
 8018602:	0003      	movs	r3, r0
 8018604:	2b01      	cmp	r3, #1
 8018606:	d016      	beq.n	8018636 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801860c:	4a36      	ldr	r2, [pc, #216]	@ (80186e8 <I2C_ITError+0x1fc>)
 801860e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	2240      	movs	r2, #64	@ 0x40
 8018614:	2100      	movs	r1, #0
 8018616:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801861c:	0018      	movs	r0, r3
 801861e:	f7fd f951 	bl	80158c4 <HAL_DMA_Abort_IT>
 8018622:	1e03      	subs	r3, r0, #0
 8018624:	d051      	beq.n	80186ca <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801862a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018630:	0018      	movs	r0, r3
 8018632:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018634:	e049      	b.n	80186ca <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	0018      	movs	r0, r3
 801863a:	f000 f859 	bl	80186f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801863e:	e044      	b.n	80186ca <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018644:	2b00      	cmp	r3, #0
 8018646:	d03b      	beq.n	80186c0 <I2C_ITError+0x1d4>
 8018648:	68bb      	ldr	r3, [r7, #8]
 801864a:	2b12      	cmp	r3, #18
 801864c:	d002      	beq.n	8018654 <I2C_ITError+0x168>
 801864e:	68bb      	ldr	r3, [r7, #8]
 8018650:	2b22      	cmp	r3, #34	@ 0x22
 8018652:	d135      	bne.n	80186c0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	681a      	ldr	r2, [r3, #0]
 801865a:	2380      	movs	r3, #128	@ 0x80
 801865c:	021b      	lsls	r3, r3, #8
 801865e:	401a      	ands	r2, r3
 8018660:	2380      	movs	r3, #128	@ 0x80
 8018662:	021b      	lsls	r3, r3, #8
 8018664:	429a      	cmp	r2, r3
 8018666:	d107      	bne.n	8018678 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	681a      	ldr	r2, [r3, #0]
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	491e      	ldr	r1, [pc, #120]	@ (80186ec <I2C_ITError+0x200>)
 8018674:	400a      	ands	r2, r1
 8018676:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801867c:	0018      	movs	r0, r3
 801867e:	f7fd fa16 	bl	8015aae <HAL_DMA_GetState>
 8018682:	0003      	movs	r3, r0
 8018684:	2b01      	cmp	r3, #1
 8018686:	d016      	beq.n	80186b6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801868c:	4a16      	ldr	r2, [pc, #88]	@ (80186e8 <I2C_ITError+0x1fc>)
 801868e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2240      	movs	r2, #64	@ 0x40
 8018694:	2100      	movs	r1, #0
 8018696:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801869c:	0018      	movs	r0, r3
 801869e:	f7fd f911 	bl	80158c4 <HAL_DMA_Abort_IT>
 80186a2:	1e03      	subs	r3, r0, #0
 80186a4:	d013      	beq.n	80186ce <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80186aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80186b0:	0018      	movs	r0, r3
 80186b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80186b4:	e00b      	b.n	80186ce <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	0018      	movs	r0, r3
 80186ba:	f000 f819 	bl	80186f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80186be:	e006      	b.n	80186ce <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	0018      	movs	r0, r3
 80186c4:	f000 f814 	bl	80186f0 <I2C_TreatErrorCallback>
  }
}
 80186c8:	e002      	b.n	80186d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80186ca:	46c0      	nop			@ (mov r8, r8)
 80186cc:	e000      	b.n	80186d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80186ce:	46c0      	nop			@ (mov r8, r8)
}
 80186d0:	46c0      	nop			@ (mov r8, r8)
 80186d2:	46bd      	mov	sp, r7
 80186d4:	b004      	add	sp, #16
 80186d6:	bd80      	pop	{r7, pc}
 80186d8:	ffff0000 	.word	0xffff0000
 80186dc:	08017465 	.word	0x08017465
 80186e0:	00008003 	.word	0x00008003
 80186e4:	ffffbfff 	.word	0xffffbfff
 80186e8:	080188fb 	.word	0x080188fb
 80186ec:	ffff7fff 	.word	0xffff7fff

080186f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b082      	sub	sp, #8
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	2241      	movs	r2, #65	@ 0x41
 80186fc:	5c9b      	ldrb	r3, [r3, r2]
 80186fe:	b2db      	uxtb	r3, r3
 8018700:	2b60      	cmp	r3, #96	@ 0x60
 8018702:	d10f      	bne.n	8018724 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2241      	movs	r2, #65	@ 0x41
 8018708:	2120      	movs	r1, #32
 801870a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	2200      	movs	r2, #0
 8018710:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	2240      	movs	r2, #64	@ 0x40
 8018716:	2100      	movs	r1, #0
 8018718:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	0018      	movs	r0, r3
 801871e:	f7fe fd57 	bl	80171d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018722:	e00a      	b.n	801873a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	2200      	movs	r2, #0
 8018728:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2240      	movs	r2, #64	@ 0x40
 801872e:	2100      	movs	r1, #0
 8018730:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	0018      	movs	r0, r3
 8018736:	f7fe fd43 	bl	80171c0 <HAL_I2C_ErrorCallback>
}
 801873a:	46c0      	nop			@ (mov r8, r8)
 801873c:	46bd      	mov	sp, r7
 801873e:	b002      	add	sp, #8
 8018740:	bd80      	pop	{r7, pc}

08018742 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8018742:	b580      	push	{r7, lr}
 8018744:	b082      	sub	sp, #8
 8018746:	af00      	add	r7, sp, #0
 8018748:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	699b      	ldr	r3, [r3, #24]
 8018750:	2202      	movs	r2, #2
 8018752:	4013      	ands	r3, r2
 8018754:	2b02      	cmp	r3, #2
 8018756:	d103      	bne.n	8018760 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	2200      	movs	r2, #0
 801875e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	699b      	ldr	r3, [r3, #24]
 8018766:	2201      	movs	r2, #1
 8018768:	4013      	ands	r3, r2
 801876a:	2b01      	cmp	r3, #1
 801876c:	d007      	beq.n	801877e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	699a      	ldr	r2, [r3, #24]
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	2101      	movs	r1, #1
 801877a:	430a      	orrs	r2, r1
 801877c:	619a      	str	r2, [r3, #24]
  }
}
 801877e:	46c0      	nop			@ (mov r8, r8)
 8018780:	46bd      	mov	sp, r7
 8018782:	b002      	add	sp, #8
 8018784:	bd80      	pop	{r7, pc}
	...

08018788 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b084      	sub	sp, #16
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018794:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	681a      	ldr	r2, [r3, #0]
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	4920      	ldr	r1, [pc, #128]	@ (8018824 <I2C_DMAMasterTransmitCplt+0x9c>)
 80187a2:	400a      	ands	r2, r1
 80187a4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80187aa:	b29b      	uxth	r3, r3
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d105      	bne.n	80187bc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	2120      	movs	r1, #32
 80187b4:	0018      	movs	r0, r3
 80187b6:	f000 fb4b 	bl	8018e50 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80187ba:	e02e      	b.n	801881a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187c0:	68fa      	ldr	r2, [r7, #12]
 80187c2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80187c4:	189a      	adds	r2, r3, r2
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80187ce:	b29b      	uxth	r3, r3
 80187d0:	2bff      	cmp	r3, #255	@ 0xff
 80187d2:	d903      	bls.n	80187dc <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	22ff      	movs	r2, #255	@ 0xff
 80187d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80187da:	e004      	b.n	80187e6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80187e0:	b29a      	uxth	r2, r3
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187ee:	0019      	movs	r1, r3
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	3328      	adds	r3, #40	@ 0x28
 80187f6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80187fc:	f7fc ffbc 	bl	8015778 <HAL_DMA_Start_IT>
 8018800:	1e03      	subs	r3, r0, #0
 8018802:	d005      	beq.n	8018810 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	2110      	movs	r1, #16
 8018808:	0018      	movs	r0, r3
 801880a:	f7ff fe6f 	bl	80184ec <I2C_ITError>
}
 801880e:	e004      	b.n	801881a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	2140      	movs	r1, #64	@ 0x40
 8018814:	0018      	movs	r0, r3
 8018816:	f000 fb1b 	bl	8018e50 <I2C_Enable_IRQ>
}
 801881a:	46c0      	nop			@ (mov r8, r8)
 801881c:	46bd      	mov	sp, r7
 801881e:	b004      	add	sp, #16
 8018820:	bd80      	pop	{r7, pc}
 8018822:	46c0      	nop			@ (mov r8, r8)
 8018824:	ffffbfff 	.word	0xffffbfff

08018828 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b084      	sub	sp, #16
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018834:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	681a      	ldr	r2, [r3, #0]
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	4920      	ldr	r1, [pc, #128]	@ (80188c4 <I2C_DMAMasterReceiveCplt+0x9c>)
 8018842:	400a      	ands	r2, r1
 8018844:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801884a:	b29b      	uxth	r3, r3
 801884c:	2b00      	cmp	r3, #0
 801884e:	d105      	bne.n	801885c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	2120      	movs	r1, #32
 8018854:	0018      	movs	r0, r3
 8018856:	f000 fafb 	bl	8018e50 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801885a:	e02e      	b.n	80188ba <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018860:	68fa      	ldr	r2, [r7, #12]
 8018862:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8018864:	189a      	adds	r2, r3, r2
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801886e:	b29b      	uxth	r3, r3
 8018870:	2bff      	cmp	r3, #255	@ 0xff
 8018872:	d903      	bls.n	801887c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	22ff      	movs	r2, #255	@ 0xff
 8018878:	851a      	strh	r2, [r3, #40]	@ 0x28
 801887a:	e004      	b.n	8018886 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018880:	b29a      	uxth	r2, r3
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	3324      	adds	r3, #36	@ 0x24
 8018890:	0019      	movs	r1, r3
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018896:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801889c:	f7fc ff6c 	bl	8015778 <HAL_DMA_Start_IT>
 80188a0:	1e03      	subs	r3, r0, #0
 80188a2:	d005      	beq.n	80188b0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	2110      	movs	r1, #16
 80188a8:	0018      	movs	r0, r3
 80188aa:	f7ff fe1f 	bl	80184ec <I2C_ITError>
}
 80188ae:	e004      	b.n	80188ba <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	2140      	movs	r1, #64	@ 0x40
 80188b4:	0018      	movs	r0, r3
 80188b6:	f000 facb 	bl	8018e50 <I2C_Enable_IRQ>
}
 80188ba:	46c0      	nop			@ (mov r8, r8)
 80188bc:	46bd      	mov	sp, r7
 80188be:	b004      	add	sp, #16
 80188c0:	bd80      	pop	{r7, pc}
 80188c2:	46c0      	nop			@ (mov r8, r8)
 80188c4:	ffff7fff 	.word	0xffff7fff

080188c8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b084      	sub	sp, #16
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188d4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	685a      	ldr	r2, [r3, #4]
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	2180      	movs	r1, #128	@ 0x80
 80188e2:	0209      	lsls	r1, r1, #8
 80188e4:	430a      	orrs	r2, r1
 80188e6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	2110      	movs	r1, #16
 80188ec:	0018      	movs	r0, r3
 80188ee:	f7ff fdfd 	bl	80184ec <I2C_ITError>
}
 80188f2:	46c0      	nop			@ (mov r8, r8)
 80188f4:	46bd      	mov	sp, r7
 80188f6:	b004      	add	sp, #16
 80188f8:	bd80      	pop	{r7, pc}

080188fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80188fa:	b580      	push	{r7, lr}
 80188fc:	b084      	sub	sp, #16
 80188fe:	af00      	add	r7, sp, #0
 8018900:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018906:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801890c:	2b00      	cmp	r3, #0
 801890e:	d003      	beq.n	8018918 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018914:	2200      	movs	r2, #0
 8018916:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801891c:	2b00      	cmp	r3, #0
 801891e:	d003      	beq.n	8018928 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018924:	2200      	movs	r2, #0
 8018926:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	0018      	movs	r0, r3
 801892c:	f7ff fee0 	bl	80186f0 <I2C_TreatErrorCallback>
}
 8018930:	46c0      	nop			@ (mov r8, r8)
 8018932:	46bd      	mov	sp, r7
 8018934:	b004      	add	sp, #16
 8018936:	bd80      	pop	{r7, pc}

08018938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	603b      	str	r3, [r7, #0]
 8018944:	1dfb      	adds	r3, r7, #7
 8018946:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018948:	e030      	b.n	80189ac <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	3301      	adds	r3, #1
 801894e:	d02d      	beq.n	80189ac <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018950:	f7fc f9c0 	bl	8014cd4 <HAL_GetTick>
 8018954:	0002      	movs	r2, r0
 8018956:	69bb      	ldr	r3, [r7, #24]
 8018958:	1ad3      	subs	r3, r2, r3
 801895a:	683a      	ldr	r2, [r7, #0]
 801895c:	429a      	cmp	r2, r3
 801895e:	d302      	bcc.n	8018966 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8018960:	683b      	ldr	r3, [r7, #0]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d122      	bne.n	80189ac <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	699b      	ldr	r3, [r3, #24]
 801896c:	68ba      	ldr	r2, [r7, #8]
 801896e:	4013      	ands	r3, r2
 8018970:	68ba      	ldr	r2, [r7, #8]
 8018972:	1ad3      	subs	r3, r2, r3
 8018974:	425a      	negs	r2, r3
 8018976:	4153      	adcs	r3, r2
 8018978:	b2db      	uxtb	r3, r3
 801897a:	001a      	movs	r2, r3
 801897c:	1dfb      	adds	r3, r7, #7
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	429a      	cmp	r2, r3
 8018982:	d113      	bne.n	80189ac <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018988:	2220      	movs	r2, #32
 801898a:	431a      	orrs	r2, r3
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	2241      	movs	r2, #65	@ 0x41
 8018994:	2120      	movs	r1, #32
 8018996:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	2242      	movs	r2, #66	@ 0x42
 801899c:	2100      	movs	r1, #0
 801899e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	2240      	movs	r2, #64	@ 0x40
 80189a4:	2100      	movs	r1, #0
 80189a6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80189a8:	2301      	movs	r3, #1
 80189aa:	e00f      	b.n	80189cc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	699b      	ldr	r3, [r3, #24]
 80189b2:	68ba      	ldr	r2, [r7, #8]
 80189b4:	4013      	ands	r3, r2
 80189b6:	68ba      	ldr	r2, [r7, #8]
 80189b8:	1ad3      	subs	r3, r2, r3
 80189ba:	425a      	negs	r2, r3
 80189bc:	4153      	adcs	r3, r2
 80189be:	b2db      	uxtb	r3, r3
 80189c0:	001a      	movs	r2, r3
 80189c2:	1dfb      	adds	r3, r7, #7
 80189c4:	781b      	ldrb	r3, [r3, #0]
 80189c6:	429a      	cmp	r2, r3
 80189c8:	d0bf      	beq.n	801894a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80189ca:	2300      	movs	r3, #0
}
 80189cc:	0018      	movs	r0, r3
 80189ce:	46bd      	mov	sp, r7
 80189d0:	b004      	add	sp, #16
 80189d2:	bd80      	pop	{r7, pc}

080189d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b084      	sub	sp, #16
 80189d8:	af00      	add	r7, sp, #0
 80189da:	60f8      	str	r0, [r7, #12]
 80189dc:	60b9      	str	r1, [r7, #8]
 80189de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80189e0:	e032      	b.n	8018a48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80189e2:	687a      	ldr	r2, [r7, #4]
 80189e4:	68b9      	ldr	r1, [r7, #8]
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	0018      	movs	r0, r3
 80189ea:	f000 f8ff 	bl	8018bec <I2C_IsErrorOccurred>
 80189ee:	1e03      	subs	r3, r0, #0
 80189f0:	d001      	beq.n	80189f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80189f2:	2301      	movs	r3, #1
 80189f4:	e030      	b.n	8018a58 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80189f6:	68bb      	ldr	r3, [r7, #8]
 80189f8:	3301      	adds	r3, #1
 80189fa:	d025      	beq.n	8018a48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80189fc:	f7fc f96a 	bl	8014cd4 <HAL_GetTick>
 8018a00:	0002      	movs	r2, r0
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	1ad3      	subs	r3, r2, r3
 8018a06:	68ba      	ldr	r2, [r7, #8]
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d302      	bcc.n	8018a12 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8018a0c:	68bb      	ldr	r3, [r7, #8]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d11a      	bne.n	8018a48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	699b      	ldr	r3, [r3, #24]
 8018a18:	2202      	movs	r2, #2
 8018a1a:	4013      	ands	r3, r2
 8018a1c:	2b02      	cmp	r3, #2
 8018a1e:	d013      	beq.n	8018a48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018a24:	2220      	movs	r2, #32
 8018a26:	431a      	orrs	r2, r3
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	2241      	movs	r2, #65	@ 0x41
 8018a30:	2120      	movs	r1, #32
 8018a32:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	2242      	movs	r2, #66	@ 0x42
 8018a38:	2100      	movs	r1, #0
 8018a3a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	2240      	movs	r2, #64	@ 0x40
 8018a40:	2100      	movs	r1, #0
 8018a42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8018a44:	2301      	movs	r3, #1
 8018a46:	e007      	b.n	8018a58 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	699b      	ldr	r3, [r3, #24]
 8018a4e:	2202      	movs	r2, #2
 8018a50:	4013      	ands	r3, r2
 8018a52:	2b02      	cmp	r3, #2
 8018a54:	d1c5      	bne.n	80189e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8018a56:	2300      	movs	r3, #0
}
 8018a58:	0018      	movs	r0, r3
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	b004      	add	sp, #16
 8018a5e:	bd80      	pop	{r7, pc}

08018a60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b084      	sub	sp, #16
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	60f8      	str	r0, [r7, #12]
 8018a68:	60b9      	str	r1, [r7, #8]
 8018a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018a6c:	e02f      	b.n	8018ace <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018a6e:	687a      	ldr	r2, [r7, #4]
 8018a70:	68b9      	ldr	r1, [r7, #8]
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	0018      	movs	r0, r3
 8018a76:	f000 f8b9 	bl	8018bec <I2C_IsErrorOccurred>
 8018a7a:	1e03      	subs	r3, r0, #0
 8018a7c:	d001      	beq.n	8018a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018a7e:	2301      	movs	r3, #1
 8018a80:	e02d      	b.n	8018ade <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018a82:	f7fc f927 	bl	8014cd4 <HAL_GetTick>
 8018a86:	0002      	movs	r2, r0
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	1ad3      	subs	r3, r2, r3
 8018a8c:	68ba      	ldr	r2, [r7, #8]
 8018a8e:	429a      	cmp	r2, r3
 8018a90:	d302      	bcc.n	8018a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018a92:	68bb      	ldr	r3, [r7, #8]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d11a      	bne.n	8018ace <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	699b      	ldr	r3, [r3, #24]
 8018a9e:	2220      	movs	r2, #32
 8018aa0:	4013      	ands	r3, r2
 8018aa2:	2b20      	cmp	r3, #32
 8018aa4:	d013      	beq.n	8018ace <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018aaa:	2220      	movs	r2, #32
 8018aac:	431a      	orrs	r2, r3
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	2241      	movs	r2, #65	@ 0x41
 8018ab6:	2120      	movs	r1, #32
 8018ab8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	2242      	movs	r2, #66	@ 0x42
 8018abe:	2100      	movs	r1, #0
 8018ac0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	2240      	movs	r2, #64	@ 0x40
 8018ac6:	2100      	movs	r1, #0
 8018ac8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018aca:	2301      	movs	r3, #1
 8018acc:	e007      	b.n	8018ade <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	699b      	ldr	r3, [r3, #24]
 8018ad4:	2220      	movs	r2, #32
 8018ad6:	4013      	ands	r3, r2
 8018ad8:	2b20      	cmp	r3, #32
 8018ada:	d1c8      	bne.n	8018a6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018adc:	2300      	movs	r3, #0
}
 8018ade:	0018      	movs	r0, r3
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	b004      	add	sp, #16
 8018ae4:	bd80      	pop	{r7, pc}
	...

08018ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b084      	sub	sp, #16
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	60f8      	str	r0, [r7, #12]
 8018af0:	60b9      	str	r1, [r7, #8]
 8018af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018af4:	e06b      	b.n	8018bce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018af6:	687a      	ldr	r2, [r7, #4]
 8018af8:	68b9      	ldr	r1, [r7, #8]
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	0018      	movs	r0, r3
 8018afe:	f000 f875 	bl	8018bec <I2C_IsErrorOccurred>
 8018b02:	1e03      	subs	r3, r0, #0
 8018b04:	d001      	beq.n	8018b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018b06:	2301      	movs	r3, #1
 8018b08:	e069      	b.n	8018bde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	699b      	ldr	r3, [r3, #24]
 8018b10:	2220      	movs	r2, #32
 8018b12:	4013      	ands	r3, r2
 8018b14:	2b20      	cmp	r3, #32
 8018b16:	d138      	bne.n	8018b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	699b      	ldr	r3, [r3, #24]
 8018b1e:	2204      	movs	r2, #4
 8018b20:	4013      	ands	r3, r2
 8018b22:	2b04      	cmp	r3, #4
 8018b24:	d105      	bne.n	8018b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d001      	beq.n	8018b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8018b2e:	2300      	movs	r3, #0
 8018b30:	e055      	b.n	8018bde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	699b      	ldr	r3, [r3, #24]
 8018b38:	2210      	movs	r2, #16
 8018b3a:	4013      	ands	r3, r2
 8018b3c:	2b10      	cmp	r3, #16
 8018b3e:	d107      	bne.n	8018b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	2210      	movs	r2, #16
 8018b46:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	2204      	movs	r2, #4
 8018b4c:	645a      	str	r2, [r3, #68]	@ 0x44
 8018b4e:	e002      	b.n	8018b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	2200      	movs	r2, #0
 8018b54:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	2220      	movs	r2, #32
 8018b5c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	685a      	ldr	r2, [r3, #4]
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	491f      	ldr	r1, [pc, #124]	@ (8018be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8018b6a:	400a      	ands	r2, r1
 8018b6c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	2241      	movs	r2, #65	@ 0x41
 8018b72:	2120      	movs	r1, #32
 8018b74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	2242      	movs	r2, #66	@ 0x42
 8018b7a:	2100      	movs	r1, #0
 8018b7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	2240      	movs	r2, #64	@ 0x40
 8018b82:	2100      	movs	r1, #0
 8018b84:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018b86:	2301      	movs	r3, #1
 8018b88:	e029      	b.n	8018bde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018b8a:	f7fc f8a3 	bl	8014cd4 <HAL_GetTick>
 8018b8e:	0002      	movs	r2, r0
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	1ad3      	subs	r3, r2, r3
 8018b94:	68ba      	ldr	r2, [r7, #8]
 8018b96:	429a      	cmp	r2, r3
 8018b98:	d302      	bcc.n	8018ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8018b9a:	68bb      	ldr	r3, [r7, #8]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d116      	bne.n	8018bce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	699b      	ldr	r3, [r3, #24]
 8018ba6:	2204      	movs	r2, #4
 8018ba8:	4013      	ands	r3, r2
 8018baa:	2b04      	cmp	r3, #4
 8018bac:	d00f      	beq.n	8018bce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018bb2:	2220      	movs	r2, #32
 8018bb4:	431a      	orrs	r2, r3
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	2241      	movs	r2, #65	@ 0x41
 8018bbe:	2120      	movs	r1, #32
 8018bc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	2240      	movs	r2, #64	@ 0x40
 8018bc6:	2100      	movs	r1, #0
 8018bc8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018bca:	2301      	movs	r3, #1
 8018bcc:	e007      	b.n	8018bde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	699b      	ldr	r3, [r3, #24]
 8018bd4:	2204      	movs	r2, #4
 8018bd6:	4013      	ands	r3, r2
 8018bd8:	2b04      	cmp	r3, #4
 8018bda:	d18c      	bne.n	8018af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018bdc:	2300      	movs	r3, #0
}
 8018bde:	0018      	movs	r0, r3
 8018be0:	46bd      	mov	sp, r7
 8018be2:	b004      	add	sp, #16
 8018be4:	bd80      	pop	{r7, pc}
 8018be6:	46c0      	nop			@ (mov r8, r8)
 8018be8:	fe00e800 	.word	0xfe00e800

08018bec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b08a      	sub	sp, #40	@ 0x28
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	60f8      	str	r0, [r7, #12]
 8018bf4:	60b9      	str	r1, [r7, #8]
 8018bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018bf8:	2327      	movs	r3, #39	@ 0x27
 8018bfa:	18fb      	adds	r3, r7, r3
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	699b      	ldr	r3, [r3, #24]
 8018c06:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018c10:	69bb      	ldr	r3, [r7, #24]
 8018c12:	2210      	movs	r2, #16
 8018c14:	4013      	ands	r3, r2
 8018c16:	d100      	bne.n	8018c1a <I2C_IsErrorOccurred+0x2e>
 8018c18:	e079      	b.n	8018d0e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	2210      	movs	r2, #16
 8018c20:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018c22:	e057      	b.n	8018cd4 <I2C_IsErrorOccurred+0xe8>
 8018c24:	2227      	movs	r2, #39	@ 0x27
 8018c26:	18bb      	adds	r3, r7, r2
 8018c28:	18ba      	adds	r2, r7, r2
 8018c2a:	7812      	ldrb	r2, [r2, #0]
 8018c2c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	3301      	adds	r3, #1
 8018c32:	d04f      	beq.n	8018cd4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018c34:	f7fc f84e 	bl	8014cd4 <HAL_GetTick>
 8018c38:	0002      	movs	r2, r0
 8018c3a:	69fb      	ldr	r3, [r7, #28]
 8018c3c:	1ad3      	subs	r3, r2, r3
 8018c3e:	68ba      	ldr	r2, [r7, #8]
 8018c40:	429a      	cmp	r2, r3
 8018c42:	d302      	bcc.n	8018c4a <I2C_IsErrorOccurred+0x5e>
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d144      	bne.n	8018cd4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	685a      	ldr	r2, [r3, #4]
 8018c50:	2380      	movs	r3, #128	@ 0x80
 8018c52:	01db      	lsls	r3, r3, #7
 8018c54:	4013      	ands	r3, r2
 8018c56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018c58:	2013      	movs	r0, #19
 8018c5a:	183b      	adds	r3, r7, r0
 8018c5c:	68fa      	ldr	r2, [r7, #12]
 8018c5e:	2142      	movs	r1, #66	@ 0x42
 8018c60:	5c52      	ldrb	r2, [r2, r1]
 8018c62:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	699a      	ldr	r2, [r3, #24]
 8018c6a:	2380      	movs	r3, #128	@ 0x80
 8018c6c:	021b      	lsls	r3, r3, #8
 8018c6e:	401a      	ands	r2, r3
 8018c70:	2380      	movs	r3, #128	@ 0x80
 8018c72:	021b      	lsls	r3, r3, #8
 8018c74:	429a      	cmp	r2, r3
 8018c76:	d126      	bne.n	8018cc6 <I2C_IsErrorOccurred+0xda>
 8018c78:	697a      	ldr	r2, [r7, #20]
 8018c7a:	2380      	movs	r3, #128	@ 0x80
 8018c7c:	01db      	lsls	r3, r3, #7
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d021      	beq.n	8018cc6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8018c82:	183b      	adds	r3, r7, r0
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	2b20      	cmp	r3, #32
 8018c88:	d01d      	beq.n	8018cc6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	685a      	ldr	r2, [r3, #4]
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	2180      	movs	r1, #128	@ 0x80
 8018c96:	01c9      	lsls	r1, r1, #7
 8018c98:	430a      	orrs	r2, r1
 8018c9a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018c9c:	f7fc f81a 	bl	8014cd4 <HAL_GetTick>
 8018ca0:	0003      	movs	r3, r0
 8018ca2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018ca4:	e00f      	b.n	8018cc6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018ca6:	f7fc f815 	bl	8014cd4 <HAL_GetTick>
 8018caa:	0002      	movs	r2, r0
 8018cac:	69fb      	ldr	r3, [r7, #28]
 8018cae:	1ad3      	subs	r3, r2, r3
 8018cb0:	2b19      	cmp	r3, #25
 8018cb2:	d908      	bls.n	8018cc6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8018cb4:	6a3b      	ldr	r3, [r7, #32]
 8018cb6:	2220      	movs	r2, #32
 8018cb8:	4313      	orrs	r3, r2
 8018cba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018cbc:	2327      	movs	r3, #39	@ 0x27
 8018cbe:	18fb      	adds	r3, r7, r3
 8018cc0:	2201      	movs	r2, #1
 8018cc2:	701a      	strb	r2, [r3, #0]

              break;
 8018cc4:	e006      	b.n	8018cd4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	699b      	ldr	r3, [r3, #24]
 8018ccc:	2220      	movs	r2, #32
 8018cce:	4013      	ands	r3, r2
 8018cd0:	2b20      	cmp	r3, #32
 8018cd2:	d1e8      	bne.n	8018ca6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	699b      	ldr	r3, [r3, #24]
 8018cda:	2220      	movs	r2, #32
 8018cdc:	4013      	ands	r3, r2
 8018cde:	2b20      	cmp	r3, #32
 8018ce0:	d004      	beq.n	8018cec <I2C_IsErrorOccurred+0x100>
 8018ce2:	2327      	movs	r3, #39	@ 0x27
 8018ce4:	18fb      	adds	r3, r7, r3
 8018ce6:	781b      	ldrb	r3, [r3, #0]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d09b      	beq.n	8018c24 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018cec:	2327      	movs	r3, #39	@ 0x27
 8018cee:	18fb      	adds	r3, r7, r3
 8018cf0:	781b      	ldrb	r3, [r3, #0]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d103      	bne.n	8018cfe <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	2220      	movs	r2, #32
 8018cfc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018cfe:	6a3b      	ldr	r3, [r7, #32]
 8018d00:	2204      	movs	r2, #4
 8018d02:	4313      	orrs	r3, r2
 8018d04:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018d06:	2327      	movs	r3, #39	@ 0x27
 8018d08:	18fb      	adds	r3, r7, r3
 8018d0a:	2201      	movs	r2, #1
 8018d0c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	699b      	ldr	r3, [r3, #24]
 8018d14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018d16:	69ba      	ldr	r2, [r7, #24]
 8018d18:	2380      	movs	r3, #128	@ 0x80
 8018d1a:	005b      	lsls	r3, r3, #1
 8018d1c:	4013      	ands	r3, r2
 8018d1e:	d00c      	beq.n	8018d3a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018d20:	6a3b      	ldr	r3, [r7, #32]
 8018d22:	2201      	movs	r2, #1
 8018d24:	4313      	orrs	r3, r2
 8018d26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	2280      	movs	r2, #128	@ 0x80
 8018d2e:	0052      	lsls	r2, r2, #1
 8018d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018d32:	2327      	movs	r3, #39	@ 0x27
 8018d34:	18fb      	adds	r3, r7, r3
 8018d36:	2201      	movs	r2, #1
 8018d38:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018d3a:	69ba      	ldr	r2, [r7, #24]
 8018d3c:	2380      	movs	r3, #128	@ 0x80
 8018d3e:	00db      	lsls	r3, r3, #3
 8018d40:	4013      	ands	r3, r2
 8018d42:	d00c      	beq.n	8018d5e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018d44:	6a3b      	ldr	r3, [r7, #32]
 8018d46:	2208      	movs	r2, #8
 8018d48:	4313      	orrs	r3, r2
 8018d4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	2280      	movs	r2, #128	@ 0x80
 8018d52:	00d2      	lsls	r2, r2, #3
 8018d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018d56:	2327      	movs	r3, #39	@ 0x27
 8018d58:	18fb      	adds	r3, r7, r3
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018d5e:	69ba      	ldr	r2, [r7, #24]
 8018d60:	2380      	movs	r3, #128	@ 0x80
 8018d62:	009b      	lsls	r3, r3, #2
 8018d64:	4013      	ands	r3, r2
 8018d66:	d00c      	beq.n	8018d82 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018d68:	6a3b      	ldr	r3, [r7, #32]
 8018d6a:	2202      	movs	r2, #2
 8018d6c:	4313      	orrs	r3, r2
 8018d6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	2280      	movs	r2, #128	@ 0x80
 8018d76:	0092      	lsls	r2, r2, #2
 8018d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018d7a:	2327      	movs	r3, #39	@ 0x27
 8018d7c:	18fb      	adds	r3, r7, r3
 8018d7e:	2201      	movs	r2, #1
 8018d80:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018d82:	2327      	movs	r3, #39	@ 0x27
 8018d84:	18fb      	adds	r3, r7, r3
 8018d86:	781b      	ldrb	r3, [r3, #0]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d01d      	beq.n	8018dc8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	0018      	movs	r0, r3
 8018d90:	f7ff fcd7 	bl	8018742 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	685a      	ldr	r2, [r3, #4]
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	490e      	ldr	r1, [pc, #56]	@ (8018dd8 <I2C_IsErrorOccurred+0x1ec>)
 8018da0:	400a      	ands	r2, r1
 8018da2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018da8:	6a3b      	ldr	r3, [r7, #32]
 8018daa:	431a      	orrs	r2, r3
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	2241      	movs	r2, #65	@ 0x41
 8018db4:	2120      	movs	r1, #32
 8018db6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	2242      	movs	r2, #66	@ 0x42
 8018dbc:	2100      	movs	r1, #0
 8018dbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	2240      	movs	r2, #64	@ 0x40
 8018dc4:	2100      	movs	r1, #0
 8018dc6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018dc8:	2327      	movs	r3, #39	@ 0x27
 8018dca:	18fb      	adds	r3, r7, r3
 8018dcc:	781b      	ldrb	r3, [r3, #0]
}
 8018dce:	0018      	movs	r0, r3
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	b00a      	add	sp, #40	@ 0x28
 8018dd4:	bd80      	pop	{r7, pc}
 8018dd6:	46c0      	nop			@ (mov r8, r8)
 8018dd8:	fe00e800 	.word	0xfe00e800

08018ddc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018ddc:	b590      	push	{r4, r7, lr}
 8018dde:	b087      	sub	sp, #28
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	60f8      	str	r0, [r7, #12]
 8018de4:	0008      	movs	r0, r1
 8018de6:	0011      	movs	r1, r2
 8018de8:	607b      	str	r3, [r7, #4]
 8018dea:	240a      	movs	r4, #10
 8018dec:	193b      	adds	r3, r7, r4
 8018dee:	1c02      	adds	r2, r0, #0
 8018df0:	801a      	strh	r2, [r3, #0]
 8018df2:	2009      	movs	r0, #9
 8018df4:	183b      	adds	r3, r7, r0
 8018df6:	1c0a      	adds	r2, r1, #0
 8018df8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018dfa:	193b      	adds	r3, r7, r4
 8018dfc:	881b      	ldrh	r3, [r3, #0]
 8018dfe:	059b      	lsls	r3, r3, #22
 8018e00:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018e02:	183b      	adds	r3, r7, r0
 8018e04:	781b      	ldrb	r3, [r3, #0]
 8018e06:	0419      	lsls	r1, r3, #16
 8018e08:	23ff      	movs	r3, #255	@ 0xff
 8018e0a:	041b      	lsls	r3, r3, #16
 8018e0c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018e0e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e16:	4313      	orrs	r3, r2
 8018e18:	005b      	lsls	r3, r3, #1
 8018e1a:	085b      	lsrs	r3, r3, #1
 8018e1c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	685b      	ldr	r3, [r3, #4]
 8018e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018e26:	0d51      	lsrs	r1, r2, #21
 8018e28:	2280      	movs	r2, #128	@ 0x80
 8018e2a:	00d2      	lsls	r2, r2, #3
 8018e2c:	400a      	ands	r2, r1
 8018e2e:	4907      	ldr	r1, [pc, #28]	@ (8018e4c <I2C_TransferConfig+0x70>)
 8018e30:	430a      	orrs	r2, r1
 8018e32:	43d2      	mvns	r2, r2
 8018e34:	401a      	ands	r2, r3
 8018e36:	0011      	movs	r1, r2
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	697a      	ldr	r2, [r7, #20]
 8018e3e:	430a      	orrs	r2, r1
 8018e40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018e42:	46c0      	nop			@ (mov r8, r8)
 8018e44:	46bd      	mov	sp, r7
 8018e46:	b007      	add	sp, #28
 8018e48:	bd90      	pop	{r4, r7, pc}
 8018e4a:	46c0      	nop			@ (mov r8, r8)
 8018e4c:	03ff63ff 	.word	0x03ff63ff

08018e50 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b084      	sub	sp, #16
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	6078      	str	r0, [r7, #4]
 8018e58:	000a      	movs	r2, r1
 8018e5a:	1cbb      	adds	r3, r7, #2
 8018e5c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018e5e:	2300      	movs	r3, #0
 8018e60:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018e66:	4b3e      	ldr	r3, [pc, #248]	@ (8018f60 <I2C_Enable_IRQ+0x110>)
 8018e68:	429a      	cmp	r2, r3
 8018e6a:	d035      	beq.n	8018ed8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018e70:	4b3c      	ldr	r3, [pc, #240]	@ (8018f64 <I2C_Enable_IRQ+0x114>)
 8018e72:	429a      	cmp	r2, r3
 8018e74:	d030      	beq.n	8018ed8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8018f68 <I2C_Enable_IRQ+0x118>)
 8018e7c:	429a      	cmp	r2, r3
 8018e7e:	d02b      	beq.n	8018ed8 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018e80:	1cbb      	adds	r3, r7, #2
 8018e82:	2200      	movs	r2, #0
 8018e84:	5e9b      	ldrsh	r3, [r3, r2]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	da03      	bge.n	8018e92 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	22b8      	movs	r2, #184	@ 0xb8
 8018e8e:	4313      	orrs	r3, r2
 8018e90:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018e92:	1cbb      	adds	r3, r7, #2
 8018e94:	881b      	ldrh	r3, [r3, #0]
 8018e96:	2201      	movs	r2, #1
 8018e98:	4013      	ands	r3, r2
 8018e9a:	d003      	beq.n	8018ea4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	22f2      	movs	r2, #242	@ 0xf2
 8018ea0:	4313      	orrs	r3, r2
 8018ea2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018ea4:	1cbb      	adds	r3, r7, #2
 8018ea6:	881b      	ldrh	r3, [r3, #0]
 8018ea8:	2202      	movs	r2, #2
 8018eaa:	4013      	ands	r3, r2
 8018eac:	d003      	beq.n	8018eb6 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	22f4      	movs	r2, #244	@ 0xf4
 8018eb2:	4313      	orrs	r3, r2
 8018eb4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018eb6:	1cbb      	adds	r3, r7, #2
 8018eb8:	881b      	ldrh	r3, [r3, #0]
 8018eba:	2b10      	cmp	r3, #16
 8018ebc:	d103      	bne.n	8018ec6 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	2290      	movs	r2, #144	@ 0x90
 8018ec2:	4313      	orrs	r3, r2
 8018ec4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018ec6:	1cbb      	adds	r3, r7, #2
 8018ec8:	881b      	ldrh	r3, [r3, #0]
 8018eca:	2b20      	cmp	r3, #32
 8018ecc:	d13c      	bne.n	8018f48 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	2220      	movs	r2, #32
 8018ed2:	4313      	orrs	r3, r2
 8018ed4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018ed6:	e037      	b.n	8018f48 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018ed8:	1cbb      	adds	r3, r7, #2
 8018eda:	2200      	movs	r2, #0
 8018edc:	5e9b      	ldrsh	r3, [r3, r2]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	da03      	bge.n	8018eea <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	22b8      	movs	r2, #184	@ 0xb8
 8018ee6:	4313      	orrs	r3, r2
 8018ee8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018eea:	1cbb      	adds	r3, r7, #2
 8018eec:	881b      	ldrh	r3, [r3, #0]
 8018eee:	2201      	movs	r2, #1
 8018ef0:	4013      	ands	r3, r2
 8018ef2:	d003      	beq.n	8018efc <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	22f2      	movs	r2, #242	@ 0xf2
 8018ef8:	4313      	orrs	r3, r2
 8018efa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018efc:	1cbb      	adds	r3, r7, #2
 8018efe:	881b      	ldrh	r3, [r3, #0]
 8018f00:	2202      	movs	r2, #2
 8018f02:	4013      	ands	r3, r2
 8018f04:	d003      	beq.n	8018f0e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	22f4      	movs	r2, #244	@ 0xf4
 8018f0a:	4313      	orrs	r3, r2
 8018f0c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018f0e:	1cbb      	adds	r3, r7, #2
 8018f10:	881b      	ldrh	r3, [r3, #0]
 8018f12:	2b10      	cmp	r3, #16
 8018f14:	d103      	bne.n	8018f1e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	2290      	movs	r2, #144	@ 0x90
 8018f1a:	4313      	orrs	r3, r2
 8018f1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018f1e:	1cbb      	adds	r3, r7, #2
 8018f20:	881b      	ldrh	r3, [r3, #0]
 8018f22:	2b20      	cmp	r3, #32
 8018f24:	d103      	bne.n	8018f2e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	2260      	movs	r2, #96	@ 0x60
 8018f2a:	4313      	orrs	r3, r2
 8018f2c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018f32:	4b0d      	ldr	r3, [pc, #52]	@ (8018f68 <I2C_Enable_IRQ+0x118>)
 8018f34:	429a      	cmp	r2, r3
 8018f36:	d007      	beq.n	8018f48 <I2C_Enable_IRQ+0xf8>
 8018f38:	1cbb      	adds	r3, r7, #2
 8018f3a:	881b      	ldrh	r3, [r3, #0]
 8018f3c:	2b40      	cmp	r3, #64	@ 0x40
 8018f3e:	d103      	bne.n	8018f48 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	2240      	movs	r2, #64	@ 0x40
 8018f44:	4313      	orrs	r3, r2
 8018f46:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	6819      	ldr	r1, [r3, #0]
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	68fa      	ldr	r2, [r7, #12]
 8018f54:	430a      	orrs	r2, r1
 8018f56:	601a      	str	r2, [r3, #0]
}
 8018f58:	46c0      	nop			@ (mov r8, r8)
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	b004      	add	sp, #16
 8018f5e:	bd80      	pop	{r7, pc}
 8018f60:	0801768d 	.word	0x0801768d
 8018f64:	08017b05 	.word	0x08017b05
 8018f68:	080178a5 	.word	0x080178a5

08018f6c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b084      	sub	sp, #16
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
 8018f74:	000a      	movs	r2, r1
 8018f76:	1cbb      	adds	r3, r7, #2
 8018f78:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018f7e:	1cbb      	adds	r3, r7, #2
 8018f80:	881b      	ldrh	r3, [r3, #0]
 8018f82:	2201      	movs	r2, #1
 8018f84:	4013      	ands	r3, r2
 8018f86:	d010      	beq.n	8018faa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	2242      	movs	r2, #66	@ 0x42
 8018f8c:	4313      	orrs	r3, r2
 8018f8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	2241      	movs	r2, #65	@ 0x41
 8018f94:	5c9b      	ldrb	r3, [r3, r2]
 8018f96:	b2db      	uxtb	r3, r3
 8018f98:	001a      	movs	r2, r3
 8018f9a:	2328      	movs	r3, #40	@ 0x28
 8018f9c:	4013      	ands	r3, r2
 8018f9e:	2b28      	cmp	r3, #40	@ 0x28
 8018fa0:	d003      	beq.n	8018faa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	22b0      	movs	r2, #176	@ 0xb0
 8018fa6:	4313      	orrs	r3, r2
 8018fa8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018faa:	1cbb      	adds	r3, r7, #2
 8018fac:	881b      	ldrh	r3, [r3, #0]
 8018fae:	2202      	movs	r2, #2
 8018fb0:	4013      	ands	r3, r2
 8018fb2:	d010      	beq.n	8018fd6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	2244      	movs	r2, #68	@ 0x44
 8018fb8:	4313      	orrs	r3, r2
 8018fba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	2241      	movs	r2, #65	@ 0x41
 8018fc0:	5c9b      	ldrb	r3, [r3, r2]
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	001a      	movs	r2, r3
 8018fc6:	2328      	movs	r3, #40	@ 0x28
 8018fc8:	4013      	ands	r3, r2
 8018fca:	2b28      	cmp	r3, #40	@ 0x28
 8018fcc:	d003      	beq.n	8018fd6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	22b0      	movs	r2, #176	@ 0xb0
 8018fd2:	4313      	orrs	r3, r2
 8018fd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018fd6:	1cbb      	adds	r3, r7, #2
 8018fd8:	2200      	movs	r2, #0
 8018fda:	5e9b      	ldrsh	r3, [r3, r2]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	da03      	bge.n	8018fe8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	22b8      	movs	r2, #184	@ 0xb8
 8018fe4:	4313      	orrs	r3, r2
 8018fe6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018fe8:	1cbb      	adds	r3, r7, #2
 8018fea:	881b      	ldrh	r3, [r3, #0]
 8018fec:	2b10      	cmp	r3, #16
 8018fee:	d103      	bne.n	8018ff8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	2290      	movs	r2, #144	@ 0x90
 8018ff4:	4313      	orrs	r3, r2
 8018ff6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018ff8:	1cbb      	adds	r3, r7, #2
 8018ffa:	881b      	ldrh	r3, [r3, #0]
 8018ffc:	2b20      	cmp	r3, #32
 8018ffe:	d103      	bne.n	8019008 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	2220      	movs	r2, #32
 8019004:	4313      	orrs	r3, r2
 8019006:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8019008:	1cbb      	adds	r3, r7, #2
 801900a:	881b      	ldrh	r3, [r3, #0]
 801900c:	2b40      	cmp	r3, #64	@ 0x40
 801900e:	d103      	bne.n	8019018 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	2240      	movs	r2, #64	@ 0x40
 8019014:	4313      	orrs	r3, r2
 8019016:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	681a      	ldr	r2, [r3, #0]
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	43d9      	mvns	r1, r3
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	400a      	ands	r2, r1
 8019028:	601a      	str	r2, [r3, #0]
}
 801902a:	46c0      	nop			@ (mov r8, r8)
 801902c:	46bd      	mov	sp, r7
 801902e:	b004      	add	sp, #16
 8019030:	bd80      	pop	{r7, pc}
	...

08019034 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
 801903c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	2241      	movs	r2, #65	@ 0x41
 8019042:	5c9b      	ldrb	r3, [r3, r2]
 8019044:	b2db      	uxtb	r3, r3
 8019046:	2b20      	cmp	r3, #32
 8019048:	d138      	bne.n	80190bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2240      	movs	r2, #64	@ 0x40
 801904e:	5c9b      	ldrb	r3, [r3, r2]
 8019050:	2b01      	cmp	r3, #1
 8019052:	d101      	bne.n	8019058 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8019054:	2302      	movs	r3, #2
 8019056:	e032      	b.n	80190be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	2240      	movs	r2, #64	@ 0x40
 801905c:	2101      	movs	r1, #1
 801905e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	2241      	movs	r2, #65	@ 0x41
 8019064:	2124      	movs	r1, #36	@ 0x24
 8019066:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	681a      	ldr	r2, [r3, #0]
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	2101      	movs	r1, #1
 8019074:	438a      	bics	r2, r1
 8019076:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	681a      	ldr	r2, [r3, #0]
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	4911      	ldr	r1, [pc, #68]	@ (80190c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8019084:	400a      	ands	r2, r1
 8019086:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	6819      	ldr	r1, [r3, #0]
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	683a      	ldr	r2, [r7, #0]
 8019094:	430a      	orrs	r2, r1
 8019096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	681a      	ldr	r2, [r3, #0]
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	2101      	movs	r1, #1
 80190a4:	430a      	orrs	r2, r1
 80190a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	2241      	movs	r2, #65	@ 0x41
 80190ac:	2120      	movs	r1, #32
 80190ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	2240      	movs	r2, #64	@ 0x40
 80190b4:	2100      	movs	r1, #0
 80190b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80190b8:	2300      	movs	r3, #0
 80190ba:	e000      	b.n	80190be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80190bc:	2302      	movs	r3, #2
  }
}
 80190be:	0018      	movs	r0, r3
 80190c0:	46bd      	mov	sp, r7
 80190c2:	b002      	add	sp, #8
 80190c4:	bd80      	pop	{r7, pc}
 80190c6:	46c0      	nop			@ (mov r8, r8)
 80190c8:	ffffefff 	.word	0xffffefff

080190cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b084      	sub	sp, #16
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
 80190d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	2241      	movs	r2, #65	@ 0x41
 80190da:	5c9b      	ldrb	r3, [r3, r2]
 80190dc:	b2db      	uxtb	r3, r3
 80190de:	2b20      	cmp	r3, #32
 80190e0:	d139      	bne.n	8019156 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2240      	movs	r2, #64	@ 0x40
 80190e6:	5c9b      	ldrb	r3, [r3, r2]
 80190e8:	2b01      	cmp	r3, #1
 80190ea:	d101      	bne.n	80190f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80190ec:	2302      	movs	r3, #2
 80190ee:	e033      	b.n	8019158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	2240      	movs	r2, #64	@ 0x40
 80190f4:	2101      	movs	r1, #1
 80190f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	2241      	movs	r2, #65	@ 0x41
 80190fc:	2124      	movs	r1, #36	@ 0x24
 80190fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	681a      	ldr	r2, [r3, #0]
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	2101      	movs	r1, #1
 801910c:	438a      	bics	r2, r1
 801910e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	4a11      	ldr	r2, [pc, #68]	@ (8019160 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 801911c:	4013      	ands	r3, r2
 801911e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	021b      	lsls	r3, r3, #8
 8019124:	68fa      	ldr	r2, [r7, #12]
 8019126:	4313      	orrs	r3, r2
 8019128:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	68fa      	ldr	r2, [r7, #12]
 8019130:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	681a      	ldr	r2, [r3, #0]
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	2101      	movs	r1, #1
 801913e:	430a      	orrs	r2, r1
 8019140:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	2241      	movs	r2, #65	@ 0x41
 8019146:	2120      	movs	r1, #32
 8019148:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	2240      	movs	r2, #64	@ 0x40
 801914e:	2100      	movs	r1, #0
 8019150:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8019152:	2300      	movs	r3, #0
 8019154:	e000      	b.n	8019158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8019156:	2302      	movs	r3, #2
  }
}
 8019158:	0018      	movs	r0, r3
 801915a:	46bd      	mov	sp, r7
 801915c:	b004      	add	sp, #16
 801915e:	bd80      	pop	{r7, pc}
 8019160:	fffff0ff 	.word	0xfffff0ff

08019164 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b088      	sub	sp, #32
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d101      	bne.n	8019176 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8019172:	2301      	movs	r3, #1
 8019174:	e0e1      	b.n	801933a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	2235      	movs	r2, #53	@ 0x35
 801917a:	5c9b      	ldrb	r3, [r3, r2]
 801917c:	b2db      	uxtb	r3, r3
 801917e:	2b00      	cmp	r3, #0
 8019180:	d107      	bne.n	8019192 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	2234      	movs	r2, #52	@ 0x34
 8019186:	2100      	movs	r1, #0
 8019188:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	0018      	movs	r0, r3
 801918e:	f7f3 fe49 	bl	800ce24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	2235      	movs	r2, #53	@ 0x35
 8019196:	2102      	movs	r1, #2
 8019198:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	69da      	ldr	r2, [r3, #28]
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	4967      	ldr	r1, [pc, #412]	@ (8019344 <HAL_I2S_Init+0x1e0>)
 80191a6:	400a      	ands	r2, r1
 80191a8:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	2202      	movs	r2, #2
 80191b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	695b      	ldr	r3, [r3, #20]
 80191b6:	2b02      	cmp	r3, #2
 80191b8:	d073      	beq.n	80192a2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	68db      	ldr	r3, [r3, #12]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d102      	bne.n	80191c8 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80191c2:	2310      	movs	r3, #16
 80191c4:	617b      	str	r3, [r7, #20]
 80191c6:	e001      	b.n	80191cc <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80191c8:	2320      	movs	r3, #32
 80191ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	689b      	ldr	r3, [r3, #8]
 80191d0:	2b20      	cmp	r3, #32
 80191d2:	d802      	bhi.n	80191da <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80191d4:	697b      	ldr	r3, [r7, #20]
 80191d6:	005b      	lsls	r3, r3, #1
 80191d8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80191da:	f002 fed3 	bl	801bf84 <HAL_RCC_GetSysClockFreq>
 80191de:	0003      	movs	r3, r0
 80191e0:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	691a      	ldr	r2, [r3, #16]
 80191e6:	2380      	movs	r3, #128	@ 0x80
 80191e8:	009b      	lsls	r3, r3, #2
 80191ea:	429a      	cmp	r2, r3
 80191ec:	d131      	bne.n	8019252 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	68db      	ldr	r3, [r3, #12]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d016      	beq.n	8019224 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80191f6:	697b      	ldr	r3, [r7, #20]
 80191f8:	009b      	lsls	r3, r3, #2
 80191fa:	0019      	movs	r1, r3
 80191fc:	68f8      	ldr	r0, [r7, #12]
 80191fe:	f7e6 ffd1 	bl	80001a4 <__udivsi3>
 8019202:	0003      	movs	r3, r0
 8019204:	001a      	movs	r2, r3
 8019206:	0013      	movs	r3, r2
 8019208:	009b      	lsls	r3, r3, #2
 801920a:	189b      	adds	r3, r3, r2
 801920c:	005b      	lsls	r3, r3, #1
 801920e:	001a      	movs	r2, r3
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	695b      	ldr	r3, [r3, #20]
 8019214:	0019      	movs	r1, r3
 8019216:	0010      	movs	r0, r2
 8019218:	f7e6 ffc4 	bl	80001a4 <__udivsi3>
 801921c:	0003      	movs	r3, r0
 801921e:	3305      	adds	r3, #5
 8019220:	613b      	str	r3, [r7, #16]
 8019222:	e02a      	b.n	801927a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	00db      	lsls	r3, r3, #3
 8019228:	0019      	movs	r1, r3
 801922a:	68f8      	ldr	r0, [r7, #12]
 801922c:	f7e6 ffba 	bl	80001a4 <__udivsi3>
 8019230:	0003      	movs	r3, r0
 8019232:	001a      	movs	r2, r3
 8019234:	0013      	movs	r3, r2
 8019236:	009b      	lsls	r3, r3, #2
 8019238:	189b      	adds	r3, r3, r2
 801923a:	005b      	lsls	r3, r3, #1
 801923c:	001a      	movs	r2, r3
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	695b      	ldr	r3, [r3, #20]
 8019242:	0019      	movs	r1, r3
 8019244:	0010      	movs	r0, r2
 8019246:	f7e6 ffad 	bl	80001a4 <__udivsi3>
 801924a:	0003      	movs	r3, r0
 801924c:	3305      	adds	r3, #5
 801924e:	613b      	str	r3, [r7, #16]
 8019250:	e013      	b.n	801927a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8019252:	6979      	ldr	r1, [r7, #20]
 8019254:	68f8      	ldr	r0, [r7, #12]
 8019256:	f7e6 ffa5 	bl	80001a4 <__udivsi3>
 801925a:	0003      	movs	r3, r0
 801925c:	001a      	movs	r2, r3
 801925e:	0013      	movs	r3, r2
 8019260:	009b      	lsls	r3, r3, #2
 8019262:	189b      	adds	r3, r3, r2
 8019264:	005b      	lsls	r3, r3, #1
 8019266:	001a      	movs	r2, r3
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	695b      	ldr	r3, [r3, #20]
 801926c:	0019      	movs	r1, r3
 801926e:	0010      	movs	r0, r2
 8019270:	f7e6 ff98 	bl	80001a4 <__udivsi3>
 8019274:	0003      	movs	r3, r0
 8019276:	3305      	adds	r3, #5
 8019278:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	210a      	movs	r1, #10
 801927e:	0018      	movs	r0, r3
 8019280:	f7e6 ff90 	bl	80001a4 <__udivsi3>
 8019284:	0003      	movs	r3, r0
 8019286:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8019288:	693b      	ldr	r3, [r7, #16]
 801928a:	2201      	movs	r2, #1
 801928c:	4013      	ands	r3, r2
 801928e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8019290:	693a      	ldr	r2, [r7, #16]
 8019292:	69bb      	ldr	r3, [r7, #24]
 8019294:	1ad3      	subs	r3, r2, r3
 8019296:	085b      	lsrs	r3, r3, #1
 8019298:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801929a:	69bb      	ldr	r3, [r7, #24]
 801929c:	021b      	lsls	r3, r3, #8
 801929e:	61bb      	str	r3, [r7, #24]
 80192a0:	e003      	b.n	80192aa <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80192a2:	2302      	movs	r3, #2
 80192a4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80192a6:	2300      	movs	r3, #0
 80192a8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80192aa:	69fb      	ldr	r3, [r7, #28]
 80192ac:	2b01      	cmp	r3, #1
 80192ae:	d902      	bls.n	80192b6 <HAL_I2S_Init+0x152>
 80192b0:	69fb      	ldr	r3, [r7, #28]
 80192b2:	2bff      	cmp	r3, #255	@ 0xff
 80192b4:	d907      	bls.n	80192c6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192ba:	2210      	movs	r2, #16
 80192bc:	431a      	orrs	r2, r3
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80192c2:	2301      	movs	r3, #1
 80192c4:	e039      	b.n	801933a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	691a      	ldr	r2, [r3, #16]
 80192ca:	69bb      	ldr	r3, [r7, #24]
 80192cc:	431a      	orrs	r2, r3
 80192ce:	0011      	movs	r1, r2
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	69fa      	ldr	r2, [r7, #28]
 80192d6:	430a      	orrs	r2, r1
 80192d8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	69db      	ldr	r3, [r3, #28]
 80192e0:	4a18      	ldr	r2, [pc, #96]	@ (8019344 <HAL_I2S_Init+0x1e0>)
 80192e2:	401a      	ands	r2, r3
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	6859      	ldr	r1, [r3, #4]
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	689b      	ldr	r3, [r3, #8]
 80192ec:	4319      	orrs	r1, r3
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	68db      	ldr	r3, [r3, #12]
 80192f2:	4319      	orrs	r1, r3
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	699b      	ldr	r3, [r3, #24]
 80192f8:	430b      	orrs	r3, r1
 80192fa:	431a      	orrs	r2, r3
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	2180      	movs	r1, #128	@ 0x80
 8019302:	0109      	lsls	r1, r1, #4
 8019304:	430a      	orrs	r2, r1
 8019306:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	689b      	ldr	r3, [r3, #8]
 801930c:	2b30      	cmp	r3, #48	@ 0x30
 801930e:	d003      	beq.n	8019318 <HAL_I2S_Init+0x1b4>
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	689b      	ldr	r3, [r3, #8]
 8019314:	2bb0      	cmp	r3, #176	@ 0xb0
 8019316:	d108      	bne.n	801932a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	69da      	ldr	r2, [r3, #28]
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	2180      	movs	r1, #128	@ 0x80
 8019324:	0149      	lsls	r1, r1, #5
 8019326:	430a      	orrs	r2, r1
 8019328:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	2200      	movs	r2, #0
 801932e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	2235      	movs	r2, #53	@ 0x35
 8019334:	2101      	movs	r1, #1
 8019336:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019338:	2300      	movs	r3, #0
}
 801933a:	0018      	movs	r0, r3
 801933c:	46bd      	mov	sp, r7
 801933e:	b008      	add	sp, #32
 8019340:	bd80      	pop	{r7, pc}
 8019342:	46c0      	nop			@ (mov r8, r8)
 8019344:	fffff040 	.word	0xfffff040

08019348 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b086      	sub	sp, #24
 801934c:	af00      	add	r7, sp, #0
 801934e:	60f8      	str	r0, [r7, #12]
 8019350:	60b9      	str	r1, [r7, #8]
 8019352:	1dbb      	adds	r3, r7, #6
 8019354:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d003      	beq.n	8019364 <HAL_I2S_Receive_DMA+0x1c>
 801935c:	1dbb      	adds	r3, r7, #6
 801935e:	881b      	ldrh	r3, [r3, #0]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d101      	bne.n	8019368 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8019364:	2301      	movs	r3, #1
 8019366:	e0a6      	b.n	80194b6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	2234      	movs	r2, #52	@ 0x34
 801936c:	5c9b      	ldrb	r3, [r3, r2]
 801936e:	b2db      	uxtb	r3, r3
 8019370:	2b01      	cmp	r3, #1
 8019372:	d101      	bne.n	8019378 <HAL_I2S_Receive_DMA+0x30>
 8019374:	2302      	movs	r3, #2
 8019376:	e09e      	b.n	80194b6 <HAL_I2S_Receive_DMA+0x16e>
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	2234      	movs	r2, #52	@ 0x34
 801937c:	2101      	movs	r1, #1
 801937e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	2235      	movs	r2, #53	@ 0x35
 8019384:	5c9b      	ldrb	r3, [r3, r2]
 8019386:	b2db      	uxtb	r3, r3
 8019388:	2b01      	cmp	r3, #1
 801938a:	d005      	beq.n	8019398 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	2234      	movs	r2, #52	@ 0x34
 8019390:	2100      	movs	r1, #0
 8019392:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8019394:	2302      	movs	r3, #2
 8019396:	e08e      	b.n	80194b6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	2235      	movs	r2, #53	@ 0x35
 801939c:	2104      	movs	r1, #4
 801939e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	2200      	movs	r2, #0
 80193a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	68ba      	ldr	r2, [r7, #8]
 80193aa:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	69db      	ldr	r3, [r3, #28]
 80193b2:	2207      	movs	r2, #7
 80193b4:	4013      	ands	r3, r2
 80193b6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80193b8:	697b      	ldr	r3, [r7, #20]
 80193ba:	2b03      	cmp	r3, #3
 80193bc:	d002      	beq.n	80193c4 <HAL_I2S_Receive_DMA+0x7c>
 80193be:	697b      	ldr	r3, [r7, #20]
 80193c0:	2b05      	cmp	r3, #5
 80193c2:	d10c      	bne.n	80193de <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80193c4:	1dbb      	adds	r3, r7, #6
 80193c6:	881b      	ldrh	r3, [r3, #0]
 80193c8:	18db      	adds	r3, r3, r3
 80193ca:	b29a      	uxth	r2, r3
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80193d0:	1dbb      	adds	r3, r7, #6
 80193d2:	881b      	ldrh	r3, [r3, #0]
 80193d4:	18db      	adds	r3, r3, r3
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80193dc:	e007      	b.n	80193ee <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	1dba      	adds	r2, r7, #6
 80193e2:	8812      	ldrh	r2, [r2, #0]
 80193e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	1dba      	adds	r2, r7, #6
 80193ea:	8812      	ldrh	r2, [r2, #0]
 80193ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80193f2:	4a33      	ldr	r2, [pc, #204]	@ (80194c0 <HAL_I2S_Receive_DMA+0x178>)
 80193f4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80193fa:	4a32      	ldr	r2, [pc, #200]	@ (80194c4 <HAL_I2S_Receive_DMA+0x17c>)
 80193fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019402:	4a31      	ldr	r2, [pc, #196]	@ (80194c8 <HAL_I2S_Receive_DMA+0x180>)
 8019404:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	69da      	ldr	r2, [r3, #28]
 801940c:	23c0      	movs	r3, #192	@ 0xc0
 801940e:	009b      	lsls	r3, r3, #2
 8019410:	401a      	ands	r2, r3
 8019412:	23c0      	movs	r3, #192	@ 0xc0
 8019414:	009b      	lsls	r3, r3, #2
 8019416:	429a      	cmp	r2, r3
 8019418:	d10a      	bne.n	8019430 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801941a:	2300      	movs	r3, #0
 801941c:	613b      	str	r3, [r7, #16]
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	68db      	ldr	r3, [r3, #12]
 8019424:	613b      	str	r3, [r7, #16]
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	689b      	ldr	r3, [r3, #8]
 801942c:	613b      	str	r3, [r7, #16]
 801942e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	330c      	adds	r3, #12
 801943a:	0019      	movs	r1, r3
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019440:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019446:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8019448:	f7fc f996 	bl	8015778 <HAL_DMA_Start_IT>
 801944c:	1e03      	subs	r3, r0, #0
 801944e:	d00f      	beq.n	8019470 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019454:	2208      	movs	r2, #8
 8019456:	431a      	orrs	r2, r3
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	2235      	movs	r2, #53	@ 0x35
 8019460:	2101      	movs	r1, #1
 8019462:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	2234      	movs	r2, #52	@ 0x34
 8019468:	2100      	movs	r1, #0
 801946a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801946c:	2301      	movs	r3, #1
 801946e:	e022      	b.n	80194b6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	69da      	ldr	r2, [r3, #28]
 8019476:	2380      	movs	r3, #128	@ 0x80
 8019478:	00db      	lsls	r3, r3, #3
 801947a:	4013      	ands	r3, r2
 801947c:	d108      	bne.n	8019490 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	69da      	ldr	r2, [r3, #28]
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	2180      	movs	r1, #128	@ 0x80
 801948a:	00c9      	lsls	r1, r1, #3
 801948c:	430a      	orrs	r2, r1
 801948e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	685b      	ldr	r3, [r3, #4]
 8019496:	2201      	movs	r2, #1
 8019498:	4013      	ands	r3, r2
 801949a:	d107      	bne.n	80194ac <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	685a      	ldr	r2, [r3, #4]
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	2101      	movs	r1, #1
 80194a8:	430a      	orrs	r2, r1
 80194aa:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	2234      	movs	r2, #52	@ 0x34
 80194b0:	2100      	movs	r1, #0
 80194b2:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80194b4:	2300      	movs	r3, #0
}
 80194b6:	0018      	movs	r0, r3
 80194b8:	46bd      	mov	sp, r7
 80194ba:	b006      	add	sp, #24
 80194bc:	bd80      	pop	{r7, pc}
 80194be:	46c0      	nop			@ (mov r8, r8)
 80194c0:	080196a9 	.word	0x080196a9
 80194c4:	08019665 	.word	0x08019665
 80194c8:	080196c7 	.word	0x080196c7

080194cc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b086      	sub	sp, #24
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80194d4:	2317      	movs	r3, #23
 80194d6:	18fb      	adds	r3, r7, r3
 80194d8:	2200      	movs	r2, #0
 80194da:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	685a      	ldr	r2, [r3, #4]
 80194e0:	2380      	movs	r3, #128	@ 0x80
 80194e2:	009b      	lsls	r3, r3, #2
 80194e4:	429a      	cmp	r2, r3
 80194e6:	d003      	beq.n	80194f0 <HAL_I2S_DMAStop+0x24>
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	685b      	ldr	r3, [r3, #4]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d158      	bne.n	80195a2 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d010      	beq.n	801951a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80194fc:	0018      	movs	r0, r3
 80194fe:	f7fc f9a1 	bl	8015844 <HAL_DMA_Abort>
 8019502:	1e03      	subs	r3, r0, #0
 8019504:	d009      	beq.n	801951a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801950a:	2208      	movs	r2, #8
 801950c:	431a      	orrs	r2, r3
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8019512:	2317      	movs	r3, #23
 8019514:	18fb      	adds	r3, r7, r3
 8019516:	2201      	movs	r2, #1
 8019518:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801951a:	6878      	ldr	r0, [r7, #4]
 801951c:	2364      	movs	r3, #100	@ 0x64
 801951e:	2201      	movs	r2, #1
 8019520:	2102      	movs	r1, #2
 8019522:	f000 f8f7 	bl	8019714 <I2S_WaitFlagStateUntilTimeout>
 8019526:	1e03      	subs	r3, r0, #0
 8019528:	d00d      	beq.n	8019546 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801952e:	2201      	movs	r2, #1
 8019530:	431a      	orrs	r2, r3
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	2235      	movs	r2, #53	@ 0x35
 801953a:	2101      	movs	r1, #1
 801953c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801953e:	2317      	movs	r3, #23
 8019540:	18fb      	adds	r3, r7, r3
 8019542:	2201      	movs	r2, #1
 8019544:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8019546:	6878      	ldr	r0, [r7, #4]
 8019548:	2364      	movs	r3, #100	@ 0x64
 801954a:	2200      	movs	r2, #0
 801954c:	2180      	movs	r1, #128	@ 0x80
 801954e:	f000 f8e1 	bl	8019714 <I2S_WaitFlagStateUntilTimeout>
 8019552:	1e03      	subs	r3, r0, #0
 8019554:	d00d      	beq.n	8019572 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801955a:	2201      	movs	r2, #1
 801955c:	431a      	orrs	r2, r3
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	2235      	movs	r2, #53	@ 0x35
 8019566:	2101      	movs	r1, #1
 8019568:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801956a:	2317      	movs	r3, #23
 801956c:	18fb      	adds	r3, r7, r3
 801956e:	2201      	movs	r2, #1
 8019570:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	69da      	ldr	r2, [r3, #28]
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	4938      	ldr	r1, [pc, #224]	@ (8019660 <HAL_I2S_DMAStop+0x194>)
 801957e:	400a      	ands	r2, r1
 8019580:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8019582:	2300      	movs	r3, #0
 8019584:	613b      	str	r3, [r7, #16]
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	689b      	ldr	r3, [r3, #8]
 801958c:	613b      	str	r3, [r7, #16]
 801958e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	685a      	ldr	r2, [r3, #4]
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	2102      	movs	r1, #2
 801959c:	438a      	bics	r2, r1
 801959e:	605a      	str	r2, [r3, #4]
 80195a0:	e053      	b.n	801964a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	685a      	ldr	r2, [r3, #4]
 80195a6:	23c0      	movs	r3, #192	@ 0xc0
 80195a8:	009b      	lsls	r3, r3, #2
 80195aa:	429a      	cmp	r2, r3
 80195ac:	d005      	beq.n	80195ba <HAL_I2S_DMAStop+0xee>
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	685a      	ldr	r2, [r3, #4]
 80195b2:	2380      	movs	r3, #128	@ 0x80
 80195b4:	005b      	lsls	r3, r3, #1
 80195b6:	429a      	cmp	r2, r3
 80195b8:	d147      	bne.n	801964a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d010      	beq.n	80195e4 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80195c6:	0018      	movs	r0, r3
 80195c8:	f7fc f93c 	bl	8015844 <HAL_DMA_Abort>
 80195cc:	1e03      	subs	r3, r0, #0
 80195ce:	d009      	beq.n	80195e4 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80195d4:	2208      	movs	r2, #8
 80195d6:	431a      	orrs	r2, r3
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80195dc:	2317      	movs	r3, #23
 80195de:	18fb      	adds	r3, r7, r3
 80195e0:	2201      	movs	r2, #1
 80195e2:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	69da      	ldr	r2, [r3, #28]
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	491c      	ldr	r1, [pc, #112]	@ (8019660 <HAL_I2S_DMAStop+0x194>)
 80195f0:	400a      	ands	r2, r1
 80195f2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80195f4:	2300      	movs	r3, #0
 80195f6:	60fb      	str	r3, [r7, #12]
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	68db      	ldr	r3, [r3, #12]
 80195fe:	60fb      	str	r3, [r7, #12]
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	689b      	ldr	r3, [r3, #8]
 8019606:	60fb      	str	r3, [r7, #12]
 8019608:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	685a      	ldr	r2, [r3, #4]
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	2101      	movs	r1, #1
 8019616:	438a      	bics	r2, r1
 8019618:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	685a      	ldr	r2, [r3, #4]
 801961e:	2380      	movs	r3, #128	@ 0x80
 8019620:	005b      	lsls	r3, r3, #1
 8019622:	429a      	cmp	r2, r3
 8019624:	d10e      	bne.n	8019644 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801962a:	2240      	movs	r2, #64	@ 0x40
 801962c:	431a      	orrs	r2, r3
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	2235      	movs	r2, #53	@ 0x35
 8019636:	2101      	movs	r1, #1
 8019638:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 801963a:	2317      	movs	r3, #23
 801963c:	18fb      	adds	r3, r7, r3
 801963e:	2201      	movs	r2, #1
 8019640:	701a      	strb	r2, [r3, #0]
 8019642:	e002      	b.n	801964a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	2235      	movs	r2, #53	@ 0x35
 801964e:	2101      	movs	r1, #1
 8019650:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8019652:	2317      	movs	r3, #23
 8019654:	18fb      	adds	r3, r7, r3
 8019656:	781b      	ldrb	r3, [r3, #0]
}
 8019658:	0018      	movs	r0, r3
 801965a:	46bd      	mov	sp, r7
 801965c:	b006      	add	sp, #24
 801965e:	bd80      	pop	{r7, pc}
 8019660:	fffffbff 	.word	0xfffffbff

08019664 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b084      	sub	sp, #16
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019670:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	69db      	ldr	r3, [r3, #28]
 8019676:	2b00      	cmp	r3, #0
 8019678:	d10e      	bne.n	8019698 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	685a      	ldr	r2, [r3, #4]
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	2101      	movs	r1, #1
 8019686:	438a      	bics	r2, r1
 8019688:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	2200      	movs	r2, #0
 801968e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	2235      	movs	r2, #53	@ 0x35
 8019694:	2101      	movs	r1, #1
 8019696:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	0018      	movs	r0, r3
 801969c:	f7f8 fc08 	bl	8011eb0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80196a0:	46c0      	nop			@ (mov r8, r8)
 80196a2:	46bd      	mov	sp, r7
 80196a4:	b004      	add	sp, #16
 80196a6:	bd80      	pop	{r7, pc}

080196a8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b084      	sub	sp, #16
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196b4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	0018      	movs	r0, r3
 80196ba:	f7f8 fbe7 	bl	8011e8c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80196be:	46c0      	nop			@ (mov r8, r8)
 80196c0:	46bd      	mov	sp, r7
 80196c2:	b004      	add	sp, #16
 80196c4:	bd80      	pop	{r7, pc}

080196c6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80196c6:	b580      	push	{r7, lr}
 80196c8:	b084      	sub	sp, #16
 80196ca:	af00      	add	r7, sp, #0
 80196cc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196d2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	685a      	ldr	r2, [r3, #4]
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	2103      	movs	r1, #3
 80196e0:	438a      	bics	r2, r1
 80196e2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	2200      	movs	r2, #0
 80196e8:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	2200      	movs	r2, #0
 80196ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	2235      	movs	r2, #53	@ 0x35
 80196f4:	2101      	movs	r1, #1
 80196f6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80196fc:	2208      	movs	r2, #8
 80196fe:	431a      	orrs	r2, r3
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	0018      	movs	r0, r3
 8019708:	f7f8 fc20 	bl	8011f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801970c:	46c0      	nop			@ (mov r8, r8)
 801970e:	46bd      	mov	sp, r7
 8019710:	b004      	add	sp, #16
 8019712:	bd80      	pop	{r7, pc}

08019714 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b086      	sub	sp, #24
 8019718:	af00      	add	r7, sp, #0
 801971a:	60f8      	str	r0, [r7, #12]
 801971c:	60b9      	str	r1, [r7, #8]
 801971e:	603b      	str	r3, [r7, #0]
 8019720:	1dfb      	adds	r3, r7, #7
 8019722:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8019724:	f7fb fad6 	bl	8014cd4 <HAL_GetTick>
 8019728:	0003      	movs	r3, r0
 801972a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801972c:	e017      	b.n	801975e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 801972e:	683b      	ldr	r3, [r7, #0]
 8019730:	3301      	adds	r3, #1
 8019732:	d014      	beq.n	801975e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8019734:	f7fb face 	bl	8014cd4 <HAL_GetTick>
 8019738:	0002      	movs	r2, r0
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	1ad3      	subs	r3, r2, r3
 801973e:	683a      	ldr	r2, [r7, #0]
 8019740:	429a      	cmp	r2, r3
 8019742:	d902      	bls.n	801974a <I2S_WaitFlagStateUntilTimeout+0x36>
 8019744:	683b      	ldr	r3, [r7, #0]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d109      	bne.n	801975e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	2235      	movs	r2, #53	@ 0x35
 801974e:	2101      	movs	r1, #1
 8019750:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	2234      	movs	r2, #52	@ 0x34
 8019756:	2100      	movs	r1, #0
 8019758:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801975a:	2303      	movs	r3, #3
 801975c:	e00f      	b.n	801977e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	689b      	ldr	r3, [r3, #8]
 8019764:	68ba      	ldr	r2, [r7, #8]
 8019766:	4013      	ands	r3, r2
 8019768:	68ba      	ldr	r2, [r7, #8]
 801976a:	1ad3      	subs	r3, r2, r3
 801976c:	425a      	negs	r2, r3
 801976e:	4153      	adcs	r3, r2
 8019770:	b2db      	uxtb	r3, r3
 8019772:	001a      	movs	r2, r3
 8019774:	1dfb      	adds	r3, r7, #7
 8019776:	781b      	ldrb	r3, [r3, #0]
 8019778:	429a      	cmp	r2, r3
 801977a:	d1d8      	bne.n	801972e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 801977c:	2300      	movs	r3, #0
}
 801977e:	0018      	movs	r0, r3
 8019780:	46bd      	mov	sp, r7
 8019782:	b006      	add	sp, #24
 8019784:	bd80      	pop	{r7, pc}
	...

08019788 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801978a:	b08b      	sub	sp, #44	@ 0x2c
 801978c:	af06      	add	r7, sp, #24
 801978e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d101      	bne.n	801979a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019796:	2301      	movs	r3, #1
 8019798:	e0f0      	b.n	801997c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	4a79      	ldr	r2, [pc, #484]	@ (8019984 <HAL_PCD_Init+0x1fc>)
 801979e:	5c9b      	ldrb	r3, [r3, r2]
 80197a0:	b2db      	uxtb	r3, r3
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d108      	bne.n	80197b8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80197a6:	687a      	ldr	r2, [r7, #4]
 80197a8:	23aa      	movs	r3, #170	@ 0xaa
 80197aa:	009b      	lsls	r3, r3, #2
 80197ac:	2100      	movs	r1, #0
 80197ae:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	0018      	movs	r0, r3
 80197b4:	f009 ff76 	bl	80236a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	4a72      	ldr	r2, [pc, #456]	@ (8019984 <HAL_PCD_Init+0x1fc>)
 80197bc:	2103      	movs	r1, #3
 80197be:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	0018      	movs	r0, r3
 80197c6:	f005 ff1b 	bl	801f600 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80197ca:	230f      	movs	r3, #15
 80197cc:	18fb      	adds	r3, r7, r3
 80197ce:	2200      	movs	r2, #0
 80197d0:	701a      	strb	r2, [r3, #0]
 80197d2:	e049      	b.n	8019868 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80197d4:	200f      	movs	r0, #15
 80197d6:	183b      	adds	r3, r7, r0
 80197d8:	781b      	ldrb	r3, [r3, #0]
 80197da:	6879      	ldr	r1, [r7, #4]
 80197dc:	1c5a      	adds	r2, r3, #1
 80197de:	0013      	movs	r3, r2
 80197e0:	009b      	lsls	r3, r3, #2
 80197e2:	189b      	adds	r3, r3, r2
 80197e4:	00db      	lsls	r3, r3, #3
 80197e6:	18cb      	adds	r3, r1, r3
 80197e8:	3301      	adds	r3, #1
 80197ea:	2201      	movs	r2, #1
 80197ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80197ee:	183b      	adds	r3, r7, r0
 80197f0:	781b      	ldrb	r3, [r3, #0]
 80197f2:	6879      	ldr	r1, [r7, #4]
 80197f4:	1c5a      	adds	r2, r3, #1
 80197f6:	0013      	movs	r3, r2
 80197f8:	009b      	lsls	r3, r3, #2
 80197fa:	189b      	adds	r3, r3, r2
 80197fc:	00db      	lsls	r3, r3, #3
 80197fe:	183a      	adds	r2, r7, r0
 8019800:	7812      	ldrb	r2, [r2, #0]
 8019802:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019804:	183b      	adds	r3, r7, r0
 8019806:	781b      	ldrb	r3, [r3, #0]
 8019808:	6879      	ldr	r1, [r7, #4]
 801980a:	1c5a      	adds	r2, r3, #1
 801980c:	0013      	movs	r3, r2
 801980e:	009b      	lsls	r3, r3, #2
 8019810:	189b      	adds	r3, r3, r2
 8019812:	00db      	lsls	r3, r3, #3
 8019814:	18cb      	adds	r3, r1, r3
 8019816:	3303      	adds	r3, #3
 8019818:	2200      	movs	r2, #0
 801981a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801981c:	183b      	adds	r3, r7, r0
 801981e:	781a      	ldrb	r2, [r3, #0]
 8019820:	6879      	ldr	r1, [r7, #4]
 8019822:	0013      	movs	r3, r2
 8019824:	009b      	lsls	r3, r3, #2
 8019826:	189b      	adds	r3, r3, r2
 8019828:	00db      	lsls	r3, r3, #3
 801982a:	18cb      	adds	r3, r1, r3
 801982c:	3338      	adds	r3, #56	@ 0x38
 801982e:	2200      	movs	r2, #0
 8019830:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019832:	183b      	adds	r3, r7, r0
 8019834:	781a      	ldrb	r2, [r3, #0]
 8019836:	6879      	ldr	r1, [r7, #4]
 8019838:	0013      	movs	r3, r2
 801983a:	009b      	lsls	r3, r3, #2
 801983c:	189b      	adds	r3, r3, r2
 801983e:	00db      	lsls	r3, r3, #3
 8019840:	18cb      	adds	r3, r1, r3
 8019842:	333c      	adds	r3, #60	@ 0x3c
 8019844:	2200      	movs	r2, #0
 8019846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019848:	183b      	adds	r3, r7, r0
 801984a:	781a      	ldrb	r2, [r3, #0]
 801984c:	6879      	ldr	r1, [r7, #4]
 801984e:	0013      	movs	r3, r2
 8019850:	009b      	lsls	r3, r3, #2
 8019852:	189b      	adds	r3, r3, r2
 8019854:	00db      	lsls	r3, r3, #3
 8019856:	18cb      	adds	r3, r1, r3
 8019858:	3340      	adds	r3, #64	@ 0x40
 801985a:	2200      	movs	r2, #0
 801985c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801985e:	183b      	adds	r3, r7, r0
 8019860:	781a      	ldrb	r2, [r3, #0]
 8019862:	183b      	adds	r3, r7, r0
 8019864:	3201      	adds	r2, #1
 8019866:	701a      	strb	r2, [r3, #0]
 8019868:	210f      	movs	r1, #15
 801986a:	187b      	adds	r3, r7, r1
 801986c:	781a      	ldrb	r2, [r3, #0]
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	685b      	ldr	r3, [r3, #4]
 8019872:	429a      	cmp	r2, r3
 8019874:	d3ae      	bcc.n	80197d4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019876:	187b      	adds	r3, r7, r1
 8019878:	2200      	movs	r2, #0
 801987a:	701a      	strb	r2, [r3, #0]
 801987c:	e056      	b.n	801992c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801987e:	240f      	movs	r4, #15
 8019880:	193b      	adds	r3, r7, r4
 8019882:	781a      	ldrb	r2, [r3, #0]
 8019884:	6878      	ldr	r0, [r7, #4]
 8019886:	236a      	movs	r3, #106	@ 0x6a
 8019888:	33ff      	adds	r3, #255	@ 0xff
 801988a:	0019      	movs	r1, r3
 801988c:	0013      	movs	r3, r2
 801988e:	009b      	lsls	r3, r3, #2
 8019890:	189b      	adds	r3, r3, r2
 8019892:	00db      	lsls	r3, r3, #3
 8019894:	18c3      	adds	r3, r0, r3
 8019896:	185b      	adds	r3, r3, r1
 8019898:	2200      	movs	r2, #0
 801989a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801989c:	193b      	adds	r3, r7, r4
 801989e:	781a      	ldrb	r2, [r3, #0]
 80198a0:	6878      	ldr	r0, [r7, #4]
 80198a2:	23b4      	movs	r3, #180	@ 0xb4
 80198a4:	0059      	lsls	r1, r3, #1
 80198a6:	0013      	movs	r3, r2
 80198a8:	009b      	lsls	r3, r3, #2
 80198aa:	189b      	adds	r3, r3, r2
 80198ac:	00db      	lsls	r3, r3, #3
 80198ae:	18c3      	adds	r3, r0, r3
 80198b0:	185b      	adds	r3, r3, r1
 80198b2:	193a      	adds	r2, r7, r4
 80198b4:	7812      	ldrb	r2, [r2, #0]
 80198b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80198b8:	193b      	adds	r3, r7, r4
 80198ba:	781a      	ldrb	r2, [r3, #0]
 80198bc:	6878      	ldr	r0, [r7, #4]
 80198be:	236c      	movs	r3, #108	@ 0x6c
 80198c0:	33ff      	adds	r3, #255	@ 0xff
 80198c2:	0019      	movs	r1, r3
 80198c4:	0013      	movs	r3, r2
 80198c6:	009b      	lsls	r3, r3, #2
 80198c8:	189b      	adds	r3, r3, r2
 80198ca:	00db      	lsls	r3, r3, #3
 80198cc:	18c3      	adds	r3, r0, r3
 80198ce:	185b      	adds	r3, r3, r1
 80198d0:	2200      	movs	r2, #0
 80198d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80198d4:	193b      	adds	r3, r7, r4
 80198d6:	781a      	ldrb	r2, [r3, #0]
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	23bc      	movs	r3, #188	@ 0xbc
 80198dc:	0059      	lsls	r1, r3, #1
 80198de:	0013      	movs	r3, r2
 80198e0:	009b      	lsls	r3, r3, #2
 80198e2:	189b      	adds	r3, r3, r2
 80198e4:	00db      	lsls	r3, r3, #3
 80198e6:	18c3      	adds	r3, r0, r3
 80198e8:	185b      	adds	r3, r3, r1
 80198ea:	2200      	movs	r2, #0
 80198ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80198ee:	193b      	adds	r3, r7, r4
 80198f0:	781a      	ldrb	r2, [r3, #0]
 80198f2:	6878      	ldr	r0, [r7, #4]
 80198f4:	23be      	movs	r3, #190	@ 0xbe
 80198f6:	0059      	lsls	r1, r3, #1
 80198f8:	0013      	movs	r3, r2
 80198fa:	009b      	lsls	r3, r3, #2
 80198fc:	189b      	adds	r3, r3, r2
 80198fe:	00db      	lsls	r3, r3, #3
 8019900:	18c3      	adds	r3, r0, r3
 8019902:	185b      	adds	r3, r3, r1
 8019904:	2200      	movs	r2, #0
 8019906:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019908:	193b      	adds	r3, r7, r4
 801990a:	781a      	ldrb	r2, [r3, #0]
 801990c:	6878      	ldr	r0, [r7, #4]
 801990e:	23c0      	movs	r3, #192	@ 0xc0
 8019910:	0059      	lsls	r1, r3, #1
 8019912:	0013      	movs	r3, r2
 8019914:	009b      	lsls	r3, r3, #2
 8019916:	189b      	adds	r3, r3, r2
 8019918:	00db      	lsls	r3, r3, #3
 801991a:	18c3      	adds	r3, r0, r3
 801991c:	185b      	adds	r3, r3, r1
 801991e:	2200      	movs	r2, #0
 8019920:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019922:	193b      	adds	r3, r7, r4
 8019924:	781a      	ldrb	r2, [r3, #0]
 8019926:	193b      	adds	r3, r7, r4
 8019928:	3201      	adds	r2, #1
 801992a:	701a      	strb	r2, [r3, #0]
 801992c:	230f      	movs	r3, #15
 801992e:	18fb      	adds	r3, r7, r3
 8019930:	781a      	ldrb	r2, [r3, #0]
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	685b      	ldr	r3, [r3, #4]
 8019936:	429a      	cmp	r2, r3
 8019938:	d3a1      	bcc.n	801987e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	6818      	ldr	r0, [r3, #0]
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	466a      	mov	r2, sp
 8019942:	0011      	movs	r1, r2
 8019944:	001a      	movs	r2, r3
 8019946:	3210      	adds	r2, #16
 8019948:	ca70      	ldmia	r2!, {r4, r5, r6}
 801994a:	c170      	stmia	r1!, {r4, r5, r6}
 801994c:	ca30      	ldmia	r2!, {r4, r5}
 801994e:	c130      	stmia	r1!, {r4, r5}
 8019950:	6859      	ldr	r1, [r3, #4]
 8019952:	689a      	ldr	r2, [r3, #8]
 8019954:	68db      	ldr	r3, [r3, #12]
 8019956:	f005 fe6d 	bl	801f634 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	2224      	movs	r2, #36	@ 0x24
 801995e:	2100      	movs	r1, #0
 8019960:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	4a07      	ldr	r2, [pc, #28]	@ (8019984 <HAL_PCD_Init+0x1fc>)
 8019966:	2101      	movs	r1, #1
 8019968:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	69db      	ldr	r3, [r3, #28]
 801996e:	2b01      	cmp	r3, #1
 8019970:	d103      	bne.n	801997a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	0018      	movs	r0, r3
 8019976:	f001 fd23 	bl	801b3c0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801997a:	2300      	movs	r3, #0
}
 801997c:	0018      	movs	r0, r3
 801997e:	46bd      	mov	sp, r7
 8019980:	b005      	add	sp, #20
 8019982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019984:	000002a9 	.word	0x000002a9

08019988 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019988:	b580      	push	{r7, lr}
 801998a:	b082      	sub	sp, #8
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8019990:	687a      	ldr	r2, [r7, #4]
 8019992:	23aa      	movs	r3, #170	@ 0xaa
 8019994:	009b      	lsls	r3, r3, #2
 8019996:	5cd3      	ldrb	r3, [r2, r3]
 8019998:	2b01      	cmp	r3, #1
 801999a:	d101      	bne.n	80199a0 <HAL_PCD_Start+0x18>
 801999c:	2302      	movs	r3, #2
 801999e:	e014      	b.n	80199ca <HAL_PCD_Start+0x42>
 80199a0:	687a      	ldr	r2, [r7, #4]
 80199a2:	23aa      	movs	r3, #170	@ 0xaa
 80199a4:	009b      	lsls	r3, r3, #2
 80199a6:	2101      	movs	r1, #1
 80199a8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	0018      	movs	r0, r3
 80199b0:	f005 fe10 	bl	801f5d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	0018      	movs	r0, r3
 80199ba:	f007 fe13 	bl	80215e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80199be:	687a      	ldr	r2, [r7, #4]
 80199c0:	23aa      	movs	r3, #170	@ 0xaa
 80199c2:	009b      	lsls	r3, r3, #2
 80199c4:	2100      	movs	r1, #0
 80199c6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80199c8:	2300      	movs	r3, #0
}
 80199ca:	0018      	movs	r0, r3
 80199cc:	46bd      	mov	sp, r7
 80199ce:	b002      	add	sp, #8
 80199d0:	bd80      	pop	{r7, pc}
	...

080199d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b084      	sub	sp, #16
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	0018      	movs	r0, r3
 80199e2:	f007 fe15 	bl	8021610 <USB_ReadInterrupts>
 80199e6:	0003      	movs	r3, r0
 80199e8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80199ea:	68fa      	ldr	r2, [r7, #12]
 80199ec:	2380      	movs	r3, #128	@ 0x80
 80199ee:	021b      	lsls	r3, r3, #8
 80199f0:	4013      	ands	r3, r2
 80199f2:	d004      	beq.n	80199fe <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	0018      	movs	r0, r3
 80199f8:	f000 fb62 	bl	801a0c0 <PCD_EP_ISR_Handler>

    return;
 80199fc:	e11d      	b.n	8019c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80199fe:	68fa      	ldr	r2, [r7, #12]
 8019a00:	2380      	movs	r3, #128	@ 0x80
 8019a02:	00db      	lsls	r3, r3, #3
 8019a04:	4013      	ands	r3, r2
 8019a06:	d015      	beq.n	8019a34 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	2244      	movs	r2, #68	@ 0x44
 8019a0e:	5a9b      	ldrh	r3, [r3, r2]
 8019a10:	b29a      	uxth	r2, r3
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	498a      	ldr	r1, [pc, #552]	@ (8019c40 <HAL_PCD_IRQHandler+0x26c>)
 8019a18:	400a      	ands	r2, r1
 8019a1a:	b291      	uxth	r1, r2
 8019a1c:	2244      	movs	r2, #68	@ 0x44
 8019a1e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	0018      	movs	r0, r3
 8019a24:	f009 fec1 	bl	80237aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	2100      	movs	r1, #0
 8019a2c:	0018      	movs	r0, r3
 8019a2e:	f000 f915 	bl	8019c5c <HAL_PCD_SetAddress>

    return;
 8019a32:	e102      	b.n	8019c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8019a34:	68fa      	ldr	r2, [r7, #12]
 8019a36:	2380      	movs	r3, #128	@ 0x80
 8019a38:	01db      	lsls	r3, r3, #7
 8019a3a:	4013      	ands	r3, r2
 8019a3c:	d00c      	beq.n	8019a58 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	2244      	movs	r2, #68	@ 0x44
 8019a44:	5a9b      	ldrh	r3, [r3, r2]
 8019a46:	b29a      	uxth	r2, r3
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	497d      	ldr	r1, [pc, #500]	@ (8019c44 <HAL_PCD_IRQHandler+0x270>)
 8019a4e:	400a      	ands	r2, r1
 8019a50:	b291      	uxth	r1, r2
 8019a52:	2244      	movs	r2, #68	@ 0x44
 8019a54:	5299      	strh	r1, [r3, r2]

    return;
 8019a56:	e0f0      	b.n	8019c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8019a58:	68fa      	ldr	r2, [r7, #12]
 8019a5a:	2380      	movs	r3, #128	@ 0x80
 8019a5c:	019b      	lsls	r3, r3, #6
 8019a5e:	4013      	ands	r3, r2
 8019a60:	d00c      	beq.n	8019a7c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	2244      	movs	r2, #68	@ 0x44
 8019a68:	5a9b      	ldrh	r3, [r3, r2]
 8019a6a:	b29a      	uxth	r2, r3
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	4975      	ldr	r1, [pc, #468]	@ (8019c48 <HAL_PCD_IRQHandler+0x274>)
 8019a72:	400a      	ands	r2, r1
 8019a74:	b291      	uxth	r1, r2
 8019a76:	2244      	movs	r2, #68	@ 0x44
 8019a78:	5299      	strh	r1, [r3, r2]

    return;
 8019a7a:	e0de      	b.n	8019c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8019a7c:	68fa      	ldr	r2, [r7, #12]
 8019a7e:	2380      	movs	r3, #128	@ 0x80
 8019a80:	015b      	lsls	r3, r3, #5
 8019a82:	4013      	ands	r3, r2
 8019a84:	d038      	beq.n	8019af8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	2240      	movs	r2, #64	@ 0x40
 8019a8c:	5a9b      	ldrh	r3, [r3, r2]
 8019a8e:	b29a      	uxth	r2, r3
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	2104      	movs	r1, #4
 8019a96:	438a      	bics	r2, r1
 8019a98:	b291      	uxth	r1, r2
 8019a9a:	2240      	movs	r2, #64	@ 0x40
 8019a9c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	2240      	movs	r2, #64	@ 0x40
 8019aa4:	5a9b      	ldrh	r3, [r3, r2]
 8019aa6:	b29a      	uxth	r2, r3
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	2108      	movs	r1, #8
 8019aae:	438a      	bics	r2, r1
 8019ab0:	b291      	uxth	r1, r2
 8019ab2:	2240      	movs	r2, #64	@ 0x40
 8019ab4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8019ab6:	687a      	ldr	r2, [r7, #4]
 8019ab8:	23b8      	movs	r3, #184	@ 0xb8
 8019aba:	009b      	lsls	r3, r3, #2
 8019abc:	5cd3      	ldrb	r3, [r2, r3]
 8019abe:	2b01      	cmp	r3, #1
 8019ac0:	d109      	bne.n	8019ad6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8019ac2:	687a      	ldr	r2, [r7, #4]
 8019ac4:	23b8      	movs	r3, #184	@ 0xb8
 8019ac6:	009b      	lsls	r3, r3, #2
 8019ac8:	2100      	movs	r1, #0
 8019aca:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	2100      	movs	r1, #0
 8019ad0:	0018      	movs	r0, r3
 8019ad2:	f001 fc9f 	bl	801b414 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	0018      	movs	r0, r3
 8019ada:	f009 fea7 	bl	802382c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	2244      	movs	r2, #68	@ 0x44
 8019ae4:	5a9b      	ldrh	r3, [r3, r2]
 8019ae6:	b29a      	uxth	r2, r3
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	4957      	ldr	r1, [pc, #348]	@ (8019c4c <HAL_PCD_IRQHandler+0x278>)
 8019aee:	400a      	ands	r2, r1
 8019af0:	b291      	uxth	r1, r2
 8019af2:	2244      	movs	r2, #68	@ 0x44
 8019af4:	5299      	strh	r1, [r3, r2]

    return;
 8019af6:	e0a0      	b.n	8019c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8019af8:	68fa      	ldr	r2, [r7, #12]
 8019afa:	2380      	movs	r3, #128	@ 0x80
 8019afc:	011b      	lsls	r3, r3, #4
 8019afe:	4013      	ands	r3, r2
 8019b00:	d028      	beq.n	8019b54 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	2240      	movs	r2, #64	@ 0x40
 8019b08:	5a9b      	ldrh	r3, [r3, r2]
 8019b0a:	b29a      	uxth	r2, r3
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	2108      	movs	r1, #8
 8019b12:	430a      	orrs	r2, r1
 8019b14:	b291      	uxth	r1, r2
 8019b16:	2240      	movs	r2, #64	@ 0x40
 8019b18:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	2244      	movs	r2, #68	@ 0x44
 8019b20:	5a9b      	ldrh	r3, [r3, r2]
 8019b22:	b29a      	uxth	r2, r3
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	4949      	ldr	r1, [pc, #292]	@ (8019c50 <HAL_PCD_IRQHandler+0x27c>)
 8019b2a:	400a      	ands	r2, r1
 8019b2c:	b291      	uxth	r1, r2
 8019b2e:	2244      	movs	r2, #68	@ 0x44
 8019b30:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	2240      	movs	r2, #64	@ 0x40
 8019b38:	5a9b      	ldrh	r3, [r3, r2]
 8019b3a:	b29a      	uxth	r2, r3
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	2104      	movs	r1, #4
 8019b42:	430a      	orrs	r2, r1
 8019b44:	b291      	uxth	r1, r2
 8019b46:	2240      	movs	r2, #64	@ 0x40
 8019b48:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	0018      	movs	r0, r3
 8019b4e:	f009 fe51 	bl	80237f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8019b52:	e072      	b.n	8019c3a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	2280      	movs	r2, #128	@ 0x80
 8019b58:	4013      	ands	r3, r2
 8019b5a:	d046      	beq.n	8019bea <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	2244      	movs	r2, #68	@ 0x44
 8019b62:	5a9b      	ldrh	r3, [r3, r2]
 8019b64:	b29a      	uxth	r2, r3
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	2180      	movs	r1, #128	@ 0x80
 8019b6c:	438a      	bics	r2, r1
 8019b6e:	b291      	uxth	r1, r2
 8019b70:	2244      	movs	r2, #68	@ 0x44
 8019b72:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8019b74:	687a      	ldr	r2, [r7, #4]
 8019b76:	23b8      	movs	r3, #184	@ 0xb8
 8019b78:	009b      	lsls	r3, r3, #2
 8019b7a:	5cd3      	ldrb	r3, [r2, r3]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d12f      	bne.n	8019be0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	2240      	movs	r2, #64	@ 0x40
 8019b86:	5a9b      	ldrh	r3, [r3, r2]
 8019b88:	b29a      	uxth	r2, r3
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	2104      	movs	r1, #4
 8019b90:	430a      	orrs	r2, r1
 8019b92:	b291      	uxth	r1, r2
 8019b94:	2240      	movs	r2, #64	@ 0x40
 8019b96:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	2240      	movs	r2, #64	@ 0x40
 8019b9e:	5a9b      	ldrh	r3, [r3, r2]
 8019ba0:	b29a      	uxth	r2, r3
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	2108      	movs	r1, #8
 8019ba8:	430a      	orrs	r2, r1
 8019baa:	b291      	uxth	r1, r2
 8019bac:	2240      	movs	r2, #64	@ 0x40
 8019bae:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8019bb0:	687a      	ldr	r2, [r7, #4]
 8019bb2:	23b8      	movs	r3, #184	@ 0xb8
 8019bb4:	009b      	lsls	r3, r3, #2
 8019bb6:	2101      	movs	r1, #1
 8019bb8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	2254      	movs	r2, #84	@ 0x54
 8019bc0:	5a9b      	ldrh	r3, [r3, r2]
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	089b      	lsrs	r3, r3, #2
 8019bc6:	223c      	movs	r2, #60	@ 0x3c
 8019bc8:	4013      	ands	r3, r2
 8019bca:	0019      	movs	r1, r3
 8019bcc:	687a      	ldr	r2, [r7, #4]
 8019bce:	23b9      	movs	r3, #185	@ 0xb9
 8019bd0:	009b      	lsls	r3, r3, #2
 8019bd2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	2101      	movs	r1, #1
 8019bd8:	0018      	movs	r0, r3
 8019bda:	f001 fc1b 	bl	801b414 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8019bde:	e02c      	b.n	8019c3a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	0018      	movs	r0, r3
 8019be4:	f009 fe06 	bl	80237f4 <HAL_PCD_SuspendCallback>
    return;
 8019be8:	e027      	b.n	8019c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8019bea:	68fa      	ldr	r2, [r7, #12]
 8019bec:	2380      	movs	r3, #128	@ 0x80
 8019bee:	009b      	lsls	r3, r3, #2
 8019bf0:	4013      	ands	r3, r2
 8019bf2:	d010      	beq.n	8019c16 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	2244      	movs	r2, #68	@ 0x44
 8019bfa:	5a9b      	ldrh	r3, [r3, r2]
 8019bfc:	b29a      	uxth	r2, r3
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	4914      	ldr	r1, [pc, #80]	@ (8019c54 <HAL_PCD_IRQHandler+0x280>)
 8019c04:	400a      	ands	r2, r1
 8019c06:	b291      	uxth	r1, r2
 8019c08:	2244      	movs	r2, #68	@ 0x44
 8019c0a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	0018      	movs	r0, r3
 8019c10:	f009 fdbc 	bl	802378c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8019c14:	e011      	b.n	8019c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8019c16:	68fa      	ldr	r2, [r7, #12]
 8019c18:	2380      	movs	r3, #128	@ 0x80
 8019c1a:	005b      	lsls	r3, r3, #1
 8019c1c:	4013      	ands	r3, r2
 8019c1e:	d00c      	beq.n	8019c3a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	2244      	movs	r2, #68	@ 0x44
 8019c26:	5a9b      	ldrh	r3, [r3, r2]
 8019c28:	b29a      	uxth	r2, r3
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	490a      	ldr	r1, [pc, #40]	@ (8019c58 <HAL_PCD_IRQHandler+0x284>)
 8019c30:	400a      	ands	r2, r1
 8019c32:	b291      	uxth	r1, r2
 8019c34:	2244      	movs	r2, #68	@ 0x44
 8019c36:	5299      	strh	r1, [r3, r2]

    return;
 8019c38:	46c0      	nop			@ (mov r8, r8)
  }
}
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	b004      	add	sp, #16
 8019c3e:	bd80      	pop	{r7, pc}
 8019c40:	fffffbff 	.word	0xfffffbff
 8019c44:	ffffbfff 	.word	0xffffbfff
 8019c48:	ffffdfff 	.word	0xffffdfff
 8019c4c:	ffffefff 	.word	0xffffefff
 8019c50:	fffff7ff 	.word	0xfffff7ff
 8019c54:	fffffdff 	.word	0xfffffdff
 8019c58:	fffffeff 	.word	0xfffffeff

08019c5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b082      	sub	sp, #8
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
 8019c64:	000a      	movs	r2, r1
 8019c66:	1cfb      	adds	r3, r7, #3
 8019c68:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8019c6a:	687a      	ldr	r2, [r7, #4]
 8019c6c:	23aa      	movs	r3, #170	@ 0xaa
 8019c6e:	009b      	lsls	r3, r3, #2
 8019c70:	5cd3      	ldrb	r3, [r2, r3]
 8019c72:	2b01      	cmp	r3, #1
 8019c74:	d101      	bne.n	8019c7a <HAL_PCD_SetAddress+0x1e>
 8019c76:	2302      	movs	r3, #2
 8019c78:	e017      	b.n	8019caa <HAL_PCD_SetAddress+0x4e>
 8019c7a:	687a      	ldr	r2, [r7, #4]
 8019c7c:	23aa      	movs	r3, #170	@ 0xaa
 8019c7e:	009b      	lsls	r3, r3, #2
 8019c80:	2101      	movs	r1, #1
 8019c82:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	1cfa      	adds	r2, r7, #3
 8019c88:	2124      	movs	r1, #36	@ 0x24
 8019c8a:	7812      	ldrb	r2, [r2, #0]
 8019c8c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	681a      	ldr	r2, [r3, #0]
 8019c92:	1cfb      	adds	r3, r7, #3
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	0019      	movs	r1, r3
 8019c98:	0010      	movs	r0, r2
 8019c9a:	f007 fc8f 	bl	80215bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8019c9e:	687a      	ldr	r2, [r7, #4]
 8019ca0:	23aa      	movs	r3, #170	@ 0xaa
 8019ca2:	009b      	lsls	r3, r3, #2
 8019ca4:	2100      	movs	r1, #0
 8019ca6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019ca8:	2300      	movs	r3, #0
}
 8019caa:	0018      	movs	r0, r3
 8019cac:	46bd      	mov	sp, r7
 8019cae:	b002      	add	sp, #8
 8019cb0:	bd80      	pop	{r7, pc}

08019cb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8019cb2:	b590      	push	{r4, r7, lr}
 8019cb4:	b085      	sub	sp, #20
 8019cb6:	af00      	add	r7, sp, #0
 8019cb8:	6078      	str	r0, [r7, #4]
 8019cba:	000c      	movs	r4, r1
 8019cbc:	0010      	movs	r0, r2
 8019cbe:	0019      	movs	r1, r3
 8019cc0:	1cfb      	adds	r3, r7, #3
 8019cc2:	1c22      	adds	r2, r4, #0
 8019cc4:	701a      	strb	r2, [r3, #0]
 8019cc6:	003b      	movs	r3, r7
 8019cc8:	1c02      	adds	r2, r0, #0
 8019cca:	801a      	strh	r2, [r3, #0]
 8019ccc:	1cbb      	adds	r3, r7, #2
 8019cce:	1c0a      	adds	r2, r1, #0
 8019cd0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8019cd2:	230b      	movs	r3, #11
 8019cd4:	18fb      	adds	r3, r7, r3
 8019cd6:	2200      	movs	r2, #0
 8019cd8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019cda:	1cfb      	adds	r3, r7, #3
 8019cdc:	781b      	ldrb	r3, [r3, #0]
 8019cde:	b25b      	sxtb	r3, r3
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	da0f      	bge.n	8019d04 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019ce4:	1cfb      	adds	r3, r7, #3
 8019ce6:	781b      	ldrb	r3, [r3, #0]
 8019ce8:	2207      	movs	r2, #7
 8019cea:	4013      	ands	r3, r2
 8019cec:	1c5a      	adds	r2, r3, #1
 8019cee:	0013      	movs	r3, r2
 8019cf0:	009b      	lsls	r3, r3, #2
 8019cf2:	189b      	adds	r3, r3, r2
 8019cf4:	00db      	lsls	r3, r3, #3
 8019cf6:	687a      	ldr	r2, [r7, #4]
 8019cf8:	18d3      	adds	r3, r2, r3
 8019cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	2201      	movs	r2, #1
 8019d00:	705a      	strb	r2, [r3, #1]
 8019d02:	e00f      	b.n	8019d24 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019d04:	1cfb      	adds	r3, r7, #3
 8019d06:	781b      	ldrb	r3, [r3, #0]
 8019d08:	2207      	movs	r2, #7
 8019d0a:	401a      	ands	r2, r3
 8019d0c:	0013      	movs	r3, r2
 8019d0e:	009b      	lsls	r3, r3, #2
 8019d10:	189b      	adds	r3, r3, r2
 8019d12:	00db      	lsls	r3, r3, #3
 8019d14:	3369      	adds	r3, #105	@ 0x69
 8019d16:	33ff      	adds	r3, #255	@ 0xff
 8019d18:	687a      	ldr	r2, [r7, #4]
 8019d1a:	18d3      	adds	r3, r2, r3
 8019d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	2200      	movs	r2, #0
 8019d22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8019d24:	1cfb      	adds	r3, r7, #3
 8019d26:	781b      	ldrb	r3, [r3, #0]
 8019d28:	2207      	movs	r2, #7
 8019d2a:	4013      	ands	r3, r2
 8019d2c:	b2da      	uxtb	r2, r3
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8019d32:	003b      	movs	r3, r7
 8019d34:	881a      	ldrh	r2, [r3, #0]
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	1cba      	adds	r2, r7, #2
 8019d3e:	7812      	ldrb	r2, [r2, #0]
 8019d40:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8019d42:	1cbb      	adds	r3, r7, #2
 8019d44:	781b      	ldrb	r3, [r3, #0]
 8019d46:	2b02      	cmp	r3, #2
 8019d48:	d102      	bne.n	8019d50 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	2200      	movs	r2, #0
 8019d4e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8019d50:	687a      	ldr	r2, [r7, #4]
 8019d52:	23aa      	movs	r3, #170	@ 0xaa
 8019d54:	009b      	lsls	r3, r3, #2
 8019d56:	5cd3      	ldrb	r3, [r2, r3]
 8019d58:	2b01      	cmp	r3, #1
 8019d5a:	d101      	bne.n	8019d60 <HAL_PCD_EP_Open+0xae>
 8019d5c:	2302      	movs	r3, #2
 8019d5e:	e013      	b.n	8019d88 <HAL_PCD_EP_Open+0xd6>
 8019d60:	687a      	ldr	r2, [r7, #4]
 8019d62:	23aa      	movs	r3, #170	@ 0xaa
 8019d64:	009b      	lsls	r3, r3, #2
 8019d66:	2101      	movs	r1, #1
 8019d68:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	68fa      	ldr	r2, [r7, #12]
 8019d70:	0011      	movs	r1, r2
 8019d72:	0018      	movs	r0, r3
 8019d74:	f005 fc86 	bl	801f684 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019d78:	687a      	ldr	r2, [r7, #4]
 8019d7a:	23aa      	movs	r3, #170	@ 0xaa
 8019d7c:	009b      	lsls	r3, r3, #2
 8019d7e:	2100      	movs	r1, #0
 8019d80:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019d82:	230b      	movs	r3, #11
 8019d84:	18fb      	adds	r3, r7, r3
 8019d86:	781b      	ldrb	r3, [r3, #0]
}
 8019d88:	0018      	movs	r0, r3
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	b005      	add	sp, #20
 8019d8e:	bd90      	pop	{r4, r7, pc}

08019d90 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b084      	sub	sp, #16
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
 8019d98:	000a      	movs	r2, r1
 8019d9a:	1cfb      	adds	r3, r7, #3
 8019d9c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019d9e:	1cfb      	adds	r3, r7, #3
 8019da0:	781b      	ldrb	r3, [r3, #0]
 8019da2:	b25b      	sxtb	r3, r3
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	da0f      	bge.n	8019dc8 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019da8:	1cfb      	adds	r3, r7, #3
 8019daa:	781b      	ldrb	r3, [r3, #0]
 8019dac:	2207      	movs	r2, #7
 8019dae:	4013      	ands	r3, r2
 8019db0:	1c5a      	adds	r2, r3, #1
 8019db2:	0013      	movs	r3, r2
 8019db4:	009b      	lsls	r3, r3, #2
 8019db6:	189b      	adds	r3, r3, r2
 8019db8:	00db      	lsls	r3, r3, #3
 8019dba:	687a      	ldr	r2, [r7, #4]
 8019dbc:	18d3      	adds	r3, r2, r3
 8019dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	2201      	movs	r2, #1
 8019dc4:	705a      	strb	r2, [r3, #1]
 8019dc6:	e00f      	b.n	8019de8 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019dc8:	1cfb      	adds	r3, r7, #3
 8019dca:	781b      	ldrb	r3, [r3, #0]
 8019dcc:	2207      	movs	r2, #7
 8019dce:	401a      	ands	r2, r3
 8019dd0:	0013      	movs	r3, r2
 8019dd2:	009b      	lsls	r3, r3, #2
 8019dd4:	189b      	adds	r3, r3, r2
 8019dd6:	00db      	lsls	r3, r3, #3
 8019dd8:	3369      	adds	r3, #105	@ 0x69
 8019dda:	33ff      	adds	r3, #255	@ 0xff
 8019ddc:	687a      	ldr	r2, [r7, #4]
 8019dde:	18d3      	adds	r3, r2, r3
 8019de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	2200      	movs	r2, #0
 8019de6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019de8:	1cfb      	adds	r3, r7, #3
 8019dea:	781b      	ldrb	r3, [r3, #0]
 8019dec:	2207      	movs	r2, #7
 8019dee:	4013      	ands	r3, r2
 8019df0:	b2da      	uxtb	r2, r3
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019df6:	687a      	ldr	r2, [r7, #4]
 8019df8:	23aa      	movs	r3, #170	@ 0xaa
 8019dfa:	009b      	lsls	r3, r3, #2
 8019dfc:	5cd3      	ldrb	r3, [r2, r3]
 8019dfe:	2b01      	cmp	r3, #1
 8019e00:	d101      	bne.n	8019e06 <HAL_PCD_EP_Close+0x76>
 8019e02:	2302      	movs	r3, #2
 8019e04:	e011      	b.n	8019e2a <HAL_PCD_EP_Close+0x9a>
 8019e06:	687a      	ldr	r2, [r7, #4]
 8019e08:	23aa      	movs	r3, #170	@ 0xaa
 8019e0a:	009b      	lsls	r3, r3, #2
 8019e0c:	2101      	movs	r1, #1
 8019e0e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	68fa      	ldr	r2, [r7, #12]
 8019e16:	0011      	movs	r1, r2
 8019e18:	0018      	movs	r0, r3
 8019e1a:	f005 ffd5 	bl	801fdc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019e1e:	687a      	ldr	r2, [r7, #4]
 8019e20:	23aa      	movs	r3, #170	@ 0xaa
 8019e22:	009b      	lsls	r3, r3, #2
 8019e24:	2100      	movs	r1, #0
 8019e26:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8019e28:	2300      	movs	r3, #0
}
 8019e2a:	0018      	movs	r0, r3
 8019e2c:	46bd      	mov	sp, r7
 8019e2e:	b004      	add	sp, #16
 8019e30:	bd80      	pop	{r7, pc}

08019e32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019e32:	b580      	push	{r7, lr}
 8019e34:	b086      	sub	sp, #24
 8019e36:	af00      	add	r7, sp, #0
 8019e38:	60f8      	str	r0, [r7, #12]
 8019e3a:	607a      	str	r2, [r7, #4]
 8019e3c:	603b      	str	r3, [r7, #0]
 8019e3e:	200b      	movs	r0, #11
 8019e40:	183b      	adds	r3, r7, r0
 8019e42:	1c0a      	adds	r2, r1, #0
 8019e44:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019e46:	0001      	movs	r1, r0
 8019e48:	187b      	adds	r3, r7, r1
 8019e4a:	781b      	ldrb	r3, [r3, #0]
 8019e4c:	2207      	movs	r2, #7
 8019e4e:	401a      	ands	r2, r3
 8019e50:	0013      	movs	r3, r2
 8019e52:	009b      	lsls	r3, r3, #2
 8019e54:	189b      	adds	r3, r3, r2
 8019e56:	00db      	lsls	r3, r3, #3
 8019e58:	3369      	adds	r3, #105	@ 0x69
 8019e5a:	33ff      	adds	r3, #255	@ 0xff
 8019e5c:	68fa      	ldr	r2, [r7, #12]
 8019e5e:	18d3      	adds	r3, r2, r3
 8019e60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019e62:	697b      	ldr	r3, [r7, #20]
 8019e64:	687a      	ldr	r2, [r7, #4]
 8019e66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019e68:	697b      	ldr	r3, [r7, #20]
 8019e6a:	683a      	ldr	r2, [r7, #0]
 8019e6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8019e6e:	697b      	ldr	r3, [r7, #20]
 8019e70:	2200      	movs	r2, #0
 8019e72:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019e74:	697b      	ldr	r3, [r7, #20]
 8019e76:	2200      	movs	r2, #0
 8019e78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019e7a:	187b      	adds	r3, r7, r1
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	2207      	movs	r2, #7
 8019e80:	4013      	ands	r3, r2
 8019e82:	b2da      	uxtb	r2, r3
 8019e84:	697b      	ldr	r3, [r7, #20]
 8019e86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	697a      	ldr	r2, [r7, #20]
 8019e8e:	0011      	movs	r1, r2
 8019e90:	0018      	movs	r0, r3
 8019e92:	f006 f959 	bl	8020148 <USB_EPStartXfer>

  return HAL_OK;
 8019e96:	2300      	movs	r3, #0
}
 8019e98:	0018      	movs	r0, r3
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	b006      	add	sp, #24
 8019e9e:	bd80      	pop	{r7, pc}

08019ea0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b082      	sub	sp, #8
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	000a      	movs	r2, r1
 8019eaa:	1cfb      	adds	r3, r7, #3
 8019eac:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019eae:	1cfb      	adds	r3, r7, #3
 8019eb0:	781b      	ldrb	r3, [r3, #0]
 8019eb2:	2207      	movs	r2, #7
 8019eb4:	401a      	ands	r2, r3
 8019eb6:	6878      	ldr	r0, [r7, #4]
 8019eb8:	23c2      	movs	r3, #194	@ 0xc2
 8019eba:	0059      	lsls	r1, r3, #1
 8019ebc:	0013      	movs	r3, r2
 8019ebe:	009b      	lsls	r3, r3, #2
 8019ec0:	189b      	adds	r3, r3, r2
 8019ec2:	00db      	lsls	r3, r3, #3
 8019ec4:	18c3      	adds	r3, r0, r3
 8019ec6:	185b      	adds	r3, r3, r1
 8019ec8:	681b      	ldr	r3, [r3, #0]
}
 8019eca:	0018      	movs	r0, r3
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	b002      	add	sp, #8
 8019ed0:	bd80      	pop	{r7, pc}

08019ed2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019ed2:	b580      	push	{r7, lr}
 8019ed4:	b086      	sub	sp, #24
 8019ed6:	af00      	add	r7, sp, #0
 8019ed8:	60f8      	str	r0, [r7, #12]
 8019eda:	607a      	str	r2, [r7, #4]
 8019edc:	603b      	str	r3, [r7, #0]
 8019ede:	200b      	movs	r0, #11
 8019ee0:	183b      	adds	r3, r7, r0
 8019ee2:	1c0a      	adds	r2, r1, #0
 8019ee4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019ee6:	183b      	adds	r3, r7, r0
 8019ee8:	781b      	ldrb	r3, [r3, #0]
 8019eea:	2207      	movs	r2, #7
 8019eec:	4013      	ands	r3, r2
 8019eee:	1c5a      	adds	r2, r3, #1
 8019ef0:	0013      	movs	r3, r2
 8019ef2:	009b      	lsls	r3, r3, #2
 8019ef4:	189b      	adds	r3, r3, r2
 8019ef6:	00db      	lsls	r3, r3, #3
 8019ef8:	68fa      	ldr	r2, [r7, #12]
 8019efa:	18d3      	adds	r3, r2, r3
 8019efc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019efe:	697b      	ldr	r3, [r7, #20]
 8019f00:	687a      	ldr	r2, [r7, #4]
 8019f02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	683a      	ldr	r2, [r7, #0]
 8019f08:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019f0a:	697b      	ldr	r3, [r7, #20]
 8019f0c:	2224      	movs	r2, #36	@ 0x24
 8019f0e:	2101      	movs	r1, #1
 8019f10:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8019f12:	697b      	ldr	r3, [r7, #20]
 8019f14:	683a      	ldr	r2, [r7, #0]
 8019f16:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019f18:	697b      	ldr	r3, [r7, #20]
 8019f1a:	2200      	movs	r2, #0
 8019f1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019f1e:	697b      	ldr	r3, [r7, #20]
 8019f20:	2201      	movs	r2, #1
 8019f22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019f24:	183b      	adds	r3, r7, r0
 8019f26:	781b      	ldrb	r3, [r3, #0]
 8019f28:	2207      	movs	r2, #7
 8019f2a:	4013      	ands	r3, r2
 8019f2c:	b2da      	uxtb	r2, r3
 8019f2e:	697b      	ldr	r3, [r7, #20]
 8019f30:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	697a      	ldr	r2, [r7, #20]
 8019f38:	0011      	movs	r1, r2
 8019f3a:	0018      	movs	r0, r3
 8019f3c:	f006 f904 	bl	8020148 <USB_EPStartXfer>

  return HAL_OK;
 8019f40:	2300      	movs	r3, #0
}
 8019f42:	0018      	movs	r0, r3
 8019f44:	46bd      	mov	sp, r7
 8019f46:	b006      	add	sp, #24
 8019f48:	bd80      	pop	{r7, pc}

08019f4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019f4a:	b580      	push	{r7, lr}
 8019f4c:	b084      	sub	sp, #16
 8019f4e:	af00      	add	r7, sp, #0
 8019f50:	6078      	str	r0, [r7, #4]
 8019f52:	000a      	movs	r2, r1
 8019f54:	1cfb      	adds	r3, r7, #3
 8019f56:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019f58:	1cfb      	adds	r3, r7, #3
 8019f5a:	781b      	ldrb	r3, [r3, #0]
 8019f5c:	2207      	movs	r2, #7
 8019f5e:	401a      	ands	r2, r3
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	685b      	ldr	r3, [r3, #4]
 8019f64:	429a      	cmp	r2, r3
 8019f66:	d901      	bls.n	8019f6c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019f68:	2301      	movs	r3, #1
 8019f6a:	e046      	b.n	8019ffa <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019f6c:	1cfb      	adds	r3, r7, #3
 8019f6e:	781b      	ldrb	r3, [r3, #0]
 8019f70:	b25b      	sxtb	r3, r3
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	da0f      	bge.n	8019f96 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019f76:	1cfb      	adds	r3, r7, #3
 8019f78:	781b      	ldrb	r3, [r3, #0]
 8019f7a:	2207      	movs	r2, #7
 8019f7c:	4013      	ands	r3, r2
 8019f7e:	1c5a      	adds	r2, r3, #1
 8019f80:	0013      	movs	r3, r2
 8019f82:	009b      	lsls	r3, r3, #2
 8019f84:	189b      	adds	r3, r3, r2
 8019f86:	00db      	lsls	r3, r3, #3
 8019f88:	687a      	ldr	r2, [r7, #4]
 8019f8a:	18d3      	adds	r3, r2, r3
 8019f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	2201      	movs	r2, #1
 8019f92:	705a      	strb	r2, [r3, #1]
 8019f94:	e00d      	b.n	8019fb2 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019f96:	1cfb      	adds	r3, r7, #3
 8019f98:	781a      	ldrb	r2, [r3, #0]
 8019f9a:	0013      	movs	r3, r2
 8019f9c:	009b      	lsls	r3, r3, #2
 8019f9e:	189b      	adds	r3, r3, r2
 8019fa0:	00db      	lsls	r3, r3, #3
 8019fa2:	3369      	adds	r3, #105	@ 0x69
 8019fa4:	33ff      	adds	r3, #255	@ 0xff
 8019fa6:	687a      	ldr	r2, [r7, #4]
 8019fa8:	18d3      	adds	r3, r2, r3
 8019faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	2201      	movs	r2, #1
 8019fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019fb8:	1cfb      	adds	r3, r7, #3
 8019fba:	781b      	ldrb	r3, [r3, #0]
 8019fbc:	2207      	movs	r2, #7
 8019fbe:	4013      	ands	r3, r2
 8019fc0:	b2da      	uxtb	r2, r3
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019fc6:	687a      	ldr	r2, [r7, #4]
 8019fc8:	23aa      	movs	r3, #170	@ 0xaa
 8019fca:	009b      	lsls	r3, r3, #2
 8019fcc:	5cd3      	ldrb	r3, [r2, r3]
 8019fce:	2b01      	cmp	r3, #1
 8019fd0:	d101      	bne.n	8019fd6 <HAL_PCD_EP_SetStall+0x8c>
 8019fd2:	2302      	movs	r3, #2
 8019fd4:	e011      	b.n	8019ffa <HAL_PCD_EP_SetStall+0xb0>
 8019fd6:	687a      	ldr	r2, [r7, #4]
 8019fd8:	23aa      	movs	r3, #170	@ 0xaa
 8019fda:	009b      	lsls	r3, r3, #2
 8019fdc:	2101      	movs	r1, #1
 8019fde:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	68fa      	ldr	r2, [r7, #12]
 8019fe6:	0011      	movs	r1, r2
 8019fe8:	0018      	movs	r0, r3
 8019fea:	f007 f9e5 	bl	80213b8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019fee:	687a      	ldr	r2, [r7, #4]
 8019ff0:	23aa      	movs	r3, #170	@ 0xaa
 8019ff2:	009b      	lsls	r3, r3, #2
 8019ff4:	2100      	movs	r1, #0
 8019ff6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019ff8:	2300      	movs	r3, #0
}
 8019ffa:	0018      	movs	r0, r3
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	b004      	add	sp, #16
 801a000:	bd80      	pop	{r7, pc}

0801a002 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a002:	b580      	push	{r7, lr}
 801a004:	b084      	sub	sp, #16
 801a006:	af00      	add	r7, sp, #0
 801a008:	6078      	str	r0, [r7, #4]
 801a00a:	000a      	movs	r2, r1
 801a00c:	1cfb      	adds	r3, r7, #3
 801a00e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801a010:	1cfb      	adds	r3, r7, #3
 801a012:	781b      	ldrb	r3, [r3, #0]
 801a014:	220f      	movs	r2, #15
 801a016:	401a      	ands	r2, r3
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	685b      	ldr	r3, [r3, #4]
 801a01c:	429a      	cmp	r2, r3
 801a01e:	d901      	bls.n	801a024 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 801a020:	2301      	movs	r3, #1
 801a022:	e048      	b.n	801a0b6 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a024:	1cfb      	adds	r3, r7, #3
 801a026:	781b      	ldrb	r3, [r3, #0]
 801a028:	b25b      	sxtb	r3, r3
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	da0f      	bge.n	801a04e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a02e:	1cfb      	adds	r3, r7, #3
 801a030:	781b      	ldrb	r3, [r3, #0]
 801a032:	2207      	movs	r2, #7
 801a034:	4013      	ands	r3, r2
 801a036:	1c5a      	adds	r2, r3, #1
 801a038:	0013      	movs	r3, r2
 801a03a:	009b      	lsls	r3, r3, #2
 801a03c:	189b      	adds	r3, r3, r2
 801a03e:	00db      	lsls	r3, r3, #3
 801a040:	687a      	ldr	r2, [r7, #4]
 801a042:	18d3      	adds	r3, r2, r3
 801a044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	2201      	movs	r2, #1
 801a04a:	705a      	strb	r2, [r3, #1]
 801a04c:	e00f      	b.n	801a06e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a04e:	1cfb      	adds	r3, r7, #3
 801a050:	781b      	ldrb	r3, [r3, #0]
 801a052:	2207      	movs	r2, #7
 801a054:	401a      	ands	r2, r3
 801a056:	0013      	movs	r3, r2
 801a058:	009b      	lsls	r3, r3, #2
 801a05a:	189b      	adds	r3, r3, r2
 801a05c:	00db      	lsls	r3, r3, #3
 801a05e:	3369      	adds	r3, #105	@ 0x69
 801a060:	33ff      	adds	r3, #255	@ 0xff
 801a062:	687a      	ldr	r2, [r7, #4]
 801a064:	18d3      	adds	r3, r2, r3
 801a066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	2200      	movs	r2, #0
 801a06c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	2200      	movs	r2, #0
 801a072:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a074:	1cfb      	adds	r3, r7, #3
 801a076:	781b      	ldrb	r3, [r3, #0]
 801a078:	2207      	movs	r2, #7
 801a07a:	4013      	ands	r3, r2
 801a07c:	b2da      	uxtb	r2, r3
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a082:	687a      	ldr	r2, [r7, #4]
 801a084:	23aa      	movs	r3, #170	@ 0xaa
 801a086:	009b      	lsls	r3, r3, #2
 801a088:	5cd3      	ldrb	r3, [r2, r3]
 801a08a:	2b01      	cmp	r3, #1
 801a08c:	d101      	bne.n	801a092 <HAL_PCD_EP_ClrStall+0x90>
 801a08e:	2302      	movs	r3, #2
 801a090:	e011      	b.n	801a0b6 <HAL_PCD_EP_ClrStall+0xb4>
 801a092:	687a      	ldr	r2, [r7, #4]
 801a094:	23aa      	movs	r3, #170	@ 0xaa
 801a096:	009b      	lsls	r3, r3, #2
 801a098:	2101      	movs	r1, #1
 801a09a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	68fa      	ldr	r2, [r7, #12]
 801a0a2:	0011      	movs	r1, r2
 801a0a4:	0018      	movs	r0, r3
 801a0a6:	f007 f9d7 	bl	8021458 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801a0aa:	687a      	ldr	r2, [r7, #4]
 801a0ac:	23aa      	movs	r3, #170	@ 0xaa
 801a0ae:	009b      	lsls	r3, r3, #2
 801a0b0:	2100      	movs	r1, #0
 801a0b2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801a0b4:	2300      	movs	r3, #0
}
 801a0b6:	0018      	movs	r0, r3
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	b004      	add	sp, #16
 801a0bc:	bd80      	pop	{r7, pc}
	...

0801a0c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 801a0c0:	b5b0      	push	{r4, r5, r7, lr}
 801a0c2:	b096      	sub	sp, #88	@ 0x58
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a0c8:	f000 fbec 	bl	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	681a      	ldr	r2, [r3, #0]
 801a0d0:	204e      	movs	r0, #78	@ 0x4e
 801a0d2:	183b      	adds	r3, r7, r0
 801a0d4:	2144      	movs	r1, #68	@ 0x44
 801a0d6:	5a52      	ldrh	r2, [r2, r1]
 801a0d8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801a0da:	183b      	adds	r3, r7, r0
 801a0dc:	881b      	ldrh	r3, [r3, #0]
 801a0de:	b2da      	uxtb	r2, r3
 801a0e0:	244d      	movs	r4, #77	@ 0x4d
 801a0e2:	193b      	adds	r3, r7, r4
 801a0e4:	210f      	movs	r1, #15
 801a0e6:	400a      	ands	r2, r1
 801a0e8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801a0ea:	193b      	adds	r3, r7, r4
 801a0ec:	781b      	ldrb	r3, [r3, #0]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d000      	beq.n	801a0f4 <PCD_EP_ISR_Handler+0x34>
 801a0f2:	e18f      	b.n	801a414 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 801a0f4:	183b      	adds	r3, r7, r0
 801a0f6:	881b      	ldrh	r3, [r3, #0]
 801a0f8:	2210      	movs	r2, #16
 801a0fa:	4013      	ands	r3, r2
 801a0fc:	d155      	bne.n	801a1aa <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	881b      	ldrh	r3, [r3, #0]
 801a104:	b29a      	uxth	r2, r3
 801a106:	200e      	movs	r0, #14
 801a108:	183b      	adds	r3, r7, r0
 801a10a:	49bb      	ldr	r1, [pc, #748]	@ (801a3f8 <PCD_EP_ISR_Handler+0x338>)
 801a10c:	400a      	ands	r2, r1
 801a10e:	801a      	strh	r2, [r3, #0]
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	183a      	adds	r2, r7, r0
 801a116:	8812      	ldrh	r2, [r2, #0]
 801a118:	49b8      	ldr	r1, [pc, #736]	@ (801a3fc <PCD_EP_ISR_Handler+0x33c>)
 801a11a:	430a      	orrs	r2, r1
 801a11c:	b292      	uxth	r2, r2
 801a11e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	3328      	adds	r3, #40	@ 0x28
 801a124:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	2250      	movs	r2, #80	@ 0x50
 801a12c:	5a9b      	ldrh	r3, [r3, r2]
 801a12e:	b29b      	uxth	r3, r3
 801a130:	001a      	movs	r2, r3
 801a132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a134:	781b      	ldrb	r3, [r3, #0]
 801a136:	00db      	lsls	r3, r3, #3
 801a138:	18d2      	adds	r2, r2, r3
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	18d3      	adds	r3, r2, r3
 801a140:	4aaf      	ldr	r2, [pc, #700]	@ (801a400 <PCD_EP_ISR_Handler+0x340>)
 801a142:	4694      	mov	ip, r2
 801a144:	4463      	add	r3, ip
 801a146:	881b      	ldrh	r3, [r3, #0]
 801a148:	059b      	lsls	r3, r3, #22
 801a14a:	0d9a      	lsrs	r2, r3, #22
 801a14c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a14e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 801a150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a152:	695a      	ldr	r2, [r3, #20]
 801a154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a156:	69db      	ldr	r3, [r3, #28]
 801a158:	18d2      	adds	r2, r2, r3
 801a15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a15c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	2100      	movs	r1, #0
 801a162:	0018      	movs	r0, r3
 801a164:	f009 faf4 	bl	8023750 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	2224      	movs	r2, #36	@ 0x24
 801a16c:	5c9b      	ldrb	r3, [r3, r2]
 801a16e:	b2db      	uxtb	r3, r3
 801a170:	2b00      	cmp	r3, #0
 801a172:	d101      	bne.n	801a178 <PCD_EP_ISR_Handler+0xb8>
 801a174:	f000 fb96 	bl	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
 801a178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a17a:	699b      	ldr	r3, [r3, #24]
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d001      	beq.n	801a184 <PCD_EP_ISR_Handler+0xc4>
 801a180:	f000 fb90 	bl	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2224      	movs	r2, #36	@ 0x24
 801a188:	5c9b      	ldrb	r3, [r3, r2]
 801a18a:	b2db      	uxtb	r3, r3
 801a18c:	2280      	movs	r2, #128	@ 0x80
 801a18e:	4252      	negs	r2, r2
 801a190:	4313      	orrs	r3, r2
 801a192:	b2da      	uxtb	r2, r3
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	0011      	movs	r1, r2
 801a19a:	224c      	movs	r2, #76	@ 0x4c
 801a19c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	2224      	movs	r2, #36	@ 0x24
 801a1a2:	2100      	movs	r1, #0
 801a1a4:	5499      	strb	r1, [r3, r2]
 801a1a6:	f000 fb7d 	bl	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	3369      	adds	r3, #105	@ 0x69
 801a1ae:	33ff      	adds	r3, #255	@ 0xff
 801a1b0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681a      	ldr	r2, [r3, #0]
 801a1b6:	214a      	movs	r1, #74	@ 0x4a
 801a1b8:	187b      	adds	r3, r7, r1
 801a1ba:	8812      	ldrh	r2, [r2, #0]
 801a1bc:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801a1be:	187b      	adds	r3, r7, r1
 801a1c0:	881a      	ldrh	r2, [r3, #0]
 801a1c2:	2380      	movs	r3, #128	@ 0x80
 801a1c4:	011b      	lsls	r3, r3, #4
 801a1c6:	4013      	ands	r3, r2
 801a1c8:	d037      	beq.n	801a23a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	2250      	movs	r2, #80	@ 0x50
 801a1d0:	5a9b      	ldrh	r3, [r3, r2]
 801a1d2:	b29b      	uxth	r3, r3
 801a1d4:	001a      	movs	r2, r3
 801a1d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1d8:	781b      	ldrb	r3, [r3, #0]
 801a1da:	00db      	lsls	r3, r3, #3
 801a1dc:	18d2      	adds	r2, r2, r3
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	18d3      	adds	r3, r2, r3
 801a1e4:	4a87      	ldr	r2, [pc, #540]	@ (801a404 <PCD_EP_ISR_Handler+0x344>)
 801a1e6:	4694      	mov	ip, r2
 801a1e8:	4463      	add	r3, ip
 801a1ea:	881b      	ldrh	r3, [r3, #0]
 801a1ec:	059b      	lsls	r3, r3, #22
 801a1ee:	0d9a      	lsrs	r2, r3, #22
 801a1f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	6818      	ldr	r0, [r3, #0]
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	22ac      	movs	r2, #172	@ 0xac
 801a1fc:	0092      	lsls	r2, r2, #2
 801a1fe:	1899      	adds	r1, r3, r2
 801a200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a202:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 801a204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a206:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801a208:	b29b      	uxth	r3, r3
 801a20a:	f007 fa59 	bl	80216c0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	881b      	ldrh	r3, [r3, #0]
 801a214:	b29a      	uxth	r2, r3
 801a216:	2010      	movs	r0, #16
 801a218:	183b      	adds	r3, r7, r0
 801a21a:	497b      	ldr	r1, [pc, #492]	@ (801a408 <PCD_EP_ISR_Handler+0x348>)
 801a21c:	400a      	ands	r2, r1
 801a21e:	801a      	strh	r2, [r3, #0]
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	183a      	adds	r2, r7, r0
 801a226:	8812      	ldrh	r2, [r2, #0]
 801a228:	2180      	movs	r1, #128	@ 0x80
 801a22a:	430a      	orrs	r2, r1
 801a22c:	b292      	uxth	r2, r2
 801a22e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	0018      	movs	r0, r3
 801a234:	f009 fa56 	bl	80236e4 <HAL_PCD_SetupStageCallback>
 801a238:	e334      	b.n	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a23a:	234a      	movs	r3, #74	@ 0x4a
 801a23c:	18fb      	adds	r3, r7, r3
 801a23e:	2200      	movs	r2, #0
 801a240:	5e9b      	ldrsh	r3, [r3, r2]
 801a242:	2b00      	cmp	r3, #0
 801a244:	db00      	blt.n	801a248 <PCD_EP_ISR_Handler+0x188>
 801a246:	e32d      	b.n	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	881b      	ldrh	r3, [r3, #0]
 801a24e:	b29a      	uxth	r2, r3
 801a250:	201e      	movs	r0, #30
 801a252:	183b      	adds	r3, r7, r0
 801a254:	496c      	ldr	r1, [pc, #432]	@ (801a408 <PCD_EP_ISR_Handler+0x348>)
 801a256:	400a      	ands	r2, r1
 801a258:	801a      	strh	r2, [r3, #0]
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	183a      	adds	r2, r7, r0
 801a260:	8812      	ldrh	r2, [r2, #0]
 801a262:	2180      	movs	r1, #128	@ 0x80
 801a264:	430a      	orrs	r2, r1
 801a266:	b292      	uxth	r2, r2
 801a268:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	2250      	movs	r2, #80	@ 0x50
 801a270:	5a9b      	ldrh	r3, [r3, r2]
 801a272:	b29b      	uxth	r3, r3
 801a274:	001a      	movs	r2, r3
 801a276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a278:	781b      	ldrb	r3, [r3, #0]
 801a27a:	00db      	lsls	r3, r3, #3
 801a27c:	18d2      	adds	r2, r2, r3
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	18d3      	adds	r3, r2, r3
 801a284:	4a5f      	ldr	r2, [pc, #380]	@ (801a404 <PCD_EP_ISR_Handler+0x344>)
 801a286:	4694      	mov	ip, r2
 801a288:	4463      	add	r3, ip
 801a28a:	881b      	ldrh	r3, [r3, #0]
 801a28c:	059b      	lsls	r3, r3, #22
 801a28e:	0d9a      	lsrs	r2, r3, #22
 801a290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a292:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801a294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a296:	69db      	ldr	r3, [r3, #28]
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d01a      	beq.n	801a2d2 <PCD_EP_ISR_Handler+0x212>
 801a29c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a29e:	695b      	ldr	r3, [r3, #20]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d016      	beq.n	801a2d2 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	6818      	ldr	r0, [r3, #0]
 801a2a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2aa:	6959      	ldr	r1, [r3, #20]
 801a2ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2ae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801a2b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2b2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801a2b4:	b29b      	uxth	r3, r3
 801a2b6:	f007 fa03 	bl	80216c0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801a2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2bc:	695a      	ldr	r2, [r3, #20]
 801a2be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2c0:	69db      	ldr	r3, [r3, #28]
 801a2c2:	18d2      	adds	r2, r2, r3
 801a2c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2c6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	2100      	movs	r1, #0
 801a2cc:	0018      	movs	r0, r3
 801a2ce:	f009 fa1e 	bl	802370e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681a      	ldr	r2, [r3, #0]
 801a2d6:	214a      	movs	r1, #74	@ 0x4a
 801a2d8:	187b      	adds	r3, r7, r1
 801a2da:	8812      	ldrh	r2, [r2, #0]
 801a2dc:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801a2de:	187b      	adds	r3, r7, r1
 801a2e0:	881a      	ldrh	r2, [r3, #0]
 801a2e2:	2380      	movs	r3, #128	@ 0x80
 801a2e4:	011b      	lsls	r3, r3, #4
 801a2e6:	4013      	ands	r3, r2
 801a2e8:	d000      	beq.n	801a2ec <PCD_EP_ISR_Handler+0x22c>
 801a2ea:	e2db      	b.n	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
 801a2ec:	187b      	adds	r3, r7, r1
 801a2ee:	881a      	ldrh	r2, [r3, #0]
 801a2f0:	23c0      	movs	r3, #192	@ 0xc0
 801a2f2:	019b      	lsls	r3, r3, #6
 801a2f4:	401a      	ands	r2, r3
 801a2f6:	23c0      	movs	r3, #192	@ 0xc0
 801a2f8:	019b      	lsls	r3, r3, #6
 801a2fa:	429a      	cmp	r2, r3
 801a2fc:	d100      	bne.n	801a300 <PCD_EP_ISR_Handler+0x240>
 801a2fe:	e2d1      	b.n	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	61bb      	str	r3, [r7, #24]
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	2250      	movs	r2, #80	@ 0x50
 801a30c:	5a9b      	ldrh	r3, [r3, r2]
 801a30e:	b29b      	uxth	r3, r3
 801a310:	001a      	movs	r2, r3
 801a312:	69bb      	ldr	r3, [r7, #24]
 801a314:	189b      	adds	r3, r3, r2
 801a316:	61bb      	str	r3, [r7, #24]
 801a318:	69bb      	ldr	r3, [r7, #24]
 801a31a:	4a3a      	ldr	r2, [pc, #232]	@ (801a404 <PCD_EP_ISR_Handler+0x344>)
 801a31c:	4694      	mov	ip, r2
 801a31e:	4463      	add	r3, ip
 801a320:	617b      	str	r3, [r7, #20]
 801a322:	697b      	ldr	r3, [r7, #20]
 801a324:	881b      	ldrh	r3, [r3, #0]
 801a326:	b29b      	uxth	r3, r3
 801a328:	059b      	lsls	r3, r3, #22
 801a32a:	0d9b      	lsrs	r3, r3, #22
 801a32c:	b29a      	uxth	r2, r3
 801a32e:	697b      	ldr	r3, [r7, #20]
 801a330:	801a      	strh	r2, [r3, #0]
 801a332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a334:	691b      	ldr	r3, [r3, #16]
 801a336:	2b3e      	cmp	r3, #62	@ 0x3e
 801a338:	d91a      	bls.n	801a370 <PCD_EP_ISR_Handler+0x2b0>
 801a33a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a33c:	691b      	ldr	r3, [r3, #16]
 801a33e:	095b      	lsrs	r3, r3, #5
 801a340:	647b      	str	r3, [r7, #68]	@ 0x44
 801a342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a344:	691b      	ldr	r3, [r3, #16]
 801a346:	221f      	movs	r2, #31
 801a348:	4013      	ands	r3, r2
 801a34a:	d102      	bne.n	801a352 <PCD_EP_ISR_Handler+0x292>
 801a34c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a34e:	3b01      	subs	r3, #1
 801a350:	647b      	str	r3, [r7, #68]	@ 0x44
 801a352:	697b      	ldr	r3, [r7, #20]
 801a354:	881b      	ldrh	r3, [r3, #0]
 801a356:	b29a      	uxth	r2, r3
 801a358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a35a:	b29b      	uxth	r3, r3
 801a35c:	029b      	lsls	r3, r3, #10
 801a35e:	b29b      	uxth	r3, r3
 801a360:	4313      	orrs	r3, r2
 801a362:	b29b      	uxth	r3, r3
 801a364:	4a25      	ldr	r2, [pc, #148]	@ (801a3fc <PCD_EP_ISR_Handler+0x33c>)
 801a366:	4313      	orrs	r3, r2
 801a368:	b29a      	uxth	r2, r3
 801a36a:	697b      	ldr	r3, [r7, #20]
 801a36c:	801a      	strh	r2, [r3, #0]
 801a36e:	e023      	b.n	801a3b8 <PCD_EP_ISR_Handler+0x2f8>
 801a370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a372:	691b      	ldr	r3, [r3, #16]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d108      	bne.n	801a38a <PCD_EP_ISR_Handler+0x2ca>
 801a378:	697b      	ldr	r3, [r7, #20]
 801a37a:	881b      	ldrh	r3, [r3, #0]
 801a37c:	b29b      	uxth	r3, r3
 801a37e:	4a1f      	ldr	r2, [pc, #124]	@ (801a3fc <PCD_EP_ISR_Handler+0x33c>)
 801a380:	4313      	orrs	r3, r2
 801a382:	b29a      	uxth	r2, r3
 801a384:	697b      	ldr	r3, [r7, #20]
 801a386:	801a      	strh	r2, [r3, #0]
 801a388:	e016      	b.n	801a3b8 <PCD_EP_ISR_Handler+0x2f8>
 801a38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a38c:	691b      	ldr	r3, [r3, #16]
 801a38e:	085b      	lsrs	r3, r3, #1
 801a390:	647b      	str	r3, [r7, #68]	@ 0x44
 801a392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a394:	691b      	ldr	r3, [r3, #16]
 801a396:	2201      	movs	r2, #1
 801a398:	4013      	ands	r3, r2
 801a39a:	d002      	beq.n	801a3a2 <PCD_EP_ISR_Handler+0x2e2>
 801a39c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a39e:	3301      	adds	r3, #1
 801a3a0:	647b      	str	r3, [r7, #68]	@ 0x44
 801a3a2:	697b      	ldr	r3, [r7, #20]
 801a3a4:	881b      	ldrh	r3, [r3, #0]
 801a3a6:	b29a      	uxth	r2, r3
 801a3a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3aa:	b29b      	uxth	r3, r3
 801a3ac:	029b      	lsls	r3, r3, #10
 801a3ae:	b29b      	uxth	r3, r3
 801a3b0:	4313      	orrs	r3, r2
 801a3b2:	b29a      	uxth	r2, r3
 801a3b4:	697b      	ldr	r3, [r7, #20]
 801a3b6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	881b      	ldrh	r3, [r3, #0]
 801a3be:	b29a      	uxth	r2, r3
 801a3c0:	2012      	movs	r0, #18
 801a3c2:	183b      	adds	r3, r7, r0
 801a3c4:	4911      	ldr	r1, [pc, #68]	@ (801a40c <PCD_EP_ISR_Handler+0x34c>)
 801a3c6:	400a      	ands	r2, r1
 801a3c8:	801a      	strh	r2, [r3, #0]
 801a3ca:	183b      	adds	r3, r7, r0
 801a3cc:	183a      	adds	r2, r7, r0
 801a3ce:	8812      	ldrh	r2, [r2, #0]
 801a3d0:	2180      	movs	r1, #128	@ 0x80
 801a3d2:	0149      	lsls	r1, r1, #5
 801a3d4:	404a      	eors	r2, r1
 801a3d6:	801a      	strh	r2, [r3, #0]
 801a3d8:	183b      	adds	r3, r7, r0
 801a3da:	183a      	adds	r2, r7, r0
 801a3dc:	8812      	ldrh	r2, [r2, #0]
 801a3de:	2180      	movs	r1, #128	@ 0x80
 801a3e0:	0189      	lsls	r1, r1, #6
 801a3e2:	404a      	eors	r2, r1
 801a3e4:	801a      	strh	r2, [r3, #0]
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	183a      	adds	r2, r7, r0
 801a3ec:	8812      	ldrh	r2, [r2, #0]
 801a3ee:	4908      	ldr	r1, [pc, #32]	@ (801a410 <PCD_EP_ISR_Handler+0x350>)
 801a3f0:	430a      	orrs	r2, r1
 801a3f2:	b292      	uxth	r2, r2
 801a3f4:	801a      	strh	r2, [r3, #0]
 801a3f6:	e255      	b.n	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
 801a3f8:	ffff8f0f 	.word	0xffff8f0f
 801a3fc:	ffff8000 	.word	0xffff8000
 801a400:	00000402 	.word	0x00000402
 801a404:	00000406 	.word	0x00000406
 801a408:	00000f8f 	.word	0x00000f8f
 801a40c:	ffffbf8f 	.word	0xffffbf8f
 801a410:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	001a      	movs	r2, r3
 801a41a:	204d      	movs	r0, #77	@ 0x4d
 801a41c:	183b      	adds	r3, r7, r0
 801a41e:	781b      	ldrb	r3, [r3, #0]
 801a420:	009b      	lsls	r3, r3, #2
 801a422:	18d2      	adds	r2, r2, r3
 801a424:	214a      	movs	r1, #74	@ 0x4a
 801a426:	187b      	adds	r3, r7, r1
 801a428:	8812      	ldrh	r2, [r2, #0]
 801a42a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a42c:	187b      	adds	r3, r7, r1
 801a42e:	2200      	movs	r2, #0
 801a430:	5e9b      	ldrsh	r3, [r3, r2]
 801a432:	2b00      	cmp	r3, #0
 801a434:	db00      	blt.n	801a438 <PCD_EP_ISR_Handler+0x378>
 801a436:	e0fa      	b.n	801a62e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	001a      	movs	r2, r3
 801a43e:	183b      	adds	r3, r7, r0
 801a440:	781b      	ldrb	r3, [r3, #0]
 801a442:	009b      	lsls	r3, r3, #2
 801a444:	18d3      	adds	r3, r2, r3
 801a446:	881b      	ldrh	r3, [r3, #0]
 801a448:	b29a      	uxth	r2, r3
 801a44a:	2448      	movs	r4, #72	@ 0x48
 801a44c:	193b      	adds	r3, r7, r4
 801a44e:	49d1      	ldr	r1, [pc, #836]	@ (801a794 <PCD_EP_ISR_Handler+0x6d4>)
 801a450:	400a      	ands	r2, r1
 801a452:	801a      	strh	r2, [r3, #0]
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	001a      	movs	r2, r3
 801a45a:	183b      	adds	r3, r7, r0
 801a45c:	781b      	ldrb	r3, [r3, #0]
 801a45e:	009b      	lsls	r3, r3, #2
 801a460:	18d3      	adds	r3, r2, r3
 801a462:	193a      	adds	r2, r7, r4
 801a464:	8812      	ldrh	r2, [r2, #0]
 801a466:	2180      	movs	r1, #128	@ 0x80
 801a468:	430a      	orrs	r2, r1
 801a46a:	b292      	uxth	r2, r2
 801a46c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801a46e:	183b      	adds	r3, r7, r0
 801a470:	781a      	ldrb	r2, [r3, #0]
 801a472:	0013      	movs	r3, r2
 801a474:	009b      	lsls	r3, r3, #2
 801a476:	189b      	adds	r3, r3, r2
 801a478:	00db      	lsls	r3, r3, #3
 801a47a:	3369      	adds	r3, #105	@ 0x69
 801a47c:	33ff      	adds	r3, #255	@ 0xff
 801a47e:	687a      	ldr	r2, [r7, #4]
 801a480:	18d3      	adds	r3, r2, r3
 801a482:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801a484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a486:	7b1b      	ldrb	r3, [r3, #12]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d125      	bne.n	801a4d8 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	2250      	movs	r2, #80	@ 0x50
 801a492:	5a9b      	ldrh	r3, [r3, r2]
 801a494:	b29b      	uxth	r3, r3
 801a496:	001a      	movs	r2, r3
 801a498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a49a:	781b      	ldrb	r3, [r3, #0]
 801a49c:	00db      	lsls	r3, r3, #3
 801a49e:	18d2      	adds	r2, r2, r3
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	18d3      	adds	r3, r2, r3
 801a4a6:	4abc      	ldr	r2, [pc, #752]	@ (801a798 <PCD_EP_ISR_Handler+0x6d8>)
 801a4a8:	4694      	mov	ip, r2
 801a4aa:	4463      	add	r3, ip
 801a4ac:	881a      	ldrh	r2, [r3, #0]
 801a4ae:	2450      	movs	r4, #80	@ 0x50
 801a4b0:	193b      	adds	r3, r7, r4
 801a4b2:	0592      	lsls	r2, r2, #22
 801a4b4:	0d92      	lsrs	r2, r2, #22
 801a4b6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801a4b8:	193b      	adds	r3, r7, r4
 801a4ba:	881b      	ldrh	r3, [r3, #0]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d100      	bne.n	801a4c2 <PCD_EP_ISR_Handler+0x402>
 801a4c0:	e08d      	b.n	801a5de <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	6818      	ldr	r0, [r3, #0]
 801a4c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4c8:	6959      	ldr	r1, [r3, #20]
 801a4ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4cc:	88da      	ldrh	r2, [r3, #6]
 801a4ce:	193b      	adds	r3, r7, r4
 801a4d0:	881b      	ldrh	r3, [r3, #0]
 801a4d2:	f007 f8f5 	bl	80216c0 <USB_ReadPMA>
 801a4d6:	e082      	b.n	801a5de <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801a4d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4da:	78db      	ldrb	r3, [r3, #3]
 801a4dc:	2b02      	cmp	r3, #2
 801a4de:	d10c      	bne.n	801a4fa <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801a4e0:	2350      	movs	r3, #80	@ 0x50
 801a4e2:	18fc      	adds	r4, r7, r3
 801a4e4:	234a      	movs	r3, #74	@ 0x4a
 801a4e6:	18fb      	adds	r3, r7, r3
 801a4e8:	881a      	ldrh	r2, [r3, #0]
 801a4ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	0018      	movs	r0, r3
 801a4f0:	f000 f9ec 	bl	801a8cc <HAL_PCD_EP_DB_Receive>
 801a4f4:	0003      	movs	r3, r0
 801a4f6:	8023      	strh	r3, [r4, #0]
 801a4f8:	e071      	b.n	801a5de <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	001a      	movs	r2, r3
 801a500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a502:	781b      	ldrb	r3, [r3, #0]
 801a504:	009b      	lsls	r3, r3, #2
 801a506:	18d3      	adds	r3, r2, r3
 801a508:	881b      	ldrh	r3, [r3, #0]
 801a50a:	b29a      	uxth	r2, r3
 801a50c:	2052      	movs	r0, #82	@ 0x52
 801a50e:	183b      	adds	r3, r7, r0
 801a510:	49a2      	ldr	r1, [pc, #648]	@ (801a79c <PCD_EP_ISR_Handler+0x6dc>)
 801a512:	400a      	ands	r2, r1
 801a514:	801a      	strh	r2, [r3, #0]
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	001a      	movs	r2, r3
 801a51c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a51e:	781b      	ldrb	r3, [r3, #0]
 801a520:	009b      	lsls	r3, r3, #2
 801a522:	18d3      	adds	r3, r2, r3
 801a524:	183a      	adds	r2, r7, r0
 801a526:	8812      	ldrh	r2, [r2, #0]
 801a528:	499d      	ldr	r1, [pc, #628]	@ (801a7a0 <PCD_EP_ISR_Handler+0x6e0>)
 801a52a:	430a      	orrs	r2, r1
 801a52c:	b292      	uxth	r2, r2
 801a52e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	001a      	movs	r2, r3
 801a536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a538:	781b      	ldrb	r3, [r3, #0]
 801a53a:	009b      	lsls	r3, r3, #2
 801a53c:	18d3      	adds	r3, r2, r3
 801a53e:	881b      	ldrh	r3, [r3, #0]
 801a540:	b29b      	uxth	r3, r3
 801a542:	001a      	movs	r2, r3
 801a544:	2380      	movs	r3, #128	@ 0x80
 801a546:	01db      	lsls	r3, r3, #7
 801a548:	4013      	ands	r3, r2
 801a54a:	d024      	beq.n	801a596 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	2250      	movs	r2, #80	@ 0x50
 801a552:	5a9b      	ldrh	r3, [r3, r2]
 801a554:	b29b      	uxth	r3, r3
 801a556:	001a      	movs	r2, r3
 801a558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a55a:	781b      	ldrb	r3, [r3, #0]
 801a55c:	00db      	lsls	r3, r3, #3
 801a55e:	18d2      	adds	r2, r2, r3
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	18d3      	adds	r3, r2, r3
 801a566:	4a8f      	ldr	r2, [pc, #572]	@ (801a7a4 <PCD_EP_ISR_Handler+0x6e4>)
 801a568:	4694      	mov	ip, r2
 801a56a:	4463      	add	r3, ip
 801a56c:	881a      	ldrh	r2, [r3, #0]
 801a56e:	2450      	movs	r4, #80	@ 0x50
 801a570:	193b      	adds	r3, r7, r4
 801a572:	0592      	lsls	r2, r2, #22
 801a574:	0d92      	lsrs	r2, r2, #22
 801a576:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a578:	193b      	adds	r3, r7, r4
 801a57a:	881b      	ldrh	r3, [r3, #0]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d02e      	beq.n	801a5de <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	6818      	ldr	r0, [r3, #0]
 801a584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a586:	6959      	ldr	r1, [r3, #20]
 801a588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a58a:	891a      	ldrh	r2, [r3, #8]
 801a58c:	193b      	adds	r3, r7, r4
 801a58e:	881b      	ldrh	r3, [r3, #0]
 801a590:	f007 f896 	bl	80216c0 <USB_ReadPMA>
 801a594:	e023      	b.n	801a5de <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	2250      	movs	r2, #80	@ 0x50
 801a59c:	5a9b      	ldrh	r3, [r3, r2]
 801a59e:	b29b      	uxth	r3, r3
 801a5a0:	001a      	movs	r2, r3
 801a5a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5a4:	781b      	ldrb	r3, [r3, #0]
 801a5a6:	00db      	lsls	r3, r3, #3
 801a5a8:	18d2      	adds	r2, r2, r3
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	18d3      	adds	r3, r2, r3
 801a5b0:	4a79      	ldr	r2, [pc, #484]	@ (801a798 <PCD_EP_ISR_Handler+0x6d8>)
 801a5b2:	4694      	mov	ip, r2
 801a5b4:	4463      	add	r3, ip
 801a5b6:	881a      	ldrh	r2, [r3, #0]
 801a5b8:	2450      	movs	r4, #80	@ 0x50
 801a5ba:	193b      	adds	r3, r7, r4
 801a5bc:	0592      	lsls	r2, r2, #22
 801a5be:	0d92      	lsrs	r2, r2, #22
 801a5c0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a5c2:	193b      	adds	r3, r7, r4
 801a5c4:	881b      	ldrh	r3, [r3, #0]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d009      	beq.n	801a5de <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	6818      	ldr	r0, [r3, #0]
 801a5ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5d0:	6959      	ldr	r1, [r3, #20]
 801a5d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5d4:	895a      	ldrh	r2, [r3, #10]
 801a5d6:	193b      	adds	r3, r7, r4
 801a5d8:	881b      	ldrh	r3, [r3, #0]
 801a5da:	f007 f871 	bl	80216c0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801a5de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5e0:	69da      	ldr	r2, [r3, #28]
 801a5e2:	2150      	movs	r1, #80	@ 0x50
 801a5e4:	187b      	adds	r3, r7, r1
 801a5e6:	881b      	ldrh	r3, [r3, #0]
 801a5e8:	18d2      	adds	r2, r2, r3
 801a5ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801a5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5f0:	695a      	ldr	r2, [r3, #20]
 801a5f2:	187b      	adds	r3, r7, r1
 801a5f4:	881b      	ldrh	r3, [r3, #0]
 801a5f6:	18d2      	adds	r2, r2, r3
 801a5f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801a5fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5fe:	699b      	ldr	r3, [r3, #24]
 801a600:	2b00      	cmp	r3, #0
 801a602:	d005      	beq.n	801a610 <PCD_EP_ISR_Handler+0x550>
 801a604:	187b      	adds	r3, r7, r1
 801a606:	881a      	ldrh	r2, [r3, #0]
 801a608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a60a:	691b      	ldr	r3, [r3, #16]
 801a60c:	429a      	cmp	r2, r3
 801a60e:	d207      	bcs.n	801a620 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801a610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a612:	781a      	ldrb	r2, [r3, #0]
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	0011      	movs	r1, r2
 801a618:	0018      	movs	r0, r3
 801a61a:	f009 f878 	bl	802370e <HAL_PCD_DataOutStageCallback>
 801a61e:	e006      	b.n	801a62e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a626:	0011      	movs	r1, r2
 801a628:	0018      	movs	r0, r3
 801a62a:	f005 fd8d 	bl	8020148 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801a62e:	244a      	movs	r4, #74	@ 0x4a
 801a630:	193b      	adds	r3, r7, r4
 801a632:	881b      	ldrh	r3, [r3, #0]
 801a634:	2280      	movs	r2, #128	@ 0x80
 801a636:	4013      	ands	r3, r2
 801a638:	d100      	bne.n	801a63c <PCD_EP_ISR_Handler+0x57c>
 801a63a:	e133      	b.n	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801a63c:	204d      	movs	r0, #77	@ 0x4d
 801a63e:	183b      	adds	r3, r7, r0
 801a640:	781b      	ldrb	r3, [r3, #0]
 801a642:	1c5a      	adds	r2, r3, #1
 801a644:	0013      	movs	r3, r2
 801a646:	009b      	lsls	r3, r3, #2
 801a648:	189b      	adds	r3, r3, r2
 801a64a:	00db      	lsls	r3, r3, #3
 801a64c:	687a      	ldr	r2, [r7, #4]
 801a64e:	18d3      	adds	r3, r2, r3
 801a650:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	001a      	movs	r2, r3
 801a658:	183b      	adds	r3, r7, r0
 801a65a:	781b      	ldrb	r3, [r3, #0]
 801a65c:	009b      	lsls	r3, r3, #2
 801a65e:	18d3      	adds	r3, r2, r3
 801a660:	881b      	ldrh	r3, [r3, #0]
 801a662:	b29a      	uxth	r2, r3
 801a664:	2542      	movs	r5, #66	@ 0x42
 801a666:	197b      	adds	r3, r7, r5
 801a668:	494f      	ldr	r1, [pc, #316]	@ (801a7a8 <PCD_EP_ISR_Handler+0x6e8>)
 801a66a:	400a      	ands	r2, r1
 801a66c:	801a      	strh	r2, [r3, #0]
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	001a      	movs	r2, r3
 801a674:	183b      	adds	r3, r7, r0
 801a676:	781b      	ldrb	r3, [r3, #0]
 801a678:	009b      	lsls	r3, r3, #2
 801a67a:	18d3      	adds	r3, r2, r3
 801a67c:	197a      	adds	r2, r7, r5
 801a67e:	8812      	ldrh	r2, [r2, #0]
 801a680:	494a      	ldr	r1, [pc, #296]	@ (801a7ac <PCD_EP_ISR_Handler+0x6ec>)
 801a682:	430a      	orrs	r2, r1
 801a684:	b292      	uxth	r2, r2
 801a686:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801a688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a68a:	78db      	ldrb	r3, [r3, #3]
 801a68c:	2b01      	cmp	r3, #1
 801a68e:	d000      	beq.n	801a692 <PCD_EP_ISR_Handler+0x5d2>
 801a690:	e0af      	b.n	801a7f2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801a692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a694:	2200      	movs	r2, #0
 801a696:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801a698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a69a:	7b1b      	ldrb	r3, [r3, #12]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d100      	bne.n	801a6a2 <PCD_EP_ISR_Handler+0x5e2>
 801a6a0:	e09f      	b.n	801a7e2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a6a2:	193b      	adds	r3, r7, r4
 801a6a4:	881b      	ldrh	r3, [r3, #0]
 801a6a6:	2240      	movs	r2, #64	@ 0x40
 801a6a8:	4013      	ands	r3, r2
 801a6aa:	d046      	beq.n	801a73a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a6ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6ae:	785b      	ldrb	r3, [r3, #1]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d125      	bne.n	801a700 <PCD_EP_ISR_Handler+0x640>
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	2250      	movs	r2, #80	@ 0x50
 801a6c0:	5a9b      	ldrh	r3, [r3, r2]
 801a6c2:	b29b      	uxth	r3, r3
 801a6c4:	001a      	movs	r2, r3
 801a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6c8:	189b      	adds	r3, r3, r2
 801a6ca:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6ce:	781b      	ldrb	r3, [r3, #0]
 801a6d0:	00da      	lsls	r2, r3, #3
 801a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6d4:	18d3      	adds	r3, r2, r3
 801a6d6:	4a33      	ldr	r2, [pc, #204]	@ (801a7a4 <PCD_EP_ISR_Handler+0x6e4>)
 801a6d8:	4694      	mov	ip, r2
 801a6da:	4463      	add	r3, ip
 801a6dc:	623b      	str	r3, [r7, #32]
 801a6de:	6a3b      	ldr	r3, [r7, #32]
 801a6e0:	881b      	ldrh	r3, [r3, #0]
 801a6e2:	b29b      	uxth	r3, r3
 801a6e4:	059b      	lsls	r3, r3, #22
 801a6e6:	0d9b      	lsrs	r3, r3, #22
 801a6e8:	b29a      	uxth	r2, r3
 801a6ea:	6a3b      	ldr	r3, [r7, #32]
 801a6ec:	801a      	strh	r2, [r3, #0]
 801a6ee:	6a3b      	ldr	r3, [r7, #32]
 801a6f0:	881b      	ldrh	r3, [r3, #0]
 801a6f2:	b29b      	uxth	r3, r3
 801a6f4:	4a2d      	ldr	r2, [pc, #180]	@ (801a7ac <PCD_EP_ISR_Handler+0x6ec>)
 801a6f6:	4313      	orrs	r3, r2
 801a6f8:	b29a      	uxth	r2, r3
 801a6fa:	6a3b      	ldr	r3, [r7, #32]
 801a6fc:	801a      	strh	r2, [r3, #0]
 801a6fe:	e070      	b.n	801a7e2 <PCD_EP_ISR_Handler+0x722>
 801a700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a702:	785b      	ldrb	r3, [r3, #1]
 801a704:	2b01      	cmp	r3, #1
 801a706:	d16c      	bne.n	801a7e2 <PCD_EP_ISR_Handler+0x722>
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	2250      	movs	r2, #80	@ 0x50
 801a714:	5a9b      	ldrh	r3, [r3, r2]
 801a716:	b29b      	uxth	r3, r3
 801a718:	001a      	movs	r2, r3
 801a71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a71c:	189b      	adds	r3, r3, r2
 801a71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a722:	781b      	ldrb	r3, [r3, #0]
 801a724:	00da      	lsls	r2, r3, #3
 801a726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a728:	18d3      	adds	r3, r2, r3
 801a72a:	4a1e      	ldr	r2, [pc, #120]	@ (801a7a4 <PCD_EP_ISR_Handler+0x6e4>)
 801a72c:	4694      	mov	ip, r2
 801a72e:	4463      	add	r3, ip
 801a730:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a734:	2200      	movs	r2, #0
 801a736:	801a      	strh	r2, [r3, #0]
 801a738:	e053      	b.n	801a7e2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a742:	785b      	ldrb	r3, [r3, #1]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d133      	bne.n	801a7b0 <PCD_EP_ISR_Handler+0x6f0>
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	2250      	movs	r2, #80	@ 0x50
 801a754:	5a9b      	ldrh	r3, [r3, r2]
 801a756:	b29b      	uxth	r3, r3
 801a758:	001a      	movs	r2, r3
 801a75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a75c:	189b      	adds	r3, r3, r2
 801a75e:	637b      	str	r3, [r7, #52]	@ 0x34
 801a760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a762:	781b      	ldrb	r3, [r3, #0]
 801a764:	00da      	lsls	r2, r3, #3
 801a766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a768:	18d3      	adds	r3, r2, r3
 801a76a:	4a0b      	ldr	r2, [pc, #44]	@ (801a798 <PCD_EP_ISR_Handler+0x6d8>)
 801a76c:	4694      	mov	ip, r2
 801a76e:	4463      	add	r3, ip
 801a770:	633b      	str	r3, [r7, #48]	@ 0x30
 801a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a774:	881b      	ldrh	r3, [r3, #0]
 801a776:	b29b      	uxth	r3, r3
 801a778:	059b      	lsls	r3, r3, #22
 801a77a:	0d9b      	lsrs	r3, r3, #22
 801a77c:	b29a      	uxth	r2, r3
 801a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a780:	801a      	strh	r2, [r3, #0]
 801a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a784:	881b      	ldrh	r3, [r3, #0]
 801a786:	b29b      	uxth	r3, r3
 801a788:	4a08      	ldr	r2, [pc, #32]	@ (801a7ac <PCD_EP_ISR_Handler+0x6ec>)
 801a78a:	4313      	orrs	r3, r2
 801a78c:	b29a      	uxth	r2, r3
 801a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a790:	801a      	strh	r2, [r3, #0]
 801a792:	e026      	b.n	801a7e2 <PCD_EP_ISR_Handler+0x722>
 801a794:	00000f8f 	.word	0x00000f8f
 801a798:	00000406 	.word	0x00000406
 801a79c:	ffff8f8f 	.word	0xffff8f8f
 801a7a0:	ffff80c0 	.word	0xffff80c0
 801a7a4:	00000402 	.word	0x00000402
 801a7a8:	ffff8f0f 	.word	0xffff8f0f
 801a7ac:	ffff8000 	.word	0xffff8000
 801a7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a7b2:	785b      	ldrb	r3, [r3, #1]
 801a7b4:	2b01      	cmp	r3, #1
 801a7b6:	d114      	bne.n	801a7e2 <PCD_EP_ISR_Handler+0x722>
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	2250      	movs	r2, #80	@ 0x50
 801a7be:	5a9b      	ldrh	r3, [r3, r2]
 801a7c0:	b29b      	uxth	r3, r3
 801a7c2:	001a      	movs	r2, r3
 801a7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a7c6:	189b      	adds	r3, r3, r2
 801a7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a7ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a7cc:	781b      	ldrb	r3, [r3, #0]
 801a7ce:	00da      	lsls	r2, r3, #3
 801a7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a7d2:	18d3      	adds	r3, r2, r3
 801a7d4:	4a3b      	ldr	r2, [pc, #236]	@ (801a8c4 <PCD_EP_ISR_Handler+0x804>)
 801a7d6:	4694      	mov	ip, r2
 801a7d8:	4463      	add	r3, ip
 801a7da:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a7de:	2200      	movs	r2, #0
 801a7e0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a7e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a7e4:	781a      	ldrb	r2, [r3, #0]
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	0011      	movs	r1, r2
 801a7ea:	0018      	movs	r0, r3
 801a7ec:	f008 ffb0 	bl	8023750 <HAL_PCD_DataInStageCallback>
 801a7f0:	e058      	b.n	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a7f2:	234a      	movs	r3, #74	@ 0x4a
 801a7f4:	18fb      	adds	r3, r7, r3
 801a7f6:	881a      	ldrh	r2, [r3, #0]
 801a7f8:	2380      	movs	r3, #128	@ 0x80
 801a7fa:	005b      	lsls	r3, r3, #1
 801a7fc:	4013      	ands	r3, r2
 801a7fe:	d149      	bne.n	801a894 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	2250      	movs	r2, #80	@ 0x50
 801a806:	5a9b      	ldrh	r3, [r3, r2]
 801a808:	b29b      	uxth	r3, r3
 801a80a:	001a      	movs	r2, r3
 801a80c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a80e:	781b      	ldrb	r3, [r3, #0]
 801a810:	00db      	lsls	r3, r3, #3
 801a812:	18d2      	adds	r2, r2, r3
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	18d3      	adds	r3, r2, r3
 801a81a:	4a2b      	ldr	r2, [pc, #172]	@ (801a8c8 <PCD_EP_ISR_Handler+0x808>)
 801a81c:	4694      	mov	ip, r2
 801a81e:	4463      	add	r3, ip
 801a820:	881a      	ldrh	r2, [r3, #0]
 801a822:	2140      	movs	r1, #64	@ 0x40
 801a824:	187b      	adds	r3, r7, r1
 801a826:	0592      	lsls	r2, r2, #22
 801a828:	0d92      	lsrs	r2, r2, #22
 801a82a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a82c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a82e:	699a      	ldr	r2, [r3, #24]
 801a830:	187b      	adds	r3, r7, r1
 801a832:	881b      	ldrh	r3, [r3, #0]
 801a834:	429a      	cmp	r2, r3
 801a836:	d907      	bls.n	801a848 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a83a:	699a      	ldr	r2, [r3, #24]
 801a83c:	187b      	adds	r3, r7, r1
 801a83e:	881b      	ldrh	r3, [r3, #0]
 801a840:	1ad2      	subs	r2, r2, r3
 801a842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a844:	619a      	str	r2, [r3, #24]
 801a846:	e002      	b.n	801a84e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a84a:	2200      	movs	r2, #0
 801a84c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a84e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a850:	699b      	ldr	r3, [r3, #24]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d107      	bne.n	801a866 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a858:	781a      	ldrb	r2, [r3, #0]
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	0011      	movs	r1, r2
 801a85e:	0018      	movs	r0, r3
 801a860:	f008 ff76 	bl	8023750 <HAL_PCD_DataInStageCallback>
 801a864:	e01e      	b.n	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a868:	695a      	ldr	r2, [r3, #20]
 801a86a:	2140      	movs	r1, #64	@ 0x40
 801a86c:	187b      	adds	r3, r7, r1
 801a86e:	881b      	ldrh	r3, [r3, #0]
 801a870:	18d2      	adds	r2, r2, r3
 801a872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a874:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a878:	69da      	ldr	r2, [r3, #28]
 801a87a:	187b      	adds	r3, r7, r1
 801a87c:	881b      	ldrh	r3, [r3, #0]
 801a87e:	18d2      	adds	r2, r2, r3
 801a880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a882:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a88a:	0011      	movs	r1, r2
 801a88c:	0018      	movs	r0, r3
 801a88e:	f005 fc5b 	bl	8020148 <USB_EPStartXfer>
 801a892:	e007      	b.n	801a8a4 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a894:	234a      	movs	r3, #74	@ 0x4a
 801a896:	18fb      	adds	r3, r7, r3
 801a898:	881a      	ldrh	r2, [r3, #0]
 801a89a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	0018      	movs	r0, r3
 801a8a0:	f000 f930 	bl	801ab04 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	2244      	movs	r2, #68	@ 0x44
 801a8aa:	5a9b      	ldrh	r3, [r3, r2]
 801a8ac:	b29b      	uxth	r3, r3
 801a8ae:	b21b      	sxth	r3, r3
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	da01      	bge.n	801a8b8 <PCD_EP_ISR_Handler+0x7f8>
 801a8b4:	f7ff fc0a 	bl	801a0cc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a8b8:	2300      	movs	r3, #0
}
 801a8ba:	0018      	movs	r0, r3
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	b016      	add	sp, #88	@ 0x58
 801a8c0:	bdb0      	pop	{r4, r5, r7, pc}
 801a8c2:	46c0      	nop			@ (mov r8, r8)
 801a8c4:	00000406 	.word	0x00000406
 801a8c8:	00000402 	.word	0x00000402

0801a8cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a8cc:	b590      	push	{r4, r7, lr}
 801a8ce:	b089      	sub	sp, #36	@ 0x24
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	60f8      	str	r0, [r7, #12]
 801a8d4:	60b9      	str	r1, [r7, #8]
 801a8d6:	1dbb      	adds	r3, r7, #6
 801a8d8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a8da:	1dbb      	adds	r3, r7, #6
 801a8dc:	881a      	ldrh	r2, [r3, #0]
 801a8de:	2380      	movs	r3, #128	@ 0x80
 801a8e0:	01db      	lsls	r3, r3, #7
 801a8e2:	4013      	ands	r3, r2
 801a8e4:	d100      	bne.n	801a8e8 <HAL_PCD_EP_DB_Receive+0x1c>
 801a8e6:	e07d      	b.n	801a9e4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	2250      	movs	r2, #80	@ 0x50
 801a8ee:	5a9b      	ldrh	r3, [r3, r2]
 801a8f0:	b29b      	uxth	r3, r3
 801a8f2:	001a      	movs	r2, r3
 801a8f4:	68bb      	ldr	r3, [r7, #8]
 801a8f6:	781b      	ldrb	r3, [r3, #0]
 801a8f8:	00db      	lsls	r3, r3, #3
 801a8fa:	18d2      	adds	r2, r2, r3
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	18d3      	adds	r3, r2, r3
 801a902:	4a7a      	ldr	r2, [pc, #488]	@ (801aaec <HAL_PCD_EP_DB_Receive+0x220>)
 801a904:	4694      	mov	ip, r2
 801a906:	4463      	add	r3, ip
 801a908:	881a      	ldrh	r2, [r3, #0]
 801a90a:	211a      	movs	r1, #26
 801a90c:	187b      	adds	r3, r7, r1
 801a90e:	0592      	lsls	r2, r2, #22
 801a910:	0d92      	lsrs	r2, r2, #22
 801a912:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a914:	68bb      	ldr	r3, [r7, #8]
 801a916:	699a      	ldr	r2, [r3, #24]
 801a918:	187b      	adds	r3, r7, r1
 801a91a:	881b      	ldrh	r3, [r3, #0]
 801a91c:	429a      	cmp	r2, r3
 801a91e:	d307      	bcc.n	801a930 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	699a      	ldr	r2, [r3, #24]
 801a924:	187b      	adds	r3, r7, r1
 801a926:	881b      	ldrh	r3, [r3, #0]
 801a928:	1ad2      	subs	r2, r2, r3
 801a92a:	68bb      	ldr	r3, [r7, #8]
 801a92c:	619a      	str	r2, [r3, #24]
 801a92e:	e002      	b.n	801a936 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a930:	68bb      	ldr	r3, [r7, #8]
 801a932:	2200      	movs	r2, #0
 801a934:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a936:	68bb      	ldr	r3, [r7, #8]
 801a938:	699b      	ldr	r3, [r3, #24]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d121      	bne.n	801a982 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	001a      	movs	r2, r3
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	781b      	ldrb	r3, [r3, #0]
 801a948:	009b      	lsls	r3, r3, #2
 801a94a:	18d3      	adds	r3, r2, r3
 801a94c:	881b      	ldrh	r3, [r3, #0]
 801a94e:	b29a      	uxth	r2, r3
 801a950:	2018      	movs	r0, #24
 801a952:	183b      	adds	r3, r7, r0
 801a954:	4966      	ldr	r1, [pc, #408]	@ (801aaf0 <HAL_PCD_EP_DB_Receive+0x224>)
 801a956:	400a      	ands	r2, r1
 801a958:	801a      	strh	r2, [r3, #0]
 801a95a:	183b      	adds	r3, r7, r0
 801a95c:	183a      	adds	r2, r7, r0
 801a95e:	8812      	ldrh	r2, [r2, #0]
 801a960:	2180      	movs	r1, #128	@ 0x80
 801a962:	0189      	lsls	r1, r1, #6
 801a964:	404a      	eors	r2, r1
 801a966:	801a      	strh	r2, [r3, #0]
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	001a      	movs	r2, r3
 801a96e:	68bb      	ldr	r3, [r7, #8]
 801a970:	781b      	ldrb	r3, [r3, #0]
 801a972:	009b      	lsls	r3, r3, #2
 801a974:	18d3      	adds	r3, r2, r3
 801a976:	183a      	adds	r2, r7, r0
 801a978:	8812      	ldrh	r2, [r2, #0]
 801a97a:	495e      	ldr	r1, [pc, #376]	@ (801aaf4 <HAL_PCD_EP_DB_Receive+0x228>)
 801a97c:	430a      	orrs	r2, r1
 801a97e:	b292      	uxth	r2, r2
 801a980:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a982:	1dbb      	adds	r3, r7, #6
 801a984:	881b      	ldrh	r3, [r3, #0]
 801a986:	2240      	movs	r2, #64	@ 0x40
 801a988:	4013      	ands	r3, r2
 801a98a:	d01a      	beq.n	801a9c2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	001a      	movs	r2, r3
 801a992:	68bb      	ldr	r3, [r7, #8]
 801a994:	781b      	ldrb	r3, [r3, #0]
 801a996:	009b      	lsls	r3, r3, #2
 801a998:	18d3      	adds	r3, r2, r3
 801a99a:	881b      	ldrh	r3, [r3, #0]
 801a99c:	b29a      	uxth	r2, r3
 801a99e:	2016      	movs	r0, #22
 801a9a0:	183b      	adds	r3, r7, r0
 801a9a2:	4955      	ldr	r1, [pc, #340]	@ (801aaf8 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a9a4:	400a      	ands	r2, r1
 801a9a6:	801a      	strh	r2, [r3, #0]
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	001a      	movs	r2, r3
 801a9ae:	68bb      	ldr	r3, [r7, #8]
 801a9b0:	781b      	ldrb	r3, [r3, #0]
 801a9b2:	009b      	lsls	r3, r3, #2
 801a9b4:	18d3      	adds	r3, r2, r3
 801a9b6:	183a      	adds	r2, r7, r0
 801a9b8:	8812      	ldrh	r2, [r2, #0]
 801a9ba:	4950      	ldr	r1, [pc, #320]	@ (801aafc <HAL_PCD_EP_DB_Receive+0x230>)
 801a9bc:	430a      	orrs	r2, r1
 801a9be:	b292      	uxth	r2, r2
 801a9c0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a9c2:	241a      	movs	r4, #26
 801a9c4:	193b      	adds	r3, r7, r4
 801a9c6:	881b      	ldrh	r3, [r3, #0]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d100      	bne.n	801a9ce <HAL_PCD_EP_DB_Receive+0x102>
 801a9cc:	e086      	b.n	801aadc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	6818      	ldr	r0, [r3, #0]
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	6959      	ldr	r1, [r3, #20]
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	891a      	ldrh	r2, [r3, #8]
 801a9da:	193b      	adds	r3, r7, r4
 801a9dc:	881b      	ldrh	r3, [r3, #0]
 801a9de:	f006 fe6f 	bl	80216c0 <USB_ReadPMA>
 801a9e2:	e07b      	b.n	801aadc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	2250      	movs	r2, #80	@ 0x50
 801a9ea:	5a9b      	ldrh	r3, [r3, r2]
 801a9ec:	b29b      	uxth	r3, r3
 801a9ee:	001a      	movs	r2, r3
 801a9f0:	68bb      	ldr	r3, [r7, #8]
 801a9f2:	781b      	ldrb	r3, [r3, #0]
 801a9f4:	00db      	lsls	r3, r3, #3
 801a9f6:	18d2      	adds	r2, r2, r3
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	18d3      	adds	r3, r2, r3
 801a9fe:	4a40      	ldr	r2, [pc, #256]	@ (801ab00 <HAL_PCD_EP_DB_Receive+0x234>)
 801aa00:	4694      	mov	ip, r2
 801aa02:	4463      	add	r3, ip
 801aa04:	881a      	ldrh	r2, [r3, #0]
 801aa06:	211a      	movs	r1, #26
 801aa08:	187b      	adds	r3, r7, r1
 801aa0a:	0592      	lsls	r2, r2, #22
 801aa0c:	0d92      	lsrs	r2, r2, #22
 801aa0e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801aa10:	68bb      	ldr	r3, [r7, #8]
 801aa12:	699a      	ldr	r2, [r3, #24]
 801aa14:	187b      	adds	r3, r7, r1
 801aa16:	881b      	ldrh	r3, [r3, #0]
 801aa18:	429a      	cmp	r2, r3
 801aa1a:	d307      	bcc.n	801aa2c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	699a      	ldr	r2, [r3, #24]
 801aa20:	187b      	adds	r3, r7, r1
 801aa22:	881b      	ldrh	r3, [r3, #0]
 801aa24:	1ad2      	subs	r2, r2, r3
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	619a      	str	r2, [r3, #24]
 801aa2a:	e002      	b.n	801aa32 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	2200      	movs	r2, #0
 801aa30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801aa32:	68bb      	ldr	r3, [r7, #8]
 801aa34:	699b      	ldr	r3, [r3, #24]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d121      	bne.n	801aa7e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	001a      	movs	r2, r3
 801aa40:	68bb      	ldr	r3, [r7, #8]
 801aa42:	781b      	ldrb	r3, [r3, #0]
 801aa44:	009b      	lsls	r3, r3, #2
 801aa46:	18d3      	adds	r3, r2, r3
 801aa48:	881b      	ldrh	r3, [r3, #0]
 801aa4a:	b29a      	uxth	r2, r3
 801aa4c:	201e      	movs	r0, #30
 801aa4e:	183b      	adds	r3, r7, r0
 801aa50:	4927      	ldr	r1, [pc, #156]	@ (801aaf0 <HAL_PCD_EP_DB_Receive+0x224>)
 801aa52:	400a      	ands	r2, r1
 801aa54:	801a      	strh	r2, [r3, #0]
 801aa56:	183b      	adds	r3, r7, r0
 801aa58:	183a      	adds	r2, r7, r0
 801aa5a:	8812      	ldrh	r2, [r2, #0]
 801aa5c:	2180      	movs	r1, #128	@ 0x80
 801aa5e:	0189      	lsls	r1, r1, #6
 801aa60:	404a      	eors	r2, r1
 801aa62:	801a      	strh	r2, [r3, #0]
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	001a      	movs	r2, r3
 801aa6a:	68bb      	ldr	r3, [r7, #8]
 801aa6c:	781b      	ldrb	r3, [r3, #0]
 801aa6e:	009b      	lsls	r3, r3, #2
 801aa70:	18d3      	adds	r3, r2, r3
 801aa72:	183a      	adds	r2, r7, r0
 801aa74:	8812      	ldrh	r2, [r2, #0]
 801aa76:	491f      	ldr	r1, [pc, #124]	@ (801aaf4 <HAL_PCD_EP_DB_Receive+0x228>)
 801aa78:	430a      	orrs	r2, r1
 801aa7a:	b292      	uxth	r2, r2
 801aa7c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801aa7e:	1dbb      	adds	r3, r7, #6
 801aa80:	881b      	ldrh	r3, [r3, #0]
 801aa82:	2240      	movs	r2, #64	@ 0x40
 801aa84:	4013      	ands	r3, r2
 801aa86:	d11a      	bne.n	801aabe <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	001a      	movs	r2, r3
 801aa8e:	68bb      	ldr	r3, [r7, #8]
 801aa90:	781b      	ldrb	r3, [r3, #0]
 801aa92:	009b      	lsls	r3, r3, #2
 801aa94:	18d3      	adds	r3, r2, r3
 801aa96:	881b      	ldrh	r3, [r3, #0]
 801aa98:	b29a      	uxth	r2, r3
 801aa9a:	201c      	movs	r0, #28
 801aa9c:	183b      	adds	r3, r7, r0
 801aa9e:	4916      	ldr	r1, [pc, #88]	@ (801aaf8 <HAL_PCD_EP_DB_Receive+0x22c>)
 801aaa0:	400a      	ands	r2, r1
 801aaa2:	801a      	strh	r2, [r3, #0]
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	001a      	movs	r2, r3
 801aaaa:	68bb      	ldr	r3, [r7, #8]
 801aaac:	781b      	ldrb	r3, [r3, #0]
 801aaae:	009b      	lsls	r3, r3, #2
 801aab0:	18d3      	adds	r3, r2, r3
 801aab2:	183a      	adds	r2, r7, r0
 801aab4:	8812      	ldrh	r2, [r2, #0]
 801aab6:	4911      	ldr	r1, [pc, #68]	@ (801aafc <HAL_PCD_EP_DB_Receive+0x230>)
 801aab8:	430a      	orrs	r2, r1
 801aaba:	b292      	uxth	r2, r2
 801aabc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801aabe:	241a      	movs	r4, #26
 801aac0:	193b      	adds	r3, r7, r4
 801aac2:	881b      	ldrh	r3, [r3, #0]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d009      	beq.n	801aadc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	6818      	ldr	r0, [r3, #0]
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	6959      	ldr	r1, [r3, #20]
 801aad0:	68bb      	ldr	r3, [r7, #8]
 801aad2:	895a      	ldrh	r2, [r3, #10]
 801aad4:	193b      	adds	r3, r7, r4
 801aad6:	881b      	ldrh	r3, [r3, #0]
 801aad8:	f006 fdf2 	bl	80216c0 <USB_ReadPMA>
    }
  }

  return count;
 801aadc:	231a      	movs	r3, #26
 801aade:	18fb      	adds	r3, r7, r3
 801aae0:	881b      	ldrh	r3, [r3, #0]
}
 801aae2:	0018      	movs	r0, r3
 801aae4:	46bd      	mov	sp, r7
 801aae6:	b009      	add	sp, #36	@ 0x24
 801aae8:	bd90      	pop	{r4, r7, pc}
 801aaea:	46c0      	nop			@ (mov r8, r8)
 801aaec:	00000402 	.word	0x00000402
 801aaf0:	ffffbf8f 	.word	0xffffbf8f
 801aaf4:	ffff8080 	.word	0xffff8080
 801aaf8:	ffff8f8f 	.word	0xffff8f8f
 801aafc:	ffff80c0 	.word	0xffff80c0
 801ab00:	00000406 	.word	0x00000406

0801ab04 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b0a4      	sub	sp, #144	@ 0x90
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	60f8      	str	r0, [r7, #12]
 801ab0c:	60b9      	str	r1, [r7, #8]
 801ab0e:	1dbb      	adds	r3, r7, #6
 801ab10:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801ab12:	1dbb      	adds	r3, r7, #6
 801ab14:	881b      	ldrh	r3, [r3, #0]
 801ab16:	2240      	movs	r2, #64	@ 0x40
 801ab18:	4013      	ands	r3, r2
 801ab1a:	d100      	bne.n	801ab1e <HAL_PCD_EP_DB_Transmit+0x1a>
 801ab1c:	e1e4      	b.n	801aee8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	2250      	movs	r2, #80	@ 0x50
 801ab24:	5a9b      	ldrh	r3, [r3, r2]
 801ab26:	b29b      	uxth	r3, r3
 801ab28:	001a      	movs	r2, r3
 801ab2a:	68bb      	ldr	r3, [r7, #8]
 801ab2c:	781b      	ldrb	r3, [r3, #0]
 801ab2e:	00db      	lsls	r3, r3, #3
 801ab30:	18d2      	adds	r2, r2, r3
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	18d3      	adds	r3, r2, r3
 801ab38:	4ad0      	ldr	r2, [pc, #832]	@ (801ae7c <HAL_PCD_EP_DB_Transmit+0x378>)
 801ab3a:	4694      	mov	ip, r2
 801ab3c:	4463      	add	r3, ip
 801ab3e:	881a      	ldrh	r2, [r3, #0]
 801ab40:	2186      	movs	r1, #134	@ 0x86
 801ab42:	187b      	adds	r3, r7, r1
 801ab44:	0592      	lsls	r2, r2, #22
 801ab46:	0d92      	lsrs	r2, r2, #22
 801ab48:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801ab4a:	68bb      	ldr	r3, [r7, #8]
 801ab4c:	699a      	ldr	r2, [r3, #24]
 801ab4e:	187b      	adds	r3, r7, r1
 801ab50:	881b      	ldrh	r3, [r3, #0]
 801ab52:	429a      	cmp	r2, r3
 801ab54:	d907      	bls.n	801ab66 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801ab56:	68bb      	ldr	r3, [r7, #8]
 801ab58:	699a      	ldr	r2, [r3, #24]
 801ab5a:	187b      	adds	r3, r7, r1
 801ab5c:	881b      	ldrh	r3, [r3, #0]
 801ab5e:	1ad2      	subs	r2, r2, r3
 801ab60:	68bb      	ldr	r3, [r7, #8]
 801ab62:	619a      	str	r2, [r3, #24]
 801ab64:	e002      	b.n	801ab6c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801ab66:	68bb      	ldr	r3, [r7, #8]
 801ab68:	2200      	movs	r2, #0
 801ab6a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801ab6c:	68bb      	ldr	r3, [r7, #8]
 801ab6e:	699b      	ldr	r3, [r3, #24]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d000      	beq.n	801ab76 <HAL_PCD_EP_DB_Transmit+0x72>
 801ab74:	e0b5      	b.n	801ace2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ab76:	68bb      	ldr	r3, [r7, #8]
 801ab78:	785b      	ldrb	r3, [r3, #1]
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d125      	bne.n	801abca <HAL_PCD_EP_DB_Transmit+0xc6>
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	2250      	movs	r2, #80	@ 0x50
 801ab8a:	5a9b      	ldrh	r3, [r3, r2]
 801ab8c:	b29b      	uxth	r3, r3
 801ab8e:	001a      	movs	r2, r3
 801ab90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab92:	189b      	adds	r3, r3, r2
 801ab94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ab96:	68bb      	ldr	r3, [r7, #8]
 801ab98:	781b      	ldrb	r3, [r3, #0]
 801ab9a:	00da      	lsls	r2, r3, #3
 801ab9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab9e:	18d3      	adds	r3, r2, r3
 801aba0:	4ab6      	ldr	r2, [pc, #728]	@ (801ae7c <HAL_PCD_EP_DB_Transmit+0x378>)
 801aba2:	4694      	mov	ip, r2
 801aba4:	4463      	add	r3, ip
 801aba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801aba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abaa:	881b      	ldrh	r3, [r3, #0]
 801abac:	b29b      	uxth	r3, r3
 801abae:	059b      	lsls	r3, r3, #22
 801abb0:	0d9b      	lsrs	r3, r3, #22
 801abb2:	b29a      	uxth	r2, r3
 801abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abb6:	801a      	strh	r2, [r3, #0]
 801abb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abba:	881b      	ldrh	r3, [r3, #0]
 801abbc:	b29b      	uxth	r3, r3
 801abbe:	4ab0      	ldr	r2, [pc, #704]	@ (801ae80 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801abc0:	4313      	orrs	r3, r2
 801abc2:	b29a      	uxth	r2, r3
 801abc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abc6:	801a      	strh	r2, [r3, #0]
 801abc8:	e01b      	b.n	801ac02 <HAL_PCD_EP_DB_Transmit+0xfe>
 801abca:	68bb      	ldr	r3, [r7, #8]
 801abcc:	785b      	ldrb	r3, [r3, #1]
 801abce:	2b01      	cmp	r3, #1
 801abd0:	d117      	bne.n	801ac02 <HAL_PCD_EP_DB_Transmit+0xfe>
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	637b      	str	r3, [r7, #52]	@ 0x34
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	2250      	movs	r2, #80	@ 0x50
 801abde:	5a9b      	ldrh	r3, [r3, r2]
 801abe0:	b29b      	uxth	r3, r3
 801abe2:	001a      	movs	r2, r3
 801abe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abe6:	189b      	adds	r3, r3, r2
 801abe8:	637b      	str	r3, [r7, #52]	@ 0x34
 801abea:	68bb      	ldr	r3, [r7, #8]
 801abec:	781b      	ldrb	r3, [r3, #0]
 801abee:	00da      	lsls	r2, r3, #3
 801abf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abf2:	18d3      	adds	r3, r2, r3
 801abf4:	4aa1      	ldr	r2, [pc, #644]	@ (801ae7c <HAL_PCD_EP_DB_Transmit+0x378>)
 801abf6:	4694      	mov	ip, r2
 801abf8:	4463      	add	r3, ip
 801abfa:	633b      	str	r3, [r7, #48]	@ 0x30
 801abfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abfe:	2200      	movs	r2, #0
 801ac00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac08:	68bb      	ldr	r3, [r7, #8]
 801ac0a:	785b      	ldrb	r3, [r3, #1]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d125      	bne.n	801ac5c <HAL_PCD_EP_DB_Transmit+0x158>
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	61fb      	str	r3, [r7, #28]
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	2250      	movs	r2, #80	@ 0x50
 801ac1c:	5a9b      	ldrh	r3, [r3, r2]
 801ac1e:	b29b      	uxth	r3, r3
 801ac20:	001a      	movs	r2, r3
 801ac22:	69fb      	ldr	r3, [r7, #28]
 801ac24:	189b      	adds	r3, r3, r2
 801ac26:	61fb      	str	r3, [r7, #28]
 801ac28:	68bb      	ldr	r3, [r7, #8]
 801ac2a:	781b      	ldrb	r3, [r3, #0]
 801ac2c:	00da      	lsls	r2, r3, #3
 801ac2e:	69fb      	ldr	r3, [r7, #28]
 801ac30:	18d3      	adds	r3, r2, r3
 801ac32:	4a94      	ldr	r2, [pc, #592]	@ (801ae84 <HAL_PCD_EP_DB_Transmit+0x380>)
 801ac34:	4694      	mov	ip, r2
 801ac36:	4463      	add	r3, ip
 801ac38:	61bb      	str	r3, [r7, #24]
 801ac3a:	69bb      	ldr	r3, [r7, #24]
 801ac3c:	881b      	ldrh	r3, [r3, #0]
 801ac3e:	b29b      	uxth	r3, r3
 801ac40:	059b      	lsls	r3, r3, #22
 801ac42:	0d9b      	lsrs	r3, r3, #22
 801ac44:	b29a      	uxth	r2, r3
 801ac46:	69bb      	ldr	r3, [r7, #24]
 801ac48:	801a      	strh	r2, [r3, #0]
 801ac4a:	69bb      	ldr	r3, [r7, #24]
 801ac4c:	881b      	ldrh	r3, [r3, #0]
 801ac4e:	b29b      	uxth	r3, r3
 801ac50:	4a8b      	ldr	r2, [pc, #556]	@ (801ae80 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801ac52:	4313      	orrs	r3, r2
 801ac54:	b29a      	uxth	r2, r3
 801ac56:	69bb      	ldr	r3, [r7, #24]
 801ac58:	801a      	strh	r2, [r3, #0]
 801ac5a:	e018      	b.n	801ac8e <HAL_PCD_EP_DB_Transmit+0x18a>
 801ac5c:	68bb      	ldr	r3, [r7, #8]
 801ac5e:	785b      	ldrb	r3, [r3, #1]
 801ac60:	2b01      	cmp	r3, #1
 801ac62:	d114      	bne.n	801ac8e <HAL_PCD_EP_DB_Transmit+0x18a>
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	2250      	movs	r2, #80	@ 0x50
 801ac6a:	5a9b      	ldrh	r3, [r3, r2]
 801ac6c:	b29b      	uxth	r3, r3
 801ac6e:	001a      	movs	r2, r3
 801ac70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac72:	189b      	adds	r3, r3, r2
 801ac74:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac76:	68bb      	ldr	r3, [r7, #8]
 801ac78:	781b      	ldrb	r3, [r3, #0]
 801ac7a:	00da      	lsls	r2, r3, #3
 801ac7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac7e:	18d3      	adds	r3, r2, r3
 801ac80:	4a80      	ldr	r2, [pc, #512]	@ (801ae84 <HAL_PCD_EP_DB_Transmit+0x380>)
 801ac82:	4694      	mov	ip, r2
 801ac84:	4463      	add	r3, ip
 801ac86:	623b      	str	r3, [r7, #32]
 801ac88:	6a3b      	ldr	r3, [r7, #32]
 801ac8a:	2200      	movs	r2, #0
 801ac8c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801ac8e:	68bb      	ldr	r3, [r7, #8]
 801ac90:	781a      	ldrb	r2, [r3, #0]
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	0011      	movs	r1, r2
 801ac96:	0018      	movs	r0, r3
 801ac98:	f008 fd5a 	bl	8023750 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801ac9c:	1dbb      	adds	r3, r7, #6
 801ac9e:	881a      	ldrh	r2, [r3, #0]
 801aca0:	2380      	movs	r3, #128	@ 0x80
 801aca2:	01db      	lsls	r3, r3, #7
 801aca4:	4013      	ands	r3, r2
 801aca6:	d100      	bne.n	801acaa <HAL_PCD_EP_DB_Transmit+0x1a6>
 801aca8:	e309      	b.n	801b2be <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	001a      	movs	r2, r3
 801acb0:	68bb      	ldr	r3, [r7, #8]
 801acb2:	781b      	ldrb	r3, [r3, #0]
 801acb4:	009b      	lsls	r3, r3, #2
 801acb6:	18d3      	adds	r3, r2, r3
 801acb8:	881b      	ldrh	r3, [r3, #0]
 801acba:	b29a      	uxth	r2, r3
 801acbc:	2016      	movs	r0, #22
 801acbe:	183b      	adds	r3, r7, r0
 801acc0:	4971      	ldr	r1, [pc, #452]	@ (801ae88 <HAL_PCD_EP_DB_Transmit+0x384>)
 801acc2:	400a      	ands	r2, r1
 801acc4:	801a      	strh	r2, [r3, #0]
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	001a      	movs	r2, r3
 801accc:	68bb      	ldr	r3, [r7, #8]
 801acce:	781b      	ldrb	r3, [r3, #0]
 801acd0:	009b      	lsls	r3, r3, #2
 801acd2:	18d3      	adds	r3, r2, r3
 801acd4:	183a      	adds	r2, r7, r0
 801acd6:	8812      	ldrh	r2, [r2, #0]
 801acd8:	496c      	ldr	r1, [pc, #432]	@ (801ae8c <HAL_PCD_EP_DB_Transmit+0x388>)
 801acda:	430a      	orrs	r2, r1
 801acdc:	b292      	uxth	r2, r2
 801acde:	801a      	strh	r2, [r3, #0]
 801ace0:	e2ed      	b.n	801b2be <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801ace2:	1dbb      	adds	r3, r7, #6
 801ace4:	881a      	ldrh	r2, [r3, #0]
 801ace6:	2380      	movs	r3, #128	@ 0x80
 801ace8:	01db      	lsls	r3, r3, #7
 801acea:	4013      	ands	r3, r2
 801acec:	d01a      	beq.n	801ad24 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	001a      	movs	r2, r3
 801acf4:	68bb      	ldr	r3, [r7, #8]
 801acf6:	781b      	ldrb	r3, [r3, #0]
 801acf8:	009b      	lsls	r3, r3, #2
 801acfa:	18d3      	adds	r3, r2, r3
 801acfc:	881b      	ldrh	r3, [r3, #0]
 801acfe:	b29a      	uxth	r2, r3
 801ad00:	208a      	movs	r0, #138	@ 0x8a
 801ad02:	183b      	adds	r3, r7, r0
 801ad04:	4960      	ldr	r1, [pc, #384]	@ (801ae88 <HAL_PCD_EP_DB_Transmit+0x384>)
 801ad06:	400a      	ands	r2, r1
 801ad08:	801a      	strh	r2, [r3, #0]
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	001a      	movs	r2, r3
 801ad10:	68bb      	ldr	r3, [r7, #8]
 801ad12:	781b      	ldrb	r3, [r3, #0]
 801ad14:	009b      	lsls	r3, r3, #2
 801ad16:	18d3      	adds	r3, r2, r3
 801ad18:	183a      	adds	r2, r7, r0
 801ad1a:	8812      	ldrh	r2, [r2, #0]
 801ad1c:	495b      	ldr	r1, [pc, #364]	@ (801ae8c <HAL_PCD_EP_DB_Transmit+0x388>)
 801ad1e:	430a      	orrs	r2, r1
 801ad20:	b292      	uxth	r2, r2
 801ad22:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801ad24:	68bb      	ldr	r3, [r7, #8]
 801ad26:	2224      	movs	r2, #36	@ 0x24
 801ad28:	5c9b      	ldrb	r3, [r3, r2]
 801ad2a:	2b01      	cmp	r3, #1
 801ad2c:	d000      	beq.n	801ad30 <HAL_PCD_EP_DB_Transmit+0x22c>
 801ad2e:	e2c6      	b.n	801b2be <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801ad30:	68bb      	ldr	r3, [r7, #8]
 801ad32:	695a      	ldr	r2, [r3, #20]
 801ad34:	2186      	movs	r1, #134	@ 0x86
 801ad36:	187b      	adds	r3, r7, r1
 801ad38:	881b      	ldrh	r3, [r3, #0]
 801ad3a:	18d2      	adds	r2, r2, r3
 801ad3c:	68bb      	ldr	r3, [r7, #8]
 801ad3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801ad40:	68bb      	ldr	r3, [r7, #8]
 801ad42:	69da      	ldr	r2, [r3, #28]
 801ad44:	187b      	adds	r3, r7, r1
 801ad46:	881b      	ldrh	r3, [r3, #0]
 801ad48:	18d2      	adds	r2, r2, r3
 801ad4a:	68bb      	ldr	r3, [r7, #8]
 801ad4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801ad4e:	68bb      	ldr	r3, [r7, #8]
 801ad50:	6a1a      	ldr	r2, [r3, #32]
 801ad52:	68bb      	ldr	r3, [r7, #8]
 801ad54:	691b      	ldr	r3, [r3, #16]
 801ad56:	429a      	cmp	r2, r3
 801ad58:	d30c      	bcc.n	801ad74 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801ad5a:	68bb      	ldr	r3, [r7, #8]
 801ad5c:	691b      	ldr	r3, [r3, #16]
 801ad5e:	218c      	movs	r1, #140	@ 0x8c
 801ad60:	187a      	adds	r2, r7, r1
 801ad62:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801ad64:	68bb      	ldr	r3, [r7, #8]
 801ad66:	6a1a      	ldr	r2, [r3, #32]
 801ad68:	187b      	adds	r3, r7, r1
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	1ad2      	subs	r2, r2, r3
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	621a      	str	r2, [r3, #32]
 801ad72:	e01a      	b.n	801adaa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801ad74:	68bb      	ldr	r3, [r7, #8]
 801ad76:	6a1b      	ldr	r3, [r3, #32]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d10a      	bne.n	801ad92 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801ad7c:	2386      	movs	r3, #134	@ 0x86
 801ad7e:	18fb      	adds	r3, r7, r3
 801ad80:	881b      	ldrh	r3, [r3, #0]
 801ad82:	228c      	movs	r2, #140	@ 0x8c
 801ad84:	18ba      	adds	r2, r7, r2
 801ad86:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801ad88:	68bb      	ldr	r3, [r7, #8]
 801ad8a:	2224      	movs	r2, #36	@ 0x24
 801ad8c:	2100      	movs	r1, #0
 801ad8e:	5499      	strb	r1, [r3, r2]
 801ad90:	e00b      	b.n	801adaa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801ad92:	68bb      	ldr	r3, [r7, #8]
 801ad94:	2224      	movs	r2, #36	@ 0x24
 801ad96:	2100      	movs	r1, #0
 801ad98:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	6a1b      	ldr	r3, [r3, #32]
 801ad9e:	228c      	movs	r2, #140	@ 0x8c
 801ada0:	18ba      	adds	r2, r7, r2
 801ada2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801ada4:	68bb      	ldr	r3, [r7, #8]
 801ada6:	2200      	movs	r2, #0
 801ada8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801adaa:	68bb      	ldr	r3, [r7, #8]
 801adac:	785b      	ldrb	r3, [r3, #1]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d000      	beq.n	801adb4 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801adb2:	e06d      	b.n	801ae90 <HAL_PCD_EP_DB_Transmit+0x38c>
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	2250      	movs	r2, #80	@ 0x50
 801adc0:	5a9b      	ldrh	r3, [r3, r2]
 801adc2:	b29b      	uxth	r3, r3
 801adc4:	001a      	movs	r2, r3
 801adc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801adc8:	189b      	adds	r3, r3, r2
 801adca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801adcc:	68bb      	ldr	r3, [r7, #8]
 801adce:	781b      	ldrb	r3, [r3, #0]
 801add0:	00da      	lsls	r2, r3, #3
 801add2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801add4:	18d3      	adds	r3, r2, r3
 801add6:	4a29      	ldr	r2, [pc, #164]	@ (801ae7c <HAL_PCD_EP_DB_Transmit+0x378>)
 801add8:	4694      	mov	ip, r2
 801adda:	4463      	add	r3, ip
 801addc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801adde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ade0:	881b      	ldrh	r3, [r3, #0]
 801ade2:	b29b      	uxth	r3, r3
 801ade4:	059b      	lsls	r3, r3, #22
 801ade6:	0d9b      	lsrs	r3, r3, #22
 801ade8:	b29a      	uxth	r2, r3
 801adea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801adec:	801a      	strh	r2, [r3, #0]
 801adee:	228c      	movs	r2, #140	@ 0x8c
 801adf0:	18bb      	adds	r3, r7, r2
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	2b3e      	cmp	r3, #62	@ 0x3e
 801adf6:	d91a      	bls.n	801ae2e <HAL_PCD_EP_DB_Transmit+0x32a>
 801adf8:	18bb      	adds	r3, r7, r2
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	095b      	lsrs	r3, r3, #5
 801adfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ae00:	18bb      	adds	r3, r7, r2
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	221f      	movs	r2, #31
 801ae06:	4013      	ands	r3, r2
 801ae08:	d102      	bne.n	801ae10 <HAL_PCD_EP_DB_Transmit+0x30c>
 801ae0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ae0c:	3b01      	subs	r3, #1
 801ae0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ae10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae12:	881b      	ldrh	r3, [r3, #0]
 801ae14:	b29a      	uxth	r2, r3
 801ae16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ae18:	b29b      	uxth	r3, r3
 801ae1a:	029b      	lsls	r3, r3, #10
 801ae1c:	b29b      	uxth	r3, r3
 801ae1e:	4313      	orrs	r3, r2
 801ae20:	b29b      	uxth	r3, r3
 801ae22:	4a17      	ldr	r2, [pc, #92]	@ (801ae80 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801ae24:	4313      	orrs	r3, r2
 801ae26:	b29a      	uxth	r2, r3
 801ae28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae2a:	801a      	strh	r2, [r3, #0]
 801ae2c:	e04f      	b.n	801aece <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ae2e:	238c      	movs	r3, #140	@ 0x8c
 801ae30:	18fb      	adds	r3, r7, r3
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d108      	bne.n	801ae4a <HAL_PCD_EP_DB_Transmit+0x346>
 801ae38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae3a:	881b      	ldrh	r3, [r3, #0]
 801ae3c:	b29b      	uxth	r3, r3
 801ae3e:	4a10      	ldr	r2, [pc, #64]	@ (801ae80 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801ae40:	4313      	orrs	r3, r2
 801ae42:	b29a      	uxth	r2, r3
 801ae44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae46:	801a      	strh	r2, [r3, #0]
 801ae48:	e041      	b.n	801aece <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ae4a:	228c      	movs	r2, #140	@ 0x8c
 801ae4c:	18bb      	adds	r3, r7, r2
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	085b      	lsrs	r3, r3, #1
 801ae52:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ae54:	18bb      	adds	r3, r7, r2
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	2201      	movs	r2, #1
 801ae5a:	4013      	ands	r3, r2
 801ae5c:	d002      	beq.n	801ae64 <HAL_PCD_EP_DB_Transmit+0x360>
 801ae5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ae60:	3301      	adds	r3, #1
 801ae62:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ae64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae66:	881b      	ldrh	r3, [r3, #0]
 801ae68:	b29a      	uxth	r2, r3
 801ae6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ae6c:	b29b      	uxth	r3, r3
 801ae6e:	029b      	lsls	r3, r3, #10
 801ae70:	b29b      	uxth	r3, r3
 801ae72:	4313      	orrs	r3, r2
 801ae74:	b29a      	uxth	r2, r3
 801ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae78:	801a      	strh	r2, [r3, #0]
 801ae7a:	e028      	b.n	801aece <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ae7c:	00000402 	.word	0x00000402
 801ae80:	ffff8000 	.word	0xffff8000
 801ae84:	00000406 	.word	0x00000406
 801ae88:	ffff8f8f 	.word	0xffff8f8f
 801ae8c:	ffffc080 	.word	0xffffc080
 801ae90:	68bb      	ldr	r3, [r7, #8]
 801ae92:	785b      	ldrb	r3, [r3, #1]
 801ae94:	2b01      	cmp	r3, #1
 801ae96:	d11a      	bne.n	801aece <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	647b      	str	r3, [r7, #68]	@ 0x44
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	2250      	movs	r2, #80	@ 0x50
 801aea4:	5a9b      	ldrh	r3, [r3, r2]
 801aea6:	b29b      	uxth	r3, r3
 801aea8:	001a      	movs	r2, r3
 801aeaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aeac:	189b      	adds	r3, r3, r2
 801aeae:	647b      	str	r3, [r7, #68]	@ 0x44
 801aeb0:	68bb      	ldr	r3, [r7, #8]
 801aeb2:	781b      	ldrb	r3, [r3, #0]
 801aeb4:	00da      	lsls	r2, r3, #3
 801aeb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aeb8:	18d3      	adds	r3, r2, r3
 801aeba:	4adb      	ldr	r2, [pc, #876]	@ (801b228 <HAL_PCD_EP_DB_Transmit+0x724>)
 801aebc:	4694      	mov	ip, r2
 801aebe:	4463      	add	r3, ip
 801aec0:	643b      	str	r3, [r7, #64]	@ 0x40
 801aec2:	238c      	movs	r3, #140	@ 0x8c
 801aec4:	18fb      	adds	r3, r7, r3
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	b29a      	uxth	r2, r3
 801aeca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aecc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	6818      	ldr	r0, [r3, #0]
 801aed2:	68bb      	ldr	r3, [r7, #8]
 801aed4:	6959      	ldr	r1, [r3, #20]
 801aed6:	68bb      	ldr	r3, [r7, #8]
 801aed8:	891a      	ldrh	r2, [r3, #8]
 801aeda:	238c      	movs	r3, #140	@ 0x8c
 801aedc:	18fb      	adds	r3, r7, r3
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	b29b      	uxth	r3, r3
 801aee2:	f006 fba3 	bl	802162c <USB_WritePMA>
 801aee6:	e1ea      	b.n	801b2be <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	2250      	movs	r2, #80	@ 0x50
 801aeee:	5a9b      	ldrh	r3, [r3, r2]
 801aef0:	b29b      	uxth	r3, r3
 801aef2:	001a      	movs	r2, r3
 801aef4:	68bb      	ldr	r3, [r7, #8]
 801aef6:	781b      	ldrb	r3, [r3, #0]
 801aef8:	00db      	lsls	r3, r3, #3
 801aefa:	18d2      	adds	r2, r2, r3
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	18d3      	adds	r3, r2, r3
 801af02:	4aca      	ldr	r2, [pc, #808]	@ (801b22c <HAL_PCD_EP_DB_Transmit+0x728>)
 801af04:	4694      	mov	ip, r2
 801af06:	4463      	add	r3, ip
 801af08:	881a      	ldrh	r2, [r3, #0]
 801af0a:	2186      	movs	r1, #134	@ 0x86
 801af0c:	187b      	adds	r3, r7, r1
 801af0e:	0592      	lsls	r2, r2, #22
 801af10:	0d92      	lsrs	r2, r2, #22
 801af12:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801af14:	68bb      	ldr	r3, [r7, #8]
 801af16:	699a      	ldr	r2, [r3, #24]
 801af18:	187b      	adds	r3, r7, r1
 801af1a:	881b      	ldrh	r3, [r3, #0]
 801af1c:	429a      	cmp	r2, r3
 801af1e:	d307      	bcc.n	801af30 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801af20:	68bb      	ldr	r3, [r7, #8]
 801af22:	699a      	ldr	r2, [r3, #24]
 801af24:	187b      	adds	r3, r7, r1
 801af26:	881b      	ldrh	r3, [r3, #0]
 801af28:	1ad2      	subs	r2, r2, r3
 801af2a:	68bb      	ldr	r3, [r7, #8]
 801af2c:	619a      	str	r2, [r3, #24]
 801af2e:	e002      	b.n	801af36 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801af30:	68bb      	ldr	r3, [r7, #8]
 801af32:	2200      	movs	r2, #0
 801af34:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801af36:	68bb      	ldr	r3, [r7, #8]
 801af38:	699b      	ldr	r3, [r3, #24]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d000      	beq.n	801af40 <HAL_PCD_EP_DB_Transmit+0x43c>
 801af3e:	e0bb      	b.n	801b0b8 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801af40:	68bb      	ldr	r3, [r7, #8]
 801af42:	785b      	ldrb	r3, [r3, #1]
 801af44:	2b00      	cmp	r3, #0
 801af46:	d125      	bne.n	801af94 <HAL_PCD_EP_DB_Transmit+0x490>
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	2250      	movs	r2, #80	@ 0x50
 801af54:	5a9b      	ldrh	r3, [r3, r2]
 801af56:	b29b      	uxth	r3, r3
 801af58:	001a      	movs	r2, r3
 801af5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801af5c:	189b      	adds	r3, r3, r2
 801af5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801af60:	68bb      	ldr	r3, [r7, #8]
 801af62:	781b      	ldrb	r3, [r3, #0]
 801af64:	00da      	lsls	r2, r3, #3
 801af66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801af68:	18d3      	adds	r3, r2, r3
 801af6a:	4aaf      	ldr	r2, [pc, #700]	@ (801b228 <HAL_PCD_EP_DB_Transmit+0x724>)
 801af6c:	4694      	mov	ip, r2
 801af6e:	4463      	add	r3, ip
 801af70:	67bb      	str	r3, [r7, #120]	@ 0x78
 801af72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801af74:	881b      	ldrh	r3, [r3, #0]
 801af76:	b29b      	uxth	r3, r3
 801af78:	059b      	lsls	r3, r3, #22
 801af7a:	0d9b      	lsrs	r3, r3, #22
 801af7c:	b29a      	uxth	r2, r3
 801af7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801af80:	801a      	strh	r2, [r3, #0]
 801af82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801af84:	881b      	ldrh	r3, [r3, #0]
 801af86:	b29b      	uxth	r3, r3
 801af88:	4aa9      	ldr	r2, [pc, #676]	@ (801b230 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801af8a:	4313      	orrs	r3, r2
 801af8c:	b29a      	uxth	r2, r3
 801af8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801af90:	801a      	strh	r2, [r3, #0]
 801af92:	e01b      	b.n	801afcc <HAL_PCD_EP_DB_Transmit+0x4c8>
 801af94:	68bb      	ldr	r3, [r7, #8]
 801af96:	785b      	ldrb	r3, [r3, #1]
 801af98:	2b01      	cmp	r3, #1
 801af9a:	d117      	bne.n	801afcc <HAL_PCD_EP_DB_Transmit+0x4c8>
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	667b      	str	r3, [r7, #100]	@ 0x64
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	2250      	movs	r2, #80	@ 0x50
 801afa8:	5a9b      	ldrh	r3, [r3, r2]
 801afaa:	b29b      	uxth	r3, r3
 801afac:	001a      	movs	r2, r3
 801afae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801afb0:	189b      	adds	r3, r3, r2
 801afb2:	667b      	str	r3, [r7, #100]	@ 0x64
 801afb4:	68bb      	ldr	r3, [r7, #8]
 801afb6:	781b      	ldrb	r3, [r3, #0]
 801afb8:	00da      	lsls	r2, r3, #3
 801afba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801afbc:	18d3      	adds	r3, r2, r3
 801afbe:	4a9a      	ldr	r2, [pc, #616]	@ (801b228 <HAL_PCD_EP_DB_Transmit+0x724>)
 801afc0:	4694      	mov	ip, r2
 801afc2:	4463      	add	r3, ip
 801afc4:	663b      	str	r3, [r7, #96]	@ 0x60
 801afc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801afc8:	2200      	movs	r2, #0
 801afca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	677b      	str	r3, [r7, #116]	@ 0x74
 801afd2:	68bb      	ldr	r3, [r7, #8]
 801afd4:	785b      	ldrb	r3, [r3, #1]
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d12b      	bne.n	801b032 <HAL_PCD_EP_DB_Transmit+0x52e>
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	2250      	movs	r2, #80	@ 0x50
 801afe6:	5a9b      	ldrh	r3, [r3, r2]
 801afe8:	b29b      	uxth	r3, r3
 801afea:	001a      	movs	r2, r3
 801afec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801afee:	189b      	adds	r3, r3, r2
 801aff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801aff2:	68bb      	ldr	r3, [r7, #8]
 801aff4:	781b      	ldrb	r3, [r3, #0]
 801aff6:	00da      	lsls	r2, r3, #3
 801aff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801affa:	18d3      	adds	r3, r2, r3
 801affc:	4a8b      	ldr	r2, [pc, #556]	@ (801b22c <HAL_PCD_EP_DB_Transmit+0x728>)
 801affe:	4694      	mov	ip, r2
 801b000:	4463      	add	r3, ip
 801b002:	2180      	movs	r1, #128	@ 0x80
 801b004:	187a      	adds	r2, r7, r1
 801b006:	6013      	str	r3, [r2, #0]
 801b008:	187b      	adds	r3, r7, r1
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	881b      	ldrh	r3, [r3, #0]
 801b00e:	b29b      	uxth	r3, r3
 801b010:	059b      	lsls	r3, r3, #22
 801b012:	0d9b      	lsrs	r3, r3, #22
 801b014:	b29a      	uxth	r2, r3
 801b016:	187b      	adds	r3, r7, r1
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	801a      	strh	r2, [r3, #0]
 801b01c:	187b      	adds	r3, r7, r1
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	881b      	ldrh	r3, [r3, #0]
 801b022:	b29b      	uxth	r3, r3
 801b024:	4a82      	ldr	r2, [pc, #520]	@ (801b230 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801b026:	4313      	orrs	r3, r2
 801b028:	b29a      	uxth	r2, r3
 801b02a:	187b      	adds	r3, r7, r1
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	801a      	strh	r2, [r3, #0]
 801b030:	e018      	b.n	801b064 <HAL_PCD_EP_DB_Transmit+0x560>
 801b032:	68bb      	ldr	r3, [r7, #8]
 801b034:	785b      	ldrb	r3, [r3, #1]
 801b036:	2b01      	cmp	r3, #1
 801b038:	d114      	bne.n	801b064 <HAL_PCD_EP_DB_Transmit+0x560>
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	2250      	movs	r2, #80	@ 0x50
 801b040:	5a9b      	ldrh	r3, [r3, r2]
 801b042:	b29b      	uxth	r3, r3
 801b044:	001a      	movs	r2, r3
 801b046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b048:	189b      	adds	r3, r3, r2
 801b04a:	677b      	str	r3, [r7, #116]	@ 0x74
 801b04c:	68bb      	ldr	r3, [r7, #8]
 801b04e:	781b      	ldrb	r3, [r3, #0]
 801b050:	00da      	lsls	r2, r3, #3
 801b052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b054:	18d3      	adds	r3, r2, r3
 801b056:	4a75      	ldr	r2, [pc, #468]	@ (801b22c <HAL_PCD_EP_DB_Transmit+0x728>)
 801b058:	4694      	mov	ip, r2
 801b05a:	4463      	add	r3, ip
 801b05c:	673b      	str	r3, [r7, #112]	@ 0x70
 801b05e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b060:	2200      	movs	r2, #0
 801b062:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801b064:	68bb      	ldr	r3, [r7, #8]
 801b066:	781a      	ldrb	r2, [r3, #0]
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	0011      	movs	r1, r2
 801b06c:	0018      	movs	r0, r3
 801b06e:	f008 fb6f 	bl	8023750 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801b072:	1dbb      	adds	r3, r7, #6
 801b074:	881a      	ldrh	r2, [r3, #0]
 801b076:	2380      	movs	r3, #128	@ 0x80
 801b078:	01db      	lsls	r3, r3, #7
 801b07a:	4013      	ands	r3, r2
 801b07c:	d000      	beq.n	801b080 <HAL_PCD_EP_DB_Transmit+0x57c>
 801b07e:	e11e      	b.n	801b2be <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	001a      	movs	r2, r3
 801b086:	68bb      	ldr	r3, [r7, #8]
 801b088:	781b      	ldrb	r3, [r3, #0]
 801b08a:	009b      	lsls	r3, r3, #2
 801b08c:	18d3      	adds	r3, r2, r3
 801b08e:	881b      	ldrh	r3, [r3, #0]
 801b090:	b29a      	uxth	r2, r3
 801b092:	2088      	movs	r0, #136	@ 0x88
 801b094:	183b      	adds	r3, r7, r0
 801b096:	4967      	ldr	r1, [pc, #412]	@ (801b234 <HAL_PCD_EP_DB_Transmit+0x730>)
 801b098:	400a      	ands	r2, r1
 801b09a:	801a      	strh	r2, [r3, #0]
 801b09c:	68fb      	ldr	r3, [r7, #12]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	001a      	movs	r2, r3
 801b0a2:	68bb      	ldr	r3, [r7, #8]
 801b0a4:	781b      	ldrb	r3, [r3, #0]
 801b0a6:	009b      	lsls	r3, r3, #2
 801b0a8:	18d3      	adds	r3, r2, r3
 801b0aa:	183a      	adds	r2, r7, r0
 801b0ac:	8812      	ldrh	r2, [r2, #0]
 801b0ae:	4962      	ldr	r1, [pc, #392]	@ (801b238 <HAL_PCD_EP_DB_Transmit+0x734>)
 801b0b0:	430a      	orrs	r2, r1
 801b0b2:	b292      	uxth	r2, r2
 801b0b4:	801a      	strh	r2, [r3, #0]
 801b0b6:	e102      	b.n	801b2be <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801b0b8:	1dbb      	adds	r3, r7, #6
 801b0ba:	881a      	ldrh	r2, [r3, #0]
 801b0bc:	2380      	movs	r3, #128	@ 0x80
 801b0be:	01db      	lsls	r3, r3, #7
 801b0c0:	4013      	ands	r3, r2
 801b0c2:	d11a      	bne.n	801b0fa <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	001a      	movs	r2, r3
 801b0ca:	68bb      	ldr	r3, [r7, #8]
 801b0cc:	781b      	ldrb	r3, [r3, #0]
 801b0ce:	009b      	lsls	r3, r3, #2
 801b0d0:	18d3      	adds	r3, r2, r3
 801b0d2:	881b      	ldrh	r3, [r3, #0]
 801b0d4:	b29a      	uxth	r2, r3
 801b0d6:	204e      	movs	r0, #78	@ 0x4e
 801b0d8:	183b      	adds	r3, r7, r0
 801b0da:	4956      	ldr	r1, [pc, #344]	@ (801b234 <HAL_PCD_EP_DB_Transmit+0x730>)
 801b0dc:	400a      	ands	r2, r1
 801b0de:	801a      	strh	r2, [r3, #0]
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	001a      	movs	r2, r3
 801b0e6:	68bb      	ldr	r3, [r7, #8]
 801b0e8:	781b      	ldrb	r3, [r3, #0]
 801b0ea:	009b      	lsls	r3, r3, #2
 801b0ec:	18d3      	adds	r3, r2, r3
 801b0ee:	183a      	adds	r2, r7, r0
 801b0f0:	8812      	ldrh	r2, [r2, #0]
 801b0f2:	4951      	ldr	r1, [pc, #324]	@ (801b238 <HAL_PCD_EP_DB_Transmit+0x734>)
 801b0f4:	430a      	orrs	r2, r1
 801b0f6:	b292      	uxth	r2, r2
 801b0f8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801b0fa:	68bb      	ldr	r3, [r7, #8]
 801b0fc:	2224      	movs	r2, #36	@ 0x24
 801b0fe:	5c9b      	ldrb	r3, [r3, r2]
 801b100:	2b01      	cmp	r3, #1
 801b102:	d000      	beq.n	801b106 <HAL_PCD_EP_DB_Transmit+0x602>
 801b104:	e0db      	b.n	801b2be <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801b106:	68bb      	ldr	r3, [r7, #8]
 801b108:	695a      	ldr	r2, [r3, #20]
 801b10a:	2186      	movs	r1, #134	@ 0x86
 801b10c:	187b      	adds	r3, r7, r1
 801b10e:	881b      	ldrh	r3, [r3, #0]
 801b110:	18d2      	adds	r2, r2, r3
 801b112:	68bb      	ldr	r3, [r7, #8]
 801b114:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801b116:	68bb      	ldr	r3, [r7, #8]
 801b118:	69da      	ldr	r2, [r3, #28]
 801b11a:	187b      	adds	r3, r7, r1
 801b11c:	881b      	ldrh	r3, [r3, #0]
 801b11e:	18d2      	adds	r2, r2, r3
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801b124:	68bb      	ldr	r3, [r7, #8]
 801b126:	6a1a      	ldr	r2, [r3, #32]
 801b128:	68bb      	ldr	r3, [r7, #8]
 801b12a:	691b      	ldr	r3, [r3, #16]
 801b12c:	429a      	cmp	r2, r3
 801b12e:	d30c      	bcc.n	801b14a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801b130:	68bb      	ldr	r3, [r7, #8]
 801b132:	691b      	ldr	r3, [r3, #16]
 801b134:	218c      	movs	r1, #140	@ 0x8c
 801b136:	187a      	adds	r2, r7, r1
 801b138:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801b13a:	68bb      	ldr	r3, [r7, #8]
 801b13c:	6a1a      	ldr	r2, [r3, #32]
 801b13e:	187b      	adds	r3, r7, r1
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	1ad2      	subs	r2, r2, r3
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	621a      	str	r2, [r3, #32]
 801b148:	e01a      	b.n	801b180 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801b14a:	68bb      	ldr	r3, [r7, #8]
 801b14c:	6a1b      	ldr	r3, [r3, #32]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d10a      	bne.n	801b168 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801b152:	2386      	movs	r3, #134	@ 0x86
 801b154:	18fb      	adds	r3, r7, r3
 801b156:	881b      	ldrh	r3, [r3, #0]
 801b158:	228c      	movs	r2, #140	@ 0x8c
 801b15a:	18ba      	adds	r2, r7, r2
 801b15c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801b15e:	68bb      	ldr	r3, [r7, #8]
 801b160:	2224      	movs	r2, #36	@ 0x24
 801b162:	2100      	movs	r1, #0
 801b164:	5499      	strb	r1, [r3, r2]
 801b166:	e00b      	b.n	801b180 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801b168:	68bb      	ldr	r3, [r7, #8]
 801b16a:	6a1b      	ldr	r3, [r3, #32]
 801b16c:	228c      	movs	r2, #140	@ 0x8c
 801b16e:	18ba      	adds	r2, r7, r2
 801b170:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801b172:	68bb      	ldr	r3, [r7, #8]
 801b174:	2200      	movs	r2, #0
 801b176:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801b178:	68bb      	ldr	r3, [r7, #8]
 801b17a:	2224      	movs	r2, #36	@ 0x24
 801b17c:	2100      	movs	r1, #0
 801b17e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801b180:	68fb      	ldr	r3, [r7, #12]
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	657b      	str	r3, [r7, #84]	@ 0x54
 801b186:	68bb      	ldr	r3, [r7, #8]
 801b188:	785b      	ldrb	r3, [r3, #1]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d000      	beq.n	801b190 <HAL_PCD_EP_DB_Transmit+0x68c>
 801b18e:	e06e      	b.n	801b26e <HAL_PCD_EP_DB_Transmit+0x76a>
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b196:	68fb      	ldr	r3, [r7, #12]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	2250      	movs	r2, #80	@ 0x50
 801b19c:	5a9b      	ldrh	r3, [r3, r2]
 801b19e:	b29b      	uxth	r3, r3
 801b1a0:	001a      	movs	r2, r3
 801b1a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b1a4:	189b      	adds	r3, r3, r2
 801b1a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b1a8:	68bb      	ldr	r3, [r7, #8]
 801b1aa:	781b      	ldrb	r3, [r3, #0]
 801b1ac:	00da      	lsls	r2, r3, #3
 801b1ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b1b0:	18d3      	adds	r3, r2, r3
 801b1b2:	4a1e      	ldr	r2, [pc, #120]	@ (801b22c <HAL_PCD_EP_DB_Transmit+0x728>)
 801b1b4:	4694      	mov	ip, r2
 801b1b6:	4463      	add	r3, ip
 801b1b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b1ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b1bc:	881b      	ldrh	r3, [r3, #0]
 801b1be:	b29b      	uxth	r3, r3
 801b1c0:	059b      	lsls	r3, r3, #22
 801b1c2:	0d9b      	lsrs	r3, r3, #22
 801b1c4:	b29a      	uxth	r2, r3
 801b1c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b1c8:	801a      	strh	r2, [r3, #0]
 801b1ca:	228c      	movs	r2, #140	@ 0x8c
 801b1cc:	18bb      	adds	r3, r7, r2
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	2b3e      	cmp	r3, #62	@ 0x3e
 801b1d2:	d91a      	bls.n	801b20a <HAL_PCD_EP_DB_Transmit+0x706>
 801b1d4:	18bb      	adds	r3, r7, r2
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	095b      	lsrs	r3, r3, #5
 801b1da:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b1dc:	18bb      	adds	r3, r7, r2
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	221f      	movs	r2, #31
 801b1e2:	4013      	ands	r3, r2
 801b1e4:	d102      	bne.n	801b1ec <HAL_PCD_EP_DB_Transmit+0x6e8>
 801b1e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b1e8:	3b01      	subs	r3, #1
 801b1ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b1ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b1ee:	881b      	ldrh	r3, [r3, #0]
 801b1f0:	b29a      	uxth	r2, r3
 801b1f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b1f4:	b29b      	uxth	r3, r3
 801b1f6:	029b      	lsls	r3, r3, #10
 801b1f8:	b29b      	uxth	r3, r3
 801b1fa:	4313      	orrs	r3, r2
 801b1fc:	b29b      	uxth	r3, r3
 801b1fe:	4a0c      	ldr	r2, [pc, #48]	@ (801b230 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801b200:	4313      	orrs	r3, r2
 801b202:	b29a      	uxth	r2, r3
 801b204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b206:	801a      	strh	r2, [r3, #0]
 801b208:	e04d      	b.n	801b2a6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b20a:	238c      	movs	r3, #140	@ 0x8c
 801b20c:	18fb      	adds	r3, r7, r3
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	2b00      	cmp	r3, #0
 801b212:	d113      	bne.n	801b23c <HAL_PCD_EP_DB_Transmit+0x738>
 801b214:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b216:	881b      	ldrh	r3, [r3, #0]
 801b218:	b29b      	uxth	r3, r3
 801b21a:	4a05      	ldr	r2, [pc, #20]	@ (801b230 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801b21c:	4313      	orrs	r3, r2
 801b21e:	b29a      	uxth	r2, r3
 801b220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b222:	801a      	strh	r2, [r3, #0]
 801b224:	e03f      	b.n	801b2a6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b226:	46c0      	nop			@ (mov r8, r8)
 801b228:	00000402 	.word	0x00000402
 801b22c:	00000406 	.word	0x00000406
 801b230:	ffff8000 	.word	0xffff8000
 801b234:	ffff8f8f 	.word	0xffff8f8f
 801b238:	ffffc080 	.word	0xffffc080
 801b23c:	228c      	movs	r2, #140	@ 0x8c
 801b23e:	18bb      	adds	r3, r7, r2
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	085b      	lsrs	r3, r3, #1
 801b244:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b246:	18bb      	adds	r3, r7, r2
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	2201      	movs	r2, #1
 801b24c:	4013      	ands	r3, r2
 801b24e:	d002      	beq.n	801b256 <HAL_PCD_EP_DB_Transmit+0x752>
 801b250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b252:	3301      	adds	r3, #1
 801b254:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b256:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b258:	881b      	ldrh	r3, [r3, #0]
 801b25a:	b29a      	uxth	r2, r3
 801b25c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b25e:	b29b      	uxth	r3, r3
 801b260:	029b      	lsls	r3, r3, #10
 801b262:	b29b      	uxth	r3, r3
 801b264:	4313      	orrs	r3, r2
 801b266:	b29a      	uxth	r2, r3
 801b268:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b26a:	801a      	strh	r2, [r3, #0]
 801b26c:	e01b      	b.n	801b2a6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b26e:	68bb      	ldr	r3, [r7, #8]
 801b270:	785b      	ldrb	r3, [r3, #1]
 801b272:	2b01      	cmp	r3, #1
 801b274:	d117      	bne.n	801b2a6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	2250      	movs	r2, #80	@ 0x50
 801b27c:	5a9b      	ldrh	r3, [r3, r2]
 801b27e:	b29b      	uxth	r3, r3
 801b280:	001a      	movs	r2, r3
 801b282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b284:	189b      	adds	r3, r3, r2
 801b286:	657b      	str	r3, [r7, #84]	@ 0x54
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	781b      	ldrb	r3, [r3, #0]
 801b28c:	00da      	lsls	r2, r3, #3
 801b28e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b290:	18d3      	adds	r3, r2, r3
 801b292:	4a21      	ldr	r2, [pc, #132]	@ (801b318 <HAL_PCD_EP_DB_Transmit+0x814>)
 801b294:	4694      	mov	ip, r2
 801b296:	4463      	add	r3, ip
 801b298:	653b      	str	r3, [r7, #80]	@ 0x50
 801b29a:	238c      	movs	r3, #140	@ 0x8c
 801b29c:	18fb      	adds	r3, r7, r3
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	b29a      	uxth	r2, r3
 801b2a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b2a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	6818      	ldr	r0, [r3, #0]
 801b2aa:	68bb      	ldr	r3, [r7, #8]
 801b2ac:	6959      	ldr	r1, [r3, #20]
 801b2ae:	68bb      	ldr	r3, [r7, #8]
 801b2b0:	895a      	ldrh	r2, [r3, #10]
 801b2b2:	238c      	movs	r3, #140	@ 0x8c
 801b2b4:	18fb      	adds	r3, r7, r3
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	b29b      	uxth	r3, r3
 801b2ba:	f006 f9b7 	bl	802162c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	001a      	movs	r2, r3
 801b2c4:	68bb      	ldr	r3, [r7, #8]
 801b2c6:	781b      	ldrb	r3, [r3, #0]
 801b2c8:	009b      	lsls	r3, r3, #2
 801b2ca:	18d3      	adds	r3, r2, r3
 801b2cc:	881b      	ldrh	r3, [r3, #0]
 801b2ce:	b29a      	uxth	r2, r3
 801b2d0:	2014      	movs	r0, #20
 801b2d2:	183b      	adds	r3, r7, r0
 801b2d4:	4911      	ldr	r1, [pc, #68]	@ (801b31c <HAL_PCD_EP_DB_Transmit+0x818>)
 801b2d6:	400a      	ands	r2, r1
 801b2d8:	801a      	strh	r2, [r3, #0]
 801b2da:	183b      	adds	r3, r7, r0
 801b2dc:	183a      	adds	r2, r7, r0
 801b2de:	8812      	ldrh	r2, [r2, #0]
 801b2e0:	2110      	movs	r1, #16
 801b2e2:	404a      	eors	r2, r1
 801b2e4:	801a      	strh	r2, [r3, #0]
 801b2e6:	183b      	adds	r3, r7, r0
 801b2e8:	183a      	adds	r2, r7, r0
 801b2ea:	8812      	ldrh	r2, [r2, #0]
 801b2ec:	2120      	movs	r1, #32
 801b2ee:	404a      	eors	r2, r1
 801b2f0:	801a      	strh	r2, [r3, #0]
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	001a      	movs	r2, r3
 801b2f8:	68bb      	ldr	r3, [r7, #8]
 801b2fa:	781b      	ldrb	r3, [r3, #0]
 801b2fc:	009b      	lsls	r3, r3, #2
 801b2fe:	18d3      	adds	r3, r2, r3
 801b300:	183a      	adds	r2, r7, r0
 801b302:	8812      	ldrh	r2, [r2, #0]
 801b304:	4906      	ldr	r1, [pc, #24]	@ (801b320 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801b306:	430a      	orrs	r2, r1
 801b308:	b292      	uxth	r2, r2
 801b30a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801b30c:	2300      	movs	r3, #0
}
 801b30e:	0018      	movs	r0, r3
 801b310:	46bd      	mov	sp, r7
 801b312:	b024      	add	sp, #144	@ 0x90
 801b314:	bd80      	pop	{r7, pc}
 801b316:	46c0      	nop			@ (mov r8, r8)
 801b318:	00000406 	.word	0x00000406
 801b31c:	ffff8fbf 	.word	0xffff8fbf
 801b320:	ffff8080 	.word	0xffff8080

0801b324 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801b324:	b590      	push	{r4, r7, lr}
 801b326:	b087      	sub	sp, #28
 801b328:	af00      	add	r7, sp, #0
 801b32a:	60f8      	str	r0, [r7, #12]
 801b32c:	0008      	movs	r0, r1
 801b32e:	0011      	movs	r1, r2
 801b330:	607b      	str	r3, [r7, #4]
 801b332:	240a      	movs	r4, #10
 801b334:	193b      	adds	r3, r7, r4
 801b336:	1c02      	adds	r2, r0, #0
 801b338:	801a      	strh	r2, [r3, #0]
 801b33a:	2308      	movs	r3, #8
 801b33c:	18fb      	adds	r3, r7, r3
 801b33e:	1c0a      	adds	r2, r1, #0
 801b340:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801b342:	0021      	movs	r1, r4
 801b344:	187b      	adds	r3, r7, r1
 801b346:	881b      	ldrh	r3, [r3, #0]
 801b348:	2280      	movs	r2, #128	@ 0x80
 801b34a:	4013      	ands	r3, r2
 801b34c:	b29b      	uxth	r3, r3
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d00c      	beq.n	801b36c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b352:	187b      	adds	r3, r7, r1
 801b354:	881b      	ldrh	r3, [r3, #0]
 801b356:	2207      	movs	r2, #7
 801b358:	4013      	ands	r3, r2
 801b35a:	1c5a      	adds	r2, r3, #1
 801b35c:	0013      	movs	r3, r2
 801b35e:	009b      	lsls	r3, r3, #2
 801b360:	189b      	adds	r3, r3, r2
 801b362:	00db      	lsls	r3, r3, #3
 801b364:	68fa      	ldr	r2, [r7, #12]
 801b366:	18d3      	adds	r3, r2, r3
 801b368:	617b      	str	r3, [r7, #20]
 801b36a:	e00b      	b.n	801b384 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b36c:	230a      	movs	r3, #10
 801b36e:	18fb      	adds	r3, r7, r3
 801b370:	881a      	ldrh	r2, [r3, #0]
 801b372:	0013      	movs	r3, r2
 801b374:	009b      	lsls	r3, r3, #2
 801b376:	189b      	adds	r3, r3, r2
 801b378:	00db      	lsls	r3, r3, #3
 801b37a:	3369      	adds	r3, #105	@ 0x69
 801b37c:	33ff      	adds	r3, #255	@ 0xff
 801b37e:	68fa      	ldr	r2, [r7, #12]
 801b380:	18d3      	adds	r3, r2, r3
 801b382:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801b384:	2308      	movs	r3, #8
 801b386:	18fb      	adds	r3, r7, r3
 801b388:	881b      	ldrh	r3, [r3, #0]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d107      	bne.n	801b39e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801b38e:	697b      	ldr	r3, [r7, #20]
 801b390:	2200      	movs	r2, #0
 801b392:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	b29a      	uxth	r2, r3
 801b398:	697b      	ldr	r3, [r7, #20]
 801b39a:	80da      	strh	r2, [r3, #6]
 801b39c:	e00b      	b.n	801b3b6 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801b39e:	697b      	ldr	r3, [r7, #20]
 801b3a0:	2201      	movs	r2, #1
 801b3a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	b29a      	uxth	r2, r3
 801b3a8:	697b      	ldr	r3, [r7, #20]
 801b3aa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	0c1b      	lsrs	r3, r3, #16
 801b3b0:	b29a      	uxth	r2, r3
 801b3b2:	697b      	ldr	r3, [r7, #20]
 801b3b4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801b3b6:	2300      	movs	r3, #0
}
 801b3b8:	0018      	movs	r0, r3
 801b3ba:	46bd      	mov	sp, r7
 801b3bc:	b007      	add	sp, #28
 801b3be:	bd90      	pop	{r4, r7, pc}

0801b3c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b084      	sub	sp, #16
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801b3ce:	687a      	ldr	r2, [r7, #4]
 801b3d0:	23ba      	movs	r3, #186	@ 0xba
 801b3d2:	009b      	lsls	r3, r3, #2
 801b3d4:	2101      	movs	r1, #1
 801b3d6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801b3d8:	687a      	ldr	r2, [r7, #4]
 801b3da:	23b8      	movs	r3, #184	@ 0xb8
 801b3dc:	009b      	lsls	r3, r3, #2
 801b3de:	2100      	movs	r1, #0
 801b3e0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801b3e2:	68fb      	ldr	r3, [r7, #12]
 801b3e4:	2254      	movs	r2, #84	@ 0x54
 801b3e6:	5a9b      	ldrh	r3, [r3, r2]
 801b3e8:	b29b      	uxth	r3, r3
 801b3ea:	2201      	movs	r2, #1
 801b3ec:	4313      	orrs	r3, r2
 801b3ee:	b299      	uxth	r1, r3
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	2254      	movs	r2, #84	@ 0x54
 801b3f4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	2254      	movs	r2, #84	@ 0x54
 801b3fa:	5a9b      	ldrh	r3, [r3, r2]
 801b3fc:	b29b      	uxth	r3, r3
 801b3fe:	2202      	movs	r2, #2
 801b400:	4313      	orrs	r3, r2
 801b402:	b299      	uxth	r1, r3
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	2254      	movs	r2, #84	@ 0x54
 801b408:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b40a:	2300      	movs	r3, #0
}
 801b40c:	0018      	movs	r0, r3
 801b40e:	46bd      	mov	sp, r7
 801b410:	b004      	add	sp, #16
 801b412:	bd80      	pop	{r7, pc}

0801b414 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801b414:	b580      	push	{r7, lr}
 801b416:	b082      	sub	sp, #8
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
 801b41c:	000a      	movs	r2, r1
 801b41e:	1cfb      	adds	r3, r7, #3
 801b420:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801b422:	46c0      	nop			@ (mov r8, r8)
 801b424:	46bd      	mov	sp, r7
 801b426:	b002      	add	sp, #8
 801b428:	bd80      	pop	{r7, pc}
	...

0801b42c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b42c:	b580      	push	{r7, lr}
 801b42e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801b430:	4b04      	ldr	r3, [pc, #16]	@ (801b444 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b432:	681a      	ldr	r2, [r3, #0]
 801b434:	4b03      	ldr	r3, [pc, #12]	@ (801b444 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b436:	2180      	movs	r1, #128	@ 0x80
 801b438:	0049      	lsls	r1, r1, #1
 801b43a:	430a      	orrs	r2, r1
 801b43c:	601a      	str	r2, [r3, #0]
}
 801b43e:	46c0      	nop			@ (mov r8, r8)
 801b440:	46bd      	mov	sp, r7
 801b442:	bd80      	pop	{r7, pc}
 801b444:	40007000 	.word	0x40007000

0801b448 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801b44c:	4b04      	ldr	r3, [pc, #16]	@ (801b460 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b44e:	681a      	ldr	r2, [r3, #0]
 801b450:	4b03      	ldr	r3, [pc, #12]	@ (801b460 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b452:	4904      	ldr	r1, [pc, #16]	@ (801b464 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801b454:	400a      	ands	r2, r1
 801b456:	601a      	str	r2, [r3, #0]
}
 801b458:	46c0      	nop			@ (mov r8, r8)
 801b45a:	46bd      	mov	sp, r7
 801b45c:	bd80      	pop	{r7, pc}
 801b45e:	46c0      	nop			@ (mov r8, r8)
 801b460:	40007000 	.word	0x40007000
 801b464:	fffffeff 	.word	0xfffffeff

0801b468 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801b468:	b580      	push	{r7, lr}
 801b46a:	b086      	sub	sp, #24
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	6078      	str	r0, [r7, #4]
 801b470:	000a      	movs	r2, r1
 801b472:	1cfb      	adds	r3, r7, #3
 801b474:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801b476:	2300      	movs	r3, #0
 801b478:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801b47a:	4b25      	ldr	r3, [pc, #148]	@ (801b510 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b47c:	681a      	ldr	r2, [r3, #0]
 801b47e:	2380      	movs	r3, #128	@ 0x80
 801b480:	009b      	lsls	r3, r3, #2
 801b482:	4013      	ands	r3, r2
 801b484:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801b486:	4b23      	ldr	r3, [pc, #140]	@ (801b514 <HAL_PWR_EnterSTOPMode+0xac>)
 801b488:	6a1b      	ldr	r3, [r3, #32]
 801b48a:	2201      	movs	r2, #1
 801b48c:	4013      	ands	r3, r2
 801b48e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801b490:	693b      	ldr	r3, [r7, #16]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d008      	beq.n	801b4a8 <HAL_PWR_EnterSTOPMode+0x40>
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d005      	beq.n	801b4a8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801b49c:	4b1c      	ldr	r3, [pc, #112]	@ (801b510 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b49e:	681a      	ldr	r2, [r3, #0]
 801b4a0:	4b1b      	ldr	r3, [pc, #108]	@ (801b510 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b4a2:	491d      	ldr	r1, [pc, #116]	@ (801b518 <HAL_PWR_EnterSTOPMode+0xb0>)
 801b4a4:	400a      	ands	r2, r1
 801b4a6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801b4a8:	4b19      	ldr	r3, [pc, #100]	@ (801b510 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801b4ae:	697b      	ldr	r3, [r7, #20]
 801b4b0:	2203      	movs	r2, #3
 801b4b2:	4393      	bics	r3, r2
 801b4b4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801b4b6:	697a      	ldr	r2, [r7, #20]
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	4313      	orrs	r3, r2
 801b4bc:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801b4be:	4b14      	ldr	r3, [pc, #80]	@ (801b510 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b4c0:	697a      	ldr	r2, [r7, #20]
 801b4c2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b4c4:	4b15      	ldr	r3, [pc, #84]	@ (801b51c <HAL_PWR_EnterSTOPMode+0xb4>)
 801b4c6:	691a      	ldr	r2, [r3, #16]
 801b4c8:	4b14      	ldr	r3, [pc, #80]	@ (801b51c <HAL_PWR_EnterSTOPMode+0xb4>)
 801b4ca:	2104      	movs	r1, #4
 801b4cc:	430a      	orrs	r2, r1
 801b4ce:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801b4d0:	1cfb      	adds	r3, r7, #3
 801b4d2:	781b      	ldrb	r3, [r3, #0]
 801b4d4:	2b01      	cmp	r3, #1
 801b4d6:	d101      	bne.n	801b4dc <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801b4d8:	bf30      	wfi
 801b4da:	e002      	b.n	801b4e2 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801b4dc:	bf40      	sev
    __WFE();
 801b4de:	bf20      	wfe
    __WFE();
 801b4e0:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b4e2:	4b0e      	ldr	r3, [pc, #56]	@ (801b51c <HAL_PWR_EnterSTOPMode+0xb4>)
 801b4e4:	691a      	ldr	r2, [r3, #16]
 801b4e6:	4b0d      	ldr	r3, [pc, #52]	@ (801b51c <HAL_PWR_EnterSTOPMode+0xb4>)
 801b4e8:	2104      	movs	r1, #4
 801b4ea:	438a      	bics	r2, r1
 801b4ec:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801b4ee:	693b      	ldr	r3, [r7, #16]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d009      	beq.n	801b508 <HAL_PWR_EnterSTOPMode+0xa0>
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d006      	beq.n	801b508 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801b4fa:	4b05      	ldr	r3, [pc, #20]	@ (801b510 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b4fc:	681a      	ldr	r2, [r3, #0]
 801b4fe:	4b04      	ldr	r3, [pc, #16]	@ (801b510 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b500:	2180      	movs	r1, #128	@ 0x80
 801b502:	0089      	lsls	r1, r1, #2
 801b504:	430a      	orrs	r2, r1
 801b506:	601a      	str	r2, [r3, #0]
  }
}
 801b508:	46c0      	nop			@ (mov r8, r8)
 801b50a:	46bd      	mov	sp, r7
 801b50c:	b006      	add	sp, #24
 801b50e:	bd80      	pop	{r7, pc}
 801b510:	40007000 	.word	0x40007000
 801b514:	40010000 	.word	0x40010000
 801b518:	fffffdff 	.word	0xfffffdff
 801b51c:	e000ed00 	.word	0xe000ed00

0801b520 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801b520:	b580      	push	{r7, lr}
 801b522:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801b524:	4b07      	ldr	r3, [pc, #28]	@ (801b544 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801b526:	681a      	ldr	r2, [r3, #0]
 801b528:	4b06      	ldr	r3, [pc, #24]	@ (801b544 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801b52a:	2102      	movs	r1, #2
 801b52c:	430a      	orrs	r2, r1
 801b52e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b530:	4b05      	ldr	r3, [pc, #20]	@ (801b548 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801b532:	691a      	ldr	r2, [r3, #16]
 801b534:	4b04      	ldr	r3, [pc, #16]	@ (801b548 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801b536:	2104      	movs	r1, #4
 801b538:	430a      	orrs	r2, r1
 801b53a:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801b53c:	bf30      	wfi
}
 801b53e:	46c0      	nop			@ (mov r8, r8)
 801b540:	46bd      	mov	sp, r7
 801b542:	bd80      	pop	{r7, pc}
 801b544:	40007000 	.word	0x40007000
 801b548:	e000ed00 	.word	0xe000ed00

0801b54c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b54c:	b5b0      	push	{r4, r5, r7, lr}
 801b54e:	b08a      	sub	sp, #40	@ 0x28
 801b550:	af00      	add	r7, sp, #0
 801b552:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d102      	bne.n	801b560 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b55a:	2301      	movs	r3, #1
 801b55c:	f000 fbbf 	bl	801bcde <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b560:	4bc9      	ldr	r3, [pc, #804]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b562:	68db      	ldr	r3, [r3, #12]
 801b564:	220c      	movs	r2, #12
 801b566:	4013      	ands	r3, r2
 801b568:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b56a:	4bc7      	ldr	r3, [pc, #796]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b56c:	68da      	ldr	r2, [r3, #12]
 801b56e:	2380      	movs	r3, #128	@ 0x80
 801b570:	025b      	lsls	r3, r3, #9
 801b572:	4013      	ands	r3, r2
 801b574:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	2201      	movs	r2, #1
 801b57c:	4013      	ands	r3, r2
 801b57e:	d100      	bne.n	801b582 <HAL_RCC_OscConfig+0x36>
 801b580:	e07e      	b.n	801b680 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b582:	69fb      	ldr	r3, [r7, #28]
 801b584:	2b08      	cmp	r3, #8
 801b586:	d007      	beq.n	801b598 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b588:	69fb      	ldr	r3, [r7, #28]
 801b58a:	2b0c      	cmp	r3, #12
 801b58c:	d112      	bne.n	801b5b4 <HAL_RCC_OscConfig+0x68>
 801b58e:	69ba      	ldr	r2, [r7, #24]
 801b590:	2380      	movs	r3, #128	@ 0x80
 801b592:	025b      	lsls	r3, r3, #9
 801b594:	429a      	cmp	r2, r3
 801b596:	d10d      	bne.n	801b5b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b598:	4bbb      	ldr	r3, [pc, #748]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b59a:	681a      	ldr	r2, [r3, #0]
 801b59c:	2380      	movs	r3, #128	@ 0x80
 801b59e:	029b      	lsls	r3, r3, #10
 801b5a0:	4013      	ands	r3, r2
 801b5a2:	d100      	bne.n	801b5a6 <HAL_RCC_OscConfig+0x5a>
 801b5a4:	e06b      	b.n	801b67e <HAL_RCC_OscConfig+0x132>
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	685b      	ldr	r3, [r3, #4]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d167      	bne.n	801b67e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801b5ae:	2301      	movs	r3, #1
 801b5b0:	f000 fb95 	bl	801bcde <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	685a      	ldr	r2, [r3, #4]
 801b5b8:	2380      	movs	r3, #128	@ 0x80
 801b5ba:	025b      	lsls	r3, r3, #9
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	d107      	bne.n	801b5d0 <HAL_RCC_OscConfig+0x84>
 801b5c0:	4bb1      	ldr	r3, [pc, #708]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b5c2:	681a      	ldr	r2, [r3, #0]
 801b5c4:	4bb0      	ldr	r3, [pc, #704]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b5c6:	2180      	movs	r1, #128	@ 0x80
 801b5c8:	0249      	lsls	r1, r1, #9
 801b5ca:	430a      	orrs	r2, r1
 801b5cc:	601a      	str	r2, [r3, #0]
 801b5ce:	e027      	b.n	801b620 <HAL_RCC_OscConfig+0xd4>
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	685a      	ldr	r2, [r3, #4]
 801b5d4:	23a0      	movs	r3, #160	@ 0xa0
 801b5d6:	02db      	lsls	r3, r3, #11
 801b5d8:	429a      	cmp	r2, r3
 801b5da:	d10e      	bne.n	801b5fa <HAL_RCC_OscConfig+0xae>
 801b5dc:	4baa      	ldr	r3, [pc, #680]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b5de:	681a      	ldr	r2, [r3, #0]
 801b5e0:	4ba9      	ldr	r3, [pc, #676]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b5e2:	2180      	movs	r1, #128	@ 0x80
 801b5e4:	02c9      	lsls	r1, r1, #11
 801b5e6:	430a      	orrs	r2, r1
 801b5e8:	601a      	str	r2, [r3, #0]
 801b5ea:	4ba7      	ldr	r3, [pc, #668]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b5ec:	681a      	ldr	r2, [r3, #0]
 801b5ee:	4ba6      	ldr	r3, [pc, #664]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b5f0:	2180      	movs	r1, #128	@ 0x80
 801b5f2:	0249      	lsls	r1, r1, #9
 801b5f4:	430a      	orrs	r2, r1
 801b5f6:	601a      	str	r2, [r3, #0]
 801b5f8:	e012      	b.n	801b620 <HAL_RCC_OscConfig+0xd4>
 801b5fa:	4ba3      	ldr	r3, [pc, #652]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b5fc:	681a      	ldr	r2, [r3, #0]
 801b5fe:	4ba2      	ldr	r3, [pc, #648]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b600:	49a2      	ldr	r1, [pc, #648]	@ (801b88c <HAL_RCC_OscConfig+0x340>)
 801b602:	400a      	ands	r2, r1
 801b604:	601a      	str	r2, [r3, #0]
 801b606:	4ba0      	ldr	r3, [pc, #640]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b608:	681a      	ldr	r2, [r3, #0]
 801b60a:	2380      	movs	r3, #128	@ 0x80
 801b60c:	025b      	lsls	r3, r3, #9
 801b60e:	4013      	ands	r3, r2
 801b610:	60fb      	str	r3, [r7, #12]
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	4b9c      	ldr	r3, [pc, #624]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b616:	681a      	ldr	r2, [r3, #0]
 801b618:	4b9b      	ldr	r3, [pc, #620]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b61a:	499d      	ldr	r1, [pc, #628]	@ (801b890 <HAL_RCC_OscConfig+0x344>)
 801b61c:	400a      	ands	r2, r1
 801b61e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	685b      	ldr	r3, [r3, #4]
 801b624:	2b00      	cmp	r3, #0
 801b626:	d015      	beq.n	801b654 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b628:	f7f9 fb54 	bl	8014cd4 <HAL_GetTick>
 801b62c:	0003      	movs	r3, r0
 801b62e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b630:	e009      	b.n	801b646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b632:	f7f9 fb4f 	bl	8014cd4 <HAL_GetTick>
 801b636:	0002      	movs	r2, r0
 801b638:	697b      	ldr	r3, [r7, #20]
 801b63a:	1ad3      	subs	r3, r2, r3
 801b63c:	2b64      	cmp	r3, #100	@ 0x64
 801b63e:	d902      	bls.n	801b646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b640:	2303      	movs	r3, #3
 801b642:	f000 fb4c 	bl	801bcde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b646:	4b90      	ldr	r3, [pc, #576]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b648:	681a      	ldr	r2, [r3, #0]
 801b64a:	2380      	movs	r3, #128	@ 0x80
 801b64c:	029b      	lsls	r3, r3, #10
 801b64e:	4013      	ands	r3, r2
 801b650:	d0ef      	beq.n	801b632 <HAL_RCC_OscConfig+0xe6>
 801b652:	e015      	b.n	801b680 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b654:	f7f9 fb3e 	bl	8014cd4 <HAL_GetTick>
 801b658:	0003      	movs	r3, r0
 801b65a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b65c:	e008      	b.n	801b670 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b65e:	f7f9 fb39 	bl	8014cd4 <HAL_GetTick>
 801b662:	0002      	movs	r2, r0
 801b664:	697b      	ldr	r3, [r7, #20]
 801b666:	1ad3      	subs	r3, r2, r3
 801b668:	2b64      	cmp	r3, #100	@ 0x64
 801b66a:	d901      	bls.n	801b670 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801b66c:	2303      	movs	r3, #3
 801b66e:	e336      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b670:	4b85      	ldr	r3, [pc, #532]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b672:	681a      	ldr	r2, [r3, #0]
 801b674:	2380      	movs	r3, #128	@ 0x80
 801b676:	029b      	lsls	r3, r3, #10
 801b678:	4013      	ands	r3, r2
 801b67a:	d1f0      	bne.n	801b65e <HAL_RCC_OscConfig+0x112>
 801b67c:	e000      	b.n	801b680 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b67e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	2202      	movs	r2, #2
 801b686:	4013      	ands	r3, r2
 801b688:	d100      	bne.n	801b68c <HAL_RCC_OscConfig+0x140>
 801b68a:	e099      	b.n	801b7c0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	68db      	ldr	r3, [r3, #12]
 801b690:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b694:	2220      	movs	r2, #32
 801b696:	4013      	ands	r3, r2
 801b698:	d009      	beq.n	801b6ae <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801b69a:	4b7b      	ldr	r3, [pc, #492]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b69c:	681a      	ldr	r2, [r3, #0]
 801b69e:	4b7a      	ldr	r3, [pc, #488]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b6a0:	2120      	movs	r1, #32
 801b6a2:	430a      	orrs	r2, r1
 801b6a4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801b6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6a8:	2220      	movs	r2, #32
 801b6aa:	4393      	bics	r3, r2
 801b6ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b6ae:	69fb      	ldr	r3, [r7, #28]
 801b6b0:	2b04      	cmp	r3, #4
 801b6b2:	d005      	beq.n	801b6c0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b6b4:	69fb      	ldr	r3, [r7, #28]
 801b6b6:	2b0c      	cmp	r3, #12
 801b6b8:	d13e      	bne.n	801b738 <HAL_RCC_OscConfig+0x1ec>
 801b6ba:	69bb      	ldr	r3, [r7, #24]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d13b      	bne.n	801b738 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801b6c0:	4b71      	ldr	r3, [pc, #452]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	2204      	movs	r2, #4
 801b6c6:	4013      	ands	r3, r2
 801b6c8:	d004      	beq.n	801b6d4 <HAL_RCC_OscConfig+0x188>
 801b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d101      	bne.n	801b6d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	e304      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b6d4:	4b6c      	ldr	r3, [pc, #432]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b6d6:	685b      	ldr	r3, [r3, #4]
 801b6d8:	4a6e      	ldr	r2, [pc, #440]	@ (801b894 <HAL_RCC_OscConfig+0x348>)
 801b6da:	4013      	ands	r3, r2
 801b6dc:	0019      	movs	r1, r3
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	691b      	ldr	r3, [r3, #16]
 801b6e2:	021a      	lsls	r2, r3, #8
 801b6e4:	4b68      	ldr	r3, [pc, #416]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b6e6:	430a      	orrs	r2, r1
 801b6e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b6ea:	4b67      	ldr	r3, [pc, #412]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	2209      	movs	r2, #9
 801b6f0:	4393      	bics	r3, r2
 801b6f2:	0019      	movs	r1, r3
 801b6f4:	4b64      	ldr	r3, [pc, #400]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b6f8:	430a      	orrs	r2, r1
 801b6fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b6fc:	f000 fc42 	bl	801bf84 <HAL_RCC_GetSysClockFreq>
 801b700:	0001      	movs	r1, r0
 801b702:	4b61      	ldr	r3, [pc, #388]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b704:	68db      	ldr	r3, [r3, #12]
 801b706:	091b      	lsrs	r3, r3, #4
 801b708:	220f      	movs	r2, #15
 801b70a:	4013      	ands	r3, r2
 801b70c:	4a62      	ldr	r2, [pc, #392]	@ (801b898 <HAL_RCC_OscConfig+0x34c>)
 801b70e:	5cd3      	ldrb	r3, [r2, r3]
 801b710:	000a      	movs	r2, r1
 801b712:	40da      	lsrs	r2, r3
 801b714:	4b61      	ldr	r3, [pc, #388]	@ (801b89c <HAL_RCC_OscConfig+0x350>)
 801b716:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801b718:	4b61      	ldr	r3, [pc, #388]	@ (801b8a0 <HAL_RCC_OscConfig+0x354>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	2513      	movs	r5, #19
 801b71e:	197c      	adds	r4, r7, r5
 801b720:	0018      	movs	r0, r3
 801b722:	f7f9 fa91 	bl	8014c48 <HAL_InitTick>
 801b726:	0003      	movs	r3, r0
 801b728:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801b72a:	197b      	adds	r3, r7, r5
 801b72c:	781b      	ldrb	r3, [r3, #0]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d046      	beq.n	801b7c0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801b732:	197b      	adds	r3, r7, r5
 801b734:	781b      	ldrb	r3, [r3, #0]
 801b736:	e2d2      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801b738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d027      	beq.n	801b78e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b73e:	4b52      	ldr	r3, [pc, #328]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	2209      	movs	r2, #9
 801b744:	4393      	bics	r3, r2
 801b746:	0019      	movs	r1, r3
 801b748:	4b4f      	ldr	r3, [pc, #316]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b74a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b74c:	430a      	orrs	r2, r1
 801b74e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b750:	f7f9 fac0 	bl	8014cd4 <HAL_GetTick>
 801b754:	0003      	movs	r3, r0
 801b756:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b758:	e008      	b.n	801b76c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b75a:	f7f9 fabb 	bl	8014cd4 <HAL_GetTick>
 801b75e:	0002      	movs	r2, r0
 801b760:	697b      	ldr	r3, [r7, #20]
 801b762:	1ad3      	subs	r3, r2, r3
 801b764:	2b02      	cmp	r3, #2
 801b766:	d901      	bls.n	801b76c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801b768:	2303      	movs	r3, #3
 801b76a:	e2b8      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b76c:	4b46      	ldr	r3, [pc, #280]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	2204      	movs	r2, #4
 801b772:	4013      	ands	r3, r2
 801b774:	d0f1      	beq.n	801b75a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b776:	4b44      	ldr	r3, [pc, #272]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b778:	685b      	ldr	r3, [r3, #4]
 801b77a:	4a46      	ldr	r2, [pc, #280]	@ (801b894 <HAL_RCC_OscConfig+0x348>)
 801b77c:	4013      	ands	r3, r2
 801b77e:	0019      	movs	r1, r3
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	691b      	ldr	r3, [r3, #16]
 801b784:	021a      	lsls	r2, r3, #8
 801b786:	4b40      	ldr	r3, [pc, #256]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b788:	430a      	orrs	r2, r1
 801b78a:	605a      	str	r2, [r3, #4]
 801b78c:	e018      	b.n	801b7c0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b78e:	4b3e      	ldr	r3, [pc, #248]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b790:	681a      	ldr	r2, [r3, #0]
 801b792:	4b3d      	ldr	r3, [pc, #244]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b794:	2101      	movs	r1, #1
 801b796:	438a      	bics	r2, r1
 801b798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b79a:	f7f9 fa9b 	bl	8014cd4 <HAL_GetTick>
 801b79e:	0003      	movs	r3, r0
 801b7a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b7a2:	e008      	b.n	801b7b6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b7a4:	f7f9 fa96 	bl	8014cd4 <HAL_GetTick>
 801b7a8:	0002      	movs	r2, r0
 801b7aa:	697b      	ldr	r3, [r7, #20]
 801b7ac:	1ad3      	subs	r3, r2, r3
 801b7ae:	2b02      	cmp	r3, #2
 801b7b0:	d901      	bls.n	801b7b6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b7b2:	2303      	movs	r3, #3
 801b7b4:	e293      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b7b6:	4b34      	ldr	r3, [pc, #208]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	2204      	movs	r2, #4
 801b7bc:	4013      	ands	r3, r2
 801b7be:	d1f1      	bne.n	801b7a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	2210      	movs	r2, #16
 801b7c6:	4013      	ands	r3, r2
 801b7c8:	d100      	bne.n	801b7cc <HAL_RCC_OscConfig+0x280>
 801b7ca:	e0a2      	b.n	801b912 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b7cc:	69fb      	ldr	r3, [r7, #28]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d140      	bne.n	801b854 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b7d2:	4b2d      	ldr	r3, [pc, #180]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b7d4:	681a      	ldr	r2, [r3, #0]
 801b7d6:	2380      	movs	r3, #128	@ 0x80
 801b7d8:	009b      	lsls	r3, r3, #2
 801b7da:	4013      	ands	r3, r2
 801b7dc:	d005      	beq.n	801b7ea <HAL_RCC_OscConfig+0x29e>
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	69db      	ldr	r3, [r3, #28]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d101      	bne.n	801b7ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b7e6:	2301      	movs	r3, #1
 801b7e8:	e279      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b7ea:	4b27      	ldr	r3, [pc, #156]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b7ec:	685b      	ldr	r3, [r3, #4]
 801b7ee:	4a2d      	ldr	r2, [pc, #180]	@ (801b8a4 <HAL_RCC_OscConfig+0x358>)
 801b7f0:	4013      	ands	r3, r2
 801b7f2:	0019      	movs	r1, r3
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b7f8:	4b23      	ldr	r3, [pc, #140]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b7fa:	430a      	orrs	r2, r1
 801b7fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b7fe:	4b22      	ldr	r3, [pc, #136]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b800:	685b      	ldr	r3, [r3, #4]
 801b802:	021b      	lsls	r3, r3, #8
 801b804:	0a19      	lsrs	r1, r3, #8
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	6a1b      	ldr	r3, [r3, #32]
 801b80a:	061a      	lsls	r2, r3, #24
 801b80c:	4b1e      	ldr	r3, [pc, #120]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b80e:	430a      	orrs	r2, r1
 801b810:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b816:	0b5b      	lsrs	r3, r3, #13
 801b818:	3301      	adds	r3, #1
 801b81a:	2280      	movs	r2, #128	@ 0x80
 801b81c:	0212      	lsls	r2, r2, #8
 801b81e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b820:	4b19      	ldr	r3, [pc, #100]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b822:	68db      	ldr	r3, [r3, #12]
 801b824:	091b      	lsrs	r3, r3, #4
 801b826:	210f      	movs	r1, #15
 801b828:	400b      	ands	r3, r1
 801b82a:	491b      	ldr	r1, [pc, #108]	@ (801b898 <HAL_RCC_OscConfig+0x34c>)
 801b82c:	5ccb      	ldrb	r3, [r1, r3]
 801b82e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b830:	4b1a      	ldr	r3, [pc, #104]	@ (801b89c <HAL_RCC_OscConfig+0x350>)
 801b832:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b834:	4b1a      	ldr	r3, [pc, #104]	@ (801b8a0 <HAL_RCC_OscConfig+0x354>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	2513      	movs	r5, #19
 801b83a:	197c      	adds	r4, r7, r5
 801b83c:	0018      	movs	r0, r3
 801b83e:	f7f9 fa03 	bl	8014c48 <HAL_InitTick>
 801b842:	0003      	movs	r3, r0
 801b844:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b846:	197b      	adds	r3, r7, r5
 801b848:	781b      	ldrb	r3, [r3, #0]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d061      	beq.n	801b912 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b84e:	197b      	adds	r3, r7, r5
 801b850:	781b      	ldrb	r3, [r3, #0]
 801b852:	e244      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	69db      	ldr	r3, [r3, #28]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d040      	beq.n	801b8de <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b85c:	4b0a      	ldr	r3, [pc, #40]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b85e:	681a      	ldr	r2, [r3, #0]
 801b860:	4b09      	ldr	r3, [pc, #36]	@ (801b888 <HAL_RCC_OscConfig+0x33c>)
 801b862:	2180      	movs	r1, #128	@ 0x80
 801b864:	0049      	lsls	r1, r1, #1
 801b866:	430a      	orrs	r2, r1
 801b868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b86a:	f7f9 fa33 	bl	8014cd4 <HAL_GetTick>
 801b86e:	0003      	movs	r3, r0
 801b870:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b872:	e019      	b.n	801b8a8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b874:	f7f9 fa2e 	bl	8014cd4 <HAL_GetTick>
 801b878:	0002      	movs	r2, r0
 801b87a:	697b      	ldr	r3, [r7, #20]
 801b87c:	1ad3      	subs	r3, r2, r3
 801b87e:	2b02      	cmp	r3, #2
 801b880:	d912      	bls.n	801b8a8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b882:	2303      	movs	r3, #3
 801b884:	e22b      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
 801b886:	46c0      	nop			@ (mov r8, r8)
 801b888:	40021000 	.word	0x40021000
 801b88c:	fffeffff 	.word	0xfffeffff
 801b890:	fffbffff 	.word	0xfffbffff
 801b894:	ffffe0ff 	.word	0xffffe0ff
 801b898:	0802ef7c 	.word	0x0802ef7c
 801b89c:	200000ec 	.word	0x200000ec
 801b8a0:	200000fc 	.word	0x200000fc
 801b8a4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b8a8:	4bca      	ldr	r3, [pc, #808]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b8aa:	681a      	ldr	r2, [r3, #0]
 801b8ac:	2380      	movs	r3, #128	@ 0x80
 801b8ae:	009b      	lsls	r3, r3, #2
 801b8b0:	4013      	ands	r3, r2
 801b8b2:	d0df      	beq.n	801b874 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b8b4:	4bc7      	ldr	r3, [pc, #796]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b8b6:	685b      	ldr	r3, [r3, #4]
 801b8b8:	4ac7      	ldr	r2, [pc, #796]	@ (801bbd8 <HAL_RCC_OscConfig+0x68c>)
 801b8ba:	4013      	ands	r3, r2
 801b8bc:	0019      	movs	r1, r3
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b8c2:	4bc4      	ldr	r3, [pc, #784]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b8c4:	430a      	orrs	r2, r1
 801b8c6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b8c8:	4bc2      	ldr	r3, [pc, #776]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b8ca:	685b      	ldr	r3, [r3, #4]
 801b8cc:	021b      	lsls	r3, r3, #8
 801b8ce:	0a19      	lsrs	r1, r3, #8
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	6a1b      	ldr	r3, [r3, #32]
 801b8d4:	061a      	lsls	r2, r3, #24
 801b8d6:	4bbf      	ldr	r3, [pc, #764]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b8d8:	430a      	orrs	r2, r1
 801b8da:	605a      	str	r2, [r3, #4]
 801b8dc:	e019      	b.n	801b912 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b8de:	4bbd      	ldr	r3, [pc, #756]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b8e0:	681a      	ldr	r2, [r3, #0]
 801b8e2:	4bbc      	ldr	r3, [pc, #752]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b8e4:	49bd      	ldr	r1, [pc, #756]	@ (801bbdc <HAL_RCC_OscConfig+0x690>)
 801b8e6:	400a      	ands	r2, r1
 801b8e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8ea:	f7f9 f9f3 	bl	8014cd4 <HAL_GetTick>
 801b8ee:	0003      	movs	r3, r0
 801b8f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b8f2:	e008      	b.n	801b906 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b8f4:	f7f9 f9ee 	bl	8014cd4 <HAL_GetTick>
 801b8f8:	0002      	movs	r2, r0
 801b8fa:	697b      	ldr	r3, [r7, #20]
 801b8fc:	1ad3      	subs	r3, r2, r3
 801b8fe:	2b02      	cmp	r3, #2
 801b900:	d901      	bls.n	801b906 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b902:	2303      	movs	r3, #3
 801b904:	e1eb      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b906:	4bb3      	ldr	r3, [pc, #716]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b908:	681a      	ldr	r2, [r3, #0]
 801b90a:	2380      	movs	r3, #128	@ 0x80
 801b90c:	009b      	lsls	r3, r3, #2
 801b90e:	4013      	ands	r3, r2
 801b910:	d1f0      	bne.n	801b8f4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	2208      	movs	r2, #8
 801b918:	4013      	ands	r3, r2
 801b91a:	d036      	beq.n	801b98a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	695b      	ldr	r3, [r3, #20]
 801b920:	2b00      	cmp	r3, #0
 801b922:	d019      	beq.n	801b958 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b924:	4bab      	ldr	r3, [pc, #684]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b926:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b928:	4baa      	ldr	r3, [pc, #680]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b92a:	2101      	movs	r1, #1
 801b92c:	430a      	orrs	r2, r1
 801b92e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b930:	f7f9 f9d0 	bl	8014cd4 <HAL_GetTick>
 801b934:	0003      	movs	r3, r0
 801b936:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b938:	e008      	b.n	801b94c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b93a:	f7f9 f9cb 	bl	8014cd4 <HAL_GetTick>
 801b93e:	0002      	movs	r2, r0
 801b940:	697b      	ldr	r3, [r7, #20]
 801b942:	1ad3      	subs	r3, r2, r3
 801b944:	2b02      	cmp	r3, #2
 801b946:	d901      	bls.n	801b94c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b948:	2303      	movs	r3, #3
 801b94a:	e1c8      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b94c:	4ba1      	ldr	r3, [pc, #644]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b94e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b950:	2202      	movs	r2, #2
 801b952:	4013      	ands	r3, r2
 801b954:	d0f1      	beq.n	801b93a <HAL_RCC_OscConfig+0x3ee>
 801b956:	e018      	b.n	801b98a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b958:	4b9e      	ldr	r3, [pc, #632]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b95a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b95c:	4b9d      	ldr	r3, [pc, #628]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b95e:	2101      	movs	r1, #1
 801b960:	438a      	bics	r2, r1
 801b962:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b964:	f7f9 f9b6 	bl	8014cd4 <HAL_GetTick>
 801b968:	0003      	movs	r3, r0
 801b96a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b96c:	e008      	b.n	801b980 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b96e:	f7f9 f9b1 	bl	8014cd4 <HAL_GetTick>
 801b972:	0002      	movs	r2, r0
 801b974:	697b      	ldr	r3, [r7, #20]
 801b976:	1ad3      	subs	r3, r2, r3
 801b978:	2b02      	cmp	r3, #2
 801b97a:	d901      	bls.n	801b980 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b97c:	2303      	movs	r3, #3
 801b97e:	e1ae      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b980:	4b94      	ldr	r3, [pc, #592]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b984:	2202      	movs	r2, #2
 801b986:	4013      	ands	r3, r2
 801b988:	d1f1      	bne.n	801b96e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	2204      	movs	r2, #4
 801b990:	4013      	ands	r3, r2
 801b992:	d100      	bne.n	801b996 <HAL_RCC_OscConfig+0x44a>
 801b994:	e0ae      	b.n	801baf4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b996:	2023      	movs	r0, #35	@ 0x23
 801b998:	183b      	adds	r3, r7, r0
 801b99a:	2200      	movs	r2, #0
 801b99c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b99e:	4b8d      	ldr	r3, [pc, #564]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b9a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b9a2:	2380      	movs	r3, #128	@ 0x80
 801b9a4:	055b      	lsls	r3, r3, #21
 801b9a6:	4013      	ands	r3, r2
 801b9a8:	d109      	bne.n	801b9be <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b9aa:	4b8a      	ldr	r3, [pc, #552]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b9ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b9ae:	4b89      	ldr	r3, [pc, #548]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801b9b0:	2180      	movs	r1, #128	@ 0x80
 801b9b2:	0549      	lsls	r1, r1, #21
 801b9b4:	430a      	orrs	r2, r1
 801b9b6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b9b8:	183b      	adds	r3, r7, r0
 801b9ba:	2201      	movs	r2, #1
 801b9bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b9be:	4b88      	ldr	r3, [pc, #544]	@ (801bbe0 <HAL_RCC_OscConfig+0x694>)
 801b9c0:	681a      	ldr	r2, [r3, #0]
 801b9c2:	2380      	movs	r3, #128	@ 0x80
 801b9c4:	005b      	lsls	r3, r3, #1
 801b9c6:	4013      	ands	r3, r2
 801b9c8:	d11a      	bne.n	801ba00 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b9ca:	4b85      	ldr	r3, [pc, #532]	@ (801bbe0 <HAL_RCC_OscConfig+0x694>)
 801b9cc:	681a      	ldr	r2, [r3, #0]
 801b9ce:	4b84      	ldr	r3, [pc, #528]	@ (801bbe0 <HAL_RCC_OscConfig+0x694>)
 801b9d0:	2180      	movs	r1, #128	@ 0x80
 801b9d2:	0049      	lsls	r1, r1, #1
 801b9d4:	430a      	orrs	r2, r1
 801b9d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b9d8:	f7f9 f97c 	bl	8014cd4 <HAL_GetTick>
 801b9dc:	0003      	movs	r3, r0
 801b9de:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b9e0:	e008      	b.n	801b9f4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b9e2:	f7f9 f977 	bl	8014cd4 <HAL_GetTick>
 801b9e6:	0002      	movs	r2, r0
 801b9e8:	697b      	ldr	r3, [r7, #20]
 801b9ea:	1ad3      	subs	r3, r2, r3
 801b9ec:	2b64      	cmp	r3, #100	@ 0x64
 801b9ee:	d901      	bls.n	801b9f4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b9f0:	2303      	movs	r3, #3
 801b9f2:	e174      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b9f4:	4b7a      	ldr	r3, [pc, #488]	@ (801bbe0 <HAL_RCC_OscConfig+0x694>)
 801b9f6:	681a      	ldr	r2, [r3, #0]
 801b9f8:	2380      	movs	r3, #128	@ 0x80
 801b9fa:	005b      	lsls	r3, r3, #1
 801b9fc:	4013      	ands	r3, r2
 801b9fe:	d0f0      	beq.n	801b9e2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	689a      	ldr	r2, [r3, #8]
 801ba04:	2380      	movs	r3, #128	@ 0x80
 801ba06:	005b      	lsls	r3, r3, #1
 801ba08:	429a      	cmp	r2, r3
 801ba0a:	d107      	bne.n	801ba1c <HAL_RCC_OscConfig+0x4d0>
 801ba0c:	4b71      	ldr	r3, [pc, #452]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba10:	4b70      	ldr	r3, [pc, #448]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba12:	2180      	movs	r1, #128	@ 0x80
 801ba14:	0049      	lsls	r1, r1, #1
 801ba16:	430a      	orrs	r2, r1
 801ba18:	651a      	str	r2, [r3, #80]	@ 0x50
 801ba1a:	e031      	b.n	801ba80 <HAL_RCC_OscConfig+0x534>
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	689b      	ldr	r3, [r3, #8]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d10c      	bne.n	801ba3e <HAL_RCC_OscConfig+0x4f2>
 801ba24:	4b6b      	ldr	r3, [pc, #428]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba28:	4b6a      	ldr	r3, [pc, #424]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba2a:	496c      	ldr	r1, [pc, #432]	@ (801bbdc <HAL_RCC_OscConfig+0x690>)
 801ba2c:	400a      	ands	r2, r1
 801ba2e:	651a      	str	r2, [r3, #80]	@ 0x50
 801ba30:	4b68      	ldr	r3, [pc, #416]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba34:	4b67      	ldr	r3, [pc, #412]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba36:	496b      	ldr	r1, [pc, #428]	@ (801bbe4 <HAL_RCC_OscConfig+0x698>)
 801ba38:	400a      	ands	r2, r1
 801ba3a:	651a      	str	r2, [r3, #80]	@ 0x50
 801ba3c:	e020      	b.n	801ba80 <HAL_RCC_OscConfig+0x534>
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	689a      	ldr	r2, [r3, #8]
 801ba42:	23a0      	movs	r3, #160	@ 0xa0
 801ba44:	00db      	lsls	r3, r3, #3
 801ba46:	429a      	cmp	r2, r3
 801ba48:	d10e      	bne.n	801ba68 <HAL_RCC_OscConfig+0x51c>
 801ba4a:	4b62      	ldr	r3, [pc, #392]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba4e:	4b61      	ldr	r3, [pc, #388]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba50:	2180      	movs	r1, #128	@ 0x80
 801ba52:	00c9      	lsls	r1, r1, #3
 801ba54:	430a      	orrs	r2, r1
 801ba56:	651a      	str	r2, [r3, #80]	@ 0x50
 801ba58:	4b5e      	ldr	r3, [pc, #376]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba5c:	4b5d      	ldr	r3, [pc, #372]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba5e:	2180      	movs	r1, #128	@ 0x80
 801ba60:	0049      	lsls	r1, r1, #1
 801ba62:	430a      	orrs	r2, r1
 801ba64:	651a      	str	r2, [r3, #80]	@ 0x50
 801ba66:	e00b      	b.n	801ba80 <HAL_RCC_OscConfig+0x534>
 801ba68:	4b5a      	ldr	r3, [pc, #360]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba6c:	4b59      	ldr	r3, [pc, #356]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba6e:	495b      	ldr	r1, [pc, #364]	@ (801bbdc <HAL_RCC_OscConfig+0x690>)
 801ba70:	400a      	ands	r2, r1
 801ba72:	651a      	str	r2, [r3, #80]	@ 0x50
 801ba74:	4b57      	ldr	r3, [pc, #348]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba78:	4b56      	ldr	r3, [pc, #344]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801ba7a:	495a      	ldr	r1, [pc, #360]	@ (801bbe4 <HAL_RCC_OscConfig+0x698>)
 801ba7c:	400a      	ands	r2, r1
 801ba7e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	689b      	ldr	r3, [r3, #8]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d015      	beq.n	801bab4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801ba88:	f7f9 f924 	bl	8014cd4 <HAL_GetTick>
 801ba8c:	0003      	movs	r3, r0
 801ba8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ba90:	e009      	b.n	801baa6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801ba92:	f7f9 f91f 	bl	8014cd4 <HAL_GetTick>
 801ba96:	0002      	movs	r2, r0
 801ba98:	697b      	ldr	r3, [r7, #20]
 801ba9a:	1ad3      	subs	r3, r2, r3
 801ba9c:	4a52      	ldr	r2, [pc, #328]	@ (801bbe8 <HAL_RCC_OscConfig+0x69c>)
 801ba9e:	4293      	cmp	r3, r2
 801baa0:	d901      	bls.n	801baa6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801baa2:	2303      	movs	r3, #3
 801baa4:	e11b      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801baa6:	4b4b      	ldr	r3, [pc, #300]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801baa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801baaa:	2380      	movs	r3, #128	@ 0x80
 801baac:	009b      	lsls	r3, r3, #2
 801baae:	4013      	ands	r3, r2
 801bab0:	d0ef      	beq.n	801ba92 <HAL_RCC_OscConfig+0x546>
 801bab2:	e014      	b.n	801bade <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801bab4:	f7f9 f90e 	bl	8014cd4 <HAL_GetTick>
 801bab8:	0003      	movs	r3, r0
 801baba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801babc:	e009      	b.n	801bad2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801babe:	f7f9 f909 	bl	8014cd4 <HAL_GetTick>
 801bac2:	0002      	movs	r2, r0
 801bac4:	697b      	ldr	r3, [r7, #20]
 801bac6:	1ad3      	subs	r3, r2, r3
 801bac8:	4a47      	ldr	r2, [pc, #284]	@ (801bbe8 <HAL_RCC_OscConfig+0x69c>)
 801baca:	4293      	cmp	r3, r2
 801bacc:	d901      	bls.n	801bad2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801bace:	2303      	movs	r3, #3
 801bad0:	e105      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801bad2:	4b40      	ldr	r3, [pc, #256]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bad4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bad6:	2380      	movs	r3, #128	@ 0x80
 801bad8:	009b      	lsls	r3, r3, #2
 801bada:	4013      	ands	r3, r2
 801badc:	d1ef      	bne.n	801babe <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801bade:	2323      	movs	r3, #35	@ 0x23
 801bae0:	18fb      	adds	r3, r7, r3
 801bae2:	781b      	ldrb	r3, [r3, #0]
 801bae4:	2b01      	cmp	r3, #1
 801bae6:	d105      	bne.n	801baf4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bae8:	4b3a      	ldr	r3, [pc, #232]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801baea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801baec:	4b39      	ldr	r3, [pc, #228]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801baee:	493f      	ldr	r1, [pc, #252]	@ (801bbec <HAL_RCC_OscConfig+0x6a0>)
 801baf0:	400a      	ands	r2, r1
 801baf2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	2220      	movs	r2, #32
 801bafa:	4013      	ands	r3, r2
 801bafc:	d049      	beq.n	801bb92 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	699b      	ldr	r3, [r3, #24]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d026      	beq.n	801bb54 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801bb06:	4b33      	ldr	r3, [pc, #204]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bb08:	689a      	ldr	r2, [r3, #8]
 801bb0a:	4b32      	ldr	r3, [pc, #200]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bb0c:	2101      	movs	r1, #1
 801bb0e:	430a      	orrs	r2, r1
 801bb10:	609a      	str	r2, [r3, #8]
 801bb12:	4b30      	ldr	r3, [pc, #192]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bb14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bb16:	4b2f      	ldr	r3, [pc, #188]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bb18:	2101      	movs	r1, #1
 801bb1a:	430a      	orrs	r2, r1
 801bb1c:	635a      	str	r2, [r3, #52]	@ 0x34
 801bb1e:	4b34      	ldr	r3, [pc, #208]	@ (801bbf0 <HAL_RCC_OscConfig+0x6a4>)
 801bb20:	6a1a      	ldr	r2, [r3, #32]
 801bb22:	4b33      	ldr	r3, [pc, #204]	@ (801bbf0 <HAL_RCC_OscConfig+0x6a4>)
 801bb24:	2180      	movs	r1, #128	@ 0x80
 801bb26:	0189      	lsls	r1, r1, #6
 801bb28:	430a      	orrs	r2, r1
 801bb2a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bb2c:	f7f9 f8d2 	bl	8014cd4 <HAL_GetTick>
 801bb30:	0003      	movs	r3, r0
 801bb32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bb34:	e008      	b.n	801bb48 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bb36:	f7f9 f8cd 	bl	8014cd4 <HAL_GetTick>
 801bb3a:	0002      	movs	r2, r0
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	1ad3      	subs	r3, r2, r3
 801bb40:	2b02      	cmp	r3, #2
 801bb42:	d901      	bls.n	801bb48 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801bb44:	2303      	movs	r3, #3
 801bb46:	e0ca      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bb48:	4b22      	ldr	r3, [pc, #136]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bb4a:	689b      	ldr	r3, [r3, #8]
 801bb4c:	2202      	movs	r2, #2
 801bb4e:	4013      	ands	r3, r2
 801bb50:	d0f1      	beq.n	801bb36 <HAL_RCC_OscConfig+0x5ea>
 801bb52:	e01e      	b.n	801bb92 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801bb54:	4b1f      	ldr	r3, [pc, #124]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bb56:	689a      	ldr	r2, [r3, #8]
 801bb58:	4b1e      	ldr	r3, [pc, #120]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bb5a:	2101      	movs	r1, #1
 801bb5c:	438a      	bics	r2, r1
 801bb5e:	609a      	str	r2, [r3, #8]
 801bb60:	4b23      	ldr	r3, [pc, #140]	@ (801bbf0 <HAL_RCC_OscConfig+0x6a4>)
 801bb62:	6a1a      	ldr	r2, [r3, #32]
 801bb64:	4b22      	ldr	r3, [pc, #136]	@ (801bbf0 <HAL_RCC_OscConfig+0x6a4>)
 801bb66:	4923      	ldr	r1, [pc, #140]	@ (801bbf4 <HAL_RCC_OscConfig+0x6a8>)
 801bb68:	400a      	ands	r2, r1
 801bb6a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bb6c:	f7f9 f8b2 	bl	8014cd4 <HAL_GetTick>
 801bb70:	0003      	movs	r3, r0
 801bb72:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bb74:	e008      	b.n	801bb88 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bb76:	f7f9 f8ad 	bl	8014cd4 <HAL_GetTick>
 801bb7a:	0002      	movs	r2, r0
 801bb7c:	697b      	ldr	r3, [r7, #20]
 801bb7e:	1ad3      	subs	r3, r2, r3
 801bb80:	2b02      	cmp	r3, #2
 801bb82:	d901      	bls.n	801bb88 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801bb84:	2303      	movs	r3, #3
 801bb86:	e0aa      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bb88:	4b12      	ldr	r3, [pc, #72]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bb8a:	689b      	ldr	r3, [r3, #8]
 801bb8c:	2202      	movs	r2, #2
 801bb8e:	4013      	ands	r3, r2
 801bb90:	d1f1      	bne.n	801bb76 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d100      	bne.n	801bb9c <HAL_RCC_OscConfig+0x650>
 801bb9a:	e09f      	b.n	801bcdc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bb9c:	69fb      	ldr	r3, [r7, #28]
 801bb9e:	2b0c      	cmp	r3, #12
 801bba0:	d100      	bne.n	801bba4 <HAL_RCC_OscConfig+0x658>
 801bba2:	e078      	b.n	801bc96 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bba8:	2b02      	cmp	r3, #2
 801bbaa:	d159      	bne.n	801bc60 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bbac:	4b09      	ldr	r3, [pc, #36]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bbae:	681a      	ldr	r2, [r3, #0]
 801bbb0:	4b08      	ldr	r3, [pc, #32]	@ (801bbd4 <HAL_RCC_OscConfig+0x688>)
 801bbb2:	4911      	ldr	r1, [pc, #68]	@ (801bbf8 <HAL_RCC_OscConfig+0x6ac>)
 801bbb4:	400a      	ands	r2, r1
 801bbb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bbb8:	f7f9 f88c 	bl	8014cd4 <HAL_GetTick>
 801bbbc:	0003      	movs	r3, r0
 801bbbe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801bbc0:	e01c      	b.n	801bbfc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bbc2:	f7f9 f887 	bl	8014cd4 <HAL_GetTick>
 801bbc6:	0002      	movs	r2, r0
 801bbc8:	697b      	ldr	r3, [r7, #20]
 801bbca:	1ad3      	subs	r3, r2, r3
 801bbcc:	2b02      	cmp	r3, #2
 801bbce:	d915      	bls.n	801bbfc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801bbd0:	2303      	movs	r3, #3
 801bbd2:	e084      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
 801bbd4:	40021000 	.word	0x40021000
 801bbd8:	ffff1fff 	.word	0xffff1fff
 801bbdc:	fffffeff 	.word	0xfffffeff
 801bbe0:	40007000 	.word	0x40007000
 801bbe4:	fffffbff 	.word	0xfffffbff
 801bbe8:	00001388 	.word	0x00001388
 801bbec:	efffffff 	.word	0xefffffff
 801bbf0:	40010000 	.word	0x40010000
 801bbf4:	ffffdfff 	.word	0xffffdfff
 801bbf8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801bbfc:	4b3a      	ldr	r3, [pc, #232]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bbfe:	681a      	ldr	r2, [r3, #0]
 801bc00:	2380      	movs	r3, #128	@ 0x80
 801bc02:	049b      	lsls	r3, r3, #18
 801bc04:	4013      	ands	r3, r2
 801bc06:	d1dc      	bne.n	801bbc2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801bc08:	4b37      	ldr	r3, [pc, #220]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bc0a:	68db      	ldr	r3, [r3, #12]
 801bc0c:	4a37      	ldr	r2, [pc, #220]	@ (801bcec <HAL_RCC_OscConfig+0x7a0>)
 801bc0e:	4013      	ands	r3, r2
 801bc10:	0019      	movs	r1, r3
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bc1a:	431a      	orrs	r2, r3
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bc20:	431a      	orrs	r2, r3
 801bc22:	4b31      	ldr	r3, [pc, #196]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bc24:	430a      	orrs	r2, r1
 801bc26:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bc28:	4b2f      	ldr	r3, [pc, #188]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bc2a:	681a      	ldr	r2, [r3, #0]
 801bc2c:	4b2e      	ldr	r3, [pc, #184]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bc2e:	2180      	movs	r1, #128	@ 0x80
 801bc30:	0449      	lsls	r1, r1, #17
 801bc32:	430a      	orrs	r2, r1
 801bc34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bc36:	f7f9 f84d 	bl	8014cd4 <HAL_GetTick>
 801bc3a:	0003      	movs	r3, r0
 801bc3c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801bc3e:	e008      	b.n	801bc52 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bc40:	f7f9 f848 	bl	8014cd4 <HAL_GetTick>
 801bc44:	0002      	movs	r2, r0
 801bc46:	697b      	ldr	r3, [r7, #20]
 801bc48:	1ad3      	subs	r3, r2, r3
 801bc4a:	2b02      	cmp	r3, #2
 801bc4c:	d901      	bls.n	801bc52 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801bc4e:	2303      	movs	r3, #3
 801bc50:	e045      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801bc52:	4b25      	ldr	r3, [pc, #148]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bc54:	681a      	ldr	r2, [r3, #0]
 801bc56:	2380      	movs	r3, #128	@ 0x80
 801bc58:	049b      	lsls	r3, r3, #18
 801bc5a:	4013      	ands	r3, r2
 801bc5c:	d0f0      	beq.n	801bc40 <HAL_RCC_OscConfig+0x6f4>
 801bc5e:	e03d      	b.n	801bcdc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bc60:	4b21      	ldr	r3, [pc, #132]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bc62:	681a      	ldr	r2, [r3, #0]
 801bc64:	4b20      	ldr	r3, [pc, #128]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bc66:	4922      	ldr	r1, [pc, #136]	@ (801bcf0 <HAL_RCC_OscConfig+0x7a4>)
 801bc68:	400a      	ands	r2, r1
 801bc6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bc6c:	f7f9 f832 	bl	8014cd4 <HAL_GetTick>
 801bc70:	0003      	movs	r3, r0
 801bc72:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801bc74:	e008      	b.n	801bc88 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bc76:	f7f9 f82d 	bl	8014cd4 <HAL_GetTick>
 801bc7a:	0002      	movs	r2, r0
 801bc7c:	697b      	ldr	r3, [r7, #20]
 801bc7e:	1ad3      	subs	r3, r2, r3
 801bc80:	2b02      	cmp	r3, #2
 801bc82:	d901      	bls.n	801bc88 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801bc84:	2303      	movs	r3, #3
 801bc86:	e02a      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801bc88:	4b17      	ldr	r3, [pc, #92]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bc8a:	681a      	ldr	r2, [r3, #0]
 801bc8c:	2380      	movs	r3, #128	@ 0x80
 801bc8e:	049b      	lsls	r3, r3, #18
 801bc90:	4013      	ands	r3, r2
 801bc92:	d1f0      	bne.n	801bc76 <HAL_RCC_OscConfig+0x72a>
 801bc94:	e022      	b.n	801bcdc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc9a:	2b01      	cmp	r3, #1
 801bc9c:	d101      	bne.n	801bca2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801bc9e:	2301      	movs	r3, #1
 801bca0:	e01d      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801bca2:	4b11      	ldr	r3, [pc, #68]	@ (801bce8 <HAL_RCC_OscConfig+0x79c>)
 801bca4:	68db      	ldr	r3, [r3, #12]
 801bca6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bca8:	69ba      	ldr	r2, [r7, #24]
 801bcaa:	2380      	movs	r3, #128	@ 0x80
 801bcac:	025b      	lsls	r3, r3, #9
 801bcae:	401a      	ands	r2, r3
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcb4:	429a      	cmp	r2, r3
 801bcb6:	d10f      	bne.n	801bcd8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801bcb8:	69ba      	ldr	r2, [r7, #24]
 801bcba:	23f0      	movs	r3, #240	@ 0xf0
 801bcbc:	039b      	lsls	r3, r3, #14
 801bcbe:	401a      	ands	r2, r3
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bcc4:	429a      	cmp	r2, r3
 801bcc6:	d107      	bne.n	801bcd8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801bcc8:	69ba      	ldr	r2, [r7, #24]
 801bcca:	23c0      	movs	r3, #192	@ 0xc0
 801bccc:	041b      	lsls	r3, r3, #16
 801bcce:	401a      	ands	r2, r3
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801bcd4:	429a      	cmp	r2, r3
 801bcd6:	d001      	beq.n	801bcdc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801bcd8:	2301      	movs	r3, #1
 801bcda:	e000      	b.n	801bcde <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801bcdc:	2300      	movs	r3, #0
}
 801bcde:	0018      	movs	r0, r3
 801bce0:	46bd      	mov	sp, r7
 801bce2:	b00a      	add	sp, #40	@ 0x28
 801bce4:	bdb0      	pop	{r4, r5, r7, pc}
 801bce6:	46c0      	nop			@ (mov r8, r8)
 801bce8:	40021000 	.word	0x40021000
 801bcec:	ff02ffff 	.word	0xff02ffff
 801bcf0:	feffffff 	.word	0xfeffffff

0801bcf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bcf4:	b5b0      	push	{r4, r5, r7, lr}
 801bcf6:	b084      	sub	sp, #16
 801bcf8:	af00      	add	r7, sp, #0
 801bcfa:	6078      	str	r0, [r7, #4]
 801bcfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d101      	bne.n	801bd08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801bd04:	2301      	movs	r3, #1
 801bd06:	e128      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801bd08:	4b96      	ldr	r3, [pc, #600]	@ (801bf64 <HAL_RCC_ClockConfig+0x270>)
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	2201      	movs	r2, #1
 801bd0e:	4013      	ands	r3, r2
 801bd10:	683a      	ldr	r2, [r7, #0]
 801bd12:	429a      	cmp	r2, r3
 801bd14:	d91e      	bls.n	801bd54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bd16:	4b93      	ldr	r3, [pc, #588]	@ (801bf64 <HAL_RCC_ClockConfig+0x270>)
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	2201      	movs	r2, #1
 801bd1c:	4393      	bics	r3, r2
 801bd1e:	0019      	movs	r1, r3
 801bd20:	4b90      	ldr	r3, [pc, #576]	@ (801bf64 <HAL_RCC_ClockConfig+0x270>)
 801bd22:	683a      	ldr	r2, [r7, #0]
 801bd24:	430a      	orrs	r2, r1
 801bd26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bd28:	f7f8 ffd4 	bl	8014cd4 <HAL_GetTick>
 801bd2c:	0003      	movs	r3, r0
 801bd2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bd30:	e009      	b.n	801bd46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bd32:	f7f8 ffcf 	bl	8014cd4 <HAL_GetTick>
 801bd36:	0002      	movs	r2, r0
 801bd38:	68fb      	ldr	r3, [r7, #12]
 801bd3a:	1ad3      	subs	r3, r2, r3
 801bd3c:	4a8a      	ldr	r2, [pc, #552]	@ (801bf68 <HAL_RCC_ClockConfig+0x274>)
 801bd3e:	4293      	cmp	r3, r2
 801bd40:	d901      	bls.n	801bd46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801bd42:	2303      	movs	r3, #3
 801bd44:	e109      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bd46:	4b87      	ldr	r3, [pc, #540]	@ (801bf64 <HAL_RCC_ClockConfig+0x270>)
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	2201      	movs	r2, #1
 801bd4c:	4013      	ands	r3, r2
 801bd4e:	683a      	ldr	r2, [r7, #0]
 801bd50:	429a      	cmp	r2, r3
 801bd52:	d1ee      	bne.n	801bd32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	2202      	movs	r2, #2
 801bd5a:	4013      	ands	r3, r2
 801bd5c:	d009      	beq.n	801bd72 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bd5e:	4b83      	ldr	r3, [pc, #524]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bd60:	68db      	ldr	r3, [r3, #12]
 801bd62:	22f0      	movs	r2, #240	@ 0xf0
 801bd64:	4393      	bics	r3, r2
 801bd66:	0019      	movs	r1, r3
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	689a      	ldr	r2, [r3, #8]
 801bd6c:	4b7f      	ldr	r3, [pc, #508]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bd6e:	430a      	orrs	r2, r1
 801bd70:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	2201      	movs	r2, #1
 801bd78:	4013      	ands	r3, r2
 801bd7a:	d100      	bne.n	801bd7e <HAL_RCC_ClockConfig+0x8a>
 801bd7c:	e089      	b.n	801be92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	685b      	ldr	r3, [r3, #4]
 801bd82:	2b02      	cmp	r3, #2
 801bd84:	d107      	bne.n	801bd96 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bd86:	4b79      	ldr	r3, [pc, #484]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bd88:	681a      	ldr	r2, [r3, #0]
 801bd8a:	2380      	movs	r3, #128	@ 0x80
 801bd8c:	029b      	lsls	r3, r3, #10
 801bd8e:	4013      	ands	r3, r2
 801bd90:	d120      	bne.n	801bdd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bd92:	2301      	movs	r3, #1
 801bd94:	e0e1      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	685b      	ldr	r3, [r3, #4]
 801bd9a:	2b03      	cmp	r3, #3
 801bd9c:	d107      	bne.n	801bdae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bd9e:	4b73      	ldr	r3, [pc, #460]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bda0:	681a      	ldr	r2, [r3, #0]
 801bda2:	2380      	movs	r3, #128	@ 0x80
 801bda4:	049b      	lsls	r3, r3, #18
 801bda6:	4013      	ands	r3, r2
 801bda8:	d114      	bne.n	801bdd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bdaa:	2301      	movs	r3, #1
 801bdac:	e0d5      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	685b      	ldr	r3, [r3, #4]
 801bdb2:	2b01      	cmp	r3, #1
 801bdb4:	d106      	bne.n	801bdc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bdb6:	4b6d      	ldr	r3, [pc, #436]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	2204      	movs	r2, #4
 801bdbc:	4013      	ands	r3, r2
 801bdbe:	d109      	bne.n	801bdd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bdc0:	2301      	movs	r3, #1
 801bdc2:	e0ca      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801bdc4:	4b69      	ldr	r3, [pc, #420]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bdc6:	681a      	ldr	r2, [r3, #0]
 801bdc8:	2380      	movs	r3, #128	@ 0x80
 801bdca:	009b      	lsls	r3, r3, #2
 801bdcc:	4013      	ands	r3, r2
 801bdce:	d101      	bne.n	801bdd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bdd0:	2301      	movs	r3, #1
 801bdd2:	e0c2      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801bdd4:	4b65      	ldr	r3, [pc, #404]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bdd6:	68db      	ldr	r3, [r3, #12]
 801bdd8:	2203      	movs	r2, #3
 801bdda:	4393      	bics	r3, r2
 801bddc:	0019      	movs	r1, r3
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	685a      	ldr	r2, [r3, #4]
 801bde2:	4b62      	ldr	r3, [pc, #392]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bde4:	430a      	orrs	r2, r1
 801bde6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801bde8:	f7f8 ff74 	bl	8014cd4 <HAL_GetTick>
 801bdec:	0003      	movs	r3, r0
 801bdee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	685b      	ldr	r3, [r3, #4]
 801bdf4:	2b02      	cmp	r3, #2
 801bdf6:	d111      	bne.n	801be1c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bdf8:	e009      	b.n	801be0e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bdfa:	f7f8 ff6b 	bl	8014cd4 <HAL_GetTick>
 801bdfe:	0002      	movs	r2, r0
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	1ad3      	subs	r3, r2, r3
 801be04:	4a58      	ldr	r2, [pc, #352]	@ (801bf68 <HAL_RCC_ClockConfig+0x274>)
 801be06:	4293      	cmp	r3, r2
 801be08:	d901      	bls.n	801be0e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801be0a:	2303      	movs	r3, #3
 801be0c:	e0a5      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801be0e:	4b57      	ldr	r3, [pc, #348]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801be10:	68db      	ldr	r3, [r3, #12]
 801be12:	220c      	movs	r2, #12
 801be14:	4013      	ands	r3, r2
 801be16:	2b08      	cmp	r3, #8
 801be18:	d1ef      	bne.n	801bdfa <HAL_RCC_ClockConfig+0x106>
 801be1a:	e03a      	b.n	801be92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	685b      	ldr	r3, [r3, #4]
 801be20:	2b03      	cmp	r3, #3
 801be22:	d111      	bne.n	801be48 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801be24:	e009      	b.n	801be3a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801be26:	f7f8 ff55 	bl	8014cd4 <HAL_GetTick>
 801be2a:	0002      	movs	r2, r0
 801be2c:	68fb      	ldr	r3, [r7, #12]
 801be2e:	1ad3      	subs	r3, r2, r3
 801be30:	4a4d      	ldr	r2, [pc, #308]	@ (801bf68 <HAL_RCC_ClockConfig+0x274>)
 801be32:	4293      	cmp	r3, r2
 801be34:	d901      	bls.n	801be3a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801be36:	2303      	movs	r3, #3
 801be38:	e08f      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801be3a:	4b4c      	ldr	r3, [pc, #304]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801be3c:	68db      	ldr	r3, [r3, #12]
 801be3e:	220c      	movs	r2, #12
 801be40:	4013      	ands	r3, r2
 801be42:	2b0c      	cmp	r3, #12
 801be44:	d1ef      	bne.n	801be26 <HAL_RCC_ClockConfig+0x132>
 801be46:	e024      	b.n	801be92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	685b      	ldr	r3, [r3, #4]
 801be4c:	2b01      	cmp	r3, #1
 801be4e:	d11b      	bne.n	801be88 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801be50:	e009      	b.n	801be66 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801be52:	f7f8 ff3f 	bl	8014cd4 <HAL_GetTick>
 801be56:	0002      	movs	r2, r0
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	1ad3      	subs	r3, r2, r3
 801be5c:	4a42      	ldr	r2, [pc, #264]	@ (801bf68 <HAL_RCC_ClockConfig+0x274>)
 801be5e:	4293      	cmp	r3, r2
 801be60:	d901      	bls.n	801be66 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801be62:	2303      	movs	r3, #3
 801be64:	e079      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801be66:	4b41      	ldr	r3, [pc, #260]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801be68:	68db      	ldr	r3, [r3, #12]
 801be6a:	220c      	movs	r2, #12
 801be6c:	4013      	ands	r3, r2
 801be6e:	2b04      	cmp	r3, #4
 801be70:	d1ef      	bne.n	801be52 <HAL_RCC_ClockConfig+0x15e>
 801be72:	e00e      	b.n	801be92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801be74:	f7f8 ff2e 	bl	8014cd4 <HAL_GetTick>
 801be78:	0002      	movs	r2, r0
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	1ad3      	subs	r3, r2, r3
 801be7e:	4a3a      	ldr	r2, [pc, #232]	@ (801bf68 <HAL_RCC_ClockConfig+0x274>)
 801be80:	4293      	cmp	r3, r2
 801be82:	d901      	bls.n	801be88 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801be84:	2303      	movs	r3, #3
 801be86:	e068      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801be88:	4b38      	ldr	r3, [pc, #224]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801be8a:	68db      	ldr	r3, [r3, #12]
 801be8c:	220c      	movs	r2, #12
 801be8e:	4013      	ands	r3, r2
 801be90:	d1f0      	bne.n	801be74 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801be92:	4b34      	ldr	r3, [pc, #208]	@ (801bf64 <HAL_RCC_ClockConfig+0x270>)
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	2201      	movs	r2, #1
 801be98:	4013      	ands	r3, r2
 801be9a:	683a      	ldr	r2, [r7, #0]
 801be9c:	429a      	cmp	r2, r3
 801be9e:	d21e      	bcs.n	801bede <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bea0:	4b30      	ldr	r3, [pc, #192]	@ (801bf64 <HAL_RCC_ClockConfig+0x270>)
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	2201      	movs	r2, #1
 801bea6:	4393      	bics	r3, r2
 801bea8:	0019      	movs	r1, r3
 801beaa:	4b2e      	ldr	r3, [pc, #184]	@ (801bf64 <HAL_RCC_ClockConfig+0x270>)
 801beac:	683a      	ldr	r2, [r7, #0]
 801beae:	430a      	orrs	r2, r1
 801beb0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801beb2:	f7f8 ff0f 	bl	8014cd4 <HAL_GetTick>
 801beb6:	0003      	movs	r3, r0
 801beb8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801beba:	e009      	b.n	801bed0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bebc:	f7f8 ff0a 	bl	8014cd4 <HAL_GetTick>
 801bec0:	0002      	movs	r2, r0
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	1ad3      	subs	r3, r2, r3
 801bec6:	4a28      	ldr	r2, [pc, #160]	@ (801bf68 <HAL_RCC_ClockConfig+0x274>)
 801bec8:	4293      	cmp	r3, r2
 801beca:	d901      	bls.n	801bed0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801becc:	2303      	movs	r3, #3
 801bece:	e044      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bed0:	4b24      	ldr	r3, [pc, #144]	@ (801bf64 <HAL_RCC_ClockConfig+0x270>)
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	2201      	movs	r2, #1
 801bed6:	4013      	ands	r3, r2
 801bed8:	683a      	ldr	r2, [r7, #0]
 801beda:	429a      	cmp	r2, r3
 801bedc:	d1ee      	bne.n	801bebc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	2204      	movs	r2, #4
 801bee4:	4013      	ands	r3, r2
 801bee6:	d009      	beq.n	801befc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bee8:	4b20      	ldr	r3, [pc, #128]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801beea:	68db      	ldr	r3, [r3, #12]
 801beec:	4a20      	ldr	r2, [pc, #128]	@ (801bf70 <HAL_RCC_ClockConfig+0x27c>)
 801beee:	4013      	ands	r3, r2
 801bef0:	0019      	movs	r1, r3
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	68da      	ldr	r2, [r3, #12]
 801bef6:	4b1d      	ldr	r3, [pc, #116]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bef8:	430a      	orrs	r2, r1
 801befa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	2208      	movs	r2, #8
 801bf02:	4013      	ands	r3, r2
 801bf04:	d00a      	beq.n	801bf1c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801bf06:	4b19      	ldr	r3, [pc, #100]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bf08:	68db      	ldr	r3, [r3, #12]
 801bf0a:	4a1a      	ldr	r2, [pc, #104]	@ (801bf74 <HAL_RCC_ClockConfig+0x280>)
 801bf0c:	4013      	ands	r3, r2
 801bf0e:	0019      	movs	r1, r3
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	691b      	ldr	r3, [r3, #16]
 801bf14:	00da      	lsls	r2, r3, #3
 801bf16:	4b15      	ldr	r3, [pc, #84]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bf18:	430a      	orrs	r2, r1
 801bf1a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801bf1c:	f000 f832 	bl	801bf84 <HAL_RCC_GetSysClockFreq>
 801bf20:	0001      	movs	r1, r0
 801bf22:	4b12      	ldr	r3, [pc, #72]	@ (801bf6c <HAL_RCC_ClockConfig+0x278>)
 801bf24:	68db      	ldr	r3, [r3, #12]
 801bf26:	091b      	lsrs	r3, r3, #4
 801bf28:	220f      	movs	r2, #15
 801bf2a:	4013      	ands	r3, r2
 801bf2c:	4a12      	ldr	r2, [pc, #72]	@ (801bf78 <HAL_RCC_ClockConfig+0x284>)
 801bf2e:	5cd3      	ldrb	r3, [r2, r3]
 801bf30:	000a      	movs	r2, r1
 801bf32:	40da      	lsrs	r2, r3
 801bf34:	4b11      	ldr	r3, [pc, #68]	@ (801bf7c <HAL_RCC_ClockConfig+0x288>)
 801bf36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bf38:	4b11      	ldr	r3, [pc, #68]	@ (801bf80 <HAL_RCC_ClockConfig+0x28c>)
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	250b      	movs	r5, #11
 801bf3e:	197c      	adds	r4, r7, r5
 801bf40:	0018      	movs	r0, r3
 801bf42:	f7f8 fe81 	bl	8014c48 <HAL_InitTick>
 801bf46:	0003      	movs	r3, r0
 801bf48:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801bf4a:	197b      	adds	r3, r7, r5
 801bf4c:	781b      	ldrb	r3, [r3, #0]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d002      	beq.n	801bf58 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801bf52:	197b      	adds	r3, r7, r5
 801bf54:	781b      	ldrb	r3, [r3, #0]
 801bf56:	e000      	b.n	801bf5a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801bf58:	2300      	movs	r3, #0
}
 801bf5a:	0018      	movs	r0, r3
 801bf5c:	46bd      	mov	sp, r7
 801bf5e:	b004      	add	sp, #16
 801bf60:	bdb0      	pop	{r4, r5, r7, pc}
 801bf62:	46c0      	nop			@ (mov r8, r8)
 801bf64:	40022000 	.word	0x40022000
 801bf68:	00001388 	.word	0x00001388
 801bf6c:	40021000 	.word	0x40021000
 801bf70:	fffff8ff 	.word	0xfffff8ff
 801bf74:	ffffc7ff 	.word	0xffffc7ff
 801bf78:	0802ef7c 	.word	0x0802ef7c
 801bf7c:	200000ec 	.word	0x200000ec
 801bf80:	200000fc 	.word	0x200000fc

0801bf84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bf84:	b5b0      	push	{r4, r5, r7, lr}
 801bf86:	b08e      	sub	sp, #56	@ 0x38
 801bf88:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801bf8a:	4b4c      	ldr	r3, [pc, #304]	@ (801c0bc <HAL_RCC_GetSysClockFreq+0x138>)
 801bf8c:	68db      	ldr	r3, [r3, #12]
 801bf8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801bf90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bf92:	230c      	movs	r3, #12
 801bf94:	4013      	ands	r3, r2
 801bf96:	2b0c      	cmp	r3, #12
 801bf98:	d014      	beq.n	801bfc4 <HAL_RCC_GetSysClockFreq+0x40>
 801bf9a:	d900      	bls.n	801bf9e <HAL_RCC_GetSysClockFreq+0x1a>
 801bf9c:	e07b      	b.n	801c096 <HAL_RCC_GetSysClockFreq+0x112>
 801bf9e:	2b04      	cmp	r3, #4
 801bfa0:	d002      	beq.n	801bfa8 <HAL_RCC_GetSysClockFreq+0x24>
 801bfa2:	2b08      	cmp	r3, #8
 801bfa4:	d00b      	beq.n	801bfbe <HAL_RCC_GetSysClockFreq+0x3a>
 801bfa6:	e076      	b.n	801c096 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bfa8:	4b44      	ldr	r3, [pc, #272]	@ (801c0bc <HAL_RCC_GetSysClockFreq+0x138>)
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	2210      	movs	r2, #16
 801bfae:	4013      	ands	r3, r2
 801bfb0:	d002      	beq.n	801bfb8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801bfb2:	4b43      	ldr	r3, [pc, #268]	@ (801c0c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bfb4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801bfb6:	e07c      	b.n	801c0b2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801bfb8:	4b42      	ldr	r3, [pc, #264]	@ (801c0c4 <HAL_RCC_GetSysClockFreq+0x140>)
 801bfba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bfbc:	e079      	b.n	801c0b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801bfbe:	4b42      	ldr	r3, [pc, #264]	@ (801c0c8 <HAL_RCC_GetSysClockFreq+0x144>)
 801bfc0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bfc2:	e076      	b.n	801c0b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801bfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfc6:	0c9a      	lsrs	r2, r3, #18
 801bfc8:	230f      	movs	r3, #15
 801bfca:	401a      	ands	r2, r3
 801bfcc:	4b3f      	ldr	r3, [pc, #252]	@ (801c0cc <HAL_RCC_GetSysClockFreq+0x148>)
 801bfce:	5c9b      	ldrb	r3, [r3, r2]
 801bfd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801bfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfd4:	0d9a      	lsrs	r2, r3, #22
 801bfd6:	2303      	movs	r3, #3
 801bfd8:	4013      	ands	r3, r2
 801bfda:	3301      	adds	r3, #1
 801bfdc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bfde:	4b37      	ldr	r3, [pc, #220]	@ (801c0bc <HAL_RCC_GetSysClockFreq+0x138>)
 801bfe0:	68da      	ldr	r2, [r3, #12]
 801bfe2:	2380      	movs	r3, #128	@ 0x80
 801bfe4:	025b      	lsls	r3, r3, #9
 801bfe6:	4013      	ands	r3, r2
 801bfe8:	d01a      	beq.n	801c020 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfec:	61bb      	str	r3, [r7, #24]
 801bfee:	2300      	movs	r3, #0
 801bff0:	61fb      	str	r3, [r7, #28]
 801bff2:	4a35      	ldr	r2, [pc, #212]	@ (801c0c8 <HAL_RCC_GetSysClockFreq+0x144>)
 801bff4:	2300      	movs	r3, #0
 801bff6:	69b8      	ldr	r0, [r7, #24]
 801bff8:	69f9      	ldr	r1, [r7, #28]
 801bffa:	f7e4 fae1 	bl	80005c0 <__aeabi_lmul>
 801bffe:	0002      	movs	r2, r0
 801c000:	000b      	movs	r3, r1
 801c002:	0010      	movs	r0, r2
 801c004:	0019      	movs	r1, r3
 801c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c008:	613b      	str	r3, [r7, #16]
 801c00a:	2300      	movs	r3, #0
 801c00c:	617b      	str	r3, [r7, #20]
 801c00e:	693a      	ldr	r2, [r7, #16]
 801c010:	697b      	ldr	r3, [r7, #20]
 801c012:	f7e4 fab5 	bl	8000580 <__aeabi_uldivmod>
 801c016:	0002      	movs	r2, r0
 801c018:	000b      	movs	r3, r1
 801c01a:	0013      	movs	r3, r2
 801c01c:	637b      	str	r3, [r7, #52]	@ 0x34
 801c01e:	e037      	b.n	801c090 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801c020:	4b26      	ldr	r3, [pc, #152]	@ (801c0bc <HAL_RCC_GetSysClockFreq+0x138>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	2210      	movs	r2, #16
 801c026:	4013      	ands	r3, r2
 801c028:	d01a      	beq.n	801c060 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801c02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c02c:	60bb      	str	r3, [r7, #8]
 801c02e:	2300      	movs	r3, #0
 801c030:	60fb      	str	r3, [r7, #12]
 801c032:	4a23      	ldr	r2, [pc, #140]	@ (801c0c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 801c034:	2300      	movs	r3, #0
 801c036:	68b8      	ldr	r0, [r7, #8]
 801c038:	68f9      	ldr	r1, [r7, #12]
 801c03a:	f7e4 fac1 	bl	80005c0 <__aeabi_lmul>
 801c03e:	0002      	movs	r2, r0
 801c040:	000b      	movs	r3, r1
 801c042:	0010      	movs	r0, r2
 801c044:	0019      	movs	r1, r3
 801c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c048:	603b      	str	r3, [r7, #0]
 801c04a:	2300      	movs	r3, #0
 801c04c:	607b      	str	r3, [r7, #4]
 801c04e:	683a      	ldr	r2, [r7, #0]
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	f7e4 fa95 	bl	8000580 <__aeabi_uldivmod>
 801c056:	0002      	movs	r2, r0
 801c058:	000b      	movs	r3, r1
 801c05a:	0013      	movs	r3, r2
 801c05c:	637b      	str	r3, [r7, #52]	@ 0x34
 801c05e:	e017      	b.n	801c090 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801c060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c062:	0018      	movs	r0, r3
 801c064:	2300      	movs	r3, #0
 801c066:	0019      	movs	r1, r3
 801c068:	4a16      	ldr	r2, [pc, #88]	@ (801c0c4 <HAL_RCC_GetSysClockFreq+0x140>)
 801c06a:	2300      	movs	r3, #0
 801c06c:	f7e4 faa8 	bl	80005c0 <__aeabi_lmul>
 801c070:	0002      	movs	r2, r0
 801c072:	000b      	movs	r3, r1
 801c074:	0010      	movs	r0, r2
 801c076:	0019      	movs	r1, r3
 801c078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c07a:	001c      	movs	r4, r3
 801c07c:	2300      	movs	r3, #0
 801c07e:	001d      	movs	r5, r3
 801c080:	0022      	movs	r2, r4
 801c082:	002b      	movs	r3, r5
 801c084:	f7e4 fa7c 	bl	8000580 <__aeabi_uldivmod>
 801c088:	0002      	movs	r2, r0
 801c08a:	000b      	movs	r3, r1
 801c08c:	0013      	movs	r3, r2
 801c08e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801c090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c092:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801c094:	e00d      	b.n	801c0b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801c096:	4b09      	ldr	r3, [pc, #36]	@ (801c0bc <HAL_RCC_GetSysClockFreq+0x138>)
 801c098:	685b      	ldr	r3, [r3, #4]
 801c09a:	0b5b      	lsrs	r3, r3, #13
 801c09c:	2207      	movs	r2, #7
 801c09e:	4013      	ands	r3, r2
 801c0a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801c0a2:	6a3b      	ldr	r3, [r7, #32]
 801c0a4:	3301      	adds	r3, #1
 801c0a6:	2280      	movs	r2, #128	@ 0x80
 801c0a8:	0212      	lsls	r2, r2, #8
 801c0aa:	409a      	lsls	r2, r3
 801c0ac:	0013      	movs	r3, r2
 801c0ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801c0b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801c0b4:	0018      	movs	r0, r3
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	b00e      	add	sp, #56	@ 0x38
 801c0ba:	bdb0      	pop	{r4, r5, r7, pc}
 801c0bc:	40021000 	.word	0x40021000
 801c0c0:	003d0900 	.word	0x003d0900
 801c0c4:	00f42400 	.word	0x00f42400
 801c0c8:	007a1200 	.word	0x007a1200
 801c0cc:	0802ef94 	.word	0x0802ef94

0801c0d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c0d0:	b580      	push	{r7, lr}
 801c0d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801c0d4:	4b02      	ldr	r3, [pc, #8]	@ (801c0e0 <HAL_RCC_GetHCLKFreq+0x10>)
 801c0d6:	681b      	ldr	r3, [r3, #0]
}
 801c0d8:	0018      	movs	r0, r3
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	bd80      	pop	{r7, pc}
 801c0de:	46c0      	nop			@ (mov r8, r8)
 801c0e0:	200000ec 	.word	0x200000ec

0801c0e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801c0e8:	f7ff fff2 	bl	801c0d0 <HAL_RCC_GetHCLKFreq>
 801c0ec:	0001      	movs	r1, r0
 801c0ee:	4b06      	ldr	r3, [pc, #24]	@ (801c108 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c0f0:	68db      	ldr	r3, [r3, #12]
 801c0f2:	0a1b      	lsrs	r3, r3, #8
 801c0f4:	2207      	movs	r2, #7
 801c0f6:	4013      	ands	r3, r2
 801c0f8:	4a04      	ldr	r2, [pc, #16]	@ (801c10c <HAL_RCC_GetPCLK1Freq+0x28>)
 801c0fa:	5cd3      	ldrb	r3, [r2, r3]
 801c0fc:	40d9      	lsrs	r1, r3
 801c0fe:	000b      	movs	r3, r1
}
 801c100:	0018      	movs	r0, r3
 801c102:	46bd      	mov	sp, r7
 801c104:	bd80      	pop	{r7, pc}
 801c106:	46c0      	nop			@ (mov r8, r8)
 801c108:	40021000 	.word	0x40021000
 801c10c:	0802ef8c 	.word	0x0802ef8c

0801c110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801c114:	f7ff ffdc 	bl	801c0d0 <HAL_RCC_GetHCLKFreq>
 801c118:	0001      	movs	r1, r0
 801c11a:	4b06      	ldr	r3, [pc, #24]	@ (801c134 <HAL_RCC_GetPCLK2Freq+0x24>)
 801c11c:	68db      	ldr	r3, [r3, #12]
 801c11e:	0adb      	lsrs	r3, r3, #11
 801c120:	2207      	movs	r2, #7
 801c122:	4013      	ands	r3, r2
 801c124:	4a04      	ldr	r2, [pc, #16]	@ (801c138 <HAL_RCC_GetPCLK2Freq+0x28>)
 801c126:	5cd3      	ldrb	r3, [r2, r3]
 801c128:	40d9      	lsrs	r1, r3
 801c12a:	000b      	movs	r3, r1
}
 801c12c:	0018      	movs	r0, r3
 801c12e:	46bd      	mov	sp, r7
 801c130:	bd80      	pop	{r7, pc}
 801c132:	46c0      	nop			@ (mov r8, r8)
 801c134:	40021000 	.word	0x40021000
 801c138:	0802ef8c 	.word	0x0802ef8c

0801c13c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c13c:	b580      	push	{r7, lr}
 801c13e:	b086      	sub	sp, #24
 801c140:	af00      	add	r7, sp, #0
 801c142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801c144:	2017      	movs	r0, #23
 801c146:	183b      	adds	r3, r7, r0
 801c148:	2200      	movs	r2, #0
 801c14a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	681b      	ldr	r3, [r3, #0]
 801c150:	2220      	movs	r2, #32
 801c152:	4013      	ands	r3, r2
 801c154:	d100      	bne.n	801c158 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801c156:	e0c7      	b.n	801c2e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801c158:	4b9b      	ldr	r3, [pc, #620]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c15a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c15c:	2380      	movs	r3, #128	@ 0x80
 801c15e:	055b      	lsls	r3, r3, #21
 801c160:	4013      	ands	r3, r2
 801c162:	d109      	bne.n	801c178 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c164:	4b98      	ldr	r3, [pc, #608]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c168:	4b97      	ldr	r3, [pc, #604]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c16a:	2180      	movs	r1, #128	@ 0x80
 801c16c:	0549      	lsls	r1, r1, #21
 801c16e:	430a      	orrs	r2, r1
 801c170:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801c172:	183b      	adds	r3, r7, r0
 801c174:	2201      	movs	r2, #1
 801c176:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c178:	4b94      	ldr	r3, [pc, #592]	@ (801c3cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801c17a:	681a      	ldr	r2, [r3, #0]
 801c17c:	2380      	movs	r3, #128	@ 0x80
 801c17e:	005b      	lsls	r3, r3, #1
 801c180:	4013      	ands	r3, r2
 801c182:	d11a      	bne.n	801c1ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801c184:	4b91      	ldr	r3, [pc, #580]	@ (801c3cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801c186:	681a      	ldr	r2, [r3, #0]
 801c188:	4b90      	ldr	r3, [pc, #576]	@ (801c3cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801c18a:	2180      	movs	r1, #128	@ 0x80
 801c18c:	0049      	lsls	r1, r1, #1
 801c18e:	430a      	orrs	r2, r1
 801c190:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c192:	f7f8 fd9f 	bl	8014cd4 <HAL_GetTick>
 801c196:	0003      	movs	r3, r0
 801c198:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c19a:	e008      	b.n	801c1ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c19c:	f7f8 fd9a 	bl	8014cd4 <HAL_GetTick>
 801c1a0:	0002      	movs	r2, r0
 801c1a2:	693b      	ldr	r3, [r7, #16]
 801c1a4:	1ad3      	subs	r3, r2, r3
 801c1a6:	2b64      	cmp	r3, #100	@ 0x64
 801c1a8:	d901      	bls.n	801c1ae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801c1aa:	2303      	movs	r3, #3
 801c1ac:	e107      	b.n	801c3be <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c1ae:	4b87      	ldr	r3, [pc, #540]	@ (801c3cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801c1b0:	681a      	ldr	r2, [r3, #0]
 801c1b2:	2380      	movs	r3, #128	@ 0x80
 801c1b4:	005b      	lsls	r3, r3, #1
 801c1b6:	4013      	ands	r3, r2
 801c1b8:	d0f0      	beq.n	801c19c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801c1ba:	4b83      	ldr	r3, [pc, #524]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c1bc:	681a      	ldr	r2, [r3, #0]
 801c1be:	23c0      	movs	r3, #192	@ 0xc0
 801c1c0:	039b      	lsls	r3, r3, #14
 801c1c2:	4013      	ands	r3, r2
 801c1c4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	685a      	ldr	r2, [r3, #4]
 801c1ca:	23c0      	movs	r3, #192	@ 0xc0
 801c1cc:	039b      	lsls	r3, r3, #14
 801c1ce:	4013      	ands	r3, r2
 801c1d0:	68fa      	ldr	r2, [r7, #12]
 801c1d2:	429a      	cmp	r2, r3
 801c1d4:	d013      	beq.n	801c1fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	685a      	ldr	r2, [r3, #4]
 801c1da:	23c0      	movs	r3, #192	@ 0xc0
 801c1dc:	029b      	lsls	r3, r3, #10
 801c1de:	401a      	ands	r2, r3
 801c1e0:	23c0      	movs	r3, #192	@ 0xc0
 801c1e2:	029b      	lsls	r3, r3, #10
 801c1e4:	429a      	cmp	r2, r3
 801c1e6:	d10a      	bne.n	801c1fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801c1e8:	4b77      	ldr	r3, [pc, #476]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c1ea:	681a      	ldr	r2, [r3, #0]
 801c1ec:	2380      	movs	r3, #128	@ 0x80
 801c1ee:	029b      	lsls	r3, r3, #10
 801c1f0:	401a      	ands	r2, r3
 801c1f2:	2380      	movs	r3, #128	@ 0x80
 801c1f4:	029b      	lsls	r3, r3, #10
 801c1f6:	429a      	cmp	r2, r3
 801c1f8:	d101      	bne.n	801c1fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801c1fa:	2301      	movs	r3, #1
 801c1fc:	e0df      	b.n	801c3be <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801c1fe:	4b72      	ldr	r3, [pc, #456]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c200:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c202:	23c0      	movs	r3, #192	@ 0xc0
 801c204:	029b      	lsls	r3, r3, #10
 801c206:	4013      	ands	r3, r2
 801c208:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d03b      	beq.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	685a      	ldr	r2, [r3, #4]
 801c214:	23c0      	movs	r3, #192	@ 0xc0
 801c216:	029b      	lsls	r3, r3, #10
 801c218:	4013      	ands	r3, r2
 801c21a:	68fa      	ldr	r2, [r7, #12]
 801c21c:	429a      	cmp	r2, r3
 801c21e:	d033      	beq.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	2220      	movs	r2, #32
 801c226:	4013      	ands	r3, r2
 801c228:	d02e      	beq.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801c22a:	4b67      	ldr	r3, [pc, #412]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c22c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c22e:	4a68      	ldr	r2, [pc, #416]	@ (801c3d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801c230:	4013      	ands	r3, r2
 801c232:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801c234:	4b64      	ldr	r3, [pc, #400]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c238:	4b63      	ldr	r3, [pc, #396]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c23a:	2180      	movs	r1, #128	@ 0x80
 801c23c:	0309      	lsls	r1, r1, #12
 801c23e:	430a      	orrs	r2, r1
 801c240:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801c242:	4b61      	ldr	r3, [pc, #388]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c246:	4b60      	ldr	r3, [pc, #384]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c248:	4962      	ldr	r1, [pc, #392]	@ (801c3d4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801c24a:	400a      	ands	r2, r1
 801c24c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801c24e:	4b5e      	ldr	r3, [pc, #376]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c250:	68fa      	ldr	r2, [r7, #12]
 801c252:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801c254:	68fa      	ldr	r2, [r7, #12]
 801c256:	2380      	movs	r3, #128	@ 0x80
 801c258:	005b      	lsls	r3, r3, #1
 801c25a:	4013      	ands	r3, r2
 801c25c:	d014      	beq.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801c25e:	f7f8 fd39 	bl	8014cd4 <HAL_GetTick>
 801c262:	0003      	movs	r3, r0
 801c264:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c266:	e009      	b.n	801c27c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c268:	f7f8 fd34 	bl	8014cd4 <HAL_GetTick>
 801c26c:	0002      	movs	r2, r0
 801c26e:	693b      	ldr	r3, [r7, #16]
 801c270:	1ad3      	subs	r3, r2, r3
 801c272:	4a59      	ldr	r2, [pc, #356]	@ (801c3d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801c274:	4293      	cmp	r3, r2
 801c276:	d901      	bls.n	801c27c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801c278:	2303      	movs	r3, #3
 801c27a:	e0a0      	b.n	801c3be <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c27c:	4b52      	ldr	r3, [pc, #328]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c27e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c280:	2380      	movs	r3, #128	@ 0x80
 801c282:	009b      	lsls	r3, r3, #2
 801c284:	4013      	ands	r3, r2
 801c286:	d0ef      	beq.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	2220      	movs	r2, #32
 801c28e:	4013      	ands	r3, r2
 801c290:	d01f      	beq.n	801c2d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	685a      	ldr	r2, [r3, #4]
 801c296:	23c0      	movs	r3, #192	@ 0xc0
 801c298:	029b      	lsls	r3, r3, #10
 801c29a:	401a      	ands	r2, r3
 801c29c:	23c0      	movs	r3, #192	@ 0xc0
 801c29e:	029b      	lsls	r3, r3, #10
 801c2a0:	429a      	cmp	r2, r3
 801c2a2:	d10c      	bne.n	801c2be <HAL_RCCEx_PeriphCLKConfig+0x182>
 801c2a4:	4b48      	ldr	r3, [pc, #288]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	4a4c      	ldr	r2, [pc, #304]	@ (801c3dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801c2aa:	4013      	ands	r3, r2
 801c2ac:	0019      	movs	r1, r3
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	685a      	ldr	r2, [r3, #4]
 801c2b2:	23c0      	movs	r3, #192	@ 0xc0
 801c2b4:	039b      	lsls	r3, r3, #14
 801c2b6:	401a      	ands	r2, r3
 801c2b8:	4b43      	ldr	r3, [pc, #268]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c2ba:	430a      	orrs	r2, r1
 801c2bc:	601a      	str	r2, [r3, #0]
 801c2be:	4b42      	ldr	r3, [pc, #264]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c2c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	685a      	ldr	r2, [r3, #4]
 801c2c6:	23c0      	movs	r3, #192	@ 0xc0
 801c2c8:	029b      	lsls	r3, r3, #10
 801c2ca:	401a      	ands	r2, r3
 801c2cc:	4b3e      	ldr	r3, [pc, #248]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c2ce:	430a      	orrs	r2, r1
 801c2d0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801c2d2:	2317      	movs	r3, #23
 801c2d4:	18fb      	adds	r3, r7, r3
 801c2d6:	781b      	ldrb	r3, [r3, #0]
 801c2d8:	2b01      	cmp	r3, #1
 801c2da:	d105      	bne.n	801c2e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c2dc:	4b3a      	ldr	r3, [pc, #232]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c2de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c2e0:	4b39      	ldr	r3, [pc, #228]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c2e2:	493f      	ldr	r1, [pc, #252]	@ (801c3e0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801c2e4:	400a      	ands	r2, r1
 801c2e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	2201      	movs	r2, #1
 801c2ee:	4013      	ands	r3, r2
 801c2f0:	d009      	beq.n	801c306 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c2f2:	4b35      	ldr	r3, [pc, #212]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c2f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c2f6:	2203      	movs	r2, #3
 801c2f8:	4393      	bics	r3, r2
 801c2fa:	0019      	movs	r1, r3
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	689a      	ldr	r2, [r3, #8]
 801c300:	4b31      	ldr	r3, [pc, #196]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c302:	430a      	orrs	r2, r1
 801c304:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	681b      	ldr	r3, [r3, #0]
 801c30a:	2202      	movs	r2, #2
 801c30c:	4013      	ands	r3, r2
 801c30e:	d009      	beq.n	801c324 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c310:	4b2d      	ldr	r3, [pc, #180]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c314:	220c      	movs	r2, #12
 801c316:	4393      	bics	r3, r2
 801c318:	0019      	movs	r1, r3
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	68da      	ldr	r2, [r3, #12]
 801c31e:	4b2a      	ldr	r3, [pc, #168]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c320:	430a      	orrs	r2, r1
 801c322:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	2204      	movs	r2, #4
 801c32a:	4013      	ands	r3, r2
 801c32c:	d009      	beq.n	801c342 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c32e:	4b26      	ldr	r3, [pc, #152]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c332:	4a2c      	ldr	r2, [pc, #176]	@ (801c3e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801c334:	4013      	ands	r3, r2
 801c336:	0019      	movs	r1, r3
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	691a      	ldr	r2, [r3, #16]
 801c33c:	4b22      	ldr	r3, [pc, #136]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c33e:	430a      	orrs	r2, r1
 801c340:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	2208      	movs	r2, #8
 801c348:	4013      	ands	r3, r2
 801c34a:	d009      	beq.n	801c360 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c34c:	4b1e      	ldr	r3, [pc, #120]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c34e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c350:	4a25      	ldr	r2, [pc, #148]	@ (801c3e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c352:	4013      	ands	r3, r2
 801c354:	0019      	movs	r1, r3
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	695a      	ldr	r2, [r3, #20]
 801c35a:	4b1b      	ldr	r3, [pc, #108]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c35c:	430a      	orrs	r2, r1
 801c35e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	681a      	ldr	r2, [r3, #0]
 801c364:	2380      	movs	r3, #128	@ 0x80
 801c366:	005b      	lsls	r3, r3, #1
 801c368:	4013      	ands	r3, r2
 801c36a:	d009      	beq.n	801c380 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c36c:	4b16      	ldr	r3, [pc, #88]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c36e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c370:	4a17      	ldr	r2, [pc, #92]	@ (801c3d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801c372:	4013      	ands	r3, r2
 801c374:	0019      	movs	r1, r3
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	699a      	ldr	r2, [r3, #24]
 801c37a:	4b13      	ldr	r3, [pc, #76]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c37c:	430a      	orrs	r2, r1
 801c37e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	2240      	movs	r2, #64	@ 0x40
 801c386:	4013      	ands	r3, r2
 801c388:	d009      	beq.n	801c39e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c38a:	4b0f      	ldr	r3, [pc, #60]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c38c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c38e:	4a17      	ldr	r2, [pc, #92]	@ (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801c390:	4013      	ands	r3, r2
 801c392:	0019      	movs	r1, r3
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	6a1a      	ldr	r2, [r3, #32]
 801c398:	4b0b      	ldr	r3, [pc, #44]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c39a:	430a      	orrs	r2, r1
 801c39c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	2280      	movs	r2, #128	@ 0x80
 801c3a4:	4013      	ands	r3, r2
 801c3a6:	d009      	beq.n	801c3bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801c3a8:	4b07      	ldr	r3, [pc, #28]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c3aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c3ac:	4a10      	ldr	r2, [pc, #64]	@ (801c3f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801c3ae:	4013      	ands	r3, r2
 801c3b0:	0019      	movs	r1, r3
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	69da      	ldr	r2, [r3, #28]
 801c3b6:	4b04      	ldr	r3, [pc, #16]	@ (801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c3b8:	430a      	orrs	r2, r1
 801c3ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801c3bc:	2300      	movs	r3, #0
}
 801c3be:	0018      	movs	r0, r3
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	b006      	add	sp, #24
 801c3c4:	bd80      	pop	{r7, pc}
 801c3c6:	46c0      	nop			@ (mov r8, r8)
 801c3c8:	40021000 	.word	0x40021000
 801c3cc:	40007000 	.word	0x40007000
 801c3d0:	fffcffff 	.word	0xfffcffff
 801c3d4:	fff7ffff 	.word	0xfff7ffff
 801c3d8:	00001388 	.word	0x00001388
 801c3dc:	ffcfffff 	.word	0xffcfffff
 801c3e0:	efffffff 	.word	0xefffffff
 801c3e4:	fffff3ff 	.word	0xfffff3ff
 801c3e8:	ffffcfff 	.word	0xffffcfff
 801c3ec:	fbffffff 	.word	0xfbffffff
 801c3f0:	fff3ffff 	.word	0xfff3ffff

0801c3f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c3f4:	b5b0      	push	{r4, r5, r7, lr}
 801c3f6:	b084      	sub	sp, #16
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801c3fc:	230f      	movs	r3, #15
 801c3fe:	18fb      	adds	r3, r7, r3
 801c400:	2201      	movs	r2, #1
 801c402:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	2b00      	cmp	r3, #0
 801c408:	d101      	bne.n	801c40e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801c40a:	2301      	movs	r3, #1
 801c40c:	e088      	b.n	801c520 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	2221      	movs	r2, #33	@ 0x21
 801c412:	5c9b      	ldrb	r3, [r3, r2]
 801c414:	b2db      	uxtb	r3, r3
 801c416:	2b00      	cmp	r3, #0
 801c418:	d107      	bne.n	801c42a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	2220      	movs	r2, #32
 801c41e:	2100      	movs	r1, #0
 801c420:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	0018      	movs	r0, r3
 801c426:	f7f2 fa5f 	bl	800e8e8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	2221      	movs	r2, #33	@ 0x21
 801c42e:	2102      	movs	r1, #2
 801c430:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	68db      	ldr	r3, [r3, #12]
 801c438:	2210      	movs	r2, #16
 801c43a:	4013      	ands	r3, r2
 801c43c:	2b10      	cmp	r3, #16
 801c43e:	d05f      	beq.n	801c500 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	22ca      	movs	r2, #202	@ 0xca
 801c446:	625a      	str	r2, [r3, #36]	@ 0x24
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	2253      	movs	r2, #83	@ 0x53
 801c44e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801c450:	250f      	movs	r5, #15
 801c452:	197c      	adds	r4, r7, r5
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	0018      	movs	r0, r3
 801c458:	f000 fa99 	bl	801c98e <RTC_EnterInitMode>
 801c45c:	0003      	movs	r3, r0
 801c45e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801c460:	0028      	movs	r0, r5
 801c462:	183b      	adds	r3, r7, r0
 801c464:	781b      	ldrb	r3, [r3, #0]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d12c      	bne.n	801c4c4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	689a      	ldr	r2, [r3, #8]
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	492c      	ldr	r1, [pc, #176]	@ (801c528 <HAL_RTC_Init+0x134>)
 801c476:	400a      	ands	r2, r1
 801c478:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	6899      	ldr	r1, [r3, #8]
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	685a      	ldr	r2, [r3, #4]
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	691b      	ldr	r3, [r3, #16]
 801c488:	431a      	orrs	r2, r3
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	699b      	ldr	r3, [r3, #24]
 801c48e:	431a      	orrs	r2, r3
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	430a      	orrs	r2, r1
 801c496:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	687a      	ldr	r2, [r7, #4]
 801c49e:	68d2      	ldr	r2, [r2, #12]
 801c4a0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	6919      	ldr	r1, [r3, #16]
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	689b      	ldr	r3, [r3, #8]
 801c4ac:	041a      	lsls	r2, r3, #16
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	430a      	orrs	r2, r1
 801c4b4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801c4b6:	183c      	adds	r4, r7, r0
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	0018      	movs	r0, r3
 801c4bc:	f000 faab 	bl	801ca16 <RTC_ExitInitMode>
 801c4c0:	0003      	movs	r3, r0
 801c4c2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801c4c4:	230f      	movs	r3, #15
 801c4c6:	18fb      	adds	r3, r7, r3
 801c4c8:	781b      	ldrb	r3, [r3, #0]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d113      	bne.n	801c4f6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	2103      	movs	r1, #3
 801c4da:	438a      	bics	r2, r1
 801c4dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	69da      	ldr	r2, [r3, #28]
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	695b      	ldr	r3, [r3, #20]
 801c4ec:	431a      	orrs	r2, r3
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	430a      	orrs	r2, r1
 801c4f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	22ff      	movs	r2, #255	@ 0xff
 801c4fc:	625a      	str	r2, [r3, #36]	@ 0x24
 801c4fe:	e003      	b.n	801c508 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801c500:	230f      	movs	r3, #15
 801c502:	18fb      	adds	r3, r7, r3
 801c504:	2200      	movs	r2, #0
 801c506:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801c508:	230f      	movs	r3, #15
 801c50a:	18fb      	adds	r3, r7, r3
 801c50c:	781b      	ldrb	r3, [r3, #0]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d103      	bne.n	801c51a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	2221      	movs	r2, #33	@ 0x21
 801c516:	2101      	movs	r1, #1
 801c518:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801c51a:	230f      	movs	r3, #15
 801c51c:	18fb      	adds	r3, r7, r3
 801c51e:	781b      	ldrb	r3, [r3, #0]
}
 801c520:	0018      	movs	r0, r3
 801c522:	46bd      	mov	sp, r7
 801c524:	b004      	add	sp, #16
 801c526:	bdb0      	pop	{r4, r5, r7, pc}
 801c528:	ff8fffbf 	.word	0xff8fffbf

0801c52c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c52c:	b5b0      	push	{r4, r5, r7, lr}
 801c52e:	b086      	sub	sp, #24
 801c530:	af00      	add	r7, sp, #0
 801c532:	60f8      	str	r0, [r7, #12]
 801c534:	60b9      	str	r1, [r7, #8]
 801c536:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c538:	2300      	movs	r3, #0
 801c53a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	2220      	movs	r2, #32
 801c540:	5c9b      	ldrb	r3, [r3, r2]
 801c542:	2b01      	cmp	r3, #1
 801c544:	d101      	bne.n	801c54a <HAL_RTC_SetTime+0x1e>
 801c546:	2302      	movs	r3, #2
 801c548:	e092      	b.n	801c670 <HAL_RTC_SetTime+0x144>
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	2220      	movs	r2, #32
 801c54e:	2101      	movs	r1, #1
 801c550:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	2221      	movs	r2, #33	@ 0x21
 801c556:	2102      	movs	r1, #2
 801c558:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d125      	bne.n	801c5ac <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	689b      	ldr	r3, [r3, #8]
 801c566:	2240      	movs	r2, #64	@ 0x40
 801c568:	4013      	ands	r3, r2
 801c56a:	d102      	bne.n	801c572 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c56c:	68bb      	ldr	r3, [r7, #8]
 801c56e:	2200      	movs	r2, #0
 801c570:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c572:	68bb      	ldr	r3, [r7, #8]
 801c574:	781b      	ldrb	r3, [r3, #0]
 801c576:	0018      	movs	r0, r3
 801c578:	f000 fa77 	bl	801ca6a <RTC_ByteToBcd2>
 801c57c:	0003      	movs	r3, r0
 801c57e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c580:	68bb      	ldr	r3, [r7, #8]
 801c582:	785b      	ldrb	r3, [r3, #1]
 801c584:	0018      	movs	r0, r3
 801c586:	f000 fa70 	bl	801ca6a <RTC_ByteToBcd2>
 801c58a:	0003      	movs	r3, r0
 801c58c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c58e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801c590:	68bb      	ldr	r3, [r7, #8]
 801c592:	789b      	ldrb	r3, [r3, #2]
 801c594:	0018      	movs	r0, r3
 801c596:	f000 fa68 	bl	801ca6a <RTC_ByteToBcd2>
 801c59a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c59c:	0022      	movs	r2, r4
 801c59e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801c5a0:	68bb      	ldr	r3, [r7, #8]
 801c5a2:	78db      	ldrb	r3, [r3, #3]
 801c5a4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c5a6:	4313      	orrs	r3, r2
 801c5a8:	617b      	str	r3, [r7, #20]
 801c5aa:	e017      	b.n	801c5dc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	689b      	ldr	r3, [r3, #8]
 801c5b2:	2240      	movs	r2, #64	@ 0x40
 801c5b4:	4013      	ands	r3, r2
 801c5b6:	d102      	bne.n	801c5be <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c5b8:	68bb      	ldr	r3, [r7, #8]
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c5be:	68bb      	ldr	r3, [r7, #8]
 801c5c0:	781b      	ldrb	r3, [r3, #0]
 801c5c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c5c4:	68bb      	ldr	r3, [r7, #8]
 801c5c6:	785b      	ldrb	r3, [r3, #1]
 801c5c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c5ca:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801c5cc:	68ba      	ldr	r2, [r7, #8]
 801c5ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c5d0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801c5d2:	68bb      	ldr	r3, [r7, #8]
 801c5d4:	78db      	ldrb	r3, [r3, #3]
 801c5d6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c5d8:	4313      	orrs	r3, r2
 801c5da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	22ca      	movs	r2, #202	@ 0xca
 801c5e2:	625a      	str	r2, [r3, #36]	@ 0x24
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	2253      	movs	r2, #83	@ 0x53
 801c5ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c5ec:	2513      	movs	r5, #19
 801c5ee:	197c      	adds	r4, r7, r5
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	0018      	movs	r0, r3
 801c5f4:	f000 f9cb 	bl	801c98e <RTC_EnterInitMode>
 801c5f8:	0003      	movs	r3, r0
 801c5fa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c5fc:	0028      	movs	r0, r5
 801c5fe:	183b      	adds	r3, r7, r0
 801c600:	781b      	ldrb	r3, [r3, #0]
 801c602:	2b00      	cmp	r3, #0
 801c604:	d120      	bne.n	801c648 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	697a      	ldr	r2, [r7, #20]
 801c60c:	491a      	ldr	r1, [pc, #104]	@ (801c678 <HAL_RTC_SetTime+0x14c>)
 801c60e:	400a      	ands	r2, r1
 801c610:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	689a      	ldr	r2, [r3, #8]
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	4917      	ldr	r1, [pc, #92]	@ (801c67c <HAL_RTC_SetTime+0x150>)
 801c61e:	400a      	ands	r2, r1
 801c620:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	6899      	ldr	r1, [r3, #8]
 801c628:	68bb      	ldr	r3, [r7, #8]
 801c62a:	68da      	ldr	r2, [r3, #12]
 801c62c:	68bb      	ldr	r3, [r7, #8]
 801c62e:	691b      	ldr	r3, [r3, #16]
 801c630:	431a      	orrs	r2, r3
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	430a      	orrs	r2, r1
 801c638:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c63a:	183c      	adds	r4, r7, r0
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	0018      	movs	r0, r3
 801c640:	f000 f9e9 	bl	801ca16 <RTC_ExitInitMode>
 801c644:	0003      	movs	r3, r0
 801c646:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c648:	2313      	movs	r3, #19
 801c64a:	18fb      	adds	r3, r7, r3
 801c64c:	781b      	ldrb	r3, [r3, #0]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d103      	bne.n	801c65a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	2221      	movs	r2, #33	@ 0x21
 801c656:	2101      	movs	r1, #1
 801c658:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	22ff      	movs	r2, #255	@ 0xff
 801c660:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	2220      	movs	r2, #32
 801c666:	2100      	movs	r1, #0
 801c668:	5499      	strb	r1, [r3, r2]

  return status;
 801c66a:	2313      	movs	r3, #19
 801c66c:	18fb      	adds	r3, r7, r3
 801c66e:	781b      	ldrb	r3, [r3, #0]
}
 801c670:	0018      	movs	r0, r3
 801c672:	46bd      	mov	sp, r7
 801c674:	b006      	add	sp, #24
 801c676:	bdb0      	pop	{r4, r5, r7, pc}
 801c678:	007f7f7f 	.word	0x007f7f7f
 801c67c:	fffbffff 	.word	0xfffbffff

0801c680 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c680:	b580      	push	{r7, lr}
 801c682:	b086      	sub	sp, #24
 801c684:	af00      	add	r7, sp, #0
 801c686:	60f8      	str	r0, [r7, #12]
 801c688:	60b9      	str	r1, [r7, #8]
 801c68a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c68c:	2300      	movs	r3, #0
 801c68e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c696:	68bb      	ldr	r3, [r7, #8]
 801c698:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	691b      	ldr	r3, [r3, #16]
 801c6a0:	045b      	lsls	r3, r3, #17
 801c6a2:	0c5a      	lsrs	r2, r3, #17
 801c6a4:	68bb      	ldr	r3, [r7, #8]
 801c6a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	4a22      	ldr	r2, [pc, #136]	@ (801c738 <HAL_RTC_GetTime+0xb8>)
 801c6b0:	4013      	ands	r3, r2
 801c6b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801c6b4:	697b      	ldr	r3, [r7, #20]
 801c6b6:	0c1b      	lsrs	r3, r3, #16
 801c6b8:	b2db      	uxtb	r3, r3
 801c6ba:	223f      	movs	r2, #63	@ 0x3f
 801c6bc:	4013      	ands	r3, r2
 801c6be:	b2da      	uxtb	r2, r3
 801c6c0:	68bb      	ldr	r3, [r7, #8]
 801c6c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801c6c4:	697b      	ldr	r3, [r7, #20]
 801c6c6:	0a1b      	lsrs	r3, r3, #8
 801c6c8:	b2db      	uxtb	r3, r3
 801c6ca:	227f      	movs	r2, #127	@ 0x7f
 801c6cc:	4013      	ands	r3, r2
 801c6ce:	b2da      	uxtb	r2, r3
 801c6d0:	68bb      	ldr	r3, [r7, #8]
 801c6d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801c6d4:	697b      	ldr	r3, [r7, #20]
 801c6d6:	b2db      	uxtb	r3, r3
 801c6d8:	227f      	movs	r2, #127	@ 0x7f
 801c6da:	4013      	ands	r3, r2
 801c6dc:	b2da      	uxtb	r2, r3
 801c6de:	68bb      	ldr	r3, [r7, #8]
 801c6e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801c6e2:	697b      	ldr	r3, [r7, #20]
 801c6e4:	0d9b      	lsrs	r3, r3, #22
 801c6e6:	b2db      	uxtb	r3, r3
 801c6e8:	2201      	movs	r2, #1
 801c6ea:	4013      	ands	r3, r2
 801c6ec:	b2da      	uxtb	r2, r3
 801c6ee:	68bb      	ldr	r3, [r7, #8]
 801c6f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d11a      	bne.n	801c72e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801c6f8:	68bb      	ldr	r3, [r7, #8]
 801c6fa:	781b      	ldrb	r3, [r3, #0]
 801c6fc:	0018      	movs	r0, r3
 801c6fe:	f000 f9d5 	bl	801caac <RTC_Bcd2ToByte>
 801c702:	0003      	movs	r3, r0
 801c704:	001a      	movs	r2, r3
 801c706:	68bb      	ldr	r3, [r7, #8]
 801c708:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801c70a:	68bb      	ldr	r3, [r7, #8]
 801c70c:	785b      	ldrb	r3, [r3, #1]
 801c70e:	0018      	movs	r0, r3
 801c710:	f000 f9cc 	bl	801caac <RTC_Bcd2ToByte>
 801c714:	0003      	movs	r3, r0
 801c716:	001a      	movs	r2, r3
 801c718:	68bb      	ldr	r3, [r7, #8]
 801c71a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801c71c:	68bb      	ldr	r3, [r7, #8]
 801c71e:	789b      	ldrb	r3, [r3, #2]
 801c720:	0018      	movs	r0, r3
 801c722:	f000 f9c3 	bl	801caac <RTC_Bcd2ToByte>
 801c726:	0003      	movs	r3, r0
 801c728:	001a      	movs	r2, r3
 801c72a:	68bb      	ldr	r3, [r7, #8]
 801c72c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801c72e:	2300      	movs	r3, #0
}
 801c730:	0018      	movs	r0, r3
 801c732:	46bd      	mov	sp, r7
 801c734:	b006      	add	sp, #24
 801c736:	bd80      	pop	{r7, pc}
 801c738:	007f7f7f 	.word	0x007f7f7f

0801c73c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c73c:	b5b0      	push	{r4, r5, r7, lr}
 801c73e:	b086      	sub	sp, #24
 801c740:	af00      	add	r7, sp, #0
 801c742:	60f8      	str	r0, [r7, #12]
 801c744:	60b9      	str	r1, [r7, #8]
 801c746:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c748:	2300      	movs	r3, #0
 801c74a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	2220      	movs	r2, #32
 801c750:	5c9b      	ldrb	r3, [r3, r2]
 801c752:	2b01      	cmp	r3, #1
 801c754:	d101      	bne.n	801c75a <HAL_RTC_SetDate+0x1e>
 801c756:	2302      	movs	r3, #2
 801c758:	e07e      	b.n	801c858 <HAL_RTC_SetDate+0x11c>
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	2220      	movs	r2, #32
 801c75e:	2101      	movs	r1, #1
 801c760:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	2221      	movs	r2, #33	@ 0x21
 801c766:	2102      	movs	r1, #2
 801c768:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d10e      	bne.n	801c78e <HAL_RTC_SetDate+0x52>
 801c770:	68bb      	ldr	r3, [r7, #8]
 801c772:	785b      	ldrb	r3, [r3, #1]
 801c774:	001a      	movs	r2, r3
 801c776:	2310      	movs	r3, #16
 801c778:	4013      	ands	r3, r2
 801c77a:	d008      	beq.n	801c78e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c77c:	68bb      	ldr	r3, [r7, #8]
 801c77e:	785b      	ldrb	r3, [r3, #1]
 801c780:	2210      	movs	r2, #16
 801c782:	4393      	bics	r3, r2
 801c784:	b2db      	uxtb	r3, r3
 801c786:	330a      	adds	r3, #10
 801c788:	b2da      	uxtb	r2, r3
 801c78a:	68bb      	ldr	r3, [r7, #8]
 801c78c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	2b00      	cmp	r3, #0
 801c792:	d11c      	bne.n	801c7ce <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c794:	68bb      	ldr	r3, [r7, #8]
 801c796:	78db      	ldrb	r3, [r3, #3]
 801c798:	0018      	movs	r0, r3
 801c79a:	f000 f966 	bl	801ca6a <RTC_ByteToBcd2>
 801c79e:	0003      	movs	r3, r0
 801c7a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c7a2:	68bb      	ldr	r3, [r7, #8]
 801c7a4:	785b      	ldrb	r3, [r3, #1]
 801c7a6:	0018      	movs	r0, r3
 801c7a8:	f000 f95f 	bl	801ca6a <RTC_ByteToBcd2>
 801c7ac:	0003      	movs	r3, r0
 801c7ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c7b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c7b2:	68bb      	ldr	r3, [r7, #8]
 801c7b4:	789b      	ldrb	r3, [r3, #2]
 801c7b6:	0018      	movs	r0, r3
 801c7b8:	f000 f957 	bl	801ca6a <RTC_ByteToBcd2>
 801c7bc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c7be:	0022      	movs	r2, r4
 801c7c0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c7c2:	68bb      	ldr	r3, [r7, #8]
 801c7c4:	781b      	ldrb	r3, [r3, #0]
 801c7c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c7c8:	4313      	orrs	r3, r2
 801c7ca:	617b      	str	r3, [r7, #20]
 801c7cc:	e00e      	b.n	801c7ec <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c7ce:	68bb      	ldr	r3, [r7, #8]
 801c7d0:	78db      	ldrb	r3, [r3, #3]
 801c7d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c7d4:	68bb      	ldr	r3, [r7, #8]
 801c7d6:	785b      	ldrb	r3, [r3, #1]
 801c7d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c7da:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c7dc:	68ba      	ldr	r2, [r7, #8]
 801c7de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c7e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c7e2:	68bb      	ldr	r3, [r7, #8]
 801c7e4:	781b      	ldrb	r3, [r3, #0]
 801c7e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c7e8:	4313      	orrs	r3, r2
 801c7ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	22ca      	movs	r2, #202	@ 0xca
 801c7f2:	625a      	str	r2, [r3, #36]	@ 0x24
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	2253      	movs	r2, #83	@ 0x53
 801c7fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c7fc:	2513      	movs	r5, #19
 801c7fe:	197c      	adds	r4, r7, r5
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	0018      	movs	r0, r3
 801c804:	f000 f8c3 	bl	801c98e <RTC_EnterInitMode>
 801c808:	0003      	movs	r3, r0
 801c80a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c80c:	0028      	movs	r0, r5
 801c80e:	183b      	adds	r3, r7, r0
 801c810:	781b      	ldrb	r3, [r3, #0]
 801c812:	2b00      	cmp	r3, #0
 801c814:	d10c      	bne.n	801c830 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	697a      	ldr	r2, [r7, #20]
 801c81c:	4910      	ldr	r1, [pc, #64]	@ (801c860 <HAL_RTC_SetDate+0x124>)
 801c81e:	400a      	ands	r2, r1
 801c820:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c822:	183c      	adds	r4, r7, r0
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	0018      	movs	r0, r3
 801c828:	f000 f8f5 	bl	801ca16 <RTC_ExitInitMode>
 801c82c:	0003      	movs	r3, r0
 801c82e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c830:	2313      	movs	r3, #19
 801c832:	18fb      	adds	r3, r7, r3
 801c834:	781b      	ldrb	r3, [r3, #0]
 801c836:	2b00      	cmp	r3, #0
 801c838:	d103      	bne.n	801c842 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	2221      	movs	r2, #33	@ 0x21
 801c83e:	2101      	movs	r1, #1
 801c840:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	22ff      	movs	r2, #255	@ 0xff
 801c848:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	2220      	movs	r2, #32
 801c84e:	2100      	movs	r1, #0
 801c850:	5499      	strb	r1, [r3, r2]

  return status;
 801c852:	2313      	movs	r3, #19
 801c854:	18fb      	adds	r3, r7, r3
 801c856:	781b      	ldrb	r3, [r3, #0]
}
 801c858:	0018      	movs	r0, r3
 801c85a:	46bd      	mov	sp, r7
 801c85c:	b006      	add	sp, #24
 801c85e:	bdb0      	pop	{r4, r5, r7, pc}
 801c860:	00ffff3f 	.word	0x00ffff3f

0801c864 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c864:	b580      	push	{r7, lr}
 801c866:	b086      	sub	sp, #24
 801c868:	af00      	add	r7, sp, #0
 801c86a:	60f8      	str	r0, [r7, #12]
 801c86c:	60b9      	str	r1, [r7, #8]
 801c86e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c870:	2300      	movs	r3, #0
 801c872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	685b      	ldr	r3, [r3, #4]
 801c87a:	4a21      	ldr	r2, [pc, #132]	@ (801c900 <HAL_RTC_GetDate+0x9c>)
 801c87c:	4013      	ands	r3, r2
 801c87e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c880:	697b      	ldr	r3, [r7, #20]
 801c882:	0c1b      	lsrs	r3, r3, #16
 801c884:	b2da      	uxtb	r2, r3
 801c886:	68bb      	ldr	r3, [r7, #8]
 801c888:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c88a:	697b      	ldr	r3, [r7, #20]
 801c88c:	0a1b      	lsrs	r3, r3, #8
 801c88e:	b2db      	uxtb	r3, r3
 801c890:	221f      	movs	r2, #31
 801c892:	4013      	ands	r3, r2
 801c894:	b2da      	uxtb	r2, r3
 801c896:	68bb      	ldr	r3, [r7, #8]
 801c898:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c89a:	697b      	ldr	r3, [r7, #20]
 801c89c:	b2db      	uxtb	r3, r3
 801c89e:	223f      	movs	r2, #63	@ 0x3f
 801c8a0:	4013      	ands	r3, r2
 801c8a2:	b2da      	uxtb	r2, r3
 801c8a4:	68bb      	ldr	r3, [r7, #8]
 801c8a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c8a8:	697b      	ldr	r3, [r7, #20]
 801c8aa:	0b5b      	lsrs	r3, r3, #13
 801c8ac:	b2db      	uxtb	r3, r3
 801c8ae:	2207      	movs	r2, #7
 801c8b0:	4013      	ands	r3, r2
 801c8b2:	b2da      	uxtb	r2, r3
 801c8b4:	68bb      	ldr	r3, [r7, #8]
 801c8b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d11a      	bne.n	801c8f4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c8be:	68bb      	ldr	r3, [r7, #8]
 801c8c0:	78db      	ldrb	r3, [r3, #3]
 801c8c2:	0018      	movs	r0, r3
 801c8c4:	f000 f8f2 	bl	801caac <RTC_Bcd2ToByte>
 801c8c8:	0003      	movs	r3, r0
 801c8ca:	001a      	movs	r2, r3
 801c8cc:	68bb      	ldr	r3, [r7, #8]
 801c8ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c8d0:	68bb      	ldr	r3, [r7, #8]
 801c8d2:	785b      	ldrb	r3, [r3, #1]
 801c8d4:	0018      	movs	r0, r3
 801c8d6:	f000 f8e9 	bl	801caac <RTC_Bcd2ToByte>
 801c8da:	0003      	movs	r3, r0
 801c8dc:	001a      	movs	r2, r3
 801c8de:	68bb      	ldr	r3, [r7, #8]
 801c8e0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c8e2:	68bb      	ldr	r3, [r7, #8]
 801c8e4:	789b      	ldrb	r3, [r3, #2]
 801c8e6:	0018      	movs	r0, r3
 801c8e8:	f000 f8e0 	bl	801caac <RTC_Bcd2ToByte>
 801c8ec:	0003      	movs	r3, r0
 801c8ee:	001a      	movs	r2, r3
 801c8f0:	68bb      	ldr	r3, [r7, #8]
 801c8f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c8f4:	2300      	movs	r3, #0
}
 801c8f6:	0018      	movs	r0, r3
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	b006      	add	sp, #24
 801c8fc:	bd80      	pop	{r7, pc}
 801c8fe:	46c0      	nop			@ (mov r8, r8)
 801c900:	00ffff3f 	.word	0x00ffff3f

0801c904 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c904:	b580      	push	{r7, lr}
 801c906:	b084      	sub	sp, #16
 801c908:	af00      	add	r7, sp, #0
 801c90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c90c:	2300      	movs	r3, #0
 801c90e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	4a0e      	ldr	r2, [pc, #56]	@ (801c950 <HAL_RTC_WaitForSynchro+0x4c>)
 801c916:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c918:	f7f8 f9dc 	bl	8014cd4 <HAL_GetTick>
 801c91c:	0003      	movs	r3, r0
 801c91e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c920:	e00a      	b.n	801c938 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c922:	f7f8 f9d7 	bl	8014cd4 <HAL_GetTick>
 801c926:	0002      	movs	r2, r0
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	1ad2      	subs	r2, r2, r3
 801c92c:	23fa      	movs	r3, #250	@ 0xfa
 801c92e:	009b      	lsls	r3, r3, #2
 801c930:	429a      	cmp	r2, r3
 801c932:	d901      	bls.n	801c938 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c934:	2303      	movs	r3, #3
 801c936:	e006      	b.n	801c946 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	68db      	ldr	r3, [r3, #12]
 801c93e:	2220      	movs	r2, #32
 801c940:	4013      	ands	r3, r2
 801c942:	d0ee      	beq.n	801c922 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c944:	2300      	movs	r3, #0
}
 801c946:	0018      	movs	r0, r3
 801c948:	46bd      	mov	sp, r7
 801c94a:	b004      	add	sp, #16
 801c94c:	bd80      	pop	{r7, pc}
 801c94e:	46c0      	nop			@ (mov r8, r8)
 801c950:	0001ff5f 	.word	0x0001ff5f

0801c954 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c954:	b580      	push	{r7, lr}
 801c956:	b082      	sub	sp, #8
 801c958:	af00      	add	r7, sp, #0
 801c95a:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	681b      	ldr	r3, [r3, #0]
 801c960:	22ca      	movs	r2, #202	@ 0xca
 801c962:	625a      	str	r2, [r3, #36]	@ 0x24
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	2253      	movs	r2, #83	@ 0x53
 801c96a:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	689a      	ldr	r2, [r3, #8]
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	2180      	movs	r1, #128	@ 0x80
 801c978:	0249      	lsls	r1, r1, #9
 801c97a:	430a      	orrs	r2, r1
 801c97c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	22ff      	movs	r2, #255	@ 0xff
 801c984:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c986:	46c0      	nop			@ (mov r8, r8)
 801c988:	46bd      	mov	sp, r7
 801c98a:	b002      	add	sp, #8
 801c98c:	bd80      	pop	{r7, pc}

0801c98e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c98e:	b580      	push	{r7, lr}
 801c990:	b084      	sub	sp, #16
 801c992:	af00      	add	r7, sp, #0
 801c994:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c996:	2300      	movs	r3, #0
 801c998:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c99a:	230f      	movs	r3, #15
 801c99c:	18fb      	adds	r3, r7, r3
 801c99e:	2200      	movs	r2, #0
 801c9a0:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	68db      	ldr	r3, [r3, #12]
 801c9a8:	2240      	movs	r2, #64	@ 0x40
 801c9aa:	4013      	ands	r3, r2
 801c9ac:	d12c      	bne.n	801ca08 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	68da      	ldr	r2, [r3, #12]
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	681b      	ldr	r3, [r3, #0]
 801c9b8:	2180      	movs	r1, #128	@ 0x80
 801c9ba:	430a      	orrs	r2, r1
 801c9bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c9be:	f7f8 f989 	bl	8014cd4 <HAL_GetTick>
 801c9c2:	0003      	movs	r3, r0
 801c9c4:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c9c6:	e014      	b.n	801c9f2 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c9c8:	f7f8 f984 	bl	8014cd4 <HAL_GetTick>
 801c9cc:	0002      	movs	r2, r0
 801c9ce:	68bb      	ldr	r3, [r7, #8]
 801c9d0:	1ad2      	subs	r2, r2, r3
 801c9d2:	200f      	movs	r0, #15
 801c9d4:	183b      	adds	r3, r7, r0
 801c9d6:	1839      	adds	r1, r7, r0
 801c9d8:	7809      	ldrb	r1, [r1, #0]
 801c9da:	7019      	strb	r1, [r3, #0]
 801c9dc:	23fa      	movs	r3, #250	@ 0xfa
 801c9de:	009b      	lsls	r3, r3, #2
 801c9e0:	429a      	cmp	r2, r3
 801c9e2:	d906      	bls.n	801c9f2 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	2221      	movs	r2, #33	@ 0x21
 801c9e8:	2104      	movs	r1, #4
 801c9ea:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c9ec:	183b      	adds	r3, r7, r0
 801c9ee:	2201      	movs	r2, #1
 801c9f0:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	68db      	ldr	r3, [r3, #12]
 801c9f8:	2240      	movs	r2, #64	@ 0x40
 801c9fa:	4013      	ands	r3, r2
 801c9fc:	d104      	bne.n	801ca08 <RTC_EnterInitMode+0x7a>
 801c9fe:	230f      	movs	r3, #15
 801ca00:	18fb      	adds	r3, r7, r3
 801ca02:	781b      	ldrb	r3, [r3, #0]
 801ca04:	2b01      	cmp	r3, #1
 801ca06:	d1df      	bne.n	801c9c8 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801ca08:	230f      	movs	r3, #15
 801ca0a:	18fb      	adds	r3, r7, r3
 801ca0c:	781b      	ldrb	r3, [r3, #0]
}
 801ca0e:	0018      	movs	r0, r3
 801ca10:	46bd      	mov	sp, r7
 801ca12:	b004      	add	sp, #16
 801ca14:	bd80      	pop	{r7, pc}

0801ca16 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801ca16:	b590      	push	{r4, r7, lr}
 801ca18:	b085      	sub	sp, #20
 801ca1a:	af00      	add	r7, sp, #0
 801ca1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ca1e:	240f      	movs	r4, #15
 801ca20:	193b      	adds	r3, r7, r4
 801ca22:	2200      	movs	r2, #0
 801ca24:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	68da      	ldr	r2, [r3, #12]
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	2180      	movs	r1, #128	@ 0x80
 801ca32:	438a      	bics	r2, r1
 801ca34:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	689b      	ldr	r3, [r3, #8]
 801ca3c:	2220      	movs	r2, #32
 801ca3e:	4013      	ands	r3, r2
 801ca40:	d10c      	bne.n	801ca5c <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	0018      	movs	r0, r3
 801ca46:	f7ff ff5d 	bl	801c904 <HAL_RTC_WaitForSynchro>
 801ca4a:	1e03      	subs	r3, r0, #0
 801ca4c:	d006      	beq.n	801ca5c <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	2221      	movs	r2, #33	@ 0x21
 801ca52:	2104      	movs	r1, #4
 801ca54:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801ca56:	193b      	adds	r3, r7, r4
 801ca58:	2201      	movs	r2, #1
 801ca5a:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801ca5c:	230f      	movs	r3, #15
 801ca5e:	18fb      	adds	r3, r7, r3
 801ca60:	781b      	ldrb	r3, [r3, #0]
}
 801ca62:	0018      	movs	r0, r3
 801ca64:	46bd      	mov	sp, r7
 801ca66:	b005      	add	sp, #20
 801ca68:	bd90      	pop	{r4, r7, pc}

0801ca6a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801ca6a:	b580      	push	{r7, lr}
 801ca6c:	b084      	sub	sp, #16
 801ca6e:	af00      	add	r7, sp, #0
 801ca70:	0002      	movs	r2, r0
 801ca72:	1dfb      	adds	r3, r7, #7
 801ca74:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801ca76:	2300      	movs	r3, #0
 801ca78:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801ca7a:	e007      	b.n	801ca8c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	3301      	adds	r3, #1
 801ca80:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801ca82:	1dfb      	adds	r3, r7, #7
 801ca84:	1dfa      	adds	r2, r7, #7
 801ca86:	7812      	ldrb	r2, [r2, #0]
 801ca88:	3a0a      	subs	r2, #10
 801ca8a:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801ca8c:	1dfb      	adds	r3, r7, #7
 801ca8e:	781b      	ldrb	r3, [r3, #0]
 801ca90:	2b09      	cmp	r3, #9
 801ca92:	d8f3      	bhi.n	801ca7c <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	b2db      	uxtb	r3, r3
 801ca98:	011b      	lsls	r3, r3, #4
 801ca9a:	b2da      	uxtb	r2, r3
 801ca9c:	1dfb      	adds	r3, r7, #7
 801ca9e:	781b      	ldrb	r3, [r3, #0]
 801caa0:	4313      	orrs	r3, r2
 801caa2:	b2db      	uxtb	r3, r3
}
 801caa4:	0018      	movs	r0, r3
 801caa6:	46bd      	mov	sp, r7
 801caa8:	b004      	add	sp, #16
 801caaa:	bd80      	pop	{r7, pc}

0801caac <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801caac:	b580      	push	{r7, lr}
 801caae:	b084      	sub	sp, #16
 801cab0:	af00      	add	r7, sp, #0
 801cab2:	0002      	movs	r2, r0
 801cab4:	1dfb      	adds	r3, r7, #7
 801cab6:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801cab8:	2300      	movs	r3, #0
 801caba:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801cabc:	1dfb      	adds	r3, r7, #7
 801cabe:	781b      	ldrb	r3, [r3, #0]
 801cac0:	091b      	lsrs	r3, r3, #4
 801cac2:	b2db      	uxtb	r3, r3
 801cac4:	001a      	movs	r2, r3
 801cac6:	0013      	movs	r3, r2
 801cac8:	009b      	lsls	r3, r3, #2
 801caca:	189b      	adds	r3, r3, r2
 801cacc:	005b      	lsls	r3, r3, #1
 801cace:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801cad0:	68fb      	ldr	r3, [r7, #12]
 801cad2:	b2da      	uxtb	r2, r3
 801cad4:	1dfb      	adds	r3, r7, #7
 801cad6:	781b      	ldrb	r3, [r3, #0]
 801cad8:	210f      	movs	r1, #15
 801cada:	400b      	ands	r3, r1
 801cadc:	b2db      	uxtb	r3, r3
 801cade:	18d3      	adds	r3, r2, r3
 801cae0:	b2db      	uxtb	r3, r3
}
 801cae2:	0018      	movs	r0, r3
 801cae4:	46bd      	mov	sp, r7
 801cae6:	b004      	add	sp, #16
 801cae8:	bd80      	pop	{r7, pc}
	...

0801caec <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801caec:	b580      	push	{r7, lr}
 801caee:	b086      	sub	sp, #24
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	60f8      	str	r0, [r7, #12]
 801caf4:	60b9      	str	r1, [r7, #8]
 801caf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801caf8:	4b64      	ldr	r3, [pc, #400]	@ (801cc8c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	22fa      	movs	r2, #250	@ 0xfa
 801cafe:	01d1      	lsls	r1, r2, #7
 801cb00:	0018      	movs	r0, r3
 801cb02:	f7e3 fb4f 	bl	80001a4 <__udivsi3>
 801cb06:	0003      	movs	r3, r0
 801cb08:	001a      	movs	r2, r3
 801cb0a:	0013      	movs	r3, r2
 801cb0c:	015b      	lsls	r3, r3, #5
 801cb0e:	1a9b      	subs	r3, r3, r2
 801cb10:	009b      	lsls	r3, r3, #2
 801cb12:	189b      	adds	r3, r3, r2
 801cb14:	00db      	lsls	r3, r3, #3
 801cb16:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	2220      	movs	r2, #32
 801cb1c:	5c9b      	ldrb	r3, [r3, r2]
 801cb1e:	2b01      	cmp	r3, #1
 801cb20:	d101      	bne.n	801cb26 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801cb22:	2302      	movs	r3, #2
 801cb24:	e0ad      	b.n	801cc82 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	2220      	movs	r2, #32
 801cb2a:	2101      	movs	r1, #1
 801cb2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	2221      	movs	r2, #33	@ 0x21
 801cb32:	2102      	movs	r1, #2
 801cb34:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	22ca      	movs	r2, #202	@ 0xca
 801cb3c:	625a      	str	r2, [r3, #36]	@ 0x24
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	2253      	movs	r2, #83	@ 0x53
 801cb44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	689a      	ldr	r2, [r3, #8]
 801cb4c:	2380      	movs	r3, #128	@ 0x80
 801cb4e:	00db      	lsls	r3, r3, #3
 801cb50:	4013      	ands	r3, r2
 801cb52:	d019      	beq.n	801cb88 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801cb54:	697b      	ldr	r3, [r7, #20]
 801cb56:	3b01      	subs	r3, #1
 801cb58:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801cb5a:	697b      	ldr	r3, [r7, #20]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d10d      	bne.n	801cb7c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	22ff      	movs	r2, #255	@ 0xff
 801cb66:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	2221      	movs	r2, #33	@ 0x21
 801cb6c:	2103      	movs	r1, #3
 801cb6e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	2220      	movs	r2, #32
 801cb74:	2100      	movs	r1, #0
 801cb76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801cb78:	2303      	movs	r3, #3
 801cb7a:	e082      	b.n	801cc82 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	68db      	ldr	r3, [r3, #12]
 801cb82:	2204      	movs	r2, #4
 801cb84:	4013      	ands	r3, r2
 801cb86:	d1e5      	bne.n	801cb54 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	689a      	ldr	r2, [r3, #8]
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	493f      	ldr	r1, [pc, #252]	@ (801cc90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801cb94:	400a      	ands	r2, r1
 801cb96:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	68db      	ldr	r3, [r3, #12]
 801cb9e:	22ff      	movs	r2, #255	@ 0xff
 801cba0:	401a      	ands	r2, r3
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	493b      	ldr	r1, [pc, #236]	@ (801cc94 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801cba8:	430a      	orrs	r2, r1
 801cbaa:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801cbac:	4b37      	ldr	r3, [pc, #220]	@ (801cc8c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	22fa      	movs	r2, #250	@ 0xfa
 801cbb2:	01d1      	lsls	r1, r2, #7
 801cbb4:	0018      	movs	r0, r3
 801cbb6:	f7e3 faf5 	bl	80001a4 <__udivsi3>
 801cbba:	0003      	movs	r3, r0
 801cbbc:	001a      	movs	r2, r3
 801cbbe:	0013      	movs	r3, r2
 801cbc0:	015b      	lsls	r3, r3, #5
 801cbc2:	1a9b      	subs	r3, r3, r2
 801cbc4:	009b      	lsls	r3, r3, #2
 801cbc6:	189b      	adds	r3, r3, r2
 801cbc8:	00db      	lsls	r3, r3, #3
 801cbca:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801cbcc:	697b      	ldr	r3, [r7, #20]
 801cbce:	3b01      	subs	r3, #1
 801cbd0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801cbd2:	697b      	ldr	r3, [r7, #20]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d10d      	bne.n	801cbf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	22ff      	movs	r2, #255	@ 0xff
 801cbde:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801cbe0:	68fb      	ldr	r3, [r7, #12]
 801cbe2:	2221      	movs	r2, #33	@ 0x21
 801cbe4:	2103      	movs	r1, #3
 801cbe6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	2220      	movs	r2, #32
 801cbec:	2100      	movs	r1, #0
 801cbee:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801cbf0:	2303      	movs	r3, #3
 801cbf2:	e046      	b.n	801cc82 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801cbf4:	68fb      	ldr	r3, [r7, #12]
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	68db      	ldr	r3, [r3, #12]
 801cbfa:	2204      	movs	r2, #4
 801cbfc:	4013      	ands	r3, r2
 801cbfe:	d0e5      	beq.n	801cbcc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	689a      	ldr	r2, [r3, #8]
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	681b      	ldr	r3, [r3, #0]
 801cc0a:	2107      	movs	r1, #7
 801cc0c:	438a      	bics	r2, r1
 801cc0e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	6899      	ldr	r1, [r3, #8]
 801cc16:	68fb      	ldr	r3, [r7, #12]
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	687a      	ldr	r2, [r7, #4]
 801cc1c:	430a      	orrs	r2, r1
 801cc1e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801cc20:	68fb      	ldr	r3, [r7, #12]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	68ba      	ldr	r2, [r7, #8]
 801cc26:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801cc28:	4b1b      	ldr	r3, [pc, #108]	@ (801cc98 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801cc2a:	681a      	ldr	r2, [r3, #0]
 801cc2c:	4b1a      	ldr	r3, [pc, #104]	@ (801cc98 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801cc2e:	2180      	movs	r1, #128	@ 0x80
 801cc30:	0349      	lsls	r1, r1, #13
 801cc32:	430a      	orrs	r2, r1
 801cc34:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801cc36:	4b18      	ldr	r3, [pc, #96]	@ (801cc98 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801cc38:	689a      	ldr	r2, [r3, #8]
 801cc3a:	4b17      	ldr	r3, [pc, #92]	@ (801cc98 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801cc3c:	2180      	movs	r1, #128	@ 0x80
 801cc3e:	0349      	lsls	r1, r1, #13
 801cc40:	430a      	orrs	r2, r1
 801cc42:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	681b      	ldr	r3, [r3, #0]
 801cc48:	689a      	ldr	r2, [r3, #8]
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	2180      	movs	r1, #128	@ 0x80
 801cc50:	01c9      	lsls	r1, r1, #7
 801cc52:	430a      	orrs	r2, r1
 801cc54:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	689a      	ldr	r2, [r3, #8]
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	2180      	movs	r1, #128	@ 0x80
 801cc62:	00c9      	lsls	r1, r1, #3
 801cc64:	430a      	orrs	r2, r1
 801cc66:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	22ff      	movs	r2, #255	@ 0xff
 801cc6e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	2221      	movs	r2, #33	@ 0x21
 801cc74:	2101      	movs	r1, #1
 801cc76:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	2220      	movs	r2, #32
 801cc7c:	2100      	movs	r1, #0
 801cc7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cc80:	2300      	movs	r3, #0
}
 801cc82:	0018      	movs	r0, r3
 801cc84:	46bd      	mov	sp, r7
 801cc86:	b006      	add	sp, #24
 801cc88:	bd80      	pop	{r7, pc}
 801cc8a:	46c0      	nop			@ (mov r8, r8)
 801cc8c:	200000ec 	.word	0x200000ec
 801cc90:	fffffbff 	.word	0xfffffbff
 801cc94:	fffffb7f 	.word	0xfffffb7f
 801cc98:	40010400 	.word	0x40010400

0801cc9c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b084      	sub	sp, #16
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801cca4:	2300      	movs	r3, #0
 801cca6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	2220      	movs	r2, #32
 801ccac:	5c9b      	ldrb	r3, [r3, r2]
 801ccae:	2b01      	cmp	r3, #1
 801ccb0:	d101      	bne.n	801ccb6 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801ccb2:	2302      	movs	r3, #2
 801ccb4:	e04e      	b.n	801cd54 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	2220      	movs	r2, #32
 801ccba:	2101      	movs	r1, #1
 801ccbc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	2221      	movs	r2, #33	@ 0x21
 801ccc2:	2102      	movs	r1, #2
 801ccc4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	22ca      	movs	r2, #202	@ 0xca
 801cccc:	625a      	str	r2, [r3, #36]	@ 0x24
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	2253      	movs	r2, #83	@ 0x53
 801ccd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	689a      	ldr	r2, [r3, #8]
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	491e      	ldr	r1, [pc, #120]	@ (801cd5c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801cce2:	400a      	ands	r2, r1
 801cce4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	689a      	ldr	r2, [r3, #8]
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	491b      	ldr	r1, [pc, #108]	@ (801cd60 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801ccf2:	400a      	ands	r2, r1
 801ccf4:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801ccf6:	f7f7 ffed 	bl	8014cd4 <HAL_GetTick>
 801ccfa:	0003      	movs	r3, r0
 801ccfc:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801ccfe:	e016      	b.n	801cd2e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801cd00:	f7f7 ffe8 	bl	8014cd4 <HAL_GetTick>
 801cd04:	0002      	movs	r2, r0
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	1ad2      	subs	r2, r2, r3
 801cd0a:	23fa      	movs	r3, #250	@ 0xfa
 801cd0c:	009b      	lsls	r3, r3, #2
 801cd0e:	429a      	cmp	r2, r3
 801cd10:	d90d      	bls.n	801cd2e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	22ff      	movs	r2, #255	@ 0xff
 801cd18:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	2221      	movs	r2, #33	@ 0x21
 801cd1e:	2103      	movs	r1, #3
 801cd20:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	2220      	movs	r2, #32
 801cd26:	2100      	movs	r1, #0
 801cd28:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801cd2a:	2303      	movs	r3, #3
 801cd2c:	e012      	b.n	801cd54 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	68db      	ldr	r3, [r3, #12]
 801cd34:	2204      	movs	r2, #4
 801cd36:	4013      	ands	r3, r2
 801cd38:	d0e2      	beq.n	801cd00 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	22ff      	movs	r2, #255	@ 0xff
 801cd40:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	2221      	movs	r2, #33	@ 0x21
 801cd46:	2101      	movs	r1, #1
 801cd48:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	2220      	movs	r2, #32
 801cd4e:	2100      	movs	r1, #0
 801cd50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cd52:	2300      	movs	r3, #0
}
 801cd54:	0018      	movs	r0, r3
 801cd56:	46bd      	mov	sp, r7
 801cd58:	b004      	add	sp, #16
 801cd5a:	bd80      	pop	{r7, pc}
 801cd5c:	fffffbff 	.word	0xfffffbff
 801cd60:	ffffbfff 	.word	0xffffbfff

0801cd64 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b082      	sub	sp, #8
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801cd6c:	4b13      	ldr	r3, [pc, #76]	@ (801cdbc <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801cd6e:	2280      	movs	r2, #128	@ 0x80
 801cd70:	0352      	lsls	r2, r2, #13
 801cd72:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	681b      	ldr	r3, [r3, #0]
 801cd78:	689a      	ldr	r2, [r3, #8]
 801cd7a:	2380      	movs	r3, #128	@ 0x80
 801cd7c:	01db      	lsls	r3, r3, #7
 801cd7e:	4013      	ands	r3, r2
 801cd80:	d014      	beq.n	801cdac <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	68da      	ldr	r2, [r3, #12]
 801cd88:	2380      	movs	r3, #128	@ 0x80
 801cd8a:	00db      	lsls	r3, r3, #3
 801cd8c:	4013      	ands	r3, r2
 801cd8e:	d00d      	beq.n	801cdac <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	68db      	ldr	r3, [r3, #12]
 801cd96:	22ff      	movs	r2, #255	@ 0xff
 801cd98:	401a      	ands	r2, r3
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	4908      	ldr	r1, [pc, #32]	@ (801cdc0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801cda0:	430a      	orrs	r2, r1
 801cda2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	0018      	movs	r0, r3
 801cda8:	f000 f80c 	bl	801cdc4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	2221      	movs	r2, #33	@ 0x21
 801cdb0:	2101      	movs	r1, #1
 801cdb2:	5499      	strb	r1, [r3, r2]
}
 801cdb4:	46c0      	nop			@ (mov r8, r8)
 801cdb6:	46bd      	mov	sp, r7
 801cdb8:	b002      	add	sp, #8
 801cdba:	bd80      	pop	{r7, pc}
 801cdbc:	40010400 	.word	0x40010400
 801cdc0:	fffffb7f 	.word	0xfffffb7f

0801cdc4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801cdc4:	b580      	push	{r7, lr}
 801cdc6:	b082      	sub	sp, #8
 801cdc8:	af00      	add	r7, sp, #0
 801cdca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801cdcc:	46c0      	nop			@ (mov r8, r8)
 801cdce:	46bd      	mov	sp, r7
 801cdd0:	b002      	add	sp, #8
 801cdd2:	bd80      	pop	{r7, pc}

0801cdd4 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801cdd4:	b580      	push	{r7, lr}
 801cdd6:	b086      	sub	sp, #24
 801cdd8:	af00      	add	r7, sp, #0
 801cdda:	60f8      	str	r0, [r7, #12]
 801cddc:	60b9      	str	r1, [r7, #8]
 801cdde:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801cde0:	2300      	movs	r3, #0
 801cde2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	3350      	adds	r3, #80	@ 0x50
 801cdea:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801cdec:	68bb      	ldr	r3, [r7, #8]
 801cdee:	009b      	lsls	r3, r3, #2
 801cdf0:	697a      	ldr	r2, [r7, #20]
 801cdf2:	18d3      	adds	r3, r2, r3
 801cdf4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801cdf6:	697b      	ldr	r3, [r7, #20]
 801cdf8:	687a      	ldr	r2, [r7, #4]
 801cdfa:	601a      	str	r2, [r3, #0]
}
 801cdfc:	46c0      	nop			@ (mov r8, r8)
 801cdfe:	46bd      	mov	sp, r7
 801ce00:	b006      	add	sp, #24
 801ce02:	bd80      	pop	{r7, pc}

0801ce04 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801ce04:	b580      	push	{r7, lr}
 801ce06:	b084      	sub	sp, #16
 801ce08:	af00      	add	r7, sp, #0
 801ce0a:	6078      	str	r0, [r7, #4]
 801ce0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801ce0e:	2300      	movs	r3, #0
 801ce10:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	3350      	adds	r3, #80	@ 0x50
 801ce18:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801ce1a:	683b      	ldr	r3, [r7, #0]
 801ce1c:	009b      	lsls	r3, r3, #2
 801ce1e:	68fa      	ldr	r2, [r7, #12]
 801ce20:	18d3      	adds	r3, r2, r3
 801ce22:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	681b      	ldr	r3, [r3, #0]
}
 801ce28:	0018      	movs	r0, r3
 801ce2a:	46bd      	mov	sp, r7
 801ce2c:	b004      	add	sp, #16
 801ce2e:	bd80      	pop	{r7, pc}

0801ce30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b082      	sub	sp, #8
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d101      	bne.n	801ce42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ce3e:	2301      	movs	r3, #1
 801ce40:	e032      	b.n	801cea8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	2239      	movs	r2, #57	@ 0x39
 801ce46:	5c9b      	ldrb	r3, [r3, r2]
 801ce48:	b2db      	uxtb	r3, r3
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d107      	bne.n	801ce5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	2238      	movs	r2, #56	@ 0x38
 801ce52:	2100      	movs	r1, #0
 801ce54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	0018      	movs	r0, r3
 801ce5a:	f7f6 ff1f 	bl	8013c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	2239      	movs	r2, #57	@ 0x39
 801ce62:	2102      	movs	r1, #2
 801ce64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681a      	ldr	r2, [r3, #0]
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	3304      	adds	r3, #4
 801ce6e:	0019      	movs	r1, r3
 801ce70:	0010      	movs	r0, r2
 801ce72:	f000 fa1d 	bl	801d2b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	223e      	movs	r2, #62	@ 0x3e
 801ce7a:	2101      	movs	r1, #1
 801ce7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	223a      	movs	r2, #58	@ 0x3a
 801ce82:	2101      	movs	r1, #1
 801ce84:	5499      	strb	r1, [r3, r2]
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	223b      	movs	r2, #59	@ 0x3b
 801ce8a:	2101      	movs	r1, #1
 801ce8c:	5499      	strb	r1, [r3, r2]
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	223c      	movs	r2, #60	@ 0x3c
 801ce92:	2101      	movs	r1, #1
 801ce94:	5499      	strb	r1, [r3, r2]
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	223d      	movs	r2, #61	@ 0x3d
 801ce9a:	2101      	movs	r1, #1
 801ce9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	2239      	movs	r2, #57	@ 0x39
 801cea2:	2101      	movs	r1, #1
 801cea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cea6:	2300      	movs	r3, #0
}
 801cea8:	0018      	movs	r0, r3
 801ceaa:	46bd      	mov	sp, r7
 801ceac:	b002      	add	sp, #8
 801ceae:	bd80      	pop	{r7, pc}

0801ceb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801ceb0:	b580      	push	{r7, lr}
 801ceb2:	b084      	sub	sp, #16
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	2239      	movs	r2, #57	@ 0x39
 801cebc:	5c9b      	ldrb	r3, [r3, r2]
 801cebe:	b2db      	uxtb	r3, r3
 801cec0:	2b01      	cmp	r3, #1
 801cec2:	d001      	beq.n	801cec8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cec4:	2301      	movs	r3, #1
 801cec6:	e033      	b.n	801cf30 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	2239      	movs	r2, #57	@ 0x39
 801cecc:	2102      	movs	r1, #2
 801cece:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	681a      	ldr	r2, [r3, #0]
 801ced4:	2380      	movs	r3, #128	@ 0x80
 801ced6:	05db      	lsls	r3, r3, #23
 801ced8:	429a      	cmp	r2, r3
 801ceda:	d00e      	beq.n	801cefa <HAL_TIM_Base_Start+0x4a>
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	4a15      	ldr	r2, [pc, #84]	@ (801cf38 <HAL_TIM_Base_Start+0x88>)
 801cee2:	4293      	cmp	r3, r2
 801cee4:	d009      	beq.n	801cefa <HAL_TIM_Base_Start+0x4a>
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	4a14      	ldr	r2, [pc, #80]	@ (801cf3c <HAL_TIM_Base_Start+0x8c>)
 801ceec:	4293      	cmp	r3, r2
 801ceee:	d004      	beq.n	801cefa <HAL_TIM_Base_Start+0x4a>
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	4a12      	ldr	r2, [pc, #72]	@ (801cf40 <HAL_TIM_Base_Start+0x90>)
 801cef6:	4293      	cmp	r3, r2
 801cef8:	d111      	bne.n	801cf1e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	689b      	ldr	r3, [r3, #8]
 801cf00:	2207      	movs	r2, #7
 801cf02:	4013      	ands	r3, r2
 801cf04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	2b06      	cmp	r3, #6
 801cf0a:	d010      	beq.n	801cf2e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	681a      	ldr	r2, [r3, #0]
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	2101      	movs	r1, #1
 801cf18:	430a      	orrs	r2, r1
 801cf1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf1c:	e007      	b.n	801cf2e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	681a      	ldr	r2, [r3, #0]
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	2101      	movs	r1, #1
 801cf2a:	430a      	orrs	r2, r1
 801cf2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cf2e:	2300      	movs	r3, #0
}
 801cf30:	0018      	movs	r0, r3
 801cf32:	46bd      	mov	sp, r7
 801cf34:	b004      	add	sp, #16
 801cf36:	bd80      	pop	{r7, pc}
 801cf38:	40000400 	.word	0x40000400
 801cf3c:	40010800 	.word	0x40010800
 801cf40:	40011400 	.word	0x40011400

0801cf44 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cf44:	b580      	push	{r7, lr}
 801cf46:	b082      	sub	sp, #8
 801cf48:	af00      	add	r7, sp, #0
 801cf4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	6a1b      	ldr	r3, [r3, #32]
 801cf52:	4a0a      	ldr	r2, [pc, #40]	@ (801cf7c <HAL_TIM_Base_Stop+0x38>)
 801cf54:	4013      	ands	r3, r2
 801cf56:	d107      	bne.n	801cf68 <HAL_TIM_Base_Stop+0x24>
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	681a      	ldr	r2, [r3, #0]
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	2101      	movs	r1, #1
 801cf64:	438a      	bics	r2, r1
 801cf66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	2239      	movs	r2, #57	@ 0x39
 801cf6c:	2101      	movs	r1, #1
 801cf6e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801cf70:	2300      	movs	r3, #0
}
 801cf72:	0018      	movs	r0, r3
 801cf74:	46bd      	mov	sp, r7
 801cf76:	b002      	add	sp, #8
 801cf78:	bd80      	pop	{r7, pc}
 801cf7a:	46c0      	nop			@ (mov r8, r8)
 801cf7c:	00001111 	.word	0x00001111

0801cf80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cf80:	b580      	push	{r7, lr}
 801cf82:	b082      	sub	sp, #8
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d101      	bne.n	801cf92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cf8e:	2301      	movs	r3, #1
 801cf90:	e032      	b.n	801cff8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	2239      	movs	r2, #57	@ 0x39
 801cf96:	5c9b      	ldrb	r3, [r3, r2]
 801cf98:	b2db      	uxtb	r3, r3
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d107      	bne.n	801cfae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	2238      	movs	r2, #56	@ 0x38
 801cfa2:	2100      	movs	r1, #0
 801cfa4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	0018      	movs	r0, r3
 801cfaa:	f7f6 fe53 	bl	8013c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	2239      	movs	r2, #57	@ 0x39
 801cfb2:	2102      	movs	r1, #2
 801cfb4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	681a      	ldr	r2, [r3, #0]
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	3304      	adds	r3, #4
 801cfbe:	0019      	movs	r1, r3
 801cfc0:	0010      	movs	r0, r2
 801cfc2:	f000 f975 	bl	801d2b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	223e      	movs	r2, #62	@ 0x3e
 801cfca:	2101      	movs	r1, #1
 801cfcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	223a      	movs	r2, #58	@ 0x3a
 801cfd2:	2101      	movs	r1, #1
 801cfd4:	5499      	strb	r1, [r3, r2]
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	223b      	movs	r2, #59	@ 0x3b
 801cfda:	2101      	movs	r1, #1
 801cfdc:	5499      	strb	r1, [r3, r2]
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	223c      	movs	r2, #60	@ 0x3c
 801cfe2:	2101      	movs	r1, #1
 801cfe4:	5499      	strb	r1, [r3, r2]
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	223d      	movs	r2, #61	@ 0x3d
 801cfea:	2101      	movs	r1, #1
 801cfec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cfee:	687b      	ldr	r3, [r7, #4]
 801cff0:	2239      	movs	r2, #57	@ 0x39
 801cff2:	2101      	movs	r1, #1
 801cff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cff6:	2300      	movs	r3, #0
}
 801cff8:	0018      	movs	r0, r3
 801cffa:	46bd      	mov	sp, r7
 801cffc:	b002      	add	sp, #8
 801cffe:	bd80      	pop	{r7, pc}

0801d000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d000:	b580      	push	{r7, lr}
 801d002:	b084      	sub	sp, #16
 801d004:	af00      	add	r7, sp, #0
 801d006:	6078      	str	r0, [r7, #4]
 801d008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801d00a:	683b      	ldr	r3, [r7, #0]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d108      	bne.n	801d022 <HAL_TIM_PWM_Start+0x22>
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	223a      	movs	r2, #58	@ 0x3a
 801d014:	5c9b      	ldrb	r3, [r3, r2]
 801d016:	b2db      	uxtb	r3, r3
 801d018:	3b01      	subs	r3, #1
 801d01a:	1e5a      	subs	r2, r3, #1
 801d01c:	4193      	sbcs	r3, r2
 801d01e:	b2db      	uxtb	r3, r3
 801d020:	e01f      	b.n	801d062 <HAL_TIM_PWM_Start+0x62>
 801d022:	683b      	ldr	r3, [r7, #0]
 801d024:	2b04      	cmp	r3, #4
 801d026:	d108      	bne.n	801d03a <HAL_TIM_PWM_Start+0x3a>
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	223b      	movs	r2, #59	@ 0x3b
 801d02c:	5c9b      	ldrb	r3, [r3, r2]
 801d02e:	b2db      	uxtb	r3, r3
 801d030:	3b01      	subs	r3, #1
 801d032:	1e5a      	subs	r2, r3, #1
 801d034:	4193      	sbcs	r3, r2
 801d036:	b2db      	uxtb	r3, r3
 801d038:	e013      	b.n	801d062 <HAL_TIM_PWM_Start+0x62>
 801d03a:	683b      	ldr	r3, [r7, #0]
 801d03c:	2b08      	cmp	r3, #8
 801d03e:	d108      	bne.n	801d052 <HAL_TIM_PWM_Start+0x52>
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	223c      	movs	r2, #60	@ 0x3c
 801d044:	5c9b      	ldrb	r3, [r3, r2]
 801d046:	b2db      	uxtb	r3, r3
 801d048:	3b01      	subs	r3, #1
 801d04a:	1e5a      	subs	r2, r3, #1
 801d04c:	4193      	sbcs	r3, r2
 801d04e:	b2db      	uxtb	r3, r3
 801d050:	e007      	b.n	801d062 <HAL_TIM_PWM_Start+0x62>
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	223d      	movs	r2, #61	@ 0x3d
 801d056:	5c9b      	ldrb	r3, [r3, r2]
 801d058:	b2db      	uxtb	r3, r3
 801d05a:	3b01      	subs	r3, #1
 801d05c:	1e5a      	subs	r2, r3, #1
 801d05e:	4193      	sbcs	r3, r2
 801d060:	b2db      	uxtb	r3, r3
 801d062:	2b00      	cmp	r3, #0
 801d064:	d001      	beq.n	801d06a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801d066:	2301      	movs	r3, #1
 801d068:	e052      	b.n	801d110 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801d06a:	683b      	ldr	r3, [r7, #0]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d104      	bne.n	801d07a <HAL_TIM_PWM_Start+0x7a>
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	223a      	movs	r2, #58	@ 0x3a
 801d074:	2102      	movs	r1, #2
 801d076:	5499      	strb	r1, [r3, r2]
 801d078:	e013      	b.n	801d0a2 <HAL_TIM_PWM_Start+0xa2>
 801d07a:	683b      	ldr	r3, [r7, #0]
 801d07c:	2b04      	cmp	r3, #4
 801d07e:	d104      	bne.n	801d08a <HAL_TIM_PWM_Start+0x8a>
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	223b      	movs	r2, #59	@ 0x3b
 801d084:	2102      	movs	r1, #2
 801d086:	5499      	strb	r1, [r3, r2]
 801d088:	e00b      	b.n	801d0a2 <HAL_TIM_PWM_Start+0xa2>
 801d08a:	683b      	ldr	r3, [r7, #0]
 801d08c:	2b08      	cmp	r3, #8
 801d08e:	d104      	bne.n	801d09a <HAL_TIM_PWM_Start+0x9a>
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	223c      	movs	r2, #60	@ 0x3c
 801d094:	2102      	movs	r1, #2
 801d096:	5499      	strb	r1, [r3, r2]
 801d098:	e003      	b.n	801d0a2 <HAL_TIM_PWM_Start+0xa2>
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	223d      	movs	r2, #61	@ 0x3d
 801d09e:	2102      	movs	r1, #2
 801d0a0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	6839      	ldr	r1, [r7, #0]
 801d0a8:	2201      	movs	r2, #1
 801d0aa:	0018      	movs	r0, r3
 801d0ac:	f000 fa62 	bl	801d574 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	681a      	ldr	r2, [r3, #0]
 801d0b4:	2380      	movs	r3, #128	@ 0x80
 801d0b6:	05db      	lsls	r3, r3, #23
 801d0b8:	429a      	cmp	r2, r3
 801d0ba:	d00e      	beq.n	801d0da <HAL_TIM_PWM_Start+0xda>
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	4a15      	ldr	r2, [pc, #84]	@ (801d118 <HAL_TIM_PWM_Start+0x118>)
 801d0c2:	4293      	cmp	r3, r2
 801d0c4:	d009      	beq.n	801d0da <HAL_TIM_PWM_Start+0xda>
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	681b      	ldr	r3, [r3, #0]
 801d0ca:	4a14      	ldr	r2, [pc, #80]	@ (801d11c <HAL_TIM_PWM_Start+0x11c>)
 801d0cc:	4293      	cmp	r3, r2
 801d0ce:	d004      	beq.n	801d0da <HAL_TIM_PWM_Start+0xda>
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	4a12      	ldr	r2, [pc, #72]	@ (801d120 <HAL_TIM_PWM_Start+0x120>)
 801d0d6:	4293      	cmp	r3, r2
 801d0d8:	d111      	bne.n	801d0fe <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	689b      	ldr	r3, [r3, #8]
 801d0e0:	2207      	movs	r2, #7
 801d0e2:	4013      	ands	r3, r2
 801d0e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	2b06      	cmp	r3, #6
 801d0ea:	d010      	beq.n	801d10e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	681a      	ldr	r2, [r3, #0]
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	2101      	movs	r1, #1
 801d0f8:	430a      	orrs	r2, r1
 801d0fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d0fc:	e007      	b.n	801d10e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	681b      	ldr	r3, [r3, #0]
 801d102:	681a      	ldr	r2, [r3, #0]
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	2101      	movs	r1, #1
 801d10a:	430a      	orrs	r2, r1
 801d10c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d10e:	2300      	movs	r3, #0
}
 801d110:	0018      	movs	r0, r3
 801d112:	46bd      	mov	sp, r7
 801d114:	b004      	add	sp, #16
 801d116:	bd80      	pop	{r7, pc}
 801d118:	40000400 	.word	0x40000400
 801d11c:	40010800 	.word	0x40010800
 801d120:	40011400 	.word	0x40011400

0801d124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d124:	b580      	push	{r7, lr}
 801d126:	b086      	sub	sp, #24
 801d128:	af00      	add	r7, sp, #0
 801d12a:	60f8      	str	r0, [r7, #12]
 801d12c:	60b9      	str	r1, [r7, #8]
 801d12e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d130:	2317      	movs	r3, #23
 801d132:	18fb      	adds	r3, r7, r3
 801d134:	2200      	movs	r2, #0
 801d136:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	2238      	movs	r2, #56	@ 0x38
 801d13c:	5c9b      	ldrb	r3, [r3, r2]
 801d13e:	2b01      	cmp	r3, #1
 801d140:	d101      	bne.n	801d146 <HAL_TIM_PWM_ConfigChannel+0x22>
 801d142:	2302      	movs	r3, #2
 801d144:	e0ad      	b.n	801d2a2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	2238      	movs	r2, #56	@ 0x38
 801d14a:	2101      	movs	r1, #1
 801d14c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	2b0c      	cmp	r3, #12
 801d152:	d100      	bne.n	801d156 <HAL_TIM_PWM_ConfigChannel+0x32>
 801d154:	e076      	b.n	801d244 <HAL_TIM_PWM_ConfigChannel+0x120>
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	2b0c      	cmp	r3, #12
 801d15a:	d900      	bls.n	801d15e <HAL_TIM_PWM_ConfigChannel+0x3a>
 801d15c:	e095      	b.n	801d28a <HAL_TIM_PWM_ConfigChannel+0x166>
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	2b08      	cmp	r3, #8
 801d162:	d04e      	beq.n	801d202 <HAL_TIM_PWM_ConfigChannel+0xde>
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	2b08      	cmp	r3, #8
 801d168:	d900      	bls.n	801d16c <HAL_TIM_PWM_ConfigChannel+0x48>
 801d16a:	e08e      	b.n	801d28a <HAL_TIM_PWM_ConfigChannel+0x166>
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d003      	beq.n	801d17a <HAL_TIM_PWM_ConfigChannel+0x56>
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	2b04      	cmp	r3, #4
 801d176:	d021      	beq.n	801d1bc <HAL_TIM_PWM_ConfigChannel+0x98>
 801d178:	e087      	b.n	801d28a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	68ba      	ldr	r2, [r7, #8]
 801d180:	0011      	movs	r1, r2
 801d182:	0018      	movs	r0, r3
 801d184:	f000 f8f2 	bl	801d36c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d188:	68fb      	ldr	r3, [r7, #12]
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	699a      	ldr	r2, [r3, #24]
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	2108      	movs	r1, #8
 801d194:	430a      	orrs	r2, r1
 801d196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	699a      	ldr	r2, [r3, #24]
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	2104      	movs	r1, #4
 801d1a4:	438a      	bics	r2, r1
 801d1a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	6999      	ldr	r1, [r3, #24]
 801d1ae:	68bb      	ldr	r3, [r7, #8]
 801d1b0:	68da      	ldr	r2, [r3, #12]
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	430a      	orrs	r2, r1
 801d1b8:	619a      	str	r2, [r3, #24]
      break;
 801d1ba:	e06b      	b.n	801d294 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	68ba      	ldr	r2, [r7, #8]
 801d1c2:	0011      	movs	r1, r2
 801d1c4:	0018      	movs	r0, r3
 801d1c6:	f000 f90d 	bl	801d3e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	699a      	ldr	r2, [r3, #24]
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	2180      	movs	r1, #128	@ 0x80
 801d1d6:	0109      	lsls	r1, r1, #4
 801d1d8:	430a      	orrs	r2, r1
 801d1da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	699a      	ldr	r2, [r3, #24]
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	4931      	ldr	r1, [pc, #196]	@ (801d2ac <HAL_TIM_PWM_ConfigChannel+0x188>)
 801d1e8:	400a      	ands	r2, r1
 801d1ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d1ec:	68fb      	ldr	r3, [r7, #12]
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	6999      	ldr	r1, [r3, #24]
 801d1f2:	68bb      	ldr	r3, [r7, #8]
 801d1f4:	68db      	ldr	r3, [r3, #12]
 801d1f6:	021a      	lsls	r2, r3, #8
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	430a      	orrs	r2, r1
 801d1fe:	619a      	str	r2, [r3, #24]
      break;
 801d200:	e048      	b.n	801d294 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d202:	68fb      	ldr	r3, [r7, #12]
 801d204:	681b      	ldr	r3, [r3, #0]
 801d206:	68ba      	ldr	r2, [r7, #8]
 801d208:	0011      	movs	r1, r2
 801d20a:	0018      	movs	r0, r3
 801d20c:	f000 f92c 	bl	801d468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	69da      	ldr	r2, [r3, #28]
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	2108      	movs	r1, #8
 801d21c:	430a      	orrs	r2, r1
 801d21e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d220:	68fb      	ldr	r3, [r7, #12]
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	69da      	ldr	r2, [r3, #28]
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	681b      	ldr	r3, [r3, #0]
 801d22a:	2104      	movs	r1, #4
 801d22c:	438a      	bics	r2, r1
 801d22e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d230:	68fb      	ldr	r3, [r7, #12]
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	69d9      	ldr	r1, [r3, #28]
 801d236:	68bb      	ldr	r3, [r7, #8]
 801d238:	68da      	ldr	r2, [r3, #12]
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	430a      	orrs	r2, r1
 801d240:	61da      	str	r2, [r3, #28]
      break;
 801d242:	e027      	b.n	801d294 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	681b      	ldr	r3, [r3, #0]
 801d248:	68ba      	ldr	r2, [r7, #8]
 801d24a:	0011      	movs	r1, r2
 801d24c:	0018      	movs	r0, r3
 801d24e:	f000 f94b 	bl	801d4e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	69da      	ldr	r2, [r3, #28]
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	2180      	movs	r1, #128	@ 0x80
 801d25e:	0109      	lsls	r1, r1, #4
 801d260:	430a      	orrs	r2, r1
 801d262:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d264:	68fb      	ldr	r3, [r7, #12]
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	69da      	ldr	r2, [r3, #28]
 801d26a:	68fb      	ldr	r3, [r7, #12]
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	490f      	ldr	r1, [pc, #60]	@ (801d2ac <HAL_TIM_PWM_ConfigChannel+0x188>)
 801d270:	400a      	ands	r2, r1
 801d272:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	69d9      	ldr	r1, [r3, #28]
 801d27a:	68bb      	ldr	r3, [r7, #8]
 801d27c:	68db      	ldr	r3, [r3, #12]
 801d27e:	021a      	lsls	r2, r3, #8
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	430a      	orrs	r2, r1
 801d286:	61da      	str	r2, [r3, #28]
      break;
 801d288:	e004      	b.n	801d294 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801d28a:	2317      	movs	r3, #23
 801d28c:	18fb      	adds	r3, r7, r3
 801d28e:	2201      	movs	r2, #1
 801d290:	701a      	strb	r2, [r3, #0]
      break;
 801d292:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	2238      	movs	r2, #56	@ 0x38
 801d298:	2100      	movs	r1, #0
 801d29a:	5499      	strb	r1, [r3, r2]

  return status;
 801d29c:	2317      	movs	r3, #23
 801d29e:	18fb      	adds	r3, r7, r3
 801d2a0:	781b      	ldrb	r3, [r3, #0]
}
 801d2a2:	0018      	movs	r0, r3
 801d2a4:	46bd      	mov	sp, r7
 801d2a6:	b006      	add	sp, #24
 801d2a8:	bd80      	pop	{r7, pc}
 801d2aa:	46c0      	nop			@ (mov r8, r8)
 801d2ac:	fffffbff 	.word	0xfffffbff

0801d2b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801d2b0:	b580      	push	{r7, lr}
 801d2b2:	b084      	sub	sp, #16
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	6078      	str	r0, [r7, #4]
 801d2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d2c0:	687a      	ldr	r2, [r7, #4]
 801d2c2:	2380      	movs	r3, #128	@ 0x80
 801d2c4:	05db      	lsls	r3, r3, #23
 801d2c6:	429a      	cmp	r2, r3
 801d2c8:	d00b      	beq.n	801d2e2 <TIM_Base_SetConfig+0x32>
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	4a23      	ldr	r2, [pc, #140]	@ (801d35c <TIM_Base_SetConfig+0xac>)
 801d2ce:	4293      	cmp	r3, r2
 801d2d0:	d007      	beq.n	801d2e2 <TIM_Base_SetConfig+0x32>
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	4a22      	ldr	r2, [pc, #136]	@ (801d360 <TIM_Base_SetConfig+0xb0>)
 801d2d6:	4293      	cmp	r3, r2
 801d2d8:	d003      	beq.n	801d2e2 <TIM_Base_SetConfig+0x32>
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	4a21      	ldr	r2, [pc, #132]	@ (801d364 <TIM_Base_SetConfig+0xb4>)
 801d2de:	4293      	cmp	r3, r2
 801d2e0:	d108      	bne.n	801d2f4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d2e2:	68fb      	ldr	r3, [r7, #12]
 801d2e4:	2270      	movs	r2, #112	@ 0x70
 801d2e6:	4393      	bics	r3, r2
 801d2e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d2ea:	683b      	ldr	r3, [r7, #0]
 801d2ec:	685b      	ldr	r3, [r3, #4]
 801d2ee:	68fa      	ldr	r2, [r7, #12]
 801d2f0:	4313      	orrs	r3, r2
 801d2f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d2f4:	687a      	ldr	r2, [r7, #4]
 801d2f6:	2380      	movs	r3, #128	@ 0x80
 801d2f8:	05db      	lsls	r3, r3, #23
 801d2fa:	429a      	cmp	r2, r3
 801d2fc:	d00b      	beq.n	801d316 <TIM_Base_SetConfig+0x66>
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	4a16      	ldr	r2, [pc, #88]	@ (801d35c <TIM_Base_SetConfig+0xac>)
 801d302:	4293      	cmp	r3, r2
 801d304:	d007      	beq.n	801d316 <TIM_Base_SetConfig+0x66>
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	4a15      	ldr	r2, [pc, #84]	@ (801d360 <TIM_Base_SetConfig+0xb0>)
 801d30a:	4293      	cmp	r3, r2
 801d30c:	d003      	beq.n	801d316 <TIM_Base_SetConfig+0x66>
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	4a14      	ldr	r2, [pc, #80]	@ (801d364 <TIM_Base_SetConfig+0xb4>)
 801d312:	4293      	cmp	r3, r2
 801d314:	d108      	bne.n	801d328 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d316:	68fb      	ldr	r3, [r7, #12]
 801d318:	4a13      	ldr	r2, [pc, #76]	@ (801d368 <TIM_Base_SetConfig+0xb8>)
 801d31a:	4013      	ands	r3, r2
 801d31c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d31e:	683b      	ldr	r3, [r7, #0]
 801d320:	68db      	ldr	r3, [r3, #12]
 801d322:	68fa      	ldr	r2, [r7, #12]
 801d324:	4313      	orrs	r3, r2
 801d326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	2280      	movs	r2, #128	@ 0x80
 801d32c:	4393      	bics	r3, r2
 801d32e:	001a      	movs	r2, r3
 801d330:	683b      	ldr	r3, [r7, #0]
 801d332:	691b      	ldr	r3, [r3, #16]
 801d334:	4313      	orrs	r3, r2
 801d336:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	68fa      	ldr	r2, [r7, #12]
 801d33c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d33e:	683b      	ldr	r3, [r7, #0]
 801d340:	689a      	ldr	r2, [r3, #8]
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d346:	683b      	ldr	r3, [r7, #0]
 801d348:	681a      	ldr	r2, [r3, #0]
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	2201      	movs	r2, #1
 801d352:	615a      	str	r2, [r3, #20]
}
 801d354:	46c0      	nop			@ (mov r8, r8)
 801d356:	46bd      	mov	sp, r7
 801d358:	b004      	add	sp, #16
 801d35a:	bd80      	pop	{r7, pc}
 801d35c:	40000400 	.word	0x40000400
 801d360:	40010800 	.word	0x40010800
 801d364:	40011400 	.word	0x40011400
 801d368:	fffffcff 	.word	0xfffffcff

0801d36c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	b086      	sub	sp, #24
 801d370:	af00      	add	r7, sp, #0
 801d372:	6078      	str	r0, [r7, #4]
 801d374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	6a1b      	ldr	r3, [r3, #32]
 801d37a:	2201      	movs	r2, #1
 801d37c:	4393      	bics	r3, r2
 801d37e:	001a      	movs	r2, r3
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	6a1b      	ldr	r3, [r3, #32]
 801d388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	685b      	ldr	r3, [r3, #4]
 801d38e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	699b      	ldr	r3, [r3, #24]
 801d394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	2270      	movs	r2, #112	@ 0x70
 801d39a:	4393      	bics	r3, r2
 801d39c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d39e:	68fb      	ldr	r3, [r7, #12]
 801d3a0:	2203      	movs	r2, #3
 801d3a2:	4393      	bics	r3, r2
 801d3a4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d3a6:	683b      	ldr	r3, [r7, #0]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	68fa      	ldr	r2, [r7, #12]
 801d3ac:	4313      	orrs	r3, r2
 801d3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d3b0:	697b      	ldr	r3, [r7, #20]
 801d3b2:	2202      	movs	r2, #2
 801d3b4:	4393      	bics	r3, r2
 801d3b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d3b8:	683b      	ldr	r3, [r7, #0]
 801d3ba:	689b      	ldr	r3, [r3, #8]
 801d3bc:	697a      	ldr	r2, [r7, #20]
 801d3be:	4313      	orrs	r3, r2
 801d3c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	693a      	ldr	r2, [r7, #16]
 801d3c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	68fa      	ldr	r2, [r7, #12]
 801d3cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d3ce:	683b      	ldr	r3, [r7, #0]
 801d3d0:	685a      	ldr	r2, [r3, #4]
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	697a      	ldr	r2, [r7, #20]
 801d3da:	621a      	str	r2, [r3, #32]
}
 801d3dc:	46c0      	nop			@ (mov r8, r8)
 801d3de:	46bd      	mov	sp, r7
 801d3e0:	b006      	add	sp, #24
 801d3e2:	bd80      	pop	{r7, pc}

0801d3e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d3e4:	b580      	push	{r7, lr}
 801d3e6:	b086      	sub	sp, #24
 801d3e8:	af00      	add	r7, sp, #0
 801d3ea:	6078      	str	r0, [r7, #4]
 801d3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	6a1b      	ldr	r3, [r3, #32]
 801d3f2:	2210      	movs	r2, #16
 801d3f4:	4393      	bics	r3, r2
 801d3f6:	001a      	movs	r2, r3
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	6a1b      	ldr	r3, [r3, #32]
 801d400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	685b      	ldr	r3, [r3, #4]
 801d406:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	699b      	ldr	r3, [r3, #24]
 801d40c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	4a13      	ldr	r2, [pc, #76]	@ (801d460 <TIM_OC2_SetConfig+0x7c>)
 801d412:	4013      	ands	r3, r2
 801d414:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	4a12      	ldr	r2, [pc, #72]	@ (801d464 <TIM_OC2_SetConfig+0x80>)
 801d41a:	4013      	ands	r3, r2
 801d41c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d41e:	683b      	ldr	r3, [r7, #0]
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	021b      	lsls	r3, r3, #8
 801d424:	68fa      	ldr	r2, [r7, #12]
 801d426:	4313      	orrs	r3, r2
 801d428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d42a:	697b      	ldr	r3, [r7, #20]
 801d42c:	2220      	movs	r2, #32
 801d42e:	4393      	bics	r3, r2
 801d430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d432:	683b      	ldr	r3, [r7, #0]
 801d434:	689b      	ldr	r3, [r3, #8]
 801d436:	011b      	lsls	r3, r3, #4
 801d438:	697a      	ldr	r2, [r7, #20]
 801d43a:	4313      	orrs	r3, r2
 801d43c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	693a      	ldr	r2, [r7, #16]
 801d442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	68fa      	ldr	r2, [r7, #12]
 801d448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d44a:	683b      	ldr	r3, [r7, #0]
 801d44c:	685a      	ldr	r2, [r3, #4]
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	697a      	ldr	r2, [r7, #20]
 801d456:	621a      	str	r2, [r3, #32]
}
 801d458:	46c0      	nop			@ (mov r8, r8)
 801d45a:	46bd      	mov	sp, r7
 801d45c:	b006      	add	sp, #24
 801d45e:	bd80      	pop	{r7, pc}
 801d460:	ffff8fff 	.word	0xffff8fff
 801d464:	fffffcff 	.word	0xfffffcff

0801d468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d468:	b580      	push	{r7, lr}
 801d46a:	b086      	sub	sp, #24
 801d46c:	af00      	add	r7, sp, #0
 801d46e:	6078      	str	r0, [r7, #4]
 801d470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	6a1b      	ldr	r3, [r3, #32]
 801d476:	4a1a      	ldr	r2, [pc, #104]	@ (801d4e0 <TIM_OC3_SetConfig+0x78>)
 801d478:	401a      	ands	r2, r3
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	6a1b      	ldr	r3, [r3, #32]
 801d482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	685b      	ldr	r3, [r3, #4]
 801d488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	69db      	ldr	r3, [r3, #28]
 801d48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	2270      	movs	r2, #112	@ 0x70
 801d494:	4393      	bics	r3, r2
 801d496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	2203      	movs	r2, #3
 801d49c:	4393      	bics	r3, r2
 801d49e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d4a0:	683b      	ldr	r3, [r7, #0]
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	68fa      	ldr	r2, [r7, #12]
 801d4a6:	4313      	orrs	r3, r2
 801d4a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d4aa:	697b      	ldr	r3, [r7, #20]
 801d4ac:	4a0d      	ldr	r2, [pc, #52]	@ (801d4e4 <TIM_OC3_SetConfig+0x7c>)
 801d4ae:	4013      	ands	r3, r2
 801d4b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d4b2:	683b      	ldr	r3, [r7, #0]
 801d4b4:	689b      	ldr	r3, [r3, #8]
 801d4b6:	021b      	lsls	r3, r3, #8
 801d4b8:	697a      	ldr	r2, [r7, #20]
 801d4ba:	4313      	orrs	r3, r2
 801d4bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	693a      	ldr	r2, [r7, #16]
 801d4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	68fa      	ldr	r2, [r7, #12]
 801d4c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d4ca:	683b      	ldr	r3, [r7, #0]
 801d4cc:	685a      	ldr	r2, [r3, #4]
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	697a      	ldr	r2, [r7, #20]
 801d4d6:	621a      	str	r2, [r3, #32]
}
 801d4d8:	46c0      	nop			@ (mov r8, r8)
 801d4da:	46bd      	mov	sp, r7
 801d4dc:	b006      	add	sp, #24
 801d4de:	bd80      	pop	{r7, pc}
 801d4e0:	fffffeff 	.word	0xfffffeff
 801d4e4:	fffffdff 	.word	0xfffffdff

0801d4e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d4e8:	b580      	push	{r7, lr}
 801d4ea:	b086      	sub	sp, #24
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
 801d4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	6a1b      	ldr	r3, [r3, #32]
 801d4f6:	4a1b      	ldr	r2, [pc, #108]	@ (801d564 <TIM_OC4_SetConfig+0x7c>)
 801d4f8:	401a      	ands	r2, r3
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	6a1b      	ldr	r3, [r3, #32]
 801d502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	685b      	ldr	r3, [r3, #4]
 801d508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	69db      	ldr	r3, [r3, #28]
 801d50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d510:	68fb      	ldr	r3, [r7, #12]
 801d512:	4a15      	ldr	r2, [pc, #84]	@ (801d568 <TIM_OC4_SetConfig+0x80>)
 801d514:	4013      	ands	r3, r2
 801d516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	4a14      	ldr	r2, [pc, #80]	@ (801d56c <TIM_OC4_SetConfig+0x84>)
 801d51c:	4013      	ands	r3, r2
 801d51e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d520:	683b      	ldr	r3, [r7, #0]
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	021b      	lsls	r3, r3, #8
 801d526:	68fa      	ldr	r2, [r7, #12]
 801d528:	4313      	orrs	r3, r2
 801d52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d52c:	697b      	ldr	r3, [r7, #20]
 801d52e:	4a10      	ldr	r2, [pc, #64]	@ (801d570 <TIM_OC4_SetConfig+0x88>)
 801d530:	4013      	ands	r3, r2
 801d532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d534:	683b      	ldr	r3, [r7, #0]
 801d536:	689b      	ldr	r3, [r3, #8]
 801d538:	031b      	lsls	r3, r3, #12
 801d53a:	697a      	ldr	r2, [r7, #20]
 801d53c:	4313      	orrs	r3, r2
 801d53e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	693a      	ldr	r2, [r7, #16]
 801d544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	68fa      	ldr	r2, [r7, #12]
 801d54a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d54c:	683b      	ldr	r3, [r7, #0]
 801d54e:	685a      	ldr	r2, [r3, #4]
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	697a      	ldr	r2, [r7, #20]
 801d558:	621a      	str	r2, [r3, #32]
}
 801d55a:	46c0      	nop			@ (mov r8, r8)
 801d55c:	46bd      	mov	sp, r7
 801d55e:	b006      	add	sp, #24
 801d560:	bd80      	pop	{r7, pc}
 801d562:	46c0      	nop			@ (mov r8, r8)
 801d564:	ffffefff 	.word	0xffffefff
 801d568:	ffff8fff 	.word	0xffff8fff
 801d56c:	fffffcff 	.word	0xfffffcff
 801d570:	ffffdfff 	.word	0xffffdfff

0801d574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d574:	b580      	push	{r7, lr}
 801d576:	b086      	sub	sp, #24
 801d578:	af00      	add	r7, sp, #0
 801d57a:	60f8      	str	r0, [r7, #12]
 801d57c:	60b9      	str	r1, [r7, #8]
 801d57e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d580:	68bb      	ldr	r3, [r7, #8]
 801d582:	221f      	movs	r2, #31
 801d584:	4013      	ands	r3, r2
 801d586:	2201      	movs	r2, #1
 801d588:	409a      	lsls	r2, r3
 801d58a:	0013      	movs	r3, r2
 801d58c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	6a1b      	ldr	r3, [r3, #32]
 801d592:	697a      	ldr	r2, [r7, #20]
 801d594:	43d2      	mvns	r2, r2
 801d596:	401a      	ands	r2, r3
 801d598:	68fb      	ldr	r3, [r7, #12]
 801d59a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	6a1a      	ldr	r2, [r3, #32]
 801d5a0:	68bb      	ldr	r3, [r7, #8]
 801d5a2:	211f      	movs	r1, #31
 801d5a4:	400b      	ands	r3, r1
 801d5a6:	6879      	ldr	r1, [r7, #4]
 801d5a8:	4099      	lsls	r1, r3
 801d5aa:	000b      	movs	r3, r1
 801d5ac:	431a      	orrs	r2, r3
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	621a      	str	r2, [r3, #32]
}
 801d5b2:	46c0      	nop			@ (mov r8, r8)
 801d5b4:	46bd      	mov	sp, r7
 801d5b6:	b006      	add	sp, #24
 801d5b8:	bd80      	pop	{r7, pc}
	...

0801d5bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b084      	sub	sp, #16
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	6078      	str	r0, [r7, #4]
 801d5c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	2238      	movs	r2, #56	@ 0x38
 801d5ca:	5c9b      	ldrb	r3, [r3, r2]
 801d5cc:	2b01      	cmp	r3, #1
 801d5ce:	d101      	bne.n	801d5d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d5d0:	2302      	movs	r3, #2
 801d5d2:	e047      	b.n	801d664 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	2238      	movs	r2, #56	@ 0x38
 801d5d8:	2101      	movs	r1, #1
 801d5da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	2239      	movs	r2, #57	@ 0x39
 801d5e0:	2102      	movs	r1, #2
 801d5e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	685b      	ldr	r3, [r3, #4]
 801d5ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	689b      	ldr	r3, [r3, #8]
 801d5f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	2270      	movs	r2, #112	@ 0x70
 801d5f8:	4393      	bics	r3, r2
 801d5fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d5fc:	683b      	ldr	r3, [r7, #0]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	68fa      	ldr	r2, [r7, #12]
 801d602:	4313      	orrs	r3, r2
 801d604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	68fa      	ldr	r2, [r7, #12]
 801d60c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	681a      	ldr	r2, [r3, #0]
 801d612:	2380      	movs	r3, #128	@ 0x80
 801d614:	05db      	lsls	r3, r3, #23
 801d616:	429a      	cmp	r2, r3
 801d618:	d00e      	beq.n	801d638 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	4a13      	ldr	r2, [pc, #76]	@ (801d66c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801d620:	4293      	cmp	r3, r2
 801d622:	d009      	beq.n	801d638 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	4a11      	ldr	r2, [pc, #68]	@ (801d670 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801d62a:	4293      	cmp	r3, r2
 801d62c:	d004      	beq.n	801d638 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	4a10      	ldr	r2, [pc, #64]	@ (801d674 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801d634:	4293      	cmp	r3, r2
 801d636:	d10c      	bne.n	801d652 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d638:	68bb      	ldr	r3, [r7, #8]
 801d63a:	2280      	movs	r2, #128	@ 0x80
 801d63c:	4393      	bics	r3, r2
 801d63e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d640:	683b      	ldr	r3, [r7, #0]
 801d642:	685b      	ldr	r3, [r3, #4]
 801d644:	68ba      	ldr	r2, [r7, #8]
 801d646:	4313      	orrs	r3, r2
 801d648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	68ba      	ldr	r2, [r7, #8]
 801d650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	2239      	movs	r2, #57	@ 0x39
 801d656:	2101      	movs	r1, #1
 801d658:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	2238      	movs	r2, #56	@ 0x38
 801d65e:	2100      	movs	r1, #0
 801d660:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d662:	2300      	movs	r3, #0
}
 801d664:	0018      	movs	r0, r3
 801d666:	46bd      	mov	sp, r7
 801d668:	b004      	add	sp, #16
 801d66a:	bd80      	pop	{r7, pc}
 801d66c:	40000400 	.word	0x40000400
 801d670:	40010800 	.word	0x40010800
 801d674:	40011400 	.word	0x40011400

0801d678 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801d678:	b580      	push	{r7, lr}
 801d67a:	b082      	sub	sp, #8
 801d67c:	af00      	add	r7, sp, #0
 801d67e:	6078      	str	r0, [r7, #4]
 801d680:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	2238      	movs	r2, #56	@ 0x38
 801d686:	5c9b      	ldrb	r3, [r3, r2]
 801d688:	2b01      	cmp	r3, #1
 801d68a:	d101      	bne.n	801d690 <HAL_TIMEx_RemapConfig+0x18>
 801d68c:	2302      	movs	r3, #2
 801d68e:	e00c      	b.n	801d6aa <HAL_TIMEx_RemapConfig+0x32>
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	2238      	movs	r2, #56	@ 0x38
 801d694:	2101      	movs	r1, #1
 801d696:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	683a      	ldr	r2, [r7, #0]
 801d69e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	2238      	movs	r2, #56	@ 0x38
 801d6a4:	2100      	movs	r1, #0
 801d6a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d6a8:	2300      	movs	r3, #0
}
 801d6aa:	0018      	movs	r0, r3
 801d6ac:	46bd      	mov	sp, r7
 801d6ae:	b002      	add	sp, #8
 801d6b0:	bd80      	pop	{r7, pc}
	...

0801d6b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d6b4:	b580      	push	{r7, lr}
 801d6b6:	b082      	sub	sp, #8
 801d6b8:	af00      	add	r7, sp, #0
 801d6ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d101      	bne.n	801d6c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d6c2:	2301      	movs	r3, #1
 801d6c4:	e053      	b.n	801d76e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	d116      	bne.n	801d6fc <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	2278      	movs	r2, #120	@ 0x78
 801d6d2:	2100      	movs	r1, #0
 801d6d4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	0018      	movs	r0, r3
 801d6da:	f000 fd65 	bl	801e1a8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	22b0      	movs	r2, #176	@ 0xb0
 801d6e2:	589b      	ldr	r3, [r3, r2]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d103      	bne.n	801d6f0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	21b0      	movs	r1, #176	@ 0xb0
 801d6ec:	4a22      	ldr	r2, [pc, #136]	@ (801d778 <HAL_UART_Init+0xc4>)
 801d6ee:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	22b0      	movs	r2, #176	@ 0xb0
 801d6f4:	589b      	ldr	r3, [r3, r2]
 801d6f6:	687a      	ldr	r2, [r7, #4]
 801d6f8:	0010      	movs	r0, r2
 801d6fa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	2224      	movs	r2, #36	@ 0x24
 801d700:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	681a      	ldr	r2, [r3, #0]
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	2101      	movs	r1, #1
 801d70e:	438a      	bics	r2, r1
 801d710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	0018      	movs	r0, r3
 801d716:	f000 fd8b 	bl	801e230 <UART_SetConfig>
 801d71a:	0003      	movs	r3, r0
 801d71c:	2b01      	cmp	r3, #1
 801d71e:	d101      	bne.n	801d724 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801d720:	2301      	movs	r3, #1
 801d722:	e024      	b.n	801d76e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d003      	beq.n	801d734 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	0018      	movs	r0, r3
 801d730:	f001 f81c 	bl	801e76c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	685a      	ldr	r2, [r3, #4]
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	490f      	ldr	r1, [pc, #60]	@ (801d77c <HAL_UART_Init+0xc8>)
 801d740:	400a      	ands	r2, r1
 801d742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	689a      	ldr	r2, [r3, #8]
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	212a      	movs	r1, #42	@ 0x2a
 801d750:	438a      	bics	r2, r1
 801d752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	681a      	ldr	r2, [r3, #0]
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	2101      	movs	r1, #1
 801d760:	430a      	orrs	r2, r1
 801d762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	0018      	movs	r0, r3
 801d768:	f001 f8b4 	bl	801e8d4 <UART_CheckIdleState>
 801d76c:	0003      	movs	r3, r0
}
 801d76e:	0018      	movs	r0, r3
 801d770:	46bd      	mov	sp, r7
 801d772:	b002      	add	sp, #8
 801d774:	bd80      	pop	{r7, pc}
 801d776:	46c0      	nop			@ (mov r8, r8)
 801d778:	08013ec9 	.word	0x08013ec9
 801d77c:	ffffb7ff 	.word	0xffffb7ff

0801d780 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d780:	b580      	push	{r7, lr}
 801d782:	b08a      	sub	sp, #40	@ 0x28
 801d784:	af02      	add	r7, sp, #8
 801d786:	60f8      	str	r0, [r7, #12]
 801d788:	60b9      	str	r1, [r7, #8]
 801d78a:	603b      	str	r3, [r7, #0]
 801d78c:	1dbb      	adds	r3, r7, #6
 801d78e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d794:	2b20      	cmp	r3, #32
 801d796:	d000      	beq.n	801d79a <HAL_UART_Transmit+0x1a>
 801d798:	e08c      	b.n	801d8b4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d79a:	68bb      	ldr	r3, [r7, #8]
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d003      	beq.n	801d7a8 <HAL_UART_Transmit+0x28>
 801d7a0:	1dbb      	adds	r3, r7, #6
 801d7a2:	881b      	ldrh	r3, [r3, #0]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d101      	bne.n	801d7ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d7a8:	2301      	movs	r3, #1
 801d7aa:	e084      	b.n	801d8b6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	689a      	ldr	r2, [r3, #8]
 801d7b0:	2380      	movs	r3, #128	@ 0x80
 801d7b2:	015b      	lsls	r3, r3, #5
 801d7b4:	429a      	cmp	r2, r3
 801d7b6:	d109      	bne.n	801d7cc <HAL_UART_Transmit+0x4c>
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	691b      	ldr	r3, [r3, #16]
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d105      	bne.n	801d7cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d7c0:	68bb      	ldr	r3, [r7, #8]
 801d7c2:	2201      	movs	r2, #1
 801d7c4:	4013      	ands	r3, r2
 801d7c6:	d001      	beq.n	801d7cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d7c8:	2301      	movs	r3, #1
 801d7ca:	e074      	b.n	801d8b6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d7cc:	68fb      	ldr	r3, [r7, #12]
 801d7ce:	2284      	movs	r2, #132	@ 0x84
 801d7d0:	2100      	movs	r1, #0
 801d7d2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	2221      	movs	r2, #33	@ 0x21
 801d7d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d7da:	f7f7 fa7b 	bl	8014cd4 <HAL_GetTick>
 801d7de:	0003      	movs	r3, r0
 801d7e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d7e2:	68fb      	ldr	r3, [r7, #12]
 801d7e4:	1dba      	adds	r2, r7, #6
 801d7e6:	2150      	movs	r1, #80	@ 0x50
 801d7e8:	8812      	ldrh	r2, [r2, #0]
 801d7ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	1dba      	adds	r2, r7, #6
 801d7f0:	2152      	movs	r1, #82	@ 0x52
 801d7f2:	8812      	ldrh	r2, [r2, #0]
 801d7f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	689a      	ldr	r2, [r3, #8]
 801d7fa:	2380      	movs	r3, #128	@ 0x80
 801d7fc:	015b      	lsls	r3, r3, #5
 801d7fe:	429a      	cmp	r2, r3
 801d800:	d108      	bne.n	801d814 <HAL_UART_Transmit+0x94>
 801d802:	68fb      	ldr	r3, [r7, #12]
 801d804:	691b      	ldr	r3, [r3, #16]
 801d806:	2b00      	cmp	r3, #0
 801d808:	d104      	bne.n	801d814 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d80a:	2300      	movs	r3, #0
 801d80c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d80e:	68bb      	ldr	r3, [r7, #8]
 801d810:	61bb      	str	r3, [r7, #24]
 801d812:	e003      	b.n	801d81c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d814:	68bb      	ldr	r3, [r7, #8]
 801d816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d818:	2300      	movs	r3, #0
 801d81a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d81c:	e02f      	b.n	801d87e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d81e:	697a      	ldr	r2, [r7, #20]
 801d820:	68f8      	ldr	r0, [r7, #12]
 801d822:	683b      	ldr	r3, [r7, #0]
 801d824:	9300      	str	r3, [sp, #0]
 801d826:	0013      	movs	r3, r2
 801d828:	2200      	movs	r2, #0
 801d82a:	2180      	movs	r1, #128	@ 0x80
 801d82c:	f001 f8fa 	bl	801ea24 <UART_WaitOnFlagUntilTimeout>
 801d830:	1e03      	subs	r3, r0, #0
 801d832:	d004      	beq.n	801d83e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	2220      	movs	r2, #32
 801d838:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d83a:	2303      	movs	r3, #3
 801d83c:	e03b      	b.n	801d8b6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d83e:	69fb      	ldr	r3, [r7, #28]
 801d840:	2b00      	cmp	r3, #0
 801d842:	d10b      	bne.n	801d85c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d844:	69bb      	ldr	r3, [r7, #24]
 801d846:	881b      	ldrh	r3, [r3, #0]
 801d848:	001a      	movs	r2, r3
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	05d2      	lsls	r2, r2, #23
 801d850:	0dd2      	lsrs	r2, r2, #23
 801d852:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d854:	69bb      	ldr	r3, [r7, #24]
 801d856:	3302      	adds	r3, #2
 801d858:	61bb      	str	r3, [r7, #24]
 801d85a:	e007      	b.n	801d86c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d85c:	69fb      	ldr	r3, [r7, #28]
 801d85e:	781a      	ldrb	r2, [r3, #0]
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d866:	69fb      	ldr	r3, [r7, #28]
 801d868:	3301      	adds	r3, #1
 801d86a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	2252      	movs	r2, #82	@ 0x52
 801d870:	5a9b      	ldrh	r3, [r3, r2]
 801d872:	b29b      	uxth	r3, r3
 801d874:	3b01      	subs	r3, #1
 801d876:	b299      	uxth	r1, r3
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	2252      	movs	r2, #82	@ 0x52
 801d87c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	2252      	movs	r2, #82	@ 0x52
 801d882:	5a9b      	ldrh	r3, [r3, r2]
 801d884:	b29b      	uxth	r3, r3
 801d886:	2b00      	cmp	r3, #0
 801d888:	d1c9      	bne.n	801d81e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d88a:	697a      	ldr	r2, [r7, #20]
 801d88c:	68f8      	ldr	r0, [r7, #12]
 801d88e:	683b      	ldr	r3, [r7, #0]
 801d890:	9300      	str	r3, [sp, #0]
 801d892:	0013      	movs	r3, r2
 801d894:	2200      	movs	r2, #0
 801d896:	2140      	movs	r1, #64	@ 0x40
 801d898:	f001 f8c4 	bl	801ea24 <UART_WaitOnFlagUntilTimeout>
 801d89c:	1e03      	subs	r3, r0, #0
 801d89e:	d004      	beq.n	801d8aa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	2220      	movs	r2, #32
 801d8a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d8a6:	2303      	movs	r3, #3
 801d8a8:	e005      	b.n	801d8b6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d8aa:	68fb      	ldr	r3, [r7, #12]
 801d8ac:	2220      	movs	r2, #32
 801d8ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d8b0:	2300      	movs	r3, #0
 801d8b2:	e000      	b.n	801d8b6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d8b4:	2302      	movs	r3, #2
  }
}
 801d8b6:	0018      	movs	r0, r3
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	b008      	add	sp, #32
 801d8bc:	bd80      	pop	{r7, pc}
	...

0801d8c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d8c0:	b580      	push	{r7, lr}
 801d8c2:	b088      	sub	sp, #32
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	60f8      	str	r0, [r7, #12]
 801d8c8:	60b9      	str	r1, [r7, #8]
 801d8ca:	1dbb      	adds	r3, r7, #6
 801d8cc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	2280      	movs	r2, #128	@ 0x80
 801d8d2:	589b      	ldr	r3, [r3, r2]
 801d8d4:	2b20      	cmp	r3, #32
 801d8d6:	d14a      	bne.n	801d96e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d8d8:	68bb      	ldr	r3, [r7, #8]
 801d8da:	2b00      	cmp	r3, #0
 801d8dc:	d003      	beq.n	801d8e6 <HAL_UART_Receive_IT+0x26>
 801d8de:	1dbb      	adds	r3, r7, #6
 801d8e0:	881b      	ldrh	r3, [r3, #0]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d101      	bne.n	801d8ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d8e6:	2301      	movs	r3, #1
 801d8e8:	e042      	b.n	801d970 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	689a      	ldr	r2, [r3, #8]
 801d8ee:	2380      	movs	r3, #128	@ 0x80
 801d8f0:	015b      	lsls	r3, r3, #5
 801d8f2:	429a      	cmp	r2, r3
 801d8f4:	d109      	bne.n	801d90a <HAL_UART_Receive_IT+0x4a>
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	691b      	ldr	r3, [r3, #16]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d105      	bne.n	801d90a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d8fe:	68bb      	ldr	r3, [r7, #8]
 801d900:	2201      	movs	r2, #1
 801d902:	4013      	ands	r3, r2
 801d904:	d001      	beq.n	801d90a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d906:	2301      	movs	r3, #1
 801d908:	e032      	b.n	801d970 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	2200      	movs	r2, #0
 801d90e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	4a18      	ldr	r2, [pc, #96]	@ (801d978 <HAL_UART_Receive_IT+0xb8>)
 801d916:	4293      	cmp	r3, r2
 801d918:	d020      	beq.n	801d95c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	685a      	ldr	r2, [r3, #4]
 801d920:	2380      	movs	r3, #128	@ 0x80
 801d922:	041b      	lsls	r3, r3, #16
 801d924:	4013      	ands	r3, r2
 801d926:	d019      	beq.n	801d95c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d928:	f3ef 8310 	mrs	r3, PRIMASK
 801d92c:	613b      	str	r3, [r7, #16]
  return(result);
 801d92e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d930:	61fb      	str	r3, [r7, #28]
 801d932:	2301      	movs	r3, #1
 801d934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d936:	697b      	ldr	r3, [r7, #20]
 801d938:	f383 8810 	msr	PRIMASK, r3
}
 801d93c:	46c0      	nop			@ (mov r8, r8)
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	681a      	ldr	r2, [r3, #0]
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	2180      	movs	r1, #128	@ 0x80
 801d94a:	04c9      	lsls	r1, r1, #19
 801d94c:	430a      	orrs	r2, r1
 801d94e:	601a      	str	r2, [r3, #0]
 801d950:	69fb      	ldr	r3, [r7, #28]
 801d952:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d954:	69bb      	ldr	r3, [r7, #24]
 801d956:	f383 8810 	msr	PRIMASK, r3
}
 801d95a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d95c:	1dbb      	adds	r3, r7, #6
 801d95e:	881a      	ldrh	r2, [r3, #0]
 801d960:	68b9      	ldr	r1, [r7, #8]
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	0018      	movs	r0, r3
 801d966:	f001 f8c7 	bl	801eaf8 <UART_Start_Receive_IT>
 801d96a:	0003      	movs	r3, r0
 801d96c:	e000      	b.n	801d970 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d96e:	2302      	movs	r3, #2
  }
}
 801d970:	0018      	movs	r0, r3
 801d972:	46bd      	mov	sp, r7
 801d974:	b008      	add	sp, #32
 801d976:	bd80      	pop	{r7, pc}
 801d978:	40004800 	.word	0x40004800

0801d97c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d97c:	b580      	push	{r7, lr}
 801d97e:	b088      	sub	sp, #32
 801d980:	af00      	add	r7, sp, #0
 801d982:	60f8      	str	r0, [r7, #12]
 801d984:	60b9      	str	r1, [r7, #8]
 801d986:	1dbb      	adds	r3, r7, #6
 801d988:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d98e:	2b20      	cmp	r3, #32
 801d990:	d000      	beq.n	801d994 <HAL_UART_Transmit_DMA+0x18>
 801d992:	e077      	b.n	801da84 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d994:	68bb      	ldr	r3, [r7, #8]
 801d996:	2b00      	cmp	r3, #0
 801d998:	d003      	beq.n	801d9a2 <HAL_UART_Transmit_DMA+0x26>
 801d99a:	1dbb      	adds	r3, r7, #6
 801d99c:	881b      	ldrh	r3, [r3, #0]
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d101      	bne.n	801d9a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d9a2:	2301      	movs	r3, #1
 801d9a4:	e06f      	b.n	801da86 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	689a      	ldr	r2, [r3, #8]
 801d9aa:	2380      	movs	r3, #128	@ 0x80
 801d9ac:	015b      	lsls	r3, r3, #5
 801d9ae:	429a      	cmp	r2, r3
 801d9b0:	d109      	bne.n	801d9c6 <HAL_UART_Transmit_DMA+0x4a>
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	691b      	ldr	r3, [r3, #16]
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d105      	bne.n	801d9c6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d9ba:	68bb      	ldr	r3, [r7, #8]
 801d9bc:	2201      	movs	r2, #1
 801d9be:	4013      	ands	r3, r2
 801d9c0:	d001      	beq.n	801d9c6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d9c2:	2301      	movs	r3, #1
 801d9c4:	e05f      	b.n	801da86 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d9c6:	68fb      	ldr	r3, [r7, #12]
 801d9c8:	68ba      	ldr	r2, [r7, #8]
 801d9ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	1dba      	adds	r2, r7, #6
 801d9d0:	2150      	movs	r1, #80	@ 0x50
 801d9d2:	8812      	ldrh	r2, [r2, #0]
 801d9d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d9d6:	68fb      	ldr	r3, [r7, #12]
 801d9d8:	1dba      	adds	r2, r7, #6
 801d9da:	2152      	movs	r1, #82	@ 0x52
 801d9dc:	8812      	ldrh	r2, [r2, #0]
 801d9de:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	2284      	movs	r2, #132	@ 0x84
 801d9e4:	2100      	movs	r1, #0
 801d9e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	2221      	movs	r2, #33	@ 0x21
 801d9ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d027      	beq.n	801da46 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9fa:	4a25      	ldr	r2, [pc, #148]	@ (801da90 <HAL_UART_Transmit_DMA+0x114>)
 801d9fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801da02:	4a24      	ldr	r2, [pc, #144]	@ (801da94 <HAL_UART_Transmit_DMA+0x118>)
 801da04:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801da06:	68fb      	ldr	r3, [r7, #12]
 801da08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801da0a:	4a23      	ldr	r2, [pc, #140]	@ (801da98 <HAL_UART_Transmit_DMA+0x11c>)
 801da0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801da0e:	68fb      	ldr	r3, [r7, #12]
 801da10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801da12:	2200      	movs	r2, #0
 801da14:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801da16:	68fb      	ldr	r3, [r7, #12]
 801da18:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801da1e:	0019      	movs	r1, r3
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	681b      	ldr	r3, [r3, #0]
 801da24:	3328      	adds	r3, #40	@ 0x28
 801da26:	001a      	movs	r2, r3
 801da28:	1dbb      	adds	r3, r7, #6
 801da2a:	881b      	ldrh	r3, [r3, #0]
 801da2c:	f7f7 fea4 	bl	8015778 <HAL_DMA_Start_IT>
 801da30:	1e03      	subs	r3, r0, #0
 801da32:	d008      	beq.n	801da46 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	2284      	movs	r2, #132	@ 0x84
 801da38:	2110      	movs	r1, #16
 801da3a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	2220      	movs	r2, #32
 801da40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801da42:	2301      	movs	r3, #1
 801da44:	e01f      	b.n	801da86 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	2240      	movs	r2, #64	@ 0x40
 801da4c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da4e:	f3ef 8310 	mrs	r3, PRIMASK
 801da52:	613b      	str	r3, [r7, #16]
  return(result);
 801da54:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801da56:	61fb      	str	r3, [r7, #28]
 801da58:	2301      	movs	r3, #1
 801da5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da5c:	697b      	ldr	r3, [r7, #20]
 801da5e:	f383 8810 	msr	PRIMASK, r3
}
 801da62:	46c0      	nop			@ (mov r8, r8)
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	689a      	ldr	r2, [r3, #8]
 801da6a:	68fb      	ldr	r3, [r7, #12]
 801da6c:	681b      	ldr	r3, [r3, #0]
 801da6e:	2180      	movs	r1, #128	@ 0x80
 801da70:	430a      	orrs	r2, r1
 801da72:	609a      	str	r2, [r3, #8]
 801da74:	69fb      	ldr	r3, [r7, #28]
 801da76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da78:	69bb      	ldr	r3, [r7, #24]
 801da7a:	f383 8810 	msr	PRIMASK, r3
}
 801da7e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801da80:	2300      	movs	r3, #0
 801da82:	e000      	b.n	801da86 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801da84:	2302      	movs	r3, #2
  }
}
 801da86:	0018      	movs	r0, r3
 801da88:	46bd      	mov	sp, r7
 801da8a:	b008      	add	sp, #32
 801da8c:	bd80      	pop	{r7, pc}
 801da8e:	46c0      	nop			@ (mov r8, r8)
 801da90:	0801eedd 	.word	0x0801eedd
 801da94:	0801ef79 	.word	0x0801ef79
 801da98:	0801f119 	.word	0x0801f119

0801da9c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801da9c:	b580      	push	{r7, lr}
 801da9e:	b088      	sub	sp, #32
 801daa0:	af00      	add	r7, sp, #0
 801daa2:	60f8      	str	r0, [r7, #12]
 801daa4:	60b9      	str	r1, [r7, #8]
 801daa6:	1dbb      	adds	r3, r7, #6
 801daa8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	2280      	movs	r2, #128	@ 0x80
 801daae:	589b      	ldr	r3, [r3, r2]
 801dab0:	2b20      	cmp	r3, #32
 801dab2:	d14a      	bne.n	801db4a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801dab4:	68bb      	ldr	r3, [r7, #8]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d003      	beq.n	801dac2 <HAL_UART_Receive_DMA+0x26>
 801daba:	1dbb      	adds	r3, r7, #6
 801dabc:	881b      	ldrh	r3, [r3, #0]
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d101      	bne.n	801dac6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801dac2:	2301      	movs	r3, #1
 801dac4:	e042      	b.n	801db4c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	689a      	ldr	r2, [r3, #8]
 801daca:	2380      	movs	r3, #128	@ 0x80
 801dacc:	015b      	lsls	r3, r3, #5
 801dace:	429a      	cmp	r2, r3
 801dad0:	d109      	bne.n	801dae6 <HAL_UART_Receive_DMA+0x4a>
 801dad2:	68fb      	ldr	r3, [r7, #12]
 801dad4:	691b      	ldr	r3, [r3, #16]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d105      	bne.n	801dae6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801dada:	68bb      	ldr	r3, [r7, #8]
 801dadc:	2201      	movs	r2, #1
 801dade:	4013      	ands	r3, r2
 801dae0:	d001      	beq.n	801dae6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801dae2:	2301      	movs	r3, #1
 801dae4:	e032      	b.n	801db4c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	2200      	movs	r2, #0
 801daea:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801daec:	68fb      	ldr	r3, [r7, #12]
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	4a18      	ldr	r2, [pc, #96]	@ (801db54 <HAL_UART_Receive_DMA+0xb8>)
 801daf2:	4293      	cmp	r3, r2
 801daf4:	d020      	beq.n	801db38 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	681b      	ldr	r3, [r3, #0]
 801dafa:	685a      	ldr	r2, [r3, #4]
 801dafc:	2380      	movs	r3, #128	@ 0x80
 801dafe:	041b      	lsls	r3, r3, #16
 801db00:	4013      	ands	r3, r2
 801db02:	d019      	beq.n	801db38 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db04:	f3ef 8310 	mrs	r3, PRIMASK
 801db08:	613b      	str	r3, [r7, #16]
  return(result);
 801db0a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801db0c:	61fb      	str	r3, [r7, #28]
 801db0e:	2301      	movs	r3, #1
 801db10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db12:	697b      	ldr	r3, [r7, #20]
 801db14:	f383 8810 	msr	PRIMASK, r3
}
 801db18:	46c0      	nop			@ (mov r8, r8)
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	681a      	ldr	r2, [r3, #0]
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	2180      	movs	r1, #128	@ 0x80
 801db26:	04c9      	lsls	r1, r1, #19
 801db28:	430a      	orrs	r2, r1
 801db2a:	601a      	str	r2, [r3, #0]
 801db2c:	69fb      	ldr	r3, [r7, #28]
 801db2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db30:	69bb      	ldr	r3, [r7, #24]
 801db32:	f383 8810 	msr	PRIMASK, r3
}
 801db36:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801db38:	1dbb      	adds	r3, r7, #6
 801db3a:	881a      	ldrh	r2, [r3, #0]
 801db3c:	68b9      	ldr	r1, [r7, #8]
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	0018      	movs	r0, r3
 801db42:	f001 f8a3 	bl	801ec8c <UART_Start_Receive_DMA>
 801db46:	0003      	movs	r3, r0
 801db48:	e000      	b.n	801db4c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801db4a:	2302      	movs	r3, #2
  }
}
 801db4c:	0018      	movs	r0, r3
 801db4e:	46bd      	mov	sp, r7
 801db50:	b008      	add	sp, #32
 801db52:	bd80      	pop	{r7, pc}
 801db54:	40004800 	.word	0x40004800

0801db58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801db58:	b590      	push	{r4, r7, lr}
 801db5a:	b0ab      	sub	sp, #172	@ 0xac
 801db5c:	af00      	add	r7, sp, #0
 801db5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	681b      	ldr	r3, [r3, #0]
 801db64:	69db      	ldr	r3, [r3, #28]
 801db66:	22a4      	movs	r2, #164	@ 0xa4
 801db68:	18b9      	adds	r1, r7, r2
 801db6a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	20a0      	movs	r0, #160	@ 0xa0
 801db74:	1839      	adds	r1, r7, r0
 801db76:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	689b      	ldr	r3, [r3, #8]
 801db7e:	219c      	movs	r1, #156	@ 0x9c
 801db80:	1879      	adds	r1, r7, r1
 801db82:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801db84:	0011      	movs	r1, r2
 801db86:	18bb      	adds	r3, r7, r2
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	4a9c      	ldr	r2, [pc, #624]	@ (801ddfc <HAL_UART_IRQHandler+0x2a4>)
 801db8c:	4013      	ands	r3, r2
 801db8e:	2298      	movs	r2, #152	@ 0x98
 801db90:	18bc      	adds	r4, r7, r2
 801db92:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801db94:	18bb      	adds	r3, r7, r2
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d114      	bne.n	801dbc6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801db9c:	187b      	adds	r3, r7, r1
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	2220      	movs	r2, #32
 801dba2:	4013      	ands	r3, r2
 801dba4:	d00f      	beq.n	801dbc6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801dba6:	183b      	adds	r3, r7, r0
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	2220      	movs	r2, #32
 801dbac:	4013      	ands	r3, r2
 801dbae:	d00a      	beq.n	801dbc6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d100      	bne.n	801dbba <HAL_UART_IRQHandler+0x62>
 801dbb8:	e2aa      	b.n	801e110 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dbbe:	687a      	ldr	r2, [r7, #4]
 801dbc0:	0010      	movs	r0, r2
 801dbc2:	4798      	blx	r3
      }
      return;
 801dbc4:	e2a4      	b.n	801e110 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801dbc6:	2398      	movs	r3, #152	@ 0x98
 801dbc8:	18fb      	adds	r3, r7, r3
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d100      	bne.n	801dbd2 <HAL_UART_IRQHandler+0x7a>
 801dbd0:	e11a      	b.n	801de08 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801dbd2:	239c      	movs	r3, #156	@ 0x9c
 801dbd4:	18fb      	adds	r3, r7, r3
 801dbd6:	681b      	ldr	r3, [r3, #0]
 801dbd8:	2201      	movs	r2, #1
 801dbda:	4013      	ands	r3, r2
 801dbdc:	d106      	bne.n	801dbec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801dbde:	23a0      	movs	r3, #160	@ 0xa0
 801dbe0:	18fb      	adds	r3, r7, r3
 801dbe2:	681b      	ldr	r3, [r3, #0]
 801dbe4:	4a86      	ldr	r2, [pc, #536]	@ (801de00 <HAL_UART_IRQHandler+0x2a8>)
 801dbe6:	4013      	ands	r3, r2
 801dbe8:	d100      	bne.n	801dbec <HAL_UART_IRQHandler+0x94>
 801dbea:	e10d      	b.n	801de08 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801dbec:	23a4      	movs	r3, #164	@ 0xa4
 801dbee:	18fb      	adds	r3, r7, r3
 801dbf0:	681b      	ldr	r3, [r3, #0]
 801dbf2:	2201      	movs	r2, #1
 801dbf4:	4013      	ands	r3, r2
 801dbf6:	d012      	beq.n	801dc1e <HAL_UART_IRQHandler+0xc6>
 801dbf8:	23a0      	movs	r3, #160	@ 0xa0
 801dbfa:	18fb      	adds	r3, r7, r3
 801dbfc:	681a      	ldr	r2, [r3, #0]
 801dbfe:	2380      	movs	r3, #128	@ 0x80
 801dc00:	005b      	lsls	r3, r3, #1
 801dc02:	4013      	ands	r3, r2
 801dc04:	d00b      	beq.n	801dc1e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	681b      	ldr	r3, [r3, #0]
 801dc0a:	2201      	movs	r2, #1
 801dc0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	2284      	movs	r2, #132	@ 0x84
 801dc12:	589b      	ldr	r3, [r3, r2]
 801dc14:	2201      	movs	r2, #1
 801dc16:	431a      	orrs	r2, r3
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	2184      	movs	r1, #132	@ 0x84
 801dc1c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801dc1e:	23a4      	movs	r3, #164	@ 0xa4
 801dc20:	18fb      	adds	r3, r7, r3
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	2202      	movs	r2, #2
 801dc26:	4013      	ands	r3, r2
 801dc28:	d011      	beq.n	801dc4e <HAL_UART_IRQHandler+0xf6>
 801dc2a:	239c      	movs	r3, #156	@ 0x9c
 801dc2c:	18fb      	adds	r3, r7, r3
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	2201      	movs	r2, #1
 801dc32:	4013      	ands	r3, r2
 801dc34:	d00b      	beq.n	801dc4e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	2202      	movs	r2, #2
 801dc3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	2284      	movs	r2, #132	@ 0x84
 801dc42:	589b      	ldr	r3, [r3, r2]
 801dc44:	2204      	movs	r2, #4
 801dc46:	431a      	orrs	r2, r3
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	2184      	movs	r1, #132	@ 0x84
 801dc4c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801dc4e:	23a4      	movs	r3, #164	@ 0xa4
 801dc50:	18fb      	adds	r3, r7, r3
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	2204      	movs	r2, #4
 801dc56:	4013      	ands	r3, r2
 801dc58:	d011      	beq.n	801dc7e <HAL_UART_IRQHandler+0x126>
 801dc5a:	239c      	movs	r3, #156	@ 0x9c
 801dc5c:	18fb      	adds	r3, r7, r3
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	2201      	movs	r2, #1
 801dc62:	4013      	ands	r3, r2
 801dc64:	d00b      	beq.n	801dc7e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	2204      	movs	r2, #4
 801dc6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	2284      	movs	r2, #132	@ 0x84
 801dc72:	589b      	ldr	r3, [r3, r2]
 801dc74:	2202      	movs	r2, #2
 801dc76:	431a      	orrs	r2, r3
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	2184      	movs	r1, #132	@ 0x84
 801dc7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801dc7e:	23a4      	movs	r3, #164	@ 0xa4
 801dc80:	18fb      	adds	r3, r7, r3
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	2208      	movs	r2, #8
 801dc86:	4013      	ands	r3, r2
 801dc88:	d017      	beq.n	801dcba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801dc8a:	23a0      	movs	r3, #160	@ 0xa0
 801dc8c:	18fb      	adds	r3, r7, r3
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	2220      	movs	r2, #32
 801dc92:	4013      	ands	r3, r2
 801dc94:	d105      	bne.n	801dca2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801dc96:	239c      	movs	r3, #156	@ 0x9c
 801dc98:	18fb      	adds	r3, r7, r3
 801dc9a:	681b      	ldr	r3, [r3, #0]
 801dc9c:	2201      	movs	r2, #1
 801dc9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801dca0:	d00b      	beq.n	801dcba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	2208      	movs	r2, #8
 801dca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	2284      	movs	r2, #132	@ 0x84
 801dcae:	589b      	ldr	r3, [r3, r2]
 801dcb0:	2208      	movs	r2, #8
 801dcb2:	431a      	orrs	r2, r3
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	2184      	movs	r1, #132	@ 0x84
 801dcb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801dcba:	23a4      	movs	r3, #164	@ 0xa4
 801dcbc:	18fb      	adds	r3, r7, r3
 801dcbe:	681a      	ldr	r2, [r3, #0]
 801dcc0:	2380      	movs	r3, #128	@ 0x80
 801dcc2:	011b      	lsls	r3, r3, #4
 801dcc4:	4013      	ands	r3, r2
 801dcc6:	d013      	beq.n	801dcf0 <HAL_UART_IRQHandler+0x198>
 801dcc8:	23a0      	movs	r3, #160	@ 0xa0
 801dcca:	18fb      	adds	r3, r7, r3
 801dccc:	681a      	ldr	r2, [r3, #0]
 801dcce:	2380      	movs	r3, #128	@ 0x80
 801dcd0:	04db      	lsls	r3, r3, #19
 801dcd2:	4013      	ands	r3, r2
 801dcd4:	d00c      	beq.n	801dcf0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	2280      	movs	r2, #128	@ 0x80
 801dcdc:	0112      	lsls	r2, r2, #4
 801dcde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	2284      	movs	r2, #132	@ 0x84
 801dce4:	589b      	ldr	r3, [r3, r2]
 801dce6:	2220      	movs	r2, #32
 801dce8:	431a      	orrs	r2, r3
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	2184      	movs	r1, #132	@ 0x84
 801dcee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	2284      	movs	r2, #132	@ 0x84
 801dcf4:	589b      	ldr	r3, [r3, r2]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d100      	bne.n	801dcfc <HAL_UART_IRQHandler+0x1a4>
 801dcfa:	e20b      	b.n	801e114 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801dcfc:	23a4      	movs	r3, #164	@ 0xa4
 801dcfe:	18fb      	adds	r3, r7, r3
 801dd00:	681b      	ldr	r3, [r3, #0]
 801dd02:	2220      	movs	r2, #32
 801dd04:	4013      	ands	r3, r2
 801dd06:	d00e      	beq.n	801dd26 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801dd08:	23a0      	movs	r3, #160	@ 0xa0
 801dd0a:	18fb      	adds	r3, r7, r3
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	2220      	movs	r2, #32
 801dd10:	4013      	ands	r3, r2
 801dd12:	d008      	beq.n	801dd26 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	d004      	beq.n	801dd26 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dd20:	687a      	ldr	r2, [r7, #4]
 801dd22:	0010      	movs	r0, r2
 801dd24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	2284      	movs	r2, #132	@ 0x84
 801dd2a:	589b      	ldr	r3, [r3, r2]
 801dd2c:	2194      	movs	r1, #148	@ 0x94
 801dd2e:	187a      	adds	r2, r7, r1
 801dd30:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	681b      	ldr	r3, [r3, #0]
 801dd36:	689b      	ldr	r3, [r3, #8]
 801dd38:	2240      	movs	r2, #64	@ 0x40
 801dd3a:	4013      	ands	r3, r2
 801dd3c:	2b40      	cmp	r3, #64	@ 0x40
 801dd3e:	d004      	beq.n	801dd4a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801dd40:	187b      	adds	r3, r7, r1
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	2228      	movs	r2, #40	@ 0x28
 801dd46:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dd48:	d04b      	beq.n	801dde2 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	0018      	movs	r0, r3
 801dd4e:	f001 f861 	bl	801ee14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	689b      	ldr	r3, [r3, #8]
 801dd58:	2240      	movs	r2, #64	@ 0x40
 801dd5a:	4013      	ands	r3, r2
 801dd5c:	2b40      	cmp	r3, #64	@ 0x40
 801dd5e:	d139      	bne.n	801ddd4 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd60:	f3ef 8310 	mrs	r3, PRIMASK
 801dd64:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801dd66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dd68:	2090      	movs	r0, #144	@ 0x90
 801dd6a:	183a      	adds	r2, r7, r0
 801dd6c:	6013      	str	r3, [r2, #0]
 801dd6e:	2301      	movs	r3, #1
 801dd70:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dd74:	f383 8810 	msr	PRIMASK, r3
}
 801dd78:	46c0      	nop			@ (mov r8, r8)
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	689a      	ldr	r2, [r3, #8]
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	681b      	ldr	r3, [r3, #0]
 801dd84:	2140      	movs	r1, #64	@ 0x40
 801dd86:	438a      	bics	r2, r1
 801dd88:	609a      	str	r2, [r3, #8]
 801dd8a:	183b      	adds	r3, r7, r0
 801dd8c:	681b      	ldr	r3, [r3, #0]
 801dd8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dd92:	f383 8810 	msr	PRIMASK, r3
}
 801dd96:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d012      	beq.n	801ddc6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dda4:	4a17      	ldr	r2, [pc, #92]	@ (801de04 <HAL_UART_IRQHandler+0x2ac>)
 801dda6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddac:	0018      	movs	r0, r3
 801ddae:	f7f7 fd89 	bl	80158c4 <HAL_DMA_Abort_IT>
 801ddb2:	1e03      	subs	r3, r0, #0
 801ddb4:	d020      	beq.n	801ddf8 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddc0:	0018      	movs	r0, r3
 801ddc2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ddc4:	e018      	b.n	801ddf8 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	2298      	movs	r2, #152	@ 0x98
 801ddca:	589b      	ldr	r3, [r3, r2]
 801ddcc:	687a      	ldr	r2, [r7, #4]
 801ddce:	0010      	movs	r0, r2
 801ddd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ddd2:	e011      	b.n	801ddf8 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	2298      	movs	r2, #152	@ 0x98
 801ddd8:	589b      	ldr	r3, [r3, r2]
 801ddda:	687a      	ldr	r2, [r7, #4]
 801dddc:	0010      	movs	r0, r2
 801ddde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dde0:	e00a      	b.n	801ddf8 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	2298      	movs	r2, #152	@ 0x98
 801dde6:	589b      	ldr	r3, [r3, r2]
 801dde8:	687a      	ldr	r2, [r7, #4]
 801ddea:	0010      	movs	r0, r2
 801ddec:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	2284      	movs	r2, #132	@ 0x84
 801ddf2:	2100      	movs	r1, #0
 801ddf4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801ddf6:	e18d      	b.n	801e114 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ddf8:	46c0      	nop			@ (mov r8, r8)
    return;
 801ddfa:	e18b      	b.n	801e114 <HAL_UART_IRQHandler+0x5bc>
 801ddfc:	0000080f 	.word	0x0000080f
 801de00:	04000120 	.word	0x04000120
 801de04:	0801f1a1 	.word	0x0801f1a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801de0c:	2b01      	cmp	r3, #1
 801de0e:	d000      	beq.n	801de12 <HAL_UART_IRQHandler+0x2ba>
 801de10:	e13d      	b.n	801e08e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801de12:	23a4      	movs	r3, #164	@ 0xa4
 801de14:	18fb      	adds	r3, r7, r3
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	2210      	movs	r2, #16
 801de1a:	4013      	ands	r3, r2
 801de1c:	d100      	bne.n	801de20 <HAL_UART_IRQHandler+0x2c8>
 801de1e:	e136      	b.n	801e08e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801de20:	23a0      	movs	r3, #160	@ 0xa0
 801de22:	18fb      	adds	r3, r7, r3
 801de24:	681b      	ldr	r3, [r3, #0]
 801de26:	2210      	movs	r2, #16
 801de28:	4013      	ands	r3, r2
 801de2a:	d100      	bne.n	801de2e <HAL_UART_IRQHandler+0x2d6>
 801de2c:	e12f      	b.n	801e08e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	2210      	movs	r2, #16
 801de34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	689b      	ldr	r3, [r3, #8]
 801de3c:	2240      	movs	r2, #64	@ 0x40
 801de3e:	4013      	ands	r3, r2
 801de40:	2b40      	cmp	r3, #64	@ 0x40
 801de42:	d000      	beq.n	801de46 <HAL_UART_IRQHandler+0x2ee>
 801de44:	e0a2      	b.n	801df8c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	685a      	ldr	r2, [r3, #4]
 801de4e:	217e      	movs	r1, #126	@ 0x7e
 801de50:	187b      	adds	r3, r7, r1
 801de52:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801de54:	187b      	adds	r3, r7, r1
 801de56:	881b      	ldrh	r3, [r3, #0]
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d100      	bne.n	801de5e <HAL_UART_IRQHandler+0x306>
 801de5c:	e15c      	b.n	801e118 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801de5e:	687b      	ldr	r3, [r7, #4]
 801de60:	2258      	movs	r2, #88	@ 0x58
 801de62:	5a9b      	ldrh	r3, [r3, r2]
 801de64:	187a      	adds	r2, r7, r1
 801de66:	8812      	ldrh	r2, [r2, #0]
 801de68:	429a      	cmp	r2, r3
 801de6a:	d300      	bcc.n	801de6e <HAL_UART_IRQHandler+0x316>
 801de6c:	e154      	b.n	801e118 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	187a      	adds	r2, r7, r1
 801de72:	215a      	movs	r1, #90	@ 0x5a
 801de74:	8812      	ldrh	r2, [r2, #0]
 801de76:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	2220      	movs	r2, #32
 801de82:	4013      	ands	r3, r2
 801de84:	d16f      	bne.n	801df66 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de86:	f3ef 8310 	mrs	r3, PRIMASK
 801de8a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801de8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801de8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 801de90:	2301      	movs	r3, #1
 801de92:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801de96:	f383 8810 	msr	PRIMASK, r3
}
 801de9a:	46c0      	nop			@ (mov r8, r8)
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	681a      	ldr	r2, [r3, #0]
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	49a0      	ldr	r1, [pc, #640]	@ (801e128 <HAL_UART_IRQHandler+0x5d0>)
 801dea8:	400a      	ands	r2, r1
 801deaa:	601a      	str	r2, [r3, #0]
 801deac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801deae:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801deb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801deb2:	f383 8810 	msr	PRIMASK, r3
}
 801deb6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801deb8:	f3ef 8310 	mrs	r3, PRIMASK
 801debc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801debe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dec0:	677b      	str	r3, [r7, #116]	@ 0x74
 801dec2:	2301      	movs	r3, #1
 801dec4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dec8:	f383 8810 	msr	PRIMASK, r3
}
 801decc:	46c0      	nop			@ (mov r8, r8)
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	689a      	ldr	r2, [r3, #8]
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	2101      	movs	r1, #1
 801deda:	438a      	bics	r2, r1
 801dedc:	609a      	str	r2, [r3, #8]
 801dede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dee0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dee4:	f383 8810 	msr	PRIMASK, r3
}
 801dee8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801deea:	f3ef 8310 	mrs	r3, PRIMASK
 801deee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801def0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801def2:	673b      	str	r3, [r7, #112]	@ 0x70
 801def4:	2301      	movs	r3, #1
 801def6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801def8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801defa:	f383 8810 	msr	PRIMASK, r3
}
 801defe:	46c0      	nop			@ (mov r8, r8)
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	681b      	ldr	r3, [r3, #0]
 801df04:	689a      	ldr	r2, [r3, #8]
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	2140      	movs	r1, #64	@ 0x40
 801df0c:	438a      	bics	r2, r1
 801df0e:	609a      	str	r2, [r3, #8]
 801df10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801df12:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801df16:	f383 8810 	msr	PRIMASK, r3
}
 801df1a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	2280      	movs	r2, #128	@ 0x80
 801df20:	2120      	movs	r1, #32
 801df22:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	2200      	movs	r2, #0
 801df28:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df2a:	f3ef 8310 	mrs	r3, PRIMASK
 801df2e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801df30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801df32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801df34:	2301      	movs	r3, #1
 801df36:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801df3a:	f383 8810 	msr	PRIMASK, r3
}
 801df3e:	46c0      	nop			@ (mov r8, r8)
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	681a      	ldr	r2, [r3, #0]
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	2110      	movs	r1, #16
 801df4c:	438a      	bics	r2, r1
 801df4e:	601a      	str	r2, [r3, #0]
 801df50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801df52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801df56:	f383 8810 	msr	PRIMASK, r3
}
 801df5a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df60:	0018      	movs	r0, r3
 801df62:	f7f7 fc6f 	bl	8015844 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	2202      	movs	r2, #2
 801df6a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	22ac      	movs	r2, #172	@ 0xac
 801df70:	589b      	ldr	r3, [r3, r2]
 801df72:	687a      	ldr	r2, [r7, #4]
 801df74:	2158      	movs	r1, #88	@ 0x58
 801df76:	5a51      	ldrh	r1, [r2, r1]
 801df78:	687a      	ldr	r2, [r7, #4]
 801df7a:	205a      	movs	r0, #90	@ 0x5a
 801df7c:	5a12      	ldrh	r2, [r2, r0]
 801df7e:	b292      	uxth	r2, r2
 801df80:	1a8a      	subs	r2, r1, r2
 801df82:	b291      	uxth	r1, r2
 801df84:	687a      	ldr	r2, [r7, #4]
 801df86:	0010      	movs	r0, r2
 801df88:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801df8a:	e0c5      	b.n	801e118 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	2258      	movs	r2, #88	@ 0x58
 801df90:	5a99      	ldrh	r1, [r3, r2]
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	225a      	movs	r2, #90	@ 0x5a
 801df96:	5a9b      	ldrh	r3, [r3, r2]
 801df98:	b29a      	uxth	r2, r3
 801df9a:	208e      	movs	r0, #142	@ 0x8e
 801df9c:	183b      	adds	r3, r7, r0
 801df9e:	1a8a      	subs	r2, r1, r2
 801dfa0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	225a      	movs	r2, #90	@ 0x5a
 801dfa6:	5a9b      	ldrh	r3, [r3, r2]
 801dfa8:	b29b      	uxth	r3, r3
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	d100      	bne.n	801dfb0 <HAL_UART_IRQHandler+0x458>
 801dfae:	e0b5      	b.n	801e11c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801dfb0:	183b      	adds	r3, r7, r0
 801dfb2:	881b      	ldrh	r3, [r3, #0]
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	d100      	bne.n	801dfba <HAL_UART_IRQHandler+0x462>
 801dfb8:	e0b0      	b.n	801e11c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dfba:	f3ef 8310 	mrs	r3, PRIMASK
 801dfbe:	60fb      	str	r3, [r7, #12]
  return(result);
 801dfc0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dfc2:	2488      	movs	r4, #136	@ 0x88
 801dfc4:	193a      	adds	r2, r7, r4
 801dfc6:	6013      	str	r3, [r2, #0]
 801dfc8:	2301      	movs	r3, #1
 801dfca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfcc:	693b      	ldr	r3, [r7, #16]
 801dfce:	f383 8810 	msr	PRIMASK, r3
}
 801dfd2:	46c0      	nop			@ (mov r8, r8)
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	681a      	ldr	r2, [r3, #0]
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	4953      	ldr	r1, [pc, #332]	@ (801e12c <HAL_UART_IRQHandler+0x5d4>)
 801dfe0:	400a      	ands	r2, r1
 801dfe2:	601a      	str	r2, [r3, #0]
 801dfe4:	193b      	adds	r3, r7, r4
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfea:	697b      	ldr	r3, [r7, #20]
 801dfec:	f383 8810 	msr	PRIMASK, r3
}
 801dff0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dff2:	f3ef 8310 	mrs	r3, PRIMASK
 801dff6:	61bb      	str	r3, [r7, #24]
  return(result);
 801dff8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dffa:	2484      	movs	r4, #132	@ 0x84
 801dffc:	193a      	adds	r2, r7, r4
 801dffe:	6013      	str	r3, [r2, #0]
 801e000:	2301      	movs	r3, #1
 801e002:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e004:	69fb      	ldr	r3, [r7, #28]
 801e006:	f383 8810 	msr	PRIMASK, r3
}
 801e00a:	46c0      	nop			@ (mov r8, r8)
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	689a      	ldr	r2, [r3, #8]
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	2101      	movs	r1, #1
 801e018:	438a      	bics	r2, r1
 801e01a:	609a      	str	r2, [r3, #8]
 801e01c:	193b      	adds	r3, r7, r4
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e022:	6a3b      	ldr	r3, [r7, #32]
 801e024:	f383 8810 	msr	PRIMASK, r3
}
 801e028:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	2280      	movs	r2, #128	@ 0x80
 801e02e:	2120      	movs	r1, #32
 801e030:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	2200      	movs	r2, #0
 801e036:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	2200      	movs	r2, #0
 801e03c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e03e:	f3ef 8310 	mrs	r3, PRIMASK
 801e042:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e046:	2480      	movs	r4, #128	@ 0x80
 801e048:	193a      	adds	r2, r7, r4
 801e04a:	6013      	str	r3, [r2, #0]
 801e04c:	2301      	movs	r3, #1
 801e04e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e052:	f383 8810 	msr	PRIMASK, r3
}
 801e056:	46c0      	nop			@ (mov r8, r8)
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	681b      	ldr	r3, [r3, #0]
 801e05c:	681a      	ldr	r2, [r3, #0]
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	2110      	movs	r1, #16
 801e064:	438a      	bics	r2, r1
 801e066:	601a      	str	r2, [r3, #0]
 801e068:	193b      	adds	r3, r7, r4
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e070:	f383 8810 	msr	PRIMASK, r3
}
 801e074:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	2202      	movs	r2, #2
 801e07a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	22ac      	movs	r2, #172	@ 0xac
 801e080:	589b      	ldr	r3, [r3, r2]
 801e082:	183a      	adds	r2, r7, r0
 801e084:	8811      	ldrh	r1, [r2, #0]
 801e086:	687a      	ldr	r2, [r7, #4]
 801e088:	0010      	movs	r0, r2
 801e08a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801e08c:	e046      	b.n	801e11c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801e08e:	23a4      	movs	r3, #164	@ 0xa4
 801e090:	18fb      	adds	r3, r7, r3
 801e092:	681a      	ldr	r2, [r3, #0]
 801e094:	2380      	movs	r3, #128	@ 0x80
 801e096:	035b      	lsls	r3, r3, #13
 801e098:	4013      	ands	r3, r2
 801e09a:	d012      	beq.n	801e0c2 <HAL_UART_IRQHandler+0x56a>
 801e09c:	239c      	movs	r3, #156	@ 0x9c
 801e09e:	18fb      	adds	r3, r7, r3
 801e0a0:	681a      	ldr	r2, [r3, #0]
 801e0a2:	2380      	movs	r3, #128	@ 0x80
 801e0a4:	03db      	lsls	r3, r3, #15
 801e0a6:	4013      	ands	r3, r2
 801e0a8:	d00b      	beq.n	801e0c2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	2280      	movs	r2, #128	@ 0x80
 801e0b0:	0352      	lsls	r2, r2, #13
 801e0b2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	22a8      	movs	r2, #168	@ 0xa8
 801e0b8:	589b      	ldr	r3, [r3, r2]
 801e0ba:	687a      	ldr	r2, [r7, #4]
 801e0bc:	0010      	movs	r0, r2
 801e0be:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801e0c0:	e02f      	b.n	801e122 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801e0c2:	23a4      	movs	r3, #164	@ 0xa4
 801e0c4:	18fb      	adds	r3, r7, r3
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	2280      	movs	r2, #128	@ 0x80
 801e0ca:	4013      	ands	r3, r2
 801e0cc:	d00f      	beq.n	801e0ee <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801e0ce:	23a0      	movs	r3, #160	@ 0xa0
 801e0d0:	18fb      	adds	r3, r7, r3
 801e0d2:	681b      	ldr	r3, [r3, #0]
 801e0d4:	2280      	movs	r2, #128	@ 0x80
 801e0d6:	4013      	ands	r3, r2
 801e0d8:	d009      	beq.n	801e0ee <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d01e      	beq.n	801e120 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e0e6:	687a      	ldr	r2, [r7, #4]
 801e0e8:	0010      	movs	r0, r2
 801e0ea:	4798      	blx	r3
    }
    return;
 801e0ec:	e018      	b.n	801e120 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801e0ee:	23a4      	movs	r3, #164	@ 0xa4
 801e0f0:	18fb      	adds	r3, r7, r3
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	2240      	movs	r2, #64	@ 0x40
 801e0f6:	4013      	ands	r3, r2
 801e0f8:	d013      	beq.n	801e122 <HAL_UART_IRQHandler+0x5ca>
 801e0fa:	23a0      	movs	r3, #160	@ 0xa0
 801e0fc:	18fb      	adds	r3, r7, r3
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	2240      	movs	r2, #64	@ 0x40
 801e102:	4013      	ands	r3, r2
 801e104:	d00d      	beq.n	801e122 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	0018      	movs	r0, r3
 801e10a:	f001 f862 	bl	801f1d2 <UART_EndTransmit_IT>
    return;
 801e10e:	e008      	b.n	801e122 <HAL_UART_IRQHandler+0x5ca>
      return;
 801e110:	46c0      	nop			@ (mov r8, r8)
 801e112:	e006      	b.n	801e122 <HAL_UART_IRQHandler+0x5ca>
    return;
 801e114:	46c0      	nop			@ (mov r8, r8)
 801e116:	e004      	b.n	801e122 <HAL_UART_IRQHandler+0x5ca>
      return;
 801e118:	46c0      	nop			@ (mov r8, r8)
 801e11a:	e002      	b.n	801e122 <HAL_UART_IRQHandler+0x5ca>
      return;
 801e11c:	46c0      	nop			@ (mov r8, r8)
 801e11e:	e000      	b.n	801e122 <HAL_UART_IRQHandler+0x5ca>
    return;
 801e120:	46c0      	nop			@ (mov r8, r8)
  }

}
 801e122:	46bd      	mov	sp, r7
 801e124:	b02b      	add	sp, #172	@ 0xac
 801e126:	bd90      	pop	{r4, r7, pc}
 801e128:	fffffeff 	.word	0xfffffeff
 801e12c:	fffffedf 	.word	0xfffffedf

0801e130 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801e130:	b580      	push	{r7, lr}
 801e132:	b082      	sub	sp, #8
 801e134:	af00      	add	r7, sp, #0
 801e136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801e138:	46c0      	nop			@ (mov r8, r8)
 801e13a:	46bd      	mov	sp, r7
 801e13c:	b002      	add	sp, #8
 801e13e:	bd80      	pop	{r7, pc}

0801e140 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801e140:	b580      	push	{r7, lr}
 801e142:	b082      	sub	sp, #8
 801e144:	af00      	add	r7, sp, #0
 801e146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801e148:	46c0      	nop			@ (mov r8, r8)
 801e14a:	46bd      	mov	sp, r7
 801e14c:	b002      	add	sp, #8
 801e14e:	bd80      	pop	{r7, pc}

0801e150 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801e150:	b580      	push	{r7, lr}
 801e152:	b082      	sub	sp, #8
 801e154:	af00      	add	r7, sp, #0
 801e156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801e158:	46c0      	nop			@ (mov r8, r8)
 801e15a:	46bd      	mov	sp, r7
 801e15c:	b002      	add	sp, #8
 801e15e:	bd80      	pop	{r7, pc}

0801e160 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801e160:	b580      	push	{r7, lr}
 801e162:	b082      	sub	sp, #8
 801e164:	af00      	add	r7, sp, #0
 801e166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801e168:	46c0      	nop			@ (mov r8, r8)
 801e16a:	46bd      	mov	sp, r7
 801e16c:	b002      	add	sp, #8
 801e16e:	bd80      	pop	{r7, pc}

0801e170 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801e170:	b580      	push	{r7, lr}
 801e172:	b082      	sub	sp, #8
 801e174:	af00      	add	r7, sp, #0
 801e176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801e178:	46c0      	nop			@ (mov r8, r8)
 801e17a:	46bd      	mov	sp, r7
 801e17c:	b002      	add	sp, #8
 801e17e:	bd80      	pop	{r7, pc}

0801e180 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801e180:	b580      	push	{r7, lr}
 801e182:	b082      	sub	sp, #8
 801e184:	af00      	add	r7, sp, #0
 801e186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801e188:	46c0      	nop			@ (mov r8, r8)
 801e18a:	46bd      	mov	sp, r7
 801e18c:	b002      	add	sp, #8
 801e18e:	bd80      	pop	{r7, pc}

0801e190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801e190:	b580      	push	{r7, lr}
 801e192:	b082      	sub	sp, #8
 801e194:	af00      	add	r7, sp, #0
 801e196:	6078      	str	r0, [r7, #4]
 801e198:	000a      	movs	r2, r1
 801e19a:	1cbb      	adds	r3, r7, #2
 801e19c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801e19e:	46c0      	nop			@ (mov r8, r8)
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	b002      	add	sp, #8
 801e1a4:	bd80      	pop	{r7, pc}
	...

0801e1a8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	b082      	sub	sp, #8
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	2188      	movs	r1, #136	@ 0x88
 801e1b4:	4a14      	ldr	r2, [pc, #80]	@ (801e208 <UART_InitCallbacksToDefault+0x60>)
 801e1b6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	218c      	movs	r1, #140	@ 0x8c
 801e1bc:	4a13      	ldr	r2, [pc, #76]	@ (801e20c <UART_InitCallbacksToDefault+0x64>)
 801e1be:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	2190      	movs	r1, #144	@ 0x90
 801e1c4:	4a12      	ldr	r2, [pc, #72]	@ (801e210 <UART_InitCallbacksToDefault+0x68>)
 801e1c6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	2194      	movs	r1, #148	@ 0x94
 801e1cc:	4a11      	ldr	r2, [pc, #68]	@ (801e214 <UART_InitCallbacksToDefault+0x6c>)
 801e1ce:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	2198      	movs	r1, #152	@ 0x98
 801e1d4:	4a10      	ldr	r2, [pc, #64]	@ (801e218 <UART_InitCallbacksToDefault+0x70>)
 801e1d6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	219c      	movs	r1, #156	@ 0x9c
 801e1dc:	4a0f      	ldr	r2, [pc, #60]	@ (801e21c <UART_InitCallbacksToDefault+0x74>)
 801e1de:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	21a0      	movs	r1, #160	@ 0xa0
 801e1e4:	4a0e      	ldr	r2, [pc, #56]	@ (801e220 <UART_InitCallbacksToDefault+0x78>)
 801e1e6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	21a4      	movs	r1, #164	@ 0xa4
 801e1ec:	4a0d      	ldr	r2, [pc, #52]	@ (801e224 <UART_InitCallbacksToDefault+0x7c>)
 801e1ee:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	21a8      	movs	r1, #168	@ 0xa8
 801e1f4:	4a0c      	ldr	r2, [pc, #48]	@ (801e228 <UART_InitCallbacksToDefault+0x80>)
 801e1f6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	21ac      	movs	r1, #172	@ 0xac
 801e1fc:	4a0b      	ldr	r2, [pc, #44]	@ (801e22c <UART_InitCallbacksToDefault+0x84>)
 801e1fe:	505a      	str	r2, [r3, r1]

}
 801e200:	46c0      	nop			@ (mov r8, r8)
 801e202:	46bd      	mov	sp, r7
 801e204:	b002      	add	sp, #8
 801e206:	bd80      	pop	{r7, pc}
 801e208:	0801e141 	.word	0x0801e141
 801e20c:	0801e131 	.word	0x0801e131
 801e210:	0801e151 	.word	0x0801e151
 801e214:	0800d6e9 	.word	0x0800d6e9
 801e218:	08005151 	.word	0x08005151
 801e21c:	0801e161 	.word	0x0801e161
 801e220:	0801e171 	.word	0x0801e171
 801e224:	0801e181 	.word	0x0801e181
 801e228:	0801f5c5 	.word	0x0801f5c5
 801e22c:	0801e191 	.word	0x0801e191

0801e230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e230:	b5b0      	push	{r4, r5, r7, lr}
 801e232:	b08e      	sub	sp, #56	@ 0x38
 801e234:	af00      	add	r7, sp, #0
 801e236:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e238:	231a      	movs	r3, #26
 801e23a:	2218      	movs	r2, #24
 801e23c:	189b      	adds	r3, r3, r2
 801e23e:	19db      	adds	r3, r3, r7
 801e240:	2200      	movs	r2, #0
 801e242:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e244:	69fb      	ldr	r3, [r7, #28]
 801e246:	689a      	ldr	r2, [r3, #8]
 801e248:	69fb      	ldr	r3, [r7, #28]
 801e24a:	691b      	ldr	r3, [r3, #16]
 801e24c:	431a      	orrs	r2, r3
 801e24e:	69fb      	ldr	r3, [r7, #28]
 801e250:	695b      	ldr	r3, [r3, #20]
 801e252:	431a      	orrs	r2, r3
 801e254:	69fb      	ldr	r3, [r7, #28]
 801e256:	69db      	ldr	r3, [r3, #28]
 801e258:	4313      	orrs	r3, r2
 801e25a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e25c:	69fb      	ldr	r3, [r7, #28]
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	4ac3      	ldr	r2, [pc, #780]	@ (801e570 <UART_SetConfig+0x340>)
 801e264:	4013      	ands	r3, r2
 801e266:	0019      	movs	r1, r3
 801e268:	69fb      	ldr	r3, [r7, #28]
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e26e:	430a      	orrs	r2, r1
 801e270:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e272:	69fb      	ldr	r3, [r7, #28]
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	685b      	ldr	r3, [r3, #4]
 801e278:	4abe      	ldr	r2, [pc, #760]	@ (801e574 <UART_SetConfig+0x344>)
 801e27a:	4013      	ands	r3, r2
 801e27c:	0019      	movs	r1, r3
 801e27e:	69fb      	ldr	r3, [r7, #28]
 801e280:	68da      	ldr	r2, [r3, #12]
 801e282:	69fb      	ldr	r3, [r7, #28]
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	430a      	orrs	r2, r1
 801e288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e28a:	69fb      	ldr	r3, [r7, #28]
 801e28c:	699b      	ldr	r3, [r3, #24]
 801e28e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e290:	69fb      	ldr	r3, [r7, #28]
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	4ab8      	ldr	r2, [pc, #736]	@ (801e578 <UART_SetConfig+0x348>)
 801e296:	4293      	cmp	r3, r2
 801e298:	d004      	beq.n	801e2a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e29a:	69fb      	ldr	r3, [r7, #28]
 801e29c:	6a1b      	ldr	r3, [r3, #32]
 801e29e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e2a0:	4313      	orrs	r3, r2
 801e2a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e2a4:	69fb      	ldr	r3, [r7, #28]
 801e2a6:	681b      	ldr	r3, [r3, #0]
 801e2a8:	689b      	ldr	r3, [r3, #8]
 801e2aa:	4ab4      	ldr	r2, [pc, #720]	@ (801e57c <UART_SetConfig+0x34c>)
 801e2ac:	4013      	ands	r3, r2
 801e2ae:	0019      	movs	r1, r3
 801e2b0:	69fb      	ldr	r3, [r7, #28]
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e2b6:	430a      	orrs	r2, r1
 801e2b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e2ba:	69fb      	ldr	r3, [r7, #28]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	4ab0      	ldr	r2, [pc, #704]	@ (801e580 <UART_SetConfig+0x350>)
 801e2c0:	4293      	cmp	r3, r2
 801e2c2:	d131      	bne.n	801e328 <UART_SetConfig+0xf8>
 801e2c4:	4baf      	ldr	r3, [pc, #700]	@ (801e584 <UART_SetConfig+0x354>)
 801e2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e2c8:	2203      	movs	r2, #3
 801e2ca:	4013      	ands	r3, r2
 801e2cc:	2b03      	cmp	r3, #3
 801e2ce:	d01d      	beq.n	801e30c <UART_SetConfig+0xdc>
 801e2d0:	d823      	bhi.n	801e31a <UART_SetConfig+0xea>
 801e2d2:	2b02      	cmp	r3, #2
 801e2d4:	d00c      	beq.n	801e2f0 <UART_SetConfig+0xc0>
 801e2d6:	d820      	bhi.n	801e31a <UART_SetConfig+0xea>
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d002      	beq.n	801e2e2 <UART_SetConfig+0xb2>
 801e2dc:	2b01      	cmp	r3, #1
 801e2de:	d00e      	beq.n	801e2fe <UART_SetConfig+0xce>
 801e2e0:	e01b      	b.n	801e31a <UART_SetConfig+0xea>
 801e2e2:	231b      	movs	r3, #27
 801e2e4:	2218      	movs	r2, #24
 801e2e6:	189b      	adds	r3, r3, r2
 801e2e8:	19db      	adds	r3, r3, r7
 801e2ea:	2201      	movs	r2, #1
 801e2ec:	701a      	strb	r2, [r3, #0]
 801e2ee:	e0b4      	b.n	801e45a <UART_SetConfig+0x22a>
 801e2f0:	231b      	movs	r3, #27
 801e2f2:	2218      	movs	r2, #24
 801e2f4:	189b      	adds	r3, r3, r2
 801e2f6:	19db      	adds	r3, r3, r7
 801e2f8:	2202      	movs	r2, #2
 801e2fa:	701a      	strb	r2, [r3, #0]
 801e2fc:	e0ad      	b.n	801e45a <UART_SetConfig+0x22a>
 801e2fe:	231b      	movs	r3, #27
 801e300:	2218      	movs	r2, #24
 801e302:	189b      	adds	r3, r3, r2
 801e304:	19db      	adds	r3, r3, r7
 801e306:	2204      	movs	r2, #4
 801e308:	701a      	strb	r2, [r3, #0]
 801e30a:	e0a6      	b.n	801e45a <UART_SetConfig+0x22a>
 801e30c:	231b      	movs	r3, #27
 801e30e:	2218      	movs	r2, #24
 801e310:	189b      	adds	r3, r3, r2
 801e312:	19db      	adds	r3, r3, r7
 801e314:	2208      	movs	r2, #8
 801e316:	701a      	strb	r2, [r3, #0]
 801e318:	e09f      	b.n	801e45a <UART_SetConfig+0x22a>
 801e31a:	231b      	movs	r3, #27
 801e31c:	2218      	movs	r2, #24
 801e31e:	189b      	adds	r3, r3, r2
 801e320:	19db      	adds	r3, r3, r7
 801e322:	2210      	movs	r2, #16
 801e324:	701a      	strb	r2, [r3, #0]
 801e326:	e098      	b.n	801e45a <UART_SetConfig+0x22a>
 801e328:	69fb      	ldr	r3, [r7, #28]
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	4a96      	ldr	r2, [pc, #600]	@ (801e588 <UART_SetConfig+0x358>)
 801e32e:	4293      	cmp	r3, r2
 801e330:	d131      	bne.n	801e396 <UART_SetConfig+0x166>
 801e332:	4b94      	ldr	r3, [pc, #592]	@ (801e584 <UART_SetConfig+0x354>)
 801e334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e336:	220c      	movs	r2, #12
 801e338:	4013      	ands	r3, r2
 801e33a:	2b0c      	cmp	r3, #12
 801e33c:	d01d      	beq.n	801e37a <UART_SetConfig+0x14a>
 801e33e:	d823      	bhi.n	801e388 <UART_SetConfig+0x158>
 801e340:	2b08      	cmp	r3, #8
 801e342:	d00c      	beq.n	801e35e <UART_SetConfig+0x12e>
 801e344:	d820      	bhi.n	801e388 <UART_SetConfig+0x158>
 801e346:	2b00      	cmp	r3, #0
 801e348:	d002      	beq.n	801e350 <UART_SetConfig+0x120>
 801e34a:	2b04      	cmp	r3, #4
 801e34c:	d00e      	beq.n	801e36c <UART_SetConfig+0x13c>
 801e34e:	e01b      	b.n	801e388 <UART_SetConfig+0x158>
 801e350:	231b      	movs	r3, #27
 801e352:	2218      	movs	r2, #24
 801e354:	189b      	adds	r3, r3, r2
 801e356:	19db      	adds	r3, r3, r7
 801e358:	2200      	movs	r2, #0
 801e35a:	701a      	strb	r2, [r3, #0]
 801e35c:	e07d      	b.n	801e45a <UART_SetConfig+0x22a>
 801e35e:	231b      	movs	r3, #27
 801e360:	2218      	movs	r2, #24
 801e362:	189b      	adds	r3, r3, r2
 801e364:	19db      	adds	r3, r3, r7
 801e366:	2202      	movs	r2, #2
 801e368:	701a      	strb	r2, [r3, #0]
 801e36a:	e076      	b.n	801e45a <UART_SetConfig+0x22a>
 801e36c:	231b      	movs	r3, #27
 801e36e:	2218      	movs	r2, #24
 801e370:	189b      	adds	r3, r3, r2
 801e372:	19db      	adds	r3, r3, r7
 801e374:	2204      	movs	r2, #4
 801e376:	701a      	strb	r2, [r3, #0]
 801e378:	e06f      	b.n	801e45a <UART_SetConfig+0x22a>
 801e37a:	231b      	movs	r3, #27
 801e37c:	2218      	movs	r2, #24
 801e37e:	189b      	adds	r3, r3, r2
 801e380:	19db      	adds	r3, r3, r7
 801e382:	2208      	movs	r2, #8
 801e384:	701a      	strb	r2, [r3, #0]
 801e386:	e068      	b.n	801e45a <UART_SetConfig+0x22a>
 801e388:	231b      	movs	r3, #27
 801e38a:	2218      	movs	r2, #24
 801e38c:	189b      	adds	r3, r3, r2
 801e38e:	19db      	adds	r3, r3, r7
 801e390:	2210      	movs	r2, #16
 801e392:	701a      	strb	r2, [r3, #0]
 801e394:	e061      	b.n	801e45a <UART_SetConfig+0x22a>
 801e396:	69fb      	ldr	r3, [r7, #28]
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	4a7c      	ldr	r2, [pc, #496]	@ (801e58c <UART_SetConfig+0x35c>)
 801e39c:	4293      	cmp	r3, r2
 801e39e:	d106      	bne.n	801e3ae <UART_SetConfig+0x17e>
 801e3a0:	231b      	movs	r3, #27
 801e3a2:	2218      	movs	r2, #24
 801e3a4:	189b      	adds	r3, r3, r2
 801e3a6:	19db      	adds	r3, r3, r7
 801e3a8:	2200      	movs	r2, #0
 801e3aa:	701a      	strb	r2, [r3, #0]
 801e3ac:	e055      	b.n	801e45a <UART_SetConfig+0x22a>
 801e3ae:	69fb      	ldr	r3, [r7, #28]
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	4a77      	ldr	r2, [pc, #476]	@ (801e590 <UART_SetConfig+0x360>)
 801e3b4:	4293      	cmp	r3, r2
 801e3b6:	d106      	bne.n	801e3c6 <UART_SetConfig+0x196>
 801e3b8:	231b      	movs	r3, #27
 801e3ba:	2218      	movs	r2, #24
 801e3bc:	189b      	adds	r3, r3, r2
 801e3be:	19db      	adds	r3, r3, r7
 801e3c0:	2200      	movs	r2, #0
 801e3c2:	701a      	strb	r2, [r3, #0]
 801e3c4:	e049      	b.n	801e45a <UART_SetConfig+0x22a>
 801e3c6:	69fb      	ldr	r3, [r7, #28]
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	4a6b      	ldr	r2, [pc, #428]	@ (801e578 <UART_SetConfig+0x348>)
 801e3cc:	4293      	cmp	r3, r2
 801e3ce:	d13e      	bne.n	801e44e <UART_SetConfig+0x21e>
 801e3d0:	4b6c      	ldr	r3, [pc, #432]	@ (801e584 <UART_SetConfig+0x354>)
 801e3d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e3d4:	23c0      	movs	r3, #192	@ 0xc0
 801e3d6:	011b      	lsls	r3, r3, #4
 801e3d8:	4013      	ands	r3, r2
 801e3da:	22c0      	movs	r2, #192	@ 0xc0
 801e3dc:	0112      	lsls	r2, r2, #4
 801e3de:	4293      	cmp	r3, r2
 801e3e0:	d027      	beq.n	801e432 <UART_SetConfig+0x202>
 801e3e2:	22c0      	movs	r2, #192	@ 0xc0
 801e3e4:	0112      	lsls	r2, r2, #4
 801e3e6:	4293      	cmp	r3, r2
 801e3e8:	d82a      	bhi.n	801e440 <UART_SetConfig+0x210>
 801e3ea:	2280      	movs	r2, #128	@ 0x80
 801e3ec:	0112      	lsls	r2, r2, #4
 801e3ee:	4293      	cmp	r3, r2
 801e3f0:	d011      	beq.n	801e416 <UART_SetConfig+0x1e6>
 801e3f2:	2280      	movs	r2, #128	@ 0x80
 801e3f4:	0112      	lsls	r2, r2, #4
 801e3f6:	4293      	cmp	r3, r2
 801e3f8:	d822      	bhi.n	801e440 <UART_SetConfig+0x210>
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	d004      	beq.n	801e408 <UART_SetConfig+0x1d8>
 801e3fe:	2280      	movs	r2, #128	@ 0x80
 801e400:	00d2      	lsls	r2, r2, #3
 801e402:	4293      	cmp	r3, r2
 801e404:	d00e      	beq.n	801e424 <UART_SetConfig+0x1f4>
 801e406:	e01b      	b.n	801e440 <UART_SetConfig+0x210>
 801e408:	231b      	movs	r3, #27
 801e40a:	2218      	movs	r2, #24
 801e40c:	189b      	adds	r3, r3, r2
 801e40e:	19db      	adds	r3, r3, r7
 801e410:	2200      	movs	r2, #0
 801e412:	701a      	strb	r2, [r3, #0]
 801e414:	e021      	b.n	801e45a <UART_SetConfig+0x22a>
 801e416:	231b      	movs	r3, #27
 801e418:	2218      	movs	r2, #24
 801e41a:	189b      	adds	r3, r3, r2
 801e41c:	19db      	adds	r3, r3, r7
 801e41e:	2202      	movs	r2, #2
 801e420:	701a      	strb	r2, [r3, #0]
 801e422:	e01a      	b.n	801e45a <UART_SetConfig+0x22a>
 801e424:	231b      	movs	r3, #27
 801e426:	2218      	movs	r2, #24
 801e428:	189b      	adds	r3, r3, r2
 801e42a:	19db      	adds	r3, r3, r7
 801e42c:	2204      	movs	r2, #4
 801e42e:	701a      	strb	r2, [r3, #0]
 801e430:	e013      	b.n	801e45a <UART_SetConfig+0x22a>
 801e432:	231b      	movs	r3, #27
 801e434:	2218      	movs	r2, #24
 801e436:	189b      	adds	r3, r3, r2
 801e438:	19db      	adds	r3, r3, r7
 801e43a:	2208      	movs	r2, #8
 801e43c:	701a      	strb	r2, [r3, #0]
 801e43e:	e00c      	b.n	801e45a <UART_SetConfig+0x22a>
 801e440:	231b      	movs	r3, #27
 801e442:	2218      	movs	r2, #24
 801e444:	189b      	adds	r3, r3, r2
 801e446:	19db      	adds	r3, r3, r7
 801e448:	2210      	movs	r2, #16
 801e44a:	701a      	strb	r2, [r3, #0]
 801e44c:	e005      	b.n	801e45a <UART_SetConfig+0x22a>
 801e44e:	231b      	movs	r3, #27
 801e450:	2218      	movs	r2, #24
 801e452:	189b      	adds	r3, r3, r2
 801e454:	19db      	adds	r3, r3, r7
 801e456:	2210      	movs	r2, #16
 801e458:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e45a:	69fb      	ldr	r3, [r7, #28]
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	4a46      	ldr	r2, [pc, #280]	@ (801e578 <UART_SetConfig+0x348>)
 801e460:	4293      	cmp	r3, r2
 801e462:	d000      	beq.n	801e466 <UART_SetConfig+0x236>
 801e464:	e09a      	b.n	801e59c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e466:	231b      	movs	r3, #27
 801e468:	2218      	movs	r2, #24
 801e46a:	189b      	adds	r3, r3, r2
 801e46c:	19db      	adds	r3, r3, r7
 801e46e:	781b      	ldrb	r3, [r3, #0]
 801e470:	2b08      	cmp	r3, #8
 801e472:	d01d      	beq.n	801e4b0 <UART_SetConfig+0x280>
 801e474:	dc20      	bgt.n	801e4b8 <UART_SetConfig+0x288>
 801e476:	2b04      	cmp	r3, #4
 801e478:	d015      	beq.n	801e4a6 <UART_SetConfig+0x276>
 801e47a:	dc1d      	bgt.n	801e4b8 <UART_SetConfig+0x288>
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d002      	beq.n	801e486 <UART_SetConfig+0x256>
 801e480:	2b02      	cmp	r3, #2
 801e482:	d005      	beq.n	801e490 <UART_SetConfig+0x260>
 801e484:	e018      	b.n	801e4b8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e486:	f7fd fe2d 	bl	801c0e4 <HAL_RCC_GetPCLK1Freq>
 801e48a:	0003      	movs	r3, r0
 801e48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e48e:	e01c      	b.n	801e4ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e490:	4b3c      	ldr	r3, [pc, #240]	@ (801e584 <UART_SetConfig+0x354>)
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	2210      	movs	r2, #16
 801e496:	4013      	ands	r3, r2
 801e498:	d002      	beq.n	801e4a0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e49a:	4b3e      	ldr	r3, [pc, #248]	@ (801e594 <UART_SetConfig+0x364>)
 801e49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e49e:	e014      	b.n	801e4ca <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801e4a0:	4b3d      	ldr	r3, [pc, #244]	@ (801e598 <UART_SetConfig+0x368>)
 801e4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e4a4:	e011      	b.n	801e4ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e4a6:	f7fd fd6d 	bl	801bf84 <HAL_RCC_GetSysClockFreq>
 801e4aa:	0003      	movs	r3, r0
 801e4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e4ae:	e00c      	b.n	801e4ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e4b0:	2380      	movs	r3, #128	@ 0x80
 801e4b2:	021b      	lsls	r3, r3, #8
 801e4b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e4b6:	e008      	b.n	801e4ca <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801e4b8:	2300      	movs	r3, #0
 801e4ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e4bc:	231a      	movs	r3, #26
 801e4be:	2218      	movs	r2, #24
 801e4c0:	189b      	adds	r3, r3, r2
 801e4c2:	19db      	adds	r3, r3, r7
 801e4c4:	2201      	movs	r2, #1
 801e4c6:	701a      	strb	r2, [r3, #0]
        break;
 801e4c8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d100      	bne.n	801e4d2 <UART_SetConfig+0x2a2>
 801e4d0:	e133      	b.n	801e73a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e4d2:	69fb      	ldr	r3, [r7, #28]
 801e4d4:	685a      	ldr	r2, [r3, #4]
 801e4d6:	0013      	movs	r3, r2
 801e4d8:	005b      	lsls	r3, r3, #1
 801e4da:	189b      	adds	r3, r3, r2
 801e4dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e4de:	429a      	cmp	r2, r3
 801e4e0:	d305      	bcc.n	801e4ee <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801e4e2:	69fb      	ldr	r3, [r7, #28]
 801e4e4:	685b      	ldr	r3, [r3, #4]
 801e4e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e4e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e4ea:	429a      	cmp	r2, r3
 801e4ec:	d906      	bls.n	801e4fc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801e4ee:	231a      	movs	r3, #26
 801e4f0:	2218      	movs	r2, #24
 801e4f2:	189b      	adds	r3, r3, r2
 801e4f4:	19db      	adds	r3, r3, r7
 801e4f6:	2201      	movs	r2, #1
 801e4f8:	701a      	strb	r2, [r3, #0]
 801e4fa:	e11e      	b.n	801e73a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801e4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e4fe:	613b      	str	r3, [r7, #16]
 801e500:	2300      	movs	r3, #0
 801e502:	617b      	str	r3, [r7, #20]
 801e504:	6939      	ldr	r1, [r7, #16]
 801e506:	697a      	ldr	r2, [r7, #20]
 801e508:	000b      	movs	r3, r1
 801e50a:	0e1b      	lsrs	r3, r3, #24
 801e50c:	0010      	movs	r0, r2
 801e50e:	0205      	lsls	r5, r0, #8
 801e510:	431d      	orrs	r5, r3
 801e512:	000b      	movs	r3, r1
 801e514:	021c      	lsls	r4, r3, #8
 801e516:	69fb      	ldr	r3, [r7, #28]
 801e518:	685b      	ldr	r3, [r3, #4]
 801e51a:	085b      	lsrs	r3, r3, #1
 801e51c:	60bb      	str	r3, [r7, #8]
 801e51e:	2300      	movs	r3, #0
 801e520:	60fb      	str	r3, [r7, #12]
 801e522:	68b8      	ldr	r0, [r7, #8]
 801e524:	68f9      	ldr	r1, [r7, #12]
 801e526:	1900      	adds	r0, r0, r4
 801e528:	4169      	adcs	r1, r5
 801e52a:	69fb      	ldr	r3, [r7, #28]
 801e52c:	685b      	ldr	r3, [r3, #4]
 801e52e:	603b      	str	r3, [r7, #0]
 801e530:	2300      	movs	r3, #0
 801e532:	607b      	str	r3, [r7, #4]
 801e534:	683a      	ldr	r2, [r7, #0]
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	f7e2 f822 	bl	8000580 <__aeabi_uldivmod>
 801e53c:	0002      	movs	r2, r0
 801e53e:	000b      	movs	r3, r1
 801e540:	0013      	movs	r3, r2
 801e542:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e546:	23c0      	movs	r3, #192	@ 0xc0
 801e548:	009b      	lsls	r3, r3, #2
 801e54a:	429a      	cmp	r2, r3
 801e54c:	d309      	bcc.n	801e562 <UART_SetConfig+0x332>
 801e54e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e550:	2380      	movs	r3, #128	@ 0x80
 801e552:	035b      	lsls	r3, r3, #13
 801e554:	429a      	cmp	r2, r3
 801e556:	d204      	bcs.n	801e562 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801e558:	69fb      	ldr	r3, [r7, #28]
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e55e:	60da      	str	r2, [r3, #12]
 801e560:	e0eb      	b.n	801e73a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801e562:	231a      	movs	r3, #26
 801e564:	2218      	movs	r2, #24
 801e566:	189b      	adds	r3, r3, r2
 801e568:	19db      	adds	r3, r3, r7
 801e56a:	2201      	movs	r2, #1
 801e56c:	701a      	strb	r2, [r3, #0]
 801e56e:	e0e4      	b.n	801e73a <UART_SetConfig+0x50a>
 801e570:	efff69f3 	.word	0xefff69f3
 801e574:	ffffcfff 	.word	0xffffcfff
 801e578:	40004800 	.word	0x40004800
 801e57c:	fffff4ff 	.word	0xfffff4ff
 801e580:	40013800 	.word	0x40013800
 801e584:	40021000 	.word	0x40021000
 801e588:	40004400 	.word	0x40004400
 801e58c:	40004c00 	.word	0x40004c00
 801e590:	40005000 	.word	0x40005000
 801e594:	003d0900 	.word	0x003d0900
 801e598:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e59c:	69fb      	ldr	r3, [r7, #28]
 801e59e:	69da      	ldr	r2, [r3, #28]
 801e5a0:	2380      	movs	r3, #128	@ 0x80
 801e5a2:	021b      	lsls	r3, r3, #8
 801e5a4:	429a      	cmp	r2, r3
 801e5a6:	d000      	beq.n	801e5aa <UART_SetConfig+0x37a>
 801e5a8:	e070      	b.n	801e68c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801e5aa:	231b      	movs	r3, #27
 801e5ac:	2218      	movs	r2, #24
 801e5ae:	189b      	adds	r3, r3, r2
 801e5b0:	19db      	adds	r3, r3, r7
 801e5b2:	781b      	ldrb	r3, [r3, #0]
 801e5b4:	2b08      	cmp	r3, #8
 801e5b6:	d822      	bhi.n	801e5fe <UART_SetConfig+0x3ce>
 801e5b8:	009a      	lsls	r2, r3, #2
 801e5ba:	4b67      	ldr	r3, [pc, #412]	@ (801e758 <UART_SetConfig+0x528>)
 801e5bc:	18d3      	adds	r3, r2, r3
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e5c2:	f7fd fd8f 	bl	801c0e4 <HAL_RCC_GetPCLK1Freq>
 801e5c6:	0003      	movs	r3, r0
 801e5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e5ca:	e021      	b.n	801e610 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e5cc:	f7fd fda0 	bl	801c110 <HAL_RCC_GetPCLK2Freq>
 801e5d0:	0003      	movs	r3, r0
 801e5d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e5d4:	e01c      	b.n	801e610 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e5d6:	4b61      	ldr	r3, [pc, #388]	@ (801e75c <UART_SetConfig+0x52c>)
 801e5d8:	681b      	ldr	r3, [r3, #0]
 801e5da:	2210      	movs	r2, #16
 801e5dc:	4013      	ands	r3, r2
 801e5de:	d002      	beq.n	801e5e6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e5e0:	4b5f      	ldr	r3, [pc, #380]	@ (801e760 <UART_SetConfig+0x530>)
 801e5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e5e4:	e014      	b.n	801e610 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801e5e6:	4b5f      	ldr	r3, [pc, #380]	@ (801e764 <UART_SetConfig+0x534>)
 801e5e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e5ea:	e011      	b.n	801e610 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e5ec:	f7fd fcca 	bl	801bf84 <HAL_RCC_GetSysClockFreq>
 801e5f0:	0003      	movs	r3, r0
 801e5f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e5f4:	e00c      	b.n	801e610 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e5f6:	2380      	movs	r3, #128	@ 0x80
 801e5f8:	021b      	lsls	r3, r3, #8
 801e5fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e5fc:	e008      	b.n	801e610 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801e5fe:	2300      	movs	r3, #0
 801e600:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e602:	231a      	movs	r3, #26
 801e604:	2218      	movs	r2, #24
 801e606:	189b      	adds	r3, r3, r2
 801e608:	19db      	adds	r3, r3, r7
 801e60a:	2201      	movs	r2, #1
 801e60c:	701a      	strb	r2, [r3, #0]
        break;
 801e60e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e612:	2b00      	cmp	r3, #0
 801e614:	d100      	bne.n	801e618 <UART_SetConfig+0x3e8>
 801e616:	e090      	b.n	801e73a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e61a:	005a      	lsls	r2, r3, #1
 801e61c:	69fb      	ldr	r3, [r7, #28]
 801e61e:	685b      	ldr	r3, [r3, #4]
 801e620:	085b      	lsrs	r3, r3, #1
 801e622:	18d2      	adds	r2, r2, r3
 801e624:	69fb      	ldr	r3, [r7, #28]
 801e626:	685b      	ldr	r3, [r3, #4]
 801e628:	0019      	movs	r1, r3
 801e62a:	0010      	movs	r0, r2
 801e62c:	f7e1 fdba 	bl	80001a4 <__udivsi3>
 801e630:	0003      	movs	r3, r0
 801e632:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e636:	2b0f      	cmp	r3, #15
 801e638:	d921      	bls.n	801e67e <UART_SetConfig+0x44e>
 801e63a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e63c:	2380      	movs	r3, #128	@ 0x80
 801e63e:	025b      	lsls	r3, r3, #9
 801e640:	429a      	cmp	r2, r3
 801e642:	d21c      	bcs.n	801e67e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e646:	b29a      	uxth	r2, r3
 801e648:	200e      	movs	r0, #14
 801e64a:	2418      	movs	r4, #24
 801e64c:	1903      	adds	r3, r0, r4
 801e64e:	19db      	adds	r3, r3, r7
 801e650:	210f      	movs	r1, #15
 801e652:	438a      	bics	r2, r1
 801e654:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e658:	085b      	lsrs	r3, r3, #1
 801e65a:	b29b      	uxth	r3, r3
 801e65c:	2207      	movs	r2, #7
 801e65e:	4013      	ands	r3, r2
 801e660:	b299      	uxth	r1, r3
 801e662:	1903      	adds	r3, r0, r4
 801e664:	19db      	adds	r3, r3, r7
 801e666:	1902      	adds	r2, r0, r4
 801e668:	19d2      	adds	r2, r2, r7
 801e66a:	8812      	ldrh	r2, [r2, #0]
 801e66c:	430a      	orrs	r2, r1
 801e66e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801e670:	69fb      	ldr	r3, [r7, #28]
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	1902      	adds	r2, r0, r4
 801e676:	19d2      	adds	r2, r2, r7
 801e678:	8812      	ldrh	r2, [r2, #0]
 801e67a:	60da      	str	r2, [r3, #12]
 801e67c:	e05d      	b.n	801e73a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e67e:	231a      	movs	r3, #26
 801e680:	2218      	movs	r2, #24
 801e682:	189b      	adds	r3, r3, r2
 801e684:	19db      	adds	r3, r3, r7
 801e686:	2201      	movs	r2, #1
 801e688:	701a      	strb	r2, [r3, #0]
 801e68a:	e056      	b.n	801e73a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e68c:	231b      	movs	r3, #27
 801e68e:	2218      	movs	r2, #24
 801e690:	189b      	adds	r3, r3, r2
 801e692:	19db      	adds	r3, r3, r7
 801e694:	781b      	ldrb	r3, [r3, #0]
 801e696:	2b08      	cmp	r3, #8
 801e698:	d822      	bhi.n	801e6e0 <UART_SetConfig+0x4b0>
 801e69a:	009a      	lsls	r2, r3, #2
 801e69c:	4b32      	ldr	r3, [pc, #200]	@ (801e768 <UART_SetConfig+0x538>)
 801e69e:	18d3      	adds	r3, r2, r3
 801e6a0:	681b      	ldr	r3, [r3, #0]
 801e6a2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e6a4:	f7fd fd1e 	bl	801c0e4 <HAL_RCC_GetPCLK1Freq>
 801e6a8:	0003      	movs	r3, r0
 801e6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e6ac:	e021      	b.n	801e6f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e6ae:	f7fd fd2f 	bl	801c110 <HAL_RCC_GetPCLK2Freq>
 801e6b2:	0003      	movs	r3, r0
 801e6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e6b6:	e01c      	b.n	801e6f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e6b8:	4b28      	ldr	r3, [pc, #160]	@ (801e75c <UART_SetConfig+0x52c>)
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	2210      	movs	r2, #16
 801e6be:	4013      	ands	r3, r2
 801e6c0:	d002      	beq.n	801e6c8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e6c2:	4b27      	ldr	r3, [pc, #156]	@ (801e760 <UART_SetConfig+0x530>)
 801e6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e6c6:	e014      	b.n	801e6f2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801e6c8:	4b26      	ldr	r3, [pc, #152]	@ (801e764 <UART_SetConfig+0x534>)
 801e6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e6cc:	e011      	b.n	801e6f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e6ce:	f7fd fc59 	bl	801bf84 <HAL_RCC_GetSysClockFreq>
 801e6d2:	0003      	movs	r3, r0
 801e6d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e6d6:	e00c      	b.n	801e6f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e6d8:	2380      	movs	r3, #128	@ 0x80
 801e6da:	021b      	lsls	r3, r3, #8
 801e6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e6de:	e008      	b.n	801e6f2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e6e4:	231a      	movs	r3, #26
 801e6e6:	2218      	movs	r2, #24
 801e6e8:	189b      	adds	r3, r3, r2
 801e6ea:	19db      	adds	r3, r3, r7
 801e6ec:	2201      	movs	r2, #1
 801e6ee:	701a      	strb	r2, [r3, #0]
        break;
 801e6f0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801e6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d020      	beq.n	801e73a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e6f8:	69fb      	ldr	r3, [r7, #28]
 801e6fa:	685b      	ldr	r3, [r3, #4]
 801e6fc:	085a      	lsrs	r2, r3, #1
 801e6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e700:	18d2      	adds	r2, r2, r3
 801e702:	69fb      	ldr	r3, [r7, #28]
 801e704:	685b      	ldr	r3, [r3, #4]
 801e706:	0019      	movs	r1, r3
 801e708:	0010      	movs	r0, r2
 801e70a:	f7e1 fd4b 	bl	80001a4 <__udivsi3>
 801e70e:	0003      	movs	r3, r0
 801e710:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e714:	2b0f      	cmp	r3, #15
 801e716:	d90a      	bls.n	801e72e <UART_SetConfig+0x4fe>
 801e718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e71a:	2380      	movs	r3, #128	@ 0x80
 801e71c:	025b      	lsls	r3, r3, #9
 801e71e:	429a      	cmp	r2, r3
 801e720:	d205      	bcs.n	801e72e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e724:	b29a      	uxth	r2, r3
 801e726:	69fb      	ldr	r3, [r7, #28]
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	60da      	str	r2, [r3, #12]
 801e72c:	e005      	b.n	801e73a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e72e:	231a      	movs	r3, #26
 801e730:	2218      	movs	r2, #24
 801e732:	189b      	adds	r3, r3, r2
 801e734:	19db      	adds	r3, r3, r7
 801e736:	2201      	movs	r2, #1
 801e738:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e73a:	69fb      	ldr	r3, [r7, #28]
 801e73c:	2200      	movs	r2, #0
 801e73e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e740:	69fb      	ldr	r3, [r7, #28]
 801e742:	2200      	movs	r2, #0
 801e744:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e746:	231a      	movs	r3, #26
 801e748:	2218      	movs	r2, #24
 801e74a:	189b      	adds	r3, r3, r2
 801e74c:	19db      	adds	r3, r3, r7
 801e74e:	781b      	ldrb	r3, [r3, #0]
}
 801e750:	0018      	movs	r0, r3
 801e752:	46bd      	mov	sp, r7
 801e754:	b00e      	add	sp, #56	@ 0x38
 801e756:	bdb0      	pop	{r4, r5, r7, pc}
 801e758:	0802efc8 	.word	0x0802efc8
 801e75c:	40021000 	.word	0x40021000
 801e760:	003d0900 	.word	0x003d0900
 801e764:	00f42400 	.word	0x00f42400
 801e768:	0802efec 	.word	0x0802efec

0801e76c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e76c:	b580      	push	{r7, lr}
 801e76e:	b082      	sub	sp, #8
 801e770:	af00      	add	r7, sp, #0
 801e772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e778:	2201      	movs	r2, #1
 801e77a:	4013      	ands	r3, r2
 801e77c:	d00b      	beq.n	801e796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	681b      	ldr	r3, [r3, #0]
 801e782:	685b      	ldr	r3, [r3, #4]
 801e784:	4a4a      	ldr	r2, [pc, #296]	@ (801e8b0 <UART_AdvFeatureConfig+0x144>)
 801e786:	4013      	ands	r3, r2
 801e788:	0019      	movs	r1, r3
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	681b      	ldr	r3, [r3, #0]
 801e792:	430a      	orrs	r2, r1
 801e794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e79a:	2202      	movs	r2, #2
 801e79c:	4013      	ands	r3, r2
 801e79e:	d00b      	beq.n	801e7b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	685b      	ldr	r3, [r3, #4]
 801e7a6:	4a43      	ldr	r2, [pc, #268]	@ (801e8b4 <UART_AdvFeatureConfig+0x148>)
 801e7a8:	4013      	ands	r3, r2
 801e7aa:	0019      	movs	r1, r3
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	430a      	orrs	r2, r1
 801e7b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e7bc:	2204      	movs	r2, #4
 801e7be:	4013      	ands	r3, r2
 801e7c0:	d00b      	beq.n	801e7da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	685b      	ldr	r3, [r3, #4]
 801e7c8:	4a3b      	ldr	r2, [pc, #236]	@ (801e8b8 <UART_AdvFeatureConfig+0x14c>)
 801e7ca:	4013      	ands	r3, r2
 801e7cc:	0019      	movs	r1, r3
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e7d2:	687b      	ldr	r3, [r7, #4]
 801e7d4:	681b      	ldr	r3, [r3, #0]
 801e7d6:	430a      	orrs	r2, r1
 801e7d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e7de:	2208      	movs	r2, #8
 801e7e0:	4013      	ands	r3, r2
 801e7e2:	d00b      	beq.n	801e7fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	685b      	ldr	r3, [r3, #4]
 801e7ea:	4a34      	ldr	r2, [pc, #208]	@ (801e8bc <UART_AdvFeatureConfig+0x150>)
 801e7ec:	4013      	ands	r3, r2
 801e7ee:	0019      	movs	r1, r3
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	681b      	ldr	r3, [r3, #0]
 801e7f8:	430a      	orrs	r2, r1
 801e7fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e800:	2210      	movs	r2, #16
 801e802:	4013      	ands	r3, r2
 801e804:	d00b      	beq.n	801e81e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	681b      	ldr	r3, [r3, #0]
 801e80a:	689b      	ldr	r3, [r3, #8]
 801e80c:	4a2c      	ldr	r2, [pc, #176]	@ (801e8c0 <UART_AdvFeatureConfig+0x154>)
 801e80e:	4013      	ands	r3, r2
 801e810:	0019      	movs	r1, r3
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	681b      	ldr	r3, [r3, #0]
 801e81a:	430a      	orrs	r2, r1
 801e81c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e822:	2220      	movs	r2, #32
 801e824:	4013      	ands	r3, r2
 801e826:	d00b      	beq.n	801e840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	689b      	ldr	r3, [r3, #8]
 801e82e:	4a25      	ldr	r2, [pc, #148]	@ (801e8c4 <UART_AdvFeatureConfig+0x158>)
 801e830:	4013      	ands	r3, r2
 801e832:	0019      	movs	r1, r3
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	681b      	ldr	r3, [r3, #0]
 801e83c:	430a      	orrs	r2, r1
 801e83e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e844:	2240      	movs	r2, #64	@ 0x40
 801e846:	4013      	ands	r3, r2
 801e848:	d01d      	beq.n	801e886 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	685b      	ldr	r3, [r3, #4]
 801e850:	4a1d      	ldr	r2, [pc, #116]	@ (801e8c8 <UART_AdvFeatureConfig+0x15c>)
 801e852:	4013      	ands	r3, r2
 801e854:	0019      	movs	r1, r3
 801e856:	687b      	ldr	r3, [r7, #4]
 801e858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	681b      	ldr	r3, [r3, #0]
 801e85e:	430a      	orrs	r2, r1
 801e860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e866:	2380      	movs	r3, #128	@ 0x80
 801e868:	035b      	lsls	r3, r3, #13
 801e86a:	429a      	cmp	r2, r3
 801e86c:	d10b      	bne.n	801e886 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	685b      	ldr	r3, [r3, #4]
 801e874:	4a15      	ldr	r2, [pc, #84]	@ (801e8cc <UART_AdvFeatureConfig+0x160>)
 801e876:	4013      	ands	r3, r2
 801e878:	0019      	movs	r1, r3
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e87e:	687b      	ldr	r3, [r7, #4]
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	430a      	orrs	r2, r1
 801e884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e88a:	2280      	movs	r2, #128	@ 0x80
 801e88c:	4013      	ands	r3, r2
 801e88e:	d00b      	beq.n	801e8a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	685b      	ldr	r3, [r3, #4]
 801e896:	4a0e      	ldr	r2, [pc, #56]	@ (801e8d0 <UART_AdvFeatureConfig+0x164>)
 801e898:	4013      	ands	r3, r2
 801e89a:	0019      	movs	r1, r3
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	681b      	ldr	r3, [r3, #0]
 801e8a4:	430a      	orrs	r2, r1
 801e8a6:	605a      	str	r2, [r3, #4]
  }
}
 801e8a8:	46c0      	nop			@ (mov r8, r8)
 801e8aa:	46bd      	mov	sp, r7
 801e8ac:	b002      	add	sp, #8
 801e8ae:	bd80      	pop	{r7, pc}
 801e8b0:	fffdffff 	.word	0xfffdffff
 801e8b4:	fffeffff 	.word	0xfffeffff
 801e8b8:	fffbffff 	.word	0xfffbffff
 801e8bc:	ffff7fff 	.word	0xffff7fff
 801e8c0:	ffffefff 	.word	0xffffefff
 801e8c4:	ffffdfff 	.word	0xffffdfff
 801e8c8:	ffefffff 	.word	0xffefffff
 801e8cc:	ff9fffff 	.word	0xff9fffff
 801e8d0:	fff7ffff 	.word	0xfff7ffff

0801e8d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e8d4:	b580      	push	{r7, lr}
 801e8d6:	b092      	sub	sp, #72	@ 0x48
 801e8d8:	af02      	add	r7, sp, #8
 801e8da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	2284      	movs	r2, #132	@ 0x84
 801e8e0:	2100      	movs	r1, #0
 801e8e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e8e4:	f7f6 f9f6 	bl	8014cd4 <HAL_GetTick>
 801e8e8:	0003      	movs	r3, r0
 801e8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	2208      	movs	r2, #8
 801e8f4:	4013      	ands	r3, r2
 801e8f6:	2b08      	cmp	r3, #8
 801e8f8:	d12c      	bne.n	801e954 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e8fc:	2280      	movs	r2, #128	@ 0x80
 801e8fe:	0391      	lsls	r1, r2, #14
 801e900:	6878      	ldr	r0, [r7, #4]
 801e902:	4a46      	ldr	r2, [pc, #280]	@ (801ea1c <UART_CheckIdleState+0x148>)
 801e904:	9200      	str	r2, [sp, #0]
 801e906:	2200      	movs	r2, #0
 801e908:	f000 f88c 	bl	801ea24 <UART_WaitOnFlagUntilTimeout>
 801e90c:	1e03      	subs	r3, r0, #0
 801e90e:	d021      	beq.n	801e954 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e910:	f3ef 8310 	mrs	r3, PRIMASK
 801e914:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e918:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e91a:	2301      	movs	r3, #1
 801e91c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e920:	f383 8810 	msr	PRIMASK, r3
}
 801e924:	46c0      	nop			@ (mov r8, r8)
 801e926:	687b      	ldr	r3, [r7, #4]
 801e928:	681b      	ldr	r3, [r3, #0]
 801e92a:	681a      	ldr	r2, [r3, #0]
 801e92c:	687b      	ldr	r3, [r7, #4]
 801e92e:	681b      	ldr	r3, [r3, #0]
 801e930:	2180      	movs	r1, #128	@ 0x80
 801e932:	438a      	bics	r2, r1
 801e934:	601a      	str	r2, [r3, #0]
 801e936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e93c:	f383 8810 	msr	PRIMASK, r3
}
 801e940:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	2220      	movs	r2, #32
 801e946:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	2278      	movs	r2, #120	@ 0x78
 801e94c:	2100      	movs	r1, #0
 801e94e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e950:	2303      	movs	r3, #3
 801e952:	e05f      	b.n	801ea14 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	681b      	ldr	r3, [r3, #0]
 801e95a:	2204      	movs	r2, #4
 801e95c:	4013      	ands	r3, r2
 801e95e:	2b04      	cmp	r3, #4
 801e960:	d146      	bne.n	801e9f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e964:	2280      	movs	r2, #128	@ 0x80
 801e966:	03d1      	lsls	r1, r2, #15
 801e968:	6878      	ldr	r0, [r7, #4]
 801e96a:	4a2c      	ldr	r2, [pc, #176]	@ (801ea1c <UART_CheckIdleState+0x148>)
 801e96c:	9200      	str	r2, [sp, #0]
 801e96e:	2200      	movs	r2, #0
 801e970:	f000 f858 	bl	801ea24 <UART_WaitOnFlagUntilTimeout>
 801e974:	1e03      	subs	r3, r0, #0
 801e976:	d03b      	beq.n	801e9f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e978:	f3ef 8310 	mrs	r3, PRIMASK
 801e97c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e97e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e980:	637b      	str	r3, [r7, #52]	@ 0x34
 801e982:	2301      	movs	r3, #1
 801e984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e986:	693b      	ldr	r3, [r7, #16]
 801e988:	f383 8810 	msr	PRIMASK, r3
}
 801e98c:	46c0      	nop			@ (mov r8, r8)
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	681a      	ldr	r2, [r3, #0]
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	4921      	ldr	r1, [pc, #132]	@ (801ea20 <UART_CheckIdleState+0x14c>)
 801e99a:	400a      	ands	r2, r1
 801e99c:	601a      	str	r2, [r3, #0]
 801e99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9a2:	697b      	ldr	r3, [r7, #20]
 801e9a4:	f383 8810 	msr	PRIMASK, r3
}
 801e9a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9aa:	f3ef 8310 	mrs	r3, PRIMASK
 801e9ae:	61bb      	str	r3, [r7, #24]
  return(result);
 801e9b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e9b2:	633b      	str	r3, [r7, #48]	@ 0x30
 801e9b4:	2301      	movs	r3, #1
 801e9b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9b8:	69fb      	ldr	r3, [r7, #28]
 801e9ba:	f383 8810 	msr	PRIMASK, r3
}
 801e9be:	46c0      	nop			@ (mov r8, r8)
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	689a      	ldr	r2, [r3, #8]
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	2101      	movs	r1, #1
 801e9cc:	438a      	bics	r2, r1
 801e9ce:	609a      	str	r2, [r3, #8]
 801e9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9d4:	6a3b      	ldr	r3, [r7, #32]
 801e9d6:	f383 8810 	msr	PRIMASK, r3
}
 801e9da:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	2280      	movs	r2, #128	@ 0x80
 801e9e0:	2120      	movs	r1, #32
 801e9e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	2278      	movs	r2, #120	@ 0x78
 801e9e8:	2100      	movs	r1, #0
 801e9ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e9ec:	2303      	movs	r3, #3
 801e9ee:	e011      	b.n	801ea14 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	2220      	movs	r2, #32
 801e9f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	2280      	movs	r2, #128	@ 0x80
 801e9fa:	2120      	movs	r1, #32
 801e9fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	2200      	movs	r2, #0
 801ea02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	2200      	movs	r2, #0
 801ea08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	2278      	movs	r2, #120	@ 0x78
 801ea0e:	2100      	movs	r1, #0
 801ea10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ea12:	2300      	movs	r3, #0
}
 801ea14:	0018      	movs	r0, r3
 801ea16:	46bd      	mov	sp, r7
 801ea18:	b010      	add	sp, #64	@ 0x40
 801ea1a:	bd80      	pop	{r7, pc}
 801ea1c:	01ffffff 	.word	0x01ffffff
 801ea20:	fffffedf 	.word	0xfffffedf

0801ea24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ea24:	b580      	push	{r7, lr}
 801ea26:	b084      	sub	sp, #16
 801ea28:	af00      	add	r7, sp, #0
 801ea2a:	60f8      	str	r0, [r7, #12]
 801ea2c:	60b9      	str	r1, [r7, #8]
 801ea2e:	603b      	str	r3, [r7, #0]
 801ea30:	1dfb      	adds	r3, r7, #7
 801ea32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ea34:	e04b      	b.n	801eace <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ea36:	69bb      	ldr	r3, [r7, #24]
 801ea38:	3301      	adds	r3, #1
 801ea3a:	d048      	beq.n	801eace <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ea3c:	f7f6 f94a 	bl	8014cd4 <HAL_GetTick>
 801ea40:	0002      	movs	r2, r0
 801ea42:	683b      	ldr	r3, [r7, #0]
 801ea44:	1ad3      	subs	r3, r2, r3
 801ea46:	69ba      	ldr	r2, [r7, #24]
 801ea48:	429a      	cmp	r2, r3
 801ea4a:	d302      	bcc.n	801ea52 <UART_WaitOnFlagUntilTimeout+0x2e>
 801ea4c:	69bb      	ldr	r3, [r7, #24]
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d101      	bne.n	801ea56 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801ea52:	2303      	movs	r3, #3
 801ea54:	e04b      	b.n	801eaee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	681b      	ldr	r3, [r3, #0]
 801ea5a:	681b      	ldr	r3, [r3, #0]
 801ea5c:	2204      	movs	r2, #4
 801ea5e:	4013      	ands	r3, r2
 801ea60:	d035      	beq.n	801eace <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801ea62:	68fb      	ldr	r3, [r7, #12]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	69db      	ldr	r3, [r3, #28]
 801ea68:	2208      	movs	r2, #8
 801ea6a:	4013      	ands	r3, r2
 801ea6c:	2b08      	cmp	r3, #8
 801ea6e:	d111      	bne.n	801ea94 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	681b      	ldr	r3, [r3, #0]
 801ea74:	2208      	movs	r2, #8
 801ea76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801ea78:	68fb      	ldr	r3, [r7, #12]
 801ea7a:	0018      	movs	r0, r3
 801ea7c:	f000 f9ca 	bl	801ee14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	2284      	movs	r2, #132	@ 0x84
 801ea84:	2108      	movs	r1, #8
 801ea86:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801ea88:	68fb      	ldr	r3, [r7, #12]
 801ea8a:	2278      	movs	r2, #120	@ 0x78
 801ea8c:	2100      	movs	r1, #0
 801ea8e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801ea90:	2301      	movs	r3, #1
 801ea92:	e02c      	b.n	801eaee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	69da      	ldr	r2, [r3, #28]
 801ea9a:	2380      	movs	r3, #128	@ 0x80
 801ea9c:	011b      	lsls	r3, r3, #4
 801ea9e:	401a      	ands	r2, r3
 801eaa0:	2380      	movs	r3, #128	@ 0x80
 801eaa2:	011b      	lsls	r3, r3, #4
 801eaa4:	429a      	cmp	r2, r3
 801eaa6:	d112      	bne.n	801eace <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	2280      	movs	r2, #128	@ 0x80
 801eaae:	0112      	lsls	r2, r2, #4
 801eab0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801eab2:	68fb      	ldr	r3, [r7, #12]
 801eab4:	0018      	movs	r0, r3
 801eab6:	f000 f9ad 	bl	801ee14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801eaba:	68fb      	ldr	r3, [r7, #12]
 801eabc:	2284      	movs	r2, #132	@ 0x84
 801eabe:	2120      	movs	r1, #32
 801eac0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801eac2:	68fb      	ldr	r3, [r7, #12]
 801eac4:	2278      	movs	r2, #120	@ 0x78
 801eac6:	2100      	movs	r1, #0
 801eac8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801eaca:	2303      	movs	r3, #3
 801eacc:	e00f      	b.n	801eaee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801eace:	68fb      	ldr	r3, [r7, #12]
 801ead0:	681b      	ldr	r3, [r3, #0]
 801ead2:	69db      	ldr	r3, [r3, #28]
 801ead4:	68ba      	ldr	r2, [r7, #8]
 801ead6:	4013      	ands	r3, r2
 801ead8:	68ba      	ldr	r2, [r7, #8]
 801eada:	1ad3      	subs	r3, r2, r3
 801eadc:	425a      	negs	r2, r3
 801eade:	4153      	adcs	r3, r2
 801eae0:	b2db      	uxtb	r3, r3
 801eae2:	001a      	movs	r2, r3
 801eae4:	1dfb      	adds	r3, r7, #7
 801eae6:	781b      	ldrb	r3, [r3, #0]
 801eae8:	429a      	cmp	r2, r3
 801eaea:	d0a4      	beq.n	801ea36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801eaec:	2300      	movs	r3, #0
}
 801eaee:	0018      	movs	r0, r3
 801eaf0:	46bd      	mov	sp, r7
 801eaf2:	b004      	add	sp, #16
 801eaf4:	bd80      	pop	{r7, pc}
	...

0801eaf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801eaf8:	b580      	push	{r7, lr}
 801eafa:	b090      	sub	sp, #64	@ 0x40
 801eafc:	af00      	add	r7, sp, #0
 801eafe:	60f8      	str	r0, [r7, #12]
 801eb00:	60b9      	str	r1, [r7, #8]
 801eb02:	1dbb      	adds	r3, r7, #6
 801eb04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801eb06:	68fb      	ldr	r3, [r7, #12]
 801eb08:	68ba      	ldr	r2, [r7, #8]
 801eb0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801eb0c:	68fb      	ldr	r3, [r7, #12]
 801eb0e:	1dba      	adds	r2, r7, #6
 801eb10:	2158      	movs	r1, #88	@ 0x58
 801eb12:	8812      	ldrh	r2, [r2, #0]
 801eb14:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801eb16:	68fb      	ldr	r3, [r7, #12]
 801eb18:	1dba      	adds	r2, r7, #6
 801eb1a:	215a      	movs	r1, #90	@ 0x5a
 801eb1c:	8812      	ldrh	r2, [r2, #0]
 801eb1e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	2200      	movs	r2, #0
 801eb24:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801eb26:	68fb      	ldr	r3, [r7, #12]
 801eb28:	689a      	ldr	r2, [r3, #8]
 801eb2a:	2380      	movs	r3, #128	@ 0x80
 801eb2c:	015b      	lsls	r3, r3, #5
 801eb2e:	429a      	cmp	r2, r3
 801eb30:	d10d      	bne.n	801eb4e <UART_Start_Receive_IT+0x56>
 801eb32:	68fb      	ldr	r3, [r7, #12]
 801eb34:	691b      	ldr	r3, [r3, #16]
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d104      	bne.n	801eb44 <UART_Start_Receive_IT+0x4c>
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	225c      	movs	r2, #92	@ 0x5c
 801eb3e:	4950      	ldr	r1, [pc, #320]	@ (801ec80 <UART_Start_Receive_IT+0x188>)
 801eb40:	5299      	strh	r1, [r3, r2]
 801eb42:	e02e      	b.n	801eba2 <UART_Start_Receive_IT+0xaa>
 801eb44:	68fb      	ldr	r3, [r7, #12]
 801eb46:	225c      	movs	r2, #92	@ 0x5c
 801eb48:	21ff      	movs	r1, #255	@ 0xff
 801eb4a:	5299      	strh	r1, [r3, r2]
 801eb4c:	e029      	b.n	801eba2 <UART_Start_Receive_IT+0xaa>
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	689b      	ldr	r3, [r3, #8]
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d10d      	bne.n	801eb72 <UART_Start_Receive_IT+0x7a>
 801eb56:	68fb      	ldr	r3, [r7, #12]
 801eb58:	691b      	ldr	r3, [r3, #16]
 801eb5a:	2b00      	cmp	r3, #0
 801eb5c:	d104      	bne.n	801eb68 <UART_Start_Receive_IT+0x70>
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	225c      	movs	r2, #92	@ 0x5c
 801eb62:	21ff      	movs	r1, #255	@ 0xff
 801eb64:	5299      	strh	r1, [r3, r2]
 801eb66:	e01c      	b.n	801eba2 <UART_Start_Receive_IT+0xaa>
 801eb68:	68fb      	ldr	r3, [r7, #12]
 801eb6a:	225c      	movs	r2, #92	@ 0x5c
 801eb6c:	217f      	movs	r1, #127	@ 0x7f
 801eb6e:	5299      	strh	r1, [r3, r2]
 801eb70:	e017      	b.n	801eba2 <UART_Start_Receive_IT+0xaa>
 801eb72:	68fb      	ldr	r3, [r7, #12]
 801eb74:	689a      	ldr	r2, [r3, #8]
 801eb76:	2380      	movs	r3, #128	@ 0x80
 801eb78:	055b      	lsls	r3, r3, #21
 801eb7a:	429a      	cmp	r2, r3
 801eb7c:	d10d      	bne.n	801eb9a <UART_Start_Receive_IT+0xa2>
 801eb7e:	68fb      	ldr	r3, [r7, #12]
 801eb80:	691b      	ldr	r3, [r3, #16]
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	d104      	bne.n	801eb90 <UART_Start_Receive_IT+0x98>
 801eb86:	68fb      	ldr	r3, [r7, #12]
 801eb88:	225c      	movs	r2, #92	@ 0x5c
 801eb8a:	217f      	movs	r1, #127	@ 0x7f
 801eb8c:	5299      	strh	r1, [r3, r2]
 801eb8e:	e008      	b.n	801eba2 <UART_Start_Receive_IT+0xaa>
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	225c      	movs	r2, #92	@ 0x5c
 801eb94:	213f      	movs	r1, #63	@ 0x3f
 801eb96:	5299      	strh	r1, [r3, r2]
 801eb98:	e003      	b.n	801eba2 <UART_Start_Receive_IT+0xaa>
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	225c      	movs	r2, #92	@ 0x5c
 801eb9e:	2100      	movs	r1, #0
 801eba0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	2284      	movs	r2, #132	@ 0x84
 801eba6:	2100      	movs	r1, #0
 801eba8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	2280      	movs	r2, #128	@ 0x80
 801ebae:	2122      	movs	r1, #34	@ 0x22
 801ebb0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebb2:	f3ef 8310 	mrs	r3, PRIMASK
 801ebb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ebb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ebba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ebbc:	2301      	movs	r3, #1
 801ebbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebc2:	f383 8810 	msr	PRIMASK, r3
}
 801ebc6:	46c0      	nop			@ (mov r8, r8)
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	689a      	ldr	r2, [r3, #8]
 801ebce:	68fb      	ldr	r3, [r7, #12]
 801ebd0:	681b      	ldr	r3, [r3, #0]
 801ebd2:	2101      	movs	r1, #1
 801ebd4:	430a      	orrs	r2, r1
 801ebd6:	609a      	str	r2, [r3, #8]
 801ebd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ebda:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ebde:	f383 8810 	msr	PRIMASK, r3
}
 801ebe2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	689a      	ldr	r2, [r3, #8]
 801ebe8:	2380      	movs	r3, #128	@ 0x80
 801ebea:	015b      	lsls	r3, r3, #5
 801ebec:	429a      	cmp	r2, r3
 801ebee:	d107      	bne.n	801ec00 <UART_Start_Receive_IT+0x108>
 801ebf0:	68fb      	ldr	r3, [r7, #12]
 801ebf2:	691b      	ldr	r3, [r3, #16]
 801ebf4:	2b00      	cmp	r3, #0
 801ebf6:	d103      	bne.n	801ec00 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801ebf8:	68fb      	ldr	r3, [r7, #12]
 801ebfa:	4a22      	ldr	r2, [pc, #136]	@ (801ec84 <UART_Start_Receive_IT+0x18c>)
 801ebfc:	669a      	str	r2, [r3, #104]	@ 0x68
 801ebfe:	e002      	b.n	801ec06 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801ec00:	68fb      	ldr	r3, [r7, #12]
 801ec02:	4a21      	ldr	r2, [pc, #132]	@ (801ec88 <UART_Start_Receive_IT+0x190>)
 801ec04:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ec06:	68fb      	ldr	r3, [r7, #12]
 801ec08:	691b      	ldr	r3, [r3, #16]
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d019      	beq.n	801ec42 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec0e:	f3ef 8310 	mrs	r3, PRIMASK
 801ec12:	61fb      	str	r3, [r7, #28]
  return(result);
 801ec14:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801ec16:	637b      	str	r3, [r7, #52]	@ 0x34
 801ec18:	2301      	movs	r3, #1
 801ec1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec1c:	6a3b      	ldr	r3, [r7, #32]
 801ec1e:	f383 8810 	msr	PRIMASK, r3
}
 801ec22:	46c0      	nop			@ (mov r8, r8)
 801ec24:	68fb      	ldr	r3, [r7, #12]
 801ec26:	681b      	ldr	r3, [r3, #0]
 801ec28:	681a      	ldr	r2, [r3, #0]
 801ec2a:	68fb      	ldr	r3, [r7, #12]
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	2190      	movs	r1, #144	@ 0x90
 801ec30:	0049      	lsls	r1, r1, #1
 801ec32:	430a      	orrs	r2, r1
 801ec34:	601a      	str	r2, [r3, #0]
 801ec36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ec38:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec3c:	f383 8810 	msr	PRIMASK, r3
}
 801ec40:	e018      	b.n	801ec74 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec42:	f3ef 8310 	mrs	r3, PRIMASK
 801ec46:	613b      	str	r3, [r7, #16]
  return(result);
 801ec48:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801ec4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ec4c:	2301      	movs	r3, #1
 801ec4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec50:	697b      	ldr	r3, [r7, #20]
 801ec52:	f383 8810 	msr	PRIMASK, r3
}
 801ec56:	46c0      	nop			@ (mov r8, r8)
 801ec58:	68fb      	ldr	r3, [r7, #12]
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	681a      	ldr	r2, [r3, #0]
 801ec5e:	68fb      	ldr	r3, [r7, #12]
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	2120      	movs	r1, #32
 801ec64:	430a      	orrs	r2, r1
 801ec66:	601a      	str	r2, [r3, #0]
 801ec68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec6c:	69bb      	ldr	r3, [r7, #24]
 801ec6e:	f383 8810 	msr	PRIMASK, r3
}
 801ec72:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801ec74:	2300      	movs	r3, #0
}
 801ec76:	0018      	movs	r0, r3
 801ec78:	46bd      	mov	sp, r7
 801ec7a:	b010      	add	sp, #64	@ 0x40
 801ec7c:	bd80      	pop	{r7, pc}
 801ec7e:	46c0      	nop			@ (mov r8, r8)
 801ec80:	000001ff 	.word	0x000001ff
 801ec84:	0801f3f9 	.word	0x0801f3f9
 801ec88:	0801f22d 	.word	0x0801f22d

0801ec8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ec8c:	b580      	push	{r7, lr}
 801ec8e:	b090      	sub	sp, #64	@ 0x40
 801ec90:	af00      	add	r7, sp, #0
 801ec92:	60f8      	str	r0, [r7, #12]
 801ec94:	60b9      	str	r1, [r7, #8]
 801ec96:	1dbb      	adds	r3, r7, #6
 801ec98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801ec9a:	68fb      	ldr	r3, [r7, #12]
 801ec9c:	68ba      	ldr	r2, [r7, #8]
 801ec9e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801eca0:	68fb      	ldr	r3, [r7, #12]
 801eca2:	1dba      	adds	r2, r7, #6
 801eca4:	2158      	movs	r1, #88	@ 0x58
 801eca6:	8812      	ldrh	r2, [r2, #0]
 801eca8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ecaa:	68fb      	ldr	r3, [r7, #12]
 801ecac:	2284      	movs	r2, #132	@ 0x84
 801ecae:	2100      	movs	r1, #0
 801ecb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	2280      	movs	r2, #128	@ 0x80
 801ecb6:	2122      	movs	r1, #34	@ 0x22
 801ecb8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801ecba:	68fb      	ldr	r3, [r7, #12]
 801ecbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d028      	beq.n	801ed14 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ecc6:	4a3e      	ldr	r2, [pc, #248]	@ (801edc0 <UART_Start_Receive_DMA+0x134>)
 801ecc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801ecca:	68fb      	ldr	r3, [r7, #12]
 801eccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ecce:	4a3d      	ldr	r2, [pc, #244]	@ (801edc4 <UART_Start_Receive_DMA+0x138>)
 801ecd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801ecd2:	68fb      	ldr	r3, [r7, #12]
 801ecd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ecd6:	4a3c      	ldr	r2, [pc, #240]	@ (801edc8 <UART_Start_Receive_DMA+0x13c>)
 801ecd8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801ecda:	68fb      	ldr	r3, [r7, #12]
 801ecdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ecde:	2200      	movs	r2, #0
 801ece0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801ece2:	68fb      	ldr	r3, [r7, #12]
 801ece4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801ece6:	68fb      	ldr	r3, [r7, #12]
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	3324      	adds	r3, #36	@ 0x24
 801ecec:	0019      	movs	r1, r3
 801ecee:	68fb      	ldr	r3, [r7, #12]
 801ecf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ecf2:	001a      	movs	r2, r3
 801ecf4:	1dbb      	adds	r3, r7, #6
 801ecf6:	881b      	ldrh	r3, [r3, #0]
 801ecf8:	f7f6 fd3e 	bl	8015778 <HAL_DMA_Start_IT>
 801ecfc:	1e03      	subs	r3, r0, #0
 801ecfe:	d009      	beq.n	801ed14 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801ed00:	68fb      	ldr	r3, [r7, #12]
 801ed02:	2284      	movs	r2, #132	@ 0x84
 801ed04:	2110      	movs	r1, #16
 801ed06:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ed08:	68fb      	ldr	r3, [r7, #12]
 801ed0a:	2280      	movs	r2, #128	@ 0x80
 801ed0c:	2120      	movs	r1, #32
 801ed0e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801ed10:	2301      	movs	r3, #1
 801ed12:	e050      	b.n	801edb6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ed14:	68fb      	ldr	r3, [r7, #12]
 801ed16:	691b      	ldr	r3, [r3, #16]
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	d019      	beq.n	801ed50 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed1c:	f3ef 8310 	mrs	r3, PRIMASK
 801ed20:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ed22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ed24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ed26:	2301      	movs	r3, #1
 801ed28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed2c:	f383 8810 	msr	PRIMASK, r3
}
 801ed30:	46c0      	nop			@ (mov r8, r8)
 801ed32:	68fb      	ldr	r3, [r7, #12]
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	681a      	ldr	r2, [r3, #0]
 801ed38:	68fb      	ldr	r3, [r7, #12]
 801ed3a:	681b      	ldr	r3, [r3, #0]
 801ed3c:	2180      	movs	r1, #128	@ 0x80
 801ed3e:	0049      	lsls	r1, r1, #1
 801ed40:	430a      	orrs	r2, r1
 801ed42:	601a      	str	r2, [r3, #0]
 801ed44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed46:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ed4a:	f383 8810 	msr	PRIMASK, r3
}
 801ed4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed50:	f3ef 8310 	mrs	r3, PRIMASK
 801ed54:	613b      	str	r3, [r7, #16]
  return(result);
 801ed56:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ed58:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ed5a:	2301      	movs	r3, #1
 801ed5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed5e:	697b      	ldr	r3, [r7, #20]
 801ed60:	f383 8810 	msr	PRIMASK, r3
}
 801ed64:	46c0      	nop			@ (mov r8, r8)
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	681b      	ldr	r3, [r3, #0]
 801ed6a:	689a      	ldr	r2, [r3, #8]
 801ed6c:	68fb      	ldr	r3, [r7, #12]
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	2101      	movs	r1, #1
 801ed72:	430a      	orrs	r2, r1
 801ed74:	609a      	str	r2, [r3, #8]
 801ed76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed7a:	69bb      	ldr	r3, [r7, #24]
 801ed7c:	f383 8810 	msr	PRIMASK, r3
}
 801ed80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed82:	f3ef 8310 	mrs	r3, PRIMASK
 801ed86:	61fb      	str	r3, [r7, #28]
  return(result);
 801ed88:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ed8a:	637b      	str	r3, [r7, #52]	@ 0x34
 801ed8c:	2301      	movs	r3, #1
 801ed8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed90:	6a3b      	ldr	r3, [r7, #32]
 801ed92:	f383 8810 	msr	PRIMASK, r3
}
 801ed96:	46c0      	nop			@ (mov r8, r8)
 801ed98:	68fb      	ldr	r3, [r7, #12]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	689a      	ldr	r2, [r3, #8]
 801ed9e:	68fb      	ldr	r3, [r7, #12]
 801eda0:	681b      	ldr	r3, [r3, #0]
 801eda2:	2140      	movs	r1, #64	@ 0x40
 801eda4:	430a      	orrs	r2, r1
 801eda6:	609a      	str	r2, [r3, #8]
 801eda8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801edaa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801edae:	f383 8810 	msr	PRIMASK, r3
}
 801edb2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801edb4:	2300      	movs	r3, #0
}
 801edb6:	0018      	movs	r0, r3
 801edb8:	46bd      	mov	sp, r7
 801edba:	b010      	add	sp, #64	@ 0x40
 801edbc:	bd80      	pop	{r7, pc}
 801edbe:	46c0      	nop			@ (mov r8, r8)
 801edc0:	0801ef9d 	.word	0x0801ef9d
 801edc4:	0801f0d1 	.word	0x0801f0d1
 801edc8:	0801f119 	.word	0x0801f119

0801edcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801edcc:	b580      	push	{r7, lr}
 801edce:	b086      	sub	sp, #24
 801edd0:	af00      	add	r7, sp, #0
 801edd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801edd4:	f3ef 8310 	mrs	r3, PRIMASK
 801edd8:	60bb      	str	r3, [r7, #8]
  return(result);
 801edda:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801eddc:	617b      	str	r3, [r7, #20]
 801edde:	2301      	movs	r3, #1
 801ede0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ede2:	68fb      	ldr	r3, [r7, #12]
 801ede4:	f383 8810 	msr	PRIMASK, r3
}
 801ede8:	46c0      	nop			@ (mov r8, r8)
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	681a      	ldr	r2, [r3, #0]
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	681b      	ldr	r3, [r3, #0]
 801edf4:	21c0      	movs	r1, #192	@ 0xc0
 801edf6:	438a      	bics	r2, r1
 801edf8:	601a      	str	r2, [r3, #0]
 801edfa:	697b      	ldr	r3, [r7, #20]
 801edfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edfe:	693b      	ldr	r3, [r7, #16]
 801ee00:	f383 8810 	msr	PRIMASK, r3
}
 801ee04:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	2220      	movs	r2, #32
 801ee0a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801ee0c:	46c0      	nop			@ (mov r8, r8)
 801ee0e:	46bd      	mov	sp, r7
 801ee10:	b006      	add	sp, #24
 801ee12:	bd80      	pop	{r7, pc}

0801ee14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ee14:	b580      	push	{r7, lr}
 801ee16:	b08e      	sub	sp, #56	@ 0x38
 801ee18:	af00      	add	r7, sp, #0
 801ee1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee1c:	f3ef 8310 	mrs	r3, PRIMASK
 801ee20:	617b      	str	r3, [r7, #20]
  return(result);
 801ee22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ee24:	637b      	str	r3, [r7, #52]	@ 0x34
 801ee26:	2301      	movs	r3, #1
 801ee28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee2a:	69bb      	ldr	r3, [r7, #24]
 801ee2c:	f383 8810 	msr	PRIMASK, r3
}
 801ee30:	46c0      	nop			@ (mov r8, r8)
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	681a      	ldr	r2, [r3, #0]
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	681b      	ldr	r3, [r3, #0]
 801ee3c:	4926      	ldr	r1, [pc, #152]	@ (801eed8 <UART_EndRxTransfer+0xc4>)
 801ee3e:	400a      	ands	r2, r1
 801ee40:	601a      	str	r2, [r3, #0]
 801ee42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ee44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee46:	69fb      	ldr	r3, [r7, #28]
 801ee48:	f383 8810 	msr	PRIMASK, r3
}
 801ee4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee4e:	f3ef 8310 	mrs	r3, PRIMASK
 801ee52:	623b      	str	r3, [r7, #32]
  return(result);
 801ee54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ee56:	633b      	str	r3, [r7, #48]	@ 0x30
 801ee58:	2301      	movs	r3, #1
 801ee5a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee5e:	f383 8810 	msr	PRIMASK, r3
}
 801ee62:	46c0      	nop			@ (mov r8, r8)
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	689a      	ldr	r2, [r3, #8]
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	2101      	movs	r1, #1
 801ee70:	438a      	bics	r2, r1
 801ee72:	609a      	str	r2, [r3, #8]
 801ee74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ee76:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee7a:	f383 8810 	msr	PRIMASK, r3
}
 801ee7e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ee84:	2b01      	cmp	r3, #1
 801ee86:	d118      	bne.n	801eeba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee88:	f3ef 8310 	mrs	r3, PRIMASK
 801ee8c:	60bb      	str	r3, [r7, #8]
  return(result);
 801ee8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ee90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ee92:	2301      	movs	r3, #1
 801ee94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee96:	68fb      	ldr	r3, [r7, #12]
 801ee98:	f383 8810 	msr	PRIMASK, r3
}
 801ee9c:	46c0      	nop			@ (mov r8, r8)
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	681b      	ldr	r3, [r3, #0]
 801eea2:	681a      	ldr	r2, [r3, #0]
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	2110      	movs	r1, #16
 801eeaa:	438a      	bics	r2, r1
 801eeac:	601a      	str	r2, [r3, #0]
 801eeae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eeb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eeb2:	693b      	ldr	r3, [r7, #16]
 801eeb4:	f383 8810 	msr	PRIMASK, r3
}
 801eeb8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	2280      	movs	r2, #128	@ 0x80
 801eebe:	2120      	movs	r1, #32
 801eec0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801eec2:	687b      	ldr	r3, [r7, #4]
 801eec4:	2200      	movs	r2, #0
 801eec6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	2200      	movs	r2, #0
 801eecc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801eece:	46c0      	nop			@ (mov r8, r8)
 801eed0:	46bd      	mov	sp, r7
 801eed2:	b00e      	add	sp, #56	@ 0x38
 801eed4:	bd80      	pop	{r7, pc}
 801eed6:	46c0      	nop			@ (mov r8, r8)
 801eed8:	fffffedf 	.word	0xfffffedf

0801eedc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801eedc:	b580      	push	{r7, lr}
 801eede:	b08c      	sub	sp, #48	@ 0x30
 801eee0:	af00      	add	r7, sp, #0
 801eee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eee8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	2220      	movs	r2, #32
 801eef2:	4013      	ands	r3, r2
 801eef4:	d135      	bne.n	801ef62 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801eef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eef8:	2252      	movs	r2, #82	@ 0x52
 801eefa:	2100      	movs	r1, #0
 801eefc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eefe:	f3ef 8310 	mrs	r3, PRIMASK
 801ef02:	60fb      	str	r3, [r7, #12]
  return(result);
 801ef04:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ef06:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ef08:	2301      	movs	r3, #1
 801ef0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef0c:	693b      	ldr	r3, [r7, #16]
 801ef0e:	f383 8810 	msr	PRIMASK, r3
}
 801ef12:	46c0      	nop			@ (mov r8, r8)
 801ef14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef16:	681b      	ldr	r3, [r3, #0]
 801ef18:	689a      	ldr	r2, [r3, #8]
 801ef1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef1c:	681b      	ldr	r3, [r3, #0]
 801ef1e:	2180      	movs	r1, #128	@ 0x80
 801ef20:	438a      	bics	r2, r1
 801ef22:	609a      	str	r2, [r3, #8]
 801ef24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef28:	697b      	ldr	r3, [r7, #20]
 801ef2a:	f383 8810 	msr	PRIMASK, r3
}
 801ef2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef30:	f3ef 8310 	mrs	r3, PRIMASK
 801ef34:	61bb      	str	r3, [r7, #24]
  return(result);
 801ef36:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ef38:	627b      	str	r3, [r7, #36]	@ 0x24
 801ef3a:	2301      	movs	r3, #1
 801ef3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef3e:	69fb      	ldr	r3, [r7, #28]
 801ef40:	f383 8810 	msr	PRIMASK, r3
}
 801ef44:	46c0      	nop			@ (mov r8, r8)
 801ef46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef48:	681b      	ldr	r3, [r3, #0]
 801ef4a:	681a      	ldr	r2, [r3, #0]
 801ef4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	2140      	movs	r1, #64	@ 0x40
 801ef52:	430a      	orrs	r2, r1
 801ef54:	601a      	str	r2, [r3, #0]
 801ef56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef5a:	6a3b      	ldr	r3, [r7, #32]
 801ef5c:	f383 8810 	msr	PRIMASK, r3
}
 801ef60:	e006      	b.n	801ef70 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801ef62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef64:	228c      	movs	r2, #140	@ 0x8c
 801ef66:	589b      	ldr	r3, [r3, r2]
 801ef68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ef6a:	0010      	movs	r0, r2
 801ef6c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ef6e:	46c0      	nop			@ (mov r8, r8)
 801ef70:	46c0      	nop			@ (mov r8, r8)
 801ef72:	46bd      	mov	sp, r7
 801ef74:	b00c      	add	sp, #48	@ 0x30
 801ef76:	bd80      	pop	{r7, pc}

0801ef78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ef78:	b580      	push	{r7, lr}
 801ef7a:	b084      	sub	sp, #16
 801ef7c:	af00      	add	r7, sp, #0
 801ef7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801ef86:	68fb      	ldr	r3, [r7, #12]
 801ef88:	2288      	movs	r2, #136	@ 0x88
 801ef8a:	589b      	ldr	r3, [r3, r2]
 801ef8c:	68fa      	ldr	r2, [r7, #12]
 801ef8e:	0010      	movs	r0, r2
 801ef90:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ef92:	46c0      	nop			@ (mov r8, r8)
 801ef94:	46bd      	mov	sp, r7
 801ef96:	b004      	add	sp, #16
 801ef98:	bd80      	pop	{r7, pc}
	...

0801ef9c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ef9c:	b580      	push	{r7, lr}
 801ef9e:	b094      	sub	sp, #80	@ 0x50
 801efa0:	af00      	add	r7, sp, #0
 801efa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801efa8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	2220      	movs	r2, #32
 801efb2:	4013      	ands	r3, r2
 801efb4:	d16f      	bne.n	801f096 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801efb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efb8:	225a      	movs	r2, #90	@ 0x5a
 801efba:	2100      	movs	r1, #0
 801efbc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efbe:	f3ef 8310 	mrs	r3, PRIMASK
 801efc2:	61bb      	str	r3, [r7, #24]
  return(result);
 801efc4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801efc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801efc8:	2301      	movs	r3, #1
 801efca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efcc:	69fb      	ldr	r3, [r7, #28]
 801efce:	f383 8810 	msr	PRIMASK, r3
}
 801efd2:	46c0      	nop			@ (mov r8, r8)
 801efd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efd6:	681b      	ldr	r3, [r3, #0]
 801efd8:	681a      	ldr	r2, [r3, #0]
 801efda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	493b      	ldr	r1, [pc, #236]	@ (801f0cc <UART_DMAReceiveCplt+0x130>)
 801efe0:	400a      	ands	r2, r1
 801efe2:	601a      	str	r2, [r3, #0]
 801efe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801efe6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efe8:	6a3b      	ldr	r3, [r7, #32]
 801efea:	f383 8810 	msr	PRIMASK, r3
}
 801efee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eff0:	f3ef 8310 	mrs	r3, PRIMASK
 801eff4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801eff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eff8:	647b      	str	r3, [r7, #68]	@ 0x44
 801effa:	2301      	movs	r3, #1
 801effc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801effe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f000:	f383 8810 	msr	PRIMASK, r3
}
 801f004:	46c0      	nop			@ (mov r8, r8)
 801f006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	689a      	ldr	r2, [r3, #8]
 801f00c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	2101      	movs	r1, #1
 801f012:	438a      	bics	r2, r1
 801f014:	609a      	str	r2, [r3, #8]
 801f016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f01c:	f383 8810 	msr	PRIMASK, r3
}
 801f020:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f022:	f3ef 8310 	mrs	r3, PRIMASK
 801f026:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801f028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801f02a:	643b      	str	r3, [r7, #64]	@ 0x40
 801f02c:	2301      	movs	r3, #1
 801f02e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f032:	f383 8810 	msr	PRIMASK, r3
}
 801f036:	46c0      	nop			@ (mov r8, r8)
 801f038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	689a      	ldr	r2, [r3, #8]
 801f03e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f040:	681b      	ldr	r3, [r3, #0]
 801f042:	2140      	movs	r1, #64	@ 0x40
 801f044:	438a      	bics	r2, r1
 801f046:	609a      	str	r2, [r3, #8]
 801f048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f04a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f04e:	f383 8810 	msr	PRIMASK, r3
}
 801f052:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801f054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f056:	2280      	movs	r2, #128	@ 0x80
 801f058:	2120      	movs	r1, #32
 801f05a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f05e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f060:	2b01      	cmp	r3, #1
 801f062:	d118      	bne.n	801f096 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f064:	f3ef 8310 	mrs	r3, PRIMASK
 801f068:	60fb      	str	r3, [r7, #12]
  return(result);
 801f06a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f06e:	2301      	movs	r3, #1
 801f070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f072:	693b      	ldr	r3, [r7, #16]
 801f074:	f383 8810 	msr	PRIMASK, r3
}
 801f078:	46c0      	nop			@ (mov r8, r8)
 801f07a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	681a      	ldr	r2, [r3, #0]
 801f080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	2110      	movs	r1, #16
 801f086:	438a      	bics	r2, r1
 801f088:	601a      	str	r2, [r3, #0]
 801f08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f08c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f08e:	697b      	ldr	r3, [r7, #20]
 801f090:	f383 8810 	msr	PRIMASK, r3
}
 801f094:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f098:	2200      	movs	r2, #0
 801f09a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f09c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f09e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f0a0:	2b01      	cmp	r3, #1
 801f0a2:	d109      	bne.n	801f0b8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801f0a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f0a6:	22ac      	movs	r2, #172	@ 0xac
 801f0a8:	589b      	ldr	r3, [r3, r2]
 801f0aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f0ac:	2158      	movs	r1, #88	@ 0x58
 801f0ae:	5a51      	ldrh	r1, [r2, r1]
 801f0b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f0b2:	0010      	movs	r0, r2
 801f0b4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801f0b6:	e005      	b.n	801f0c4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801f0b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f0ba:	2294      	movs	r2, #148	@ 0x94
 801f0bc:	589b      	ldr	r3, [r3, r2]
 801f0be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f0c0:	0010      	movs	r0, r2
 801f0c2:	4798      	blx	r3
}
 801f0c4:	46c0      	nop			@ (mov r8, r8)
 801f0c6:	46bd      	mov	sp, r7
 801f0c8:	b014      	add	sp, #80	@ 0x50
 801f0ca:	bd80      	pop	{r7, pc}
 801f0cc:	fffffeff 	.word	0xfffffeff

0801f0d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801f0d0:	b580      	push	{r7, lr}
 801f0d2:	b084      	sub	sp, #16
 801f0d4:	af00      	add	r7, sp, #0
 801f0d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f0dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	2201      	movs	r2, #1
 801f0e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f0e4:	68fb      	ldr	r3, [r7, #12]
 801f0e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f0e8:	2b01      	cmp	r3, #1
 801f0ea:	d10b      	bne.n	801f104 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801f0ec:	68fb      	ldr	r3, [r7, #12]
 801f0ee:	22ac      	movs	r2, #172	@ 0xac
 801f0f0:	589b      	ldr	r3, [r3, r2]
 801f0f2:	68fa      	ldr	r2, [r7, #12]
 801f0f4:	2158      	movs	r1, #88	@ 0x58
 801f0f6:	5a52      	ldrh	r2, [r2, r1]
 801f0f8:	0852      	lsrs	r2, r2, #1
 801f0fa:	b291      	uxth	r1, r2
 801f0fc:	68fa      	ldr	r2, [r7, #12]
 801f0fe:	0010      	movs	r0, r2
 801f100:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801f102:	e005      	b.n	801f110 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801f104:	68fb      	ldr	r3, [r7, #12]
 801f106:	2290      	movs	r2, #144	@ 0x90
 801f108:	589b      	ldr	r3, [r3, r2]
 801f10a:	68fa      	ldr	r2, [r7, #12]
 801f10c:	0010      	movs	r0, r2
 801f10e:	4798      	blx	r3
}
 801f110:	46c0      	nop			@ (mov r8, r8)
 801f112:	46bd      	mov	sp, r7
 801f114:	b004      	add	sp, #16
 801f116:	bd80      	pop	{r7, pc}

0801f118 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801f118:	b580      	push	{r7, lr}
 801f11a:	b086      	sub	sp, #24
 801f11c:	af00      	add	r7, sp, #0
 801f11e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f124:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801f126:	697b      	ldr	r3, [r7, #20]
 801f128:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f12a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801f12c:	697b      	ldr	r3, [r7, #20]
 801f12e:	2280      	movs	r2, #128	@ 0x80
 801f130:	589b      	ldr	r3, [r3, r2]
 801f132:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801f134:	697b      	ldr	r3, [r7, #20]
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	689b      	ldr	r3, [r3, #8]
 801f13a:	2280      	movs	r2, #128	@ 0x80
 801f13c:	4013      	ands	r3, r2
 801f13e:	2b80      	cmp	r3, #128	@ 0x80
 801f140:	d10a      	bne.n	801f158 <UART_DMAError+0x40>
 801f142:	693b      	ldr	r3, [r7, #16]
 801f144:	2b21      	cmp	r3, #33	@ 0x21
 801f146:	d107      	bne.n	801f158 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801f148:	697b      	ldr	r3, [r7, #20]
 801f14a:	2252      	movs	r2, #82	@ 0x52
 801f14c:	2100      	movs	r1, #0
 801f14e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801f150:	697b      	ldr	r3, [r7, #20]
 801f152:	0018      	movs	r0, r3
 801f154:	f7ff fe3a 	bl	801edcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801f158:	697b      	ldr	r3, [r7, #20]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	689b      	ldr	r3, [r3, #8]
 801f15e:	2240      	movs	r2, #64	@ 0x40
 801f160:	4013      	ands	r3, r2
 801f162:	2b40      	cmp	r3, #64	@ 0x40
 801f164:	d10a      	bne.n	801f17c <UART_DMAError+0x64>
 801f166:	68fb      	ldr	r3, [r7, #12]
 801f168:	2b22      	cmp	r3, #34	@ 0x22
 801f16a:	d107      	bne.n	801f17c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801f16c:	697b      	ldr	r3, [r7, #20]
 801f16e:	225a      	movs	r2, #90	@ 0x5a
 801f170:	2100      	movs	r1, #0
 801f172:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801f174:	697b      	ldr	r3, [r7, #20]
 801f176:	0018      	movs	r0, r3
 801f178:	f7ff fe4c 	bl	801ee14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801f17c:	697b      	ldr	r3, [r7, #20]
 801f17e:	2284      	movs	r2, #132	@ 0x84
 801f180:	589b      	ldr	r3, [r3, r2]
 801f182:	2210      	movs	r2, #16
 801f184:	431a      	orrs	r2, r3
 801f186:	697b      	ldr	r3, [r7, #20]
 801f188:	2184      	movs	r1, #132	@ 0x84
 801f18a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f18c:	697b      	ldr	r3, [r7, #20]
 801f18e:	2298      	movs	r2, #152	@ 0x98
 801f190:	589b      	ldr	r3, [r3, r2]
 801f192:	697a      	ldr	r2, [r7, #20]
 801f194:	0010      	movs	r0, r2
 801f196:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f198:	46c0      	nop			@ (mov r8, r8)
 801f19a:	46bd      	mov	sp, r7
 801f19c:	b006      	add	sp, #24
 801f19e:	bd80      	pop	{r7, pc}

0801f1a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f1a0:	b580      	push	{r7, lr}
 801f1a2:	b084      	sub	sp, #16
 801f1a4:	af00      	add	r7, sp, #0
 801f1a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f1ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801f1ae:	68fb      	ldr	r3, [r7, #12]
 801f1b0:	225a      	movs	r2, #90	@ 0x5a
 801f1b2:	2100      	movs	r1, #0
 801f1b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801f1b6:	68fb      	ldr	r3, [r7, #12]
 801f1b8:	2252      	movs	r2, #82	@ 0x52
 801f1ba:	2100      	movs	r1, #0
 801f1bc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f1be:	68fb      	ldr	r3, [r7, #12]
 801f1c0:	2298      	movs	r2, #152	@ 0x98
 801f1c2:	589b      	ldr	r3, [r3, r2]
 801f1c4:	68fa      	ldr	r2, [r7, #12]
 801f1c6:	0010      	movs	r0, r2
 801f1c8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f1ca:	46c0      	nop			@ (mov r8, r8)
 801f1cc:	46bd      	mov	sp, r7
 801f1ce:	b004      	add	sp, #16
 801f1d0:	bd80      	pop	{r7, pc}

0801f1d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801f1d2:	b580      	push	{r7, lr}
 801f1d4:	b086      	sub	sp, #24
 801f1d6:	af00      	add	r7, sp, #0
 801f1d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1da:	f3ef 8310 	mrs	r3, PRIMASK
 801f1de:	60bb      	str	r3, [r7, #8]
  return(result);
 801f1e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801f1e2:	617b      	str	r3, [r7, #20]
 801f1e4:	2301      	movs	r3, #1
 801f1e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	f383 8810 	msr	PRIMASK, r3
}
 801f1ee:	46c0      	nop			@ (mov r8, r8)
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	681a      	ldr	r2, [r3, #0]
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	2140      	movs	r1, #64	@ 0x40
 801f1fc:	438a      	bics	r2, r1
 801f1fe:	601a      	str	r2, [r3, #0]
 801f200:	697b      	ldr	r3, [r7, #20]
 801f202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f204:	693b      	ldr	r3, [r7, #16]
 801f206:	f383 8810 	msr	PRIMASK, r3
}
 801f20a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	2220      	movs	r2, #32
 801f210:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	2200      	movs	r2, #0
 801f216:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	228c      	movs	r2, #140	@ 0x8c
 801f21c:	589b      	ldr	r3, [r3, r2]
 801f21e:	687a      	ldr	r2, [r7, #4]
 801f220:	0010      	movs	r0, r2
 801f222:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f224:	46c0      	nop			@ (mov r8, r8)
 801f226:	46bd      	mov	sp, r7
 801f228:	b006      	add	sp, #24
 801f22a:	bd80      	pop	{r7, pc}

0801f22c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801f22c:	b580      	push	{r7, lr}
 801f22e:	b094      	sub	sp, #80	@ 0x50
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801f234:	204e      	movs	r0, #78	@ 0x4e
 801f236:	183b      	adds	r3, r7, r0
 801f238:	687a      	ldr	r2, [r7, #4]
 801f23a:	215c      	movs	r1, #92	@ 0x5c
 801f23c:	5a52      	ldrh	r2, [r2, r1]
 801f23e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f240:	687b      	ldr	r3, [r7, #4]
 801f242:	2280      	movs	r2, #128	@ 0x80
 801f244:	589b      	ldr	r3, [r3, r2]
 801f246:	2b22      	cmp	r3, #34	@ 0x22
 801f248:	d000      	beq.n	801f24c <UART_RxISR_8BIT+0x20>
 801f24a:	e0c2      	b.n	801f3d2 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f252:	214c      	movs	r1, #76	@ 0x4c
 801f254:	187b      	adds	r3, r7, r1
 801f256:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801f258:	187b      	adds	r3, r7, r1
 801f25a:	881b      	ldrh	r3, [r3, #0]
 801f25c:	b2da      	uxtb	r2, r3
 801f25e:	183b      	adds	r3, r7, r0
 801f260:	881b      	ldrh	r3, [r3, #0]
 801f262:	b2d9      	uxtb	r1, r3
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f268:	400a      	ands	r2, r1
 801f26a:	b2d2      	uxtb	r2, r2
 801f26c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801f26e:	687b      	ldr	r3, [r7, #4]
 801f270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f272:	1c5a      	adds	r2, r3, #1
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	225a      	movs	r2, #90	@ 0x5a
 801f27c:	5a9b      	ldrh	r3, [r3, r2]
 801f27e:	b29b      	uxth	r3, r3
 801f280:	3b01      	subs	r3, #1
 801f282:	b299      	uxth	r1, r3
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	225a      	movs	r2, #90	@ 0x5a
 801f288:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	225a      	movs	r2, #90	@ 0x5a
 801f28e:	5a9b      	ldrh	r3, [r3, r2]
 801f290:	b29b      	uxth	r3, r3
 801f292:	2b00      	cmp	r3, #0
 801f294:	d000      	beq.n	801f298 <UART_RxISR_8BIT+0x6c>
 801f296:	e0a4      	b.n	801f3e2 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f298:	f3ef 8310 	mrs	r3, PRIMASK
 801f29c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801f29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f2a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f2a2:	2301      	movs	r3, #1
 801f2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f2a8:	f383 8810 	msr	PRIMASK, r3
}
 801f2ac:	46c0      	nop			@ (mov r8, r8)
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	681a      	ldr	r2, [r3, #0]
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	494c      	ldr	r1, [pc, #304]	@ (801f3ec <UART_RxISR_8BIT+0x1c0>)
 801f2ba:	400a      	ands	r2, r1
 801f2bc:	601a      	str	r2, [r3, #0]
 801f2be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2c4:	f383 8810 	msr	PRIMASK, r3
}
 801f2c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2ca:	f3ef 8310 	mrs	r3, PRIMASK
 801f2ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801f2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f2d2:	647b      	str	r3, [r7, #68]	@ 0x44
 801f2d4:	2301      	movs	r3, #1
 801f2d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2da:	f383 8810 	msr	PRIMASK, r3
}
 801f2de:	46c0      	nop			@ (mov r8, r8)
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	681b      	ldr	r3, [r3, #0]
 801f2e4:	689a      	ldr	r2, [r3, #8]
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	2101      	movs	r1, #1
 801f2ec:	438a      	bics	r2, r1
 801f2ee:	609a      	str	r2, [r3, #8]
 801f2f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f2f6:	f383 8810 	msr	PRIMASK, r3
}
 801f2fa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	2280      	movs	r2, #128	@ 0x80
 801f300:	2120      	movs	r1, #32
 801f302:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	2200      	movs	r2, #0
 801f308:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	2200      	movs	r2, #0
 801f30e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f310:	687b      	ldr	r3, [r7, #4]
 801f312:	681b      	ldr	r3, [r3, #0]
 801f314:	4a36      	ldr	r2, [pc, #216]	@ (801f3f0 <UART_RxISR_8BIT+0x1c4>)
 801f316:	4293      	cmp	r3, r2
 801f318:	d01f      	beq.n	801f35a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	685a      	ldr	r2, [r3, #4]
 801f320:	2380      	movs	r3, #128	@ 0x80
 801f322:	041b      	lsls	r3, r3, #16
 801f324:	4013      	ands	r3, r2
 801f326:	d018      	beq.n	801f35a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f328:	f3ef 8310 	mrs	r3, PRIMASK
 801f32c:	61bb      	str	r3, [r7, #24]
  return(result);
 801f32e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f330:	643b      	str	r3, [r7, #64]	@ 0x40
 801f332:	2301      	movs	r3, #1
 801f334:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f336:	69fb      	ldr	r3, [r7, #28]
 801f338:	f383 8810 	msr	PRIMASK, r3
}
 801f33c:	46c0      	nop			@ (mov r8, r8)
 801f33e:	687b      	ldr	r3, [r7, #4]
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	681a      	ldr	r2, [r3, #0]
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	492a      	ldr	r1, [pc, #168]	@ (801f3f4 <UART_RxISR_8BIT+0x1c8>)
 801f34a:	400a      	ands	r2, r1
 801f34c:	601a      	str	r2, [r3, #0]
 801f34e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f350:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f352:	6a3b      	ldr	r3, [r7, #32]
 801f354:	f383 8810 	msr	PRIMASK, r3
}
 801f358:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f35e:	2b01      	cmp	r3, #1
 801f360:	d130      	bne.n	801f3c4 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	2200      	movs	r2, #0
 801f366:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f368:	f3ef 8310 	mrs	r3, PRIMASK
 801f36c:	60fb      	str	r3, [r7, #12]
  return(result);
 801f36e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f372:	2301      	movs	r3, #1
 801f374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f376:	693b      	ldr	r3, [r7, #16]
 801f378:	f383 8810 	msr	PRIMASK, r3
}
 801f37c:	46c0      	nop			@ (mov r8, r8)
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	681a      	ldr	r2, [r3, #0]
 801f384:	687b      	ldr	r3, [r7, #4]
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	2110      	movs	r1, #16
 801f38a:	438a      	bics	r2, r1
 801f38c:	601a      	str	r2, [r3, #0]
 801f38e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f390:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f392:	697b      	ldr	r3, [r7, #20]
 801f394:	f383 8810 	msr	PRIMASK, r3
}
 801f398:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	681b      	ldr	r3, [r3, #0]
 801f39e:	69db      	ldr	r3, [r3, #28]
 801f3a0:	2210      	movs	r2, #16
 801f3a2:	4013      	ands	r3, r2
 801f3a4:	2b10      	cmp	r3, #16
 801f3a6:	d103      	bne.n	801f3b0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	2210      	movs	r2, #16
 801f3ae:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	22ac      	movs	r2, #172	@ 0xac
 801f3b4:	589b      	ldr	r3, [r3, r2]
 801f3b6:	687a      	ldr	r2, [r7, #4]
 801f3b8:	2158      	movs	r1, #88	@ 0x58
 801f3ba:	5a51      	ldrh	r1, [r2, r1]
 801f3bc:	687a      	ldr	r2, [r7, #4]
 801f3be:	0010      	movs	r0, r2
 801f3c0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f3c2:	e00e      	b.n	801f3e2 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	2294      	movs	r2, #148	@ 0x94
 801f3c8:	589b      	ldr	r3, [r3, r2]
 801f3ca:	687a      	ldr	r2, [r7, #4]
 801f3cc:	0010      	movs	r0, r2
 801f3ce:	4798      	blx	r3
}
 801f3d0:	e007      	b.n	801f3e2 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f3d2:	687b      	ldr	r3, [r7, #4]
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	699a      	ldr	r2, [r3, #24]
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	2108      	movs	r1, #8
 801f3de:	430a      	orrs	r2, r1
 801f3e0:	619a      	str	r2, [r3, #24]
}
 801f3e2:	46c0      	nop			@ (mov r8, r8)
 801f3e4:	46bd      	mov	sp, r7
 801f3e6:	b014      	add	sp, #80	@ 0x50
 801f3e8:	bd80      	pop	{r7, pc}
 801f3ea:	46c0      	nop			@ (mov r8, r8)
 801f3ec:	fffffedf 	.word	0xfffffedf
 801f3f0:	40004800 	.word	0x40004800
 801f3f4:	fbffffff 	.word	0xfbffffff

0801f3f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f3f8:	b580      	push	{r7, lr}
 801f3fa:	b094      	sub	sp, #80	@ 0x50
 801f3fc:	af00      	add	r7, sp, #0
 801f3fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f400:	204e      	movs	r0, #78	@ 0x4e
 801f402:	183b      	adds	r3, r7, r0
 801f404:	687a      	ldr	r2, [r7, #4]
 801f406:	215c      	movs	r1, #92	@ 0x5c
 801f408:	5a52      	ldrh	r2, [r2, r1]
 801f40a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f40c:	687b      	ldr	r3, [r7, #4]
 801f40e:	2280      	movs	r2, #128	@ 0x80
 801f410:	589b      	ldr	r3, [r3, r2]
 801f412:	2b22      	cmp	r3, #34	@ 0x22
 801f414:	d000      	beq.n	801f418 <UART_RxISR_16BIT+0x20>
 801f416:	e0c2      	b.n	801f59e <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f41e:	214c      	movs	r1, #76	@ 0x4c
 801f420:	187b      	adds	r3, r7, r1
 801f422:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f428:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801f42a:	187b      	adds	r3, r7, r1
 801f42c:	183a      	adds	r2, r7, r0
 801f42e:	881b      	ldrh	r3, [r3, #0]
 801f430:	8812      	ldrh	r2, [r2, #0]
 801f432:	4013      	ands	r3, r2
 801f434:	b29a      	uxth	r2, r3
 801f436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f438:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f43e:	1c9a      	adds	r2, r3, #2
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	225a      	movs	r2, #90	@ 0x5a
 801f448:	5a9b      	ldrh	r3, [r3, r2]
 801f44a:	b29b      	uxth	r3, r3
 801f44c:	3b01      	subs	r3, #1
 801f44e:	b299      	uxth	r1, r3
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	225a      	movs	r2, #90	@ 0x5a
 801f454:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	225a      	movs	r2, #90	@ 0x5a
 801f45a:	5a9b      	ldrh	r3, [r3, r2]
 801f45c:	b29b      	uxth	r3, r3
 801f45e:	2b00      	cmp	r3, #0
 801f460:	d000      	beq.n	801f464 <UART_RxISR_16BIT+0x6c>
 801f462:	e0a4      	b.n	801f5ae <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f464:	f3ef 8310 	mrs	r3, PRIMASK
 801f468:	623b      	str	r3, [r7, #32]
  return(result);
 801f46a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f46c:	647b      	str	r3, [r7, #68]	@ 0x44
 801f46e:	2301      	movs	r3, #1
 801f470:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f474:	f383 8810 	msr	PRIMASK, r3
}
 801f478:	46c0      	nop			@ (mov r8, r8)
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	681b      	ldr	r3, [r3, #0]
 801f47e:	681a      	ldr	r2, [r3, #0]
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	494c      	ldr	r1, [pc, #304]	@ (801f5b8 <UART_RxISR_16BIT+0x1c0>)
 801f486:	400a      	ands	r2, r1
 801f488:	601a      	str	r2, [r3, #0]
 801f48a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f48c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f490:	f383 8810 	msr	PRIMASK, r3
}
 801f494:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f496:	f3ef 8310 	mrs	r3, PRIMASK
 801f49a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801f49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f49e:	643b      	str	r3, [r7, #64]	@ 0x40
 801f4a0:	2301      	movs	r3, #1
 801f4a2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f4a6:	f383 8810 	msr	PRIMASK, r3
}
 801f4aa:	46c0      	nop			@ (mov r8, r8)
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	681b      	ldr	r3, [r3, #0]
 801f4b0:	689a      	ldr	r2, [r3, #8]
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	2101      	movs	r1, #1
 801f4b8:	438a      	bics	r2, r1
 801f4ba:	609a      	str	r2, [r3, #8]
 801f4bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f4be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f4c2:	f383 8810 	msr	PRIMASK, r3
}
 801f4c6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	2280      	movs	r2, #128	@ 0x80
 801f4cc:	2120      	movs	r1, #32
 801f4ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	2200      	movs	r2, #0
 801f4da:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	4a36      	ldr	r2, [pc, #216]	@ (801f5bc <UART_RxISR_16BIT+0x1c4>)
 801f4e2:	4293      	cmp	r3, r2
 801f4e4:	d01f      	beq.n	801f526 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	685a      	ldr	r2, [r3, #4]
 801f4ec:	2380      	movs	r3, #128	@ 0x80
 801f4ee:	041b      	lsls	r3, r3, #16
 801f4f0:	4013      	ands	r3, r2
 801f4f2:	d018      	beq.n	801f526 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f4f4:	f3ef 8310 	mrs	r3, PRIMASK
 801f4f8:	617b      	str	r3, [r7, #20]
  return(result);
 801f4fa:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f4fe:	2301      	movs	r3, #1
 801f500:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f502:	69bb      	ldr	r3, [r7, #24]
 801f504:	f383 8810 	msr	PRIMASK, r3
}
 801f508:	46c0      	nop			@ (mov r8, r8)
 801f50a:	687b      	ldr	r3, [r7, #4]
 801f50c:	681b      	ldr	r3, [r3, #0]
 801f50e:	681a      	ldr	r2, [r3, #0]
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	492a      	ldr	r1, [pc, #168]	@ (801f5c0 <UART_RxISR_16BIT+0x1c8>)
 801f516:	400a      	ands	r2, r1
 801f518:	601a      	str	r2, [r3, #0]
 801f51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f51c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f51e:	69fb      	ldr	r3, [r7, #28]
 801f520:	f383 8810 	msr	PRIMASK, r3
}
 801f524:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f52a:	2b01      	cmp	r3, #1
 801f52c:	d130      	bne.n	801f590 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	2200      	movs	r2, #0
 801f532:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f534:	f3ef 8310 	mrs	r3, PRIMASK
 801f538:	60bb      	str	r3, [r7, #8]
  return(result);
 801f53a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f53c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f53e:	2301      	movs	r3, #1
 801f540:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f542:	68fb      	ldr	r3, [r7, #12]
 801f544:	f383 8810 	msr	PRIMASK, r3
}
 801f548:	46c0      	nop			@ (mov r8, r8)
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	681b      	ldr	r3, [r3, #0]
 801f54e:	681a      	ldr	r2, [r3, #0]
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	2110      	movs	r1, #16
 801f556:	438a      	bics	r2, r1
 801f558:	601a      	str	r2, [r3, #0]
 801f55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f55c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f55e:	693b      	ldr	r3, [r7, #16]
 801f560:	f383 8810 	msr	PRIMASK, r3
}
 801f564:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	681b      	ldr	r3, [r3, #0]
 801f56a:	69db      	ldr	r3, [r3, #28]
 801f56c:	2210      	movs	r2, #16
 801f56e:	4013      	ands	r3, r2
 801f570:	2b10      	cmp	r3, #16
 801f572:	d103      	bne.n	801f57c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	2210      	movs	r2, #16
 801f57a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	22ac      	movs	r2, #172	@ 0xac
 801f580:	589b      	ldr	r3, [r3, r2]
 801f582:	687a      	ldr	r2, [r7, #4]
 801f584:	2158      	movs	r1, #88	@ 0x58
 801f586:	5a51      	ldrh	r1, [r2, r1]
 801f588:	687a      	ldr	r2, [r7, #4]
 801f58a:	0010      	movs	r0, r2
 801f58c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f58e:	e00e      	b.n	801f5ae <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	2294      	movs	r2, #148	@ 0x94
 801f594:	589b      	ldr	r3, [r3, r2]
 801f596:	687a      	ldr	r2, [r7, #4]
 801f598:	0010      	movs	r0, r2
 801f59a:	4798      	blx	r3
}
 801f59c:	e007      	b.n	801f5ae <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	699a      	ldr	r2, [r3, #24]
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	681b      	ldr	r3, [r3, #0]
 801f5a8:	2108      	movs	r1, #8
 801f5aa:	430a      	orrs	r2, r1
 801f5ac:	619a      	str	r2, [r3, #24]
}
 801f5ae:	46c0      	nop			@ (mov r8, r8)
 801f5b0:	46bd      	mov	sp, r7
 801f5b2:	b014      	add	sp, #80	@ 0x50
 801f5b4:	bd80      	pop	{r7, pc}
 801f5b6:	46c0      	nop			@ (mov r8, r8)
 801f5b8:	fffffedf 	.word	0xfffffedf
 801f5bc:	40004800 	.word	0x40004800
 801f5c0:	fbffffff 	.word	0xfbffffff

0801f5c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f5c4:	b580      	push	{r7, lr}
 801f5c6:	b082      	sub	sp, #8
 801f5c8:	af00      	add	r7, sp, #0
 801f5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f5cc:	46c0      	nop			@ (mov r8, r8)
 801f5ce:	46bd      	mov	sp, r7
 801f5d0:	b002      	add	sp, #8
 801f5d2:	bd80      	pop	{r7, pc}

0801f5d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801f5d4:	b580      	push	{r7, lr}
 801f5d6:	b084      	sub	sp, #16
 801f5d8:	af00      	add	r7, sp, #0
 801f5da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	2244      	movs	r2, #68	@ 0x44
 801f5e0:	2100      	movs	r1, #0
 801f5e2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f5e4:	4b05      	ldr	r3, [pc, #20]	@ (801f5fc <USB_EnableGlobalInt+0x28>)
 801f5e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801f5e8:	68fb      	ldr	r3, [r7, #12]
 801f5ea:	b299      	uxth	r1, r3
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	2240      	movs	r2, #64	@ 0x40
 801f5f0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f5f2:	2300      	movs	r3, #0
}
 801f5f4:	0018      	movs	r0, r3
 801f5f6:	46bd      	mov	sp, r7
 801f5f8:	b004      	add	sp, #16
 801f5fa:	bd80      	pop	{r7, pc}
 801f5fc:	0000bf80 	.word	0x0000bf80

0801f600 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f600:	b580      	push	{r7, lr}
 801f602:	b084      	sub	sp, #16
 801f604:	af00      	add	r7, sp, #0
 801f606:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f608:	4b09      	ldr	r3, [pc, #36]	@ (801f630 <USB_DisableGlobalInt+0x30>)
 801f60a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	2240      	movs	r2, #64	@ 0x40
 801f610:	5a9b      	ldrh	r3, [r3, r2]
 801f612:	b29b      	uxth	r3, r3
 801f614:	68fa      	ldr	r2, [r7, #12]
 801f616:	b292      	uxth	r2, r2
 801f618:	43d2      	mvns	r2, r2
 801f61a:	b292      	uxth	r2, r2
 801f61c:	4013      	ands	r3, r2
 801f61e:	b299      	uxth	r1, r3
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	2240      	movs	r2, #64	@ 0x40
 801f624:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f626:	2300      	movs	r3, #0
}
 801f628:	0018      	movs	r0, r3
 801f62a:	46bd      	mov	sp, r7
 801f62c:	b004      	add	sp, #16
 801f62e:	bd80      	pop	{r7, pc}
 801f630:	0000bf80 	.word	0x0000bf80

0801f634 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f634:	b084      	sub	sp, #16
 801f636:	b590      	push	{r4, r7, lr}
 801f638:	b083      	sub	sp, #12
 801f63a:	af00      	add	r7, sp, #0
 801f63c:	6078      	str	r0, [r7, #4]
 801f63e:	2004      	movs	r0, #4
 801f640:	2410      	movs	r4, #16
 801f642:	1900      	adds	r0, r0, r4
 801f644:	2408      	movs	r4, #8
 801f646:	46a4      	mov	ip, r4
 801f648:	44bc      	add	ip, r7
 801f64a:	4460      	add	r0, ip
 801f64c:	6001      	str	r1, [r0, #0]
 801f64e:	6042      	str	r2, [r0, #4]
 801f650:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	2240      	movs	r2, #64	@ 0x40
 801f656:	2101      	movs	r1, #1
 801f658:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	2240      	movs	r2, #64	@ 0x40
 801f65e:	2100      	movs	r1, #0
 801f660:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	2244      	movs	r2, #68	@ 0x44
 801f666:	2100      	movs	r1, #0
 801f668:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	2250      	movs	r2, #80	@ 0x50
 801f66e:	2100      	movs	r1, #0
 801f670:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f672:	2300      	movs	r3, #0
}
 801f674:	0018      	movs	r0, r3
 801f676:	46bd      	mov	sp, r7
 801f678:	b003      	add	sp, #12
 801f67a:	bc90      	pop	{r4, r7}
 801f67c:	bc08      	pop	{r3}
 801f67e:	b004      	add	sp, #16
 801f680:	4718      	bx	r3
	...

0801f684 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f684:	b580      	push	{r7, lr}
 801f686:	b09c      	sub	sp, #112	@ 0x70
 801f688:	af00      	add	r7, sp, #0
 801f68a:	6078      	str	r0, [r7, #4]
 801f68c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801f68e:	236f      	movs	r3, #111	@ 0x6f
 801f690:	18fb      	adds	r3, r7, r3
 801f692:	2200      	movs	r2, #0
 801f694:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801f696:	687a      	ldr	r2, [r7, #4]
 801f698:	683b      	ldr	r3, [r7, #0]
 801f69a:	781b      	ldrb	r3, [r3, #0]
 801f69c:	009b      	lsls	r3, r3, #2
 801f69e:	18d3      	adds	r3, r2, r3
 801f6a0:	881b      	ldrh	r3, [r3, #0]
 801f6a2:	b29a      	uxth	r2, r3
 801f6a4:	236c      	movs	r3, #108	@ 0x6c
 801f6a6:	18fb      	adds	r3, r7, r3
 801f6a8:	49a3      	ldr	r1, [pc, #652]	@ (801f938 <USB_ActivateEndpoint+0x2b4>)
 801f6aa:	400a      	ands	r2, r1
 801f6ac:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801f6ae:	683b      	ldr	r3, [r7, #0]
 801f6b0:	78db      	ldrb	r3, [r3, #3]
 801f6b2:	2b03      	cmp	r3, #3
 801f6b4:	d017      	beq.n	801f6e6 <USB_ActivateEndpoint+0x62>
 801f6b6:	dc28      	bgt.n	801f70a <USB_ActivateEndpoint+0x86>
 801f6b8:	2b02      	cmp	r3, #2
 801f6ba:	d00e      	beq.n	801f6da <USB_ActivateEndpoint+0x56>
 801f6bc:	dc25      	bgt.n	801f70a <USB_ActivateEndpoint+0x86>
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	d002      	beq.n	801f6c8 <USB_ActivateEndpoint+0x44>
 801f6c2:	2b01      	cmp	r3, #1
 801f6c4:	d018      	beq.n	801f6f8 <USB_ActivateEndpoint+0x74>
 801f6c6:	e020      	b.n	801f70a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801f6c8:	226c      	movs	r2, #108	@ 0x6c
 801f6ca:	18bb      	adds	r3, r7, r2
 801f6cc:	18ba      	adds	r2, r7, r2
 801f6ce:	8812      	ldrh	r2, [r2, #0]
 801f6d0:	2180      	movs	r1, #128	@ 0x80
 801f6d2:	0089      	lsls	r1, r1, #2
 801f6d4:	430a      	orrs	r2, r1
 801f6d6:	801a      	strh	r2, [r3, #0]
      break;
 801f6d8:	e01c      	b.n	801f714 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801f6da:	226c      	movs	r2, #108	@ 0x6c
 801f6dc:	18bb      	adds	r3, r7, r2
 801f6de:	18ba      	adds	r2, r7, r2
 801f6e0:	8812      	ldrh	r2, [r2, #0]
 801f6e2:	801a      	strh	r2, [r3, #0]
      break;
 801f6e4:	e016      	b.n	801f714 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801f6e6:	226c      	movs	r2, #108	@ 0x6c
 801f6e8:	18bb      	adds	r3, r7, r2
 801f6ea:	18ba      	adds	r2, r7, r2
 801f6ec:	8812      	ldrh	r2, [r2, #0]
 801f6ee:	21c0      	movs	r1, #192	@ 0xc0
 801f6f0:	00c9      	lsls	r1, r1, #3
 801f6f2:	430a      	orrs	r2, r1
 801f6f4:	801a      	strh	r2, [r3, #0]
      break;
 801f6f6:	e00d      	b.n	801f714 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801f6f8:	226c      	movs	r2, #108	@ 0x6c
 801f6fa:	18bb      	adds	r3, r7, r2
 801f6fc:	18ba      	adds	r2, r7, r2
 801f6fe:	8812      	ldrh	r2, [r2, #0]
 801f700:	2180      	movs	r1, #128	@ 0x80
 801f702:	00c9      	lsls	r1, r1, #3
 801f704:	430a      	orrs	r2, r1
 801f706:	801a      	strh	r2, [r3, #0]
      break;
 801f708:	e004      	b.n	801f714 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801f70a:	236f      	movs	r3, #111	@ 0x6f
 801f70c:	18fb      	adds	r3, r7, r3
 801f70e:	2201      	movs	r2, #1
 801f710:	701a      	strb	r2, [r3, #0]
      break;
 801f712:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801f714:	687a      	ldr	r2, [r7, #4]
 801f716:	683b      	ldr	r3, [r7, #0]
 801f718:	781b      	ldrb	r3, [r3, #0]
 801f71a:	009b      	lsls	r3, r3, #2
 801f71c:	18d3      	adds	r3, r2, r3
 801f71e:	226c      	movs	r2, #108	@ 0x6c
 801f720:	18ba      	adds	r2, r7, r2
 801f722:	8812      	ldrh	r2, [r2, #0]
 801f724:	4985      	ldr	r1, [pc, #532]	@ (801f93c <USB_ActivateEndpoint+0x2b8>)
 801f726:	430a      	orrs	r2, r1
 801f728:	b292      	uxth	r2, r2
 801f72a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801f72c:	687a      	ldr	r2, [r7, #4]
 801f72e:	683b      	ldr	r3, [r7, #0]
 801f730:	781b      	ldrb	r3, [r3, #0]
 801f732:	009b      	lsls	r3, r3, #2
 801f734:	18d3      	adds	r3, r2, r3
 801f736:	881b      	ldrh	r3, [r3, #0]
 801f738:	b29b      	uxth	r3, r3
 801f73a:	b21b      	sxth	r3, r3
 801f73c:	4a80      	ldr	r2, [pc, #512]	@ (801f940 <USB_ActivateEndpoint+0x2bc>)
 801f73e:	4013      	ands	r3, r2
 801f740:	b21a      	sxth	r2, r3
 801f742:	683b      	ldr	r3, [r7, #0]
 801f744:	781b      	ldrb	r3, [r3, #0]
 801f746:	b21b      	sxth	r3, r3
 801f748:	4313      	orrs	r3, r2
 801f74a:	b21a      	sxth	r2, r3
 801f74c:	2166      	movs	r1, #102	@ 0x66
 801f74e:	187b      	adds	r3, r7, r1
 801f750:	801a      	strh	r2, [r3, #0]
 801f752:	687a      	ldr	r2, [r7, #4]
 801f754:	683b      	ldr	r3, [r7, #0]
 801f756:	781b      	ldrb	r3, [r3, #0]
 801f758:	009b      	lsls	r3, r3, #2
 801f75a:	18d3      	adds	r3, r2, r3
 801f75c:	187a      	adds	r2, r7, r1
 801f75e:	8812      	ldrh	r2, [r2, #0]
 801f760:	4976      	ldr	r1, [pc, #472]	@ (801f93c <USB_ActivateEndpoint+0x2b8>)
 801f762:	430a      	orrs	r2, r1
 801f764:	b292      	uxth	r2, r2
 801f766:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801f768:	683b      	ldr	r3, [r7, #0]
 801f76a:	7b1b      	ldrb	r3, [r3, #12]
 801f76c:	2b00      	cmp	r3, #0
 801f76e:	d000      	beq.n	801f772 <USB_ActivateEndpoint+0xee>
 801f770:	e178      	b.n	801fa64 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801f772:	683b      	ldr	r3, [r7, #0]
 801f774:	785b      	ldrb	r3, [r3, #1]
 801f776:	2b00      	cmp	r3, #0
 801f778:	d100      	bne.n	801f77c <USB_ActivateEndpoint+0xf8>
 801f77a:	e07a      	b.n	801f872 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	61bb      	str	r3, [r7, #24]
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	2250      	movs	r2, #80	@ 0x50
 801f784:	5a9b      	ldrh	r3, [r3, r2]
 801f786:	b29b      	uxth	r3, r3
 801f788:	001a      	movs	r2, r3
 801f78a:	69bb      	ldr	r3, [r7, #24]
 801f78c:	189b      	adds	r3, r3, r2
 801f78e:	61bb      	str	r3, [r7, #24]
 801f790:	683b      	ldr	r3, [r7, #0]
 801f792:	781b      	ldrb	r3, [r3, #0]
 801f794:	00da      	lsls	r2, r3, #3
 801f796:	69bb      	ldr	r3, [r7, #24]
 801f798:	18d3      	adds	r3, r2, r3
 801f79a:	2280      	movs	r2, #128	@ 0x80
 801f79c:	00d2      	lsls	r2, r2, #3
 801f79e:	4694      	mov	ip, r2
 801f7a0:	4463      	add	r3, ip
 801f7a2:	617b      	str	r3, [r7, #20]
 801f7a4:	683b      	ldr	r3, [r7, #0]
 801f7a6:	88db      	ldrh	r3, [r3, #6]
 801f7a8:	085b      	lsrs	r3, r3, #1
 801f7aa:	b29b      	uxth	r3, r3
 801f7ac:	18db      	adds	r3, r3, r3
 801f7ae:	b29a      	uxth	r2, r3
 801f7b0:	697b      	ldr	r3, [r7, #20]
 801f7b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f7b4:	687a      	ldr	r2, [r7, #4]
 801f7b6:	683b      	ldr	r3, [r7, #0]
 801f7b8:	781b      	ldrb	r3, [r3, #0]
 801f7ba:	009b      	lsls	r3, r3, #2
 801f7bc:	18d2      	adds	r2, r2, r3
 801f7be:	2112      	movs	r1, #18
 801f7c0:	187b      	adds	r3, r7, r1
 801f7c2:	8812      	ldrh	r2, [r2, #0]
 801f7c4:	801a      	strh	r2, [r3, #0]
 801f7c6:	187b      	adds	r3, r7, r1
 801f7c8:	881b      	ldrh	r3, [r3, #0]
 801f7ca:	2240      	movs	r2, #64	@ 0x40
 801f7cc:	4013      	ands	r3, r2
 801f7ce:	d016      	beq.n	801f7fe <USB_ActivateEndpoint+0x17a>
 801f7d0:	687a      	ldr	r2, [r7, #4]
 801f7d2:	683b      	ldr	r3, [r7, #0]
 801f7d4:	781b      	ldrb	r3, [r3, #0]
 801f7d6:	009b      	lsls	r3, r3, #2
 801f7d8:	18d3      	adds	r3, r2, r3
 801f7da:	881b      	ldrh	r3, [r3, #0]
 801f7dc:	b29a      	uxth	r2, r3
 801f7de:	2010      	movs	r0, #16
 801f7e0:	183b      	adds	r3, r7, r0
 801f7e2:	4957      	ldr	r1, [pc, #348]	@ (801f940 <USB_ActivateEndpoint+0x2bc>)
 801f7e4:	400a      	ands	r2, r1
 801f7e6:	801a      	strh	r2, [r3, #0]
 801f7e8:	687a      	ldr	r2, [r7, #4]
 801f7ea:	683b      	ldr	r3, [r7, #0]
 801f7ec:	781b      	ldrb	r3, [r3, #0]
 801f7ee:	009b      	lsls	r3, r3, #2
 801f7f0:	18d3      	adds	r3, r2, r3
 801f7f2:	183a      	adds	r2, r7, r0
 801f7f4:	8812      	ldrh	r2, [r2, #0]
 801f7f6:	4953      	ldr	r1, [pc, #332]	@ (801f944 <USB_ActivateEndpoint+0x2c0>)
 801f7f8:	430a      	orrs	r2, r1
 801f7fa:	b292      	uxth	r2, r2
 801f7fc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f7fe:	683b      	ldr	r3, [r7, #0]
 801f800:	78db      	ldrb	r3, [r3, #3]
 801f802:	2b01      	cmp	r3, #1
 801f804:	d01d      	beq.n	801f842 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f806:	687a      	ldr	r2, [r7, #4]
 801f808:	683b      	ldr	r3, [r7, #0]
 801f80a:	781b      	ldrb	r3, [r3, #0]
 801f80c:	009b      	lsls	r3, r3, #2
 801f80e:	18d3      	adds	r3, r2, r3
 801f810:	881b      	ldrh	r3, [r3, #0]
 801f812:	b29a      	uxth	r2, r3
 801f814:	200c      	movs	r0, #12
 801f816:	183b      	adds	r3, r7, r0
 801f818:	494b      	ldr	r1, [pc, #300]	@ (801f948 <USB_ActivateEndpoint+0x2c4>)
 801f81a:	400a      	ands	r2, r1
 801f81c:	801a      	strh	r2, [r3, #0]
 801f81e:	183b      	adds	r3, r7, r0
 801f820:	183a      	adds	r2, r7, r0
 801f822:	8812      	ldrh	r2, [r2, #0]
 801f824:	2120      	movs	r1, #32
 801f826:	404a      	eors	r2, r1
 801f828:	801a      	strh	r2, [r3, #0]
 801f82a:	687a      	ldr	r2, [r7, #4]
 801f82c:	683b      	ldr	r3, [r7, #0]
 801f82e:	781b      	ldrb	r3, [r3, #0]
 801f830:	009b      	lsls	r3, r3, #2
 801f832:	18d3      	adds	r3, r2, r3
 801f834:	183a      	adds	r2, r7, r0
 801f836:	8812      	ldrh	r2, [r2, #0]
 801f838:	4940      	ldr	r1, [pc, #256]	@ (801f93c <USB_ActivateEndpoint+0x2b8>)
 801f83a:	430a      	orrs	r2, r1
 801f83c:	b292      	uxth	r2, r2
 801f83e:	801a      	strh	r2, [r3, #0]
 801f840:	e2b4      	b.n	801fdac <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f842:	687a      	ldr	r2, [r7, #4]
 801f844:	683b      	ldr	r3, [r7, #0]
 801f846:	781b      	ldrb	r3, [r3, #0]
 801f848:	009b      	lsls	r3, r3, #2
 801f84a:	18d3      	adds	r3, r2, r3
 801f84c:	881b      	ldrh	r3, [r3, #0]
 801f84e:	b29a      	uxth	r2, r3
 801f850:	200e      	movs	r0, #14
 801f852:	183b      	adds	r3, r7, r0
 801f854:	493c      	ldr	r1, [pc, #240]	@ (801f948 <USB_ActivateEndpoint+0x2c4>)
 801f856:	400a      	ands	r2, r1
 801f858:	801a      	strh	r2, [r3, #0]
 801f85a:	687a      	ldr	r2, [r7, #4]
 801f85c:	683b      	ldr	r3, [r7, #0]
 801f85e:	781b      	ldrb	r3, [r3, #0]
 801f860:	009b      	lsls	r3, r3, #2
 801f862:	18d3      	adds	r3, r2, r3
 801f864:	183a      	adds	r2, r7, r0
 801f866:	8812      	ldrh	r2, [r2, #0]
 801f868:	4934      	ldr	r1, [pc, #208]	@ (801f93c <USB_ActivateEndpoint+0x2b8>)
 801f86a:	430a      	orrs	r2, r1
 801f86c:	b292      	uxth	r2, r2
 801f86e:	801a      	strh	r2, [r3, #0]
 801f870:	e29c      	b.n	801fdac <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	633b      	str	r3, [r7, #48]	@ 0x30
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	2250      	movs	r2, #80	@ 0x50
 801f87a:	5a9b      	ldrh	r3, [r3, r2]
 801f87c:	b29b      	uxth	r3, r3
 801f87e:	001a      	movs	r2, r3
 801f880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f882:	189b      	adds	r3, r3, r2
 801f884:	633b      	str	r3, [r7, #48]	@ 0x30
 801f886:	683b      	ldr	r3, [r7, #0]
 801f888:	781b      	ldrb	r3, [r3, #0]
 801f88a:	00da      	lsls	r2, r3, #3
 801f88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f88e:	18d3      	adds	r3, r2, r3
 801f890:	4a2e      	ldr	r2, [pc, #184]	@ (801f94c <USB_ActivateEndpoint+0x2c8>)
 801f892:	4694      	mov	ip, r2
 801f894:	4463      	add	r3, ip
 801f896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f898:	683b      	ldr	r3, [r7, #0]
 801f89a:	88db      	ldrh	r3, [r3, #6]
 801f89c:	085b      	lsrs	r3, r3, #1
 801f89e:	b29b      	uxth	r3, r3
 801f8a0:	18db      	adds	r3, r3, r3
 801f8a2:	b29a      	uxth	r2, r3
 801f8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8a6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	2250      	movs	r2, #80	@ 0x50
 801f8b0:	5a9b      	ldrh	r3, [r3, r2]
 801f8b2:	b29b      	uxth	r3, r3
 801f8b4:	001a      	movs	r2, r3
 801f8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8b8:	189b      	adds	r3, r3, r2
 801f8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f8bc:	683b      	ldr	r3, [r7, #0]
 801f8be:	781b      	ldrb	r3, [r3, #0]
 801f8c0:	00da      	lsls	r2, r3, #3
 801f8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8c4:	18d3      	adds	r3, r2, r3
 801f8c6:	4a22      	ldr	r2, [pc, #136]	@ (801f950 <USB_ActivateEndpoint+0x2cc>)
 801f8c8:	4694      	mov	ip, r2
 801f8ca:	4463      	add	r3, ip
 801f8cc:	627b      	str	r3, [r7, #36]	@ 0x24
 801f8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f8d0:	881b      	ldrh	r3, [r3, #0]
 801f8d2:	b29b      	uxth	r3, r3
 801f8d4:	059b      	lsls	r3, r3, #22
 801f8d6:	0d9b      	lsrs	r3, r3, #22
 801f8d8:	b29a      	uxth	r2, r3
 801f8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f8dc:	801a      	strh	r2, [r3, #0]
 801f8de:	683b      	ldr	r3, [r7, #0]
 801f8e0:	691b      	ldr	r3, [r3, #16]
 801f8e2:	2b3e      	cmp	r3, #62	@ 0x3e
 801f8e4:	d91a      	bls.n	801f91c <USB_ActivateEndpoint+0x298>
 801f8e6:	683b      	ldr	r3, [r7, #0]
 801f8e8:	691b      	ldr	r3, [r3, #16]
 801f8ea:	095b      	lsrs	r3, r3, #5
 801f8ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f8ee:	683b      	ldr	r3, [r7, #0]
 801f8f0:	691b      	ldr	r3, [r3, #16]
 801f8f2:	221f      	movs	r2, #31
 801f8f4:	4013      	ands	r3, r2
 801f8f6:	d102      	bne.n	801f8fe <USB_ActivateEndpoint+0x27a>
 801f8f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f8fa:	3b01      	subs	r3, #1
 801f8fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f900:	881b      	ldrh	r3, [r3, #0]
 801f902:	b29a      	uxth	r2, r3
 801f904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f906:	b29b      	uxth	r3, r3
 801f908:	029b      	lsls	r3, r3, #10
 801f90a:	b29b      	uxth	r3, r3
 801f90c:	4313      	orrs	r3, r2
 801f90e:	b29b      	uxth	r3, r3
 801f910:	4a10      	ldr	r2, [pc, #64]	@ (801f954 <USB_ActivateEndpoint+0x2d0>)
 801f912:	4313      	orrs	r3, r2
 801f914:	b29a      	uxth	r2, r3
 801f916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f918:	801a      	strh	r2, [r3, #0]
 801f91a:	e034      	b.n	801f986 <USB_ActivateEndpoint+0x302>
 801f91c:	683b      	ldr	r3, [r7, #0]
 801f91e:	691b      	ldr	r3, [r3, #16]
 801f920:	2b00      	cmp	r3, #0
 801f922:	d119      	bne.n	801f958 <USB_ActivateEndpoint+0x2d4>
 801f924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f926:	881b      	ldrh	r3, [r3, #0]
 801f928:	b29b      	uxth	r3, r3
 801f92a:	4a0a      	ldr	r2, [pc, #40]	@ (801f954 <USB_ActivateEndpoint+0x2d0>)
 801f92c:	4313      	orrs	r3, r2
 801f92e:	b29a      	uxth	r2, r3
 801f930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f932:	801a      	strh	r2, [r3, #0]
 801f934:	e027      	b.n	801f986 <USB_ActivateEndpoint+0x302>
 801f936:	46c0      	nop			@ (mov r8, r8)
 801f938:	ffff898f 	.word	0xffff898f
 801f93c:	ffff8080 	.word	0xffff8080
 801f940:	ffff8f8f 	.word	0xffff8f8f
 801f944:	ffff80c0 	.word	0xffff80c0
 801f948:	ffff8fbf 	.word	0xffff8fbf
 801f94c:	00000404 	.word	0x00000404
 801f950:	00000406 	.word	0x00000406
 801f954:	ffff8000 	.word	0xffff8000
 801f958:	683b      	ldr	r3, [r7, #0]
 801f95a:	691b      	ldr	r3, [r3, #16]
 801f95c:	085b      	lsrs	r3, r3, #1
 801f95e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f960:	683b      	ldr	r3, [r7, #0]
 801f962:	691b      	ldr	r3, [r3, #16]
 801f964:	2201      	movs	r2, #1
 801f966:	4013      	ands	r3, r2
 801f968:	d002      	beq.n	801f970 <USB_ActivateEndpoint+0x2ec>
 801f96a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f96c:	3301      	adds	r3, #1
 801f96e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f972:	881b      	ldrh	r3, [r3, #0]
 801f974:	b29a      	uxth	r2, r3
 801f976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f978:	b29b      	uxth	r3, r3
 801f97a:	029b      	lsls	r3, r3, #10
 801f97c:	b29b      	uxth	r3, r3
 801f97e:	4313      	orrs	r3, r2
 801f980:	b29a      	uxth	r2, r3
 801f982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f984:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f986:	687a      	ldr	r2, [r7, #4]
 801f988:	683b      	ldr	r3, [r7, #0]
 801f98a:	781b      	ldrb	r3, [r3, #0]
 801f98c:	009b      	lsls	r3, r3, #2
 801f98e:	18d2      	adds	r2, r2, r3
 801f990:	2122      	movs	r1, #34	@ 0x22
 801f992:	187b      	adds	r3, r7, r1
 801f994:	8812      	ldrh	r2, [r2, #0]
 801f996:	801a      	strh	r2, [r3, #0]
 801f998:	187b      	adds	r3, r7, r1
 801f99a:	881a      	ldrh	r2, [r3, #0]
 801f99c:	2380      	movs	r3, #128	@ 0x80
 801f99e:	01db      	lsls	r3, r3, #7
 801f9a0:	4013      	ands	r3, r2
 801f9a2:	d016      	beq.n	801f9d2 <USB_ActivateEndpoint+0x34e>
 801f9a4:	687a      	ldr	r2, [r7, #4]
 801f9a6:	683b      	ldr	r3, [r7, #0]
 801f9a8:	781b      	ldrb	r3, [r3, #0]
 801f9aa:	009b      	lsls	r3, r3, #2
 801f9ac:	18d3      	adds	r3, r2, r3
 801f9ae:	881b      	ldrh	r3, [r3, #0]
 801f9b0:	b29a      	uxth	r2, r3
 801f9b2:	2020      	movs	r0, #32
 801f9b4:	183b      	adds	r3, r7, r0
 801f9b6:	49dd      	ldr	r1, [pc, #884]	@ (801fd2c <USB_ActivateEndpoint+0x6a8>)
 801f9b8:	400a      	ands	r2, r1
 801f9ba:	801a      	strh	r2, [r3, #0]
 801f9bc:	687a      	ldr	r2, [r7, #4]
 801f9be:	683b      	ldr	r3, [r7, #0]
 801f9c0:	781b      	ldrb	r3, [r3, #0]
 801f9c2:	009b      	lsls	r3, r3, #2
 801f9c4:	18d3      	adds	r3, r2, r3
 801f9c6:	183a      	adds	r2, r7, r0
 801f9c8:	8812      	ldrh	r2, [r2, #0]
 801f9ca:	49d9      	ldr	r1, [pc, #868]	@ (801fd30 <USB_ActivateEndpoint+0x6ac>)
 801f9cc:	430a      	orrs	r2, r1
 801f9ce:	b292      	uxth	r2, r2
 801f9d0:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f9d2:	683b      	ldr	r3, [r7, #0]
 801f9d4:	781b      	ldrb	r3, [r3, #0]
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d125      	bne.n	801fa26 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f9da:	687a      	ldr	r2, [r7, #4]
 801f9dc:	683b      	ldr	r3, [r7, #0]
 801f9de:	781b      	ldrb	r3, [r3, #0]
 801f9e0:	009b      	lsls	r3, r3, #2
 801f9e2:	18d3      	adds	r3, r2, r3
 801f9e4:	881b      	ldrh	r3, [r3, #0]
 801f9e6:	b29a      	uxth	r2, r3
 801f9e8:	201c      	movs	r0, #28
 801f9ea:	183b      	adds	r3, r7, r0
 801f9ec:	49d1      	ldr	r1, [pc, #836]	@ (801fd34 <USB_ActivateEndpoint+0x6b0>)
 801f9ee:	400a      	ands	r2, r1
 801f9f0:	801a      	strh	r2, [r3, #0]
 801f9f2:	183b      	adds	r3, r7, r0
 801f9f4:	183a      	adds	r2, r7, r0
 801f9f6:	8812      	ldrh	r2, [r2, #0]
 801f9f8:	2180      	movs	r1, #128	@ 0x80
 801f9fa:	0149      	lsls	r1, r1, #5
 801f9fc:	404a      	eors	r2, r1
 801f9fe:	801a      	strh	r2, [r3, #0]
 801fa00:	183b      	adds	r3, r7, r0
 801fa02:	183a      	adds	r2, r7, r0
 801fa04:	8812      	ldrh	r2, [r2, #0]
 801fa06:	2180      	movs	r1, #128	@ 0x80
 801fa08:	0189      	lsls	r1, r1, #6
 801fa0a:	404a      	eors	r2, r1
 801fa0c:	801a      	strh	r2, [r3, #0]
 801fa0e:	687a      	ldr	r2, [r7, #4]
 801fa10:	683b      	ldr	r3, [r7, #0]
 801fa12:	781b      	ldrb	r3, [r3, #0]
 801fa14:	009b      	lsls	r3, r3, #2
 801fa16:	18d3      	adds	r3, r2, r3
 801fa18:	183a      	adds	r2, r7, r0
 801fa1a:	8812      	ldrh	r2, [r2, #0]
 801fa1c:	49c6      	ldr	r1, [pc, #792]	@ (801fd38 <USB_ActivateEndpoint+0x6b4>)
 801fa1e:	430a      	orrs	r2, r1
 801fa20:	b292      	uxth	r2, r2
 801fa22:	801a      	strh	r2, [r3, #0]
 801fa24:	e1c2      	b.n	801fdac <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801fa26:	687a      	ldr	r2, [r7, #4]
 801fa28:	683b      	ldr	r3, [r7, #0]
 801fa2a:	781b      	ldrb	r3, [r3, #0]
 801fa2c:	009b      	lsls	r3, r3, #2
 801fa2e:	18d3      	adds	r3, r2, r3
 801fa30:	881b      	ldrh	r3, [r3, #0]
 801fa32:	b29a      	uxth	r2, r3
 801fa34:	201e      	movs	r0, #30
 801fa36:	183b      	adds	r3, r7, r0
 801fa38:	49be      	ldr	r1, [pc, #760]	@ (801fd34 <USB_ActivateEndpoint+0x6b0>)
 801fa3a:	400a      	ands	r2, r1
 801fa3c:	801a      	strh	r2, [r3, #0]
 801fa3e:	183b      	adds	r3, r7, r0
 801fa40:	183a      	adds	r2, r7, r0
 801fa42:	8812      	ldrh	r2, [r2, #0]
 801fa44:	2180      	movs	r1, #128	@ 0x80
 801fa46:	0189      	lsls	r1, r1, #6
 801fa48:	404a      	eors	r2, r1
 801fa4a:	801a      	strh	r2, [r3, #0]
 801fa4c:	687a      	ldr	r2, [r7, #4]
 801fa4e:	683b      	ldr	r3, [r7, #0]
 801fa50:	781b      	ldrb	r3, [r3, #0]
 801fa52:	009b      	lsls	r3, r3, #2
 801fa54:	18d3      	adds	r3, r2, r3
 801fa56:	183a      	adds	r2, r7, r0
 801fa58:	8812      	ldrh	r2, [r2, #0]
 801fa5a:	49b7      	ldr	r1, [pc, #732]	@ (801fd38 <USB_ActivateEndpoint+0x6b4>)
 801fa5c:	430a      	orrs	r2, r1
 801fa5e:	b292      	uxth	r2, r2
 801fa60:	801a      	strh	r2, [r3, #0]
 801fa62:	e1a3      	b.n	801fdac <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801fa64:	683b      	ldr	r3, [r7, #0]
 801fa66:	78db      	ldrb	r3, [r3, #3]
 801fa68:	2b02      	cmp	r3, #2
 801fa6a:	d117      	bne.n	801fa9c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801fa6c:	687a      	ldr	r2, [r7, #4]
 801fa6e:	683b      	ldr	r3, [r7, #0]
 801fa70:	781b      	ldrb	r3, [r3, #0]
 801fa72:	009b      	lsls	r3, r3, #2
 801fa74:	18d3      	adds	r3, r2, r3
 801fa76:	881b      	ldrh	r3, [r3, #0]
 801fa78:	b29a      	uxth	r2, r3
 801fa7a:	2062      	movs	r0, #98	@ 0x62
 801fa7c:	183b      	adds	r3, r7, r0
 801fa7e:	49ab      	ldr	r1, [pc, #684]	@ (801fd2c <USB_ActivateEndpoint+0x6a8>)
 801fa80:	400a      	ands	r2, r1
 801fa82:	801a      	strh	r2, [r3, #0]
 801fa84:	687a      	ldr	r2, [r7, #4]
 801fa86:	683b      	ldr	r3, [r7, #0]
 801fa88:	781b      	ldrb	r3, [r3, #0]
 801fa8a:	009b      	lsls	r3, r3, #2
 801fa8c:	18d3      	adds	r3, r2, r3
 801fa8e:	183a      	adds	r2, r7, r0
 801fa90:	8812      	ldrh	r2, [r2, #0]
 801fa92:	49aa      	ldr	r1, [pc, #680]	@ (801fd3c <USB_ActivateEndpoint+0x6b8>)
 801fa94:	430a      	orrs	r2, r1
 801fa96:	b292      	uxth	r2, r2
 801fa98:	801a      	strh	r2, [r3, #0]
 801fa9a:	e016      	b.n	801faca <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801fa9c:	687a      	ldr	r2, [r7, #4]
 801fa9e:	683b      	ldr	r3, [r7, #0]
 801faa0:	781b      	ldrb	r3, [r3, #0]
 801faa2:	009b      	lsls	r3, r3, #2
 801faa4:	18d3      	adds	r3, r2, r3
 801faa6:	881b      	ldrh	r3, [r3, #0]
 801faa8:	b29a      	uxth	r2, r3
 801faaa:	2064      	movs	r0, #100	@ 0x64
 801faac:	183b      	adds	r3, r7, r0
 801faae:	49a4      	ldr	r1, [pc, #656]	@ (801fd40 <USB_ActivateEndpoint+0x6bc>)
 801fab0:	400a      	ands	r2, r1
 801fab2:	801a      	strh	r2, [r3, #0]
 801fab4:	687a      	ldr	r2, [r7, #4]
 801fab6:	683b      	ldr	r3, [r7, #0]
 801fab8:	781b      	ldrb	r3, [r3, #0]
 801faba:	009b      	lsls	r3, r3, #2
 801fabc:	18d3      	adds	r3, r2, r3
 801fabe:	183a      	adds	r2, r7, r0
 801fac0:	8812      	ldrh	r2, [r2, #0]
 801fac2:	499d      	ldr	r1, [pc, #628]	@ (801fd38 <USB_ActivateEndpoint+0x6b4>)
 801fac4:	430a      	orrs	r2, r1
 801fac6:	b292      	uxth	r2, r2
 801fac8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	2250      	movs	r2, #80	@ 0x50
 801fad2:	5a9b      	ldrh	r3, [r3, r2]
 801fad4:	b29b      	uxth	r3, r3
 801fad6:	001a      	movs	r2, r3
 801fad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fada:	189b      	adds	r3, r3, r2
 801fadc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801fade:	683b      	ldr	r3, [r7, #0]
 801fae0:	781b      	ldrb	r3, [r3, #0]
 801fae2:	00da      	lsls	r2, r3, #3
 801fae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fae6:	18d3      	adds	r3, r2, r3
 801fae8:	2280      	movs	r2, #128	@ 0x80
 801faea:	00d2      	lsls	r2, r2, #3
 801faec:	4694      	mov	ip, r2
 801faee:	4463      	add	r3, ip
 801faf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801faf2:	683b      	ldr	r3, [r7, #0]
 801faf4:	891b      	ldrh	r3, [r3, #8]
 801faf6:	085b      	lsrs	r3, r3, #1
 801faf8:	b29b      	uxth	r3, r3
 801fafa:	18db      	adds	r3, r3, r3
 801fafc:	b29a      	uxth	r2, r3
 801fafe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801fb00:	801a      	strh	r2, [r3, #0]
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	657b      	str	r3, [r7, #84]	@ 0x54
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	2250      	movs	r2, #80	@ 0x50
 801fb0a:	5a9b      	ldrh	r3, [r3, r2]
 801fb0c:	b29b      	uxth	r3, r3
 801fb0e:	001a      	movs	r2, r3
 801fb10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fb12:	189b      	adds	r3, r3, r2
 801fb14:	657b      	str	r3, [r7, #84]	@ 0x54
 801fb16:	683b      	ldr	r3, [r7, #0]
 801fb18:	781b      	ldrb	r3, [r3, #0]
 801fb1a:	00da      	lsls	r2, r3, #3
 801fb1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fb1e:	18d3      	adds	r3, r2, r3
 801fb20:	4a88      	ldr	r2, [pc, #544]	@ (801fd44 <USB_ActivateEndpoint+0x6c0>)
 801fb22:	4694      	mov	ip, r2
 801fb24:	4463      	add	r3, ip
 801fb26:	653b      	str	r3, [r7, #80]	@ 0x50
 801fb28:	683b      	ldr	r3, [r7, #0]
 801fb2a:	895b      	ldrh	r3, [r3, #10]
 801fb2c:	085b      	lsrs	r3, r3, #1
 801fb2e:	b29b      	uxth	r3, r3
 801fb30:	18db      	adds	r3, r3, r3
 801fb32:	b29a      	uxth	r2, r3
 801fb34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fb36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801fb38:	683b      	ldr	r3, [r7, #0]
 801fb3a:	785b      	ldrb	r3, [r3, #1]
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	d000      	beq.n	801fb42 <USB_ActivateEndpoint+0x4be>
 801fb40:	e087      	b.n	801fc52 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fb42:	687a      	ldr	r2, [r7, #4]
 801fb44:	683b      	ldr	r3, [r7, #0]
 801fb46:	781b      	ldrb	r3, [r3, #0]
 801fb48:	009b      	lsls	r3, r3, #2
 801fb4a:	18d2      	adds	r2, r2, r3
 801fb4c:	2140      	movs	r1, #64	@ 0x40
 801fb4e:	187b      	adds	r3, r7, r1
 801fb50:	8812      	ldrh	r2, [r2, #0]
 801fb52:	801a      	strh	r2, [r3, #0]
 801fb54:	187b      	adds	r3, r7, r1
 801fb56:	881a      	ldrh	r2, [r3, #0]
 801fb58:	2380      	movs	r3, #128	@ 0x80
 801fb5a:	01db      	lsls	r3, r3, #7
 801fb5c:	4013      	ands	r3, r2
 801fb5e:	d016      	beq.n	801fb8e <USB_ActivateEndpoint+0x50a>
 801fb60:	687a      	ldr	r2, [r7, #4]
 801fb62:	683b      	ldr	r3, [r7, #0]
 801fb64:	781b      	ldrb	r3, [r3, #0]
 801fb66:	009b      	lsls	r3, r3, #2
 801fb68:	18d3      	adds	r3, r2, r3
 801fb6a:	881b      	ldrh	r3, [r3, #0]
 801fb6c:	b29a      	uxth	r2, r3
 801fb6e:	203e      	movs	r0, #62	@ 0x3e
 801fb70:	183b      	adds	r3, r7, r0
 801fb72:	496e      	ldr	r1, [pc, #440]	@ (801fd2c <USB_ActivateEndpoint+0x6a8>)
 801fb74:	400a      	ands	r2, r1
 801fb76:	801a      	strh	r2, [r3, #0]
 801fb78:	687a      	ldr	r2, [r7, #4]
 801fb7a:	683b      	ldr	r3, [r7, #0]
 801fb7c:	781b      	ldrb	r3, [r3, #0]
 801fb7e:	009b      	lsls	r3, r3, #2
 801fb80:	18d3      	adds	r3, r2, r3
 801fb82:	183a      	adds	r2, r7, r0
 801fb84:	8812      	ldrh	r2, [r2, #0]
 801fb86:	496a      	ldr	r1, [pc, #424]	@ (801fd30 <USB_ActivateEndpoint+0x6ac>)
 801fb88:	430a      	orrs	r2, r1
 801fb8a:	b292      	uxth	r2, r2
 801fb8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fb8e:	687a      	ldr	r2, [r7, #4]
 801fb90:	683b      	ldr	r3, [r7, #0]
 801fb92:	781b      	ldrb	r3, [r3, #0]
 801fb94:	009b      	lsls	r3, r3, #2
 801fb96:	18d2      	adds	r2, r2, r3
 801fb98:	213c      	movs	r1, #60	@ 0x3c
 801fb9a:	187b      	adds	r3, r7, r1
 801fb9c:	8812      	ldrh	r2, [r2, #0]
 801fb9e:	801a      	strh	r2, [r3, #0]
 801fba0:	187b      	adds	r3, r7, r1
 801fba2:	881b      	ldrh	r3, [r3, #0]
 801fba4:	2240      	movs	r2, #64	@ 0x40
 801fba6:	4013      	ands	r3, r2
 801fba8:	d016      	beq.n	801fbd8 <USB_ActivateEndpoint+0x554>
 801fbaa:	687a      	ldr	r2, [r7, #4]
 801fbac:	683b      	ldr	r3, [r7, #0]
 801fbae:	781b      	ldrb	r3, [r3, #0]
 801fbb0:	009b      	lsls	r3, r3, #2
 801fbb2:	18d3      	adds	r3, r2, r3
 801fbb4:	881b      	ldrh	r3, [r3, #0]
 801fbb6:	b29a      	uxth	r2, r3
 801fbb8:	203a      	movs	r0, #58	@ 0x3a
 801fbba:	183b      	adds	r3, r7, r0
 801fbbc:	495b      	ldr	r1, [pc, #364]	@ (801fd2c <USB_ActivateEndpoint+0x6a8>)
 801fbbe:	400a      	ands	r2, r1
 801fbc0:	801a      	strh	r2, [r3, #0]
 801fbc2:	687a      	ldr	r2, [r7, #4]
 801fbc4:	683b      	ldr	r3, [r7, #0]
 801fbc6:	781b      	ldrb	r3, [r3, #0]
 801fbc8:	009b      	lsls	r3, r3, #2
 801fbca:	18d3      	adds	r3, r2, r3
 801fbcc:	183a      	adds	r2, r7, r0
 801fbce:	8812      	ldrh	r2, [r2, #0]
 801fbd0:	495d      	ldr	r1, [pc, #372]	@ (801fd48 <USB_ActivateEndpoint+0x6c4>)
 801fbd2:	430a      	orrs	r2, r1
 801fbd4:	b292      	uxth	r2, r2
 801fbd6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801fbd8:	687a      	ldr	r2, [r7, #4]
 801fbda:	683b      	ldr	r3, [r7, #0]
 801fbdc:	781b      	ldrb	r3, [r3, #0]
 801fbde:	009b      	lsls	r3, r3, #2
 801fbe0:	18d3      	adds	r3, r2, r3
 801fbe2:	881b      	ldrh	r3, [r3, #0]
 801fbe4:	b29a      	uxth	r2, r3
 801fbe6:	2038      	movs	r0, #56	@ 0x38
 801fbe8:	183b      	adds	r3, r7, r0
 801fbea:	4952      	ldr	r1, [pc, #328]	@ (801fd34 <USB_ActivateEndpoint+0x6b0>)
 801fbec:	400a      	ands	r2, r1
 801fbee:	801a      	strh	r2, [r3, #0]
 801fbf0:	183b      	adds	r3, r7, r0
 801fbf2:	183a      	adds	r2, r7, r0
 801fbf4:	8812      	ldrh	r2, [r2, #0]
 801fbf6:	2180      	movs	r1, #128	@ 0x80
 801fbf8:	0149      	lsls	r1, r1, #5
 801fbfa:	404a      	eors	r2, r1
 801fbfc:	801a      	strh	r2, [r3, #0]
 801fbfe:	183b      	adds	r3, r7, r0
 801fc00:	183a      	adds	r2, r7, r0
 801fc02:	8812      	ldrh	r2, [r2, #0]
 801fc04:	2180      	movs	r1, #128	@ 0x80
 801fc06:	0189      	lsls	r1, r1, #6
 801fc08:	404a      	eors	r2, r1
 801fc0a:	801a      	strh	r2, [r3, #0]
 801fc0c:	687a      	ldr	r2, [r7, #4]
 801fc0e:	683b      	ldr	r3, [r7, #0]
 801fc10:	781b      	ldrb	r3, [r3, #0]
 801fc12:	009b      	lsls	r3, r3, #2
 801fc14:	18d3      	adds	r3, r2, r3
 801fc16:	183a      	adds	r2, r7, r0
 801fc18:	8812      	ldrh	r2, [r2, #0]
 801fc1a:	4947      	ldr	r1, [pc, #284]	@ (801fd38 <USB_ActivateEndpoint+0x6b4>)
 801fc1c:	430a      	orrs	r2, r1
 801fc1e:	b292      	uxth	r2, r2
 801fc20:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fc22:	687a      	ldr	r2, [r7, #4]
 801fc24:	683b      	ldr	r3, [r7, #0]
 801fc26:	781b      	ldrb	r3, [r3, #0]
 801fc28:	009b      	lsls	r3, r3, #2
 801fc2a:	18d3      	adds	r3, r2, r3
 801fc2c:	881b      	ldrh	r3, [r3, #0]
 801fc2e:	b29a      	uxth	r2, r3
 801fc30:	2036      	movs	r0, #54	@ 0x36
 801fc32:	183b      	adds	r3, r7, r0
 801fc34:	4945      	ldr	r1, [pc, #276]	@ (801fd4c <USB_ActivateEndpoint+0x6c8>)
 801fc36:	400a      	ands	r2, r1
 801fc38:	801a      	strh	r2, [r3, #0]
 801fc3a:	687a      	ldr	r2, [r7, #4]
 801fc3c:	683b      	ldr	r3, [r7, #0]
 801fc3e:	781b      	ldrb	r3, [r3, #0]
 801fc40:	009b      	lsls	r3, r3, #2
 801fc42:	18d3      	adds	r3, r2, r3
 801fc44:	183a      	adds	r2, r7, r0
 801fc46:	8812      	ldrh	r2, [r2, #0]
 801fc48:	493b      	ldr	r1, [pc, #236]	@ (801fd38 <USB_ActivateEndpoint+0x6b4>)
 801fc4a:	430a      	orrs	r2, r1
 801fc4c:	b292      	uxth	r2, r2
 801fc4e:	801a      	strh	r2, [r3, #0]
 801fc50:	e0ac      	b.n	801fdac <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fc52:	687a      	ldr	r2, [r7, #4]
 801fc54:	683b      	ldr	r3, [r7, #0]
 801fc56:	781b      	ldrb	r3, [r3, #0]
 801fc58:	009b      	lsls	r3, r3, #2
 801fc5a:	18d2      	adds	r2, r2, r3
 801fc5c:	214e      	movs	r1, #78	@ 0x4e
 801fc5e:	187b      	adds	r3, r7, r1
 801fc60:	8812      	ldrh	r2, [r2, #0]
 801fc62:	801a      	strh	r2, [r3, #0]
 801fc64:	187b      	adds	r3, r7, r1
 801fc66:	881a      	ldrh	r2, [r3, #0]
 801fc68:	2380      	movs	r3, #128	@ 0x80
 801fc6a:	01db      	lsls	r3, r3, #7
 801fc6c:	4013      	ands	r3, r2
 801fc6e:	d016      	beq.n	801fc9e <USB_ActivateEndpoint+0x61a>
 801fc70:	687a      	ldr	r2, [r7, #4]
 801fc72:	683b      	ldr	r3, [r7, #0]
 801fc74:	781b      	ldrb	r3, [r3, #0]
 801fc76:	009b      	lsls	r3, r3, #2
 801fc78:	18d3      	adds	r3, r2, r3
 801fc7a:	881b      	ldrh	r3, [r3, #0]
 801fc7c:	b29a      	uxth	r2, r3
 801fc7e:	204c      	movs	r0, #76	@ 0x4c
 801fc80:	183b      	adds	r3, r7, r0
 801fc82:	492a      	ldr	r1, [pc, #168]	@ (801fd2c <USB_ActivateEndpoint+0x6a8>)
 801fc84:	400a      	ands	r2, r1
 801fc86:	801a      	strh	r2, [r3, #0]
 801fc88:	687a      	ldr	r2, [r7, #4]
 801fc8a:	683b      	ldr	r3, [r7, #0]
 801fc8c:	781b      	ldrb	r3, [r3, #0]
 801fc8e:	009b      	lsls	r3, r3, #2
 801fc90:	18d3      	adds	r3, r2, r3
 801fc92:	183a      	adds	r2, r7, r0
 801fc94:	8812      	ldrh	r2, [r2, #0]
 801fc96:	4926      	ldr	r1, [pc, #152]	@ (801fd30 <USB_ActivateEndpoint+0x6ac>)
 801fc98:	430a      	orrs	r2, r1
 801fc9a:	b292      	uxth	r2, r2
 801fc9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fc9e:	687a      	ldr	r2, [r7, #4]
 801fca0:	683b      	ldr	r3, [r7, #0]
 801fca2:	781b      	ldrb	r3, [r3, #0]
 801fca4:	009b      	lsls	r3, r3, #2
 801fca6:	18d2      	adds	r2, r2, r3
 801fca8:	214a      	movs	r1, #74	@ 0x4a
 801fcaa:	187b      	adds	r3, r7, r1
 801fcac:	8812      	ldrh	r2, [r2, #0]
 801fcae:	801a      	strh	r2, [r3, #0]
 801fcb0:	187b      	adds	r3, r7, r1
 801fcb2:	881b      	ldrh	r3, [r3, #0]
 801fcb4:	2240      	movs	r2, #64	@ 0x40
 801fcb6:	4013      	ands	r3, r2
 801fcb8:	d016      	beq.n	801fce8 <USB_ActivateEndpoint+0x664>
 801fcba:	687a      	ldr	r2, [r7, #4]
 801fcbc:	683b      	ldr	r3, [r7, #0]
 801fcbe:	781b      	ldrb	r3, [r3, #0]
 801fcc0:	009b      	lsls	r3, r3, #2
 801fcc2:	18d3      	adds	r3, r2, r3
 801fcc4:	881b      	ldrh	r3, [r3, #0]
 801fcc6:	b29a      	uxth	r2, r3
 801fcc8:	2048      	movs	r0, #72	@ 0x48
 801fcca:	183b      	adds	r3, r7, r0
 801fccc:	4917      	ldr	r1, [pc, #92]	@ (801fd2c <USB_ActivateEndpoint+0x6a8>)
 801fcce:	400a      	ands	r2, r1
 801fcd0:	801a      	strh	r2, [r3, #0]
 801fcd2:	687a      	ldr	r2, [r7, #4]
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	781b      	ldrb	r3, [r3, #0]
 801fcd8:	009b      	lsls	r3, r3, #2
 801fcda:	18d3      	adds	r3, r2, r3
 801fcdc:	183a      	adds	r2, r7, r0
 801fcde:	8812      	ldrh	r2, [r2, #0]
 801fce0:	4919      	ldr	r1, [pc, #100]	@ (801fd48 <USB_ActivateEndpoint+0x6c4>)
 801fce2:	430a      	orrs	r2, r1
 801fce4:	b292      	uxth	r2, r2
 801fce6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801fce8:	683b      	ldr	r3, [r7, #0]
 801fcea:	78db      	ldrb	r3, [r3, #3]
 801fcec:	2b01      	cmp	r3, #1
 801fcee:	d02f      	beq.n	801fd50 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801fcf0:	687a      	ldr	r2, [r7, #4]
 801fcf2:	683b      	ldr	r3, [r7, #0]
 801fcf4:	781b      	ldrb	r3, [r3, #0]
 801fcf6:	009b      	lsls	r3, r3, #2
 801fcf8:	18d3      	adds	r3, r2, r3
 801fcfa:	881b      	ldrh	r3, [r3, #0]
 801fcfc:	b29a      	uxth	r2, r3
 801fcfe:	2044      	movs	r0, #68	@ 0x44
 801fd00:	183b      	adds	r3, r7, r0
 801fd02:	4912      	ldr	r1, [pc, #72]	@ (801fd4c <USB_ActivateEndpoint+0x6c8>)
 801fd04:	400a      	ands	r2, r1
 801fd06:	801a      	strh	r2, [r3, #0]
 801fd08:	183b      	adds	r3, r7, r0
 801fd0a:	183a      	adds	r2, r7, r0
 801fd0c:	8812      	ldrh	r2, [r2, #0]
 801fd0e:	2120      	movs	r1, #32
 801fd10:	404a      	eors	r2, r1
 801fd12:	801a      	strh	r2, [r3, #0]
 801fd14:	687a      	ldr	r2, [r7, #4]
 801fd16:	683b      	ldr	r3, [r7, #0]
 801fd18:	781b      	ldrb	r3, [r3, #0]
 801fd1a:	009b      	lsls	r3, r3, #2
 801fd1c:	18d3      	adds	r3, r2, r3
 801fd1e:	183a      	adds	r2, r7, r0
 801fd20:	8812      	ldrh	r2, [r2, #0]
 801fd22:	4905      	ldr	r1, [pc, #20]	@ (801fd38 <USB_ActivateEndpoint+0x6b4>)
 801fd24:	430a      	orrs	r2, r1
 801fd26:	b292      	uxth	r2, r2
 801fd28:	801a      	strh	r2, [r3, #0]
 801fd2a:	e028      	b.n	801fd7e <USB_ActivateEndpoint+0x6fa>
 801fd2c:	ffff8f8f 	.word	0xffff8f8f
 801fd30:	ffffc080 	.word	0xffffc080
 801fd34:	ffffbf8f 	.word	0xffffbf8f
 801fd38:	ffff8080 	.word	0xffff8080
 801fd3c:	ffff8180 	.word	0xffff8180
 801fd40:	ffff8e8f 	.word	0xffff8e8f
 801fd44:	00000404 	.word	0x00000404
 801fd48:	ffff80c0 	.word	0xffff80c0
 801fd4c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fd50:	687a      	ldr	r2, [r7, #4]
 801fd52:	683b      	ldr	r3, [r7, #0]
 801fd54:	781b      	ldrb	r3, [r3, #0]
 801fd56:	009b      	lsls	r3, r3, #2
 801fd58:	18d3      	adds	r3, r2, r3
 801fd5a:	881b      	ldrh	r3, [r3, #0]
 801fd5c:	b29a      	uxth	r2, r3
 801fd5e:	2046      	movs	r0, #70	@ 0x46
 801fd60:	183b      	adds	r3, r7, r0
 801fd62:	4916      	ldr	r1, [pc, #88]	@ (801fdbc <USB_ActivateEndpoint+0x738>)
 801fd64:	400a      	ands	r2, r1
 801fd66:	801a      	strh	r2, [r3, #0]
 801fd68:	687a      	ldr	r2, [r7, #4]
 801fd6a:	683b      	ldr	r3, [r7, #0]
 801fd6c:	781b      	ldrb	r3, [r3, #0]
 801fd6e:	009b      	lsls	r3, r3, #2
 801fd70:	18d3      	adds	r3, r2, r3
 801fd72:	183a      	adds	r2, r7, r0
 801fd74:	8812      	ldrh	r2, [r2, #0]
 801fd76:	4912      	ldr	r1, [pc, #72]	@ (801fdc0 <USB_ActivateEndpoint+0x73c>)
 801fd78:	430a      	orrs	r2, r1
 801fd7a:	b292      	uxth	r2, r2
 801fd7c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fd7e:	687a      	ldr	r2, [r7, #4]
 801fd80:	683b      	ldr	r3, [r7, #0]
 801fd82:	781b      	ldrb	r3, [r3, #0]
 801fd84:	009b      	lsls	r3, r3, #2
 801fd86:	18d3      	adds	r3, r2, r3
 801fd88:	881b      	ldrh	r3, [r3, #0]
 801fd8a:	b29a      	uxth	r2, r3
 801fd8c:	2042      	movs	r0, #66	@ 0x42
 801fd8e:	183b      	adds	r3, r7, r0
 801fd90:	490c      	ldr	r1, [pc, #48]	@ (801fdc4 <USB_ActivateEndpoint+0x740>)
 801fd92:	400a      	ands	r2, r1
 801fd94:	801a      	strh	r2, [r3, #0]
 801fd96:	687a      	ldr	r2, [r7, #4]
 801fd98:	683b      	ldr	r3, [r7, #0]
 801fd9a:	781b      	ldrb	r3, [r3, #0]
 801fd9c:	009b      	lsls	r3, r3, #2
 801fd9e:	18d3      	adds	r3, r2, r3
 801fda0:	183a      	adds	r2, r7, r0
 801fda2:	8812      	ldrh	r2, [r2, #0]
 801fda4:	4906      	ldr	r1, [pc, #24]	@ (801fdc0 <USB_ActivateEndpoint+0x73c>)
 801fda6:	430a      	orrs	r2, r1
 801fda8:	b292      	uxth	r2, r2
 801fdaa:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801fdac:	236f      	movs	r3, #111	@ 0x6f
 801fdae:	18fb      	adds	r3, r7, r3
 801fdb0:	781b      	ldrb	r3, [r3, #0]
}
 801fdb2:	0018      	movs	r0, r3
 801fdb4:	46bd      	mov	sp, r7
 801fdb6:	b01c      	add	sp, #112	@ 0x70
 801fdb8:	bd80      	pop	{r7, pc}
 801fdba:	46c0      	nop			@ (mov r8, r8)
 801fdbc:	ffff8fbf 	.word	0xffff8fbf
 801fdc0:	ffff8080 	.word	0xffff8080
 801fdc4:	ffffbf8f 	.word	0xffffbf8f

0801fdc8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fdc8:	b580      	push	{r7, lr}
 801fdca:	b08c      	sub	sp, #48	@ 0x30
 801fdcc:	af00      	add	r7, sp, #0
 801fdce:	6078      	str	r0, [r7, #4]
 801fdd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fdd2:	683b      	ldr	r3, [r7, #0]
 801fdd4:	7b1b      	ldrb	r3, [r3, #12]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d000      	beq.n	801fddc <USB_DeactivateEndpoint+0x14>
 801fdda:	e07e      	b.n	801feda <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801fddc:	683b      	ldr	r3, [r7, #0]
 801fdde:	785b      	ldrb	r3, [r3, #1]
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d03c      	beq.n	801fe5e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fde4:	687a      	ldr	r2, [r7, #4]
 801fde6:	683b      	ldr	r3, [r7, #0]
 801fde8:	781b      	ldrb	r3, [r3, #0]
 801fdea:	009b      	lsls	r3, r3, #2
 801fdec:	18d2      	adds	r2, r2, r3
 801fdee:	210c      	movs	r1, #12
 801fdf0:	187b      	adds	r3, r7, r1
 801fdf2:	8812      	ldrh	r2, [r2, #0]
 801fdf4:	801a      	strh	r2, [r3, #0]
 801fdf6:	187b      	adds	r3, r7, r1
 801fdf8:	881b      	ldrh	r3, [r3, #0]
 801fdfa:	2240      	movs	r2, #64	@ 0x40
 801fdfc:	4013      	ands	r3, r2
 801fdfe:	d016      	beq.n	801fe2e <USB_DeactivateEndpoint+0x66>
 801fe00:	687a      	ldr	r2, [r7, #4]
 801fe02:	683b      	ldr	r3, [r7, #0]
 801fe04:	781b      	ldrb	r3, [r3, #0]
 801fe06:	009b      	lsls	r3, r3, #2
 801fe08:	18d3      	adds	r3, r2, r3
 801fe0a:	881b      	ldrh	r3, [r3, #0]
 801fe0c:	b29a      	uxth	r2, r3
 801fe0e:	200a      	movs	r0, #10
 801fe10:	183b      	adds	r3, r7, r0
 801fe12:	49c7      	ldr	r1, [pc, #796]	@ (8020130 <USB_DeactivateEndpoint+0x368>)
 801fe14:	400a      	ands	r2, r1
 801fe16:	801a      	strh	r2, [r3, #0]
 801fe18:	687a      	ldr	r2, [r7, #4]
 801fe1a:	683b      	ldr	r3, [r7, #0]
 801fe1c:	781b      	ldrb	r3, [r3, #0]
 801fe1e:	009b      	lsls	r3, r3, #2
 801fe20:	18d3      	adds	r3, r2, r3
 801fe22:	183a      	adds	r2, r7, r0
 801fe24:	8812      	ldrh	r2, [r2, #0]
 801fe26:	49c3      	ldr	r1, [pc, #780]	@ (8020134 <USB_DeactivateEndpoint+0x36c>)
 801fe28:	430a      	orrs	r2, r1
 801fe2a:	b292      	uxth	r2, r2
 801fe2c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fe2e:	687a      	ldr	r2, [r7, #4]
 801fe30:	683b      	ldr	r3, [r7, #0]
 801fe32:	781b      	ldrb	r3, [r3, #0]
 801fe34:	009b      	lsls	r3, r3, #2
 801fe36:	18d3      	adds	r3, r2, r3
 801fe38:	881b      	ldrh	r3, [r3, #0]
 801fe3a:	b29a      	uxth	r2, r3
 801fe3c:	2008      	movs	r0, #8
 801fe3e:	183b      	adds	r3, r7, r0
 801fe40:	49bd      	ldr	r1, [pc, #756]	@ (8020138 <USB_DeactivateEndpoint+0x370>)
 801fe42:	400a      	ands	r2, r1
 801fe44:	801a      	strh	r2, [r3, #0]
 801fe46:	687a      	ldr	r2, [r7, #4]
 801fe48:	683b      	ldr	r3, [r7, #0]
 801fe4a:	781b      	ldrb	r3, [r3, #0]
 801fe4c:	009b      	lsls	r3, r3, #2
 801fe4e:	18d3      	adds	r3, r2, r3
 801fe50:	183a      	adds	r2, r7, r0
 801fe52:	8812      	ldrh	r2, [r2, #0]
 801fe54:	49b9      	ldr	r1, [pc, #740]	@ (802013c <USB_DeactivateEndpoint+0x374>)
 801fe56:	430a      	orrs	r2, r1
 801fe58:	b292      	uxth	r2, r2
 801fe5a:	801a      	strh	r2, [r3, #0]
 801fe5c:	e163      	b.n	8020126 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fe5e:	687a      	ldr	r2, [r7, #4]
 801fe60:	683b      	ldr	r3, [r7, #0]
 801fe62:	781b      	ldrb	r3, [r3, #0]
 801fe64:	009b      	lsls	r3, r3, #2
 801fe66:	18d2      	adds	r2, r2, r3
 801fe68:	2112      	movs	r1, #18
 801fe6a:	187b      	adds	r3, r7, r1
 801fe6c:	8812      	ldrh	r2, [r2, #0]
 801fe6e:	801a      	strh	r2, [r3, #0]
 801fe70:	187b      	adds	r3, r7, r1
 801fe72:	881a      	ldrh	r2, [r3, #0]
 801fe74:	2380      	movs	r3, #128	@ 0x80
 801fe76:	01db      	lsls	r3, r3, #7
 801fe78:	4013      	ands	r3, r2
 801fe7a:	d016      	beq.n	801feaa <USB_DeactivateEndpoint+0xe2>
 801fe7c:	687a      	ldr	r2, [r7, #4]
 801fe7e:	683b      	ldr	r3, [r7, #0]
 801fe80:	781b      	ldrb	r3, [r3, #0]
 801fe82:	009b      	lsls	r3, r3, #2
 801fe84:	18d3      	adds	r3, r2, r3
 801fe86:	881b      	ldrh	r3, [r3, #0]
 801fe88:	b29a      	uxth	r2, r3
 801fe8a:	2010      	movs	r0, #16
 801fe8c:	183b      	adds	r3, r7, r0
 801fe8e:	49a8      	ldr	r1, [pc, #672]	@ (8020130 <USB_DeactivateEndpoint+0x368>)
 801fe90:	400a      	ands	r2, r1
 801fe92:	801a      	strh	r2, [r3, #0]
 801fe94:	687a      	ldr	r2, [r7, #4]
 801fe96:	683b      	ldr	r3, [r7, #0]
 801fe98:	781b      	ldrb	r3, [r3, #0]
 801fe9a:	009b      	lsls	r3, r3, #2
 801fe9c:	18d3      	adds	r3, r2, r3
 801fe9e:	183a      	adds	r2, r7, r0
 801fea0:	8812      	ldrh	r2, [r2, #0]
 801fea2:	49a7      	ldr	r1, [pc, #668]	@ (8020140 <USB_DeactivateEndpoint+0x378>)
 801fea4:	430a      	orrs	r2, r1
 801fea6:	b292      	uxth	r2, r2
 801fea8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801feaa:	687a      	ldr	r2, [r7, #4]
 801feac:	683b      	ldr	r3, [r7, #0]
 801feae:	781b      	ldrb	r3, [r3, #0]
 801feb0:	009b      	lsls	r3, r3, #2
 801feb2:	18d3      	adds	r3, r2, r3
 801feb4:	881b      	ldrh	r3, [r3, #0]
 801feb6:	b29a      	uxth	r2, r3
 801feb8:	200e      	movs	r0, #14
 801feba:	183b      	adds	r3, r7, r0
 801febc:	49a1      	ldr	r1, [pc, #644]	@ (8020144 <USB_DeactivateEndpoint+0x37c>)
 801febe:	400a      	ands	r2, r1
 801fec0:	801a      	strh	r2, [r3, #0]
 801fec2:	687a      	ldr	r2, [r7, #4]
 801fec4:	683b      	ldr	r3, [r7, #0]
 801fec6:	781b      	ldrb	r3, [r3, #0]
 801fec8:	009b      	lsls	r3, r3, #2
 801feca:	18d3      	adds	r3, r2, r3
 801fecc:	183a      	adds	r2, r7, r0
 801fece:	8812      	ldrh	r2, [r2, #0]
 801fed0:	499a      	ldr	r1, [pc, #616]	@ (802013c <USB_DeactivateEndpoint+0x374>)
 801fed2:	430a      	orrs	r2, r1
 801fed4:	b292      	uxth	r2, r2
 801fed6:	801a      	strh	r2, [r3, #0]
 801fed8:	e125      	b.n	8020126 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801feda:	683b      	ldr	r3, [r7, #0]
 801fedc:	785b      	ldrb	r3, [r3, #1]
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d000      	beq.n	801fee4 <USB_DeactivateEndpoint+0x11c>
 801fee2:	e090      	b.n	8020006 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fee4:	687a      	ldr	r2, [r7, #4]
 801fee6:	683b      	ldr	r3, [r7, #0]
 801fee8:	781b      	ldrb	r3, [r3, #0]
 801feea:	009b      	lsls	r3, r3, #2
 801feec:	18d2      	adds	r2, r2, r3
 801feee:	2120      	movs	r1, #32
 801fef0:	187b      	adds	r3, r7, r1
 801fef2:	8812      	ldrh	r2, [r2, #0]
 801fef4:	801a      	strh	r2, [r3, #0]
 801fef6:	187b      	adds	r3, r7, r1
 801fef8:	881a      	ldrh	r2, [r3, #0]
 801fefa:	2380      	movs	r3, #128	@ 0x80
 801fefc:	01db      	lsls	r3, r3, #7
 801fefe:	4013      	ands	r3, r2
 801ff00:	d016      	beq.n	801ff30 <USB_DeactivateEndpoint+0x168>
 801ff02:	687a      	ldr	r2, [r7, #4]
 801ff04:	683b      	ldr	r3, [r7, #0]
 801ff06:	781b      	ldrb	r3, [r3, #0]
 801ff08:	009b      	lsls	r3, r3, #2
 801ff0a:	18d3      	adds	r3, r2, r3
 801ff0c:	881b      	ldrh	r3, [r3, #0]
 801ff0e:	b29a      	uxth	r2, r3
 801ff10:	201e      	movs	r0, #30
 801ff12:	183b      	adds	r3, r7, r0
 801ff14:	4986      	ldr	r1, [pc, #536]	@ (8020130 <USB_DeactivateEndpoint+0x368>)
 801ff16:	400a      	ands	r2, r1
 801ff18:	801a      	strh	r2, [r3, #0]
 801ff1a:	687a      	ldr	r2, [r7, #4]
 801ff1c:	683b      	ldr	r3, [r7, #0]
 801ff1e:	781b      	ldrb	r3, [r3, #0]
 801ff20:	009b      	lsls	r3, r3, #2
 801ff22:	18d3      	adds	r3, r2, r3
 801ff24:	183a      	adds	r2, r7, r0
 801ff26:	8812      	ldrh	r2, [r2, #0]
 801ff28:	4985      	ldr	r1, [pc, #532]	@ (8020140 <USB_DeactivateEndpoint+0x378>)
 801ff2a:	430a      	orrs	r2, r1
 801ff2c:	b292      	uxth	r2, r2
 801ff2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ff30:	687a      	ldr	r2, [r7, #4]
 801ff32:	683b      	ldr	r3, [r7, #0]
 801ff34:	781b      	ldrb	r3, [r3, #0]
 801ff36:	009b      	lsls	r3, r3, #2
 801ff38:	18d2      	adds	r2, r2, r3
 801ff3a:	211c      	movs	r1, #28
 801ff3c:	187b      	adds	r3, r7, r1
 801ff3e:	8812      	ldrh	r2, [r2, #0]
 801ff40:	801a      	strh	r2, [r3, #0]
 801ff42:	187b      	adds	r3, r7, r1
 801ff44:	881b      	ldrh	r3, [r3, #0]
 801ff46:	2240      	movs	r2, #64	@ 0x40
 801ff48:	4013      	ands	r3, r2
 801ff4a:	d016      	beq.n	801ff7a <USB_DeactivateEndpoint+0x1b2>
 801ff4c:	687a      	ldr	r2, [r7, #4]
 801ff4e:	683b      	ldr	r3, [r7, #0]
 801ff50:	781b      	ldrb	r3, [r3, #0]
 801ff52:	009b      	lsls	r3, r3, #2
 801ff54:	18d3      	adds	r3, r2, r3
 801ff56:	881b      	ldrh	r3, [r3, #0]
 801ff58:	b29a      	uxth	r2, r3
 801ff5a:	201a      	movs	r0, #26
 801ff5c:	183b      	adds	r3, r7, r0
 801ff5e:	4974      	ldr	r1, [pc, #464]	@ (8020130 <USB_DeactivateEndpoint+0x368>)
 801ff60:	400a      	ands	r2, r1
 801ff62:	801a      	strh	r2, [r3, #0]
 801ff64:	687a      	ldr	r2, [r7, #4]
 801ff66:	683b      	ldr	r3, [r7, #0]
 801ff68:	781b      	ldrb	r3, [r3, #0]
 801ff6a:	009b      	lsls	r3, r3, #2
 801ff6c:	18d3      	adds	r3, r2, r3
 801ff6e:	183a      	adds	r2, r7, r0
 801ff70:	8812      	ldrh	r2, [r2, #0]
 801ff72:	4970      	ldr	r1, [pc, #448]	@ (8020134 <USB_DeactivateEndpoint+0x36c>)
 801ff74:	430a      	orrs	r2, r1
 801ff76:	b292      	uxth	r2, r2
 801ff78:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801ff7a:	687a      	ldr	r2, [r7, #4]
 801ff7c:	683b      	ldr	r3, [r7, #0]
 801ff7e:	781b      	ldrb	r3, [r3, #0]
 801ff80:	009b      	lsls	r3, r3, #2
 801ff82:	18d3      	adds	r3, r2, r3
 801ff84:	881b      	ldrh	r3, [r3, #0]
 801ff86:	b29a      	uxth	r2, r3
 801ff88:	2018      	movs	r0, #24
 801ff8a:	183b      	adds	r3, r7, r0
 801ff8c:	4968      	ldr	r1, [pc, #416]	@ (8020130 <USB_DeactivateEndpoint+0x368>)
 801ff8e:	400a      	ands	r2, r1
 801ff90:	801a      	strh	r2, [r3, #0]
 801ff92:	687a      	ldr	r2, [r7, #4]
 801ff94:	683b      	ldr	r3, [r7, #0]
 801ff96:	781b      	ldrb	r3, [r3, #0]
 801ff98:	009b      	lsls	r3, r3, #2
 801ff9a:	18d3      	adds	r3, r2, r3
 801ff9c:	183a      	adds	r2, r7, r0
 801ff9e:	8812      	ldrh	r2, [r2, #0]
 801ffa0:	4964      	ldr	r1, [pc, #400]	@ (8020134 <USB_DeactivateEndpoint+0x36c>)
 801ffa2:	430a      	orrs	r2, r1
 801ffa4:	b292      	uxth	r2, r2
 801ffa6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ffa8:	687a      	ldr	r2, [r7, #4]
 801ffaa:	683b      	ldr	r3, [r7, #0]
 801ffac:	781b      	ldrb	r3, [r3, #0]
 801ffae:	009b      	lsls	r3, r3, #2
 801ffb0:	18d3      	adds	r3, r2, r3
 801ffb2:	881b      	ldrh	r3, [r3, #0]
 801ffb4:	b29a      	uxth	r2, r3
 801ffb6:	2016      	movs	r0, #22
 801ffb8:	183b      	adds	r3, r7, r0
 801ffba:	4962      	ldr	r1, [pc, #392]	@ (8020144 <USB_DeactivateEndpoint+0x37c>)
 801ffbc:	400a      	ands	r2, r1
 801ffbe:	801a      	strh	r2, [r3, #0]
 801ffc0:	687a      	ldr	r2, [r7, #4]
 801ffc2:	683b      	ldr	r3, [r7, #0]
 801ffc4:	781b      	ldrb	r3, [r3, #0]
 801ffc6:	009b      	lsls	r3, r3, #2
 801ffc8:	18d3      	adds	r3, r2, r3
 801ffca:	183a      	adds	r2, r7, r0
 801ffcc:	8812      	ldrh	r2, [r2, #0]
 801ffce:	495b      	ldr	r1, [pc, #364]	@ (802013c <USB_DeactivateEndpoint+0x374>)
 801ffd0:	430a      	orrs	r2, r1
 801ffd2:	b292      	uxth	r2, r2
 801ffd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ffd6:	687a      	ldr	r2, [r7, #4]
 801ffd8:	683b      	ldr	r3, [r7, #0]
 801ffda:	781b      	ldrb	r3, [r3, #0]
 801ffdc:	009b      	lsls	r3, r3, #2
 801ffde:	18d3      	adds	r3, r2, r3
 801ffe0:	881b      	ldrh	r3, [r3, #0]
 801ffe2:	b29a      	uxth	r2, r3
 801ffe4:	2014      	movs	r0, #20
 801ffe6:	183b      	adds	r3, r7, r0
 801ffe8:	4953      	ldr	r1, [pc, #332]	@ (8020138 <USB_DeactivateEndpoint+0x370>)
 801ffea:	400a      	ands	r2, r1
 801ffec:	801a      	strh	r2, [r3, #0]
 801ffee:	687a      	ldr	r2, [r7, #4]
 801fff0:	683b      	ldr	r3, [r7, #0]
 801fff2:	781b      	ldrb	r3, [r3, #0]
 801fff4:	009b      	lsls	r3, r3, #2
 801fff6:	18d3      	adds	r3, r2, r3
 801fff8:	183a      	adds	r2, r7, r0
 801fffa:	8812      	ldrh	r2, [r2, #0]
 801fffc:	494f      	ldr	r1, [pc, #316]	@ (802013c <USB_DeactivateEndpoint+0x374>)
 801fffe:	430a      	orrs	r2, r1
 8020000:	b292      	uxth	r2, r2
 8020002:	801a      	strh	r2, [r3, #0]
 8020004:	e08f      	b.n	8020126 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8020006:	687a      	ldr	r2, [r7, #4]
 8020008:	683b      	ldr	r3, [r7, #0]
 802000a:	781b      	ldrb	r3, [r3, #0]
 802000c:	009b      	lsls	r3, r3, #2
 802000e:	18d2      	adds	r2, r2, r3
 8020010:	212e      	movs	r1, #46	@ 0x2e
 8020012:	187b      	adds	r3, r7, r1
 8020014:	8812      	ldrh	r2, [r2, #0]
 8020016:	801a      	strh	r2, [r3, #0]
 8020018:	187b      	adds	r3, r7, r1
 802001a:	881a      	ldrh	r2, [r3, #0]
 802001c:	2380      	movs	r3, #128	@ 0x80
 802001e:	01db      	lsls	r3, r3, #7
 8020020:	4013      	ands	r3, r2
 8020022:	d016      	beq.n	8020052 <USB_DeactivateEndpoint+0x28a>
 8020024:	687a      	ldr	r2, [r7, #4]
 8020026:	683b      	ldr	r3, [r7, #0]
 8020028:	781b      	ldrb	r3, [r3, #0]
 802002a:	009b      	lsls	r3, r3, #2
 802002c:	18d3      	adds	r3, r2, r3
 802002e:	881b      	ldrh	r3, [r3, #0]
 8020030:	b29a      	uxth	r2, r3
 8020032:	202c      	movs	r0, #44	@ 0x2c
 8020034:	183b      	adds	r3, r7, r0
 8020036:	493e      	ldr	r1, [pc, #248]	@ (8020130 <USB_DeactivateEndpoint+0x368>)
 8020038:	400a      	ands	r2, r1
 802003a:	801a      	strh	r2, [r3, #0]
 802003c:	687a      	ldr	r2, [r7, #4]
 802003e:	683b      	ldr	r3, [r7, #0]
 8020040:	781b      	ldrb	r3, [r3, #0]
 8020042:	009b      	lsls	r3, r3, #2
 8020044:	18d3      	adds	r3, r2, r3
 8020046:	183a      	adds	r2, r7, r0
 8020048:	8812      	ldrh	r2, [r2, #0]
 802004a:	493d      	ldr	r1, [pc, #244]	@ (8020140 <USB_DeactivateEndpoint+0x378>)
 802004c:	430a      	orrs	r2, r1
 802004e:	b292      	uxth	r2, r2
 8020050:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8020052:	687a      	ldr	r2, [r7, #4]
 8020054:	683b      	ldr	r3, [r7, #0]
 8020056:	781b      	ldrb	r3, [r3, #0]
 8020058:	009b      	lsls	r3, r3, #2
 802005a:	18d2      	adds	r2, r2, r3
 802005c:	212a      	movs	r1, #42	@ 0x2a
 802005e:	187b      	adds	r3, r7, r1
 8020060:	8812      	ldrh	r2, [r2, #0]
 8020062:	801a      	strh	r2, [r3, #0]
 8020064:	187b      	adds	r3, r7, r1
 8020066:	881b      	ldrh	r3, [r3, #0]
 8020068:	2240      	movs	r2, #64	@ 0x40
 802006a:	4013      	ands	r3, r2
 802006c:	d016      	beq.n	802009c <USB_DeactivateEndpoint+0x2d4>
 802006e:	687a      	ldr	r2, [r7, #4]
 8020070:	683b      	ldr	r3, [r7, #0]
 8020072:	781b      	ldrb	r3, [r3, #0]
 8020074:	009b      	lsls	r3, r3, #2
 8020076:	18d3      	adds	r3, r2, r3
 8020078:	881b      	ldrh	r3, [r3, #0]
 802007a:	b29a      	uxth	r2, r3
 802007c:	2028      	movs	r0, #40	@ 0x28
 802007e:	183b      	adds	r3, r7, r0
 8020080:	492b      	ldr	r1, [pc, #172]	@ (8020130 <USB_DeactivateEndpoint+0x368>)
 8020082:	400a      	ands	r2, r1
 8020084:	801a      	strh	r2, [r3, #0]
 8020086:	687a      	ldr	r2, [r7, #4]
 8020088:	683b      	ldr	r3, [r7, #0]
 802008a:	781b      	ldrb	r3, [r3, #0]
 802008c:	009b      	lsls	r3, r3, #2
 802008e:	18d3      	adds	r3, r2, r3
 8020090:	183a      	adds	r2, r7, r0
 8020092:	8812      	ldrh	r2, [r2, #0]
 8020094:	4927      	ldr	r1, [pc, #156]	@ (8020134 <USB_DeactivateEndpoint+0x36c>)
 8020096:	430a      	orrs	r2, r1
 8020098:	b292      	uxth	r2, r2
 802009a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 802009c:	687a      	ldr	r2, [r7, #4]
 802009e:	683b      	ldr	r3, [r7, #0]
 80200a0:	781b      	ldrb	r3, [r3, #0]
 80200a2:	009b      	lsls	r3, r3, #2
 80200a4:	18d3      	adds	r3, r2, r3
 80200a6:	881b      	ldrh	r3, [r3, #0]
 80200a8:	b29a      	uxth	r2, r3
 80200aa:	2026      	movs	r0, #38	@ 0x26
 80200ac:	183b      	adds	r3, r7, r0
 80200ae:	4920      	ldr	r1, [pc, #128]	@ (8020130 <USB_DeactivateEndpoint+0x368>)
 80200b0:	400a      	ands	r2, r1
 80200b2:	801a      	strh	r2, [r3, #0]
 80200b4:	687a      	ldr	r2, [r7, #4]
 80200b6:	683b      	ldr	r3, [r7, #0]
 80200b8:	781b      	ldrb	r3, [r3, #0]
 80200ba:	009b      	lsls	r3, r3, #2
 80200bc:	18d3      	adds	r3, r2, r3
 80200be:	183a      	adds	r2, r7, r0
 80200c0:	8812      	ldrh	r2, [r2, #0]
 80200c2:	491f      	ldr	r1, [pc, #124]	@ (8020140 <USB_DeactivateEndpoint+0x378>)
 80200c4:	430a      	orrs	r2, r1
 80200c6:	b292      	uxth	r2, r2
 80200c8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80200ca:	687a      	ldr	r2, [r7, #4]
 80200cc:	683b      	ldr	r3, [r7, #0]
 80200ce:	781b      	ldrb	r3, [r3, #0]
 80200d0:	009b      	lsls	r3, r3, #2
 80200d2:	18d3      	adds	r3, r2, r3
 80200d4:	881b      	ldrh	r3, [r3, #0]
 80200d6:	b29a      	uxth	r2, r3
 80200d8:	2024      	movs	r0, #36	@ 0x24
 80200da:	183b      	adds	r3, r7, r0
 80200dc:	4916      	ldr	r1, [pc, #88]	@ (8020138 <USB_DeactivateEndpoint+0x370>)
 80200de:	400a      	ands	r2, r1
 80200e0:	801a      	strh	r2, [r3, #0]
 80200e2:	687a      	ldr	r2, [r7, #4]
 80200e4:	683b      	ldr	r3, [r7, #0]
 80200e6:	781b      	ldrb	r3, [r3, #0]
 80200e8:	009b      	lsls	r3, r3, #2
 80200ea:	18d3      	adds	r3, r2, r3
 80200ec:	183a      	adds	r2, r7, r0
 80200ee:	8812      	ldrh	r2, [r2, #0]
 80200f0:	4912      	ldr	r1, [pc, #72]	@ (802013c <USB_DeactivateEndpoint+0x374>)
 80200f2:	430a      	orrs	r2, r1
 80200f4:	b292      	uxth	r2, r2
 80200f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80200f8:	687a      	ldr	r2, [r7, #4]
 80200fa:	683b      	ldr	r3, [r7, #0]
 80200fc:	781b      	ldrb	r3, [r3, #0]
 80200fe:	009b      	lsls	r3, r3, #2
 8020100:	18d3      	adds	r3, r2, r3
 8020102:	881b      	ldrh	r3, [r3, #0]
 8020104:	b29a      	uxth	r2, r3
 8020106:	2022      	movs	r0, #34	@ 0x22
 8020108:	183b      	adds	r3, r7, r0
 802010a:	490e      	ldr	r1, [pc, #56]	@ (8020144 <USB_DeactivateEndpoint+0x37c>)
 802010c:	400a      	ands	r2, r1
 802010e:	801a      	strh	r2, [r3, #0]
 8020110:	687a      	ldr	r2, [r7, #4]
 8020112:	683b      	ldr	r3, [r7, #0]
 8020114:	781b      	ldrb	r3, [r3, #0]
 8020116:	009b      	lsls	r3, r3, #2
 8020118:	18d3      	adds	r3, r2, r3
 802011a:	183a      	adds	r2, r7, r0
 802011c:	8812      	ldrh	r2, [r2, #0]
 802011e:	4907      	ldr	r1, [pc, #28]	@ (802013c <USB_DeactivateEndpoint+0x374>)
 8020120:	430a      	orrs	r2, r1
 8020122:	b292      	uxth	r2, r2
 8020124:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8020126:	2300      	movs	r3, #0
}
 8020128:	0018      	movs	r0, r3
 802012a:	46bd      	mov	sp, r7
 802012c:	b00c      	add	sp, #48	@ 0x30
 802012e:	bd80      	pop	{r7, pc}
 8020130:	ffff8f8f 	.word	0xffff8f8f
 8020134:	ffff80c0 	.word	0xffff80c0
 8020138:	ffff8fbf 	.word	0xffff8fbf
 802013c:	ffff8080 	.word	0xffff8080
 8020140:	ffffc080 	.word	0xffffc080
 8020144:	ffffbf8f 	.word	0xffffbf8f

08020148 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8020148:	b590      	push	{r4, r7, lr}
 802014a:	b0c3      	sub	sp, #268	@ 0x10c
 802014c:	af00      	add	r7, sp, #0
 802014e:	6078      	str	r0, [r7, #4]
 8020150:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8020152:	683b      	ldr	r3, [r7, #0]
 8020154:	785b      	ldrb	r3, [r3, #1]
 8020156:	2b01      	cmp	r3, #1
 8020158:	d001      	beq.n	802015e <USB_EPStartXfer+0x16>
 802015a:	f000 fd2d 	bl	8020bb8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 802015e:	683b      	ldr	r3, [r7, #0]
 8020160:	699a      	ldr	r2, [r3, #24]
 8020162:	683b      	ldr	r3, [r7, #0]
 8020164:	691b      	ldr	r3, [r3, #16]
 8020166:	429a      	cmp	r2, r3
 8020168:	d905      	bls.n	8020176 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 802016a:	683b      	ldr	r3, [r7, #0]
 802016c:	691b      	ldr	r3, [r3, #16]
 802016e:	1d7a      	adds	r2, r7, #5
 8020170:	32ff      	adds	r2, #255	@ 0xff
 8020172:	6013      	str	r3, [r2, #0]
 8020174:	e004      	b.n	8020180 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8020176:	683b      	ldr	r3, [r7, #0]
 8020178:	699b      	ldr	r3, [r3, #24]
 802017a:	1d7a      	adds	r2, r7, #5
 802017c:	32ff      	adds	r2, #255	@ 0xff
 802017e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8020180:	683b      	ldr	r3, [r7, #0]
 8020182:	7b1b      	ldrb	r3, [r3, #12]
 8020184:	2b00      	cmp	r3, #0
 8020186:	d125      	bne.n	80201d4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8020188:	683b      	ldr	r3, [r7, #0]
 802018a:	6959      	ldr	r1, [r3, #20]
 802018c:	683b      	ldr	r3, [r7, #0]
 802018e:	88da      	ldrh	r2, [r3, #6]
 8020190:	1d7b      	adds	r3, r7, #5
 8020192:	33ff      	adds	r3, #255	@ 0xff
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	b29b      	uxth	r3, r3
 8020198:	6878      	ldr	r0, [r7, #4]
 802019a:	f001 fa47 	bl	802162c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	613b      	str	r3, [r7, #16]
 80201a2:	687b      	ldr	r3, [r7, #4]
 80201a4:	2250      	movs	r2, #80	@ 0x50
 80201a6:	5a9b      	ldrh	r3, [r3, r2]
 80201a8:	b29b      	uxth	r3, r3
 80201aa:	001a      	movs	r2, r3
 80201ac:	693b      	ldr	r3, [r7, #16]
 80201ae:	189b      	adds	r3, r3, r2
 80201b0:	613b      	str	r3, [r7, #16]
 80201b2:	683b      	ldr	r3, [r7, #0]
 80201b4:	781b      	ldrb	r3, [r3, #0]
 80201b6:	00da      	lsls	r2, r3, #3
 80201b8:	693b      	ldr	r3, [r7, #16]
 80201ba:	18d3      	adds	r3, r2, r3
 80201bc:	4ad7      	ldr	r2, [pc, #860]	@ (802051c <USB_EPStartXfer+0x3d4>)
 80201be:	4694      	mov	ip, r2
 80201c0:	4463      	add	r3, ip
 80201c2:	60fb      	str	r3, [r7, #12]
 80201c4:	1d7b      	adds	r3, r7, #5
 80201c6:	33ff      	adds	r3, #255	@ 0xff
 80201c8:	681b      	ldr	r3, [r3, #0]
 80201ca:	b29a      	uxth	r2, r3
 80201cc:	68fb      	ldr	r3, [r7, #12]
 80201ce:	801a      	strh	r2, [r3, #0]
 80201d0:	f000 fccd 	bl	8020b6e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80201d4:	683b      	ldr	r3, [r7, #0]
 80201d6:	78db      	ldrb	r3, [r3, #3]
 80201d8:	2b02      	cmp	r3, #2
 80201da:	d000      	beq.n	80201de <USB_EPStartXfer+0x96>
 80201dc:	e362      	b.n	80208a4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80201de:	683b      	ldr	r3, [r7, #0]
 80201e0:	6a1a      	ldr	r2, [r3, #32]
 80201e2:	683b      	ldr	r3, [r7, #0]
 80201e4:	691b      	ldr	r3, [r3, #16]
 80201e6:	429a      	cmp	r2, r3
 80201e8:	d800      	bhi.n	80201ec <USB_EPStartXfer+0xa4>
 80201ea:	e309      	b.n	8020800 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80201ec:	687a      	ldr	r2, [r7, #4]
 80201ee:	683b      	ldr	r3, [r7, #0]
 80201f0:	781b      	ldrb	r3, [r3, #0]
 80201f2:	009b      	lsls	r3, r3, #2
 80201f4:	18d3      	adds	r3, r2, r3
 80201f6:	881b      	ldrh	r3, [r3, #0]
 80201f8:	b29a      	uxth	r2, r3
 80201fa:	2056      	movs	r0, #86	@ 0x56
 80201fc:	183b      	adds	r3, r7, r0
 80201fe:	49c8      	ldr	r1, [pc, #800]	@ (8020520 <USB_EPStartXfer+0x3d8>)
 8020200:	400a      	ands	r2, r1
 8020202:	801a      	strh	r2, [r3, #0]
 8020204:	687a      	ldr	r2, [r7, #4]
 8020206:	683b      	ldr	r3, [r7, #0]
 8020208:	781b      	ldrb	r3, [r3, #0]
 802020a:	009b      	lsls	r3, r3, #2
 802020c:	18d3      	adds	r3, r2, r3
 802020e:	183a      	adds	r2, r7, r0
 8020210:	8812      	ldrh	r2, [r2, #0]
 8020212:	49c4      	ldr	r1, [pc, #784]	@ (8020524 <USB_EPStartXfer+0x3dc>)
 8020214:	430a      	orrs	r2, r1
 8020216:	b292      	uxth	r2, r2
 8020218:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 802021a:	683b      	ldr	r3, [r7, #0]
 802021c:	6a1a      	ldr	r2, [r3, #32]
 802021e:	1d7b      	adds	r3, r7, #5
 8020220:	33ff      	adds	r3, #255	@ 0xff
 8020222:	681b      	ldr	r3, [r3, #0]
 8020224:	1ad2      	subs	r2, r2, r3
 8020226:	683b      	ldr	r3, [r7, #0]
 8020228:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 802022a:	687a      	ldr	r2, [r7, #4]
 802022c:	683b      	ldr	r3, [r7, #0]
 802022e:	781b      	ldrb	r3, [r3, #0]
 8020230:	009b      	lsls	r3, r3, #2
 8020232:	18d3      	adds	r3, r2, r3
 8020234:	881b      	ldrh	r3, [r3, #0]
 8020236:	b29b      	uxth	r3, r3
 8020238:	001a      	movs	r2, r3
 802023a:	2340      	movs	r3, #64	@ 0x40
 802023c:	4013      	ands	r3, r2
 802023e:	d100      	bne.n	8020242 <USB_EPStartXfer+0xfa>
 8020240:	e176      	b.n	8020530 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	633b      	str	r3, [r7, #48]	@ 0x30
 8020246:	683b      	ldr	r3, [r7, #0]
 8020248:	785b      	ldrb	r3, [r3, #1]
 802024a:	2b00      	cmp	r3, #0
 802024c:	d000      	beq.n	8020250 <USB_EPStartXfer+0x108>
 802024e:	e074      	b.n	802033a <USB_EPStartXfer+0x1f2>
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	62bb      	str	r3, [r7, #40]	@ 0x28
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	2250      	movs	r2, #80	@ 0x50
 8020258:	5a9b      	ldrh	r3, [r3, r2]
 802025a:	b29b      	uxth	r3, r3
 802025c:	001a      	movs	r2, r3
 802025e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020260:	189b      	adds	r3, r3, r2
 8020262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8020264:	683b      	ldr	r3, [r7, #0]
 8020266:	781b      	ldrb	r3, [r3, #0]
 8020268:	00da      	lsls	r2, r3, #3
 802026a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802026c:	18d3      	adds	r3, r2, r3
 802026e:	4aae      	ldr	r2, [pc, #696]	@ (8020528 <USB_EPStartXfer+0x3e0>)
 8020270:	4694      	mov	ip, r2
 8020272:	4463      	add	r3, ip
 8020274:	627b      	str	r3, [r7, #36]	@ 0x24
 8020276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020278:	881b      	ldrh	r3, [r3, #0]
 802027a:	b29b      	uxth	r3, r3
 802027c:	059b      	lsls	r3, r3, #22
 802027e:	0d9b      	lsrs	r3, r3, #22
 8020280:	b29a      	uxth	r2, r3
 8020282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020284:	801a      	strh	r2, [r3, #0]
 8020286:	1d7b      	adds	r3, r7, #5
 8020288:	33ff      	adds	r3, #255	@ 0xff
 802028a:	681b      	ldr	r3, [r3, #0]
 802028c:	2b3e      	cmp	r3, #62	@ 0x3e
 802028e:	d924      	bls.n	80202da <USB_EPStartXfer+0x192>
 8020290:	1d7b      	adds	r3, r7, #5
 8020292:	33ff      	adds	r3, #255	@ 0xff
 8020294:	681b      	ldr	r3, [r3, #0]
 8020296:	095b      	lsrs	r3, r3, #5
 8020298:	1c7a      	adds	r2, r7, #1
 802029a:	32ff      	adds	r2, #255	@ 0xff
 802029c:	6013      	str	r3, [r2, #0]
 802029e:	1d7b      	adds	r3, r7, #5
 80202a0:	33ff      	adds	r3, #255	@ 0xff
 80202a2:	681b      	ldr	r3, [r3, #0]
 80202a4:	221f      	movs	r2, #31
 80202a6:	4013      	ands	r3, r2
 80202a8:	d106      	bne.n	80202b8 <USB_EPStartXfer+0x170>
 80202aa:	1c7b      	adds	r3, r7, #1
 80202ac:	33ff      	adds	r3, #255	@ 0xff
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	3b01      	subs	r3, #1
 80202b2:	1c7a      	adds	r2, r7, #1
 80202b4:	32ff      	adds	r2, #255	@ 0xff
 80202b6:	6013      	str	r3, [r2, #0]
 80202b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80202ba:	881b      	ldrh	r3, [r3, #0]
 80202bc:	b29a      	uxth	r2, r3
 80202be:	1c7b      	adds	r3, r7, #1
 80202c0:	33ff      	adds	r3, #255	@ 0xff
 80202c2:	681b      	ldr	r3, [r3, #0]
 80202c4:	b29b      	uxth	r3, r3
 80202c6:	029b      	lsls	r3, r3, #10
 80202c8:	b29b      	uxth	r3, r3
 80202ca:	4313      	orrs	r3, r2
 80202cc:	b29b      	uxth	r3, r3
 80202ce:	4a97      	ldr	r2, [pc, #604]	@ (802052c <USB_EPStartXfer+0x3e4>)
 80202d0:	4313      	orrs	r3, r2
 80202d2:	b29a      	uxth	r2, r3
 80202d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80202d6:	801a      	strh	r2, [r3, #0]
 80202d8:	e04a      	b.n	8020370 <USB_EPStartXfer+0x228>
 80202da:	1d7b      	adds	r3, r7, #5
 80202dc:	33ff      	adds	r3, #255	@ 0xff
 80202de:	681b      	ldr	r3, [r3, #0]
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	d108      	bne.n	80202f6 <USB_EPStartXfer+0x1ae>
 80202e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80202e6:	881b      	ldrh	r3, [r3, #0]
 80202e8:	b29b      	uxth	r3, r3
 80202ea:	4a90      	ldr	r2, [pc, #576]	@ (802052c <USB_EPStartXfer+0x3e4>)
 80202ec:	4313      	orrs	r3, r2
 80202ee:	b29a      	uxth	r2, r3
 80202f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80202f2:	801a      	strh	r2, [r3, #0]
 80202f4:	e03c      	b.n	8020370 <USB_EPStartXfer+0x228>
 80202f6:	1d7b      	adds	r3, r7, #5
 80202f8:	33ff      	adds	r3, #255	@ 0xff
 80202fa:	681b      	ldr	r3, [r3, #0]
 80202fc:	085b      	lsrs	r3, r3, #1
 80202fe:	1c7a      	adds	r2, r7, #1
 8020300:	32ff      	adds	r2, #255	@ 0xff
 8020302:	6013      	str	r3, [r2, #0]
 8020304:	1d7b      	adds	r3, r7, #5
 8020306:	33ff      	adds	r3, #255	@ 0xff
 8020308:	681b      	ldr	r3, [r3, #0]
 802030a:	2201      	movs	r2, #1
 802030c:	4013      	ands	r3, r2
 802030e:	d006      	beq.n	802031e <USB_EPStartXfer+0x1d6>
 8020310:	1c7b      	adds	r3, r7, #1
 8020312:	33ff      	adds	r3, #255	@ 0xff
 8020314:	681b      	ldr	r3, [r3, #0]
 8020316:	3301      	adds	r3, #1
 8020318:	1c7a      	adds	r2, r7, #1
 802031a:	32ff      	adds	r2, #255	@ 0xff
 802031c:	6013      	str	r3, [r2, #0]
 802031e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020320:	881b      	ldrh	r3, [r3, #0]
 8020322:	b29a      	uxth	r2, r3
 8020324:	1c7b      	adds	r3, r7, #1
 8020326:	33ff      	adds	r3, #255	@ 0xff
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	b29b      	uxth	r3, r3
 802032c:	029b      	lsls	r3, r3, #10
 802032e:	b29b      	uxth	r3, r3
 8020330:	4313      	orrs	r3, r2
 8020332:	b29a      	uxth	r2, r3
 8020334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020336:	801a      	strh	r2, [r3, #0]
 8020338:	e01a      	b.n	8020370 <USB_EPStartXfer+0x228>
 802033a:	683b      	ldr	r3, [r7, #0]
 802033c:	785b      	ldrb	r3, [r3, #1]
 802033e:	2b01      	cmp	r3, #1
 8020340:	d116      	bne.n	8020370 <USB_EPStartXfer+0x228>
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	2250      	movs	r2, #80	@ 0x50
 8020346:	5a9b      	ldrh	r3, [r3, r2]
 8020348:	b29b      	uxth	r3, r3
 802034a:	001a      	movs	r2, r3
 802034c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802034e:	189b      	adds	r3, r3, r2
 8020350:	633b      	str	r3, [r7, #48]	@ 0x30
 8020352:	683b      	ldr	r3, [r7, #0]
 8020354:	781b      	ldrb	r3, [r3, #0]
 8020356:	00da      	lsls	r2, r3, #3
 8020358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802035a:	18d3      	adds	r3, r2, r3
 802035c:	4a72      	ldr	r2, [pc, #456]	@ (8020528 <USB_EPStartXfer+0x3e0>)
 802035e:	4694      	mov	ip, r2
 8020360:	4463      	add	r3, ip
 8020362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020364:	1d7b      	adds	r3, r7, #5
 8020366:	33ff      	adds	r3, #255	@ 0xff
 8020368:	681b      	ldr	r3, [r3, #0]
 802036a:	b29a      	uxth	r2, r3
 802036c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802036e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8020370:	2076      	movs	r0, #118	@ 0x76
 8020372:	183b      	adds	r3, r7, r0
 8020374:	683a      	ldr	r2, [r7, #0]
 8020376:	8952      	ldrh	r2, [r2, #10]
 8020378:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802037a:	683b      	ldr	r3, [r7, #0]
 802037c:	6959      	ldr	r1, [r3, #20]
 802037e:	1d7b      	adds	r3, r7, #5
 8020380:	33ff      	adds	r3, #255	@ 0xff
 8020382:	681b      	ldr	r3, [r3, #0]
 8020384:	b29c      	uxth	r4, r3
 8020386:	183b      	adds	r3, r7, r0
 8020388:	881a      	ldrh	r2, [r3, #0]
 802038a:	6878      	ldr	r0, [r7, #4]
 802038c:	0023      	movs	r3, r4
 802038e:	f001 f94d 	bl	802162c <USB_WritePMA>
            ep->xfer_buff += len;
 8020392:	683b      	ldr	r3, [r7, #0]
 8020394:	695a      	ldr	r2, [r3, #20]
 8020396:	1d7b      	adds	r3, r7, #5
 8020398:	33ff      	adds	r3, #255	@ 0xff
 802039a:	681b      	ldr	r3, [r3, #0]
 802039c:	18d2      	adds	r2, r2, r3
 802039e:	683b      	ldr	r3, [r7, #0]
 80203a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80203a2:	683b      	ldr	r3, [r7, #0]
 80203a4:	6a1a      	ldr	r2, [r3, #32]
 80203a6:	683b      	ldr	r3, [r7, #0]
 80203a8:	691b      	ldr	r3, [r3, #16]
 80203aa:	429a      	cmp	r2, r3
 80203ac:	d908      	bls.n	80203c0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80203ae:	683b      	ldr	r3, [r7, #0]
 80203b0:	6a1a      	ldr	r2, [r3, #32]
 80203b2:	1d7b      	adds	r3, r7, #5
 80203b4:	33ff      	adds	r3, #255	@ 0xff
 80203b6:	681b      	ldr	r3, [r3, #0]
 80203b8:	1ad2      	subs	r2, r2, r3
 80203ba:	683b      	ldr	r3, [r7, #0]
 80203bc:	621a      	str	r2, [r3, #32]
 80203be:	e007      	b.n	80203d0 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80203c0:	683b      	ldr	r3, [r7, #0]
 80203c2:	6a1b      	ldr	r3, [r3, #32]
 80203c4:	1d7a      	adds	r2, r7, #5
 80203c6:	32ff      	adds	r2, #255	@ 0xff
 80203c8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80203ca:	683b      	ldr	r3, [r7, #0]
 80203cc:	2200      	movs	r2, #0
 80203ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80203d0:	683b      	ldr	r3, [r7, #0]
 80203d2:	785b      	ldrb	r3, [r3, #1]
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d000      	beq.n	80203da <USB_EPStartXfer+0x292>
 80203d8:	e070      	b.n	80204bc <USB_EPStartXfer+0x374>
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	61bb      	str	r3, [r7, #24]
 80203de:	687b      	ldr	r3, [r7, #4]
 80203e0:	2250      	movs	r2, #80	@ 0x50
 80203e2:	5a9b      	ldrh	r3, [r3, r2]
 80203e4:	b29b      	uxth	r3, r3
 80203e6:	001a      	movs	r2, r3
 80203e8:	69bb      	ldr	r3, [r7, #24]
 80203ea:	189b      	adds	r3, r3, r2
 80203ec:	61bb      	str	r3, [r7, #24]
 80203ee:	683b      	ldr	r3, [r7, #0]
 80203f0:	781b      	ldrb	r3, [r3, #0]
 80203f2:	00da      	lsls	r2, r3, #3
 80203f4:	69bb      	ldr	r3, [r7, #24]
 80203f6:	18d3      	adds	r3, r2, r3
 80203f8:	4a48      	ldr	r2, [pc, #288]	@ (802051c <USB_EPStartXfer+0x3d4>)
 80203fa:	4694      	mov	ip, r2
 80203fc:	4463      	add	r3, ip
 80203fe:	617b      	str	r3, [r7, #20]
 8020400:	697b      	ldr	r3, [r7, #20]
 8020402:	881b      	ldrh	r3, [r3, #0]
 8020404:	b29b      	uxth	r3, r3
 8020406:	059b      	lsls	r3, r3, #22
 8020408:	0d9b      	lsrs	r3, r3, #22
 802040a:	b29a      	uxth	r2, r3
 802040c:	697b      	ldr	r3, [r7, #20]
 802040e:	801a      	strh	r2, [r3, #0]
 8020410:	1d7b      	adds	r3, r7, #5
 8020412:	33ff      	adds	r3, #255	@ 0xff
 8020414:	681b      	ldr	r3, [r3, #0]
 8020416:	2b3e      	cmp	r3, #62	@ 0x3e
 8020418:	d922      	bls.n	8020460 <USB_EPStartXfer+0x318>
 802041a:	1d7b      	adds	r3, r7, #5
 802041c:	33ff      	adds	r3, #255	@ 0xff
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	095b      	lsrs	r3, r3, #5
 8020422:	21fc      	movs	r1, #252	@ 0xfc
 8020424:	187a      	adds	r2, r7, r1
 8020426:	6013      	str	r3, [r2, #0]
 8020428:	1d7b      	adds	r3, r7, #5
 802042a:	33ff      	adds	r3, #255	@ 0xff
 802042c:	681b      	ldr	r3, [r3, #0]
 802042e:	221f      	movs	r2, #31
 8020430:	4013      	ands	r3, r2
 8020432:	d104      	bne.n	802043e <USB_EPStartXfer+0x2f6>
 8020434:	187b      	adds	r3, r7, r1
 8020436:	681b      	ldr	r3, [r3, #0]
 8020438:	3b01      	subs	r3, #1
 802043a:	187a      	adds	r2, r7, r1
 802043c:	6013      	str	r3, [r2, #0]
 802043e:	697b      	ldr	r3, [r7, #20]
 8020440:	881b      	ldrh	r3, [r3, #0]
 8020442:	b29a      	uxth	r2, r3
 8020444:	23fc      	movs	r3, #252	@ 0xfc
 8020446:	18fb      	adds	r3, r7, r3
 8020448:	681b      	ldr	r3, [r3, #0]
 802044a:	b29b      	uxth	r3, r3
 802044c:	029b      	lsls	r3, r3, #10
 802044e:	b29b      	uxth	r3, r3
 8020450:	4313      	orrs	r3, r2
 8020452:	b29b      	uxth	r3, r3
 8020454:	4a35      	ldr	r2, [pc, #212]	@ (802052c <USB_EPStartXfer+0x3e4>)
 8020456:	4313      	orrs	r3, r2
 8020458:	b29a      	uxth	r2, r3
 802045a:	697b      	ldr	r3, [r7, #20]
 802045c:	801a      	strh	r2, [r3, #0]
 802045e:	e04a      	b.n	80204f6 <USB_EPStartXfer+0x3ae>
 8020460:	1d7b      	adds	r3, r7, #5
 8020462:	33ff      	adds	r3, #255	@ 0xff
 8020464:	681b      	ldr	r3, [r3, #0]
 8020466:	2b00      	cmp	r3, #0
 8020468:	d108      	bne.n	802047c <USB_EPStartXfer+0x334>
 802046a:	697b      	ldr	r3, [r7, #20]
 802046c:	881b      	ldrh	r3, [r3, #0]
 802046e:	b29b      	uxth	r3, r3
 8020470:	4a2e      	ldr	r2, [pc, #184]	@ (802052c <USB_EPStartXfer+0x3e4>)
 8020472:	4313      	orrs	r3, r2
 8020474:	b29a      	uxth	r2, r3
 8020476:	697b      	ldr	r3, [r7, #20]
 8020478:	801a      	strh	r2, [r3, #0]
 802047a:	e03c      	b.n	80204f6 <USB_EPStartXfer+0x3ae>
 802047c:	1d7b      	adds	r3, r7, #5
 802047e:	33ff      	adds	r3, #255	@ 0xff
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	085b      	lsrs	r3, r3, #1
 8020484:	21fc      	movs	r1, #252	@ 0xfc
 8020486:	187a      	adds	r2, r7, r1
 8020488:	6013      	str	r3, [r2, #0]
 802048a:	1d7b      	adds	r3, r7, #5
 802048c:	33ff      	adds	r3, #255	@ 0xff
 802048e:	681b      	ldr	r3, [r3, #0]
 8020490:	2201      	movs	r2, #1
 8020492:	4013      	ands	r3, r2
 8020494:	d004      	beq.n	80204a0 <USB_EPStartXfer+0x358>
 8020496:	187b      	adds	r3, r7, r1
 8020498:	681b      	ldr	r3, [r3, #0]
 802049a:	3301      	adds	r3, #1
 802049c:	187a      	adds	r2, r7, r1
 802049e:	6013      	str	r3, [r2, #0]
 80204a0:	697b      	ldr	r3, [r7, #20]
 80204a2:	881b      	ldrh	r3, [r3, #0]
 80204a4:	b29a      	uxth	r2, r3
 80204a6:	23fc      	movs	r3, #252	@ 0xfc
 80204a8:	18fb      	adds	r3, r7, r3
 80204aa:	681b      	ldr	r3, [r3, #0]
 80204ac:	b29b      	uxth	r3, r3
 80204ae:	029b      	lsls	r3, r3, #10
 80204b0:	b29b      	uxth	r3, r3
 80204b2:	4313      	orrs	r3, r2
 80204b4:	b29a      	uxth	r2, r3
 80204b6:	697b      	ldr	r3, [r7, #20]
 80204b8:	801a      	strh	r2, [r3, #0]
 80204ba:	e01c      	b.n	80204f6 <USB_EPStartXfer+0x3ae>
 80204bc:	683b      	ldr	r3, [r7, #0]
 80204be:	785b      	ldrb	r3, [r3, #1]
 80204c0:	2b01      	cmp	r3, #1
 80204c2:	d118      	bne.n	80204f6 <USB_EPStartXfer+0x3ae>
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	623b      	str	r3, [r7, #32]
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	2250      	movs	r2, #80	@ 0x50
 80204cc:	5a9b      	ldrh	r3, [r3, r2]
 80204ce:	b29b      	uxth	r3, r3
 80204d0:	001a      	movs	r2, r3
 80204d2:	6a3b      	ldr	r3, [r7, #32]
 80204d4:	189b      	adds	r3, r3, r2
 80204d6:	623b      	str	r3, [r7, #32]
 80204d8:	683b      	ldr	r3, [r7, #0]
 80204da:	781b      	ldrb	r3, [r3, #0]
 80204dc:	00da      	lsls	r2, r3, #3
 80204de:	6a3b      	ldr	r3, [r7, #32]
 80204e0:	18d3      	adds	r3, r2, r3
 80204e2:	4a0e      	ldr	r2, [pc, #56]	@ (802051c <USB_EPStartXfer+0x3d4>)
 80204e4:	4694      	mov	ip, r2
 80204e6:	4463      	add	r3, ip
 80204e8:	61fb      	str	r3, [r7, #28]
 80204ea:	1d7b      	adds	r3, r7, #5
 80204ec:	33ff      	adds	r3, #255	@ 0xff
 80204ee:	681b      	ldr	r3, [r3, #0]
 80204f0:	b29a      	uxth	r2, r3
 80204f2:	69fb      	ldr	r3, [r7, #28]
 80204f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80204f6:	2076      	movs	r0, #118	@ 0x76
 80204f8:	183b      	adds	r3, r7, r0
 80204fa:	683a      	ldr	r2, [r7, #0]
 80204fc:	8912      	ldrh	r2, [r2, #8]
 80204fe:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020500:	683b      	ldr	r3, [r7, #0]
 8020502:	6959      	ldr	r1, [r3, #20]
 8020504:	1d7b      	adds	r3, r7, #5
 8020506:	33ff      	adds	r3, #255	@ 0xff
 8020508:	681b      	ldr	r3, [r3, #0]
 802050a:	b29c      	uxth	r4, r3
 802050c:	183b      	adds	r3, r7, r0
 802050e:	881a      	ldrh	r2, [r3, #0]
 8020510:	6878      	ldr	r0, [r7, #4]
 8020512:	0023      	movs	r3, r4
 8020514:	f001 f88a 	bl	802162c <USB_WritePMA>
 8020518:	e329      	b.n	8020b6e <USB_EPStartXfer+0xa26>
 802051a:	46c0      	nop			@ (mov r8, r8)
 802051c:	00000402 	.word	0x00000402
 8020520:	ffff8f8f 	.word	0xffff8f8f
 8020524:	ffff8180 	.word	0xffff8180
 8020528:	00000406 	.word	0x00000406
 802052c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020530:	683b      	ldr	r3, [r7, #0]
 8020532:	785b      	ldrb	r3, [r3, #1]
 8020534:	2b00      	cmp	r3, #0
 8020536:	d000      	beq.n	802053a <USB_EPStartXfer+0x3f2>
 8020538:	e070      	b.n	802061c <USB_EPStartXfer+0x4d4>
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802053e:	687b      	ldr	r3, [r7, #4]
 8020540:	2250      	movs	r2, #80	@ 0x50
 8020542:	5a9b      	ldrh	r3, [r3, r2]
 8020544:	b29b      	uxth	r3, r3
 8020546:	001a      	movs	r2, r3
 8020548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802054a:	189b      	adds	r3, r3, r2
 802054c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802054e:	683b      	ldr	r3, [r7, #0]
 8020550:	781b      	ldrb	r3, [r3, #0]
 8020552:	00da      	lsls	r2, r3, #3
 8020554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020556:	18d3      	adds	r3, r2, r3
 8020558:	4acd      	ldr	r2, [pc, #820]	@ (8020890 <USB_EPStartXfer+0x748>)
 802055a:	4694      	mov	ip, r2
 802055c:	4463      	add	r3, ip
 802055e:	647b      	str	r3, [r7, #68]	@ 0x44
 8020560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020562:	881b      	ldrh	r3, [r3, #0]
 8020564:	b29b      	uxth	r3, r3
 8020566:	059b      	lsls	r3, r3, #22
 8020568:	0d9b      	lsrs	r3, r3, #22
 802056a:	b29a      	uxth	r2, r3
 802056c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802056e:	801a      	strh	r2, [r3, #0]
 8020570:	1d7b      	adds	r3, r7, #5
 8020572:	33ff      	adds	r3, #255	@ 0xff
 8020574:	681b      	ldr	r3, [r3, #0]
 8020576:	2b3e      	cmp	r3, #62	@ 0x3e
 8020578:	d922      	bls.n	80205c0 <USB_EPStartXfer+0x478>
 802057a:	1d7b      	adds	r3, r7, #5
 802057c:	33ff      	adds	r3, #255	@ 0xff
 802057e:	681b      	ldr	r3, [r3, #0]
 8020580:	095b      	lsrs	r3, r3, #5
 8020582:	21f8      	movs	r1, #248	@ 0xf8
 8020584:	187a      	adds	r2, r7, r1
 8020586:	6013      	str	r3, [r2, #0]
 8020588:	1d7b      	adds	r3, r7, #5
 802058a:	33ff      	adds	r3, #255	@ 0xff
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	221f      	movs	r2, #31
 8020590:	4013      	ands	r3, r2
 8020592:	d104      	bne.n	802059e <USB_EPStartXfer+0x456>
 8020594:	187b      	adds	r3, r7, r1
 8020596:	681b      	ldr	r3, [r3, #0]
 8020598:	3b01      	subs	r3, #1
 802059a:	187a      	adds	r2, r7, r1
 802059c:	6013      	str	r3, [r2, #0]
 802059e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80205a0:	881b      	ldrh	r3, [r3, #0]
 80205a2:	b29a      	uxth	r2, r3
 80205a4:	23f8      	movs	r3, #248	@ 0xf8
 80205a6:	18fb      	adds	r3, r7, r3
 80205a8:	681b      	ldr	r3, [r3, #0]
 80205aa:	b29b      	uxth	r3, r3
 80205ac:	029b      	lsls	r3, r3, #10
 80205ae:	b29b      	uxth	r3, r3
 80205b0:	4313      	orrs	r3, r2
 80205b2:	b29b      	uxth	r3, r3
 80205b4:	4ab7      	ldr	r2, [pc, #732]	@ (8020894 <USB_EPStartXfer+0x74c>)
 80205b6:	4313      	orrs	r3, r2
 80205b8:	b29a      	uxth	r2, r3
 80205ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80205bc:	801a      	strh	r2, [r3, #0]
 80205be:	e04a      	b.n	8020656 <USB_EPStartXfer+0x50e>
 80205c0:	1d7b      	adds	r3, r7, #5
 80205c2:	33ff      	adds	r3, #255	@ 0xff
 80205c4:	681b      	ldr	r3, [r3, #0]
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d108      	bne.n	80205dc <USB_EPStartXfer+0x494>
 80205ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80205cc:	881b      	ldrh	r3, [r3, #0]
 80205ce:	b29b      	uxth	r3, r3
 80205d0:	4ab0      	ldr	r2, [pc, #704]	@ (8020894 <USB_EPStartXfer+0x74c>)
 80205d2:	4313      	orrs	r3, r2
 80205d4:	b29a      	uxth	r2, r3
 80205d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80205d8:	801a      	strh	r2, [r3, #0]
 80205da:	e03c      	b.n	8020656 <USB_EPStartXfer+0x50e>
 80205dc:	1d7b      	adds	r3, r7, #5
 80205de:	33ff      	adds	r3, #255	@ 0xff
 80205e0:	681b      	ldr	r3, [r3, #0]
 80205e2:	085b      	lsrs	r3, r3, #1
 80205e4:	21f8      	movs	r1, #248	@ 0xf8
 80205e6:	187a      	adds	r2, r7, r1
 80205e8:	6013      	str	r3, [r2, #0]
 80205ea:	1d7b      	adds	r3, r7, #5
 80205ec:	33ff      	adds	r3, #255	@ 0xff
 80205ee:	681b      	ldr	r3, [r3, #0]
 80205f0:	2201      	movs	r2, #1
 80205f2:	4013      	ands	r3, r2
 80205f4:	d004      	beq.n	8020600 <USB_EPStartXfer+0x4b8>
 80205f6:	187b      	adds	r3, r7, r1
 80205f8:	681b      	ldr	r3, [r3, #0]
 80205fa:	3301      	adds	r3, #1
 80205fc:	187a      	adds	r2, r7, r1
 80205fe:	6013      	str	r3, [r2, #0]
 8020600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020602:	881b      	ldrh	r3, [r3, #0]
 8020604:	b29a      	uxth	r2, r3
 8020606:	23f8      	movs	r3, #248	@ 0xf8
 8020608:	18fb      	adds	r3, r7, r3
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	b29b      	uxth	r3, r3
 802060e:	029b      	lsls	r3, r3, #10
 8020610:	b29b      	uxth	r3, r3
 8020612:	4313      	orrs	r3, r2
 8020614:	b29a      	uxth	r2, r3
 8020616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020618:	801a      	strh	r2, [r3, #0]
 802061a:	e01c      	b.n	8020656 <USB_EPStartXfer+0x50e>
 802061c:	683b      	ldr	r3, [r7, #0]
 802061e:	785b      	ldrb	r3, [r3, #1]
 8020620:	2b01      	cmp	r3, #1
 8020622:	d118      	bne.n	8020656 <USB_EPStartXfer+0x50e>
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	653b      	str	r3, [r7, #80]	@ 0x50
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	2250      	movs	r2, #80	@ 0x50
 802062c:	5a9b      	ldrh	r3, [r3, r2]
 802062e:	b29b      	uxth	r3, r3
 8020630:	001a      	movs	r2, r3
 8020632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020634:	189b      	adds	r3, r3, r2
 8020636:	653b      	str	r3, [r7, #80]	@ 0x50
 8020638:	683b      	ldr	r3, [r7, #0]
 802063a:	781b      	ldrb	r3, [r3, #0]
 802063c:	00da      	lsls	r2, r3, #3
 802063e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020640:	18d3      	adds	r3, r2, r3
 8020642:	4a93      	ldr	r2, [pc, #588]	@ (8020890 <USB_EPStartXfer+0x748>)
 8020644:	4694      	mov	ip, r2
 8020646:	4463      	add	r3, ip
 8020648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802064a:	1d7b      	adds	r3, r7, #5
 802064c:	33ff      	adds	r3, #255	@ 0xff
 802064e:	681b      	ldr	r3, [r3, #0]
 8020650:	b29a      	uxth	r2, r3
 8020652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020654:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8020656:	2076      	movs	r0, #118	@ 0x76
 8020658:	183b      	adds	r3, r7, r0
 802065a:	683a      	ldr	r2, [r7, #0]
 802065c:	8912      	ldrh	r2, [r2, #8]
 802065e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020660:	683b      	ldr	r3, [r7, #0]
 8020662:	6959      	ldr	r1, [r3, #20]
 8020664:	1d7b      	adds	r3, r7, #5
 8020666:	33ff      	adds	r3, #255	@ 0xff
 8020668:	681b      	ldr	r3, [r3, #0]
 802066a:	b29c      	uxth	r4, r3
 802066c:	183b      	adds	r3, r7, r0
 802066e:	881a      	ldrh	r2, [r3, #0]
 8020670:	6878      	ldr	r0, [r7, #4]
 8020672:	0023      	movs	r3, r4
 8020674:	f000 ffda 	bl	802162c <USB_WritePMA>
            ep->xfer_buff += len;
 8020678:	683b      	ldr	r3, [r7, #0]
 802067a:	695a      	ldr	r2, [r3, #20]
 802067c:	1d7b      	adds	r3, r7, #5
 802067e:	33ff      	adds	r3, #255	@ 0xff
 8020680:	681b      	ldr	r3, [r3, #0]
 8020682:	18d2      	adds	r2, r2, r3
 8020684:	683b      	ldr	r3, [r7, #0]
 8020686:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8020688:	683b      	ldr	r3, [r7, #0]
 802068a:	6a1a      	ldr	r2, [r3, #32]
 802068c:	683b      	ldr	r3, [r7, #0]
 802068e:	691b      	ldr	r3, [r3, #16]
 8020690:	429a      	cmp	r2, r3
 8020692:	d908      	bls.n	80206a6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8020694:	683b      	ldr	r3, [r7, #0]
 8020696:	6a1a      	ldr	r2, [r3, #32]
 8020698:	1d7b      	adds	r3, r7, #5
 802069a:	33ff      	adds	r3, #255	@ 0xff
 802069c:	681b      	ldr	r3, [r3, #0]
 802069e:	1ad2      	subs	r2, r2, r3
 80206a0:	683b      	ldr	r3, [r7, #0]
 80206a2:	621a      	str	r2, [r3, #32]
 80206a4:	e007      	b.n	80206b6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80206a6:	683b      	ldr	r3, [r7, #0]
 80206a8:	6a1b      	ldr	r3, [r3, #32]
 80206aa:	1d7a      	adds	r2, r7, #5
 80206ac:	32ff      	adds	r2, #255	@ 0xff
 80206ae:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80206b0:	683b      	ldr	r3, [r7, #0]
 80206b2:	2200      	movs	r2, #0
 80206b4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80206ba:	683b      	ldr	r3, [r7, #0]
 80206bc:	785b      	ldrb	r3, [r3, #1]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d000      	beq.n	80206c4 <USB_EPStartXfer+0x57c>
 80206c2:	e070      	b.n	80207a6 <USB_EPStartXfer+0x65e>
 80206c4:	687b      	ldr	r3, [r7, #4]
 80206c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	2250      	movs	r2, #80	@ 0x50
 80206cc:	5a9b      	ldrh	r3, [r3, r2]
 80206ce:	b29b      	uxth	r3, r3
 80206d0:	001a      	movs	r2, r3
 80206d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80206d4:	189b      	adds	r3, r3, r2
 80206d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80206d8:	683b      	ldr	r3, [r7, #0]
 80206da:	781b      	ldrb	r3, [r3, #0]
 80206dc:	00da      	lsls	r2, r3, #3
 80206de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80206e0:	18d3      	adds	r3, r2, r3
 80206e2:	4a6d      	ldr	r2, [pc, #436]	@ (8020898 <USB_EPStartXfer+0x750>)
 80206e4:	4694      	mov	ip, r2
 80206e6:	4463      	add	r3, ip
 80206e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80206ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206ec:	881b      	ldrh	r3, [r3, #0]
 80206ee:	b29b      	uxth	r3, r3
 80206f0:	059b      	lsls	r3, r3, #22
 80206f2:	0d9b      	lsrs	r3, r3, #22
 80206f4:	b29a      	uxth	r2, r3
 80206f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206f8:	801a      	strh	r2, [r3, #0]
 80206fa:	1d7b      	adds	r3, r7, #5
 80206fc:	33ff      	adds	r3, #255	@ 0xff
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	2b3e      	cmp	r3, #62	@ 0x3e
 8020702:	d922      	bls.n	802074a <USB_EPStartXfer+0x602>
 8020704:	1d7b      	adds	r3, r7, #5
 8020706:	33ff      	adds	r3, #255	@ 0xff
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	095b      	lsrs	r3, r3, #5
 802070c:	21f4      	movs	r1, #244	@ 0xf4
 802070e:	187a      	adds	r2, r7, r1
 8020710:	6013      	str	r3, [r2, #0]
 8020712:	1d7b      	adds	r3, r7, #5
 8020714:	33ff      	adds	r3, #255	@ 0xff
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	221f      	movs	r2, #31
 802071a:	4013      	ands	r3, r2
 802071c:	d104      	bne.n	8020728 <USB_EPStartXfer+0x5e0>
 802071e:	187b      	adds	r3, r7, r1
 8020720:	681b      	ldr	r3, [r3, #0]
 8020722:	3b01      	subs	r3, #1
 8020724:	187a      	adds	r2, r7, r1
 8020726:	6013      	str	r3, [r2, #0]
 8020728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802072a:	881b      	ldrh	r3, [r3, #0]
 802072c:	b29a      	uxth	r2, r3
 802072e:	23f4      	movs	r3, #244	@ 0xf4
 8020730:	18fb      	adds	r3, r7, r3
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	b29b      	uxth	r3, r3
 8020736:	029b      	lsls	r3, r3, #10
 8020738:	b29b      	uxth	r3, r3
 802073a:	4313      	orrs	r3, r2
 802073c:	b29b      	uxth	r3, r3
 802073e:	4a55      	ldr	r2, [pc, #340]	@ (8020894 <USB_EPStartXfer+0x74c>)
 8020740:	4313      	orrs	r3, r2
 8020742:	b29a      	uxth	r2, r3
 8020744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020746:	801a      	strh	r2, [r3, #0]
 8020748:	e048      	b.n	80207dc <USB_EPStartXfer+0x694>
 802074a:	1d7b      	adds	r3, r7, #5
 802074c:	33ff      	adds	r3, #255	@ 0xff
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	2b00      	cmp	r3, #0
 8020752:	d108      	bne.n	8020766 <USB_EPStartXfer+0x61e>
 8020754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020756:	881b      	ldrh	r3, [r3, #0]
 8020758:	b29b      	uxth	r3, r3
 802075a:	4a4e      	ldr	r2, [pc, #312]	@ (8020894 <USB_EPStartXfer+0x74c>)
 802075c:	4313      	orrs	r3, r2
 802075e:	b29a      	uxth	r2, r3
 8020760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020762:	801a      	strh	r2, [r3, #0]
 8020764:	e03a      	b.n	80207dc <USB_EPStartXfer+0x694>
 8020766:	1d7b      	adds	r3, r7, #5
 8020768:	33ff      	adds	r3, #255	@ 0xff
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	085b      	lsrs	r3, r3, #1
 802076e:	21f4      	movs	r1, #244	@ 0xf4
 8020770:	187a      	adds	r2, r7, r1
 8020772:	6013      	str	r3, [r2, #0]
 8020774:	1d7b      	adds	r3, r7, #5
 8020776:	33ff      	adds	r3, #255	@ 0xff
 8020778:	681b      	ldr	r3, [r3, #0]
 802077a:	2201      	movs	r2, #1
 802077c:	4013      	ands	r3, r2
 802077e:	d004      	beq.n	802078a <USB_EPStartXfer+0x642>
 8020780:	187b      	adds	r3, r7, r1
 8020782:	681b      	ldr	r3, [r3, #0]
 8020784:	3301      	adds	r3, #1
 8020786:	187a      	adds	r2, r7, r1
 8020788:	6013      	str	r3, [r2, #0]
 802078a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802078c:	881b      	ldrh	r3, [r3, #0]
 802078e:	b29a      	uxth	r2, r3
 8020790:	23f4      	movs	r3, #244	@ 0xf4
 8020792:	18fb      	adds	r3, r7, r3
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	b29b      	uxth	r3, r3
 8020798:	029b      	lsls	r3, r3, #10
 802079a:	b29b      	uxth	r3, r3
 802079c:	4313      	orrs	r3, r2
 802079e:	b29a      	uxth	r2, r3
 80207a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80207a2:	801a      	strh	r2, [r3, #0]
 80207a4:	e01a      	b.n	80207dc <USB_EPStartXfer+0x694>
 80207a6:	683b      	ldr	r3, [r7, #0]
 80207a8:	785b      	ldrb	r3, [r3, #1]
 80207aa:	2b01      	cmp	r3, #1
 80207ac:	d116      	bne.n	80207dc <USB_EPStartXfer+0x694>
 80207ae:	687b      	ldr	r3, [r7, #4]
 80207b0:	2250      	movs	r2, #80	@ 0x50
 80207b2:	5a9b      	ldrh	r3, [r3, r2]
 80207b4:	b29b      	uxth	r3, r3
 80207b6:	001a      	movs	r2, r3
 80207b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80207ba:	189b      	adds	r3, r3, r2
 80207bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80207be:	683b      	ldr	r3, [r7, #0]
 80207c0:	781b      	ldrb	r3, [r3, #0]
 80207c2:	00da      	lsls	r2, r3, #3
 80207c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80207c6:	18d3      	adds	r3, r2, r3
 80207c8:	4a33      	ldr	r2, [pc, #204]	@ (8020898 <USB_EPStartXfer+0x750>)
 80207ca:	4694      	mov	ip, r2
 80207cc:	4463      	add	r3, ip
 80207ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80207d0:	1d7b      	adds	r3, r7, #5
 80207d2:	33ff      	adds	r3, #255	@ 0xff
 80207d4:	681b      	ldr	r3, [r3, #0]
 80207d6:	b29a      	uxth	r2, r3
 80207d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80207da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80207dc:	2076      	movs	r0, #118	@ 0x76
 80207de:	183b      	adds	r3, r7, r0
 80207e0:	683a      	ldr	r2, [r7, #0]
 80207e2:	8952      	ldrh	r2, [r2, #10]
 80207e4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80207e6:	683b      	ldr	r3, [r7, #0]
 80207e8:	6959      	ldr	r1, [r3, #20]
 80207ea:	1d7b      	adds	r3, r7, #5
 80207ec:	33ff      	adds	r3, #255	@ 0xff
 80207ee:	681b      	ldr	r3, [r3, #0]
 80207f0:	b29c      	uxth	r4, r3
 80207f2:	183b      	adds	r3, r7, r0
 80207f4:	881a      	ldrh	r2, [r3, #0]
 80207f6:	6878      	ldr	r0, [r7, #4]
 80207f8:	0023      	movs	r3, r4
 80207fa:	f000 ff17 	bl	802162c <USB_WritePMA>
 80207fe:	e1b6      	b.n	8020b6e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8020800:	683b      	ldr	r3, [r7, #0]
 8020802:	6a1b      	ldr	r3, [r3, #32]
 8020804:	1d7a      	adds	r2, r7, #5
 8020806:	32ff      	adds	r2, #255	@ 0xff
 8020808:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 802080a:	687a      	ldr	r2, [r7, #4]
 802080c:	683b      	ldr	r3, [r7, #0]
 802080e:	781b      	ldrb	r3, [r3, #0]
 8020810:	009b      	lsls	r3, r3, #2
 8020812:	18d3      	adds	r3, r2, r3
 8020814:	881b      	ldrh	r3, [r3, #0]
 8020816:	b29a      	uxth	r2, r3
 8020818:	2062      	movs	r0, #98	@ 0x62
 802081a:	183b      	adds	r3, r7, r0
 802081c:	491f      	ldr	r1, [pc, #124]	@ (802089c <USB_EPStartXfer+0x754>)
 802081e:	400a      	ands	r2, r1
 8020820:	801a      	strh	r2, [r3, #0]
 8020822:	687a      	ldr	r2, [r7, #4]
 8020824:	683b      	ldr	r3, [r7, #0]
 8020826:	781b      	ldrb	r3, [r3, #0]
 8020828:	009b      	lsls	r3, r3, #2
 802082a:	18d3      	adds	r3, r2, r3
 802082c:	183a      	adds	r2, r7, r0
 802082e:	8812      	ldrh	r2, [r2, #0]
 8020830:	491b      	ldr	r1, [pc, #108]	@ (80208a0 <USB_EPStartXfer+0x758>)
 8020832:	430a      	orrs	r2, r1
 8020834:	b292      	uxth	r2, r2
 8020836:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	2250      	movs	r2, #80	@ 0x50
 8020840:	5a9b      	ldrh	r3, [r3, r2]
 8020842:	b29b      	uxth	r3, r3
 8020844:	001a      	movs	r2, r3
 8020846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020848:	189b      	adds	r3, r3, r2
 802084a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802084c:	683b      	ldr	r3, [r7, #0]
 802084e:	781b      	ldrb	r3, [r3, #0]
 8020850:	00da      	lsls	r2, r3, #3
 8020852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020854:	18d3      	adds	r3, r2, r3
 8020856:	4a0e      	ldr	r2, [pc, #56]	@ (8020890 <USB_EPStartXfer+0x748>)
 8020858:	4694      	mov	ip, r2
 802085a:	4463      	add	r3, ip
 802085c:	65bb      	str	r3, [r7, #88]	@ 0x58
 802085e:	1d7b      	adds	r3, r7, #5
 8020860:	33ff      	adds	r3, #255	@ 0xff
 8020862:	681b      	ldr	r3, [r3, #0]
 8020864:	b29a      	uxth	r2, r3
 8020866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020868:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 802086a:	2076      	movs	r0, #118	@ 0x76
 802086c:	183b      	adds	r3, r7, r0
 802086e:	683a      	ldr	r2, [r7, #0]
 8020870:	8912      	ldrh	r2, [r2, #8]
 8020872:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020874:	683b      	ldr	r3, [r7, #0]
 8020876:	6959      	ldr	r1, [r3, #20]
 8020878:	1d7b      	adds	r3, r7, #5
 802087a:	33ff      	adds	r3, #255	@ 0xff
 802087c:	681b      	ldr	r3, [r3, #0]
 802087e:	b29c      	uxth	r4, r3
 8020880:	183b      	adds	r3, r7, r0
 8020882:	881a      	ldrh	r2, [r3, #0]
 8020884:	6878      	ldr	r0, [r7, #4]
 8020886:	0023      	movs	r3, r4
 8020888:	f000 fed0 	bl	802162c <USB_WritePMA>
 802088c:	e16f      	b.n	8020b6e <USB_EPStartXfer+0xa26>
 802088e:	46c0      	nop			@ (mov r8, r8)
 8020890:	00000402 	.word	0x00000402
 8020894:	ffff8000 	.word	0xffff8000
 8020898:	00000406 	.word	0x00000406
 802089c:	ffff8e8f 	.word	0xffff8e8f
 80208a0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80208a4:	683b      	ldr	r3, [r7, #0]
 80208a6:	6a1a      	ldr	r2, [r3, #32]
 80208a8:	1d7b      	adds	r3, r7, #5
 80208aa:	33ff      	adds	r3, #255	@ 0xff
 80208ac:	681b      	ldr	r3, [r3, #0]
 80208ae:	1ad2      	subs	r2, r2, r3
 80208b0:	683b      	ldr	r3, [r7, #0]
 80208b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80208b4:	687a      	ldr	r2, [r7, #4]
 80208b6:	683b      	ldr	r3, [r7, #0]
 80208b8:	781b      	ldrb	r3, [r3, #0]
 80208ba:	009b      	lsls	r3, r3, #2
 80208bc:	18d3      	adds	r3, r2, r3
 80208be:	881b      	ldrh	r3, [r3, #0]
 80208c0:	b29b      	uxth	r3, r3
 80208c2:	001a      	movs	r2, r3
 80208c4:	2340      	movs	r3, #64	@ 0x40
 80208c6:	4013      	ands	r3, r2
 80208c8:	d100      	bne.n	80208cc <USB_EPStartXfer+0x784>
 80208ca:	e0a4      	b.n	8020a16 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80208cc:	687b      	ldr	r3, [r7, #4]
 80208ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80208d0:	683b      	ldr	r3, [r7, #0]
 80208d2:	785b      	ldrb	r3, [r3, #1]
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	d000      	beq.n	80208da <USB_EPStartXfer+0x792>
 80208d8:	e070      	b.n	80209bc <USB_EPStartXfer+0x874>
 80208da:	687b      	ldr	r3, [r7, #4]
 80208dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80208de:	687b      	ldr	r3, [r7, #4]
 80208e0:	2250      	movs	r2, #80	@ 0x50
 80208e2:	5a9b      	ldrh	r3, [r3, r2]
 80208e4:	b29b      	uxth	r3, r3
 80208e6:	001a      	movs	r2, r3
 80208e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80208ea:	189b      	adds	r3, r3, r2
 80208ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80208ee:	683b      	ldr	r3, [r7, #0]
 80208f0:	781b      	ldrb	r3, [r3, #0]
 80208f2:	00da      	lsls	r2, r3, #3
 80208f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80208f6:	18d3      	adds	r3, r2, r3
 80208f8:	4abc      	ldr	r2, [pc, #752]	@ (8020bec <USB_EPStartXfer+0xaa4>)
 80208fa:	4694      	mov	ip, r2
 80208fc:	4463      	add	r3, ip
 80208fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8020900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020902:	881b      	ldrh	r3, [r3, #0]
 8020904:	b29b      	uxth	r3, r3
 8020906:	059b      	lsls	r3, r3, #22
 8020908:	0d9b      	lsrs	r3, r3, #22
 802090a:	b29a      	uxth	r2, r3
 802090c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802090e:	801a      	strh	r2, [r3, #0]
 8020910:	1d7b      	adds	r3, r7, #5
 8020912:	33ff      	adds	r3, #255	@ 0xff
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	2b3e      	cmp	r3, #62	@ 0x3e
 8020918:	d922      	bls.n	8020960 <USB_EPStartXfer+0x818>
 802091a:	1d7b      	adds	r3, r7, #5
 802091c:	33ff      	adds	r3, #255	@ 0xff
 802091e:	681b      	ldr	r3, [r3, #0]
 8020920:	095b      	lsrs	r3, r3, #5
 8020922:	21f0      	movs	r1, #240	@ 0xf0
 8020924:	187a      	adds	r2, r7, r1
 8020926:	6013      	str	r3, [r2, #0]
 8020928:	1d7b      	adds	r3, r7, #5
 802092a:	33ff      	adds	r3, #255	@ 0xff
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	221f      	movs	r2, #31
 8020930:	4013      	ands	r3, r2
 8020932:	d104      	bne.n	802093e <USB_EPStartXfer+0x7f6>
 8020934:	187b      	adds	r3, r7, r1
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	3b01      	subs	r3, #1
 802093a:	187a      	adds	r2, r7, r1
 802093c:	6013      	str	r3, [r2, #0]
 802093e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020940:	881b      	ldrh	r3, [r3, #0]
 8020942:	b29a      	uxth	r2, r3
 8020944:	23f0      	movs	r3, #240	@ 0xf0
 8020946:	18fb      	adds	r3, r7, r3
 8020948:	681b      	ldr	r3, [r3, #0]
 802094a:	b29b      	uxth	r3, r3
 802094c:	029b      	lsls	r3, r3, #10
 802094e:	b29b      	uxth	r3, r3
 8020950:	4313      	orrs	r3, r2
 8020952:	b29b      	uxth	r3, r3
 8020954:	4aa6      	ldr	r2, [pc, #664]	@ (8020bf0 <USB_EPStartXfer+0xaa8>)
 8020956:	4313      	orrs	r3, r2
 8020958:	b29a      	uxth	r2, r3
 802095a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802095c:	801a      	strh	r2, [r3, #0]
 802095e:	e048      	b.n	80209f2 <USB_EPStartXfer+0x8aa>
 8020960:	1d7b      	adds	r3, r7, #5
 8020962:	33ff      	adds	r3, #255	@ 0xff
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	2b00      	cmp	r3, #0
 8020968:	d108      	bne.n	802097c <USB_EPStartXfer+0x834>
 802096a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802096c:	881b      	ldrh	r3, [r3, #0]
 802096e:	b29b      	uxth	r3, r3
 8020970:	4a9f      	ldr	r2, [pc, #636]	@ (8020bf0 <USB_EPStartXfer+0xaa8>)
 8020972:	4313      	orrs	r3, r2
 8020974:	b29a      	uxth	r2, r3
 8020976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020978:	801a      	strh	r2, [r3, #0]
 802097a:	e03a      	b.n	80209f2 <USB_EPStartXfer+0x8aa>
 802097c:	1d7b      	adds	r3, r7, #5
 802097e:	33ff      	adds	r3, #255	@ 0xff
 8020980:	681b      	ldr	r3, [r3, #0]
 8020982:	085b      	lsrs	r3, r3, #1
 8020984:	21f0      	movs	r1, #240	@ 0xf0
 8020986:	187a      	adds	r2, r7, r1
 8020988:	6013      	str	r3, [r2, #0]
 802098a:	1d7b      	adds	r3, r7, #5
 802098c:	33ff      	adds	r3, #255	@ 0xff
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	2201      	movs	r2, #1
 8020992:	4013      	ands	r3, r2
 8020994:	d004      	beq.n	80209a0 <USB_EPStartXfer+0x858>
 8020996:	187b      	adds	r3, r7, r1
 8020998:	681b      	ldr	r3, [r3, #0]
 802099a:	3301      	adds	r3, #1
 802099c:	187a      	adds	r2, r7, r1
 802099e:	6013      	str	r3, [r2, #0]
 80209a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80209a2:	881b      	ldrh	r3, [r3, #0]
 80209a4:	b29a      	uxth	r2, r3
 80209a6:	23f0      	movs	r3, #240	@ 0xf0
 80209a8:	18fb      	adds	r3, r7, r3
 80209aa:	681b      	ldr	r3, [r3, #0]
 80209ac:	b29b      	uxth	r3, r3
 80209ae:	029b      	lsls	r3, r3, #10
 80209b0:	b29b      	uxth	r3, r3
 80209b2:	4313      	orrs	r3, r2
 80209b4:	b29a      	uxth	r2, r3
 80209b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80209b8:	801a      	strh	r2, [r3, #0]
 80209ba:	e01a      	b.n	80209f2 <USB_EPStartXfer+0x8aa>
 80209bc:	683b      	ldr	r3, [r7, #0]
 80209be:	785b      	ldrb	r3, [r3, #1]
 80209c0:	2b01      	cmp	r3, #1
 80209c2:	d116      	bne.n	80209f2 <USB_EPStartXfer+0x8aa>
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	2250      	movs	r2, #80	@ 0x50
 80209c8:	5a9b      	ldrh	r3, [r3, r2]
 80209ca:	b29b      	uxth	r3, r3
 80209cc:	001a      	movs	r2, r3
 80209ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80209d0:	189b      	adds	r3, r3, r2
 80209d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80209d4:	683b      	ldr	r3, [r7, #0]
 80209d6:	781b      	ldrb	r3, [r3, #0]
 80209d8:	00da      	lsls	r2, r3, #3
 80209da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80209dc:	18d3      	adds	r3, r2, r3
 80209de:	4a83      	ldr	r2, [pc, #524]	@ (8020bec <USB_EPStartXfer+0xaa4>)
 80209e0:	4694      	mov	ip, r2
 80209e2:	4463      	add	r3, ip
 80209e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80209e6:	1d7b      	adds	r3, r7, #5
 80209e8:	33ff      	adds	r3, #255	@ 0xff
 80209ea:	681b      	ldr	r3, [r3, #0]
 80209ec:	b29a      	uxth	r2, r3
 80209ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80209f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80209f2:	2076      	movs	r0, #118	@ 0x76
 80209f4:	183b      	adds	r3, r7, r0
 80209f6:	683a      	ldr	r2, [r7, #0]
 80209f8:	8952      	ldrh	r2, [r2, #10]
 80209fa:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80209fc:	683b      	ldr	r3, [r7, #0]
 80209fe:	6959      	ldr	r1, [r3, #20]
 8020a00:	1d7b      	adds	r3, r7, #5
 8020a02:	33ff      	adds	r3, #255	@ 0xff
 8020a04:	681b      	ldr	r3, [r3, #0]
 8020a06:	b29c      	uxth	r4, r3
 8020a08:	183b      	adds	r3, r7, r0
 8020a0a:	881a      	ldrh	r2, [r3, #0]
 8020a0c:	6878      	ldr	r0, [r7, #4]
 8020a0e:	0023      	movs	r3, r4
 8020a10:	f000 fe0c 	bl	802162c <USB_WritePMA>
 8020a14:	e0ab      	b.n	8020b6e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020a16:	683b      	ldr	r3, [r7, #0]
 8020a18:	785b      	ldrb	r3, [r3, #1]
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d000      	beq.n	8020a20 <USB_EPStartXfer+0x8d8>
 8020a1e:	e070      	b.n	8020b02 <USB_EPStartXfer+0x9ba>
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	2250      	movs	r2, #80	@ 0x50
 8020a28:	5a9b      	ldrh	r3, [r3, r2]
 8020a2a:	b29b      	uxth	r3, r3
 8020a2c:	001a      	movs	r2, r3
 8020a2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8020a30:	189b      	adds	r3, r3, r2
 8020a32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020a34:	683b      	ldr	r3, [r7, #0]
 8020a36:	781b      	ldrb	r3, [r3, #0]
 8020a38:	00da      	lsls	r2, r3, #3
 8020a3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8020a3c:	18d3      	adds	r3, r2, r3
 8020a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8020bf4 <USB_EPStartXfer+0xaac>)
 8020a40:	4694      	mov	ip, r2
 8020a42:	4463      	add	r3, ip
 8020a44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8020a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a48:	881b      	ldrh	r3, [r3, #0]
 8020a4a:	b29b      	uxth	r3, r3
 8020a4c:	059b      	lsls	r3, r3, #22
 8020a4e:	0d9b      	lsrs	r3, r3, #22
 8020a50:	b29a      	uxth	r2, r3
 8020a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a54:	801a      	strh	r2, [r3, #0]
 8020a56:	1d7b      	adds	r3, r7, #5
 8020a58:	33ff      	adds	r3, #255	@ 0xff
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8020a5e:	d922      	bls.n	8020aa6 <USB_EPStartXfer+0x95e>
 8020a60:	1d7b      	adds	r3, r7, #5
 8020a62:	33ff      	adds	r3, #255	@ 0xff
 8020a64:	681b      	ldr	r3, [r3, #0]
 8020a66:	095b      	lsrs	r3, r3, #5
 8020a68:	21ec      	movs	r1, #236	@ 0xec
 8020a6a:	187a      	adds	r2, r7, r1
 8020a6c:	6013      	str	r3, [r2, #0]
 8020a6e:	1d7b      	adds	r3, r7, #5
 8020a70:	33ff      	adds	r3, #255	@ 0xff
 8020a72:	681b      	ldr	r3, [r3, #0]
 8020a74:	221f      	movs	r2, #31
 8020a76:	4013      	ands	r3, r2
 8020a78:	d104      	bne.n	8020a84 <USB_EPStartXfer+0x93c>
 8020a7a:	187b      	adds	r3, r7, r1
 8020a7c:	681b      	ldr	r3, [r3, #0]
 8020a7e:	3b01      	subs	r3, #1
 8020a80:	187a      	adds	r2, r7, r1
 8020a82:	6013      	str	r3, [r2, #0]
 8020a84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a86:	881b      	ldrh	r3, [r3, #0]
 8020a88:	b29a      	uxth	r2, r3
 8020a8a:	23ec      	movs	r3, #236	@ 0xec
 8020a8c:	18fb      	adds	r3, r7, r3
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	b29b      	uxth	r3, r3
 8020a92:	029b      	lsls	r3, r3, #10
 8020a94:	b29b      	uxth	r3, r3
 8020a96:	4313      	orrs	r3, r2
 8020a98:	b29b      	uxth	r3, r3
 8020a9a:	4a55      	ldr	r2, [pc, #340]	@ (8020bf0 <USB_EPStartXfer+0xaa8>)
 8020a9c:	4313      	orrs	r3, r2
 8020a9e:	b29a      	uxth	r2, r3
 8020aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020aa2:	801a      	strh	r2, [r3, #0]
 8020aa4:	e052      	b.n	8020b4c <USB_EPStartXfer+0xa04>
 8020aa6:	1d7b      	adds	r3, r7, #5
 8020aa8:	33ff      	adds	r3, #255	@ 0xff
 8020aaa:	681b      	ldr	r3, [r3, #0]
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d108      	bne.n	8020ac2 <USB_EPStartXfer+0x97a>
 8020ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020ab2:	881b      	ldrh	r3, [r3, #0]
 8020ab4:	b29b      	uxth	r3, r3
 8020ab6:	4a4e      	ldr	r2, [pc, #312]	@ (8020bf0 <USB_EPStartXfer+0xaa8>)
 8020ab8:	4313      	orrs	r3, r2
 8020aba:	b29a      	uxth	r2, r3
 8020abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020abe:	801a      	strh	r2, [r3, #0]
 8020ac0:	e044      	b.n	8020b4c <USB_EPStartXfer+0xa04>
 8020ac2:	1d7b      	adds	r3, r7, #5
 8020ac4:	33ff      	adds	r3, #255	@ 0xff
 8020ac6:	681b      	ldr	r3, [r3, #0]
 8020ac8:	085b      	lsrs	r3, r3, #1
 8020aca:	21ec      	movs	r1, #236	@ 0xec
 8020acc:	187a      	adds	r2, r7, r1
 8020ace:	6013      	str	r3, [r2, #0]
 8020ad0:	1d7b      	adds	r3, r7, #5
 8020ad2:	33ff      	adds	r3, #255	@ 0xff
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	2201      	movs	r2, #1
 8020ad8:	4013      	ands	r3, r2
 8020ada:	d004      	beq.n	8020ae6 <USB_EPStartXfer+0x99e>
 8020adc:	187b      	adds	r3, r7, r1
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	3301      	adds	r3, #1
 8020ae2:	187a      	adds	r2, r7, r1
 8020ae4:	6013      	str	r3, [r2, #0]
 8020ae6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020ae8:	881b      	ldrh	r3, [r3, #0]
 8020aea:	b29a      	uxth	r2, r3
 8020aec:	23ec      	movs	r3, #236	@ 0xec
 8020aee:	18fb      	adds	r3, r7, r3
 8020af0:	681b      	ldr	r3, [r3, #0]
 8020af2:	b29b      	uxth	r3, r3
 8020af4:	029b      	lsls	r3, r3, #10
 8020af6:	b29b      	uxth	r3, r3
 8020af8:	4313      	orrs	r3, r2
 8020afa:	b29a      	uxth	r2, r3
 8020afc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020afe:	801a      	strh	r2, [r3, #0]
 8020b00:	e024      	b.n	8020b4c <USB_EPStartXfer+0xa04>
 8020b02:	683b      	ldr	r3, [r7, #0]
 8020b04:	785b      	ldrb	r3, [r3, #1]
 8020b06:	2b01      	cmp	r3, #1
 8020b08:	d120      	bne.n	8020b4c <USB_EPStartXfer+0xa04>
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	2184      	movs	r1, #132	@ 0x84
 8020b0e:	187a      	adds	r2, r7, r1
 8020b10:	6013      	str	r3, [r2, #0]
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	2250      	movs	r2, #80	@ 0x50
 8020b16:	5a9b      	ldrh	r3, [r3, r2]
 8020b18:	b29b      	uxth	r3, r3
 8020b1a:	001a      	movs	r2, r3
 8020b1c:	187b      	adds	r3, r7, r1
 8020b1e:	681b      	ldr	r3, [r3, #0]
 8020b20:	189b      	adds	r3, r3, r2
 8020b22:	187a      	adds	r2, r7, r1
 8020b24:	6013      	str	r3, [r2, #0]
 8020b26:	683b      	ldr	r3, [r7, #0]
 8020b28:	781b      	ldrb	r3, [r3, #0]
 8020b2a:	00da      	lsls	r2, r3, #3
 8020b2c:	187b      	adds	r3, r7, r1
 8020b2e:	681b      	ldr	r3, [r3, #0]
 8020b30:	18d3      	adds	r3, r2, r3
 8020b32:	4a30      	ldr	r2, [pc, #192]	@ (8020bf4 <USB_EPStartXfer+0xaac>)
 8020b34:	4694      	mov	ip, r2
 8020b36:	4463      	add	r3, ip
 8020b38:	2180      	movs	r1, #128	@ 0x80
 8020b3a:	187a      	adds	r2, r7, r1
 8020b3c:	6013      	str	r3, [r2, #0]
 8020b3e:	1d7b      	adds	r3, r7, #5
 8020b40:	33ff      	adds	r3, #255	@ 0xff
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	b29a      	uxth	r2, r3
 8020b46:	187b      	adds	r3, r7, r1
 8020b48:	681b      	ldr	r3, [r3, #0]
 8020b4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8020b4c:	2076      	movs	r0, #118	@ 0x76
 8020b4e:	183b      	adds	r3, r7, r0
 8020b50:	683a      	ldr	r2, [r7, #0]
 8020b52:	8912      	ldrh	r2, [r2, #8]
 8020b54:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020b56:	683b      	ldr	r3, [r7, #0]
 8020b58:	6959      	ldr	r1, [r3, #20]
 8020b5a:	1d7b      	adds	r3, r7, #5
 8020b5c:	33ff      	adds	r3, #255	@ 0xff
 8020b5e:	681b      	ldr	r3, [r3, #0]
 8020b60:	b29c      	uxth	r4, r3
 8020b62:	183b      	adds	r3, r7, r0
 8020b64:	881a      	ldrh	r2, [r3, #0]
 8020b66:	6878      	ldr	r0, [r7, #4]
 8020b68:	0023      	movs	r3, r4
 8020b6a:	f000 fd5f 	bl	802162c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8020b6e:	687a      	ldr	r2, [r7, #4]
 8020b70:	683b      	ldr	r3, [r7, #0]
 8020b72:	781b      	ldrb	r3, [r3, #0]
 8020b74:	009b      	lsls	r3, r3, #2
 8020b76:	18d3      	adds	r3, r2, r3
 8020b78:	881b      	ldrh	r3, [r3, #0]
 8020b7a:	b29a      	uxth	r2, r3
 8020b7c:	200a      	movs	r0, #10
 8020b7e:	183b      	adds	r3, r7, r0
 8020b80:	491d      	ldr	r1, [pc, #116]	@ (8020bf8 <USB_EPStartXfer+0xab0>)
 8020b82:	400a      	ands	r2, r1
 8020b84:	801a      	strh	r2, [r3, #0]
 8020b86:	183b      	adds	r3, r7, r0
 8020b88:	183a      	adds	r2, r7, r0
 8020b8a:	8812      	ldrh	r2, [r2, #0]
 8020b8c:	2110      	movs	r1, #16
 8020b8e:	404a      	eors	r2, r1
 8020b90:	801a      	strh	r2, [r3, #0]
 8020b92:	183b      	adds	r3, r7, r0
 8020b94:	183a      	adds	r2, r7, r0
 8020b96:	8812      	ldrh	r2, [r2, #0]
 8020b98:	2120      	movs	r1, #32
 8020b9a:	404a      	eors	r2, r1
 8020b9c:	801a      	strh	r2, [r3, #0]
 8020b9e:	687a      	ldr	r2, [r7, #4]
 8020ba0:	683b      	ldr	r3, [r7, #0]
 8020ba2:	781b      	ldrb	r3, [r3, #0]
 8020ba4:	009b      	lsls	r3, r3, #2
 8020ba6:	18d3      	adds	r3, r2, r3
 8020ba8:	183a      	adds	r2, r7, r0
 8020baa:	8812      	ldrh	r2, [r2, #0]
 8020bac:	4913      	ldr	r1, [pc, #76]	@ (8020bfc <USB_EPStartXfer+0xab4>)
 8020bae:	430a      	orrs	r2, r1
 8020bb0:	b292      	uxth	r2, r2
 8020bb2:	801a      	strh	r2, [r3, #0]
 8020bb4:	f000 fbf4 	bl	80213a0 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8020bb8:	683b      	ldr	r3, [r7, #0]
 8020bba:	7b1b      	ldrb	r3, [r3, #12]
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d000      	beq.n	8020bc2 <USB_EPStartXfer+0xa7a>
 8020bc0:	e0a9      	b.n	8020d16 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8020bc2:	683b      	ldr	r3, [r7, #0]
 8020bc4:	699a      	ldr	r2, [r3, #24]
 8020bc6:	683b      	ldr	r3, [r7, #0]
 8020bc8:	691b      	ldr	r3, [r3, #16]
 8020bca:	429a      	cmp	r2, r3
 8020bcc:	d918      	bls.n	8020c00 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8020bce:	683b      	ldr	r3, [r7, #0]
 8020bd0:	691b      	ldr	r3, [r3, #16]
 8020bd2:	1d7a      	adds	r2, r7, #5
 8020bd4:	32ff      	adds	r2, #255	@ 0xff
 8020bd6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8020bd8:	683b      	ldr	r3, [r7, #0]
 8020bda:	699a      	ldr	r2, [r3, #24]
 8020bdc:	1d7b      	adds	r3, r7, #5
 8020bde:	33ff      	adds	r3, #255	@ 0xff
 8020be0:	681b      	ldr	r3, [r3, #0]
 8020be2:	1ad2      	subs	r2, r2, r3
 8020be4:	683b      	ldr	r3, [r7, #0]
 8020be6:	619a      	str	r2, [r3, #24]
 8020be8:	e012      	b.n	8020c10 <USB_EPStartXfer+0xac8>
 8020bea:	46c0      	nop			@ (mov r8, r8)
 8020bec:	00000406 	.word	0x00000406
 8020bf0:	ffff8000 	.word	0xffff8000
 8020bf4:	00000402 	.word	0x00000402
 8020bf8:	ffff8fbf 	.word	0xffff8fbf
 8020bfc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8020c00:	683b      	ldr	r3, [r7, #0]
 8020c02:	699b      	ldr	r3, [r3, #24]
 8020c04:	1d7a      	adds	r2, r7, #5
 8020c06:	32ff      	adds	r2, #255	@ 0xff
 8020c08:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8020c0a:	683b      	ldr	r3, [r7, #0]
 8020c0c:	2200      	movs	r2, #0
 8020c0e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8020c10:	687b      	ldr	r3, [r7, #4]
 8020c12:	2190      	movs	r1, #144	@ 0x90
 8020c14:	187a      	adds	r2, r7, r1
 8020c16:	6013      	str	r3, [r2, #0]
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	2250      	movs	r2, #80	@ 0x50
 8020c1c:	5a9b      	ldrh	r3, [r3, r2]
 8020c1e:	b29b      	uxth	r3, r3
 8020c20:	001a      	movs	r2, r3
 8020c22:	187b      	adds	r3, r7, r1
 8020c24:	681b      	ldr	r3, [r3, #0]
 8020c26:	189b      	adds	r3, r3, r2
 8020c28:	187a      	adds	r2, r7, r1
 8020c2a:	6013      	str	r3, [r2, #0]
 8020c2c:	683b      	ldr	r3, [r7, #0]
 8020c2e:	781b      	ldrb	r3, [r3, #0]
 8020c30:	00da      	lsls	r2, r3, #3
 8020c32:	187b      	adds	r3, r7, r1
 8020c34:	681b      	ldr	r3, [r3, #0]
 8020c36:	18d3      	adds	r3, r2, r3
 8020c38:	4acf      	ldr	r2, [pc, #828]	@ (8020f78 <USB_EPStartXfer+0xe30>)
 8020c3a:	4694      	mov	ip, r2
 8020c3c:	4463      	add	r3, ip
 8020c3e:	218c      	movs	r1, #140	@ 0x8c
 8020c40:	187a      	adds	r2, r7, r1
 8020c42:	6013      	str	r3, [r2, #0]
 8020c44:	187b      	adds	r3, r7, r1
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	881b      	ldrh	r3, [r3, #0]
 8020c4a:	b29b      	uxth	r3, r3
 8020c4c:	059b      	lsls	r3, r3, #22
 8020c4e:	0d9b      	lsrs	r3, r3, #22
 8020c50:	b29a      	uxth	r2, r3
 8020c52:	187b      	adds	r3, r7, r1
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	801a      	strh	r2, [r3, #0]
 8020c58:	1d7b      	adds	r3, r7, #5
 8020c5a:	33ff      	adds	r3, #255	@ 0xff
 8020c5c:	681b      	ldr	r3, [r3, #0]
 8020c5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020c60:	d925      	bls.n	8020cae <USB_EPStartXfer+0xb66>
 8020c62:	1d7b      	adds	r3, r7, #5
 8020c64:	33ff      	adds	r3, #255	@ 0xff
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	095b      	lsrs	r3, r3, #5
 8020c6a:	21e8      	movs	r1, #232	@ 0xe8
 8020c6c:	187a      	adds	r2, r7, r1
 8020c6e:	6013      	str	r3, [r2, #0]
 8020c70:	1d7b      	adds	r3, r7, #5
 8020c72:	33ff      	adds	r3, #255	@ 0xff
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	221f      	movs	r2, #31
 8020c78:	4013      	ands	r3, r2
 8020c7a:	d104      	bne.n	8020c86 <USB_EPStartXfer+0xb3e>
 8020c7c:	187b      	adds	r3, r7, r1
 8020c7e:	681b      	ldr	r3, [r3, #0]
 8020c80:	3b01      	subs	r3, #1
 8020c82:	187a      	adds	r2, r7, r1
 8020c84:	6013      	str	r3, [r2, #0]
 8020c86:	218c      	movs	r1, #140	@ 0x8c
 8020c88:	187b      	adds	r3, r7, r1
 8020c8a:	681b      	ldr	r3, [r3, #0]
 8020c8c:	881b      	ldrh	r3, [r3, #0]
 8020c8e:	b29a      	uxth	r2, r3
 8020c90:	23e8      	movs	r3, #232	@ 0xe8
 8020c92:	18fb      	adds	r3, r7, r3
 8020c94:	681b      	ldr	r3, [r3, #0]
 8020c96:	b29b      	uxth	r3, r3
 8020c98:	029b      	lsls	r3, r3, #10
 8020c9a:	b29b      	uxth	r3, r3
 8020c9c:	4313      	orrs	r3, r2
 8020c9e:	b29b      	uxth	r3, r3
 8020ca0:	4ab6      	ldr	r2, [pc, #728]	@ (8020f7c <USB_EPStartXfer+0xe34>)
 8020ca2:	4313      	orrs	r3, r2
 8020ca4:	b29a      	uxth	r2, r3
 8020ca6:	187b      	adds	r3, r7, r1
 8020ca8:	681b      	ldr	r3, [r3, #0]
 8020caa:	801a      	strh	r2, [r3, #0]
 8020cac:	e353      	b.n	8021356 <USB_EPStartXfer+0x120e>
 8020cae:	1d7b      	adds	r3, r7, #5
 8020cb0:	33ff      	adds	r3, #255	@ 0xff
 8020cb2:	681b      	ldr	r3, [r3, #0]
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d10b      	bne.n	8020cd0 <USB_EPStartXfer+0xb88>
 8020cb8:	218c      	movs	r1, #140	@ 0x8c
 8020cba:	187b      	adds	r3, r7, r1
 8020cbc:	681b      	ldr	r3, [r3, #0]
 8020cbe:	881b      	ldrh	r3, [r3, #0]
 8020cc0:	b29b      	uxth	r3, r3
 8020cc2:	4aae      	ldr	r2, [pc, #696]	@ (8020f7c <USB_EPStartXfer+0xe34>)
 8020cc4:	4313      	orrs	r3, r2
 8020cc6:	b29a      	uxth	r2, r3
 8020cc8:	187b      	adds	r3, r7, r1
 8020cca:	681b      	ldr	r3, [r3, #0]
 8020ccc:	801a      	strh	r2, [r3, #0]
 8020cce:	e342      	b.n	8021356 <USB_EPStartXfer+0x120e>
 8020cd0:	1d7b      	adds	r3, r7, #5
 8020cd2:	33ff      	adds	r3, #255	@ 0xff
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	085b      	lsrs	r3, r3, #1
 8020cd8:	21e8      	movs	r1, #232	@ 0xe8
 8020cda:	187a      	adds	r2, r7, r1
 8020cdc:	6013      	str	r3, [r2, #0]
 8020cde:	1d7b      	adds	r3, r7, #5
 8020ce0:	33ff      	adds	r3, #255	@ 0xff
 8020ce2:	681b      	ldr	r3, [r3, #0]
 8020ce4:	2201      	movs	r2, #1
 8020ce6:	4013      	ands	r3, r2
 8020ce8:	d004      	beq.n	8020cf4 <USB_EPStartXfer+0xbac>
 8020cea:	187b      	adds	r3, r7, r1
 8020cec:	681b      	ldr	r3, [r3, #0]
 8020cee:	3301      	adds	r3, #1
 8020cf0:	187a      	adds	r2, r7, r1
 8020cf2:	6013      	str	r3, [r2, #0]
 8020cf4:	218c      	movs	r1, #140	@ 0x8c
 8020cf6:	187b      	adds	r3, r7, r1
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	881b      	ldrh	r3, [r3, #0]
 8020cfc:	b29a      	uxth	r2, r3
 8020cfe:	23e8      	movs	r3, #232	@ 0xe8
 8020d00:	18fb      	adds	r3, r7, r3
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	b29b      	uxth	r3, r3
 8020d06:	029b      	lsls	r3, r3, #10
 8020d08:	b29b      	uxth	r3, r3
 8020d0a:	4313      	orrs	r3, r2
 8020d0c:	b29a      	uxth	r2, r3
 8020d0e:	187b      	adds	r3, r7, r1
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	801a      	strh	r2, [r3, #0]
 8020d14:	e31f      	b.n	8021356 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8020d16:	683b      	ldr	r3, [r7, #0]
 8020d18:	78db      	ldrb	r3, [r3, #3]
 8020d1a:	2b02      	cmp	r3, #2
 8020d1c:	d000      	beq.n	8020d20 <USB_EPStartXfer+0xbd8>
 8020d1e:	e191      	b.n	8021044 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8020d20:	683b      	ldr	r3, [r7, #0]
 8020d22:	785b      	ldrb	r3, [r3, #1]
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d000      	beq.n	8020d2a <USB_EPStartXfer+0xbe2>
 8020d28:	e07c      	b.n	8020e24 <USB_EPStartXfer+0xcdc>
 8020d2a:	687b      	ldr	r3, [r7, #4]
 8020d2c:	21ac      	movs	r1, #172	@ 0xac
 8020d2e:	187a      	adds	r2, r7, r1
 8020d30:	6013      	str	r3, [r2, #0]
 8020d32:	687b      	ldr	r3, [r7, #4]
 8020d34:	2250      	movs	r2, #80	@ 0x50
 8020d36:	5a9b      	ldrh	r3, [r3, r2]
 8020d38:	b29b      	uxth	r3, r3
 8020d3a:	001a      	movs	r2, r3
 8020d3c:	187b      	adds	r3, r7, r1
 8020d3e:	681b      	ldr	r3, [r3, #0]
 8020d40:	189b      	adds	r3, r3, r2
 8020d42:	187a      	adds	r2, r7, r1
 8020d44:	6013      	str	r3, [r2, #0]
 8020d46:	683b      	ldr	r3, [r7, #0]
 8020d48:	781b      	ldrb	r3, [r3, #0]
 8020d4a:	00da      	lsls	r2, r3, #3
 8020d4c:	187b      	adds	r3, r7, r1
 8020d4e:	681b      	ldr	r3, [r3, #0]
 8020d50:	18d3      	adds	r3, r2, r3
 8020d52:	4a8b      	ldr	r2, [pc, #556]	@ (8020f80 <USB_EPStartXfer+0xe38>)
 8020d54:	4694      	mov	ip, r2
 8020d56:	4463      	add	r3, ip
 8020d58:	21a8      	movs	r1, #168	@ 0xa8
 8020d5a:	187a      	adds	r2, r7, r1
 8020d5c:	6013      	str	r3, [r2, #0]
 8020d5e:	187b      	adds	r3, r7, r1
 8020d60:	681b      	ldr	r3, [r3, #0]
 8020d62:	881b      	ldrh	r3, [r3, #0]
 8020d64:	b29b      	uxth	r3, r3
 8020d66:	059b      	lsls	r3, r3, #22
 8020d68:	0d9b      	lsrs	r3, r3, #22
 8020d6a:	b29a      	uxth	r2, r3
 8020d6c:	187b      	adds	r3, r7, r1
 8020d6e:	681b      	ldr	r3, [r3, #0]
 8020d70:	801a      	strh	r2, [r3, #0]
 8020d72:	683b      	ldr	r3, [r7, #0]
 8020d74:	691b      	ldr	r3, [r3, #16]
 8020d76:	2b3e      	cmp	r3, #62	@ 0x3e
 8020d78:	d923      	bls.n	8020dc2 <USB_EPStartXfer+0xc7a>
 8020d7a:	683b      	ldr	r3, [r7, #0]
 8020d7c:	691b      	ldr	r3, [r3, #16]
 8020d7e:	095b      	lsrs	r3, r3, #5
 8020d80:	21e4      	movs	r1, #228	@ 0xe4
 8020d82:	187a      	adds	r2, r7, r1
 8020d84:	6013      	str	r3, [r2, #0]
 8020d86:	683b      	ldr	r3, [r7, #0]
 8020d88:	691b      	ldr	r3, [r3, #16]
 8020d8a:	221f      	movs	r2, #31
 8020d8c:	4013      	ands	r3, r2
 8020d8e:	d104      	bne.n	8020d9a <USB_EPStartXfer+0xc52>
 8020d90:	187b      	adds	r3, r7, r1
 8020d92:	681b      	ldr	r3, [r3, #0]
 8020d94:	3b01      	subs	r3, #1
 8020d96:	187a      	adds	r2, r7, r1
 8020d98:	6013      	str	r3, [r2, #0]
 8020d9a:	21a8      	movs	r1, #168	@ 0xa8
 8020d9c:	187b      	adds	r3, r7, r1
 8020d9e:	681b      	ldr	r3, [r3, #0]
 8020da0:	881b      	ldrh	r3, [r3, #0]
 8020da2:	b29a      	uxth	r2, r3
 8020da4:	23e4      	movs	r3, #228	@ 0xe4
 8020da6:	18fb      	adds	r3, r7, r3
 8020da8:	681b      	ldr	r3, [r3, #0]
 8020daa:	b29b      	uxth	r3, r3
 8020dac:	029b      	lsls	r3, r3, #10
 8020dae:	b29b      	uxth	r3, r3
 8020db0:	4313      	orrs	r3, r2
 8020db2:	b29b      	uxth	r3, r3
 8020db4:	4a71      	ldr	r2, [pc, #452]	@ (8020f7c <USB_EPStartXfer+0xe34>)
 8020db6:	4313      	orrs	r3, r2
 8020db8:	b29a      	uxth	r2, r3
 8020dba:	187b      	adds	r3, r7, r1
 8020dbc:	681b      	ldr	r3, [r3, #0]
 8020dbe:	801a      	strh	r2, [r3, #0]
 8020dc0:	e054      	b.n	8020e6c <USB_EPStartXfer+0xd24>
 8020dc2:	683b      	ldr	r3, [r7, #0]
 8020dc4:	691b      	ldr	r3, [r3, #16]
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	d10b      	bne.n	8020de2 <USB_EPStartXfer+0xc9a>
 8020dca:	21a8      	movs	r1, #168	@ 0xa8
 8020dcc:	187b      	adds	r3, r7, r1
 8020dce:	681b      	ldr	r3, [r3, #0]
 8020dd0:	881b      	ldrh	r3, [r3, #0]
 8020dd2:	b29b      	uxth	r3, r3
 8020dd4:	4a69      	ldr	r2, [pc, #420]	@ (8020f7c <USB_EPStartXfer+0xe34>)
 8020dd6:	4313      	orrs	r3, r2
 8020dd8:	b29a      	uxth	r2, r3
 8020dda:	187b      	adds	r3, r7, r1
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	801a      	strh	r2, [r3, #0]
 8020de0:	e044      	b.n	8020e6c <USB_EPStartXfer+0xd24>
 8020de2:	683b      	ldr	r3, [r7, #0]
 8020de4:	691b      	ldr	r3, [r3, #16]
 8020de6:	085b      	lsrs	r3, r3, #1
 8020de8:	21e4      	movs	r1, #228	@ 0xe4
 8020dea:	187a      	adds	r2, r7, r1
 8020dec:	6013      	str	r3, [r2, #0]
 8020dee:	683b      	ldr	r3, [r7, #0]
 8020df0:	691b      	ldr	r3, [r3, #16]
 8020df2:	2201      	movs	r2, #1
 8020df4:	4013      	ands	r3, r2
 8020df6:	d004      	beq.n	8020e02 <USB_EPStartXfer+0xcba>
 8020df8:	187b      	adds	r3, r7, r1
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	3301      	adds	r3, #1
 8020dfe:	187a      	adds	r2, r7, r1
 8020e00:	6013      	str	r3, [r2, #0]
 8020e02:	21a8      	movs	r1, #168	@ 0xa8
 8020e04:	187b      	adds	r3, r7, r1
 8020e06:	681b      	ldr	r3, [r3, #0]
 8020e08:	881b      	ldrh	r3, [r3, #0]
 8020e0a:	b29a      	uxth	r2, r3
 8020e0c:	23e4      	movs	r3, #228	@ 0xe4
 8020e0e:	18fb      	adds	r3, r7, r3
 8020e10:	681b      	ldr	r3, [r3, #0]
 8020e12:	b29b      	uxth	r3, r3
 8020e14:	029b      	lsls	r3, r3, #10
 8020e16:	b29b      	uxth	r3, r3
 8020e18:	4313      	orrs	r3, r2
 8020e1a:	b29a      	uxth	r2, r3
 8020e1c:	187b      	adds	r3, r7, r1
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	801a      	strh	r2, [r3, #0]
 8020e22:	e023      	b.n	8020e6c <USB_EPStartXfer+0xd24>
 8020e24:	683b      	ldr	r3, [r7, #0]
 8020e26:	785b      	ldrb	r3, [r3, #1]
 8020e28:	2b01      	cmp	r3, #1
 8020e2a:	d11f      	bne.n	8020e6c <USB_EPStartXfer+0xd24>
 8020e2c:	687b      	ldr	r3, [r7, #4]
 8020e2e:	21b4      	movs	r1, #180	@ 0xb4
 8020e30:	187a      	adds	r2, r7, r1
 8020e32:	6013      	str	r3, [r2, #0]
 8020e34:	687b      	ldr	r3, [r7, #4]
 8020e36:	2250      	movs	r2, #80	@ 0x50
 8020e38:	5a9b      	ldrh	r3, [r3, r2]
 8020e3a:	b29b      	uxth	r3, r3
 8020e3c:	001a      	movs	r2, r3
 8020e3e:	187b      	adds	r3, r7, r1
 8020e40:	681b      	ldr	r3, [r3, #0]
 8020e42:	189b      	adds	r3, r3, r2
 8020e44:	187a      	adds	r2, r7, r1
 8020e46:	6013      	str	r3, [r2, #0]
 8020e48:	683b      	ldr	r3, [r7, #0]
 8020e4a:	781b      	ldrb	r3, [r3, #0]
 8020e4c:	00da      	lsls	r2, r3, #3
 8020e4e:	187b      	adds	r3, r7, r1
 8020e50:	681b      	ldr	r3, [r3, #0]
 8020e52:	18d3      	adds	r3, r2, r3
 8020e54:	4a4a      	ldr	r2, [pc, #296]	@ (8020f80 <USB_EPStartXfer+0xe38>)
 8020e56:	4694      	mov	ip, r2
 8020e58:	4463      	add	r3, ip
 8020e5a:	21b0      	movs	r1, #176	@ 0xb0
 8020e5c:	187a      	adds	r2, r7, r1
 8020e5e:	6013      	str	r3, [r2, #0]
 8020e60:	683b      	ldr	r3, [r7, #0]
 8020e62:	691b      	ldr	r3, [r3, #16]
 8020e64:	b29a      	uxth	r2, r3
 8020e66:	187b      	adds	r3, r7, r1
 8020e68:	681b      	ldr	r3, [r3, #0]
 8020e6a:	801a      	strh	r2, [r3, #0]
 8020e6c:	687b      	ldr	r3, [r7, #4]
 8020e6e:	22a4      	movs	r2, #164	@ 0xa4
 8020e70:	18ba      	adds	r2, r7, r2
 8020e72:	6013      	str	r3, [r2, #0]
 8020e74:	683b      	ldr	r3, [r7, #0]
 8020e76:	785b      	ldrb	r3, [r3, #1]
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d000      	beq.n	8020e7e <USB_EPStartXfer+0xd36>
 8020e7c:	e082      	b.n	8020f84 <USB_EPStartXfer+0xe3c>
 8020e7e:	687b      	ldr	r3, [r7, #4]
 8020e80:	219c      	movs	r1, #156	@ 0x9c
 8020e82:	187a      	adds	r2, r7, r1
 8020e84:	6013      	str	r3, [r2, #0]
 8020e86:	687b      	ldr	r3, [r7, #4]
 8020e88:	2250      	movs	r2, #80	@ 0x50
 8020e8a:	5a9b      	ldrh	r3, [r3, r2]
 8020e8c:	b29b      	uxth	r3, r3
 8020e8e:	001a      	movs	r2, r3
 8020e90:	187b      	adds	r3, r7, r1
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	189b      	adds	r3, r3, r2
 8020e96:	187a      	adds	r2, r7, r1
 8020e98:	6013      	str	r3, [r2, #0]
 8020e9a:	683b      	ldr	r3, [r7, #0]
 8020e9c:	781b      	ldrb	r3, [r3, #0]
 8020e9e:	00da      	lsls	r2, r3, #3
 8020ea0:	187b      	adds	r3, r7, r1
 8020ea2:	681b      	ldr	r3, [r3, #0]
 8020ea4:	18d3      	adds	r3, r2, r3
 8020ea6:	4a34      	ldr	r2, [pc, #208]	@ (8020f78 <USB_EPStartXfer+0xe30>)
 8020ea8:	4694      	mov	ip, r2
 8020eaa:	4463      	add	r3, ip
 8020eac:	2198      	movs	r1, #152	@ 0x98
 8020eae:	187a      	adds	r2, r7, r1
 8020eb0:	6013      	str	r3, [r2, #0]
 8020eb2:	187b      	adds	r3, r7, r1
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	881b      	ldrh	r3, [r3, #0]
 8020eb8:	b29b      	uxth	r3, r3
 8020eba:	059b      	lsls	r3, r3, #22
 8020ebc:	0d9b      	lsrs	r3, r3, #22
 8020ebe:	b29a      	uxth	r2, r3
 8020ec0:	187b      	adds	r3, r7, r1
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	801a      	strh	r2, [r3, #0]
 8020ec6:	683b      	ldr	r3, [r7, #0]
 8020ec8:	691b      	ldr	r3, [r3, #16]
 8020eca:	2b3e      	cmp	r3, #62	@ 0x3e
 8020ecc:	d923      	bls.n	8020f16 <USB_EPStartXfer+0xdce>
 8020ece:	683b      	ldr	r3, [r7, #0]
 8020ed0:	691b      	ldr	r3, [r3, #16]
 8020ed2:	095b      	lsrs	r3, r3, #5
 8020ed4:	21e0      	movs	r1, #224	@ 0xe0
 8020ed6:	187a      	adds	r2, r7, r1
 8020ed8:	6013      	str	r3, [r2, #0]
 8020eda:	683b      	ldr	r3, [r7, #0]
 8020edc:	691b      	ldr	r3, [r3, #16]
 8020ede:	221f      	movs	r2, #31
 8020ee0:	4013      	ands	r3, r2
 8020ee2:	d104      	bne.n	8020eee <USB_EPStartXfer+0xda6>
 8020ee4:	187b      	adds	r3, r7, r1
 8020ee6:	681b      	ldr	r3, [r3, #0]
 8020ee8:	3b01      	subs	r3, #1
 8020eea:	187a      	adds	r2, r7, r1
 8020eec:	6013      	str	r3, [r2, #0]
 8020eee:	2198      	movs	r1, #152	@ 0x98
 8020ef0:	187b      	adds	r3, r7, r1
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	881b      	ldrh	r3, [r3, #0]
 8020ef6:	b29a      	uxth	r2, r3
 8020ef8:	23e0      	movs	r3, #224	@ 0xe0
 8020efa:	18fb      	adds	r3, r7, r3
 8020efc:	681b      	ldr	r3, [r3, #0]
 8020efe:	b29b      	uxth	r3, r3
 8020f00:	029b      	lsls	r3, r3, #10
 8020f02:	b29b      	uxth	r3, r3
 8020f04:	4313      	orrs	r3, r2
 8020f06:	b29b      	uxth	r3, r3
 8020f08:	4a1c      	ldr	r2, [pc, #112]	@ (8020f7c <USB_EPStartXfer+0xe34>)
 8020f0a:	4313      	orrs	r3, r2
 8020f0c:	b29a      	uxth	r2, r3
 8020f0e:	187b      	adds	r3, r7, r1
 8020f10:	681b      	ldr	r3, [r3, #0]
 8020f12:	801a      	strh	r2, [r3, #0]
 8020f14:	e057      	b.n	8020fc6 <USB_EPStartXfer+0xe7e>
 8020f16:	683b      	ldr	r3, [r7, #0]
 8020f18:	691b      	ldr	r3, [r3, #16]
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	d10b      	bne.n	8020f36 <USB_EPStartXfer+0xdee>
 8020f1e:	2198      	movs	r1, #152	@ 0x98
 8020f20:	187b      	adds	r3, r7, r1
 8020f22:	681b      	ldr	r3, [r3, #0]
 8020f24:	881b      	ldrh	r3, [r3, #0]
 8020f26:	b29b      	uxth	r3, r3
 8020f28:	4a14      	ldr	r2, [pc, #80]	@ (8020f7c <USB_EPStartXfer+0xe34>)
 8020f2a:	4313      	orrs	r3, r2
 8020f2c:	b29a      	uxth	r2, r3
 8020f2e:	187b      	adds	r3, r7, r1
 8020f30:	681b      	ldr	r3, [r3, #0]
 8020f32:	801a      	strh	r2, [r3, #0]
 8020f34:	e047      	b.n	8020fc6 <USB_EPStartXfer+0xe7e>
 8020f36:	683b      	ldr	r3, [r7, #0]
 8020f38:	691b      	ldr	r3, [r3, #16]
 8020f3a:	085b      	lsrs	r3, r3, #1
 8020f3c:	21e0      	movs	r1, #224	@ 0xe0
 8020f3e:	187a      	adds	r2, r7, r1
 8020f40:	6013      	str	r3, [r2, #0]
 8020f42:	683b      	ldr	r3, [r7, #0]
 8020f44:	691b      	ldr	r3, [r3, #16]
 8020f46:	2201      	movs	r2, #1
 8020f48:	4013      	ands	r3, r2
 8020f4a:	d004      	beq.n	8020f56 <USB_EPStartXfer+0xe0e>
 8020f4c:	187b      	adds	r3, r7, r1
 8020f4e:	681b      	ldr	r3, [r3, #0]
 8020f50:	3301      	adds	r3, #1
 8020f52:	187a      	adds	r2, r7, r1
 8020f54:	6013      	str	r3, [r2, #0]
 8020f56:	2198      	movs	r1, #152	@ 0x98
 8020f58:	187b      	adds	r3, r7, r1
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	881b      	ldrh	r3, [r3, #0]
 8020f5e:	b29a      	uxth	r2, r3
 8020f60:	23e0      	movs	r3, #224	@ 0xe0
 8020f62:	18fb      	adds	r3, r7, r3
 8020f64:	681b      	ldr	r3, [r3, #0]
 8020f66:	b29b      	uxth	r3, r3
 8020f68:	029b      	lsls	r3, r3, #10
 8020f6a:	b29b      	uxth	r3, r3
 8020f6c:	4313      	orrs	r3, r2
 8020f6e:	b29a      	uxth	r2, r3
 8020f70:	187b      	adds	r3, r7, r1
 8020f72:	681b      	ldr	r3, [r3, #0]
 8020f74:	801a      	strh	r2, [r3, #0]
 8020f76:	e026      	b.n	8020fc6 <USB_EPStartXfer+0xe7e>
 8020f78:	00000406 	.word	0x00000406
 8020f7c:	ffff8000 	.word	0xffff8000
 8020f80:	00000402 	.word	0x00000402
 8020f84:	683b      	ldr	r3, [r7, #0]
 8020f86:	785b      	ldrb	r3, [r3, #1]
 8020f88:	2b01      	cmp	r3, #1
 8020f8a:	d11c      	bne.n	8020fc6 <USB_EPStartXfer+0xe7e>
 8020f8c:	687b      	ldr	r3, [r7, #4]
 8020f8e:	2250      	movs	r2, #80	@ 0x50
 8020f90:	5a9b      	ldrh	r3, [r3, r2]
 8020f92:	b29b      	uxth	r3, r3
 8020f94:	001a      	movs	r2, r3
 8020f96:	21a4      	movs	r1, #164	@ 0xa4
 8020f98:	187b      	adds	r3, r7, r1
 8020f9a:	681b      	ldr	r3, [r3, #0]
 8020f9c:	189b      	adds	r3, r3, r2
 8020f9e:	187a      	adds	r2, r7, r1
 8020fa0:	6013      	str	r3, [r2, #0]
 8020fa2:	683b      	ldr	r3, [r7, #0]
 8020fa4:	781b      	ldrb	r3, [r3, #0]
 8020fa6:	00da      	lsls	r2, r3, #3
 8020fa8:	187b      	adds	r3, r7, r1
 8020faa:	681b      	ldr	r3, [r3, #0]
 8020fac:	18d3      	adds	r3, r2, r3
 8020fae:	4ad2      	ldr	r2, [pc, #840]	@ (80212f8 <USB_EPStartXfer+0x11b0>)
 8020fb0:	4694      	mov	ip, r2
 8020fb2:	4463      	add	r3, ip
 8020fb4:	21a0      	movs	r1, #160	@ 0xa0
 8020fb6:	187a      	adds	r2, r7, r1
 8020fb8:	6013      	str	r3, [r2, #0]
 8020fba:	683b      	ldr	r3, [r7, #0]
 8020fbc:	691b      	ldr	r3, [r3, #16]
 8020fbe:	b29a      	uxth	r2, r3
 8020fc0:	187b      	adds	r3, r7, r1
 8020fc2:	681b      	ldr	r3, [r3, #0]
 8020fc4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020fc6:	683b      	ldr	r3, [r7, #0]
 8020fc8:	69db      	ldr	r3, [r3, #28]
 8020fca:	2b00      	cmp	r3, #0
 8020fcc:	d100      	bne.n	8020fd0 <USB_EPStartXfer+0xe88>
 8020fce:	e1c2      	b.n	8021356 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020fd0:	687a      	ldr	r2, [r7, #4]
 8020fd2:	683b      	ldr	r3, [r7, #0]
 8020fd4:	781b      	ldrb	r3, [r3, #0]
 8020fd6:	009b      	lsls	r3, r3, #2
 8020fd8:	18d2      	adds	r2, r2, r3
 8020fda:	2196      	movs	r1, #150	@ 0x96
 8020fdc:	187b      	adds	r3, r7, r1
 8020fde:	8812      	ldrh	r2, [r2, #0]
 8020fe0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020fe2:	187b      	adds	r3, r7, r1
 8020fe4:	881a      	ldrh	r2, [r3, #0]
 8020fe6:	2380      	movs	r3, #128	@ 0x80
 8020fe8:	01db      	lsls	r3, r3, #7
 8020fea:	4013      	ands	r3, r2
 8020fec:	d004      	beq.n	8020ff8 <USB_EPStartXfer+0xeb0>
 8020fee:	187b      	adds	r3, r7, r1
 8020ff0:	881b      	ldrh	r3, [r3, #0]
 8020ff2:	2240      	movs	r2, #64	@ 0x40
 8020ff4:	4013      	ands	r3, r2
 8020ff6:	d10d      	bne.n	8021014 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020ff8:	2196      	movs	r1, #150	@ 0x96
 8020ffa:	187b      	adds	r3, r7, r1
 8020ffc:	881a      	ldrh	r2, [r3, #0]
 8020ffe:	2380      	movs	r3, #128	@ 0x80
 8021000:	01db      	lsls	r3, r3, #7
 8021002:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8021004:	d000      	beq.n	8021008 <USB_EPStartXfer+0xec0>
 8021006:	e1a6      	b.n	8021356 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8021008:	187b      	adds	r3, r7, r1
 802100a:	881b      	ldrh	r3, [r3, #0]
 802100c:	2240      	movs	r2, #64	@ 0x40
 802100e:	4013      	ands	r3, r2
 8021010:	d000      	beq.n	8021014 <USB_EPStartXfer+0xecc>
 8021012:	e1a0      	b.n	8021356 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8021014:	687a      	ldr	r2, [r7, #4]
 8021016:	683b      	ldr	r3, [r7, #0]
 8021018:	781b      	ldrb	r3, [r3, #0]
 802101a:	009b      	lsls	r3, r3, #2
 802101c:	18d3      	adds	r3, r2, r3
 802101e:	881b      	ldrh	r3, [r3, #0]
 8021020:	b29a      	uxth	r2, r3
 8021022:	2094      	movs	r0, #148	@ 0x94
 8021024:	183b      	adds	r3, r7, r0
 8021026:	49b5      	ldr	r1, [pc, #724]	@ (80212fc <USB_EPStartXfer+0x11b4>)
 8021028:	400a      	ands	r2, r1
 802102a:	801a      	strh	r2, [r3, #0]
 802102c:	687a      	ldr	r2, [r7, #4]
 802102e:	683b      	ldr	r3, [r7, #0]
 8021030:	781b      	ldrb	r3, [r3, #0]
 8021032:	009b      	lsls	r3, r3, #2
 8021034:	18d3      	adds	r3, r2, r3
 8021036:	183a      	adds	r2, r7, r0
 8021038:	8812      	ldrh	r2, [r2, #0]
 802103a:	49b1      	ldr	r1, [pc, #708]	@ (8021300 <USB_EPStartXfer+0x11b8>)
 802103c:	430a      	orrs	r2, r1
 802103e:	b292      	uxth	r2, r2
 8021040:	801a      	strh	r2, [r3, #0]
 8021042:	e188      	b.n	8021356 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8021044:	683b      	ldr	r3, [r7, #0]
 8021046:	78db      	ldrb	r3, [r3, #3]
 8021048:	2b01      	cmp	r3, #1
 802104a:	d000      	beq.n	802104e <USB_EPStartXfer+0xf06>
 802104c:	e181      	b.n	8021352 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 802104e:	683b      	ldr	r3, [r7, #0]
 8021050:	699a      	ldr	r2, [r3, #24]
 8021052:	683b      	ldr	r3, [r7, #0]
 8021054:	691b      	ldr	r3, [r3, #16]
 8021056:	429a      	cmp	r2, r3
 8021058:	d90d      	bls.n	8021076 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 802105a:	683b      	ldr	r3, [r7, #0]
 802105c:	691b      	ldr	r3, [r3, #16]
 802105e:	1d7a      	adds	r2, r7, #5
 8021060:	32ff      	adds	r2, #255	@ 0xff
 8021062:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8021064:	683b      	ldr	r3, [r7, #0]
 8021066:	699a      	ldr	r2, [r3, #24]
 8021068:	1d7b      	adds	r3, r7, #5
 802106a:	33ff      	adds	r3, #255	@ 0xff
 802106c:	681b      	ldr	r3, [r3, #0]
 802106e:	1ad2      	subs	r2, r2, r3
 8021070:	683b      	ldr	r3, [r7, #0]
 8021072:	619a      	str	r2, [r3, #24]
 8021074:	e007      	b.n	8021086 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8021076:	683b      	ldr	r3, [r7, #0]
 8021078:	699b      	ldr	r3, [r3, #24]
 802107a:	1d7a      	adds	r2, r7, #5
 802107c:	32ff      	adds	r2, #255	@ 0xff
 802107e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8021080:	683b      	ldr	r3, [r7, #0]
 8021082:	2200      	movs	r2, #0
 8021084:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8021086:	683b      	ldr	r3, [r7, #0]
 8021088:	785b      	ldrb	r3, [r3, #1]
 802108a:	2b00      	cmp	r3, #0
 802108c:	d000      	beq.n	8021090 <USB_EPStartXfer+0xf48>
 802108e:	e082      	b.n	8021196 <USB_EPStartXfer+0x104e>
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	21cc      	movs	r1, #204	@ 0xcc
 8021094:	187a      	adds	r2, r7, r1
 8021096:	6013      	str	r3, [r2, #0]
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	2250      	movs	r2, #80	@ 0x50
 802109c:	5a9b      	ldrh	r3, [r3, r2]
 802109e:	b29b      	uxth	r3, r3
 80210a0:	001a      	movs	r2, r3
 80210a2:	187b      	adds	r3, r7, r1
 80210a4:	681b      	ldr	r3, [r3, #0]
 80210a6:	189b      	adds	r3, r3, r2
 80210a8:	187a      	adds	r2, r7, r1
 80210aa:	6013      	str	r3, [r2, #0]
 80210ac:	683b      	ldr	r3, [r7, #0]
 80210ae:	781b      	ldrb	r3, [r3, #0]
 80210b0:	00da      	lsls	r2, r3, #3
 80210b2:	187b      	adds	r3, r7, r1
 80210b4:	681b      	ldr	r3, [r3, #0]
 80210b6:	18d3      	adds	r3, r2, r3
 80210b8:	4a92      	ldr	r2, [pc, #584]	@ (8021304 <USB_EPStartXfer+0x11bc>)
 80210ba:	4694      	mov	ip, r2
 80210bc:	4463      	add	r3, ip
 80210be:	21c8      	movs	r1, #200	@ 0xc8
 80210c0:	187a      	adds	r2, r7, r1
 80210c2:	6013      	str	r3, [r2, #0]
 80210c4:	187b      	adds	r3, r7, r1
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	881b      	ldrh	r3, [r3, #0]
 80210ca:	b29b      	uxth	r3, r3
 80210cc:	059b      	lsls	r3, r3, #22
 80210ce:	0d9b      	lsrs	r3, r3, #22
 80210d0:	b29a      	uxth	r2, r3
 80210d2:	187b      	adds	r3, r7, r1
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	801a      	strh	r2, [r3, #0]
 80210d8:	1d7b      	adds	r3, r7, #5
 80210da:	33ff      	adds	r3, #255	@ 0xff
 80210dc:	681b      	ldr	r3, [r3, #0]
 80210de:	2b3e      	cmp	r3, #62	@ 0x3e
 80210e0:	d925      	bls.n	802112e <USB_EPStartXfer+0xfe6>
 80210e2:	1d7b      	adds	r3, r7, #5
 80210e4:	33ff      	adds	r3, #255	@ 0xff
 80210e6:	681b      	ldr	r3, [r3, #0]
 80210e8:	095b      	lsrs	r3, r3, #5
 80210ea:	21dc      	movs	r1, #220	@ 0xdc
 80210ec:	187a      	adds	r2, r7, r1
 80210ee:	6013      	str	r3, [r2, #0]
 80210f0:	1d7b      	adds	r3, r7, #5
 80210f2:	33ff      	adds	r3, #255	@ 0xff
 80210f4:	681b      	ldr	r3, [r3, #0]
 80210f6:	221f      	movs	r2, #31
 80210f8:	4013      	ands	r3, r2
 80210fa:	d104      	bne.n	8021106 <USB_EPStartXfer+0xfbe>
 80210fc:	187b      	adds	r3, r7, r1
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	3b01      	subs	r3, #1
 8021102:	187a      	adds	r2, r7, r1
 8021104:	6013      	str	r3, [r2, #0]
 8021106:	21c8      	movs	r1, #200	@ 0xc8
 8021108:	187b      	adds	r3, r7, r1
 802110a:	681b      	ldr	r3, [r3, #0]
 802110c:	881b      	ldrh	r3, [r3, #0]
 802110e:	b29a      	uxth	r2, r3
 8021110:	23dc      	movs	r3, #220	@ 0xdc
 8021112:	18fb      	adds	r3, r7, r3
 8021114:	681b      	ldr	r3, [r3, #0]
 8021116:	b29b      	uxth	r3, r3
 8021118:	029b      	lsls	r3, r3, #10
 802111a:	b29b      	uxth	r3, r3
 802111c:	4313      	orrs	r3, r2
 802111e:	b29b      	uxth	r3, r3
 8021120:	4a79      	ldr	r2, [pc, #484]	@ (8021308 <USB_EPStartXfer+0x11c0>)
 8021122:	4313      	orrs	r3, r2
 8021124:	b29a      	uxth	r2, r3
 8021126:	187b      	adds	r3, r7, r1
 8021128:	681b      	ldr	r3, [r3, #0]
 802112a:	801a      	strh	r2, [r3, #0]
 802112c:	e058      	b.n	80211e0 <USB_EPStartXfer+0x1098>
 802112e:	1d7b      	adds	r3, r7, #5
 8021130:	33ff      	adds	r3, #255	@ 0xff
 8021132:	681b      	ldr	r3, [r3, #0]
 8021134:	2b00      	cmp	r3, #0
 8021136:	d10b      	bne.n	8021150 <USB_EPStartXfer+0x1008>
 8021138:	21c8      	movs	r1, #200	@ 0xc8
 802113a:	187b      	adds	r3, r7, r1
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	881b      	ldrh	r3, [r3, #0]
 8021140:	b29b      	uxth	r3, r3
 8021142:	4a71      	ldr	r2, [pc, #452]	@ (8021308 <USB_EPStartXfer+0x11c0>)
 8021144:	4313      	orrs	r3, r2
 8021146:	b29a      	uxth	r2, r3
 8021148:	187b      	adds	r3, r7, r1
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	801a      	strh	r2, [r3, #0]
 802114e:	e047      	b.n	80211e0 <USB_EPStartXfer+0x1098>
 8021150:	1d7b      	adds	r3, r7, #5
 8021152:	33ff      	adds	r3, #255	@ 0xff
 8021154:	681b      	ldr	r3, [r3, #0]
 8021156:	085b      	lsrs	r3, r3, #1
 8021158:	21dc      	movs	r1, #220	@ 0xdc
 802115a:	187a      	adds	r2, r7, r1
 802115c:	6013      	str	r3, [r2, #0]
 802115e:	1d7b      	adds	r3, r7, #5
 8021160:	33ff      	adds	r3, #255	@ 0xff
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	2201      	movs	r2, #1
 8021166:	4013      	ands	r3, r2
 8021168:	d004      	beq.n	8021174 <USB_EPStartXfer+0x102c>
 802116a:	187b      	adds	r3, r7, r1
 802116c:	681b      	ldr	r3, [r3, #0]
 802116e:	3301      	adds	r3, #1
 8021170:	187a      	adds	r2, r7, r1
 8021172:	6013      	str	r3, [r2, #0]
 8021174:	21c8      	movs	r1, #200	@ 0xc8
 8021176:	187b      	adds	r3, r7, r1
 8021178:	681b      	ldr	r3, [r3, #0]
 802117a:	881b      	ldrh	r3, [r3, #0]
 802117c:	b29a      	uxth	r2, r3
 802117e:	23dc      	movs	r3, #220	@ 0xdc
 8021180:	18fb      	adds	r3, r7, r3
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	b29b      	uxth	r3, r3
 8021186:	029b      	lsls	r3, r3, #10
 8021188:	b29b      	uxth	r3, r3
 802118a:	4313      	orrs	r3, r2
 802118c:	b29a      	uxth	r2, r3
 802118e:	187b      	adds	r3, r7, r1
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	801a      	strh	r2, [r3, #0]
 8021194:	e024      	b.n	80211e0 <USB_EPStartXfer+0x1098>
 8021196:	683b      	ldr	r3, [r7, #0]
 8021198:	785b      	ldrb	r3, [r3, #1]
 802119a:	2b01      	cmp	r3, #1
 802119c:	d120      	bne.n	80211e0 <USB_EPStartXfer+0x1098>
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	21d4      	movs	r1, #212	@ 0xd4
 80211a2:	187a      	adds	r2, r7, r1
 80211a4:	6013      	str	r3, [r2, #0]
 80211a6:	687b      	ldr	r3, [r7, #4]
 80211a8:	2250      	movs	r2, #80	@ 0x50
 80211aa:	5a9b      	ldrh	r3, [r3, r2]
 80211ac:	b29b      	uxth	r3, r3
 80211ae:	001a      	movs	r2, r3
 80211b0:	187b      	adds	r3, r7, r1
 80211b2:	681b      	ldr	r3, [r3, #0]
 80211b4:	189b      	adds	r3, r3, r2
 80211b6:	187a      	adds	r2, r7, r1
 80211b8:	6013      	str	r3, [r2, #0]
 80211ba:	683b      	ldr	r3, [r7, #0]
 80211bc:	781b      	ldrb	r3, [r3, #0]
 80211be:	00da      	lsls	r2, r3, #3
 80211c0:	187b      	adds	r3, r7, r1
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	18d3      	adds	r3, r2, r3
 80211c6:	4a4f      	ldr	r2, [pc, #316]	@ (8021304 <USB_EPStartXfer+0x11bc>)
 80211c8:	4694      	mov	ip, r2
 80211ca:	4463      	add	r3, ip
 80211cc:	21d0      	movs	r1, #208	@ 0xd0
 80211ce:	187a      	adds	r2, r7, r1
 80211d0:	6013      	str	r3, [r2, #0]
 80211d2:	1d7b      	adds	r3, r7, #5
 80211d4:	33ff      	adds	r3, #255	@ 0xff
 80211d6:	681b      	ldr	r3, [r3, #0]
 80211d8:	b29a      	uxth	r2, r3
 80211da:	187b      	adds	r3, r7, r1
 80211dc:	681b      	ldr	r3, [r3, #0]
 80211de:	801a      	strh	r2, [r3, #0]
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	22c4      	movs	r2, #196	@ 0xc4
 80211e4:	18ba      	adds	r2, r7, r2
 80211e6:	6013      	str	r3, [r2, #0]
 80211e8:	683b      	ldr	r3, [r7, #0]
 80211ea:	785b      	ldrb	r3, [r3, #1]
 80211ec:	2b00      	cmp	r3, #0
 80211ee:	d000      	beq.n	80211f2 <USB_EPStartXfer+0x10aa>
 80211f0:	e08c      	b.n	802130c <USB_EPStartXfer+0x11c4>
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	21bc      	movs	r1, #188	@ 0xbc
 80211f6:	187a      	adds	r2, r7, r1
 80211f8:	6013      	str	r3, [r2, #0]
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	2250      	movs	r2, #80	@ 0x50
 80211fe:	5a9b      	ldrh	r3, [r3, r2]
 8021200:	b29b      	uxth	r3, r3
 8021202:	001a      	movs	r2, r3
 8021204:	187b      	adds	r3, r7, r1
 8021206:	681b      	ldr	r3, [r3, #0]
 8021208:	189b      	adds	r3, r3, r2
 802120a:	187a      	adds	r2, r7, r1
 802120c:	6013      	str	r3, [r2, #0]
 802120e:	683b      	ldr	r3, [r7, #0]
 8021210:	781b      	ldrb	r3, [r3, #0]
 8021212:	00da      	lsls	r2, r3, #3
 8021214:	187b      	adds	r3, r7, r1
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	18d3      	adds	r3, r2, r3
 802121a:	4a37      	ldr	r2, [pc, #220]	@ (80212f8 <USB_EPStartXfer+0x11b0>)
 802121c:	4694      	mov	ip, r2
 802121e:	4463      	add	r3, ip
 8021220:	21b8      	movs	r1, #184	@ 0xb8
 8021222:	187a      	adds	r2, r7, r1
 8021224:	6013      	str	r3, [r2, #0]
 8021226:	187b      	adds	r3, r7, r1
 8021228:	681b      	ldr	r3, [r3, #0]
 802122a:	881b      	ldrh	r3, [r3, #0]
 802122c:	b29b      	uxth	r3, r3
 802122e:	059b      	lsls	r3, r3, #22
 8021230:	0d9b      	lsrs	r3, r3, #22
 8021232:	b29a      	uxth	r2, r3
 8021234:	187b      	adds	r3, r7, r1
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	801a      	strh	r2, [r3, #0]
 802123a:	1d7b      	adds	r3, r7, #5
 802123c:	33ff      	adds	r3, #255	@ 0xff
 802123e:	681b      	ldr	r3, [r3, #0]
 8021240:	2b3e      	cmp	r3, #62	@ 0x3e
 8021242:	d925      	bls.n	8021290 <USB_EPStartXfer+0x1148>
 8021244:	1d7b      	adds	r3, r7, #5
 8021246:	33ff      	adds	r3, #255	@ 0xff
 8021248:	681b      	ldr	r3, [r3, #0]
 802124a:	095b      	lsrs	r3, r3, #5
 802124c:	21d8      	movs	r1, #216	@ 0xd8
 802124e:	187a      	adds	r2, r7, r1
 8021250:	6013      	str	r3, [r2, #0]
 8021252:	1d7b      	adds	r3, r7, #5
 8021254:	33ff      	adds	r3, #255	@ 0xff
 8021256:	681b      	ldr	r3, [r3, #0]
 8021258:	221f      	movs	r2, #31
 802125a:	4013      	ands	r3, r2
 802125c:	d104      	bne.n	8021268 <USB_EPStartXfer+0x1120>
 802125e:	187b      	adds	r3, r7, r1
 8021260:	681b      	ldr	r3, [r3, #0]
 8021262:	3b01      	subs	r3, #1
 8021264:	187a      	adds	r2, r7, r1
 8021266:	6013      	str	r3, [r2, #0]
 8021268:	21b8      	movs	r1, #184	@ 0xb8
 802126a:	187b      	adds	r3, r7, r1
 802126c:	681b      	ldr	r3, [r3, #0]
 802126e:	881b      	ldrh	r3, [r3, #0]
 8021270:	b29a      	uxth	r2, r3
 8021272:	23d8      	movs	r3, #216	@ 0xd8
 8021274:	18fb      	adds	r3, r7, r3
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	b29b      	uxth	r3, r3
 802127a:	029b      	lsls	r3, r3, #10
 802127c:	b29b      	uxth	r3, r3
 802127e:	4313      	orrs	r3, r2
 8021280:	b29b      	uxth	r3, r3
 8021282:	4a21      	ldr	r2, [pc, #132]	@ (8021308 <USB_EPStartXfer+0x11c0>)
 8021284:	4313      	orrs	r3, r2
 8021286:	b29a      	uxth	r2, r3
 8021288:	187b      	adds	r3, r7, r1
 802128a:	681b      	ldr	r3, [r3, #0]
 802128c:	801a      	strh	r2, [r3, #0]
 802128e:	e062      	b.n	8021356 <USB_EPStartXfer+0x120e>
 8021290:	1d7b      	adds	r3, r7, #5
 8021292:	33ff      	adds	r3, #255	@ 0xff
 8021294:	681b      	ldr	r3, [r3, #0]
 8021296:	2b00      	cmp	r3, #0
 8021298:	d10b      	bne.n	80212b2 <USB_EPStartXfer+0x116a>
 802129a:	21b8      	movs	r1, #184	@ 0xb8
 802129c:	187b      	adds	r3, r7, r1
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	881b      	ldrh	r3, [r3, #0]
 80212a2:	b29b      	uxth	r3, r3
 80212a4:	4a18      	ldr	r2, [pc, #96]	@ (8021308 <USB_EPStartXfer+0x11c0>)
 80212a6:	4313      	orrs	r3, r2
 80212a8:	b29a      	uxth	r2, r3
 80212aa:	187b      	adds	r3, r7, r1
 80212ac:	681b      	ldr	r3, [r3, #0]
 80212ae:	801a      	strh	r2, [r3, #0]
 80212b0:	e051      	b.n	8021356 <USB_EPStartXfer+0x120e>
 80212b2:	1d7b      	adds	r3, r7, #5
 80212b4:	33ff      	adds	r3, #255	@ 0xff
 80212b6:	681b      	ldr	r3, [r3, #0]
 80212b8:	085b      	lsrs	r3, r3, #1
 80212ba:	21d8      	movs	r1, #216	@ 0xd8
 80212bc:	187a      	adds	r2, r7, r1
 80212be:	6013      	str	r3, [r2, #0]
 80212c0:	1d7b      	adds	r3, r7, #5
 80212c2:	33ff      	adds	r3, #255	@ 0xff
 80212c4:	681b      	ldr	r3, [r3, #0]
 80212c6:	2201      	movs	r2, #1
 80212c8:	4013      	ands	r3, r2
 80212ca:	d004      	beq.n	80212d6 <USB_EPStartXfer+0x118e>
 80212cc:	187b      	adds	r3, r7, r1
 80212ce:	681b      	ldr	r3, [r3, #0]
 80212d0:	3301      	adds	r3, #1
 80212d2:	187a      	adds	r2, r7, r1
 80212d4:	6013      	str	r3, [r2, #0]
 80212d6:	21b8      	movs	r1, #184	@ 0xb8
 80212d8:	187b      	adds	r3, r7, r1
 80212da:	681b      	ldr	r3, [r3, #0]
 80212dc:	881b      	ldrh	r3, [r3, #0]
 80212de:	b29a      	uxth	r2, r3
 80212e0:	23d8      	movs	r3, #216	@ 0xd8
 80212e2:	18fb      	adds	r3, r7, r3
 80212e4:	681b      	ldr	r3, [r3, #0]
 80212e6:	b29b      	uxth	r3, r3
 80212e8:	029b      	lsls	r3, r3, #10
 80212ea:	b29b      	uxth	r3, r3
 80212ec:	4313      	orrs	r3, r2
 80212ee:	b29a      	uxth	r2, r3
 80212f0:	187b      	adds	r3, r7, r1
 80212f2:	681b      	ldr	r3, [r3, #0]
 80212f4:	801a      	strh	r2, [r3, #0]
 80212f6:	e02e      	b.n	8021356 <USB_EPStartXfer+0x120e>
 80212f8:	00000406 	.word	0x00000406
 80212fc:	ffff8f8f 	.word	0xffff8f8f
 8021300:	ffff80c0 	.word	0xffff80c0
 8021304:	00000402 	.word	0x00000402
 8021308:	ffff8000 	.word	0xffff8000
 802130c:	683b      	ldr	r3, [r7, #0]
 802130e:	785b      	ldrb	r3, [r3, #1]
 8021310:	2b01      	cmp	r3, #1
 8021312:	d120      	bne.n	8021356 <USB_EPStartXfer+0x120e>
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	2250      	movs	r2, #80	@ 0x50
 8021318:	5a9b      	ldrh	r3, [r3, r2]
 802131a:	b29b      	uxth	r3, r3
 802131c:	001a      	movs	r2, r3
 802131e:	21c4      	movs	r1, #196	@ 0xc4
 8021320:	187b      	adds	r3, r7, r1
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	189b      	adds	r3, r3, r2
 8021326:	187a      	adds	r2, r7, r1
 8021328:	6013      	str	r3, [r2, #0]
 802132a:	683b      	ldr	r3, [r7, #0]
 802132c:	781b      	ldrb	r3, [r3, #0]
 802132e:	00da      	lsls	r2, r3, #3
 8021330:	187b      	adds	r3, r7, r1
 8021332:	681b      	ldr	r3, [r3, #0]
 8021334:	18d3      	adds	r3, r2, r3
 8021336:	4a1d      	ldr	r2, [pc, #116]	@ (80213ac <USB_EPStartXfer+0x1264>)
 8021338:	4694      	mov	ip, r2
 802133a:	4463      	add	r3, ip
 802133c:	21c0      	movs	r1, #192	@ 0xc0
 802133e:	187a      	adds	r2, r7, r1
 8021340:	6013      	str	r3, [r2, #0]
 8021342:	1d7b      	adds	r3, r7, #5
 8021344:	33ff      	adds	r3, #255	@ 0xff
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	b29a      	uxth	r2, r3
 802134a:	187b      	adds	r3, r7, r1
 802134c:	681b      	ldr	r3, [r3, #0]
 802134e:	801a      	strh	r2, [r3, #0]
 8021350:	e001      	b.n	8021356 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8021352:	2301      	movs	r3, #1
 8021354:	e025      	b.n	80213a2 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8021356:	687a      	ldr	r2, [r7, #4]
 8021358:	683b      	ldr	r3, [r7, #0]
 802135a:	781b      	ldrb	r3, [r3, #0]
 802135c:	009b      	lsls	r3, r3, #2
 802135e:	18d3      	adds	r3, r2, r3
 8021360:	881b      	ldrh	r3, [r3, #0]
 8021362:	b29a      	uxth	r2, r3
 8021364:	208a      	movs	r0, #138	@ 0x8a
 8021366:	183b      	adds	r3, r7, r0
 8021368:	4911      	ldr	r1, [pc, #68]	@ (80213b0 <USB_EPStartXfer+0x1268>)
 802136a:	400a      	ands	r2, r1
 802136c:	801a      	strh	r2, [r3, #0]
 802136e:	183b      	adds	r3, r7, r0
 8021370:	183a      	adds	r2, r7, r0
 8021372:	8812      	ldrh	r2, [r2, #0]
 8021374:	2180      	movs	r1, #128	@ 0x80
 8021376:	0149      	lsls	r1, r1, #5
 8021378:	404a      	eors	r2, r1
 802137a:	801a      	strh	r2, [r3, #0]
 802137c:	183b      	adds	r3, r7, r0
 802137e:	183a      	adds	r2, r7, r0
 8021380:	8812      	ldrh	r2, [r2, #0]
 8021382:	2180      	movs	r1, #128	@ 0x80
 8021384:	0189      	lsls	r1, r1, #6
 8021386:	404a      	eors	r2, r1
 8021388:	801a      	strh	r2, [r3, #0]
 802138a:	687a      	ldr	r2, [r7, #4]
 802138c:	683b      	ldr	r3, [r7, #0]
 802138e:	781b      	ldrb	r3, [r3, #0]
 8021390:	009b      	lsls	r3, r3, #2
 8021392:	18d3      	adds	r3, r2, r3
 8021394:	183a      	adds	r2, r7, r0
 8021396:	8812      	ldrh	r2, [r2, #0]
 8021398:	4906      	ldr	r1, [pc, #24]	@ (80213b4 <USB_EPStartXfer+0x126c>)
 802139a:	430a      	orrs	r2, r1
 802139c:	b292      	uxth	r2, r2
 802139e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80213a0:	2300      	movs	r3, #0
}
 80213a2:	0018      	movs	r0, r3
 80213a4:	46bd      	mov	sp, r7
 80213a6:	b043      	add	sp, #268	@ 0x10c
 80213a8:	bd90      	pop	{r4, r7, pc}
 80213aa:	46c0      	nop			@ (mov r8, r8)
 80213ac:	00000406 	.word	0x00000406
 80213b0:	ffffbf8f 	.word	0xffffbf8f
 80213b4:	ffff8080 	.word	0xffff8080

080213b8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80213b8:	b580      	push	{r7, lr}
 80213ba:	b084      	sub	sp, #16
 80213bc:	af00      	add	r7, sp, #0
 80213be:	6078      	str	r0, [r7, #4]
 80213c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80213c2:	683b      	ldr	r3, [r7, #0]
 80213c4:	785b      	ldrb	r3, [r3, #1]
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d01d      	beq.n	8021406 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80213ca:	687a      	ldr	r2, [r7, #4]
 80213cc:	683b      	ldr	r3, [r7, #0]
 80213ce:	781b      	ldrb	r3, [r3, #0]
 80213d0:	009b      	lsls	r3, r3, #2
 80213d2:	18d3      	adds	r3, r2, r3
 80213d4:	881b      	ldrh	r3, [r3, #0]
 80213d6:	b29a      	uxth	r2, r3
 80213d8:	200c      	movs	r0, #12
 80213da:	183b      	adds	r3, r7, r0
 80213dc:	491b      	ldr	r1, [pc, #108]	@ (802144c <USB_EPSetStall+0x94>)
 80213de:	400a      	ands	r2, r1
 80213e0:	801a      	strh	r2, [r3, #0]
 80213e2:	183b      	adds	r3, r7, r0
 80213e4:	183a      	adds	r2, r7, r0
 80213e6:	8812      	ldrh	r2, [r2, #0]
 80213e8:	2110      	movs	r1, #16
 80213ea:	404a      	eors	r2, r1
 80213ec:	801a      	strh	r2, [r3, #0]
 80213ee:	687a      	ldr	r2, [r7, #4]
 80213f0:	683b      	ldr	r3, [r7, #0]
 80213f2:	781b      	ldrb	r3, [r3, #0]
 80213f4:	009b      	lsls	r3, r3, #2
 80213f6:	18d3      	adds	r3, r2, r3
 80213f8:	183a      	adds	r2, r7, r0
 80213fa:	8812      	ldrh	r2, [r2, #0]
 80213fc:	4914      	ldr	r1, [pc, #80]	@ (8021450 <USB_EPSetStall+0x98>)
 80213fe:	430a      	orrs	r2, r1
 8021400:	b292      	uxth	r2, r2
 8021402:	801a      	strh	r2, [r3, #0]
 8021404:	e01d      	b.n	8021442 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8021406:	687a      	ldr	r2, [r7, #4]
 8021408:	683b      	ldr	r3, [r7, #0]
 802140a:	781b      	ldrb	r3, [r3, #0]
 802140c:	009b      	lsls	r3, r3, #2
 802140e:	18d3      	adds	r3, r2, r3
 8021410:	881b      	ldrh	r3, [r3, #0]
 8021412:	b29a      	uxth	r2, r3
 8021414:	200e      	movs	r0, #14
 8021416:	183b      	adds	r3, r7, r0
 8021418:	490e      	ldr	r1, [pc, #56]	@ (8021454 <USB_EPSetStall+0x9c>)
 802141a:	400a      	ands	r2, r1
 802141c:	801a      	strh	r2, [r3, #0]
 802141e:	183b      	adds	r3, r7, r0
 8021420:	183a      	adds	r2, r7, r0
 8021422:	8812      	ldrh	r2, [r2, #0]
 8021424:	2180      	movs	r1, #128	@ 0x80
 8021426:	0149      	lsls	r1, r1, #5
 8021428:	404a      	eors	r2, r1
 802142a:	801a      	strh	r2, [r3, #0]
 802142c:	687a      	ldr	r2, [r7, #4]
 802142e:	683b      	ldr	r3, [r7, #0]
 8021430:	781b      	ldrb	r3, [r3, #0]
 8021432:	009b      	lsls	r3, r3, #2
 8021434:	18d3      	adds	r3, r2, r3
 8021436:	183a      	adds	r2, r7, r0
 8021438:	8812      	ldrh	r2, [r2, #0]
 802143a:	4905      	ldr	r1, [pc, #20]	@ (8021450 <USB_EPSetStall+0x98>)
 802143c:	430a      	orrs	r2, r1
 802143e:	b292      	uxth	r2, r2
 8021440:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8021442:	2300      	movs	r3, #0
}
 8021444:	0018      	movs	r0, r3
 8021446:	46bd      	mov	sp, r7
 8021448:	b004      	add	sp, #16
 802144a:	bd80      	pop	{r7, pc}
 802144c:	ffff8fbf 	.word	0xffff8fbf
 8021450:	ffff8080 	.word	0xffff8080
 8021454:	ffffbf8f 	.word	0xffffbf8f

08021458 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8021458:	b580      	push	{r7, lr}
 802145a:	b086      	sub	sp, #24
 802145c:	af00      	add	r7, sp, #0
 802145e:	6078      	str	r0, [r7, #4]
 8021460:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8021462:	683b      	ldr	r3, [r7, #0]
 8021464:	7b1b      	ldrb	r3, [r3, #12]
 8021466:	2b00      	cmp	r3, #0
 8021468:	d000      	beq.n	802146c <USB_EPClearStall+0x14>
 802146a:	e095      	b.n	8021598 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 802146c:	683b      	ldr	r3, [r7, #0]
 802146e:	785b      	ldrb	r3, [r3, #1]
 8021470:	2b00      	cmp	r3, #0
 8021472:	d046      	beq.n	8021502 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8021474:	687a      	ldr	r2, [r7, #4]
 8021476:	683b      	ldr	r3, [r7, #0]
 8021478:	781b      	ldrb	r3, [r3, #0]
 802147a:	009b      	lsls	r3, r3, #2
 802147c:	18d2      	adds	r2, r2, r3
 802147e:	2110      	movs	r1, #16
 8021480:	187b      	adds	r3, r7, r1
 8021482:	8812      	ldrh	r2, [r2, #0]
 8021484:	801a      	strh	r2, [r3, #0]
 8021486:	187b      	adds	r3, r7, r1
 8021488:	881b      	ldrh	r3, [r3, #0]
 802148a:	2240      	movs	r2, #64	@ 0x40
 802148c:	4013      	ands	r3, r2
 802148e:	d016      	beq.n	80214be <USB_EPClearStall+0x66>
 8021490:	687a      	ldr	r2, [r7, #4]
 8021492:	683b      	ldr	r3, [r7, #0]
 8021494:	781b      	ldrb	r3, [r3, #0]
 8021496:	009b      	lsls	r3, r3, #2
 8021498:	18d3      	adds	r3, r2, r3
 802149a:	881b      	ldrh	r3, [r3, #0]
 802149c:	b29a      	uxth	r2, r3
 802149e:	200e      	movs	r0, #14
 80214a0:	183b      	adds	r3, r7, r0
 80214a2:	4940      	ldr	r1, [pc, #256]	@ (80215a4 <USB_EPClearStall+0x14c>)
 80214a4:	400a      	ands	r2, r1
 80214a6:	801a      	strh	r2, [r3, #0]
 80214a8:	687a      	ldr	r2, [r7, #4]
 80214aa:	683b      	ldr	r3, [r7, #0]
 80214ac:	781b      	ldrb	r3, [r3, #0]
 80214ae:	009b      	lsls	r3, r3, #2
 80214b0:	18d3      	adds	r3, r2, r3
 80214b2:	183a      	adds	r2, r7, r0
 80214b4:	8812      	ldrh	r2, [r2, #0]
 80214b6:	493c      	ldr	r1, [pc, #240]	@ (80215a8 <USB_EPClearStall+0x150>)
 80214b8:	430a      	orrs	r2, r1
 80214ba:	b292      	uxth	r2, r2
 80214bc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80214be:	683b      	ldr	r3, [r7, #0]
 80214c0:	78db      	ldrb	r3, [r3, #3]
 80214c2:	2b01      	cmp	r3, #1
 80214c4:	d068      	beq.n	8021598 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80214c6:	687a      	ldr	r2, [r7, #4]
 80214c8:	683b      	ldr	r3, [r7, #0]
 80214ca:	781b      	ldrb	r3, [r3, #0]
 80214cc:	009b      	lsls	r3, r3, #2
 80214ce:	18d3      	adds	r3, r2, r3
 80214d0:	881b      	ldrh	r3, [r3, #0]
 80214d2:	b29a      	uxth	r2, r3
 80214d4:	200c      	movs	r0, #12
 80214d6:	183b      	adds	r3, r7, r0
 80214d8:	4934      	ldr	r1, [pc, #208]	@ (80215ac <USB_EPClearStall+0x154>)
 80214da:	400a      	ands	r2, r1
 80214dc:	801a      	strh	r2, [r3, #0]
 80214de:	183b      	adds	r3, r7, r0
 80214e0:	183a      	adds	r2, r7, r0
 80214e2:	8812      	ldrh	r2, [r2, #0]
 80214e4:	2120      	movs	r1, #32
 80214e6:	404a      	eors	r2, r1
 80214e8:	801a      	strh	r2, [r3, #0]
 80214ea:	687a      	ldr	r2, [r7, #4]
 80214ec:	683b      	ldr	r3, [r7, #0]
 80214ee:	781b      	ldrb	r3, [r3, #0]
 80214f0:	009b      	lsls	r3, r3, #2
 80214f2:	18d3      	adds	r3, r2, r3
 80214f4:	183a      	adds	r2, r7, r0
 80214f6:	8812      	ldrh	r2, [r2, #0]
 80214f8:	492d      	ldr	r1, [pc, #180]	@ (80215b0 <USB_EPClearStall+0x158>)
 80214fa:	430a      	orrs	r2, r1
 80214fc:	b292      	uxth	r2, r2
 80214fe:	801a      	strh	r2, [r3, #0]
 8021500:	e04a      	b.n	8021598 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8021502:	687a      	ldr	r2, [r7, #4]
 8021504:	683b      	ldr	r3, [r7, #0]
 8021506:	781b      	ldrb	r3, [r3, #0]
 8021508:	009b      	lsls	r3, r3, #2
 802150a:	18d2      	adds	r2, r2, r3
 802150c:	2116      	movs	r1, #22
 802150e:	187b      	adds	r3, r7, r1
 8021510:	8812      	ldrh	r2, [r2, #0]
 8021512:	801a      	strh	r2, [r3, #0]
 8021514:	187b      	adds	r3, r7, r1
 8021516:	881a      	ldrh	r2, [r3, #0]
 8021518:	2380      	movs	r3, #128	@ 0x80
 802151a:	01db      	lsls	r3, r3, #7
 802151c:	4013      	ands	r3, r2
 802151e:	d016      	beq.n	802154e <USB_EPClearStall+0xf6>
 8021520:	687a      	ldr	r2, [r7, #4]
 8021522:	683b      	ldr	r3, [r7, #0]
 8021524:	781b      	ldrb	r3, [r3, #0]
 8021526:	009b      	lsls	r3, r3, #2
 8021528:	18d3      	adds	r3, r2, r3
 802152a:	881b      	ldrh	r3, [r3, #0]
 802152c:	b29a      	uxth	r2, r3
 802152e:	2014      	movs	r0, #20
 8021530:	183b      	adds	r3, r7, r0
 8021532:	491c      	ldr	r1, [pc, #112]	@ (80215a4 <USB_EPClearStall+0x14c>)
 8021534:	400a      	ands	r2, r1
 8021536:	801a      	strh	r2, [r3, #0]
 8021538:	687a      	ldr	r2, [r7, #4]
 802153a:	683b      	ldr	r3, [r7, #0]
 802153c:	781b      	ldrb	r3, [r3, #0]
 802153e:	009b      	lsls	r3, r3, #2
 8021540:	18d3      	adds	r3, r2, r3
 8021542:	183a      	adds	r2, r7, r0
 8021544:	8812      	ldrh	r2, [r2, #0]
 8021546:	491b      	ldr	r1, [pc, #108]	@ (80215b4 <USB_EPClearStall+0x15c>)
 8021548:	430a      	orrs	r2, r1
 802154a:	b292      	uxth	r2, r2
 802154c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 802154e:	687a      	ldr	r2, [r7, #4]
 8021550:	683b      	ldr	r3, [r7, #0]
 8021552:	781b      	ldrb	r3, [r3, #0]
 8021554:	009b      	lsls	r3, r3, #2
 8021556:	18d3      	adds	r3, r2, r3
 8021558:	881b      	ldrh	r3, [r3, #0]
 802155a:	b29a      	uxth	r2, r3
 802155c:	2012      	movs	r0, #18
 802155e:	183b      	adds	r3, r7, r0
 8021560:	4915      	ldr	r1, [pc, #84]	@ (80215b8 <USB_EPClearStall+0x160>)
 8021562:	400a      	ands	r2, r1
 8021564:	801a      	strh	r2, [r3, #0]
 8021566:	183b      	adds	r3, r7, r0
 8021568:	183a      	adds	r2, r7, r0
 802156a:	8812      	ldrh	r2, [r2, #0]
 802156c:	2180      	movs	r1, #128	@ 0x80
 802156e:	0149      	lsls	r1, r1, #5
 8021570:	404a      	eors	r2, r1
 8021572:	801a      	strh	r2, [r3, #0]
 8021574:	183b      	adds	r3, r7, r0
 8021576:	183a      	adds	r2, r7, r0
 8021578:	8812      	ldrh	r2, [r2, #0]
 802157a:	2180      	movs	r1, #128	@ 0x80
 802157c:	0189      	lsls	r1, r1, #6
 802157e:	404a      	eors	r2, r1
 8021580:	801a      	strh	r2, [r3, #0]
 8021582:	687a      	ldr	r2, [r7, #4]
 8021584:	683b      	ldr	r3, [r7, #0]
 8021586:	781b      	ldrb	r3, [r3, #0]
 8021588:	009b      	lsls	r3, r3, #2
 802158a:	18d3      	adds	r3, r2, r3
 802158c:	183a      	adds	r2, r7, r0
 802158e:	8812      	ldrh	r2, [r2, #0]
 8021590:	4907      	ldr	r1, [pc, #28]	@ (80215b0 <USB_EPClearStall+0x158>)
 8021592:	430a      	orrs	r2, r1
 8021594:	b292      	uxth	r2, r2
 8021596:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8021598:	2300      	movs	r3, #0
}
 802159a:	0018      	movs	r0, r3
 802159c:	46bd      	mov	sp, r7
 802159e:	b006      	add	sp, #24
 80215a0:	bd80      	pop	{r7, pc}
 80215a2:	46c0      	nop			@ (mov r8, r8)
 80215a4:	ffff8f8f 	.word	0xffff8f8f
 80215a8:	ffff80c0 	.word	0xffff80c0
 80215ac:	ffff8fbf 	.word	0xffff8fbf
 80215b0:	ffff8080 	.word	0xffff8080
 80215b4:	ffffc080 	.word	0xffffc080
 80215b8:	ffffbf8f 	.word	0xffffbf8f

080215bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b082      	sub	sp, #8
 80215c0:	af00      	add	r7, sp, #0
 80215c2:	6078      	str	r0, [r7, #4]
 80215c4:	000a      	movs	r2, r1
 80215c6:	1cfb      	adds	r3, r7, #3
 80215c8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80215ca:	1cfb      	adds	r3, r7, #3
 80215cc:	781b      	ldrb	r3, [r3, #0]
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	d103      	bne.n	80215da <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	224c      	movs	r2, #76	@ 0x4c
 80215d6:	2180      	movs	r1, #128	@ 0x80
 80215d8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80215da:	2300      	movs	r3, #0
}
 80215dc:	0018      	movs	r0, r3
 80215de:	46bd      	mov	sp, r7
 80215e0:	b002      	add	sp, #8
 80215e2:	bd80      	pop	{r7, pc}

080215e4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80215e4:	b580      	push	{r7, lr}
 80215e6:	b082      	sub	sp, #8
 80215e8:	af00      	add	r7, sp, #0
 80215ea:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	2258      	movs	r2, #88	@ 0x58
 80215f0:	5a9b      	ldrh	r3, [r3, r2]
 80215f2:	b29b      	uxth	r3, r3
 80215f4:	4a05      	ldr	r2, [pc, #20]	@ (802160c <USB_DevConnect+0x28>)
 80215f6:	4313      	orrs	r3, r2
 80215f8:	b299      	uxth	r1, r3
 80215fa:	687b      	ldr	r3, [r7, #4]
 80215fc:	2258      	movs	r2, #88	@ 0x58
 80215fe:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8021600:	2300      	movs	r3, #0
}
 8021602:	0018      	movs	r0, r3
 8021604:	46bd      	mov	sp, r7
 8021606:	b002      	add	sp, #8
 8021608:	bd80      	pop	{r7, pc}
 802160a:	46c0      	nop			@ (mov r8, r8)
 802160c:	ffff8000 	.word	0xffff8000

08021610 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8021610:	b580      	push	{r7, lr}
 8021612:	b084      	sub	sp, #16
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	2244      	movs	r2, #68	@ 0x44
 802161c:	5a9b      	ldrh	r3, [r3, r2]
 802161e:	b29b      	uxth	r3, r3
 8021620:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8021622:	68fb      	ldr	r3, [r7, #12]
}
 8021624:	0018      	movs	r0, r3
 8021626:	46bd      	mov	sp, r7
 8021628:	b004      	add	sp, #16
 802162a:	bd80      	pop	{r7, pc}

0802162c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 802162c:	b580      	push	{r7, lr}
 802162e:	b08a      	sub	sp, #40	@ 0x28
 8021630:	af00      	add	r7, sp, #0
 8021632:	60f8      	str	r0, [r7, #12]
 8021634:	60b9      	str	r1, [r7, #8]
 8021636:	0019      	movs	r1, r3
 8021638:	1dbb      	adds	r3, r7, #6
 802163a:	801a      	strh	r2, [r3, #0]
 802163c:	1d3b      	adds	r3, r7, #4
 802163e:	1c0a      	adds	r2, r1, #0
 8021640:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8021642:	1d3b      	adds	r3, r7, #4
 8021644:	881b      	ldrh	r3, [r3, #0]
 8021646:	3301      	adds	r3, #1
 8021648:	085b      	lsrs	r3, r3, #1
 802164a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 802164c:	68fb      	ldr	r3, [r7, #12]
 802164e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8021650:	68bb      	ldr	r3, [r7, #8]
 8021652:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8021654:	1dbb      	adds	r3, r7, #6
 8021656:	881a      	ldrh	r2, [r3, #0]
 8021658:	697b      	ldr	r3, [r7, #20]
 802165a:	18d3      	adds	r3, r2, r3
 802165c:	2280      	movs	r2, #128	@ 0x80
 802165e:	00d2      	lsls	r2, r2, #3
 8021660:	4694      	mov	ip, r2
 8021662:	4463      	add	r3, ip
 8021664:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8021666:	69bb      	ldr	r3, [r7, #24]
 8021668:	627b      	str	r3, [r7, #36]	@ 0x24
 802166a:	e021      	b.n	80216b0 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 802166c:	69fb      	ldr	r3, [r7, #28]
 802166e:	781a      	ldrb	r2, [r3, #0]
 8021670:	2112      	movs	r1, #18
 8021672:	187b      	adds	r3, r7, r1
 8021674:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8021676:	69fb      	ldr	r3, [r7, #28]
 8021678:	3301      	adds	r3, #1
 802167a:	781b      	ldrb	r3, [r3, #0]
 802167c:	b21b      	sxth	r3, r3
 802167e:	021b      	lsls	r3, r3, #8
 8021680:	b21a      	sxth	r2, r3
 8021682:	187b      	adds	r3, r7, r1
 8021684:	2000      	movs	r0, #0
 8021686:	5e1b      	ldrsh	r3, [r3, r0]
 8021688:	4313      	orrs	r3, r2
 802168a:	b21a      	sxth	r2, r3
 802168c:	187b      	adds	r3, r7, r1
 802168e:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8021690:	6a3b      	ldr	r3, [r7, #32]
 8021692:	187a      	adds	r2, r7, r1
 8021694:	8812      	ldrh	r2, [r2, #0]
 8021696:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8021698:	6a3b      	ldr	r3, [r7, #32]
 802169a:	3302      	adds	r3, #2
 802169c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 802169e:	69fb      	ldr	r3, [r7, #28]
 80216a0:	3301      	adds	r3, #1
 80216a2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80216a4:	69fb      	ldr	r3, [r7, #28]
 80216a6:	3301      	adds	r3, #1
 80216a8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80216aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80216ac:	3b01      	subs	r3, #1
 80216ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80216b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d1da      	bne.n	802166c <USB_WritePMA+0x40>
  }
}
 80216b6:	46c0      	nop			@ (mov r8, r8)
 80216b8:	46c0      	nop			@ (mov r8, r8)
 80216ba:	46bd      	mov	sp, r7
 80216bc:	b00a      	add	sp, #40	@ 0x28
 80216be:	bd80      	pop	{r7, pc}

080216c0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80216c0:	b580      	push	{r7, lr}
 80216c2:	b08a      	sub	sp, #40	@ 0x28
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	60f8      	str	r0, [r7, #12]
 80216c8:	60b9      	str	r1, [r7, #8]
 80216ca:	0019      	movs	r1, r3
 80216cc:	1dbb      	adds	r3, r7, #6
 80216ce:	801a      	strh	r2, [r3, #0]
 80216d0:	1d3b      	adds	r3, r7, #4
 80216d2:	1c0a      	adds	r2, r1, #0
 80216d4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80216d6:	1d3b      	adds	r3, r7, #4
 80216d8:	881b      	ldrh	r3, [r3, #0]
 80216da:	085b      	lsrs	r3, r3, #1
 80216dc:	b29b      	uxth	r3, r3
 80216de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80216e0:	68fb      	ldr	r3, [r7, #12]
 80216e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80216e4:	68bb      	ldr	r3, [r7, #8]
 80216e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80216e8:	1dbb      	adds	r3, r7, #6
 80216ea:	881a      	ldrh	r2, [r3, #0]
 80216ec:	697b      	ldr	r3, [r7, #20]
 80216ee:	18d3      	adds	r3, r2, r3
 80216f0:	2280      	movs	r2, #128	@ 0x80
 80216f2:	00d2      	lsls	r2, r2, #3
 80216f4:	4694      	mov	ip, r2
 80216f6:	4463      	add	r3, ip
 80216f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80216fa:	69bb      	ldr	r3, [r7, #24]
 80216fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80216fe:	e018      	b.n	8021732 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8021700:	6a3b      	ldr	r3, [r7, #32]
 8021702:	881b      	ldrh	r3, [r3, #0]
 8021704:	b29b      	uxth	r3, r3
 8021706:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8021708:	6a3b      	ldr	r3, [r7, #32]
 802170a:	3302      	adds	r3, #2
 802170c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802170e:	693b      	ldr	r3, [r7, #16]
 8021710:	b2da      	uxtb	r2, r3
 8021712:	69fb      	ldr	r3, [r7, #28]
 8021714:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021716:	69fb      	ldr	r3, [r7, #28]
 8021718:	3301      	adds	r3, #1
 802171a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 802171c:	693b      	ldr	r3, [r7, #16]
 802171e:	0a1b      	lsrs	r3, r3, #8
 8021720:	b2da      	uxtb	r2, r3
 8021722:	69fb      	ldr	r3, [r7, #28]
 8021724:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021726:	69fb      	ldr	r3, [r7, #28]
 8021728:	3301      	adds	r3, #1
 802172a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802172e:	3b01      	subs	r3, #1
 8021730:	627b      	str	r3, [r7, #36]	@ 0x24
 8021732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021734:	2b00      	cmp	r3, #0
 8021736:	d1e3      	bne.n	8021700 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8021738:	1d3b      	adds	r3, r7, #4
 802173a:	881b      	ldrh	r3, [r3, #0]
 802173c:	2201      	movs	r2, #1
 802173e:	4013      	ands	r3, r2
 8021740:	b29b      	uxth	r3, r3
 8021742:	2b00      	cmp	r3, #0
 8021744:	d007      	beq.n	8021756 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8021746:	6a3b      	ldr	r3, [r7, #32]
 8021748:	881b      	ldrh	r3, [r3, #0]
 802174a:	b29b      	uxth	r3, r3
 802174c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802174e:	693b      	ldr	r3, [r7, #16]
 8021750:	b2da      	uxtb	r2, r3
 8021752:	69fb      	ldr	r3, [r7, #28]
 8021754:	701a      	strb	r2, [r3, #0]
  }
}
 8021756:	46c0      	nop			@ (mov r8, r8)
 8021758:	46bd      	mov	sp, r7
 802175a:	b00a      	add	sp, #40	@ 0x28
 802175c:	bd80      	pop	{r7, pc}

0802175e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802175e:	b580      	push	{r7, lr}
 8021760:	b084      	sub	sp, #16
 8021762:	af00      	add	r7, sp, #0
 8021764:	6078      	str	r0, [r7, #4]
 8021766:	000a      	movs	r2, r1
 8021768:	1cfb      	adds	r3, r7, #3
 802176a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 802176c:	230f      	movs	r3, #15
 802176e:	18fb      	adds	r3, r7, r3
 8021770:	2200      	movs	r2, #0
 8021772:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021774:	687b      	ldr	r3, [r7, #4]
 8021776:	7c1b      	ldrb	r3, [r3, #16]
 8021778:	2b00      	cmp	r3, #0
 802177a:	d116      	bne.n	80217aa <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802177c:	2380      	movs	r3, #128	@ 0x80
 802177e:	009b      	lsls	r3, r3, #2
 8021780:	6878      	ldr	r0, [r7, #4]
 8021782:	2202      	movs	r2, #2
 8021784:	2181      	movs	r1, #129	@ 0x81
 8021786:	f002 f8f8 	bl	802397a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802178a:	687b      	ldr	r3, [r7, #4]
 802178c:	2201      	movs	r2, #1
 802178e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021790:	2380      	movs	r3, #128	@ 0x80
 8021792:	009b      	lsls	r3, r3, #2
 8021794:	6878      	ldr	r0, [r7, #4]
 8021796:	2202      	movs	r2, #2
 8021798:	2101      	movs	r1, #1
 802179a:	f002 f8ee 	bl	802397a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802179e:	687a      	ldr	r2, [r7, #4]
 80217a0:	23b6      	movs	r3, #182	@ 0xb6
 80217a2:	005b      	lsls	r3, r3, #1
 80217a4:	2101      	movs	r1, #1
 80217a6:	50d1      	str	r1, [r2, r3]
 80217a8:	e013      	b.n	80217d2 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80217aa:	6878      	ldr	r0, [r7, #4]
 80217ac:	2340      	movs	r3, #64	@ 0x40
 80217ae:	2202      	movs	r2, #2
 80217b0:	2181      	movs	r1, #129	@ 0x81
 80217b2:	f002 f8e2 	bl	802397a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80217b6:	687b      	ldr	r3, [r7, #4]
 80217b8:	2201      	movs	r2, #1
 80217ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80217bc:	6878      	ldr	r0, [r7, #4]
 80217be:	2340      	movs	r3, #64	@ 0x40
 80217c0:	2202      	movs	r2, #2
 80217c2:	2101      	movs	r1, #1
 80217c4:	f002 f8d9 	bl	802397a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80217c8:	687a      	ldr	r2, [r7, #4]
 80217ca:	23b6      	movs	r3, #182	@ 0xb6
 80217cc:	005b      	lsls	r3, r3, #1
 80217ce:	2101      	movs	r1, #1
 80217d0:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80217d2:	6878      	ldr	r0, [r7, #4]
 80217d4:	2308      	movs	r3, #8
 80217d6:	2203      	movs	r2, #3
 80217d8:	2182      	movs	r1, #130	@ 0x82
 80217da:	f002 f8ce 	bl	802397a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	2201      	movs	r2, #1
 80217e2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80217e4:	2387      	movs	r3, #135	@ 0x87
 80217e6:	009b      	lsls	r3, r3, #2
 80217e8:	0018      	movs	r0, r3
 80217ea:	f002 fa5f 	bl	8023cac <USBD_static_malloc>
 80217ee:	0001      	movs	r1, r0
 80217f0:	687a      	ldr	r2, [r7, #4]
 80217f2:	23ae      	movs	r3, #174	@ 0xae
 80217f4:	009b      	lsls	r3, r3, #2
 80217f6:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80217f8:	687a      	ldr	r2, [r7, #4]
 80217fa:	23ae      	movs	r3, #174	@ 0xae
 80217fc:	009b      	lsls	r3, r3, #2
 80217fe:	58d3      	ldr	r3, [r2, r3]
 8021800:	2b00      	cmp	r3, #0
 8021802:	d104      	bne.n	802180e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8021804:	230f      	movs	r3, #15
 8021806:	18fb      	adds	r3, r7, r3
 8021808:	2201      	movs	r2, #1
 802180a:	701a      	strb	r2, [r3, #0]
 802180c:	e02c      	b.n	8021868 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802180e:	687a      	ldr	r2, [r7, #4]
 8021810:	23ae      	movs	r3, #174	@ 0xae
 8021812:	009b      	lsls	r3, r3, #2
 8021814:	58d3      	ldr	r3, [r2, r3]
 8021816:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8021818:	687a      	ldr	r2, [r7, #4]
 802181a:	23af      	movs	r3, #175	@ 0xaf
 802181c:	009b      	lsls	r3, r3, #2
 802181e:	58d3      	ldr	r3, [r2, r3]
 8021820:	681b      	ldr	r3, [r3, #0]
 8021822:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8021824:	68ba      	ldr	r2, [r7, #8]
 8021826:	2385      	movs	r3, #133	@ 0x85
 8021828:	009b      	lsls	r3, r3, #2
 802182a:	2100      	movs	r1, #0
 802182c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 802182e:	68ba      	ldr	r2, [r7, #8]
 8021830:	2386      	movs	r3, #134	@ 0x86
 8021832:	009b      	lsls	r3, r3, #2
 8021834:	2100      	movs	r1, #0
 8021836:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021838:	687b      	ldr	r3, [r7, #4]
 802183a:	7c1b      	ldrb	r3, [r3, #16]
 802183c:	2b00      	cmp	r3, #0
 802183e:	d10a      	bne.n	8021856 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8021840:	68ba      	ldr	r2, [r7, #8]
 8021842:	2381      	movs	r3, #129	@ 0x81
 8021844:	009b      	lsls	r3, r3, #2
 8021846:	58d2      	ldr	r2, [r2, r3]
 8021848:	2380      	movs	r3, #128	@ 0x80
 802184a:	009b      	lsls	r3, r3, #2
 802184c:	6878      	ldr	r0, [r7, #4]
 802184e:	2101      	movs	r1, #1
 8021850:	f002 f9de 	bl	8023c10 <USBD_LL_PrepareReceive>
 8021854:	e008      	b.n	8021868 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8021856:	68ba      	ldr	r2, [r7, #8]
 8021858:	2381      	movs	r3, #129	@ 0x81
 802185a:	009b      	lsls	r3, r3, #2
 802185c:	58d2      	ldr	r2, [r2, r3]
 802185e:	6878      	ldr	r0, [r7, #4]
 8021860:	2340      	movs	r3, #64	@ 0x40
 8021862:	2101      	movs	r1, #1
 8021864:	f002 f9d4 	bl	8023c10 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8021868:	230f      	movs	r3, #15
 802186a:	18fb      	adds	r3, r7, r3
 802186c:	781b      	ldrb	r3, [r3, #0]
}
 802186e:	0018      	movs	r0, r3
 8021870:	46bd      	mov	sp, r7
 8021872:	b004      	add	sp, #16
 8021874:	bd80      	pop	{r7, pc}

08021876 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021876:	b580      	push	{r7, lr}
 8021878:	b084      	sub	sp, #16
 802187a:	af00      	add	r7, sp, #0
 802187c:	6078      	str	r0, [r7, #4]
 802187e:	000a      	movs	r2, r1
 8021880:	1cfb      	adds	r3, r7, #3
 8021882:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8021884:	230f      	movs	r3, #15
 8021886:	18fb      	adds	r3, r7, r3
 8021888:	2200      	movs	r2, #0
 802188a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 802188c:	687b      	ldr	r3, [r7, #4]
 802188e:	2181      	movs	r1, #129	@ 0x81
 8021890:	0018      	movs	r0, r3
 8021892:	f002 f8a9 	bl	80239e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	2200      	movs	r2, #0
 802189a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 802189c:	687b      	ldr	r3, [r7, #4]
 802189e:	2101      	movs	r1, #1
 80218a0:	0018      	movs	r0, r3
 80218a2:	f002 f8a1 	bl	80239e8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80218a6:	687a      	ldr	r2, [r7, #4]
 80218a8:	23b6      	movs	r3, #182	@ 0xb6
 80218aa:	005b      	lsls	r3, r3, #1
 80218ac:	2100      	movs	r1, #0
 80218ae:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	2182      	movs	r1, #130	@ 0x82
 80218b4:	0018      	movs	r0, r3
 80218b6:	f002 f897 	bl	80239e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80218ba:	687b      	ldr	r3, [r7, #4]
 80218bc:	2200      	movs	r2, #0
 80218be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80218c0:	687a      	ldr	r2, [r7, #4]
 80218c2:	23ae      	movs	r3, #174	@ 0xae
 80218c4:	009b      	lsls	r3, r3, #2
 80218c6:	58d3      	ldr	r3, [r2, r3]
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d011      	beq.n	80218f0 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80218cc:	687a      	ldr	r2, [r7, #4]
 80218ce:	23af      	movs	r3, #175	@ 0xaf
 80218d0:	009b      	lsls	r3, r3, #2
 80218d2:	58d3      	ldr	r3, [r2, r3]
 80218d4:	685b      	ldr	r3, [r3, #4]
 80218d6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80218d8:	687a      	ldr	r2, [r7, #4]
 80218da:	23ae      	movs	r3, #174	@ 0xae
 80218dc:	009b      	lsls	r3, r3, #2
 80218de:	58d3      	ldr	r3, [r2, r3]
 80218e0:	0018      	movs	r0, r3
 80218e2:	f002 f9ef 	bl	8023cc4 <USBD_static_free>
    pdev->pClassData = NULL;
 80218e6:	687a      	ldr	r2, [r7, #4]
 80218e8:	23ae      	movs	r3, #174	@ 0xae
 80218ea:	009b      	lsls	r3, r3, #2
 80218ec:	2100      	movs	r1, #0
 80218ee:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80218f0:	230f      	movs	r3, #15
 80218f2:	18fb      	adds	r3, r7, r3
 80218f4:	781b      	ldrb	r3, [r3, #0]
}
 80218f6:	0018      	movs	r0, r3
 80218f8:	46bd      	mov	sp, r7
 80218fa:	b004      	add	sp, #16
 80218fc:	bd80      	pop	{r7, pc}
	...

08021900 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021900:	b580      	push	{r7, lr}
 8021902:	b086      	sub	sp, #24
 8021904:	af00      	add	r7, sp, #0
 8021906:	6078      	str	r0, [r7, #4]
 8021908:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802190a:	687a      	ldr	r2, [r7, #4]
 802190c:	23ae      	movs	r3, #174	@ 0xae
 802190e:	009b      	lsls	r3, r3, #2
 8021910:	58d3      	ldr	r3, [r2, r3]
 8021912:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8021914:	230f      	movs	r3, #15
 8021916:	18fb      	adds	r3, r7, r3
 8021918:	2200      	movs	r2, #0
 802191a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 802191c:	230c      	movs	r3, #12
 802191e:	18fb      	adds	r3, r7, r3
 8021920:	2200      	movs	r2, #0
 8021922:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8021924:	2317      	movs	r3, #23
 8021926:	18fb      	adds	r3, r7, r3
 8021928:	2200      	movs	r2, #0
 802192a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802192c:	683b      	ldr	r3, [r7, #0]
 802192e:	781b      	ldrb	r3, [r3, #0]
 8021930:	001a      	movs	r2, r3
 8021932:	2360      	movs	r3, #96	@ 0x60
 8021934:	4013      	ands	r3, r2
 8021936:	d03d      	beq.n	80219b4 <USBD_CDC_Setup+0xb4>
 8021938:	2b20      	cmp	r3, #32
 802193a:	d000      	beq.n	802193e <USBD_CDC_Setup+0x3e>
 802193c:	e094      	b.n	8021a68 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 802193e:	683b      	ldr	r3, [r7, #0]
 8021940:	88db      	ldrh	r3, [r3, #6]
 8021942:	2b00      	cmp	r3, #0
 8021944:	d02b      	beq.n	802199e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8021946:	683b      	ldr	r3, [r7, #0]
 8021948:	781b      	ldrb	r3, [r3, #0]
 802194a:	b25b      	sxtb	r3, r3
 802194c:	2b00      	cmp	r3, #0
 802194e:	da12      	bge.n	8021976 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8021950:	687a      	ldr	r2, [r7, #4]
 8021952:	23af      	movs	r3, #175	@ 0xaf
 8021954:	009b      	lsls	r3, r3, #2
 8021956:	58d3      	ldr	r3, [r2, r3]
 8021958:	689b      	ldr	r3, [r3, #8]
 802195a:	683a      	ldr	r2, [r7, #0]
 802195c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 802195e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8021960:	683a      	ldr	r2, [r7, #0]
 8021962:	88d2      	ldrh	r2, [r2, #6]
 8021964:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8021966:	6939      	ldr	r1, [r7, #16]
 8021968:	683b      	ldr	r3, [r7, #0]
 802196a:	88da      	ldrh	r2, [r3, #6]
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	0018      	movs	r0, r3
 8021970:	f001 fbaf 	bl	80230d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8021974:	e083      	b.n	8021a7e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8021976:	683b      	ldr	r3, [r7, #0]
 8021978:	7859      	ldrb	r1, [r3, #1]
 802197a:	693a      	ldr	r2, [r7, #16]
 802197c:	2380      	movs	r3, #128	@ 0x80
 802197e:	009b      	lsls	r3, r3, #2
 8021980:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8021982:	683b      	ldr	r3, [r7, #0]
 8021984:	88db      	ldrh	r3, [r3, #6]
 8021986:	b2d9      	uxtb	r1, r3
 8021988:	693b      	ldr	r3, [r7, #16]
 802198a:	4a40      	ldr	r2, [pc, #256]	@ (8021a8c <USBD_CDC_Setup+0x18c>)
 802198c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 802198e:	6939      	ldr	r1, [r7, #16]
 8021990:	683b      	ldr	r3, [r7, #0]
 8021992:	88da      	ldrh	r2, [r3, #6]
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	0018      	movs	r0, r3
 8021998:	f001 fbce 	bl	8023138 <USBD_CtlPrepareRx>
      break;
 802199c:	e06f      	b.n	8021a7e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802199e:	687a      	ldr	r2, [r7, #4]
 80219a0:	23af      	movs	r3, #175	@ 0xaf
 80219a2:	009b      	lsls	r3, r3, #2
 80219a4:	58d3      	ldr	r3, [r2, r3]
 80219a6:	689b      	ldr	r3, [r3, #8]
 80219a8:	683a      	ldr	r2, [r7, #0]
 80219aa:	7850      	ldrb	r0, [r2, #1]
 80219ac:	6839      	ldr	r1, [r7, #0]
 80219ae:	2200      	movs	r2, #0
 80219b0:	4798      	blx	r3
      break;
 80219b2:	e064      	b.n	8021a7e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80219b4:	683b      	ldr	r3, [r7, #0]
 80219b6:	785b      	ldrb	r3, [r3, #1]
 80219b8:	2b0b      	cmp	r3, #11
 80219ba:	d037      	beq.n	8021a2c <USBD_CDC_Setup+0x12c>
 80219bc:	dc47      	bgt.n	8021a4e <USBD_CDC_Setup+0x14e>
 80219be:	2b00      	cmp	r3, #0
 80219c0:	d002      	beq.n	80219c8 <USBD_CDC_Setup+0xc8>
 80219c2:	2b0a      	cmp	r3, #10
 80219c4:	d019      	beq.n	80219fa <USBD_CDC_Setup+0xfa>
 80219c6:	e042      	b.n	8021a4e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80219c8:	687a      	ldr	r2, [r7, #4]
 80219ca:	23a7      	movs	r3, #167	@ 0xa7
 80219cc:	009b      	lsls	r3, r3, #2
 80219ce:	5cd3      	ldrb	r3, [r2, r3]
 80219d0:	2b03      	cmp	r3, #3
 80219d2:	d107      	bne.n	80219e4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80219d4:	230c      	movs	r3, #12
 80219d6:	18f9      	adds	r1, r7, r3
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	2202      	movs	r2, #2
 80219dc:	0018      	movs	r0, r3
 80219de:	f001 fb78 	bl	80230d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80219e2:	e040      	b.n	8021a66 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80219e4:	683a      	ldr	r2, [r7, #0]
 80219e6:	687b      	ldr	r3, [r7, #4]
 80219e8:	0011      	movs	r1, r2
 80219ea:	0018      	movs	r0, r3
 80219ec:	f001 faf3 	bl	8022fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 80219f0:	2317      	movs	r3, #23
 80219f2:	18fb      	adds	r3, r7, r3
 80219f4:	2202      	movs	r2, #2
 80219f6:	701a      	strb	r2, [r3, #0]
          break;
 80219f8:	e035      	b.n	8021a66 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80219fa:	687a      	ldr	r2, [r7, #4]
 80219fc:	23a7      	movs	r3, #167	@ 0xa7
 80219fe:	009b      	lsls	r3, r3, #2
 8021a00:	5cd3      	ldrb	r3, [r2, r3]
 8021a02:	2b03      	cmp	r3, #3
 8021a04:	d107      	bne.n	8021a16 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8021a06:	230f      	movs	r3, #15
 8021a08:	18f9      	adds	r1, r7, r3
 8021a0a:	687b      	ldr	r3, [r7, #4]
 8021a0c:	2201      	movs	r2, #1
 8021a0e:	0018      	movs	r0, r3
 8021a10:	f001 fb5f 	bl	80230d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8021a14:	e027      	b.n	8021a66 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021a16:	683a      	ldr	r2, [r7, #0]
 8021a18:	687b      	ldr	r3, [r7, #4]
 8021a1a:	0011      	movs	r1, r2
 8021a1c:	0018      	movs	r0, r3
 8021a1e:	f001 fada 	bl	8022fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8021a22:	2317      	movs	r3, #23
 8021a24:	18fb      	adds	r3, r7, r3
 8021a26:	2202      	movs	r2, #2
 8021a28:	701a      	strb	r2, [r3, #0]
          break;
 8021a2a:	e01c      	b.n	8021a66 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8021a2c:	687a      	ldr	r2, [r7, #4]
 8021a2e:	23a7      	movs	r3, #167	@ 0xa7
 8021a30:	009b      	lsls	r3, r3, #2
 8021a32:	5cd3      	ldrb	r3, [r2, r3]
 8021a34:	2b03      	cmp	r3, #3
 8021a36:	d015      	beq.n	8021a64 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8021a38:	683a      	ldr	r2, [r7, #0]
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	0011      	movs	r1, r2
 8021a3e:	0018      	movs	r0, r3
 8021a40:	f001 fac9 	bl	8022fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8021a44:	2317      	movs	r3, #23
 8021a46:	18fb      	adds	r3, r7, r3
 8021a48:	2202      	movs	r2, #2
 8021a4a:	701a      	strb	r2, [r3, #0]
          }
          break;
 8021a4c:	e00a      	b.n	8021a64 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8021a4e:	683a      	ldr	r2, [r7, #0]
 8021a50:	687b      	ldr	r3, [r7, #4]
 8021a52:	0011      	movs	r1, r2
 8021a54:	0018      	movs	r0, r3
 8021a56:	f001 fabe 	bl	8022fd6 <USBD_CtlError>
          ret = USBD_FAIL;
 8021a5a:	2317      	movs	r3, #23
 8021a5c:	18fb      	adds	r3, r7, r3
 8021a5e:	2202      	movs	r2, #2
 8021a60:	701a      	strb	r2, [r3, #0]
          break;
 8021a62:	e000      	b.n	8021a66 <USBD_CDC_Setup+0x166>
          break;
 8021a64:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021a66:	e00a      	b.n	8021a7e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8021a68:	683a      	ldr	r2, [r7, #0]
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	0011      	movs	r1, r2
 8021a6e:	0018      	movs	r0, r3
 8021a70:	f001 fab1 	bl	8022fd6 <USBD_CtlError>
      ret = USBD_FAIL;
 8021a74:	2317      	movs	r3, #23
 8021a76:	18fb      	adds	r3, r7, r3
 8021a78:	2202      	movs	r2, #2
 8021a7a:	701a      	strb	r2, [r3, #0]
      break;
 8021a7c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021a7e:	2317      	movs	r3, #23
 8021a80:	18fb      	adds	r3, r7, r3
 8021a82:	781b      	ldrb	r3, [r3, #0]
}
 8021a84:	0018      	movs	r0, r3
 8021a86:	46bd      	mov	sp, r7
 8021a88:	b006      	add	sp, #24
 8021a8a:	bd80      	pop	{r7, pc}
 8021a8c:	00000201 	.word	0x00000201

08021a90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021a90:	b580      	push	{r7, lr}
 8021a92:	b084      	sub	sp, #16
 8021a94:	af00      	add	r7, sp, #0
 8021a96:	6078      	str	r0, [r7, #4]
 8021a98:	000a      	movs	r2, r1
 8021a9a:	1cfb      	adds	r3, r7, #3
 8021a9c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8021a9e:	687a      	ldr	r2, [r7, #4]
 8021aa0:	23ae      	movs	r3, #174	@ 0xae
 8021aa2:	009b      	lsls	r3, r3, #2
 8021aa4:	58d3      	ldr	r3, [r2, r3]
 8021aa6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8021aa8:	687a      	ldr	r2, [r7, #4]
 8021aaa:	23b0      	movs	r3, #176	@ 0xb0
 8021aac:	009b      	lsls	r3, r3, #2
 8021aae:	58d3      	ldr	r3, [r2, r3]
 8021ab0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8021ab2:	687a      	ldr	r2, [r7, #4]
 8021ab4:	23ae      	movs	r3, #174	@ 0xae
 8021ab6:	009b      	lsls	r3, r3, #2
 8021ab8:	58d3      	ldr	r3, [r2, r3]
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d03e      	beq.n	8021b3c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8021abe:	1cfb      	adds	r3, r7, #3
 8021ac0:	781a      	ldrb	r2, [r3, #0]
 8021ac2:	6879      	ldr	r1, [r7, #4]
 8021ac4:	0013      	movs	r3, r2
 8021ac6:	009b      	lsls	r3, r3, #2
 8021ac8:	189b      	adds	r3, r3, r2
 8021aca:	009b      	lsls	r3, r3, #2
 8021acc:	18cb      	adds	r3, r1, r3
 8021ace:	331c      	adds	r3, #28
 8021ad0:	681b      	ldr	r3, [r3, #0]
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	d02b      	beq.n	8021b2e <USBD_CDC_DataIn+0x9e>
 8021ad6:	1cfb      	adds	r3, r7, #3
 8021ad8:	781a      	ldrb	r2, [r3, #0]
 8021ada:	6879      	ldr	r1, [r7, #4]
 8021adc:	0013      	movs	r3, r2
 8021ade:	009b      	lsls	r3, r3, #2
 8021ae0:	189b      	adds	r3, r3, r2
 8021ae2:	009b      	lsls	r3, r3, #2
 8021ae4:	18cb      	adds	r3, r1, r3
 8021ae6:	331c      	adds	r3, #28
 8021ae8:	6818      	ldr	r0, [r3, #0]
 8021aea:	1cfb      	adds	r3, r7, #3
 8021aec:	781a      	ldrb	r2, [r3, #0]
 8021aee:	68b9      	ldr	r1, [r7, #8]
 8021af0:	0013      	movs	r3, r2
 8021af2:	009b      	lsls	r3, r3, #2
 8021af4:	189b      	adds	r3, r3, r2
 8021af6:	00db      	lsls	r3, r3, #3
 8021af8:	18cb      	adds	r3, r1, r3
 8021afa:	3338      	adds	r3, #56	@ 0x38
 8021afc:	681b      	ldr	r3, [r3, #0]
 8021afe:	0019      	movs	r1, r3
 8021b00:	f7de fbd6 	bl	80002b0 <__aeabi_uidivmod>
 8021b04:	1e0b      	subs	r3, r1, #0
 8021b06:	d112      	bne.n	8021b2e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8021b08:	1cfb      	adds	r3, r7, #3
 8021b0a:	781a      	ldrb	r2, [r3, #0]
 8021b0c:	6879      	ldr	r1, [r7, #4]
 8021b0e:	0013      	movs	r3, r2
 8021b10:	009b      	lsls	r3, r3, #2
 8021b12:	189b      	adds	r3, r3, r2
 8021b14:	009b      	lsls	r3, r3, #2
 8021b16:	18cb      	adds	r3, r1, r3
 8021b18:	331c      	adds	r3, #28
 8021b1a:	2200      	movs	r2, #0
 8021b1c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8021b1e:	1cfb      	adds	r3, r7, #3
 8021b20:	7819      	ldrb	r1, [r3, #0]
 8021b22:	6878      	ldr	r0, [r7, #4]
 8021b24:	2300      	movs	r3, #0
 8021b26:	2200      	movs	r2, #0
 8021b28:	f002 f83b 	bl	8023ba2 <USBD_LL_Transmit>
 8021b2c:	e004      	b.n	8021b38 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8021b2e:	68fa      	ldr	r2, [r7, #12]
 8021b30:	2385      	movs	r3, #133	@ 0x85
 8021b32:	009b      	lsls	r3, r3, #2
 8021b34:	2100      	movs	r1, #0
 8021b36:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8021b38:	2300      	movs	r3, #0
 8021b3a:	e000      	b.n	8021b3e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8021b3c:	2302      	movs	r3, #2
  }
}
 8021b3e:	0018      	movs	r0, r3
 8021b40:	46bd      	mov	sp, r7
 8021b42:	b004      	add	sp, #16
 8021b44:	bd80      	pop	{r7, pc}

08021b46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021b46:	b580      	push	{r7, lr}
 8021b48:	b084      	sub	sp, #16
 8021b4a:	af00      	add	r7, sp, #0
 8021b4c:	6078      	str	r0, [r7, #4]
 8021b4e:	000a      	movs	r2, r1
 8021b50:	1cfb      	adds	r3, r7, #3
 8021b52:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021b54:	687a      	ldr	r2, [r7, #4]
 8021b56:	23ae      	movs	r3, #174	@ 0xae
 8021b58:	009b      	lsls	r3, r3, #2
 8021b5a:	58d3      	ldr	r3, [r2, r3]
 8021b5c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8021b5e:	1cfb      	adds	r3, r7, #3
 8021b60:	781a      	ldrb	r2, [r3, #0]
 8021b62:	687b      	ldr	r3, [r7, #4]
 8021b64:	0011      	movs	r1, r2
 8021b66:	0018      	movs	r0, r3
 8021b68:	f002 f889 	bl	8023c7e <USBD_LL_GetRxDataSize>
 8021b6c:	0001      	movs	r1, r0
 8021b6e:	68fa      	ldr	r2, [r7, #12]
 8021b70:	2383      	movs	r3, #131	@ 0x83
 8021b72:	009b      	lsls	r3, r3, #2
 8021b74:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8021b76:	687a      	ldr	r2, [r7, #4]
 8021b78:	23ae      	movs	r3, #174	@ 0xae
 8021b7a:	009b      	lsls	r3, r3, #2
 8021b7c:	58d3      	ldr	r3, [r2, r3]
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d011      	beq.n	8021ba6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8021b82:	687a      	ldr	r2, [r7, #4]
 8021b84:	23af      	movs	r3, #175	@ 0xaf
 8021b86:	009b      	lsls	r3, r3, #2
 8021b88:	58d3      	ldr	r3, [r2, r3]
 8021b8a:	68da      	ldr	r2, [r3, #12]
 8021b8c:	68f9      	ldr	r1, [r7, #12]
 8021b8e:	2381      	movs	r3, #129	@ 0x81
 8021b90:	009b      	lsls	r3, r3, #2
 8021b92:	58c8      	ldr	r0, [r1, r3]
 8021b94:	68fb      	ldr	r3, [r7, #12]
 8021b96:	2183      	movs	r1, #131	@ 0x83
 8021b98:	0089      	lsls	r1, r1, #2
 8021b9a:	468c      	mov	ip, r1
 8021b9c:	4463      	add	r3, ip
 8021b9e:	0019      	movs	r1, r3
 8021ba0:	4790      	blx	r2

    return USBD_OK;
 8021ba2:	2300      	movs	r3, #0
 8021ba4:	e000      	b.n	8021ba8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8021ba6:	2302      	movs	r3, #2
  }
}
 8021ba8:	0018      	movs	r0, r3
 8021baa:	46bd      	mov	sp, r7
 8021bac:	b004      	add	sp, #16
 8021bae:	bd80      	pop	{r7, pc}

08021bb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8021bb0:	b590      	push	{r4, r7, lr}
 8021bb2:	b085      	sub	sp, #20
 8021bb4:	af00      	add	r7, sp, #0
 8021bb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021bb8:	687a      	ldr	r2, [r7, #4]
 8021bba:	23ae      	movs	r3, #174	@ 0xae
 8021bbc:	009b      	lsls	r3, r3, #2
 8021bbe:	58d3      	ldr	r3, [r2, r3]
 8021bc0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8021bc2:	687a      	ldr	r2, [r7, #4]
 8021bc4:	23af      	movs	r3, #175	@ 0xaf
 8021bc6:	009b      	lsls	r3, r3, #2
 8021bc8:	58d3      	ldr	r3, [r2, r3]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d018      	beq.n	8021c00 <USBD_CDC_EP0_RxReady+0x50>
 8021bce:	68fa      	ldr	r2, [r7, #12]
 8021bd0:	2380      	movs	r3, #128	@ 0x80
 8021bd2:	009b      	lsls	r3, r3, #2
 8021bd4:	5cd3      	ldrb	r3, [r2, r3]
 8021bd6:	2bff      	cmp	r3, #255	@ 0xff
 8021bd8:	d012      	beq.n	8021c00 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021bda:	687a      	ldr	r2, [r7, #4]
 8021bdc:	23af      	movs	r3, #175	@ 0xaf
 8021bde:	009b      	lsls	r3, r3, #2
 8021be0:	58d3      	ldr	r3, [r2, r3]
 8021be2:	689b      	ldr	r3, [r3, #8]
 8021be4:	68f9      	ldr	r1, [r7, #12]
 8021be6:	2280      	movs	r2, #128	@ 0x80
 8021be8:	0092      	lsls	r2, r2, #2
 8021bea:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8021bec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8021bee:	68fa      	ldr	r2, [r7, #12]
 8021bf0:	4c06      	ldr	r4, [pc, #24]	@ (8021c0c <USBD_CDC_EP0_RxReady+0x5c>)
 8021bf2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021bf4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8021bf6:	68fa      	ldr	r2, [r7, #12]
 8021bf8:	2380      	movs	r3, #128	@ 0x80
 8021bfa:	009b      	lsls	r3, r3, #2
 8021bfc:	21ff      	movs	r1, #255	@ 0xff
 8021bfe:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8021c00:	2300      	movs	r3, #0
}
 8021c02:	0018      	movs	r0, r3
 8021c04:	46bd      	mov	sp, r7
 8021c06:	b005      	add	sp, #20
 8021c08:	bd90      	pop	{r4, r7, pc}
 8021c0a:	46c0      	nop			@ (mov r8, r8)
 8021c0c:	00000201 	.word	0x00000201

08021c10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8021c10:	b580      	push	{r7, lr}
 8021c12:	b082      	sub	sp, #8
 8021c14:	af00      	add	r7, sp, #0
 8021c16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	2243      	movs	r2, #67	@ 0x43
 8021c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8021c1e:	4b02      	ldr	r3, [pc, #8]	@ (8021c28 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8021c20:	0018      	movs	r0, r3
 8021c22:	46bd      	mov	sp, r7
 8021c24:	b002      	add	sp, #8
 8021c26:	bd80      	pop	{r7, pc}
 8021c28:	2000018c 	.word	0x2000018c

08021c2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8021c2c:	b580      	push	{r7, lr}
 8021c2e:	b082      	sub	sp, #8
 8021c30:	af00      	add	r7, sp, #0
 8021c32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8021c34:	687b      	ldr	r3, [r7, #4]
 8021c36:	2243      	movs	r2, #67	@ 0x43
 8021c38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8021c3a:	4b02      	ldr	r3, [pc, #8]	@ (8021c44 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8021c3c:	0018      	movs	r0, r3
 8021c3e:	46bd      	mov	sp, r7
 8021c40:	b002      	add	sp, #8
 8021c42:	bd80      	pop	{r7, pc}
 8021c44:	20000148 	.word	0x20000148

08021c48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8021c48:	b580      	push	{r7, lr}
 8021c4a:	b082      	sub	sp, #8
 8021c4c:	af00      	add	r7, sp, #0
 8021c4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	2243      	movs	r2, #67	@ 0x43
 8021c54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8021c56:	4b02      	ldr	r3, [pc, #8]	@ (8021c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8021c58:	0018      	movs	r0, r3
 8021c5a:	46bd      	mov	sp, r7
 8021c5c:	b002      	add	sp, #8
 8021c5e:	bd80      	pop	{r7, pc}
 8021c60:	200001d0 	.word	0x200001d0

08021c64 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8021c64:	b580      	push	{r7, lr}
 8021c66:	b082      	sub	sp, #8
 8021c68:	af00      	add	r7, sp, #0
 8021c6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	220a      	movs	r2, #10
 8021c70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8021c72:	4b02      	ldr	r3, [pc, #8]	@ (8021c7c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8021c74:	0018      	movs	r0, r3
 8021c76:	46bd      	mov	sp, r7
 8021c78:	b002      	add	sp, #8
 8021c7a:	bd80      	pop	{r7, pc}
 8021c7c:	20000104 	.word	0x20000104

08021c80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8021c80:	b580      	push	{r7, lr}
 8021c82:	b084      	sub	sp, #16
 8021c84:	af00      	add	r7, sp, #0
 8021c86:	6078      	str	r0, [r7, #4]
 8021c88:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8021c8a:	200f      	movs	r0, #15
 8021c8c:	183b      	adds	r3, r7, r0
 8021c8e:	2202      	movs	r2, #2
 8021c90:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8021c92:	683b      	ldr	r3, [r7, #0]
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	d007      	beq.n	8021ca8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8021c98:	687a      	ldr	r2, [r7, #4]
 8021c9a:	23af      	movs	r3, #175	@ 0xaf
 8021c9c:	009b      	lsls	r3, r3, #2
 8021c9e:	6839      	ldr	r1, [r7, #0]
 8021ca0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8021ca2:	183b      	adds	r3, r7, r0
 8021ca4:	2200      	movs	r2, #0
 8021ca6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8021ca8:	230f      	movs	r3, #15
 8021caa:	18fb      	adds	r3, r7, r3
 8021cac:	781b      	ldrb	r3, [r3, #0]
}
 8021cae:	0018      	movs	r0, r3
 8021cb0:	46bd      	mov	sp, r7
 8021cb2:	b004      	add	sp, #16
 8021cb4:	bd80      	pop	{r7, pc}

08021cb6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8021cb6:	b580      	push	{r7, lr}
 8021cb8:	b086      	sub	sp, #24
 8021cba:	af00      	add	r7, sp, #0
 8021cbc:	60f8      	str	r0, [r7, #12]
 8021cbe:	60b9      	str	r1, [r7, #8]
 8021cc0:	1dbb      	adds	r3, r7, #6
 8021cc2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021cc4:	68fa      	ldr	r2, [r7, #12]
 8021cc6:	23ae      	movs	r3, #174	@ 0xae
 8021cc8:	009b      	lsls	r3, r3, #2
 8021cca:	58d3      	ldr	r3, [r2, r3]
 8021ccc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8021cce:	697a      	ldr	r2, [r7, #20]
 8021cd0:	2382      	movs	r3, #130	@ 0x82
 8021cd2:	009b      	lsls	r3, r3, #2
 8021cd4:	68b9      	ldr	r1, [r7, #8]
 8021cd6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8021cd8:	1dbb      	adds	r3, r7, #6
 8021cda:	8819      	ldrh	r1, [r3, #0]
 8021cdc:	697a      	ldr	r2, [r7, #20]
 8021cde:	2384      	movs	r3, #132	@ 0x84
 8021ce0:	009b      	lsls	r3, r3, #2
 8021ce2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021ce4:	2300      	movs	r3, #0
}
 8021ce6:	0018      	movs	r0, r3
 8021ce8:	46bd      	mov	sp, r7
 8021cea:	b006      	add	sp, #24
 8021cec:	bd80      	pop	{r7, pc}

08021cee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8021cee:	b580      	push	{r7, lr}
 8021cf0:	b084      	sub	sp, #16
 8021cf2:	af00      	add	r7, sp, #0
 8021cf4:	6078      	str	r0, [r7, #4]
 8021cf6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021cf8:	687a      	ldr	r2, [r7, #4]
 8021cfa:	23ae      	movs	r3, #174	@ 0xae
 8021cfc:	009b      	lsls	r3, r3, #2
 8021cfe:	58d3      	ldr	r3, [r2, r3]
 8021d00:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8021d02:	68fa      	ldr	r2, [r7, #12]
 8021d04:	2381      	movs	r3, #129	@ 0x81
 8021d06:	009b      	lsls	r3, r3, #2
 8021d08:	6839      	ldr	r1, [r7, #0]
 8021d0a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021d0c:	2300      	movs	r3, #0
}
 8021d0e:	0018      	movs	r0, r3
 8021d10:	46bd      	mov	sp, r7
 8021d12:	b004      	add	sp, #16
 8021d14:	bd80      	pop	{r7, pc}

08021d16 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8021d16:	b580      	push	{r7, lr}
 8021d18:	b084      	sub	sp, #16
 8021d1a:	af00      	add	r7, sp, #0
 8021d1c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021d1e:	687a      	ldr	r2, [r7, #4]
 8021d20:	23ae      	movs	r3, #174	@ 0xae
 8021d22:	009b      	lsls	r3, r3, #2
 8021d24:	58d3      	ldr	r3, [r2, r3]
 8021d26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8021d28:	687a      	ldr	r2, [r7, #4]
 8021d2a:	23ae      	movs	r3, #174	@ 0xae
 8021d2c:	009b      	lsls	r3, r3, #2
 8021d2e:	58d3      	ldr	r3, [r2, r3]
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	d022      	beq.n	8021d7a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8021d34:	68fa      	ldr	r2, [r7, #12]
 8021d36:	2385      	movs	r3, #133	@ 0x85
 8021d38:	009b      	lsls	r3, r3, #2
 8021d3a:	58d3      	ldr	r3, [r2, r3]
 8021d3c:	2b00      	cmp	r3, #0
 8021d3e:	d11a      	bne.n	8021d76 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8021d40:	68fa      	ldr	r2, [r7, #12]
 8021d42:	2385      	movs	r3, #133	@ 0x85
 8021d44:	009b      	lsls	r3, r3, #2
 8021d46:	2101      	movs	r1, #1
 8021d48:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8021d4a:	68fa      	ldr	r2, [r7, #12]
 8021d4c:	2384      	movs	r3, #132	@ 0x84
 8021d4e:	009b      	lsls	r3, r3, #2
 8021d50:	58d2      	ldr	r2, [r2, r3]
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021d56:	68fa      	ldr	r2, [r7, #12]
 8021d58:	2382      	movs	r3, #130	@ 0x82
 8021d5a:	009b      	lsls	r3, r3, #2
 8021d5c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8021d5e:	68fa      	ldr	r2, [r7, #12]
 8021d60:	2384      	movs	r3, #132	@ 0x84
 8021d62:	009b      	lsls	r3, r3, #2
 8021d64:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021d66:	b29b      	uxth	r3, r3
 8021d68:	6878      	ldr	r0, [r7, #4]
 8021d6a:	000a      	movs	r2, r1
 8021d6c:	2181      	movs	r1, #129	@ 0x81
 8021d6e:	f001 ff18 	bl	8023ba2 <USBD_LL_Transmit>

      return USBD_OK;
 8021d72:	2300      	movs	r3, #0
 8021d74:	e002      	b.n	8021d7c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8021d76:	2301      	movs	r3, #1
 8021d78:	e000      	b.n	8021d7c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8021d7a:	2302      	movs	r3, #2
  }
}
 8021d7c:	0018      	movs	r0, r3
 8021d7e:	46bd      	mov	sp, r7
 8021d80:	b004      	add	sp, #16
 8021d82:	bd80      	pop	{r7, pc}

08021d84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8021d84:	b580      	push	{r7, lr}
 8021d86:	b084      	sub	sp, #16
 8021d88:	af00      	add	r7, sp, #0
 8021d8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021d8c:	687a      	ldr	r2, [r7, #4]
 8021d8e:	23ae      	movs	r3, #174	@ 0xae
 8021d90:	009b      	lsls	r3, r3, #2
 8021d92:	58d3      	ldr	r3, [r2, r3]
 8021d94:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8021d96:	687a      	ldr	r2, [r7, #4]
 8021d98:	23ae      	movs	r3, #174	@ 0xae
 8021d9a:	009b      	lsls	r3, r3, #2
 8021d9c:	58d3      	ldr	r3, [r2, r3]
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d019      	beq.n	8021dd6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	7c1b      	ldrb	r3, [r3, #16]
 8021da6:	2b00      	cmp	r3, #0
 8021da8:	d10a      	bne.n	8021dc0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021daa:	68fa      	ldr	r2, [r7, #12]
 8021dac:	2381      	movs	r3, #129	@ 0x81
 8021dae:	009b      	lsls	r3, r3, #2
 8021db0:	58d2      	ldr	r2, [r2, r3]
 8021db2:	2380      	movs	r3, #128	@ 0x80
 8021db4:	009b      	lsls	r3, r3, #2
 8021db6:	6878      	ldr	r0, [r7, #4]
 8021db8:	2101      	movs	r1, #1
 8021dba:	f001 ff29 	bl	8023c10 <USBD_LL_PrepareReceive>
 8021dbe:	e008      	b.n	8021dd2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021dc0:	68fa      	ldr	r2, [r7, #12]
 8021dc2:	2381      	movs	r3, #129	@ 0x81
 8021dc4:	009b      	lsls	r3, r3, #2
 8021dc6:	58d2      	ldr	r2, [r2, r3]
 8021dc8:	6878      	ldr	r0, [r7, #4]
 8021dca:	2340      	movs	r3, #64	@ 0x40
 8021dcc:	2101      	movs	r1, #1
 8021dce:	f001 ff1f 	bl	8023c10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021dd2:	2300      	movs	r3, #0
 8021dd4:	e000      	b.n	8021dd8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021dd6:	2302      	movs	r3, #2
  }
}
 8021dd8:	0018      	movs	r0, r3
 8021dda:	46bd      	mov	sp, r7
 8021ddc:	b004      	add	sp, #16
 8021dde:	bd80      	pop	{r7, pc}

08021de0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021de0:	b580      	push	{r7, lr}
 8021de2:	b084      	sub	sp, #16
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	60f8      	str	r0, [r7, #12]
 8021de8:	60b9      	str	r1, [r7, #8]
 8021dea:	1dfb      	adds	r3, r7, #7
 8021dec:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021dee:	68fb      	ldr	r3, [r7, #12]
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	d101      	bne.n	8021df8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021df4:	2302      	movs	r3, #2
 8021df6:	e020      	b.n	8021e3a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021df8:	68fa      	ldr	r2, [r7, #12]
 8021dfa:	23ad      	movs	r3, #173	@ 0xad
 8021dfc:	009b      	lsls	r3, r3, #2
 8021dfe:	58d3      	ldr	r3, [r2, r3]
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	d004      	beq.n	8021e0e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8021e04:	68fa      	ldr	r2, [r7, #12]
 8021e06:	23ad      	movs	r3, #173	@ 0xad
 8021e08:	009b      	lsls	r3, r3, #2
 8021e0a:	2100      	movs	r1, #0
 8021e0c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021e0e:	68bb      	ldr	r3, [r7, #8]
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	d004      	beq.n	8021e1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021e14:	68fa      	ldr	r2, [r7, #12]
 8021e16:	23ac      	movs	r3, #172	@ 0xac
 8021e18:	009b      	lsls	r3, r3, #2
 8021e1a:	68b9      	ldr	r1, [r7, #8]
 8021e1c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021e1e:	68fa      	ldr	r2, [r7, #12]
 8021e20:	23a7      	movs	r3, #167	@ 0xa7
 8021e22:	009b      	lsls	r3, r3, #2
 8021e24:	2101      	movs	r1, #1
 8021e26:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8021e28:	68fb      	ldr	r3, [r7, #12]
 8021e2a:	1dfa      	adds	r2, r7, #7
 8021e2c:	7812      	ldrb	r2, [r2, #0]
 8021e2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8021e30:	68fb      	ldr	r3, [r7, #12]
 8021e32:	0018      	movs	r0, r3
 8021e34:	f001 fd18 	bl	8023868 <USBD_LL_Init>

  return USBD_OK;
 8021e38:	2300      	movs	r3, #0
}
 8021e3a:	0018      	movs	r0, r3
 8021e3c:	46bd      	mov	sp, r7
 8021e3e:	b004      	add	sp, #16
 8021e40:	bd80      	pop	{r7, pc}

08021e42 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021e42:	b580      	push	{r7, lr}
 8021e44:	b084      	sub	sp, #16
 8021e46:	af00      	add	r7, sp, #0
 8021e48:	6078      	str	r0, [r7, #4]
 8021e4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8021e4c:	200f      	movs	r0, #15
 8021e4e:	183b      	adds	r3, r7, r0
 8021e50:	2200      	movs	r2, #0
 8021e52:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8021e54:	683b      	ldr	r3, [r7, #0]
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d008      	beq.n	8021e6c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8021e5a:	687a      	ldr	r2, [r7, #4]
 8021e5c:	23ad      	movs	r3, #173	@ 0xad
 8021e5e:	009b      	lsls	r3, r3, #2
 8021e60:	6839      	ldr	r1, [r7, #0]
 8021e62:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021e64:	183b      	adds	r3, r7, r0
 8021e66:	2200      	movs	r2, #0
 8021e68:	701a      	strb	r2, [r3, #0]
 8021e6a:	e003      	b.n	8021e74 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8021e6c:	230f      	movs	r3, #15
 8021e6e:	18fb      	adds	r3, r7, r3
 8021e70:	2202      	movs	r2, #2
 8021e72:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021e74:	230f      	movs	r3, #15
 8021e76:	18fb      	adds	r3, r7, r3
 8021e78:	781b      	ldrb	r3, [r3, #0]
}
 8021e7a:	0018      	movs	r0, r3
 8021e7c:	46bd      	mov	sp, r7
 8021e7e:	b004      	add	sp, #16
 8021e80:	bd80      	pop	{r7, pc}

08021e82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021e82:	b580      	push	{r7, lr}
 8021e84:	b082      	sub	sp, #8
 8021e86:	af00      	add	r7, sp, #0
 8021e88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	0018      	movs	r0, r3
 8021e8e:	f001 fd4f 	bl	8023930 <USBD_LL_Start>

  return USBD_OK;
 8021e92:	2300      	movs	r3, #0
}
 8021e94:	0018      	movs	r0, r3
 8021e96:	46bd      	mov	sp, r7
 8021e98:	b002      	add	sp, #8
 8021e9a:	bd80      	pop	{r7, pc}

08021e9c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021e9c:	b580      	push	{r7, lr}
 8021e9e:	b082      	sub	sp, #8
 8021ea0:	af00      	add	r7, sp, #0
 8021ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021ea4:	2300      	movs	r3, #0
}
 8021ea6:	0018      	movs	r0, r3
 8021ea8:	46bd      	mov	sp, r7
 8021eaa:	b002      	add	sp, #8
 8021eac:	bd80      	pop	{r7, pc}

08021eae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021eae:	b590      	push	{r4, r7, lr}
 8021eb0:	b085      	sub	sp, #20
 8021eb2:	af00      	add	r7, sp, #0
 8021eb4:	6078      	str	r0, [r7, #4]
 8021eb6:	000a      	movs	r2, r1
 8021eb8:	1cfb      	adds	r3, r7, #3
 8021eba:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021ebc:	240f      	movs	r4, #15
 8021ebe:	193b      	adds	r3, r7, r4
 8021ec0:	2202      	movs	r2, #2
 8021ec2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021ec4:	687a      	ldr	r2, [r7, #4]
 8021ec6:	23ad      	movs	r3, #173	@ 0xad
 8021ec8:	009b      	lsls	r3, r3, #2
 8021eca:	58d3      	ldr	r3, [r2, r3]
 8021ecc:	2b00      	cmp	r3, #0
 8021ece:	d00e      	beq.n	8021eee <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021ed0:	687a      	ldr	r2, [r7, #4]
 8021ed2:	23ad      	movs	r3, #173	@ 0xad
 8021ed4:	009b      	lsls	r3, r3, #2
 8021ed6:	58d3      	ldr	r3, [r2, r3]
 8021ed8:	681b      	ldr	r3, [r3, #0]
 8021eda:	1cfa      	adds	r2, r7, #3
 8021edc:	7811      	ldrb	r1, [r2, #0]
 8021ede:	687a      	ldr	r2, [r7, #4]
 8021ee0:	0010      	movs	r0, r2
 8021ee2:	4798      	blx	r3
 8021ee4:	1e03      	subs	r3, r0, #0
 8021ee6:	d102      	bne.n	8021eee <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021ee8:	193b      	adds	r3, r7, r4
 8021eea:	2200      	movs	r2, #0
 8021eec:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021eee:	230f      	movs	r3, #15
 8021ef0:	18fb      	adds	r3, r7, r3
 8021ef2:	781b      	ldrb	r3, [r3, #0]
}
 8021ef4:	0018      	movs	r0, r3
 8021ef6:	46bd      	mov	sp, r7
 8021ef8:	b005      	add	sp, #20
 8021efa:	bd90      	pop	{r4, r7, pc}

08021efc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021efc:	b580      	push	{r7, lr}
 8021efe:	b082      	sub	sp, #8
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	6078      	str	r0, [r7, #4]
 8021f04:	000a      	movs	r2, r1
 8021f06:	1cfb      	adds	r3, r7, #3
 8021f08:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021f0a:	687a      	ldr	r2, [r7, #4]
 8021f0c:	23ad      	movs	r3, #173	@ 0xad
 8021f0e:	009b      	lsls	r3, r3, #2
 8021f10:	58d3      	ldr	r3, [r2, r3]
 8021f12:	685b      	ldr	r3, [r3, #4]
 8021f14:	1cfa      	adds	r2, r7, #3
 8021f16:	7811      	ldrb	r1, [r2, #0]
 8021f18:	687a      	ldr	r2, [r7, #4]
 8021f1a:	0010      	movs	r0, r2
 8021f1c:	4798      	blx	r3

  return USBD_OK;
 8021f1e:	2300      	movs	r3, #0
}
 8021f20:	0018      	movs	r0, r3
 8021f22:	46bd      	mov	sp, r7
 8021f24:	b002      	add	sp, #8
 8021f26:	bd80      	pop	{r7, pc}

08021f28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021f28:	b580      	push	{r7, lr}
 8021f2a:	b082      	sub	sp, #8
 8021f2c:	af00      	add	r7, sp, #0
 8021f2e:	6078      	str	r0, [r7, #4]
 8021f30:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021f32:	687b      	ldr	r3, [r7, #4]
 8021f34:	22aa      	movs	r2, #170	@ 0xaa
 8021f36:	0092      	lsls	r2, r2, #2
 8021f38:	4694      	mov	ip, r2
 8021f3a:	4463      	add	r3, ip
 8021f3c:	683a      	ldr	r2, [r7, #0]
 8021f3e:	0011      	movs	r1, r2
 8021f40:	0018      	movs	r0, r3
 8021f42:	f001 f810 	bl	8022f66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021f46:	687a      	ldr	r2, [r7, #4]
 8021f48:	23a5      	movs	r3, #165	@ 0xa5
 8021f4a:	009b      	lsls	r3, r3, #2
 8021f4c:	2101      	movs	r1, #1
 8021f4e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	4a23      	ldr	r2, [pc, #140]	@ (8021fe0 <USBD_LL_SetupStage+0xb8>)
 8021f54:	5a9b      	ldrh	r3, [r3, r2]
 8021f56:	0019      	movs	r1, r3
 8021f58:	687a      	ldr	r2, [r7, #4]
 8021f5a:	23a6      	movs	r3, #166	@ 0xa6
 8021f5c:	009b      	lsls	r3, r3, #2
 8021f5e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021f60:	687a      	ldr	r2, [r7, #4]
 8021f62:	23aa      	movs	r3, #170	@ 0xaa
 8021f64:	009b      	lsls	r3, r3, #2
 8021f66:	5cd3      	ldrb	r3, [r2, r3]
 8021f68:	001a      	movs	r2, r3
 8021f6a:	231f      	movs	r3, #31
 8021f6c:	4013      	ands	r3, r2
 8021f6e:	2b02      	cmp	r3, #2
 8021f70:	d019      	beq.n	8021fa6 <USBD_LL_SetupStage+0x7e>
 8021f72:	d822      	bhi.n	8021fba <USBD_LL_SetupStage+0x92>
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	d002      	beq.n	8021f7e <USBD_LL_SetupStage+0x56>
 8021f78:	2b01      	cmp	r3, #1
 8021f7a:	d00a      	beq.n	8021f92 <USBD_LL_SetupStage+0x6a>
 8021f7c:	e01d      	b.n	8021fba <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	22aa      	movs	r2, #170	@ 0xaa
 8021f82:	0092      	lsls	r2, r2, #2
 8021f84:	189a      	adds	r2, r3, r2
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	0011      	movs	r1, r2
 8021f8a:	0018      	movs	r0, r3
 8021f8c:	f000 fa10 	bl	80223b0 <USBD_StdDevReq>
      break;
 8021f90:	e020      	b.n	8021fd4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	22aa      	movs	r2, #170	@ 0xaa
 8021f96:	0092      	lsls	r2, r2, #2
 8021f98:	189a      	adds	r2, r3, r2
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	0011      	movs	r1, r2
 8021f9e:	0018      	movs	r0, r3
 8021fa0:	f000 fa78 	bl	8022494 <USBD_StdItfReq>
      break;
 8021fa4:	e016      	b.n	8021fd4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021fa6:	687b      	ldr	r3, [r7, #4]
 8021fa8:	22aa      	movs	r2, #170	@ 0xaa
 8021faa:	0092      	lsls	r2, r2, #2
 8021fac:	189a      	adds	r2, r3, r2
 8021fae:	687b      	ldr	r3, [r7, #4]
 8021fb0:	0011      	movs	r1, r2
 8021fb2:	0018      	movs	r0, r3
 8021fb4:	f000 fac5 	bl	8022542 <USBD_StdEPReq>
      break;
 8021fb8:	e00c      	b.n	8021fd4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021fba:	687a      	ldr	r2, [r7, #4]
 8021fbc:	23aa      	movs	r3, #170	@ 0xaa
 8021fbe:	009b      	lsls	r3, r3, #2
 8021fc0:	5cd3      	ldrb	r3, [r2, r3]
 8021fc2:	227f      	movs	r2, #127	@ 0x7f
 8021fc4:	4393      	bics	r3, r2
 8021fc6:	b2da      	uxtb	r2, r3
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	0011      	movs	r1, r2
 8021fcc:	0018      	movs	r0, r3
 8021fce:	f001 fd36 	bl	8023a3e <USBD_LL_StallEP>
      break;
 8021fd2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021fd4:	2300      	movs	r3, #0
}
 8021fd6:	0018      	movs	r0, r3
 8021fd8:	46bd      	mov	sp, r7
 8021fda:	b002      	add	sp, #8
 8021fdc:	bd80      	pop	{r7, pc}
 8021fde:	46c0      	nop			@ (mov r8, r8)
 8021fe0:	000002ae 	.word	0x000002ae

08021fe4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021fe4:	b580      	push	{r7, lr}
 8021fe6:	b086      	sub	sp, #24
 8021fe8:	af00      	add	r7, sp, #0
 8021fea:	60f8      	str	r0, [r7, #12]
 8021fec:	607a      	str	r2, [r7, #4]
 8021fee:	200b      	movs	r0, #11
 8021ff0:	183b      	adds	r3, r7, r0
 8021ff2:	1c0a      	adds	r2, r1, #0
 8021ff4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021ff6:	183b      	adds	r3, r7, r0
 8021ff8:	781b      	ldrb	r3, [r3, #0]
 8021ffa:	2b00      	cmp	r3, #0
 8021ffc:	d154      	bne.n	80220a8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021ffe:	68fb      	ldr	r3, [r7, #12]
 8022000:	3355      	adds	r3, #85	@ 0x55
 8022002:	33ff      	adds	r3, #255	@ 0xff
 8022004:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8022006:	68fa      	ldr	r2, [r7, #12]
 8022008:	23a5      	movs	r3, #165	@ 0xa5
 802200a:	009b      	lsls	r3, r3, #2
 802200c:	58d3      	ldr	r3, [r2, r3]
 802200e:	2b03      	cmp	r3, #3
 8022010:	d139      	bne.n	8022086 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8022012:	697b      	ldr	r3, [r7, #20]
 8022014:	68da      	ldr	r2, [r3, #12]
 8022016:	697b      	ldr	r3, [r7, #20]
 8022018:	691b      	ldr	r3, [r3, #16]
 802201a:	429a      	cmp	r2, r3
 802201c:	d919      	bls.n	8022052 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 802201e:	697b      	ldr	r3, [r7, #20]
 8022020:	68da      	ldr	r2, [r3, #12]
 8022022:	697b      	ldr	r3, [r7, #20]
 8022024:	691b      	ldr	r3, [r3, #16]
 8022026:	1ad2      	subs	r2, r2, r3
 8022028:	697b      	ldr	r3, [r7, #20]
 802202a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 802202c:	697b      	ldr	r3, [r7, #20]
 802202e:	68da      	ldr	r2, [r3, #12]
 8022030:	697b      	ldr	r3, [r7, #20]
 8022032:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8022034:	429a      	cmp	r2, r3
 8022036:	d203      	bcs.n	8022040 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8022038:	697b      	ldr	r3, [r7, #20]
 802203a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 802203c:	b29b      	uxth	r3, r3
 802203e:	e002      	b.n	8022046 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8022040:	697b      	ldr	r3, [r7, #20]
 8022042:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8022044:	b29b      	uxth	r3, r3
 8022046:	6879      	ldr	r1, [r7, #4]
 8022048:	68f8      	ldr	r0, [r7, #12]
 802204a:	001a      	movs	r2, r3
 802204c:	f001 f898 	bl	8023180 <USBD_CtlContinueRx>
 8022050:	e045      	b.n	80220de <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8022052:	68fa      	ldr	r2, [r7, #12]
 8022054:	23ad      	movs	r3, #173	@ 0xad
 8022056:	009b      	lsls	r3, r3, #2
 8022058:	58d3      	ldr	r3, [r2, r3]
 802205a:	691b      	ldr	r3, [r3, #16]
 802205c:	2b00      	cmp	r3, #0
 802205e:	d00d      	beq.n	802207c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8022060:	68fa      	ldr	r2, [r7, #12]
 8022062:	23a7      	movs	r3, #167	@ 0xa7
 8022064:	009b      	lsls	r3, r3, #2
 8022066:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8022068:	2b03      	cmp	r3, #3
 802206a:	d107      	bne.n	802207c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 802206c:	68fa      	ldr	r2, [r7, #12]
 802206e:	23ad      	movs	r3, #173	@ 0xad
 8022070:	009b      	lsls	r3, r3, #2
 8022072:	58d3      	ldr	r3, [r2, r3]
 8022074:	691b      	ldr	r3, [r3, #16]
 8022076:	68fa      	ldr	r2, [r7, #12]
 8022078:	0010      	movs	r0, r2
 802207a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 802207c:	68fb      	ldr	r3, [r7, #12]
 802207e:	0018      	movs	r0, r3
 8022080:	f001 f891 	bl	80231a6 <USBD_CtlSendStatus>
 8022084:	e02b      	b.n	80220de <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8022086:	68fa      	ldr	r2, [r7, #12]
 8022088:	23a5      	movs	r3, #165	@ 0xa5
 802208a:	009b      	lsls	r3, r3, #2
 802208c:	58d3      	ldr	r3, [r2, r3]
 802208e:	2b05      	cmp	r3, #5
 8022090:	d125      	bne.n	80220de <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8022092:	68fa      	ldr	r2, [r7, #12]
 8022094:	23a5      	movs	r3, #165	@ 0xa5
 8022096:	009b      	lsls	r3, r3, #2
 8022098:	2100      	movs	r1, #0
 802209a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 802209c:	68fb      	ldr	r3, [r7, #12]
 802209e:	2100      	movs	r1, #0
 80220a0:	0018      	movs	r0, r3
 80220a2:	f001 fccc 	bl	8023a3e <USBD_LL_StallEP>
 80220a6:	e01a      	b.n	80220de <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80220a8:	68fa      	ldr	r2, [r7, #12]
 80220aa:	23ad      	movs	r3, #173	@ 0xad
 80220ac:	009b      	lsls	r3, r3, #2
 80220ae:	58d3      	ldr	r3, [r2, r3]
 80220b0:	699b      	ldr	r3, [r3, #24]
 80220b2:	2b00      	cmp	r3, #0
 80220b4:	d011      	beq.n	80220da <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80220b6:	68fa      	ldr	r2, [r7, #12]
 80220b8:	23a7      	movs	r3, #167	@ 0xa7
 80220ba:	009b      	lsls	r3, r3, #2
 80220bc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80220be:	2b03      	cmp	r3, #3
 80220c0:	d10b      	bne.n	80220da <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80220c2:	68fa      	ldr	r2, [r7, #12]
 80220c4:	23ad      	movs	r3, #173	@ 0xad
 80220c6:	009b      	lsls	r3, r3, #2
 80220c8:	58d3      	ldr	r3, [r2, r3]
 80220ca:	699b      	ldr	r3, [r3, #24]
 80220cc:	220b      	movs	r2, #11
 80220ce:	18ba      	adds	r2, r7, r2
 80220d0:	7811      	ldrb	r1, [r2, #0]
 80220d2:	68fa      	ldr	r2, [r7, #12]
 80220d4:	0010      	movs	r0, r2
 80220d6:	4798      	blx	r3
 80220d8:	e001      	b.n	80220de <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80220da:	2302      	movs	r3, #2
 80220dc:	e000      	b.n	80220e0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80220de:	2300      	movs	r3, #0
}
 80220e0:	0018      	movs	r0, r3
 80220e2:	46bd      	mov	sp, r7
 80220e4:	b006      	add	sp, #24
 80220e6:	bd80      	pop	{r7, pc}

080220e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80220e8:	b580      	push	{r7, lr}
 80220ea:	b086      	sub	sp, #24
 80220ec:	af00      	add	r7, sp, #0
 80220ee:	60f8      	str	r0, [r7, #12]
 80220f0:	607a      	str	r2, [r7, #4]
 80220f2:	200b      	movs	r0, #11
 80220f4:	183b      	adds	r3, r7, r0
 80220f6:	1c0a      	adds	r2, r1, #0
 80220f8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80220fa:	183b      	adds	r3, r7, r0
 80220fc:	781b      	ldrb	r3, [r3, #0]
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d000      	beq.n	8022104 <USBD_LL_DataInStage+0x1c>
 8022102:	e08e      	b.n	8022222 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8022104:	68fb      	ldr	r3, [r7, #12]
 8022106:	3314      	adds	r3, #20
 8022108:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802210a:	68fa      	ldr	r2, [r7, #12]
 802210c:	23a5      	movs	r3, #165	@ 0xa5
 802210e:	009b      	lsls	r3, r3, #2
 8022110:	58d3      	ldr	r3, [r2, r3]
 8022112:	2b02      	cmp	r3, #2
 8022114:	d164      	bne.n	80221e0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8022116:	697b      	ldr	r3, [r7, #20]
 8022118:	68da      	ldr	r2, [r3, #12]
 802211a:	697b      	ldr	r3, [r7, #20]
 802211c:	691b      	ldr	r3, [r3, #16]
 802211e:	429a      	cmp	r2, r3
 8022120:	d915      	bls.n	802214e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8022122:	697b      	ldr	r3, [r7, #20]
 8022124:	68da      	ldr	r2, [r3, #12]
 8022126:	697b      	ldr	r3, [r7, #20]
 8022128:	691b      	ldr	r3, [r3, #16]
 802212a:	1ad2      	subs	r2, r2, r3
 802212c:	697b      	ldr	r3, [r7, #20]
 802212e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8022130:	697b      	ldr	r3, [r7, #20]
 8022132:	68db      	ldr	r3, [r3, #12]
 8022134:	b29a      	uxth	r2, r3
 8022136:	6879      	ldr	r1, [r7, #4]
 8022138:	68fb      	ldr	r3, [r7, #12]
 802213a:	0018      	movs	r0, r3
 802213c:	f000 ffe9 	bl	8023112 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022140:	68f8      	ldr	r0, [r7, #12]
 8022142:	2300      	movs	r3, #0
 8022144:	2200      	movs	r2, #0
 8022146:	2100      	movs	r1, #0
 8022148:	f001 fd62 	bl	8023c10 <USBD_LL_PrepareReceive>
 802214c:	e059      	b.n	8022202 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802214e:	697b      	ldr	r3, [r7, #20]
 8022150:	689a      	ldr	r2, [r3, #8]
 8022152:	697b      	ldr	r3, [r7, #20]
 8022154:	691b      	ldr	r3, [r3, #16]
 8022156:	0019      	movs	r1, r3
 8022158:	0010      	movs	r0, r2
 802215a:	f7de f8a9 	bl	80002b0 <__aeabi_uidivmod>
 802215e:	1e0b      	subs	r3, r1, #0
 8022160:	d11f      	bne.n	80221a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8022162:	697b      	ldr	r3, [r7, #20]
 8022164:	689a      	ldr	r2, [r3, #8]
 8022166:	697b      	ldr	r3, [r7, #20]
 8022168:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802216a:	429a      	cmp	r2, r3
 802216c:	d319      	bcc.n	80221a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 802216e:	697b      	ldr	r3, [r7, #20]
 8022170:	689a      	ldr	r2, [r3, #8]
 8022172:	68f9      	ldr	r1, [r7, #12]
 8022174:	23a6      	movs	r3, #166	@ 0xa6
 8022176:	009b      	lsls	r3, r3, #2
 8022178:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 802217a:	429a      	cmp	r2, r3
 802217c:	d211      	bcs.n	80221a2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 802217e:	68fb      	ldr	r3, [r7, #12]
 8022180:	2200      	movs	r2, #0
 8022182:	2100      	movs	r1, #0
 8022184:	0018      	movs	r0, r3
 8022186:	f000 ffc4 	bl	8023112 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802218a:	68fa      	ldr	r2, [r7, #12]
 802218c:	23a6      	movs	r3, #166	@ 0xa6
 802218e:	009b      	lsls	r3, r3, #2
 8022190:	2100      	movs	r1, #0
 8022192:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022194:	68f8      	ldr	r0, [r7, #12]
 8022196:	2300      	movs	r3, #0
 8022198:	2200      	movs	r2, #0
 802219a:	2100      	movs	r1, #0
 802219c:	f001 fd38 	bl	8023c10 <USBD_LL_PrepareReceive>
 80221a0:	e02f      	b.n	8022202 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80221a2:	68fa      	ldr	r2, [r7, #12]
 80221a4:	23ad      	movs	r3, #173	@ 0xad
 80221a6:	009b      	lsls	r3, r3, #2
 80221a8:	58d3      	ldr	r3, [r2, r3]
 80221aa:	68db      	ldr	r3, [r3, #12]
 80221ac:	2b00      	cmp	r3, #0
 80221ae:	d00d      	beq.n	80221cc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80221b0:	68fa      	ldr	r2, [r7, #12]
 80221b2:	23a7      	movs	r3, #167	@ 0xa7
 80221b4:	009b      	lsls	r3, r3, #2
 80221b6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80221b8:	2b03      	cmp	r3, #3
 80221ba:	d107      	bne.n	80221cc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80221bc:	68fa      	ldr	r2, [r7, #12]
 80221be:	23ad      	movs	r3, #173	@ 0xad
 80221c0:	009b      	lsls	r3, r3, #2
 80221c2:	58d3      	ldr	r3, [r2, r3]
 80221c4:	68db      	ldr	r3, [r3, #12]
 80221c6:	68fa      	ldr	r2, [r7, #12]
 80221c8:	0010      	movs	r0, r2
 80221ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80221cc:	68fb      	ldr	r3, [r7, #12]
 80221ce:	2180      	movs	r1, #128	@ 0x80
 80221d0:	0018      	movs	r0, r3
 80221d2:	f001 fc34 	bl	8023a3e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80221d6:	68fb      	ldr	r3, [r7, #12]
 80221d8:	0018      	movs	r0, r3
 80221da:	f000 fff8 	bl	80231ce <USBD_CtlReceiveStatus>
 80221de:	e010      	b.n	8022202 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80221e0:	68fa      	ldr	r2, [r7, #12]
 80221e2:	23a5      	movs	r3, #165	@ 0xa5
 80221e4:	009b      	lsls	r3, r3, #2
 80221e6:	58d3      	ldr	r3, [r2, r3]
 80221e8:	2b04      	cmp	r3, #4
 80221ea:	d005      	beq.n	80221f8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80221ec:	68fa      	ldr	r2, [r7, #12]
 80221ee:	23a5      	movs	r3, #165	@ 0xa5
 80221f0:	009b      	lsls	r3, r3, #2
 80221f2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	d104      	bne.n	8022202 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80221f8:	68fb      	ldr	r3, [r7, #12]
 80221fa:	2180      	movs	r1, #128	@ 0x80
 80221fc:	0018      	movs	r0, r3
 80221fe:	f001 fc1e 	bl	8023a3e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8022202:	68fa      	ldr	r2, [r7, #12]
 8022204:	23a8      	movs	r3, #168	@ 0xa8
 8022206:	009b      	lsls	r3, r3, #2
 8022208:	5cd3      	ldrb	r3, [r2, r3]
 802220a:	2b01      	cmp	r3, #1
 802220c:	d124      	bne.n	8022258 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 802220e:	68fb      	ldr	r3, [r7, #12]
 8022210:	0018      	movs	r0, r3
 8022212:	f7ff fe43 	bl	8021e9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8022216:	68fa      	ldr	r2, [r7, #12]
 8022218:	23a8      	movs	r3, #168	@ 0xa8
 802221a:	009b      	lsls	r3, r3, #2
 802221c:	2100      	movs	r1, #0
 802221e:	54d1      	strb	r1, [r2, r3]
 8022220:	e01a      	b.n	8022258 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8022222:	68fa      	ldr	r2, [r7, #12]
 8022224:	23ad      	movs	r3, #173	@ 0xad
 8022226:	009b      	lsls	r3, r3, #2
 8022228:	58d3      	ldr	r3, [r2, r3]
 802222a:	695b      	ldr	r3, [r3, #20]
 802222c:	2b00      	cmp	r3, #0
 802222e:	d011      	beq.n	8022254 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8022230:	68fa      	ldr	r2, [r7, #12]
 8022232:	23a7      	movs	r3, #167	@ 0xa7
 8022234:	009b      	lsls	r3, r3, #2
 8022236:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8022238:	2b03      	cmp	r3, #3
 802223a:	d10b      	bne.n	8022254 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 802223c:	68fa      	ldr	r2, [r7, #12]
 802223e:	23ad      	movs	r3, #173	@ 0xad
 8022240:	009b      	lsls	r3, r3, #2
 8022242:	58d3      	ldr	r3, [r2, r3]
 8022244:	695b      	ldr	r3, [r3, #20]
 8022246:	220b      	movs	r2, #11
 8022248:	18ba      	adds	r2, r7, r2
 802224a:	7811      	ldrb	r1, [r2, #0]
 802224c:	68fa      	ldr	r2, [r7, #12]
 802224e:	0010      	movs	r0, r2
 8022250:	4798      	blx	r3
 8022252:	e001      	b.n	8022258 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8022254:	2302      	movs	r3, #2
 8022256:	e000      	b.n	802225a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8022258:	2300      	movs	r3, #0
}
 802225a:	0018      	movs	r0, r3
 802225c:	46bd      	mov	sp, r7
 802225e:	b006      	add	sp, #24
 8022260:	bd80      	pop	{r7, pc}

08022262 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8022262:	b580      	push	{r7, lr}
 8022264:	b082      	sub	sp, #8
 8022266:	af00      	add	r7, sp, #0
 8022268:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802226a:	6878      	ldr	r0, [r7, #4]
 802226c:	2340      	movs	r3, #64	@ 0x40
 802226e:	2200      	movs	r2, #0
 8022270:	2100      	movs	r1, #0
 8022272:	f001 fb82 	bl	802397a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8022276:	687a      	ldr	r2, [r7, #4]
 8022278:	23ac      	movs	r3, #172	@ 0xac
 802227a:	005b      	lsls	r3, r3, #1
 802227c:	2101      	movs	r1, #1
 802227e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8022280:	687a      	ldr	r2, [r7, #4]
 8022282:	23b2      	movs	r3, #178	@ 0xb2
 8022284:	005b      	lsls	r3, r3, #1
 8022286:	2140      	movs	r1, #64	@ 0x40
 8022288:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802228a:	6878      	ldr	r0, [r7, #4]
 802228c:	2340      	movs	r3, #64	@ 0x40
 802228e:	2200      	movs	r2, #0
 8022290:	2180      	movs	r1, #128	@ 0x80
 8022292:	f001 fb72 	bl	802397a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	2201      	movs	r2, #1
 802229a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802229c:	687b      	ldr	r3, [r7, #4]
 802229e:	2240      	movs	r2, #64	@ 0x40
 80222a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80222a2:	687a      	ldr	r2, [r7, #4]
 80222a4:	23a7      	movs	r3, #167	@ 0xa7
 80222a6:	009b      	lsls	r3, r3, #2
 80222a8:	2101      	movs	r1, #1
 80222aa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80222ac:	687a      	ldr	r2, [r7, #4]
 80222ae:	23a5      	movs	r3, #165	@ 0xa5
 80222b0:	009b      	lsls	r3, r3, #2
 80222b2:	2100      	movs	r1, #0
 80222b4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	2200      	movs	r2, #0
 80222ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80222bc:	687a      	ldr	r2, [r7, #4]
 80222be:	23a9      	movs	r3, #169	@ 0xa9
 80222c0:	009b      	lsls	r3, r3, #2
 80222c2:	2100      	movs	r1, #0
 80222c4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80222c6:	687a      	ldr	r2, [r7, #4]
 80222c8:	23ae      	movs	r3, #174	@ 0xae
 80222ca:	009b      	lsls	r3, r3, #2
 80222cc:	58d3      	ldr	r3, [r2, r3]
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	d00a      	beq.n	80222e8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80222d2:	687a      	ldr	r2, [r7, #4]
 80222d4:	23ad      	movs	r3, #173	@ 0xad
 80222d6:	009b      	lsls	r3, r3, #2
 80222d8:	58d3      	ldr	r3, [r2, r3]
 80222da:	685a      	ldr	r2, [r3, #4]
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	685b      	ldr	r3, [r3, #4]
 80222e0:	b2d9      	uxtb	r1, r3
 80222e2:	687b      	ldr	r3, [r7, #4]
 80222e4:	0018      	movs	r0, r3
 80222e6:	4790      	blx	r2
  }

  return USBD_OK;
 80222e8:	2300      	movs	r3, #0
}
 80222ea:	0018      	movs	r0, r3
 80222ec:	46bd      	mov	sp, r7
 80222ee:	b002      	add	sp, #8
 80222f0:	bd80      	pop	{r7, pc}

080222f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80222f2:	b580      	push	{r7, lr}
 80222f4:	b082      	sub	sp, #8
 80222f6:	af00      	add	r7, sp, #0
 80222f8:	6078      	str	r0, [r7, #4]
 80222fa:	000a      	movs	r2, r1
 80222fc:	1cfb      	adds	r3, r7, #3
 80222fe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	1cfa      	adds	r2, r7, #3
 8022304:	7812      	ldrb	r2, [r2, #0]
 8022306:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8022308:	2300      	movs	r3, #0
}
 802230a:	0018      	movs	r0, r3
 802230c:	46bd      	mov	sp, r7
 802230e:	b002      	add	sp, #8
 8022310:	bd80      	pop	{r7, pc}
	...

08022314 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8022314:	b580      	push	{r7, lr}
 8022316:	b082      	sub	sp, #8
 8022318:	af00      	add	r7, sp, #0
 802231a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 802231c:	687a      	ldr	r2, [r7, #4]
 802231e:	23a7      	movs	r3, #167	@ 0xa7
 8022320:	009b      	lsls	r3, r3, #2
 8022322:	5cd1      	ldrb	r1, [r2, r3]
 8022324:	687b      	ldr	r3, [r7, #4]
 8022326:	4a06      	ldr	r2, [pc, #24]	@ (8022340 <USBD_LL_Suspend+0x2c>)
 8022328:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 802232a:	687a      	ldr	r2, [r7, #4]
 802232c:	23a7      	movs	r3, #167	@ 0xa7
 802232e:	009b      	lsls	r3, r3, #2
 8022330:	2104      	movs	r1, #4
 8022332:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8022334:	2300      	movs	r3, #0
}
 8022336:	0018      	movs	r0, r3
 8022338:	46bd      	mov	sp, r7
 802233a:	b002      	add	sp, #8
 802233c:	bd80      	pop	{r7, pc}
 802233e:	46c0      	nop			@ (mov r8, r8)
 8022340:	0000029d 	.word	0x0000029d

08022344 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8022344:	b580      	push	{r7, lr}
 8022346:	b082      	sub	sp, #8
 8022348:	af00      	add	r7, sp, #0
 802234a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802234c:	687a      	ldr	r2, [r7, #4]
 802234e:	23a7      	movs	r3, #167	@ 0xa7
 8022350:	009b      	lsls	r3, r3, #2
 8022352:	5cd3      	ldrb	r3, [r2, r3]
 8022354:	2b04      	cmp	r3, #4
 8022356:	d106      	bne.n	8022366 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	4a05      	ldr	r2, [pc, #20]	@ (8022370 <USBD_LL_Resume+0x2c>)
 802235c:	5c99      	ldrb	r1, [r3, r2]
 802235e:	687a      	ldr	r2, [r7, #4]
 8022360:	23a7      	movs	r3, #167	@ 0xa7
 8022362:	009b      	lsls	r3, r3, #2
 8022364:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8022366:	2300      	movs	r3, #0
}
 8022368:	0018      	movs	r0, r3
 802236a:	46bd      	mov	sp, r7
 802236c:	b002      	add	sp, #8
 802236e:	bd80      	pop	{r7, pc}
 8022370:	0000029d 	.word	0x0000029d

08022374 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8022374:	b580      	push	{r7, lr}
 8022376:	b082      	sub	sp, #8
 8022378:	af00      	add	r7, sp, #0
 802237a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802237c:	687a      	ldr	r2, [r7, #4]
 802237e:	23a7      	movs	r3, #167	@ 0xa7
 8022380:	009b      	lsls	r3, r3, #2
 8022382:	5cd3      	ldrb	r3, [r2, r3]
 8022384:	2b03      	cmp	r3, #3
 8022386:	d10e      	bne.n	80223a6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8022388:	687a      	ldr	r2, [r7, #4]
 802238a:	23ad      	movs	r3, #173	@ 0xad
 802238c:	009b      	lsls	r3, r3, #2
 802238e:	58d3      	ldr	r3, [r2, r3]
 8022390:	69db      	ldr	r3, [r3, #28]
 8022392:	2b00      	cmp	r3, #0
 8022394:	d007      	beq.n	80223a6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8022396:	687a      	ldr	r2, [r7, #4]
 8022398:	23ad      	movs	r3, #173	@ 0xad
 802239a:	009b      	lsls	r3, r3, #2
 802239c:	58d3      	ldr	r3, [r2, r3]
 802239e:	69db      	ldr	r3, [r3, #28]
 80223a0:	687a      	ldr	r2, [r7, #4]
 80223a2:	0010      	movs	r0, r2
 80223a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80223a6:	2300      	movs	r3, #0
}
 80223a8:	0018      	movs	r0, r3
 80223aa:	46bd      	mov	sp, r7
 80223ac:	b002      	add	sp, #8
 80223ae:	bd80      	pop	{r7, pc}

080223b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80223b0:	b580      	push	{r7, lr}
 80223b2:	b084      	sub	sp, #16
 80223b4:	af00      	add	r7, sp, #0
 80223b6:	6078      	str	r0, [r7, #4]
 80223b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80223ba:	230f      	movs	r3, #15
 80223bc:	18fb      	adds	r3, r7, r3
 80223be:	2200      	movs	r2, #0
 80223c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80223c2:	683b      	ldr	r3, [r7, #0]
 80223c4:	781b      	ldrb	r3, [r3, #0]
 80223c6:	001a      	movs	r2, r3
 80223c8:	2360      	movs	r3, #96	@ 0x60
 80223ca:	4013      	ands	r3, r2
 80223cc:	2b40      	cmp	r3, #64	@ 0x40
 80223ce:	d004      	beq.n	80223da <USBD_StdDevReq+0x2a>
 80223d0:	d84f      	bhi.n	8022472 <USBD_StdDevReq+0xc2>
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d00b      	beq.n	80223ee <USBD_StdDevReq+0x3e>
 80223d6:	2b20      	cmp	r3, #32
 80223d8:	d14b      	bne.n	8022472 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80223da:	687a      	ldr	r2, [r7, #4]
 80223dc:	23ad      	movs	r3, #173	@ 0xad
 80223de:	009b      	lsls	r3, r3, #2
 80223e0:	58d3      	ldr	r3, [r2, r3]
 80223e2:	689b      	ldr	r3, [r3, #8]
 80223e4:	6839      	ldr	r1, [r7, #0]
 80223e6:	687a      	ldr	r2, [r7, #4]
 80223e8:	0010      	movs	r0, r2
 80223ea:	4798      	blx	r3
      break;
 80223ec:	e048      	b.n	8022480 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80223ee:	683b      	ldr	r3, [r7, #0]
 80223f0:	785b      	ldrb	r3, [r3, #1]
 80223f2:	2b09      	cmp	r3, #9
 80223f4:	d835      	bhi.n	8022462 <USBD_StdDevReq+0xb2>
 80223f6:	009a      	lsls	r2, r3, #2
 80223f8:	4b25      	ldr	r3, [pc, #148]	@ (8022490 <USBD_StdDevReq+0xe0>)
 80223fa:	18d3      	adds	r3, r2, r3
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8022400:	683a      	ldr	r2, [r7, #0]
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	0011      	movs	r1, r2
 8022406:	0018      	movs	r0, r3
 8022408:	f000 fa52 	bl	80228b0 <USBD_GetDescriptor>
          break;
 802240c:	e030      	b.n	8022470 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802240e:	683a      	ldr	r2, [r7, #0]
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	0011      	movs	r1, r2
 8022414:	0018      	movs	r0, r3
 8022416:	f000 fbfd 	bl	8022c14 <USBD_SetAddress>
          break;
 802241a:	e029      	b.n	8022470 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 802241c:	683a      	ldr	r2, [r7, #0]
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	0011      	movs	r1, r2
 8022422:	0018      	movs	r0, r3
 8022424:	f000 fc4a 	bl	8022cbc <USBD_SetConfig>
          break;
 8022428:	e022      	b.n	8022470 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802242a:	683a      	ldr	r2, [r7, #0]
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	0011      	movs	r1, r2
 8022430:	0018      	movs	r0, r3
 8022432:	f000 fce7 	bl	8022e04 <USBD_GetConfig>
          break;
 8022436:	e01b      	b.n	8022470 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8022438:	683a      	ldr	r2, [r7, #0]
 802243a:	687b      	ldr	r3, [r7, #4]
 802243c:	0011      	movs	r1, r2
 802243e:	0018      	movs	r0, r3
 8022440:	f000 fd1b 	bl	8022e7a <USBD_GetStatus>
          break;
 8022444:	e014      	b.n	8022470 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8022446:	683a      	ldr	r2, [r7, #0]
 8022448:	687b      	ldr	r3, [r7, #4]
 802244a:	0011      	movs	r1, r2
 802244c:	0018      	movs	r0, r3
 802244e:	f000 fd4e 	bl	8022eee <USBD_SetFeature>
          break;
 8022452:	e00d      	b.n	8022470 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8022454:	683a      	ldr	r2, [r7, #0]
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	0011      	movs	r1, r2
 802245a:	0018      	movs	r0, r3
 802245c:	f000 fd5d 	bl	8022f1a <USBD_ClrFeature>
          break;
 8022460:	e006      	b.n	8022470 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8022462:	683a      	ldr	r2, [r7, #0]
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	0011      	movs	r1, r2
 8022468:	0018      	movs	r0, r3
 802246a:	f000 fdb4 	bl	8022fd6 <USBD_CtlError>
          break;
 802246e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022470:	e006      	b.n	8022480 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8022472:	683a      	ldr	r2, [r7, #0]
 8022474:	687b      	ldr	r3, [r7, #4]
 8022476:	0011      	movs	r1, r2
 8022478:	0018      	movs	r0, r3
 802247a:	f000 fdac 	bl	8022fd6 <USBD_CtlError>
      break;
 802247e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8022480:	230f      	movs	r3, #15
 8022482:	18fb      	adds	r3, r7, r3
 8022484:	781b      	ldrb	r3, [r3, #0]
}
 8022486:	0018      	movs	r0, r3
 8022488:	46bd      	mov	sp, r7
 802248a:	b004      	add	sp, #16
 802248c:	bd80      	pop	{r7, pc}
 802248e:	46c0      	nop			@ (mov r8, r8)
 8022490:	0802f010 	.word	0x0802f010

08022494 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8022494:	b5b0      	push	{r4, r5, r7, lr}
 8022496:	b084      	sub	sp, #16
 8022498:	af00      	add	r7, sp, #0
 802249a:	6078      	str	r0, [r7, #4]
 802249c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802249e:	230f      	movs	r3, #15
 80224a0:	18fb      	adds	r3, r7, r3
 80224a2:	2200      	movs	r2, #0
 80224a4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80224a6:	683b      	ldr	r3, [r7, #0]
 80224a8:	781b      	ldrb	r3, [r3, #0]
 80224aa:	001a      	movs	r2, r3
 80224ac:	2360      	movs	r3, #96	@ 0x60
 80224ae:	4013      	ands	r3, r2
 80224b0:	2b40      	cmp	r3, #64	@ 0x40
 80224b2:	d004      	beq.n	80224be <USBD_StdItfReq+0x2a>
 80224b4:	d839      	bhi.n	802252a <USBD_StdItfReq+0x96>
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d001      	beq.n	80224be <USBD_StdItfReq+0x2a>
 80224ba:	2b20      	cmp	r3, #32
 80224bc:	d135      	bne.n	802252a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80224be:	687a      	ldr	r2, [r7, #4]
 80224c0:	23a7      	movs	r3, #167	@ 0xa7
 80224c2:	009b      	lsls	r3, r3, #2
 80224c4:	5cd3      	ldrb	r3, [r2, r3]
 80224c6:	3b01      	subs	r3, #1
 80224c8:	2b02      	cmp	r3, #2
 80224ca:	d825      	bhi.n	8022518 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80224cc:	683b      	ldr	r3, [r7, #0]
 80224ce:	889b      	ldrh	r3, [r3, #4]
 80224d0:	b2db      	uxtb	r3, r3
 80224d2:	2b01      	cmp	r3, #1
 80224d4:	d819      	bhi.n	802250a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80224d6:	687a      	ldr	r2, [r7, #4]
 80224d8:	23ad      	movs	r3, #173	@ 0xad
 80224da:	009b      	lsls	r3, r3, #2
 80224dc:	58d3      	ldr	r3, [r2, r3]
 80224de:	689b      	ldr	r3, [r3, #8]
 80224e0:	250f      	movs	r5, #15
 80224e2:	197c      	adds	r4, r7, r5
 80224e4:	6839      	ldr	r1, [r7, #0]
 80224e6:	687a      	ldr	r2, [r7, #4]
 80224e8:	0010      	movs	r0, r2
 80224ea:	4798      	blx	r3
 80224ec:	0003      	movs	r3, r0
 80224ee:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80224f0:	683b      	ldr	r3, [r7, #0]
 80224f2:	88db      	ldrh	r3, [r3, #6]
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	d116      	bne.n	8022526 <USBD_StdItfReq+0x92>
 80224f8:	197b      	adds	r3, r7, r5
 80224fa:	781b      	ldrb	r3, [r3, #0]
 80224fc:	2b00      	cmp	r3, #0
 80224fe:	d112      	bne.n	8022526 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8022500:	687b      	ldr	r3, [r7, #4]
 8022502:	0018      	movs	r0, r3
 8022504:	f000 fe4f 	bl	80231a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8022508:	e00d      	b.n	8022526 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 802250a:	683a      	ldr	r2, [r7, #0]
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	0011      	movs	r1, r2
 8022510:	0018      	movs	r0, r3
 8022512:	f000 fd60 	bl	8022fd6 <USBD_CtlError>
          break;
 8022516:	e006      	b.n	8022526 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8022518:	683a      	ldr	r2, [r7, #0]
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	0011      	movs	r1, r2
 802251e:	0018      	movs	r0, r3
 8022520:	f000 fd59 	bl	8022fd6 <USBD_CtlError>
          break;
 8022524:	e000      	b.n	8022528 <USBD_StdItfReq+0x94>
          break;
 8022526:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022528:	e006      	b.n	8022538 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 802252a:	683a      	ldr	r2, [r7, #0]
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	0011      	movs	r1, r2
 8022530:	0018      	movs	r0, r3
 8022532:	f000 fd50 	bl	8022fd6 <USBD_CtlError>
      break;
 8022536:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8022538:	2300      	movs	r3, #0
}
 802253a:	0018      	movs	r0, r3
 802253c:	46bd      	mov	sp, r7
 802253e:	b004      	add	sp, #16
 8022540:	bdb0      	pop	{r4, r5, r7, pc}

08022542 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8022542:	b5b0      	push	{r4, r5, r7, lr}
 8022544:	b084      	sub	sp, #16
 8022546:	af00      	add	r7, sp, #0
 8022548:	6078      	str	r0, [r7, #4]
 802254a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 802254c:	230f      	movs	r3, #15
 802254e:	18fb      	adds	r3, r7, r3
 8022550:	2200      	movs	r2, #0
 8022552:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8022554:	683b      	ldr	r3, [r7, #0]
 8022556:	889a      	ldrh	r2, [r3, #4]
 8022558:	230e      	movs	r3, #14
 802255a:	18fb      	adds	r3, r7, r3
 802255c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802255e:	683b      	ldr	r3, [r7, #0]
 8022560:	781b      	ldrb	r3, [r3, #0]
 8022562:	001a      	movs	r2, r3
 8022564:	2360      	movs	r3, #96	@ 0x60
 8022566:	4013      	ands	r3, r2
 8022568:	2b40      	cmp	r3, #64	@ 0x40
 802256a:	d006      	beq.n	802257a <USBD_StdEPReq+0x38>
 802256c:	d900      	bls.n	8022570 <USBD_StdEPReq+0x2e>
 802256e:	e190      	b.n	8022892 <USBD_StdEPReq+0x350>
 8022570:	2b00      	cmp	r3, #0
 8022572:	d00c      	beq.n	802258e <USBD_StdEPReq+0x4c>
 8022574:	2b20      	cmp	r3, #32
 8022576:	d000      	beq.n	802257a <USBD_StdEPReq+0x38>
 8022578:	e18b      	b.n	8022892 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802257a:	687a      	ldr	r2, [r7, #4]
 802257c:	23ad      	movs	r3, #173	@ 0xad
 802257e:	009b      	lsls	r3, r3, #2
 8022580:	58d3      	ldr	r3, [r2, r3]
 8022582:	689b      	ldr	r3, [r3, #8]
 8022584:	6839      	ldr	r1, [r7, #0]
 8022586:	687a      	ldr	r2, [r7, #4]
 8022588:	0010      	movs	r0, r2
 802258a:	4798      	blx	r3
      break;
 802258c:	e188      	b.n	80228a0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 802258e:	683b      	ldr	r3, [r7, #0]
 8022590:	781b      	ldrb	r3, [r3, #0]
 8022592:	001a      	movs	r2, r3
 8022594:	2360      	movs	r3, #96	@ 0x60
 8022596:	4013      	ands	r3, r2
 8022598:	2b20      	cmp	r3, #32
 802259a:	d10f      	bne.n	80225bc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802259c:	687a      	ldr	r2, [r7, #4]
 802259e:	23ad      	movs	r3, #173	@ 0xad
 80225a0:	009b      	lsls	r3, r3, #2
 80225a2:	58d3      	ldr	r3, [r2, r3]
 80225a4:	689b      	ldr	r3, [r3, #8]
 80225a6:	250f      	movs	r5, #15
 80225a8:	197c      	adds	r4, r7, r5
 80225aa:	6839      	ldr	r1, [r7, #0]
 80225ac:	687a      	ldr	r2, [r7, #4]
 80225ae:	0010      	movs	r0, r2
 80225b0:	4798      	blx	r3
 80225b2:	0003      	movs	r3, r0
 80225b4:	7023      	strb	r3, [r4, #0]

        return ret;
 80225b6:	197b      	adds	r3, r7, r5
 80225b8:	781b      	ldrb	r3, [r3, #0]
 80225ba:	e174      	b.n	80228a6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80225bc:	683b      	ldr	r3, [r7, #0]
 80225be:	785b      	ldrb	r3, [r3, #1]
 80225c0:	2b03      	cmp	r3, #3
 80225c2:	d007      	beq.n	80225d4 <USBD_StdEPReq+0x92>
 80225c4:	dd00      	ble.n	80225c8 <USBD_StdEPReq+0x86>
 80225c6:	e15c      	b.n	8022882 <USBD_StdEPReq+0x340>
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	d100      	bne.n	80225ce <USBD_StdEPReq+0x8c>
 80225cc:	e092      	b.n	80226f4 <USBD_StdEPReq+0x1b2>
 80225ce:	2b01      	cmp	r3, #1
 80225d0:	d04b      	beq.n	802266a <USBD_StdEPReq+0x128>
 80225d2:	e156      	b.n	8022882 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80225d4:	687a      	ldr	r2, [r7, #4]
 80225d6:	23a7      	movs	r3, #167	@ 0xa7
 80225d8:	009b      	lsls	r3, r3, #2
 80225da:	5cd3      	ldrb	r3, [r2, r3]
 80225dc:	2b02      	cmp	r3, #2
 80225de:	d002      	beq.n	80225e6 <USBD_StdEPReq+0xa4>
 80225e0:	2b03      	cmp	r3, #3
 80225e2:	d01d      	beq.n	8022620 <USBD_StdEPReq+0xde>
 80225e4:	e039      	b.n	802265a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80225e6:	220e      	movs	r2, #14
 80225e8:	18bb      	adds	r3, r7, r2
 80225ea:	781b      	ldrb	r3, [r3, #0]
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	d010      	beq.n	8022612 <USBD_StdEPReq+0xd0>
 80225f0:	18bb      	adds	r3, r7, r2
 80225f2:	781b      	ldrb	r3, [r3, #0]
 80225f4:	2b80      	cmp	r3, #128	@ 0x80
 80225f6:	d00c      	beq.n	8022612 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80225f8:	18bb      	adds	r3, r7, r2
 80225fa:	781a      	ldrb	r2, [r3, #0]
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	0011      	movs	r1, r2
 8022600:	0018      	movs	r0, r3
 8022602:	f001 fa1c 	bl	8023a3e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8022606:	687b      	ldr	r3, [r7, #4]
 8022608:	2180      	movs	r1, #128	@ 0x80
 802260a:	0018      	movs	r0, r3
 802260c:	f001 fa17 	bl	8023a3e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022610:	e02a      	b.n	8022668 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8022612:	683a      	ldr	r2, [r7, #0]
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	0011      	movs	r1, r2
 8022618:	0018      	movs	r0, r3
 802261a:	f000 fcdc 	bl	8022fd6 <USBD_CtlError>
              break;
 802261e:	e023      	b.n	8022668 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022620:	683b      	ldr	r3, [r7, #0]
 8022622:	885b      	ldrh	r3, [r3, #2]
 8022624:	2b00      	cmp	r3, #0
 8022626:	d113      	bne.n	8022650 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8022628:	220e      	movs	r2, #14
 802262a:	18bb      	adds	r3, r7, r2
 802262c:	781b      	ldrb	r3, [r3, #0]
 802262e:	2b00      	cmp	r3, #0
 8022630:	d00e      	beq.n	8022650 <USBD_StdEPReq+0x10e>
 8022632:	18bb      	adds	r3, r7, r2
 8022634:	781b      	ldrb	r3, [r3, #0]
 8022636:	2b80      	cmp	r3, #128	@ 0x80
 8022638:	d00a      	beq.n	8022650 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802263a:	683b      	ldr	r3, [r7, #0]
 802263c:	88db      	ldrh	r3, [r3, #6]
 802263e:	2b00      	cmp	r3, #0
 8022640:	d106      	bne.n	8022650 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8022642:	18bb      	adds	r3, r7, r2
 8022644:	781a      	ldrb	r2, [r3, #0]
 8022646:	687b      	ldr	r3, [r7, #4]
 8022648:	0011      	movs	r1, r2
 802264a:	0018      	movs	r0, r3
 802264c:	f001 f9f7 	bl	8023a3e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8022650:	687b      	ldr	r3, [r7, #4]
 8022652:	0018      	movs	r0, r3
 8022654:	f000 fda7 	bl	80231a6 <USBD_CtlSendStatus>

              break;
 8022658:	e006      	b.n	8022668 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 802265a:	683a      	ldr	r2, [r7, #0]
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	0011      	movs	r1, r2
 8022660:	0018      	movs	r0, r3
 8022662:	f000 fcb8 	bl	8022fd6 <USBD_CtlError>
              break;
 8022666:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022668:	e112      	b.n	8022890 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802266a:	687a      	ldr	r2, [r7, #4]
 802266c:	23a7      	movs	r3, #167	@ 0xa7
 802266e:	009b      	lsls	r3, r3, #2
 8022670:	5cd3      	ldrb	r3, [r2, r3]
 8022672:	2b02      	cmp	r3, #2
 8022674:	d002      	beq.n	802267c <USBD_StdEPReq+0x13a>
 8022676:	2b03      	cmp	r3, #3
 8022678:	d01d      	beq.n	80226b6 <USBD_StdEPReq+0x174>
 802267a:	e032      	b.n	80226e2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802267c:	220e      	movs	r2, #14
 802267e:	18bb      	adds	r3, r7, r2
 8022680:	781b      	ldrb	r3, [r3, #0]
 8022682:	2b00      	cmp	r3, #0
 8022684:	d010      	beq.n	80226a8 <USBD_StdEPReq+0x166>
 8022686:	18bb      	adds	r3, r7, r2
 8022688:	781b      	ldrb	r3, [r3, #0]
 802268a:	2b80      	cmp	r3, #128	@ 0x80
 802268c:	d00c      	beq.n	80226a8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 802268e:	18bb      	adds	r3, r7, r2
 8022690:	781a      	ldrb	r2, [r3, #0]
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	0011      	movs	r1, r2
 8022696:	0018      	movs	r0, r3
 8022698:	f001 f9d1 	bl	8023a3e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	2180      	movs	r1, #128	@ 0x80
 80226a0:	0018      	movs	r0, r3
 80226a2:	f001 f9cc 	bl	8023a3e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80226a6:	e024      	b.n	80226f2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80226a8:	683a      	ldr	r2, [r7, #0]
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	0011      	movs	r1, r2
 80226ae:	0018      	movs	r0, r3
 80226b0:	f000 fc91 	bl	8022fd6 <USBD_CtlError>
              break;
 80226b4:	e01d      	b.n	80226f2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80226b6:	683b      	ldr	r3, [r7, #0]
 80226b8:	885b      	ldrh	r3, [r3, #2]
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	d118      	bne.n	80226f0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80226be:	210e      	movs	r1, #14
 80226c0:	187b      	adds	r3, r7, r1
 80226c2:	781b      	ldrb	r3, [r3, #0]
 80226c4:	227f      	movs	r2, #127	@ 0x7f
 80226c6:	4013      	ands	r3, r2
 80226c8:	d006      	beq.n	80226d8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80226ca:	187b      	adds	r3, r7, r1
 80226cc:	781a      	ldrb	r2, [r3, #0]
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	0011      	movs	r1, r2
 80226d2:	0018      	movs	r0, r3
 80226d4:	f001 f9de 	bl	8023a94 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	0018      	movs	r0, r3
 80226dc:	f000 fd63 	bl	80231a6 <USBD_CtlSendStatus>
              }
              break;
 80226e0:	e006      	b.n	80226f0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80226e2:	683a      	ldr	r2, [r7, #0]
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	0011      	movs	r1, r2
 80226e8:	0018      	movs	r0, r3
 80226ea:	f000 fc74 	bl	8022fd6 <USBD_CtlError>
              break;
 80226ee:	e000      	b.n	80226f2 <USBD_StdEPReq+0x1b0>
              break;
 80226f0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80226f2:	e0cd      	b.n	8022890 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80226f4:	687a      	ldr	r2, [r7, #4]
 80226f6:	23a7      	movs	r3, #167	@ 0xa7
 80226f8:	009b      	lsls	r3, r3, #2
 80226fa:	5cd3      	ldrb	r3, [r2, r3]
 80226fc:	2b02      	cmp	r3, #2
 80226fe:	d002      	beq.n	8022706 <USBD_StdEPReq+0x1c4>
 8022700:	2b03      	cmp	r3, #3
 8022702:	d03c      	beq.n	802277e <USBD_StdEPReq+0x23c>
 8022704:	e0b5      	b.n	8022872 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022706:	220e      	movs	r2, #14
 8022708:	18bb      	adds	r3, r7, r2
 802270a:	781b      	ldrb	r3, [r3, #0]
 802270c:	2b00      	cmp	r3, #0
 802270e:	d00a      	beq.n	8022726 <USBD_StdEPReq+0x1e4>
 8022710:	18bb      	adds	r3, r7, r2
 8022712:	781b      	ldrb	r3, [r3, #0]
 8022714:	2b80      	cmp	r3, #128	@ 0x80
 8022716:	d006      	beq.n	8022726 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8022718:	683a      	ldr	r2, [r7, #0]
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	0011      	movs	r1, r2
 802271e:	0018      	movs	r0, r3
 8022720:	f000 fc59 	bl	8022fd6 <USBD_CtlError>
                break;
 8022724:	e0ac      	b.n	8022880 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022726:	220e      	movs	r2, #14
 8022728:	18bb      	adds	r3, r7, r2
 802272a:	781b      	ldrb	r3, [r3, #0]
 802272c:	b25b      	sxtb	r3, r3
 802272e:	2b00      	cmp	r3, #0
 8022730:	da0c      	bge.n	802274c <USBD_StdEPReq+0x20a>
 8022732:	18bb      	adds	r3, r7, r2
 8022734:	781b      	ldrb	r3, [r3, #0]
 8022736:	227f      	movs	r2, #127	@ 0x7f
 8022738:	401a      	ands	r2, r3
 802273a:	0013      	movs	r3, r2
 802273c:	009b      	lsls	r3, r3, #2
 802273e:	189b      	adds	r3, r3, r2
 8022740:	009b      	lsls	r3, r3, #2
 8022742:	3310      	adds	r3, #16
 8022744:	687a      	ldr	r2, [r7, #4]
 8022746:	18d3      	adds	r3, r2, r3
 8022748:	3304      	adds	r3, #4
 802274a:	e00d      	b.n	8022768 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802274c:	230e      	movs	r3, #14
 802274e:	18fb      	adds	r3, r7, r3
 8022750:	781b      	ldrb	r3, [r3, #0]
 8022752:	227f      	movs	r2, #127	@ 0x7f
 8022754:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022756:	0013      	movs	r3, r2
 8022758:	009b      	lsls	r3, r3, #2
 802275a:	189b      	adds	r3, r3, r2
 802275c:	009b      	lsls	r3, r3, #2
 802275e:	3351      	adds	r3, #81	@ 0x51
 8022760:	33ff      	adds	r3, #255	@ 0xff
 8022762:	687a      	ldr	r2, [r7, #4]
 8022764:	18d3      	adds	r3, r2, r3
 8022766:	3304      	adds	r3, #4
 8022768:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802276a:	68bb      	ldr	r3, [r7, #8]
 802276c:	2200      	movs	r2, #0
 802276e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8022770:	68b9      	ldr	r1, [r7, #8]
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	2202      	movs	r2, #2
 8022776:	0018      	movs	r0, r3
 8022778:	f000 fcab 	bl	80230d2 <USBD_CtlSendData>
              break;
 802277c:	e080      	b.n	8022880 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 802277e:	220e      	movs	r2, #14
 8022780:	18bb      	adds	r3, r7, r2
 8022782:	781b      	ldrb	r3, [r3, #0]
 8022784:	b25b      	sxtb	r3, r3
 8022786:	2b00      	cmp	r3, #0
 8022788:	da14      	bge.n	80227b4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802278a:	18bb      	adds	r3, r7, r2
 802278c:	781b      	ldrb	r3, [r3, #0]
 802278e:	220f      	movs	r2, #15
 8022790:	401a      	ands	r2, r3
 8022792:	6879      	ldr	r1, [r7, #4]
 8022794:	0013      	movs	r3, r2
 8022796:	009b      	lsls	r3, r3, #2
 8022798:	189b      	adds	r3, r3, r2
 802279a:	009b      	lsls	r3, r3, #2
 802279c:	18cb      	adds	r3, r1, r3
 802279e:	3318      	adds	r3, #24
 80227a0:	681b      	ldr	r3, [r3, #0]
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	d11e      	bne.n	80227e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80227a6:	683a      	ldr	r2, [r7, #0]
 80227a8:	687b      	ldr	r3, [r7, #4]
 80227aa:	0011      	movs	r1, r2
 80227ac:	0018      	movs	r0, r3
 80227ae:	f000 fc12 	bl	8022fd6 <USBD_CtlError>
                  break;
 80227b2:	e065      	b.n	8022880 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80227b4:	230e      	movs	r3, #14
 80227b6:	18fb      	adds	r3, r7, r3
 80227b8:	781b      	ldrb	r3, [r3, #0]
 80227ba:	220f      	movs	r2, #15
 80227bc:	401a      	ands	r2, r3
 80227be:	6878      	ldr	r0, [r7, #4]
 80227c0:	23ac      	movs	r3, #172	@ 0xac
 80227c2:	0059      	lsls	r1, r3, #1
 80227c4:	0013      	movs	r3, r2
 80227c6:	009b      	lsls	r3, r3, #2
 80227c8:	189b      	adds	r3, r3, r2
 80227ca:	009b      	lsls	r3, r3, #2
 80227cc:	18c3      	adds	r3, r0, r3
 80227ce:	185b      	adds	r3, r3, r1
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	d106      	bne.n	80227e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80227d6:	683a      	ldr	r2, [r7, #0]
 80227d8:	687b      	ldr	r3, [r7, #4]
 80227da:	0011      	movs	r1, r2
 80227dc:	0018      	movs	r0, r3
 80227de:	f000 fbfa 	bl	8022fd6 <USBD_CtlError>
                  break;
 80227e2:	e04d      	b.n	8022880 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80227e4:	220e      	movs	r2, #14
 80227e6:	18bb      	adds	r3, r7, r2
 80227e8:	781b      	ldrb	r3, [r3, #0]
 80227ea:	b25b      	sxtb	r3, r3
 80227ec:	2b00      	cmp	r3, #0
 80227ee:	da0c      	bge.n	802280a <USBD_StdEPReq+0x2c8>
 80227f0:	18bb      	adds	r3, r7, r2
 80227f2:	781b      	ldrb	r3, [r3, #0]
 80227f4:	227f      	movs	r2, #127	@ 0x7f
 80227f6:	401a      	ands	r2, r3
 80227f8:	0013      	movs	r3, r2
 80227fa:	009b      	lsls	r3, r3, #2
 80227fc:	189b      	adds	r3, r3, r2
 80227fe:	009b      	lsls	r3, r3, #2
 8022800:	3310      	adds	r3, #16
 8022802:	687a      	ldr	r2, [r7, #4]
 8022804:	18d3      	adds	r3, r2, r3
 8022806:	3304      	adds	r3, #4
 8022808:	e00d      	b.n	8022826 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802280a:	230e      	movs	r3, #14
 802280c:	18fb      	adds	r3, r7, r3
 802280e:	781b      	ldrb	r3, [r3, #0]
 8022810:	227f      	movs	r2, #127	@ 0x7f
 8022812:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022814:	0013      	movs	r3, r2
 8022816:	009b      	lsls	r3, r3, #2
 8022818:	189b      	adds	r3, r3, r2
 802281a:	009b      	lsls	r3, r3, #2
 802281c:	3351      	adds	r3, #81	@ 0x51
 802281e:	33ff      	adds	r3, #255	@ 0xff
 8022820:	687a      	ldr	r2, [r7, #4]
 8022822:	18d3      	adds	r3, r2, r3
 8022824:	3304      	adds	r3, #4
 8022826:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8022828:	220e      	movs	r2, #14
 802282a:	18bb      	adds	r3, r7, r2
 802282c:	781b      	ldrb	r3, [r3, #0]
 802282e:	2b00      	cmp	r3, #0
 8022830:	d003      	beq.n	802283a <USBD_StdEPReq+0x2f8>
 8022832:	18bb      	adds	r3, r7, r2
 8022834:	781b      	ldrb	r3, [r3, #0]
 8022836:	2b80      	cmp	r3, #128	@ 0x80
 8022838:	d103      	bne.n	8022842 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 802283a:	68bb      	ldr	r3, [r7, #8]
 802283c:	2200      	movs	r2, #0
 802283e:	601a      	str	r2, [r3, #0]
 8022840:	e010      	b.n	8022864 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8022842:	230e      	movs	r3, #14
 8022844:	18fb      	adds	r3, r7, r3
 8022846:	781a      	ldrb	r2, [r3, #0]
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	0011      	movs	r1, r2
 802284c:	0018      	movs	r0, r3
 802284e:	f001 f94c 	bl	8023aea <USBD_LL_IsStallEP>
 8022852:	1e03      	subs	r3, r0, #0
 8022854:	d003      	beq.n	802285e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8022856:	68bb      	ldr	r3, [r7, #8]
 8022858:	2201      	movs	r2, #1
 802285a:	601a      	str	r2, [r3, #0]
 802285c:	e002      	b.n	8022864 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 802285e:	68bb      	ldr	r3, [r7, #8]
 8022860:	2200      	movs	r2, #0
 8022862:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8022864:	68b9      	ldr	r1, [r7, #8]
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	2202      	movs	r2, #2
 802286a:	0018      	movs	r0, r3
 802286c:	f000 fc31 	bl	80230d2 <USBD_CtlSendData>
              break;
 8022870:	e006      	b.n	8022880 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8022872:	683a      	ldr	r2, [r7, #0]
 8022874:	687b      	ldr	r3, [r7, #4]
 8022876:	0011      	movs	r1, r2
 8022878:	0018      	movs	r0, r3
 802287a:	f000 fbac 	bl	8022fd6 <USBD_CtlError>
              break;
 802287e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022880:	e006      	b.n	8022890 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8022882:	683a      	ldr	r2, [r7, #0]
 8022884:	687b      	ldr	r3, [r7, #4]
 8022886:	0011      	movs	r1, r2
 8022888:	0018      	movs	r0, r3
 802288a:	f000 fba4 	bl	8022fd6 <USBD_CtlError>
          break;
 802288e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022890:	e006      	b.n	80228a0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8022892:	683a      	ldr	r2, [r7, #0]
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	0011      	movs	r1, r2
 8022898:	0018      	movs	r0, r3
 802289a:	f000 fb9c 	bl	8022fd6 <USBD_CtlError>
      break;
 802289e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80228a0:	230f      	movs	r3, #15
 80228a2:	18fb      	adds	r3, r7, r3
 80228a4:	781b      	ldrb	r3, [r3, #0]
}
 80228a6:	0018      	movs	r0, r3
 80228a8:	46bd      	mov	sp, r7
 80228aa:	b004      	add	sp, #16
 80228ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080228b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80228b0:	b580      	push	{r7, lr}
 80228b2:	b084      	sub	sp, #16
 80228b4:	af00      	add	r7, sp, #0
 80228b6:	6078      	str	r0, [r7, #4]
 80228b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80228ba:	2308      	movs	r3, #8
 80228bc:	18fb      	adds	r3, r7, r3
 80228be:	2200      	movs	r2, #0
 80228c0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80228c2:	2300      	movs	r3, #0
 80228c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80228c6:	230b      	movs	r3, #11
 80228c8:	18fb      	adds	r3, r7, r3
 80228ca:	2200      	movs	r2, #0
 80228cc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80228ce:	683b      	ldr	r3, [r7, #0]
 80228d0:	885b      	ldrh	r3, [r3, #2]
 80228d2:	0a1b      	lsrs	r3, r3, #8
 80228d4:	b29b      	uxth	r3, r3
 80228d6:	2b07      	cmp	r3, #7
 80228d8:	d900      	bls.n	80228dc <USBD_GetDescriptor+0x2c>
 80228da:	e159      	b.n	8022b90 <USBD_GetDescriptor+0x2e0>
 80228dc:	009a      	lsls	r2, r3, #2
 80228de:	4bcb      	ldr	r3, [pc, #812]	@ (8022c0c <USBD_GetDescriptor+0x35c>)
 80228e0:	18d3      	adds	r3, r2, r3
 80228e2:	681b      	ldr	r3, [r3, #0]
 80228e4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80228e6:	687a      	ldr	r2, [r7, #4]
 80228e8:	23ac      	movs	r3, #172	@ 0xac
 80228ea:	009b      	lsls	r3, r3, #2
 80228ec:	58d3      	ldr	r3, [r2, r3]
 80228ee:	681b      	ldr	r3, [r3, #0]
 80228f0:	687a      	ldr	r2, [r7, #4]
 80228f2:	7c12      	ldrb	r2, [r2, #16]
 80228f4:	2108      	movs	r1, #8
 80228f6:	1879      	adds	r1, r7, r1
 80228f8:	0010      	movs	r0, r2
 80228fa:	4798      	blx	r3
 80228fc:	0003      	movs	r3, r0
 80228fe:	60fb      	str	r3, [r7, #12]
      break;
 8022900:	e153      	b.n	8022baa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022902:	687b      	ldr	r3, [r7, #4]
 8022904:	7c1b      	ldrb	r3, [r3, #16]
 8022906:	2b00      	cmp	r3, #0
 8022908:	d10f      	bne.n	802292a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802290a:	687a      	ldr	r2, [r7, #4]
 802290c:	23ad      	movs	r3, #173	@ 0xad
 802290e:	009b      	lsls	r3, r3, #2
 8022910:	58d3      	ldr	r3, [r2, r3]
 8022912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022914:	2208      	movs	r2, #8
 8022916:	18ba      	adds	r2, r7, r2
 8022918:	0010      	movs	r0, r2
 802291a:	4798      	blx	r3
 802291c:	0003      	movs	r3, r0
 802291e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022920:	68fb      	ldr	r3, [r7, #12]
 8022922:	3301      	adds	r3, #1
 8022924:	2202      	movs	r2, #2
 8022926:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8022928:	e13f      	b.n	8022baa <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802292a:	687a      	ldr	r2, [r7, #4]
 802292c:	23ad      	movs	r3, #173	@ 0xad
 802292e:	009b      	lsls	r3, r3, #2
 8022930:	58d3      	ldr	r3, [r2, r3]
 8022932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022934:	2208      	movs	r2, #8
 8022936:	18ba      	adds	r2, r7, r2
 8022938:	0010      	movs	r0, r2
 802293a:	4798      	blx	r3
 802293c:	0003      	movs	r3, r0
 802293e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	3301      	adds	r3, #1
 8022944:	2202      	movs	r2, #2
 8022946:	701a      	strb	r2, [r3, #0]
      break;
 8022948:	e12f      	b.n	8022baa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802294a:	683b      	ldr	r3, [r7, #0]
 802294c:	885b      	ldrh	r3, [r3, #2]
 802294e:	b2db      	uxtb	r3, r3
 8022950:	2b05      	cmp	r3, #5
 8022952:	d900      	bls.n	8022956 <USBD_GetDescriptor+0xa6>
 8022954:	e0d0      	b.n	8022af8 <USBD_GetDescriptor+0x248>
 8022956:	009a      	lsls	r2, r3, #2
 8022958:	4bad      	ldr	r3, [pc, #692]	@ (8022c10 <USBD_GetDescriptor+0x360>)
 802295a:	18d3      	adds	r3, r2, r3
 802295c:	681b      	ldr	r3, [r3, #0]
 802295e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8022960:	687a      	ldr	r2, [r7, #4]
 8022962:	23ac      	movs	r3, #172	@ 0xac
 8022964:	009b      	lsls	r3, r3, #2
 8022966:	58d3      	ldr	r3, [r2, r3]
 8022968:	685b      	ldr	r3, [r3, #4]
 802296a:	2b00      	cmp	r3, #0
 802296c:	d00d      	beq.n	802298a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802296e:	687a      	ldr	r2, [r7, #4]
 8022970:	23ac      	movs	r3, #172	@ 0xac
 8022972:	009b      	lsls	r3, r3, #2
 8022974:	58d3      	ldr	r3, [r2, r3]
 8022976:	685b      	ldr	r3, [r3, #4]
 8022978:	687a      	ldr	r2, [r7, #4]
 802297a:	7c12      	ldrb	r2, [r2, #16]
 802297c:	2108      	movs	r1, #8
 802297e:	1879      	adds	r1, r7, r1
 8022980:	0010      	movs	r0, r2
 8022982:	4798      	blx	r3
 8022984:	0003      	movs	r3, r0
 8022986:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022988:	e0c3      	b.n	8022b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802298a:	683a      	ldr	r2, [r7, #0]
 802298c:	687b      	ldr	r3, [r7, #4]
 802298e:	0011      	movs	r1, r2
 8022990:	0018      	movs	r0, r3
 8022992:	f000 fb20 	bl	8022fd6 <USBD_CtlError>
            err++;
 8022996:	210b      	movs	r1, #11
 8022998:	187b      	adds	r3, r7, r1
 802299a:	781a      	ldrb	r2, [r3, #0]
 802299c:	187b      	adds	r3, r7, r1
 802299e:	3201      	adds	r2, #1
 80229a0:	701a      	strb	r2, [r3, #0]
          break;
 80229a2:	e0b6      	b.n	8022b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80229a4:	687a      	ldr	r2, [r7, #4]
 80229a6:	23ac      	movs	r3, #172	@ 0xac
 80229a8:	009b      	lsls	r3, r3, #2
 80229aa:	58d3      	ldr	r3, [r2, r3]
 80229ac:	689b      	ldr	r3, [r3, #8]
 80229ae:	2b00      	cmp	r3, #0
 80229b0:	d00d      	beq.n	80229ce <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80229b2:	687a      	ldr	r2, [r7, #4]
 80229b4:	23ac      	movs	r3, #172	@ 0xac
 80229b6:	009b      	lsls	r3, r3, #2
 80229b8:	58d3      	ldr	r3, [r2, r3]
 80229ba:	689b      	ldr	r3, [r3, #8]
 80229bc:	687a      	ldr	r2, [r7, #4]
 80229be:	7c12      	ldrb	r2, [r2, #16]
 80229c0:	2108      	movs	r1, #8
 80229c2:	1879      	adds	r1, r7, r1
 80229c4:	0010      	movs	r0, r2
 80229c6:	4798      	blx	r3
 80229c8:	0003      	movs	r3, r0
 80229ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80229cc:	e0a1      	b.n	8022b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80229ce:	683a      	ldr	r2, [r7, #0]
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	0011      	movs	r1, r2
 80229d4:	0018      	movs	r0, r3
 80229d6:	f000 fafe 	bl	8022fd6 <USBD_CtlError>
            err++;
 80229da:	210b      	movs	r1, #11
 80229dc:	187b      	adds	r3, r7, r1
 80229de:	781a      	ldrb	r2, [r3, #0]
 80229e0:	187b      	adds	r3, r7, r1
 80229e2:	3201      	adds	r2, #1
 80229e4:	701a      	strb	r2, [r3, #0]
          break;
 80229e6:	e094      	b.n	8022b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80229e8:	687a      	ldr	r2, [r7, #4]
 80229ea:	23ac      	movs	r3, #172	@ 0xac
 80229ec:	009b      	lsls	r3, r3, #2
 80229ee:	58d3      	ldr	r3, [r2, r3]
 80229f0:	68db      	ldr	r3, [r3, #12]
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	d00d      	beq.n	8022a12 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80229f6:	687a      	ldr	r2, [r7, #4]
 80229f8:	23ac      	movs	r3, #172	@ 0xac
 80229fa:	009b      	lsls	r3, r3, #2
 80229fc:	58d3      	ldr	r3, [r2, r3]
 80229fe:	68db      	ldr	r3, [r3, #12]
 8022a00:	687a      	ldr	r2, [r7, #4]
 8022a02:	7c12      	ldrb	r2, [r2, #16]
 8022a04:	2108      	movs	r1, #8
 8022a06:	1879      	adds	r1, r7, r1
 8022a08:	0010      	movs	r0, r2
 8022a0a:	4798      	blx	r3
 8022a0c:	0003      	movs	r3, r0
 8022a0e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022a10:	e07f      	b.n	8022b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022a12:	683a      	ldr	r2, [r7, #0]
 8022a14:	687b      	ldr	r3, [r7, #4]
 8022a16:	0011      	movs	r1, r2
 8022a18:	0018      	movs	r0, r3
 8022a1a:	f000 fadc 	bl	8022fd6 <USBD_CtlError>
            err++;
 8022a1e:	210b      	movs	r1, #11
 8022a20:	187b      	adds	r3, r7, r1
 8022a22:	781a      	ldrb	r2, [r3, #0]
 8022a24:	187b      	adds	r3, r7, r1
 8022a26:	3201      	adds	r2, #1
 8022a28:	701a      	strb	r2, [r3, #0]
          break;
 8022a2a:	e072      	b.n	8022b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8022a2c:	687a      	ldr	r2, [r7, #4]
 8022a2e:	23ac      	movs	r3, #172	@ 0xac
 8022a30:	009b      	lsls	r3, r3, #2
 8022a32:	58d3      	ldr	r3, [r2, r3]
 8022a34:	691b      	ldr	r3, [r3, #16]
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d00d      	beq.n	8022a56 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8022a3a:	687a      	ldr	r2, [r7, #4]
 8022a3c:	23ac      	movs	r3, #172	@ 0xac
 8022a3e:	009b      	lsls	r3, r3, #2
 8022a40:	58d3      	ldr	r3, [r2, r3]
 8022a42:	691b      	ldr	r3, [r3, #16]
 8022a44:	687a      	ldr	r2, [r7, #4]
 8022a46:	7c12      	ldrb	r2, [r2, #16]
 8022a48:	2108      	movs	r1, #8
 8022a4a:	1879      	adds	r1, r7, r1
 8022a4c:	0010      	movs	r0, r2
 8022a4e:	4798      	blx	r3
 8022a50:	0003      	movs	r3, r0
 8022a52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022a54:	e05d      	b.n	8022b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022a56:	683a      	ldr	r2, [r7, #0]
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	0011      	movs	r1, r2
 8022a5c:	0018      	movs	r0, r3
 8022a5e:	f000 faba 	bl	8022fd6 <USBD_CtlError>
            err++;
 8022a62:	210b      	movs	r1, #11
 8022a64:	187b      	adds	r3, r7, r1
 8022a66:	781a      	ldrb	r2, [r3, #0]
 8022a68:	187b      	adds	r3, r7, r1
 8022a6a:	3201      	adds	r2, #1
 8022a6c:	701a      	strb	r2, [r3, #0]
          break;
 8022a6e:	e050      	b.n	8022b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8022a70:	687a      	ldr	r2, [r7, #4]
 8022a72:	23ac      	movs	r3, #172	@ 0xac
 8022a74:	009b      	lsls	r3, r3, #2
 8022a76:	58d3      	ldr	r3, [r2, r3]
 8022a78:	695b      	ldr	r3, [r3, #20]
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	d00d      	beq.n	8022a9a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8022a7e:	687a      	ldr	r2, [r7, #4]
 8022a80:	23ac      	movs	r3, #172	@ 0xac
 8022a82:	009b      	lsls	r3, r3, #2
 8022a84:	58d3      	ldr	r3, [r2, r3]
 8022a86:	695b      	ldr	r3, [r3, #20]
 8022a88:	687a      	ldr	r2, [r7, #4]
 8022a8a:	7c12      	ldrb	r2, [r2, #16]
 8022a8c:	2108      	movs	r1, #8
 8022a8e:	1879      	adds	r1, r7, r1
 8022a90:	0010      	movs	r0, r2
 8022a92:	4798      	blx	r3
 8022a94:	0003      	movs	r3, r0
 8022a96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022a98:	e03b      	b.n	8022b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022a9a:	683a      	ldr	r2, [r7, #0]
 8022a9c:	687b      	ldr	r3, [r7, #4]
 8022a9e:	0011      	movs	r1, r2
 8022aa0:	0018      	movs	r0, r3
 8022aa2:	f000 fa98 	bl	8022fd6 <USBD_CtlError>
            err++;
 8022aa6:	210b      	movs	r1, #11
 8022aa8:	187b      	adds	r3, r7, r1
 8022aaa:	781a      	ldrb	r2, [r3, #0]
 8022aac:	187b      	adds	r3, r7, r1
 8022aae:	3201      	adds	r2, #1
 8022ab0:	701a      	strb	r2, [r3, #0]
          break;
 8022ab2:	e02e      	b.n	8022b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8022ab4:	687a      	ldr	r2, [r7, #4]
 8022ab6:	23ac      	movs	r3, #172	@ 0xac
 8022ab8:	009b      	lsls	r3, r3, #2
 8022aba:	58d3      	ldr	r3, [r2, r3]
 8022abc:	699b      	ldr	r3, [r3, #24]
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	d00d      	beq.n	8022ade <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8022ac2:	687a      	ldr	r2, [r7, #4]
 8022ac4:	23ac      	movs	r3, #172	@ 0xac
 8022ac6:	009b      	lsls	r3, r3, #2
 8022ac8:	58d3      	ldr	r3, [r2, r3]
 8022aca:	699b      	ldr	r3, [r3, #24]
 8022acc:	687a      	ldr	r2, [r7, #4]
 8022ace:	7c12      	ldrb	r2, [r2, #16]
 8022ad0:	2108      	movs	r1, #8
 8022ad2:	1879      	adds	r1, r7, r1
 8022ad4:	0010      	movs	r0, r2
 8022ad6:	4798      	blx	r3
 8022ad8:	0003      	movs	r3, r0
 8022ada:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022adc:	e019      	b.n	8022b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022ade:	683a      	ldr	r2, [r7, #0]
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	0011      	movs	r1, r2
 8022ae4:	0018      	movs	r0, r3
 8022ae6:	f000 fa76 	bl	8022fd6 <USBD_CtlError>
            err++;
 8022aea:	210b      	movs	r1, #11
 8022aec:	187b      	adds	r3, r7, r1
 8022aee:	781a      	ldrb	r2, [r3, #0]
 8022af0:	187b      	adds	r3, r7, r1
 8022af2:	3201      	adds	r2, #1
 8022af4:	701a      	strb	r2, [r3, #0]
          break;
 8022af6:	e00c      	b.n	8022b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8022af8:	683a      	ldr	r2, [r7, #0]
 8022afa:	687b      	ldr	r3, [r7, #4]
 8022afc:	0011      	movs	r1, r2
 8022afe:	0018      	movs	r0, r3
 8022b00:	f000 fa69 	bl	8022fd6 <USBD_CtlError>
          err++;
 8022b04:	210b      	movs	r1, #11
 8022b06:	187b      	adds	r3, r7, r1
 8022b08:	781a      	ldrb	r2, [r3, #0]
 8022b0a:	187b      	adds	r3, r7, r1
 8022b0c:	3201      	adds	r2, #1
 8022b0e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8022b10:	e04b      	b.n	8022baa <USBD_GetDescriptor+0x2fa>
 8022b12:	e04a      	b.n	8022baa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	7c1b      	ldrb	r3, [r3, #16]
 8022b18:	2b00      	cmp	r3, #0
 8022b1a:	d10b      	bne.n	8022b34 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8022b1c:	687a      	ldr	r2, [r7, #4]
 8022b1e:	23ad      	movs	r3, #173	@ 0xad
 8022b20:	009b      	lsls	r3, r3, #2
 8022b22:	58d3      	ldr	r3, [r2, r3]
 8022b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b26:	2208      	movs	r2, #8
 8022b28:	18ba      	adds	r2, r7, r2
 8022b2a:	0010      	movs	r0, r2
 8022b2c:	4798      	blx	r3
 8022b2e:	0003      	movs	r3, r0
 8022b30:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022b32:	e03a      	b.n	8022baa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022b34:	683a      	ldr	r2, [r7, #0]
 8022b36:	687b      	ldr	r3, [r7, #4]
 8022b38:	0011      	movs	r1, r2
 8022b3a:	0018      	movs	r0, r3
 8022b3c:	f000 fa4b 	bl	8022fd6 <USBD_CtlError>
        err++;
 8022b40:	210b      	movs	r1, #11
 8022b42:	187b      	adds	r3, r7, r1
 8022b44:	781a      	ldrb	r2, [r3, #0]
 8022b46:	187b      	adds	r3, r7, r1
 8022b48:	3201      	adds	r2, #1
 8022b4a:	701a      	strb	r2, [r3, #0]
      break;
 8022b4c:	e02d      	b.n	8022baa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022b4e:	687b      	ldr	r3, [r7, #4]
 8022b50:	7c1b      	ldrb	r3, [r3, #16]
 8022b52:	2b00      	cmp	r3, #0
 8022b54:	d10f      	bne.n	8022b76 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8022b56:	687a      	ldr	r2, [r7, #4]
 8022b58:	23ad      	movs	r3, #173	@ 0xad
 8022b5a:	009b      	lsls	r3, r3, #2
 8022b5c:	58d3      	ldr	r3, [r2, r3]
 8022b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022b60:	2208      	movs	r2, #8
 8022b62:	18ba      	adds	r2, r7, r2
 8022b64:	0010      	movs	r0, r2
 8022b66:	4798      	blx	r3
 8022b68:	0003      	movs	r3, r0
 8022b6a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	3301      	adds	r3, #1
 8022b70:	2207      	movs	r2, #7
 8022b72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022b74:	e019      	b.n	8022baa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022b76:	683a      	ldr	r2, [r7, #0]
 8022b78:	687b      	ldr	r3, [r7, #4]
 8022b7a:	0011      	movs	r1, r2
 8022b7c:	0018      	movs	r0, r3
 8022b7e:	f000 fa2a 	bl	8022fd6 <USBD_CtlError>
        err++;
 8022b82:	210b      	movs	r1, #11
 8022b84:	187b      	adds	r3, r7, r1
 8022b86:	781a      	ldrb	r2, [r3, #0]
 8022b88:	187b      	adds	r3, r7, r1
 8022b8a:	3201      	adds	r2, #1
 8022b8c:	701a      	strb	r2, [r3, #0]
      break;
 8022b8e:	e00c      	b.n	8022baa <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8022b90:	683a      	ldr	r2, [r7, #0]
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	0011      	movs	r1, r2
 8022b96:	0018      	movs	r0, r3
 8022b98:	f000 fa1d 	bl	8022fd6 <USBD_CtlError>
      err++;
 8022b9c:	210b      	movs	r1, #11
 8022b9e:	187b      	adds	r3, r7, r1
 8022ba0:	781a      	ldrb	r2, [r3, #0]
 8022ba2:	187b      	adds	r3, r7, r1
 8022ba4:	3201      	adds	r2, #1
 8022ba6:	701a      	strb	r2, [r3, #0]
      break;
 8022ba8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8022baa:	230b      	movs	r3, #11
 8022bac:	18fb      	adds	r3, r7, r3
 8022bae:	781b      	ldrb	r3, [r3, #0]
 8022bb0:	2b00      	cmp	r3, #0
 8022bb2:	d127      	bne.n	8022c04 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8022bb4:	2108      	movs	r1, #8
 8022bb6:	187b      	adds	r3, r7, r1
 8022bb8:	881b      	ldrh	r3, [r3, #0]
 8022bba:	2b00      	cmp	r3, #0
 8022bbc:	d019      	beq.n	8022bf2 <USBD_GetDescriptor+0x342>
 8022bbe:	683b      	ldr	r3, [r7, #0]
 8022bc0:	88db      	ldrh	r3, [r3, #6]
 8022bc2:	2b00      	cmp	r3, #0
 8022bc4:	d015      	beq.n	8022bf2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8022bc6:	683b      	ldr	r3, [r7, #0]
 8022bc8:	88da      	ldrh	r2, [r3, #6]
 8022bca:	187b      	adds	r3, r7, r1
 8022bcc:	881b      	ldrh	r3, [r3, #0]
 8022bce:	1c18      	adds	r0, r3, #0
 8022bd0:	1c11      	adds	r1, r2, #0
 8022bd2:	b28a      	uxth	r2, r1
 8022bd4:	b283      	uxth	r3, r0
 8022bd6:	429a      	cmp	r2, r3
 8022bd8:	d900      	bls.n	8022bdc <USBD_GetDescriptor+0x32c>
 8022bda:	1c01      	adds	r1, r0, #0
 8022bdc:	b28a      	uxth	r2, r1
 8022bde:	2108      	movs	r1, #8
 8022be0:	187b      	adds	r3, r7, r1
 8022be2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8022be4:	187b      	adds	r3, r7, r1
 8022be6:	881a      	ldrh	r2, [r3, #0]
 8022be8:	68f9      	ldr	r1, [r7, #12]
 8022bea:	687b      	ldr	r3, [r7, #4]
 8022bec:	0018      	movs	r0, r3
 8022bee:	f000 fa70 	bl	80230d2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8022bf2:	683b      	ldr	r3, [r7, #0]
 8022bf4:	88db      	ldrh	r3, [r3, #6]
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d105      	bne.n	8022c06 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8022bfa:	687b      	ldr	r3, [r7, #4]
 8022bfc:	0018      	movs	r0, r3
 8022bfe:	f000 fad2 	bl	80231a6 <USBD_CtlSendStatus>
 8022c02:	e000      	b.n	8022c06 <USBD_GetDescriptor+0x356>
    return;
 8022c04:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022c06:	46bd      	mov	sp, r7
 8022c08:	b004      	add	sp, #16
 8022c0a:	bd80      	pop	{r7, pc}
 8022c0c:	0802f038 	.word	0x0802f038
 8022c10:	0802f058 	.word	0x0802f058

08022c14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022c14:	b590      	push	{r4, r7, lr}
 8022c16:	b085      	sub	sp, #20
 8022c18:	af00      	add	r7, sp, #0
 8022c1a:	6078      	str	r0, [r7, #4]
 8022c1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8022c1e:	683b      	ldr	r3, [r7, #0]
 8022c20:	889b      	ldrh	r3, [r3, #4]
 8022c22:	2b00      	cmp	r3, #0
 8022c24:	d13d      	bne.n	8022ca2 <USBD_SetAddress+0x8e>
 8022c26:	683b      	ldr	r3, [r7, #0]
 8022c28:	88db      	ldrh	r3, [r3, #6]
 8022c2a:	2b00      	cmp	r3, #0
 8022c2c:	d139      	bne.n	8022ca2 <USBD_SetAddress+0x8e>
 8022c2e:	683b      	ldr	r3, [r7, #0]
 8022c30:	885b      	ldrh	r3, [r3, #2]
 8022c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8022c34:	d835      	bhi.n	8022ca2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8022c36:	683b      	ldr	r3, [r7, #0]
 8022c38:	885b      	ldrh	r3, [r3, #2]
 8022c3a:	b2da      	uxtb	r2, r3
 8022c3c:	230f      	movs	r3, #15
 8022c3e:	18fb      	adds	r3, r7, r3
 8022c40:	217f      	movs	r1, #127	@ 0x7f
 8022c42:	400a      	ands	r2, r1
 8022c44:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022c46:	687a      	ldr	r2, [r7, #4]
 8022c48:	23a7      	movs	r3, #167	@ 0xa7
 8022c4a:	009b      	lsls	r3, r3, #2
 8022c4c:	5cd3      	ldrb	r3, [r2, r3]
 8022c4e:	2b03      	cmp	r3, #3
 8022c50:	d106      	bne.n	8022c60 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8022c52:	683a      	ldr	r2, [r7, #0]
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	0011      	movs	r1, r2
 8022c58:	0018      	movs	r0, r3
 8022c5a:	f000 f9bc 	bl	8022fd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022c5e:	e027      	b.n	8022cb0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8022c60:	687b      	ldr	r3, [r7, #4]
 8022c62:	240f      	movs	r4, #15
 8022c64:	193a      	adds	r2, r7, r4
 8022c66:	4914      	ldr	r1, [pc, #80]	@ (8022cb8 <USBD_SetAddress+0xa4>)
 8022c68:	7812      	ldrb	r2, [r2, #0]
 8022c6a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8022c6c:	193b      	adds	r3, r7, r4
 8022c6e:	781a      	ldrb	r2, [r3, #0]
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	0011      	movs	r1, r2
 8022c74:	0018      	movs	r0, r3
 8022c76:	f000 ff69 	bl	8023b4c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8022c7a:	687b      	ldr	r3, [r7, #4]
 8022c7c:	0018      	movs	r0, r3
 8022c7e:	f000 fa92 	bl	80231a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8022c82:	193b      	adds	r3, r7, r4
 8022c84:	781b      	ldrb	r3, [r3, #0]
 8022c86:	2b00      	cmp	r3, #0
 8022c88:	d005      	beq.n	8022c96 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8022c8a:	687a      	ldr	r2, [r7, #4]
 8022c8c:	23a7      	movs	r3, #167	@ 0xa7
 8022c8e:	009b      	lsls	r3, r3, #2
 8022c90:	2102      	movs	r1, #2
 8022c92:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022c94:	e00c      	b.n	8022cb0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8022c96:	687a      	ldr	r2, [r7, #4]
 8022c98:	23a7      	movs	r3, #167	@ 0xa7
 8022c9a:	009b      	lsls	r3, r3, #2
 8022c9c:	2101      	movs	r1, #1
 8022c9e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022ca0:	e006      	b.n	8022cb0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8022ca2:	683a      	ldr	r2, [r7, #0]
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	0011      	movs	r1, r2
 8022ca8:	0018      	movs	r0, r3
 8022caa:	f000 f994 	bl	8022fd6 <USBD_CtlError>
  }
}
 8022cae:	46c0      	nop			@ (mov r8, r8)
 8022cb0:	46c0      	nop			@ (mov r8, r8)
 8022cb2:	46bd      	mov	sp, r7
 8022cb4:	b005      	add	sp, #20
 8022cb6:	bd90      	pop	{r4, r7, pc}
 8022cb8:	0000029e 	.word	0x0000029e

08022cbc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022cbc:	b580      	push	{r7, lr}
 8022cbe:	b082      	sub	sp, #8
 8022cc0:	af00      	add	r7, sp, #0
 8022cc2:	6078      	str	r0, [r7, #4]
 8022cc4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8022cc6:	683b      	ldr	r3, [r7, #0]
 8022cc8:	885b      	ldrh	r3, [r3, #2]
 8022cca:	b2da      	uxtb	r2, r3
 8022ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022cce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022cd2:	781b      	ldrb	r3, [r3, #0]
 8022cd4:	2b01      	cmp	r3, #1
 8022cd6:	d906      	bls.n	8022ce6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8022cd8:	683a      	ldr	r2, [r7, #0]
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	0011      	movs	r1, r2
 8022cde:	0018      	movs	r0, r3
 8022ce0:	f000 f979 	bl	8022fd6 <USBD_CtlError>
 8022ce4:	e088      	b.n	8022df8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8022ce6:	687a      	ldr	r2, [r7, #4]
 8022ce8:	23a7      	movs	r3, #167	@ 0xa7
 8022cea:	009b      	lsls	r3, r3, #2
 8022cec:	5cd3      	ldrb	r3, [r2, r3]
 8022cee:	2b02      	cmp	r3, #2
 8022cf0:	d002      	beq.n	8022cf8 <USBD_SetConfig+0x3c>
 8022cf2:	2b03      	cmp	r3, #3
 8022cf4:	d029      	beq.n	8022d4a <USBD_SetConfig+0x8e>
 8022cf6:	e071      	b.n	8022ddc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8022cf8:	4b41      	ldr	r3, [pc, #260]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022cfa:	781b      	ldrb	r3, [r3, #0]
 8022cfc:	2b00      	cmp	r3, #0
 8022cfe:	d01f      	beq.n	8022d40 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8022d00:	4b3f      	ldr	r3, [pc, #252]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022d02:	781b      	ldrb	r3, [r3, #0]
 8022d04:	001a      	movs	r2, r3
 8022d06:	687b      	ldr	r3, [r7, #4]
 8022d08:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8022d0a:	687a      	ldr	r2, [r7, #4]
 8022d0c:	23a7      	movs	r3, #167	@ 0xa7
 8022d0e:	009b      	lsls	r3, r3, #2
 8022d10:	2103      	movs	r1, #3
 8022d12:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022d14:	4b3a      	ldr	r3, [pc, #232]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022d16:	781a      	ldrb	r2, [r3, #0]
 8022d18:	687b      	ldr	r3, [r7, #4]
 8022d1a:	0011      	movs	r1, r2
 8022d1c:	0018      	movs	r0, r3
 8022d1e:	f7ff f8c6 	bl	8021eae <USBD_SetClassConfig>
 8022d22:	0003      	movs	r3, r0
 8022d24:	2b02      	cmp	r3, #2
 8022d26:	d106      	bne.n	8022d36 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8022d28:	683a      	ldr	r2, [r7, #0]
 8022d2a:	687b      	ldr	r3, [r7, #4]
 8022d2c:	0011      	movs	r1, r2
 8022d2e:	0018      	movs	r0, r3
 8022d30:	f000 f951 	bl	8022fd6 <USBD_CtlError>
            return;
 8022d34:	e060      	b.n	8022df8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	0018      	movs	r0, r3
 8022d3a:	f000 fa34 	bl	80231a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022d3e:	e05b      	b.n	8022df8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022d40:	687b      	ldr	r3, [r7, #4]
 8022d42:	0018      	movs	r0, r3
 8022d44:	f000 fa2f 	bl	80231a6 <USBD_CtlSendStatus>
        break;
 8022d48:	e056      	b.n	8022df8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8022d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022d4c:	781b      	ldrb	r3, [r3, #0]
 8022d4e:	2b00      	cmp	r3, #0
 8022d50:	d115      	bne.n	8022d7e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8022d52:	687a      	ldr	r2, [r7, #4]
 8022d54:	23a7      	movs	r3, #167	@ 0xa7
 8022d56:	009b      	lsls	r3, r3, #2
 8022d58:	2102      	movs	r1, #2
 8022d5a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8022d5c:	4b28      	ldr	r3, [pc, #160]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022d5e:	781b      	ldrb	r3, [r3, #0]
 8022d60:	001a      	movs	r2, r3
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8022d66:	4b26      	ldr	r3, [pc, #152]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022d68:	781a      	ldrb	r2, [r3, #0]
 8022d6a:	687b      	ldr	r3, [r7, #4]
 8022d6c:	0011      	movs	r1, r2
 8022d6e:	0018      	movs	r0, r3
 8022d70:	f7ff f8c4 	bl	8021efc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	0018      	movs	r0, r3
 8022d78:	f000 fa15 	bl	80231a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022d7c:	e03c      	b.n	8022df8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8022d7e:	4b20      	ldr	r3, [pc, #128]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022d80:	781b      	ldrb	r3, [r3, #0]
 8022d82:	001a      	movs	r2, r3
 8022d84:	687b      	ldr	r3, [r7, #4]
 8022d86:	685b      	ldr	r3, [r3, #4]
 8022d88:	429a      	cmp	r2, r3
 8022d8a:	d022      	beq.n	8022dd2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	685b      	ldr	r3, [r3, #4]
 8022d90:	b2da      	uxtb	r2, r3
 8022d92:	687b      	ldr	r3, [r7, #4]
 8022d94:	0011      	movs	r1, r2
 8022d96:	0018      	movs	r0, r3
 8022d98:	f7ff f8b0 	bl	8021efc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8022d9c:	4b18      	ldr	r3, [pc, #96]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022d9e:	781b      	ldrb	r3, [r3, #0]
 8022da0:	001a      	movs	r2, r3
 8022da2:	687b      	ldr	r3, [r7, #4]
 8022da4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022da6:	4b16      	ldr	r3, [pc, #88]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022da8:	781a      	ldrb	r2, [r3, #0]
 8022daa:	687b      	ldr	r3, [r7, #4]
 8022dac:	0011      	movs	r1, r2
 8022dae:	0018      	movs	r0, r3
 8022db0:	f7ff f87d 	bl	8021eae <USBD_SetClassConfig>
 8022db4:	0003      	movs	r3, r0
 8022db6:	2b02      	cmp	r3, #2
 8022db8:	d106      	bne.n	8022dc8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022dba:	683a      	ldr	r2, [r7, #0]
 8022dbc:	687b      	ldr	r3, [r7, #4]
 8022dbe:	0011      	movs	r1, r2
 8022dc0:	0018      	movs	r0, r3
 8022dc2:	f000 f908 	bl	8022fd6 <USBD_CtlError>
            return;
 8022dc6:	e017      	b.n	8022df8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	0018      	movs	r0, r3
 8022dcc:	f000 f9eb 	bl	80231a6 <USBD_CtlSendStatus>
        break;
 8022dd0:	e012      	b.n	8022df8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022dd2:	687b      	ldr	r3, [r7, #4]
 8022dd4:	0018      	movs	r0, r3
 8022dd6:	f000 f9e6 	bl	80231a6 <USBD_CtlSendStatus>
        break;
 8022dda:	e00d      	b.n	8022df8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022ddc:	683a      	ldr	r2, [r7, #0]
 8022dde:	687b      	ldr	r3, [r7, #4]
 8022de0:	0011      	movs	r1, r2
 8022de2:	0018      	movs	r0, r3
 8022de4:	f000 f8f7 	bl	8022fd6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022de8:	4b05      	ldr	r3, [pc, #20]	@ (8022e00 <USBD_SetConfig+0x144>)
 8022dea:	781a      	ldrb	r2, [r3, #0]
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	0011      	movs	r1, r2
 8022df0:	0018      	movs	r0, r3
 8022df2:	f7ff f883 	bl	8021efc <USBD_ClrClassConfig>
        break;
 8022df6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022df8:	46bd      	mov	sp, r7
 8022dfa:	b002      	add	sp, #8
 8022dfc:	bd80      	pop	{r7, pc}
 8022dfe:	46c0      	nop			@ (mov r8, r8)
 8022e00:	20002548 	.word	0x20002548

08022e04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022e04:	b580      	push	{r7, lr}
 8022e06:	b082      	sub	sp, #8
 8022e08:	af00      	add	r7, sp, #0
 8022e0a:	6078      	str	r0, [r7, #4]
 8022e0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022e0e:	683b      	ldr	r3, [r7, #0]
 8022e10:	88db      	ldrh	r3, [r3, #6]
 8022e12:	2b01      	cmp	r3, #1
 8022e14:	d006      	beq.n	8022e24 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8022e16:	683a      	ldr	r2, [r7, #0]
 8022e18:	687b      	ldr	r3, [r7, #4]
 8022e1a:	0011      	movs	r1, r2
 8022e1c:	0018      	movs	r0, r3
 8022e1e:	f000 f8da 	bl	8022fd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8022e22:	e026      	b.n	8022e72 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8022e24:	687a      	ldr	r2, [r7, #4]
 8022e26:	23a7      	movs	r3, #167	@ 0xa7
 8022e28:	009b      	lsls	r3, r3, #2
 8022e2a:	5cd3      	ldrb	r3, [r2, r3]
 8022e2c:	2b02      	cmp	r3, #2
 8022e2e:	dc02      	bgt.n	8022e36 <USBD_GetConfig+0x32>
 8022e30:	2b00      	cmp	r3, #0
 8022e32:	dc03      	bgt.n	8022e3c <USBD_GetConfig+0x38>
 8022e34:	e016      	b.n	8022e64 <USBD_GetConfig+0x60>
 8022e36:	2b03      	cmp	r3, #3
 8022e38:	d00c      	beq.n	8022e54 <USBD_GetConfig+0x50>
 8022e3a:	e013      	b.n	8022e64 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	2200      	movs	r2, #0
 8022e40:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8022e42:	687b      	ldr	r3, [r7, #4]
 8022e44:	3308      	adds	r3, #8
 8022e46:	0019      	movs	r1, r3
 8022e48:	687b      	ldr	r3, [r7, #4]
 8022e4a:	2201      	movs	r2, #1
 8022e4c:	0018      	movs	r0, r3
 8022e4e:	f000 f940 	bl	80230d2 <USBD_CtlSendData>
        break;
 8022e52:	e00e      	b.n	8022e72 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8022e54:	687b      	ldr	r3, [r7, #4]
 8022e56:	1d19      	adds	r1, r3, #4
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	2201      	movs	r2, #1
 8022e5c:	0018      	movs	r0, r3
 8022e5e:	f000 f938 	bl	80230d2 <USBD_CtlSendData>
        break;
 8022e62:	e006      	b.n	8022e72 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022e64:	683a      	ldr	r2, [r7, #0]
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	0011      	movs	r1, r2
 8022e6a:	0018      	movs	r0, r3
 8022e6c:	f000 f8b3 	bl	8022fd6 <USBD_CtlError>
        break;
 8022e70:	46c0      	nop			@ (mov r8, r8)
}
 8022e72:	46c0      	nop			@ (mov r8, r8)
 8022e74:	46bd      	mov	sp, r7
 8022e76:	b002      	add	sp, #8
 8022e78:	bd80      	pop	{r7, pc}

08022e7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022e7a:	b580      	push	{r7, lr}
 8022e7c:	b082      	sub	sp, #8
 8022e7e:	af00      	add	r7, sp, #0
 8022e80:	6078      	str	r0, [r7, #4]
 8022e82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022e84:	687a      	ldr	r2, [r7, #4]
 8022e86:	23a7      	movs	r3, #167	@ 0xa7
 8022e88:	009b      	lsls	r3, r3, #2
 8022e8a:	5cd3      	ldrb	r3, [r2, r3]
 8022e8c:	3b01      	subs	r3, #1
 8022e8e:	2b02      	cmp	r3, #2
 8022e90:	d822      	bhi.n	8022ed8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022e92:	683b      	ldr	r3, [r7, #0]
 8022e94:	88db      	ldrh	r3, [r3, #6]
 8022e96:	2b02      	cmp	r3, #2
 8022e98:	d006      	beq.n	8022ea8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022e9a:	683a      	ldr	r2, [r7, #0]
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	0011      	movs	r1, r2
 8022ea0:	0018      	movs	r0, r3
 8022ea2:	f000 f898 	bl	8022fd6 <USBD_CtlError>
        break;
 8022ea6:	e01e      	b.n	8022ee6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	2201      	movs	r2, #1
 8022eac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022eae:	687a      	ldr	r2, [r7, #4]
 8022eb0:	23a9      	movs	r3, #169	@ 0xa9
 8022eb2:	009b      	lsls	r3, r3, #2
 8022eb4:	58d3      	ldr	r3, [r2, r3]
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d005      	beq.n	8022ec6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022eba:	687b      	ldr	r3, [r7, #4]
 8022ebc:	68db      	ldr	r3, [r3, #12]
 8022ebe:	2202      	movs	r2, #2
 8022ec0:	431a      	orrs	r2, r3
 8022ec2:	687b      	ldr	r3, [r7, #4]
 8022ec4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	330c      	adds	r3, #12
 8022eca:	0019      	movs	r1, r3
 8022ecc:	687b      	ldr	r3, [r7, #4]
 8022ece:	2202      	movs	r2, #2
 8022ed0:	0018      	movs	r0, r3
 8022ed2:	f000 f8fe 	bl	80230d2 <USBD_CtlSendData>
      break;
 8022ed6:	e006      	b.n	8022ee6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022ed8:	683a      	ldr	r2, [r7, #0]
 8022eda:	687b      	ldr	r3, [r7, #4]
 8022edc:	0011      	movs	r1, r2
 8022ede:	0018      	movs	r0, r3
 8022ee0:	f000 f879 	bl	8022fd6 <USBD_CtlError>
      break;
 8022ee4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022ee6:	46c0      	nop			@ (mov r8, r8)
 8022ee8:	46bd      	mov	sp, r7
 8022eea:	b002      	add	sp, #8
 8022eec:	bd80      	pop	{r7, pc}

08022eee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022eee:	b580      	push	{r7, lr}
 8022ef0:	b082      	sub	sp, #8
 8022ef2:	af00      	add	r7, sp, #0
 8022ef4:	6078      	str	r0, [r7, #4]
 8022ef6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022ef8:	683b      	ldr	r3, [r7, #0]
 8022efa:	885b      	ldrh	r3, [r3, #2]
 8022efc:	2b01      	cmp	r3, #1
 8022efe:	d108      	bne.n	8022f12 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022f00:	687a      	ldr	r2, [r7, #4]
 8022f02:	23a9      	movs	r3, #169	@ 0xa9
 8022f04:	009b      	lsls	r3, r3, #2
 8022f06:	2101      	movs	r1, #1
 8022f08:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	0018      	movs	r0, r3
 8022f0e:	f000 f94a 	bl	80231a6 <USBD_CtlSendStatus>
  }
}
 8022f12:	46c0      	nop			@ (mov r8, r8)
 8022f14:	46bd      	mov	sp, r7
 8022f16:	b002      	add	sp, #8
 8022f18:	bd80      	pop	{r7, pc}

08022f1a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022f1a:	b580      	push	{r7, lr}
 8022f1c:	b082      	sub	sp, #8
 8022f1e:	af00      	add	r7, sp, #0
 8022f20:	6078      	str	r0, [r7, #4]
 8022f22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022f24:	687a      	ldr	r2, [r7, #4]
 8022f26:	23a7      	movs	r3, #167	@ 0xa7
 8022f28:	009b      	lsls	r3, r3, #2
 8022f2a:	5cd3      	ldrb	r3, [r2, r3]
 8022f2c:	3b01      	subs	r3, #1
 8022f2e:	2b02      	cmp	r3, #2
 8022f30:	d80d      	bhi.n	8022f4e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022f32:	683b      	ldr	r3, [r7, #0]
 8022f34:	885b      	ldrh	r3, [r3, #2]
 8022f36:	2b01      	cmp	r3, #1
 8022f38:	d110      	bne.n	8022f5c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022f3a:	687a      	ldr	r2, [r7, #4]
 8022f3c:	23a9      	movs	r3, #169	@ 0xa9
 8022f3e:	009b      	lsls	r3, r3, #2
 8022f40:	2100      	movs	r1, #0
 8022f42:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8022f44:	687b      	ldr	r3, [r7, #4]
 8022f46:	0018      	movs	r0, r3
 8022f48:	f000 f92d 	bl	80231a6 <USBD_CtlSendStatus>
      }
      break;
 8022f4c:	e006      	b.n	8022f5c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022f4e:	683a      	ldr	r2, [r7, #0]
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	0011      	movs	r1, r2
 8022f54:	0018      	movs	r0, r3
 8022f56:	f000 f83e 	bl	8022fd6 <USBD_CtlError>
      break;
 8022f5a:	e000      	b.n	8022f5e <USBD_ClrFeature+0x44>
      break;
 8022f5c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022f5e:	46c0      	nop			@ (mov r8, r8)
 8022f60:	46bd      	mov	sp, r7
 8022f62:	b002      	add	sp, #8
 8022f64:	bd80      	pop	{r7, pc}

08022f66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022f66:	b580      	push	{r7, lr}
 8022f68:	b082      	sub	sp, #8
 8022f6a:	af00      	add	r7, sp, #0
 8022f6c:	6078      	str	r0, [r7, #4]
 8022f6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022f70:	683b      	ldr	r3, [r7, #0]
 8022f72:	781a      	ldrb	r2, [r3, #0]
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022f78:	683b      	ldr	r3, [r7, #0]
 8022f7a:	785a      	ldrb	r2, [r3, #1]
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022f80:	683b      	ldr	r3, [r7, #0]
 8022f82:	3302      	adds	r3, #2
 8022f84:	781b      	ldrb	r3, [r3, #0]
 8022f86:	001a      	movs	r2, r3
 8022f88:	683b      	ldr	r3, [r7, #0]
 8022f8a:	3303      	adds	r3, #3
 8022f8c:	781b      	ldrb	r3, [r3, #0]
 8022f8e:	021b      	lsls	r3, r3, #8
 8022f90:	b29b      	uxth	r3, r3
 8022f92:	18d3      	adds	r3, r2, r3
 8022f94:	b29a      	uxth	r2, r3
 8022f96:	687b      	ldr	r3, [r7, #4]
 8022f98:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022f9a:	683b      	ldr	r3, [r7, #0]
 8022f9c:	3304      	adds	r3, #4
 8022f9e:	781b      	ldrb	r3, [r3, #0]
 8022fa0:	001a      	movs	r2, r3
 8022fa2:	683b      	ldr	r3, [r7, #0]
 8022fa4:	3305      	adds	r3, #5
 8022fa6:	781b      	ldrb	r3, [r3, #0]
 8022fa8:	021b      	lsls	r3, r3, #8
 8022faa:	b29b      	uxth	r3, r3
 8022fac:	18d3      	adds	r3, r2, r3
 8022fae:	b29a      	uxth	r2, r3
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022fb4:	683b      	ldr	r3, [r7, #0]
 8022fb6:	3306      	adds	r3, #6
 8022fb8:	781b      	ldrb	r3, [r3, #0]
 8022fba:	001a      	movs	r2, r3
 8022fbc:	683b      	ldr	r3, [r7, #0]
 8022fbe:	3307      	adds	r3, #7
 8022fc0:	781b      	ldrb	r3, [r3, #0]
 8022fc2:	021b      	lsls	r3, r3, #8
 8022fc4:	b29b      	uxth	r3, r3
 8022fc6:	18d3      	adds	r3, r2, r3
 8022fc8:	b29a      	uxth	r2, r3
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	80da      	strh	r2, [r3, #6]

}
 8022fce:	46c0      	nop			@ (mov r8, r8)
 8022fd0:	46bd      	mov	sp, r7
 8022fd2:	b002      	add	sp, #8
 8022fd4:	bd80      	pop	{r7, pc}

08022fd6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022fd6:	b580      	push	{r7, lr}
 8022fd8:	b082      	sub	sp, #8
 8022fda:	af00      	add	r7, sp, #0
 8022fdc:	6078      	str	r0, [r7, #4]
 8022fde:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	2180      	movs	r1, #128	@ 0x80
 8022fe4:	0018      	movs	r0, r3
 8022fe6:	f000 fd2a 	bl	8023a3e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	2100      	movs	r1, #0
 8022fee:	0018      	movs	r0, r3
 8022ff0:	f000 fd25 	bl	8023a3e <USBD_LL_StallEP>
}
 8022ff4:	46c0      	nop			@ (mov r8, r8)
 8022ff6:	46bd      	mov	sp, r7
 8022ff8:	b002      	add	sp, #8
 8022ffa:	bd80      	pop	{r7, pc}

08022ffc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022ffc:	b590      	push	{r4, r7, lr}
 8022ffe:	b087      	sub	sp, #28
 8023000:	af00      	add	r7, sp, #0
 8023002:	60f8      	str	r0, [r7, #12]
 8023004:	60b9      	str	r1, [r7, #8]
 8023006:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8023008:	2417      	movs	r4, #23
 802300a:	193b      	adds	r3, r7, r4
 802300c:	2200      	movs	r2, #0
 802300e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8023010:	68fb      	ldr	r3, [r7, #12]
 8023012:	2b00      	cmp	r3, #0
 8023014:	d03c      	beq.n	8023090 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8023016:	68fb      	ldr	r3, [r7, #12]
 8023018:	0018      	movs	r0, r3
 802301a:	f000 f83d 	bl	8023098 <USBD_GetLen>
 802301e:	0003      	movs	r3, r0
 8023020:	3301      	adds	r3, #1
 8023022:	b29b      	uxth	r3, r3
 8023024:	18db      	adds	r3, r3, r3
 8023026:	b29a      	uxth	r2, r3
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 802302c:	193b      	adds	r3, r7, r4
 802302e:	781b      	ldrb	r3, [r3, #0]
 8023030:	193a      	adds	r2, r7, r4
 8023032:	1c59      	adds	r1, r3, #1
 8023034:	7011      	strb	r1, [r2, #0]
 8023036:	001a      	movs	r2, r3
 8023038:	68bb      	ldr	r3, [r7, #8]
 802303a:	189b      	adds	r3, r3, r2
 802303c:	687a      	ldr	r2, [r7, #4]
 802303e:	7812      	ldrb	r2, [r2, #0]
 8023040:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8023042:	193b      	adds	r3, r7, r4
 8023044:	781b      	ldrb	r3, [r3, #0]
 8023046:	193a      	adds	r2, r7, r4
 8023048:	1c59      	adds	r1, r3, #1
 802304a:	7011      	strb	r1, [r2, #0]
 802304c:	001a      	movs	r2, r3
 802304e:	68bb      	ldr	r3, [r7, #8]
 8023050:	189b      	adds	r3, r3, r2
 8023052:	2203      	movs	r2, #3
 8023054:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8023056:	e017      	b.n	8023088 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8023058:	68fb      	ldr	r3, [r7, #12]
 802305a:	1c5a      	adds	r2, r3, #1
 802305c:	60fa      	str	r2, [r7, #12]
 802305e:	2417      	movs	r4, #23
 8023060:	193a      	adds	r2, r7, r4
 8023062:	7812      	ldrb	r2, [r2, #0]
 8023064:	1939      	adds	r1, r7, r4
 8023066:	1c50      	adds	r0, r2, #1
 8023068:	7008      	strb	r0, [r1, #0]
 802306a:	0011      	movs	r1, r2
 802306c:	68ba      	ldr	r2, [r7, #8]
 802306e:	1852      	adds	r2, r2, r1
 8023070:	781b      	ldrb	r3, [r3, #0]
 8023072:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8023074:	193b      	adds	r3, r7, r4
 8023076:	781b      	ldrb	r3, [r3, #0]
 8023078:	193a      	adds	r2, r7, r4
 802307a:	1c59      	adds	r1, r3, #1
 802307c:	7011      	strb	r1, [r2, #0]
 802307e:	001a      	movs	r2, r3
 8023080:	68bb      	ldr	r3, [r7, #8]
 8023082:	189b      	adds	r3, r3, r2
 8023084:	2200      	movs	r2, #0
 8023086:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8023088:	68fb      	ldr	r3, [r7, #12]
 802308a:	781b      	ldrb	r3, [r3, #0]
 802308c:	2b00      	cmp	r3, #0
 802308e:	d1e3      	bne.n	8023058 <USBD_GetString+0x5c>
    }
  }
}
 8023090:	46c0      	nop			@ (mov r8, r8)
 8023092:	46bd      	mov	sp, r7
 8023094:	b007      	add	sp, #28
 8023096:	bd90      	pop	{r4, r7, pc}

08023098 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8023098:	b580      	push	{r7, lr}
 802309a:	b084      	sub	sp, #16
 802309c:	af00      	add	r7, sp, #0
 802309e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80230a0:	230f      	movs	r3, #15
 80230a2:	18fb      	adds	r3, r7, r3
 80230a4:	2200      	movs	r2, #0
 80230a6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80230a8:	e008      	b.n	80230bc <USBD_GetLen+0x24>
  {
    len++;
 80230aa:	210f      	movs	r1, #15
 80230ac:	187b      	adds	r3, r7, r1
 80230ae:	781a      	ldrb	r2, [r3, #0]
 80230b0:	187b      	adds	r3, r7, r1
 80230b2:	3201      	adds	r2, #1
 80230b4:	701a      	strb	r2, [r3, #0]
    buf++;
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	3301      	adds	r3, #1
 80230ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	781b      	ldrb	r3, [r3, #0]
 80230c0:	2b00      	cmp	r3, #0
 80230c2:	d1f2      	bne.n	80230aa <USBD_GetLen+0x12>
  }

  return len;
 80230c4:	230f      	movs	r3, #15
 80230c6:	18fb      	adds	r3, r7, r3
 80230c8:	781b      	ldrb	r3, [r3, #0]
}
 80230ca:	0018      	movs	r0, r3
 80230cc:	46bd      	mov	sp, r7
 80230ce:	b004      	add	sp, #16
 80230d0:	bd80      	pop	{r7, pc}

080230d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80230d2:	b580      	push	{r7, lr}
 80230d4:	b084      	sub	sp, #16
 80230d6:	af00      	add	r7, sp, #0
 80230d8:	60f8      	str	r0, [r7, #12]
 80230da:	60b9      	str	r1, [r7, #8]
 80230dc:	1dbb      	adds	r3, r7, #6
 80230de:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80230e0:	68fa      	ldr	r2, [r7, #12]
 80230e2:	23a5      	movs	r3, #165	@ 0xa5
 80230e4:	009b      	lsls	r3, r3, #2
 80230e6:	2102      	movs	r1, #2
 80230e8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80230ea:	1dbb      	adds	r3, r7, #6
 80230ec:	881a      	ldrh	r2, [r3, #0]
 80230ee:	68fb      	ldr	r3, [r7, #12]
 80230f0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80230f2:	1dbb      	adds	r3, r7, #6
 80230f4:	881a      	ldrh	r2, [r3, #0]
 80230f6:	68fb      	ldr	r3, [r7, #12]
 80230f8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80230fa:	1dbb      	adds	r3, r7, #6
 80230fc:	881b      	ldrh	r3, [r3, #0]
 80230fe:	68ba      	ldr	r2, [r7, #8]
 8023100:	68f8      	ldr	r0, [r7, #12]
 8023102:	2100      	movs	r1, #0
 8023104:	f000 fd4d 	bl	8023ba2 <USBD_LL_Transmit>

  return USBD_OK;
 8023108:	2300      	movs	r3, #0
}
 802310a:	0018      	movs	r0, r3
 802310c:	46bd      	mov	sp, r7
 802310e:	b004      	add	sp, #16
 8023110:	bd80      	pop	{r7, pc}

08023112 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8023112:	b580      	push	{r7, lr}
 8023114:	b084      	sub	sp, #16
 8023116:	af00      	add	r7, sp, #0
 8023118:	60f8      	str	r0, [r7, #12]
 802311a:	60b9      	str	r1, [r7, #8]
 802311c:	1dbb      	adds	r3, r7, #6
 802311e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8023120:	1dbb      	adds	r3, r7, #6
 8023122:	881b      	ldrh	r3, [r3, #0]
 8023124:	68ba      	ldr	r2, [r7, #8]
 8023126:	68f8      	ldr	r0, [r7, #12]
 8023128:	2100      	movs	r1, #0
 802312a:	f000 fd3a 	bl	8023ba2 <USBD_LL_Transmit>

  return USBD_OK;
 802312e:	2300      	movs	r3, #0
}
 8023130:	0018      	movs	r0, r3
 8023132:	46bd      	mov	sp, r7
 8023134:	b004      	add	sp, #16
 8023136:	bd80      	pop	{r7, pc}

08023138 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8023138:	b580      	push	{r7, lr}
 802313a:	b084      	sub	sp, #16
 802313c:	af00      	add	r7, sp, #0
 802313e:	60f8      	str	r0, [r7, #12]
 8023140:	60b9      	str	r1, [r7, #8]
 8023142:	1dbb      	adds	r3, r7, #6
 8023144:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8023146:	68fa      	ldr	r2, [r7, #12]
 8023148:	23a5      	movs	r3, #165	@ 0xa5
 802314a:	009b      	lsls	r3, r3, #2
 802314c:	2103      	movs	r1, #3
 802314e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8023150:	1dbb      	adds	r3, r7, #6
 8023152:	8819      	ldrh	r1, [r3, #0]
 8023154:	68fa      	ldr	r2, [r7, #12]
 8023156:	23ae      	movs	r3, #174	@ 0xae
 8023158:	005b      	lsls	r3, r3, #1
 802315a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 802315c:	1dbb      	adds	r3, r7, #6
 802315e:	8819      	ldrh	r1, [r3, #0]
 8023160:	68fa      	ldr	r2, [r7, #12]
 8023162:	23b0      	movs	r3, #176	@ 0xb0
 8023164:	005b      	lsls	r3, r3, #1
 8023166:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8023168:	1dbb      	adds	r3, r7, #6
 802316a:	881b      	ldrh	r3, [r3, #0]
 802316c:	68ba      	ldr	r2, [r7, #8]
 802316e:	68f8      	ldr	r0, [r7, #12]
 8023170:	2100      	movs	r1, #0
 8023172:	f000 fd4d 	bl	8023c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8023176:	2300      	movs	r3, #0
}
 8023178:	0018      	movs	r0, r3
 802317a:	46bd      	mov	sp, r7
 802317c:	b004      	add	sp, #16
 802317e:	bd80      	pop	{r7, pc}

08023180 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8023180:	b580      	push	{r7, lr}
 8023182:	b084      	sub	sp, #16
 8023184:	af00      	add	r7, sp, #0
 8023186:	60f8      	str	r0, [r7, #12]
 8023188:	60b9      	str	r1, [r7, #8]
 802318a:	1dbb      	adds	r3, r7, #6
 802318c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802318e:	1dbb      	adds	r3, r7, #6
 8023190:	881b      	ldrh	r3, [r3, #0]
 8023192:	68ba      	ldr	r2, [r7, #8]
 8023194:	68f8      	ldr	r0, [r7, #12]
 8023196:	2100      	movs	r1, #0
 8023198:	f000 fd3a 	bl	8023c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802319c:	2300      	movs	r3, #0
}
 802319e:	0018      	movs	r0, r3
 80231a0:	46bd      	mov	sp, r7
 80231a2:	b004      	add	sp, #16
 80231a4:	bd80      	pop	{r7, pc}

080231a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80231a6:	b580      	push	{r7, lr}
 80231a8:	b082      	sub	sp, #8
 80231aa:	af00      	add	r7, sp, #0
 80231ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80231ae:	687a      	ldr	r2, [r7, #4]
 80231b0:	23a5      	movs	r3, #165	@ 0xa5
 80231b2:	009b      	lsls	r3, r3, #2
 80231b4:	2104      	movs	r1, #4
 80231b6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80231b8:	6878      	ldr	r0, [r7, #4]
 80231ba:	2300      	movs	r3, #0
 80231bc:	2200      	movs	r2, #0
 80231be:	2100      	movs	r1, #0
 80231c0:	f000 fcef 	bl	8023ba2 <USBD_LL_Transmit>

  return USBD_OK;
 80231c4:	2300      	movs	r3, #0
}
 80231c6:	0018      	movs	r0, r3
 80231c8:	46bd      	mov	sp, r7
 80231ca:	b002      	add	sp, #8
 80231cc:	bd80      	pop	{r7, pc}

080231ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80231ce:	b580      	push	{r7, lr}
 80231d0:	b082      	sub	sp, #8
 80231d2:	af00      	add	r7, sp, #0
 80231d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80231d6:	687a      	ldr	r2, [r7, #4]
 80231d8:	23a5      	movs	r3, #165	@ 0xa5
 80231da:	009b      	lsls	r3, r3, #2
 80231dc:	2105      	movs	r1, #5
 80231de:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80231e0:	6878      	ldr	r0, [r7, #4]
 80231e2:	2300      	movs	r3, #0
 80231e4:	2200      	movs	r2, #0
 80231e6:	2100      	movs	r1, #0
 80231e8:	f000 fd12 	bl	8023c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80231ec:	2300      	movs	r3, #0
}
 80231ee:	0018      	movs	r0, r3
 80231f0:	46bd      	mov	sp, r7
 80231f2:	b002      	add	sp, #8
 80231f4:	bd80      	pop	{r7, pc}
	...

080231f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80231f8:	b580      	push	{r7, lr}
 80231fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80231fc:	4914      	ldr	r1, [pc, #80]	@ (8023250 <MX_USB_DEVICE_Init+0x58>)
 80231fe:	4b15      	ldr	r3, [pc, #84]	@ (8023254 <MX_USB_DEVICE_Init+0x5c>)
 8023200:	2200      	movs	r2, #0
 8023202:	0018      	movs	r0, r3
 8023204:	f7fe fdec 	bl	8021de0 <USBD_Init>
 8023208:	1e03      	subs	r3, r0, #0
 802320a:	d001      	beq.n	8023210 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802320c:	f7ea faa2 	bl	800d754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023210:	4a11      	ldr	r2, [pc, #68]	@ (8023258 <MX_USB_DEVICE_Init+0x60>)
 8023212:	4b10      	ldr	r3, [pc, #64]	@ (8023254 <MX_USB_DEVICE_Init+0x5c>)
 8023214:	0011      	movs	r1, r2
 8023216:	0018      	movs	r0, r3
 8023218:	f7fe fe13 	bl	8021e42 <USBD_RegisterClass>
 802321c:	1e03      	subs	r3, r0, #0
 802321e:	d001      	beq.n	8023224 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8023220:	f7ea fa98 	bl	800d754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023224:	4a0d      	ldr	r2, [pc, #52]	@ (802325c <MX_USB_DEVICE_Init+0x64>)
 8023226:	4b0b      	ldr	r3, [pc, #44]	@ (8023254 <MX_USB_DEVICE_Init+0x5c>)
 8023228:	0011      	movs	r1, r2
 802322a:	0018      	movs	r0, r3
 802322c:	f7fe fd28 	bl	8021c80 <USBD_CDC_RegisterInterface>
 8023230:	1e03      	subs	r3, r0, #0
 8023232:	d001      	beq.n	8023238 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8023234:	f7ea fa8e 	bl	800d754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8023238:	4b06      	ldr	r3, [pc, #24]	@ (8023254 <MX_USB_DEVICE_Init+0x5c>)
 802323a:	0018      	movs	r0, r3
 802323c:	f7fe fe21 	bl	8021e82 <USBD_Start>
 8023240:	1e03      	subs	r3, r0, #0
 8023242:	d001      	beq.n	8023248 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8023244:	f7ea fa86 	bl	800d754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8023248:	46c0      	nop			@ (mov r8, r8)
 802324a:	46bd      	mov	sp, r7
 802324c:	bd80      	pop	{r7, pc}
 802324e:	46c0      	nop			@ (mov r8, r8)
 8023250:	20000224 	.word	0x20000224
 8023254:	2000254c 	.word	0x2000254c
 8023258:	20000110 	.word	0x20000110
 802325c:	20000214 	.word	0x20000214

08023260 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8023260:	b580      	push	{r7, lr}
 8023262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8023264:	4907      	ldr	r1, [pc, #28]	@ (8023284 <CDC_Init_FS+0x24>)
 8023266:	4b08      	ldr	r3, [pc, #32]	@ (8023288 <CDC_Init_FS+0x28>)
 8023268:	2200      	movs	r2, #0
 802326a:	0018      	movs	r0, r3
 802326c:	f7fe fd23 	bl	8021cb6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8023270:	4a06      	ldr	r2, [pc, #24]	@ (802328c <CDC_Init_FS+0x2c>)
 8023272:	4b05      	ldr	r3, [pc, #20]	@ (8023288 <CDC_Init_FS+0x28>)
 8023274:	0011      	movs	r1, r2
 8023276:	0018      	movs	r0, r3
 8023278:	f7fe fd39 	bl	8021cee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 802327c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 802327e:	0018      	movs	r0, r3
 8023280:	46bd      	mov	sp, r7
 8023282:	bd80      	pop	{r7, pc}
 8023284:	20002cd0 	.word	0x20002cd0
 8023288:	2000254c 	.word	0x2000254c
 802328c:	200028d0 	.word	0x200028d0

08023290 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8023290:	b580      	push	{r7, lr}
 8023292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8023294:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8023296:	0018      	movs	r0, r3
 8023298:	46bd      	mov	sp, r7
 802329a:	bd80      	pop	{r7, pc}

0802329c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 802329c:	b580      	push	{r7, lr}
 802329e:	b084      	sub	sp, #16
 80232a0:	af00      	add	r7, sp, #0
 80232a2:	6039      	str	r1, [r7, #0]
 80232a4:	0011      	movs	r1, r2
 80232a6:	1dfb      	adds	r3, r7, #7
 80232a8:	1c02      	adds	r2, r0, #0
 80232aa:	701a      	strb	r2, [r3, #0]
 80232ac:	1d3b      	adds	r3, r7, #4
 80232ae:	1c0a      	adds	r2, r1, #0
 80232b0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80232b2:	1dfb      	adds	r3, r7, #7
 80232b4:	781b      	ldrb	r3, [r3, #0]
 80232b6:	2b23      	cmp	r3, #35	@ 0x23
 80232b8:	d810      	bhi.n	80232dc <CDC_Control_FS+0x40>
 80232ba:	009a      	lsls	r2, r3, #2
 80232bc:	4b0a      	ldr	r3, [pc, #40]	@ (80232e8 <CDC_Control_FS+0x4c>)
 80232be:	18d3      	adds	r3, r2, r3
 80232c0:	681b      	ldr	r3, [r3, #0]
 80232c2:	469f      	mov	pc, r3

    break;

    case CDC_SET_CONTROL_LINE_STATE:
      // === inserted for detecting USB is ready for dumping USB_LOGGING 28-jul-2025
            USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 80232c4:	683b      	ldr	r3, [r7, #0]
 80232c6:	60fb      	str	r3, [r7, #12]

            if((req->wValue &0x0001) != 0)
 80232c8:	68fb      	ldr	r3, [r7, #12]
 80232ca:	885b      	ldrh	r3, [r3, #2]
 80232cc:	001a      	movs	r2, r3
 80232ce:	2301      	movs	r3, #1
 80232d0:	4013      	ands	r3, r2
 80232d2:	d001      	beq.n	80232d8 <CDC_Control_FS+0x3c>
              return (USBD_FAIL);
 80232d4:	2302      	movs	r3, #2
 80232d6:	e003      	b.n	80232e0 <CDC_Control_FS+0x44>
              //host_com_port_open = 1;
            else
              return (USBD_OK);
 80232d8:	2300      	movs	r3, #0
 80232da:	e001      	b.n	80232e0 <CDC_Control_FS+0x44>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80232dc:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80232de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80232e0:	0018      	movs	r0, r3
 80232e2:	46bd      	mov	sp, r7
 80232e4:	b004      	add	sp, #16
 80232e6:	bd80      	pop	{r7, pc}
 80232e8:	0802f070 	.word	0x0802f070

080232ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80232ec:	b580      	push	{r7, lr}
 80232ee:	b082      	sub	sp, #8
 80232f0:	af00      	add	r7, sp, #0
 80232f2:	6078      	str	r0, [r7, #4]
 80232f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 80232f6:	4b12      	ldr	r3, [pc, #72]	@ (8023340 <CDC_Receive_FS+0x54>)
 80232f8:	781b      	ldrb	r3, [r3, #0]
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	d013      	beq.n	8023326 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 80232fe:	683b      	ldr	r3, [r7, #0]
 8023300:	681b      	ldr	r3, [r3, #0]
 8023302:	b29a      	uxth	r2, r3
 8023304:	2301      	movs	r3, #1
 8023306:	425b      	negs	r3, r3
 8023308:	6879      	ldr	r1, [r7, #4]
 802330a:	480e      	ldr	r0, [pc, #56]	@ (8023344 <CDC_Receive_FS+0x58>)
 802330c:	f7fa fa38 	bl	801d780 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023310:	687a      	ldr	r2, [r7, #4]
 8023312:	4b0d      	ldr	r3, [pc, #52]	@ (8023348 <CDC_Receive_FS+0x5c>)
 8023314:	0011      	movs	r1, r2
 8023316:	0018      	movs	r0, r3
 8023318:	f7fe fce9 	bl	8021cee <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802331c:	4b0a      	ldr	r3, [pc, #40]	@ (8023348 <CDC_Receive_FS+0x5c>)
 802331e:	0018      	movs	r0, r3
 8023320:	f7fe fd30 	bl	8021d84 <USBD_CDC_ReceivePacket>
 8023324:	e006      	b.n	8023334 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8023326:	683b      	ldr	r3, [r7, #0]
 8023328:	681a      	ldr	r2, [r3, #0]
 802332a:	4b08      	ldr	r3, [pc, #32]	@ (802334c <CDC_Receive_FS+0x60>)
 802332c:	681b      	ldr	r3, [r3, #0]
 802332e:	18d2      	adds	r2, r2, r3
 8023330:	4b06      	ldr	r3, [pc, #24]	@ (802334c <CDC_Receive_FS+0x60>)
 8023332:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8023334:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8023336:	0018      	movs	r0, r3
 8023338:	46bd      	mov	sp, r7
 802333a:	b002      	add	sp, #8
 802333c:	bd80      	pop	{r7, pc}
 802333e:	46c0      	nop			@ (mov r8, r8)
 8023340:	20002810 	.word	0x20002810
 8023344:	20002814 	.word	0x20002814
 8023348:	2000254c 	.word	0x2000254c
 802334c:	200028cc 	.word	0x200028cc

08023350 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8023350:	b5b0      	push	{r4, r5, r7, lr}
 8023352:	b084      	sub	sp, #16
 8023354:	af00      	add	r7, sp, #0
 8023356:	6078      	str	r0, [r7, #4]
 8023358:	000a      	movs	r2, r1
 802335a:	1cbb      	adds	r3, r7, #2
 802335c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 802335e:	230f      	movs	r3, #15
 8023360:	18fb      	adds	r3, r7, r3
 8023362:	2200      	movs	r2, #0
 8023364:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8023366:	4a11      	ldr	r2, [pc, #68]	@ (80233ac <CDC_Transmit_FS+0x5c>)
 8023368:	23ae      	movs	r3, #174	@ 0xae
 802336a:	009b      	lsls	r3, r3, #2
 802336c:	58d3      	ldr	r3, [r2, r3]
 802336e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8023370:	68ba      	ldr	r2, [r7, #8]
 8023372:	2385      	movs	r3, #133	@ 0x85
 8023374:	009b      	lsls	r3, r3, #2
 8023376:	58d3      	ldr	r3, [r2, r3]
 8023378:	2b00      	cmp	r3, #0
 802337a:	d001      	beq.n	8023380 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 802337c:	2301      	movs	r3, #1
 802337e:	e010      	b.n	80233a2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8023380:	1cbb      	adds	r3, r7, #2
 8023382:	881a      	ldrh	r2, [r3, #0]
 8023384:	6879      	ldr	r1, [r7, #4]
 8023386:	4b09      	ldr	r3, [pc, #36]	@ (80233ac <CDC_Transmit_FS+0x5c>)
 8023388:	0018      	movs	r0, r3
 802338a:	f7fe fc94 	bl	8021cb6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802338e:	250f      	movs	r5, #15
 8023390:	197c      	adds	r4, r7, r5
 8023392:	4b06      	ldr	r3, [pc, #24]	@ (80233ac <CDC_Transmit_FS+0x5c>)
 8023394:	0018      	movs	r0, r3
 8023396:	f7fe fcbe 	bl	8021d16 <USBD_CDC_TransmitPacket>
 802339a:	0003      	movs	r3, r0
 802339c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 802339e:	197b      	adds	r3, r7, r5
 80233a0:	781b      	ldrb	r3, [r3, #0]
}
 80233a2:	0018      	movs	r0, r3
 80233a4:	46bd      	mov	sp, r7
 80233a6:	b004      	add	sp, #16
 80233a8:	bdb0      	pop	{r4, r5, r7, pc}
 80233aa:	46c0      	nop			@ (mov r8, r8)
 80233ac:	2000254c 	.word	0x2000254c

080233b0 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80233b0:	b580      	push	{r7, lr}
 80233b2:	af00      	add	r7, sp, #0
  ESPProg = true;
 80233b4:	4b02      	ldr	r3, [pc, #8]	@ (80233c0 <EnableESPProg+0x10>)
 80233b6:	2201      	movs	r2, #1
 80233b8:	701a      	strb	r2, [r3, #0]
}
 80233ba:	46c0      	nop			@ (mov r8, r8)
 80233bc:	46bd      	mov	sp, r7
 80233be:	bd80      	pop	{r7, pc}
 80233c0:	20002810 	.word	0x20002810

080233c4 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80233c4:	b580      	push	{r7, lr}
 80233c6:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80233c8:	4b01      	ldr	r3, [pc, #4]	@ (80233d0 <GetUsbRxPointer+0xc>)
}
 80233ca:	0018      	movs	r0, r3
 80233cc:	46bd      	mov	sp, r7
 80233ce:	bd80      	pop	{r7, pc}
 80233d0:	200028d0 	.word	0x200028d0

080233d4 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80233d4:	b580      	push	{r7, lr}
 80233d6:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80233d8:	4b07      	ldr	r3, [pc, #28]	@ (80233f8 <ResetUsbRxDataSize+0x24>)
 80233da:	2200      	movs	r2, #0
 80233dc:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80233de:	4a07      	ldr	r2, [pc, #28]	@ (80233fc <ResetUsbRxDataSize+0x28>)
 80233e0:	4b07      	ldr	r3, [pc, #28]	@ (8023400 <ResetUsbRxDataSize+0x2c>)
 80233e2:	0011      	movs	r1, r2
 80233e4:	0018      	movs	r0, r3
 80233e6:	f7fe fc82 	bl	8021cee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80233ea:	4b05      	ldr	r3, [pc, #20]	@ (8023400 <ResetUsbRxDataSize+0x2c>)
 80233ec:	0018      	movs	r0, r3
 80233ee:	f7fe fcc9 	bl	8021d84 <USBD_CDC_ReceivePacket>
}
 80233f2:	46c0      	nop			@ (mov r8, r8)
 80233f4:	46bd      	mov	sp, r7
 80233f6:	bd80      	pop	{r7, pc}
 80233f8:	200028cc 	.word	0x200028cc
 80233fc:	200028d0 	.word	0x200028d0
 8023400:	2000254c 	.word	0x2000254c

08023404 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8023404:	b580      	push	{r7, lr}
 8023406:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8023408:	4b02      	ldr	r3, [pc, #8]	@ (8023414 <GetUsbRxDataSize+0x10>)
 802340a:	681b      	ldr	r3, [r3, #0]
}
 802340c:	0018      	movs	r0, r3
 802340e:	46bd      	mov	sp, r7
 8023410:	bd80      	pop	{r7, pc}
 8023412:	46c0      	nop			@ (mov r8, r8)
 8023414:	200028cc 	.word	0x200028cc

08023418 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8023418:	b580      	push	{r7, lr}
 802341a:	b082      	sub	sp, #8
 802341c:	af00      	add	r7, sp, #0
 802341e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8023420:	687a      	ldr	r2, [r7, #4]
 8023422:	4b07      	ldr	r3, [pc, #28]	@ (8023440 <GetUsbRxNextChunk+0x28>)
 8023424:	18d2      	adds	r2, r2, r3
 8023426:	4b07      	ldr	r3, [pc, #28]	@ (8023444 <GetUsbRxNextChunk+0x2c>)
 8023428:	0011      	movs	r1, r2
 802342a:	0018      	movs	r0, r3
 802342c:	f7fe fc5f 	bl	8021cee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023430:	4b04      	ldr	r3, [pc, #16]	@ (8023444 <GetUsbRxNextChunk+0x2c>)
 8023432:	0018      	movs	r0, r3
 8023434:	f7fe fca6 	bl	8021d84 <USBD_CDC_ReceivePacket>
}
 8023438:	46c0      	nop			@ (mov r8, r8)
 802343a:	46bd      	mov	sp, r7
 802343c:	b002      	add	sp, #8
 802343e:	bd80      	pop	{r7, pc}
 8023440:	200028d0 	.word	0x200028d0
 8023444:	2000254c 	.word	0x2000254c

08023448 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023448:	b580      	push	{r7, lr}
 802344a:	b082      	sub	sp, #8
 802344c:	af00      	add	r7, sp, #0
 802344e:	0002      	movs	r2, r0
 8023450:	6039      	str	r1, [r7, #0]
 8023452:	1dfb      	adds	r3, r7, #7
 8023454:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8023456:	683b      	ldr	r3, [r7, #0]
 8023458:	2212      	movs	r2, #18
 802345a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802345c:	4b02      	ldr	r3, [pc, #8]	@ (8023468 <USBD_FS_DeviceDescriptor+0x20>)
}
 802345e:	0018      	movs	r0, r3
 8023460:	46bd      	mov	sp, r7
 8023462:	b002      	add	sp, #8
 8023464:	bd80      	pop	{r7, pc}
 8023466:	46c0      	nop			@ (mov r8, r8)
 8023468:	20000240 	.word	0x20000240

0802346c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802346c:	b580      	push	{r7, lr}
 802346e:	b082      	sub	sp, #8
 8023470:	af00      	add	r7, sp, #0
 8023472:	0002      	movs	r2, r0
 8023474:	6039      	str	r1, [r7, #0]
 8023476:	1dfb      	adds	r3, r7, #7
 8023478:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802347a:	683b      	ldr	r3, [r7, #0]
 802347c:	2204      	movs	r2, #4
 802347e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8023480:	4b02      	ldr	r3, [pc, #8]	@ (802348c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8023482:	0018      	movs	r0, r3
 8023484:	46bd      	mov	sp, r7
 8023486:	b002      	add	sp, #8
 8023488:	bd80      	pop	{r7, pc}
 802348a:	46c0      	nop			@ (mov r8, r8)
 802348c:	20000254 	.word	0x20000254

08023490 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023490:	b580      	push	{r7, lr}
 8023492:	b082      	sub	sp, #8
 8023494:	af00      	add	r7, sp, #0
 8023496:	0002      	movs	r2, r0
 8023498:	6039      	str	r1, [r7, #0]
 802349a:	1dfb      	adds	r3, r7, #7
 802349c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802349e:	1dfb      	adds	r3, r7, #7
 80234a0:	781b      	ldrb	r3, [r3, #0]
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	d106      	bne.n	80234b4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80234a6:	683a      	ldr	r2, [r7, #0]
 80234a8:	4908      	ldr	r1, [pc, #32]	@ (80234cc <USBD_FS_ProductStrDescriptor+0x3c>)
 80234aa:	4b09      	ldr	r3, [pc, #36]	@ (80234d0 <USBD_FS_ProductStrDescriptor+0x40>)
 80234ac:	0018      	movs	r0, r3
 80234ae:	f7ff fda5 	bl	8022ffc <USBD_GetString>
 80234b2:	e005      	b.n	80234c0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80234b4:	683a      	ldr	r2, [r7, #0]
 80234b6:	4905      	ldr	r1, [pc, #20]	@ (80234cc <USBD_FS_ProductStrDescriptor+0x3c>)
 80234b8:	4b05      	ldr	r3, [pc, #20]	@ (80234d0 <USBD_FS_ProductStrDescriptor+0x40>)
 80234ba:	0018      	movs	r0, r3
 80234bc:	f7ff fd9e 	bl	8022ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 80234c0:	4b02      	ldr	r3, [pc, #8]	@ (80234cc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80234c2:	0018      	movs	r0, r3
 80234c4:	46bd      	mov	sp, r7
 80234c6:	b002      	add	sp, #8
 80234c8:	bd80      	pop	{r7, pc}
 80234ca:	46c0      	nop			@ (mov r8, r8)
 80234cc:	200030d0 	.word	0x200030d0
 80234d0:	0802e6e8 	.word	0x0802e6e8

080234d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80234d4:	b580      	push	{r7, lr}
 80234d6:	b082      	sub	sp, #8
 80234d8:	af00      	add	r7, sp, #0
 80234da:	0002      	movs	r2, r0
 80234dc:	6039      	str	r1, [r7, #0]
 80234de:	1dfb      	adds	r3, r7, #7
 80234e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80234e2:	683a      	ldr	r2, [r7, #0]
 80234e4:	4904      	ldr	r1, [pc, #16]	@ (80234f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80234e6:	4b05      	ldr	r3, [pc, #20]	@ (80234fc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80234e8:	0018      	movs	r0, r3
 80234ea:	f7ff fd87 	bl	8022ffc <USBD_GetString>
  return USBD_StrDesc;
 80234ee:	4b02      	ldr	r3, [pc, #8]	@ (80234f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80234f0:	0018      	movs	r0, r3
 80234f2:	46bd      	mov	sp, r7
 80234f4:	b002      	add	sp, #8
 80234f6:	bd80      	pop	{r7, pc}
 80234f8:	200030d0 	.word	0x200030d0
 80234fc:	0802e700 	.word	0x0802e700

08023500 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023500:	b580      	push	{r7, lr}
 8023502:	b082      	sub	sp, #8
 8023504:	af00      	add	r7, sp, #0
 8023506:	0002      	movs	r2, r0
 8023508:	6039      	str	r1, [r7, #0]
 802350a:	1dfb      	adds	r3, r7, #7
 802350c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802350e:	683b      	ldr	r3, [r7, #0]
 8023510:	221a      	movs	r2, #26
 8023512:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8023514:	f000 f84c 	bl	80235b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8023518:	4b02      	ldr	r3, [pc, #8]	@ (8023524 <USBD_FS_SerialStrDescriptor+0x24>)
}
 802351a:	0018      	movs	r0, r3
 802351c:	46bd      	mov	sp, r7
 802351e:	b002      	add	sp, #8
 8023520:	bd80      	pop	{r7, pc}
 8023522:	46c0      	nop			@ (mov r8, r8)
 8023524:	20000258 	.word	0x20000258

08023528 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023528:	b580      	push	{r7, lr}
 802352a:	b082      	sub	sp, #8
 802352c:	af00      	add	r7, sp, #0
 802352e:	0002      	movs	r2, r0
 8023530:	6039      	str	r1, [r7, #0]
 8023532:	1dfb      	adds	r3, r7, #7
 8023534:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8023536:	1dfb      	adds	r3, r7, #7
 8023538:	781b      	ldrb	r3, [r3, #0]
 802353a:	2b00      	cmp	r3, #0
 802353c:	d106      	bne.n	802354c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802353e:	683a      	ldr	r2, [r7, #0]
 8023540:	4908      	ldr	r1, [pc, #32]	@ (8023564 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8023542:	4b09      	ldr	r3, [pc, #36]	@ (8023568 <USBD_FS_ConfigStrDescriptor+0x40>)
 8023544:	0018      	movs	r0, r3
 8023546:	f7ff fd59 	bl	8022ffc <USBD_GetString>
 802354a:	e005      	b.n	8023558 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802354c:	683a      	ldr	r2, [r7, #0]
 802354e:	4905      	ldr	r1, [pc, #20]	@ (8023564 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8023550:	4b05      	ldr	r3, [pc, #20]	@ (8023568 <USBD_FS_ConfigStrDescriptor+0x40>)
 8023552:	0018      	movs	r0, r3
 8023554:	f7ff fd52 	bl	8022ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 8023558:	4b02      	ldr	r3, [pc, #8]	@ (8023564 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 802355a:	0018      	movs	r0, r3
 802355c:	46bd      	mov	sp, r7
 802355e:	b002      	add	sp, #8
 8023560:	bd80      	pop	{r7, pc}
 8023562:	46c0      	nop			@ (mov r8, r8)
 8023564:	200030d0 	.word	0x200030d0
 8023568:	0802e714 	.word	0x0802e714

0802356c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802356c:	b580      	push	{r7, lr}
 802356e:	b082      	sub	sp, #8
 8023570:	af00      	add	r7, sp, #0
 8023572:	0002      	movs	r2, r0
 8023574:	6039      	str	r1, [r7, #0]
 8023576:	1dfb      	adds	r3, r7, #7
 8023578:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802357a:	1dfb      	adds	r3, r7, #7
 802357c:	781b      	ldrb	r3, [r3, #0]
 802357e:	2b00      	cmp	r3, #0
 8023580:	d106      	bne.n	8023590 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023582:	683a      	ldr	r2, [r7, #0]
 8023584:	4908      	ldr	r1, [pc, #32]	@ (80235a8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8023586:	4b09      	ldr	r3, [pc, #36]	@ (80235ac <USBD_FS_InterfaceStrDescriptor+0x40>)
 8023588:	0018      	movs	r0, r3
 802358a:	f7ff fd37 	bl	8022ffc <USBD_GetString>
 802358e:	e005      	b.n	802359c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023590:	683a      	ldr	r2, [r7, #0]
 8023592:	4905      	ldr	r1, [pc, #20]	@ (80235a8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8023594:	4b05      	ldr	r3, [pc, #20]	@ (80235ac <USBD_FS_InterfaceStrDescriptor+0x40>)
 8023596:	0018      	movs	r0, r3
 8023598:	f7ff fd30 	bl	8022ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 802359c:	4b02      	ldr	r3, [pc, #8]	@ (80235a8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 802359e:	0018      	movs	r0, r3
 80235a0:	46bd      	mov	sp, r7
 80235a2:	b002      	add	sp, #8
 80235a4:	bd80      	pop	{r7, pc}
 80235a6:	46c0      	nop			@ (mov r8, r8)
 80235a8:	200030d0 	.word	0x200030d0
 80235ac:	0802e720 	.word	0x0802e720

080235b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80235b0:	b580      	push	{r7, lr}
 80235b2:	b084      	sub	sp, #16
 80235b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80235b6:	4b10      	ldr	r3, [pc, #64]	@ (80235f8 <Get_SerialNum+0x48>)
 80235b8:	681b      	ldr	r3, [r3, #0]
 80235ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80235bc:	4b0f      	ldr	r3, [pc, #60]	@ (80235fc <Get_SerialNum+0x4c>)
 80235be:	681b      	ldr	r3, [r3, #0]
 80235c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80235c2:	4b0f      	ldr	r3, [pc, #60]	@ (8023600 <Get_SerialNum+0x50>)
 80235c4:	681b      	ldr	r3, [r3, #0]
 80235c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80235c8:	68fa      	ldr	r2, [r7, #12]
 80235ca:	687b      	ldr	r3, [r7, #4]
 80235cc:	18d3      	adds	r3, r2, r3
 80235ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80235d0:	68fb      	ldr	r3, [r7, #12]
 80235d2:	2b00      	cmp	r3, #0
 80235d4:	d00b      	beq.n	80235ee <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80235d6:	490b      	ldr	r1, [pc, #44]	@ (8023604 <Get_SerialNum+0x54>)
 80235d8:	68fb      	ldr	r3, [r7, #12]
 80235da:	2208      	movs	r2, #8
 80235dc:	0018      	movs	r0, r3
 80235de:	f000 f815 	bl	802360c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80235e2:	4909      	ldr	r1, [pc, #36]	@ (8023608 <Get_SerialNum+0x58>)
 80235e4:	68bb      	ldr	r3, [r7, #8]
 80235e6:	2204      	movs	r2, #4
 80235e8:	0018      	movs	r0, r3
 80235ea:	f000 f80f 	bl	802360c <IntToUnicode>
  }
}
 80235ee:	46c0      	nop			@ (mov r8, r8)
 80235f0:	46bd      	mov	sp, r7
 80235f2:	b004      	add	sp, #16
 80235f4:	bd80      	pop	{r7, pc}
 80235f6:	46c0      	nop			@ (mov r8, r8)
 80235f8:	1ff80050 	.word	0x1ff80050
 80235fc:	1ff80054 	.word	0x1ff80054
 8023600:	1ff80058 	.word	0x1ff80058
 8023604:	2000025a 	.word	0x2000025a
 8023608:	2000026a 	.word	0x2000026a

0802360c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802360c:	b580      	push	{r7, lr}
 802360e:	b086      	sub	sp, #24
 8023610:	af00      	add	r7, sp, #0
 8023612:	60f8      	str	r0, [r7, #12]
 8023614:	60b9      	str	r1, [r7, #8]
 8023616:	1dfb      	adds	r3, r7, #7
 8023618:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 802361a:	2117      	movs	r1, #23
 802361c:	187b      	adds	r3, r7, r1
 802361e:	2200      	movs	r2, #0
 8023620:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8023622:	187b      	adds	r3, r7, r1
 8023624:	2200      	movs	r2, #0
 8023626:	701a      	strb	r2, [r3, #0]
 8023628:	e02f      	b.n	802368a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 802362a:	68fb      	ldr	r3, [r7, #12]
 802362c:	0f1b      	lsrs	r3, r3, #28
 802362e:	2b09      	cmp	r3, #9
 8023630:	d80d      	bhi.n	802364e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8023632:	68fb      	ldr	r3, [r7, #12]
 8023634:	0f1b      	lsrs	r3, r3, #28
 8023636:	b2da      	uxtb	r2, r3
 8023638:	2317      	movs	r3, #23
 802363a:	18fb      	adds	r3, r7, r3
 802363c:	781b      	ldrb	r3, [r3, #0]
 802363e:	005b      	lsls	r3, r3, #1
 8023640:	0019      	movs	r1, r3
 8023642:	68bb      	ldr	r3, [r7, #8]
 8023644:	185b      	adds	r3, r3, r1
 8023646:	3230      	adds	r2, #48	@ 0x30
 8023648:	b2d2      	uxtb	r2, r2
 802364a:	701a      	strb	r2, [r3, #0]
 802364c:	e00c      	b.n	8023668 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802364e:	68fb      	ldr	r3, [r7, #12]
 8023650:	0f1b      	lsrs	r3, r3, #28
 8023652:	b2da      	uxtb	r2, r3
 8023654:	2317      	movs	r3, #23
 8023656:	18fb      	adds	r3, r7, r3
 8023658:	781b      	ldrb	r3, [r3, #0]
 802365a:	005b      	lsls	r3, r3, #1
 802365c:	0019      	movs	r1, r3
 802365e:	68bb      	ldr	r3, [r7, #8]
 8023660:	185b      	adds	r3, r3, r1
 8023662:	3237      	adds	r2, #55	@ 0x37
 8023664:	b2d2      	uxtb	r2, r2
 8023666:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8023668:	68fb      	ldr	r3, [r7, #12]
 802366a:	011b      	lsls	r3, r3, #4
 802366c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802366e:	2117      	movs	r1, #23
 8023670:	187b      	adds	r3, r7, r1
 8023672:	781b      	ldrb	r3, [r3, #0]
 8023674:	005b      	lsls	r3, r3, #1
 8023676:	3301      	adds	r3, #1
 8023678:	68ba      	ldr	r2, [r7, #8]
 802367a:	18d3      	adds	r3, r2, r3
 802367c:	2200      	movs	r2, #0
 802367e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8023680:	187b      	adds	r3, r7, r1
 8023682:	781a      	ldrb	r2, [r3, #0]
 8023684:	187b      	adds	r3, r7, r1
 8023686:	3201      	adds	r2, #1
 8023688:	701a      	strb	r2, [r3, #0]
 802368a:	2317      	movs	r3, #23
 802368c:	18fa      	adds	r2, r7, r3
 802368e:	1dfb      	adds	r3, r7, #7
 8023690:	7812      	ldrb	r2, [r2, #0]
 8023692:	781b      	ldrb	r3, [r3, #0]
 8023694:	429a      	cmp	r2, r3
 8023696:	d3c8      	bcc.n	802362a <IntToUnicode+0x1e>
  }
}
 8023698:	46c0      	nop			@ (mov r8, r8)
 802369a:	46c0      	nop			@ (mov r8, r8)
 802369c:	46bd      	mov	sp, r7
 802369e:	b006      	add	sp, #24
 80236a0:	bd80      	pop	{r7, pc}
	...

080236a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80236a4:	b580      	push	{r7, lr}
 80236a6:	b082      	sub	sp, #8
 80236a8:	af00      	add	r7, sp, #0
 80236aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80236ac:	687b      	ldr	r3, [r7, #4]
 80236ae:	681b      	ldr	r3, [r3, #0]
 80236b0:	4a0a      	ldr	r2, [pc, #40]	@ (80236dc <HAL_PCD_MspInit+0x38>)
 80236b2:	4293      	cmp	r3, r2
 80236b4:	d10e      	bne.n	80236d4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80236b6:	4b0a      	ldr	r3, [pc, #40]	@ (80236e0 <HAL_PCD_MspInit+0x3c>)
 80236b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80236ba:	4b09      	ldr	r3, [pc, #36]	@ (80236e0 <HAL_PCD_MspInit+0x3c>)
 80236bc:	2180      	movs	r1, #128	@ 0x80
 80236be:	0409      	lsls	r1, r1, #16
 80236c0:	430a      	orrs	r2, r1
 80236c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80236c4:	2200      	movs	r2, #0
 80236c6:	2100      	movs	r1, #0
 80236c8:	201f      	movs	r0, #31
 80236ca:	f7f1 ffa7 	bl	801561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80236ce:	201f      	movs	r0, #31
 80236d0:	f7f1 ffb9 	bl	8015646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80236d4:	46c0      	nop			@ (mov r8, r8)
 80236d6:	46bd      	mov	sp, r7
 80236d8:	b002      	add	sp, #8
 80236da:	bd80      	pop	{r7, pc}
 80236dc:	40005c00 	.word	0x40005c00
 80236e0:	40021000 	.word	0x40021000

080236e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80236e4:	b580      	push	{r7, lr}
 80236e6:	b082      	sub	sp, #8
 80236e8:	af00      	add	r7, sp, #0
 80236ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80236ec:	687a      	ldr	r2, [r7, #4]
 80236ee:	23bc      	movs	r3, #188	@ 0xbc
 80236f0:	009b      	lsls	r3, r3, #2
 80236f2:	58d2      	ldr	r2, [r2, r3]
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	21ac      	movs	r1, #172	@ 0xac
 80236f8:	0089      	lsls	r1, r1, #2
 80236fa:	468c      	mov	ip, r1
 80236fc:	4463      	add	r3, ip
 80236fe:	0019      	movs	r1, r3
 8023700:	0010      	movs	r0, r2
 8023702:	f7fe fc11 	bl	8021f28 <USBD_LL_SetupStage>
}
 8023706:	46c0      	nop			@ (mov r8, r8)
 8023708:	46bd      	mov	sp, r7
 802370a:	b002      	add	sp, #8
 802370c:	bd80      	pop	{r7, pc}

0802370e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802370e:	b590      	push	{r4, r7, lr}
 8023710:	b083      	sub	sp, #12
 8023712:	af00      	add	r7, sp, #0
 8023714:	6078      	str	r0, [r7, #4]
 8023716:	000a      	movs	r2, r1
 8023718:	1cfb      	adds	r3, r7, #3
 802371a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802371c:	687a      	ldr	r2, [r7, #4]
 802371e:	23bc      	movs	r3, #188	@ 0xbc
 8023720:	009b      	lsls	r3, r3, #2
 8023722:	58d4      	ldr	r4, [r2, r3]
 8023724:	1cfb      	adds	r3, r7, #3
 8023726:	781a      	ldrb	r2, [r3, #0]
 8023728:	6878      	ldr	r0, [r7, #4]
 802372a:	23be      	movs	r3, #190	@ 0xbe
 802372c:	0059      	lsls	r1, r3, #1
 802372e:	0013      	movs	r3, r2
 8023730:	009b      	lsls	r3, r3, #2
 8023732:	189b      	adds	r3, r3, r2
 8023734:	00db      	lsls	r3, r3, #3
 8023736:	18c3      	adds	r3, r0, r3
 8023738:	185b      	adds	r3, r3, r1
 802373a:	681a      	ldr	r2, [r3, #0]
 802373c:	1cfb      	adds	r3, r7, #3
 802373e:	781b      	ldrb	r3, [r3, #0]
 8023740:	0019      	movs	r1, r3
 8023742:	0020      	movs	r0, r4
 8023744:	f7fe fc4e 	bl	8021fe4 <USBD_LL_DataOutStage>
}
 8023748:	46c0      	nop			@ (mov r8, r8)
 802374a:	46bd      	mov	sp, r7
 802374c:	b003      	add	sp, #12
 802374e:	bd90      	pop	{r4, r7, pc}

08023750 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023750:	b580      	push	{r7, lr}
 8023752:	b082      	sub	sp, #8
 8023754:	af00      	add	r7, sp, #0
 8023756:	6078      	str	r0, [r7, #4]
 8023758:	000a      	movs	r2, r1
 802375a:	1cfb      	adds	r3, r7, #3
 802375c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802375e:	687a      	ldr	r2, [r7, #4]
 8023760:	23bc      	movs	r3, #188	@ 0xbc
 8023762:	009b      	lsls	r3, r3, #2
 8023764:	58d0      	ldr	r0, [r2, r3]
 8023766:	1cfb      	adds	r3, r7, #3
 8023768:	781a      	ldrb	r2, [r3, #0]
 802376a:	6879      	ldr	r1, [r7, #4]
 802376c:	0013      	movs	r3, r2
 802376e:	009b      	lsls	r3, r3, #2
 8023770:	189b      	adds	r3, r3, r2
 8023772:	00db      	lsls	r3, r3, #3
 8023774:	18cb      	adds	r3, r1, r3
 8023776:	333c      	adds	r3, #60	@ 0x3c
 8023778:	681a      	ldr	r2, [r3, #0]
 802377a:	1cfb      	adds	r3, r7, #3
 802377c:	781b      	ldrb	r3, [r3, #0]
 802377e:	0019      	movs	r1, r3
 8023780:	f7fe fcb2 	bl	80220e8 <USBD_LL_DataInStage>
}
 8023784:	46c0      	nop			@ (mov r8, r8)
 8023786:	46bd      	mov	sp, r7
 8023788:	b002      	add	sp, #8
 802378a:	bd80      	pop	{r7, pc}

0802378c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802378c:	b580      	push	{r7, lr}
 802378e:	b082      	sub	sp, #8
 8023790:	af00      	add	r7, sp, #0
 8023792:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8023794:	687a      	ldr	r2, [r7, #4]
 8023796:	23bc      	movs	r3, #188	@ 0xbc
 8023798:	009b      	lsls	r3, r3, #2
 802379a:	58d3      	ldr	r3, [r2, r3]
 802379c:	0018      	movs	r0, r3
 802379e:	f7fe fde9 	bl	8022374 <USBD_LL_SOF>
}
 80237a2:	46c0      	nop			@ (mov r8, r8)
 80237a4:	46bd      	mov	sp, r7
 80237a6:	b002      	add	sp, #8
 80237a8:	bd80      	pop	{r7, pc}

080237aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80237aa:	b580      	push	{r7, lr}
 80237ac:	b084      	sub	sp, #16
 80237ae:	af00      	add	r7, sp, #0
 80237b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80237b2:	230f      	movs	r3, #15
 80237b4:	18fb      	adds	r3, r7, r3
 80237b6:	2201      	movs	r2, #1
 80237b8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80237ba:	687b      	ldr	r3, [r7, #4]
 80237bc:	689b      	ldr	r3, [r3, #8]
 80237be:	2b02      	cmp	r3, #2
 80237c0:	d001      	beq.n	80237c6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80237c2:	f7e9 ffc7 	bl	800d754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80237c6:	687a      	ldr	r2, [r7, #4]
 80237c8:	23bc      	movs	r3, #188	@ 0xbc
 80237ca:	009b      	lsls	r3, r3, #2
 80237cc:	58d2      	ldr	r2, [r2, r3]
 80237ce:	230f      	movs	r3, #15
 80237d0:	18fb      	adds	r3, r7, r3
 80237d2:	781b      	ldrb	r3, [r3, #0]
 80237d4:	0019      	movs	r1, r3
 80237d6:	0010      	movs	r0, r2
 80237d8:	f7fe fd8b 	bl	80222f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80237dc:	687a      	ldr	r2, [r7, #4]
 80237de:	23bc      	movs	r3, #188	@ 0xbc
 80237e0:	009b      	lsls	r3, r3, #2
 80237e2:	58d3      	ldr	r3, [r2, r3]
 80237e4:	0018      	movs	r0, r3
 80237e6:	f7fe fd3c 	bl	8022262 <USBD_LL_Reset>
}
 80237ea:	46c0      	nop			@ (mov r8, r8)
 80237ec:	46bd      	mov	sp, r7
 80237ee:	b004      	add	sp, #16
 80237f0:	bd80      	pop	{r7, pc}
	...

080237f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80237f4:	b580      	push	{r7, lr}
 80237f6:	b082      	sub	sp, #8
 80237f8:	af00      	add	r7, sp, #0
 80237fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80237fc:	687a      	ldr	r2, [r7, #4]
 80237fe:	23bc      	movs	r3, #188	@ 0xbc
 8023800:	009b      	lsls	r3, r3, #2
 8023802:	58d3      	ldr	r3, [r2, r3]
 8023804:	0018      	movs	r0, r3
 8023806:	f7fe fd85 	bl	8022314 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802380a:	687b      	ldr	r3, [r7, #4]
 802380c:	699b      	ldr	r3, [r3, #24]
 802380e:	2b00      	cmp	r3, #0
 8023810:	d005      	beq.n	802381e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023812:	4b05      	ldr	r3, [pc, #20]	@ (8023828 <HAL_PCD_SuspendCallback+0x34>)
 8023814:	691a      	ldr	r2, [r3, #16]
 8023816:	4b04      	ldr	r3, [pc, #16]	@ (8023828 <HAL_PCD_SuspendCallback+0x34>)
 8023818:	2106      	movs	r1, #6
 802381a:	430a      	orrs	r2, r1
 802381c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 802381e:	46c0      	nop			@ (mov r8, r8)
 8023820:	46bd      	mov	sp, r7
 8023822:	b002      	add	sp, #8
 8023824:	bd80      	pop	{r7, pc}
 8023826:	46c0      	nop			@ (mov r8, r8)
 8023828:	e000ed00 	.word	0xe000ed00

0802382c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802382c:	b580      	push	{r7, lr}
 802382e:	b082      	sub	sp, #8
 8023830:	af00      	add	r7, sp, #0
 8023832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8023834:	687b      	ldr	r3, [r7, #4]
 8023836:	699b      	ldr	r3, [r3, #24]
 8023838:	2b00      	cmp	r3, #0
 802383a:	d007      	beq.n	802384c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802383c:	4b09      	ldr	r3, [pc, #36]	@ (8023864 <HAL_PCD_ResumeCallback+0x38>)
 802383e:	691a      	ldr	r2, [r3, #16]
 8023840:	4b08      	ldr	r3, [pc, #32]	@ (8023864 <HAL_PCD_ResumeCallback+0x38>)
 8023842:	2106      	movs	r1, #6
 8023844:	438a      	bics	r2, r1
 8023846:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8023848:	f000 fa44 	bl	8023cd4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802384c:	687a      	ldr	r2, [r7, #4]
 802384e:	23bc      	movs	r3, #188	@ 0xbc
 8023850:	009b      	lsls	r3, r3, #2
 8023852:	58d3      	ldr	r3, [r2, r3]
 8023854:	0018      	movs	r0, r3
 8023856:	f7fe fd75 	bl	8022344 <USBD_LL_Resume>
}
 802385a:	46c0      	nop			@ (mov r8, r8)
 802385c:	46bd      	mov	sp, r7
 802385e:	b002      	add	sp, #8
 8023860:	bd80      	pop	{r7, pc}
 8023862:	46c0      	nop			@ (mov r8, r8)
 8023864:	e000ed00 	.word	0xe000ed00

08023868 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8023868:	b580      	push	{r7, lr}
 802386a:	b082      	sub	sp, #8
 802386c:	af00      	add	r7, sp, #0
 802386e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8023870:	4a2d      	ldr	r2, [pc, #180]	@ (8023928 <USBD_LL_Init+0xc0>)
 8023872:	23bc      	movs	r3, #188	@ 0xbc
 8023874:	009b      	lsls	r3, r3, #2
 8023876:	6879      	ldr	r1, [r7, #4]
 8023878:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 802387a:	687a      	ldr	r2, [r7, #4]
 802387c:	23b0      	movs	r3, #176	@ 0xb0
 802387e:	009b      	lsls	r3, r3, #2
 8023880:	4929      	ldr	r1, [pc, #164]	@ (8023928 <USBD_LL_Init+0xc0>)
 8023882:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8023884:	4b28      	ldr	r3, [pc, #160]	@ (8023928 <USBD_LL_Init+0xc0>)
 8023886:	4a29      	ldr	r2, [pc, #164]	@ (802392c <USBD_LL_Init+0xc4>)
 8023888:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 802388a:	4b27      	ldr	r3, [pc, #156]	@ (8023928 <USBD_LL_Init+0xc0>)
 802388c:	2208      	movs	r2, #8
 802388e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8023890:	4b25      	ldr	r3, [pc, #148]	@ (8023928 <USBD_LL_Init+0xc0>)
 8023892:	2202      	movs	r2, #2
 8023894:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8023896:	4b24      	ldr	r3, [pc, #144]	@ (8023928 <USBD_LL_Init+0xc0>)
 8023898:	2202      	movs	r2, #2
 802389a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 802389c:	4b22      	ldr	r3, [pc, #136]	@ (8023928 <USBD_LL_Init+0xc0>)
 802389e:	2200      	movs	r2, #0
 80238a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80238a2:	4b21      	ldr	r3, [pc, #132]	@ (8023928 <USBD_LL_Init+0xc0>)
 80238a4:	2200      	movs	r2, #0
 80238a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80238a8:	4b1f      	ldr	r3, [pc, #124]	@ (8023928 <USBD_LL_Init+0xc0>)
 80238aa:	2200      	movs	r2, #0
 80238ac:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80238ae:	4b1e      	ldr	r3, [pc, #120]	@ (8023928 <USBD_LL_Init+0xc0>)
 80238b0:	0018      	movs	r0, r3
 80238b2:	f7f5 ff69 	bl	8019788 <HAL_PCD_Init>
 80238b6:	1e03      	subs	r3, r0, #0
 80238b8:	d001      	beq.n	80238be <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80238ba:	f7e9 ff4b 	bl	800d754 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80238be:	687a      	ldr	r2, [r7, #4]
 80238c0:	23b0      	movs	r3, #176	@ 0xb0
 80238c2:	009b      	lsls	r3, r3, #2
 80238c4:	58d0      	ldr	r0, [r2, r3]
 80238c6:	2318      	movs	r3, #24
 80238c8:	2200      	movs	r2, #0
 80238ca:	2100      	movs	r1, #0
 80238cc:	f7f7 fd2a 	bl	801b324 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80238d0:	687a      	ldr	r2, [r7, #4]
 80238d2:	23b0      	movs	r3, #176	@ 0xb0
 80238d4:	009b      	lsls	r3, r3, #2
 80238d6:	58d0      	ldr	r0, [r2, r3]
 80238d8:	2358      	movs	r3, #88	@ 0x58
 80238da:	2200      	movs	r2, #0
 80238dc:	2180      	movs	r1, #128	@ 0x80
 80238de:	f7f7 fd21 	bl	801b324 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80238e2:	687a      	ldr	r2, [r7, #4]
 80238e4:	23b0      	movs	r3, #176	@ 0xb0
 80238e6:	009b      	lsls	r3, r3, #2
 80238e8:	58d0      	ldr	r0, [r2, r3]
 80238ea:	23c0      	movs	r3, #192	@ 0xc0
 80238ec:	2200      	movs	r2, #0
 80238ee:	2181      	movs	r1, #129	@ 0x81
 80238f0:	f7f7 fd18 	bl	801b324 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80238f4:	687a      	ldr	r2, [r7, #4]
 80238f6:	23b0      	movs	r3, #176	@ 0xb0
 80238f8:	009b      	lsls	r3, r3, #2
 80238fa:	58d0      	ldr	r0, [r2, r3]
 80238fc:	2388      	movs	r3, #136	@ 0x88
 80238fe:	005b      	lsls	r3, r3, #1
 8023900:	2200      	movs	r2, #0
 8023902:	2101      	movs	r1, #1
 8023904:	f7f7 fd0e 	bl	801b324 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8023908:	687a      	ldr	r2, [r7, #4]
 802390a:	23b0      	movs	r3, #176	@ 0xb0
 802390c:	009b      	lsls	r3, r3, #2
 802390e:	58d0      	ldr	r0, [r2, r3]
 8023910:	2380      	movs	r3, #128	@ 0x80
 8023912:	005b      	lsls	r3, r3, #1
 8023914:	2200      	movs	r2, #0
 8023916:	2182      	movs	r1, #130	@ 0x82
 8023918:	f7f7 fd04 	bl	801b324 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 802391c:	2300      	movs	r3, #0
}
 802391e:	0018      	movs	r0, r3
 8023920:	46bd      	mov	sp, r7
 8023922:	b002      	add	sp, #8
 8023924:	bd80      	pop	{r7, pc}
 8023926:	46c0      	nop			@ (mov r8, r8)
 8023928:	200032d0 	.word	0x200032d0
 802392c:	40005c00 	.word	0x40005c00

08023930 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8023930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023932:	b085      	sub	sp, #20
 8023934:	af00      	add	r7, sp, #0
 8023936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023938:	210f      	movs	r1, #15
 802393a:	187b      	adds	r3, r7, r1
 802393c:	2200      	movs	r2, #0
 802393e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023940:	260e      	movs	r6, #14
 8023942:	19bb      	adds	r3, r7, r6
 8023944:	2200      	movs	r2, #0
 8023946:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8023948:	687a      	ldr	r2, [r7, #4]
 802394a:	23b0      	movs	r3, #176	@ 0xb0
 802394c:	009b      	lsls	r3, r3, #2
 802394e:	58d3      	ldr	r3, [r2, r3]
 8023950:	000d      	movs	r5, r1
 8023952:	187c      	adds	r4, r7, r1
 8023954:	0018      	movs	r0, r3
 8023956:	f7f6 f817 	bl	8019988 <HAL_PCD_Start>
 802395a:	0003      	movs	r3, r0
 802395c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802395e:	19bc      	adds	r4, r7, r6
 8023960:	197b      	adds	r3, r7, r5
 8023962:	781b      	ldrb	r3, [r3, #0]
 8023964:	0018      	movs	r0, r3
 8023966:	f000 f9bc 	bl	8023ce2 <USBD_Get_USB_Status>
 802396a:	0003      	movs	r3, r0
 802396c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802396e:	19bb      	adds	r3, r7, r6
 8023970:	781b      	ldrb	r3, [r3, #0]
}
 8023972:	0018      	movs	r0, r3
 8023974:	46bd      	mov	sp, r7
 8023976:	b005      	add	sp, #20
 8023978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802397a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802397a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802397c:	b085      	sub	sp, #20
 802397e:	af00      	add	r7, sp, #0
 8023980:	6078      	str	r0, [r7, #4]
 8023982:	000c      	movs	r4, r1
 8023984:	0010      	movs	r0, r2
 8023986:	0019      	movs	r1, r3
 8023988:	1cfb      	adds	r3, r7, #3
 802398a:	1c22      	adds	r2, r4, #0
 802398c:	701a      	strb	r2, [r3, #0]
 802398e:	1cbb      	adds	r3, r7, #2
 8023990:	1c02      	adds	r2, r0, #0
 8023992:	701a      	strb	r2, [r3, #0]
 8023994:	003b      	movs	r3, r7
 8023996:	1c0a      	adds	r2, r1, #0
 8023998:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802399a:	260f      	movs	r6, #15
 802399c:	19bb      	adds	r3, r7, r6
 802399e:	2200      	movs	r2, #0
 80239a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80239a2:	250e      	movs	r5, #14
 80239a4:	197b      	adds	r3, r7, r5
 80239a6:	2200      	movs	r2, #0
 80239a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80239aa:	687a      	ldr	r2, [r7, #4]
 80239ac:	23b0      	movs	r3, #176	@ 0xb0
 80239ae:	009b      	lsls	r3, r3, #2
 80239b0:	58d0      	ldr	r0, [r2, r3]
 80239b2:	19bc      	adds	r4, r7, r6
 80239b4:	1cbb      	adds	r3, r7, #2
 80239b6:	781d      	ldrb	r5, [r3, #0]
 80239b8:	003b      	movs	r3, r7
 80239ba:	881a      	ldrh	r2, [r3, #0]
 80239bc:	1cfb      	adds	r3, r7, #3
 80239be:	7819      	ldrb	r1, [r3, #0]
 80239c0:	002b      	movs	r3, r5
 80239c2:	f7f6 f976 	bl	8019cb2 <HAL_PCD_EP_Open>
 80239c6:	0003      	movs	r3, r0
 80239c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80239ca:	250e      	movs	r5, #14
 80239cc:	197c      	adds	r4, r7, r5
 80239ce:	19bb      	adds	r3, r7, r6
 80239d0:	781b      	ldrb	r3, [r3, #0]
 80239d2:	0018      	movs	r0, r3
 80239d4:	f000 f985 	bl	8023ce2 <USBD_Get_USB_Status>
 80239d8:	0003      	movs	r3, r0
 80239da:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80239dc:	197b      	adds	r3, r7, r5
 80239de:	781b      	ldrb	r3, [r3, #0]
}
 80239e0:	0018      	movs	r0, r3
 80239e2:	46bd      	mov	sp, r7
 80239e4:	b005      	add	sp, #20
 80239e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080239e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80239e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239ea:	b085      	sub	sp, #20
 80239ec:	af00      	add	r7, sp, #0
 80239ee:	6078      	str	r0, [r7, #4]
 80239f0:	000a      	movs	r2, r1
 80239f2:	1cfb      	adds	r3, r7, #3
 80239f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80239f6:	210f      	movs	r1, #15
 80239f8:	187b      	adds	r3, r7, r1
 80239fa:	2200      	movs	r2, #0
 80239fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80239fe:	260e      	movs	r6, #14
 8023a00:	19bb      	adds	r3, r7, r6
 8023a02:	2200      	movs	r2, #0
 8023a04:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023a06:	687a      	ldr	r2, [r7, #4]
 8023a08:	23b0      	movs	r3, #176	@ 0xb0
 8023a0a:	009b      	lsls	r3, r3, #2
 8023a0c:	58d2      	ldr	r2, [r2, r3]
 8023a0e:	000d      	movs	r5, r1
 8023a10:	187c      	adds	r4, r7, r1
 8023a12:	1cfb      	adds	r3, r7, #3
 8023a14:	781b      	ldrb	r3, [r3, #0]
 8023a16:	0019      	movs	r1, r3
 8023a18:	0010      	movs	r0, r2
 8023a1a:	f7f6 f9b9 	bl	8019d90 <HAL_PCD_EP_Close>
 8023a1e:	0003      	movs	r3, r0
 8023a20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023a22:	19bc      	adds	r4, r7, r6
 8023a24:	197b      	adds	r3, r7, r5
 8023a26:	781b      	ldrb	r3, [r3, #0]
 8023a28:	0018      	movs	r0, r3
 8023a2a:	f000 f95a 	bl	8023ce2 <USBD_Get_USB_Status>
 8023a2e:	0003      	movs	r3, r0
 8023a30:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023a32:	19bb      	adds	r3, r7, r6
 8023a34:	781b      	ldrb	r3, [r3, #0]
}
 8023a36:	0018      	movs	r0, r3
 8023a38:	46bd      	mov	sp, r7
 8023a3a:	b005      	add	sp, #20
 8023a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a3e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a40:	b085      	sub	sp, #20
 8023a42:	af00      	add	r7, sp, #0
 8023a44:	6078      	str	r0, [r7, #4]
 8023a46:	000a      	movs	r2, r1
 8023a48:	1cfb      	adds	r3, r7, #3
 8023a4a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023a4c:	210f      	movs	r1, #15
 8023a4e:	187b      	adds	r3, r7, r1
 8023a50:	2200      	movs	r2, #0
 8023a52:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023a54:	260e      	movs	r6, #14
 8023a56:	19bb      	adds	r3, r7, r6
 8023a58:	2200      	movs	r2, #0
 8023a5a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023a5c:	687a      	ldr	r2, [r7, #4]
 8023a5e:	23b0      	movs	r3, #176	@ 0xb0
 8023a60:	009b      	lsls	r3, r3, #2
 8023a62:	58d2      	ldr	r2, [r2, r3]
 8023a64:	000d      	movs	r5, r1
 8023a66:	187c      	adds	r4, r7, r1
 8023a68:	1cfb      	adds	r3, r7, #3
 8023a6a:	781b      	ldrb	r3, [r3, #0]
 8023a6c:	0019      	movs	r1, r3
 8023a6e:	0010      	movs	r0, r2
 8023a70:	f7f6 fa6b 	bl	8019f4a <HAL_PCD_EP_SetStall>
 8023a74:	0003      	movs	r3, r0
 8023a76:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023a78:	19bc      	adds	r4, r7, r6
 8023a7a:	197b      	adds	r3, r7, r5
 8023a7c:	781b      	ldrb	r3, [r3, #0]
 8023a7e:	0018      	movs	r0, r3
 8023a80:	f000 f92f 	bl	8023ce2 <USBD_Get_USB_Status>
 8023a84:	0003      	movs	r3, r0
 8023a86:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023a88:	19bb      	adds	r3, r7, r6
 8023a8a:	781b      	ldrb	r3, [r3, #0]
}
 8023a8c:	0018      	movs	r0, r3
 8023a8e:	46bd      	mov	sp, r7
 8023a90:	b005      	add	sp, #20
 8023a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a94 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a96:	b085      	sub	sp, #20
 8023a98:	af00      	add	r7, sp, #0
 8023a9a:	6078      	str	r0, [r7, #4]
 8023a9c:	000a      	movs	r2, r1
 8023a9e:	1cfb      	adds	r3, r7, #3
 8023aa0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023aa2:	210f      	movs	r1, #15
 8023aa4:	187b      	adds	r3, r7, r1
 8023aa6:	2200      	movs	r2, #0
 8023aa8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023aaa:	260e      	movs	r6, #14
 8023aac:	19bb      	adds	r3, r7, r6
 8023aae:	2200      	movs	r2, #0
 8023ab0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023ab2:	687a      	ldr	r2, [r7, #4]
 8023ab4:	23b0      	movs	r3, #176	@ 0xb0
 8023ab6:	009b      	lsls	r3, r3, #2
 8023ab8:	58d2      	ldr	r2, [r2, r3]
 8023aba:	000d      	movs	r5, r1
 8023abc:	187c      	adds	r4, r7, r1
 8023abe:	1cfb      	adds	r3, r7, #3
 8023ac0:	781b      	ldrb	r3, [r3, #0]
 8023ac2:	0019      	movs	r1, r3
 8023ac4:	0010      	movs	r0, r2
 8023ac6:	f7f6 fa9c 	bl	801a002 <HAL_PCD_EP_ClrStall>
 8023aca:	0003      	movs	r3, r0
 8023acc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023ace:	19bc      	adds	r4, r7, r6
 8023ad0:	197b      	adds	r3, r7, r5
 8023ad2:	781b      	ldrb	r3, [r3, #0]
 8023ad4:	0018      	movs	r0, r3
 8023ad6:	f000 f904 	bl	8023ce2 <USBD_Get_USB_Status>
 8023ada:	0003      	movs	r3, r0
 8023adc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023ade:	19bb      	adds	r3, r7, r6
 8023ae0:	781b      	ldrb	r3, [r3, #0]
}
 8023ae2:	0018      	movs	r0, r3
 8023ae4:	46bd      	mov	sp, r7
 8023ae6:	b005      	add	sp, #20
 8023ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023aea <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023aea:	b580      	push	{r7, lr}
 8023aec:	b084      	sub	sp, #16
 8023aee:	af00      	add	r7, sp, #0
 8023af0:	6078      	str	r0, [r7, #4]
 8023af2:	000a      	movs	r2, r1
 8023af4:	1cfb      	adds	r3, r7, #3
 8023af6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023af8:	687a      	ldr	r2, [r7, #4]
 8023afa:	23b0      	movs	r3, #176	@ 0xb0
 8023afc:	009b      	lsls	r3, r3, #2
 8023afe:	58d3      	ldr	r3, [r2, r3]
 8023b00:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8023b02:	1cfb      	adds	r3, r7, #3
 8023b04:	781b      	ldrb	r3, [r3, #0]
 8023b06:	b25b      	sxtb	r3, r3
 8023b08:	2b00      	cmp	r3, #0
 8023b0a:	da0d      	bge.n	8023b28 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023b0c:	1cfb      	adds	r3, r7, #3
 8023b0e:	781b      	ldrb	r3, [r3, #0]
 8023b10:	227f      	movs	r2, #127	@ 0x7f
 8023b12:	4013      	ands	r3, r2
 8023b14:	68f9      	ldr	r1, [r7, #12]
 8023b16:	1c5a      	adds	r2, r3, #1
 8023b18:	0013      	movs	r3, r2
 8023b1a:	009b      	lsls	r3, r3, #2
 8023b1c:	189b      	adds	r3, r3, r2
 8023b1e:	00db      	lsls	r3, r3, #3
 8023b20:	18cb      	adds	r3, r1, r3
 8023b22:	3302      	adds	r3, #2
 8023b24:	781b      	ldrb	r3, [r3, #0]
 8023b26:	e00d      	b.n	8023b44 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023b28:	1cfb      	adds	r3, r7, #3
 8023b2a:	781b      	ldrb	r3, [r3, #0]
 8023b2c:	227f      	movs	r2, #127	@ 0x7f
 8023b2e:	401a      	ands	r2, r3
 8023b30:	68f8      	ldr	r0, [r7, #12]
 8023b32:	23b5      	movs	r3, #181	@ 0xb5
 8023b34:	0059      	lsls	r1, r3, #1
 8023b36:	0013      	movs	r3, r2
 8023b38:	009b      	lsls	r3, r3, #2
 8023b3a:	189b      	adds	r3, r3, r2
 8023b3c:	00db      	lsls	r3, r3, #3
 8023b3e:	18c3      	adds	r3, r0, r3
 8023b40:	185b      	adds	r3, r3, r1
 8023b42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8023b44:	0018      	movs	r0, r3
 8023b46:	46bd      	mov	sp, r7
 8023b48:	b004      	add	sp, #16
 8023b4a:	bd80      	pop	{r7, pc}

08023b4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8023b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b4e:	b085      	sub	sp, #20
 8023b50:	af00      	add	r7, sp, #0
 8023b52:	6078      	str	r0, [r7, #4]
 8023b54:	000a      	movs	r2, r1
 8023b56:	1cfb      	adds	r3, r7, #3
 8023b58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023b5a:	210f      	movs	r1, #15
 8023b5c:	187b      	adds	r3, r7, r1
 8023b5e:	2200      	movs	r2, #0
 8023b60:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023b62:	260e      	movs	r6, #14
 8023b64:	19bb      	adds	r3, r7, r6
 8023b66:	2200      	movs	r2, #0
 8023b68:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023b6a:	687a      	ldr	r2, [r7, #4]
 8023b6c:	23b0      	movs	r3, #176	@ 0xb0
 8023b6e:	009b      	lsls	r3, r3, #2
 8023b70:	58d2      	ldr	r2, [r2, r3]
 8023b72:	000d      	movs	r5, r1
 8023b74:	187c      	adds	r4, r7, r1
 8023b76:	1cfb      	adds	r3, r7, #3
 8023b78:	781b      	ldrb	r3, [r3, #0]
 8023b7a:	0019      	movs	r1, r3
 8023b7c:	0010      	movs	r0, r2
 8023b7e:	f7f6 f86d 	bl	8019c5c <HAL_PCD_SetAddress>
 8023b82:	0003      	movs	r3, r0
 8023b84:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023b86:	19bc      	adds	r4, r7, r6
 8023b88:	197b      	adds	r3, r7, r5
 8023b8a:	781b      	ldrb	r3, [r3, #0]
 8023b8c:	0018      	movs	r0, r3
 8023b8e:	f000 f8a8 	bl	8023ce2 <USBD_Get_USB_Status>
 8023b92:	0003      	movs	r3, r0
 8023b94:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023b96:	19bb      	adds	r3, r7, r6
 8023b98:	781b      	ldrb	r3, [r3, #0]
}
 8023b9a:	0018      	movs	r0, r3
 8023b9c:	46bd      	mov	sp, r7
 8023b9e:	b005      	add	sp, #20
 8023ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023ba2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ba4:	b087      	sub	sp, #28
 8023ba6:	af00      	add	r7, sp, #0
 8023ba8:	60f8      	str	r0, [r7, #12]
 8023baa:	0008      	movs	r0, r1
 8023bac:	607a      	str	r2, [r7, #4]
 8023bae:	0019      	movs	r1, r3
 8023bb0:	230b      	movs	r3, #11
 8023bb2:	18fb      	adds	r3, r7, r3
 8023bb4:	1c02      	adds	r2, r0, #0
 8023bb6:	701a      	strb	r2, [r3, #0]
 8023bb8:	2408      	movs	r4, #8
 8023bba:	193b      	adds	r3, r7, r4
 8023bbc:	1c0a      	adds	r2, r1, #0
 8023bbe:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023bc0:	2117      	movs	r1, #23
 8023bc2:	187b      	adds	r3, r7, r1
 8023bc4:	2200      	movs	r2, #0
 8023bc6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023bc8:	2516      	movs	r5, #22
 8023bca:	197b      	adds	r3, r7, r5
 8023bcc:	2200      	movs	r2, #0
 8023bce:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023bd0:	68fa      	ldr	r2, [r7, #12]
 8023bd2:	23b0      	movs	r3, #176	@ 0xb0
 8023bd4:	009b      	lsls	r3, r3, #2
 8023bd6:	58d0      	ldr	r0, [r2, r3]
 8023bd8:	193b      	adds	r3, r7, r4
 8023bda:	881d      	ldrh	r5, [r3, #0]
 8023bdc:	000e      	movs	r6, r1
 8023bde:	187c      	adds	r4, r7, r1
 8023be0:	687a      	ldr	r2, [r7, #4]
 8023be2:	230b      	movs	r3, #11
 8023be4:	18fb      	adds	r3, r7, r3
 8023be6:	7819      	ldrb	r1, [r3, #0]
 8023be8:	002b      	movs	r3, r5
 8023bea:	f7f6 f972 	bl	8019ed2 <HAL_PCD_EP_Transmit>
 8023bee:	0003      	movs	r3, r0
 8023bf0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023bf2:	2516      	movs	r5, #22
 8023bf4:	197c      	adds	r4, r7, r5
 8023bf6:	19bb      	adds	r3, r7, r6
 8023bf8:	781b      	ldrb	r3, [r3, #0]
 8023bfa:	0018      	movs	r0, r3
 8023bfc:	f000 f871 	bl	8023ce2 <USBD_Get_USB_Status>
 8023c00:	0003      	movs	r3, r0
 8023c02:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023c04:	197b      	adds	r3, r7, r5
 8023c06:	781b      	ldrb	r3, [r3, #0]
}
 8023c08:	0018      	movs	r0, r3
 8023c0a:	46bd      	mov	sp, r7
 8023c0c:	b007      	add	sp, #28
 8023c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023c10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c12:	b087      	sub	sp, #28
 8023c14:	af00      	add	r7, sp, #0
 8023c16:	60f8      	str	r0, [r7, #12]
 8023c18:	0008      	movs	r0, r1
 8023c1a:	607a      	str	r2, [r7, #4]
 8023c1c:	0019      	movs	r1, r3
 8023c1e:	230b      	movs	r3, #11
 8023c20:	18fb      	adds	r3, r7, r3
 8023c22:	1c02      	adds	r2, r0, #0
 8023c24:	701a      	strb	r2, [r3, #0]
 8023c26:	2408      	movs	r4, #8
 8023c28:	193b      	adds	r3, r7, r4
 8023c2a:	1c0a      	adds	r2, r1, #0
 8023c2c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023c2e:	2117      	movs	r1, #23
 8023c30:	187b      	adds	r3, r7, r1
 8023c32:	2200      	movs	r2, #0
 8023c34:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023c36:	2516      	movs	r5, #22
 8023c38:	197b      	adds	r3, r7, r5
 8023c3a:	2200      	movs	r2, #0
 8023c3c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023c3e:	68fa      	ldr	r2, [r7, #12]
 8023c40:	23b0      	movs	r3, #176	@ 0xb0
 8023c42:	009b      	lsls	r3, r3, #2
 8023c44:	58d0      	ldr	r0, [r2, r3]
 8023c46:	193b      	adds	r3, r7, r4
 8023c48:	881d      	ldrh	r5, [r3, #0]
 8023c4a:	000e      	movs	r6, r1
 8023c4c:	187c      	adds	r4, r7, r1
 8023c4e:	687a      	ldr	r2, [r7, #4]
 8023c50:	230b      	movs	r3, #11
 8023c52:	18fb      	adds	r3, r7, r3
 8023c54:	7819      	ldrb	r1, [r3, #0]
 8023c56:	002b      	movs	r3, r5
 8023c58:	f7f6 f8eb 	bl	8019e32 <HAL_PCD_EP_Receive>
 8023c5c:	0003      	movs	r3, r0
 8023c5e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023c60:	2516      	movs	r5, #22
 8023c62:	197c      	adds	r4, r7, r5
 8023c64:	19bb      	adds	r3, r7, r6
 8023c66:	781b      	ldrb	r3, [r3, #0]
 8023c68:	0018      	movs	r0, r3
 8023c6a:	f000 f83a 	bl	8023ce2 <USBD_Get_USB_Status>
 8023c6e:	0003      	movs	r3, r0
 8023c70:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023c72:	197b      	adds	r3, r7, r5
 8023c74:	781b      	ldrb	r3, [r3, #0]
}
 8023c76:	0018      	movs	r0, r3
 8023c78:	46bd      	mov	sp, r7
 8023c7a:	b007      	add	sp, #28
 8023c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023c7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023c7e:	b580      	push	{r7, lr}
 8023c80:	b082      	sub	sp, #8
 8023c82:	af00      	add	r7, sp, #0
 8023c84:	6078      	str	r0, [r7, #4]
 8023c86:	000a      	movs	r2, r1
 8023c88:	1cfb      	adds	r3, r7, #3
 8023c8a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023c8c:	687a      	ldr	r2, [r7, #4]
 8023c8e:	23b0      	movs	r3, #176	@ 0xb0
 8023c90:	009b      	lsls	r3, r3, #2
 8023c92:	58d2      	ldr	r2, [r2, r3]
 8023c94:	1cfb      	adds	r3, r7, #3
 8023c96:	781b      	ldrb	r3, [r3, #0]
 8023c98:	0019      	movs	r1, r3
 8023c9a:	0010      	movs	r0, r2
 8023c9c:	f7f6 f900 	bl	8019ea0 <HAL_PCD_EP_GetRxCount>
 8023ca0:	0003      	movs	r3, r0
}
 8023ca2:	0018      	movs	r0, r3
 8023ca4:	46bd      	mov	sp, r7
 8023ca6:	b002      	add	sp, #8
 8023ca8:	bd80      	pop	{r7, pc}
	...

08023cac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023cac:	b580      	push	{r7, lr}
 8023cae:	b082      	sub	sp, #8
 8023cb0:	af00      	add	r7, sp, #0
 8023cb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8023cb4:	4b02      	ldr	r3, [pc, #8]	@ (8023cc0 <USBD_static_malloc+0x14>)
}
 8023cb6:	0018      	movs	r0, r3
 8023cb8:	46bd      	mov	sp, r7
 8023cba:	b002      	add	sp, #8
 8023cbc:	bd80      	pop	{r7, pc}
 8023cbe:	46c0      	nop			@ (mov r8, r8)
 8023cc0:	200035c4 	.word	0x200035c4

08023cc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8023cc4:	b580      	push	{r7, lr}
 8023cc6:	b082      	sub	sp, #8
 8023cc8:	af00      	add	r7, sp, #0
 8023cca:	6078      	str	r0, [r7, #4]

}
 8023ccc:	46c0      	nop			@ (mov r8, r8)
 8023cce:	46bd      	mov	sp, r7
 8023cd0:	b002      	add	sp, #8
 8023cd2:	bd80      	pop	{r7, pc}

08023cd4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8023cd4:	b580      	push	{r7, lr}
 8023cd6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8023cd8:	f7e9 fbd0 	bl	800d47c <SystemClock_Config>
}
 8023cdc:	46c0      	nop			@ (mov r8, r8)
 8023cde:	46bd      	mov	sp, r7
 8023ce0:	bd80      	pop	{r7, pc}

08023ce2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023ce2:	b580      	push	{r7, lr}
 8023ce4:	b084      	sub	sp, #16
 8023ce6:	af00      	add	r7, sp, #0
 8023ce8:	0002      	movs	r2, r0
 8023cea:	1dfb      	adds	r3, r7, #7
 8023cec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023cee:	230f      	movs	r3, #15
 8023cf0:	18fb      	adds	r3, r7, r3
 8023cf2:	2200      	movs	r2, #0
 8023cf4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8023cf6:	1dfb      	adds	r3, r7, #7
 8023cf8:	781b      	ldrb	r3, [r3, #0]
 8023cfa:	2b03      	cmp	r3, #3
 8023cfc:	d017      	beq.n	8023d2e <USBD_Get_USB_Status+0x4c>
 8023cfe:	dc1b      	bgt.n	8023d38 <USBD_Get_USB_Status+0x56>
 8023d00:	2b02      	cmp	r3, #2
 8023d02:	d00f      	beq.n	8023d24 <USBD_Get_USB_Status+0x42>
 8023d04:	dc18      	bgt.n	8023d38 <USBD_Get_USB_Status+0x56>
 8023d06:	2b00      	cmp	r3, #0
 8023d08:	d002      	beq.n	8023d10 <USBD_Get_USB_Status+0x2e>
 8023d0a:	2b01      	cmp	r3, #1
 8023d0c:	d005      	beq.n	8023d1a <USBD_Get_USB_Status+0x38>
 8023d0e:	e013      	b.n	8023d38 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023d10:	230f      	movs	r3, #15
 8023d12:	18fb      	adds	r3, r7, r3
 8023d14:	2200      	movs	r2, #0
 8023d16:	701a      	strb	r2, [r3, #0]
    break;
 8023d18:	e013      	b.n	8023d42 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023d1a:	230f      	movs	r3, #15
 8023d1c:	18fb      	adds	r3, r7, r3
 8023d1e:	2202      	movs	r2, #2
 8023d20:	701a      	strb	r2, [r3, #0]
    break;
 8023d22:	e00e      	b.n	8023d42 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8023d24:	230f      	movs	r3, #15
 8023d26:	18fb      	adds	r3, r7, r3
 8023d28:	2201      	movs	r2, #1
 8023d2a:	701a      	strb	r2, [r3, #0]
    break;
 8023d2c:	e009      	b.n	8023d42 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023d2e:	230f      	movs	r3, #15
 8023d30:	18fb      	adds	r3, r7, r3
 8023d32:	2202      	movs	r2, #2
 8023d34:	701a      	strb	r2, [r3, #0]
    break;
 8023d36:	e004      	b.n	8023d42 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023d38:	230f      	movs	r3, #15
 8023d3a:	18fb      	adds	r3, r7, r3
 8023d3c:	2202      	movs	r2, #2
 8023d3e:	701a      	strb	r2, [r3, #0]
    break;
 8023d40:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8023d42:	230f      	movs	r3, #15
 8023d44:	18fb      	adds	r3, r7, r3
 8023d46:	781b      	ldrb	r3, [r3, #0]
}
 8023d48:	0018      	movs	r0, r3
 8023d4a:	46bd      	mov	sp, r7
 8023d4c:	b004      	add	sp, #16
 8023d4e:	bd80      	pop	{r7, pc}

08023d50 <arm_cfft_radix4by2_q31>:
 8023d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d52:	465f      	mov	r7, fp
 8023d54:	4656      	mov	r6, sl
 8023d56:	464d      	mov	r5, r9
 8023d58:	4644      	mov	r4, r8
 8023d5a:	000b      	movs	r3, r1
 8023d5c:	b4f0      	push	{r4, r5, r6, r7}
 8023d5e:	085b      	lsrs	r3, r3, #1
 8023d60:	b08f      	sub	sp, #60	@ 0x3c
 8023d62:	910a      	str	r1, [sp, #40]	@ 0x28
 8023d64:	0007      	movs	r7, r0
 8023d66:	9009      	str	r0, [sp, #36]	@ 0x24
 8023d68:	0011      	movs	r1, r2
 8023d6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023d6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8023d6e:	2b00      	cmp	r3, #0
 8023d70:	d100      	bne.n	8023d74 <arm_cfft_radix4by2_q31+0x24>
 8023d72:	e0a0      	b.n	8023eb6 <arm_cfft_radix4by2_q31+0x166>
 8023d74:	0002      	movs	r2, r0
 8023d76:	00db      	lsls	r3, r3, #3
 8023d78:	3204      	adds	r2, #4
 8023d7a:	4691      	mov	r9, r2
 8023d7c:	4698      	mov	r8, r3
 8023d7e:	000a      	movs	r2, r1
 8023d80:	464e      	mov	r6, r9
 8023d82:	4442      	add	r2, r8
 8023d84:	4699      	mov	r9, r3
 8023d86:	4688      	mov	r8, r1
 8023d88:	9208      	str	r2, [sp, #32]
 8023d8a:	900d      	str	r0, [sp, #52]	@ 0x34
 8023d8c:	4643      	mov	r3, r8
 8023d8e:	681b      	ldr	r3, [r3, #0]
 8023d90:	469b      	mov	fp, r3
 8023d92:	4643      	mov	r3, r8
 8023d94:	685b      	ldr	r3, [r3, #4]
 8023d96:	469a      	mov	sl, r3
 8023d98:	683b      	ldr	r3, [r7, #0]
 8023d9a:	109c      	asrs	r4, r3, #2
 8023d9c:	464b      	mov	r3, r9
 8023d9e:	58fb      	ldr	r3, [r7, r3]
 8023da0:	109a      	asrs	r2, r3, #2
 8023da2:	18a3      	adds	r3, r4, r2
 8023da4:	603b      	str	r3, [r7, #0]
 8023da6:	6833      	ldr	r3, [r6, #0]
 8023da8:	1aa4      	subs	r4, r4, r2
 8023daa:	109d      	asrs	r5, r3, #2
 8023dac:	464b      	mov	r3, r9
 8023dae:	58f3      	ldr	r3, [r6, r3]
 8023db0:	17e2      	asrs	r2, r4, #31
 8023db2:	109b      	asrs	r3, r3, #2
 8023db4:	18e9      	adds	r1, r5, r3
 8023db6:	6031      	str	r1, [r6, #0]
 8023db8:	0011      	movs	r1, r2
 8023dba:	465a      	mov	r2, fp
 8023dbc:	17d2      	asrs	r2, r2, #31
 8023dbe:	0010      	movs	r0, r2
 8023dc0:	4652      	mov	r2, sl
 8023dc2:	1aed      	subs	r5, r5, r3
 8023dc4:	17eb      	asrs	r3, r5, #31
 8023dc6:	17d2      	asrs	r2, r2, #31
 8023dc8:	9307      	str	r3, [sp, #28]
 8023dca:	9204      	str	r2, [sp, #16]
 8023dcc:	0003      	movs	r3, r0
 8023dce:	465a      	mov	r2, fp
 8023dd0:	9006      	str	r0, [sp, #24]
 8023dd2:	0020      	movs	r0, r4
 8023dd4:	9105      	str	r1, [sp, #20]
 8023dd6:	f7dc fbf3 	bl	80005c0 <__aeabi_lmul>
 8023dda:	2280      	movs	r2, #128	@ 0x80
 8023ddc:	2300      	movs	r3, #0
 8023dde:	0612      	lsls	r2, r2, #24
 8023de0:	1880      	adds	r0, r0, r2
 8023de2:	4159      	adcs	r1, r3
 8023de4:	2300      	movs	r3, #0
 8023de6:	9101      	str	r1, [sp, #4]
 8023de8:	9300      	str	r3, [sp, #0]
 8023dea:	4652      	mov	r2, sl
 8023dec:	9b04      	ldr	r3, [sp, #16]
 8023dee:	0028      	movs	r0, r5
 8023df0:	17e9      	asrs	r1, r5, #31
 8023df2:	f7dc fbe5 	bl	80005c0 <__aeabi_lmul>
 8023df6:	9a00      	ldr	r2, [sp, #0]
 8023df8:	9b01      	ldr	r3, [sp, #4]
 8023dfa:	1880      	adds	r0, r0, r2
 8023dfc:	4159      	adcs	r1, r3
 8023dfe:	2280      	movs	r2, #128	@ 0x80
 8023e00:	2300      	movs	r3, #0
 8023e02:	0612      	lsls	r2, r2, #24
 8023e04:	1880      	adds	r0, r0, r2
 8023e06:	4159      	adcs	r1, r3
 8023e08:	464a      	mov	r2, r9
 8023e0a:	004b      	lsls	r3, r1, #1
 8023e0c:	50bb      	str	r3, [r7, r2]
 8023e0e:	4658      	mov	r0, fp
 8023e10:	002a      	movs	r2, r5
 8023e12:	9b07      	ldr	r3, [sp, #28]
 8023e14:	9906      	ldr	r1, [sp, #24]
 8023e16:	f7dc fbd3 	bl	80005c0 <__aeabi_lmul>
 8023e1a:	2280      	movs	r2, #128	@ 0x80
 8023e1c:	2300      	movs	r3, #0
 8023e1e:	0612      	lsls	r2, r2, #24
 8023e20:	1880      	adds	r0, r0, r2
 8023e22:	4159      	adcs	r1, r3
 8023e24:	2000      	movs	r0, #0
 8023e26:	9103      	str	r1, [sp, #12]
 8023e28:	9002      	str	r0, [sp, #8]
 8023e2a:	4652      	mov	r2, sl
 8023e2c:	9b04      	ldr	r3, [sp, #16]
 8023e2e:	0020      	movs	r0, r4
 8023e30:	9905      	ldr	r1, [sp, #20]
 8023e32:	f7dc fbc5 	bl	80005c0 <__aeabi_lmul>
 8023e36:	9a02      	ldr	r2, [sp, #8]
 8023e38:	9b03      	ldr	r3, [sp, #12]
 8023e3a:	1a12      	subs	r2, r2, r0
 8023e3c:	418b      	sbcs	r3, r1
 8023e3e:	2080      	movs	r0, #128	@ 0x80
 8023e40:	2100      	movs	r1, #0
 8023e42:	0600      	lsls	r0, r0, #24
 8023e44:	1812      	adds	r2, r2, r0
 8023e46:	414b      	adcs	r3, r1
 8023e48:	464a      	mov	r2, r9
 8023e4a:	005b      	lsls	r3, r3, #1
 8023e4c:	50b3      	str	r3, [r6, r2]
 8023e4e:	2308      	movs	r3, #8
 8023e50:	469c      	mov	ip, r3
 8023e52:	9b08      	ldr	r3, [sp, #32]
 8023e54:	44e0      	add	r8, ip
 8023e56:	3708      	adds	r7, #8
 8023e58:	3608      	adds	r6, #8
 8023e5a:	4598      	cmp	r8, r3
 8023e5c:	d196      	bne.n	8023d8c <arm_cfft_radix4by2_q31+0x3c>
 8023e5e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023e60:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023e62:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023e64:	2302      	movs	r3, #2
 8023e66:	003a      	movs	r2, r7
 8023e68:	0029      	movs	r1, r5
 8023e6a:	0020      	movs	r0, r4
 8023e6c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023e6e:	f000 f957 	bl	8024120 <arm_radix4_butterfly_q31>
 8023e72:	46a4      	mov	ip, r4
 8023e74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023e76:	2302      	movs	r3, #2
 8023e78:	0088      	lsls	r0, r1, #2
 8023e7a:	4460      	add	r0, ip
 8023e7c:	003a      	movs	r2, r7
 8023e7e:	0029      	movs	r1, r5
 8023e80:	f000 f94e 	bl	8024120 <arm_radix4_butterfly_q31>
 8023e84:	46a4      	mov	ip, r4
 8023e86:	0128      	lsls	r0, r5, #4
 8023e88:	4460      	add	r0, ip
 8023e8a:	6833      	ldr	r3, [r6, #0]
 8023e8c:	005b      	lsls	r3, r3, #1
 8023e8e:	6033      	str	r3, [r6, #0]
 8023e90:	6873      	ldr	r3, [r6, #4]
 8023e92:	005b      	lsls	r3, r3, #1
 8023e94:	6073      	str	r3, [r6, #4]
 8023e96:	68b3      	ldr	r3, [r6, #8]
 8023e98:	005b      	lsls	r3, r3, #1
 8023e9a:	60b3      	str	r3, [r6, #8]
 8023e9c:	68f3      	ldr	r3, [r6, #12]
 8023e9e:	005b      	lsls	r3, r3, #1
 8023ea0:	60f3      	str	r3, [r6, #12]
 8023ea2:	3610      	adds	r6, #16
 8023ea4:	42b0      	cmp	r0, r6
 8023ea6:	d1f0      	bne.n	8023e8a <arm_cfft_radix4by2_q31+0x13a>
 8023ea8:	b00f      	add	sp, #60	@ 0x3c
 8023eaa:	bc3c      	pop	{r2, r3, r4, r5}
 8023eac:	4690      	mov	r8, r2
 8023eae:	4699      	mov	r9, r3
 8023eb0:	46a2      	mov	sl, r4
 8023eb2:	46ab      	mov	fp, r5
 8023eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023eb6:	2302      	movs	r3, #2
 8023eb8:	2100      	movs	r1, #0
 8023eba:	0015      	movs	r5, r2
 8023ebc:	f000 f930 	bl	8024120 <arm_radix4_butterfly_q31>
 8023ec0:	46bc      	mov	ip, r7
 8023ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ec4:	002a      	movs	r2, r5
 8023ec6:	0098      	lsls	r0, r3, #2
 8023ec8:	4460      	add	r0, ip
 8023eca:	2302      	movs	r3, #2
 8023ecc:	2100      	movs	r1, #0
 8023ece:	f000 f927 	bl	8024120 <arm_radix4_butterfly_q31>
 8023ed2:	e7e9      	b.n	8023ea8 <arm_cfft_radix4by2_q31+0x158>

08023ed4 <arm_cfft_radix4by2_inverse_q31>:
 8023ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ed6:	465f      	mov	r7, fp
 8023ed8:	4656      	mov	r6, sl
 8023eda:	464d      	mov	r5, r9
 8023edc:	4644      	mov	r4, r8
 8023ede:	000b      	movs	r3, r1
 8023ee0:	b4f0      	push	{r4, r5, r6, r7}
 8023ee2:	085b      	lsrs	r3, r3, #1
 8023ee4:	b08f      	sub	sp, #60	@ 0x3c
 8023ee6:	910a      	str	r1, [sp, #40]	@ 0x28
 8023ee8:	0007      	movs	r7, r0
 8023eea:	9009      	str	r0, [sp, #36]	@ 0x24
 8023eec:	0011      	movs	r1, r2
 8023eee:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023ef0:	930c      	str	r3, [sp, #48]	@ 0x30
 8023ef2:	2b00      	cmp	r3, #0
 8023ef4:	d100      	bne.n	8023ef8 <arm_cfft_radix4by2_inverse_q31+0x24>
 8023ef6:	e0a0      	b.n	802403a <arm_cfft_radix4by2_inverse_q31+0x166>
 8023ef8:	0002      	movs	r2, r0
 8023efa:	00db      	lsls	r3, r3, #3
 8023efc:	3204      	adds	r2, #4
 8023efe:	4691      	mov	r9, r2
 8023f00:	4698      	mov	r8, r3
 8023f02:	000a      	movs	r2, r1
 8023f04:	464e      	mov	r6, r9
 8023f06:	4442      	add	r2, r8
 8023f08:	4699      	mov	r9, r3
 8023f0a:	4688      	mov	r8, r1
 8023f0c:	9208      	str	r2, [sp, #32]
 8023f0e:	900d      	str	r0, [sp, #52]	@ 0x34
 8023f10:	4643      	mov	r3, r8
 8023f12:	681b      	ldr	r3, [r3, #0]
 8023f14:	469b      	mov	fp, r3
 8023f16:	4643      	mov	r3, r8
 8023f18:	685b      	ldr	r3, [r3, #4]
 8023f1a:	469a      	mov	sl, r3
 8023f1c:	683b      	ldr	r3, [r7, #0]
 8023f1e:	109c      	asrs	r4, r3, #2
 8023f20:	464b      	mov	r3, r9
 8023f22:	58fb      	ldr	r3, [r7, r3]
 8023f24:	109a      	asrs	r2, r3, #2
 8023f26:	18a3      	adds	r3, r4, r2
 8023f28:	603b      	str	r3, [r7, #0]
 8023f2a:	6833      	ldr	r3, [r6, #0]
 8023f2c:	1aa4      	subs	r4, r4, r2
 8023f2e:	109d      	asrs	r5, r3, #2
 8023f30:	464b      	mov	r3, r9
 8023f32:	58f3      	ldr	r3, [r6, r3]
 8023f34:	17e2      	asrs	r2, r4, #31
 8023f36:	109b      	asrs	r3, r3, #2
 8023f38:	18e9      	adds	r1, r5, r3
 8023f3a:	6031      	str	r1, [r6, #0]
 8023f3c:	0011      	movs	r1, r2
 8023f3e:	465a      	mov	r2, fp
 8023f40:	17d2      	asrs	r2, r2, #31
 8023f42:	0010      	movs	r0, r2
 8023f44:	4652      	mov	r2, sl
 8023f46:	1aed      	subs	r5, r5, r3
 8023f48:	17eb      	asrs	r3, r5, #31
 8023f4a:	17d2      	asrs	r2, r2, #31
 8023f4c:	9307      	str	r3, [sp, #28]
 8023f4e:	9204      	str	r2, [sp, #16]
 8023f50:	0003      	movs	r3, r0
 8023f52:	465a      	mov	r2, fp
 8023f54:	9006      	str	r0, [sp, #24]
 8023f56:	0020      	movs	r0, r4
 8023f58:	9105      	str	r1, [sp, #20]
 8023f5a:	f7dc fb31 	bl	80005c0 <__aeabi_lmul>
 8023f5e:	2280      	movs	r2, #128	@ 0x80
 8023f60:	2300      	movs	r3, #0
 8023f62:	0612      	lsls	r2, r2, #24
 8023f64:	1880      	adds	r0, r0, r2
 8023f66:	4159      	adcs	r1, r3
 8023f68:	2300      	movs	r3, #0
 8023f6a:	9101      	str	r1, [sp, #4]
 8023f6c:	9300      	str	r3, [sp, #0]
 8023f6e:	4652      	mov	r2, sl
 8023f70:	9b04      	ldr	r3, [sp, #16]
 8023f72:	0028      	movs	r0, r5
 8023f74:	17e9      	asrs	r1, r5, #31
 8023f76:	f7dc fb23 	bl	80005c0 <__aeabi_lmul>
 8023f7a:	9a00      	ldr	r2, [sp, #0]
 8023f7c:	9b01      	ldr	r3, [sp, #4]
 8023f7e:	1a12      	subs	r2, r2, r0
 8023f80:	418b      	sbcs	r3, r1
 8023f82:	2080      	movs	r0, #128	@ 0x80
 8023f84:	2100      	movs	r1, #0
 8023f86:	0600      	lsls	r0, r0, #24
 8023f88:	1812      	adds	r2, r2, r0
 8023f8a:	414b      	adcs	r3, r1
 8023f8c:	464a      	mov	r2, r9
 8023f8e:	005b      	lsls	r3, r3, #1
 8023f90:	50bb      	str	r3, [r7, r2]
 8023f92:	4658      	mov	r0, fp
 8023f94:	002a      	movs	r2, r5
 8023f96:	9b07      	ldr	r3, [sp, #28]
 8023f98:	9906      	ldr	r1, [sp, #24]
 8023f9a:	f7dc fb11 	bl	80005c0 <__aeabi_lmul>
 8023f9e:	2280      	movs	r2, #128	@ 0x80
 8023fa0:	2300      	movs	r3, #0
 8023fa2:	0612      	lsls	r2, r2, #24
 8023fa4:	1880      	adds	r0, r0, r2
 8023fa6:	4159      	adcs	r1, r3
 8023fa8:	2000      	movs	r0, #0
 8023faa:	9103      	str	r1, [sp, #12]
 8023fac:	9002      	str	r0, [sp, #8]
 8023fae:	4652      	mov	r2, sl
 8023fb0:	9b04      	ldr	r3, [sp, #16]
 8023fb2:	0020      	movs	r0, r4
 8023fb4:	9905      	ldr	r1, [sp, #20]
 8023fb6:	f7dc fb03 	bl	80005c0 <__aeabi_lmul>
 8023fba:	9b02      	ldr	r3, [sp, #8]
 8023fbc:	9c03      	ldr	r4, [sp, #12]
 8023fbe:	18c0      	adds	r0, r0, r3
 8023fc0:	4161      	adcs	r1, r4
 8023fc2:	2380      	movs	r3, #128	@ 0x80
 8023fc4:	2400      	movs	r4, #0
 8023fc6:	061b      	lsls	r3, r3, #24
 8023fc8:	18c0      	adds	r0, r0, r3
 8023fca:	4161      	adcs	r1, r4
 8023fcc:	464a      	mov	r2, r9
 8023fce:	004b      	lsls	r3, r1, #1
 8023fd0:	50b3      	str	r3, [r6, r2]
 8023fd2:	2308      	movs	r3, #8
 8023fd4:	469c      	mov	ip, r3
 8023fd6:	9b08      	ldr	r3, [sp, #32]
 8023fd8:	44e0      	add	r8, ip
 8023fda:	3708      	adds	r7, #8
 8023fdc:	3608      	adds	r6, #8
 8023fde:	4598      	cmp	r8, r3
 8023fe0:	d196      	bne.n	8023f10 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023fe2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023fe4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023fe6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023fe8:	2302      	movs	r3, #2
 8023fea:	003a      	movs	r2, r7
 8023fec:	0029      	movs	r1, r5
 8023fee:	0020      	movs	r0, r4
 8023ff0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023ff2:	f000 fb3b 	bl	802466c <arm_radix4_butterfly_inverse_q31>
 8023ff6:	46a4      	mov	ip, r4
 8023ff8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023ffa:	2302      	movs	r3, #2
 8023ffc:	0088      	lsls	r0, r1, #2
 8023ffe:	4460      	add	r0, ip
 8024000:	003a      	movs	r2, r7
 8024002:	0029      	movs	r1, r5
 8024004:	f000 fb32 	bl	802466c <arm_radix4_butterfly_inverse_q31>
 8024008:	46a4      	mov	ip, r4
 802400a:	0128      	lsls	r0, r5, #4
 802400c:	4460      	add	r0, ip
 802400e:	6833      	ldr	r3, [r6, #0]
 8024010:	005b      	lsls	r3, r3, #1
 8024012:	6033      	str	r3, [r6, #0]
 8024014:	6873      	ldr	r3, [r6, #4]
 8024016:	005b      	lsls	r3, r3, #1
 8024018:	6073      	str	r3, [r6, #4]
 802401a:	68b3      	ldr	r3, [r6, #8]
 802401c:	005b      	lsls	r3, r3, #1
 802401e:	60b3      	str	r3, [r6, #8]
 8024020:	68f3      	ldr	r3, [r6, #12]
 8024022:	005b      	lsls	r3, r3, #1
 8024024:	60f3      	str	r3, [r6, #12]
 8024026:	3610      	adds	r6, #16
 8024028:	42b0      	cmp	r0, r6
 802402a:	d1f0      	bne.n	802400e <arm_cfft_radix4by2_inverse_q31+0x13a>
 802402c:	b00f      	add	sp, #60	@ 0x3c
 802402e:	bc3c      	pop	{r2, r3, r4, r5}
 8024030:	4690      	mov	r8, r2
 8024032:	4699      	mov	r9, r3
 8024034:	46a2      	mov	sl, r4
 8024036:	46ab      	mov	fp, r5
 8024038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802403a:	2302      	movs	r3, #2
 802403c:	2100      	movs	r1, #0
 802403e:	0015      	movs	r5, r2
 8024040:	f000 fb14 	bl	802466c <arm_radix4_butterfly_inverse_q31>
 8024044:	46bc      	mov	ip, r7
 8024046:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024048:	002a      	movs	r2, r5
 802404a:	0098      	lsls	r0, r3, #2
 802404c:	4460      	add	r0, ip
 802404e:	2302      	movs	r3, #2
 8024050:	2100      	movs	r1, #0
 8024052:	f000 fb0b 	bl	802466c <arm_radix4_butterfly_inverse_q31>
 8024056:	e7e9      	b.n	802402c <arm_cfft_radix4by2_inverse_q31+0x158>

08024058 <arm_cfft_q31>:
 8024058:	b570      	push	{r4, r5, r6, lr}
 802405a:	001e      	movs	r6, r3
 802405c:	2380      	movs	r3, #128	@ 0x80
 802405e:	000d      	movs	r5, r1
 8024060:	0004      	movs	r4, r0
 8024062:	8801      	ldrh	r1, [r0, #0]
 8024064:	005b      	lsls	r3, r3, #1
 8024066:	2a01      	cmp	r2, #1
 8024068:	d028      	beq.n	80240bc <arm_cfft_q31+0x64>
 802406a:	4299      	cmp	r1, r3
 802406c:	d020      	beq.n	80240b0 <arm_cfft_q31+0x58>
 802406e:	d812      	bhi.n	8024096 <arm_cfft_q31+0x3e>
 8024070:	2920      	cmp	r1, #32
 8024072:	d004      	beq.n	802407e <arm_cfft_q31+0x26>
 8024074:	d949      	bls.n	802410a <arm_cfft_q31+0xb2>
 8024076:	2940      	cmp	r1, #64	@ 0x40
 8024078:	d01a      	beq.n	80240b0 <arm_cfft_q31+0x58>
 802407a:	2980      	cmp	r1, #128	@ 0x80
 802407c:	d103      	bne.n	8024086 <arm_cfft_q31+0x2e>
 802407e:	6862      	ldr	r2, [r4, #4]
 8024080:	0028      	movs	r0, r5
 8024082:	f7ff fe65 	bl	8023d50 <arm_cfft_radix4by2_q31>
 8024086:	2e00      	cmp	r6, #0
 8024088:	d004      	beq.n	8024094 <arm_cfft_q31+0x3c>
 802408a:	68a2      	ldr	r2, [r4, #8]
 802408c:	89a1      	ldrh	r1, [r4, #12]
 802408e:	0028      	movs	r0, r5
 8024090:	f7dc f83a 	bl	8000108 <arm_bitreversal_32>
 8024094:	bd70      	pop	{r4, r5, r6, pc}
 8024096:	2380      	movs	r3, #128	@ 0x80
 8024098:	00db      	lsls	r3, r3, #3
 802409a:	4299      	cmp	r1, r3
 802409c:	d008      	beq.n	80240b0 <arm_cfft_q31+0x58>
 802409e:	d92f      	bls.n	8024100 <arm_cfft_q31+0xa8>
 80240a0:	2380      	movs	r3, #128	@ 0x80
 80240a2:	011b      	lsls	r3, r3, #4
 80240a4:	4299      	cmp	r1, r3
 80240a6:	d0ea      	beq.n	802407e <arm_cfft_q31+0x26>
 80240a8:	2380      	movs	r3, #128	@ 0x80
 80240aa:	015b      	lsls	r3, r3, #5
 80240ac:	4299      	cmp	r1, r3
 80240ae:	d1ea      	bne.n	8024086 <arm_cfft_q31+0x2e>
 80240b0:	2301      	movs	r3, #1
 80240b2:	6862      	ldr	r2, [r4, #4]
 80240b4:	0028      	movs	r0, r5
 80240b6:	f000 f833 	bl	8024120 <arm_radix4_butterfly_q31>
 80240ba:	e7e4      	b.n	8024086 <arm_cfft_q31+0x2e>
 80240bc:	4299      	cmp	r1, r3
 80240be:	d019      	beq.n	80240f4 <arm_cfft_q31+0x9c>
 80240c0:	d80b      	bhi.n	80240da <arm_cfft_q31+0x82>
 80240c2:	2920      	cmp	r1, #32
 80240c4:	d004      	beq.n	80240d0 <arm_cfft_q31+0x78>
 80240c6:	d928      	bls.n	802411a <arm_cfft_q31+0xc2>
 80240c8:	2940      	cmp	r1, #64	@ 0x40
 80240ca:	d013      	beq.n	80240f4 <arm_cfft_q31+0x9c>
 80240cc:	2980      	cmp	r1, #128	@ 0x80
 80240ce:	d1da      	bne.n	8024086 <arm_cfft_q31+0x2e>
 80240d0:	6862      	ldr	r2, [r4, #4]
 80240d2:	0028      	movs	r0, r5
 80240d4:	f7ff fefe 	bl	8023ed4 <arm_cfft_radix4by2_inverse_q31>
 80240d8:	e7d5      	b.n	8024086 <arm_cfft_q31+0x2e>
 80240da:	2380      	movs	r3, #128	@ 0x80
 80240dc:	00db      	lsls	r3, r3, #3
 80240de:	4299      	cmp	r1, r3
 80240e0:	d008      	beq.n	80240f4 <arm_cfft_q31+0x9c>
 80240e2:	d915      	bls.n	8024110 <arm_cfft_q31+0xb8>
 80240e4:	2380      	movs	r3, #128	@ 0x80
 80240e6:	011b      	lsls	r3, r3, #4
 80240e8:	4299      	cmp	r1, r3
 80240ea:	d0f1      	beq.n	80240d0 <arm_cfft_q31+0x78>
 80240ec:	2380      	movs	r3, #128	@ 0x80
 80240ee:	015b      	lsls	r3, r3, #5
 80240f0:	4299      	cmp	r1, r3
 80240f2:	d1c8      	bne.n	8024086 <arm_cfft_q31+0x2e>
 80240f4:	2301      	movs	r3, #1
 80240f6:	6862      	ldr	r2, [r4, #4]
 80240f8:	0028      	movs	r0, r5
 80240fa:	f000 fab7 	bl	802466c <arm_radix4_butterfly_inverse_q31>
 80240fe:	e7c2      	b.n	8024086 <arm_cfft_q31+0x2e>
 8024100:	2380      	movs	r3, #128	@ 0x80
 8024102:	009b      	lsls	r3, r3, #2
 8024104:	4299      	cmp	r1, r3
 8024106:	d0ba      	beq.n	802407e <arm_cfft_q31+0x26>
 8024108:	e7bd      	b.n	8024086 <arm_cfft_q31+0x2e>
 802410a:	2910      	cmp	r1, #16
 802410c:	d1bb      	bne.n	8024086 <arm_cfft_q31+0x2e>
 802410e:	e7cf      	b.n	80240b0 <arm_cfft_q31+0x58>
 8024110:	2380      	movs	r3, #128	@ 0x80
 8024112:	009b      	lsls	r3, r3, #2
 8024114:	4299      	cmp	r1, r3
 8024116:	d0db      	beq.n	80240d0 <arm_cfft_q31+0x78>
 8024118:	e7b5      	b.n	8024086 <arm_cfft_q31+0x2e>
 802411a:	2910      	cmp	r1, #16
 802411c:	d1b3      	bne.n	8024086 <arm_cfft_q31+0x2e>
 802411e:	e7e9      	b.n	80240f4 <arm_cfft_q31+0x9c>

08024120 <arm_radix4_butterfly_q31>:
 8024120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024122:	464d      	mov	r5, r9
 8024124:	4644      	mov	r4, r8
 8024126:	465f      	mov	r7, fp
 8024128:	4656      	mov	r6, sl
 802412a:	469c      	mov	ip, r3
 802412c:	b4f0      	push	{r4, r5, r6, r7}
 802412e:	b0a7      	sub	sp, #156	@ 0x9c
 8024130:	9114      	str	r1, [sp, #80]	@ 0x50
 8024132:	0889      	lsrs	r1, r1, #2
 8024134:	9310      	str	r3, [sp, #64]	@ 0x40
 8024136:	00cb      	lsls	r3, r1, #3
 8024138:	0015      	movs	r5, r2
 802413a:	9223      	str	r2, [sp, #140]	@ 0x8c
 802413c:	18c2      	adds	r2, r0, r3
 802413e:	000c      	movs	r4, r1
 8024140:	469a      	mov	sl, r3
 8024142:	9124      	str	r1, [sp, #144]	@ 0x90
 8024144:	18d1      	adds	r1, r2, r3
 8024146:	4663      	mov	r3, ip
 8024148:	468b      	mov	fp, r1
 802414a:	0119      	lsls	r1, r3, #4
 802414c:	910d      	str	r1, [sp, #52]	@ 0x34
 802414e:	00d9      	lsls	r1, r3, #3
 8024150:	005b      	lsls	r3, r3, #1
 8024152:	4463      	add	r3, ip
 8024154:	910e      	str	r1, [sp, #56]	@ 0x38
 8024156:	00d9      	lsls	r1, r3, #3
 8024158:	465b      	mov	r3, fp
 802415a:	44da      	add	sl, fp
 802415c:	4690      	mov	r8, r2
 802415e:	4683      	mov	fp, r0
 8024160:	4699      	mov	r9, r3
 8024162:	9022      	str	r0, [sp, #136]	@ 0x88
 8024164:	9025      	str	r0, [sp, #148]	@ 0x94
 8024166:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024168:	9502      	str	r5, [sp, #8]
 802416a:	9500      	str	r5, [sp, #0]
 802416c:	9501      	str	r5, [sp, #4]
 802416e:	9407      	str	r4, [sp, #28]
 8024170:	465b      	mov	r3, fp
 8024172:	681b      	ldr	r3, [r3, #0]
 8024174:	4642      	mov	r2, r8
 8024176:	111c      	asrs	r4, r3, #4
 8024178:	464b      	mov	r3, r9
 802417a:	4658      	mov	r0, fp
 802417c:	681b      	ldr	r3, [r3, #0]
 802417e:	6812      	ldr	r2, [r2, #0]
 8024180:	111b      	asrs	r3, r3, #4
 8024182:	18e7      	adds	r7, r4, r3
 8024184:	1ae3      	subs	r3, r4, r3
 8024186:	1114      	asrs	r4, r2, #4
 8024188:	4652      	mov	r2, sl
 802418a:	6840      	ldr	r0, [r0, #4]
 802418c:	6812      	ldr	r2, [r2, #0]
 802418e:	1105      	asrs	r5, r0, #4
 8024190:	4648      	mov	r0, r9
 8024192:	9303      	str	r3, [sp, #12]
 8024194:	1113      	asrs	r3, r2, #4
 8024196:	18e2      	adds	r2, r4, r3
 8024198:	465c      	mov	r4, fp
 802419a:	6840      	ldr	r0, [r0, #4]
 802419c:	1103      	asrs	r3, r0, #4
 802419e:	18ee      	adds	r6, r5, r3
 80241a0:	1ae8      	subs	r0, r5, r3
 80241a2:	18bb      	adds	r3, r7, r2
 80241a4:	6023      	str	r3, [r4, #0]
 80241a6:	4644      	mov	r4, r8
 80241a8:	6864      	ldr	r4, [r4, #4]
 80241aa:	9004      	str	r0, [sp, #16]
 80241ac:	1125      	asrs	r5, r4, #4
 80241ae:	4654      	mov	r4, sl
 80241b0:	6864      	ldr	r4, [r4, #4]
 80241b2:	1123      	asrs	r3, r4, #4
 80241b4:	465c      	mov	r4, fp
 80241b6:	18eb      	adds	r3, r5, r3
 80241b8:	18f1      	adds	r1, r6, r3
 80241ba:	6061      	str	r1, [r4, #4]
 80241bc:	4655      	mov	r5, sl
 80241be:	4644      	mov	r4, r8
 80241c0:	686d      	ldr	r5, [r5, #4]
 80241c2:	6864      	ldr	r4, [r4, #4]
 80241c4:	1129      	asrs	r1, r5, #4
 80241c6:	1124      	asrs	r4, r4, #4
 80241c8:	1a64      	subs	r4, r4, r1
 80241ca:	4641      	mov	r1, r8
 80241cc:	6809      	ldr	r1, [r1, #0]
 80241ce:	9405      	str	r4, [sp, #20]
 80241d0:	1108      	asrs	r0, r1, #4
 80241d2:	4651      	mov	r1, sl
 80241d4:	6809      	ldr	r1, [r1, #0]
 80241d6:	1abc      	subs	r4, r7, r2
 80241d8:	1109      	asrs	r1, r1, #4
 80241da:	1a41      	subs	r1, r0, r1
 80241dc:	17e2      	asrs	r2, r4, #31
 80241de:	9106      	str	r1, [sp, #24]
 80241e0:	0011      	movs	r1, r2
 80241e2:	9a01      	ldr	r2, [sp, #4]
 80241e4:	9108      	str	r1, [sp, #32]
 80241e6:	6817      	ldr	r7, [r2, #0]
 80241e8:	17fd      	asrs	r5, r7, #31
 80241ea:	0028      	movs	r0, r5
 80241ec:	1af5      	subs	r5, r6, r3
 80241ee:	17ee      	asrs	r6, r5, #31
 80241f0:	960a      	str	r6, [sp, #40]	@ 0x28
 80241f2:	6856      	ldr	r6, [r2, #4]
 80241f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80241f6:	17f3      	asrs	r3, r6, #31
 80241f8:	003a      	movs	r2, r7
 80241fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80241fc:	0003      	movs	r3, r0
 80241fe:	0020      	movs	r0, r4
 8024200:	f7dc f9de 	bl	80005c0 <__aeabi_lmul>
 8024204:	0032      	movs	r2, r6
 8024206:	17f3      	asrs	r3, r6, #31
 8024208:	910c      	str	r1, [sp, #48]	@ 0x30
 802420a:	0028      	movs	r0, r5
 802420c:	17e9      	asrs	r1, r5, #31
 802420e:	f7dc f9d7 	bl	80005c0 <__aeabi_lmul>
 8024212:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024214:	002a      	movs	r2, r5
 8024216:	4684      	mov	ip, r0
 8024218:	4640      	mov	r0, r8
 802421a:	4461      	add	r1, ip
 802421c:	0049      	lsls	r1, r1, #1
 802421e:	6001      	str	r1, [r0, #0]
 8024220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024222:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024224:	0038      	movs	r0, r7
 8024226:	f7dc f9cb 	bl	80005c0 <__aeabi_lmul>
 802422a:	0032      	movs	r2, r6
 802422c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802422e:	000d      	movs	r5, r1
 8024230:	0020      	movs	r0, r4
 8024232:	9908      	ldr	r1, [sp, #32]
 8024234:	f7dc f9c4 	bl	80005c0 <__aeabi_lmul>
 8024238:	4646      	mov	r6, r8
 802423a:	1a6d      	subs	r5, r5, r1
 802423c:	006d      	lsls	r5, r5, #1
 802423e:	6075      	str	r5, [r6, #4]
 8024240:	9903      	ldr	r1, [sp, #12]
 8024242:	9d05      	ldr	r5, [sp, #20]
 8024244:	000c      	movs	r4, r1
 8024246:	46ac      	mov	ip, r5
 8024248:	4464      	add	r4, ip
 802424a:	17e6      	asrs	r6, r4, #31
 802424c:	0031      	movs	r1, r6
 802424e:	9b00      	ldr	r3, [sp, #0]
 8024250:	9804      	ldr	r0, [sp, #16]
 8024252:	681e      	ldr	r6, [r3, #0]
 8024254:	17f7      	asrs	r7, r6, #31
 8024256:	9709      	str	r7, [sp, #36]	@ 0x24
 8024258:	9f06      	ldr	r7, [sp, #24]
 802425a:	0032      	movs	r2, r6
 802425c:	1bc7      	subs	r7, r0, r7
 802425e:	17fd      	asrs	r5, r7, #31
 8024260:	950a      	str	r5, [sp, #40]	@ 0x28
 8024262:	685d      	ldr	r5, [r3, #4]
 8024264:	17f3      	asrs	r3, r6, #31
 8024266:	17e8      	asrs	r0, r5, #31
 8024268:	900b      	str	r0, [sp, #44]	@ 0x2c
 802426a:	0020      	movs	r0, r4
 802426c:	9108      	str	r1, [sp, #32]
 802426e:	f7dc f9a7 	bl	80005c0 <__aeabi_lmul>
 8024272:	002a      	movs	r2, r5
 8024274:	17eb      	asrs	r3, r5, #31
 8024276:	910c      	str	r1, [sp, #48]	@ 0x30
 8024278:	0038      	movs	r0, r7
 802427a:	17f9      	asrs	r1, r7, #31
 802427c:	f7dc f9a0 	bl	80005c0 <__aeabi_lmul>
 8024280:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024282:	003a      	movs	r2, r7
 8024284:	4684      	mov	ip, r0
 8024286:	4648      	mov	r0, r9
 8024288:	4461      	add	r1, ip
 802428a:	0049      	lsls	r1, r1, #1
 802428c:	6001      	str	r1, [r0, #0]
 802428e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024290:	0030      	movs	r0, r6
 8024292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024294:	f7dc f994 	bl	80005c0 <__aeabi_lmul>
 8024298:	002a      	movs	r2, r5
 802429a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802429c:	000e      	movs	r6, r1
 802429e:	0020      	movs	r0, r4
 80242a0:	9908      	ldr	r1, [sp, #32]
 80242a2:	f7dc f98d 	bl	80005c0 <__aeabi_lmul>
 80242a6:	464c      	mov	r4, r9
 80242a8:	9d05      	ldr	r5, [sp, #20]
 80242aa:	1a76      	subs	r6, r6, r1
 80242ac:	9903      	ldr	r1, [sp, #12]
 80242ae:	0076      	lsls	r6, r6, #1
 80242b0:	6066      	str	r6, [r4, #4]
 80242b2:	1b4c      	subs	r4, r1, r5
 80242b4:	9e06      	ldr	r6, [sp, #24]
 80242b6:	17e1      	asrs	r1, r4, #31
 80242b8:	9103      	str	r1, [sp, #12]
 80242ba:	9902      	ldr	r1, [sp, #8]
 80242bc:	46b4      	mov	ip, r6
 80242be:	680f      	ldr	r7, [r1, #0]
 80242c0:	9804      	ldr	r0, [sp, #16]
 80242c2:	17fd      	asrs	r5, r7, #31
 80242c4:	002b      	movs	r3, r5
 80242c6:	684e      	ldr	r6, [r1, #4]
 80242c8:	4460      	add	r0, ip
 80242ca:	0005      	movs	r5, r0
 80242cc:	17c0      	asrs	r0, r0, #31
 80242ce:	9005      	str	r0, [sp, #20]
 80242d0:	17f0      	asrs	r0, r6, #31
 80242d2:	9006      	str	r0, [sp, #24]
 80242d4:	003a      	movs	r2, r7
 80242d6:	0020      	movs	r0, r4
 80242d8:	17e1      	asrs	r1, r4, #31
 80242da:	9304      	str	r3, [sp, #16]
 80242dc:	f7dc f970 	bl	80005c0 <__aeabi_lmul>
 80242e0:	0032      	movs	r2, r6
 80242e2:	9108      	str	r1, [sp, #32]
 80242e4:	17f3      	asrs	r3, r6, #31
 80242e6:	0028      	movs	r0, r5
 80242e8:	17e9      	asrs	r1, r5, #31
 80242ea:	f7dc f969 	bl	80005c0 <__aeabi_lmul>
 80242ee:	9808      	ldr	r0, [sp, #32]
 80242f0:	002a      	movs	r2, r5
 80242f2:	4684      	mov	ip, r0
 80242f4:	4650      	mov	r0, sl
 80242f6:	4461      	add	r1, ip
 80242f8:	0049      	lsls	r1, r1, #1
 80242fa:	6001      	str	r1, [r0, #0]
 80242fc:	9b05      	ldr	r3, [sp, #20]
 80242fe:	9904      	ldr	r1, [sp, #16]
 8024300:	0038      	movs	r0, r7
 8024302:	f7dc f95d 	bl	80005c0 <__aeabi_lmul>
 8024306:	0020      	movs	r0, r4
 8024308:	2408      	movs	r4, #8
 802430a:	000d      	movs	r5, r1
 802430c:	0032      	movs	r2, r6
 802430e:	9b06      	ldr	r3, [sp, #24]
 8024310:	9903      	ldr	r1, [sp, #12]
 8024312:	f7dc f955 	bl	80005c0 <__aeabi_lmul>
 8024316:	46a4      	mov	ip, r4
 8024318:	4650      	mov	r0, sl
 802431a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802431c:	44e3      	add	fp, ip
 802431e:	44e0      	add	r8, ip
 8024320:	44e1      	add	r9, ip
 8024322:	44e2      	add	sl, ip
 8024324:	46a4      	mov	ip, r4
 8024326:	1a6d      	subs	r5, r5, r1
 8024328:	006d      	lsls	r5, r5, #1
 802432a:	9a01      	ldr	r2, [sp, #4]
 802432c:	6045      	str	r5, [r0, #4]
 802432e:	9807      	ldr	r0, [sp, #28]
 8024330:	4462      	add	r2, ip
 8024332:	3801      	subs	r0, #1
 8024334:	9201      	str	r2, [sp, #4]
 8024336:	9007      	str	r0, [sp, #28]
 8024338:	9b00      	ldr	r3, [sp, #0]
 802433a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802433c:	9902      	ldr	r1, [sp, #8]
 802433e:	4694      	mov	ip, r2
 8024340:	4463      	add	r3, ip
 8024342:	9300      	str	r3, [sp, #0]
 8024344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024346:	469c      	mov	ip, r3
 8024348:	4461      	add	r1, ip
 802434a:	9102      	str	r1, [sp, #8]
 802434c:	2800      	cmp	r0, #0
 802434e:	d000      	beq.n	8024352 <arm_radix4_butterfly_q31+0x232>
 8024350:	e70e      	b.n	8024170 <arm_radix4_butterfly_q31+0x50>
 8024352:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024354:	009b      	lsls	r3, r3, #2
 8024356:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024358:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802435a:	9320      	str	r3, [sp, #128]	@ 0x80
 802435c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802435e:	2b04      	cmp	r3, #4
 8024360:	d800      	bhi.n	8024364 <arm_radix4_butterfly_q31+0x244>
 8024362:	e180      	b.n	8024666 <arm_radix4_butterfly_q31+0x546>
 8024364:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024366:	0893      	lsrs	r3, r2, #2
 8024368:	1e59      	subs	r1, r3, #1
 802436a:	9321      	str	r3, [sp, #132]	@ 0x84
 802436c:	00db      	lsls	r3, r3, #3
 802436e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024370:	00d3      	lsls	r3, r2, #3
 8024372:	9300      	str	r3, [sp, #0]
 8024374:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024376:	911a      	str	r1, [sp, #104]	@ 0x68
 8024378:	00da      	lsls	r2, r3, #3
 802437a:	921e      	str	r2, [sp, #120]	@ 0x78
 802437c:	011a      	lsls	r2, r3, #4
 802437e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024380:	001a      	movs	r2, r3
 8024382:	4694      	mov	ip, r2
 8024384:	005b      	lsls	r3, r3, #1
 8024386:	4463      	add	r3, ip
 8024388:	00db      	lsls	r3, r3, #3
 802438a:	931c      	str	r3, [sp, #112]	@ 0x70
 802438c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802438e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024390:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024392:	9318      	str	r3, [sp, #96]	@ 0x60
 8024394:	9319      	str	r3, [sp, #100]	@ 0x64
 8024396:	9316      	str	r3, [sp, #88]	@ 0x58
 8024398:	2300      	movs	r3, #0
 802439a:	9315      	str	r3, [sp, #84]	@ 0x54
 802439c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802439e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80243a0:	681a      	ldr	r2, [r3, #0]
 80243a2:	685b      	ldr	r3, [r3, #4]
 80243a4:	9205      	str	r2, [sp, #20]
 80243a6:	9306      	str	r3, [sp, #24]
 80243a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80243aa:	468c      	mov	ip, r1
 80243ac:	681a      	ldr	r2, [r3, #0]
 80243ae:	685b      	ldr	r3, [r3, #4]
 80243b0:	9207      	str	r2, [sp, #28]
 80243b2:	9308      	str	r3, [sp, #32]
 80243b4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80243b6:	681a      	ldr	r2, [r3, #0]
 80243b8:	685b      	ldr	r3, [r3, #4]
 80243ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80243bc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80243be:	930a      	str	r3, [sp, #40]	@ 0x28
 80243c0:	0013      	movs	r3, r2
 80243c2:	4463      	add	r3, ip
 80243c4:	4698      	mov	r8, r3
 80243c6:	0013      	movs	r3, r2
 80243c8:	4442      	add	r2, r8
 80243ca:	4691      	mov	r9, r2
 80243cc:	001a      	movs	r2, r3
 80243ce:	444a      	add	r2, r9
 80243d0:	4692      	mov	sl, r2
 80243d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80243d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80243d6:	4293      	cmp	r3, r2
 80243d8:	d800      	bhi.n	80243dc <arm_radix4_butterfly_q31+0x2bc>
 80243da:	e0dd      	b.n	8024598 <arm_radix4_butterfly_q31+0x478>
 80243dc:	4694      	mov	ip, r2
 80243de:	468b      	mov	fp, r1
 80243e0:	4644      	mov	r4, r8
 80243e2:	4655      	mov	r5, sl
 80243e4:	9b07      	ldr	r3, [sp, #28]
 80243e6:	17db      	asrs	r3, r3, #31
 80243e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80243ea:	9b08      	ldr	r3, [sp, #32]
 80243ec:	17db      	asrs	r3, r3, #31
 80243ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80243f0:	9b05      	ldr	r3, [sp, #20]
 80243f2:	17db      	asrs	r3, r3, #31
 80243f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80243f6:	9b06      	ldr	r3, [sp, #24]
 80243f8:	17db      	asrs	r3, r3, #31
 80243fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80243fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243fe:	17db      	asrs	r3, r3, #31
 8024400:	9310      	str	r3, [sp, #64]	@ 0x40
 8024402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024404:	17db      	asrs	r3, r3, #31
 8024406:	9311      	str	r3, [sp, #68]	@ 0x44
 8024408:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802440a:	4463      	add	r3, ip
 802440c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802440e:	465b      	mov	r3, fp
 8024410:	4659      	mov	r1, fp
 8024412:	681a      	ldr	r2, [r3, #0]
 8024414:	464b      	mov	r3, r9
 8024416:	684f      	ldr	r7, [r1, #4]
 8024418:	4649      	mov	r1, r9
 802441a:	681b      	ldr	r3, [r3, #0]
 802441c:	18d6      	adds	r6, r2, r3
 802441e:	1ad3      	subs	r3, r2, r3
 8024420:	9301      	str	r3, [sp, #4]
 8024422:	684b      	ldr	r3, [r1, #4]
 8024424:	18f8      	adds	r0, r7, r3
 8024426:	1af9      	subs	r1, r7, r3
 8024428:	6827      	ldr	r7, [r4, #0]
 802442a:	9102      	str	r1, [sp, #8]
 802442c:	003a      	movs	r2, r7
 802442e:	682f      	ldr	r7, [r5, #0]
 8024430:	46bc      	mov	ip, r7
 8024432:	465f      	mov	r7, fp
 8024434:	4462      	add	r2, ip
 8024436:	18b3      	adds	r3, r6, r2
 8024438:	109b      	asrs	r3, r3, #2
 802443a:	603b      	str	r3, [r7, #0]
 802443c:	6867      	ldr	r7, [r4, #4]
 802443e:	1ab6      	subs	r6, r6, r2
 8024440:	46b8      	mov	r8, r7
 8024442:	686f      	ldr	r7, [r5, #4]
 8024444:	17f2      	asrs	r2, r6, #31
 8024446:	46bc      	mov	ip, r7
 8024448:	44e0      	add	r8, ip
 802444a:	4643      	mov	r3, r8
 802444c:	465f      	mov	r7, fp
 802444e:	18c1      	adds	r1, r0, r3
 8024450:	1089      	asrs	r1, r1, #2
 8024452:	6079      	str	r1, [r7, #4]
 8024454:	9900      	ldr	r1, [sp, #0]
 8024456:	4690      	mov	r8, r2
 8024458:	468c      	mov	ip, r1
 802445a:	6867      	ldr	r7, [r4, #4]
 802445c:	6869      	ldr	r1, [r5, #4]
 802445e:	44e3      	add	fp, ip
 8024460:	1a7f      	subs	r7, r7, r1
 8024462:	9703      	str	r7, [sp, #12]
 8024464:	6829      	ldr	r1, [r5, #0]
 8024466:	6827      	ldr	r7, [r4, #0]
 8024468:	1a7f      	subs	r7, r7, r1
 802446a:	9704      	str	r7, [sp, #16]
 802446c:	1ac7      	subs	r7, r0, r3
 802446e:	17fa      	asrs	r2, r7, #31
 8024470:	4692      	mov	sl, r2
 8024472:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024474:	9a07      	ldr	r2, [sp, #28]
 8024476:	0030      	movs	r0, r6
 8024478:	4641      	mov	r1, r8
 802447a:	f7dc f8a1 	bl	80005c0 <__aeabi_lmul>
 802447e:	9a08      	ldr	r2, [sp, #32]
 8024480:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024482:	9112      	str	r1, [sp, #72]	@ 0x48
 8024484:	0038      	movs	r0, r7
 8024486:	4651      	mov	r1, sl
 8024488:	f7dc f89a 	bl	80005c0 <__aeabi_lmul>
 802448c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802448e:	9a07      	ldr	r2, [sp, #28]
 8024490:	4684      	mov	ip, r0
 8024492:	4461      	add	r1, ip
 8024494:	1049      	asrs	r1, r1, #1
 8024496:	6021      	str	r1, [r4, #0]
 8024498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802449a:	0038      	movs	r0, r7
 802449c:	4651      	mov	r1, sl
 802449e:	f7dc f88f 	bl	80005c0 <__aeabi_lmul>
 80244a2:	9a08      	ldr	r2, [sp, #32]
 80244a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80244a6:	000f      	movs	r7, r1
 80244a8:	0030      	movs	r0, r6
 80244aa:	4641      	mov	r1, r8
 80244ac:	f7dc f888 	bl	80005c0 <__aeabi_lmul>
 80244b0:	9b00      	ldr	r3, [sp, #0]
 80244b2:	9a01      	ldr	r2, [sp, #4]
 80244b4:	469c      	mov	ip, r3
 80244b6:	9803      	ldr	r0, [sp, #12]
 80244b8:	1a7f      	subs	r7, r7, r1
 80244ba:	107f      	asrs	r7, r7, #1
 80244bc:	6067      	str	r7, [r4, #4]
 80244be:	0016      	movs	r6, r2
 80244c0:	4464      	add	r4, ip
 80244c2:	4684      	mov	ip, r0
 80244c4:	4466      	add	r6, ip
 80244c6:	17f2      	asrs	r2, r6, #31
 80244c8:	4690      	mov	r8, r2
 80244ca:	9902      	ldr	r1, [sp, #8]
 80244cc:	9f04      	ldr	r7, [sp, #16]
 80244ce:	0030      	movs	r0, r6
 80244d0:	1bcf      	subs	r7, r1, r7
 80244d2:	17fa      	asrs	r2, r7, #31
 80244d4:	4692      	mov	sl, r2
 80244d6:	4641      	mov	r1, r8
 80244d8:	9a05      	ldr	r2, [sp, #20]
 80244da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80244dc:	f7dc f870 	bl	80005c0 <__aeabi_lmul>
 80244e0:	9a06      	ldr	r2, [sp, #24]
 80244e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80244e4:	9112      	str	r1, [sp, #72]	@ 0x48
 80244e6:	0038      	movs	r0, r7
 80244e8:	4651      	mov	r1, sl
 80244ea:	f7dc f869 	bl	80005c0 <__aeabi_lmul>
 80244ee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80244f0:	9a05      	ldr	r2, [sp, #20]
 80244f2:	4684      	mov	ip, r0
 80244f4:	4648      	mov	r0, r9
 80244f6:	4461      	add	r1, ip
 80244f8:	1049      	asrs	r1, r1, #1
 80244fa:	6001      	str	r1, [r0, #0]
 80244fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80244fe:	0038      	movs	r0, r7
 8024500:	4651      	mov	r1, sl
 8024502:	f7dc f85d 	bl	80005c0 <__aeabi_lmul>
 8024506:	9a06      	ldr	r2, [sp, #24]
 8024508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802450a:	000f      	movs	r7, r1
 802450c:	0030      	movs	r0, r6
 802450e:	4641      	mov	r1, r8
 8024510:	f7dc f856 	bl	80005c0 <__aeabi_lmul>
 8024514:	464e      	mov	r6, r9
 8024516:	9a00      	ldr	r2, [sp, #0]
 8024518:	9b01      	ldr	r3, [sp, #4]
 802451a:	4694      	mov	ip, r2
 802451c:	9803      	ldr	r0, [sp, #12]
 802451e:	1a7f      	subs	r7, r7, r1
 8024520:	107f      	asrs	r7, r7, #1
 8024522:	6077      	str	r7, [r6, #4]
 8024524:	1a1e      	subs	r6, r3, r0
 8024526:	9b04      	ldr	r3, [sp, #16]
 8024528:	44e1      	add	r9, ip
 802452a:	469c      	mov	ip, r3
 802452c:	17f0      	asrs	r0, r6, #31
 802452e:	4680      	mov	r8, r0
 8024530:	9902      	ldr	r1, [sp, #8]
 8024532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024534:	4461      	add	r1, ip
 8024536:	17cb      	asrs	r3, r1, #31
 8024538:	000f      	movs	r7, r1
 802453a:	469a      	mov	sl, r3
 802453c:	0030      	movs	r0, r6
 802453e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024540:	4641      	mov	r1, r8
 8024542:	f7dc f83d 	bl	80005c0 <__aeabi_lmul>
 8024546:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024548:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802454a:	9101      	str	r1, [sp, #4]
 802454c:	0038      	movs	r0, r7
 802454e:	4651      	mov	r1, sl
 8024550:	f7dc f836 	bl	80005c0 <__aeabi_lmul>
 8024554:	9801      	ldr	r0, [sp, #4]
 8024556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024558:	4684      	mov	ip, r0
 802455a:	4461      	add	r1, ip
 802455c:	1049      	asrs	r1, r1, #1
 802455e:	6029      	str	r1, [r5, #0]
 8024560:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024562:	0038      	movs	r0, r7
 8024564:	4651      	mov	r1, sl
 8024566:	f7dc f82b 	bl	80005c0 <__aeabi_lmul>
 802456a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802456c:	000f      	movs	r7, r1
 802456e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024570:	0030      	movs	r0, r6
 8024572:	4641      	mov	r1, r8
 8024574:	f7dc f824 	bl	80005c0 <__aeabi_lmul>
 8024578:	1a7f      	subs	r7, r7, r1
 802457a:	107f      	asrs	r7, r7, #1
 802457c:	606f      	str	r7, [r5, #4]
 802457e:	9a00      	ldr	r2, [sp, #0]
 8024580:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024582:	4694      	mov	ip, r2
 8024584:	4465      	add	r5, ip
 8024586:	468c      	mov	ip, r1
 8024588:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802458a:	0013      	movs	r3, r2
 802458c:	4462      	add	r2, ip
 802458e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024590:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024592:	429a      	cmp	r2, r3
 8024594:	d900      	bls.n	8024598 <arm_radix4_butterfly_q31+0x478>
 8024596:	e73a      	b.n	802440e <arm_radix4_butterfly_q31+0x2ee>
 8024598:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802459a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802459c:	468c      	mov	ip, r1
 802459e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80245a0:	4462      	add	r2, ip
 80245a2:	468c      	mov	ip, r1
 80245a4:	9216      	str	r2, [sp, #88]	@ 0x58
 80245a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80245a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80245aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80245ac:	4462      	add	r2, ip
 80245ae:	468c      	mov	ip, r1
 80245b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80245b2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80245b4:	3301      	adds	r3, #1
 80245b6:	4462      	add	r2, ip
 80245b8:	9218      	str	r2, [sp, #96]	@ 0x60
 80245ba:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80245bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80245be:	3208      	adds	r2, #8
 80245c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80245c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80245c4:	4293      	cmp	r3, r2
 80245c6:	d800      	bhi.n	80245ca <arm_radix4_butterfly_q31+0x4aa>
 80245c8:	e6e8      	b.n	802439c <arm_radix4_butterfly_q31+0x27c>
 80245ca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80245cc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80245ce:	009b      	lsls	r3, r3, #2
 80245d0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80245d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80245d4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80245d6:	089b      	lsrs	r3, r3, #2
 80245d8:	9320      	str	r3, [sp, #128]	@ 0x80
 80245da:	2b04      	cmp	r3, #4
 80245dc:	d900      	bls.n	80245e0 <arm_radix4_butterfly_q31+0x4c0>
 80245de:	e6c1      	b.n	8024364 <arm_radix4_butterfly_q31+0x244>
 80245e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80245e2:	469a      	mov	sl, r3
 80245e4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80245e6:	691c      	ldr	r4, [r3, #16]
 80245e8:	685a      	ldr	r2, [r3, #4]
 80245ea:	46a1      	mov	r9, r4
 80245ec:	4690      	mov	r8, r2
 80245ee:	6819      	ldr	r1, [r3, #0]
 80245f0:	689a      	ldr	r2, [r3, #8]
 80245f2:	699f      	ldr	r7, [r3, #24]
 80245f4:	188d      	adds	r5, r1, r2
 80245f6:	444d      	add	r5, r9
 80245f8:	19ed      	adds	r5, r5, r7
 80245fa:	69de      	ldr	r6, [r3, #28]
 80245fc:	601d      	str	r5, [r3, #0]
 80245fe:	4645      	mov	r5, r8
 8024600:	46b4      	mov	ip, r6
 8024602:	68d8      	ldr	r0, [r3, #12]
 8024604:	695c      	ldr	r4, [r3, #20]
 8024606:	182d      	adds	r5, r5, r0
 8024608:	192d      	adds	r5, r5, r4
 802460a:	4465      	add	r5, ip
 802460c:	605d      	str	r5, [r3, #4]
 802460e:	1a8d      	subs	r5, r1, r2
 8024610:	444d      	add	r5, r9
 8024612:	1bed      	subs	r5, r5, r7
 8024614:	609d      	str	r5, [r3, #8]
 8024616:	4645      	mov	r5, r8
 8024618:	1a2d      	subs	r5, r5, r0
 802461a:	192d      	adds	r5, r5, r4
 802461c:	1bad      	subs	r5, r5, r6
 802461e:	464e      	mov	r6, r9
 8024620:	60dd      	str	r5, [r3, #12]
 8024622:	180d      	adds	r5, r1, r0
 8024624:	1bad      	subs	r5, r5, r6
 8024626:	4666      	mov	r6, ip
 8024628:	1bad      	subs	r5, r5, r6
 802462a:	611d      	str	r5, [r3, #16]
 802462c:	4645      	mov	r5, r8
 802462e:	1aad      	subs	r5, r5, r2
 8024630:	4442      	add	r2, r8
 8024632:	1b12      	subs	r2, r2, r4
 8024634:	1bd2      	subs	r2, r2, r7
 8024636:	1a08      	subs	r0, r1, r0
 8024638:	61da      	str	r2, [r3, #28]
 802463a:	4649      	mov	r1, r9
 802463c:	2201      	movs	r2, #1
 802463e:	1a41      	subs	r1, r0, r1
 8024640:	4252      	negs	r2, r2
 8024642:	4461      	add	r1, ip
 8024644:	4694      	mov	ip, r2
 8024646:	44e2      	add	sl, ip
 8024648:	4652      	mov	r2, sl
 802464a:	1b2d      	subs	r5, r5, r4
 802464c:	19ed      	adds	r5, r5, r7
 802464e:	615d      	str	r5, [r3, #20]
 8024650:	6199      	str	r1, [r3, #24]
 8024652:	3320      	adds	r3, #32
 8024654:	2a00      	cmp	r2, #0
 8024656:	d1c6      	bne.n	80245e6 <arm_radix4_butterfly_q31+0x4c6>
 8024658:	b027      	add	sp, #156	@ 0x9c
 802465a:	bc3c      	pop	{r2, r3, r4, r5}
 802465c:	4690      	mov	r8, r2
 802465e:	4699      	mov	r9, r3
 8024660:	46a2      	mov	sl, r4
 8024662:	46ab      	mov	fp, r5
 8024664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024666:	469a      	mov	sl, r3
 8024668:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802466a:	e7bc      	b.n	80245e6 <arm_radix4_butterfly_q31+0x4c6>

0802466c <arm_radix4_butterfly_inverse_q31>:
 802466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802466e:	464d      	mov	r5, r9
 8024670:	4644      	mov	r4, r8
 8024672:	465f      	mov	r7, fp
 8024674:	4656      	mov	r6, sl
 8024676:	b4f0      	push	{r4, r5, r6, r7}
 8024678:	b0a7      	sub	sp, #156	@ 0x9c
 802467a:	469c      	mov	ip, r3
 802467c:	9114      	str	r1, [sp, #80]	@ 0x50
 802467e:	0889      	lsrs	r1, r1, #2
 8024680:	9310      	str	r3, [sp, #64]	@ 0x40
 8024682:	00cb      	lsls	r3, r1, #3
 8024684:	0015      	movs	r5, r2
 8024686:	9223      	str	r2, [sp, #140]	@ 0x8c
 8024688:	18c2      	adds	r2, r0, r3
 802468a:	000c      	movs	r4, r1
 802468c:	9124      	str	r1, [sp, #144]	@ 0x90
 802468e:	18d1      	adds	r1, r2, r3
 8024690:	468b      	mov	fp, r1
 8024692:	469a      	mov	sl, r3
 8024694:	4663      	mov	r3, ip
 8024696:	44da      	add	sl, fp
 8024698:	46d0      	mov	r8, sl
 802469a:	4681      	mov	r9, r0
 802469c:	4692      	mov	sl, r2
 802469e:	0119      	lsls	r1, r3, #4
 80246a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80246a2:	00d9      	lsls	r1, r3, #3
 80246a4:	005b      	lsls	r3, r3, #1
 80246a6:	4463      	add	r3, ip
 80246a8:	910e      	str	r1, [sp, #56]	@ 0x38
 80246aa:	00d9      	lsls	r1, r3, #3
 80246ac:	9022      	str	r0, [sp, #136]	@ 0x88
 80246ae:	9025      	str	r0, [sp, #148]	@ 0x94
 80246b0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80246b2:	9502      	str	r5, [sp, #8]
 80246b4:	9500      	str	r5, [sp, #0]
 80246b6:	9501      	str	r5, [sp, #4]
 80246b8:	9409      	str	r4, [sp, #36]	@ 0x24
 80246ba:	464b      	mov	r3, r9
 80246bc:	681b      	ldr	r3, [r3, #0]
 80246be:	4652      	mov	r2, sl
 80246c0:	111c      	asrs	r4, r3, #4
 80246c2:	465b      	mov	r3, fp
 80246c4:	4648      	mov	r0, r9
 80246c6:	681b      	ldr	r3, [r3, #0]
 80246c8:	6812      	ldr	r2, [r2, #0]
 80246ca:	6840      	ldr	r0, [r0, #4]
 80246cc:	111b      	asrs	r3, r3, #4
 80246ce:	18e7      	adds	r7, r4, r3
 80246d0:	1ae3      	subs	r3, r4, r3
 80246d2:	1114      	asrs	r4, r2, #4
 80246d4:	4642      	mov	r2, r8
 80246d6:	1105      	asrs	r5, r0, #4
 80246d8:	4658      	mov	r0, fp
 80246da:	6812      	ldr	r2, [r2, #0]
 80246dc:	6840      	ldr	r0, [r0, #4]
 80246de:	9303      	str	r3, [sp, #12]
 80246e0:	1113      	asrs	r3, r2, #4
 80246e2:	18e2      	adds	r2, r4, r3
 80246e4:	1103      	asrs	r3, r0, #4
 80246e6:	18ee      	adds	r6, r5, r3
 80246e8:	1ae8      	subs	r0, r5, r3
 80246ea:	464d      	mov	r5, r9
 80246ec:	18bb      	adds	r3, r7, r2
 80246ee:	602b      	str	r3, [r5, #0]
 80246f0:	4641      	mov	r1, r8
 80246f2:	4655      	mov	r5, sl
 80246f4:	6849      	ldr	r1, [r1, #4]
 80246f6:	686d      	ldr	r5, [r5, #4]
 80246f8:	110b      	asrs	r3, r1, #4
 80246fa:	112d      	asrs	r5, r5, #4
 80246fc:	18eb      	adds	r3, r5, r3
 80246fe:	464d      	mov	r5, r9
 8024700:	18f1      	adds	r1, r6, r3
 8024702:	6069      	str	r1, [r5, #4]
 8024704:	4655      	mov	r5, sl
 8024706:	686d      	ldr	r5, [r5, #4]
 8024708:	9004      	str	r0, [sp, #16]
 802470a:	112c      	asrs	r4, r5, #4
 802470c:	4645      	mov	r5, r8
 802470e:	686d      	ldr	r5, [r5, #4]
 8024710:	1129      	asrs	r1, r5, #4
 8024712:	1a65      	subs	r5, r4, r1
 8024714:	4651      	mov	r1, sl
 8024716:	6809      	ldr	r1, [r1, #0]
 8024718:	1abc      	subs	r4, r7, r2
 802471a:	1108      	asrs	r0, r1, #4
 802471c:	4641      	mov	r1, r8
 802471e:	17e2      	asrs	r2, r4, #31
 8024720:	6809      	ldr	r1, [r1, #0]
 8024722:	9207      	str	r2, [sp, #28]
 8024724:	9a01      	ldr	r2, [sp, #4]
 8024726:	1109      	asrs	r1, r1, #4
 8024728:	6817      	ldr	r7, [r2, #0]
 802472a:	1a41      	subs	r1, r0, r1
 802472c:	9106      	str	r1, [sp, #24]
 802472e:	0039      	movs	r1, r7
 8024730:	17ff      	asrs	r7, r7, #31
 8024732:	0038      	movs	r0, r7
 8024734:	9505      	str	r5, [sp, #20]
 8024736:	1af5      	subs	r5, r6, r3
 8024738:	17ef      	asrs	r7, r5, #31
 802473a:	970b      	str	r7, [sp, #44]	@ 0x2c
 802473c:	6857      	ldr	r7, [r2, #4]
 802473e:	0003      	movs	r3, r0
 8024740:	17fe      	asrs	r6, r7, #31
 8024742:	000a      	movs	r2, r1
 8024744:	9108      	str	r1, [sp, #32]
 8024746:	900a      	str	r0, [sp, #40]	@ 0x28
 8024748:	17e1      	asrs	r1, r4, #31
 802474a:	0020      	movs	r0, r4
 802474c:	960c      	str	r6, [sp, #48]	@ 0x30
 802474e:	f7db ff37 	bl	80005c0 <__aeabi_lmul>
 8024752:	003a      	movs	r2, r7
 8024754:	17fb      	asrs	r3, r7, #31
 8024756:	000e      	movs	r6, r1
 8024758:	0028      	movs	r0, r5
 802475a:	17e9      	asrs	r1, r5, #31
 802475c:	f7db ff30 	bl	80005c0 <__aeabi_lmul>
 8024760:	4653      	mov	r3, sl
 8024762:	1a76      	subs	r6, r6, r1
 8024764:	0076      	lsls	r6, r6, #1
 8024766:	601e      	str	r6, [r3, #0]
 8024768:	002a      	movs	r2, r5
 802476a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802476c:	9808      	ldr	r0, [sp, #32]
 802476e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024770:	f7db ff26 	bl	80005c0 <__aeabi_lmul>
 8024774:	003a      	movs	r2, r7
 8024776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024778:	000d      	movs	r5, r1
 802477a:	0020      	movs	r0, r4
 802477c:	9907      	ldr	r1, [sp, #28]
 802477e:	f7db ff1f 	bl	80005c0 <__aeabi_lmul>
 8024782:	4657      	mov	r7, sl
 8024784:	186d      	adds	r5, r5, r1
 8024786:	006d      	lsls	r5, r5, #1
 8024788:	607d      	str	r5, [r7, #4]
 802478a:	9b03      	ldr	r3, [sp, #12]
 802478c:	9e06      	ldr	r6, [sp, #24]
 802478e:	9d05      	ldr	r5, [sp, #20]
 8024790:	46b4      	mov	ip, r6
 8024792:	1b5d      	subs	r5, r3, r5
 8024794:	9b00      	ldr	r3, [sp, #0]
 8024796:	17ef      	asrs	r7, r5, #31
 8024798:	0039      	movs	r1, r7
 802479a:	681f      	ldr	r7, [r3, #0]
 802479c:	17fc      	asrs	r4, r7, #31
 802479e:	0020      	movs	r0, r4
 80247a0:	9c04      	ldr	r4, [sp, #16]
 80247a2:	4464      	add	r4, ip
 80247a4:	17e6      	asrs	r6, r4, #31
 80247a6:	9407      	str	r4, [sp, #28]
 80247a8:	9608      	str	r6, [sp, #32]
 80247aa:	685e      	ldr	r6, [r3, #4]
 80247ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 80247ae:	17f2      	asrs	r2, r6, #31
 80247b0:	0003      	movs	r3, r0
 80247b2:	920c      	str	r2, [sp, #48]	@ 0x30
 80247b4:	0028      	movs	r0, r5
 80247b6:	003a      	movs	r2, r7
 80247b8:	910a      	str	r1, [sp, #40]	@ 0x28
 80247ba:	f7db ff01 	bl	80005c0 <__aeabi_lmul>
 80247be:	0032      	movs	r2, r6
 80247c0:	17f3      	asrs	r3, r6, #31
 80247c2:	9807      	ldr	r0, [sp, #28]
 80247c4:	000c      	movs	r4, r1
 80247c6:	9908      	ldr	r1, [sp, #32]
 80247c8:	f7db fefa 	bl	80005c0 <__aeabi_lmul>
 80247cc:	4658      	mov	r0, fp
 80247ce:	1a64      	subs	r4, r4, r1
 80247d0:	0064      	lsls	r4, r4, #1
 80247d2:	9a07      	ldr	r2, [sp, #28]
 80247d4:	6004      	str	r4, [r0, #0]
 80247d6:	9b08      	ldr	r3, [sp, #32]
 80247d8:	0038      	movs	r0, r7
 80247da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80247dc:	f7db fef0 	bl	80005c0 <__aeabi_lmul>
 80247e0:	0032      	movs	r2, r6
 80247e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80247e4:	000c      	movs	r4, r1
 80247e6:	0028      	movs	r0, r5
 80247e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80247ea:	f7db fee9 	bl	80005c0 <__aeabi_lmul>
 80247ee:	9d05      	ldr	r5, [sp, #20]
 80247f0:	465f      	mov	r7, fp
 80247f2:	46ac      	mov	ip, r5
 80247f4:	1864      	adds	r4, r4, r1
 80247f6:	9903      	ldr	r1, [sp, #12]
 80247f8:	0064      	lsls	r4, r4, #1
 80247fa:	4461      	add	r1, ip
 80247fc:	607c      	str	r4, [r7, #4]
 80247fe:	000c      	movs	r4, r1
 8024800:	17c9      	asrs	r1, r1, #31
 8024802:	9105      	str	r1, [sp, #20]
 8024804:	9902      	ldr	r1, [sp, #8]
 8024806:	9804      	ldr	r0, [sp, #16]
 8024808:	680d      	ldr	r5, [r1, #0]
 802480a:	9e06      	ldr	r6, [sp, #24]
 802480c:	002b      	movs	r3, r5
 802480e:	17ed      	asrs	r5, r5, #31
 8024810:	684f      	ldr	r7, [r1, #4]
 8024812:	9503      	str	r5, [sp, #12]
 8024814:	1b85      	subs	r5, r0, r6
 8024816:	17e8      	asrs	r0, r5, #31
 8024818:	001a      	movs	r2, r3
 802481a:	9006      	str	r0, [sp, #24]
 802481c:	17fe      	asrs	r6, r7, #31
 802481e:	9304      	str	r3, [sp, #16]
 8024820:	0020      	movs	r0, r4
 8024822:	9b03      	ldr	r3, [sp, #12]
 8024824:	17e1      	asrs	r1, r4, #31
 8024826:	9607      	str	r6, [sp, #28]
 8024828:	f7db feca 	bl	80005c0 <__aeabi_lmul>
 802482c:	003a      	movs	r2, r7
 802482e:	000e      	movs	r6, r1
 8024830:	17fb      	asrs	r3, r7, #31
 8024832:	0028      	movs	r0, r5
 8024834:	17e9      	asrs	r1, r5, #31
 8024836:	f7db fec3 	bl	80005c0 <__aeabi_lmul>
 802483a:	4640      	mov	r0, r8
 802483c:	1a76      	subs	r6, r6, r1
 802483e:	0076      	lsls	r6, r6, #1
 8024840:	002a      	movs	r2, r5
 8024842:	9b06      	ldr	r3, [sp, #24]
 8024844:	6006      	str	r6, [r0, #0]
 8024846:	9903      	ldr	r1, [sp, #12]
 8024848:	9804      	ldr	r0, [sp, #16]
 802484a:	f7db feb9 	bl	80005c0 <__aeabi_lmul>
 802484e:	0020      	movs	r0, r4
 8024850:	2408      	movs	r4, #8
 8024852:	9b07      	ldr	r3, [sp, #28]
 8024854:	000d      	movs	r5, r1
 8024856:	003a      	movs	r2, r7
 8024858:	9905      	ldr	r1, [sp, #20]
 802485a:	f7db feb1 	bl	80005c0 <__aeabi_lmul>
 802485e:	4640      	mov	r0, r8
 8024860:	46a4      	mov	ip, r4
 8024862:	186d      	adds	r5, r5, r1
 8024864:	006d      	lsls	r5, r5, #1
 8024866:	6045      	str	r5, [r0, #4]
 8024868:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802486a:	44e1      	add	r9, ip
 802486c:	3801      	subs	r0, #1
 802486e:	9009      	str	r0, [sp, #36]	@ 0x24
 8024870:	9a01      	ldr	r2, [sp, #4]
 8024872:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024874:	44e2      	add	sl, ip
 8024876:	44e3      	add	fp, ip
 8024878:	44e0      	add	r8, ip
 802487a:	46a4      	mov	ip, r4
 802487c:	4462      	add	r2, ip
 802487e:	9201      	str	r2, [sp, #4]
 8024880:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024882:	9b00      	ldr	r3, [sp, #0]
 8024884:	4694      	mov	ip, r2
 8024886:	4463      	add	r3, ip
 8024888:	9300      	str	r3, [sp, #0]
 802488a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802488c:	9902      	ldr	r1, [sp, #8]
 802488e:	469c      	mov	ip, r3
 8024890:	4461      	add	r1, ip
 8024892:	9102      	str	r1, [sp, #8]
 8024894:	2800      	cmp	r0, #0
 8024896:	d000      	beq.n	802489a <arm_radix4_butterfly_inverse_q31+0x22e>
 8024898:	e70f      	b.n	80246ba <arm_radix4_butterfly_inverse_q31+0x4e>
 802489a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802489c:	009b      	lsls	r3, r3, #2
 802489e:	931f      	str	r3, [sp, #124]	@ 0x7c
 80248a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80248a2:	9320      	str	r3, [sp, #128]	@ 0x80
 80248a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80248a6:	2b04      	cmp	r3, #4
 80248a8:	d800      	bhi.n	80248ac <arm_radix4_butterfly_inverse_q31+0x240>
 80248aa:	e17c      	b.n	8024ba6 <arm_radix4_butterfly_inverse_q31+0x53a>
 80248ac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80248ae:	0893      	lsrs	r3, r2, #2
 80248b0:	1e59      	subs	r1, r3, #1
 80248b2:	9321      	str	r3, [sp, #132]	@ 0x84
 80248b4:	00db      	lsls	r3, r3, #3
 80248b6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80248b8:	00d3      	lsls	r3, r2, #3
 80248ba:	9300      	str	r3, [sp, #0]
 80248bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80248be:	911a      	str	r1, [sp, #104]	@ 0x68
 80248c0:	00da      	lsls	r2, r3, #3
 80248c2:	921e      	str	r2, [sp, #120]	@ 0x78
 80248c4:	011a      	lsls	r2, r3, #4
 80248c6:	921d      	str	r2, [sp, #116]	@ 0x74
 80248c8:	001a      	movs	r2, r3
 80248ca:	4694      	mov	ip, r2
 80248cc:	005b      	lsls	r3, r3, #1
 80248ce:	4463      	add	r3, ip
 80248d0:	00db      	lsls	r3, r3, #3
 80248d2:	931c      	str	r3, [sp, #112]	@ 0x70
 80248d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80248d6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80248d8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80248da:	9318      	str	r3, [sp, #96]	@ 0x60
 80248dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80248de:	9316      	str	r3, [sp, #88]	@ 0x58
 80248e0:	2300      	movs	r3, #0
 80248e2:	9315      	str	r3, [sp, #84]	@ 0x54
 80248e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80248e6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80248e8:	681a      	ldr	r2, [r3, #0]
 80248ea:	685b      	ldr	r3, [r3, #4]
 80248ec:	9205      	str	r2, [sp, #20]
 80248ee:	9306      	str	r3, [sp, #24]
 80248f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80248f2:	468c      	mov	ip, r1
 80248f4:	681a      	ldr	r2, [r3, #0]
 80248f6:	685b      	ldr	r3, [r3, #4]
 80248f8:	9207      	str	r2, [sp, #28]
 80248fa:	9308      	str	r3, [sp, #32]
 80248fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80248fe:	681a      	ldr	r2, [r3, #0]
 8024900:	685b      	ldr	r3, [r3, #4]
 8024902:	9209      	str	r2, [sp, #36]	@ 0x24
 8024904:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024906:	930a      	str	r3, [sp, #40]	@ 0x28
 8024908:	0013      	movs	r3, r2
 802490a:	4463      	add	r3, ip
 802490c:	4698      	mov	r8, r3
 802490e:	0013      	movs	r3, r2
 8024910:	4442      	add	r2, r8
 8024912:	4691      	mov	r9, r2
 8024914:	001a      	movs	r2, r3
 8024916:	444a      	add	r2, r9
 8024918:	4692      	mov	sl, r2
 802491a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802491c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802491e:	4293      	cmp	r3, r2
 8024920:	d800      	bhi.n	8024924 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8024922:	e0d9      	b.n	8024ad8 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024924:	4694      	mov	ip, r2
 8024926:	4644      	mov	r4, r8
 8024928:	4655      	mov	r5, sl
 802492a:	4688      	mov	r8, r1
 802492c:	9b07      	ldr	r3, [sp, #28]
 802492e:	17db      	asrs	r3, r3, #31
 8024930:	930c      	str	r3, [sp, #48]	@ 0x30
 8024932:	9b08      	ldr	r3, [sp, #32]
 8024934:	17db      	asrs	r3, r3, #31
 8024936:	930d      	str	r3, [sp, #52]	@ 0x34
 8024938:	9b05      	ldr	r3, [sp, #20]
 802493a:	17db      	asrs	r3, r3, #31
 802493c:	930e      	str	r3, [sp, #56]	@ 0x38
 802493e:	9b06      	ldr	r3, [sp, #24]
 8024940:	17db      	asrs	r3, r3, #31
 8024942:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024946:	17db      	asrs	r3, r3, #31
 8024948:	9310      	str	r3, [sp, #64]	@ 0x40
 802494a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802494c:	17db      	asrs	r3, r3, #31
 802494e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024950:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024952:	4463      	add	r3, ip
 8024954:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024956:	4643      	mov	r3, r8
 8024958:	4641      	mov	r1, r8
 802495a:	681a      	ldr	r2, [r3, #0]
 802495c:	464b      	mov	r3, r9
 802495e:	684f      	ldr	r7, [r1, #4]
 8024960:	4649      	mov	r1, r9
 8024962:	681b      	ldr	r3, [r3, #0]
 8024964:	18d6      	adds	r6, r2, r3
 8024966:	1ad3      	subs	r3, r2, r3
 8024968:	9301      	str	r3, [sp, #4]
 802496a:	684b      	ldr	r3, [r1, #4]
 802496c:	1af9      	subs	r1, r7, r3
 802496e:	9102      	str	r1, [sp, #8]
 8024970:	6829      	ldr	r1, [r5, #0]
 8024972:	18f8      	adds	r0, r7, r3
 8024974:	468c      	mov	ip, r1
 8024976:	6827      	ldr	r7, [r4, #0]
 8024978:	4467      	add	r7, ip
 802497a:	003a      	movs	r2, r7
 802497c:	19f3      	adds	r3, r6, r7
 802497e:	4647      	mov	r7, r8
 8024980:	109b      	asrs	r3, r3, #2
 8024982:	603b      	str	r3, [r7, #0]
 8024984:	6869      	ldr	r1, [r5, #4]
 8024986:	6867      	ldr	r7, [r4, #4]
 8024988:	468c      	mov	ip, r1
 802498a:	4467      	add	r7, ip
 802498c:	003b      	movs	r3, r7
 802498e:	19c1      	adds	r1, r0, r7
 8024990:	4647      	mov	r7, r8
 8024992:	1ab6      	subs	r6, r6, r2
 8024994:	1089      	asrs	r1, r1, #2
 8024996:	6079      	str	r1, [r7, #4]
 8024998:	17f2      	asrs	r2, r6, #31
 802499a:	9900      	ldr	r1, [sp, #0]
 802499c:	4692      	mov	sl, r2
 802499e:	468c      	mov	ip, r1
 80249a0:	6867      	ldr	r7, [r4, #4]
 80249a2:	6869      	ldr	r1, [r5, #4]
 80249a4:	44e0      	add	r8, ip
 80249a6:	1a7f      	subs	r7, r7, r1
 80249a8:	9703      	str	r7, [sp, #12]
 80249aa:	6821      	ldr	r1, [r4, #0]
 80249ac:	682f      	ldr	r7, [r5, #0]
 80249ae:	1bc9      	subs	r1, r1, r7
 80249b0:	1ac7      	subs	r7, r0, r3
 80249b2:	17fa      	asrs	r2, r7, #31
 80249b4:	4693      	mov	fp, r2
 80249b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80249b8:	9a07      	ldr	r2, [sp, #28]
 80249ba:	9104      	str	r1, [sp, #16]
 80249bc:	0030      	movs	r0, r6
 80249be:	4651      	mov	r1, sl
 80249c0:	f7db fdfe 	bl	80005c0 <__aeabi_lmul>
 80249c4:	9a08      	ldr	r2, [sp, #32]
 80249c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80249c8:	9112      	str	r1, [sp, #72]	@ 0x48
 80249ca:	0038      	movs	r0, r7
 80249cc:	4659      	mov	r1, fp
 80249ce:	f7db fdf7 	bl	80005c0 <__aeabi_lmul>
 80249d2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80249d4:	9a07      	ldr	r2, [sp, #28]
 80249d6:	1a41      	subs	r1, r0, r1
 80249d8:	1049      	asrs	r1, r1, #1
 80249da:	6021      	str	r1, [r4, #0]
 80249dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80249de:	0038      	movs	r0, r7
 80249e0:	4659      	mov	r1, fp
 80249e2:	f7db fded 	bl	80005c0 <__aeabi_lmul>
 80249e6:	9a08      	ldr	r2, [sp, #32]
 80249e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80249ea:	000f      	movs	r7, r1
 80249ec:	0030      	movs	r0, r6
 80249ee:	4651      	mov	r1, sl
 80249f0:	f7db fde6 	bl	80005c0 <__aeabi_lmul>
 80249f4:	9b00      	ldr	r3, [sp, #0]
 80249f6:	187f      	adds	r7, r7, r1
 80249f8:	469c      	mov	ip, r3
 80249fa:	107f      	asrs	r7, r7, #1
 80249fc:	6067      	str	r7, [r4, #4]
 80249fe:	9a01      	ldr	r2, [sp, #4]
 8024a00:	9f03      	ldr	r7, [sp, #12]
 8024a02:	9802      	ldr	r0, [sp, #8]
 8024a04:	1bd7      	subs	r7, r2, r7
 8024a06:	17fe      	asrs	r6, r7, #31
 8024a08:	0031      	movs	r1, r6
 8024a0a:	9e04      	ldr	r6, [sp, #16]
 8024a0c:	4682      	mov	sl, r0
 8024a0e:	4464      	add	r4, ip
 8024a10:	46b4      	mov	ip, r6
 8024a12:	44e2      	add	sl, ip
 8024a14:	4652      	mov	r2, sl
 8024a16:	17d2      	asrs	r2, r2, #31
 8024a18:	4693      	mov	fp, r2
 8024a1a:	0038      	movs	r0, r7
 8024a1c:	9a05      	ldr	r2, [sp, #20]
 8024a1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024a20:	9112      	str	r1, [sp, #72]	@ 0x48
 8024a22:	f7db fdcd 	bl	80005c0 <__aeabi_lmul>
 8024a26:	9a06      	ldr	r2, [sp, #24]
 8024a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024a2a:	000e      	movs	r6, r1
 8024a2c:	4650      	mov	r0, sl
 8024a2e:	4659      	mov	r1, fp
 8024a30:	f7db fdc6 	bl	80005c0 <__aeabi_lmul>
 8024a34:	4648      	mov	r0, r9
 8024a36:	1a76      	subs	r6, r6, r1
 8024a38:	1076      	asrs	r6, r6, #1
 8024a3a:	6006      	str	r6, [r0, #0]
 8024a3c:	9a05      	ldr	r2, [sp, #20]
 8024a3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024a40:	4650      	mov	r0, sl
 8024a42:	4659      	mov	r1, fp
 8024a44:	f7db fdbc 	bl	80005c0 <__aeabi_lmul>
 8024a48:	9a06      	ldr	r2, [sp, #24]
 8024a4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024a4c:	000e      	movs	r6, r1
 8024a4e:	0038      	movs	r0, r7
 8024a50:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024a52:	f7db fdb5 	bl	80005c0 <__aeabi_lmul>
 8024a56:	9a00      	ldr	r2, [sp, #0]
 8024a58:	9f03      	ldr	r7, [sp, #12]
 8024a5a:	4694      	mov	ip, r2
 8024a5c:	1876      	adds	r6, r6, r1
 8024a5e:	4649      	mov	r1, r9
 8024a60:	44e1      	add	r9, ip
 8024a62:	46bc      	mov	ip, r7
 8024a64:	9b01      	ldr	r3, [sp, #4]
 8024a66:	1076      	asrs	r6, r6, #1
 8024a68:	4463      	add	r3, ip
 8024a6a:	17df      	asrs	r7, r3, #31
 8024a6c:	604e      	str	r6, [r1, #4]
 8024a6e:	46ba      	mov	sl, r7
 8024a70:	001e      	movs	r6, r3
 8024a72:	9802      	ldr	r0, [sp, #8]
 8024a74:	9b04      	ldr	r3, [sp, #16]
 8024a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024a78:	1ac7      	subs	r7, r0, r3
 8024a7a:	17fb      	asrs	r3, r7, #31
 8024a7c:	469b      	mov	fp, r3
 8024a7e:	0030      	movs	r0, r6
 8024a80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024a82:	4651      	mov	r1, sl
 8024a84:	f7db fd9c 	bl	80005c0 <__aeabi_lmul>
 8024a88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024a8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024a8c:	9101      	str	r1, [sp, #4]
 8024a8e:	0038      	movs	r0, r7
 8024a90:	4659      	mov	r1, fp
 8024a92:	f7db fd95 	bl	80005c0 <__aeabi_lmul>
 8024a96:	9801      	ldr	r0, [sp, #4]
 8024a98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024a9a:	1a41      	subs	r1, r0, r1
 8024a9c:	1049      	asrs	r1, r1, #1
 8024a9e:	6029      	str	r1, [r5, #0]
 8024aa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024aa2:	0038      	movs	r0, r7
 8024aa4:	4659      	mov	r1, fp
 8024aa6:	f7db fd8b 	bl	80005c0 <__aeabi_lmul>
 8024aaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024aac:	000f      	movs	r7, r1
 8024aae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024ab0:	0030      	movs	r0, r6
 8024ab2:	4651      	mov	r1, sl
 8024ab4:	f7db fd84 	bl	80005c0 <__aeabi_lmul>
 8024ab8:	187f      	adds	r7, r7, r1
 8024aba:	107f      	asrs	r7, r7, #1
 8024abc:	606f      	str	r7, [r5, #4]
 8024abe:	9a00      	ldr	r2, [sp, #0]
 8024ac0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024ac2:	4694      	mov	ip, r2
 8024ac4:	4465      	add	r5, ip
 8024ac6:	468c      	mov	ip, r1
 8024ac8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024aca:	0013      	movs	r3, r2
 8024acc:	4462      	add	r2, ip
 8024ace:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024ad0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024ad2:	429a      	cmp	r2, r3
 8024ad4:	d900      	bls.n	8024ad8 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024ad6:	e73e      	b.n	8024956 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8024ad8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024ada:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024adc:	468c      	mov	ip, r1
 8024ade:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024ae0:	4462      	add	r2, ip
 8024ae2:	468c      	mov	ip, r1
 8024ae4:	9216      	str	r2, [sp, #88]	@ 0x58
 8024ae6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024ae8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024aea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024aec:	4462      	add	r2, ip
 8024aee:	468c      	mov	ip, r1
 8024af0:	9219      	str	r2, [sp, #100]	@ 0x64
 8024af2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024af4:	3301      	adds	r3, #1
 8024af6:	4462      	add	r2, ip
 8024af8:	9218      	str	r2, [sp, #96]	@ 0x60
 8024afa:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024afc:	9315      	str	r3, [sp, #84]	@ 0x54
 8024afe:	3208      	adds	r2, #8
 8024b00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024b02:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024b04:	4293      	cmp	r3, r2
 8024b06:	d800      	bhi.n	8024b0a <arm_radix4_butterfly_inverse_q31+0x49e>
 8024b08:	e6ec      	b.n	80248e4 <arm_radix4_butterfly_inverse_q31+0x278>
 8024b0a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024b0c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024b0e:	009b      	lsls	r3, r3, #2
 8024b10:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024b12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024b14:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024b16:	089b      	lsrs	r3, r3, #2
 8024b18:	9320      	str	r3, [sp, #128]	@ 0x80
 8024b1a:	2b04      	cmp	r3, #4
 8024b1c:	d900      	bls.n	8024b20 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8024b1e:	e6c5      	b.n	80248ac <arm_radix4_butterfly_inverse_q31+0x240>
 8024b20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024b22:	469a      	mov	sl, r3
 8024b24:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024b26:	681a      	ldr	r2, [r3, #0]
 8024b28:	6918      	ldr	r0, [r3, #16]
 8024b2a:	4691      	mov	r9, r2
 8024b2c:	464c      	mov	r4, r9
 8024b2e:	4680      	mov	r8, r0
 8024b30:	69de      	ldr	r6, [r3, #28]
 8024b32:	689d      	ldr	r5, [r3, #8]
 8024b34:	46b4      	mov	ip, r6
 8024b36:	6998      	ldr	r0, [r3, #24]
 8024b38:	1964      	adds	r4, r4, r5
 8024b3a:	6859      	ldr	r1, [r3, #4]
 8024b3c:	68da      	ldr	r2, [r3, #12]
 8024b3e:	4444      	add	r4, r8
 8024b40:	695f      	ldr	r7, [r3, #20]
 8024b42:	1824      	adds	r4, r4, r0
 8024b44:	601c      	str	r4, [r3, #0]
 8024b46:	188c      	adds	r4, r1, r2
 8024b48:	19e4      	adds	r4, r4, r7
 8024b4a:	4464      	add	r4, ip
 8024b4c:	605c      	str	r4, [r3, #4]
 8024b4e:	464c      	mov	r4, r9
 8024b50:	1b64      	subs	r4, r4, r5
 8024b52:	4444      	add	r4, r8
 8024b54:	1a24      	subs	r4, r4, r0
 8024b56:	609c      	str	r4, [r3, #8]
 8024b58:	1a8c      	subs	r4, r1, r2
 8024b5a:	19e4      	adds	r4, r4, r7
 8024b5c:	1ba4      	subs	r4, r4, r6
 8024b5e:	60dc      	str	r4, [r3, #12]
 8024b60:	464c      	mov	r4, r9
 8024b62:	4646      	mov	r6, r8
 8024b64:	1aa4      	subs	r4, r4, r2
 8024b66:	1ba4      	subs	r4, r4, r6
 8024b68:	4464      	add	r4, ip
 8024b6a:	611c      	str	r4, [r3, #16]
 8024b6c:	194c      	adds	r4, r1, r5
 8024b6e:	1be4      	subs	r4, r4, r7
 8024b70:	1a24      	subs	r4, r4, r0
 8024b72:	615c      	str	r4, [r3, #20]
 8024b74:	4644      	mov	r4, r8
 8024b76:	4666      	mov	r6, ip
 8024b78:	444a      	add	r2, r9
 8024b7a:	1b12      	subs	r2, r2, r4
 8024b7c:	1b92      	subs	r2, r2, r6
 8024b7e:	619a      	str	r2, [r3, #24]
 8024b80:	1b4a      	subs	r2, r1, r5
 8024b82:	1bd1      	subs	r1, r2, r7
 8024b84:	2201      	movs	r2, #1
 8024b86:	4252      	negs	r2, r2
 8024b88:	4694      	mov	ip, r2
 8024b8a:	44e2      	add	sl, ip
 8024b8c:	4652      	mov	r2, sl
 8024b8e:	1809      	adds	r1, r1, r0
 8024b90:	61d9      	str	r1, [r3, #28]
 8024b92:	3320      	adds	r3, #32
 8024b94:	2a00      	cmp	r2, #0
 8024b96:	d1c6      	bne.n	8024b26 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8024b98:	b027      	add	sp, #156	@ 0x9c
 8024b9a:	bc3c      	pop	{r2, r3, r4, r5}
 8024b9c:	4690      	mov	r8, r2
 8024b9e:	4699      	mov	r9, r3
 8024ba0:	46a2      	mov	sl, r4
 8024ba2:	46ab      	mov	fp, r5
 8024ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ba6:	469a      	mov	sl, r3
 8024ba8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024baa:	e7bc      	b.n	8024b26 <arm_radix4_butterfly_inverse_q31+0x4ba>

08024bac <arm_cmplx_mag_squared_q31>:
 8024bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024bae:	464f      	mov	r7, r9
 8024bb0:	4646      	mov	r6, r8
 8024bb2:	0004      	movs	r4, r0
 8024bb4:	b4c0      	push	{r6, r7}
 8024bb6:	0016      	movs	r6, r2
 8024bb8:	000f      	movs	r7, r1
 8024bba:	2a00      	cmp	r2, #0
 8024bbc:	d018      	beq.n	8024bf0 <arm_cmplx_mag_squared_q31+0x44>
 8024bbe:	6823      	ldr	r3, [r4, #0]
 8024bc0:	6822      	ldr	r2, [r4, #0]
 8024bc2:	17d9      	asrs	r1, r3, #31
 8024bc4:	6863      	ldr	r3, [r4, #4]
 8024bc6:	0010      	movs	r0, r2
 8024bc8:	4698      	mov	r8, r3
 8024bca:	17db      	asrs	r3, r3, #31
 8024bcc:	4699      	mov	r9, r3
 8024bce:	000b      	movs	r3, r1
 8024bd0:	f7db fcf6 	bl	80005c0 <__aeabi_lmul>
 8024bd4:	4642      	mov	r2, r8
 8024bd6:	104d      	asrs	r5, r1, #1
 8024bd8:	464b      	mov	r3, r9
 8024bda:	4640      	mov	r0, r8
 8024bdc:	4649      	mov	r1, r9
 8024bde:	f7db fcef 	bl	80005c0 <__aeabi_lmul>
 8024be2:	1049      	asrs	r1, r1, #1
 8024be4:	1869      	adds	r1, r5, r1
 8024be6:	3e01      	subs	r6, #1
 8024be8:	c702      	stmia	r7!, {r1}
 8024bea:	3408      	adds	r4, #8
 8024bec:	2e00      	cmp	r6, #0
 8024bee:	d1e6      	bne.n	8024bbe <arm_cmplx_mag_squared_q31+0x12>
 8024bf0:	bc0c      	pop	{r2, r3}
 8024bf2:	4690      	mov	r8, r2
 8024bf4:	4699      	mov	r9, r3
 8024bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024bf8 <arm_mult_q31>:
 8024bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024bfa:	4646      	mov	r6, r8
 8024bfc:	464f      	mov	r7, r9
 8024bfe:	4690      	mov	r8, r2
 8024c00:	b4c0      	push	{r6, r7}
 8024c02:	001d      	movs	r5, r3
 8024c04:	0006      	movs	r6, r0
 8024c06:	000f      	movs	r7, r1
 8024c08:	2400      	movs	r4, #0
 8024c0a:	2b00      	cmp	r3, #0
 8024c0c:	d020      	beq.n	8024c50 <arm_mult_q31+0x58>
 8024c0e:	4b12      	ldr	r3, [pc, #72]	@ (8024c58 <arm_mult_q31+0x60>)
 8024c10:	4699      	mov	r9, r3
 8024c12:	e007      	b.n	8024c24 <arm_mult_q31+0x2c>
 8024c14:	464b      	mov	r3, r9
 8024c16:	4059      	eors	r1, r3
 8024c18:	4643      	mov	r3, r8
 8024c1a:	3d01      	subs	r5, #1
 8024c1c:	5119      	str	r1, [r3, r4]
 8024c1e:	3404      	adds	r4, #4
 8024c20:	2d00      	cmp	r5, #0
 8024c22:	d015      	beq.n	8024c50 <arm_mult_q31+0x58>
 8024c24:	5933      	ldr	r3, [r6, r4]
 8024c26:	593a      	ldr	r2, [r7, r4]
 8024c28:	17d9      	asrs	r1, r3, #31
 8024c2a:	593b      	ldr	r3, [r7, r4]
 8024c2c:	5930      	ldr	r0, [r6, r4]
 8024c2e:	17db      	asrs	r3, r3, #31
 8024c30:	f7db fcc6 	bl	80005c0 <__aeabi_lmul>
 8024c34:	004b      	lsls	r3, r1, #1
 8024c36:	0fc0      	lsrs	r0, r0, #31
 8024c38:	4318      	orrs	r0, r3
 8024c3a:	17c9      	asrs	r1, r1, #31
 8024c3c:	17c3      	asrs	r3, r0, #31
 8024c3e:	428b      	cmp	r3, r1
 8024c40:	d1e8      	bne.n	8024c14 <arm_mult_q31+0x1c>
 8024c42:	0001      	movs	r1, r0
 8024c44:	4643      	mov	r3, r8
 8024c46:	3d01      	subs	r5, #1
 8024c48:	5119      	str	r1, [r3, r4]
 8024c4a:	3404      	adds	r4, #4
 8024c4c:	2d00      	cmp	r5, #0
 8024c4e:	d1e9      	bne.n	8024c24 <arm_mult_q31+0x2c>
 8024c50:	bc0c      	pop	{r2, r3}
 8024c52:	4690      	mov	r8, r2
 8024c54:	4699      	mov	r9, r3
 8024c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024c58:	7fffffff 	.word	0x7fffffff

08024c5c <arm_add_q31>:
 8024c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c5e:	465f      	mov	r7, fp
 8024c60:	4656      	mov	r6, sl
 8024c62:	464d      	mov	r5, r9
 8024c64:	4644      	mov	r4, r8
 8024c66:	b4f0      	push	{r4, r5, r6, r7}
 8024c68:	4693      	mov	fp, r2
 8024c6a:	b083      	sub	sp, #12
 8024c6c:	4681      	mov	r9, r0
 8024c6e:	468a      	mov	sl, r1
 8024c70:	4698      	mov	r8, r3
 8024c72:	2200      	movs	r2, #0
 8024c74:	2b00      	cmp	r3, #0
 8024c76:	d020      	beq.n	8024cba <arm_add_q31+0x5e>
 8024c78:	4649      	mov	r1, r9
 8024c7a:	4653      	mov	r3, sl
 8024c7c:	588e      	ldr	r6, [r1, r2]
 8024c7e:	589b      	ldr	r3, [r3, r2]
 8024c80:	17f7      	asrs	r7, r6, #31
 8024c82:	001c      	movs	r4, r3
 8024c84:	0030      	movs	r0, r6
 8024c86:	0039      	movs	r1, r7
 8024c88:	17dd      	asrs	r5, r3, #31
 8024c8a:	46b4      	mov	ip, r6
 8024c8c:	1900      	adds	r0, r0, r4
 8024c8e:	4169      	adcs	r1, r5
 8024c90:	4463      	add	r3, ip
 8024c92:	9000      	str	r0, [sp, #0]
 8024c94:	9101      	str	r1, [sp, #4]
 8024c96:	17d9      	asrs	r1, r3, #31
 8024c98:	468c      	mov	ip, r1
 8024c9a:	9901      	ldr	r1, [sp, #4]
 8024c9c:	458c      	cmp	ip, r1
 8024c9e:	d002      	beq.n	8024ca6 <arm_add_q31+0x4a>
 8024ca0:	17cb      	asrs	r3, r1, #31
 8024ca2:	4909      	ldr	r1, [pc, #36]	@ (8024cc8 <arm_add_q31+0x6c>)
 8024ca4:	404b      	eors	r3, r1
 8024ca6:	4659      	mov	r1, fp
 8024ca8:	508b      	str	r3, [r1, r2]
 8024caa:	2301      	movs	r3, #1
 8024cac:	425b      	negs	r3, r3
 8024cae:	469c      	mov	ip, r3
 8024cb0:	44e0      	add	r8, ip
 8024cb2:	4643      	mov	r3, r8
 8024cb4:	3204      	adds	r2, #4
 8024cb6:	2b00      	cmp	r3, #0
 8024cb8:	d1de      	bne.n	8024c78 <arm_add_q31+0x1c>
 8024cba:	b003      	add	sp, #12
 8024cbc:	bc3c      	pop	{r2, r3, r4, r5}
 8024cbe:	4690      	mov	r8, r2
 8024cc0:	4699      	mov	r9, r3
 8024cc2:	46a2      	mov	sl, r4
 8024cc4:	46ab      	mov	fp, r5
 8024cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024cc8:	7fffffff 	.word	0x7fffffff

08024ccc <atof>:
 8024ccc:	b510      	push	{r4, lr}
 8024cce:	2100      	movs	r1, #0
 8024cd0:	f000 fe1e 	bl	8025910 <strtod>
 8024cd4:	bd10      	pop	{r4, pc}

08024cd6 <atoi>:
 8024cd6:	b510      	push	{r4, lr}
 8024cd8:	220a      	movs	r2, #10
 8024cda:	2100      	movs	r1, #0
 8024cdc:	f000 feb0 	bl	8025a40 <strtol>
 8024ce0:	bd10      	pop	{r4, pc}
	...

08024ce4 <sulp>:
 8024ce4:	b570      	push	{r4, r5, r6, lr}
 8024ce6:	0016      	movs	r6, r2
 8024ce8:	000d      	movs	r5, r1
 8024cea:	f003 fced 	bl	80286c8 <__ulp>
 8024cee:	2e00      	cmp	r6, #0
 8024cf0:	d00d      	beq.n	8024d0e <sulp+0x2a>
 8024cf2:	236b      	movs	r3, #107	@ 0x6b
 8024cf4:	006a      	lsls	r2, r5, #1
 8024cf6:	0d52      	lsrs	r2, r2, #21
 8024cf8:	1a9b      	subs	r3, r3, r2
 8024cfa:	2b00      	cmp	r3, #0
 8024cfc:	dd07      	ble.n	8024d0e <sulp+0x2a>
 8024cfe:	2400      	movs	r4, #0
 8024d00:	4a03      	ldr	r2, [pc, #12]	@ (8024d10 <sulp+0x2c>)
 8024d02:	051b      	lsls	r3, r3, #20
 8024d04:	189d      	adds	r5, r3, r2
 8024d06:	002b      	movs	r3, r5
 8024d08:	0022      	movs	r2, r4
 8024d0a:	f7dd fe23 	bl	8002954 <__aeabi_dmul>
 8024d0e:	bd70      	pop	{r4, r5, r6, pc}
 8024d10:	3ff00000 	.word	0x3ff00000

08024d14 <_strtod_l>:
 8024d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d16:	b0a3      	sub	sp, #140	@ 0x8c
 8024d18:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024d1a:	2200      	movs	r2, #0
 8024d1c:	2600      	movs	r6, #0
 8024d1e:	2700      	movs	r7, #0
 8024d20:	9005      	str	r0, [sp, #20]
 8024d22:	9109      	str	r1, [sp, #36]	@ 0x24
 8024d24:	921e      	str	r2, [sp, #120]	@ 0x78
 8024d26:	911d      	str	r1, [sp, #116]	@ 0x74
 8024d28:	780a      	ldrb	r2, [r1, #0]
 8024d2a:	2a2b      	cmp	r2, #43	@ 0x2b
 8024d2c:	d053      	beq.n	8024dd6 <_strtod_l+0xc2>
 8024d2e:	d83f      	bhi.n	8024db0 <_strtod_l+0x9c>
 8024d30:	2a0d      	cmp	r2, #13
 8024d32:	d839      	bhi.n	8024da8 <_strtod_l+0x94>
 8024d34:	2a08      	cmp	r2, #8
 8024d36:	d839      	bhi.n	8024dac <_strtod_l+0x98>
 8024d38:	2a00      	cmp	r2, #0
 8024d3a:	d042      	beq.n	8024dc2 <_strtod_l+0xae>
 8024d3c:	2200      	movs	r2, #0
 8024d3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8024d40:	2100      	movs	r1, #0
 8024d42:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024d44:	910c      	str	r1, [sp, #48]	@ 0x30
 8024d46:	782a      	ldrb	r2, [r5, #0]
 8024d48:	2a30      	cmp	r2, #48	@ 0x30
 8024d4a:	d000      	beq.n	8024d4e <_strtod_l+0x3a>
 8024d4c:	e083      	b.n	8024e56 <_strtod_l+0x142>
 8024d4e:	786a      	ldrb	r2, [r5, #1]
 8024d50:	3120      	adds	r1, #32
 8024d52:	438a      	bics	r2, r1
 8024d54:	2a58      	cmp	r2, #88	@ 0x58
 8024d56:	d000      	beq.n	8024d5a <_strtod_l+0x46>
 8024d58:	e073      	b.n	8024e42 <_strtod_l+0x12e>
 8024d5a:	9302      	str	r3, [sp, #8]
 8024d5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024d5e:	4a9b      	ldr	r2, [pc, #620]	@ (8024fcc <_strtod_l+0x2b8>)
 8024d60:	9301      	str	r3, [sp, #4]
 8024d62:	ab1e      	add	r3, sp, #120	@ 0x78
 8024d64:	9300      	str	r3, [sp, #0]
 8024d66:	9805      	ldr	r0, [sp, #20]
 8024d68:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024d6a:	a91d      	add	r1, sp, #116	@ 0x74
 8024d6c:	f002 fd64 	bl	8027838 <__gethex>
 8024d70:	230f      	movs	r3, #15
 8024d72:	0002      	movs	r2, r0
 8024d74:	401a      	ands	r2, r3
 8024d76:	0004      	movs	r4, r0
 8024d78:	9206      	str	r2, [sp, #24]
 8024d7a:	4218      	tst	r0, r3
 8024d7c:	d005      	beq.n	8024d8a <_strtod_l+0x76>
 8024d7e:	2a06      	cmp	r2, #6
 8024d80:	d12b      	bne.n	8024dda <_strtod_l+0xc6>
 8024d82:	2300      	movs	r3, #0
 8024d84:	3501      	adds	r5, #1
 8024d86:	951d      	str	r5, [sp, #116]	@ 0x74
 8024d88:	9312      	str	r3, [sp, #72]	@ 0x48
 8024d8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	d002      	beq.n	8024d96 <_strtod_l+0x82>
 8024d90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024d94:	6013      	str	r3, [r2, #0]
 8024d96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024d98:	2b00      	cmp	r3, #0
 8024d9a:	d019      	beq.n	8024dd0 <_strtod_l+0xbc>
 8024d9c:	2380      	movs	r3, #128	@ 0x80
 8024d9e:	0030      	movs	r0, r6
 8024da0:	061b      	lsls	r3, r3, #24
 8024da2:	18f9      	adds	r1, r7, r3
 8024da4:	b023      	add	sp, #140	@ 0x8c
 8024da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024da8:	2a20      	cmp	r2, #32
 8024daa:	d1c7      	bne.n	8024d3c <_strtod_l+0x28>
 8024dac:	3101      	adds	r1, #1
 8024dae:	e7ba      	b.n	8024d26 <_strtod_l+0x12>
 8024db0:	2a2d      	cmp	r2, #45	@ 0x2d
 8024db2:	d1c3      	bne.n	8024d3c <_strtod_l+0x28>
 8024db4:	3a2c      	subs	r2, #44	@ 0x2c
 8024db6:	9212      	str	r2, [sp, #72]	@ 0x48
 8024db8:	1c4a      	adds	r2, r1, #1
 8024dba:	921d      	str	r2, [sp, #116]	@ 0x74
 8024dbc:	784a      	ldrb	r2, [r1, #1]
 8024dbe:	2a00      	cmp	r2, #0
 8024dc0:	d1be      	bne.n	8024d40 <_strtod_l+0x2c>
 8024dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024dc4:	931d      	str	r3, [sp, #116]	@ 0x74
 8024dc6:	2300      	movs	r3, #0
 8024dc8:	9312      	str	r3, [sp, #72]	@ 0x48
 8024dca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024dcc:	2b00      	cmp	r3, #0
 8024dce:	d1df      	bne.n	8024d90 <_strtod_l+0x7c>
 8024dd0:	0030      	movs	r0, r6
 8024dd2:	0039      	movs	r1, r7
 8024dd4:	e7e6      	b.n	8024da4 <_strtod_l+0x90>
 8024dd6:	2200      	movs	r2, #0
 8024dd8:	e7ed      	b.n	8024db6 <_strtod_l+0xa2>
 8024dda:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024ddc:	2a00      	cmp	r2, #0
 8024dde:	d007      	beq.n	8024df0 <_strtod_l+0xdc>
 8024de0:	2135      	movs	r1, #53	@ 0x35
 8024de2:	a820      	add	r0, sp, #128	@ 0x80
 8024de4:	f003 fd66 	bl	80288b4 <__copybits>
 8024de8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024dea:	9805      	ldr	r0, [sp, #20]
 8024dec:	f003 f928 	bl	8028040 <_Bfree>
 8024df0:	9806      	ldr	r0, [sp, #24]
 8024df2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024df4:	3801      	subs	r0, #1
 8024df6:	2804      	cmp	r0, #4
 8024df8:	d806      	bhi.n	8024e08 <_strtod_l+0xf4>
 8024dfa:	f7db f9bf 	bl	800017c <__gnu_thumb1_case_uqi>
 8024dfe:	0312      	.short	0x0312
 8024e00:	1e1c      	.short	0x1e1c
 8024e02:	12          	.byte	0x12
 8024e03:	00          	.byte	0x00
 8024e04:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024e06:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024e08:	05e4      	lsls	r4, r4, #23
 8024e0a:	d502      	bpl.n	8024e12 <_strtod_l+0xfe>
 8024e0c:	2380      	movs	r3, #128	@ 0x80
 8024e0e:	061b      	lsls	r3, r3, #24
 8024e10:	431f      	orrs	r7, r3
 8024e12:	4b6f      	ldr	r3, [pc, #444]	@ (8024fd0 <_strtod_l+0x2bc>)
 8024e14:	423b      	tst	r3, r7
 8024e16:	d1b8      	bne.n	8024d8a <_strtod_l+0x76>
 8024e18:	f001 fd9e 	bl	8026958 <__errno>
 8024e1c:	2322      	movs	r3, #34	@ 0x22
 8024e1e:	6003      	str	r3, [r0, #0]
 8024e20:	e7b3      	b.n	8024d8a <_strtod_l+0x76>
 8024e22:	496c      	ldr	r1, [pc, #432]	@ (8024fd4 <_strtod_l+0x2c0>)
 8024e24:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024e26:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024e28:	400a      	ands	r2, r1
 8024e2a:	496b      	ldr	r1, [pc, #428]	@ (8024fd8 <_strtod_l+0x2c4>)
 8024e2c:	185b      	adds	r3, r3, r1
 8024e2e:	051b      	lsls	r3, r3, #20
 8024e30:	431a      	orrs	r2, r3
 8024e32:	0017      	movs	r7, r2
 8024e34:	e7e8      	b.n	8024e08 <_strtod_l+0xf4>
 8024e36:	4f66      	ldr	r7, [pc, #408]	@ (8024fd0 <_strtod_l+0x2bc>)
 8024e38:	e7e6      	b.n	8024e08 <_strtod_l+0xf4>
 8024e3a:	2601      	movs	r6, #1
 8024e3c:	4f67      	ldr	r7, [pc, #412]	@ (8024fdc <_strtod_l+0x2c8>)
 8024e3e:	4276      	negs	r6, r6
 8024e40:	e7e2      	b.n	8024e08 <_strtod_l+0xf4>
 8024e42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e44:	1c5a      	adds	r2, r3, #1
 8024e46:	921d      	str	r2, [sp, #116]	@ 0x74
 8024e48:	785b      	ldrb	r3, [r3, #1]
 8024e4a:	2b30      	cmp	r3, #48	@ 0x30
 8024e4c:	d0f9      	beq.n	8024e42 <_strtod_l+0x12e>
 8024e4e:	2b00      	cmp	r3, #0
 8024e50:	d09b      	beq.n	8024d8a <_strtod_l+0x76>
 8024e52:	2301      	movs	r3, #1
 8024e54:	930c      	str	r3, [sp, #48]	@ 0x30
 8024e56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e58:	220a      	movs	r2, #10
 8024e5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024e5c:	2300      	movs	r3, #0
 8024e5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024e60:	930d      	str	r3, [sp, #52]	@ 0x34
 8024e62:	9308      	str	r3, [sp, #32]
 8024e64:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024e66:	7804      	ldrb	r4, [r0, #0]
 8024e68:	0023      	movs	r3, r4
 8024e6a:	3b30      	subs	r3, #48	@ 0x30
 8024e6c:	b2d9      	uxtb	r1, r3
 8024e6e:	2909      	cmp	r1, #9
 8024e70:	d927      	bls.n	8024ec2 <_strtod_l+0x1ae>
 8024e72:	2201      	movs	r2, #1
 8024e74:	495a      	ldr	r1, [pc, #360]	@ (8024fe0 <_strtod_l+0x2cc>)
 8024e76:	f001 fce1 	bl	802683c <strncmp>
 8024e7a:	2800      	cmp	r0, #0
 8024e7c:	d033      	beq.n	8024ee6 <_strtod_l+0x1d2>
 8024e7e:	2000      	movs	r0, #0
 8024e80:	0023      	movs	r3, r4
 8024e82:	4684      	mov	ip, r0
 8024e84:	9a08      	ldr	r2, [sp, #32]
 8024e86:	900e      	str	r0, [sp, #56]	@ 0x38
 8024e88:	9206      	str	r2, [sp, #24]
 8024e8a:	2220      	movs	r2, #32
 8024e8c:	0019      	movs	r1, r3
 8024e8e:	4391      	bics	r1, r2
 8024e90:	000a      	movs	r2, r1
 8024e92:	2100      	movs	r1, #0
 8024e94:	9107      	str	r1, [sp, #28]
 8024e96:	2a45      	cmp	r2, #69	@ 0x45
 8024e98:	d000      	beq.n	8024e9c <_strtod_l+0x188>
 8024e9a:	e0cb      	b.n	8025034 <_strtod_l+0x320>
 8024e9c:	9b06      	ldr	r3, [sp, #24]
 8024e9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024ea0:	4303      	orrs	r3, r0
 8024ea2:	4313      	orrs	r3, r2
 8024ea4:	428b      	cmp	r3, r1
 8024ea6:	d08c      	beq.n	8024dc2 <_strtod_l+0xae>
 8024ea8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8024eac:	3301      	adds	r3, #1
 8024eae:	931d      	str	r3, [sp, #116]	@ 0x74
 8024eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024eb2:	785b      	ldrb	r3, [r3, #1]
 8024eb4:	2b2b      	cmp	r3, #43	@ 0x2b
 8024eb6:	d07b      	beq.n	8024fb0 <_strtod_l+0x29c>
 8024eb8:	000c      	movs	r4, r1
 8024eba:	2b2d      	cmp	r3, #45	@ 0x2d
 8024ebc:	d17e      	bne.n	8024fbc <_strtod_l+0x2a8>
 8024ebe:	2401      	movs	r4, #1
 8024ec0:	e077      	b.n	8024fb2 <_strtod_l+0x29e>
 8024ec2:	9908      	ldr	r1, [sp, #32]
 8024ec4:	2908      	cmp	r1, #8
 8024ec6:	dc09      	bgt.n	8024edc <_strtod_l+0x1c8>
 8024ec8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024eca:	4351      	muls	r1, r2
 8024ecc:	185b      	adds	r3, r3, r1
 8024ece:	930d      	str	r3, [sp, #52]	@ 0x34
 8024ed0:	9b08      	ldr	r3, [sp, #32]
 8024ed2:	3001      	adds	r0, #1
 8024ed4:	3301      	adds	r3, #1
 8024ed6:	9308      	str	r3, [sp, #32]
 8024ed8:	901d      	str	r0, [sp, #116]	@ 0x74
 8024eda:	e7c3      	b.n	8024e64 <_strtod_l+0x150>
 8024edc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024ede:	4355      	muls	r5, r2
 8024ee0:	195b      	adds	r3, r3, r5
 8024ee2:	9310      	str	r3, [sp, #64]	@ 0x40
 8024ee4:	e7f4      	b.n	8024ed0 <_strtod_l+0x1bc>
 8024ee6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ee8:	1c5a      	adds	r2, r3, #1
 8024eea:	921d      	str	r2, [sp, #116]	@ 0x74
 8024eec:	9a08      	ldr	r2, [sp, #32]
 8024eee:	785b      	ldrb	r3, [r3, #1]
 8024ef0:	2a00      	cmp	r2, #0
 8024ef2:	d03e      	beq.n	8024f72 <_strtod_l+0x25e>
 8024ef4:	900e      	str	r0, [sp, #56]	@ 0x38
 8024ef6:	9206      	str	r2, [sp, #24]
 8024ef8:	001a      	movs	r2, r3
 8024efa:	3a30      	subs	r2, #48	@ 0x30
 8024efc:	2a09      	cmp	r2, #9
 8024efe:	d912      	bls.n	8024f26 <_strtod_l+0x212>
 8024f00:	2201      	movs	r2, #1
 8024f02:	4694      	mov	ip, r2
 8024f04:	e7c1      	b.n	8024e8a <_strtod_l+0x176>
 8024f06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f08:	3001      	adds	r0, #1
 8024f0a:	1c5a      	adds	r2, r3, #1
 8024f0c:	921d      	str	r2, [sp, #116]	@ 0x74
 8024f0e:	785b      	ldrb	r3, [r3, #1]
 8024f10:	2b30      	cmp	r3, #48	@ 0x30
 8024f12:	d0f8      	beq.n	8024f06 <_strtod_l+0x1f2>
 8024f14:	001a      	movs	r2, r3
 8024f16:	3a31      	subs	r2, #49	@ 0x31
 8024f18:	2a08      	cmp	r2, #8
 8024f1a:	d844      	bhi.n	8024fa6 <_strtod_l+0x292>
 8024f1c:	900e      	str	r0, [sp, #56]	@ 0x38
 8024f1e:	2000      	movs	r0, #0
 8024f20:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024f22:	9006      	str	r0, [sp, #24]
 8024f24:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024f26:	001c      	movs	r4, r3
 8024f28:	1c42      	adds	r2, r0, #1
 8024f2a:	3c30      	subs	r4, #48	@ 0x30
 8024f2c:	2b30      	cmp	r3, #48	@ 0x30
 8024f2e:	d01a      	beq.n	8024f66 <_strtod_l+0x252>
 8024f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024f32:	9906      	ldr	r1, [sp, #24]
 8024f34:	189b      	adds	r3, r3, r2
 8024f36:	930e      	str	r3, [sp, #56]	@ 0x38
 8024f38:	230a      	movs	r3, #10
 8024f3a:	469c      	mov	ip, r3
 8024f3c:	9d06      	ldr	r5, [sp, #24]
 8024f3e:	1c4b      	adds	r3, r1, #1
 8024f40:	1b5d      	subs	r5, r3, r5
 8024f42:	42aa      	cmp	r2, r5
 8024f44:	dc17      	bgt.n	8024f76 <_strtod_l+0x262>
 8024f46:	43c3      	mvns	r3, r0
 8024f48:	9a06      	ldr	r2, [sp, #24]
 8024f4a:	17db      	asrs	r3, r3, #31
 8024f4c:	4003      	ands	r3, r0
 8024f4e:	18d1      	adds	r1, r2, r3
 8024f50:	3201      	adds	r2, #1
 8024f52:	18d3      	adds	r3, r2, r3
 8024f54:	9306      	str	r3, [sp, #24]
 8024f56:	2908      	cmp	r1, #8
 8024f58:	dc1c      	bgt.n	8024f94 <_strtod_l+0x280>
 8024f5a:	230a      	movs	r3, #10
 8024f5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024f5e:	4353      	muls	r3, r2
 8024f60:	2200      	movs	r2, #0
 8024f62:	18e3      	adds	r3, r4, r3
 8024f64:	930d      	str	r3, [sp, #52]	@ 0x34
 8024f66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f68:	0010      	movs	r0, r2
 8024f6a:	1c59      	adds	r1, r3, #1
 8024f6c:	911d      	str	r1, [sp, #116]	@ 0x74
 8024f6e:	785b      	ldrb	r3, [r3, #1]
 8024f70:	e7c2      	b.n	8024ef8 <_strtod_l+0x1e4>
 8024f72:	9808      	ldr	r0, [sp, #32]
 8024f74:	e7cc      	b.n	8024f10 <_strtod_l+0x1fc>
 8024f76:	2908      	cmp	r1, #8
 8024f78:	dc05      	bgt.n	8024f86 <_strtod_l+0x272>
 8024f7a:	4665      	mov	r5, ip
 8024f7c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024f7e:	4369      	muls	r1, r5
 8024f80:	910d      	str	r1, [sp, #52]	@ 0x34
 8024f82:	0019      	movs	r1, r3
 8024f84:	e7da      	b.n	8024f3c <_strtod_l+0x228>
 8024f86:	2b10      	cmp	r3, #16
 8024f88:	dcfb      	bgt.n	8024f82 <_strtod_l+0x26e>
 8024f8a:	4661      	mov	r1, ip
 8024f8c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024f8e:	434d      	muls	r5, r1
 8024f90:	9510      	str	r5, [sp, #64]	@ 0x40
 8024f92:	e7f6      	b.n	8024f82 <_strtod_l+0x26e>
 8024f94:	2200      	movs	r2, #0
 8024f96:	290f      	cmp	r1, #15
 8024f98:	dce5      	bgt.n	8024f66 <_strtod_l+0x252>
 8024f9a:	230a      	movs	r3, #10
 8024f9c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024f9e:	435d      	muls	r5, r3
 8024fa0:	1963      	adds	r3, r4, r5
 8024fa2:	9310      	str	r3, [sp, #64]	@ 0x40
 8024fa4:	e7df      	b.n	8024f66 <_strtod_l+0x252>
 8024fa6:	2200      	movs	r2, #0
 8024fa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8024faa:	9206      	str	r2, [sp, #24]
 8024fac:	3201      	adds	r2, #1
 8024fae:	e7a8      	b.n	8024f02 <_strtod_l+0x1ee>
 8024fb0:	2400      	movs	r4, #0
 8024fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024fb4:	3302      	adds	r3, #2
 8024fb6:	931d      	str	r3, [sp, #116]	@ 0x74
 8024fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024fba:	789b      	ldrb	r3, [r3, #2]
 8024fbc:	001a      	movs	r2, r3
 8024fbe:	3a30      	subs	r2, #48	@ 0x30
 8024fc0:	2a09      	cmp	r2, #9
 8024fc2:	d913      	bls.n	8024fec <_strtod_l+0x2d8>
 8024fc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024fc6:	921d      	str	r2, [sp, #116]	@ 0x74
 8024fc8:	2200      	movs	r2, #0
 8024fca:	e032      	b.n	8025032 <_strtod_l+0x31e>
 8024fcc:	0802f6d8 	.word	0x0802f6d8
 8024fd0:	7ff00000 	.word	0x7ff00000
 8024fd4:	ffefffff 	.word	0xffefffff
 8024fd8:	00000433 	.word	0x00000433
 8024fdc:	7fffffff 	.word	0x7fffffff
 8024fe0:	0802f4f0 	.word	0x0802f4f0
 8024fe4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024fe6:	1c5a      	adds	r2, r3, #1
 8024fe8:	921d      	str	r2, [sp, #116]	@ 0x74
 8024fea:	785b      	ldrb	r3, [r3, #1]
 8024fec:	2b30      	cmp	r3, #48	@ 0x30
 8024fee:	d0f9      	beq.n	8024fe4 <_strtod_l+0x2d0>
 8024ff0:	2200      	movs	r2, #0
 8024ff2:	9207      	str	r2, [sp, #28]
 8024ff4:	001a      	movs	r2, r3
 8024ff6:	3a31      	subs	r2, #49	@ 0x31
 8024ff8:	2a08      	cmp	r2, #8
 8024ffa:	d81b      	bhi.n	8025034 <_strtod_l+0x320>
 8024ffc:	3b30      	subs	r3, #48	@ 0x30
 8024ffe:	001a      	movs	r2, r3
 8025000:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025002:	9307      	str	r3, [sp, #28]
 8025004:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025006:	1c59      	adds	r1, r3, #1
 8025008:	911d      	str	r1, [sp, #116]	@ 0x74
 802500a:	785b      	ldrb	r3, [r3, #1]
 802500c:	001d      	movs	r5, r3
 802500e:	3d30      	subs	r5, #48	@ 0x30
 8025010:	2d09      	cmp	r5, #9
 8025012:	d93a      	bls.n	802508a <_strtod_l+0x376>
 8025014:	9d07      	ldr	r5, [sp, #28]
 8025016:	1b49      	subs	r1, r1, r5
 8025018:	000d      	movs	r5, r1
 802501a:	49b3      	ldr	r1, [pc, #716]	@ (80252e8 <_strtod_l+0x5d4>)
 802501c:	9107      	str	r1, [sp, #28]
 802501e:	2d08      	cmp	r5, #8
 8025020:	dc03      	bgt.n	802502a <_strtod_l+0x316>
 8025022:	9207      	str	r2, [sp, #28]
 8025024:	428a      	cmp	r2, r1
 8025026:	dd00      	ble.n	802502a <_strtod_l+0x316>
 8025028:	9107      	str	r1, [sp, #28]
 802502a:	2c00      	cmp	r4, #0
 802502c:	d002      	beq.n	8025034 <_strtod_l+0x320>
 802502e:	9a07      	ldr	r2, [sp, #28]
 8025030:	4252      	negs	r2, r2
 8025032:	9207      	str	r2, [sp, #28]
 8025034:	9a06      	ldr	r2, [sp, #24]
 8025036:	2a00      	cmp	r2, #0
 8025038:	d14b      	bne.n	80250d2 <_strtod_l+0x3be>
 802503a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802503c:	4310      	orrs	r0, r2
 802503e:	d000      	beq.n	8025042 <_strtod_l+0x32e>
 8025040:	e6a3      	b.n	8024d8a <_strtod_l+0x76>
 8025042:	4662      	mov	r2, ip
 8025044:	2a00      	cmp	r2, #0
 8025046:	d000      	beq.n	802504a <_strtod_l+0x336>
 8025048:	e6bb      	b.n	8024dc2 <_strtod_l+0xae>
 802504a:	2b69      	cmp	r3, #105	@ 0x69
 802504c:	d025      	beq.n	802509a <_strtod_l+0x386>
 802504e:	dc21      	bgt.n	8025094 <_strtod_l+0x380>
 8025050:	2b49      	cmp	r3, #73	@ 0x49
 8025052:	d022      	beq.n	802509a <_strtod_l+0x386>
 8025054:	2b4e      	cmp	r3, #78	@ 0x4e
 8025056:	d000      	beq.n	802505a <_strtod_l+0x346>
 8025058:	e6b3      	b.n	8024dc2 <_strtod_l+0xae>
 802505a:	49a4      	ldr	r1, [pc, #656]	@ (80252ec <_strtod_l+0x5d8>)
 802505c:	a81d      	add	r0, sp, #116	@ 0x74
 802505e:	f002 fe21 	bl	8027ca4 <__match>
 8025062:	2800      	cmp	r0, #0
 8025064:	d100      	bne.n	8025068 <_strtod_l+0x354>
 8025066:	e6ac      	b.n	8024dc2 <_strtod_l+0xae>
 8025068:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802506a:	781b      	ldrb	r3, [r3, #0]
 802506c:	2b28      	cmp	r3, #40	@ 0x28
 802506e:	d12a      	bne.n	80250c6 <_strtod_l+0x3b2>
 8025070:	499f      	ldr	r1, [pc, #636]	@ (80252f0 <_strtod_l+0x5dc>)
 8025072:	aa20      	add	r2, sp, #128	@ 0x80
 8025074:	a81d      	add	r0, sp, #116	@ 0x74
 8025076:	f002 fe29 	bl	8027ccc <__hexnan>
 802507a:	2805      	cmp	r0, #5
 802507c:	d123      	bne.n	80250c6 <_strtod_l+0x3b2>
 802507e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025080:	4a9c      	ldr	r2, [pc, #624]	@ (80252f4 <_strtod_l+0x5e0>)
 8025082:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8025084:	431a      	orrs	r2, r3
 8025086:	0017      	movs	r7, r2
 8025088:	e67f      	b.n	8024d8a <_strtod_l+0x76>
 802508a:	210a      	movs	r1, #10
 802508c:	434a      	muls	r2, r1
 802508e:	18d2      	adds	r2, r2, r3
 8025090:	3a30      	subs	r2, #48	@ 0x30
 8025092:	e7b7      	b.n	8025004 <_strtod_l+0x2f0>
 8025094:	2b6e      	cmp	r3, #110	@ 0x6e
 8025096:	d0e0      	beq.n	802505a <_strtod_l+0x346>
 8025098:	e693      	b.n	8024dc2 <_strtod_l+0xae>
 802509a:	4997      	ldr	r1, [pc, #604]	@ (80252f8 <_strtod_l+0x5e4>)
 802509c:	a81d      	add	r0, sp, #116	@ 0x74
 802509e:	f002 fe01 	bl	8027ca4 <__match>
 80250a2:	2800      	cmp	r0, #0
 80250a4:	d100      	bne.n	80250a8 <_strtod_l+0x394>
 80250a6:	e68c      	b.n	8024dc2 <_strtod_l+0xae>
 80250a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80250aa:	4994      	ldr	r1, [pc, #592]	@ (80252fc <_strtod_l+0x5e8>)
 80250ac:	3b01      	subs	r3, #1
 80250ae:	a81d      	add	r0, sp, #116	@ 0x74
 80250b0:	931d      	str	r3, [sp, #116]	@ 0x74
 80250b2:	f002 fdf7 	bl	8027ca4 <__match>
 80250b6:	2800      	cmp	r0, #0
 80250b8:	d102      	bne.n	80250c0 <_strtod_l+0x3ac>
 80250ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80250bc:	3301      	adds	r3, #1
 80250be:	931d      	str	r3, [sp, #116]	@ 0x74
 80250c0:	2600      	movs	r6, #0
 80250c2:	4f8c      	ldr	r7, [pc, #560]	@ (80252f4 <_strtod_l+0x5e0>)
 80250c4:	e661      	b.n	8024d8a <_strtod_l+0x76>
 80250c6:	488e      	ldr	r0, [pc, #568]	@ (8025300 <_strtod_l+0x5ec>)
 80250c8:	f001 fc88 	bl	80269dc <nan>
 80250cc:	0006      	movs	r6, r0
 80250ce:	000f      	movs	r7, r1
 80250d0:	e65b      	b.n	8024d8a <_strtod_l+0x76>
 80250d2:	9b07      	ldr	r3, [sp, #28]
 80250d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80250d6:	1a9b      	subs	r3, r3, r2
 80250d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80250da:	9b08      	ldr	r3, [sp, #32]
 80250dc:	2b00      	cmp	r3, #0
 80250de:	d101      	bne.n	80250e4 <_strtod_l+0x3d0>
 80250e0:	9b06      	ldr	r3, [sp, #24]
 80250e2:	9308      	str	r3, [sp, #32]
 80250e4:	9c06      	ldr	r4, [sp, #24]
 80250e6:	2c10      	cmp	r4, #16
 80250e8:	dd00      	ble.n	80250ec <_strtod_l+0x3d8>
 80250ea:	2410      	movs	r4, #16
 80250ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80250ee:	f7de fbad 	bl	800384c <__aeabi_ui2d>
 80250f2:	9b06      	ldr	r3, [sp, #24]
 80250f4:	0006      	movs	r6, r0
 80250f6:	000f      	movs	r7, r1
 80250f8:	2b09      	cmp	r3, #9
 80250fa:	dc13      	bgt.n	8025124 <_strtod_l+0x410>
 80250fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80250fe:	2b00      	cmp	r3, #0
 8025100:	d100      	bne.n	8025104 <_strtod_l+0x3f0>
 8025102:	e642      	b.n	8024d8a <_strtod_l+0x76>
 8025104:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025106:	2b00      	cmp	r3, #0
 8025108:	dc00      	bgt.n	802510c <_strtod_l+0x3f8>
 802510a:	e07e      	b.n	802520a <_strtod_l+0x4f6>
 802510c:	2b16      	cmp	r3, #22
 802510e:	dc63      	bgt.n	80251d8 <_strtod_l+0x4c4>
 8025110:	497c      	ldr	r1, [pc, #496]	@ (8025304 <_strtod_l+0x5f0>)
 8025112:	00db      	lsls	r3, r3, #3
 8025114:	18c9      	adds	r1, r1, r3
 8025116:	0032      	movs	r2, r6
 8025118:	6808      	ldr	r0, [r1, #0]
 802511a:	6849      	ldr	r1, [r1, #4]
 802511c:	003b      	movs	r3, r7
 802511e:	f7dd fc19 	bl	8002954 <__aeabi_dmul>
 8025122:	e7d3      	b.n	80250cc <_strtod_l+0x3b8>
 8025124:	0022      	movs	r2, r4
 8025126:	4b77      	ldr	r3, [pc, #476]	@ (8025304 <_strtod_l+0x5f0>)
 8025128:	3a09      	subs	r2, #9
 802512a:	00d2      	lsls	r2, r2, #3
 802512c:	189b      	adds	r3, r3, r2
 802512e:	681a      	ldr	r2, [r3, #0]
 8025130:	685b      	ldr	r3, [r3, #4]
 8025132:	f7dd fc0f 	bl	8002954 <__aeabi_dmul>
 8025136:	0006      	movs	r6, r0
 8025138:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802513a:	000f      	movs	r7, r1
 802513c:	f7de fb86 	bl	800384c <__aeabi_ui2d>
 8025140:	000b      	movs	r3, r1
 8025142:	0002      	movs	r2, r0
 8025144:	0039      	movs	r1, r7
 8025146:	0030      	movs	r0, r6
 8025148:	f7dc fc04 	bl	8001954 <__aeabi_dadd>
 802514c:	9b06      	ldr	r3, [sp, #24]
 802514e:	0006      	movs	r6, r0
 8025150:	000f      	movs	r7, r1
 8025152:	2b0f      	cmp	r3, #15
 8025154:	ddd2      	ble.n	80250fc <_strtod_l+0x3e8>
 8025156:	9b06      	ldr	r3, [sp, #24]
 8025158:	1b1c      	subs	r4, r3, r4
 802515a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802515c:	18e4      	adds	r4, r4, r3
 802515e:	2c00      	cmp	r4, #0
 8025160:	dc00      	bgt.n	8025164 <_strtod_l+0x450>
 8025162:	e09b      	b.n	802529c <_strtod_l+0x588>
 8025164:	220f      	movs	r2, #15
 8025166:	0023      	movs	r3, r4
 8025168:	4013      	ands	r3, r2
 802516a:	4214      	tst	r4, r2
 802516c:	d00a      	beq.n	8025184 <_strtod_l+0x470>
 802516e:	4965      	ldr	r1, [pc, #404]	@ (8025304 <_strtod_l+0x5f0>)
 8025170:	00db      	lsls	r3, r3, #3
 8025172:	18c9      	adds	r1, r1, r3
 8025174:	0032      	movs	r2, r6
 8025176:	6808      	ldr	r0, [r1, #0]
 8025178:	6849      	ldr	r1, [r1, #4]
 802517a:	003b      	movs	r3, r7
 802517c:	f7dd fbea 	bl	8002954 <__aeabi_dmul>
 8025180:	0006      	movs	r6, r0
 8025182:	000f      	movs	r7, r1
 8025184:	230f      	movs	r3, #15
 8025186:	439c      	bics	r4, r3
 8025188:	d073      	beq.n	8025272 <_strtod_l+0x55e>
 802518a:	3326      	adds	r3, #38	@ 0x26
 802518c:	33ff      	adds	r3, #255	@ 0xff
 802518e:	429c      	cmp	r4, r3
 8025190:	dd4b      	ble.n	802522a <_strtod_l+0x516>
 8025192:	2300      	movs	r3, #0
 8025194:	9306      	str	r3, [sp, #24]
 8025196:	9307      	str	r3, [sp, #28]
 8025198:	930d      	str	r3, [sp, #52]	@ 0x34
 802519a:	9308      	str	r3, [sp, #32]
 802519c:	2322      	movs	r3, #34	@ 0x22
 802519e:	2600      	movs	r6, #0
 80251a0:	9a05      	ldr	r2, [sp, #20]
 80251a2:	4f54      	ldr	r7, [pc, #336]	@ (80252f4 <_strtod_l+0x5e0>)
 80251a4:	6013      	str	r3, [r2, #0]
 80251a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80251a8:	42b3      	cmp	r3, r6
 80251aa:	d100      	bne.n	80251ae <_strtod_l+0x49a>
 80251ac:	e5ed      	b.n	8024d8a <_strtod_l+0x76>
 80251ae:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80251b0:	9805      	ldr	r0, [sp, #20]
 80251b2:	f002 ff45 	bl	8028040 <_Bfree>
 80251b6:	9908      	ldr	r1, [sp, #32]
 80251b8:	9805      	ldr	r0, [sp, #20]
 80251ba:	f002 ff41 	bl	8028040 <_Bfree>
 80251be:	9907      	ldr	r1, [sp, #28]
 80251c0:	9805      	ldr	r0, [sp, #20]
 80251c2:	f002 ff3d 	bl	8028040 <_Bfree>
 80251c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80251c8:	9805      	ldr	r0, [sp, #20]
 80251ca:	f002 ff39 	bl	8028040 <_Bfree>
 80251ce:	9906      	ldr	r1, [sp, #24]
 80251d0:	9805      	ldr	r0, [sp, #20]
 80251d2:	f002 ff35 	bl	8028040 <_Bfree>
 80251d6:	e5d8      	b.n	8024d8a <_strtod_l+0x76>
 80251d8:	2325      	movs	r3, #37	@ 0x25
 80251da:	9a06      	ldr	r2, [sp, #24]
 80251dc:	1a9b      	subs	r3, r3, r2
 80251de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80251e0:	4293      	cmp	r3, r2
 80251e2:	dbb8      	blt.n	8025156 <_strtod_l+0x442>
 80251e4:	240f      	movs	r4, #15
 80251e6:	9b06      	ldr	r3, [sp, #24]
 80251e8:	4d46      	ldr	r5, [pc, #280]	@ (8025304 <_strtod_l+0x5f0>)
 80251ea:	1ae4      	subs	r4, r4, r3
 80251ec:	00e1      	lsls	r1, r4, #3
 80251ee:	1869      	adds	r1, r5, r1
 80251f0:	0032      	movs	r2, r6
 80251f2:	6808      	ldr	r0, [r1, #0]
 80251f4:	6849      	ldr	r1, [r1, #4]
 80251f6:	003b      	movs	r3, r7
 80251f8:	f7dd fbac 	bl	8002954 <__aeabi_dmul>
 80251fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80251fe:	1b1c      	subs	r4, r3, r4
 8025200:	00e4      	lsls	r4, r4, #3
 8025202:	192d      	adds	r5, r5, r4
 8025204:	682a      	ldr	r2, [r5, #0]
 8025206:	686b      	ldr	r3, [r5, #4]
 8025208:	e789      	b.n	802511e <_strtod_l+0x40a>
 802520a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802520c:	3316      	adds	r3, #22
 802520e:	dba2      	blt.n	8025156 <_strtod_l+0x442>
 8025210:	9907      	ldr	r1, [sp, #28]
 8025212:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025214:	4b3b      	ldr	r3, [pc, #236]	@ (8025304 <_strtod_l+0x5f0>)
 8025216:	1a52      	subs	r2, r2, r1
 8025218:	00d2      	lsls	r2, r2, #3
 802521a:	189b      	adds	r3, r3, r2
 802521c:	0030      	movs	r0, r6
 802521e:	681a      	ldr	r2, [r3, #0]
 8025220:	685b      	ldr	r3, [r3, #4]
 8025222:	0039      	movs	r1, r7
 8025224:	f7dc ff5c 	bl	80020e0 <__aeabi_ddiv>
 8025228:	e750      	b.n	80250cc <_strtod_l+0x3b8>
 802522a:	2300      	movs	r3, #0
 802522c:	0030      	movs	r0, r6
 802522e:	0039      	movs	r1, r7
 8025230:	4d35      	ldr	r5, [pc, #212]	@ (8025308 <_strtod_l+0x5f4>)
 8025232:	1124      	asrs	r4, r4, #4
 8025234:	9309      	str	r3, [sp, #36]	@ 0x24
 8025236:	2c01      	cmp	r4, #1
 8025238:	dc1e      	bgt.n	8025278 <_strtod_l+0x564>
 802523a:	2b00      	cmp	r3, #0
 802523c:	d001      	beq.n	8025242 <_strtod_l+0x52e>
 802523e:	0006      	movs	r6, r0
 8025240:	000f      	movs	r7, r1
 8025242:	4b32      	ldr	r3, [pc, #200]	@ (802530c <_strtod_l+0x5f8>)
 8025244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025246:	18ff      	adds	r7, r7, r3
 8025248:	4b2f      	ldr	r3, [pc, #188]	@ (8025308 <_strtod_l+0x5f4>)
 802524a:	00d5      	lsls	r5, r2, #3
 802524c:	195d      	adds	r5, r3, r5
 802524e:	0032      	movs	r2, r6
 8025250:	6828      	ldr	r0, [r5, #0]
 8025252:	6869      	ldr	r1, [r5, #4]
 8025254:	003b      	movs	r3, r7
 8025256:	f7dd fb7d 	bl	8002954 <__aeabi_dmul>
 802525a:	4b26      	ldr	r3, [pc, #152]	@ (80252f4 <_strtod_l+0x5e0>)
 802525c:	4a2c      	ldr	r2, [pc, #176]	@ (8025310 <_strtod_l+0x5fc>)
 802525e:	0006      	movs	r6, r0
 8025260:	400b      	ands	r3, r1
 8025262:	4293      	cmp	r3, r2
 8025264:	d895      	bhi.n	8025192 <_strtod_l+0x47e>
 8025266:	4a2b      	ldr	r2, [pc, #172]	@ (8025314 <_strtod_l+0x600>)
 8025268:	4293      	cmp	r3, r2
 802526a:	d913      	bls.n	8025294 <_strtod_l+0x580>
 802526c:	2601      	movs	r6, #1
 802526e:	4f2a      	ldr	r7, [pc, #168]	@ (8025318 <_strtod_l+0x604>)
 8025270:	4276      	negs	r6, r6
 8025272:	2300      	movs	r3, #0
 8025274:	9309      	str	r3, [sp, #36]	@ 0x24
 8025276:	e086      	b.n	8025386 <_strtod_l+0x672>
 8025278:	2201      	movs	r2, #1
 802527a:	4214      	tst	r4, r2
 802527c:	d004      	beq.n	8025288 <_strtod_l+0x574>
 802527e:	682a      	ldr	r2, [r5, #0]
 8025280:	686b      	ldr	r3, [r5, #4]
 8025282:	f7dd fb67 	bl	8002954 <__aeabi_dmul>
 8025286:	2301      	movs	r3, #1
 8025288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802528a:	1064      	asrs	r4, r4, #1
 802528c:	3201      	adds	r2, #1
 802528e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025290:	3508      	adds	r5, #8
 8025292:	e7d0      	b.n	8025236 <_strtod_l+0x522>
 8025294:	23d4      	movs	r3, #212	@ 0xd4
 8025296:	049b      	lsls	r3, r3, #18
 8025298:	18cf      	adds	r7, r1, r3
 802529a:	e7ea      	b.n	8025272 <_strtod_l+0x55e>
 802529c:	2c00      	cmp	r4, #0
 802529e:	d0e8      	beq.n	8025272 <_strtod_l+0x55e>
 80252a0:	4264      	negs	r4, r4
 80252a2:	230f      	movs	r3, #15
 80252a4:	0022      	movs	r2, r4
 80252a6:	401a      	ands	r2, r3
 80252a8:	421c      	tst	r4, r3
 80252aa:	d00a      	beq.n	80252c2 <_strtod_l+0x5ae>
 80252ac:	4b15      	ldr	r3, [pc, #84]	@ (8025304 <_strtod_l+0x5f0>)
 80252ae:	00d2      	lsls	r2, r2, #3
 80252b0:	189b      	adds	r3, r3, r2
 80252b2:	0030      	movs	r0, r6
 80252b4:	681a      	ldr	r2, [r3, #0]
 80252b6:	685b      	ldr	r3, [r3, #4]
 80252b8:	0039      	movs	r1, r7
 80252ba:	f7dc ff11 	bl	80020e0 <__aeabi_ddiv>
 80252be:	0006      	movs	r6, r0
 80252c0:	000f      	movs	r7, r1
 80252c2:	1124      	asrs	r4, r4, #4
 80252c4:	d0d5      	beq.n	8025272 <_strtod_l+0x55e>
 80252c6:	2c1f      	cmp	r4, #31
 80252c8:	dd28      	ble.n	802531c <_strtod_l+0x608>
 80252ca:	2300      	movs	r3, #0
 80252cc:	9306      	str	r3, [sp, #24]
 80252ce:	9307      	str	r3, [sp, #28]
 80252d0:	930d      	str	r3, [sp, #52]	@ 0x34
 80252d2:	9308      	str	r3, [sp, #32]
 80252d4:	2322      	movs	r3, #34	@ 0x22
 80252d6:	9a05      	ldr	r2, [sp, #20]
 80252d8:	2600      	movs	r6, #0
 80252da:	6013      	str	r3, [r2, #0]
 80252dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80252de:	2700      	movs	r7, #0
 80252e0:	2b00      	cmp	r3, #0
 80252e2:	d000      	beq.n	80252e6 <_strtod_l+0x5d2>
 80252e4:	e763      	b.n	80251ae <_strtod_l+0x49a>
 80252e6:	e550      	b.n	8024d8a <_strtod_l+0x76>
 80252e8:	00004e1f 	.word	0x00004e1f
 80252ec:	0802f4ff 	.word	0x0802f4ff
 80252f0:	0802f6c4 	.word	0x0802f6c4
 80252f4:	7ff00000 	.word	0x7ff00000
 80252f8:	0802f4f7 	.word	0x0802f4f7
 80252fc:	0802f531 	.word	0x0802f531
 8025300:	0802f6c0 	.word	0x0802f6c0
 8025304:	0802f850 	.word	0x0802f850
 8025308:	0802f828 	.word	0x0802f828
 802530c:	fcb00000 	.word	0xfcb00000
 8025310:	7ca00000 	.word	0x7ca00000
 8025314:	7c900000 	.word	0x7c900000
 8025318:	7fefffff 	.word	0x7fefffff
 802531c:	2310      	movs	r3, #16
 802531e:	0022      	movs	r2, r4
 8025320:	401a      	ands	r2, r3
 8025322:	9209      	str	r2, [sp, #36]	@ 0x24
 8025324:	421c      	tst	r4, r3
 8025326:	d001      	beq.n	802532c <_strtod_l+0x618>
 8025328:	335a      	adds	r3, #90	@ 0x5a
 802532a:	9309      	str	r3, [sp, #36]	@ 0x24
 802532c:	0030      	movs	r0, r6
 802532e:	0039      	movs	r1, r7
 8025330:	2300      	movs	r3, #0
 8025332:	4dc0      	ldr	r5, [pc, #768]	@ (8025634 <_strtod_l+0x920>)
 8025334:	2201      	movs	r2, #1
 8025336:	4214      	tst	r4, r2
 8025338:	d004      	beq.n	8025344 <_strtod_l+0x630>
 802533a:	682a      	ldr	r2, [r5, #0]
 802533c:	686b      	ldr	r3, [r5, #4]
 802533e:	f7dd fb09 	bl	8002954 <__aeabi_dmul>
 8025342:	2301      	movs	r3, #1
 8025344:	1064      	asrs	r4, r4, #1
 8025346:	3508      	adds	r5, #8
 8025348:	2c00      	cmp	r4, #0
 802534a:	d1f3      	bne.n	8025334 <_strtod_l+0x620>
 802534c:	2b00      	cmp	r3, #0
 802534e:	d001      	beq.n	8025354 <_strtod_l+0x640>
 8025350:	0006      	movs	r6, r0
 8025352:	000f      	movs	r7, r1
 8025354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025356:	2b00      	cmp	r3, #0
 8025358:	d00d      	beq.n	8025376 <_strtod_l+0x662>
 802535a:	236b      	movs	r3, #107	@ 0x6b
 802535c:	007a      	lsls	r2, r7, #1
 802535e:	0d52      	lsrs	r2, r2, #21
 8025360:	0039      	movs	r1, r7
 8025362:	1a9b      	subs	r3, r3, r2
 8025364:	2b00      	cmp	r3, #0
 8025366:	dd06      	ble.n	8025376 <_strtod_l+0x662>
 8025368:	2b1f      	cmp	r3, #31
 802536a:	dd5c      	ble.n	8025426 <_strtod_l+0x712>
 802536c:	2600      	movs	r6, #0
 802536e:	2b34      	cmp	r3, #52	@ 0x34
 8025370:	dd52      	ble.n	8025418 <_strtod_l+0x704>
 8025372:	27dc      	movs	r7, #220	@ 0xdc
 8025374:	04bf      	lsls	r7, r7, #18
 8025376:	2200      	movs	r2, #0
 8025378:	2300      	movs	r3, #0
 802537a:	0030      	movs	r0, r6
 802537c:	0039      	movs	r1, r7
 802537e:	f7db f897 	bl	80004b0 <__aeabi_dcmpeq>
 8025382:	2800      	cmp	r0, #0
 8025384:	d1a1      	bne.n	80252ca <_strtod_l+0x5b6>
 8025386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025388:	9a08      	ldr	r2, [sp, #32]
 802538a:	9300      	str	r3, [sp, #0]
 802538c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802538e:	9b06      	ldr	r3, [sp, #24]
 8025390:	9805      	ldr	r0, [sp, #20]
 8025392:	f002 febd 	bl	8028110 <__s2b>
 8025396:	900d      	str	r0, [sp, #52]	@ 0x34
 8025398:	2800      	cmp	r0, #0
 802539a:	d100      	bne.n	802539e <_strtod_l+0x68a>
 802539c:	e6f9      	b.n	8025192 <_strtod_l+0x47e>
 802539e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80253a0:	9907      	ldr	r1, [sp, #28]
 80253a2:	43db      	mvns	r3, r3
 80253a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80253a6:	17db      	asrs	r3, r3, #31
 80253a8:	1a52      	subs	r2, r2, r1
 80253aa:	9214      	str	r2, [sp, #80]	@ 0x50
 80253ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80253ae:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80253b0:	17d2      	asrs	r2, r2, #31
 80253b2:	4011      	ands	r1, r2
 80253b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80253b6:	9114      	str	r1, [sp, #80]	@ 0x50
 80253b8:	401a      	ands	r2, r3
 80253ba:	2300      	movs	r3, #0
 80253bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80253be:	9306      	str	r3, [sp, #24]
 80253c0:	9307      	str	r3, [sp, #28]
 80253c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80253c4:	9805      	ldr	r0, [sp, #20]
 80253c6:	6859      	ldr	r1, [r3, #4]
 80253c8:	f002 fdf6 	bl	8027fb8 <_Balloc>
 80253cc:	9008      	str	r0, [sp, #32]
 80253ce:	2800      	cmp	r0, #0
 80253d0:	d100      	bne.n	80253d4 <_strtod_l+0x6c0>
 80253d2:	e6e3      	b.n	802519c <_strtod_l+0x488>
 80253d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80253d6:	300c      	adds	r0, #12
 80253d8:	0019      	movs	r1, r3
 80253da:	691a      	ldr	r2, [r3, #16]
 80253dc:	310c      	adds	r1, #12
 80253de:	3202      	adds	r2, #2
 80253e0:	0092      	lsls	r2, r2, #2
 80253e2:	f001 faf1 	bl	80269c8 <memcpy>
 80253e6:	ab20      	add	r3, sp, #128	@ 0x80
 80253e8:	9301      	str	r3, [sp, #4]
 80253ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80253ec:	9300      	str	r3, [sp, #0]
 80253ee:	0032      	movs	r2, r6
 80253f0:	003b      	movs	r3, r7
 80253f2:	9805      	ldr	r0, [sp, #20]
 80253f4:	9610      	str	r6, [sp, #64]	@ 0x40
 80253f6:	9711      	str	r7, [sp, #68]	@ 0x44
 80253f8:	f003 f9d2 	bl	80287a0 <__d2b>
 80253fc:	901e      	str	r0, [sp, #120]	@ 0x78
 80253fe:	2800      	cmp	r0, #0
 8025400:	d100      	bne.n	8025404 <_strtod_l+0x6f0>
 8025402:	e6cb      	b.n	802519c <_strtod_l+0x488>
 8025404:	2101      	movs	r1, #1
 8025406:	9805      	ldr	r0, [sp, #20]
 8025408:	f002 ff1e 	bl	8028248 <__i2b>
 802540c:	9007      	str	r0, [sp, #28]
 802540e:	2800      	cmp	r0, #0
 8025410:	d10e      	bne.n	8025430 <_strtod_l+0x71c>
 8025412:	2300      	movs	r3, #0
 8025414:	9307      	str	r3, [sp, #28]
 8025416:	e6c1      	b.n	802519c <_strtod_l+0x488>
 8025418:	234b      	movs	r3, #75	@ 0x4b
 802541a:	1a9a      	subs	r2, r3, r2
 802541c:	3b4c      	subs	r3, #76	@ 0x4c
 802541e:	4093      	lsls	r3, r2
 8025420:	4019      	ands	r1, r3
 8025422:	000f      	movs	r7, r1
 8025424:	e7a7      	b.n	8025376 <_strtod_l+0x662>
 8025426:	2201      	movs	r2, #1
 8025428:	4252      	negs	r2, r2
 802542a:	409a      	lsls	r2, r3
 802542c:	4016      	ands	r6, r2
 802542e:	e7a2      	b.n	8025376 <_strtod_l+0x662>
 8025430:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025432:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025434:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025436:	1ad4      	subs	r4, r2, r3
 8025438:	2b00      	cmp	r3, #0
 802543a:	db01      	blt.n	8025440 <_strtod_l+0x72c>
 802543c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802543e:	195d      	adds	r5, r3, r5
 8025440:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025442:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025444:	1a5b      	subs	r3, r3, r1
 8025446:	2136      	movs	r1, #54	@ 0x36
 8025448:	189b      	adds	r3, r3, r2
 802544a:	1a8a      	subs	r2, r1, r2
 802544c:	497a      	ldr	r1, [pc, #488]	@ (8025638 <_strtod_l+0x924>)
 802544e:	2001      	movs	r0, #1
 8025450:	468c      	mov	ip, r1
 8025452:	2100      	movs	r1, #0
 8025454:	3b01      	subs	r3, #1
 8025456:	9115      	str	r1, [sp, #84]	@ 0x54
 8025458:	9016      	str	r0, [sp, #88]	@ 0x58
 802545a:	4563      	cmp	r3, ip
 802545c:	da06      	bge.n	802546c <_strtod_l+0x758>
 802545e:	4661      	mov	r1, ip
 8025460:	1ac9      	subs	r1, r1, r3
 8025462:	1a52      	subs	r2, r2, r1
 8025464:	291f      	cmp	r1, #31
 8025466:	dc3f      	bgt.n	80254e8 <_strtod_l+0x7d4>
 8025468:	4088      	lsls	r0, r1
 802546a:	9016      	str	r0, [sp, #88]	@ 0x58
 802546c:	18ab      	adds	r3, r5, r2
 802546e:	930e      	str	r3, [sp, #56]	@ 0x38
 8025470:	18a4      	adds	r4, r4, r2
 8025472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025476:	191c      	adds	r4, r3, r4
 8025478:	002b      	movs	r3, r5
 802547a:	4295      	cmp	r5, r2
 802547c:	dd00      	ble.n	8025480 <_strtod_l+0x76c>
 802547e:	0013      	movs	r3, r2
 8025480:	42a3      	cmp	r3, r4
 8025482:	dd00      	ble.n	8025486 <_strtod_l+0x772>
 8025484:	0023      	movs	r3, r4
 8025486:	2b00      	cmp	r3, #0
 8025488:	dd04      	ble.n	8025494 <_strtod_l+0x780>
 802548a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802548c:	1ae4      	subs	r4, r4, r3
 802548e:	1ad2      	subs	r2, r2, r3
 8025490:	920e      	str	r2, [sp, #56]	@ 0x38
 8025492:	1aed      	subs	r5, r5, r3
 8025494:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025496:	2b00      	cmp	r3, #0
 8025498:	dd16      	ble.n	80254c8 <_strtod_l+0x7b4>
 802549a:	001a      	movs	r2, r3
 802549c:	9907      	ldr	r1, [sp, #28]
 802549e:	9805      	ldr	r0, [sp, #20]
 80254a0:	f002 ff94 	bl	80283cc <__pow5mult>
 80254a4:	9007      	str	r0, [sp, #28]
 80254a6:	2800      	cmp	r0, #0
 80254a8:	d0b3      	beq.n	8025412 <_strtod_l+0x6fe>
 80254aa:	0001      	movs	r1, r0
 80254ac:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80254ae:	9805      	ldr	r0, [sp, #20]
 80254b0:	f002 fee2 	bl	8028278 <__multiply>
 80254b4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80254b6:	2800      	cmp	r0, #0
 80254b8:	d100      	bne.n	80254bc <_strtod_l+0x7a8>
 80254ba:	e66f      	b.n	802519c <_strtod_l+0x488>
 80254bc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80254be:	9805      	ldr	r0, [sp, #20]
 80254c0:	f002 fdbe 	bl	8028040 <_Bfree>
 80254c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254c6:	931e      	str	r3, [sp, #120]	@ 0x78
 80254c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80254ca:	2b00      	cmp	r3, #0
 80254cc:	dc12      	bgt.n	80254f4 <_strtod_l+0x7e0>
 80254ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80254d0:	2b00      	cmp	r3, #0
 80254d2:	dd18      	ble.n	8025506 <_strtod_l+0x7f2>
 80254d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80254d6:	9908      	ldr	r1, [sp, #32]
 80254d8:	9805      	ldr	r0, [sp, #20]
 80254da:	f002 ff77 	bl	80283cc <__pow5mult>
 80254de:	9008      	str	r0, [sp, #32]
 80254e0:	2800      	cmp	r0, #0
 80254e2:	d110      	bne.n	8025506 <_strtod_l+0x7f2>
 80254e4:	2300      	movs	r3, #0
 80254e6:	e658      	b.n	802519a <_strtod_l+0x486>
 80254e8:	4954      	ldr	r1, [pc, #336]	@ (802563c <_strtod_l+0x928>)
 80254ea:	1acb      	subs	r3, r1, r3
 80254ec:	0001      	movs	r1, r0
 80254ee:	4099      	lsls	r1, r3
 80254f0:	9115      	str	r1, [sp, #84]	@ 0x54
 80254f2:	e7ba      	b.n	802546a <_strtod_l+0x756>
 80254f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80254f6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80254f8:	9805      	ldr	r0, [sp, #20]
 80254fa:	f002 ffc3 	bl	8028484 <__lshift>
 80254fe:	901e      	str	r0, [sp, #120]	@ 0x78
 8025500:	2800      	cmp	r0, #0
 8025502:	d1e4      	bne.n	80254ce <_strtod_l+0x7ba>
 8025504:	e64a      	b.n	802519c <_strtod_l+0x488>
 8025506:	2c00      	cmp	r4, #0
 8025508:	dd07      	ble.n	802551a <_strtod_l+0x806>
 802550a:	0022      	movs	r2, r4
 802550c:	9908      	ldr	r1, [sp, #32]
 802550e:	9805      	ldr	r0, [sp, #20]
 8025510:	f002 ffb8 	bl	8028484 <__lshift>
 8025514:	9008      	str	r0, [sp, #32]
 8025516:	2800      	cmp	r0, #0
 8025518:	d0e4      	beq.n	80254e4 <_strtod_l+0x7d0>
 802551a:	2d00      	cmp	r5, #0
 802551c:	dd08      	ble.n	8025530 <_strtod_l+0x81c>
 802551e:	002a      	movs	r2, r5
 8025520:	9907      	ldr	r1, [sp, #28]
 8025522:	9805      	ldr	r0, [sp, #20]
 8025524:	f002 ffae 	bl	8028484 <__lshift>
 8025528:	9007      	str	r0, [sp, #28]
 802552a:	2800      	cmp	r0, #0
 802552c:	d100      	bne.n	8025530 <_strtod_l+0x81c>
 802552e:	e635      	b.n	802519c <_strtod_l+0x488>
 8025530:	9a08      	ldr	r2, [sp, #32]
 8025532:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025534:	9805      	ldr	r0, [sp, #20]
 8025536:	f003 f82d 	bl	8028594 <__mdiff>
 802553a:	9006      	str	r0, [sp, #24]
 802553c:	2800      	cmp	r0, #0
 802553e:	d100      	bne.n	8025542 <_strtod_l+0x82e>
 8025540:	e62c      	b.n	802519c <_strtod_l+0x488>
 8025542:	68c3      	ldr	r3, [r0, #12]
 8025544:	9907      	ldr	r1, [sp, #28]
 8025546:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025548:	2300      	movs	r3, #0
 802554a:	60c3      	str	r3, [r0, #12]
 802554c:	f003 f806 	bl	802855c <__mcmp>
 8025550:	2800      	cmp	r0, #0
 8025552:	da3b      	bge.n	80255cc <_strtod_l+0x8b8>
 8025554:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025556:	4333      	orrs	r3, r6
 8025558:	d167      	bne.n	802562a <_strtod_l+0x916>
 802555a:	033b      	lsls	r3, r7, #12
 802555c:	d165      	bne.n	802562a <_strtod_l+0x916>
 802555e:	22d6      	movs	r2, #214	@ 0xd6
 8025560:	4b37      	ldr	r3, [pc, #220]	@ (8025640 <_strtod_l+0x92c>)
 8025562:	04d2      	lsls	r2, r2, #19
 8025564:	403b      	ands	r3, r7
 8025566:	4293      	cmp	r3, r2
 8025568:	d95f      	bls.n	802562a <_strtod_l+0x916>
 802556a:	9b06      	ldr	r3, [sp, #24]
 802556c:	695b      	ldr	r3, [r3, #20]
 802556e:	2b00      	cmp	r3, #0
 8025570:	d103      	bne.n	802557a <_strtod_l+0x866>
 8025572:	9b06      	ldr	r3, [sp, #24]
 8025574:	691b      	ldr	r3, [r3, #16]
 8025576:	2b01      	cmp	r3, #1
 8025578:	dd57      	ble.n	802562a <_strtod_l+0x916>
 802557a:	9906      	ldr	r1, [sp, #24]
 802557c:	2201      	movs	r2, #1
 802557e:	9805      	ldr	r0, [sp, #20]
 8025580:	f002 ff80 	bl	8028484 <__lshift>
 8025584:	9907      	ldr	r1, [sp, #28]
 8025586:	9006      	str	r0, [sp, #24]
 8025588:	f002 ffe8 	bl	802855c <__mcmp>
 802558c:	2800      	cmp	r0, #0
 802558e:	dd4c      	ble.n	802562a <_strtod_l+0x916>
 8025590:	4b2b      	ldr	r3, [pc, #172]	@ (8025640 <_strtod_l+0x92c>)
 8025592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025594:	403b      	ands	r3, r7
 8025596:	2a00      	cmp	r2, #0
 8025598:	d074      	beq.n	8025684 <_strtod_l+0x970>
 802559a:	22d6      	movs	r2, #214	@ 0xd6
 802559c:	04d2      	lsls	r2, r2, #19
 802559e:	4293      	cmp	r3, r2
 80255a0:	d870      	bhi.n	8025684 <_strtod_l+0x970>
 80255a2:	22dc      	movs	r2, #220	@ 0xdc
 80255a4:	0492      	lsls	r2, r2, #18
 80255a6:	4293      	cmp	r3, r2
 80255a8:	d800      	bhi.n	80255ac <_strtod_l+0x898>
 80255aa:	e693      	b.n	80252d4 <_strtod_l+0x5c0>
 80255ac:	0030      	movs	r0, r6
 80255ae:	0039      	movs	r1, r7
 80255b0:	4b24      	ldr	r3, [pc, #144]	@ (8025644 <_strtod_l+0x930>)
 80255b2:	2200      	movs	r2, #0
 80255b4:	f7dd f9ce 	bl	8002954 <__aeabi_dmul>
 80255b8:	4b21      	ldr	r3, [pc, #132]	@ (8025640 <_strtod_l+0x92c>)
 80255ba:	0006      	movs	r6, r0
 80255bc:	000f      	movs	r7, r1
 80255be:	420b      	tst	r3, r1
 80255c0:	d000      	beq.n	80255c4 <_strtod_l+0x8b0>
 80255c2:	e5f4      	b.n	80251ae <_strtod_l+0x49a>
 80255c4:	2322      	movs	r3, #34	@ 0x22
 80255c6:	9a05      	ldr	r2, [sp, #20]
 80255c8:	6013      	str	r3, [r2, #0]
 80255ca:	e5f0      	b.n	80251ae <_strtod_l+0x49a>
 80255cc:	970e      	str	r7, [sp, #56]	@ 0x38
 80255ce:	2800      	cmp	r0, #0
 80255d0:	d175      	bne.n	80256be <_strtod_l+0x9aa>
 80255d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80255d4:	033b      	lsls	r3, r7, #12
 80255d6:	0b1b      	lsrs	r3, r3, #12
 80255d8:	2a00      	cmp	r2, #0
 80255da:	d039      	beq.n	8025650 <_strtod_l+0x93c>
 80255dc:	4a1a      	ldr	r2, [pc, #104]	@ (8025648 <_strtod_l+0x934>)
 80255de:	4293      	cmp	r3, r2
 80255e0:	d138      	bne.n	8025654 <_strtod_l+0x940>
 80255e2:	2101      	movs	r1, #1
 80255e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80255e6:	4249      	negs	r1, r1
 80255e8:	0032      	movs	r2, r6
 80255ea:	0008      	movs	r0, r1
 80255ec:	2b00      	cmp	r3, #0
 80255ee:	d00b      	beq.n	8025608 <_strtod_l+0x8f4>
 80255f0:	24d4      	movs	r4, #212	@ 0xd4
 80255f2:	4b13      	ldr	r3, [pc, #76]	@ (8025640 <_strtod_l+0x92c>)
 80255f4:	0008      	movs	r0, r1
 80255f6:	403b      	ands	r3, r7
 80255f8:	04e4      	lsls	r4, r4, #19
 80255fa:	42a3      	cmp	r3, r4
 80255fc:	d804      	bhi.n	8025608 <_strtod_l+0x8f4>
 80255fe:	306c      	adds	r0, #108	@ 0x6c
 8025600:	0d1b      	lsrs	r3, r3, #20
 8025602:	1ac3      	subs	r3, r0, r3
 8025604:	4099      	lsls	r1, r3
 8025606:	0008      	movs	r0, r1
 8025608:	4282      	cmp	r2, r0
 802560a:	d123      	bne.n	8025654 <_strtod_l+0x940>
 802560c:	4b0f      	ldr	r3, [pc, #60]	@ (802564c <_strtod_l+0x938>)
 802560e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025610:	4299      	cmp	r1, r3
 8025612:	d102      	bne.n	802561a <_strtod_l+0x906>
 8025614:	3201      	adds	r2, #1
 8025616:	d100      	bne.n	802561a <_strtod_l+0x906>
 8025618:	e5c0      	b.n	802519c <_strtod_l+0x488>
 802561a:	4b09      	ldr	r3, [pc, #36]	@ (8025640 <_strtod_l+0x92c>)
 802561c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802561e:	2600      	movs	r6, #0
 8025620:	401a      	ands	r2, r3
 8025622:	0013      	movs	r3, r2
 8025624:	2280      	movs	r2, #128	@ 0x80
 8025626:	0352      	lsls	r2, r2, #13
 8025628:	189f      	adds	r7, r3, r2
 802562a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802562c:	2b00      	cmp	r3, #0
 802562e:	d1bd      	bne.n	80255ac <_strtod_l+0x898>
 8025630:	e5bd      	b.n	80251ae <_strtod_l+0x49a>
 8025632:	46c0      	nop			@ (mov r8, r8)
 8025634:	0802f6f0 	.word	0x0802f6f0
 8025638:	fffffc02 	.word	0xfffffc02
 802563c:	fffffbe2 	.word	0xfffffbe2
 8025640:	7ff00000 	.word	0x7ff00000
 8025644:	39500000 	.word	0x39500000
 8025648:	000fffff 	.word	0x000fffff
 802564c:	7fefffff 	.word	0x7fefffff
 8025650:	4333      	orrs	r3, r6
 8025652:	d09d      	beq.n	8025590 <_strtod_l+0x87c>
 8025654:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025656:	2b00      	cmp	r3, #0
 8025658:	d01c      	beq.n	8025694 <_strtod_l+0x980>
 802565a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802565c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802565e:	4213      	tst	r3, r2
 8025660:	d0e3      	beq.n	802562a <_strtod_l+0x916>
 8025662:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025664:	0030      	movs	r0, r6
 8025666:	0039      	movs	r1, r7
 8025668:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802566a:	2b00      	cmp	r3, #0
 802566c:	d016      	beq.n	802569c <_strtod_l+0x988>
 802566e:	f7ff fb39 	bl	8024ce4 <sulp>
 8025672:	0002      	movs	r2, r0
 8025674:	000b      	movs	r3, r1
 8025676:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025678:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802567a:	f7dc f96b 	bl	8001954 <__aeabi_dadd>
 802567e:	0006      	movs	r6, r0
 8025680:	000f      	movs	r7, r1
 8025682:	e7d2      	b.n	802562a <_strtod_l+0x916>
 8025684:	2601      	movs	r6, #1
 8025686:	4a92      	ldr	r2, [pc, #584]	@ (80258d0 <_strtod_l+0xbbc>)
 8025688:	4276      	negs	r6, r6
 802568a:	189b      	adds	r3, r3, r2
 802568c:	4a91      	ldr	r2, [pc, #580]	@ (80258d4 <_strtod_l+0xbc0>)
 802568e:	431a      	orrs	r2, r3
 8025690:	0017      	movs	r7, r2
 8025692:	e7ca      	b.n	802562a <_strtod_l+0x916>
 8025694:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025696:	4233      	tst	r3, r6
 8025698:	d0c7      	beq.n	802562a <_strtod_l+0x916>
 802569a:	e7e2      	b.n	8025662 <_strtod_l+0x94e>
 802569c:	f7ff fb22 	bl	8024ce4 <sulp>
 80256a0:	0002      	movs	r2, r0
 80256a2:	000b      	movs	r3, r1
 80256a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80256a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80256a8:	f7dd fc3a 	bl	8002f20 <__aeabi_dsub>
 80256ac:	2200      	movs	r2, #0
 80256ae:	2300      	movs	r3, #0
 80256b0:	0006      	movs	r6, r0
 80256b2:	000f      	movs	r7, r1
 80256b4:	f7da fefc 	bl	80004b0 <__aeabi_dcmpeq>
 80256b8:	2800      	cmp	r0, #0
 80256ba:	d0b6      	beq.n	802562a <_strtod_l+0x916>
 80256bc:	e60a      	b.n	80252d4 <_strtod_l+0x5c0>
 80256be:	9907      	ldr	r1, [sp, #28]
 80256c0:	9806      	ldr	r0, [sp, #24]
 80256c2:	f003 f8cd 	bl	8028860 <__ratio>
 80256c6:	2380      	movs	r3, #128	@ 0x80
 80256c8:	2200      	movs	r2, #0
 80256ca:	05db      	lsls	r3, r3, #23
 80256cc:	0004      	movs	r4, r0
 80256ce:	000d      	movs	r5, r1
 80256d0:	f7da fefe 	bl	80004d0 <__aeabi_dcmple>
 80256d4:	2800      	cmp	r0, #0
 80256d6:	d06c      	beq.n	80257b2 <_strtod_l+0xa9e>
 80256d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80256da:	2b00      	cmp	r3, #0
 80256dc:	d177      	bne.n	80257ce <_strtod_l+0xaba>
 80256de:	2e00      	cmp	r6, #0
 80256e0:	d157      	bne.n	8025792 <_strtod_l+0xa7e>
 80256e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80256e4:	031b      	lsls	r3, r3, #12
 80256e6:	d15a      	bne.n	802579e <_strtod_l+0xa8a>
 80256e8:	2200      	movs	r2, #0
 80256ea:	0020      	movs	r0, r4
 80256ec:	0029      	movs	r1, r5
 80256ee:	4b7a      	ldr	r3, [pc, #488]	@ (80258d8 <_strtod_l+0xbc4>)
 80256f0:	f7da fee4 	bl	80004bc <__aeabi_dcmplt>
 80256f4:	2800      	cmp	r0, #0
 80256f6:	d159      	bne.n	80257ac <_strtod_l+0xa98>
 80256f8:	0020      	movs	r0, r4
 80256fa:	0029      	movs	r1, r5
 80256fc:	2200      	movs	r2, #0
 80256fe:	4b77      	ldr	r3, [pc, #476]	@ (80258dc <_strtod_l+0xbc8>)
 8025700:	f7dd f928 	bl	8002954 <__aeabi_dmul>
 8025704:	0004      	movs	r4, r0
 8025706:	000d      	movs	r5, r1
 8025708:	2380      	movs	r3, #128	@ 0x80
 802570a:	061b      	lsls	r3, r3, #24
 802570c:	18eb      	adds	r3, r5, r3
 802570e:	940a      	str	r4, [sp, #40]	@ 0x28
 8025710:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025712:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025716:	9216      	str	r2, [sp, #88]	@ 0x58
 8025718:	9317      	str	r3, [sp, #92]	@ 0x5c
 802571a:	4a71      	ldr	r2, [pc, #452]	@ (80258e0 <_strtod_l+0xbcc>)
 802571c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802571e:	4013      	ands	r3, r2
 8025720:	9315      	str	r3, [sp, #84]	@ 0x54
 8025722:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025724:	4b6f      	ldr	r3, [pc, #444]	@ (80258e4 <_strtod_l+0xbd0>)
 8025726:	429a      	cmp	r2, r3
 8025728:	d000      	beq.n	802572c <_strtod_l+0xa18>
 802572a:	e087      	b.n	802583c <_strtod_l+0xb28>
 802572c:	4a6e      	ldr	r2, [pc, #440]	@ (80258e8 <_strtod_l+0xbd4>)
 802572e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025730:	4694      	mov	ip, r2
 8025732:	4463      	add	r3, ip
 8025734:	001f      	movs	r7, r3
 8025736:	0030      	movs	r0, r6
 8025738:	0019      	movs	r1, r3
 802573a:	f002 ffc5 	bl	80286c8 <__ulp>
 802573e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025742:	f7dd f907 	bl	8002954 <__aeabi_dmul>
 8025746:	0032      	movs	r2, r6
 8025748:	003b      	movs	r3, r7
 802574a:	f7dc f903 	bl	8001954 <__aeabi_dadd>
 802574e:	4a64      	ldr	r2, [pc, #400]	@ (80258e0 <_strtod_l+0xbcc>)
 8025750:	4b66      	ldr	r3, [pc, #408]	@ (80258ec <_strtod_l+0xbd8>)
 8025752:	0006      	movs	r6, r0
 8025754:	400a      	ands	r2, r1
 8025756:	429a      	cmp	r2, r3
 8025758:	d940      	bls.n	80257dc <_strtod_l+0xac8>
 802575a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802575c:	4a64      	ldr	r2, [pc, #400]	@ (80258f0 <_strtod_l+0xbdc>)
 802575e:	4293      	cmp	r3, r2
 8025760:	d103      	bne.n	802576a <_strtod_l+0xa56>
 8025762:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025764:	3301      	adds	r3, #1
 8025766:	d100      	bne.n	802576a <_strtod_l+0xa56>
 8025768:	e518      	b.n	802519c <_strtod_l+0x488>
 802576a:	2601      	movs	r6, #1
 802576c:	4f60      	ldr	r7, [pc, #384]	@ (80258f0 <_strtod_l+0xbdc>)
 802576e:	4276      	negs	r6, r6
 8025770:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025772:	9805      	ldr	r0, [sp, #20]
 8025774:	f002 fc64 	bl	8028040 <_Bfree>
 8025778:	9908      	ldr	r1, [sp, #32]
 802577a:	9805      	ldr	r0, [sp, #20]
 802577c:	f002 fc60 	bl	8028040 <_Bfree>
 8025780:	9907      	ldr	r1, [sp, #28]
 8025782:	9805      	ldr	r0, [sp, #20]
 8025784:	f002 fc5c 	bl	8028040 <_Bfree>
 8025788:	9906      	ldr	r1, [sp, #24]
 802578a:	9805      	ldr	r0, [sp, #20]
 802578c:	f002 fc58 	bl	8028040 <_Bfree>
 8025790:	e617      	b.n	80253c2 <_strtod_l+0x6ae>
 8025792:	2e01      	cmp	r6, #1
 8025794:	d103      	bne.n	802579e <_strtod_l+0xa8a>
 8025796:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025798:	2b00      	cmp	r3, #0
 802579a:	d100      	bne.n	802579e <_strtod_l+0xa8a>
 802579c:	e59a      	b.n	80252d4 <_strtod_l+0x5c0>
 802579e:	2300      	movs	r3, #0
 80257a0:	4c54      	ldr	r4, [pc, #336]	@ (80258f4 <_strtod_l+0xbe0>)
 80257a2:	4d4d      	ldr	r5, [pc, #308]	@ (80258d8 <_strtod_l+0xbc4>)
 80257a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80257a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80257a8:	2400      	movs	r4, #0
 80257aa:	e7b2      	b.n	8025712 <_strtod_l+0x9fe>
 80257ac:	2400      	movs	r4, #0
 80257ae:	4d4b      	ldr	r5, [pc, #300]	@ (80258dc <_strtod_l+0xbc8>)
 80257b0:	e7aa      	b.n	8025708 <_strtod_l+0x9f4>
 80257b2:	0020      	movs	r0, r4
 80257b4:	0029      	movs	r1, r5
 80257b6:	4b49      	ldr	r3, [pc, #292]	@ (80258dc <_strtod_l+0xbc8>)
 80257b8:	2200      	movs	r2, #0
 80257ba:	f7dd f8cb 	bl	8002954 <__aeabi_dmul>
 80257be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80257c0:	0004      	movs	r4, r0
 80257c2:	000d      	movs	r5, r1
 80257c4:	2b00      	cmp	r3, #0
 80257c6:	d09f      	beq.n	8025708 <_strtod_l+0x9f4>
 80257c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80257ca:	950b      	str	r5, [sp, #44]	@ 0x2c
 80257cc:	e7a1      	b.n	8025712 <_strtod_l+0x9fe>
 80257ce:	2300      	movs	r3, #0
 80257d0:	4c41      	ldr	r4, [pc, #260]	@ (80258d8 <_strtod_l+0xbc4>)
 80257d2:	0025      	movs	r5, r4
 80257d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80257d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80257d8:	001c      	movs	r4, r3
 80257da:	e79a      	b.n	8025712 <_strtod_l+0x9fe>
 80257dc:	23d4      	movs	r3, #212	@ 0xd4
 80257de:	049b      	lsls	r3, r3, #18
 80257e0:	18cf      	adds	r7, r1, r3
 80257e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257e4:	9710      	str	r7, [sp, #64]	@ 0x40
 80257e6:	2b00      	cmp	r3, #0
 80257e8:	d1c2      	bne.n	8025770 <_strtod_l+0xa5c>
 80257ea:	4b3d      	ldr	r3, [pc, #244]	@ (80258e0 <_strtod_l+0xbcc>)
 80257ec:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80257ee:	403b      	ands	r3, r7
 80257f0:	429a      	cmp	r2, r3
 80257f2:	d1bd      	bne.n	8025770 <_strtod_l+0xa5c>
 80257f4:	0020      	movs	r0, r4
 80257f6:	0029      	movs	r1, r5
 80257f8:	f7da ff46 	bl	8000688 <__aeabi_d2lz>
 80257fc:	f7da ff7e 	bl	80006fc <__aeabi_l2d>
 8025800:	0002      	movs	r2, r0
 8025802:	000b      	movs	r3, r1
 8025804:	0020      	movs	r0, r4
 8025806:	0029      	movs	r1, r5
 8025808:	f7dd fb8a 	bl	8002f20 <__aeabi_dsub>
 802580c:	033c      	lsls	r4, r7, #12
 802580e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025810:	0b24      	lsrs	r4, r4, #12
 8025812:	4334      	orrs	r4, r6
 8025814:	900e      	str	r0, [sp, #56]	@ 0x38
 8025816:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025818:	4a37      	ldr	r2, [pc, #220]	@ (80258f8 <_strtod_l+0xbe4>)
 802581a:	431c      	orrs	r4, r3
 802581c:	d052      	beq.n	80258c4 <_strtod_l+0xbb0>
 802581e:	4b37      	ldr	r3, [pc, #220]	@ (80258fc <_strtod_l+0xbe8>)
 8025820:	f7da fe4c 	bl	80004bc <__aeabi_dcmplt>
 8025824:	2800      	cmp	r0, #0
 8025826:	d000      	beq.n	802582a <_strtod_l+0xb16>
 8025828:	e4c1      	b.n	80251ae <_strtod_l+0x49a>
 802582a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802582c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802582e:	4a34      	ldr	r2, [pc, #208]	@ (8025900 <_strtod_l+0xbec>)
 8025830:	4b2a      	ldr	r3, [pc, #168]	@ (80258dc <_strtod_l+0xbc8>)
 8025832:	f7da fe57 	bl	80004e4 <__aeabi_dcmpgt>
 8025836:	2800      	cmp	r0, #0
 8025838:	d09a      	beq.n	8025770 <_strtod_l+0xa5c>
 802583a:	e4b8      	b.n	80251ae <_strtod_l+0x49a>
 802583c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802583e:	2b00      	cmp	r3, #0
 8025840:	d02a      	beq.n	8025898 <_strtod_l+0xb84>
 8025842:	23d4      	movs	r3, #212	@ 0xd4
 8025844:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025846:	04db      	lsls	r3, r3, #19
 8025848:	429a      	cmp	r2, r3
 802584a:	d825      	bhi.n	8025898 <_strtod_l+0xb84>
 802584c:	0020      	movs	r0, r4
 802584e:	0029      	movs	r1, r5
 8025850:	4a2c      	ldr	r2, [pc, #176]	@ (8025904 <_strtod_l+0xbf0>)
 8025852:	4b2d      	ldr	r3, [pc, #180]	@ (8025908 <_strtod_l+0xbf4>)
 8025854:	f7da fe3c 	bl	80004d0 <__aeabi_dcmple>
 8025858:	2800      	cmp	r0, #0
 802585a:	d016      	beq.n	802588a <_strtod_l+0xb76>
 802585c:	0020      	movs	r0, r4
 802585e:	0029      	movs	r1, r5
 8025860:	f7da fef4 	bl	800064c <__aeabi_d2uiz>
 8025864:	2800      	cmp	r0, #0
 8025866:	d100      	bne.n	802586a <_strtod_l+0xb56>
 8025868:	3001      	adds	r0, #1
 802586a:	f7dd ffef 	bl	800384c <__aeabi_ui2d>
 802586e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025870:	0004      	movs	r4, r0
 8025872:	000d      	movs	r5, r1
 8025874:	2b00      	cmp	r3, #0
 8025876:	d122      	bne.n	80258be <_strtod_l+0xbaa>
 8025878:	2380      	movs	r3, #128	@ 0x80
 802587a:	061b      	lsls	r3, r3, #24
 802587c:	18cb      	adds	r3, r1, r3
 802587e:	9018      	str	r0, [sp, #96]	@ 0x60
 8025880:	9319      	str	r3, [sp, #100]	@ 0x64
 8025882:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025884:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025886:	9216      	str	r2, [sp, #88]	@ 0x58
 8025888:	9317      	str	r3, [sp, #92]	@ 0x5c
 802588a:	22d6      	movs	r2, #214	@ 0xd6
 802588c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802588e:	04d2      	lsls	r2, r2, #19
 8025890:	189b      	adds	r3, r3, r2
 8025892:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025894:	1a9b      	subs	r3, r3, r2
 8025896:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025898:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802589a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802589c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802589e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80258a0:	f002 ff12 	bl	80286c8 <__ulp>
 80258a4:	0002      	movs	r2, r0
 80258a6:	000b      	movs	r3, r1
 80258a8:	0030      	movs	r0, r6
 80258aa:	0039      	movs	r1, r7
 80258ac:	f7dd f852 	bl	8002954 <__aeabi_dmul>
 80258b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80258b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80258b4:	f7dc f84e 	bl	8001954 <__aeabi_dadd>
 80258b8:	0006      	movs	r6, r0
 80258ba:	000f      	movs	r7, r1
 80258bc:	e791      	b.n	80257e2 <_strtod_l+0xace>
 80258be:	9418      	str	r4, [sp, #96]	@ 0x60
 80258c0:	9519      	str	r5, [sp, #100]	@ 0x64
 80258c2:	e7de      	b.n	8025882 <_strtod_l+0xb6e>
 80258c4:	4b11      	ldr	r3, [pc, #68]	@ (802590c <_strtod_l+0xbf8>)
 80258c6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80258c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80258ca:	f7da fdf7 	bl	80004bc <__aeabi_dcmplt>
 80258ce:	e7b2      	b.n	8025836 <_strtod_l+0xb22>
 80258d0:	fff00000 	.word	0xfff00000
 80258d4:	000fffff 	.word	0x000fffff
 80258d8:	3ff00000 	.word	0x3ff00000
 80258dc:	3fe00000 	.word	0x3fe00000
 80258e0:	7ff00000 	.word	0x7ff00000
 80258e4:	7fe00000 	.word	0x7fe00000
 80258e8:	fcb00000 	.word	0xfcb00000
 80258ec:	7c9fffff 	.word	0x7c9fffff
 80258f0:	7fefffff 	.word	0x7fefffff
 80258f4:	bff00000 	.word	0xbff00000
 80258f8:	94a03595 	.word	0x94a03595
 80258fc:	3fdfffff 	.word	0x3fdfffff
 8025900:	35afe535 	.word	0x35afe535
 8025904:	ffc00000 	.word	0xffc00000
 8025908:	41dfffff 	.word	0x41dfffff
 802590c:	3fcfffff 	.word	0x3fcfffff

08025910 <strtod>:
 8025910:	b510      	push	{r4, lr}
 8025912:	4c04      	ldr	r4, [pc, #16]	@ (8025924 <strtod+0x14>)
 8025914:	000a      	movs	r2, r1
 8025916:	0001      	movs	r1, r0
 8025918:	4b03      	ldr	r3, [pc, #12]	@ (8025928 <strtod+0x18>)
 802591a:	6820      	ldr	r0, [r4, #0]
 802591c:	f7ff f9fa 	bl	8024d14 <_strtod_l>
 8025920:	bd10      	pop	{r4, pc}
 8025922:	46c0      	nop			@ (mov r8, r8)
 8025924:	200003ec 	.word	0x200003ec
 8025928:	20000280 	.word	0x20000280

0802592c <_strtol_l.isra.0>:
 802592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802592e:	b085      	sub	sp, #20
 8025930:	0017      	movs	r7, r2
 8025932:	001e      	movs	r6, r3
 8025934:	9003      	str	r0, [sp, #12]
 8025936:	9101      	str	r1, [sp, #4]
 8025938:	2b24      	cmp	r3, #36	@ 0x24
 802593a:	d823      	bhi.n	8025984 <_strtol_l.isra.0+0x58>
 802593c:	000c      	movs	r4, r1
 802593e:	2b01      	cmp	r3, #1
 8025940:	d020      	beq.n	8025984 <_strtol_l.isra.0+0x58>
 8025942:	4b3d      	ldr	r3, [pc, #244]	@ (8025a38 <_strtol_l.isra.0+0x10c>)
 8025944:	2208      	movs	r2, #8
 8025946:	469c      	mov	ip, r3
 8025948:	0023      	movs	r3, r4
 802594a:	4661      	mov	r1, ip
 802594c:	781d      	ldrb	r5, [r3, #0]
 802594e:	3401      	adds	r4, #1
 8025950:	5d48      	ldrb	r0, [r1, r5]
 8025952:	0001      	movs	r1, r0
 8025954:	4011      	ands	r1, r2
 8025956:	4210      	tst	r0, r2
 8025958:	d1f6      	bne.n	8025948 <_strtol_l.isra.0+0x1c>
 802595a:	2d2d      	cmp	r5, #45	@ 0x2d
 802595c:	d119      	bne.n	8025992 <_strtol_l.isra.0+0x66>
 802595e:	7825      	ldrb	r5, [r4, #0]
 8025960:	1c9c      	adds	r4, r3, #2
 8025962:	2301      	movs	r3, #1
 8025964:	9300      	str	r3, [sp, #0]
 8025966:	2210      	movs	r2, #16
 8025968:	0033      	movs	r3, r6
 802596a:	4393      	bics	r3, r2
 802596c:	d11d      	bne.n	80259aa <_strtol_l.isra.0+0x7e>
 802596e:	2d30      	cmp	r5, #48	@ 0x30
 8025970:	d115      	bne.n	802599e <_strtol_l.isra.0+0x72>
 8025972:	2120      	movs	r1, #32
 8025974:	7823      	ldrb	r3, [r4, #0]
 8025976:	438b      	bics	r3, r1
 8025978:	2b58      	cmp	r3, #88	@ 0x58
 802597a:	d110      	bne.n	802599e <_strtol_l.isra.0+0x72>
 802597c:	7865      	ldrb	r5, [r4, #1]
 802597e:	3402      	adds	r4, #2
 8025980:	2610      	movs	r6, #16
 8025982:	e012      	b.n	80259aa <_strtol_l.isra.0+0x7e>
 8025984:	f000 ffe8 	bl	8026958 <__errno>
 8025988:	2316      	movs	r3, #22
 802598a:	6003      	str	r3, [r0, #0]
 802598c:	2000      	movs	r0, #0
 802598e:	b005      	add	sp, #20
 8025990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025992:	9100      	str	r1, [sp, #0]
 8025994:	2d2b      	cmp	r5, #43	@ 0x2b
 8025996:	d1e6      	bne.n	8025966 <_strtol_l.isra.0+0x3a>
 8025998:	7825      	ldrb	r5, [r4, #0]
 802599a:	1c9c      	adds	r4, r3, #2
 802599c:	e7e3      	b.n	8025966 <_strtol_l.isra.0+0x3a>
 802599e:	2e00      	cmp	r6, #0
 80259a0:	d1ee      	bne.n	8025980 <_strtol_l.isra.0+0x54>
 80259a2:	360a      	adds	r6, #10
 80259a4:	2d30      	cmp	r5, #48	@ 0x30
 80259a6:	d100      	bne.n	80259aa <_strtol_l.isra.0+0x7e>
 80259a8:	3e02      	subs	r6, #2
 80259aa:	4a24      	ldr	r2, [pc, #144]	@ (8025a3c <_strtol_l.isra.0+0x110>)
 80259ac:	9b00      	ldr	r3, [sp, #0]
 80259ae:	4694      	mov	ip, r2
 80259b0:	4463      	add	r3, ip
 80259b2:	0031      	movs	r1, r6
 80259b4:	0018      	movs	r0, r3
 80259b6:	9302      	str	r3, [sp, #8]
 80259b8:	f7da fc7a 	bl	80002b0 <__aeabi_uidivmod>
 80259bc:	2200      	movs	r2, #0
 80259be:	4684      	mov	ip, r0
 80259c0:	0010      	movs	r0, r2
 80259c2:	002b      	movs	r3, r5
 80259c4:	3b30      	subs	r3, #48	@ 0x30
 80259c6:	2b09      	cmp	r3, #9
 80259c8:	d811      	bhi.n	80259ee <_strtol_l.isra.0+0xc2>
 80259ca:	001d      	movs	r5, r3
 80259cc:	42ae      	cmp	r6, r5
 80259ce:	dd1d      	ble.n	8025a0c <_strtol_l.isra.0+0xe0>
 80259d0:	1c53      	adds	r3, r2, #1
 80259d2:	d009      	beq.n	80259e8 <_strtol_l.isra.0+0xbc>
 80259d4:	2201      	movs	r2, #1
 80259d6:	4252      	negs	r2, r2
 80259d8:	4584      	cmp	ip, r0
 80259da:	d305      	bcc.n	80259e8 <_strtol_l.isra.0+0xbc>
 80259dc:	d101      	bne.n	80259e2 <_strtol_l.isra.0+0xb6>
 80259de:	42a9      	cmp	r1, r5
 80259e0:	db11      	blt.n	8025a06 <_strtol_l.isra.0+0xda>
 80259e2:	2201      	movs	r2, #1
 80259e4:	4370      	muls	r0, r6
 80259e6:	1828      	adds	r0, r5, r0
 80259e8:	7825      	ldrb	r5, [r4, #0]
 80259ea:	3401      	adds	r4, #1
 80259ec:	e7e9      	b.n	80259c2 <_strtol_l.isra.0+0x96>
 80259ee:	002b      	movs	r3, r5
 80259f0:	3b41      	subs	r3, #65	@ 0x41
 80259f2:	2b19      	cmp	r3, #25
 80259f4:	d801      	bhi.n	80259fa <_strtol_l.isra.0+0xce>
 80259f6:	3d37      	subs	r5, #55	@ 0x37
 80259f8:	e7e8      	b.n	80259cc <_strtol_l.isra.0+0xa0>
 80259fa:	002b      	movs	r3, r5
 80259fc:	3b61      	subs	r3, #97	@ 0x61
 80259fe:	2b19      	cmp	r3, #25
 8025a00:	d804      	bhi.n	8025a0c <_strtol_l.isra.0+0xe0>
 8025a02:	3d57      	subs	r5, #87	@ 0x57
 8025a04:	e7e2      	b.n	80259cc <_strtol_l.isra.0+0xa0>
 8025a06:	2201      	movs	r2, #1
 8025a08:	4252      	negs	r2, r2
 8025a0a:	e7ed      	b.n	80259e8 <_strtol_l.isra.0+0xbc>
 8025a0c:	1c53      	adds	r3, r2, #1
 8025a0e:	d108      	bne.n	8025a22 <_strtol_l.isra.0+0xf6>
 8025a10:	2322      	movs	r3, #34	@ 0x22
 8025a12:	9a03      	ldr	r2, [sp, #12]
 8025a14:	9802      	ldr	r0, [sp, #8]
 8025a16:	6013      	str	r3, [r2, #0]
 8025a18:	2f00      	cmp	r7, #0
 8025a1a:	d0b8      	beq.n	802598e <_strtol_l.isra.0+0x62>
 8025a1c:	1e63      	subs	r3, r4, #1
 8025a1e:	9301      	str	r3, [sp, #4]
 8025a20:	e007      	b.n	8025a32 <_strtol_l.isra.0+0x106>
 8025a22:	9b00      	ldr	r3, [sp, #0]
 8025a24:	2b00      	cmp	r3, #0
 8025a26:	d000      	beq.n	8025a2a <_strtol_l.isra.0+0xfe>
 8025a28:	4240      	negs	r0, r0
 8025a2a:	2f00      	cmp	r7, #0
 8025a2c:	d0af      	beq.n	802598e <_strtol_l.isra.0+0x62>
 8025a2e:	2a00      	cmp	r2, #0
 8025a30:	d1f4      	bne.n	8025a1c <_strtol_l.isra.0+0xf0>
 8025a32:	9b01      	ldr	r3, [sp, #4]
 8025a34:	603b      	str	r3, [r7, #0]
 8025a36:	e7aa      	b.n	802598e <_strtol_l.isra.0+0x62>
 8025a38:	0802f719 	.word	0x0802f719
 8025a3c:	7fffffff 	.word	0x7fffffff

08025a40 <strtol>:
 8025a40:	b510      	push	{r4, lr}
 8025a42:	4c04      	ldr	r4, [pc, #16]	@ (8025a54 <strtol+0x14>)
 8025a44:	0013      	movs	r3, r2
 8025a46:	000a      	movs	r2, r1
 8025a48:	0001      	movs	r1, r0
 8025a4a:	6820      	ldr	r0, [r4, #0]
 8025a4c:	f7ff ff6e 	bl	802592c <_strtol_l.isra.0>
 8025a50:	bd10      	pop	{r4, pc}
 8025a52:	46c0      	nop			@ (mov r8, r8)
 8025a54:	200003ec 	.word	0x200003ec

08025a58 <__cvt>:
 8025a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a5a:	001f      	movs	r7, r3
 8025a5c:	2300      	movs	r3, #0
 8025a5e:	0016      	movs	r6, r2
 8025a60:	b08b      	sub	sp, #44	@ 0x2c
 8025a62:	429f      	cmp	r7, r3
 8025a64:	da04      	bge.n	8025a70 <__cvt+0x18>
 8025a66:	2180      	movs	r1, #128	@ 0x80
 8025a68:	0609      	lsls	r1, r1, #24
 8025a6a:	187b      	adds	r3, r7, r1
 8025a6c:	001f      	movs	r7, r3
 8025a6e:	232d      	movs	r3, #45	@ 0x2d
 8025a70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025a72:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025a74:	7013      	strb	r3, [r2, #0]
 8025a76:	2320      	movs	r3, #32
 8025a78:	2203      	movs	r2, #3
 8025a7a:	439d      	bics	r5, r3
 8025a7c:	2d46      	cmp	r5, #70	@ 0x46
 8025a7e:	d007      	beq.n	8025a90 <__cvt+0x38>
 8025a80:	002b      	movs	r3, r5
 8025a82:	3b45      	subs	r3, #69	@ 0x45
 8025a84:	4259      	negs	r1, r3
 8025a86:	414b      	adcs	r3, r1
 8025a88:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025a8a:	3a01      	subs	r2, #1
 8025a8c:	18cb      	adds	r3, r1, r3
 8025a8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8025a90:	ab09      	add	r3, sp, #36	@ 0x24
 8025a92:	9304      	str	r3, [sp, #16]
 8025a94:	ab08      	add	r3, sp, #32
 8025a96:	9303      	str	r3, [sp, #12]
 8025a98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a9a:	9200      	str	r2, [sp, #0]
 8025a9c:	9302      	str	r3, [sp, #8]
 8025a9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025aa0:	0032      	movs	r2, r6
 8025aa2:	9301      	str	r3, [sp, #4]
 8025aa4:	003b      	movs	r3, r7
 8025aa6:	f001 f825 	bl	8026af4 <_dtoa_r>
 8025aaa:	0004      	movs	r4, r0
 8025aac:	2d47      	cmp	r5, #71	@ 0x47
 8025aae:	d11b      	bne.n	8025ae8 <__cvt+0x90>
 8025ab0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025ab2:	07db      	lsls	r3, r3, #31
 8025ab4:	d511      	bpl.n	8025ada <__cvt+0x82>
 8025ab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025ab8:	18c3      	adds	r3, r0, r3
 8025aba:	9307      	str	r3, [sp, #28]
 8025abc:	2200      	movs	r2, #0
 8025abe:	2300      	movs	r3, #0
 8025ac0:	0030      	movs	r0, r6
 8025ac2:	0039      	movs	r1, r7
 8025ac4:	f7da fcf4 	bl	80004b0 <__aeabi_dcmpeq>
 8025ac8:	2800      	cmp	r0, #0
 8025aca:	d001      	beq.n	8025ad0 <__cvt+0x78>
 8025acc:	9b07      	ldr	r3, [sp, #28]
 8025ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8025ad0:	2230      	movs	r2, #48	@ 0x30
 8025ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ad4:	9907      	ldr	r1, [sp, #28]
 8025ad6:	428b      	cmp	r3, r1
 8025ad8:	d320      	bcc.n	8025b1c <__cvt+0xc4>
 8025ada:	0020      	movs	r0, r4
 8025adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ade:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025ae0:	1b1b      	subs	r3, r3, r4
 8025ae2:	6013      	str	r3, [r2, #0]
 8025ae4:	b00b      	add	sp, #44	@ 0x2c
 8025ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025ae8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025aea:	18c3      	adds	r3, r0, r3
 8025aec:	9307      	str	r3, [sp, #28]
 8025aee:	2d46      	cmp	r5, #70	@ 0x46
 8025af0:	d1e4      	bne.n	8025abc <__cvt+0x64>
 8025af2:	7803      	ldrb	r3, [r0, #0]
 8025af4:	2b30      	cmp	r3, #48	@ 0x30
 8025af6:	d10c      	bne.n	8025b12 <__cvt+0xba>
 8025af8:	2200      	movs	r2, #0
 8025afa:	2300      	movs	r3, #0
 8025afc:	0030      	movs	r0, r6
 8025afe:	0039      	movs	r1, r7
 8025b00:	f7da fcd6 	bl	80004b0 <__aeabi_dcmpeq>
 8025b04:	2800      	cmp	r0, #0
 8025b06:	d104      	bne.n	8025b12 <__cvt+0xba>
 8025b08:	2301      	movs	r3, #1
 8025b0a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025b0c:	1a9b      	subs	r3, r3, r2
 8025b0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025b10:	6013      	str	r3, [r2, #0]
 8025b12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b14:	9a07      	ldr	r2, [sp, #28]
 8025b16:	681b      	ldr	r3, [r3, #0]
 8025b18:	18d3      	adds	r3, r2, r3
 8025b1a:	e7ce      	b.n	8025aba <__cvt+0x62>
 8025b1c:	1c59      	adds	r1, r3, #1
 8025b1e:	9109      	str	r1, [sp, #36]	@ 0x24
 8025b20:	701a      	strb	r2, [r3, #0]
 8025b22:	e7d6      	b.n	8025ad2 <__cvt+0x7a>

08025b24 <__exponent>:
 8025b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b26:	232b      	movs	r3, #43	@ 0x2b
 8025b28:	b085      	sub	sp, #20
 8025b2a:	0005      	movs	r5, r0
 8025b2c:	1e0c      	subs	r4, r1, #0
 8025b2e:	7002      	strb	r2, [r0, #0]
 8025b30:	da01      	bge.n	8025b36 <__exponent+0x12>
 8025b32:	424c      	negs	r4, r1
 8025b34:	3302      	adds	r3, #2
 8025b36:	706b      	strb	r3, [r5, #1]
 8025b38:	2c09      	cmp	r4, #9
 8025b3a:	dd2c      	ble.n	8025b96 <__exponent+0x72>
 8025b3c:	ab02      	add	r3, sp, #8
 8025b3e:	1dde      	adds	r6, r3, #7
 8025b40:	0020      	movs	r0, r4
 8025b42:	210a      	movs	r1, #10
 8025b44:	f7da fc9e 	bl	8000484 <__aeabi_idivmod>
 8025b48:	0037      	movs	r7, r6
 8025b4a:	3130      	adds	r1, #48	@ 0x30
 8025b4c:	3e01      	subs	r6, #1
 8025b4e:	0020      	movs	r0, r4
 8025b50:	7031      	strb	r1, [r6, #0]
 8025b52:	210a      	movs	r1, #10
 8025b54:	9401      	str	r4, [sp, #4]
 8025b56:	f7da fbaf 	bl	80002b8 <__divsi3>
 8025b5a:	9b01      	ldr	r3, [sp, #4]
 8025b5c:	0004      	movs	r4, r0
 8025b5e:	2b63      	cmp	r3, #99	@ 0x63
 8025b60:	dcee      	bgt.n	8025b40 <__exponent+0x1c>
 8025b62:	1eba      	subs	r2, r7, #2
 8025b64:	1ca8      	adds	r0, r5, #2
 8025b66:	0001      	movs	r1, r0
 8025b68:	0013      	movs	r3, r2
 8025b6a:	3430      	adds	r4, #48	@ 0x30
 8025b6c:	7014      	strb	r4, [r2, #0]
 8025b6e:	ac02      	add	r4, sp, #8
 8025b70:	3407      	adds	r4, #7
 8025b72:	429c      	cmp	r4, r3
 8025b74:	d80a      	bhi.n	8025b8c <__exponent+0x68>
 8025b76:	2300      	movs	r3, #0
 8025b78:	4294      	cmp	r4, r2
 8025b7a:	d303      	bcc.n	8025b84 <__exponent+0x60>
 8025b7c:	3309      	adds	r3, #9
 8025b7e:	aa02      	add	r2, sp, #8
 8025b80:	189b      	adds	r3, r3, r2
 8025b82:	1bdb      	subs	r3, r3, r7
 8025b84:	18c0      	adds	r0, r0, r3
 8025b86:	1b40      	subs	r0, r0, r5
 8025b88:	b005      	add	sp, #20
 8025b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b8c:	781c      	ldrb	r4, [r3, #0]
 8025b8e:	3301      	adds	r3, #1
 8025b90:	700c      	strb	r4, [r1, #0]
 8025b92:	3101      	adds	r1, #1
 8025b94:	e7eb      	b.n	8025b6e <__exponent+0x4a>
 8025b96:	2330      	movs	r3, #48	@ 0x30
 8025b98:	18e4      	adds	r4, r4, r3
 8025b9a:	70ab      	strb	r3, [r5, #2]
 8025b9c:	1d28      	adds	r0, r5, #4
 8025b9e:	70ec      	strb	r4, [r5, #3]
 8025ba0:	e7f1      	b.n	8025b86 <__exponent+0x62>
	...

08025ba4 <_printf_float>:
 8025ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025ba6:	b097      	sub	sp, #92	@ 0x5c
 8025ba8:	000d      	movs	r5, r1
 8025baa:	920a      	str	r2, [sp, #40]	@ 0x28
 8025bac:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025bae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025bb0:	9009      	str	r0, [sp, #36]	@ 0x24
 8025bb2:	f000 fe7f 	bl	80268b4 <_localeconv_r>
 8025bb6:	6803      	ldr	r3, [r0, #0]
 8025bb8:	0018      	movs	r0, r3
 8025bba:	930d      	str	r3, [sp, #52]	@ 0x34
 8025bbc:	f7da fad6 	bl	800016c <strlen>
 8025bc0:	2300      	movs	r3, #0
 8025bc2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025bc4:	9314      	str	r3, [sp, #80]	@ 0x50
 8025bc6:	7e2b      	ldrb	r3, [r5, #24]
 8025bc8:	2207      	movs	r2, #7
 8025bca:	930c      	str	r3, [sp, #48]	@ 0x30
 8025bcc:	682b      	ldr	r3, [r5, #0]
 8025bce:	930e      	str	r3, [sp, #56]	@ 0x38
 8025bd0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025bd2:	6823      	ldr	r3, [r4, #0]
 8025bd4:	05c9      	lsls	r1, r1, #23
 8025bd6:	d545      	bpl.n	8025c64 <_printf_float+0xc0>
 8025bd8:	189b      	adds	r3, r3, r2
 8025bda:	4393      	bics	r3, r2
 8025bdc:	001a      	movs	r2, r3
 8025bde:	3208      	adds	r2, #8
 8025be0:	6022      	str	r2, [r4, #0]
 8025be2:	2201      	movs	r2, #1
 8025be4:	681e      	ldr	r6, [r3, #0]
 8025be6:	685f      	ldr	r7, [r3, #4]
 8025be8:	007b      	lsls	r3, r7, #1
 8025bea:	085b      	lsrs	r3, r3, #1
 8025bec:	9311      	str	r3, [sp, #68]	@ 0x44
 8025bee:	9610      	str	r6, [sp, #64]	@ 0x40
 8025bf0:	64ae      	str	r6, [r5, #72]	@ 0x48
 8025bf2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8025bf4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025bf6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025bf8:	4ba7      	ldr	r3, [pc, #668]	@ (8025e98 <_printf_float+0x2f4>)
 8025bfa:	4252      	negs	r2, r2
 8025bfc:	f7dd fd9a 	bl	8003734 <__aeabi_dcmpun>
 8025c00:	2800      	cmp	r0, #0
 8025c02:	d131      	bne.n	8025c68 <_printf_float+0xc4>
 8025c04:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025c06:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025c08:	2201      	movs	r2, #1
 8025c0a:	4ba3      	ldr	r3, [pc, #652]	@ (8025e98 <_printf_float+0x2f4>)
 8025c0c:	4252      	negs	r2, r2
 8025c0e:	f7da fc5f 	bl	80004d0 <__aeabi_dcmple>
 8025c12:	2800      	cmp	r0, #0
 8025c14:	d128      	bne.n	8025c68 <_printf_float+0xc4>
 8025c16:	2200      	movs	r2, #0
 8025c18:	2300      	movs	r3, #0
 8025c1a:	0030      	movs	r0, r6
 8025c1c:	0039      	movs	r1, r7
 8025c1e:	f7da fc4d 	bl	80004bc <__aeabi_dcmplt>
 8025c22:	2800      	cmp	r0, #0
 8025c24:	d003      	beq.n	8025c2e <_printf_float+0x8a>
 8025c26:	002b      	movs	r3, r5
 8025c28:	222d      	movs	r2, #45	@ 0x2d
 8025c2a:	3343      	adds	r3, #67	@ 0x43
 8025c2c:	701a      	strb	r2, [r3, #0]
 8025c2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c30:	4f9a      	ldr	r7, [pc, #616]	@ (8025e9c <_printf_float+0x2f8>)
 8025c32:	2b47      	cmp	r3, #71	@ 0x47
 8025c34:	d800      	bhi.n	8025c38 <_printf_float+0x94>
 8025c36:	4f9a      	ldr	r7, [pc, #616]	@ (8025ea0 <_printf_float+0x2fc>)
 8025c38:	2303      	movs	r3, #3
 8025c3a:	2400      	movs	r4, #0
 8025c3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025c3e:	612b      	str	r3, [r5, #16]
 8025c40:	3301      	adds	r3, #1
 8025c42:	439a      	bics	r2, r3
 8025c44:	602a      	str	r2, [r5, #0]
 8025c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025c48:	0029      	movs	r1, r5
 8025c4a:	9300      	str	r3, [sp, #0]
 8025c4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025c50:	aa15      	add	r2, sp, #84	@ 0x54
 8025c52:	f000 f9e5 	bl	8026020 <_printf_common>
 8025c56:	3001      	adds	r0, #1
 8025c58:	d000      	beq.n	8025c5c <_printf_float+0xb8>
 8025c5a:	e09e      	b.n	8025d9a <_printf_float+0x1f6>
 8025c5c:	2001      	movs	r0, #1
 8025c5e:	4240      	negs	r0, r0
 8025c60:	b017      	add	sp, #92	@ 0x5c
 8025c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025c64:	3307      	adds	r3, #7
 8025c66:	e7b8      	b.n	8025bda <_printf_float+0x36>
 8025c68:	0032      	movs	r2, r6
 8025c6a:	003b      	movs	r3, r7
 8025c6c:	0030      	movs	r0, r6
 8025c6e:	0039      	movs	r1, r7
 8025c70:	f7dd fd60 	bl	8003734 <__aeabi_dcmpun>
 8025c74:	2800      	cmp	r0, #0
 8025c76:	d00b      	beq.n	8025c90 <_printf_float+0xec>
 8025c78:	2f00      	cmp	r7, #0
 8025c7a:	da03      	bge.n	8025c84 <_printf_float+0xe0>
 8025c7c:	002b      	movs	r3, r5
 8025c7e:	222d      	movs	r2, #45	@ 0x2d
 8025c80:	3343      	adds	r3, #67	@ 0x43
 8025c82:	701a      	strb	r2, [r3, #0]
 8025c84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c86:	4f87      	ldr	r7, [pc, #540]	@ (8025ea4 <_printf_float+0x300>)
 8025c88:	2b47      	cmp	r3, #71	@ 0x47
 8025c8a:	d8d5      	bhi.n	8025c38 <_printf_float+0x94>
 8025c8c:	4f86      	ldr	r7, [pc, #536]	@ (8025ea8 <_printf_float+0x304>)
 8025c8e:	e7d3      	b.n	8025c38 <_printf_float+0x94>
 8025c90:	2220      	movs	r2, #32
 8025c92:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025c94:	686b      	ldr	r3, [r5, #4]
 8025c96:	4394      	bics	r4, r2
 8025c98:	1c5a      	adds	r2, r3, #1
 8025c9a:	d146      	bne.n	8025d2a <_printf_float+0x186>
 8025c9c:	3307      	adds	r3, #7
 8025c9e:	606b      	str	r3, [r5, #4]
 8025ca0:	2380      	movs	r3, #128	@ 0x80
 8025ca2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025ca4:	00db      	lsls	r3, r3, #3
 8025ca6:	4313      	orrs	r3, r2
 8025ca8:	2200      	movs	r2, #0
 8025caa:	602b      	str	r3, [r5, #0]
 8025cac:	9206      	str	r2, [sp, #24]
 8025cae:	aa14      	add	r2, sp, #80	@ 0x50
 8025cb0:	9205      	str	r2, [sp, #20]
 8025cb2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025cb4:	a90a      	add	r1, sp, #40	@ 0x28
 8025cb6:	9204      	str	r2, [sp, #16]
 8025cb8:	aa13      	add	r2, sp, #76	@ 0x4c
 8025cba:	9203      	str	r2, [sp, #12]
 8025cbc:	2223      	movs	r2, #35	@ 0x23
 8025cbe:	1852      	adds	r2, r2, r1
 8025cc0:	9202      	str	r2, [sp, #8]
 8025cc2:	9301      	str	r3, [sp, #4]
 8025cc4:	686b      	ldr	r3, [r5, #4]
 8025cc6:	0032      	movs	r2, r6
 8025cc8:	9300      	str	r3, [sp, #0]
 8025cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ccc:	003b      	movs	r3, r7
 8025cce:	f7ff fec3 	bl	8025a58 <__cvt>
 8025cd2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025cd4:	0007      	movs	r7, r0
 8025cd6:	2c47      	cmp	r4, #71	@ 0x47
 8025cd8:	d12d      	bne.n	8025d36 <_printf_float+0x192>
 8025cda:	1cd3      	adds	r3, r2, #3
 8025cdc:	db02      	blt.n	8025ce4 <_printf_float+0x140>
 8025cde:	686b      	ldr	r3, [r5, #4]
 8025ce0:	429a      	cmp	r2, r3
 8025ce2:	dd47      	ble.n	8025d74 <_printf_float+0x1d0>
 8025ce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ce6:	3b02      	subs	r3, #2
 8025ce8:	b2db      	uxtb	r3, r3
 8025cea:	930c      	str	r3, [sp, #48]	@ 0x30
 8025cec:	0028      	movs	r0, r5
 8025cee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025cf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025cf2:	3901      	subs	r1, #1
 8025cf4:	3050      	adds	r0, #80	@ 0x50
 8025cf6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025cf8:	f7ff ff14 	bl	8025b24 <__exponent>
 8025cfc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025cfe:	0004      	movs	r4, r0
 8025d00:	1813      	adds	r3, r2, r0
 8025d02:	612b      	str	r3, [r5, #16]
 8025d04:	2a01      	cmp	r2, #1
 8025d06:	dc02      	bgt.n	8025d0e <_printf_float+0x16a>
 8025d08:	682a      	ldr	r2, [r5, #0]
 8025d0a:	07d2      	lsls	r2, r2, #31
 8025d0c:	d501      	bpl.n	8025d12 <_printf_float+0x16e>
 8025d0e:	3301      	adds	r3, #1
 8025d10:	612b      	str	r3, [r5, #16]
 8025d12:	2323      	movs	r3, #35	@ 0x23
 8025d14:	aa0a      	add	r2, sp, #40	@ 0x28
 8025d16:	189b      	adds	r3, r3, r2
 8025d18:	781b      	ldrb	r3, [r3, #0]
 8025d1a:	2b00      	cmp	r3, #0
 8025d1c:	d100      	bne.n	8025d20 <_printf_float+0x17c>
 8025d1e:	e792      	b.n	8025c46 <_printf_float+0xa2>
 8025d20:	002b      	movs	r3, r5
 8025d22:	222d      	movs	r2, #45	@ 0x2d
 8025d24:	3343      	adds	r3, #67	@ 0x43
 8025d26:	701a      	strb	r2, [r3, #0]
 8025d28:	e78d      	b.n	8025c46 <_printf_float+0xa2>
 8025d2a:	2c47      	cmp	r4, #71	@ 0x47
 8025d2c:	d1b8      	bne.n	8025ca0 <_printf_float+0xfc>
 8025d2e:	2b00      	cmp	r3, #0
 8025d30:	d1b6      	bne.n	8025ca0 <_printf_float+0xfc>
 8025d32:	3301      	adds	r3, #1
 8025d34:	e7b3      	b.n	8025c9e <_printf_float+0xfa>
 8025d36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d38:	2b65      	cmp	r3, #101	@ 0x65
 8025d3a:	d9d7      	bls.n	8025cec <_printf_float+0x148>
 8025d3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d3e:	2b66      	cmp	r3, #102	@ 0x66
 8025d40:	d11a      	bne.n	8025d78 <_printf_float+0x1d4>
 8025d42:	686b      	ldr	r3, [r5, #4]
 8025d44:	2a00      	cmp	r2, #0
 8025d46:	dd09      	ble.n	8025d5c <_printf_float+0x1b8>
 8025d48:	612a      	str	r2, [r5, #16]
 8025d4a:	2b00      	cmp	r3, #0
 8025d4c:	d102      	bne.n	8025d54 <_printf_float+0x1b0>
 8025d4e:	6829      	ldr	r1, [r5, #0]
 8025d50:	07c9      	lsls	r1, r1, #31
 8025d52:	d50b      	bpl.n	8025d6c <_printf_float+0x1c8>
 8025d54:	3301      	adds	r3, #1
 8025d56:	189b      	adds	r3, r3, r2
 8025d58:	612b      	str	r3, [r5, #16]
 8025d5a:	e007      	b.n	8025d6c <_printf_float+0x1c8>
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	d103      	bne.n	8025d68 <_printf_float+0x1c4>
 8025d60:	2201      	movs	r2, #1
 8025d62:	6829      	ldr	r1, [r5, #0]
 8025d64:	4211      	tst	r1, r2
 8025d66:	d000      	beq.n	8025d6a <_printf_float+0x1c6>
 8025d68:	1c9a      	adds	r2, r3, #2
 8025d6a:	612a      	str	r2, [r5, #16]
 8025d6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d6e:	2400      	movs	r4, #0
 8025d70:	65ab      	str	r3, [r5, #88]	@ 0x58
 8025d72:	e7ce      	b.n	8025d12 <_printf_float+0x16e>
 8025d74:	2367      	movs	r3, #103	@ 0x67
 8025d76:	930c      	str	r3, [sp, #48]	@ 0x30
 8025d78:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025d7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025d7c:	4299      	cmp	r1, r3
 8025d7e:	db06      	blt.n	8025d8e <_printf_float+0x1ea>
 8025d80:	682b      	ldr	r3, [r5, #0]
 8025d82:	6129      	str	r1, [r5, #16]
 8025d84:	07db      	lsls	r3, r3, #31
 8025d86:	d5f1      	bpl.n	8025d6c <_printf_float+0x1c8>
 8025d88:	3101      	adds	r1, #1
 8025d8a:	6129      	str	r1, [r5, #16]
 8025d8c:	e7ee      	b.n	8025d6c <_printf_float+0x1c8>
 8025d8e:	2201      	movs	r2, #1
 8025d90:	2900      	cmp	r1, #0
 8025d92:	dce0      	bgt.n	8025d56 <_printf_float+0x1b2>
 8025d94:	1892      	adds	r2, r2, r2
 8025d96:	1a52      	subs	r2, r2, r1
 8025d98:	e7dd      	b.n	8025d56 <_printf_float+0x1b2>
 8025d9a:	682a      	ldr	r2, [r5, #0]
 8025d9c:	0553      	lsls	r3, r2, #21
 8025d9e:	d408      	bmi.n	8025db2 <_printf_float+0x20e>
 8025da0:	692b      	ldr	r3, [r5, #16]
 8025da2:	003a      	movs	r2, r7
 8025da4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025da8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025daa:	47a0      	blx	r4
 8025dac:	3001      	adds	r0, #1
 8025dae:	d129      	bne.n	8025e04 <_printf_float+0x260>
 8025db0:	e754      	b.n	8025c5c <_printf_float+0xb8>
 8025db2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025db4:	2b65      	cmp	r3, #101	@ 0x65
 8025db6:	d800      	bhi.n	8025dba <_printf_float+0x216>
 8025db8:	e0db      	b.n	8025f72 <_printf_float+0x3ce>
 8025dba:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025dbc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025dbe:	2200      	movs	r2, #0
 8025dc0:	2300      	movs	r3, #0
 8025dc2:	f7da fb75 	bl	80004b0 <__aeabi_dcmpeq>
 8025dc6:	2800      	cmp	r0, #0
 8025dc8:	d033      	beq.n	8025e32 <_printf_float+0x28e>
 8025dca:	2301      	movs	r3, #1
 8025dcc:	4a37      	ldr	r2, [pc, #220]	@ (8025eac <_printf_float+0x308>)
 8025dce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dd0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025dd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025dd4:	47a0      	blx	r4
 8025dd6:	3001      	adds	r0, #1
 8025dd8:	d100      	bne.n	8025ddc <_printf_float+0x238>
 8025dda:	e73f      	b.n	8025c5c <_printf_float+0xb8>
 8025ddc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025dde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025de0:	42b3      	cmp	r3, r6
 8025de2:	db02      	blt.n	8025dea <_printf_float+0x246>
 8025de4:	682b      	ldr	r3, [r5, #0]
 8025de6:	07db      	lsls	r3, r3, #31
 8025de8:	d50c      	bpl.n	8025e04 <_printf_float+0x260>
 8025dea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025dee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025df0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025df4:	47a0      	blx	r4
 8025df6:	2400      	movs	r4, #0
 8025df8:	3001      	adds	r0, #1
 8025dfa:	d100      	bne.n	8025dfe <_printf_float+0x25a>
 8025dfc:	e72e      	b.n	8025c5c <_printf_float+0xb8>
 8025dfe:	1e73      	subs	r3, r6, #1
 8025e00:	42a3      	cmp	r3, r4
 8025e02:	dc0a      	bgt.n	8025e1a <_printf_float+0x276>
 8025e04:	682b      	ldr	r3, [r5, #0]
 8025e06:	079b      	lsls	r3, r3, #30
 8025e08:	d500      	bpl.n	8025e0c <_printf_float+0x268>
 8025e0a:	e106      	b.n	802601a <_printf_float+0x476>
 8025e0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025e0e:	68e8      	ldr	r0, [r5, #12]
 8025e10:	4298      	cmp	r0, r3
 8025e12:	db00      	blt.n	8025e16 <_printf_float+0x272>
 8025e14:	e724      	b.n	8025c60 <_printf_float+0xbc>
 8025e16:	0018      	movs	r0, r3
 8025e18:	e722      	b.n	8025c60 <_printf_float+0xbc>
 8025e1a:	002a      	movs	r2, r5
 8025e1c:	2301      	movs	r3, #1
 8025e1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e22:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025e24:	321a      	adds	r2, #26
 8025e26:	47b8      	blx	r7
 8025e28:	3001      	adds	r0, #1
 8025e2a:	d100      	bne.n	8025e2e <_printf_float+0x28a>
 8025e2c:	e716      	b.n	8025c5c <_printf_float+0xb8>
 8025e2e:	3401      	adds	r4, #1
 8025e30:	e7e5      	b.n	8025dfe <_printf_float+0x25a>
 8025e32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	dc3b      	bgt.n	8025eb0 <_printf_float+0x30c>
 8025e38:	2301      	movs	r3, #1
 8025e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8025eac <_printf_float+0x308>)
 8025e3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e40:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e42:	47a0      	blx	r4
 8025e44:	3001      	adds	r0, #1
 8025e46:	d100      	bne.n	8025e4a <_printf_float+0x2a6>
 8025e48:	e708      	b.n	8025c5c <_printf_float+0xb8>
 8025e4a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025e4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025e4e:	4333      	orrs	r3, r6
 8025e50:	d102      	bne.n	8025e58 <_printf_float+0x2b4>
 8025e52:	682b      	ldr	r3, [r5, #0]
 8025e54:	07db      	lsls	r3, r3, #31
 8025e56:	d5d5      	bpl.n	8025e04 <_printf_float+0x260>
 8025e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025e5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e60:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e62:	47a0      	blx	r4
 8025e64:	2300      	movs	r3, #0
 8025e66:	3001      	adds	r0, #1
 8025e68:	d100      	bne.n	8025e6c <_printf_float+0x2c8>
 8025e6a:	e6f7      	b.n	8025c5c <_printf_float+0xb8>
 8025e6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025e70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025e72:	425b      	negs	r3, r3
 8025e74:	4293      	cmp	r3, r2
 8025e76:	dc01      	bgt.n	8025e7c <_printf_float+0x2d8>
 8025e78:	0033      	movs	r3, r6
 8025e7a:	e792      	b.n	8025da2 <_printf_float+0x1fe>
 8025e7c:	002a      	movs	r2, r5
 8025e7e:	2301      	movs	r3, #1
 8025e80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e84:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e86:	321a      	adds	r2, #26
 8025e88:	47a0      	blx	r4
 8025e8a:	3001      	adds	r0, #1
 8025e8c:	d100      	bne.n	8025e90 <_printf_float+0x2ec>
 8025e8e:	e6e5      	b.n	8025c5c <_printf_float+0xb8>
 8025e90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e92:	3301      	adds	r3, #1
 8025e94:	e7ea      	b.n	8025e6c <_printf_float+0x2c8>
 8025e96:	46c0      	nop			@ (mov r8, r8)
 8025e98:	7fefffff 	.word	0x7fefffff
 8025e9c:	0802f4f6 	.word	0x0802f4f6
 8025ea0:	0802f4f2 	.word	0x0802f4f2
 8025ea4:	0802f4fe 	.word	0x0802f4fe
 8025ea8:	0802f4fa 	.word	0x0802f4fa
 8025eac:	0802f502 	.word	0x0802f502
 8025eb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025eb2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025eb4:	930c      	str	r3, [sp, #48]	@ 0x30
 8025eb6:	429e      	cmp	r6, r3
 8025eb8:	dd00      	ble.n	8025ebc <_printf_float+0x318>
 8025eba:	001e      	movs	r6, r3
 8025ebc:	2e00      	cmp	r6, #0
 8025ebe:	dc31      	bgt.n	8025f24 <_printf_float+0x380>
 8025ec0:	43f3      	mvns	r3, r6
 8025ec2:	2400      	movs	r4, #0
 8025ec4:	17db      	asrs	r3, r3, #31
 8025ec6:	4033      	ands	r3, r6
 8025ec8:	930e      	str	r3, [sp, #56]	@ 0x38
 8025eca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025ece:	1af3      	subs	r3, r6, r3
 8025ed0:	42a3      	cmp	r3, r4
 8025ed2:	dc30      	bgt.n	8025f36 <_printf_float+0x392>
 8025ed4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025ed6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025ed8:	429a      	cmp	r2, r3
 8025eda:	dc38      	bgt.n	8025f4e <_printf_float+0x3aa>
 8025edc:	682b      	ldr	r3, [r5, #0]
 8025ede:	07db      	lsls	r3, r3, #31
 8025ee0:	d435      	bmi.n	8025f4e <_printf_float+0x3aa>
 8025ee2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025ee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ee6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025ee8:	1b9b      	subs	r3, r3, r6
 8025eea:	1b14      	subs	r4, r2, r4
 8025eec:	429c      	cmp	r4, r3
 8025eee:	dd00      	ble.n	8025ef2 <_printf_float+0x34e>
 8025ef0:	001c      	movs	r4, r3
 8025ef2:	2c00      	cmp	r4, #0
 8025ef4:	dc34      	bgt.n	8025f60 <_printf_float+0x3bc>
 8025ef6:	43e3      	mvns	r3, r4
 8025ef8:	2600      	movs	r6, #0
 8025efa:	17db      	asrs	r3, r3, #31
 8025efc:	401c      	ands	r4, r3
 8025efe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025f00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025f02:	1ad3      	subs	r3, r2, r3
 8025f04:	1b1b      	subs	r3, r3, r4
 8025f06:	42b3      	cmp	r3, r6
 8025f08:	dc00      	bgt.n	8025f0c <_printf_float+0x368>
 8025f0a:	e77b      	b.n	8025e04 <_printf_float+0x260>
 8025f0c:	002a      	movs	r2, r5
 8025f0e:	2301      	movs	r3, #1
 8025f10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f14:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025f16:	321a      	adds	r2, #26
 8025f18:	47b8      	blx	r7
 8025f1a:	3001      	adds	r0, #1
 8025f1c:	d100      	bne.n	8025f20 <_printf_float+0x37c>
 8025f1e:	e69d      	b.n	8025c5c <_printf_float+0xb8>
 8025f20:	3601      	adds	r6, #1
 8025f22:	e7ec      	b.n	8025efe <_printf_float+0x35a>
 8025f24:	0033      	movs	r3, r6
 8025f26:	003a      	movs	r2, r7
 8025f28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025f2e:	47a0      	blx	r4
 8025f30:	3001      	adds	r0, #1
 8025f32:	d1c5      	bne.n	8025ec0 <_printf_float+0x31c>
 8025f34:	e692      	b.n	8025c5c <_printf_float+0xb8>
 8025f36:	002a      	movs	r2, r5
 8025f38:	2301      	movs	r3, #1
 8025f3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f3e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025f40:	321a      	adds	r2, #26
 8025f42:	47b0      	blx	r6
 8025f44:	3001      	adds	r0, #1
 8025f46:	d100      	bne.n	8025f4a <_printf_float+0x3a6>
 8025f48:	e688      	b.n	8025c5c <_printf_float+0xb8>
 8025f4a:	3401      	adds	r4, #1
 8025f4c:	e7bd      	b.n	8025eca <_printf_float+0x326>
 8025f4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025f50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025f52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025f58:	47a0      	blx	r4
 8025f5a:	3001      	adds	r0, #1
 8025f5c:	d1c1      	bne.n	8025ee2 <_printf_float+0x33e>
 8025f5e:	e67d      	b.n	8025c5c <_printf_float+0xb8>
 8025f60:	19ba      	adds	r2, r7, r6
 8025f62:	0023      	movs	r3, r4
 8025f64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f68:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025f6a:	47b0      	blx	r6
 8025f6c:	3001      	adds	r0, #1
 8025f6e:	d1c2      	bne.n	8025ef6 <_printf_float+0x352>
 8025f70:	e674      	b.n	8025c5c <_printf_float+0xb8>
 8025f72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025f74:	930c      	str	r3, [sp, #48]	@ 0x30
 8025f76:	2b01      	cmp	r3, #1
 8025f78:	dc02      	bgt.n	8025f80 <_printf_float+0x3dc>
 8025f7a:	2301      	movs	r3, #1
 8025f7c:	421a      	tst	r2, r3
 8025f7e:	d039      	beq.n	8025ff4 <_printf_float+0x450>
 8025f80:	2301      	movs	r3, #1
 8025f82:	003a      	movs	r2, r7
 8025f84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f88:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025f8a:	47b0      	blx	r6
 8025f8c:	3001      	adds	r0, #1
 8025f8e:	d100      	bne.n	8025f92 <_printf_float+0x3ee>
 8025f90:	e664      	b.n	8025c5c <_printf_float+0xb8>
 8025f92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025f94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025f96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025f9c:	47b0      	blx	r6
 8025f9e:	3001      	adds	r0, #1
 8025fa0:	d100      	bne.n	8025fa4 <_printf_float+0x400>
 8025fa2:	e65b      	b.n	8025c5c <_printf_float+0xb8>
 8025fa4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025fa6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025fa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025faa:	2200      	movs	r2, #0
 8025fac:	3b01      	subs	r3, #1
 8025fae:	930c      	str	r3, [sp, #48]	@ 0x30
 8025fb0:	2300      	movs	r3, #0
 8025fb2:	f7da fa7d 	bl	80004b0 <__aeabi_dcmpeq>
 8025fb6:	2800      	cmp	r0, #0
 8025fb8:	d11a      	bne.n	8025ff0 <_printf_float+0x44c>
 8025fba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025fbc:	1c7a      	adds	r2, r7, #1
 8025fbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025fc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025fc2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025fc4:	47b0      	blx	r6
 8025fc6:	3001      	adds	r0, #1
 8025fc8:	d10e      	bne.n	8025fe8 <_printf_float+0x444>
 8025fca:	e647      	b.n	8025c5c <_printf_float+0xb8>
 8025fcc:	002a      	movs	r2, r5
 8025fce:	2301      	movs	r3, #1
 8025fd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025fd4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025fd6:	321a      	adds	r2, #26
 8025fd8:	47b8      	blx	r7
 8025fda:	3001      	adds	r0, #1
 8025fdc:	d100      	bne.n	8025fe0 <_printf_float+0x43c>
 8025fde:	e63d      	b.n	8025c5c <_printf_float+0xb8>
 8025fe0:	3601      	adds	r6, #1
 8025fe2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025fe4:	429e      	cmp	r6, r3
 8025fe6:	dbf1      	blt.n	8025fcc <_printf_float+0x428>
 8025fe8:	002a      	movs	r2, r5
 8025fea:	0023      	movs	r3, r4
 8025fec:	3250      	adds	r2, #80	@ 0x50
 8025fee:	e6d9      	b.n	8025da4 <_printf_float+0x200>
 8025ff0:	2600      	movs	r6, #0
 8025ff2:	e7f6      	b.n	8025fe2 <_printf_float+0x43e>
 8025ff4:	003a      	movs	r2, r7
 8025ff6:	e7e2      	b.n	8025fbe <_printf_float+0x41a>
 8025ff8:	002a      	movs	r2, r5
 8025ffa:	2301      	movs	r3, #1
 8025ffc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026000:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8026002:	3219      	adds	r2, #25
 8026004:	47b0      	blx	r6
 8026006:	3001      	adds	r0, #1
 8026008:	d100      	bne.n	802600c <_printf_float+0x468>
 802600a:	e627      	b.n	8025c5c <_printf_float+0xb8>
 802600c:	3401      	adds	r4, #1
 802600e:	68eb      	ldr	r3, [r5, #12]
 8026010:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8026012:	1a9b      	subs	r3, r3, r2
 8026014:	42a3      	cmp	r3, r4
 8026016:	dcef      	bgt.n	8025ff8 <_printf_float+0x454>
 8026018:	e6f8      	b.n	8025e0c <_printf_float+0x268>
 802601a:	2400      	movs	r4, #0
 802601c:	e7f7      	b.n	802600e <_printf_float+0x46a>
 802601e:	46c0      	nop			@ (mov r8, r8)

08026020 <_printf_common>:
 8026020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026022:	0016      	movs	r6, r2
 8026024:	9301      	str	r3, [sp, #4]
 8026026:	688a      	ldr	r2, [r1, #8]
 8026028:	690b      	ldr	r3, [r1, #16]
 802602a:	000c      	movs	r4, r1
 802602c:	9000      	str	r0, [sp, #0]
 802602e:	4293      	cmp	r3, r2
 8026030:	da00      	bge.n	8026034 <_printf_common+0x14>
 8026032:	0013      	movs	r3, r2
 8026034:	0022      	movs	r2, r4
 8026036:	6033      	str	r3, [r6, #0]
 8026038:	3243      	adds	r2, #67	@ 0x43
 802603a:	7812      	ldrb	r2, [r2, #0]
 802603c:	2a00      	cmp	r2, #0
 802603e:	d001      	beq.n	8026044 <_printf_common+0x24>
 8026040:	3301      	adds	r3, #1
 8026042:	6033      	str	r3, [r6, #0]
 8026044:	6823      	ldr	r3, [r4, #0]
 8026046:	069b      	lsls	r3, r3, #26
 8026048:	d502      	bpl.n	8026050 <_printf_common+0x30>
 802604a:	6833      	ldr	r3, [r6, #0]
 802604c:	3302      	adds	r3, #2
 802604e:	6033      	str	r3, [r6, #0]
 8026050:	6822      	ldr	r2, [r4, #0]
 8026052:	2306      	movs	r3, #6
 8026054:	0015      	movs	r5, r2
 8026056:	401d      	ands	r5, r3
 8026058:	421a      	tst	r2, r3
 802605a:	d027      	beq.n	80260ac <_printf_common+0x8c>
 802605c:	0023      	movs	r3, r4
 802605e:	3343      	adds	r3, #67	@ 0x43
 8026060:	781b      	ldrb	r3, [r3, #0]
 8026062:	1e5a      	subs	r2, r3, #1
 8026064:	4193      	sbcs	r3, r2
 8026066:	6822      	ldr	r2, [r4, #0]
 8026068:	0692      	lsls	r2, r2, #26
 802606a:	d430      	bmi.n	80260ce <_printf_common+0xae>
 802606c:	0022      	movs	r2, r4
 802606e:	9901      	ldr	r1, [sp, #4]
 8026070:	9800      	ldr	r0, [sp, #0]
 8026072:	9d08      	ldr	r5, [sp, #32]
 8026074:	3243      	adds	r2, #67	@ 0x43
 8026076:	47a8      	blx	r5
 8026078:	3001      	adds	r0, #1
 802607a:	d025      	beq.n	80260c8 <_printf_common+0xa8>
 802607c:	2206      	movs	r2, #6
 802607e:	6823      	ldr	r3, [r4, #0]
 8026080:	2500      	movs	r5, #0
 8026082:	4013      	ands	r3, r2
 8026084:	2b04      	cmp	r3, #4
 8026086:	d105      	bne.n	8026094 <_printf_common+0x74>
 8026088:	6833      	ldr	r3, [r6, #0]
 802608a:	68e5      	ldr	r5, [r4, #12]
 802608c:	1aed      	subs	r5, r5, r3
 802608e:	43eb      	mvns	r3, r5
 8026090:	17db      	asrs	r3, r3, #31
 8026092:	401d      	ands	r5, r3
 8026094:	68a3      	ldr	r3, [r4, #8]
 8026096:	6922      	ldr	r2, [r4, #16]
 8026098:	4293      	cmp	r3, r2
 802609a:	dd01      	ble.n	80260a0 <_printf_common+0x80>
 802609c:	1a9b      	subs	r3, r3, r2
 802609e:	18ed      	adds	r5, r5, r3
 80260a0:	2600      	movs	r6, #0
 80260a2:	42b5      	cmp	r5, r6
 80260a4:	d120      	bne.n	80260e8 <_printf_common+0xc8>
 80260a6:	2000      	movs	r0, #0
 80260a8:	e010      	b.n	80260cc <_printf_common+0xac>
 80260aa:	3501      	adds	r5, #1
 80260ac:	68e3      	ldr	r3, [r4, #12]
 80260ae:	6832      	ldr	r2, [r6, #0]
 80260b0:	1a9b      	subs	r3, r3, r2
 80260b2:	42ab      	cmp	r3, r5
 80260b4:	ddd2      	ble.n	802605c <_printf_common+0x3c>
 80260b6:	0022      	movs	r2, r4
 80260b8:	2301      	movs	r3, #1
 80260ba:	9901      	ldr	r1, [sp, #4]
 80260bc:	9800      	ldr	r0, [sp, #0]
 80260be:	9f08      	ldr	r7, [sp, #32]
 80260c0:	3219      	adds	r2, #25
 80260c2:	47b8      	blx	r7
 80260c4:	3001      	adds	r0, #1
 80260c6:	d1f0      	bne.n	80260aa <_printf_common+0x8a>
 80260c8:	2001      	movs	r0, #1
 80260ca:	4240      	negs	r0, r0
 80260cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80260ce:	2030      	movs	r0, #48	@ 0x30
 80260d0:	18e1      	adds	r1, r4, r3
 80260d2:	3143      	adds	r1, #67	@ 0x43
 80260d4:	7008      	strb	r0, [r1, #0]
 80260d6:	0021      	movs	r1, r4
 80260d8:	1c5a      	adds	r2, r3, #1
 80260da:	3145      	adds	r1, #69	@ 0x45
 80260dc:	7809      	ldrb	r1, [r1, #0]
 80260de:	18a2      	adds	r2, r4, r2
 80260e0:	3243      	adds	r2, #67	@ 0x43
 80260e2:	3302      	adds	r3, #2
 80260e4:	7011      	strb	r1, [r2, #0]
 80260e6:	e7c1      	b.n	802606c <_printf_common+0x4c>
 80260e8:	0022      	movs	r2, r4
 80260ea:	2301      	movs	r3, #1
 80260ec:	9901      	ldr	r1, [sp, #4]
 80260ee:	9800      	ldr	r0, [sp, #0]
 80260f0:	9f08      	ldr	r7, [sp, #32]
 80260f2:	321a      	adds	r2, #26
 80260f4:	47b8      	blx	r7
 80260f6:	3001      	adds	r0, #1
 80260f8:	d0e6      	beq.n	80260c8 <_printf_common+0xa8>
 80260fa:	3601      	adds	r6, #1
 80260fc:	e7d1      	b.n	80260a2 <_printf_common+0x82>
	...

08026100 <_printf_i>:
 8026100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026102:	b08b      	sub	sp, #44	@ 0x2c
 8026104:	9206      	str	r2, [sp, #24]
 8026106:	000a      	movs	r2, r1
 8026108:	3243      	adds	r2, #67	@ 0x43
 802610a:	9307      	str	r3, [sp, #28]
 802610c:	9005      	str	r0, [sp, #20]
 802610e:	9203      	str	r2, [sp, #12]
 8026110:	7e0a      	ldrb	r2, [r1, #24]
 8026112:	000c      	movs	r4, r1
 8026114:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026116:	2a78      	cmp	r2, #120	@ 0x78
 8026118:	d809      	bhi.n	802612e <_printf_i+0x2e>
 802611a:	2a62      	cmp	r2, #98	@ 0x62
 802611c:	d80b      	bhi.n	8026136 <_printf_i+0x36>
 802611e:	2a00      	cmp	r2, #0
 8026120:	d100      	bne.n	8026124 <_printf_i+0x24>
 8026122:	e0ba      	b.n	802629a <_printf_i+0x19a>
 8026124:	497a      	ldr	r1, [pc, #488]	@ (8026310 <_printf_i+0x210>)
 8026126:	9104      	str	r1, [sp, #16]
 8026128:	2a58      	cmp	r2, #88	@ 0x58
 802612a:	d100      	bne.n	802612e <_printf_i+0x2e>
 802612c:	e08e      	b.n	802624c <_printf_i+0x14c>
 802612e:	0025      	movs	r5, r4
 8026130:	3542      	adds	r5, #66	@ 0x42
 8026132:	702a      	strb	r2, [r5, #0]
 8026134:	e022      	b.n	802617c <_printf_i+0x7c>
 8026136:	0010      	movs	r0, r2
 8026138:	3863      	subs	r0, #99	@ 0x63
 802613a:	2815      	cmp	r0, #21
 802613c:	d8f7      	bhi.n	802612e <_printf_i+0x2e>
 802613e:	f7da f827 	bl	8000190 <__gnu_thumb1_case_shi>
 8026142:	0016      	.short	0x0016
 8026144:	fff6001f 	.word	0xfff6001f
 8026148:	fff6fff6 	.word	0xfff6fff6
 802614c:	001ffff6 	.word	0x001ffff6
 8026150:	fff6fff6 	.word	0xfff6fff6
 8026154:	fff6fff6 	.word	0xfff6fff6
 8026158:	0036009f 	.word	0x0036009f
 802615c:	fff6007e 	.word	0xfff6007e
 8026160:	00b0fff6 	.word	0x00b0fff6
 8026164:	0036fff6 	.word	0x0036fff6
 8026168:	fff6fff6 	.word	0xfff6fff6
 802616c:	0082      	.short	0x0082
 802616e:	0025      	movs	r5, r4
 8026170:	681a      	ldr	r2, [r3, #0]
 8026172:	3542      	adds	r5, #66	@ 0x42
 8026174:	1d11      	adds	r1, r2, #4
 8026176:	6019      	str	r1, [r3, #0]
 8026178:	6813      	ldr	r3, [r2, #0]
 802617a:	702b      	strb	r3, [r5, #0]
 802617c:	2301      	movs	r3, #1
 802617e:	e09e      	b.n	80262be <_printf_i+0x1be>
 8026180:	6818      	ldr	r0, [r3, #0]
 8026182:	6809      	ldr	r1, [r1, #0]
 8026184:	1d02      	adds	r2, r0, #4
 8026186:	060d      	lsls	r5, r1, #24
 8026188:	d50b      	bpl.n	80261a2 <_printf_i+0xa2>
 802618a:	6806      	ldr	r6, [r0, #0]
 802618c:	601a      	str	r2, [r3, #0]
 802618e:	2e00      	cmp	r6, #0
 8026190:	da03      	bge.n	802619a <_printf_i+0x9a>
 8026192:	232d      	movs	r3, #45	@ 0x2d
 8026194:	9a03      	ldr	r2, [sp, #12]
 8026196:	4276      	negs	r6, r6
 8026198:	7013      	strb	r3, [r2, #0]
 802619a:	4b5d      	ldr	r3, [pc, #372]	@ (8026310 <_printf_i+0x210>)
 802619c:	270a      	movs	r7, #10
 802619e:	9304      	str	r3, [sp, #16]
 80261a0:	e018      	b.n	80261d4 <_printf_i+0xd4>
 80261a2:	6806      	ldr	r6, [r0, #0]
 80261a4:	601a      	str	r2, [r3, #0]
 80261a6:	0649      	lsls	r1, r1, #25
 80261a8:	d5f1      	bpl.n	802618e <_printf_i+0x8e>
 80261aa:	b236      	sxth	r6, r6
 80261ac:	e7ef      	b.n	802618e <_printf_i+0x8e>
 80261ae:	6808      	ldr	r0, [r1, #0]
 80261b0:	6819      	ldr	r1, [r3, #0]
 80261b2:	c940      	ldmia	r1!, {r6}
 80261b4:	0605      	lsls	r5, r0, #24
 80261b6:	d402      	bmi.n	80261be <_printf_i+0xbe>
 80261b8:	0640      	lsls	r0, r0, #25
 80261ba:	d500      	bpl.n	80261be <_printf_i+0xbe>
 80261bc:	b2b6      	uxth	r6, r6
 80261be:	6019      	str	r1, [r3, #0]
 80261c0:	4b53      	ldr	r3, [pc, #332]	@ (8026310 <_printf_i+0x210>)
 80261c2:	270a      	movs	r7, #10
 80261c4:	9304      	str	r3, [sp, #16]
 80261c6:	2a6f      	cmp	r2, #111	@ 0x6f
 80261c8:	d100      	bne.n	80261cc <_printf_i+0xcc>
 80261ca:	3f02      	subs	r7, #2
 80261cc:	0023      	movs	r3, r4
 80261ce:	2200      	movs	r2, #0
 80261d0:	3343      	adds	r3, #67	@ 0x43
 80261d2:	701a      	strb	r2, [r3, #0]
 80261d4:	6863      	ldr	r3, [r4, #4]
 80261d6:	60a3      	str	r3, [r4, #8]
 80261d8:	2b00      	cmp	r3, #0
 80261da:	db06      	blt.n	80261ea <_printf_i+0xea>
 80261dc:	2104      	movs	r1, #4
 80261de:	6822      	ldr	r2, [r4, #0]
 80261e0:	9d03      	ldr	r5, [sp, #12]
 80261e2:	438a      	bics	r2, r1
 80261e4:	6022      	str	r2, [r4, #0]
 80261e6:	4333      	orrs	r3, r6
 80261e8:	d00c      	beq.n	8026204 <_printf_i+0x104>
 80261ea:	9d03      	ldr	r5, [sp, #12]
 80261ec:	0030      	movs	r0, r6
 80261ee:	0039      	movs	r1, r7
 80261f0:	f7da f85e 	bl	80002b0 <__aeabi_uidivmod>
 80261f4:	9b04      	ldr	r3, [sp, #16]
 80261f6:	3d01      	subs	r5, #1
 80261f8:	5c5b      	ldrb	r3, [r3, r1]
 80261fa:	702b      	strb	r3, [r5, #0]
 80261fc:	0033      	movs	r3, r6
 80261fe:	0006      	movs	r6, r0
 8026200:	429f      	cmp	r7, r3
 8026202:	d9f3      	bls.n	80261ec <_printf_i+0xec>
 8026204:	2f08      	cmp	r7, #8
 8026206:	d109      	bne.n	802621c <_printf_i+0x11c>
 8026208:	6823      	ldr	r3, [r4, #0]
 802620a:	07db      	lsls	r3, r3, #31
 802620c:	d506      	bpl.n	802621c <_printf_i+0x11c>
 802620e:	6862      	ldr	r2, [r4, #4]
 8026210:	6923      	ldr	r3, [r4, #16]
 8026212:	429a      	cmp	r2, r3
 8026214:	dc02      	bgt.n	802621c <_printf_i+0x11c>
 8026216:	2330      	movs	r3, #48	@ 0x30
 8026218:	3d01      	subs	r5, #1
 802621a:	702b      	strb	r3, [r5, #0]
 802621c:	9b03      	ldr	r3, [sp, #12]
 802621e:	1b5b      	subs	r3, r3, r5
 8026220:	6123      	str	r3, [r4, #16]
 8026222:	9b07      	ldr	r3, [sp, #28]
 8026224:	0021      	movs	r1, r4
 8026226:	9300      	str	r3, [sp, #0]
 8026228:	9805      	ldr	r0, [sp, #20]
 802622a:	9b06      	ldr	r3, [sp, #24]
 802622c:	aa09      	add	r2, sp, #36	@ 0x24
 802622e:	f7ff fef7 	bl	8026020 <_printf_common>
 8026232:	3001      	adds	r0, #1
 8026234:	d148      	bne.n	80262c8 <_printf_i+0x1c8>
 8026236:	2001      	movs	r0, #1
 8026238:	4240      	negs	r0, r0
 802623a:	b00b      	add	sp, #44	@ 0x2c
 802623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802623e:	2220      	movs	r2, #32
 8026240:	6809      	ldr	r1, [r1, #0]
 8026242:	430a      	orrs	r2, r1
 8026244:	6022      	str	r2, [r4, #0]
 8026246:	2278      	movs	r2, #120	@ 0x78
 8026248:	4932      	ldr	r1, [pc, #200]	@ (8026314 <_printf_i+0x214>)
 802624a:	9104      	str	r1, [sp, #16]
 802624c:	0021      	movs	r1, r4
 802624e:	3145      	adds	r1, #69	@ 0x45
 8026250:	700a      	strb	r2, [r1, #0]
 8026252:	6819      	ldr	r1, [r3, #0]
 8026254:	6822      	ldr	r2, [r4, #0]
 8026256:	c940      	ldmia	r1!, {r6}
 8026258:	0610      	lsls	r0, r2, #24
 802625a:	d402      	bmi.n	8026262 <_printf_i+0x162>
 802625c:	0650      	lsls	r0, r2, #25
 802625e:	d500      	bpl.n	8026262 <_printf_i+0x162>
 8026260:	b2b6      	uxth	r6, r6
 8026262:	6019      	str	r1, [r3, #0]
 8026264:	07d3      	lsls	r3, r2, #31
 8026266:	d502      	bpl.n	802626e <_printf_i+0x16e>
 8026268:	2320      	movs	r3, #32
 802626a:	4313      	orrs	r3, r2
 802626c:	6023      	str	r3, [r4, #0]
 802626e:	2e00      	cmp	r6, #0
 8026270:	d001      	beq.n	8026276 <_printf_i+0x176>
 8026272:	2710      	movs	r7, #16
 8026274:	e7aa      	b.n	80261cc <_printf_i+0xcc>
 8026276:	2220      	movs	r2, #32
 8026278:	6823      	ldr	r3, [r4, #0]
 802627a:	4393      	bics	r3, r2
 802627c:	6023      	str	r3, [r4, #0]
 802627e:	e7f8      	b.n	8026272 <_printf_i+0x172>
 8026280:	681a      	ldr	r2, [r3, #0]
 8026282:	680d      	ldr	r5, [r1, #0]
 8026284:	1d10      	adds	r0, r2, #4
 8026286:	6949      	ldr	r1, [r1, #20]
 8026288:	6018      	str	r0, [r3, #0]
 802628a:	6813      	ldr	r3, [r2, #0]
 802628c:	062e      	lsls	r6, r5, #24
 802628e:	d501      	bpl.n	8026294 <_printf_i+0x194>
 8026290:	6019      	str	r1, [r3, #0]
 8026292:	e002      	b.n	802629a <_printf_i+0x19a>
 8026294:	066d      	lsls	r5, r5, #25
 8026296:	d5fb      	bpl.n	8026290 <_printf_i+0x190>
 8026298:	8019      	strh	r1, [r3, #0]
 802629a:	2300      	movs	r3, #0
 802629c:	9d03      	ldr	r5, [sp, #12]
 802629e:	6123      	str	r3, [r4, #16]
 80262a0:	e7bf      	b.n	8026222 <_printf_i+0x122>
 80262a2:	681a      	ldr	r2, [r3, #0]
 80262a4:	1d11      	adds	r1, r2, #4
 80262a6:	6019      	str	r1, [r3, #0]
 80262a8:	6815      	ldr	r5, [r2, #0]
 80262aa:	2100      	movs	r1, #0
 80262ac:	0028      	movs	r0, r5
 80262ae:	6862      	ldr	r2, [r4, #4]
 80262b0:	f000 fb7f 	bl	80269b2 <memchr>
 80262b4:	2800      	cmp	r0, #0
 80262b6:	d001      	beq.n	80262bc <_printf_i+0x1bc>
 80262b8:	1b40      	subs	r0, r0, r5
 80262ba:	6060      	str	r0, [r4, #4]
 80262bc:	6863      	ldr	r3, [r4, #4]
 80262be:	6123      	str	r3, [r4, #16]
 80262c0:	2300      	movs	r3, #0
 80262c2:	9a03      	ldr	r2, [sp, #12]
 80262c4:	7013      	strb	r3, [r2, #0]
 80262c6:	e7ac      	b.n	8026222 <_printf_i+0x122>
 80262c8:	002a      	movs	r2, r5
 80262ca:	6923      	ldr	r3, [r4, #16]
 80262cc:	9906      	ldr	r1, [sp, #24]
 80262ce:	9805      	ldr	r0, [sp, #20]
 80262d0:	9d07      	ldr	r5, [sp, #28]
 80262d2:	47a8      	blx	r5
 80262d4:	3001      	adds	r0, #1
 80262d6:	d0ae      	beq.n	8026236 <_printf_i+0x136>
 80262d8:	6823      	ldr	r3, [r4, #0]
 80262da:	079b      	lsls	r3, r3, #30
 80262dc:	d415      	bmi.n	802630a <_printf_i+0x20a>
 80262de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262e0:	68e0      	ldr	r0, [r4, #12]
 80262e2:	4298      	cmp	r0, r3
 80262e4:	daa9      	bge.n	802623a <_printf_i+0x13a>
 80262e6:	0018      	movs	r0, r3
 80262e8:	e7a7      	b.n	802623a <_printf_i+0x13a>
 80262ea:	0022      	movs	r2, r4
 80262ec:	2301      	movs	r3, #1
 80262ee:	9906      	ldr	r1, [sp, #24]
 80262f0:	9805      	ldr	r0, [sp, #20]
 80262f2:	9e07      	ldr	r6, [sp, #28]
 80262f4:	3219      	adds	r2, #25
 80262f6:	47b0      	blx	r6
 80262f8:	3001      	adds	r0, #1
 80262fa:	d09c      	beq.n	8026236 <_printf_i+0x136>
 80262fc:	3501      	adds	r5, #1
 80262fe:	68e3      	ldr	r3, [r4, #12]
 8026300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026302:	1a9b      	subs	r3, r3, r2
 8026304:	42ab      	cmp	r3, r5
 8026306:	dcf0      	bgt.n	80262ea <_printf_i+0x1ea>
 8026308:	e7e9      	b.n	80262de <_printf_i+0x1de>
 802630a:	2500      	movs	r5, #0
 802630c:	e7f7      	b.n	80262fe <_printf_i+0x1fe>
 802630e:	46c0      	nop			@ (mov r8, r8)
 8026310:	0802f504 	.word	0x0802f504
 8026314:	0802f515 	.word	0x0802f515

08026318 <std>:
 8026318:	2300      	movs	r3, #0
 802631a:	b510      	push	{r4, lr}
 802631c:	0004      	movs	r4, r0
 802631e:	6003      	str	r3, [r0, #0]
 8026320:	6043      	str	r3, [r0, #4]
 8026322:	6083      	str	r3, [r0, #8]
 8026324:	8181      	strh	r1, [r0, #12]
 8026326:	6643      	str	r3, [r0, #100]	@ 0x64
 8026328:	81c2      	strh	r2, [r0, #14]
 802632a:	6103      	str	r3, [r0, #16]
 802632c:	6143      	str	r3, [r0, #20]
 802632e:	6183      	str	r3, [r0, #24]
 8026330:	0019      	movs	r1, r3
 8026332:	2208      	movs	r2, #8
 8026334:	305c      	adds	r0, #92	@ 0x5c
 8026336:	f000 fa6b 	bl	8026810 <memset>
 802633a:	4b0b      	ldr	r3, [pc, #44]	@ (8026368 <std+0x50>)
 802633c:	6224      	str	r4, [r4, #32]
 802633e:	6263      	str	r3, [r4, #36]	@ 0x24
 8026340:	4b0a      	ldr	r3, [pc, #40]	@ (802636c <std+0x54>)
 8026342:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026344:	4b0a      	ldr	r3, [pc, #40]	@ (8026370 <std+0x58>)
 8026346:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8026348:	4b0a      	ldr	r3, [pc, #40]	@ (8026374 <std+0x5c>)
 802634a:	6323      	str	r3, [r4, #48]	@ 0x30
 802634c:	4b0a      	ldr	r3, [pc, #40]	@ (8026378 <std+0x60>)
 802634e:	429c      	cmp	r4, r3
 8026350:	d005      	beq.n	802635e <std+0x46>
 8026352:	4b0a      	ldr	r3, [pc, #40]	@ (802637c <std+0x64>)
 8026354:	429c      	cmp	r4, r3
 8026356:	d002      	beq.n	802635e <std+0x46>
 8026358:	4b09      	ldr	r3, [pc, #36]	@ (8026380 <std+0x68>)
 802635a:	429c      	cmp	r4, r3
 802635c:	d103      	bne.n	8026366 <std+0x4e>
 802635e:	0020      	movs	r0, r4
 8026360:	3058      	adds	r0, #88	@ 0x58
 8026362:	f000 fb23 	bl	80269ac <__retarget_lock_init_recursive>
 8026366:	bd10      	pop	{r4, pc}
 8026368:	080265c5 	.word	0x080265c5
 802636c:	080265ed 	.word	0x080265ed
 8026370:	08026625 	.word	0x08026625
 8026374:	08026651 	.word	0x08026651
 8026378:	200037e4 	.word	0x200037e4
 802637c:	2000384c 	.word	0x2000384c
 8026380:	200038b4 	.word	0x200038b4

08026384 <stdio_exit_handler>:
 8026384:	b510      	push	{r4, lr}
 8026386:	4a03      	ldr	r2, [pc, #12]	@ (8026394 <stdio_exit_handler+0x10>)
 8026388:	4903      	ldr	r1, [pc, #12]	@ (8026398 <stdio_exit_handler+0x14>)
 802638a:	4804      	ldr	r0, [pc, #16]	@ (802639c <stdio_exit_handler+0x18>)
 802638c:	f000 f86c 	bl	8026468 <_fwalk_sglue>
 8026390:	bd10      	pop	{r4, pc}
 8026392:	46c0      	nop			@ (mov r8, r8)
 8026394:	20000274 	.word	0x20000274
 8026398:	08028fa9 	.word	0x08028fa9
 802639c:	200003f0 	.word	0x200003f0

080263a0 <cleanup_stdio>:
 80263a0:	6841      	ldr	r1, [r0, #4]
 80263a2:	4b0b      	ldr	r3, [pc, #44]	@ (80263d0 <cleanup_stdio+0x30>)
 80263a4:	b510      	push	{r4, lr}
 80263a6:	0004      	movs	r4, r0
 80263a8:	4299      	cmp	r1, r3
 80263aa:	d001      	beq.n	80263b0 <cleanup_stdio+0x10>
 80263ac:	f002 fdfc 	bl	8028fa8 <_fflush_r>
 80263b0:	68a1      	ldr	r1, [r4, #8]
 80263b2:	4b08      	ldr	r3, [pc, #32]	@ (80263d4 <cleanup_stdio+0x34>)
 80263b4:	4299      	cmp	r1, r3
 80263b6:	d002      	beq.n	80263be <cleanup_stdio+0x1e>
 80263b8:	0020      	movs	r0, r4
 80263ba:	f002 fdf5 	bl	8028fa8 <_fflush_r>
 80263be:	68e1      	ldr	r1, [r4, #12]
 80263c0:	4b05      	ldr	r3, [pc, #20]	@ (80263d8 <cleanup_stdio+0x38>)
 80263c2:	4299      	cmp	r1, r3
 80263c4:	d002      	beq.n	80263cc <cleanup_stdio+0x2c>
 80263c6:	0020      	movs	r0, r4
 80263c8:	f002 fdee 	bl	8028fa8 <_fflush_r>
 80263cc:	bd10      	pop	{r4, pc}
 80263ce:	46c0      	nop			@ (mov r8, r8)
 80263d0:	200037e4 	.word	0x200037e4
 80263d4:	2000384c 	.word	0x2000384c
 80263d8:	200038b4 	.word	0x200038b4

080263dc <global_stdio_init.part.0>:
 80263dc:	b510      	push	{r4, lr}
 80263de:	4b09      	ldr	r3, [pc, #36]	@ (8026404 <global_stdio_init.part.0+0x28>)
 80263e0:	4a09      	ldr	r2, [pc, #36]	@ (8026408 <global_stdio_init.part.0+0x2c>)
 80263e2:	2104      	movs	r1, #4
 80263e4:	601a      	str	r2, [r3, #0]
 80263e6:	4809      	ldr	r0, [pc, #36]	@ (802640c <global_stdio_init.part.0+0x30>)
 80263e8:	2200      	movs	r2, #0
 80263ea:	f7ff ff95 	bl	8026318 <std>
 80263ee:	2201      	movs	r2, #1
 80263f0:	2109      	movs	r1, #9
 80263f2:	4807      	ldr	r0, [pc, #28]	@ (8026410 <global_stdio_init.part.0+0x34>)
 80263f4:	f7ff ff90 	bl	8026318 <std>
 80263f8:	2202      	movs	r2, #2
 80263fa:	2112      	movs	r1, #18
 80263fc:	4805      	ldr	r0, [pc, #20]	@ (8026414 <global_stdio_init.part.0+0x38>)
 80263fe:	f7ff ff8b 	bl	8026318 <std>
 8026402:	bd10      	pop	{r4, pc}
 8026404:	2000391c 	.word	0x2000391c
 8026408:	08026385 	.word	0x08026385
 802640c:	200037e4 	.word	0x200037e4
 8026410:	2000384c 	.word	0x2000384c
 8026414:	200038b4 	.word	0x200038b4

08026418 <__sfp_lock_acquire>:
 8026418:	b510      	push	{r4, lr}
 802641a:	4802      	ldr	r0, [pc, #8]	@ (8026424 <__sfp_lock_acquire+0xc>)
 802641c:	f000 fac7 	bl	80269ae <__retarget_lock_acquire_recursive>
 8026420:	bd10      	pop	{r4, pc}
 8026422:	46c0      	nop			@ (mov r8, r8)
 8026424:	20003925 	.word	0x20003925

08026428 <__sfp_lock_release>:
 8026428:	b510      	push	{r4, lr}
 802642a:	4802      	ldr	r0, [pc, #8]	@ (8026434 <__sfp_lock_release+0xc>)
 802642c:	f000 fac0 	bl	80269b0 <__retarget_lock_release_recursive>
 8026430:	bd10      	pop	{r4, pc}
 8026432:	46c0      	nop			@ (mov r8, r8)
 8026434:	20003925 	.word	0x20003925

08026438 <__sinit>:
 8026438:	b510      	push	{r4, lr}
 802643a:	0004      	movs	r4, r0
 802643c:	f7ff ffec 	bl	8026418 <__sfp_lock_acquire>
 8026440:	6a23      	ldr	r3, [r4, #32]
 8026442:	2b00      	cmp	r3, #0
 8026444:	d002      	beq.n	802644c <__sinit+0x14>
 8026446:	f7ff ffef 	bl	8026428 <__sfp_lock_release>
 802644a:	bd10      	pop	{r4, pc}
 802644c:	4b04      	ldr	r3, [pc, #16]	@ (8026460 <__sinit+0x28>)
 802644e:	6223      	str	r3, [r4, #32]
 8026450:	4b04      	ldr	r3, [pc, #16]	@ (8026464 <__sinit+0x2c>)
 8026452:	681b      	ldr	r3, [r3, #0]
 8026454:	2b00      	cmp	r3, #0
 8026456:	d1f6      	bne.n	8026446 <__sinit+0xe>
 8026458:	f7ff ffc0 	bl	80263dc <global_stdio_init.part.0>
 802645c:	e7f3      	b.n	8026446 <__sinit+0xe>
 802645e:	46c0      	nop			@ (mov r8, r8)
 8026460:	080263a1 	.word	0x080263a1
 8026464:	2000391c 	.word	0x2000391c

08026468 <_fwalk_sglue>:
 8026468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802646a:	0014      	movs	r4, r2
 802646c:	2600      	movs	r6, #0
 802646e:	9000      	str	r0, [sp, #0]
 8026470:	9101      	str	r1, [sp, #4]
 8026472:	68a5      	ldr	r5, [r4, #8]
 8026474:	6867      	ldr	r7, [r4, #4]
 8026476:	3f01      	subs	r7, #1
 8026478:	d504      	bpl.n	8026484 <_fwalk_sglue+0x1c>
 802647a:	6824      	ldr	r4, [r4, #0]
 802647c:	2c00      	cmp	r4, #0
 802647e:	d1f8      	bne.n	8026472 <_fwalk_sglue+0xa>
 8026480:	0030      	movs	r0, r6
 8026482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026484:	89ab      	ldrh	r3, [r5, #12]
 8026486:	2b01      	cmp	r3, #1
 8026488:	d908      	bls.n	802649c <_fwalk_sglue+0x34>
 802648a:	220e      	movs	r2, #14
 802648c:	5eab      	ldrsh	r3, [r5, r2]
 802648e:	3301      	adds	r3, #1
 8026490:	d004      	beq.n	802649c <_fwalk_sglue+0x34>
 8026492:	0029      	movs	r1, r5
 8026494:	9800      	ldr	r0, [sp, #0]
 8026496:	9b01      	ldr	r3, [sp, #4]
 8026498:	4798      	blx	r3
 802649a:	4306      	orrs	r6, r0
 802649c:	3568      	adds	r5, #104	@ 0x68
 802649e:	e7ea      	b.n	8026476 <_fwalk_sglue+0xe>

080264a0 <iprintf>:
 80264a0:	b40f      	push	{r0, r1, r2, r3}
 80264a2:	b507      	push	{r0, r1, r2, lr}
 80264a4:	4905      	ldr	r1, [pc, #20]	@ (80264bc <iprintf+0x1c>)
 80264a6:	ab04      	add	r3, sp, #16
 80264a8:	6808      	ldr	r0, [r1, #0]
 80264aa:	cb04      	ldmia	r3!, {r2}
 80264ac:	6881      	ldr	r1, [r0, #8]
 80264ae:	9301      	str	r3, [sp, #4]
 80264b0:	f002 fbd8 	bl	8028c64 <_vfiprintf_r>
 80264b4:	b003      	add	sp, #12
 80264b6:	bc08      	pop	{r3}
 80264b8:	b004      	add	sp, #16
 80264ba:	4718      	bx	r3
 80264bc:	200003ec 	.word	0x200003ec

080264c0 <_puts_r>:
 80264c0:	6a03      	ldr	r3, [r0, #32]
 80264c2:	b570      	push	{r4, r5, r6, lr}
 80264c4:	0005      	movs	r5, r0
 80264c6:	000e      	movs	r6, r1
 80264c8:	6884      	ldr	r4, [r0, #8]
 80264ca:	2b00      	cmp	r3, #0
 80264cc:	d101      	bne.n	80264d2 <_puts_r+0x12>
 80264ce:	f7ff ffb3 	bl	8026438 <__sinit>
 80264d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80264d4:	07db      	lsls	r3, r3, #31
 80264d6:	d405      	bmi.n	80264e4 <_puts_r+0x24>
 80264d8:	89a3      	ldrh	r3, [r4, #12]
 80264da:	059b      	lsls	r3, r3, #22
 80264dc:	d402      	bmi.n	80264e4 <_puts_r+0x24>
 80264de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80264e0:	f000 fa65 	bl	80269ae <__retarget_lock_acquire_recursive>
 80264e4:	89a3      	ldrh	r3, [r4, #12]
 80264e6:	071b      	lsls	r3, r3, #28
 80264e8:	d502      	bpl.n	80264f0 <_puts_r+0x30>
 80264ea:	6923      	ldr	r3, [r4, #16]
 80264ec:	2b00      	cmp	r3, #0
 80264ee:	d11f      	bne.n	8026530 <_puts_r+0x70>
 80264f0:	0021      	movs	r1, r4
 80264f2:	0028      	movs	r0, r5
 80264f4:	f000 f92e 	bl	8026754 <__swsetup_r>
 80264f8:	2800      	cmp	r0, #0
 80264fa:	d019      	beq.n	8026530 <_puts_r+0x70>
 80264fc:	2501      	movs	r5, #1
 80264fe:	426d      	negs	r5, r5
 8026500:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026502:	07db      	lsls	r3, r3, #31
 8026504:	d405      	bmi.n	8026512 <_puts_r+0x52>
 8026506:	89a3      	ldrh	r3, [r4, #12]
 8026508:	059b      	lsls	r3, r3, #22
 802650a:	d402      	bmi.n	8026512 <_puts_r+0x52>
 802650c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802650e:	f000 fa4f 	bl	80269b0 <__retarget_lock_release_recursive>
 8026512:	0028      	movs	r0, r5
 8026514:	bd70      	pop	{r4, r5, r6, pc}
 8026516:	3601      	adds	r6, #1
 8026518:	60a3      	str	r3, [r4, #8]
 802651a:	2b00      	cmp	r3, #0
 802651c:	da04      	bge.n	8026528 <_puts_r+0x68>
 802651e:	69a2      	ldr	r2, [r4, #24]
 8026520:	429a      	cmp	r2, r3
 8026522:	dc16      	bgt.n	8026552 <_puts_r+0x92>
 8026524:	290a      	cmp	r1, #10
 8026526:	d014      	beq.n	8026552 <_puts_r+0x92>
 8026528:	6823      	ldr	r3, [r4, #0]
 802652a:	1c5a      	adds	r2, r3, #1
 802652c:	6022      	str	r2, [r4, #0]
 802652e:	7019      	strb	r1, [r3, #0]
 8026530:	68a3      	ldr	r3, [r4, #8]
 8026532:	7831      	ldrb	r1, [r6, #0]
 8026534:	3b01      	subs	r3, #1
 8026536:	2900      	cmp	r1, #0
 8026538:	d1ed      	bne.n	8026516 <_puts_r+0x56>
 802653a:	60a3      	str	r3, [r4, #8]
 802653c:	2b00      	cmp	r3, #0
 802653e:	da0f      	bge.n	8026560 <_puts_r+0xa0>
 8026540:	0022      	movs	r2, r4
 8026542:	0028      	movs	r0, r5
 8026544:	310a      	adds	r1, #10
 8026546:	f000 f8c3 	bl	80266d0 <__swbuf_r>
 802654a:	3001      	adds	r0, #1
 802654c:	d0d6      	beq.n	80264fc <_puts_r+0x3c>
 802654e:	250a      	movs	r5, #10
 8026550:	e7d6      	b.n	8026500 <_puts_r+0x40>
 8026552:	0022      	movs	r2, r4
 8026554:	0028      	movs	r0, r5
 8026556:	f000 f8bb 	bl	80266d0 <__swbuf_r>
 802655a:	3001      	adds	r0, #1
 802655c:	d1e8      	bne.n	8026530 <_puts_r+0x70>
 802655e:	e7cd      	b.n	80264fc <_puts_r+0x3c>
 8026560:	6823      	ldr	r3, [r4, #0]
 8026562:	1c5a      	adds	r2, r3, #1
 8026564:	6022      	str	r2, [r4, #0]
 8026566:	220a      	movs	r2, #10
 8026568:	701a      	strb	r2, [r3, #0]
 802656a:	e7f0      	b.n	802654e <_puts_r+0x8e>

0802656c <puts>:
 802656c:	b510      	push	{r4, lr}
 802656e:	4b03      	ldr	r3, [pc, #12]	@ (802657c <puts+0x10>)
 8026570:	0001      	movs	r1, r0
 8026572:	6818      	ldr	r0, [r3, #0]
 8026574:	f7ff ffa4 	bl	80264c0 <_puts_r>
 8026578:	bd10      	pop	{r4, pc}
 802657a:	46c0      	nop			@ (mov r8, r8)
 802657c:	200003ec 	.word	0x200003ec

08026580 <siprintf>:
 8026580:	b40e      	push	{r1, r2, r3}
 8026582:	b510      	push	{r4, lr}
 8026584:	2400      	movs	r4, #0
 8026586:	490c      	ldr	r1, [pc, #48]	@ (80265b8 <siprintf+0x38>)
 8026588:	b09d      	sub	sp, #116	@ 0x74
 802658a:	ab1f      	add	r3, sp, #124	@ 0x7c
 802658c:	9002      	str	r0, [sp, #8]
 802658e:	9006      	str	r0, [sp, #24]
 8026590:	9107      	str	r1, [sp, #28]
 8026592:	9104      	str	r1, [sp, #16]
 8026594:	4809      	ldr	r0, [pc, #36]	@ (80265bc <siprintf+0x3c>)
 8026596:	490a      	ldr	r1, [pc, #40]	@ (80265c0 <siprintf+0x40>)
 8026598:	cb04      	ldmia	r3!, {r2}
 802659a:	9105      	str	r1, [sp, #20]
 802659c:	6800      	ldr	r0, [r0, #0]
 802659e:	a902      	add	r1, sp, #8
 80265a0:	9301      	str	r3, [sp, #4]
 80265a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80265a4:	f002 fa38 	bl	8028a18 <_svfiprintf_r>
 80265a8:	9b02      	ldr	r3, [sp, #8]
 80265aa:	701c      	strb	r4, [r3, #0]
 80265ac:	b01d      	add	sp, #116	@ 0x74
 80265ae:	bc10      	pop	{r4}
 80265b0:	bc08      	pop	{r3}
 80265b2:	b003      	add	sp, #12
 80265b4:	4718      	bx	r3
 80265b6:	46c0      	nop			@ (mov r8, r8)
 80265b8:	7fffffff 	.word	0x7fffffff
 80265bc:	200003ec 	.word	0x200003ec
 80265c0:	ffff0208 	.word	0xffff0208

080265c4 <__sread>:
 80265c4:	b570      	push	{r4, r5, r6, lr}
 80265c6:	000c      	movs	r4, r1
 80265c8:	250e      	movs	r5, #14
 80265ca:	5f49      	ldrsh	r1, [r1, r5]
 80265cc:	f000 f99c 	bl	8026908 <_read_r>
 80265d0:	2800      	cmp	r0, #0
 80265d2:	db03      	blt.n	80265dc <__sread+0x18>
 80265d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80265d6:	181b      	adds	r3, r3, r0
 80265d8:	6563      	str	r3, [r4, #84]	@ 0x54
 80265da:	bd70      	pop	{r4, r5, r6, pc}
 80265dc:	89a3      	ldrh	r3, [r4, #12]
 80265de:	4a02      	ldr	r2, [pc, #8]	@ (80265e8 <__sread+0x24>)
 80265e0:	4013      	ands	r3, r2
 80265e2:	81a3      	strh	r3, [r4, #12]
 80265e4:	e7f9      	b.n	80265da <__sread+0x16>
 80265e6:	46c0      	nop			@ (mov r8, r8)
 80265e8:	ffffefff 	.word	0xffffefff

080265ec <__swrite>:
 80265ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80265ee:	001f      	movs	r7, r3
 80265f0:	898b      	ldrh	r3, [r1, #12]
 80265f2:	0005      	movs	r5, r0
 80265f4:	000c      	movs	r4, r1
 80265f6:	0016      	movs	r6, r2
 80265f8:	05db      	lsls	r3, r3, #23
 80265fa:	d505      	bpl.n	8026608 <__swrite+0x1c>
 80265fc:	230e      	movs	r3, #14
 80265fe:	5ec9      	ldrsh	r1, [r1, r3]
 8026600:	2200      	movs	r2, #0
 8026602:	2302      	movs	r3, #2
 8026604:	f000 f96c 	bl	80268e0 <_lseek_r>
 8026608:	89a3      	ldrh	r3, [r4, #12]
 802660a:	4a05      	ldr	r2, [pc, #20]	@ (8026620 <__swrite+0x34>)
 802660c:	0028      	movs	r0, r5
 802660e:	4013      	ands	r3, r2
 8026610:	81a3      	strh	r3, [r4, #12]
 8026612:	0032      	movs	r2, r6
 8026614:	230e      	movs	r3, #14
 8026616:	5ee1      	ldrsh	r1, [r4, r3]
 8026618:	003b      	movs	r3, r7
 802661a:	f000 f989 	bl	8026930 <_write_r>
 802661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026620:	ffffefff 	.word	0xffffefff

08026624 <__sseek>:
 8026624:	b570      	push	{r4, r5, r6, lr}
 8026626:	000c      	movs	r4, r1
 8026628:	250e      	movs	r5, #14
 802662a:	5f49      	ldrsh	r1, [r1, r5]
 802662c:	f000 f958 	bl	80268e0 <_lseek_r>
 8026630:	89a3      	ldrh	r3, [r4, #12]
 8026632:	1c42      	adds	r2, r0, #1
 8026634:	d103      	bne.n	802663e <__sseek+0x1a>
 8026636:	4a05      	ldr	r2, [pc, #20]	@ (802664c <__sseek+0x28>)
 8026638:	4013      	ands	r3, r2
 802663a:	81a3      	strh	r3, [r4, #12]
 802663c:	bd70      	pop	{r4, r5, r6, pc}
 802663e:	2280      	movs	r2, #128	@ 0x80
 8026640:	0152      	lsls	r2, r2, #5
 8026642:	4313      	orrs	r3, r2
 8026644:	81a3      	strh	r3, [r4, #12]
 8026646:	6560      	str	r0, [r4, #84]	@ 0x54
 8026648:	e7f8      	b.n	802663c <__sseek+0x18>
 802664a:	46c0      	nop			@ (mov r8, r8)
 802664c:	ffffefff 	.word	0xffffefff

08026650 <__sclose>:
 8026650:	b510      	push	{r4, lr}
 8026652:	230e      	movs	r3, #14
 8026654:	5ec9      	ldrsh	r1, [r1, r3]
 8026656:	f000 f931 	bl	80268bc <_close_r>
 802665a:	bd10      	pop	{r4, pc}

0802665c <_vsniprintf_r>:
 802665c:	b530      	push	{r4, r5, lr}
 802665e:	0005      	movs	r5, r0
 8026660:	0014      	movs	r4, r2
 8026662:	0008      	movs	r0, r1
 8026664:	001a      	movs	r2, r3
 8026666:	b09b      	sub	sp, #108	@ 0x6c
 8026668:	2c00      	cmp	r4, #0
 802666a:	da05      	bge.n	8026678 <_vsniprintf_r+0x1c>
 802666c:	238b      	movs	r3, #139	@ 0x8b
 802666e:	2001      	movs	r0, #1
 8026670:	602b      	str	r3, [r5, #0]
 8026672:	4240      	negs	r0, r0
 8026674:	b01b      	add	sp, #108	@ 0x6c
 8026676:	bd30      	pop	{r4, r5, pc}
 8026678:	2382      	movs	r3, #130	@ 0x82
 802667a:	4669      	mov	r1, sp
 802667c:	009b      	lsls	r3, r3, #2
 802667e:	818b      	strh	r3, [r1, #12]
 8026680:	2100      	movs	r1, #0
 8026682:	9000      	str	r0, [sp, #0]
 8026684:	9119      	str	r1, [sp, #100]	@ 0x64
 8026686:	9004      	str	r0, [sp, #16]
 8026688:	428c      	cmp	r4, r1
 802668a:	d000      	beq.n	802668e <_vsniprintf_r+0x32>
 802668c:	1e61      	subs	r1, r4, #1
 802668e:	2301      	movs	r3, #1
 8026690:	9102      	str	r1, [sp, #8]
 8026692:	9105      	str	r1, [sp, #20]
 8026694:	4669      	mov	r1, sp
 8026696:	425b      	negs	r3, r3
 8026698:	81cb      	strh	r3, [r1, #14]
 802669a:	0028      	movs	r0, r5
 802669c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802669e:	f002 f9bb 	bl	8028a18 <_svfiprintf_r>
 80266a2:	1c43      	adds	r3, r0, #1
 80266a4:	da01      	bge.n	80266aa <_vsniprintf_r+0x4e>
 80266a6:	238b      	movs	r3, #139	@ 0x8b
 80266a8:	602b      	str	r3, [r5, #0]
 80266aa:	2c00      	cmp	r4, #0
 80266ac:	d0e2      	beq.n	8026674 <_vsniprintf_r+0x18>
 80266ae:	2200      	movs	r2, #0
 80266b0:	9b00      	ldr	r3, [sp, #0]
 80266b2:	701a      	strb	r2, [r3, #0]
 80266b4:	e7de      	b.n	8026674 <_vsniprintf_r+0x18>
	...

080266b8 <vsniprintf>:
 80266b8:	b513      	push	{r0, r1, r4, lr}
 80266ba:	4c04      	ldr	r4, [pc, #16]	@ (80266cc <vsniprintf+0x14>)
 80266bc:	9300      	str	r3, [sp, #0]
 80266be:	0013      	movs	r3, r2
 80266c0:	000a      	movs	r2, r1
 80266c2:	0001      	movs	r1, r0
 80266c4:	6820      	ldr	r0, [r4, #0]
 80266c6:	f7ff ffc9 	bl	802665c <_vsniprintf_r>
 80266ca:	bd16      	pop	{r1, r2, r4, pc}
 80266cc:	200003ec 	.word	0x200003ec

080266d0 <__swbuf_r>:
 80266d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266d2:	0006      	movs	r6, r0
 80266d4:	000d      	movs	r5, r1
 80266d6:	0014      	movs	r4, r2
 80266d8:	2800      	cmp	r0, #0
 80266da:	d004      	beq.n	80266e6 <__swbuf_r+0x16>
 80266dc:	6a03      	ldr	r3, [r0, #32]
 80266de:	2b00      	cmp	r3, #0
 80266e0:	d101      	bne.n	80266e6 <__swbuf_r+0x16>
 80266e2:	f7ff fea9 	bl	8026438 <__sinit>
 80266e6:	69a3      	ldr	r3, [r4, #24]
 80266e8:	60a3      	str	r3, [r4, #8]
 80266ea:	89a3      	ldrh	r3, [r4, #12]
 80266ec:	071b      	lsls	r3, r3, #28
 80266ee:	d502      	bpl.n	80266f6 <__swbuf_r+0x26>
 80266f0:	6923      	ldr	r3, [r4, #16]
 80266f2:	2b00      	cmp	r3, #0
 80266f4:	d109      	bne.n	802670a <__swbuf_r+0x3a>
 80266f6:	0021      	movs	r1, r4
 80266f8:	0030      	movs	r0, r6
 80266fa:	f000 f82b 	bl	8026754 <__swsetup_r>
 80266fe:	2800      	cmp	r0, #0
 8026700:	d003      	beq.n	802670a <__swbuf_r+0x3a>
 8026702:	2501      	movs	r5, #1
 8026704:	426d      	negs	r5, r5
 8026706:	0028      	movs	r0, r5
 8026708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802670a:	6923      	ldr	r3, [r4, #16]
 802670c:	6820      	ldr	r0, [r4, #0]
 802670e:	b2ef      	uxtb	r7, r5
 8026710:	1ac0      	subs	r0, r0, r3
 8026712:	6963      	ldr	r3, [r4, #20]
 8026714:	b2ed      	uxtb	r5, r5
 8026716:	4283      	cmp	r3, r0
 8026718:	dc05      	bgt.n	8026726 <__swbuf_r+0x56>
 802671a:	0021      	movs	r1, r4
 802671c:	0030      	movs	r0, r6
 802671e:	f002 fc43 	bl	8028fa8 <_fflush_r>
 8026722:	2800      	cmp	r0, #0
 8026724:	d1ed      	bne.n	8026702 <__swbuf_r+0x32>
 8026726:	68a3      	ldr	r3, [r4, #8]
 8026728:	3001      	adds	r0, #1
 802672a:	3b01      	subs	r3, #1
 802672c:	60a3      	str	r3, [r4, #8]
 802672e:	6823      	ldr	r3, [r4, #0]
 8026730:	1c5a      	adds	r2, r3, #1
 8026732:	6022      	str	r2, [r4, #0]
 8026734:	701f      	strb	r7, [r3, #0]
 8026736:	6963      	ldr	r3, [r4, #20]
 8026738:	4283      	cmp	r3, r0
 802673a:	d004      	beq.n	8026746 <__swbuf_r+0x76>
 802673c:	89a3      	ldrh	r3, [r4, #12]
 802673e:	07db      	lsls	r3, r3, #31
 8026740:	d5e1      	bpl.n	8026706 <__swbuf_r+0x36>
 8026742:	2d0a      	cmp	r5, #10
 8026744:	d1df      	bne.n	8026706 <__swbuf_r+0x36>
 8026746:	0021      	movs	r1, r4
 8026748:	0030      	movs	r0, r6
 802674a:	f002 fc2d 	bl	8028fa8 <_fflush_r>
 802674e:	2800      	cmp	r0, #0
 8026750:	d0d9      	beq.n	8026706 <__swbuf_r+0x36>
 8026752:	e7d6      	b.n	8026702 <__swbuf_r+0x32>

08026754 <__swsetup_r>:
 8026754:	4b2d      	ldr	r3, [pc, #180]	@ (802680c <__swsetup_r+0xb8>)
 8026756:	b570      	push	{r4, r5, r6, lr}
 8026758:	0005      	movs	r5, r0
 802675a:	6818      	ldr	r0, [r3, #0]
 802675c:	000c      	movs	r4, r1
 802675e:	2800      	cmp	r0, #0
 8026760:	d004      	beq.n	802676c <__swsetup_r+0x18>
 8026762:	6a03      	ldr	r3, [r0, #32]
 8026764:	2b00      	cmp	r3, #0
 8026766:	d101      	bne.n	802676c <__swsetup_r+0x18>
 8026768:	f7ff fe66 	bl	8026438 <__sinit>
 802676c:	220c      	movs	r2, #12
 802676e:	5ea3      	ldrsh	r3, [r4, r2]
 8026770:	071a      	lsls	r2, r3, #28
 8026772:	d423      	bmi.n	80267bc <__swsetup_r+0x68>
 8026774:	06da      	lsls	r2, r3, #27
 8026776:	d407      	bmi.n	8026788 <__swsetup_r+0x34>
 8026778:	2209      	movs	r2, #9
 802677a:	602a      	str	r2, [r5, #0]
 802677c:	2240      	movs	r2, #64	@ 0x40
 802677e:	2001      	movs	r0, #1
 8026780:	4313      	orrs	r3, r2
 8026782:	81a3      	strh	r3, [r4, #12]
 8026784:	4240      	negs	r0, r0
 8026786:	e03a      	b.n	80267fe <__swsetup_r+0xaa>
 8026788:	075b      	lsls	r3, r3, #29
 802678a:	d513      	bpl.n	80267b4 <__swsetup_r+0x60>
 802678c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802678e:	2900      	cmp	r1, #0
 8026790:	d008      	beq.n	80267a4 <__swsetup_r+0x50>
 8026792:	0023      	movs	r3, r4
 8026794:	3344      	adds	r3, #68	@ 0x44
 8026796:	4299      	cmp	r1, r3
 8026798:	d002      	beq.n	80267a0 <__swsetup_r+0x4c>
 802679a:	0028      	movs	r0, r5
 802679c:	f000 ff9a 	bl	80276d4 <_free_r>
 80267a0:	2300      	movs	r3, #0
 80267a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80267a4:	2224      	movs	r2, #36	@ 0x24
 80267a6:	89a3      	ldrh	r3, [r4, #12]
 80267a8:	4393      	bics	r3, r2
 80267aa:	81a3      	strh	r3, [r4, #12]
 80267ac:	2300      	movs	r3, #0
 80267ae:	6063      	str	r3, [r4, #4]
 80267b0:	6923      	ldr	r3, [r4, #16]
 80267b2:	6023      	str	r3, [r4, #0]
 80267b4:	2308      	movs	r3, #8
 80267b6:	89a2      	ldrh	r2, [r4, #12]
 80267b8:	4313      	orrs	r3, r2
 80267ba:	81a3      	strh	r3, [r4, #12]
 80267bc:	6923      	ldr	r3, [r4, #16]
 80267be:	2b00      	cmp	r3, #0
 80267c0:	d10b      	bne.n	80267da <__swsetup_r+0x86>
 80267c2:	21a0      	movs	r1, #160	@ 0xa0
 80267c4:	2280      	movs	r2, #128	@ 0x80
 80267c6:	89a3      	ldrh	r3, [r4, #12]
 80267c8:	0089      	lsls	r1, r1, #2
 80267ca:	0092      	lsls	r2, r2, #2
 80267cc:	400b      	ands	r3, r1
 80267ce:	4293      	cmp	r3, r2
 80267d0:	d003      	beq.n	80267da <__swsetup_r+0x86>
 80267d2:	0021      	movs	r1, r4
 80267d4:	0028      	movs	r0, r5
 80267d6:	f002 fc3d 	bl	8029054 <__smakebuf_r>
 80267da:	220c      	movs	r2, #12
 80267dc:	5ea3      	ldrsh	r3, [r4, r2]
 80267de:	2101      	movs	r1, #1
 80267e0:	001a      	movs	r2, r3
 80267e2:	400a      	ands	r2, r1
 80267e4:	420b      	tst	r3, r1
 80267e6:	d00b      	beq.n	8026800 <__swsetup_r+0xac>
 80267e8:	2200      	movs	r2, #0
 80267ea:	60a2      	str	r2, [r4, #8]
 80267ec:	6962      	ldr	r2, [r4, #20]
 80267ee:	4252      	negs	r2, r2
 80267f0:	61a2      	str	r2, [r4, #24]
 80267f2:	2000      	movs	r0, #0
 80267f4:	6922      	ldr	r2, [r4, #16]
 80267f6:	4282      	cmp	r2, r0
 80267f8:	d101      	bne.n	80267fe <__swsetup_r+0xaa>
 80267fa:	061a      	lsls	r2, r3, #24
 80267fc:	d4be      	bmi.n	802677c <__swsetup_r+0x28>
 80267fe:	bd70      	pop	{r4, r5, r6, pc}
 8026800:	0799      	lsls	r1, r3, #30
 8026802:	d400      	bmi.n	8026806 <__swsetup_r+0xb2>
 8026804:	6962      	ldr	r2, [r4, #20]
 8026806:	60a2      	str	r2, [r4, #8]
 8026808:	e7f3      	b.n	80267f2 <__swsetup_r+0x9e>
 802680a:	46c0      	nop			@ (mov r8, r8)
 802680c:	200003ec 	.word	0x200003ec

08026810 <memset>:
 8026810:	0003      	movs	r3, r0
 8026812:	1882      	adds	r2, r0, r2
 8026814:	4293      	cmp	r3, r2
 8026816:	d100      	bne.n	802681a <memset+0xa>
 8026818:	4770      	bx	lr
 802681a:	7019      	strb	r1, [r3, #0]
 802681c:	3301      	adds	r3, #1
 802681e:	e7f9      	b.n	8026814 <memset+0x4>

08026820 <strchr>:
 8026820:	b2c9      	uxtb	r1, r1
 8026822:	7803      	ldrb	r3, [r0, #0]
 8026824:	2b00      	cmp	r3, #0
 8026826:	d004      	beq.n	8026832 <strchr+0x12>
 8026828:	428b      	cmp	r3, r1
 802682a:	d100      	bne.n	802682e <strchr+0xe>
 802682c:	4770      	bx	lr
 802682e:	3001      	adds	r0, #1
 8026830:	e7f7      	b.n	8026822 <strchr+0x2>
 8026832:	424b      	negs	r3, r1
 8026834:	4159      	adcs	r1, r3
 8026836:	4249      	negs	r1, r1
 8026838:	4008      	ands	r0, r1
 802683a:	e7f7      	b.n	802682c <strchr+0xc>

0802683c <strncmp>:
 802683c:	b530      	push	{r4, r5, lr}
 802683e:	0005      	movs	r5, r0
 8026840:	1e10      	subs	r0, r2, #0
 8026842:	d00b      	beq.n	802685c <strncmp+0x20>
 8026844:	2400      	movs	r4, #0
 8026846:	3a01      	subs	r2, #1
 8026848:	5d2b      	ldrb	r3, [r5, r4]
 802684a:	5d08      	ldrb	r0, [r1, r4]
 802684c:	4283      	cmp	r3, r0
 802684e:	d104      	bne.n	802685a <strncmp+0x1e>
 8026850:	4294      	cmp	r4, r2
 8026852:	d002      	beq.n	802685a <strncmp+0x1e>
 8026854:	3401      	adds	r4, #1
 8026856:	2b00      	cmp	r3, #0
 8026858:	d1f6      	bne.n	8026848 <strncmp+0xc>
 802685a:	1a18      	subs	r0, r3, r0
 802685c:	bd30      	pop	{r4, r5, pc}

0802685e <strncpy>:
 802685e:	0003      	movs	r3, r0
 8026860:	b530      	push	{r4, r5, lr}
 8026862:	001d      	movs	r5, r3
 8026864:	2a00      	cmp	r2, #0
 8026866:	d006      	beq.n	8026876 <strncpy+0x18>
 8026868:	780c      	ldrb	r4, [r1, #0]
 802686a:	3a01      	subs	r2, #1
 802686c:	3301      	adds	r3, #1
 802686e:	702c      	strb	r4, [r5, #0]
 8026870:	3101      	adds	r1, #1
 8026872:	2c00      	cmp	r4, #0
 8026874:	d1f5      	bne.n	8026862 <strncpy+0x4>
 8026876:	2100      	movs	r1, #0
 8026878:	189a      	adds	r2, r3, r2
 802687a:	4293      	cmp	r3, r2
 802687c:	d100      	bne.n	8026880 <strncpy+0x22>
 802687e:	bd30      	pop	{r4, r5, pc}
 8026880:	7019      	strb	r1, [r3, #0]
 8026882:	3301      	adds	r3, #1
 8026884:	e7f9      	b.n	802687a <strncpy+0x1c>

08026886 <strstr>:
 8026886:	780a      	ldrb	r2, [r1, #0]
 8026888:	b530      	push	{r4, r5, lr}
 802688a:	2a00      	cmp	r2, #0
 802688c:	d10c      	bne.n	80268a8 <strstr+0x22>
 802688e:	bd30      	pop	{r4, r5, pc}
 8026890:	429a      	cmp	r2, r3
 8026892:	d108      	bne.n	80268a6 <strstr+0x20>
 8026894:	2301      	movs	r3, #1
 8026896:	5ccc      	ldrb	r4, [r1, r3]
 8026898:	2c00      	cmp	r4, #0
 802689a:	d0f8      	beq.n	802688e <strstr+0x8>
 802689c:	5cc5      	ldrb	r5, [r0, r3]
 802689e:	42a5      	cmp	r5, r4
 80268a0:	d101      	bne.n	80268a6 <strstr+0x20>
 80268a2:	3301      	adds	r3, #1
 80268a4:	e7f7      	b.n	8026896 <strstr+0x10>
 80268a6:	3001      	adds	r0, #1
 80268a8:	7803      	ldrb	r3, [r0, #0]
 80268aa:	2b00      	cmp	r3, #0
 80268ac:	d1f0      	bne.n	8026890 <strstr+0xa>
 80268ae:	0018      	movs	r0, r3
 80268b0:	e7ed      	b.n	802688e <strstr+0x8>
	...

080268b4 <_localeconv_r>:
 80268b4:	4800      	ldr	r0, [pc, #0]	@ (80268b8 <_localeconv_r+0x4>)
 80268b6:	4770      	bx	lr
 80268b8:	20000370 	.word	0x20000370

080268bc <_close_r>:
 80268bc:	2300      	movs	r3, #0
 80268be:	b570      	push	{r4, r5, r6, lr}
 80268c0:	4d06      	ldr	r5, [pc, #24]	@ (80268dc <_close_r+0x20>)
 80268c2:	0004      	movs	r4, r0
 80268c4:	0008      	movs	r0, r1
 80268c6:	602b      	str	r3, [r5, #0]
 80268c8:	f7ed f82e 	bl	8013928 <_close>
 80268cc:	1c43      	adds	r3, r0, #1
 80268ce:	d103      	bne.n	80268d8 <_close_r+0x1c>
 80268d0:	682b      	ldr	r3, [r5, #0]
 80268d2:	2b00      	cmp	r3, #0
 80268d4:	d000      	beq.n	80268d8 <_close_r+0x1c>
 80268d6:	6023      	str	r3, [r4, #0]
 80268d8:	bd70      	pop	{r4, r5, r6, pc}
 80268da:	46c0      	nop			@ (mov r8, r8)
 80268dc:	20003920 	.word	0x20003920

080268e0 <_lseek_r>:
 80268e0:	b570      	push	{r4, r5, r6, lr}
 80268e2:	0004      	movs	r4, r0
 80268e4:	0008      	movs	r0, r1
 80268e6:	0011      	movs	r1, r2
 80268e8:	001a      	movs	r2, r3
 80268ea:	2300      	movs	r3, #0
 80268ec:	4d05      	ldr	r5, [pc, #20]	@ (8026904 <_lseek_r+0x24>)
 80268ee:	602b      	str	r3, [r5, #0]
 80268f0:	f7ed f83b 	bl	801396a <_lseek>
 80268f4:	1c43      	adds	r3, r0, #1
 80268f6:	d103      	bne.n	8026900 <_lseek_r+0x20>
 80268f8:	682b      	ldr	r3, [r5, #0]
 80268fa:	2b00      	cmp	r3, #0
 80268fc:	d000      	beq.n	8026900 <_lseek_r+0x20>
 80268fe:	6023      	str	r3, [r4, #0]
 8026900:	bd70      	pop	{r4, r5, r6, pc}
 8026902:	46c0      	nop			@ (mov r8, r8)
 8026904:	20003920 	.word	0x20003920

08026908 <_read_r>:
 8026908:	b570      	push	{r4, r5, r6, lr}
 802690a:	0004      	movs	r4, r0
 802690c:	0008      	movs	r0, r1
 802690e:	0011      	movs	r1, r2
 8026910:	001a      	movs	r2, r3
 8026912:	2300      	movs	r3, #0
 8026914:	4d05      	ldr	r5, [pc, #20]	@ (802692c <_read_r+0x24>)
 8026916:	602b      	str	r3, [r5, #0]
 8026918:	f7ec ffe9 	bl	80138ee <_read>
 802691c:	1c43      	adds	r3, r0, #1
 802691e:	d103      	bne.n	8026928 <_read_r+0x20>
 8026920:	682b      	ldr	r3, [r5, #0]
 8026922:	2b00      	cmp	r3, #0
 8026924:	d000      	beq.n	8026928 <_read_r+0x20>
 8026926:	6023      	str	r3, [r4, #0]
 8026928:	bd70      	pop	{r4, r5, r6, pc}
 802692a:	46c0      	nop			@ (mov r8, r8)
 802692c:	20003920 	.word	0x20003920

08026930 <_write_r>:
 8026930:	b570      	push	{r4, r5, r6, lr}
 8026932:	0004      	movs	r4, r0
 8026934:	0008      	movs	r0, r1
 8026936:	0011      	movs	r1, r2
 8026938:	001a      	movs	r2, r3
 802693a:	2300      	movs	r3, #0
 802693c:	4d05      	ldr	r5, [pc, #20]	@ (8026954 <_write_r+0x24>)
 802693e:	602b      	str	r3, [r5, #0]
 8026940:	f7ed fcb6 	bl	80142b0 <_write>
 8026944:	1c43      	adds	r3, r0, #1
 8026946:	d103      	bne.n	8026950 <_write_r+0x20>
 8026948:	682b      	ldr	r3, [r5, #0]
 802694a:	2b00      	cmp	r3, #0
 802694c:	d000      	beq.n	8026950 <_write_r+0x20>
 802694e:	6023      	str	r3, [r4, #0]
 8026950:	bd70      	pop	{r4, r5, r6, pc}
 8026952:	46c0      	nop			@ (mov r8, r8)
 8026954:	20003920 	.word	0x20003920

08026958 <__errno>:
 8026958:	4b01      	ldr	r3, [pc, #4]	@ (8026960 <__errno+0x8>)
 802695a:	6818      	ldr	r0, [r3, #0]
 802695c:	4770      	bx	lr
 802695e:	46c0      	nop			@ (mov r8, r8)
 8026960:	200003ec 	.word	0x200003ec

08026964 <__libc_init_array>:
 8026964:	b570      	push	{r4, r5, r6, lr}
 8026966:	2600      	movs	r6, #0
 8026968:	4c0c      	ldr	r4, [pc, #48]	@ (802699c <__libc_init_array+0x38>)
 802696a:	4d0d      	ldr	r5, [pc, #52]	@ (80269a0 <__libc_init_array+0x3c>)
 802696c:	1b64      	subs	r4, r4, r5
 802696e:	10a4      	asrs	r4, r4, #2
 8026970:	42a6      	cmp	r6, r4
 8026972:	d109      	bne.n	8026988 <__libc_init_array+0x24>
 8026974:	2600      	movs	r6, #0
 8026976:	f003 ffcb 	bl	802a910 <_init>
 802697a:	4c0a      	ldr	r4, [pc, #40]	@ (80269a4 <__libc_init_array+0x40>)
 802697c:	4d0a      	ldr	r5, [pc, #40]	@ (80269a8 <__libc_init_array+0x44>)
 802697e:	1b64      	subs	r4, r4, r5
 8026980:	10a4      	asrs	r4, r4, #2
 8026982:	42a6      	cmp	r6, r4
 8026984:	d105      	bne.n	8026992 <__libc_init_array+0x2e>
 8026986:	bd70      	pop	{r4, r5, r6, pc}
 8026988:	00b3      	lsls	r3, r6, #2
 802698a:	58eb      	ldr	r3, [r5, r3]
 802698c:	4798      	blx	r3
 802698e:	3601      	adds	r6, #1
 8026990:	e7ee      	b.n	8026970 <__libc_init_array+0xc>
 8026992:	00b3      	lsls	r3, r6, #2
 8026994:	58eb      	ldr	r3, [r5, r3]
 8026996:	4798      	blx	r3
 8026998:	3601      	adds	r6, #1
 802699a:	e7f2      	b.n	8026982 <__libc_init_array+0x1e>
 802699c:	0802f980 	.word	0x0802f980
 80269a0:	0802f980 	.word	0x0802f980
 80269a4:	0802f984 	.word	0x0802f984
 80269a8:	0802f980 	.word	0x0802f980

080269ac <__retarget_lock_init_recursive>:
 80269ac:	4770      	bx	lr

080269ae <__retarget_lock_acquire_recursive>:
 80269ae:	4770      	bx	lr

080269b0 <__retarget_lock_release_recursive>:
 80269b0:	4770      	bx	lr

080269b2 <memchr>:
 80269b2:	b2c9      	uxtb	r1, r1
 80269b4:	1882      	adds	r2, r0, r2
 80269b6:	4290      	cmp	r0, r2
 80269b8:	d101      	bne.n	80269be <memchr+0xc>
 80269ba:	2000      	movs	r0, #0
 80269bc:	4770      	bx	lr
 80269be:	7803      	ldrb	r3, [r0, #0]
 80269c0:	428b      	cmp	r3, r1
 80269c2:	d0fb      	beq.n	80269bc <memchr+0xa>
 80269c4:	3001      	adds	r0, #1
 80269c6:	e7f6      	b.n	80269b6 <memchr+0x4>

080269c8 <memcpy>:
 80269c8:	2300      	movs	r3, #0
 80269ca:	b510      	push	{r4, lr}
 80269cc:	429a      	cmp	r2, r3
 80269ce:	d100      	bne.n	80269d2 <memcpy+0xa>
 80269d0:	bd10      	pop	{r4, pc}
 80269d2:	5ccc      	ldrb	r4, [r1, r3]
 80269d4:	54c4      	strb	r4, [r0, r3]
 80269d6:	3301      	adds	r3, #1
 80269d8:	e7f8      	b.n	80269cc <memcpy+0x4>
	...

080269dc <nan>:
 80269dc:	2000      	movs	r0, #0
 80269de:	4901      	ldr	r1, [pc, #4]	@ (80269e4 <nan+0x8>)
 80269e0:	4770      	bx	lr
 80269e2:	46c0      	nop			@ (mov r8, r8)
 80269e4:	7ff80000 	.word	0x7ff80000

080269e8 <quorem>:
 80269e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269ea:	6903      	ldr	r3, [r0, #16]
 80269ec:	690c      	ldr	r4, [r1, #16]
 80269ee:	b089      	sub	sp, #36	@ 0x24
 80269f0:	9003      	str	r0, [sp, #12]
 80269f2:	9106      	str	r1, [sp, #24]
 80269f4:	2000      	movs	r0, #0
 80269f6:	42a3      	cmp	r3, r4
 80269f8:	db63      	blt.n	8026ac2 <quorem+0xda>
 80269fa:	000b      	movs	r3, r1
 80269fc:	3c01      	subs	r4, #1
 80269fe:	3314      	adds	r3, #20
 8026a00:	00a5      	lsls	r5, r4, #2
 8026a02:	9304      	str	r3, [sp, #16]
 8026a04:	195b      	adds	r3, r3, r5
 8026a06:	9305      	str	r3, [sp, #20]
 8026a08:	9b03      	ldr	r3, [sp, #12]
 8026a0a:	3314      	adds	r3, #20
 8026a0c:	9301      	str	r3, [sp, #4]
 8026a0e:	195d      	adds	r5, r3, r5
 8026a10:	9b05      	ldr	r3, [sp, #20]
 8026a12:	682f      	ldr	r7, [r5, #0]
 8026a14:	681e      	ldr	r6, [r3, #0]
 8026a16:	0038      	movs	r0, r7
 8026a18:	3601      	adds	r6, #1
 8026a1a:	0031      	movs	r1, r6
 8026a1c:	f7d9 fbc2 	bl	80001a4 <__udivsi3>
 8026a20:	9002      	str	r0, [sp, #8]
 8026a22:	42b7      	cmp	r7, r6
 8026a24:	d327      	bcc.n	8026a76 <quorem+0x8e>
 8026a26:	9b04      	ldr	r3, [sp, #16]
 8026a28:	2700      	movs	r7, #0
 8026a2a:	469c      	mov	ip, r3
 8026a2c:	9e01      	ldr	r6, [sp, #4]
 8026a2e:	9707      	str	r7, [sp, #28]
 8026a30:	4662      	mov	r2, ip
 8026a32:	ca08      	ldmia	r2!, {r3}
 8026a34:	6830      	ldr	r0, [r6, #0]
 8026a36:	4694      	mov	ip, r2
 8026a38:	9a02      	ldr	r2, [sp, #8]
 8026a3a:	b299      	uxth	r1, r3
 8026a3c:	4351      	muls	r1, r2
 8026a3e:	0c1b      	lsrs	r3, r3, #16
 8026a40:	4353      	muls	r3, r2
 8026a42:	19c9      	adds	r1, r1, r7
 8026a44:	0c0a      	lsrs	r2, r1, #16
 8026a46:	189b      	adds	r3, r3, r2
 8026a48:	b289      	uxth	r1, r1
 8026a4a:	b282      	uxth	r2, r0
 8026a4c:	1a52      	subs	r2, r2, r1
 8026a4e:	9907      	ldr	r1, [sp, #28]
 8026a50:	0c1f      	lsrs	r7, r3, #16
 8026a52:	1852      	adds	r2, r2, r1
 8026a54:	0c00      	lsrs	r0, r0, #16
 8026a56:	b29b      	uxth	r3, r3
 8026a58:	1411      	asrs	r1, r2, #16
 8026a5a:	1ac3      	subs	r3, r0, r3
 8026a5c:	185b      	adds	r3, r3, r1
 8026a5e:	1419      	asrs	r1, r3, #16
 8026a60:	b292      	uxth	r2, r2
 8026a62:	041b      	lsls	r3, r3, #16
 8026a64:	431a      	orrs	r2, r3
 8026a66:	9b05      	ldr	r3, [sp, #20]
 8026a68:	9107      	str	r1, [sp, #28]
 8026a6a:	c604      	stmia	r6!, {r2}
 8026a6c:	4563      	cmp	r3, ip
 8026a6e:	d2df      	bcs.n	8026a30 <quorem+0x48>
 8026a70:	682b      	ldr	r3, [r5, #0]
 8026a72:	2b00      	cmp	r3, #0
 8026a74:	d02b      	beq.n	8026ace <quorem+0xe6>
 8026a76:	9906      	ldr	r1, [sp, #24]
 8026a78:	9803      	ldr	r0, [sp, #12]
 8026a7a:	f001 fd6f 	bl	802855c <__mcmp>
 8026a7e:	2800      	cmp	r0, #0
 8026a80:	db1e      	blt.n	8026ac0 <quorem+0xd8>
 8026a82:	2600      	movs	r6, #0
 8026a84:	9d01      	ldr	r5, [sp, #4]
 8026a86:	9904      	ldr	r1, [sp, #16]
 8026a88:	c901      	ldmia	r1!, {r0}
 8026a8a:	682b      	ldr	r3, [r5, #0]
 8026a8c:	b287      	uxth	r7, r0
 8026a8e:	b29a      	uxth	r2, r3
 8026a90:	1bd2      	subs	r2, r2, r7
 8026a92:	1992      	adds	r2, r2, r6
 8026a94:	0c00      	lsrs	r0, r0, #16
 8026a96:	0c1b      	lsrs	r3, r3, #16
 8026a98:	1a1b      	subs	r3, r3, r0
 8026a9a:	1410      	asrs	r0, r2, #16
 8026a9c:	181b      	adds	r3, r3, r0
 8026a9e:	141e      	asrs	r6, r3, #16
 8026aa0:	b292      	uxth	r2, r2
 8026aa2:	041b      	lsls	r3, r3, #16
 8026aa4:	431a      	orrs	r2, r3
 8026aa6:	9b05      	ldr	r3, [sp, #20]
 8026aa8:	c504      	stmia	r5!, {r2}
 8026aaa:	428b      	cmp	r3, r1
 8026aac:	d2ec      	bcs.n	8026a88 <quorem+0xa0>
 8026aae:	9a01      	ldr	r2, [sp, #4]
 8026ab0:	00a3      	lsls	r3, r4, #2
 8026ab2:	18d3      	adds	r3, r2, r3
 8026ab4:	681a      	ldr	r2, [r3, #0]
 8026ab6:	2a00      	cmp	r2, #0
 8026ab8:	d014      	beq.n	8026ae4 <quorem+0xfc>
 8026aba:	9b02      	ldr	r3, [sp, #8]
 8026abc:	3301      	adds	r3, #1
 8026abe:	9302      	str	r3, [sp, #8]
 8026ac0:	9802      	ldr	r0, [sp, #8]
 8026ac2:	b009      	add	sp, #36	@ 0x24
 8026ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ac6:	682b      	ldr	r3, [r5, #0]
 8026ac8:	2b00      	cmp	r3, #0
 8026aca:	d104      	bne.n	8026ad6 <quorem+0xee>
 8026acc:	3c01      	subs	r4, #1
 8026ace:	9b01      	ldr	r3, [sp, #4]
 8026ad0:	3d04      	subs	r5, #4
 8026ad2:	42ab      	cmp	r3, r5
 8026ad4:	d3f7      	bcc.n	8026ac6 <quorem+0xde>
 8026ad6:	9b03      	ldr	r3, [sp, #12]
 8026ad8:	611c      	str	r4, [r3, #16]
 8026ada:	e7cc      	b.n	8026a76 <quorem+0x8e>
 8026adc:	681a      	ldr	r2, [r3, #0]
 8026ade:	2a00      	cmp	r2, #0
 8026ae0:	d104      	bne.n	8026aec <quorem+0x104>
 8026ae2:	3c01      	subs	r4, #1
 8026ae4:	9a01      	ldr	r2, [sp, #4]
 8026ae6:	3b04      	subs	r3, #4
 8026ae8:	429a      	cmp	r2, r3
 8026aea:	d3f7      	bcc.n	8026adc <quorem+0xf4>
 8026aec:	9b03      	ldr	r3, [sp, #12]
 8026aee:	611c      	str	r4, [r3, #16]
 8026af0:	e7e3      	b.n	8026aba <quorem+0xd2>
	...

08026af4 <_dtoa_r>:
 8026af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026af6:	0014      	movs	r4, r2
 8026af8:	001d      	movs	r5, r3
 8026afa:	69c6      	ldr	r6, [r0, #28]
 8026afc:	b09d      	sub	sp, #116	@ 0x74
 8026afe:	940a      	str	r4, [sp, #40]	@ 0x28
 8026b00:	950b      	str	r5, [sp, #44]	@ 0x2c
 8026b02:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8026b04:	9003      	str	r0, [sp, #12]
 8026b06:	2e00      	cmp	r6, #0
 8026b08:	d10f      	bne.n	8026b2a <_dtoa_r+0x36>
 8026b0a:	2010      	movs	r0, #16
 8026b0c:	f001 f986 	bl	8027e1c <malloc>
 8026b10:	9b03      	ldr	r3, [sp, #12]
 8026b12:	1e02      	subs	r2, r0, #0
 8026b14:	61d8      	str	r0, [r3, #28]
 8026b16:	d104      	bne.n	8026b22 <_dtoa_r+0x2e>
 8026b18:	21ef      	movs	r1, #239	@ 0xef
 8026b1a:	4bc7      	ldr	r3, [pc, #796]	@ (8026e38 <_dtoa_r+0x344>)
 8026b1c:	48c7      	ldr	r0, [pc, #796]	@ (8026e3c <_dtoa_r+0x348>)
 8026b1e:	f002 fb23 	bl	8029168 <__assert_func>
 8026b22:	6046      	str	r6, [r0, #4]
 8026b24:	6086      	str	r6, [r0, #8]
 8026b26:	6006      	str	r6, [r0, #0]
 8026b28:	60c6      	str	r6, [r0, #12]
 8026b2a:	9b03      	ldr	r3, [sp, #12]
 8026b2c:	69db      	ldr	r3, [r3, #28]
 8026b2e:	6819      	ldr	r1, [r3, #0]
 8026b30:	2900      	cmp	r1, #0
 8026b32:	d00b      	beq.n	8026b4c <_dtoa_r+0x58>
 8026b34:	685a      	ldr	r2, [r3, #4]
 8026b36:	2301      	movs	r3, #1
 8026b38:	4093      	lsls	r3, r2
 8026b3a:	604a      	str	r2, [r1, #4]
 8026b3c:	608b      	str	r3, [r1, #8]
 8026b3e:	9803      	ldr	r0, [sp, #12]
 8026b40:	f001 fa7e 	bl	8028040 <_Bfree>
 8026b44:	2200      	movs	r2, #0
 8026b46:	9b03      	ldr	r3, [sp, #12]
 8026b48:	69db      	ldr	r3, [r3, #28]
 8026b4a:	601a      	str	r2, [r3, #0]
 8026b4c:	2d00      	cmp	r5, #0
 8026b4e:	da1e      	bge.n	8026b8e <_dtoa_r+0x9a>
 8026b50:	2301      	movs	r3, #1
 8026b52:	603b      	str	r3, [r7, #0]
 8026b54:	006b      	lsls	r3, r5, #1
 8026b56:	085b      	lsrs	r3, r3, #1
 8026b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026b5a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026b5c:	4bb8      	ldr	r3, [pc, #736]	@ (8026e40 <_dtoa_r+0x34c>)
 8026b5e:	4ab8      	ldr	r2, [pc, #736]	@ (8026e40 <_dtoa_r+0x34c>)
 8026b60:	403b      	ands	r3, r7
 8026b62:	4293      	cmp	r3, r2
 8026b64:	d116      	bne.n	8026b94 <_dtoa_r+0xa0>
 8026b66:	4bb7      	ldr	r3, [pc, #732]	@ (8026e44 <_dtoa_r+0x350>)
 8026b68:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026b6a:	6013      	str	r3, [r2, #0]
 8026b6c:	033b      	lsls	r3, r7, #12
 8026b6e:	0b1b      	lsrs	r3, r3, #12
 8026b70:	4323      	orrs	r3, r4
 8026b72:	d101      	bne.n	8026b78 <_dtoa_r+0x84>
 8026b74:	f000 fd80 	bl	8027678 <_dtoa_r+0xb84>
 8026b78:	4bb3      	ldr	r3, [pc, #716]	@ (8026e48 <_dtoa_r+0x354>)
 8026b7a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026b7c:	9308      	str	r3, [sp, #32]
 8026b7e:	2a00      	cmp	r2, #0
 8026b80:	d002      	beq.n	8026b88 <_dtoa_r+0x94>
 8026b82:	4bb2      	ldr	r3, [pc, #712]	@ (8026e4c <_dtoa_r+0x358>)
 8026b84:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026b86:	6013      	str	r3, [r2, #0]
 8026b88:	9808      	ldr	r0, [sp, #32]
 8026b8a:	b01d      	add	sp, #116	@ 0x74
 8026b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026b8e:	2300      	movs	r3, #0
 8026b90:	603b      	str	r3, [r7, #0]
 8026b92:	e7e2      	b.n	8026b5a <_dtoa_r+0x66>
 8026b94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026b98:	9212      	str	r2, [sp, #72]	@ 0x48
 8026b9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026b9c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026b9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026ba0:	2200      	movs	r2, #0
 8026ba2:	2300      	movs	r3, #0
 8026ba4:	f7d9 fc84 	bl	80004b0 <__aeabi_dcmpeq>
 8026ba8:	1e06      	subs	r6, r0, #0
 8026baa:	d00b      	beq.n	8026bc4 <_dtoa_r+0xd0>
 8026bac:	2301      	movs	r3, #1
 8026bae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026bb0:	6013      	str	r3, [r2, #0]
 8026bb2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026bb4:	2b00      	cmp	r3, #0
 8026bb6:	d002      	beq.n	8026bbe <_dtoa_r+0xca>
 8026bb8:	4ba5      	ldr	r3, [pc, #660]	@ (8026e50 <_dtoa_r+0x35c>)
 8026bba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026bbc:	6013      	str	r3, [r2, #0]
 8026bbe:	4ba5      	ldr	r3, [pc, #660]	@ (8026e54 <_dtoa_r+0x360>)
 8026bc0:	9308      	str	r3, [sp, #32]
 8026bc2:	e7e1      	b.n	8026b88 <_dtoa_r+0x94>
 8026bc4:	ab1a      	add	r3, sp, #104	@ 0x68
 8026bc6:	9301      	str	r3, [sp, #4]
 8026bc8:	ab1b      	add	r3, sp, #108	@ 0x6c
 8026bca:	9300      	str	r3, [sp, #0]
 8026bcc:	9803      	ldr	r0, [sp, #12]
 8026bce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026bd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026bd2:	f001 fde5 	bl	80287a0 <__d2b>
 8026bd6:	007a      	lsls	r2, r7, #1
 8026bd8:	9005      	str	r0, [sp, #20]
 8026bda:	0d52      	lsrs	r2, r2, #21
 8026bdc:	d100      	bne.n	8026be0 <_dtoa_r+0xec>
 8026bde:	e07b      	b.n	8026cd8 <_dtoa_r+0x1e4>
 8026be0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026be2:	9618      	str	r6, [sp, #96]	@ 0x60
 8026be4:	0319      	lsls	r1, r3, #12
 8026be6:	4b9c      	ldr	r3, [pc, #624]	@ (8026e58 <_dtoa_r+0x364>)
 8026be8:	0b09      	lsrs	r1, r1, #12
 8026bea:	430b      	orrs	r3, r1
 8026bec:	499b      	ldr	r1, [pc, #620]	@ (8026e5c <_dtoa_r+0x368>)
 8026bee:	1857      	adds	r7, r2, r1
 8026bf0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026bf2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026bf4:	0019      	movs	r1, r3
 8026bf6:	2200      	movs	r2, #0
 8026bf8:	4b99      	ldr	r3, [pc, #612]	@ (8026e60 <_dtoa_r+0x36c>)
 8026bfa:	f7dc f991 	bl	8002f20 <__aeabi_dsub>
 8026bfe:	4a99      	ldr	r2, [pc, #612]	@ (8026e64 <_dtoa_r+0x370>)
 8026c00:	4b99      	ldr	r3, [pc, #612]	@ (8026e68 <_dtoa_r+0x374>)
 8026c02:	f7db fea7 	bl	8002954 <__aeabi_dmul>
 8026c06:	4a99      	ldr	r2, [pc, #612]	@ (8026e6c <_dtoa_r+0x378>)
 8026c08:	4b99      	ldr	r3, [pc, #612]	@ (8026e70 <_dtoa_r+0x37c>)
 8026c0a:	f7da fea3 	bl	8001954 <__aeabi_dadd>
 8026c0e:	0004      	movs	r4, r0
 8026c10:	0038      	movs	r0, r7
 8026c12:	000d      	movs	r5, r1
 8026c14:	f7dc fdec 	bl	80037f0 <__aeabi_i2d>
 8026c18:	4a96      	ldr	r2, [pc, #600]	@ (8026e74 <_dtoa_r+0x380>)
 8026c1a:	4b97      	ldr	r3, [pc, #604]	@ (8026e78 <_dtoa_r+0x384>)
 8026c1c:	f7db fe9a 	bl	8002954 <__aeabi_dmul>
 8026c20:	0002      	movs	r2, r0
 8026c22:	000b      	movs	r3, r1
 8026c24:	0020      	movs	r0, r4
 8026c26:	0029      	movs	r1, r5
 8026c28:	f7da fe94 	bl	8001954 <__aeabi_dadd>
 8026c2c:	0004      	movs	r4, r0
 8026c2e:	000d      	movs	r5, r1
 8026c30:	f7dc fda2 	bl	8003778 <__aeabi_d2iz>
 8026c34:	2200      	movs	r2, #0
 8026c36:	9004      	str	r0, [sp, #16]
 8026c38:	2300      	movs	r3, #0
 8026c3a:	0020      	movs	r0, r4
 8026c3c:	0029      	movs	r1, r5
 8026c3e:	f7d9 fc3d 	bl	80004bc <__aeabi_dcmplt>
 8026c42:	2800      	cmp	r0, #0
 8026c44:	d00b      	beq.n	8026c5e <_dtoa_r+0x16a>
 8026c46:	9804      	ldr	r0, [sp, #16]
 8026c48:	f7dc fdd2 	bl	80037f0 <__aeabi_i2d>
 8026c4c:	002b      	movs	r3, r5
 8026c4e:	0022      	movs	r2, r4
 8026c50:	f7d9 fc2e 	bl	80004b0 <__aeabi_dcmpeq>
 8026c54:	4243      	negs	r3, r0
 8026c56:	4158      	adcs	r0, r3
 8026c58:	9b04      	ldr	r3, [sp, #16]
 8026c5a:	1a1b      	subs	r3, r3, r0
 8026c5c:	9304      	str	r3, [sp, #16]
 8026c5e:	2301      	movs	r3, #1
 8026c60:	9315      	str	r3, [sp, #84]	@ 0x54
 8026c62:	9b04      	ldr	r3, [sp, #16]
 8026c64:	2b16      	cmp	r3, #22
 8026c66:	d810      	bhi.n	8026c8a <_dtoa_r+0x196>
 8026c68:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026c6a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026c6c:	9a04      	ldr	r2, [sp, #16]
 8026c6e:	4b83      	ldr	r3, [pc, #524]	@ (8026e7c <_dtoa_r+0x388>)
 8026c70:	00d2      	lsls	r2, r2, #3
 8026c72:	189b      	adds	r3, r3, r2
 8026c74:	681a      	ldr	r2, [r3, #0]
 8026c76:	685b      	ldr	r3, [r3, #4]
 8026c78:	f7d9 fc20 	bl	80004bc <__aeabi_dcmplt>
 8026c7c:	2800      	cmp	r0, #0
 8026c7e:	d047      	beq.n	8026d10 <_dtoa_r+0x21c>
 8026c80:	9b04      	ldr	r3, [sp, #16]
 8026c82:	3b01      	subs	r3, #1
 8026c84:	9304      	str	r3, [sp, #16]
 8026c86:	2300      	movs	r3, #0
 8026c88:	9315      	str	r3, [sp, #84]	@ 0x54
 8026c8a:	2200      	movs	r2, #0
 8026c8c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026c8e:	9206      	str	r2, [sp, #24]
 8026c90:	1bdb      	subs	r3, r3, r7
 8026c92:	1e5a      	subs	r2, r3, #1
 8026c94:	d53e      	bpl.n	8026d14 <_dtoa_r+0x220>
 8026c96:	2201      	movs	r2, #1
 8026c98:	1ad3      	subs	r3, r2, r3
 8026c9a:	9306      	str	r3, [sp, #24]
 8026c9c:	2300      	movs	r3, #0
 8026c9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8026ca0:	9b04      	ldr	r3, [sp, #16]
 8026ca2:	2b00      	cmp	r3, #0
 8026ca4:	db38      	blt.n	8026d18 <_dtoa_r+0x224>
 8026ca6:	9a04      	ldr	r2, [sp, #16]
 8026ca8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026caa:	4694      	mov	ip, r2
 8026cac:	4463      	add	r3, ip
 8026cae:	930d      	str	r3, [sp, #52]	@ 0x34
 8026cb0:	2300      	movs	r3, #0
 8026cb2:	9214      	str	r2, [sp, #80]	@ 0x50
 8026cb4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026cb6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026cb8:	2401      	movs	r4, #1
 8026cba:	2b09      	cmp	r3, #9
 8026cbc:	d862      	bhi.n	8026d84 <_dtoa_r+0x290>
 8026cbe:	2b05      	cmp	r3, #5
 8026cc0:	dd02      	ble.n	8026cc8 <_dtoa_r+0x1d4>
 8026cc2:	2400      	movs	r4, #0
 8026cc4:	3b04      	subs	r3, #4
 8026cc6:	9322      	str	r3, [sp, #136]	@ 0x88
 8026cc8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026cca:	1e98      	subs	r0, r3, #2
 8026ccc:	2803      	cmp	r0, #3
 8026cce:	d863      	bhi.n	8026d98 <_dtoa_r+0x2a4>
 8026cd0:	f7d9 fa54 	bl	800017c <__gnu_thumb1_case_uqi>
 8026cd4:	2b385654 	.word	0x2b385654
 8026cd8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026cda:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026cdc:	18f6      	adds	r6, r6, r3
 8026cde:	4b68      	ldr	r3, [pc, #416]	@ (8026e80 <_dtoa_r+0x38c>)
 8026ce0:	18f2      	adds	r2, r6, r3
 8026ce2:	2a20      	cmp	r2, #32
 8026ce4:	dd0f      	ble.n	8026d06 <_dtoa_r+0x212>
 8026ce6:	2340      	movs	r3, #64	@ 0x40
 8026ce8:	1a9b      	subs	r3, r3, r2
 8026cea:	409f      	lsls	r7, r3
 8026cec:	4b65      	ldr	r3, [pc, #404]	@ (8026e84 <_dtoa_r+0x390>)
 8026cee:	0038      	movs	r0, r7
 8026cf0:	18f3      	adds	r3, r6, r3
 8026cf2:	40dc      	lsrs	r4, r3
 8026cf4:	4320      	orrs	r0, r4
 8026cf6:	f7dc fda9 	bl	800384c <__aeabi_ui2d>
 8026cfa:	2201      	movs	r2, #1
 8026cfc:	4b62      	ldr	r3, [pc, #392]	@ (8026e88 <_dtoa_r+0x394>)
 8026cfe:	1e77      	subs	r7, r6, #1
 8026d00:	18cb      	adds	r3, r1, r3
 8026d02:	9218      	str	r2, [sp, #96]	@ 0x60
 8026d04:	e776      	b.n	8026bf4 <_dtoa_r+0x100>
 8026d06:	2320      	movs	r3, #32
 8026d08:	0020      	movs	r0, r4
 8026d0a:	1a9b      	subs	r3, r3, r2
 8026d0c:	4098      	lsls	r0, r3
 8026d0e:	e7f2      	b.n	8026cf6 <_dtoa_r+0x202>
 8026d10:	9015      	str	r0, [sp, #84]	@ 0x54
 8026d12:	e7ba      	b.n	8026c8a <_dtoa_r+0x196>
 8026d14:	920d      	str	r2, [sp, #52]	@ 0x34
 8026d16:	e7c3      	b.n	8026ca0 <_dtoa_r+0x1ac>
 8026d18:	9b06      	ldr	r3, [sp, #24]
 8026d1a:	9a04      	ldr	r2, [sp, #16]
 8026d1c:	1a9b      	subs	r3, r3, r2
 8026d1e:	9306      	str	r3, [sp, #24]
 8026d20:	4253      	negs	r3, r2
 8026d22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026d24:	2300      	movs	r3, #0
 8026d26:	9314      	str	r3, [sp, #80]	@ 0x50
 8026d28:	e7c5      	b.n	8026cb6 <_dtoa_r+0x1c2>
 8026d2a:	2301      	movs	r3, #1
 8026d2c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026d2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8026d30:	4694      	mov	ip, r2
 8026d32:	9b04      	ldr	r3, [sp, #16]
 8026d34:	4463      	add	r3, ip
 8026d36:	930e      	str	r3, [sp, #56]	@ 0x38
 8026d38:	3301      	adds	r3, #1
 8026d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d3c:	2b00      	cmp	r3, #0
 8026d3e:	dc08      	bgt.n	8026d52 <_dtoa_r+0x25e>
 8026d40:	2301      	movs	r3, #1
 8026d42:	e006      	b.n	8026d52 <_dtoa_r+0x25e>
 8026d44:	2301      	movs	r3, #1
 8026d46:	9310      	str	r3, [sp, #64]	@ 0x40
 8026d48:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026d4a:	2b00      	cmp	r3, #0
 8026d4c:	dd28      	ble.n	8026da0 <_dtoa_r+0x2ac>
 8026d4e:	930e      	str	r3, [sp, #56]	@ 0x38
 8026d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d52:	9a03      	ldr	r2, [sp, #12]
 8026d54:	2100      	movs	r1, #0
 8026d56:	69d0      	ldr	r0, [r2, #28]
 8026d58:	2204      	movs	r2, #4
 8026d5a:	0015      	movs	r5, r2
 8026d5c:	3514      	adds	r5, #20
 8026d5e:	429d      	cmp	r5, r3
 8026d60:	d923      	bls.n	8026daa <_dtoa_r+0x2b6>
 8026d62:	6041      	str	r1, [r0, #4]
 8026d64:	9803      	ldr	r0, [sp, #12]
 8026d66:	f001 f927 	bl	8027fb8 <_Balloc>
 8026d6a:	9008      	str	r0, [sp, #32]
 8026d6c:	2800      	cmp	r0, #0
 8026d6e:	d11f      	bne.n	8026db0 <_dtoa_r+0x2bc>
 8026d70:	21b0      	movs	r1, #176	@ 0xb0
 8026d72:	4b46      	ldr	r3, [pc, #280]	@ (8026e8c <_dtoa_r+0x398>)
 8026d74:	4831      	ldr	r0, [pc, #196]	@ (8026e3c <_dtoa_r+0x348>)
 8026d76:	9a08      	ldr	r2, [sp, #32]
 8026d78:	31ff      	adds	r1, #255	@ 0xff
 8026d7a:	e6d0      	b.n	8026b1e <_dtoa_r+0x2a>
 8026d7c:	2300      	movs	r3, #0
 8026d7e:	e7e2      	b.n	8026d46 <_dtoa_r+0x252>
 8026d80:	2300      	movs	r3, #0
 8026d82:	e7d3      	b.n	8026d2c <_dtoa_r+0x238>
 8026d84:	2300      	movs	r3, #0
 8026d86:	9410      	str	r4, [sp, #64]	@ 0x40
 8026d88:	9322      	str	r3, [sp, #136]	@ 0x88
 8026d8a:	3b01      	subs	r3, #1
 8026d8c:	2200      	movs	r2, #0
 8026d8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8026d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d92:	3313      	adds	r3, #19
 8026d94:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026d96:	e7dc      	b.n	8026d52 <_dtoa_r+0x25e>
 8026d98:	2301      	movs	r3, #1
 8026d9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8026d9c:	3b02      	subs	r3, #2
 8026d9e:	e7f5      	b.n	8026d8c <_dtoa_r+0x298>
 8026da0:	2301      	movs	r3, #1
 8026da2:	001a      	movs	r2, r3
 8026da4:	930e      	str	r3, [sp, #56]	@ 0x38
 8026da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8026da8:	e7f4      	b.n	8026d94 <_dtoa_r+0x2a0>
 8026daa:	3101      	adds	r1, #1
 8026dac:	0052      	lsls	r2, r2, #1
 8026dae:	e7d4      	b.n	8026d5a <_dtoa_r+0x266>
 8026db0:	9b03      	ldr	r3, [sp, #12]
 8026db2:	9a08      	ldr	r2, [sp, #32]
 8026db4:	69db      	ldr	r3, [r3, #28]
 8026db6:	601a      	str	r2, [r3, #0]
 8026db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026dba:	2b0e      	cmp	r3, #14
 8026dbc:	d900      	bls.n	8026dc0 <_dtoa_r+0x2cc>
 8026dbe:	e0d6      	b.n	8026f6e <_dtoa_r+0x47a>
 8026dc0:	2c00      	cmp	r4, #0
 8026dc2:	d100      	bne.n	8026dc6 <_dtoa_r+0x2d2>
 8026dc4:	e0d3      	b.n	8026f6e <_dtoa_r+0x47a>
 8026dc6:	9b04      	ldr	r3, [sp, #16]
 8026dc8:	2b00      	cmp	r3, #0
 8026dca:	dd63      	ble.n	8026e94 <_dtoa_r+0x3a0>
 8026dcc:	210f      	movs	r1, #15
 8026dce:	9a04      	ldr	r2, [sp, #16]
 8026dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8026e7c <_dtoa_r+0x388>)
 8026dd2:	400a      	ands	r2, r1
 8026dd4:	00d2      	lsls	r2, r2, #3
 8026dd6:	189b      	adds	r3, r3, r2
 8026dd8:	681e      	ldr	r6, [r3, #0]
 8026dda:	685f      	ldr	r7, [r3, #4]
 8026ddc:	9b04      	ldr	r3, [sp, #16]
 8026dde:	2402      	movs	r4, #2
 8026de0:	111d      	asrs	r5, r3, #4
 8026de2:	05db      	lsls	r3, r3, #23
 8026de4:	d50a      	bpl.n	8026dfc <_dtoa_r+0x308>
 8026de6:	4b2a      	ldr	r3, [pc, #168]	@ (8026e90 <_dtoa_r+0x39c>)
 8026de8:	400d      	ands	r5, r1
 8026dea:	6a1a      	ldr	r2, [r3, #32]
 8026dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026dee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026df0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026df2:	f7db f975 	bl	80020e0 <__aeabi_ddiv>
 8026df6:	900a      	str	r0, [sp, #40]	@ 0x28
 8026df8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026dfa:	3401      	adds	r4, #1
 8026dfc:	4b24      	ldr	r3, [pc, #144]	@ (8026e90 <_dtoa_r+0x39c>)
 8026dfe:	930c      	str	r3, [sp, #48]	@ 0x30
 8026e00:	2d00      	cmp	r5, #0
 8026e02:	d108      	bne.n	8026e16 <_dtoa_r+0x322>
 8026e04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026e06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026e08:	0032      	movs	r2, r6
 8026e0a:	003b      	movs	r3, r7
 8026e0c:	f7db f968 	bl	80020e0 <__aeabi_ddiv>
 8026e10:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e14:	e059      	b.n	8026eca <_dtoa_r+0x3d6>
 8026e16:	2301      	movs	r3, #1
 8026e18:	421d      	tst	r5, r3
 8026e1a:	d009      	beq.n	8026e30 <_dtoa_r+0x33c>
 8026e1c:	18e4      	adds	r4, r4, r3
 8026e1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026e20:	0030      	movs	r0, r6
 8026e22:	681a      	ldr	r2, [r3, #0]
 8026e24:	685b      	ldr	r3, [r3, #4]
 8026e26:	0039      	movs	r1, r7
 8026e28:	f7db fd94 	bl	8002954 <__aeabi_dmul>
 8026e2c:	0006      	movs	r6, r0
 8026e2e:	000f      	movs	r7, r1
 8026e30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026e32:	106d      	asrs	r5, r5, #1
 8026e34:	3308      	adds	r3, #8
 8026e36:	e7e2      	b.n	8026dfe <_dtoa_r+0x30a>
 8026e38:	0802f53b 	.word	0x0802f53b
 8026e3c:	0802f552 	.word	0x0802f552
 8026e40:	7ff00000 	.word	0x7ff00000
 8026e44:	0000270f 	.word	0x0000270f
 8026e48:	0802f537 	.word	0x0802f537
 8026e4c:	0802f53a 	.word	0x0802f53a
 8026e50:	0802f503 	.word	0x0802f503
 8026e54:	0802f502 	.word	0x0802f502
 8026e58:	3ff00000 	.word	0x3ff00000
 8026e5c:	fffffc01 	.word	0xfffffc01
 8026e60:	3ff80000 	.word	0x3ff80000
 8026e64:	636f4361 	.word	0x636f4361
 8026e68:	3fd287a7 	.word	0x3fd287a7
 8026e6c:	8b60c8b3 	.word	0x8b60c8b3
 8026e70:	3fc68a28 	.word	0x3fc68a28
 8026e74:	509f79fb 	.word	0x509f79fb
 8026e78:	3fd34413 	.word	0x3fd34413
 8026e7c:	0802f850 	.word	0x0802f850
 8026e80:	00000432 	.word	0x00000432
 8026e84:	00000412 	.word	0x00000412
 8026e88:	fe100000 	.word	0xfe100000
 8026e8c:	0802f5aa 	.word	0x0802f5aa
 8026e90:	0802f828 	.word	0x0802f828
 8026e94:	9b04      	ldr	r3, [sp, #16]
 8026e96:	2402      	movs	r4, #2
 8026e98:	2b00      	cmp	r3, #0
 8026e9a:	d016      	beq.n	8026eca <_dtoa_r+0x3d6>
 8026e9c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026e9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026ea0:	220f      	movs	r2, #15
 8026ea2:	425d      	negs	r5, r3
 8026ea4:	402a      	ands	r2, r5
 8026ea6:	4bd5      	ldr	r3, [pc, #852]	@ (80271fc <_dtoa_r+0x708>)
 8026ea8:	00d2      	lsls	r2, r2, #3
 8026eaa:	189b      	adds	r3, r3, r2
 8026eac:	681a      	ldr	r2, [r3, #0]
 8026eae:	685b      	ldr	r3, [r3, #4]
 8026eb0:	f7db fd50 	bl	8002954 <__aeabi_dmul>
 8026eb4:	2701      	movs	r7, #1
 8026eb6:	2300      	movs	r3, #0
 8026eb8:	900a      	str	r0, [sp, #40]	@ 0x28
 8026eba:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026ebc:	4ed0      	ldr	r6, [pc, #832]	@ (8027200 <_dtoa_r+0x70c>)
 8026ebe:	112d      	asrs	r5, r5, #4
 8026ec0:	2d00      	cmp	r5, #0
 8026ec2:	d000      	beq.n	8026ec6 <_dtoa_r+0x3d2>
 8026ec4:	e095      	b.n	8026ff2 <_dtoa_r+0x4fe>
 8026ec6:	2b00      	cmp	r3, #0
 8026ec8:	d1a2      	bne.n	8026e10 <_dtoa_r+0x31c>
 8026eca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026ecc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026ece:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026ed0:	2b00      	cmp	r3, #0
 8026ed2:	d100      	bne.n	8026ed6 <_dtoa_r+0x3e2>
 8026ed4:	e098      	b.n	8027008 <_dtoa_r+0x514>
 8026ed6:	2200      	movs	r2, #0
 8026ed8:	0030      	movs	r0, r6
 8026eda:	0039      	movs	r1, r7
 8026edc:	4bc9      	ldr	r3, [pc, #804]	@ (8027204 <_dtoa_r+0x710>)
 8026ede:	f7d9 faed 	bl	80004bc <__aeabi_dcmplt>
 8026ee2:	2800      	cmp	r0, #0
 8026ee4:	d100      	bne.n	8026ee8 <_dtoa_r+0x3f4>
 8026ee6:	e08f      	b.n	8027008 <_dtoa_r+0x514>
 8026ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026eea:	2b00      	cmp	r3, #0
 8026eec:	d100      	bne.n	8026ef0 <_dtoa_r+0x3fc>
 8026eee:	e08b      	b.n	8027008 <_dtoa_r+0x514>
 8026ef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026ef2:	2b00      	cmp	r3, #0
 8026ef4:	dd37      	ble.n	8026f66 <_dtoa_r+0x472>
 8026ef6:	9b04      	ldr	r3, [sp, #16]
 8026ef8:	2200      	movs	r2, #0
 8026efa:	3b01      	subs	r3, #1
 8026efc:	930c      	str	r3, [sp, #48]	@ 0x30
 8026efe:	0030      	movs	r0, r6
 8026f00:	4bc1      	ldr	r3, [pc, #772]	@ (8027208 <_dtoa_r+0x714>)
 8026f02:	0039      	movs	r1, r7
 8026f04:	f7db fd26 	bl	8002954 <__aeabi_dmul>
 8026f08:	900a      	str	r0, [sp, #40]	@ 0x28
 8026f0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026f0e:	3401      	adds	r4, #1
 8026f10:	0020      	movs	r0, r4
 8026f12:	9311      	str	r3, [sp, #68]	@ 0x44
 8026f14:	f7dc fc6c 	bl	80037f0 <__aeabi_i2d>
 8026f18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026f1c:	f7db fd1a 	bl	8002954 <__aeabi_dmul>
 8026f20:	4bba      	ldr	r3, [pc, #744]	@ (802720c <_dtoa_r+0x718>)
 8026f22:	2200      	movs	r2, #0
 8026f24:	f7da fd16 	bl	8001954 <__aeabi_dadd>
 8026f28:	4bb9      	ldr	r3, [pc, #740]	@ (8027210 <_dtoa_r+0x71c>)
 8026f2a:	0006      	movs	r6, r0
 8026f2c:	18cf      	adds	r7, r1, r3
 8026f2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f30:	2b00      	cmp	r3, #0
 8026f32:	d16d      	bne.n	8027010 <_dtoa_r+0x51c>
 8026f34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f36:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f38:	2200      	movs	r2, #0
 8026f3a:	4bb6      	ldr	r3, [pc, #728]	@ (8027214 <_dtoa_r+0x720>)
 8026f3c:	f7db fff0 	bl	8002f20 <__aeabi_dsub>
 8026f40:	0032      	movs	r2, r6
 8026f42:	003b      	movs	r3, r7
 8026f44:	0004      	movs	r4, r0
 8026f46:	000d      	movs	r5, r1
 8026f48:	f7d9 facc 	bl	80004e4 <__aeabi_dcmpgt>
 8026f4c:	2800      	cmp	r0, #0
 8026f4e:	d000      	beq.n	8026f52 <_dtoa_r+0x45e>
 8026f50:	e2b6      	b.n	80274c0 <_dtoa_r+0x9cc>
 8026f52:	2180      	movs	r1, #128	@ 0x80
 8026f54:	0609      	lsls	r1, r1, #24
 8026f56:	187b      	adds	r3, r7, r1
 8026f58:	0032      	movs	r2, r6
 8026f5a:	0020      	movs	r0, r4
 8026f5c:	0029      	movs	r1, r5
 8026f5e:	f7d9 faad 	bl	80004bc <__aeabi_dcmplt>
 8026f62:	2800      	cmp	r0, #0
 8026f64:	d128      	bne.n	8026fb8 <_dtoa_r+0x4c4>
 8026f66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026f68:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026f6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8026f6c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026f6e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026f70:	2b00      	cmp	r3, #0
 8026f72:	da00      	bge.n	8026f76 <_dtoa_r+0x482>
 8026f74:	e174      	b.n	8027260 <_dtoa_r+0x76c>
 8026f76:	9a04      	ldr	r2, [sp, #16]
 8026f78:	2a0e      	cmp	r2, #14
 8026f7a:	dd00      	ble.n	8026f7e <_dtoa_r+0x48a>
 8026f7c:	e170      	b.n	8027260 <_dtoa_r+0x76c>
 8026f7e:	4b9f      	ldr	r3, [pc, #636]	@ (80271fc <_dtoa_r+0x708>)
 8026f80:	00d2      	lsls	r2, r2, #3
 8026f82:	189b      	adds	r3, r3, r2
 8026f84:	685c      	ldr	r4, [r3, #4]
 8026f86:	681b      	ldr	r3, [r3, #0]
 8026f88:	9306      	str	r3, [sp, #24]
 8026f8a:	9407      	str	r4, [sp, #28]
 8026f8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026f8e:	2b00      	cmp	r3, #0
 8026f90:	db00      	blt.n	8026f94 <_dtoa_r+0x4a0>
 8026f92:	e0e7      	b.n	8027164 <_dtoa_r+0x670>
 8026f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026f96:	2b00      	cmp	r3, #0
 8026f98:	dd00      	ble.n	8026f9c <_dtoa_r+0x4a8>
 8026f9a:	e0e3      	b.n	8027164 <_dtoa_r+0x670>
 8026f9c:	d10c      	bne.n	8026fb8 <_dtoa_r+0x4c4>
 8026f9e:	9806      	ldr	r0, [sp, #24]
 8026fa0:	9907      	ldr	r1, [sp, #28]
 8026fa2:	2200      	movs	r2, #0
 8026fa4:	4b9b      	ldr	r3, [pc, #620]	@ (8027214 <_dtoa_r+0x720>)
 8026fa6:	f7db fcd5 	bl	8002954 <__aeabi_dmul>
 8026faa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026fac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026fae:	f7d9 faa3 	bl	80004f8 <__aeabi_dcmpge>
 8026fb2:	2800      	cmp	r0, #0
 8026fb4:	d100      	bne.n	8026fb8 <_dtoa_r+0x4c4>
 8026fb6:	e286      	b.n	80274c6 <_dtoa_r+0x9d2>
 8026fb8:	2600      	movs	r6, #0
 8026fba:	0037      	movs	r7, r6
 8026fbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026fbe:	9c08      	ldr	r4, [sp, #32]
 8026fc0:	43db      	mvns	r3, r3
 8026fc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8026fc4:	9704      	str	r7, [sp, #16]
 8026fc6:	2700      	movs	r7, #0
 8026fc8:	0031      	movs	r1, r6
 8026fca:	9803      	ldr	r0, [sp, #12]
 8026fcc:	f001 f838 	bl	8028040 <_Bfree>
 8026fd0:	9b04      	ldr	r3, [sp, #16]
 8026fd2:	2b00      	cmp	r3, #0
 8026fd4:	d100      	bne.n	8026fd8 <_dtoa_r+0x4e4>
 8026fd6:	e0bb      	b.n	8027150 <_dtoa_r+0x65c>
 8026fd8:	2f00      	cmp	r7, #0
 8026fda:	d005      	beq.n	8026fe8 <_dtoa_r+0x4f4>
 8026fdc:	429f      	cmp	r7, r3
 8026fde:	d003      	beq.n	8026fe8 <_dtoa_r+0x4f4>
 8026fe0:	0039      	movs	r1, r7
 8026fe2:	9803      	ldr	r0, [sp, #12]
 8026fe4:	f001 f82c 	bl	8028040 <_Bfree>
 8026fe8:	9904      	ldr	r1, [sp, #16]
 8026fea:	9803      	ldr	r0, [sp, #12]
 8026fec:	f001 f828 	bl	8028040 <_Bfree>
 8026ff0:	e0ae      	b.n	8027150 <_dtoa_r+0x65c>
 8026ff2:	423d      	tst	r5, r7
 8026ff4:	d005      	beq.n	8027002 <_dtoa_r+0x50e>
 8026ff6:	6832      	ldr	r2, [r6, #0]
 8026ff8:	6873      	ldr	r3, [r6, #4]
 8026ffa:	f7db fcab 	bl	8002954 <__aeabi_dmul>
 8026ffe:	003b      	movs	r3, r7
 8027000:	3401      	adds	r4, #1
 8027002:	106d      	asrs	r5, r5, #1
 8027004:	3608      	adds	r6, #8
 8027006:	e75b      	b.n	8026ec0 <_dtoa_r+0x3cc>
 8027008:	9b04      	ldr	r3, [sp, #16]
 802700a:	930c      	str	r3, [sp, #48]	@ 0x30
 802700c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802700e:	e77f      	b.n	8026f10 <_dtoa_r+0x41c>
 8027010:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027012:	4b7a      	ldr	r3, [pc, #488]	@ (80271fc <_dtoa_r+0x708>)
 8027014:	3a01      	subs	r2, #1
 8027016:	00d2      	lsls	r2, r2, #3
 8027018:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802701a:	189b      	adds	r3, r3, r2
 802701c:	681a      	ldr	r2, [r3, #0]
 802701e:	685b      	ldr	r3, [r3, #4]
 8027020:	2900      	cmp	r1, #0
 8027022:	d04c      	beq.n	80270be <_dtoa_r+0x5ca>
 8027024:	2000      	movs	r0, #0
 8027026:	497c      	ldr	r1, [pc, #496]	@ (8027218 <_dtoa_r+0x724>)
 8027028:	f7db f85a 	bl	80020e0 <__aeabi_ddiv>
 802702c:	0032      	movs	r2, r6
 802702e:	003b      	movs	r3, r7
 8027030:	f7db ff76 	bl	8002f20 <__aeabi_dsub>
 8027034:	9a08      	ldr	r2, [sp, #32]
 8027036:	0006      	movs	r6, r0
 8027038:	4694      	mov	ip, r2
 802703a:	000f      	movs	r7, r1
 802703c:	9b08      	ldr	r3, [sp, #32]
 802703e:	9316      	str	r3, [sp, #88]	@ 0x58
 8027040:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027042:	4463      	add	r3, ip
 8027044:	9311      	str	r3, [sp, #68]	@ 0x44
 8027046:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802704a:	f7dc fb95 	bl	8003778 <__aeabi_d2iz>
 802704e:	0005      	movs	r5, r0
 8027050:	f7dc fbce 	bl	80037f0 <__aeabi_i2d>
 8027054:	0002      	movs	r2, r0
 8027056:	000b      	movs	r3, r1
 8027058:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802705a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802705c:	f7db ff60 	bl	8002f20 <__aeabi_dsub>
 8027060:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027062:	3530      	adds	r5, #48	@ 0x30
 8027064:	1c5c      	adds	r4, r3, #1
 8027066:	701d      	strb	r5, [r3, #0]
 8027068:	0032      	movs	r2, r6
 802706a:	003b      	movs	r3, r7
 802706c:	900a      	str	r0, [sp, #40]	@ 0x28
 802706e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027070:	f7d9 fa24 	bl	80004bc <__aeabi_dcmplt>
 8027074:	2800      	cmp	r0, #0
 8027076:	d16b      	bne.n	8027150 <_dtoa_r+0x65c>
 8027078:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802707a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802707c:	2000      	movs	r0, #0
 802707e:	4961      	ldr	r1, [pc, #388]	@ (8027204 <_dtoa_r+0x710>)
 8027080:	f7db ff4e 	bl	8002f20 <__aeabi_dsub>
 8027084:	0032      	movs	r2, r6
 8027086:	003b      	movs	r3, r7
 8027088:	f7d9 fa18 	bl	80004bc <__aeabi_dcmplt>
 802708c:	2800      	cmp	r0, #0
 802708e:	d000      	beq.n	8027092 <_dtoa_r+0x59e>
 8027090:	e0c6      	b.n	8027220 <_dtoa_r+0x72c>
 8027092:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027094:	42a3      	cmp	r3, r4
 8027096:	d100      	bne.n	802709a <_dtoa_r+0x5a6>
 8027098:	e765      	b.n	8026f66 <_dtoa_r+0x472>
 802709a:	2200      	movs	r2, #0
 802709c:	0030      	movs	r0, r6
 802709e:	0039      	movs	r1, r7
 80270a0:	4b59      	ldr	r3, [pc, #356]	@ (8027208 <_dtoa_r+0x714>)
 80270a2:	f7db fc57 	bl	8002954 <__aeabi_dmul>
 80270a6:	2200      	movs	r2, #0
 80270a8:	0006      	movs	r6, r0
 80270aa:	000f      	movs	r7, r1
 80270ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80270ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80270b0:	4b55      	ldr	r3, [pc, #340]	@ (8027208 <_dtoa_r+0x714>)
 80270b2:	f7db fc4f 	bl	8002954 <__aeabi_dmul>
 80270b6:	9416      	str	r4, [sp, #88]	@ 0x58
 80270b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80270ba:	910b      	str	r1, [sp, #44]	@ 0x2c
 80270bc:	e7c3      	b.n	8027046 <_dtoa_r+0x552>
 80270be:	0030      	movs	r0, r6
 80270c0:	0039      	movs	r1, r7
 80270c2:	f7db fc47 	bl	8002954 <__aeabi_dmul>
 80270c6:	9d08      	ldr	r5, [sp, #32]
 80270c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80270ca:	002b      	movs	r3, r5
 80270cc:	4694      	mov	ip, r2
 80270ce:	9016      	str	r0, [sp, #88]	@ 0x58
 80270d0:	9117      	str	r1, [sp, #92]	@ 0x5c
 80270d2:	4463      	add	r3, ip
 80270d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80270d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80270d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80270da:	f7dc fb4d 	bl	8003778 <__aeabi_d2iz>
 80270de:	0004      	movs	r4, r0
 80270e0:	f7dc fb86 	bl	80037f0 <__aeabi_i2d>
 80270e4:	000b      	movs	r3, r1
 80270e6:	0002      	movs	r2, r0
 80270e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80270ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80270ec:	f7db ff18 	bl	8002f20 <__aeabi_dsub>
 80270f0:	3430      	adds	r4, #48	@ 0x30
 80270f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80270f4:	702c      	strb	r4, [r5, #0]
 80270f6:	3501      	adds	r5, #1
 80270f8:	0006      	movs	r6, r0
 80270fa:	000f      	movs	r7, r1
 80270fc:	42ab      	cmp	r3, r5
 80270fe:	d12a      	bne.n	8027156 <_dtoa_r+0x662>
 8027100:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8027102:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8027104:	9b08      	ldr	r3, [sp, #32]
 8027106:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027108:	469c      	mov	ip, r3
 802710a:	2200      	movs	r2, #0
 802710c:	4b42      	ldr	r3, [pc, #264]	@ (8027218 <_dtoa_r+0x724>)
 802710e:	4464      	add	r4, ip
 8027110:	f7da fc20 	bl	8001954 <__aeabi_dadd>
 8027114:	0002      	movs	r2, r0
 8027116:	000b      	movs	r3, r1
 8027118:	0030      	movs	r0, r6
 802711a:	0039      	movs	r1, r7
 802711c:	f7d9 f9e2 	bl	80004e4 <__aeabi_dcmpgt>
 8027120:	2800      	cmp	r0, #0
 8027122:	d000      	beq.n	8027126 <_dtoa_r+0x632>
 8027124:	e07c      	b.n	8027220 <_dtoa_r+0x72c>
 8027126:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8027128:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802712a:	2000      	movs	r0, #0
 802712c:	493a      	ldr	r1, [pc, #232]	@ (8027218 <_dtoa_r+0x724>)
 802712e:	f7db fef7 	bl	8002f20 <__aeabi_dsub>
 8027132:	0002      	movs	r2, r0
 8027134:	000b      	movs	r3, r1
 8027136:	0030      	movs	r0, r6
 8027138:	0039      	movs	r1, r7
 802713a:	f7d9 f9bf 	bl	80004bc <__aeabi_dcmplt>
 802713e:	2800      	cmp	r0, #0
 8027140:	d100      	bne.n	8027144 <_dtoa_r+0x650>
 8027142:	e710      	b.n	8026f66 <_dtoa_r+0x472>
 8027144:	0023      	movs	r3, r4
 8027146:	3c01      	subs	r4, #1
 8027148:	7822      	ldrb	r2, [r4, #0]
 802714a:	2a30      	cmp	r2, #48	@ 0x30
 802714c:	d0fa      	beq.n	8027144 <_dtoa_r+0x650>
 802714e:	001c      	movs	r4, r3
 8027150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027152:	9304      	str	r3, [sp, #16]
 8027154:	e042      	b.n	80271dc <_dtoa_r+0x6e8>
 8027156:	2200      	movs	r2, #0
 8027158:	4b2b      	ldr	r3, [pc, #172]	@ (8027208 <_dtoa_r+0x714>)
 802715a:	f7db fbfb 	bl	8002954 <__aeabi_dmul>
 802715e:	900a      	str	r0, [sp, #40]	@ 0x28
 8027160:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027162:	e7b8      	b.n	80270d6 <_dtoa_r+0x5e2>
 8027164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027166:	9d08      	ldr	r5, [sp, #32]
 8027168:	3b01      	subs	r3, #1
 802716a:	195b      	adds	r3, r3, r5
 802716c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802716e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8027170:	930a      	str	r3, [sp, #40]	@ 0x28
 8027172:	9a06      	ldr	r2, [sp, #24]
 8027174:	9b07      	ldr	r3, [sp, #28]
 8027176:	0030      	movs	r0, r6
 8027178:	0039      	movs	r1, r7
 802717a:	f7da ffb1 	bl	80020e0 <__aeabi_ddiv>
 802717e:	f7dc fafb 	bl	8003778 <__aeabi_d2iz>
 8027182:	9009      	str	r0, [sp, #36]	@ 0x24
 8027184:	f7dc fb34 	bl	80037f0 <__aeabi_i2d>
 8027188:	9a06      	ldr	r2, [sp, #24]
 802718a:	9b07      	ldr	r3, [sp, #28]
 802718c:	f7db fbe2 	bl	8002954 <__aeabi_dmul>
 8027190:	0002      	movs	r2, r0
 8027192:	000b      	movs	r3, r1
 8027194:	0030      	movs	r0, r6
 8027196:	0039      	movs	r1, r7
 8027198:	f7db fec2 	bl	8002f20 <__aeabi_dsub>
 802719c:	002b      	movs	r3, r5
 802719e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80271a0:	3501      	adds	r5, #1
 80271a2:	3230      	adds	r2, #48	@ 0x30
 80271a4:	701a      	strb	r2, [r3, #0]
 80271a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80271a8:	002c      	movs	r4, r5
 80271aa:	429a      	cmp	r2, r3
 80271ac:	d14b      	bne.n	8027246 <_dtoa_r+0x752>
 80271ae:	0002      	movs	r2, r0
 80271b0:	000b      	movs	r3, r1
 80271b2:	f7da fbcf 	bl	8001954 <__aeabi_dadd>
 80271b6:	9a06      	ldr	r2, [sp, #24]
 80271b8:	9b07      	ldr	r3, [sp, #28]
 80271ba:	0006      	movs	r6, r0
 80271bc:	000f      	movs	r7, r1
 80271be:	f7d9 f991 	bl	80004e4 <__aeabi_dcmpgt>
 80271c2:	2800      	cmp	r0, #0
 80271c4:	d12a      	bne.n	802721c <_dtoa_r+0x728>
 80271c6:	9a06      	ldr	r2, [sp, #24]
 80271c8:	9b07      	ldr	r3, [sp, #28]
 80271ca:	0030      	movs	r0, r6
 80271cc:	0039      	movs	r1, r7
 80271ce:	f7d9 f96f 	bl	80004b0 <__aeabi_dcmpeq>
 80271d2:	2800      	cmp	r0, #0
 80271d4:	d002      	beq.n	80271dc <_dtoa_r+0x6e8>
 80271d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80271d8:	07dd      	lsls	r5, r3, #31
 80271da:	d41f      	bmi.n	802721c <_dtoa_r+0x728>
 80271dc:	9905      	ldr	r1, [sp, #20]
 80271de:	9803      	ldr	r0, [sp, #12]
 80271e0:	f000 ff2e 	bl	8028040 <_Bfree>
 80271e4:	2300      	movs	r3, #0
 80271e6:	7023      	strb	r3, [r4, #0]
 80271e8:	9b04      	ldr	r3, [sp, #16]
 80271ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80271ec:	3301      	adds	r3, #1
 80271ee:	6013      	str	r3, [r2, #0]
 80271f0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80271f2:	2b00      	cmp	r3, #0
 80271f4:	d100      	bne.n	80271f8 <_dtoa_r+0x704>
 80271f6:	e4c7      	b.n	8026b88 <_dtoa_r+0x94>
 80271f8:	601c      	str	r4, [r3, #0]
 80271fa:	e4c5      	b.n	8026b88 <_dtoa_r+0x94>
 80271fc:	0802f850 	.word	0x0802f850
 8027200:	0802f828 	.word	0x0802f828
 8027204:	3ff00000 	.word	0x3ff00000
 8027208:	40240000 	.word	0x40240000
 802720c:	401c0000 	.word	0x401c0000
 8027210:	fcc00000 	.word	0xfcc00000
 8027214:	40140000 	.word	0x40140000
 8027218:	3fe00000 	.word	0x3fe00000
 802721c:	9b04      	ldr	r3, [sp, #16]
 802721e:	930c      	str	r3, [sp, #48]	@ 0x30
 8027220:	0023      	movs	r3, r4
 8027222:	001c      	movs	r4, r3
 8027224:	3b01      	subs	r3, #1
 8027226:	781a      	ldrb	r2, [r3, #0]
 8027228:	2a39      	cmp	r2, #57	@ 0x39
 802722a:	d108      	bne.n	802723e <_dtoa_r+0x74a>
 802722c:	9a08      	ldr	r2, [sp, #32]
 802722e:	429a      	cmp	r2, r3
 8027230:	d1f7      	bne.n	8027222 <_dtoa_r+0x72e>
 8027232:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027234:	9908      	ldr	r1, [sp, #32]
 8027236:	3201      	adds	r2, #1
 8027238:	920c      	str	r2, [sp, #48]	@ 0x30
 802723a:	2230      	movs	r2, #48	@ 0x30
 802723c:	700a      	strb	r2, [r1, #0]
 802723e:	781a      	ldrb	r2, [r3, #0]
 8027240:	3201      	adds	r2, #1
 8027242:	701a      	strb	r2, [r3, #0]
 8027244:	e784      	b.n	8027150 <_dtoa_r+0x65c>
 8027246:	2200      	movs	r2, #0
 8027248:	4bc6      	ldr	r3, [pc, #792]	@ (8027564 <_dtoa_r+0xa70>)
 802724a:	f7db fb83 	bl	8002954 <__aeabi_dmul>
 802724e:	2200      	movs	r2, #0
 8027250:	2300      	movs	r3, #0
 8027252:	0006      	movs	r6, r0
 8027254:	000f      	movs	r7, r1
 8027256:	f7d9 f92b 	bl	80004b0 <__aeabi_dcmpeq>
 802725a:	2800      	cmp	r0, #0
 802725c:	d089      	beq.n	8027172 <_dtoa_r+0x67e>
 802725e:	e7bd      	b.n	80271dc <_dtoa_r+0x6e8>
 8027260:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8027262:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027264:	9c06      	ldr	r4, [sp, #24]
 8027266:	2f00      	cmp	r7, #0
 8027268:	d014      	beq.n	8027294 <_dtoa_r+0x7a0>
 802726a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802726c:	2a01      	cmp	r2, #1
 802726e:	dd00      	ble.n	8027272 <_dtoa_r+0x77e>
 8027270:	e0e4      	b.n	802743c <_dtoa_r+0x948>
 8027272:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8027274:	2a00      	cmp	r2, #0
 8027276:	d100      	bne.n	802727a <_dtoa_r+0x786>
 8027278:	e0da      	b.n	8027430 <_dtoa_r+0x93c>
 802727a:	4abb      	ldr	r2, [pc, #748]	@ (8027568 <_dtoa_r+0xa74>)
 802727c:	189b      	adds	r3, r3, r2
 802727e:	9a06      	ldr	r2, [sp, #24]
 8027280:	2101      	movs	r1, #1
 8027282:	18d2      	adds	r2, r2, r3
 8027284:	9206      	str	r2, [sp, #24]
 8027286:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027288:	9803      	ldr	r0, [sp, #12]
 802728a:	18d3      	adds	r3, r2, r3
 802728c:	930d      	str	r3, [sp, #52]	@ 0x34
 802728e:	f000 ffdb 	bl	8028248 <__i2b>
 8027292:	0007      	movs	r7, r0
 8027294:	2c00      	cmp	r4, #0
 8027296:	d00e      	beq.n	80272b6 <_dtoa_r+0x7c2>
 8027298:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802729a:	2b00      	cmp	r3, #0
 802729c:	dd0b      	ble.n	80272b6 <_dtoa_r+0x7c2>
 802729e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80272a0:	0023      	movs	r3, r4
 80272a2:	4294      	cmp	r4, r2
 80272a4:	dd00      	ble.n	80272a8 <_dtoa_r+0x7b4>
 80272a6:	0013      	movs	r3, r2
 80272a8:	9a06      	ldr	r2, [sp, #24]
 80272aa:	1ae4      	subs	r4, r4, r3
 80272ac:	1ad2      	subs	r2, r2, r3
 80272ae:	9206      	str	r2, [sp, #24]
 80272b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80272b2:	1ad3      	subs	r3, r2, r3
 80272b4:	930d      	str	r3, [sp, #52]	@ 0x34
 80272b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80272b8:	2b00      	cmp	r3, #0
 80272ba:	d021      	beq.n	8027300 <_dtoa_r+0x80c>
 80272bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80272be:	2b00      	cmp	r3, #0
 80272c0:	d100      	bne.n	80272c4 <_dtoa_r+0x7d0>
 80272c2:	e0d3      	b.n	802746c <_dtoa_r+0x978>
 80272c4:	9e05      	ldr	r6, [sp, #20]
 80272c6:	2d00      	cmp	r5, #0
 80272c8:	d014      	beq.n	80272f4 <_dtoa_r+0x800>
 80272ca:	0039      	movs	r1, r7
 80272cc:	002a      	movs	r2, r5
 80272ce:	9803      	ldr	r0, [sp, #12]
 80272d0:	f001 f87c 	bl	80283cc <__pow5mult>
 80272d4:	9a05      	ldr	r2, [sp, #20]
 80272d6:	0001      	movs	r1, r0
 80272d8:	0007      	movs	r7, r0
 80272da:	9803      	ldr	r0, [sp, #12]
 80272dc:	f000 ffcc 	bl	8028278 <__multiply>
 80272e0:	0006      	movs	r6, r0
 80272e2:	9905      	ldr	r1, [sp, #20]
 80272e4:	9803      	ldr	r0, [sp, #12]
 80272e6:	f000 feab 	bl	8028040 <_Bfree>
 80272ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80272ec:	9605      	str	r6, [sp, #20]
 80272ee:	1b5b      	subs	r3, r3, r5
 80272f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80272f2:	d005      	beq.n	8027300 <_dtoa_r+0x80c>
 80272f4:	0031      	movs	r1, r6
 80272f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80272f8:	9803      	ldr	r0, [sp, #12]
 80272fa:	f001 f867 	bl	80283cc <__pow5mult>
 80272fe:	9005      	str	r0, [sp, #20]
 8027300:	2101      	movs	r1, #1
 8027302:	9803      	ldr	r0, [sp, #12]
 8027304:	f000 ffa0 	bl	8028248 <__i2b>
 8027308:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802730a:	0006      	movs	r6, r0
 802730c:	2b00      	cmp	r3, #0
 802730e:	d100      	bne.n	8027312 <_dtoa_r+0x81e>
 8027310:	e1bc      	b.n	802768c <_dtoa_r+0xb98>
 8027312:	001a      	movs	r2, r3
 8027314:	0001      	movs	r1, r0
 8027316:	9803      	ldr	r0, [sp, #12]
 8027318:	f001 f858 	bl	80283cc <__pow5mult>
 802731c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802731e:	0006      	movs	r6, r0
 8027320:	2500      	movs	r5, #0
 8027322:	2b01      	cmp	r3, #1
 8027324:	dc16      	bgt.n	8027354 <_dtoa_r+0x860>
 8027326:	2500      	movs	r5, #0
 8027328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802732a:	42ab      	cmp	r3, r5
 802732c:	d10e      	bne.n	802734c <_dtoa_r+0x858>
 802732e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027330:	031b      	lsls	r3, r3, #12
 8027332:	42ab      	cmp	r3, r5
 8027334:	d10a      	bne.n	802734c <_dtoa_r+0x858>
 8027336:	4b8d      	ldr	r3, [pc, #564]	@ (802756c <_dtoa_r+0xa78>)
 8027338:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802733a:	4213      	tst	r3, r2
 802733c:	d006      	beq.n	802734c <_dtoa_r+0x858>
 802733e:	9b06      	ldr	r3, [sp, #24]
 8027340:	3501      	adds	r5, #1
 8027342:	3301      	adds	r3, #1
 8027344:	9306      	str	r3, [sp, #24]
 8027346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027348:	3301      	adds	r3, #1
 802734a:	930d      	str	r3, [sp, #52]	@ 0x34
 802734c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802734e:	2001      	movs	r0, #1
 8027350:	2b00      	cmp	r3, #0
 8027352:	d008      	beq.n	8027366 <_dtoa_r+0x872>
 8027354:	6933      	ldr	r3, [r6, #16]
 8027356:	3303      	adds	r3, #3
 8027358:	009b      	lsls	r3, r3, #2
 802735a:	18f3      	adds	r3, r6, r3
 802735c:	6858      	ldr	r0, [r3, #4]
 802735e:	f000 ff23 	bl	80281a8 <__hi0bits>
 8027362:	2320      	movs	r3, #32
 8027364:	1a18      	subs	r0, r3, r0
 8027366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027368:	1818      	adds	r0, r3, r0
 802736a:	0002      	movs	r2, r0
 802736c:	231f      	movs	r3, #31
 802736e:	401a      	ands	r2, r3
 8027370:	4218      	tst	r0, r3
 8027372:	d100      	bne.n	8027376 <_dtoa_r+0x882>
 8027374:	e081      	b.n	802747a <_dtoa_r+0x986>
 8027376:	3301      	adds	r3, #1
 8027378:	1a9b      	subs	r3, r3, r2
 802737a:	2b04      	cmp	r3, #4
 802737c:	dd79      	ble.n	8027472 <_dtoa_r+0x97e>
 802737e:	231c      	movs	r3, #28
 8027380:	1a9b      	subs	r3, r3, r2
 8027382:	9a06      	ldr	r2, [sp, #24]
 8027384:	18e4      	adds	r4, r4, r3
 8027386:	18d2      	adds	r2, r2, r3
 8027388:	9206      	str	r2, [sp, #24]
 802738a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802738c:	18d3      	adds	r3, r2, r3
 802738e:	930d      	str	r3, [sp, #52]	@ 0x34
 8027390:	9b06      	ldr	r3, [sp, #24]
 8027392:	2b00      	cmp	r3, #0
 8027394:	dd05      	ble.n	80273a2 <_dtoa_r+0x8ae>
 8027396:	001a      	movs	r2, r3
 8027398:	9905      	ldr	r1, [sp, #20]
 802739a:	9803      	ldr	r0, [sp, #12]
 802739c:	f001 f872 	bl	8028484 <__lshift>
 80273a0:	9005      	str	r0, [sp, #20]
 80273a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80273a4:	2b00      	cmp	r3, #0
 80273a6:	dd05      	ble.n	80273b4 <_dtoa_r+0x8c0>
 80273a8:	0031      	movs	r1, r6
 80273aa:	001a      	movs	r2, r3
 80273ac:	9803      	ldr	r0, [sp, #12]
 80273ae:	f001 f869 	bl	8028484 <__lshift>
 80273b2:	0006      	movs	r6, r0
 80273b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80273b6:	2b00      	cmp	r3, #0
 80273b8:	d061      	beq.n	802747e <_dtoa_r+0x98a>
 80273ba:	0031      	movs	r1, r6
 80273bc:	9805      	ldr	r0, [sp, #20]
 80273be:	f001 f8cd 	bl	802855c <__mcmp>
 80273c2:	2800      	cmp	r0, #0
 80273c4:	da5b      	bge.n	802747e <_dtoa_r+0x98a>
 80273c6:	9b04      	ldr	r3, [sp, #16]
 80273c8:	220a      	movs	r2, #10
 80273ca:	3b01      	subs	r3, #1
 80273cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80273ce:	9905      	ldr	r1, [sp, #20]
 80273d0:	2300      	movs	r3, #0
 80273d2:	9803      	ldr	r0, [sp, #12]
 80273d4:	f000 fe58 	bl	8028088 <__multadd>
 80273d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80273da:	9005      	str	r0, [sp, #20]
 80273dc:	2b00      	cmp	r3, #0
 80273de:	d100      	bne.n	80273e2 <_dtoa_r+0x8ee>
 80273e0:	e15b      	b.n	802769a <_dtoa_r+0xba6>
 80273e2:	2300      	movs	r3, #0
 80273e4:	0039      	movs	r1, r7
 80273e6:	220a      	movs	r2, #10
 80273e8:	9803      	ldr	r0, [sp, #12]
 80273ea:	f000 fe4d 	bl	8028088 <__multadd>
 80273ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80273f0:	0007      	movs	r7, r0
 80273f2:	2b00      	cmp	r3, #0
 80273f4:	dc4d      	bgt.n	8027492 <_dtoa_r+0x99e>
 80273f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80273f8:	2b02      	cmp	r3, #2
 80273fa:	dd46      	ble.n	802748a <_dtoa_r+0x996>
 80273fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80273fe:	2b00      	cmp	r3, #0
 8027400:	d000      	beq.n	8027404 <_dtoa_r+0x910>
 8027402:	e5db      	b.n	8026fbc <_dtoa_r+0x4c8>
 8027404:	0031      	movs	r1, r6
 8027406:	2205      	movs	r2, #5
 8027408:	9803      	ldr	r0, [sp, #12]
 802740a:	f000 fe3d 	bl	8028088 <__multadd>
 802740e:	0006      	movs	r6, r0
 8027410:	0001      	movs	r1, r0
 8027412:	9805      	ldr	r0, [sp, #20]
 8027414:	f001 f8a2 	bl	802855c <__mcmp>
 8027418:	2800      	cmp	r0, #0
 802741a:	dc00      	bgt.n	802741e <_dtoa_r+0x92a>
 802741c:	e5ce      	b.n	8026fbc <_dtoa_r+0x4c8>
 802741e:	9b08      	ldr	r3, [sp, #32]
 8027420:	9a08      	ldr	r2, [sp, #32]
 8027422:	1c5c      	adds	r4, r3, #1
 8027424:	2331      	movs	r3, #49	@ 0x31
 8027426:	7013      	strb	r3, [r2, #0]
 8027428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802742a:	3301      	adds	r3, #1
 802742c:	930c      	str	r3, [sp, #48]	@ 0x30
 802742e:	e5c9      	b.n	8026fc4 <_dtoa_r+0x4d0>
 8027430:	2336      	movs	r3, #54	@ 0x36
 8027432:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8027434:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027436:	1a9b      	subs	r3, r3, r2
 8027438:	9c06      	ldr	r4, [sp, #24]
 802743a:	e720      	b.n	802727e <_dtoa_r+0x78a>
 802743c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802743e:	1e5d      	subs	r5, r3, #1
 8027440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027442:	42ab      	cmp	r3, r5
 8027444:	db08      	blt.n	8027458 <_dtoa_r+0x964>
 8027446:	1b5d      	subs	r5, r3, r5
 8027448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802744a:	2b00      	cmp	r3, #0
 802744c:	daf4      	bge.n	8027438 <_dtoa_r+0x944>
 802744e:	9b06      	ldr	r3, [sp, #24]
 8027450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027452:	1a9c      	subs	r4, r3, r2
 8027454:	2300      	movs	r3, #0
 8027456:	e712      	b.n	802727e <_dtoa_r+0x78a>
 8027458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802745a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802745c:	1aeb      	subs	r3, r5, r3
 802745e:	18d3      	adds	r3, r2, r3
 8027460:	9314      	str	r3, [sp, #80]	@ 0x50
 8027462:	950f      	str	r5, [sp, #60]	@ 0x3c
 8027464:	9c06      	ldr	r4, [sp, #24]
 8027466:	2500      	movs	r5, #0
 8027468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802746a:	e708      	b.n	802727e <_dtoa_r+0x78a>
 802746c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802746e:	9905      	ldr	r1, [sp, #20]
 8027470:	e742      	b.n	80272f8 <_dtoa_r+0x804>
 8027472:	2b04      	cmp	r3, #4
 8027474:	d08c      	beq.n	8027390 <_dtoa_r+0x89c>
 8027476:	331c      	adds	r3, #28
 8027478:	e783      	b.n	8027382 <_dtoa_r+0x88e>
 802747a:	0013      	movs	r3, r2
 802747c:	e7fb      	b.n	8027476 <_dtoa_r+0x982>
 802747e:	9b04      	ldr	r3, [sp, #16]
 8027480:	930c      	str	r3, [sp, #48]	@ 0x30
 8027482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027484:	930e      	str	r3, [sp, #56]	@ 0x38
 8027486:	2b00      	cmp	r3, #0
 8027488:	ddb5      	ble.n	80273f6 <_dtoa_r+0x902>
 802748a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802748c:	2b00      	cmp	r3, #0
 802748e:	d100      	bne.n	8027492 <_dtoa_r+0x99e>
 8027490:	e107      	b.n	80276a2 <_dtoa_r+0xbae>
 8027492:	2c00      	cmp	r4, #0
 8027494:	dd05      	ble.n	80274a2 <_dtoa_r+0x9ae>
 8027496:	0039      	movs	r1, r7
 8027498:	0022      	movs	r2, r4
 802749a:	9803      	ldr	r0, [sp, #12]
 802749c:	f000 fff2 	bl	8028484 <__lshift>
 80274a0:	0007      	movs	r7, r0
 80274a2:	9704      	str	r7, [sp, #16]
 80274a4:	2d00      	cmp	r5, #0
 80274a6:	d020      	beq.n	80274ea <_dtoa_r+0x9f6>
 80274a8:	6879      	ldr	r1, [r7, #4]
 80274aa:	9803      	ldr	r0, [sp, #12]
 80274ac:	f000 fd84 	bl	8027fb8 <_Balloc>
 80274b0:	1e04      	subs	r4, r0, #0
 80274b2:	d10c      	bne.n	80274ce <_dtoa_r+0x9da>
 80274b4:	0022      	movs	r2, r4
 80274b6:	4b2e      	ldr	r3, [pc, #184]	@ (8027570 <_dtoa_r+0xa7c>)
 80274b8:	482e      	ldr	r0, [pc, #184]	@ (8027574 <_dtoa_r+0xa80>)
 80274ba:	492f      	ldr	r1, [pc, #188]	@ (8027578 <_dtoa_r+0xa84>)
 80274bc:	f7ff fb2f 	bl	8026b1e <_dtoa_r+0x2a>
 80274c0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80274c2:	0037      	movs	r7, r6
 80274c4:	e7ab      	b.n	802741e <_dtoa_r+0x92a>
 80274c6:	9b04      	ldr	r3, [sp, #16]
 80274c8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80274ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80274cc:	e7f9      	b.n	80274c2 <_dtoa_r+0x9ce>
 80274ce:	0039      	movs	r1, r7
 80274d0:	693a      	ldr	r2, [r7, #16]
 80274d2:	310c      	adds	r1, #12
 80274d4:	3202      	adds	r2, #2
 80274d6:	0092      	lsls	r2, r2, #2
 80274d8:	300c      	adds	r0, #12
 80274da:	f7ff fa75 	bl	80269c8 <memcpy>
 80274de:	2201      	movs	r2, #1
 80274e0:	0021      	movs	r1, r4
 80274e2:	9803      	ldr	r0, [sp, #12]
 80274e4:	f000 ffce 	bl	8028484 <__lshift>
 80274e8:	9004      	str	r0, [sp, #16]
 80274ea:	9b08      	ldr	r3, [sp, #32]
 80274ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80274ee:	9306      	str	r3, [sp, #24]
 80274f0:	3b01      	subs	r3, #1
 80274f2:	189b      	adds	r3, r3, r2
 80274f4:	2201      	movs	r2, #1
 80274f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80274f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80274fa:	4013      	ands	r3, r2
 80274fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80274fe:	0031      	movs	r1, r6
 8027500:	9805      	ldr	r0, [sp, #20]
 8027502:	f7ff fa71 	bl	80269e8 <quorem>
 8027506:	0039      	movs	r1, r7
 8027508:	0005      	movs	r5, r0
 802750a:	900a      	str	r0, [sp, #40]	@ 0x28
 802750c:	9805      	ldr	r0, [sp, #20]
 802750e:	f001 f825 	bl	802855c <__mcmp>
 8027512:	9a04      	ldr	r2, [sp, #16]
 8027514:	900d      	str	r0, [sp, #52]	@ 0x34
 8027516:	0031      	movs	r1, r6
 8027518:	9803      	ldr	r0, [sp, #12]
 802751a:	f001 f83b 	bl	8028594 <__mdiff>
 802751e:	2201      	movs	r2, #1
 8027520:	68c3      	ldr	r3, [r0, #12]
 8027522:	0004      	movs	r4, r0
 8027524:	3530      	adds	r5, #48	@ 0x30
 8027526:	9209      	str	r2, [sp, #36]	@ 0x24
 8027528:	2b00      	cmp	r3, #0
 802752a:	d104      	bne.n	8027536 <_dtoa_r+0xa42>
 802752c:	0001      	movs	r1, r0
 802752e:	9805      	ldr	r0, [sp, #20]
 8027530:	f001 f814 	bl	802855c <__mcmp>
 8027534:	9009      	str	r0, [sp, #36]	@ 0x24
 8027536:	0021      	movs	r1, r4
 8027538:	9803      	ldr	r0, [sp, #12]
 802753a:	f000 fd81 	bl	8028040 <_Bfree>
 802753e:	9b06      	ldr	r3, [sp, #24]
 8027540:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027542:	1c5c      	adds	r4, r3, #1
 8027544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027546:	4313      	orrs	r3, r2
 8027548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802754a:	4313      	orrs	r3, r2
 802754c:	d116      	bne.n	802757c <_dtoa_r+0xa88>
 802754e:	2d39      	cmp	r5, #57	@ 0x39
 8027550:	d02f      	beq.n	80275b2 <_dtoa_r+0xabe>
 8027552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027554:	2b00      	cmp	r3, #0
 8027556:	dd01      	ble.n	802755c <_dtoa_r+0xa68>
 8027558:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802755a:	3531      	adds	r5, #49	@ 0x31
 802755c:	9b06      	ldr	r3, [sp, #24]
 802755e:	701d      	strb	r5, [r3, #0]
 8027560:	e532      	b.n	8026fc8 <_dtoa_r+0x4d4>
 8027562:	46c0      	nop			@ (mov r8, r8)
 8027564:	40240000 	.word	0x40240000
 8027568:	00000433 	.word	0x00000433
 802756c:	7ff00000 	.word	0x7ff00000
 8027570:	0802f5aa 	.word	0x0802f5aa
 8027574:	0802f552 	.word	0x0802f552
 8027578:	000002ef 	.word	0x000002ef
 802757c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802757e:	2b00      	cmp	r3, #0
 8027580:	db04      	blt.n	802758c <_dtoa_r+0xa98>
 8027582:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027584:	4313      	orrs	r3, r2
 8027586:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027588:	4313      	orrs	r3, r2
 802758a:	d11e      	bne.n	80275ca <_dtoa_r+0xad6>
 802758c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802758e:	2b00      	cmp	r3, #0
 8027590:	dde4      	ble.n	802755c <_dtoa_r+0xa68>
 8027592:	9905      	ldr	r1, [sp, #20]
 8027594:	2201      	movs	r2, #1
 8027596:	9803      	ldr	r0, [sp, #12]
 8027598:	f000 ff74 	bl	8028484 <__lshift>
 802759c:	0031      	movs	r1, r6
 802759e:	9005      	str	r0, [sp, #20]
 80275a0:	f000 ffdc 	bl	802855c <__mcmp>
 80275a4:	2800      	cmp	r0, #0
 80275a6:	dc02      	bgt.n	80275ae <_dtoa_r+0xaba>
 80275a8:	d1d8      	bne.n	802755c <_dtoa_r+0xa68>
 80275aa:	07eb      	lsls	r3, r5, #31
 80275ac:	d5d6      	bpl.n	802755c <_dtoa_r+0xa68>
 80275ae:	2d39      	cmp	r5, #57	@ 0x39
 80275b0:	d1d2      	bne.n	8027558 <_dtoa_r+0xa64>
 80275b2:	2339      	movs	r3, #57	@ 0x39
 80275b4:	9a06      	ldr	r2, [sp, #24]
 80275b6:	7013      	strb	r3, [r2, #0]
 80275b8:	0023      	movs	r3, r4
 80275ba:	001c      	movs	r4, r3
 80275bc:	3b01      	subs	r3, #1
 80275be:	781a      	ldrb	r2, [r3, #0]
 80275c0:	2a39      	cmp	r2, #57	@ 0x39
 80275c2:	d050      	beq.n	8027666 <_dtoa_r+0xb72>
 80275c4:	3201      	adds	r2, #1
 80275c6:	701a      	strb	r2, [r3, #0]
 80275c8:	e4fe      	b.n	8026fc8 <_dtoa_r+0x4d4>
 80275ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80275cc:	2b00      	cmp	r3, #0
 80275ce:	dd03      	ble.n	80275d8 <_dtoa_r+0xae4>
 80275d0:	2d39      	cmp	r5, #57	@ 0x39
 80275d2:	d0ee      	beq.n	80275b2 <_dtoa_r+0xabe>
 80275d4:	3501      	adds	r5, #1
 80275d6:	e7c1      	b.n	802755c <_dtoa_r+0xa68>
 80275d8:	9b06      	ldr	r3, [sp, #24]
 80275da:	9a06      	ldr	r2, [sp, #24]
 80275dc:	701d      	strb	r5, [r3, #0]
 80275de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80275e0:	4293      	cmp	r3, r2
 80275e2:	d02b      	beq.n	802763c <_dtoa_r+0xb48>
 80275e4:	2300      	movs	r3, #0
 80275e6:	220a      	movs	r2, #10
 80275e8:	9905      	ldr	r1, [sp, #20]
 80275ea:	9803      	ldr	r0, [sp, #12]
 80275ec:	f000 fd4c 	bl	8028088 <__multadd>
 80275f0:	9b04      	ldr	r3, [sp, #16]
 80275f2:	9005      	str	r0, [sp, #20]
 80275f4:	429f      	cmp	r7, r3
 80275f6:	d109      	bne.n	802760c <_dtoa_r+0xb18>
 80275f8:	0039      	movs	r1, r7
 80275fa:	2300      	movs	r3, #0
 80275fc:	220a      	movs	r2, #10
 80275fe:	9803      	ldr	r0, [sp, #12]
 8027600:	f000 fd42 	bl	8028088 <__multadd>
 8027604:	0007      	movs	r7, r0
 8027606:	9004      	str	r0, [sp, #16]
 8027608:	9406      	str	r4, [sp, #24]
 802760a:	e778      	b.n	80274fe <_dtoa_r+0xa0a>
 802760c:	0039      	movs	r1, r7
 802760e:	2300      	movs	r3, #0
 8027610:	220a      	movs	r2, #10
 8027612:	9803      	ldr	r0, [sp, #12]
 8027614:	f000 fd38 	bl	8028088 <__multadd>
 8027618:	2300      	movs	r3, #0
 802761a:	0007      	movs	r7, r0
 802761c:	220a      	movs	r2, #10
 802761e:	9904      	ldr	r1, [sp, #16]
 8027620:	9803      	ldr	r0, [sp, #12]
 8027622:	f000 fd31 	bl	8028088 <__multadd>
 8027626:	9004      	str	r0, [sp, #16]
 8027628:	e7ee      	b.n	8027608 <_dtoa_r+0xb14>
 802762a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802762c:	2401      	movs	r4, #1
 802762e:	2b00      	cmp	r3, #0
 8027630:	dd00      	ble.n	8027634 <_dtoa_r+0xb40>
 8027632:	001c      	movs	r4, r3
 8027634:	9704      	str	r7, [sp, #16]
 8027636:	2700      	movs	r7, #0
 8027638:	9b08      	ldr	r3, [sp, #32]
 802763a:	191c      	adds	r4, r3, r4
 802763c:	9905      	ldr	r1, [sp, #20]
 802763e:	2201      	movs	r2, #1
 8027640:	9803      	ldr	r0, [sp, #12]
 8027642:	f000 ff1f 	bl	8028484 <__lshift>
 8027646:	0031      	movs	r1, r6
 8027648:	9005      	str	r0, [sp, #20]
 802764a:	f000 ff87 	bl	802855c <__mcmp>
 802764e:	2800      	cmp	r0, #0
 8027650:	dcb2      	bgt.n	80275b8 <_dtoa_r+0xac4>
 8027652:	d101      	bne.n	8027658 <_dtoa_r+0xb64>
 8027654:	07ed      	lsls	r5, r5, #31
 8027656:	d4af      	bmi.n	80275b8 <_dtoa_r+0xac4>
 8027658:	0023      	movs	r3, r4
 802765a:	001c      	movs	r4, r3
 802765c:	3b01      	subs	r3, #1
 802765e:	781a      	ldrb	r2, [r3, #0]
 8027660:	2a30      	cmp	r2, #48	@ 0x30
 8027662:	d0fa      	beq.n	802765a <_dtoa_r+0xb66>
 8027664:	e4b0      	b.n	8026fc8 <_dtoa_r+0x4d4>
 8027666:	9a08      	ldr	r2, [sp, #32]
 8027668:	429a      	cmp	r2, r3
 802766a:	d1a6      	bne.n	80275ba <_dtoa_r+0xac6>
 802766c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802766e:	3301      	adds	r3, #1
 8027670:	930c      	str	r3, [sp, #48]	@ 0x30
 8027672:	2331      	movs	r3, #49	@ 0x31
 8027674:	7013      	strb	r3, [r2, #0]
 8027676:	e4a7      	b.n	8026fc8 <_dtoa_r+0x4d4>
 8027678:	4b14      	ldr	r3, [pc, #80]	@ (80276cc <_dtoa_r+0xbd8>)
 802767a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802767c:	9308      	str	r3, [sp, #32]
 802767e:	4b14      	ldr	r3, [pc, #80]	@ (80276d0 <_dtoa_r+0xbdc>)
 8027680:	2a00      	cmp	r2, #0
 8027682:	d001      	beq.n	8027688 <_dtoa_r+0xb94>
 8027684:	f7ff fa7e 	bl	8026b84 <_dtoa_r+0x90>
 8027688:	f7ff fa7e 	bl	8026b88 <_dtoa_r+0x94>
 802768c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802768e:	2b01      	cmp	r3, #1
 8027690:	dc00      	bgt.n	8027694 <_dtoa_r+0xba0>
 8027692:	e648      	b.n	8027326 <_dtoa_r+0x832>
 8027694:	2001      	movs	r0, #1
 8027696:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027698:	e665      	b.n	8027366 <_dtoa_r+0x872>
 802769a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802769c:	2b00      	cmp	r3, #0
 802769e:	dc00      	bgt.n	80276a2 <_dtoa_r+0xbae>
 80276a0:	e6a9      	b.n	80273f6 <_dtoa_r+0x902>
 80276a2:	2400      	movs	r4, #0
 80276a4:	0031      	movs	r1, r6
 80276a6:	9805      	ldr	r0, [sp, #20]
 80276a8:	f7ff f99e 	bl	80269e8 <quorem>
 80276ac:	9b08      	ldr	r3, [sp, #32]
 80276ae:	3030      	adds	r0, #48	@ 0x30
 80276b0:	5518      	strb	r0, [r3, r4]
 80276b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80276b4:	3401      	adds	r4, #1
 80276b6:	0005      	movs	r5, r0
 80276b8:	42a3      	cmp	r3, r4
 80276ba:	ddb6      	ble.n	802762a <_dtoa_r+0xb36>
 80276bc:	2300      	movs	r3, #0
 80276be:	220a      	movs	r2, #10
 80276c0:	9905      	ldr	r1, [sp, #20]
 80276c2:	9803      	ldr	r0, [sp, #12]
 80276c4:	f000 fce0 	bl	8028088 <__multadd>
 80276c8:	9005      	str	r0, [sp, #20]
 80276ca:	e7eb      	b.n	80276a4 <_dtoa_r+0xbb0>
 80276cc:	0802f52e 	.word	0x0802f52e
 80276d0:	0802f536 	.word	0x0802f536

080276d4 <_free_r>:
 80276d4:	b570      	push	{r4, r5, r6, lr}
 80276d6:	0005      	movs	r5, r0
 80276d8:	1e0c      	subs	r4, r1, #0
 80276da:	d010      	beq.n	80276fe <_free_r+0x2a>
 80276dc:	3c04      	subs	r4, #4
 80276de:	6823      	ldr	r3, [r4, #0]
 80276e0:	2b00      	cmp	r3, #0
 80276e2:	da00      	bge.n	80276e6 <_free_r+0x12>
 80276e4:	18e4      	adds	r4, r4, r3
 80276e6:	0028      	movs	r0, r5
 80276e8:	f000 fc56 	bl	8027f98 <__malloc_lock>
 80276ec:	4a1d      	ldr	r2, [pc, #116]	@ (8027764 <_free_r+0x90>)
 80276ee:	6813      	ldr	r3, [r2, #0]
 80276f0:	2b00      	cmp	r3, #0
 80276f2:	d105      	bne.n	8027700 <_free_r+0x2c>
 80276f4:	6063      	str	r3, [r4, #4]
 80276f6:	6014      	str	r4, [r2, #0]
 80276f8:	0028      	movs	r0, r5
 80276fa:	f000 fc55 	bl	8027fa8 <__malloc_unlock>
 80276fe:	bd70      	pop	{r4, r5, r6, pc}
 8027700:	42a3      	cmp	r3, r4
 8027702:	d908      	bls.n	8027716 <_free_r+0x42>
 8027704:	6820      	ldr	r0, [r4, #0]
 8027706:	1821      	adds	r1, r4, r0
 8027708:	428b      	cmp	r3, r1
 802770a:	d1f3      	bne.n	80276f4 <_free_r+0x20>
 802770c:	6819      	ldr	r1, [r3, #0]
 802770e:	685b      	ldr	r3, [r3, #4]
 8027710:	1809      	adds	r1, r1, r0
 8027712:	6021      	str	r1, [r4, #0]
 8027714:	e7ee      	b.n	80276f4 <_free_r+0x20>
 8027716:	001a      	movs	r2, r3
 8027718:	685b      	ldr	r3, [r3, #4]
 802771a:	2b00      	cmp	r3, #0
 802771c:	d001      	beq.n	8027722 <_free_r+0x4e>
 802771e:	42a3      	cmp	r3, r4
 8027720:	d9f9      	bls.n	8027716 <_free_r+0x42>
 8027722:	6811      	ldr	r1, [r2, #0]
 8027724:	1850      	adds	r0, r2, r1
 8027726:	42a0      	cmp	r0, r4
 8027728:	d10b      	bne.n	8027742 <_free_r+0x6e>
 802772a:	6820      	ldr	r0, [r4, #0]
 802772c:	1809      	adds	r1, r1, r0
 802772e:	1850      	adds	r0, r2, r1
 8027730:	6011      	str	r1, [r2, #0]
 8027732:	4283      	cmp	r3, r0
 8027734:	d1e0      	bne.n	80276f8 <_free_r+0x24>
 8027736:	6818      	ldr	r0, [r3, #0]
 8027738:	685b      	ldr	r3, [r3, #4]
 802773a:	1841      	adds	r1, r0, r1
 802773c:	6011      	str	r1, [r2, #0]
 802773e:	6053      	str	r3, [r2, #4]
 8027740:	e7da      	b.n	80276f8 <_free_r+0x24>
 8027742:	42a0      	cmp	r0, r4
 8027744:	d902      	bls.n	802774c <_free_r+0x78>
 8027746:	230c      	movs	r3, #12
 8027748:	602b      	str	r3, [r5, #0]
 802774a:	e7d5      	b.n	80276f8 <_free_r+0x24>
 802774c:	6820      	ldr	r0, [r4, #0]
 802774e:	1821      	adds	r1, r4, r0
 8027750:	428b      	cmp	r3, r1
 8027752:	d103      	bne.n	802775c <_free_r+0x88>
 8027754:	6819      	ldr	r1, [r3, #0]
 8027756:	685b      	ldr	r3, [r3, #4]
 8027758:	1809      	adds	r1, r1, r0
 802775a:	6021      	str	r1, [r4, #0]
 802775c:	6063      	str	r3, [r4, #4]
 802775e:	6054      	str	r4, [r2, #4]
 8027760:	e7ca      	b.n	80276f8 <_free_r+0x24>
 8027762:	46c0      	nop			@ (mov r8, r8)
 8027764:	2000392c 	.word	0x2000392c

08027768 <rshift>:
 8027768:	0002      	movs	r2, r0
 802776a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802776c:	6904      	ldr	r4, [r0, #16]
 802776e:	b085      	sub	sp, #20
 8027770:	3214      	adds	r2, #20
 8027772:	114b      	asrs	r3, r1, #5
 8027774:	0016      	movs	r6, r2
 8027776:	9302      	str	r3, [sp, #8]
 8027778:	429c      	cmp	r4, r3
 802777a:	dd31      	ble.n	80277e0 <rshift+0x78>
 802777c:	261f      	movs	r6, #31
 802777e:	000f      	movs	r7, r1
 8027780:	009b      	lsls	r3, r3, #2
 8027782:	00a5      	lsls	r5, r4, #2
 8027784:	18d3      	adds	r3, r2, r3
 8027786:	4037      	ands	r7, r6
 8027788:	1955      	adds	r5, r2, r5
 802778a:	9300      	str	r3, [sp, #0]
 802778c:	9701      	str	r7, [sp, #4]
 802778e:	4231      	tst	r1, r6
 8027790:	d10d      	bne.n	80277ae <rshift+0x46>
 8027792:	0016      	movs	r6, r2
 8027794:	0019      	movs	r1, r3
 8027796:	428d      	cmp	r5, r1
 8027798:	d836      	bhi.n	8027808 <rshift+0xa0>
 802779a:	9b00      	ldr	r3, [sp, #0]
 802779c:	2600      	movs	r6, #0
 802779e:	3b03      	subs	r3, #3
 80277a0:	429d      	cmp	r5, r3
 80277a2:	d302      	bcc.n	80277aa <rshift+0x42>
 80277a4:	9b02      	ldr	r3, [sp, #8]
 80277a6:	1ae4      	subs	r4, r4, r3
 80277a8:	00a6      	lsls	r6, r4, #2
 80277aa:	1996      	adds	r6, r2, r6
 80277ac:	e018      	b.n	80277e0 <rshift+0x78>
 80277ae:	2120      	movs	r1, #32
 80277b0:	9e01      	ldr	r6, [sp, #4]
 80277b2:	9f01      	ldr	r7, [sp, #4]
 80277b4:	1b89      	subs	r1, r1, r6
 80277b6:	9e00      	ldr	r6, [sp, #0]
 80277b8:	9103      	str	r1, [sp, #12]
 80277ba:	ce02      	ldmia	r6!, {r1}
 80277bc:	4694      	mov	ip, r2
 80277be:	40f9      	lsrs	r1, r7
 80277c0:	42b5      	cmp	r5, r6
 80277c2:	d816      	bhi.n	80277f2 <rshift+0x8a>
 80277c4:	9b00      	ldr	r3, [sp, #0]
 80277c6:	2600      	movs	r6, #0
 80277c8:	3301      	adds	r3, #1
 80277ca:	429d      	cmp	r5, r3
 80277cc:	d303      	bcc.n	80277d6 <rshift+0x6e>
 80277ce:	9b02      	ldr	r3, [sp, #8]
 80277d0:	1ae4      	subs	r4, r4, r3
 80277d2:	00a6      	lsls	r6, r4, #2
 80277d4:	3e04      	subs	r6, #4
 80277d6:	1996      	adds	r6, r2, r6
 80277d8:	6031      	str	r1, [r6, #0]
 80277da:	2900      	cmp	r1, #0
 80277dc:	d000      	beq.n	80277e0 <rshift+0x78>
 80277de:	3604      	adds	r6, #4
 80277e0:	1ab1      	subs	r1, r6, r2
 80277e2:	1089      	asrs	r1, r1, #2
 80277e4:	6101      	str	r1, [r0, #16]
 80277e6:	4296      	cmp	r6, r2
 80277e8:	d101      	bne.n	80277ee <rshift+0x86>
 80277ea:	2300      	movs	r3, #0
 80277ec:	6143      	str	r3, [r0, #20]
 80277ee:	b005      	add	sp, #20
 80277f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80277f2:	6837      	ldr	r7, [r6, #0]
 80277f4:	9b03      	ldr	r3, [sp, #12]
 80277f6:	409f      	lsls	r7, r3
 80277f8:	430f      	orrs	r7, r1
 80277fa:	4661      	mov	r1, ip
 80277fc:	c180      	stmia	r1!, {r7}
 80277fe:	468c      	mov	ip, r1
 8027800:	9b01      	ldr	r3, [sp, #4]
 8027802:	ce02      	ldmia	r6!, {r1}
 8027804:	40d9      	lsrs	r1, r3
 8027806:	e7db      	b.n	80277c0 <rshift+0x58>
 8027808:	c980      	ldmia	r1!, {r7}
 802780a:	c680      	stmia	r6!, {r7}
 802780c:	e7c3      	b.n	8027796 <rshift+0x2e>

0802780e <__hexdig_fun>:
 802780e:	0002      	movs	r2, r0
 8027810:	3a30      	subs	r2, #48	@ 0x30
 8027812:	0003      	movs	r3, r0
 8027814:	2a09      	cmp	r2, #9
 8027816:	d802      	bhi.n	802781e <__hexdig_fun+0x10>
 8027818:	3b20      	subs	r3, #32
 802781a:	b2d8      	uxtb	r0, r3
 802781c:	4770      	bx	lr
 802781e:	0002      	movs	r2, r0
 8027820:	3a61      	subs	r2, #97	@ 0x61
 8027822:	2a05      	cmp	r2, #5
 8027824:	d801      	bhi.n	802782a <__hexdig_fun+0x1c>
 8027826:	3b47      	subs	r3, #71	@ 0x47
 8027828:	e7f7      	b.n	802781a <__hexdig_fun+0xc>
 802782a:	001a      	movs	r2, r3
 802782c:	3a41      	subs	r2, #65	@ 0x41
 802782e:	2000      	movs	r0, #0
 8027830:	2a05      	cmp	r2, #5
 8027832:	d8f3      	bhi.n	802781c <__hexdig_fun+0xe>
 8027834:	3b27      	subs	r3, #39	@ 0x27
 8027836:	e7f0      	b.n	802781a <__hexdig_fun+0xc>

08027838 <__gethex>:
 8027838:	b5f0      	push	{r4, r5, r6, r7, lr}
 802783a:	b089      	sub	sp, #36	@ 0x24
 802783c:	9307      	str	r3, [sp, #28]
 802783e:	680b      	ldr	r3, [r1, #0]
 8027840:	9201      	str	r2, [sp, #4]
 8027842:	9003      	str	r0, [sp, #12]
 8027844:	9106      	str	r1, [sp, #24]
 8027846:	1c9a      	adds	r2, r3, #2
 8027848:	0011      	movs	r1, r2
 802784a:	3201      	adds	r2, #1
 802784c:	1e50      	subs	r0, r2, #1
 802784e:	7800      	ldrb	r0, [r0, #0]
 8027850:	2830      	cmp	r0, #48	@ 0x30
 8027852:	d0f9      	beq.n	8027848 <__gethex+0x10>
 8027854:	1acb      	subs	r3, r1, r3
 8027856:	3b02      	subs	r3, #2
 8027858:	9305      	str	r3, [sp, #20]
 802785a:	9100      	str	r1, [sp, #0]
 802785c:	f7ff ffd7 	bl	802780e <__hexdig_fun>
 8027860:	2300      	movs	r3, #0
 8027862:	001d      	movs	r5, r3
 8027864:	9302      	str	r3, [sp, #8]
 8027866:	4298      	cmp	r0, r3
 8027868:	d11e      	bne.n	80278a8 <__gethex+0x70>
 802786a:	2201      	movs	r2, #1
 802786c:	49a6      	ldr	r1, [pc, #664]	@ (8027b08 <__gethex+0x2d0>)
 802786e:	9800      	ldr	r0, [sp, #0]
 8027870:	f7fe ffe4 	bl	802683c <strncmp>
 8027874:	0007      	movs	r7, r0
 8027876:	42a8      	cmp	r0, r5
 8027878:	d000      	beq.n	802787c <__gethex+0x44>
 802787a:	e06a      	b.n	8027952 <__gethex+0x11a>
 802787c:	9b00      	ldr	r3, [sp, #0]
 802787e:	7858      	ldrb	r0, [r3, #1]
 8027880:	1c5c      	adds	r4, r3, #1
 8027882:	f7ff ffc4 	bl	802780e <__hexdig_fun>
 8027886:	2301      	movs	r3, #1
 8027888:	9302      	str	r3, [sp, #8]
 802788a:	42a8      	cmp	r0, r5
 802788c:	d02f      	beq.n	80278ee <__gethex+0xb6>
 802788e:	9400      	str	r4, [sp, #0]
 8027890:	9b00      	ldr	r3, [sp, #0]
 8027892:	7818      	ldrb	r0, [r3, #0]
 8027894:	2830      	cmp	r0, #48	@ 0x30
 8027896:	d009      	beq.n	80278ac <__gethex+0x74>
 8027898:	f7ff ffb9 	bl	802780e <__hexdig_fun>
 802789c:	4242      	negs	r2, r0
 802789e:	4142      	adcs	r2, r0
 80278a0:	2301      	movs	r3, #1
 80278a2:	0025      	movs	r5, r4
 80278a4:	9202      	str	r2, [sp, #8]
 80278a6:	9305      	str	r3, [sp, #20]
 80278a8:	9c00      	ldr	r4, [sp, #0]
 80278aa:	e004      	b.n	80278b6 <__gethex+0x7e>
 80278ac:	9b00      	ldr	r3, [sp, #0]
 80278ae:	3301      	adds	r3, #1
 80278b0:	9300      	str	r3, [sp, #0]
 80278b2:	e7ed      	b.n	8027890 <__gethex+0x58>
 80278b4:	3401      	adds	r4, #1
 80278b6:	7820      	ldrb	r0, [r4, #0]
 80278b8:	f7ff ffa9 	bl	802780e <__hexdig_fun>
 80278bc:	1e07      	subs	r7, r0, #0
 80278be:	d1f9      	bne.n	80278b4 <__gethex+0x7c>
 80278c0:	2201      	movs	r2, #1
 80278c2:	0020      	movs	r0, r4
 80278c4:	4990      	ldr	r1, [pc, #576]	@ (8027b08 <__gethex+0x2d0>)
 80278c6:	f7fe ffb9 	bl	802683c <strncmp>
 80278ca:	2800      	cmp	r0, #0
 80278cc:	d10d      	bne.n	80278ea <__gethex+0xb2>
 80278ce:	2d00      	cmp	r5, #0
 80278d0:	d106      	bne.n	80278e0 <__gethex+0xa8>
 80278d2:	3401      	adds	r4, #1
 80278d4:	0025      	movs	r5, r4
 80278d6:	7820      	ldrb	r0, [r4, #0]
 80278d8:	f7ff ff99 	bl	802780e <__hexdig_fun>
 80278dc:	2800      	cmp	r0, #0
 80278de:	d102      	bne.n	80278e6 <__gethex+0xae>
 80278e0:	1b2d      	subs	r5, r5, r4
 80278e2:	00af      	lsls	r7, r5, #2
 80278e4:	e003      	b.n	80278ee <__gethex+0xb6>
 80278e6:	3401      	adds	r4, #1
 80278e8:	e7f5      	b.n	80278d6 <__gethex+0x9e>
 80278ea:	2d00      	cmp	r5, #0
 80278ec:	d1f8      	bne.n	80278e0 <__gethex+0xa8>
 80278ee:	2220      	movs	r2, #32
 80278f0:	7823      	ldrb	r3, [r4, #0]
 80278f2:	0026      	movs	r6, r4
 80278f4:	4393      	bics	r3, r2
 80278f6:	2b50      	cmp	r3, #80	@ 0x50
 80278f8:	d11d      	bne.n	8027936 <__gethex+0xfe>
 80278fa:	7863      	ldrb	r3, [r4, #1]
 80278fc:	2b2b      	cmp	r3, #43	@ 0x2b
 80278fe:	d02d      	beq.n	802795c <__gethex+0x124>
 8027900:	2b2d      	cmp	r3, #45	@ 0x2d
 8027902:	d02f      	beq.n	8027964 <__gethex+0x12c>
 8027904:	2300      	movs	r3, #0
 8027906:	1c66      	adds	r6, r4, #1
 8027908:	9304      	str	r3, [sp, #16]
 802790a:	7830      	ldrb	r0, [r6, #0]
 802790c:	f7ff ff7f 	bl	802780e <__hexdig_fun>
 8027910:	1e43      	subs	r3, r0, #1
 8027912:	b2db      	uxtb	r3, r3
 8027914:	0005      	movs	r5, r0
 8027916:	2b18      	cmp	r3, #24
 8027918:	d82a      	bhi.n	8027970 <__gethex+0x138>
 802791a:	7870      	ldrb	r0, [r6, #1]
 802791c:	f7ff ff77 	bl	802780e <__hexdig_fun>
 8027920:	1e43      	subs	r3, r0, #1
 8027922:	b2db      	uxtb	r3, r3
 8027924:	3601      	adds	r6, #1
 8027926:	3d10      	subs	r5, #16
 8027928:	2b18      	cmp	r3, #24
 802792a:	d91d      	bls.n	8027968 <__gethex+0x130>
 802792c:	9b04      	ldr	r3, [sp, #16]
 802792e:	2b00      	cmp	r3, #0
 8027930:	d000      	beq.n	8027934 <__gethex+0xfc>
 8027932:	426d      	negs	r5, r5
 8027934:	197f      	adds	r7, r7, r5
 8027936:	9b06      	ldr	r3, [sp, #24]
 8027938:	601e      	str	r6, [r3, #0]
 802793a:	9b02      	ldr	r3, [sp, #8]
 802793c:	2b00      	cmp	r3, #0
 802793e:	d019      	beq.n	8027974 <__gethex+0x13c>
 8027940:	9b05      	ldr	r3, [sp, #20]
 8027942:	2606      	movs	r6, #6
 8027944:	425a      	negs	r2, r3
 8027946:	4153      	adcs	r3, r2
 8027948:	425b      	negs	r3, r3
 802794a:	401e      	ands	r6, r3
 802794c:	0030      	movs	r0, r6
 802794e:	b009      	add	sp, #36	@ 0x24
 8027950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027952:	2301      	movs	r3, #1
 8027954:	2700      	movs	r7, #0
 8027956:	9c00      	ldr	r4, [sp, #0]
 8027958:	9302      	str	r3, [sp, #8]
 802795a:	e7c8      	b.n	80278ee <__gethex+0xb6>
 802795c:	2300      	movs	r3, #0
 802795e:	9304      	str	r3, [sp, #16]
 8027960:	1ca6      	adds	r6, r4, #2
 8027962:	e7d2      	b.n	802790a <__gethex+0xd2>
 8027964:	2301      	movs	r3, #1
 8027966:	e7fa      	b.n	802795e <__gethex+0x126>
 8027968:	230a      	movs	r3, #10
 802796a:	435d      	muls	r5, r3
 802796c:	182d      	adds	r5, r5, r0
 802796e:	e7d4      	b.n	802791a <__gethex+0xe2>
 8027970:	0026      	movs	r6, r4
 8027972:	e7e0      	b.n	8027936 <__gethex+0xfe>
 8027974:	9b00      	ldr	r3, [sp, #0]
 8027976:	9902      	ldr	r1, [sp, #8]
 8027978:	1ae3      	subs	r3, r4, r3
 802797a:	3b01      	subs	r3, #1
 802797c:	2b07      	cmp	r3, #7
 802797e:	dc0a      	bgt.n	8027996 <__gethex+0x15e>
 8027980:	9803      	ldr	r0, [sp, #12]
 8027982:	f000 fb19 	bl	8027fb8 <_Balloc>
 8027986:	1e05      	subs	r5, r0, #0
 8027988:	d108      	bne.n	802799c <__gethex+0x164>
 802798a:	002a      	movs	r2, r5
 802798c:	21e4      	movs	r1, #228	@ 0xe4
 802798e:	4b5f      	ldr	r3, [pc, #380]	@ (8027b0c <__gethex+0x2d4>)
 8027990:	485f      	ldr	r0, [pc, #380]	@ (8027b10 <__gethex+0x2d8>)
 8027992:	f001 fbe9 	bl	8029168 <__assert_func>
 8027996:	3101      	adds	r1, #1
 8027998:	105b      	asrs	r3, r3, #1
 802799a:	e7ef      	b.n	802797c <__gethex+0x144>
 802799c:	0003      	movs	r3, r0
 802799e:	3314      	adds	r3, #20
 80279a0:	9302      	str	r3, [sp, #8]
 80279a2:	9305      	str	r3, [sp, #20]
 80279a4:	2300      	movs	r3, #0
 80279a6:	001e      	movs	r6, r3
 80279a8:	9304      	str	r3, [sp, #16]
 80279aa:	9b00      	ldr	r3, [sp, #0]
 80279ac:	42a3      	cmp	r3, r4
 80279ae:	d338      	bcc.n	8027a22 <__gethex+0x1ea>
 80279b0:	9c05      	ldr	r4, [sp, #20]
 80279b2:	9b02      	ldr	r3, [sp, #8]
 80279b4:	c440      	stmia	r4!, {r6}
 80279b6:	1ae4      	subs	r4, r4, r3
 80279b8:	10a4      	asrs	r4, r4, #2
 80279ba:	0030      	movs	r0, r6
 80279bc:	612c      	str	r4, [r5, #16]
 80279be:	f000 fbf3 	bl	80281a8 <__hi0bits>
 80279c2:	9b01      	ldr	r3, [sp, #4]
 80279c4:	0164      	lsls	r4, r4, #5
 80279c6:	681b      	ldr	r3, [r3, #0]
 80279c8:	1a26      	subs	r6, r4, r0
 80279ca:	9300      	str	r3, [sp, #0]
 80279cc:	429e      	cmp	r6, r3
 80279ce:	dd52      	ble.n	8027a76 <__gethex+0x23e>
 80279d0:	1af6      	subs	r6, r6, r3
 80279d2:	0031      	movs	r1, r6
 80279d4:	0028      	movs	r0, r5
 80279d6:	f000 ff8e 	bl	80288f6 <__any_on>
 80279da:	1e04      	subs	r4, r0, #0
 80279dc:	d00f      	beq.n	80279fe <__gethex+0x1c6>
 80279de:	2401      	movs	r4, #1
 80279e0:	211f      	movs	r1, #31
 80279e2:	0020      	movs	r0, r4
 80279e4:	1e73      	subs	r3, r6, #1
 80279e6:	4019      	ands	r1, r3
 80279e8:	4088      	lsls	r0, r1
 80279ea:	0001      	movs	r1, r0
 80279ec:	115a      	asrs	r2, r3, #5
 80279ee:	9802      	ldr	r0, [sp, #8]
 80279f0:	0092      	lsls	r2, r2, #2
 80279f2:	5812      	ldr	r2, [r2, r0]
 80279f4:	420a      	tst	r2, r1
 80279f6:	d002      	beq.n	80279fe <__gethex+0x1c6>
 80279f8:	42a3      	cmp	r3, r4
 80279fa:	dc34      	bgt.n	8027a66 <__gethex+0x22e>
 80279fc:	2402      	movs	r4, #2
 80279fe:	0031      	movs	r1, r6
 8027a00:	0028      	movs	r0, r5
 8027a02:	f7ff feb1 	bl	8027768 <rshift>
 8027a06:	19bf      	adds	r7, r7, r6
 8027a08:	9b01      	ldr	r3, [sp, #4]
 8027a0a:	689b      	ldr	r3, [r3, #8]
 8027a0c:	42bb      	cmp	r3, r7
 8027a0e:	da42      	bge.n	8027a96 <__gethex+0x25e>
 8027a10:	0029      	movs	r1, r5
 8027a12:	9803      	ldr	r0, [sp, #12]
 8027a14:	f000 fb14 	bl	8028040 <_Bfree>
 8027a18:	2300      	movs	r3, #0
 8027a1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027a1c:	26a3      	movs	r6, #163	@ 0xa3
 8027a1e:	6013      	str	r3, [r2, #0]
 8027a20:	e794      	b.n	802794c <__gethex+0x114>
 8027a22:	3c01      	subs	r4, #1
 8027a24:	7823      	ldrb	r3, [r4, #0]
 8027a26:	2b2e      	cmp	r3, #46	@ 0x2e
 8027a28:	d012      	beq.n	8027a50 <__gethex+0x218>
 8027a2a:	9b04      	ldr	r3, [sp, #16]
 8027a2c:	2b20      	cmp	r3, #32
 8027a2e:	d104      	bne.n	8027a3a <__gethex+0x202>
 8027a30:	9b05      	ldr	r3, [sp, #20]
 8027a32:	c340      	stmia	r3!, {r6}
 8027a34:	2600      	movs	r6, #0
 8027a36:	9305      	str	r3, [sp, #20]
 8027a38:	9604      	str	r6, [sp, #16]
 8027a3a:	7820      	ldrb	r0, [r4, #0]
 8027a3c:	f7ff fee7 	bl	802780e <__hexdig_fun>
 8027a40:	230f      	movs	r3, #15
 8027a42:	4018      	ands	r0, r3
 8027a44:	9b04      	ldr	r3, [sp, #16]
 8027a46:	4098      	lsls	r0, r3
 8027a48:	3304      	adds	r3, #4
 8027a4a:	4306      	orrs	r6, r0
 8027a4c:	9304      	str	r3, [sp, #16]
 8027a4e:	e7ac      	b.n	80279aa <__gethex+0x172>
 8027a50:	9b00      	ldr	r3, [sp, #0]
 8027a52:	42a3      	cmp	r3, r4
 8027a54:	d8e9      	bhi.n	8027a2a <__gethex+0x1f2>
 8027a56:	2201      	movs	r2, #1
 8027a58:	0020      	movs	r0, r4
 8027a5a:	492b      	ldr	r1, [pc, #172]	@ (8027b08 <__gethex+0x2d0>)
 8027a5c:	f7fe feee 	bl	802683c <strncmp>
 8027a60:	2800      	cmp	r0, #0
 8027a62:	d1e2      	bne.n	8027a2a <__gethex+0x1f2>
 8027a64:	e7a1      	b.n	80279aa <__gethex+0x172>
 8027a66:	0028      	movs	r0, r5
 8027a68:	1eb1      	subs	r1, r6, #2
 8027a6a:	f000 ff44 	bl	80288f6 <__any_on>
 8027a6e:	2800      	cmp	r0, #0
 8027a70:	d0c4      	beq.n	80279fc <__gethex+0x1c4>
 8027a72:	2403      	movs	r4, #3
 8027a74:	e7c3      	b.n	80279fe <__gethex+0x1c6>
 8027a76:	9b00      	ldr	r3, [sp, #0]
 8027a78:	2400      	movs	r4, #0
 8027a7a:	429e      	cmp	r6, r3
 8027a7c:	dac4      	bge.n	8027a08 <__gethex+0x1d0>
 8027a7e:	1b9e      	subs	r6, r3, r6
 8027a80:	0029      	movs	r1, r5
 8027a82:	0032      	movs	r2, r6
 8027a84:	9803      	ldr	r0, [sp, #12]
 8027a86:	f000 fcfd 	bl	8028484 <__lshift>
 8027a8a:	0003      	movs	r3, r0
 8027a8c:	3314      	adds	r3, #20
 8027a8e:	0005      	movs	r5, r0
 8027a90:	1bbf      	subs	r7, r7, r6
 8027a92:	9302      	str	r3, [sp, #8]
 8027a94:	e7b8      	b.n	8027a08 <__gethex+0x1d0>
 8027a96:	9b01      	ldr	r3, [sp, #4]
 8027a98:	685e      	ldr	r6, [r3, #4]
 8027a9a:	42be      	cmp	r6, r7
 8027a9c:	dd6f      	ble.n	8027b7e <__gethex+0x346>
 8027a9e:	9b00      	ldr	r3, [sp, #0]
 8027aa0:	1bf6      	subs	r6, r6, r7
 8027aa2:	42b3      	cmp	r3, r6
 8027aa4:	dc36      	bgt.n	8027b14 <__gethex+0x2dc>
 8027aa6:	9b01      	ldr	r3, [sp, #4]
 8027aa8:	68db      	ldr	r3, [r3, #12]
 8027aaa:	2b02      	cmp	r3, #2
 8027aac:	d024      	beq.n	8027af8 <__gethex+0x2c0>
 8027aae:	2b03      	cmp	r3, #3
 8027ab0:	d026      	beq.n	8027b00 <__gethex+0x2c8>
 8027ab2:	2b01      	cmp	r3, #1
 8027ab4:	d117      	bne.n	8027ae6 <__gethex+0x2ae>
 8027ab6:	9b00      	ldr	r3, [sp, #0]
 8027ab8:	42b3      	cmp	r3, r6
 8027aba:	d114      	bne.n	8027ae6 <__gethex+0x2ae>
 8027abc:	2b01      	cmp	r3, #1
 8027abe:	d10b      	bne.n	8027ad8 <__gethex+0x2a0>
 8027ac0:	9b01      	ldr	r3, [sp, #4]
 8027ac2:	9a07      	ldr	r2, [sp, #28]
 8027ac4:	685b      	ldr	r3, [r3, #4]
 8027ac6:	2662      	movs	r6, #98	@ 0x62
 8027ac8:	6013      	str	r3, [r2, #0]
 8027aca:	2301      	movs	r3, #1
 8027acc:	9a02      	ldr	r2, [sp, #8]
 8027ace:	612b      	str	r3, [r5, #16]
 8027ad0:	6013      	str	r3, [r2, #0]
 8027ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027ad4:	601d      	str	r5, [r3, #0]
 8027ad6:	e739      	b.n	802794c <__gethex+0x114>
 8027ad8:	9900      	ldr	r1, [sp, #0]
 8027ada:	0028      	movs	r0, r5
 8027adc:	3901      	subs	r1, #1
 8027ade:	f000 ff0a 	bl	80288f6 <__any_on>
 8027ae2:	2800      	cmp	r0, #0
 8027ae4:	d1ec      	bne.n	8027ac0 <__gethex+0x288>
 8027ae6:	0029      	movs	r1, r5
 8027ae8:	9803      	ldr	r0, [sp, #12]
 8027aea:	f000 faa9 	bl	8028040 <_Bfree>
 8027aee:	2300      	movs	r3, #0
 8027af0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027af2:	2650      	movs	r6, #80	@ 0x50
 8027af4:	6013      	str	r3, [r2, #0]
 8027af6:	e729      	b.n	802794c <__gethex+0x114>
 8027af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	d1f3      	bne.n	8027ae6 <__gethex+0x2ae>
 8027afe:	e7df      	b.n	8027ac0 <__gethex+0x288>
 8027b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027b02:	2b00      	cmp	r3, #0
 8027b04:	d1dc      	bne.n	8027ac0 <__gethex+0x288>
 8027b06:	e7ee      	b.n	8027ae6 <__gethex+0x2ae>
 8027b08:	0802f4f0 	.word	0x0802f4f0
 8027b0c:	0802f5aa 	.word	0x0802f5aa
 8027b10:	0802f5bb 	.word	0x0802f5bb
 8027b14:	1e77      	subs	r7, r6, #1
 8027b16:	2c00      	cmp	r4, #0
 8027b18:	d12f      	bne.n	8027b7a <__gethex+0x342>
 8027b1a:	2f00      	cmp	r7, #0
 8027b1c:	d004      	beq.n	8027b28 <__gethex+0x2f0>
 8027b1e:	0039      	movs	r1, r7
 8027b20:	0028      	movs	r0, r5
 8027b22:	f000 fee8 	bl	80288f6 <__any_on>
 8027b26:	0004      	movs	r4, r0
 8027b28:	231f      	movs	r3, #31
 8027b2a:	117a      	asrs	r2, r7, #5
 8027b2c:	401f      	ands	r7, r3
 8027b2e:	3b1e      	subs	r3, #30
 8027b30:	40bb      	lsls	r3, r7
 8027b32:	9902      	ldr	r1, [sp, #8]
 8027b34:	0092      	lsls	r2, r2, #2
 8027b36:	5852      	ldr	r2, [r2, r1]
 8027b38:	421a      	tst	r2, r3
 8027b3a:	d001      	beq.n	8027b40 <__gethex+0x308>
 8027b3c:	2302      	movs	r3, #2
 8027b3e:	431c      	orrs	r4, r3
 8027b40:	9b00      	ldr	r3, [sp, #0]
 8027b42:	0031      	movs	r1, r6
 8027b44:	1b9b      	subs	r3, r3, r6
 8027b46:	2602      	movs	r6, #2
 8027b48:	0028      	movs	r0, r5
 8027b4a:	9300      	str	r3, [sp, #0]
 8027b4c:	f7ff fe0c 	bl	8027768 <rshift>
 8027b50:	9b01      	ldr	r3, [sp, #4]
 8027b52:	685f      	ldr	r7, [r3, #4]
 8027b54:	2c00      	cmp	r4, #0
 8027b56:	d03f      	beq.n	8027bd8 <__gethex+0x3a0>
 8027b58:	9b01      	ldr	r3, [sp, #4]
 8027b5a:	68db      	ldr	r3, [r3, #12]
 8027b5c:	2b02      	cmp	r3, #2
 8027b5e:	d010      	beq.n	8027b82 <__gethex+0x34a>
 8027b60:	2b03      	cmp	r3, #3
 8027b62:	d012      	beq.n	8027b8a <__gethex+0x352>
 8027b64:	2b01      	cmp	r3, #1
 8027b66:	d106      	bne.n	8027b76 <__gethex+0x33e>
 8027b68:	07a2      	lsls	r2, r4, #30
 8027b6a:	d504      	bpl.n	8027b76 <__gethex+0x33e>
 8027b6c:	9a02      	ldr	r2, [sp, #8]
 8027b6e:	6812      	ldr	r2, [r2, #0]
 8027b70:	4314      	orrs	r4, r2
 8027b72:	421c      	tst	r4, r3
 8027b74:	d10c      	bne.n	8027b90 <__gethex+0x358>
 8027b76:	2310      	movs	r3, #16
 8027b78:	e02d      	b.n	8027bd6 <__gethex+0x39e>
 8027b7a:	2401      	movs	r4, #1
 8027b7c:	e7d4      	b.n	8027b28 <__gethex+0x2f0>
 8027b7e:	2601      	movs	r6, #1
 8027b80:	e7e8      	b.n	8027b54 <__gethex+0x31c>
 8027b82:	2301      	movs	r3, #1
 8027b84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027b86:	1a9b      	subs	r3, r3, r2
 8027b88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027b8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027b8c:	2b00      	cmp	r3, #0
 8027b8e:	d0f2      	beq.n	8027b76 <__gethex+0x33e>
 8027b90:	692b      	ldr	r3, [r5, #16]
 8027b92:	2000      	movs	r0, #0
 8027b94:	9302      	str	r3, [sp, #8]
 8027b96:	009b      	lsls	r3, r3, #2
 8027b98:	9304      	str	r3, [sp, #16]
 8027b9a:	002b      	movs	r3, r5
 8027b9c:	9a04      	ldr	r2, [sp, #16]
 8027b9e:	3314      	adds	r3, #20
 8027ba0:	1899      	adds	r1, r3, r2
 8027ba2:	681a      	ldr	r2, [r3, #0]
 8027ba4:	1c54      	adds	r4, r2, #1
 8027ba6:	d01c      	beq.n	8027be2 <__gethex+0x3aa>
 8027ba8:	3201      	adds	r2, #1
 8027baa:	601a      	str	r2, [r3, #0]
 8027bac:	002b      	movs	r3, r5
 8027bae:	3314      	adds	r3, #20
 8027bb0:	2e02      	cmp	r6, #2
 8027bb2:	d13f      	bne.n	8027c34 <__gethex+0x3fc>
 8027bb4:	9a01      	ldr	r2, [sp, #4]
 8027bb6:	9900      	ldr	r1, [sp, #0]
 8027bb8:	6812      	ldr	r2, [r2, #0]
 8027bba:	3a01      	subs	r2, #1
 8027bbc:	428a      	cmp	r2, r1
 8027bbe:	d109      	bne.n	8027bd4 <__gethex+0x39c>
 8027bc0:	000a      	movs	r2, r1
 8027bc2:	201f      	movs	r0, #31
 8027bc4:	4010      	ands	r0, r2
 8027bc6:	2201      	movs	r2, #1
 8027bc8:	4082      	lsls	r2, r0
 8027bca:	1149      	asrs	r1, r1, #5
 8027bcc:	0089      	lsls	r1, r1, #2
 8027bce:	58cb      	ldr	r3, [r1, r3]
 8027bd0:	4213      	tst	r3, r2
 8027bd2:	d13d      	bne.n	8027c50 <__gethex+0x418>
 8027bd4:	2320      	movs	r3, #32
 8027bd6:	431e      	orrs	r6, r3
 8027bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027bda:	601d      	str	r5, [r3, #0]
 8027bdc:	9b07      	ldr	r3, [sp, #28]
 8027bde:	601f      	str	r7, [r3, #0]
 8027be0:	e6b4      	b.n	802794c <__gethex+0x114>
 8027be2:	c301      	stmia	r3!, {r0}
 8027be4:	4299      	cmp	r1, r3
 8027be6:	d8dc      	bhi.n	8027ba2 <__gethex+0x36a>
 8027be8:	68ab      	ldr	r3, [r5, #8]
 8027bea:	9a02      	ldr	r2, [sp, #8]
 8027bec:	429a      	cmp	r2, r3
 8027bee:	db18      	blt.n	8027c22 <__gethex+0x3ea>
 8027bf0:	6869      	ldr	r1, [r5, #4]
 8027bf2:	9803      	ldr	r0, [sp, #12]
 8027bf4:	3101      	adds	r1, #1
 8027bf6:	f000 f9df 	bl	8027fb8 <_Balloc>
 8027bfa:	1e04      	subs	r4, r0, #0
 8027bfc:	d104      	bne.n	8027c08 <__gethex+0x3d0>
 8027bfe:	0022      	movs	r2, r4
 8027c00:	2184      	movs	r1, #132	@ 0x84
 8027c02:	4b1d      	ldr	r3, [pc, #116]	@ (8027c78 <__gethex+0x440>)
 8027c04:	481d      	ldr	r0, [pc, #116]	@ (8027c7c <__gethex+0x444>)
 8027c06:	e6c4      	b.n	8027992 <__gethex+0x15a>
 8027c08:	0029      	movs	r1, r5
 8027c0a:	692a      	ldr	r2, [r5, #16]
 8027c0c:	310c      	adds	r1, #12
 8027c0e:	3202      	adds	r2, #2
 8027c10:	0092      	lsls	r2, r2, #2
 8027c12:	300c      	adds	r0, #12
 8027c14:	f7fe fed8 	bl	80269c8 <memcpy>
 8027c18:	0029      	movs	r1, r5
 8027c1a:	9803      	ldr	r0, [sp, #12]
 8027c1c:	f000 fa10 	bl	8028040 <_Bfree>
 8027c20:	0025      	movs	r5, r4
 8027c22:	692b      	ldr	r3, [r5, #16]
 8027c24:	1c5a      	adds	r2, r3, #1
 8027c26:	612a      	str	r2, [r5, #16]
 8027c28:	2201      	movs	r2, #1
 8027c2a:	3304      	adds	r3, #4
 8027c2c:	009b      	lsls	r3, r3, #2
 8027c2e:	18eb      	adds	r3, r5, r3
 8027c30:	605a      	str	r2, [r3, #4]
 8027c32:	e7bb      	b.n	8027bac <__gethex+0x374>
 8027c34:	692a      	ldr	r2, [r5, #16]
 8027c36:	9902      	ldr	r1, [sp, #8]
 8027c38:	428a      	cmp	r2, r1
 8027c3a:	dd0b      	ble.n	8027c54 <__gethex+0x41c>
 8027c3c:	2101      	movs	r1, #1
 8027c3e:	0028      	movs	r0, r5
 8027c40:	f7ff fd92 	bl	8027768 <rshift>
 8027c44:	9b01      	ldr	r3, [sp, #4]
 8027c46:	3701      	adds	r7, #1
 8027c48:	689b      	ldr	r3, [r3, #8]
 8027c4a:	42bb      	cmp	r3, r7
 8027c4c:	da00      	bge.n	8027c50 <__gethex+0x418>
 8027c4e:	e6df      	b.n	8027a10 <__gethex+0x1d8>
 8027c50:	2601      	movs	r6, #1
 8027c52:	e7bf      	b.n	8027bd4 <__gethex+0x39c>
 8027c54:	221f      	movs	r2, #31
 8027c56:	9c00      	ldr	r4, [sp, #0]
 8027c58:	9900      	ldr	r1, [sp, #0]
 8027c5a:	4014      	ands	r4, r2
 8027c5c:	4211      	tst	r1, r2
 8027c5e:	d0f7      	beq.n	8027c50 <__gethex+0x418>
 8027c60:	9a04      	ldr	r2, [sp, #16]
 8027c62:	189b      	adds	r3, r3, r2
 8027c64:	3b04      	subs	r3, #4
 8027c66:	6818      	ldr	r0, [r3, #0]
 8027c68:	f000 fa9e 	bl	80281a8 <__hi0bits>
 8027c6c:	2320      	movs	r3, #32
 8027c6e:	1b1b      	subs	r3, r3, r4
 8027c70:	4298      	cmp	r0, r3
 8027c72:	dbe3      	blt.n	8027c3c <__gethex+0x404>
 8027c74:	e7ec      	b.n	8027c50 <__gethex+0x418>
 8027c76:	46c0      	nop			@ (mov r8, r8)
 8027c78:	0802f5aa 	.word	0x0802f5aa
 8027c7c:	0802f5bb 	.word	0x0802f5bb

08027c80 <L_shift>:
 8027c80:	2308      	movs	r3, #8
 8027c82:	b570      	push	{r4, r5, r6, lr}
 8027c84:	2520      	movs	r5, #32
 8027c86:	1a9a      	subs	r2, r3, r2
 8027c88:	0092      	lsls	r2, r2, #2
 8027c8a:	1aad      	subs	r5, r5, r2
 8027c8c:	6843      	ldr	r3, [r0, #4]
 8027c8e:	6804      	ldr	r4, [r0, #0]
 8027c90:	001e      	movs	r6, r3
 8027c92:	40ae      	lsls	r6, r5
 8027c94:	40d3      	lsrs	r3, r2
 8027c96:	4334      	orrs	r4, r6
 8027c98:	6004      	str	r4, [r0, #0]
 8027c9a:	6043      	str	r3, [r0, #4]
 8027c9c:	3004      	adds	r0, #4
 8027c9e:	4288      	cmp	r0, r1
 8027ca0:	d3f4      	bcc.n	8027c8c <L_shift+0xc>
 8027ca2:	bd70      	pop	{r4, r5, r6, pc}

08027ca4 <__match>:
 8027ca4:	b530      	push	{r4, r5, lr}
 8027ca6:	6803      	ldr	r3, [r0, #0]
 8027ca8:	780c      	ldrb	r4, [r1, #0]
 8027caa:	3301      	adds	r3, #1
 8027cac:	2c00      	cmp	r4, #0
 8027cae:	d102      	bne.n	8027cb6 <__match+0x12>
 8027cb0:	6003      	str	r3, [r0, #0]
 8027cb2:	2001      	movs	r0, #1
 8027cb4:	bd30      	pop	{r4, r5, pc}
 8027cb6:	781a      	ldrb	r2, [r3, #0]
 8027cb8:	0015      	movs	r5, r2
 8027cba:	3d41      	subs	r5, #65	@ 0x41
 8027cbc:	2d19      	cmp	r5, #25
 8027cbe:	d800      	bhi.n	8027cc2 <__match+0x1e>
 8027cc0:	3220      	adds	r2, #32
 8027cc2:	3101      	adds	r1, #1
 8027cc4:	42a2      	cmp	r2, r4
 8027cc6:	d0ef      	beq.n	8027ca8 <__match+0x4>
 8027cc8:	2000      	movs	r0, #0
 8027cca:	e7f3      	b.n	8027cb4 <__match+0x10>

08027ccc <__hexnan>:
 8027ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027cce:	680b      	ldr	r3, [r1, #0]
 8027cd0:	b08b      	sub	sp, #44	@ 0x2c
 8027cd2:	9201      	str	r2, [sp, #4]
 8027cd4:	9901      	ldr	r1, [sp, #4]
 8027cd6:	115a      	asrs	r2, r3, #5
 8027cd8:	0092      	lsls	r2, r2, #2
 8027cda:	188a      	adds	r2, r1, r2
 8027cdc:	9202      	str	r2, [sp, #8]
 8027cde:	0019      	movs	r1, r3
 8027ce0:	221f      	movs	r2, #31
 8027ce2:	4011      	ands	r1, r2
 8027ce4:	9008      	str	r0, [sp, #32]
 8027ce6:	9106      	str	r1, [sp, #24]
 8027ce8:	4213      	tst	r3, r2
 8027cea:	d002      	beq.n	8027cf2 <__hexnan+0x26>
 8027cec:	9b02      	ldr	r3, [sp, #8]
 8027cee:	3304      	adds	r3, #4
 8027cf0:	9302      	str	r3, [sp, #8]
 8027cf2:	9b02      	ldr	r3, [sp, #8]
 8027cf4:	2500      	movs	r5, #0
 8027cf6:	1f1f      	subs	r7, r3, #4
 8027cf8:	003e      	movs	r6, r7
 8027cfa:	003c      	movs	r4, r7
 8027cfc:	9b08      	ldr	r3, [sp, #32]
 8027cfe:	603d      	str	r5, [r7, #0]
 8027d00:	681b      	ldr	r3, [r3, #0]
 8027d02:	9507      	str	r5, [sp, #28]
 8027d04:	9305      	str	r3, [sp, #20]
 8027d06:	9503      	str	r5, [sp, #12]
 8027d08:	9b05      	ldr	r3, [sp, #20]
 8027d0a:	3301      	adds	r3, #1
 8027d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027d0e:	9b05      	ldr	r3, [sp, #20]
 8027d10:	785b      	ldrb	r3, [r3, #1]
 8027d12:	9304      	str	r3, [sp, #16]
 8027d14:	2b00      	cmp	r3, #0
 8027d16:	d028      	beq.n	8027d6a <__hexnan+0x9e>
 8027d18:	9804      	ldr	r0, [sp, #16]
 8027d1a:	f7ff fd78 	bl	802780e <__hexdig_fun>
 8027d1e:	2800      	cmp	r0, #0
 8027d20:	d155      	bne.n	8027dce <__hexnan+0x102>
 8027d22:	9b04      	ldr	r3, [sp, #16]
 8027d24:	2b20      	cmp	r3, #32
 8027d26:	d819      	bhi.n	8027d5c <__hexnan+0x90>
 8027d28:	9b03      	ldr	r3, [sp, #12]
 8027d2a:	9a07      	ldr	r2, [sp, #28]
 8027d2c:	4293      	cmp	r3, r2
 8027d2e:	dd12      	ble.n	8027d56 <__hexnan+0x8a>
 8027d30:	42b4      	cmp	r4, r6
 8027d32:	d206      	bcs.n	8027d42 <__hexnan+0x76>
 8027d34:	2d07      	cmp	r5, #7
 8027d36:	dc04      	bgt.n	8027d42 <__hexnan+0x76>
 8027d38:	002a      	movs	r2, r5
 8027d3a:	0031      	movs	r1, r6
 8027d3c:	0020      	movs	r0, r4
 8027d3e:	f7ff ff9f 	bl	8027c80 <L_shift>
 8027d42:	9b01      	ldr	r3, [sp, #4]
 8027d44:	2508      	movs	r5, #8
 8027d46:	429c      	cmp	r4, r3
 8027d48:	d905      	bls.n	8027d56 <__hexnan+0x8a>
 8027d4a:	1f26      	subs	r6, r4, #4
 8027d4c:	2500      	movs	r5, #0
 8027d4e:	0034      	movs	r4, r6
 8027d50:	9b03      	ldr	r3, [sp, #12]
 8027d52:	6035      	str	r5, [r6, #0]
 8027d54:	9307      	str	r3, [sp, #28]
 8027d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d58:	9305      	str	r3, [sp, #20]
 8027d5a:	e7d5      	b.n	8027d08 <__hexnan+0x3c>
 8027d5c:	9b04      	ldr	r3, [sp, #16]
 8027d5e:	2b29      	cmp	r3, #41	@ 0x29
 8027d60:	d15a      	bne.n	8027e18 <__hexnan+0x14c>
 8027d62:	9b05      	ldr	r3, [sp, #20]
 8027d64:	9a08      	ldr	r2, [sp, #32]
 8027d66:	3302      	adds	r3, #2
 8027d68:	6013      	str	r3, [r2, #0]
 8027d6a:	9b03      	ldr	r3, [sp, #12]
 8027d6c:	2b00      	cmp	r3, #0
 8027d6e:	d053      	beq.n	8027e18 <__hexnan+0x14c>
 8027d70:	42b4      	cmp	r4, r6
 8027d72:	d206      	bcs.n	8027d82 <__hexnan+0xb6>
 8027d74:	2d07      	cmp	r5, #7
 8027d76:	dc04      	bgt.n	8027d82 <__hexnan+0xb6>
 8027d78:	002a      	movs	r2, r5
 8027d7a:	0031      	movs	r1, r6
 8027d7c:	0020      	movs	r0, r4
 8027d7e:	f7ff ff7f 	bl	8027c80 <L_shift>
 8027d82:	9b01      	ldr	r3, [sp, #4]
 8027d84:	429c      	cmp	r4, r3
 8027d86:	d936      	bls.n	8027df6 <__hexnan+0x12a>
 8027d88:	001a      	movs	r2, r3
 8027d8a:	0023      	movs	r3, r4
 8027d8c:	cb02      	ldmia	r3!, {r1}
 8027d8e:	c202      	stmia	r2!, {r1}
 8027d90:	429f      	cmp	r7, r3
 8027d92:	d2fb      	bcs.n	8027d8c <__hexnan+0xc0>
 8027d94:	9b02      	ldr	r3, [sp, #8]
 8027d96:	1c62      	adds	r2, r4, #1
 8027d98:	1ed9      	subs	r1, r3, #3
 8027d9a:	2304      	movs	r3, #4
 8027d9c:	4291      	cmp	r1, r2
 8027d9e:	d305      	bcc.n	8027dac <__hexnan+0xe0>
 8027da0:	9b02      	ldr	r3, [sp, #8]
 8027da2:	3b04      	subs	r3, #4
 8027da4:	1b1b      	subs	r3, r3, r4
 8027da6:	089b      	lsrs	r3, r3, #2
 8027da8:	3301      	adds	r3, #1
 8027daa:	009b      	lsls	r3, r3, #2
 8027dac:	9a01      	ldr	r2, [sp, #4]
 8027dae:	18d3      	adds	r3, r2, r3
 8027db0:	2200      	movs	r2, #0
 8027db2:	c304      	stmia	r3!, {r2}
 8027db4:	429f      	cmp	r7, r3
 8027db6:	d2fc      	bcs.n	8027db2 <__hexnan+0xe6>
 8027db8:	683b      	ldr	r3, [r7, #0]
 8027dba:	2b00      	cmp	r3, #0
 8027dbc:	d104      	bne.n	8027dc8 <__hexnan+0xfc>
 8027dbe:	9b01      	ldr	r3, [sp, #4]
 8027dc0:	429f      	cmp	r7, r3
 8027dc2:	d127      	bne.n	8027e14 <__hexnan+0x148>
 8027dc4:	2301      	movs	r3, #1
 8027dc6:	603b      	str	r3, [r7, #0]
 8027dc8:	2005      	movs	r0, #5
 8027dca:	b00b      	add	sp, #44	@ 0x2c
 8027dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027dce:	9b03      	ldr	r3, [sp, #12]
 8027dd0:	3501      	adds	r5, #1
 8027dd2:	3301      	adds	r3, #1
 8027dd4:	9303      	str	r3, [sp, #12]
 8027dd6:	2d08      	cmp	r5, #8
 8027dd8:	dd06      	ble.n	8027de8 <__hexnan+0x11c>
 8027dda:	9b01      	ldr	r3, [sp, #4]
 8027ddc:	429c      	cmp	r4, r3
 8027dde:	d9ba      	bls.n	8027d56 <__hexnan+0x8a>
 8027de0:	2300      	movs	r3, #0
 8027de2:	2501      	movs	r5, #1
 8027de4:	3c04      	subs	r4, #4
 8027de6:	6023      	str	r3, [r4, #0]
 8027de8:	220f      	movs	r2, #15
 8027dea:	6823      	ldr	r3, [r4, #0]
 8027dec:	4010      	ands	r0, r2
 8027dee:	011b      	lsls	r3, r3, #4
 8027df0:	4303      	orrs	r3, r0
 8027df2:	6023      	str	r3, [r4, #0]
 8027df4:	e7af      	b.n	8027d56 <__hexnan+0x8a>
 8027df6:	9b06      	ldr	r3, [sp, #24]
 8027df8:	2b00      	cmp	r3, #0
 8027dfa:	d0dd      	beq.n	8027db8 <__hexnan+0xec>
 8027dfc:	2320      	movs	r3, #32
 8027dfe:	9a06      	ldr	r2, [sp, #24]
 8027e00:	9902      	ldr	r1, [sp, #8]
 8027e02:	1a9b      	subs	r3, r3, r2
 8027e04:	2201      	movs	r2, #1
 8027e06:	4252      	negs	r2, r2
 8027e08:	40da      	lsrs	r2, r3
 8027e0a:	3904      	subs	r1, #4
 8027e0c:	680b      	ldr	r3, [r1, #0]
 8027e0e:	4013      	ands	r3, r2
 8027e10:	600b      	str	r3, [r1, #0]
 8027e12:	e7d1      	b.n	8027db8 <__hexnan+0xec>
 8027e14:	3f04      	subs	r7, #4
 8027e16:	e7cf      	b.n	8027db8 <__hexnan+0xec>
 8027e18:	2004      	movs	r0, #4
 8027e1a:	e7d6      	b.n	8027dca <__hexnan+0xfe>

08027e1c <malloc>:
 8027e1c:	b510      	push	{r4, lr}
 8027e1e:	4b03      	ldr	r3, [pc, #12]	@ (8027e2c <malloc+0x10>)
 8027e20:	0001      	movs	r1, r0
 8027e22:	6818      	ldr	r0, [r3, #0]
 8027e24:	f000 f826 	bl	8027e74 <_malloc_r>
 8027e28:	bd10      	pop	{r4, pc}
 8027e2a:	46c0      	nop			@ (mov r8, r8)
 8027e2c:	200003ec 	.word	0x200003ec

08027e30 <sbrk_aligned>:
 8027e30:	b570      	push	{r4, r5, r6, lr}
 8027e32:	4e0f      	ldr	r6, [pc, #60]	@ (8027e70 <sbrk_aligned+0x40>)
 8027e34:	000d      	movs	r5, r1
 8027e36:	6831      	ldr	r1, [r6, #0]
 8027e38:	0004      	movs	r4, r0
 8027e3a:	2900      	cmp	r1, #0
 8027e3c:	d102      	bne.n	8027e44 <sbrk_aligned+0x14>
 8027e3e:	f001 f981 	bl	8029144 <_sbrk_r>
 8027e42:	6030      	str	r0, [r6, #0]
 8027e44:	0029      	movs	r1, r5
 8027e46:	0020      	movs	r0, r4
 8027e48:	f001 f97c 	bl	8029144 <_sbrk_r>
 8027e4c:	1c43      	adds	r3, r0, #1
 8027e4e:	d103      	bne.n	8027e58 <sbrk_aligned+0x28>
 8027e50:	2501      	movs	r5, #1
 8027e52:	426d      	negs	r5, r5
 8027e54:	0028      	movs	r0, r5
 8027e56:	bd70      	pop	{r4, r5, r6, pc}
 8027e58:	2303      	movs	r3, #3
 8027e5a:	1cc5      	adds	r5, r0, #3
 8027e5c:	439d      	bics	r5, r3
 8027e5e:	42a8      	cmp	r0, r5
 8027e60:	d0f8      	beq.n	8027e54 <sbrk_aligned+0x24>
 8027e62:	1a29      	subs	r1, r5, r0
 8027e64:	0020      	movs	r0, r4
 8027e66:	f001 f96d 	bl	8029144 <_sbrk_r>
 8027e6a:	3001      	adds	r0, #1
 8027e6c:	d1f2      	bne.n	8027e54 <sbrk_aligned+0x24>
 8027e6e:	e7ef      	b.n	8027e50 <sbrk_aligned+0x20>
 8027e70:	20003928 	.word	0x20003928

08027e74 <_malloc_r>:
 8027e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027e76:	2203      	movs	r2, #3
 8027e78:	1ccb      	adds	r3, r1, #3
 8027e7a:	4393      	bics	r3, r2
 8027e7c:	3308      	adds	r3, #8
 8027e7e:	0005      	movs	r5, r0
 8027e80:	001f      	movs	r7, r3
 8027e82:	2b0c      	cmp	r3, #12
 8027e84:	d234      	bcs.n	8027ef0 <_malloc_r+0x7c>
 8027e86:	270c      	movs	r7, #12
 8027e88:	42b9      	cmp	r1, r7
 8027e8a:	d833      	bhi.n	8027ef4 <_malloc_r+0x80>
 8027e8c:	0028      	movs	r0, r5
 8027e8e:	f000 f883 	bl	8027f98 <__malloc_lock>
 8027e92:	4e37      	ldr	r6, [pc, #220]	@ (8027f70 <_malloc_r+0xfc>)
 8027e94:	6833      	ldr	r3, [r6, #0]
 8027e96:	001c      	movs	r4, r3
 8027e98:	2c00      	cmp	r4, #0
 8027e9a:	d12f      	bne.n	8027efc <_malloc_r+0x88>
 8027e9c:	0039      	movs	r1, r7
 8027e9e:	0028      	movs	r0, r5
 8027ea0:	f7ff ffc6 	bl	8027e30 <sbrk_aligned>
 8027ea4:	0004      	movs	r4, r0
 8027ea6:	1c43      	adds	r3, r0, #1
 8027ea8:	d15f      	bne.n	8027f6a <_malloc_r+0xf6>
 8027eaa:	6834      	ldr	r4, [r6, #0]
 8027eac:	9400      	str	r4, [sp, #0]
 8027eae:	9b00      	ldr	r3, [sp, #0]
 8027eb0:	2b00      	cmp	r3, #0
 8027eb2:	d14a      	bne.n	8027f4a <_malloc_r+0xd6>
 8027eb4:	2c00      	cmp	r4, #0
 8027eb6:	d052      	beq.n	8027f5e <_malloc_r+0xea>
 8027eb8:	6823      	ldr	r3, [r4, #0]
 8027eba:	0028      	movs	r0, r5
 8027ebc:	18e3      	adds	r3, r4, r3
 8027ebe:	9900      	ldr	r1, [sp, #0]
 8027ec0:	9301      	str	r3, [sp, #4]
 8027ec2:	f001 f93f 	bl	8029144 <_sbrk_r>
 8027ec6:	9b01      	ldr	r3, [sp, #4]
 8027ec8:	4283      	cmp	r3, r0
 8027eca:	d148      	bne.n	8027f5e <_malloc_r+0xea>
 8027ecc:	6823      	ldr	r3, [r4, #0]
 8027ece:	0028      	movs	r0, r5
 8027ed0:	1aff      	subs	r7, r7, r3
 8027ed2:	0039      	movs	r1, r7
 8027ed4:	f7ff ffac 	bl	8027e30 <sbrk_aligned>
 8027ed8:	3001      	adds	r0, #1
 8027eda:	d040      	beq.n	8027f5e <_malloc_r+0xea>
 8027edc:	6823      	ldr	r3, [r4, #0]
 8027ede:	19db      	adds	r3, r3, r7
 8027ee0:	6023      	str	r3, [r4, #0]
 8027ee2:	6833      	ldr	r3, [r6, #0]
 8027ee4:	685a      	ldr	r2, [r3, #4]
 8027ee6:	2a00      	cmp	r2, #0
 8027ee8:	d133      	bne.n	8027f52 <_malloc_r+0xde>
 8027eea:	9b00      	ldr	r3, [sp, #0]
 8027eec:	6033      	str	r3, [r6, #0]
 8027eee:	e019      	b.n	8027f24 <_malloc_r+0xb0>
 8027ef0:	2b00      	cmp	r3, #0
 8027ef2:	dac9      	bge.n	8027e88 <_malloc_r+0x14>
 8027ef4:	230c      	movs	r3, #12
 8027ef6:	602b      	str	r3, [r5, #0]
 8027ef8:	2000      	movs	r0, #0
 8027efa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027efc:	6821      	ldr	r1, [r4, #0]
 8027efe:	1bc9      	subs	r1, r1, r7
 8027f00:	d420      	bmi.n	8027f44 <_malloc_r+0xd0>
 8027f02:	290b      	cmp	r1, #11
 8027f04:	d90a      	bls.n	8027f1c <_malloc_r+0xa8>
 8027f06:	19e2      	adds	r2, r4, r7
 8027f08:	6027      	str	r7, [r4, #0]
 8027f0a:	42a3      	cmp	r3, r4
 8027f0c:	d104      	bne.n	8027f18 <_malloc_r+0xa4>
 8027f0e:	6032      	str	r2, [r6, #0]
 8027f10:	6863      	ldr	r3, [r4, #4]
 8027f12:	6011      	str	r1, [r2, #0]
 8027f14:	6053      	str	r3, [r2, #4]
 8027f16:	e005      	b.n	8027f24 <_malloc_r+0xb0>
 8027f18:	605a      	str	r2, [r3, #4]
 8027f1a:	e7f9      	b.n	8027f10 <_malloc_r+0x9c>
 8027f1c:	6862      	ldr	r2, [r4, #4]
 8027f1e:	42a3      	cmp	r3, r4
 8027f20:	d10e      	bne.n	8027f40 <_malloc_r+0xcc>
 8027f22:	6032      	str	r2, [r6, #0]
 8027f24:	0028      	movs	r0, r5
 8027f26:	f000 f83f 	bl	8027fa8 <__malloc_unlock>
 8027f2a:	0020      	movs	r0, r4
 8027f2c:	2207      	movs	r2, #7
 8027f2e:	300b      	adds	r0, #11
 8027f30:	1d23      	adds	r3, r4, #4
 8027f32:	4390      	bics	r0, r2
 8027f34:	1ac2      	subs	r2, r0, r3
 8027f36:	4298      	cmp	r0, r3
 8027f38:	d0df      	beq.n	8027efa <_malloc_r+0x86>
 8027f3a:	1a1b      	subs	r3, r3, r0
 8027f3c:	50a3      	str	r3, [r4, r2]
 8027f3e:	e7dc      	b.n	8027efa <_malloc_r+0x86>
 8027f40:	605a      	str	r2, [r3, #4]
 8027f42:	e7ef      	b.n	8027f24 <_malloc_r+0xb0>
 8027f44:	0023      	movs	r3, r4
 8027f46:	6864      	ldr	r4, [r4, #4]
 8027f48:	e7a6      	b.n	8027e98 <_malloc_r+0x24>
 8027f4a:	9c00      	ldr	r4, [sp, #0]
 8027f4c:	6863      	ldr	r3, [r4, #4]
 8027f4e:	9300      	str	r3, [sp, #0]
 8027f50:	e7ad      	b.n	8027eae <_malloc_r+0x3a>
 8027f52:	001a      	movs	r2, r3
 8027f54:	685b      	ldr	r3, [r3, #4]
 8027f56:	42a3      	cmp	r3, r4
 8027f58:	d1fb      	bne.n	8027f52 <_malloc_r+0xde>
 8027f5a:	2300      	movs	r3, #0
 8027f5c:	e7da      	b.n	8027f14 <_malloc_r+0xa0>
 8027f5e:	230c      	movs	r3, #12
 8027f60:	0028      	movs	r0, r5
 8027f62:	602b      	str	r3, [r5, #0]
 8027f64:	f000 f820 	bl	8027fa8 <__malloc_unlock>
 8027f68:	e7c6      	b.n	8027ef8 <_malloc_r+0x84>
 8027f6a:	6007      	str	r7, [r0, #0]
 8027f6c:	e7da      	b.n	8027f24 <_malloc_r+0xb0>
 8027f6e:	46c0      	nop			@ (mov r8, r8)
 8027f70:	2000392c 	.word	0x2000392c

08027f74 <__ascii_mbtowc>:
 8027f74:	b082      	sub	sp, #8
 8027f76:	2900      	cmp	r1, #0
 8027f78:	d100      	bne.n	8027f7c <__ascii_mbtowc+0x8>
 8027f7a:	a901      	add	r1, sp, #4
 8027f7c:	1e10      	subs	r0, r2, #0
 8027f7e:	d006      	beq.n	8027f8e <__ascii_mbtowc+0x1a>
 8027f80:	2b00      	cmp	r3, #0
 8027f82:	d006      	beq.n	8027f92 <__ascii_mbtowc+0x1e>
 8027f84:	7813      	ldrb	r3, [r2, #0]
 8027f86:	600b      	str	r3, [r1, #0]
 8027f88:	7810      	ldrb	r0, [r2, #0]
 8027f8a:	1e43      	subs	r3, r0, #1
 8027f8c:	4198      	sbcs	r0, r3
 8027f8e:	b002      	add	sp, #8
 8027f90:	4770      	bx	lr
 8027f92:	2002      	movs	r0, #2
 8027f94:	4240      	negs	r0, r0
 8027f96:	e7fa      	b.n	8027f8e <__ascii_mbtowc+0x1a>

08027f98 <__malloc_lock>:
 8027f98:	b510      	push	{r4, lr}
 8027f9a:	4802      	ldr	r0, [pc, #8]	@ (8027fa4 <__malloc_lock+0xc>)
 8027f9c:	f7fe fd07 	bl	80269ae <__retarget_lock_acquire_recursive>
 8027fa0:	bd10      	pop	{r4, pc}
 8027fa2:	46c0      	nop			@ (mov r8, r8)
 8027fa4:	20003924 	.word	0x20003924

08027fa8 <__malloc_unlock>:
 8027fa8:	b510      	push	{r4, lr}
 8027faa:	4802      	ldr	r0, [pc, #8]	@ (8027fb4 <__malloc_unlock+0xc>)
 8027fac:	f7fe fd00 	bl	80269b0 <__retarget_lock_release_recursive>
 8027fb0:	bd10      	pop	{r4, pc}
 8027fb2:	46c0      	nop			@ (mov r8, r8)
 8027fb4:	20003924 	.word	0x20003924

08027fb8 <_Balloc>:
 8027fb8:	b570      	push	{r4, r5, r6, lr}
 8027fba:	69c5      	ldr	r5, [r0, #28]
 8027fbc:	0006      	movs	r6, r0
 8027fbe:	000c      	movs	r4, r1
 8027fc0:	2d00      	cmp	r5, #0
 8027fc2:	d10e      	bne.n	8027fe2 <_Balloc+0x2a>
 8027fc4:	2010      	movs	r0, #16
 8027fc6:	f7ff ff29 	bl	8027e1c <malloc>
 8027fca:	1e02      	subs	r2, r0, #0
 8027fcc:	61f0      	str	r0, [r6, #28]
 8027fce:	d104      	bne.n	8027fda <_Balloc+0x22>
 8027fd0:	216b      	movs	r1, #107	@ 0x6b
 8027fd2:	4b19      	ldr	r3, [pc, #100]	@ (8028038 <_Balloc+0x80>)
 8027fd4:	4819      	ldr	r0, [pc, #100]	@ (802803c <_Balloc+0x84>)
 8027fd6:	f001 f8c7 	bl	8029168 <__assert_func>
 8027fda:	6045      	str	r5, [r0, #4]
 8027fdc:	6085      	str	r5, [r0, #8]
 8027fde:	6005      	str	r5, [r0, #0]
 8027fe0:	60c5      	str	r5, [r0, #12]
 8027fe2:	69f5      	ldr	r5, [r6, #28]
 8027fe4:	68eb      	ldr	r3, [r5, #12]
 8027fe6:	2b00      	cmp	r3, #0
 8027fe8:	d013      	beq.n	8028012 <_Balloc+0x5a>
 8027fea:	69f3      	ldr	r3, [r6, #28]
 8027fec:	00a2      	lsls	r2, r4, #2
 8027fee:	68db      	ldr	r3, [r3, #12]
 8027ff0:	189b      	adds	r3, r3, r2
 8027ff2:	6818      	ldr	r0, [r3, #0]
 8027ff4:	2800      	cmp	r0, #0
 8027ff6:	d118      	bne.n	802802a <_Balloc+0x72>
 8027ff8:	2101      	movs	r1, #1
 8027ffa:	000d      	movs	r5, r1
 8027ffc:	40a5      	lsls	r5, r4
 8027ffe:	1d6a      	adds	r2, r5, #5
 8028000:	0030      	movs	r0, r6
 8028002:	0092      	lsls	r2, r2, #2
 8028004:	f001 f8ce 	bl	80291a4 <_calloc_r>
 8028008:	2800      	cmp	r0, #0
 802800a:	d00c      	beq.n	8028026 <_Balloc+0x6e>
 802800c:	6044      	str	r4, [r0, #4]
 802800e:	6085      	str	r5, [r0, #8]
 8028010:	e00d      	b.n	802802e <_Balloc+0x76>
 8028012:	2221      	movs	r2, #33	@ 0x21
 8028014:	2104      	movs	r1, #4
 8028016:	0030      	movs	r0, r6
 8028018:	f001 f8c4 	bl	80291a4 <_calloc_r>
 802801c:	69f3      	ldr	r3, [r6, #28]
 802801e:	60e8      	str	r0, [r5, #12]
 8028020:	68db      	ldr	r3, [r3, #12]
 8028022:	2b00      	cmp	r3, #0
 8028024:	d1e1      	bne.n	8027fea <_Balloc+0x32>
 8028026:	2000      	movs	r0, #0
 8028028:	bd70      	pop	{r4, r5, r6, pc}
 802802a:	6802      	ldr	r2, [r0, #0]
 802802c:	601a      	str	r2, [r3, #0]
 802802e:	2300      	movs	r3, #0
 8028030:	6103      	str	r3, [r0, #16]
 8028032:	60c3      	str	r3, [r0, #12]
 8028034:	e7f8      	b.n	8028028 <_Balloc+0x70>
 8028036:	46c0      	nop			@ (mov r8, r8)
 8028038:	0802f53b 	.word	0x0802f53b
 802803c:	0802f61b 	.word	0x0802f61b

08028040 <_Bfree>:
 8028040:	b570      	push	{r4, r5, r6, lr}
 8028042:	69c6      	ldr	r6, [r0, #28]
 8028044:	0005      	movs	r5, r0
 8028046:	000c      	movs	r4, r1
 8028048:	2e00      	cmp	r6, #0
 802804a:	d10e      	bne.n	802806a <_Bfree+0x2a>
 802804c:	2010      	movs	r0, #16
 802804e:	f7ff fee5 	bl	8027e1c <malloc>
 8028052:	1e02      	subs	r2, r0, #0
 8028054:	61e8      	str	r0, [r5, #28]
 8028056:	d104      	bne.n	8028062 <_Bfree+0x22>
 8028058:	218f      	movs	r1, #143	@ 0x8f
 802805a:	4b09      	ldr	r3, [pc, #36]	@ (8028080 <_Bfree+0x40>)
 802805c:	4809      	ldr	r0, [pc, #36]	@ (8028084 <_Bfree+0x44>)
 802805e:	f001 f883 	bl	8029168 <__assert_func>
 8028062:	6046      	str	r6, [r0, #4]
 8028064:	6086      	str	r6, [r0, #8]
 8028066:	6006      	str	r6, [r0, #0]
 8028068:	60c6      	str	r6, [r0, #12]
 802806a:	2c00      	cmp	r4, #0
 802806c:	d007      	beq.n	802807e <_Bfree+0x3e>
 802806e:	69eb      	ldr	r3, [r5, #28]
 8028070:	6862      	ldr	r2, [r4, #4]
 8028072:	68db      	ldr	r3, [r3, #12]
 8028074:	0092      	lsls	r2, r2, #2
 8028076:	189b      	adds	r3, r3, r2
 8028078:	681a      	ldr	r2, [r3, #0]
 802807a:	6022      	str	r2, [r4, #0]
 802807c:	601c      	str	r4, [r3, #0]
 802807e:	bd70      	pop	{r4, r5, r6, pc}
 8028080:	0802f53b 	.word	0x0802f53b
 8028084:	0802f61b 	.word	0x0802f61b

08028088 <__multadd>:
 8028088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802808a:	000f      	movs	r7, r1
 802808c:	9001      	str	r0, [sp, #4]
 802808e:	000c      	movs	r4, r1
 8028090:	001e      	movs	r6, r3
 8028092:	2000      	movs	r0, #0
 8028094:	690d      	ldr	r5, [r1, #16]
 8028096:	3714      	adds	r7, #20
 8028098:	683b      	ldr	r3, [r7, #0]
 802809a:	3001      	adds	r0, #1
 802809c:	b299      	uxth	r1, r3
 802809e:	4351      	muls	r1, r2
 80280a0:	0c1b      	lsrs	r3, r3, #16
 80280a2:	4353      	muls	r3, r2
 80280a4:	1989      	adds	r1, r1, r6
 80280a6:	0c0e      	lsrs	r6, r1, #16
 80280a8:	199b      	adds	r3, r3, r6
 80280aa:	0c1e      	lsrs	r6, r3, #16
 80280ac:	b289      	uxth	r1, r1
 80280ae:	041b      	lsls	r3, r3, #16
 80280b0:	185b      	adds	r3, r3, r1
 80280b2:	c708      	stmia	r7!, {r3}
 80280b4:	4285      	cmp	r5, r0
 80280b6:	dcef      	bgt.n	8028098 <__multadd+0x10>
 80280b8:	2e00      	cmp	r6, #0
 80280ba:	d022      	beq.n	8028102 <__multadd+0x7a>
 80280bc:	68a3      	ldr	r3, [r4, #8]
 80280be:	42ab      	cmp	r3, r5
 80280c0:	dc19      	bgt.n	80280f6 <__multadd+0x6e>
 80280c2:	6861      	ldr	r1, [r4, #4]
 80280c4:	9801      	ldr	r0, [sp, #4]
 80280c6:	3101      	adds	r1, #1
 80280c8:	f7ff ff76 	bl	8027fb8 <_Balloc>
 80280cc:	1e07      	subs	r7, r0, #0
 80280ce:	d105      	bne.n	80280dc <__multadd+0x54>
 80280d0:	003a      	movs	r2, r7
 80280d2:	21ba      	movs	r1, #186	@ 0xba
 80280d4:	4b0c      	ldr	r3, [pc, #48]	@ (8028108 <__multadd+0x80>)
 80280d6:	480d      	ldr	r0, [pc, #52]	@ (802810c <__multadd+0x84>)
 80280d8:	f001 f846 	bl	8029168 <__assert_func>
 80280dc:	0021      	movs	r1, r4
 80280de:	6922      	ldr	r2, [r4, #16]
 80280e0:	310c      	adds	r1, #12
 80280e2:	3202      	adds	r2, #2
 80280e4:	0092      	lsls	r2, r2, #2
 80280e6:	300c      	adds	r0, #12
 80280e8:	f7fe fc6e 	bl	80269c8 <memcpy>
 80280ec:	0021      	movs	r1, r4
 80280ee:	9801      	ldr	r0, [sp, #4]
 80280f0:	f7ff ffa6 	bl	8028040 <_Bfree>
 80280f4:	003c      	movs	r4, r7
 80280f6:	1d2b      	adds	r3, r5, #4
 80280f8:	009b      	lsls	r3, r3, #2
 80280fa:	18e3      	adds	r3, r4, r3
 80280fc:	3501      	adds	r5, #1
 80280fe:	605e      	str	r6, [r3, #4]
 8028100:	6125      	str	r5, [r4, #16]
 8028102:	0020      	movs	r0, r4
 8028104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028106:	46c0      	nop			@ (mov r8, r8)
 8028108:	0802f5aa 	.word	0x0802f5aa
 802810c:	0802f61b 	.word	0x0802f61b

08028110 <__s2b>:
 8028110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028112:	0007      	movs	r7, r0
 8028114:	0018      	movs	r0, r3
 8028116:	000c      	movs	r4, r1
 8028118:	3008      	adds	r0, #8
 802811a:	2109      	movs	r1, #9
 802811c:	9301      	str	r3, [sp, #4]
 802811e:	0015      	movs	r5, r2
 8028120:	f7d8 f8ca 	bl	80002b8 <__divsi3>
 8028124:	2301      	movs	r3, #1
 8028126:	2100      	movs	r1, #0
 8028128:	4283      	cmp	r3, r0
 802812a:	db0a      	blt.n	8028142 <__s2b+0x32>
 802812c:	0038      	movs	r0, r7
 802812e:	f7ff ff43 	bl	8027fb8 <_Balloc>
 8028132:	1e01      	subs	r1, r0, #0
 8028134:	d108      	bne.n	8028148 <__s2b+0x38>
 8028136:	000a      	movs	r2, r1
 8028138:	4b19      	ldr	r3, [pc, #100]	@ (80281a0 <__s2b+0x90>)
 802813a:	481a      	ldr	r0, [pc, #104]	@ (80281a4 <__s2b+0x94>)
 802813c:	31d3      	adds	r1, #211	@ 0xd3
 802813e:	f001 f813 	bl	8029168 <__assert_func>
 8028142:	005b      	lsls	r3, r3, #1
 8028144:	3101      	adds	r1, #1
 8028146:	e7ef      	b.n	8028128 <__s2b+0x18>
 8028148:	9b08      	ldr	r3, [sp, #32]
 802814a:	6143      	str	r3, [r0, #20]
 802814c:	2301      	movs	r3, #1
 802814e:	6103      	str	r3, [r0, #16]
 8028150:	2d09      	cmp	r5, #9
 8028152:	dd18      	ble.n	8028186 <__s2b+0x76>
 8028154:	0023      	movs	r3, r4
 8028156:	3309      	adds	r3, #9
 8028158:	001e      	movs	r6, r3
 802815a:	9300      	str	r3, [sp, #0]
 802815c:	1964      	adds	r4, r4, r5
 802815e:	7833      	ldrb	r3, [r6, #0]
 8028160:	220a      	movs	r2, #10
 8028162:	0038      	movs	r0, r7
 8028164:	3b30      	subs	r3, #48	@ 0x30
 8028166:	f7ff ff8f 	bl	8028088 <__multadd>
 802816a:	3601      	adds	r6, #1
 802816c:	0001      	movs	r1, r0
 802816e:	42a6      	cmp	r6, r4
 8028170:	d1f5      	bne.n	802815e <__s2b+0x4e>
 8028172:	002c      	movs	r4, r5
 8028174:	9b00      	ldr	r3, [sp, #0]
 8028176:	3c08      	subs	r4, #8
 8028178:	191c      	adds	r4, r3, r4
 802817a:	002e      	movs	r6, r5
 802817c:	9b01      	ldr	r3, [sp, #4]
 802817e:	429e      	cmp	r6, r3
 8028180:	db04      	blt.n	802818c <__s2b+0x7c>
 8028182:	0008      	movs	r0, r1
 8028184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028186:	2509      	movs	r5, #9
 8028188:	340a      	adds	r4, #10
 802818a:	e7f6      	b.n	802817a <__s2b+0x6a>
 802818c:	1b63      	subs	r3, r4, r5
 802818e:	5d9b      	ldrb	r3, [r3, r6]
 8028190:	220a      	movs	r2, #10
 8028192:	0038      	movs	r0, r7
 8028194:	3b30      	subs	r3, #48	@ 0x30
 8028196:	f7ff ff77 	bl	8028088 <__multadd>
 802819a:	3601      	adds	r6, #1
 802819c:	0001      	movs	r1, r0
 802819e:	e7ed      	b.n	802817c <__s2b+0x6c>
 80281a0:	0802f5aa 	.word	0x0802f5aa
 80281a4:	0802f61b 	.word	0x0802f61b

080281a8 <__hi0bits>:
 80281a8:	2280      	movs	r2, #128	@ 0x80
 80281aa:	0003      	movs	r3, r0
 80281ac:	0252      	lsls	r2, r2, #9
 80281ae:	2000      	movs	r0, #0
 80281b0:	4293      	cmp	r3, r2
 80281b2:	d201      	bcs.n	80281b8 <__hi0bits+0x10>
 80281b4:	041b      	lsls	r3, r3, #16
 80281b6:	3010      	adds	r0, #16
 80281b8:	2280      	movs	r2, #128	@ 0x80
 80281ba:	0452      	lsls	r2, r2, #17
 80281bc:	4293      	cmp	r3, r2
 80281be:	d201      	bcs.n	80281c4 <__hi0bits+0x1c>
 80281c0:	3008      	adds	r0, #8
 80281c2:	021b      	lsls	r3, r3, #8
 80281c4:	2280      	movs	r2, #128	@ 0x80
 80281c6:	0552      	lsls	r2, r2, #21
 80281c8:	4293      	cmp	r3, r2
 80281ca:	d201      	bcs.n	80281d0 <__hi0bits+0x28>
 80281cc:	3004      	adds	r0, #4
 80281ce:	011b      	lsls	r3, r3, #4
 80281d0:	2280      	movs	r2, #128	@ 0x80
 80281d2:	05d2      	lsls	r2, r2, #23
 80281d4:	4293      	cmp	r3, r2
 80281d6:	d201      	bcs.n	80281dc <__hi0bits+0x34>
 80281d8:	3002      	adds	r0, #2
 80281da:	009b      	lsls	r3, r3, #2
 80281dc:	2b00      	cmp	r3, #0
 80281de:	db03      	blt.n	80281e8 <__hi0bits+0x40>
 80281e0:	3001      	adds	r0, #1
 80281e2:	4213      	tst	r3, r2
 80281e4:	d100      	bne.n	80281e8 <__hi0bits+0x40>
 80281e6:	2020      	movs	r0, #32
 80281e8:	4770      	bx	lr

080281ea <__lo0bits>:
 80281ea:	6803      	ldr	r3, [r0, #0]
 80281ec:	0001      	movs	r1, r0
 80281ee:	2207      	movs	r2, #7
 80281f0:	0018      	movs	r0, r3
 80281f2:	4010      	ands	r0, r2
 80281f4:	4213      	tst	r3, r2
 80281f6:	d00d      	beq.n	8028214 <__lo0bits+0x2a>
 80281f8:	3a06      	subs	r2, #6
 80281fa:	2000      	movs	r0, #0
 80281fc:	4213      	tst	r3, r2
 80281fe:	d105      	bne.n	802820c <__lo0bits+0x22>
 8028200:	3002      	adds	r0, #2
 8028202:	4203      	tst	r3, r0
 8028204:	d003      	beq.n	802820e <__lo0bits+0x24>
 8028206:	40d3      	lsrs	r3, r2
 8028208:	0010      	movs	r0, r2
 802820a:	600b      	str	r3, [r1, #0]
 802820c:	4770      	bx	lr
 802820e:	089b      	lsrs	r3, r3, #2
 8028210:	600b      	str	r3, [r1, #0]
 8028212:	e7fb      	b.n	802820c <__lo0bits+0x22>
 8028214:	b29a      	uxth	r2, r3
 8028216:	2a00      	cmp	r2, #0
 8028218:	d101      	bne.n	802821e <__lo0bits+0x34>
 802821a:	2010      	movs	r0, #16
 802821c:	0c1b      	lsrs	r3, r3, #16
 802821e:	b2da      	uxtb	r2, r3
 8028220:	2a00      	cmp	r2, #0
 8028222:	d101      	bne.n	8028228 <__lo0bits+0x3e>
 8028224:	3008      	adds	r0, #8
 8028226:	0a1b      	lsrs	r3, r3, #8
 8028228:	071a      	lsls	r2, r3, #28
 802822a:	d101      	bne.n	8028230 <__lo0bits+0x46>
 802822c:	3004      	adds	r0, #4
 802822e:	091b      	lsrs	r3, r3, #4
 8028230:	079a      	lsls	r2, r3, #30
 8028232:	d101      	bne.n	8028238 <__lo0bits+0x4e>
 8028234:	3002      	adds	r0, #2
 8028236:	089b      	lsrs	r3, r3, #2
 8028238:	07da      	lsls	r2, r3, #31
 802823a:	d4e9      	bmi.n	8028210 <__lo0bits+0x26>
 802823c:	3001      	adds	r0, #1
 802823e:	085b      	lsrs	r3, r3, #1
 8028240:	d1e6      	bne.n	8028210 <__lo0bits+0x26>
 8028242:	2020      	movs	r0, #32
 8028244:	e7e2      	b.n	802820c <__lo0bits+0x22>
	...

08028248 <__i2b>:
 8028248:	b510      	push	{r4, lr}
 802824a:	000c      	movs	r4, r1
 802824c:	2101      	movs	r1, #1
 802824e:	f7ff feb3 	bl	8027fb8 <_Balloc>
 8028252:	2800      	cmp	r0, #0
 8028254:	d107      	bne.n	8028266 <__i2b+0x1e>
 8028256:	2146      	movs	r1, #70	@ 0x46
 8028258:	4c05      	ldr	r4, [pc, #20]	@ (8028270 <__i2b+0x28>)
 802825a:	0002      	movs	r2, r0
 802825c:	4b05      	ldr	r3, [pc, #20]	@ (8028274 <__i2b+0x2c>)
 802825e:	0020      	movs	r0, r4
 8028260:	31ff      	adds	r1, #255	@ 0xff
 8028262:	f000 ff81 	bl	8029168 <__assert_func>
 8028266:	2301      	movs	r3, #1
 8028268:	6144      	str	r4, [r0, #20]
 802826a:	6103      	str	r3, [r0, #16]
 802826c:	bd10      	pop	{r4, pc}
 802826e:	46c0      	nop			@ (mov r8, r8)
 8028270:	0802f61b 	.word	0x0802f61b
 8028274:	0802f5aa 	.word	0x0802f5aa

08028278 <__multiply>:
 8028278:	b5f0      	push	{r4, r5, r6, r7, lr}
 802827a:	0014      	movs	r4, r2
 802827c:	690a      	ldr	r2, [r1, #16]
 802827e:	6923      	ldr	r3, [r4, #16]
 8028280:	000d      	movs	r5, r1
 8028282:	b089      	sub	sp, #36	@ 0x24
 8028284:	429a      	cmp	r2, r3
 8028286:	db02      	blt.n	802828e <__multiply+0x16>
 8028288:	0023      	movs	r3, r4
 802828a:	000c      	movs	r4, r1
 802828c:	001d      	movs	r5, r3
 802828e:	6927      	ldr	r7, [r4, #16]
 8028290:	692e      	ldr	r6, [r5, #16]
 8028292:	6861      	ldr	r1, [r4, #4]
 8028294:	19bb      	adds	r3, r7, r6
 8028296:	9300      	str	r3, [sp, #0]
 8028298:	68a3      	ldr	r3, [r4, #8]
 802829a:	19ba      	adds	r2, r7, r6
 802829c:	4293      	cmp	r3, r2
 802829e:	da00      	bge.n	80282a2 <__multiply+0x2a>
 80282a0:	3101      	adds	r1, #1
 80282a2:	f7ff fe89 	bl	8027fb8 <_Balloc>
 80282a6:	4684      	mov	ip, r0
 80282a8:	2800      	cmp	r0, #0
 80282aa:	d106      	bne.n	80282ba <__multiply+0x42>
 80282ac:	21b1      	movs	r1, #177	@ 0xb1
 80282ae:	4662      	mov	r2, ip
 80282b0:	4b44      	ldr	r3, [pc, #272]	@ (80283c4 <__multiply+0x14c>)
 80282b2:	4845      	ldr	r0, [pc, #276]	@ (80283c8 <__multiply+0x150>)
 80282b4:	0049      	lsls	r1, r1, #1
 80282b6:	f000 ff57 	bl	8029168 <__assert_func>
 80282ba:	0002      	movs	r2, r0
 80282bc:	19bb      	adds	r3, r7, r6
 80282be:	3214      	adds	r2, #20
 80282c0:	009b      	lsls	r3, r3, #2
 80282c2:	18d3      	adds	r3, r2, r3
 80282c4:	9301      	str	r3, [sp, #4]
 80282c6:	2100      	movs	r1, #0
 80282c8:	0013      	movs	r3, r2
 80282ca:	9801      	ldr	r0, [sp, #4]
 80282cc:	4283      	cmp	r3, r0
 80282ce:	d328      	bcc.n	8028322 <__multiply+0xaa>
 80282d0:	0023      	movs	r3, r4
 80282d2:	00bf      	lsls	r7, r7, #2
 80282d4:	3314      	adds	r3, #20
 80282d6:	9304      	str	r3, [sp, #16]
 80282d8:	3514      	adds	r5, #20
 80282da:	19db      	adds	r3, r3, r7
 80282dc:	00b6      	lsls	r6, r6, #2
 80282de:	9302      	str	r3, [sp, #8]
 80282e0:	19ab      	adds	r3, r5, r6
 80282e2:	9307      	str	r3, [sp, #28]
 80282e4:	2304      	movs	r3, #4
 80282e6:	9305      	str	r3, [sp, #20]
 80282e8:	0023      	movs	r3, r4
 80282ea:	9902      	ldr	r1, [sp, #8]
 80282ec:	3315      	adds	r3, #21
 80282ee:	4299      	cmp	r1, r3
 80282f0:	d305      	bcc.n	80282fe <__multiply+0x86>
 80282f2:	1b0c      	subs	r4, r1, r4
 80282f4:	3c15      	subs	r4, #21
 80282f6:	08a4      	lsrs	r4, r4, #2
 80282f8:	3401      	adds	r4, #1
 80282fa:	00a3      	lsls	r3, r4, #2
 80282fc:	9305      	str	r3, [sp, #20]
 80282fe:	9b07      	ldr	r3, [sp, #28]
 8028300:	429d      	cmp	r5, r3
 8028302:	d310      	bcc.n	8028326 <__multiply+0xae>
 8028304:	9b00      	ldr	r3, [sp, #0]
 8028306:	2b00      	cmp	r3, #0
 8028308:	dd05      	ble.n	8028316 <__multiply+0x9e>
 802830a:	9b01      	ldr	r3, [sp, #4]
 802830c:	3b04      	subs	r3, #4
 802830e:	9301      	str	r3, [sp, #4]
 8028310:	681b      	ldr	r3, [r3, #0]
 8028312:	2b00      	cmp	r3, #0
 8028314:	d052      	beq.n	80283bc <__multiply+0x144>
 8028316:	4663      	mov	r3, ip
 8028318:	4660      	mov	r0, ip
 802831a:	9a00      	ldr	r2, [sp, #0]
 802831c:	611a      	str	r2, [r3, #16]
 802831e:	b009      	add	sp, #36	@ 0x24
 8028320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028322:	c302      	stmia	r3!, {r1}
 8028324:	e7d1      	b.n	80282ca <__multiply+0x52>
 8028326:	682c      	ldr	r4, [r5, #0]
 8028328:	b2a4      	uxth	r4, r4
 802832a:	2c00      	cmp	r4, #0
 802832c:	d01f      	beq.n	802836e <__multiply+0xf6>
 802832e:	2300      	movs	r3, #0
 8028330:	0017      	movs	r7, r2
 8028332:	9e04      	ldr	r6, [sp, #16]
 8028334:	9303      	str	r3, [sp, #12]
 8028336:	ce08      	ldmia	r6!, {r3}
 8028338:	6839      	ldr	r1, [r7, #0]
 802833a:	9306      	str	r3, [sp, #24]
 802833c:	466b      	mov	r3, sp
 802833e:	8b1b      	ldrh	r3, [r3, #24]
 8028340:	b288      	uxth	r0, r1
 8028342:	4363      	muls	r3, r4
 8028344:	181b      	adds	r3, r3, r0
 8028346:	9803      	ldr	r0, [sp, #12]
 8028348:	0c09      	lsrs	r1, r1, #16
 802834a:	181b      	adds	r3, r3, r0
 802834c:	9806      	ldr	r0, [sp, #24]
 802834e:	0c00      	lsrs	r0, r0, #16
 8028350:	4360      	muls	r0, r4
 8028352:	1840      	adds	r0, r0, r1
 8028354:	0c19      	lsrs	r1, r3, #16
 8028356:	1841      	adds	r1, r0, r1
 8028358:	0c08      	lsrs	r0, r1, #16
 802835a:	b29b      	uxth	r3, r3
 802835c:	0409      	lsls	r1, r1, #16
 802835e:	4319      	orrs	r1, r3
 8028360:	9b02      	ldr	r3, [sp, #8]
 8028362:	9003      	str	r0, [sp, #12]
 8028364:	c702      	stmia	r7!, {r1}
 8028366:	42b3      	cmp	r3, r6
 8028368:	d8e5      	bhi.n	8028336 <__multiply+0xbe>
 802836a:	9b05      	ldr	r3, [sp, #20]
 802836c:	50d0      	str	r0, [r2, r3]
 802836e:	682c      	ldr	r4, [r5, #0]
 8028370:	0c24      	lsrs	r4, r4, #16
 8028372:	d020      	beq.n	80283b6 <__multiply+0x13e>
 8028374:	2100      	movs	r1, #0
 8028376:	0010      	movs	r0, r2
 8028378:	6813      	ldr	r3, [r2, #0]
 802837a:	9e04      	ldr	r6, [sp, #16]
 802837c:	9103      	str	r1, [sp, #12]
 802837e:	6831      	ldr	r1, [r6, #0]
 8028380:	6807      	ldr	r7, [r0, #0]
 8028382:	b289      	uxth	r1, r1
 8028384:	4361      	muls	r1, r4
 8028386:	0c3f      	lsrs	r7, r7, #16
 8028388:	19c9      	adds	r1, r1, r7
 802838a:	9f03      	ldr	r7, [sp, #12]
 802838c:	b29b      	uxth	r3, r3
 802838e:	19c9      	adds	r1, r1, r7
 8028390:	040f      	lsls	r7, r1, #16
 8028392:	431f      	orrs	r7, r3
 8028394:	6007      	str	r7, [r0, #0]
 8028396:	ce80      	ldmia	r6!, {r7}
 8028398:	6843      	ldr	r3, [r0, #4]
 802839a:	0c3f      	lsrs	r7, r7, #16
 802839c:	4367      	muls	r7, r4
 802839e:	b29b      	uxth	r3, r3
 80283a0:	0c09      	lsrs	r1, r1, #16
 80283a2:	18fb      	adds	r3, r7, r3
 80283a4:	185b      	adds	r3, r3, r1
 80283a6:	0c19      	lsrs	r1, r3, #16
 80283a8:	9103      	str	r1, [sp, #12]
 80283aa:	9902      	ldr	r1, [sp, #8]
 80283ac:	3004      	adds	r0, #4
 80283ae:	42b1      	cmp	r1, r6
 80283b0:	d8e5      	bhi.n	802837e <__multiply+0x106>
 80283b2:	9905      	ldr	r1, [sp, #20]
 80283b4:	5053      	str	r3, [r2, r1]
 80283b6:	3504      	adds	r5, #4
 80283b8:	3204      	adds	r2, #4
 80283ba:	e7a0      	b.n	80282fe <__multiply+0x86>
 80283bc:	9b00      	ldr	r3, [sp, #0]
 80283be:	3b01      	subs	r3, #1
 80283c0:	9300      	str	r3, [sp, #0]
 80283c2:	e79f      	b.n	8028304 <__multiply+0x8c>
 80283c4:	0802f5aa 	.word	0x0802f5aa
 80283c8:	0802f61b 	.word	0x0802f61b

080283cc <__pow5mult>:
 80283cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80283ce:	2303      	movs	r3, #3
 80283d0:	0015      	movs	r5, r2
 80283d2:	0007      	movs	r7, r0
 80283d4:	000e      	movs	r6, r1
 80283d6:	401a      	ands	r2, r3
 80283d8:	421d      	tst	r5, r3
 80283da:	d008      	beq.n	80283ee <__pow5mult+0x22>
 80283dc:	4925      	ldr	r1, [pc, #148]	@ (8028474 <__pow5mult+0xa8>)
 80283de:	3a01      	subs	r2, #1
 80283e0:	0092      	lsls	r2, r2, #2
 80283e2:	5852      	ldr	r2, [r2, r1]
 80283e4:	2300      	movs	r3, #0
 80283e6:	0031      	movs	r1, r6
 80283e8:	f7ff fe4e 	bl	8028088 <__multadd>
 80283ec:	0006      	movs	r6, r0
 80283ee:	10ad      	asrs	r5, r5, #2
 80283f0:	d03d      	beq.n	802846e <__pow5mult+0xa2>
 80283f2:	69fc      	ldr	r4, [r7, #28]
 80283f4:	2c00      	cmp	r4, #0
 80283f6:	d10f      	bne.n	8028418 <__pow5mult+0x4c>
 80283f8:	2010      	movs	r0, #16
 80283fa:	f7ff fd0f 	bl	8027e1c <malloc>
 80283fe:	1e02      	subs	r2, r0, #0
 8028400:	61f8      	str	r0, [r7, #28]
 8028402:	d105      	bne.n	8028410 <__pow5mult+0x44>
 8028404:	21b4      	movs	r1, #180	@ 0xb4
 8028406:	4b1c      	ldr	r3, [pc, #112]	@ (8028478 <__pow5mult+0xac>)
 8028408:	481c      	ldr	r0, [pc, #112]	@ (802847c <__pow5mult+0xb0>)
 802840a:	31ff      	adds	r1, #255	@ 0xff
 802840c:	f000 feac 	bl	8029168 <__assert_func>
 8028410:	6044      	str	r4, [r0, #4]
 8028412:	6084      	str	r4, [r0, #8]
 8028414:	6004      	str	r4, [r0, #0]
 8028416:	60c4      	str	r4, [r0, #12]
 8028418:	69fb      	ldr	r3, [r7, #28]
 802841a:	689c      	ldr	r4, [r3, #8]
 802841c:	9301      	str	r3, [sp, #4]
 802841e:	2c00      	cmp	r4, #0
 8028420:	d108      	bne.n	8028434 <__pow5mult+0x68>
 8028422:	0038      	movs	r0, r7
 8028424:	4916      	ldr	r1, [pc, #88]	@ (8028480 <__pow5mult+0xb4>)
 8028426:	f7ff ff0f 	bl	8028248 <__i2b>
 802842a:	9b01      	ldr	r3, [sp, #4]
 802842c:	0004      	movs	r4, r0
 802842e:	6098      	str	r0, [r3, #8]
 8028430:	2300      	movs	r3, #0
 8028432:	6003      	str	r3, [r0, #0]
 8028434:	2301      	movs	r3, #1
 8028436:	421d      	tst	r5, r3
 8028438:	d00a      	beq.n	8028450 <__pow5mult+0x84>
 802843a:	0031      	movs	r1, r6
 802843c:	0022      	movs	r2, r4
 802843e:	0038      	movs	r0, r7
 8028440:	f7ff ff1a 	bl	8028278 <__multiply>
 8028444:	0031      	movs	r1, r6
 8028446:	9001      	str	r0, [sp, #4]
 8028448:	0038      	movs	r0, r7
 802844a:	f7ff fdf9 	bl	8028040 <_Bfree>
 802844e:	9e01      	ldr	r6, [sp, #4]
 8028450:	106d      	asrs	r5, r5, #1
 8028452:	d00c      	beq.n	802846e <__pow5mult+0xa2>
 8028454:	6820      	ldr	r0, [r4, #0]
 8028456:	2800      	cmp	r0, #0
 8028458:	d107      	bne.n	802846a <__pow5mult+0x9e>
 802845a:	0022      	movs	r2, r4
 802845c:	0021      	movs	r1, r4
 802845e:	0038      	movs	r0, r7
 8028460:	f7ff ff0a 	bl	8028278 <__multiply>
 8028464:	2300      	movs	r3, #0
 8028466:	6020      	str	r0, [r4, #0]
 8028468:	6003      	str	r3, [r0, #0]
 802846a:	0004      	movs	r4, r0
 802846c:	e7e2      	b.n	8028434 <__pow5mult+0x68>
 802846e:	0030      	movs	r0, r6
 8028470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028472:	46c0      	nop			@ (mov r8, r8)
 8028474:	0802f81c 	.word	0x0802f81c
 8028478:	0802f53b 	.word	0x0802f53b
 802847c:	0802f61b 	.word	0x0802f61b
 8028480:	00000271 	.word	0x00000271

08028484 <__lshift>:
 8028484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028486:	000c      	movs	r4, r1
 8028488:	0016      	movs	r6, r2
 802848a:	6923      	ldr	r3, [r4, #16]
 802848c:	1157      	asrs	r7, r2, #5
 802848e:	b085      	sub	sp, #20
 8028490:	18fb      	adds	r3, r7, r3
 8028492:	9301      	str	r3, [sp, #4]
 8028494:	3301      	adds	r3, #1
 8028496:	9300      	str	r3, [sp, #0]
 8028498:	6849      	ldr	r1, [r1, #4]
 802849a:	68a3      	ldr	r3, [r4, #8]
 802849c:	9002      	str	r0, [sp, #8]
 802849e:	9a00      	ldr	r2, [sp, #0]
 80284a0:	4293      	cmp	r3, r2
 80284a2:	db10      	blt.n	80284c6 <__lshift+0x42>
 80284a4:	9802      	ldr	r0, [sp, #8]
 80284a6:	f7ff fd87 	bl	8027fb8 <_Balloc>
 80284aa:	2300      	movs	r3, #0
 80284ac:	0001      	movs	r1, r0
 80284ae:	0005      	movs	r5, r0
 80284b0:	001a      	movs	r2, r3
 80284b2:	3114      	adds	r1, #20
 80284b4:	4298      	cmp	r0, r3
 80284b6:	d10c      	bne.n	80284d2 <__lshift+0x4e>
 80284b8:	21ef      	movs	r1, #239	@ 0xef
 80284ba:	002a      	movs	r2, r5
 80284bc:	4b25      	ldr	r3, [pc, #148]	@ (8028554 <__lshift+0xd0>)
 80284be:	4826      	ldr	r0, [pc, #152]	@ (8028558 <__lshift+0xd4>)
 80284c0:	0049      	lsls	r1, r1, #1
 80284c2:	f000 fe51 	bl	8029168 <__assert_func>
 80284c6:	3101      	adds	r1, #1
 80284c8:	005b      	lsls	r3, r3, #1
 80284ca:	e7e8      	b.n	802849e <__lshift+0x1a>
 80284cc:	0098      	lsls	r0, r3, #2
 80284ce:	500a      	str	r2, [r1, r0]
 80284d0:	3301      	adds	r3, #1
 80284d2:	42bb      	cmp	r3, r7
 80284d4:	dbfa      	blt.n	80284cc <__lshift+0x48>
 80284d6:	43fb      	mvns	r3, r7
 80284d8:	17db      	asrs	r3, r3, #31
 80284da:	401f      	ands	r7, r3
 80284dc:	00bf      	lsls	r7, r7, #2
 80284de:	0023      	movs	r3, r4
 80284e0:	201f      	movs	r0, #31
 80284e2:	19c9      	adds	r1, r1, r7
 80284e4:	0037      	movs	r7, r6
 80284e6:	6922      	ldr	r2, [r4, #16]
 80284e8:	3314      	adds	r3, #20
 80284ea:	0092      	lsls	r2, r2, #2
 80284ec:	189a      	adds	r2, r3, r2
 80284ee:	4007      	ands	r7, r0
 80284f0:	4206      	tst	r6, r0
 80284f2:	d029      	beq.n	8028548 <__lshift+0xc4>
 80284f4:	3001      	adds	r0, #1
 80284f6:	1bc0      	subs	r0, r0, r7
 80284f8:	9003      	str	r0, [sp, #12]
 80284fa:	468c      	mov	ip, r1
 80284fc:	2000      	movs	r0, #0
 80284fe:	681e      	ldr	r6, [r3, #0]
 8028500:	40be      	lsls	r6, r7
 8028502:	4306      	orrs	r6, r0
 8028504:	4660      	mov	r0, ip
 8028506:	c040      	stmia	r0!, {r6}
 8028508:	4684      	mov	ip, r0
 802850a:	9e03      	ldr	r6, [sp, #12]
 802850c:	cb01      	ldmia	r3!, {r0}
 802850e:	40f0      	lsrs	r0, r6
 8028510:	429a      	cmp	r2, r3
 8028512:	d8f4      	bhi.n	80284fe <__lshift+0x7a>
 8028514:	0026      	movs	r6, r4
 8028516:	3615      	adds	r6, #21
 8028518:	2304      	movs	r3, #4
 802851a:	42b2      	cmp	r2, r6
 802851c:	d304      	bcc.n	8028528 <__lshift+0xa4>
 802851e:	1b13      	subs	r3, r2, r4
 8028520:	3b15      	subs	r3, #21
 8028522:	089b      	lsrs	r3, r3, #2
 8028524:	3301      	adds	r3, #1
 8028526:	009b      	lsls	r3, r3, #2
 8028528:	50c8      	str	r0, [r1, r3]
 802852a:	2800      	cmp	r0, #0
 802852c:	d002      	beq.n	8028534 <__lshift+0xb0>
 802852e:	9b01      	ldr	r3, [sp, #4]
 8028530:	3302      	adds	r3, #2
 8028532:	9300      	str	r3, [sp, #0]
 8028534:	9b00      	ldr	r3, [sp, #0]
 8028536:	9802      	ldr	r0, [sp, #8]
 8028538:	3b01      	subs	r3, #1
 802853a:	0021      	movs	r1, r4
 802853c:	612b      	str	r3, [r5, #16]
 802853e:	f7ff fd7f 	bl	8028040 <_Bfree>
 8028542:	0028      	movs	r0, r5
 8028544:	b005      	add	sp, #20
 8028546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028548:	cb01      	ldmia	r3!, {r0}
 802854a:	c101      	stmia	r1!, {r0}
 802854c:	429a      	cmp	r2, r3
 802854e:	d8fb      	bhi.n	8028548 <__lshift+0xc4>
 8028550:	e7f0      	b.n	8028534 <__lshift+0xb0>
 8028552:	46c0      	nop			@ (mov r8, r8)
 8028554:	0802f5aa 	.word	0x0802f5aa
 8028558:	0802f61b 	.word	0x0802f61b

0802855c <__mcmp>:
 802855c:	b530      	push	{r4, r5, lr}
 802855e:	690b      	ldr	r3, [r1, #16]
 8028560:	6904      	ldr	r4, [r0, #16]
 8028562:	0002      	movs	r2, r0
 8028564:	1ae0      	subs	r0, r4, r3
 8028566:	429c      	cmp	r4, r3
 8028568:	d10f      	bne.n	802858a <__mcmp+0x2e>
 802856a:	3214      	adds	r2, #20
 802856c:	009b      	lsls	r3, r3, #2
 802856e:	3114      	adds	r1, #20
 8028570:	0014      	movs	r4, r2
 8028572:	18c9      	adds	r1, r1, r3
 8028574:	18d2      	adds	r2, r2, r3
 8028576:	3a04      	subs	r2, #4
 8028578:	3904      	subs	r1, #4
 802857a:	6815      	ldr	r5, [r2, #0]
 802857c:	680b      	ldr	r3, [r1, #0]
 802857e:	429d      	cmp	r5, r3
 8028580:	d004      	beq.n	802858c <__mcmp+0x30>
 8028582:	2001      	movs	r0, #1
 8028584:	429d      	cmp	r5, r3
 8028586:	d200      	bcs.n	802858a <__mcmp+0x2e>
 8028588:	3802      	subs	r0, #2
 802858a:	bd30      	pop	{r4, r5, pc}
 802858c:	4294      	cmp	r4, r2
 802858e:	d3f2      	bcc.n	8028576 <__mcmp+0x1a>
 8028590:	e7fb      	b.n	802858a <__mcmp+0x2e>
	...

08028594 <__mdiff>:
 8028594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028596:	000c      	movs	r4, r1
 8028598:	b087      	sub	sp, #28
 802859a:	9000      	str	r0, [sp, #0]
 802859c:	0011      	movs	r1, r2
 802859e:	0020      	movs	r0, r4
 80285a0:	0017      	movs	r7, r2
 80285a2:	f7ff ffdb 	bl	802855c <__mcmp>
 80285a6:	1e05      	subs	r5, r0, #0
 80285a8:	d110      	bne.n	80285cc <__mdiff+0x38>
 80285aa:	0001      	movs	r1, r0
 80285ac:	9800      	ldr	r0, [sp, #0]
 80285ae:	f7ff fd03 	bl	8027fb8 <_Balloc>
 80285b2:	1e02      	subs	r2, r0, #0
 80285b4:	d104      	bne.n	80285c0 <__mdiff+0x2c>
 80285b6:	4b40      	ldr	r3, [pc, #256]	@ (80286b8 <__mdiff+0x124>)
 80285b8:	4840      	ldr	r0, [pc, #256]	@ (80286bc <__mdiff+0x128>)
 80285ba:	4941      	ldr	r1, [pc, #260]	@ (80286c0 <__mdiff+0x12c>)
 80285bc:	f000 fdd4 	bl	8029168 <__assert_func>
 80285c0:	2301      	movs	r3, #1
 80285c2:	6145      	str	r5, [r0, #20]
 80285c4:	6103      	str	r3, [r0, #16]
 80285c6:	0010      	movs	r0, r2
 80285c8:	b007      	add	sp, #28
 80285ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80285cc:	2600      	movs	r6, #0
 80285ce:	42b0      	cmp	r0, r6
 80285d0:	da03      	bge.n	80285da <__mdiff+0x46>
 80285d2:	0023      	movs	r3, r4
 80285d4:	003c      	movs	r4, r7
 80285d6:	001f      	movs	r7, r3
 80285d8:	3601      	adds	r6, #1
 80285da:	6861      	ldr	r1, [r4, #4]
 80285dc:	9800      	ldr	r0, [sp, #0]
 80285de:	f7ff fceb 	bl	8027fb8 <_Balloc>
 80285e2:	1e02      	subs	r2, r0, #0
 80285e4:	d103      	bne.n	80285ee <__mdiff+0x5a>
 80285e6:	4b34      	ldr	r3, [pc, #208]	@ (80286b8 <__mdiff+0x124>)
 80285e8:	4834      	ldr	r0, [pc, #208]	@ (80286bc <__mdiff+0x128>)
 80285ea:	4936      	ldr	r1, [pc, #216]	@ (80286c4 <__mdiff+0x130>)
 80285ec:	e7e6      	b.n	80285bc <__mdiff+0x28>
 80285ee:	6923      	ldr	r3, [r4, #16]
 80285f0:	3414      	adds	r4, #20
 80285f2:	9300      	str	r3, [sp, #0]
 80285f4:	009b      	lsls	r3, r3, #2
 80285f6:	18e3      	adds	r3, r4, r3
 80285f8:	0021      	movs	r1, r4
 80285fa:	9401      	str	r4, [sp, #4]
 80285fc:	003c      	movs	r4, r7
 80285fe:	9302      	str	r3, [sp, #8]
 8028600:	693b      	ldr	r3, [r7, #16]
 8028602:	3414      	adds	r4, #20
 8028604:	009b      	lsls	r3, r3, #2
 8028606:	18e3      	adds	r3, r4, r3
 8028608:	9303      	str	r3, [sp, #12]
 802860a:	0003      	movs	r3, r0
 802860c:	60c6      	str	r6, [r0, #12]
 802860e:	468c      	mov	ip, r1
 8028610:	2000      	movs	r0, #0
 8028612:	3314      	adds	r3, #20
 8028614:	9304      	str	r3, [sp, #16]
 8028616:	9305      	str	r3, [sp, #20]
 8028618:	4663      	mov	r3, ip
 802861a:	cb20      	ldmia	r3!, {r5}
 802861c:	b2a9      	uxth	r1, r5
 802861e:	000e      	movs	r6, r1
 8028620:	469c      	mov	ip, r3
 8028622:	cc08      	ldmia	r4!, {r3}
 8028624:	0c2d      	lsrs	r5, r5, #16
 8028626:	b299      	uxth	r1, r3
 8028628:	1a71      	subs	r1, r6, r1
 802862a:	1809      	adds	r1, r1, r0
 802862c:	0c1b      	lsrs	r3, r3, #16
 802862e:	1408      	asrs	r0, r1, #16
 8028630:	1aeb      	subs	r3, r5, r3
 8028632:	181b      	adds	r3, r3, r0
 8028634:	1418      	asrs	r0, r3, #16
 8028636:	b289      	uxth	r1, r1
 8028638:	041b      	lsls	r3, r3, #16
 802863a:	4319      	orrs	r1, r3
 802863c:	9b05      	ldr	r3, [sp, #20]
 802863e:	c302      	stmia	r3!, {r1}
 8028640:	9305      	str	r3, [sp, #20]
 8028642:	9b03      	ldr	r3, [sp, #12]
 8028644:	42a3      	cmp	r3, r4
 8028646:	d8e7      	bhi.n	8028618 <__mdiff+0x84>
 8028648:	0039      	movs	r1, r7
 802864a:	9c03      	ldr	r4, [sp, #12]
 802864c:	3115      	adds	r1, #21
 802864e:	2304      	movs	r3, #4
 8028650:	428c      	cmp	r4, r1
 8028652:	d304      	bcc.n	802865e <__mdiff+0xca>
 8028654:	1be3      	subs	r3, r4, r7
 8028656:	3b15      	subs	r3, #21
 8028658:	089b      	lsrs	r3, r3, #2
 802865a:	3301      	adds	r3, #1
 802865c:	009b      	lsls	r3, r3, #2
 802865e:	9901      	ldr	r1, [sp, #4]
 8028660:	18cd      	adds	r5, r1, r3
 8028662:	9904      	ldr	r1, [sp, #16]
 8028664:	002e      	movs	r6, r5
 8028666:	18cb      	adds	r3, r1, r3
 8028668:	001f      	movs	r7, r3
 802866a:	9902      	ldr	r1, [sp, #8]
 802866c:	428e      	cmp	r6, r1
 802866e:	d311      	bcc.n	8028694 <__mdiff+0x100>
 8028670:	9c02      	ldr	r4, [sp, #8]
 8028672:	1ee9      	subs	r1, r5, #3
 8028674:	2000      	movs	r0, #0
 8028676:	428c      	cmp	r4, r1
 8028678:	d304      	bcc.n	8028684 <__mdiff+0xf0>
 802867a:	0021      	movs	r1, r4
 802867c:	3103      	adds	r1, #3
 802867e:	1b49      	subs	r1, r1, r5
 8028680:	0889      	lsrs	r1, r1, #2
 8028682:	0088      	lsls	r0, r1, #2
 8028684:	181b      	adds	r3, r3, r0
 8028686:	3b04      	subs	r3, #4
 8028688:	6819      	ldr	r1, [r3, #0]
 802868a:	2900      	cmp	r1, #0
 802868c:	d010      	beq.n	80286b0 <__mdiff+0x11c>
 802868e:	9b00      	ldr	r3, [sp, #0]
 8028690:	6113      	str	r3, [r2, #16]
 8028692:	e798      	b.n	80285c6 <__mdiff+0x32>
 8028694:	4684      	mov	ip, r0
 8028696:	ce02      	ldmia	r6!, {r1}
 8028698:	b288      	uxth	r0, r1
 802869a:	4460      	add	r0, ip
 802869c:	1400      	asrs	r0, r0, #16
 802869e:	0c0c      	lsrs	r4, r1, #16
 80286a0:	1904      	adds	r4, r0, r4
 80286a2:	4461      	add	r1, ip
 80286a4:	1420      	asrs	r0, r4, #16
 80286a6:	b289      	uxth	r1, r1
 80286a8:	0424      	lsls	r4, r4, #16
 80286aa:	4321      	orrs	r1, r4
 80286ac:	c702      	stmia	r7!, {r1}
 80286ae:	e7dc      	b.n	802866a <__mdiff+0xd6>
 80286b0:	9900      	ldr	r1, [sp, #0]
 80286b2:	3901      	subs	r1, #1
 80286b4:	9100      	str	r1, [sp, #0]
 80286b6:	e7e6      	b.n	8028686 <__mdiff+0xf2>
 80286b8:	0802f5aa 	.word	0x0802f5aa
 80286bc:	0802f61b 	.word	0x0802f61b
 80286c0:	00000237 	.word	0x00000237
 80286c4:	00000245 	.word	0x00000245

080286c8 <__ulp>:
 80286c8:	b510      	push	{r4, lr}
 80286ca:	2400      	movs	r4, #0
 80286cc:	4b0c      	ldr	r3, [pc, #48]	@ (8028700 <__ulp+0x38>)
 80286ce:	4a0d      	ldr	r2, [pc, #52]	@ (8028704 <__ulp+0x3c>)
 80286d0:	400b      	ands	r3, r1
 80286d2:	189b      	adds	r3, r3, r2
 80286d4:	42a3      	cmp	r3, r4
 80286d6:	dc06      	bgt.n	80286e6 <__ulp+0x1e>
 80286d8:	425b      	negs	r3, r3
 80286da:	151a      	asrs	r2, r3, #20
 80286dc:	2a13      	cmp	r2, #19
 80286de:	dc05      	bgt.n	80286ec <__ulp+0x24>
 80286e0:	2380      	movs	r3, #128	@ 0x80
 80286e2:	031b      	lsls	r3, r3, #12
 80286e4:	4113      	asrs	r3, r2
 80286e6:	0019      	movs	r1, r3
 80286e8:	0020      	movs	r0, r4
 80286ea:	bd10      	pop	{r4, pc}
 80286ec:	3a14      	subs	r2, #20
 80286ee:	2401      	movs	r4, #1
 80286f0:	2a1e      	cmp	r2, #30
 80286f2:	dc02      	bgt.n	80286fa <__ulp+0x32>
 80286f4:	2480      	movs	r4, #128	@ 0x80
 80286f6:	0624      	lsls	r4, r4, #24
 80286f8:	40d4      	lsrs	r4, r2
 80286fa:	2300      	movs	r3, #0
 80286fc:	e7f3      	b.n	80286e6 <__ulp+0x1e>
 80286fe:	46c0      	nop			@ (mov r8, r8)
 8028700:	7ff00000 	.word	0x7ff00000
 8028704:	fcc00000 	.word	0xfcc00000

08028708 <__b2d>:
 8028708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802870a:	0006      	movs	r6, r0
 802870c:	6903      	ldr	r3, [r0, #16]
 802870e:	3614      	adds	r6, #20
 8028710:	009b      	lsls	r3, r3, #2
 8028712:	18f3      	adds	r3, r6, r3
 8028714:	1f1d      	subs	r5, r3, #4
 8028716:	682c      	ldr	r4, [r5, #0]
 8028718:	000f      	movs	r7, r1
 802871a:	0020      	movs	r0, r4
 802871c:	9301      	str	r3, [sp, #4]
 802871e:	f7ff fd43 	bl	80281a8 <__hi0bits>
 8028722:	2220      	movs	r2, #32
 8028724:	1a12      	subs	r2, r2, r0
 8028726:	603a      	str	r2, [r7, #0]
 8028728:	0003      	movs	r3, r0
 802872a:	4a1c      	ldr	r2, [pc, #112]	@ (802879c <__b2d+0x94>)
 802872c:	280a      	cmp	r0, #10
 802872e:	dc15      	bgt.n	802875c <__b2d+0x54>
 8028730:	210b      	movs	r1, #11
 8028732:	0027      	movs	r7, r4
 8028734:	1a09      	subs	r1, r1, r0
 8028736:	40cf      	lsrs	r7, r1
 8028738:	433a      	orrs	r2, r7
 802873a:	468c      	mov	ip, r1
 802873c:	0011      	movs	r1, r2
 802873e:	2200      	movs	r2, #0
 8028740:	42ae      	cmp	r6, r5
 8028742:	d202      	bcs.n	802874a <__b2d+0x42>
 8028744:	9a01      	ldr	r2, [sp, #4]
 8028746:	3a08      	subs	r2, #8
 8028748:	6812      	ldr	r2, [r2, #0]
 802874a:	3315      	adds	r3, #21
 802874c:	409c      	lsls	r4, r3
 802874e:	4663      	mov	r3, ip
 8028750:	0027      	movs	r7, r4
 8028752:	40da      	lsrs	r2, r3
 8028754:	4317      	orrs	r7, r2
 8028756:	0038      	movs	r0, r7
 8028758:	b003      	add	sp, #12
 802875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802875c:	2700      	movs	r7, #0
 802875e:	42ae      	cmp	r6, r5
 8028760:	d202      	bcs.n	8028768 <__b2d+0x60>
 8028762:	9d01      	ldr	r5, [sp, #4]
 8028764:	3d08      	subs	r5, #8
 8028766:	682f      	ldr	r7, [r5, #0]
 8028768:	210b      	movs	r1, #11
 802876a:	4249      	negs	r1, r1
 802876c:	468c      	mov	ip, r1
 802876e:	449c      	add	ip, r3
 8028770:	2b0b      	cmp	r3, #11
 8028772:	d010      	beq.n	8028796 <__b2d+0x8e>
 8028774:	4661      	mov	r1, ip
 8028776:	2320      	movs	r3, #32
 8028778:	408c      	lsls	r4, r1
 802877a:	1a5b      	subs	r3, r3, r1
 802877c:	0039      	movs	r1, r7
 802877e:	40d9      	lsrs	r1, r3
 8028780:	430c      	orrs	r4, r1
 8028782:	4322      	orrs	r2, r4
 8028784:	0011      	movs	r1, r2
 8028786:	2200      	movs	r2, #0
 8028788:	42b5      	cmp	r5, r6
 802878a:	d901      	bls.n	8028790 <__b2d+0x88>
 802878c:	3d04      	subs	r5, #4
 802878e:	682a      	ldr	r2, [r5, #0]
 8028790:	4664      	mov	r4, ip
 8028792:	40a7      	lsls	r7, r4
 8028794:	e7dd      	b.n	8028752 <__b2d+0x4a>
 8028796:	4322      	orrs	r2, r4
 8028798:	0011      	movs	r1, r2
 802879a:	e7dc      	b.n	8028756 <__b2d+0x4e>
 802879c:	3ff00000 	.word	0x3ff00000

080287a0 <__d2b>:
 80287a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80287a2:	2101      	movs	r1, #1
 80287a4:	0016      	movs	r6, r2
 80287a6:	001f      	movs	r7, r3
 80287a8:	f7ff fc06 	bl	8027fb8 <_Balloc>
 80287ac:	1e04      	subs	r4, r0, #0
 80287ae:	d105      	bne.n	80287bc <__d2b+0x1c>
 80287b0:	0022      	movs	r2, r4
 80287b2:	4b25      	ldr	r3, [pc, #148]	@ (8028848 <__d2b+0xa8>)
 80287b4:	4825      	ldr	r0, [pc, #148]	@ (802884c <__d2b+0xac>)
 80287b6:	4926      	ldr	r1, [pc, #152]	@ (8028850 <__d2b+0xb0>)
 80287b8:	f000 fcd6 	bl	8029168 <__assert_func>
 80287bc:	033b      	lsls	r3, r7, #12
 80287be:	007d      	lsls	r5, r7, #1
 80287c0:	0b1b      	lsrs	r3, r3, #12
 80287c2:	0d6d      	lsrs	r5, r5, #21
 80287c4:	d002      	beq.n	80287cc <__d2b+0x2c>
 80287c6:	2280      	movs	r2, #128	@ 0x80
 80287c8:	0352      	lsls	r2, r2, #13
 80287ca:	4313      	orrs	r3, r2
 80287cc:	9301      	str	r3, [sp, #4]
 80287ce:	2e00      	cmp	r6, #0
 80287d0:	d025      	beq.n	802881e <__d2b+0x7e>
 80287d2:	4668      	mov	r0, sp
 80287d4:	9600      	str	r6, [sp, #0]
 80287d6:	f7ff fd08 	bl	80281ea <__lo0bits>
 80287da:	9b01      	ldr	r3, [sp, #4]
 80287dc:	9900      	ldr	r1, [sp, #0]
 80287de:	2800      	cmp	r0, #0
 80287e0:	d01b      	beq.n	802881a <__d2b+0x7a>
 80287e2:	2220      	movs	r2, #32
 80287e4:	001e      	movs	r6, r3
 80287e6:	1a12      	subs	r2, r2, r0
 80287e8:	4096      	lsls	r6, r2
 80287ea:	0032      	movs	r2, r6
 80287ec:	40c3      	lsrs	r3, r0
 80287ee:	430a      	orrs	r2, r1
 80287f0:	6162      	str	r2, [r4, #20]
 80287f2:	9301      	str	r3, [sp, #4]
 80287f4:	9e01      	ldr	r6, [sp, #4]
 80287f6:	61a6      	str	r6, [r4, #24]
 80287f8:	1e73      	subs	r3, r6, #1
 80287fa:	419e      	sbcs	r6, r3
 80287fc:	3601      	adds	r6, #1
 80287fe:	6126      	str	r6, [r4, #16]
 8028800:	2d00      	cmp	r5, #0
 8028802:	d014      	beq.n	802882e <__d2b+0x8e>
 8028804:	2635      	movs	r6, #53	@ 0x35
 8028806:	4b13      	ldr	r3, [pc, #76]	@ (8028854 <__d2b+0xb4>)
 8028808:	18ed      	adds	r5, r5, r3
 802880a:	9b08      	ldr	r3, [sp, #32]
 802880c:	182d      	adds	r5, r5, r0
 802880e:	601d      	str	r5, [r3, #0]
 8028810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028812:	1a36      	subs	r6, r6, r0
 8028814:	601e      	str	r6, [r3, #0]
 8028816:	0020      	movs	r0, r4
 8028818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802881a:	6161      	str	r1, [r4, #20]
 802881c:	e7ea      	b.n	80287f4 <__d2b+0x54>
 802881e:	a801      	add	r0, sp, #4
 8028820:	f7ff fce3 	bl	80281ea <__lo0bits>
 8028824:	9b01      	ldr	r3, [sp, #4]
 8028826:	2601      	movs	r6, #1
 8028828:	6163      	str	r3, [r4, #20]
 802882a:	3020      	adds	r0, #32
 802882c:	e7e7      	b.n	80287fe <__d2b+0x5e>
 802882e:	4b0a      	ldr	r3, [pc, #40]	@ (8028858 <__d2b+0xb8>)
 8028830:	18c0      	adds	r0, r0, r3
 8028832:	9b08      	ldr	r3, [sp, #32]
 8028834:	6018      	str	r0, [r3, #0]
 8028836:	4b09      	ldr	r3, [pc, #36]	@ (802885c <__d2b+0xbc>)
 8028838:	18f3      	adds	r3, r6, r3
 802883a:	009b      	lsls	r3, r3, #2
 802883c:	18e3      	adds	r3, r4, r3
 802883e:	6958      	ldr	r0, [r3, #20]
 8028840:	f7ff fcb2 	bl	80281a8 <__hi0bits>
 8028844:	0176      	lsls	r6, r6, #5
 8028846:	e7e3      	b.n	8028810 <__d2b+0x70>
 8028848:	0802f5aa 	.word	0x0802f5aa
 802884c:	0802f61b 	.word	0x0802f61b
 8028850:	0000030f 	.word	0x0000030f
 8028854:	fffffbcd 	.word	0xfffffbcd
 8028858:	fffffbce 	.word	0xfffffbce
 802885c:	3fffffff 	.word	0x3fffffff

08028860 <__ratio>:
 8028860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028862:	b087      	sub	sp, #28
 8028864:	000f      	movs	r7, r1
 8028866:	a904      	add	r1, sp, #16
 8028868:	0006      	movs	r6, r0
 802886a:	f7ff ff4d 	bl	8028708 <__b2d>
 802886e:	9000      	str	r0, [sp, #0]
 8028870:	9101      	str	r1, [sp, #4]
 8028872:	9b00      	ldr	r3, [sp, #0]
 8028874:	9c01      	ldr	r4, [sp, #4]
 8028876:	0038      	movs	r0, r7
 8028878:	a905      	add	r1, sp, #20
 802887a:	9302      	str	r3, [sp, #8]
 802887c:	9403      	str	r4, [sp, #12]
 802887e:	f7ff ff43 	bl	8028708 <__b2d>
 8028882:	000d      	movs	r5, r1
 8028884:	0002      	movs	r2, r0
 8028886:	000b      	movs	r3, r1
 8028888:	6930      	ldr	r0, [r6, #16]
 802888a:	6939      	ldr	r1, [r7, #16]
 802888c:	9e04      	ldr	r6, [sp, #16]
 802888e:	1a40      	subs	r0, r0, r1
 8028890:	9905      	ldr	r1, [sp, #20]
 8028892:	0140      	lsls	r0, r0, #5
 8028894:	1a71      	subs	r1, r6, r1
 8028896:	1841      	adds	r1, r0, r1
 8028898:	0508      	lsls	r0, r1, #20
 802889a:	2900      	cmp	r1, #0
 802889c:	dd08      	ble.n	80288b0 <__ratio+0x50>
 802889e:	9901      	ldr	r1, [sp, #4]
 80288a0:	1841      	adds	r1, r0, r1
 80288a2:	9103      	str	r1, [sp, #12]
 80288a4:	9802      	ldr	r0, [sp, #8]
 80288a6:	9903      	ldr	r1, [sp, #12]
 80288a8:	f7d9 fc1a 	bl	80020e0 <__aeabi_ddiv>
 80288ac:	b007      	add	sp, #28
 80288ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80288b0:	1a2b      	subs	r3, r5, r0
 80288b2:	e7f7      	b.n	80288a4 <__ratio+0x44>

080288b4 <__copybits>:
 80288b4:	b570      	push	{r4, r5, r6, lr}
 80288b6:	0014      	movs	r4, r2
 80288b8:	0005      	movs	r5, r0
 80288ba:	3901      	subs	r1, #1
 80288bc:	6913      	ldr	r3, [r2, #16]
 80288be:	1149      	asrs	r1, r1, #5
 80288c0:	3101      	adds	r1, #1
 80288c2:	0089      	lsls	r1, r1, #2
 80288c4:	3414      	adds	r4, #20
 80288c6:	009b      	lsls	r3, r3, #2
 80288c8:	1841      	adds	r1, r0, r1
 80288ca:	18e3      	adds	r3, r4, r3
 80288cc:	42a3      	cmp	r3, r4
 80288ce:	d80d      	bhi.n	80288ec <__copybits+0x38>
 80288d0:	0014      	movs	r4, r2
 80288d2:	3411      	adds	r4, #17
 80288d4:	2500      	movs	r5, #0
 80288d6:	42a3      	cmp	r3, r4
 80288d8:	d303      	bcc.n	80288e2 <__copybits+0x2e>
 80288da:	1a9b      	subs	r3, r3, r2
 80288dc:	3b11      	subs	r3, #17
 80288de:	089b      	lsrs	r3, r3, #2
 80288e0:	009d      	lsls	r5, r3, #2
 80288e2:	2300      	movs	r3, #0
 80288e4:	1940      	adds	r0, r0, r5
 80288e6:	4281      	cmp	r1, r0
 80288e8:	d803      	bhi.n	80288f2 <__copybits+0x3e>
 80288ea:	bd70      	pop	{r4, r5, r6, pc}
 80288ec:	cc40      	ldmia	r4!, {r6}
 80288ee:	c540      	stmia	r5!, {r6}
 80288f0:	e7ec      	b.n	80288cc <__copybits+0x18>
 80288f2:	c008      	stmia	r0!, {r3}
 80288f4:	e7f7      	b.n	80288e6 <__copybits+0x32>

080288f6 <__any_on>:
 80288f6:	0002      	movs	r2, r0
 80288f8:	6900      	ldr	r0, [r0, #16]
 80288fa:	b510      	push	{r4, lr}
 80288fc:	3214      	adds	r2, #20
 80288fe:	114b      	asrs	r3, r1, #5
 8028900:	4298      	cmp	r0, r3
 8028902:	db13      	blt.n	802892c <__any_on+0x36>
 8028904:	dd0c      	ble.n	8028920 <__any_on+0x2a>
 8028906:	241f      	movs	r4, #31
 8028908:	0008      	movs	r0, r1
 802890a:	4020      	ands	r0, r4
 802890c:	4221      	tst	r1, r4
 802890e:	d007      	beq.n	8028920 <__any_on+0x2a>
 8028910:	0099      	lsls	r1, r3, #2
 8028912:	588c      	ldr	r4, [r1, r2]
 8028914:	0021      	movs	r1, r4
 8028916:	40c1      	lsrs	r1, r0
 8028918:	4081      	lsls	r1, r0
 802891a:	2001      	movs	r0, #1
 802891c:	428c      	cmp	r4, r1
 802891e:	d104      	bne.n	802892a <__any_on+0x34>
 8028920:	009b      	lsls	r3, r3, #2
 8028922:	18d3      	adds	r3, r2, r3
 8028924:	4293      	cmp	r3, r2
 8028926:	d803      	bhi.n	8028930 <__any_on+0x3a>
 8028928:	2000      	movs	r0, #0
 802892a:	bd10      	pop	{r4, pc}
 802892c:	0003      	movs	r3, r0
 802892e:	e7f7      	b.n	8028920 <__any_on+0x2a>
 8028930:	3b04      	subs	r3, #4
 8028932:	6819      	ldr	r1, [r3, #0]
 8028934:	2900      	cmp	r1, #0
 8028936:	d0f5      	beq.n	8028924 <__any_on+0x2e>
 8028938:	2001      	movs	r0, #1
 802893a:	e7f6      	b.n	802892a <__any_on+0x34>

0802893c <__ascii_wctomb>:
 802893c:	0003      	movs	r3, r0
 802893e:	1e08      	subs	r0, r1, #0
 8028940:	d005      	beq.n	802894e <__ascii_wctomb+0x12>
 8028942:	2aff      	cmp	r2, #255	@ 0xff
 8028944:	d904      	bls.n	8028950 <__ascii_wctomb+0x14>
 8028946:	228a      	movs	r2, #138	@ 0x8a
 8028948:	2001      	movs	r0, #1
 802894a:	601a      	str	r2, [r3, #0]
 802894c:	4240      	negs	r0, r0
 802894e:	4770      	bx	lr
 8028950:	2001      	movs	r0, #1
 8028952:	700a      	strb	r2, [r1, #0]
 8028954:	e7fb      	b.n	802894e <__ascii_wctomb+0x12>
	...

08028958 <__ssputs_r>:
 8028958:	b5f0      	push	{r4, r5, r6, r7, lr}
 802895a:	688e      	ldr	r6, [r1, #8]
 802895c:	b085      	sub	sp, #20
 802895e:	001f      	movs	r7, r3
 8028960:	000c      	movs	r4, r1
 8028962:	680b      	ldr	r3, [r1, #0]
 8028964:	9002      	str	r0, [sp, #8]
 8028966:	9203      	str	r2, [sp, #12]
 8028968:	42be      	cmp	r6, r7
 802896a:	d830      	bhi.n	80289ce <__ssputs_r+0x76>
 802896c:	210c      	movs	r1, #12
 802896e:	5e62      	ldrsh	r2, [r4, r1]
 8028970:	2190      	movs	r1, #144	@ 0x90
 8028972:	00c9      	lsls	r1, r1, #3
 8028974:	420a      	tst	r2, r1
 8028976:	d028      	beq.n	80289ca <__ssputs_r+0x72>
 8028978:	2003      	movs	r0, #3
 802897a:	6921      	ldr	r1, [r4, #16]
 802897c:	1a5b      	subs	r3, r3, r1
 802897e:	9301      	str	r3, [sp, #4]
 8028980:	6963      	ldr	r3, [r4, #20]
 8028982:	4343      	muls	r3, r0
 8028984:	9801      	ldr	r0, [sp, #4]
 8028986:	0fdd      	lsrs	r5, r3, #31
 8028988:	18ed      	adds	r5, r5, r3
 802898a:	1c7b      	adds	r3, r7, #1
 802898c:	181b      	adds	r3, r3, r0
 802898e:	106d      	asrs	r5, r5, #1
 8028990:	42ab      	cmp	r3, r5
 8028992:	d900      	bls.n	8028996 <__ssputs_r+0x3e>
 8028994:	001d      	movs	r5, r3
 8028996:	0552      	lsls	r2, r2, #21
 8028998:	d528      	bpl.n	80289ec <__ssputs_r+0x94>
 802899a:	0029      	movs	r1, r5
 802899c:	9802      	ldr	r0, [sp, #8]
 802899e:	f7ff fa69 	bl	8027e74 <_malloc_r>
 80289a2:	1e06      	subs	r6, r0, #0
 80289a4:	d02c      	beq.n	8028a00 <__ssputs_r+0xa8>
 80289a6:	9a01      	ldr	r2, [sp, #4]
 80289a8:	6921      	ldr	r1, [r4, #16]
 80289aa:	f7fe f80d 	bl	80269c8 <memcpy>
 80289ae:	89a2      	ldrh	r2, [r4, #12]
 80289b0:	4b18      	ldr	r3, [pc, #96]	@ (8028a14 <__ssputs_r+0xbc>)
 80289b2:	401a      	ands	r2, r3
 80289b4:	2380      	movs	r3, #128	@ 0x80
 80289b6:	4313      	orrs	r3, r2
 80289b8:	81a3      	strh	r3, [r4, #12]
 80289ba:	9b01      	ldr	r3, [sp, #4]
 80289bc:	6126      	str	r6, [r4, #16]
 80289be:	18f6      	adds	r6, r6, r3
 80289c0:	6026      	str	r6, [r4, #0]
 80289c2:	003e      	movs	r6, r7
 80289c4:	6165      	str	r5, [r4, #20]
 80289c6:	1aed      	subs	r5, r5, r3
 80289c8:	60a5      	str	r5, [r4, #8]
 80289ca:	42be      	cmp	r6, r7
 80289cc:	d900      	bls.n	80289d0 <__ssputs_r+0x78>
 80289ce:	003e      	movs	r6, r7
 80289d0:	0032      	movs	r2, r6
 80289d2:	9903      	ldr	r1, [sp, #12]
 80289d4:	6820      	ldr	r0, [r4, #0]
 80289d6:	f000 fb7e 	bl	80290d6 <memmove>
 80289da:	2000      	movs	r0, #0
 80289dc:	68a3      	ldr	r3, [r4, #8]
 80289de:	1b9b      	subs	r3, r3, r6
 80289e0:	60a3      	str	r3, [r4, #8]
 80289e2:	6823      	ldr	r3, [r4, #0]
 80289e4:	199b      	adds	r3, r3, r6
 80289e6:	6023      	str	r3, [r4, #0]
 80289e8:	b005      	add	sp, #20
 80289ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80289ec:	002a      	movs	r2, r5
 80289ee:	9802      	ldr	r0, [sp, #8]
 80289f0:	f000 fc05 	bl	80291fe <_realloc_r>
 80289f4:	1e06      	subs	r6, r0, #0
 80289f6:	d1e0      	bne.n	80289ba <__ssputs_r+0x62>
 80289f8:	6921      	ldr	r1, [r4, #16]
 80289fa:	9802      	ldr	r0, [sp, #8]
 80289fc:	f7fe fe6a 	bl	80276d4 <_free_r>
 8028a00:	230c      	movs	r3, #12
 8028a02:	2001      	movs	r0, #1
 8028a04:	9a02      	ldr	r2, [sp, #8]
 8028a06:	4240      	negs	r0, r0
 8028a08:	6013      	str	r3, [r2, #0]
 8028a0a:	89a2      	ldrh	r2, [r4, #12]
 8028a0c:	3334      	adds	r3, #52	@ 0x34
 8028a0e:	4313      	orrs	r3, r2
 8028a10:	81a3      	strh	r3, [r4, #12]
 8028a12:	e7e9      	b.n	80289e8 <__ssputs_r+0x90>
 8028a14:	fffffb7f 	.word	0xfffffb7f

08028a18 <_svfiprintf_r>:
 8028a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028a1a:	b0a1      	sub	sp, #132	@ 0x84
 8028a1c:	9003      	str	r0, [sp, #12]
 8028a1e:	001d      	movs	r5, r3
 8028a20:	898b      	ldrh	r3, [r1, #12]
 8028a22:	000f      	movs	r7, r1
 8028a24:	0016      	movs	r6, r2
 8028a26:	061b      	lsls	r3, r3, #24
 8028a28:	d511      	bpl.n	8028a4e <_svfiprintf_r+0x36>
 8028a2a:	690b      	ldr	r3, [r1, #16]
 8028a2c:	2b00      	cmp	r3, #0
 8028a2e:	d10e      	bne.n	8028a4e <_svfiprintf_r+0x36>
 8028a30:	2140      	movs	r1, #64	@ 0x40
 8028a32:	f7ff fa1f 	bl	8027e74 <_malloc_r>
 8028a36:	6038      	str	r0, [r7, #0]
 8028a38:	6138      	str	r0, [r7, #16]
 8028a3a:	2800      	cmp	r0, #0
 8028a3c:	d105      	bne.n	8028a4a <_svfiprintf_r+0x32>
 8028a3e:	230c      	movs	r3, #12
 8028a40:	9a03      	ldr	r2, [sp, #12]
 8028a42:	6013      	str	r3, [r2, #0]
 8028a44:	2001      	movs	r0, #1
 8028a46:	4240      	negs	r0, r0
 8028a48:	e0cf      	b.n	8028bea <_svfiprintf_r+0x1d2>
 8028a4a:	2340      	movs	r3, #64	@ 0x40
 8028a4c:	617b      	str	r3, [r7, #20]
 8028a4e:	2300      	movs	r3, #0
 8028a50:	ac08      	add	r4, sp, #32
 8028a52:	6163      	str	r3, [r4, #20]
 8028a54:	3320      	adds	r3, #32
 8028a56:	7663      	strb	r3, [r4, #25]
 8028a58:	3310      	adds	r3, #16
 8028a5a:	76a3      	strb	r3, [r4, #26]
 8028a5c:	9507      	str	r5, [sp, #28]
 8028a5e:	0035      	movs	r5, r6
 8028a60:	782b      	ldrb	r3, [r5, #0]
 8028a62:	2b00      	cmp	r3, #0
 8028a64:	d001      	beq.n	8028a6a <_svfiprintf_r+0x52>
 8028a66:	2b25      	cmp	r3, #37	@ 0x25
 8028a68:	d148      	bne.n	8028afc <_svfiprintf_r+0xe4>
 8028a6a:	1bab      	subs	r3, r5, r6
 8028a6c:	9305      	str	r3, [sp, #20]
 8028a6e:	42b5      	cmp	r5, r6
 8028a70:	d00b      	beq.n	8028a8a <_svfiprintf_r+0x72>
 8028a72:	0032      	movs	r2, r6
 8028a74:	0039      	movs	r1, r7
 8028a76:	9803      	ldr	r0, [sp, #12]
 8028a78:	f7ff ff6e 	bl	8028958 <__ssputs_r>
 8028a7c:	3001      	adds	r0, #1
 8028a7e:	d100      	bne.n	8028a82 <_svfiprintf_r+0x6a>
 8028a80:	e0ae      	b.n	8028be0 <_svfiprintf_r+0x1c8>
 8028a82:	6963      	ldr	r3, [r4, #20]
 8028a84:	9a05      	ldr	r2, [sp, #20]
 8028a86:	189b      	adds	r3, r3, r2
 8028a88:	6163      	str	r3, [r4, #20]
 8028a8a:	782b      	ldrb	r3, [r5, #0]
 8028a8c:	2b00      	cmp	r3, #0
 8028a8e:	d100      	bne.n	8028a92 <_svfiprintf_r+0x7a>
 8028a90:	e0a6      	b.n	8028be0 <_svfiprintf_r+0x1c8>
 8028a92:	2201      	movs	r2, #1
 8028a94:	2300      	movs	r3, #0
 8028a96:	4252      	negs	r2, r2
 8028a98:	6062      	str	r2, [r4, #4]
 8028a9a:	a904      	add	r1, sp, #16
 8028a9c:	3254      	adds	r2, #84	@ 0x54
 8028a9e:	1852      	adds	r2, r2, r1
 8028aa0:	1c6e      	adds	r6, r5, #1
 8028aa2:	6023      	str	r3, [r4, #0]
 8028aa4:	60e3      	str	r3, [r4, #12]
 8028aa6:	60a3      	str	r3, [r4, #8]
 8028aa8:	7013      	strb	r3, [r2, #0]
 8028aaa:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028aac:	4b54      	ldr	r3, [pc, #336]	@ (8028c00 <_svfiprintf_r+0x1e8>)
 8028aae:	2205      	movs	r2, #5
 8028ab0:	0018      	movs	r0, r3
 8028ab2:	7831      	ldrb	r1, [r6, #0]
 8028ab4:	9305      	str	r3, [sp, #20]
 8028ab6:	f7fd ff7c 	bl	80269b2 <memchr>
 8028aba:	1c75      	adds	r5, r6, #1
 8028abc:	2800      	cmp	r0, #0
 8028abe:	d11f      	bne.n	8028b00 <_svfiprintf_r+0xe8>
 8028ac0:	6822      	ldr	r2, [r4, #0]
 8028ac2:	06d3      	lsls	r3, r2, #27
 8028ac4:	d504      	bpl.n	8028ad0 <_svfiprintf_r+0xb8>
 8028ac6:	2353      	movs	r3, #83	@ 0x53
 8028ac8:	a904      	add	r1, sp, #16
 8028aca:	185b      	adds	r3, r3, r1
 8028acc:	2120      	movs	r1, #32
 8028ace:	7019      	strb	r1, [r3, #0]
 8028ad0:	0713      	lsls	r3, r2, #28
 8028ad2:	d504      	bpl.n	8028ade <_svfiprintf_r+0xc6>
 8028ad4:	2353      	movs	r3, #83	@ 0x53
 8028ad6:	a904      	add	r1, sp, #16
 8028ad8:	185b      	adds	r3, r3, r1
 8028ada:	212b      	movs	r1, #43	@ 0x2b
 8028adc:	7019      	strb	r1, [r3, #0]
 8028ade:	7833      	ldrb	r3, [r6, #0]
 8028ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8028ae2:	d016      	beq.n	8028b12 <_svfiprintf_r+0xfa>
 8028ae4:	0035      	movs	r5, r6
 8028ae6:	2100      	movs	r1, #0
 8028ae8:	200a      	movs	r0, #10
 8028aea:	68e3      	ldr	r3, [r4, #12]
 8028aec:	782a      	ldrb	r2, [r5, #0]
 8028aee:	1c6e      	adds	r6, r5, #1
 8028af0:	3a30      	subs	r2, #48	@ 0x30
 8028af2:	2a09      	cmp	r2, #9
 8028af4:	d950      	bls.n	8028b98 <_svfiprintf_r+0x180>
 8028af6:	2900      	cmp	r1, #0
 8028af8:	d111      	bne.n	8028b1e <_svfiprintf_r+0x106>
 8028afa:	e017      	b.n	8028b2c <_svfiprintf_r+0x114>
 8028afc:	3501      	adds	r5, #1
 8028afe:	e7af      	b.n	8028a60 <_svfiprintf_r+0x48>
 8028b00:	9b05      	ldr	r3, [sp, #20]
 8028b02:	6822      	ldr	r2, [r4, #0]
 8028b04:	1ac0      	subs	r0, r0, r3
 8028b06:	2301      	movs	r3, #1
 8028b08:	4083      	lsls	r3, r0
 8028b0a:	4313      	orrs	r3, r2
 8028b0c:	002e      	movs	r6, r5
 8028b0e:	6023      	str	r3, [r4, #0]
 8028b10:	e7cc      	b.n	8028aac <_svfiprintf_r+0x94>
 8028b12:	9b07      	ldr	r3, [sp, #28]
 8028b14:	1d19      	adds	r1, r3, #4
 8028b16:	681b      	ldr	r3, [r3, #0]
 8028b18:	9107      	str	r1, [sp, #28]
 8028b1a:	2b00      	cmp	r3, #0
 8028b1c:	db01      	blt.n	8028b22 <_svfiprintf_r+0x10a>
 8028b1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028b20:	e004      	b.n	8028b2c <_svfiprintf_r+0x114>
 8028b22:	425b      	negs	r3, r3
 8028b24:	60e3      	str	r3, [r4, #12]
 8028b26:	2302      	movs	r3, #2
 8028b28:	4313      	orrs	r3, r2
 8028b2a:	6023      	str	r3, [r4, #0]
 8028b2c:	782b      	ldrb	r3, [r5, #0]
 8028b2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8028b30:	d10c      	bne.n	8028b4c <_svfiprintf_r+0x134>
 8028b32:	786b      	ldrb	r3, [r5, #1]
 8028b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8028b36:	d134      	bne.n	8028ba2 <_svfiprintf_r+0x18a>
 8028b38:	9b07      	ldr	r3, [sp, #28]
 8028b3a:	3502      	adds	r5, #2
 8028b3c:	1d1a      	adds	r2, r3, #4
 8028b3e:	681b      	ldr	r3, [r3, #0]
 8028b40:	9207      	str	r2, [sp, #28]
 8028b42:	2b00      	cmp	r3, #0
 8028b44:	da01      	bge.n	8028b4a <_svfiprintf_r+0x132>
 8028b46:	2301      	movs	r3, #1
 8028b48:	425b      	negs	r3, r3
 8028b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8028b4c:	4e2d      	ldr	r6, [pc, #180]	@ (8028c04 <_svfiprintf_r+0x1ec>)
 8028b4e:	2203      	movs	r2, #3
 8028b50:	0030      	movs	r0, r6
 8028b52:	7829      	ldrb	r1, [r5, #0]
 8028b54:	f7fd ff2d 	bl	80269b2 <memchr>
 8028b58:	2800      	cmp	r0, #0
 8028b5a:	d006      	beq.n	8028b6a <_svfiprintf_r+0x152>
 8028b5c:	2340      	movs	r3, #64	@ 0x40
 8028b5e:	1b80      	subs	r0, r0, r6
 8028b60:	4083      	lsls	r3, r0
 8028b62:	6822      	ldr	r2, [r4, #0]
 8028b64:	3501      	adds	r5, #1
 8028b66:	4313      	orrs	r3, r2
 8028b68:	6023      	str	r3, [r4, #0]
 8028b6a:	7829      	ldrb	r1, [r5, #0]
 8028b6c:	2206      	movs	r2, #6
 8028b6e:	4826      	ldr	r0, [pc, #152]	@ (8028c08 <_svfiprintf_r+0x1f0>)
 8028b70:	1c6e      	adds	r6, r5, #1
 8028b72:	7621      	strb	r1, [r4, #24]
 8028b74:	f7fd ff1d 	bl	80269b2 <memchr>
 8028b78:	2800      	cmp	r0, #0
 8028b7a:	d038      	beq.n	8028bee <_svfiprintf_r+0x1d6>
 8028b7c:	4b23      	ldr	r3, [pc, #140]	@ (8028c0c <_svfiprintf_r+0x1f4>)
 8028b7e:	2b00      	cmp	r3, #0
 8028b80:	d122      	bne.n	8028bc8 <_svfiprintf_r+0x1b0>
 8028b82:	2207      	movs	r2, #7
 8028b84:	9b07      	ldr	r3, [sp, #28]
 8028b86:	3307      	adds	r3, #7
 8028b88:	4393      	bics	r3, r2
 8028b8a:	3308      	adds	r3, #8
 8028b8c:	9307      	str	r3, [sp, #28]
 8028b8e:	6963      	ldr	r3, [r4, #20]
 8028b90:	9a04      	ldr	r2, [sp, #16]
 8028b92:	189b      	adds	r3, r3, r2
 8028b94:	6163      	str	r3, [r4, #20]
 8028b96:	e762      	b.n	8028a5e <_svfiprintf_r+0x46>
 8028b98:	4343      	muls	r3, r0
 8028b9a:	0035      	movs	r5, r6
 8028b9c:	2101      	movs	r1, #1
 8028b9e:	189b      	adds	r3, r3, r2
 8028ba0:	e7a4      	b.n	8028aec <_svfiprintf_r+0xd4>
 8028ba2:	2300      	movs	r3, #0
 8028ba4:	200a      	movs	r0, #10
 8028ba6:	0019      	movs	r1, r3
 8028ba8:	3501      	adds	r5, #1
 8028baa:	6063      	str	r3, [r4, #4]
 8028bac:	782a      	ldrb	r2, [r5, #0]
 8028bae:	1c6e      	adds	r6, r5, #1
 8028bb0:	3a30      	subs	r2, #48	@ 0x30
 8028bb2:	2a09      	cmp	r2, #9
 8028bb4:	d903      	bls.n	8028bbe <_svfiprintf_r+0x1a6>
 8028bb6:	2b00      	cmp	r3, #0
 8028bb8:	d0c8      	beq.n	8028b4c <_svfiprintf_r+0x134>
 8028bba:	9109      	str	r1, [sp, #36]	@ 0x24
 8028bbc:	e7c6      	b.n	8028b4c <_svfiprintf_r+0x134>
 8028bbe:	4341      	muls	r1, r0
 8028bc0:	0035      	movs	r5, r6
 8028bc2:	2301      	movs	r3, #1
 8028bc4:	1889      	adds	r1, r1, r2
 8028bc6:	e7f1      	b.n	8028bac <_svfiprintf_r+0x194>
 8028bc8:	aa07      	add	r2, sp, #28
 8028bca:	9200      	str	r2, [sp, #0]
 8028bcc:	0021      	movs	r1, r4
 8028bce:	003a      	movs	r2, r7
 8028bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8028c10 <_svfiprintf_r+0x1f8>)
 8028bd2:	9803      	ldr	r0, [sp, #12]
 8028bd4:	f7fc ffe6 	bl	8025ba4 <_printf_float>
 8028bd8:	9004      	str	r0, [sp, #16]
 8028bda:	9b04      	ldr	r3, [sp, #16]
 8028bdc:	3301      	adds	r3, #1
 8028bde:	d1d6      	bne.n	8028b8e <_svfiprintf_r+0x176>
 8028be0:	89bb      	ldrh	r3, [r7, #12]
 8028be2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028be4:	065b      	lsls	r3, r3, #25
 8028be6:	d500      	bpl.n	8028bea <_svfiprintf_r+0x1d2>
 8028be8:	e72c      	b.n	8028a44 <_svfiprintf_r+0x2c>
 8028bea:	b021      	add	sp, #132	@ 0x84
 8028bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028bee:	aa07      	add	r2, sp, #28
 8028bf0:	9200      	str	r2, [sp, #0]
 8028bf2:	0021      	movs	r1, r4
 8028bf4:	003a      	movs	r2, r7
 8028bf6:	4b06      	ldr	r3, [pc, #24]	@ (8028c10 <_svfiprintf_r+0x1f8>)
 8028bf8:	9803      	ldr	r0, [sp, #12]
 8028bfa:	f7fd fa81 	bl	8026100 <_printf_i>
 8028bfe:	e7eb      	b.n	8028bd8 <_svfiprintf_r+0x1c0>
 8028c00:	0802f674 	.word	0x0802f674
 8028c04:	0802f67a 	.word	0x0802f67a
 8028c08:	0802f67e 	.word	0x0802f67e
 8028c0c:	08025ba5 	.word	0x08025ba5
 8028c10:	08028959 	.word	0x08028959

08028c14 <__sfputc_r>:
 8028c14:	6893      	ldr	r3, [r2, #8]
 8028c16:	b510      	push	{r4, lr}
 8028c18:	3b01      	subs	r3, #1
 8028c1a:	6093      	str	r3, [r2, #8]
 8028c1c:	2b00      	cmp	r3, #0
 8028c1e:	da04      	bge.n	8028c2a <__sfputc_r+0x16>
 8028c20:	6994      	ldr	r4, [r2, #24]
 8028c22:	42a3      	cmp	r3, r4
 8028c24:	db07      	blt.n	8028c36 <__sfputc_r+0x22>
 8028c26:	290a      	cmp	r1, #10
 8028c28:	d005      	beq.n	8028c36 <__sfputc_r+0x22>
 8028c2a:	6813      	ldr	r3, [r2, #0]
 8028c2c:	1c58      	adds	r0, r3, #1
 8028c2e:	6010      	str	r0, [r2, #0]
 8028c30:	7019      	strb	r1, [r3, #0]
 8028c32:	0008      	movs	r0, r1
 8028c34:	bd10      	pop	{r4, pc}
 8028c36:	f7fd fd4b 	bl	80266d0 <__swbuf_r>
 8028c3a:	0001      	movs	r1, r0
 8028c3c:	e7f9      	b.n	8028c32 <__sfputc_r+0x1e>

08028c3e <__sfputs_r>:
 8028c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028c40:	0006      	movs	r6, r0
 8028c42:	000f      	movs	r7, r1
 8028c44:	0014      	movs	r4, r2
 8028c46:	18d5      	adds	r5, r2, r3
 8028c48:	42ac      	cmp	r4, r5
 8028c4a:	d101      	bne.n	8028c50 <__sfputs_r+0x12>
 8028c4c:	2000      	movs	r0, #0
 8028c4e:	e007      	b.n	8028c60 <__sfputs_r+0x22>
 8028c50:	7821      	ldrb	r1, [r4, #0]
 8028c52:	003a      	movs	r2, r7
 8028c54:	0030      	movs	r0, r6
 8028c56:	f7ff ffdd 	bl	8028c14 <__sfputc_r>
 8028c5a:	3401      	adds	r4, #1
 8028c5c:	1c43      	adds	r3, r0, #1
 8028c5e:	d1f3      	bne.n	8028c48 <__sfputs_r+0xa>
 8028c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028c64 <_vfiprintf_r>:
 8028c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028c66:	b0a1      	sub	sp, #132	@ 0x84
 8028c68:	000f      	movs	r7, r1
 8028c6a:	0015      	movs	r5, r2
 8028c6c:	001e      	movs	r6, r3
 8028c6e:	9003      	str	r0, [sp, #12]
 8028c70:	2800      	cmp	r0, #0
 8028c72:	d004      	beq.n	8028c7e <_vfiprintf_r+0x1a>
 8028c74:	6a03      	ldr	r3, [r0, #32]
 8028c76:	2b00      	cmp	r3, #0
 8028c78:	d101      	bne.n	8028c7e <_vfiprintf_r+0x1a>
 8028c7a:	f7fd fbdd 	bl	8026438 <__sinit>
 8028c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028c80:	07db      	lsls	r3, r3, #31
 8028c82:	d405      	bmi.n	8028c90 <_vfiprintf_r+0x2c>
 8028c84:	89bb      	ldrh	r3, [r7, #12]
 8028c86:	059b      	lsls	r3, r3, #22
 8028c88:	d402      	bmi.n	8028c90 <_vfiprintf_r+0x2c>
 8028c8a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028c8c:	f7fd fe8f 	bl	80269ae <__retarget_lock_acquire_recursive>
 8028c90:	89bb      	ldrh	r3, [r7, #12]
 8028c92:	071b      	lsls	r3, r3, #28
 8028c94:	d502      	bpl.n	8028c9c <_vfiprintf_r+0x38>
 8028c96:	693b      	ldr	r3, [r7, #16]
 8028c98:	2b00      	cmp	r3, #0
 8028c9a:	d113      	bne.n	8028cc4 <_vfiprintf_r+0x60>
 8028c9c:	0039      	movs	r1, r7
 8028c9e:	9803      	ldr	r0, [sp, #12]
 8028ca0:	f7fd fd58 	bl	8026754 <__swsetup_r>
 8028ca4:	2800      	cmp	r0, #0
 8028ca6:	d00d      	beq.n	8028cc4 <_vfiprintf_r+0x60>
 8028ca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028caa:	07db      	lsls	r3, r3, #31
 8028cac:	d503      	bpl.n	8028cb6 <_vfiprintf_r+0x52>
 8028cae:	2001      	movs	r0, #1
 8028cb0:	4240      	negs	r0, r0
 8028cb2:	b021      	add	sp, #132	@ 0x84
 8028cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028cb6:	89bb      	ldrh	r3, [r7, #12]
 8028cb8:	059b      	lsls	r3, r3, #22
 8028cba:	d4f8      	bmi.n	8028cae <_vfiprintf_r+0x4a>
 8028cbc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028cbe:	f7fd fe77 	bl	80269b0 <__retarget_lock_release_recursive>
 8028cc2:	e7f4      	b.n	8028cae <_vfiprintf_r+0x4a>
 8028cc4:	2300      	movs	r3, #0
 8028cc6:	ac08      	add	r4, sp, #32
 8028cc8:	6163      	str	r3, [r4, #20]
 8028cca:	3320      	adds	r3, #32
 8028ccc:	7663      	strb	r3, [r4, #25]
 8028cce:	3310      	adds	r3, #16
 8028cd0:	76a3      	strb	r3, [r4, #26]
 8028cd2:	9607      	str	r6, [sp, #28]
 8028cd4:	002e      	movs	r6, r5
 8028cd6:	7833      	ldrb	r3, [r6, #0]
 8028cd8:	2b00      	cmp	r3, #0
 8028cda:	d001      	beq.n	8028ce0 <_vfiprintf_r+0x7c>
 8028cdc:	2b25      	cmp	r3, #37	@ 0x25
 8028cde:	d148      	bne.n	8028d72 <_vfiprintf_r+0x10e>
 8028ce0:	1b73      	subs	r3, r6, r5
 8028ce2:	9305      	str	r3, [sp, #20]
 8028ce4:	42ae      	cmp	r6, r5
 8028ce6:	d00b      	beq.n	8028d00 <_vfiprintf_r+0x9c>
 8028ce8:	002a      	movs	r2, r5
 8028cea:	0039      	movs	r1, r7
 8028cec:	9803      	ldr	r0, [sp, #12]
 8028cee:	f7ff ffa6 	bl	8028c3e <__sfputs_r>
 8028cf2:	3001      	adds	r0, #1
 8028cf4:	d100      	bne.n	8028cf8 <_vfiprintf_r+0x94>
 8028cf6:	e0ae      	b.n	8028e56 <_vfiprintf_r+0x1f2>
 8028cf8:	6963      	ldr	r3, [r4, #20]
 8028cfa:	9a05      	ldr	r2, [sp, #20]
 8028cfc:	189b      	adds	r3, r3, r2
 8028cfe:	6163      	str	r3, [r4, #20]
 8028d00:	7833      	ldrb	r3, [r6, #0]
 8028d02:	2b00      	cmp	r3, #0
 8028d04:	d100      	bne.n	8028d08 <_vfiprintf_r+0xa4>
 8028d06:	e0a6      	b.n	8028e56 <_vfiprintf_r+0x1f2>
 8028d08:	2201      	movs	r2, #1
 8028d0a:	2300      	movs	r3, #0
 8028d0c:	4252      	negs	r2, r2
 8028d0e:	6062      	str	r2, [r4, #4]
 8028d10:	a904      	add	r1, sp, #16
 8028d12:	3254      	adds	r2, #84	@ 0x54
 8028d14:	1852      	adds	r2, r2, r1
 8028d16:	1c75      	adds	r5, r6, #1
 8028d18:	6023      	str	r3, [r4, #0]
 8028d1a:	60e3      	str	r3, [r4, #12]
 8028d1c:	60a3      	str	r3, [r4, #8]
 8028d1e:	7013      	strb	r3, [r2, #0]
 8028d20:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028d22:	4b59      	ldr	r3, [pc, #356]	@ (8028e88 <_vfiprintf_r+0x224>)
 8028d24:	2205      	movs	r2, #5
 8028d26:	0018      	movs	r0, r3
 8028d28:	7829      	ldrb	r1, [r5, #0]
 8028d2a:	9305      	str	r3, [sp, #20]
 8028d2c:	f7fd fe41 	bl	80269b2 <memchr>
 8028d30:	1c6e      	adds	r6, r5, #1
 8028d32:	2800      	cmp	r0, #0
 8028d34:	d11f      	bne.n	8028d76 <_vfiprintf_r+0x112>
 8028d36:	6822      	ldr	r2, [r4, #0]
 8028d38:	06d3      	lsls	r3, r2, #27
 8028d3a:	d504      	bpl.n	8028d46 <_vfiprintf_r+0xe2>
 8028d3c:	2353      	movs	r3, #83	@ 0x53
 8028d3e:	a904      	add	r1, sp, #16
 8028d40:	185b      	adds	r3, r3, r1
 8028d42:	2120      	movs	r1, #32
 8028d44:	7019      	strb	r1, [r3, #0]
 8028d46:	0713      	lsls	r3, r2, #28
 8028d48:	d504      	bpl.n	8028d54 <_vfiprintf_r+0xf0>
 8028d4a:	2353      	movs	r3, #83	@ 0x53
 8028d4c:	a904      	add	r1, sp, #16
 8028d4e:	185b      	adds	r3, r3, r1
 8028d50:	212b      	movs	r1, #43	@ 0x2b
 8028d52:	7019      	strb	r1, [r3, #0]
 8028d54:	782b      	ldrb	r3, [r5, #0]
 8028d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8028d58:	d016      	beq.n	8028d88 <_vfiprintf_r+0x124>
 8028d5a:	002e      	movs	r6, r5
 8028d5c:	2100      	movs	r1, #0
 8028d5e:	200a      	movs	r0, #10
 8028d60:	68e3      	ldr	r3, [r4, #12]
 8028d62:	7832      	ldrb	r2, [r6, #0]
 8028d64:	1c75      	adds	r5, r6, #1
 8028d66:	3a30      	subs	r2, #48	@ 0x30
 8028d68:	2a09      	cmp	r2, #9
 8028d6a:	d950      	bls.n	8028e0e <_vfiprintf_r+0x1aa>
 8028d6c:	2900      	cmp	r1, #0
 8028d6e:	d111      	bne.n	8028d94 <_vfiprintf_r+0x130>
 8028d70:	e017      	b.n	8028da2 <_vfiprintf_r+0x13e>
 8028d72:	3601      	adds	r6, #1
 8028d74:	e7af      	b.n	8028cd6 <_vfiprintf_r+0x72>
 8028d76:	9b05      	ldr	r3, [sp, #20]
 8028d78:	6822      	ldr	r2, [r4, #0]
 8028d7a:	1ac0      	subs	r0, r0, r3
 8028d7c:	2301      	movs	r3, #1
 8028d7e:	4083      	lsls	r3, r0
 8028d80:	4313      	orrs	r3, r2
 8028d82:	0035      	movs	r5, r6
 8028d84:	6023      	str	r3, [r4, #0]
 8028d86:	e7cc      	b.n	8028d22 <_vfiprintf_r+0xbe>
 8028d88:	9b07      	ldr	r3, [sp, #28]
 8028d8a:	1d19      	adds	r1, r3, #4
 8028d8c:	681b      	ldr	r3, [r3, #0]
 8028d8e:	9107      	str	r1, [sp, #28]
 8028d90:	2b00      	cmp	r3, #0
 8028d92:	db01      	blt.n	8028d98 <_vfiprintf_r+0x134>
 8028d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028d96:	e004      	b.n	8028da2 <_vfiprintf_r+0x13e>
 8028d98:	425b      	negs	r3, r3
 8028d9a:	60e3      	str	r3, [r4, #12]
 8028d9c:	2302      	movs	r3, #2
 8028d9e:	4313      	orrs	r3, r2
 8028da0:	6023      	str	r3, [r4, #0]
 8028da2:	7833      	ldrb	r3, [r6, #0]
 8028da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8028da6:	d10c      	bne.n	8028dc2 <_vfiprintf_r+0x15e>
 8028da8:	7873      	ldrb	r3, [r6, #1]
 8028daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8028dac:	d134      	bne.n	8028e18 <_vfiprintf_r+0x1b4>
 8028dae:	9b07      	ldr	r3, [sp, #28]
 8028db0:	3602      	adds	r6, #2
 8028db2:	1d1a      	adds	r2, r3, #4
 8028db4:	681b      	ldr	r3, [r3, #0]
 8028db6:	9207      	str	r2, [sp, #28]
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	da01      	bge.n	8028dc0 <_vfiprintf_r+0x15c>
 8028dbc:	2301      	movs	r3, #1
 8028dbe:	425b      	negs	r3, r3
 8028dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8028dc2:	4d32      	ldr	r5, [pc, #200]	@ (8028e8c <_vfiprintf_r+0x228>)
 8028dc4:	2203      	movs	r2, #3
 8028dc6:	0028      	movs	r0, r5
 8028dc8:	7831      	ldrb	r1, [r6, #0]
 8028dca:	f7fd fdf2 	bl	80269b2 <memchr>
 8028dce:	2800      	cmp	r0, #0
 8028dd0:	d006      	beq.n	8028de0 <_vfiprintf_r+0x17c>
 8028dd2:	2340      	movs	r3, #64	@ 0x40
 8028dd4:	1b40      	subs	r0, r0, r5
 8028dd6:	4083      	lsls	r3, r0
 8028dd8:	6822      	ldr	r2, [r4, #0]
 8028dda:	3601      	adds	r6, #1
 8028ddc:	4313      	orrs	r3, r2
 8028dde:	6023      	str	r3, [r4, #0]
 8028de0:	7831      	ldrb	r1, [r6, #0]
 8028de2:	2206      	movs	r2, #6
 8028de4:	482a      	ldr	r0, [pc, #168]	@ (8028e90 <_vfiprintf_r+0x22c>)
 8028de6:	1c75      	adds	r5, r6, #1
 8028de8:	7621      	strb	r1, [r4, #24]
 8028dea:	f7fd fde2 	bl	80269b2 <memchr>
 8028dee:	2800      	cmp	r0, #0
 8028df0:	d040      	beq.n	8028e74 <_vfiprintf_r+0x210>
 8028df2:	4b28      	ldr	r3, [pc, #160]	@ (8028e94 <_vfiprintf_r+0x230>)
 8028df4:	2b00      	cmp	r3, #0
 8028df6:	d122      	bne.n	8028e3e <_vfiprintf_r+0x1da>
 8028df8:	2207      	movs	r2, #7
 8028dfa:	9b07      	ldr	r3, [sp, #28]
 8028dfc:	3307      	adds	r3, #7
 8028dfe:	4393      	bics	r3, r2
 8028e00:	3308      	adds	r3, #8
 8028e02:	9307      	str	r3, [sp, #28]
 8028e04:	6963      	ldr	r3, [r4, #20]
 8028e06:	9a04      	ldr	r2, [sp, #16]
 8028e08:	189b      	adds	r3, r3, r2
 8028e0a:	6163      	str	r3, [r4, #20]
 8028e0c:	e762      	b.n	8028cd4 <_vfiprintf_r+0x70>
 8028e0e:	4343      	muls	r3, r0
 8028e10:	002e      	movs	r6, r5
 8028e12:	2101      	movs	r1, #1
 8028e14:	189b      	adds	r3, r3, r2
 8028e16:	e7a4      	b.n	8028d62 <_vfiprintf_r+0xfe>
 8028e18:	2300      	movs	r3, #0
 8028e1a:	200a      	movs	r0, #10
 8028e1c:	0019      	movs	r1, r3
 8028e1e:	3601      	adds	r6, #1
 8028e20:	6063      	str	r3, [r4, #4]
 8028e22:	7832      	ldrb	r2, [r6, #0]
 8028e24:	1c75      	adds	r5, r6, #1
 8028e26:	3a30      	subs	r2, #48	@ 0x30
 8028e28:	2a09      	cmp	r2, #9
 8028e2a:	d903      	bls.n	8028e34 <_vfiprintf_r+0x1d0>
 8028e2c:	2b00      	cmp	r3, #0
 8028e2e:	d0c8      	beq.n	8028dc2 <_vfiprintf_r+0x15e>
 8028e30:	9109      	str	r1, [sp, #36]	@ 0x24
 8028e32:	e7c6      	b.n	8028dc2 <_vfiprintf_r+0x15e>
 8028e34:	4341      	muls	r1, r0
 8028e36:	002e      	movs	r6, r5
 8028e38:	2301      	movs	r3, #1
 8028e3a:	1889      	adds	r1, r1, r2
 8028e3c:	e7f1      	b.n	8028e22 <_vfiprintf_r+0x1be>
 8028e3e:	aa07      	add	r2, sp, #28
 8028e40:	9200      	str	r2, [sp, #0]
 8028e42:	0021      	movs	r1, r4
 8028e44:	003a      	movs	r2, r7
 8028e46:	4b14      	ldr	r3, [pc, #80]	@ (8028e98 <_vfiprintf_r+0x234>)
 8028e48:	9803      	ldr	r0, [sp, #12]
 8028e4a:	f7fc feab 	bl	8025ba4 <_printf_float>
 8028e4e:	9004      	str	r0, [sp, #16]
 8028e50:	9b04      	ldr	r3, [sp, #16]
 8028e52:	3301      	adds	r3, #1
 8028e54:	d1d6      	bne.n	8028e04 <_vfiprintf_r+0x1a0>
 8028e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028e58:	07db      	lsls	r3, r3, #31
 8028e5a:	d405      	bmi.n	8028e68 <_vfiprintf_r+0x204>
 8028e5c:	89bb      	ldrh	r3, [r7, #12]
 8028e5e:	059b      	lsls	r3, r3, #22
 8028e60:	d402      	bmi.n	8028e68 <_vfiprintf_r+0x204>
 8028e62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028e64:	f7fd fda4 	bl	80269b0 <__retarget_lock_release_recursive>
 8028e68:	89bb      	ldrh	r3, [r7, #12]
 8028e6a:	065b      	lsls	r3, r3, #25
 8028e6c:	d500      	bpl.n	8028e70 <_vfiprintf_r+0x20c>
 8028e6e:	e71e      	b.n	8028cae <_vfiprintf_r+0x4a>
 8028e70:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028e72:	e71e      	b.n	8028cb2 <_vfiprintf_r+0x4e>
 8028e74:	aa07      	add	r2, sp, #28
 8028e76:	9200      	str	r2, [sp, #0]
 8028e78:	0021      	movs	r1, r4
 8028e7a:	003a      	movs	r2, r7
 8028e7c:	4b06      	ldr	r3, [pc, #24]	@ (8028e98 <_vfiprintf_r+0x234>)
 8028e7e:	9803      	ldr	r0, [sp, #12]
 8028e80:	f7fd f93e 	bl	8026100 <_printf_i>
 8028e84:	e7e3      	b.n	8028e4e <_vfiprintf_r+0x1ea>
 8028e86:	46c0      	nop			@ (mov r8, r8)
 8028e88:	0802f674 	.word	0x0802f674
 8028e8c:	0802f67a 	.word	0x0802f67a
 8028e90:	0802f67e 	.word	0x0802f67e
 8028e94:	08025ba5 	.word	0x08025ba5
 8028e98:	08028c3f 	.word	0x08028c3f

08028e9c <__sflush_r>:
 8028e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028e9e:	220c      	movs	r2, #12
 8028ea0:	5e8b      	ldrsh	r3, [r1, r2]
 8028ea2:	0005      	movs	r5, r0
 8028ea4:	000c      	movs	r4, r1
 8028ea6:	071a      	lsls	r2, r3, #28
 8028ea8:	d456      	bmi.n	8028f58 <__sflush_r+0xbc>
 8028eaa:	684a      	ldr	r2, [r1, #4]
 8028eac:	2a00      	cmp	r2, #0
 8028eae:	dc02      	bgt.n	8028eb6 <__sflush_r+0x1a>
 8028eb0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028eb2:	2a00      	cmp	r2, #0
 8028eb4:	dd4e      	ble.n	8028f54 <__sflush_r+0xb8>
 8028eb6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028eb8:	2f00      	cmp	r7, #0
 8028eba:	d04b      	beq.n	8028f54 <__sflush_r+0xb8>
 8028ebc:	2200      	movs	r2, #0
 8028ebe:	2080      	movs	r0, #128	@ 0x80
 8028ec0:	682e      	ldr	r6, [r5, #0]
 8028ec2:	602a      	str	r2, [r5, #0]
 8028ec4:	001a      	movs	r2, r3
 8028ec6:	0140      	lsls	r0, r0, #5
 8028ec8:	6a21      	ldr	r1, [r4, #32]
 8028eca:	4002      	ands	r2, r0
 8028ecc:	4203      	tst	r3, r0
 8028ece:	d033      	beq.n	8028f38 <__sflush_r+0x9c>
 8028ed0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028ed2:	89a3      	ldrh	r3, [r4, #12]
 8028ed4:	075b      	lsls	r3, r3, #29
 8028ed6:	d506      	bpl.n	8028ee6 <__sflush_r+0x4a>
 8028ed8:	6863      	ldr	r3, [r4, #4]
 8028eda:	1ad2      	subs	r2, r2, r3
 8028edc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028ede:	2b00      	cmp	r3, #0
 8028ee0:	d001      	beq.n	8028ee6 <__sflush_r+0x4a>
 8028ee2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028ee4:	1ad2      	subs	r2, r2, r3
 8028ee6:	2300      	movs	r3, #0
 8028ee8:	0028      	movs	r0, r5
 8028eea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028eec:	6a21      	ldr	r1, [r4, #32]
 8028eee:	47b8      	blx	r7
 8028ef0:	89a2      	ldrh	r2, [r4, #12]
 8028ef2:	1c43      	adds	r3, r0, #1
 8028ef4:	d106      	bne.n	8028f04 <__sflush_r+0x68>
 8028ef6:	6829      	ldr	r1, [r5, #0]
 8028ef8:	291d      	cmp	r1, #29
 8028efa:	d846      	bhi.n	8028f8a <__sflush_r+0xee>
 8028efc:	4b29      	ldr	r3, [pc, #164]	@ (8028fa4 <__sflush_r+0x108>)
 8028efe:	40cb      	lsrs	r3, r1
 8028f00:	07db      	lsls	r3, r3, #31
 8028f02:	d542      	bpl.n	8028f8a <__sflush_r+0xee>
 8028f04:	2300      	movs	r3, #0
 8028f06:	6063      	str	r3, [r4, #4]
 8028f08:	6923      	ldr	r3, [r4, #16]
 8028f0a:	6023      	str	r3, [r4, #0]
 8028f0c:	04d2      	lsls	r2, r2, #19
 8028f0e:	d505      	bpl.n	8028f1c <__sflush_r+0x80>
 8028f10:	1c43      	adds	r3, r0, #1
 8028f12:	d102      	bne.n	8028f1a <__sflush_r+0x7e>
 8028f14:	682b      	ldr	r3, [r5, #0]
 8028f16:	2b00      	cmp	r3, #0
 8028f18:	d100      	bne.n	8028f1c <__sflush_r+0x80>
 8028f1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8028f1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028f1e:	602e      	str	r6, [r5, #0]
 8028f20:	2900      	cmp	r1, #0
 8028f22:	d017      	beq.n	8028f54 <__sflush_r+0xb8>
 8028f24:	0023      	movs	r3, r4
 8028f26:	3344      	adds	r3, #68	@ 0x44
 8028f28:	4299      	cmp	r1, r3
 8028f2a:	d002      	beq.n	8028f32 <__sflush_r+0x96>
 8028f2c:	0028      	movs	r0, r5
 8028f2e:	f7fe fbd1 	bl	80276d4 <_free_r>
 8028f32:	2300      	movs	r3, #0
 8028f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8028f36:	e00d      	b.n	8028f54 <__sflush_r+0xb8>
 8028f38:	2301      	movs	r3, #1
 8028f3a:	0028      	movs	r0, r5
 8028f3c:	47b8      	blx	r7
 8028f3e:	0002      	movs	r2, r0
 8028f40:	1c43      	adds	r3, r0, #1
 8028f42:	d1c6      	bne.n	8028ed2 <__sflush_r+0x36>
 8028f44:	682b      	ldr	r3, [r5, #0]
 8028f46:	2b00      	cmp	r3, #0
 8028f48:	d0c3      	beq.n	8028ed2 <__sflush_r+0x36>
 8028f4a:	2b1d      	cmp	r3, #29
 8028f4c:	d001      	beq.n	8028f52 <__sflush_r+0xb6>
 8028f4e:	2b16      	cmp	r3, #22
 8028f50:	d11a      	bne.n	8028f88 <__sflush_r+0xec>
 8028f52:	602e      	str	r6, [r5, #0]
 8028f54:	2000      	movs	r0, #0
 8028f56:	e01e      	b.n	8028f96 <__sflush_r+0xfa>
 8028f58:	690e      	ldr	r6, [r1, #16]
 8028f5a:	2e00      	cmp	r6, #0
 8028f5c:	d0fa      	beq.n	8028f54 <__sflush_r+0xb8>
 8028f5e:	680f      	ldr	r7, [r1, #0]
 8028f60:	600e      	str	r6, [r1, #0]
 8028f62:	1bba      	subs	r2, r7, r6
 8028f64:	9201      	str	r2, [sp, #4]
 8028f66:	2200      	movs	r2, #0
 8028f68:	079b      	lsls	r3, r3, #30
 8028f6a:	d100      	bne.n	8028f6e <__sflush_r+0xd2>
 8028f6c:	694a      	ldr	r2, [r1, #20]
 8028f6e:	60a2      	str	r2, [r4, #8]
 8028f70:	9b01      	ldr	r3, [sp, #4]
 8028f72:	2b00      	cmp	r3, #0
 8028f74:	ddee      	ble.n	8028f54 <__sflush_r+0xb8>
 8028f76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028f78:	0032      	movs	r2, r6
 8028f7a:	001f      	movs	r7, r3
 8028f7c:	0028      	movs	r0, r5
 8028f7e:	9b01      	ldr	r3, [sp, #4]
 8028f80:	6a21      	ldr	r1, [r4, #32]
 8028f82:	47b8      	blx	r7
 8028f84:	2800      	cmp	r0, #0
 8028f86:	dc07      	bgt.n	8028f98 <__sflush_r+0xfc>
 8028f88:	89a2      	ldrh	r2, [r4, #12]
 8028f8a:	2340      	movs	r3, #64	@ 0x40
 8028f8c:	2001      	movs	r0, #1
 8028f8e:	4313      	orrs	r3, r2
 8028f90:	b21b      	sxth	r3, r3
 8028f92:	81a3      	strh	r3, [r4, #12]
 8028f94:	4240      	negs	r0, r0
 8028f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028f98:	9b01      	ldr	r3, [sp, #4]
 8028f9a:	1836      	adds	r6, r6, r0
 8028f9c:	1a1b      	subs	r3, r3, r0
 8028f9e:	9301      	str	r3, [sp, #4]
 8028fa0:	e7e6      	b.n	8028f70 <__sflush_r+0xd4>
 8028fa2:	46c0      	nop			@ (mov r8, r8)
 8028fa4:	20400001 	.word	0x20400001

08028fa8 <_fflush_r>:
 8028fa8:	690b      	ldr	r3, [r1, #16]
 8028faa:	b570      	push	{r4, r5, r6, lr}
 8028fac:	0005      	movs	r5, r0
 8028fae:	000c      	movs	r4, r1
 8028fb0:	2b00      	cmp	r3, #0
 8028fb2:	d102      	bne.n	8028fba <_fflush_r+0x12>
 8028fb4:	2500      	movs	r5, #0
 8028fb6:	0028      	movs	r0, r5
 8028fb8:	bd70      	pop	{r4, r5, r6, pc}
 8028fba:	2800      	cmp	r0, #0
 8028fbc:	d004      	beq.n	8028fc8 <_fflush_r+0x20>
 8028fbe:	6a03      	ldr	r3, [r0, #32]
 8028fc0:	2b00      	cmp	r3, #0
 8028fc2:	d101      	bne.n	8028fc8 <_fflush_r+0x20>
 8028fc4:	f7fd fa38 	bl	8026438 <__sinit>
 8028fc8:	220c      	movs	r2, #12
 8028fca:	5ea3      	ldrsh	r3, [r4, r2]
 8028fcc:	2b00      	cmp	r3, #0
 8028fce:	d0f1      	beq.n	8028fb4 <_fflush_r+0xc>
 8028fd0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028fd2:	07d2      	lsls	r2, r2, #31
 8028fd4:	d404      	bmi.n	8028fe0 <_fflush_r+0x38>
 8028fd6:	059b      	lsls	r3, r3, #22
 8028fd8:	d402      	bmi.n	8028fe0 <_fflush_r+0x38>
 8028fda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028fdc:	f7fd fce7 	bl	80269ae <__retarget_lock_acquire_recursive>
 8028fe0:	0028      	movs	r0, r5
 8028fe2:	0021      	movs	r1, r4
 8028fe4:	f7ff ff5a 	bl	8028e9c <__sflush_r>
 8028fe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028fea:	0005      	movs	r5, r0
 8028fec:	07db      	lsls	r3, r3, #31
 8028fee:	d4e2      	bmi.n	8028fb6 <_fflush_r+0xe>
 8028ff0:	89a3      	ldrh	r3, [r4, #12]
 8028ff2:	059b      	lsls	r3, r3, #22
 8028ff4:	d4df      	bmi.n	8028fb6 <_fflush_r+0xe>
 8028ff6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028ff8:	f7fd fcda 	bl	80269b0 <__retarget_lock_release_recursive>
 8028ffc:	e7db      	b.n	8028fb6 <_fflush_r+0xe>
	...

08029000 <__swhatbuf_r>:
 8029000:	b570      	push	{r4, r5, r6, lr}
 8029002:	000e      	movs	r6, r1
 8029004:	001d      	movs	r5, r3
 8029006:	230e      	movs	r3, #14
 8029008:	5ec9      	ldrsh	r1, [r1, r3]
 802900a:	0014      	movs	r4, r2
 802900c:	b096      	sub	sp, #88	@ 0x58
 802900e:	2900      	cmp	r1, #0
 8029010:	da0c      	bge.n	802902c <__swhatbuf_r+0x2c>
 8029012:	89b2      	ldrh	r2, [r6, #12]
 8029014:	2380      	movs	r3, #128	@ 0x80
 8029016:	0011      	movs	r1, r2
 8029018:	4019      	ands	r1, r3
 802901a:	421a      	tst	r2, r3
 802901c:	d114      	bne.n	8029048 <__swhatbuf_r+0x48>
 802901e:	2380      	movs	r3, #128	@ 0x80
 8029020:	00db      	lsls	r3, r3, #3
 8029022:	2000      	movs	r0, #0
 8029024:	6029      	str	r1, [r5, #0]
 8029026:	6023      	str	r3, [r4, #0]
 8029028:	b016      	add	sp, #88	@ 0x58
 802902a:	bd70      	pop	{r4, r5, r6, pc}
 802902c:	466a      	mov	r2, sp
 802902e:	f000 f865 	bl	80290fc <_fstat_r>
 8029032:	2800      	cmp	r0, #0
 8029034:	dbed      	blt.n	8029012 <__swhatbuf_r+0x12>
 8029036:	23f0      	movs	r3, #240	@ 0xf0
 8029038:	9901      	ldr	r1, [sp, #4]
 802903a:	021b      	lsls	r3, r3, #8
 802903c:	4019      	ands	r1, r3
 802903e:	4b04      	ldr	r3, [pc, #16]	@ (8029050 <__swhatbuf_r+0x50>)
 8029040:	18c9      	adds	r1, r1, r3
 8029042:	424b      	negs	r3, r1
 8029044:	4159      	adcs	r1, r3
 8029046:	e7ea      	b.n	802901e <__swhatbuf_r+0x1e>
 8029048:	2100      	movs	r1, #0
 802904a:	2340      	movs	r3, #64	@ 0x40
 802904c:	e7e9      	b.n	8029022 <__swhatbuf_r+0x22>
 802904e:	46c0      	nop			@ (mov r8, r8)
 8029050:	ffffe000 	.word	0xffffe000

08029054 <__smakebuf_r>:
 8029054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029056:	2602      	movs	r6, #2
 8029058:	898b      	ldrh	r3, [r1, #12]
 802905a:	0005      	movs	r5, r0
 802905c:	000c      	movs	r4, r1
 802905e:	b085      	sub	sp, #20
 8029060:	4233      	tst	r3, r6
 8029062:	d007      	beq.n	8029074 <__smakebuf_r+0x20>
 8029064:	0023      	movs	r3, r4
 8029066:	3347      	adds	r3, #71	@ 0x47
 8029068:	6023      	str	r3, [r4, #0]
 802906a:	6123      	str	r3, [r4, #16]
 802906c:	2301      	movs	r3, #1
 802906e:	6163      	str	r3, [r4, #20]
 8029070:	b005      	add	sp, #20
 8029072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029074:	ab03      	add	r3, sp, #12
 8029076:	aa02      	add	r2, sp, #8
 8029078:	f7ff ffc2 	bl	8029000 <__swhatbuf_r>
 802907c:	9f02      	ldr	r7, [sp, #8]
 802907e:	9001      	str	r0, [sp, #4]
 8029080:	0039      	movs	r1, r7
 8029082:	0028      	movs	r0, r5
 8029084:	f7fe fef6 	bl	8027e74 <_malloc_r>
 8029088:	2800      	cmp	r0, #0
 802908a:	d108      	bne.n	802909e <__smakebuf_r+0x4a>
 802908c:	220c      	movs	r2, #12
 802908e:	5ea3      	ldrsh	r3, [r4, r2]
 8029090:	059a      	lsls	r2, r3, #22
 8029092:	d4ed      	bmi.n	8029070 <__smakebuf_r+0x1c>
 8029094:	2203      	movs	r2, #3
 8029096:	4393      	bics	r3, r2
 8029098:	431e      	orrs	r6, r3
 802909a:	81a6      	strh	r6, [r4, #12]
 802909c:	e7e2      	b.n	8029064 <__smakebuf_r+0x10>
 802909e:	2380      	movs	r3, #128	@ 0x80
 80290a0:	89a2      	ldrh	r2, [r4, #12]
 80290a2:	6020      	str	r0, [r4, #0]
 80290a4:	4313      	orrs	r3, r2
 80290a6:	81a3      	strh	r3, [r4, #12]
 80290a8:	9b03      	ldr	r3, [sp, #12]
 80290aa:	6120      	str	r0, [r4, #16]
 80290ac:	6167      	str	r7, [r4, #20]
 80290ae:	2b00      	cmp	r3, #0
 80290b0:	d00c      	beq.n	80290cc <__smakebuf_r+0x78>
 80290b2:	0028      	movs	r0, r5
 80290b4:	230e      	movs	r3, #14
 80290b6:	5ee1      	ldrsh	r1, [r4, r3]
 80290b8:	f000 f832 	bl	8029120 <_isatty_r>
 80290bc:	2800      	cmp	r0, #0
 80290be:	d005      	beq.n	80290cc <__smakebuf_r+0x78>
 80290c0:	2303      	movs	r3, #3
 80290c2:	89a2      	ldrh	r2, [r4, #12]
 80290c4:	439a      	bics	r2, r3
 80290c6:	3b02      	subs	r3, #2
 80290c8:	4313      	orrs	r3, r2
 80290ca:	81a3      	strh	r3, [r4, #12]
 80290cc:	89a3      	ldrh	r3, [r4, #12]
 80290ce:	9a01      	ldr	r2, [sp, #4]
 80290d0:	4313      	orrs	r3, r2
 80290d2:	81a3      	strh	r3, [r4, #12]
 80290d4:	e7cc      	b.n	8029070 <__smakebuf_r+0x1c>

080290d6 <memmove>:
 80290d6:	b510      	push	{r4, lr}
 80290d8:	4288      	cmp	r0, r1
 80290da:	d902      	bls.n	80290e2 <memmove+0xc>
 80290dc:	188b      	adds	r3, r1, r2
 80290de:	4298      	cmp	r0, r3
 80290e0:	d308      	bcc.n	80290f4 <memmove+0x1e>
 80290e2:	2300      	movs	r3, #0
 80290e4:	429a      	cmp	r2, r3
 80290e6:	d007      	beq.n	80290f8 <memmove+0x22>
 80290e8:	5ccc      	ldrb	r4, [r1, r3]
 80290ea:	54c4      	strb	r4, [r0, r3]
 80290ec:	3301      	adds	r3, #1
 80290ee:	e7f9      	b.n	80290e4 <memmove+0xe>
 80290f0:	5c8b      	ldrb	r3, [r1, r2]
 80290f2:	5483      	strb	r3, [r0, r2]
 80290f4:	3a01      	subs	r2, #1
 80290f6:	d2fb      	bcs.n	80290f0 <memmove+0x1a>
 80290f8:	bd10      	pop	{r4, pc}
	...

080290fc <_fstat_r>:
 80290fc:	2300      	movs	r3, #0
 80290fe:	b570      	push	{r4, r5, r6, lr}
 8029100:	4d06      	ldr	r5, [pc, #24]	@ (802911c <_fstat_r+0x20>)
 8029102:	0004      	movs	r4, r0
 8029104:	0008      	movs	r0, r1
 8029106:	0011      	movs	r1, r2
 8029108:	602b      	str	r3, [r5, #0]
 802910a:	f7ea fc17 	bl	801393c <_fstat>
 802910e:	1c43      	adds	r3, r0, #1
 8029110:	d103      	bne.n	802911a <_fstat_r+0x1e>
 8029112:	682b      	ldr	r3, [r5, #0]
 8029114:	2b00      	cmp	r3, #0
 8029116:	d000      	beq.n	802911a <_fstat_r+0x1e>
 8029118:	6023      	str	r3, [r4, #0]
 802911a:	bd70      	pop	{r4, r5, r6, pc}
 802911c:	20003920 	.word	0x20003920

08029120 <_isatty_r>:
 8029120:	2300      	movs	r3, #0
 8029122:	b570      	push	{r4, r5, r6, lr}
 8029124:	4d06      	ldr	r5, [pc, #24]	@ (8029140 <_isatty_r+0x20>)
 8029126:	0004      	movs	r4, r0
 8029128:	0008      	movs	r0, r1
 802912a:	602b      	str	r3, [r5, #0]
 802912c:	f7ea fc14 	bl	8013958 <_isatty>
 8029130:	1c43      	adds	r3, r0, #1
 8029132:	d103      	bne.n	802913c <_isatty_r+0x1c>
 8029134:	682b      	ldr	r3, [r5, #0]
 8029136:	2b00      	cmp	r3, #0
 8029138:	d000      	beq.n	802913c <_isatty_r+0x1c>
 802913a:	6023      	str	r3, [r4, #0]
 802913c:	bd70      	pop	{r4, r5, r6, pc}
 802913e:	46c0      	nop			@ (mov r8, r8)
 8029140:	20003920 	.word	0x20003920

08029144 <_sbrk_r>:
 8029144:	2300      	movs	r3, #0
 8029146:	b570      	push	{r4, r5, r6, lr}
 8029148:	4d06      	ldr	r5, [pc, #24]	@ (8029164 <_sbrk_r+0x20>)
 802914a:	0004      	movs	r4, r0
 802914c:	0008      	movs	r0, r1
 802914e:	602b      	str	r3, [r5, #0]
 8029150:	f7ea fc16 	bl	8013980 <_sbrk>
 8029154:	1c43      	adds	r3, r0, #1
 8029156:	d103      	bne.n	8029160 <_sbrk_r+0x1c>
 8029158:	682b      	ldr	r3, [r5, #0]
 802915a:	2b00      	cmp	r3, #0
 802915c:	d000      	beq.n	8029160 <_sbrk_r+0x1c>
 802915e:	6023      	str	r3, [r4, #0]
 8029160:	bd70      	pop	{r4, r5, r6, pc}
 8029162:	46c0      	nop			@ (mov r8, r8)
 8029164:	20003920 	.word	0x20003920

08029168 <__assert_func>:
 8029168:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802916a:	0014      	movs	r4, r2
 802916c:	001a      	movs	r2, r3
 802916e:	4b09      	ldr	r3, [pc, #36]	@ (8029194 <__assert_func+0x2c>)
 8029170:	0005      	movs	r5, r0
 8029172:	681b      	ldr	r3, [r3, #0]
 8029174:	000e      	movs	r6, r1
 8029176:	68d8      	ldr	r0, [r3, #12]
 8029178:	4b07      	ldr	r3, [pc, #28]	@ (8029198 <__assert_func+0x30>)
 802917a:	2c00      	cmp	r4, #0
 802917c:	d101      	bne.n	8029182 <__assert_func+0x1a>
 802917e:	4b07      	ldr	r3, [pc, #28]	@ (802919c <__assert_func+0x34>)
 8029180:	001c      	movs	r4, r3
 8029182:	4907      	ldr	r1, [pc, #28]	@ (80291a0 <__assert_func+0x38>)
 8029184:	9301      	str	r3, [sp, #4]
 8029186:	9402      	str	r4, [sp, #8]
 8029188:	002b      	movs	r3, r5
 802918a:	9600      	str	r6, [sp, #0]
 802918c:	f000 f868 	bl	8029260 <fiprintf>
 8029190:	f000 f876 	bl	8029280 <abort>
 8029194:	200003ec 	.word	0x200003ec
 8029198:	0802f685 	.word	0x0802f685
 802919c:	0802f6c0 	.word	0x0802f6c0
 80291a0:	0802f692 	.word	0x0802f692

080291a4 <_calloc_r>:
 80291a4:	b570      	push	{r4, r5, r6, lr}
 80291a6:	0c0b      	lsrs	r3, r1, #16
 80291a8:	0c15      	lsrs	r5, r2, #16
 80291aa:	2b00      	cmp	r3, #0
 80291ac:	d11e      	bne.n	80291ec <_calloc_r+0x48>
 80291ae:	2d00      	cmp	r5, #0
 80291b0:	d10c      	bne.n	80291cc <_calloc_r+0x28>
 80291b2:	b289      	uxth	r1, r1
 80291b4:	b294      	uxth	r4, r2
 80291b6:	434c      	muls	r4, r1
 80291b8:	0021      	movs	r1, r4
 80291ba:	f7fe fe5b 	bl	8027e74 <_malloc_r>
 80291be:	1e05      	subs	r5, r0, #0
 80291c0:	d01b      	beq.n	80291fa <_calloc_r+0x56>
 80291c2:	0022      	movs	r2, r4
 80291c4:	2100      	movs	r1, #0
 80291c6:	f7fd fb23 	bl	8026810 <memset>
 80291ca:	e016      	b.n	80291fa <_calloc_r+0x56>
 80291cc:	1c2b      	adds	r3, r5, #0
 80291ce:	1c0c      	adds	r4, r1, #0
 80291d0:	b289      	uxth	r1, r1
 80291d2:	b292      	uxth	r2, r2
 80291d4:	434a      	muls	r2, r1
 80291d6:	b29b      	uxth	r3, r3
 80291d8:	b2a1      	uxth	r1, r4
 80291da:	4359      	muls	r1, r3
 80291dc:	0c14      	lsrs	r4, r2, #16
 80291de:	190c      	adds	r4, r1, r4
 80291e0:	0c23      	lsrs	r3, r4, #16
 80291e2:	d107      	bne.n	80291f4 <_calloc_r+0x50>
 80291e4:	0424      	lsls	r4, r4, #16
 80291e6:	b292      	uxth	r2, r2
 80291e8:	4314      	orrs	r4, r2
 80291ea:	e7e5      	b.n	80291b8 <_calloc_r+0x14>
 80291ec:	2d00      	cmp	r5, #0
 80291ee:	d101      	bne.n	80291f4 <_calloc_r+0x50>
 80291f0:	1c14      	adds	r4, r2, #0
 80291f2:	e7ed      	b.n	80291d0 <_calloc_r+0x2c>
 80291f4:	230c      	movs	r3, #12
 80291f6:	2500      	movs	r5, #0
 80291f8:	6003      	str	r3, [r0, #0]
 80291fa:	0028      	movs	r0, r5
 80291fc:	bd70      	pop	{r4, r5, r6, pc}

080291fe <_realloc_r>:
 80291fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029200:	0006      	movs	r6, r0
 8029202:	000c      	movs	r4, r1
 8029204:	0015      	movs	r5, r2
 8029206:	2900      	cmp	r1, #0
 8029208:	d105      	bne.n	8029216 <_realloc_r+0x18>
 802920a:	0011      	movs	r1, r2
 802920c:	f7fe fe32 	bl	8027e74 <_malloc_r>
 8029210:	0004      	movs	r4, r0
 8029212:	0020      	movs	r0, r4
 8029214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8029216:	2a00      	cmp	r2, #0
 8029218:	d103      	bne.n	8029222 <_realloc_r+0x24>
 802921a:	f7fe fa5b 	bl	80276d4 <_free_r>
 802921e:	002c      	movs	r4, r5
 8029220:	e7f7      	b.n	8029212 <_realloc_r+0x14>
 8029222:	f000 f834 	bl	802928e <_malloc_usable_size_r>
 8029226:	0007      	movs	r7, r0
 8029228:	4285      	cmp	r5, r0
 802922a:	d802      	bhi.n	8029232 <_realloc_r+0x34>
 802922c:	0843      	lsrs	r3, r0, #1
 802922e:	42ab      	cmp	r3, r5
 8029230:	d3ef      	bcc.n	8029212 <_realloc_r+0x14>
 8029232:	0029      	movs	r1, r5
 8029234:	0030      	movs	r0, r6
 8029236:	f7fe fe1d 	bl	8027e74 <_malloc_r>
 802923a:	9001      	str	r0, [sp, #4]
 802923c:	2800      	cmp	r0, #0
 802923e:	d101      	bne.n	8029244 <_realloc_r+0x46>
 8029240:	9c01      	ldr	r4, [sp, #4]
 8029242:	e7e6      	b.n	8029212 <_realloc_r+0x14>
 8029244:	002a      	movs	r2, r5
 8029246:	42bd      	cmp	r5, r7
 8029248:	d900      	bls.n	802924c <_realloc_r+0x4e>
 802924a:	003a      	movs	r2, r7
 802924c:	0021      	movs	r1, r4
 802924e:	9801      	ldr	r0, [sp, #4]
 8029250:	f7fd fbba 	bl	80269c8 <memcpy>
 8029254:	0021      	movs	r1, r4
 8029256:	0030      	movs	r0, r6
 8029258:	f7fe fa3c 	bl	80276d4 <_free_r>
 802925c:	e7f0      	b.n	8029240 <_realloc_r+0x42>
	...

08029260 <fiprintf>:
 8029260:	b40e      	push	{r1, r2, r3}
 8029262:	b517      	push	{r0, r1, r2, r4, lr}
 8029264:	4c05      	ldr	r4, [pc, #20]	@ (802927c <fiprintf+0x1c>)
 8029266:	ab05      	add	r3, sp, #20
 8029268:	cb04      	ldmia	r3!, {r2}
 802926a:	0001      	movs	r1, r0
 802926c:	6820      	ldr	r0, [r4, #0]
 802926e:	9301      	str	r3, [sp, #4]
 8029270:	f7ff fcf8 	bl	8028c64 <_vfiprintf_r>
 8029274:	bc1e      	pop	{r1, r2, r3, r4}
 8029276:	bc08      	pop	{r3}
 8029278:	b003      	add	sp, #12
 802927a:	4718      	bx	r3
 802927c:	200003ec 	.word	0x200003ec

08029280 <abort>:
 8029280:	2006      	movs	r0, #6
 8029282:	b510      	push	{r4, lr}
 8029284:	f000 f834 	bl	80292f0 <raise>
 8029288:	2001      	movs	r0, #1
 802928a:	f7ea fb23 	bl	80138d4 <_exit>

0802928e <_malloc_usable_size_r>:
 802928e:	1f0b      	subs	r3, r1, #4
 8029290:	681b      	ldr	r3, [r3, #0]
 8029292:	1f18      	subs	r0, r3, #4
 8029294:	2b00      	cmp	r3, #0
 8029296:	da01      	bge.n	802929c <_malloc_usable_size_r+0xe>
 8029298:	580b      	ldr	r3, [r1, r0]
 802929a:	18c0      	adds	r0, r0, r3
 802929c:	4770      	bx	lr

0802929e <_raise_r>:
 802929e:	b570      	push	{r4, r5, r6, lr}
 80292a0:	0004      	movs	r4, r0
 80292a2:	000d      	movs	r5, r1
 80292a4:	291f      	cmp	r1, #31
 80292a6:	d904      	bls.n	80292b2 <_raise_r+0x14>
 80292a8:	2316      	movs	r3, #22
 80292aa:	6003      	str	r3, [r0, #0]
 80292ac:	2001      	movs	r0, #1
 80292ae:	4240      	negs	r0, r0
 80292b0:	bd70      	pop	{r4, r5, r6, pc}
 80292b2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80292b4:	2b00      	cmp	r3, #0
 80292b6:	d004      	beq.n	80292c2 <_raise_r+0x24>
 80292b8:	008a      	lsls	r2, r1, #2
 80292ba:	189b      	adds	r3, r3, r2
 80292bc:	681a      	ldr	r2, [r3, #0]
 80292be:	2a00      	cmp	r2, #0
 80292c0:	d108      	bne.n	80292d4 <_raise_r+0x36>
 80292c2:	0020      	movs	r0, r4
 80292c4:	f000 f830 	bl	8029328 <_getpid_r>
 80292c8:	002a      	movs	r2, r5
 80292ca:	0001      	movs	r1, r0
 80292cc:	0020      	movs	r0, r4
 80292ce:	f000 f819 	bl	8029304 <_kill_r>
 80292d2:	e7ed      	b.n	80292b0 <_raise_r+0x12>
 80292d4:	2a01      	cmp	r2, #1
 80292d6:	d009      	beq.n	80292ec <_raise_r+0x4e>
 80292d8:	1c51      	adds	r1, r2, #1
 80292da:	d103      	bne.n	80292e4 <_raise_r+0x46>
 80292dc:	2316      	movs	r3, #22
 80292de:	6003      	str	r3, [r0, #0]
 80292e0:	2001      	movs	r0, #1
 80292e2:	e7e5      	b.n	80292b0 <_raise_r+0x12>
 80292e4:	2100      	movs	r1, #0
 80292e6:	0028      	movs	r0, r5
 80292e8:	6019      	str	r1, [r3, #0]
 80292ea:	4790      	blx	r2
 80292ec:	2000      	movs	r0, #0
 80292ee:	e7df      	b.n	80292b0 <_raise_r+0x12>

080292f0 <raise>:
 80292f0:	b510      	push	{r4, lr}
 80292f2:	4b03      	ldr	r3, [pc, #12]	@ (8029300 <raise+0x10>)
 80292f4:	0001      	movs	r1, r0
 80292f6:	6818      	ldr	r0, [r3, #0]
 80292f8:	f7ff ffd1 	bl	802929e <_raise_r>
 80292fc:	bd10      	pop	{r4, pc}
 80292fe:	46c0      	nop			@ (mov r8, r8)
 8029300:	200003ec 	.word	0x200003ec

08029304 <_kill_r>:
 8029304:	2300      	movs	r3, #0
 8029306:	b570      	push	{r4, r5, r6, lr}
 8029308:	4d06      	ldr	r5, [pc, #24]	@ (8029324 <_kill_r+0x20>)
 802930a:	0004      	movs	r4, r0
 802930c:	0008      	movs	r0, r1
 802930e:	0011      	movs	r1, r2
 8029310:	602b      	str	r3, [r5, #0]
 8029312:	f7ea facf 	bl	80138b4 <_kill>
 8029316:	1c43      	adds	r3, r0, #1
 8029318:	d103      	bne.n	8029322 <_kill_r+0x1e>
 802931a:	682b      	ldr	r3, [r5, #0]
 802931c:	2b00      	cmp	r3, #0
 802931e:	d000      	beq.n	8029322 <_kill_r+0x1e>
 8029320:	6023      	str	r3, [r4, #0]
 8029322:	bd70      	pop	{r4, r5, r6, pc}
 8029324:	20003920 	.word	0x20003920

08029328 <_getpid_r>:
 8029328:	b510      	push	{r4, lr}
 802932a:	f7ea fabd 	bl	80138a8 <_getpid>
 802932e:	bd10      	pop	{r4, pc}

08029330 <log>:
 8029330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029332:	0004      	movs	r4, r0
 8029334:	000d      	movs	r5, r1
 8029336:	f000 f98d 	bl	8029654 <__ieee754_log>
 802933a:	0022      	movs	r2, r4
 802933c:	0006      	movs	r6, r0
 802933e:	000f      	movs	r7, r1
 8029340:	002b      	movs	r3, r5
 8029342:	0020      	movs	r0, r4
 8029344:	0029      	movs	r1, r5
 8029346:	f7da f9f5 	bl	8003734 <__aeabi_dcmpun>
 802934a:	2800      	cmp	r0, #0
 802934c:	d115      	bne.n	802937a <log+0x4a>
 802934e:	2200      	movs	r2, #0
 8029350:	2300      	movs	r3, #0
 8029352:	0020      	movs	r0, r4
 8029354:	0029      	movs	r1, r5
 8029356:	f7d7 f8c5 	bl	80004e4 <__aeabi_dcmpgt>
 802935a:	2800      	cmp	r0, #0
 802935c:	d10d      	bne.n	802937a <log+0x4a>
 802935e:	2200      	movs	r2, #0
 8029360:	2300      	movs	r3, #0
 8029362:	0020      	movs	r0, r4
 8029364:	0029      	movs	r1, r5
 8029366:	f7d7 f8a3 	bl	80004b0 <__aeabi_dcmpeq>
 802936a:	2800      	cmp	r0, #0
 802936c:	d008      	beq.n	8029380 <log+0x50>
 802936e:	f7fd faf3 	bl	8026958 <__errno>
 8029372:	2322      	movs	r3, #34	@ 0x22
 8029374:	2600      	movs	r6, #0
 8029376:	4f07      	ldr	r7, [pc, #28]	@ (8029394 <log+0x64>)
 8029378:	6003      	str	r3, [r0, #0]
 802937a:	0030      	movs	r0, r6
 802937c:	0039      	movs	r1, r7
 802937e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029380:	f7fd faea 	bl	8026958 <__errno>
 8029384:	2321      	movs	r3, #33	@ 0x21
 8029386:	6003      	str	r3, [r0, #0]
 8029388:	4803      	ldr	r0, [pc, #12]	@ (8029398 <log+0x68>)
 802938a:	f7fd fb27 	bl	80269dc <nan>
 802938e:	0006      	movs	r6, r0
 8029390:	000f      	movs	r7, r1
 8029392:	e7f2      	b.n	802937a <log+0x4a>
 8029394:	fff00000 	.word	0xfff00000
 8029398:	0802f6c0 	.word	0x0802f6c0

0802939c <pow>:
 802939c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802939e:	0014      	movs	r4, r2
 80293a0:	001d      	movs	r5, r3
 80293a2:	9000      	str	r0, [sp, #0]
 80293a4:	9101      	str	r1, [sp, #4]
 80293a6:	f000 fb07 	bl	80299b8 <__ieee754_pow>
 80293aa:	0022      	movs	r2, r4
 80293ac:	0006      	movs	r6, r0
 80293ae:	000f      	movs	r7, r1
 80293b0:	002b      	movs	r3, r5
 80293b2:	0020      	movs	r0, r4
 80293b4:	0029      	movs	r1, r5
 80293b6:	f7da f9bd 	bl	8003734 <__aeabi_dcmpun>
 80293ba:	2800      	cmp	r0, #0
 80293bc:	d13f      	bne.n	802943e <pow+0xa2>
 80293be:	9800      	ldr	r0, [sp, #0]
 80293c0:	9901      	ldr	r1, [sp, #4]
 80293c2:	2200      	movs	r2, #0
 80293c4:	2300      	movs	r3, #0
 80293c6:	f7d7 f873 	bl	80004b0 <__aeabi_dcmpeq>
 80293ca:	2800      	cmp	r0, #0
 80293cc:	d019      	beq.n	8029402 <pow+0x66>
 80293ce:	2200      	movs	r2, #0
 80293d0:	2300      	movs	r3, #0
 80293d2:	0020      	movs	r0, r4
 80293d4:	0029      	movs	r1, r5
 80293d6:	f7d7 f86b 	bl	80004b0 <__aeabi_dcmpeq>
 80293da:	2800      	cmp	r0, #0
 80293dc:	d146      	bne.n	802946c <pow+0xd0>
 80293de:	0020      	movs	r0, r4
 80293e0:	0029      	movs	r1, r5
 80293e2:	f000 f88d 	bl	8029500 <finite>
 80293e6:	2800      	cmp	r0, #0
 80293e8:	d029      	beq.n	802943e <pow+0xa2>
 80293ea:	2200      	movs	r2, #0
 80293ec:	2300      	movs	r3, #0
 80293ee:	0020      	movs	r0, r4
 80293f0:	0029      	movs	r1, r5
 80293f2:	f7d7 f863 	bl	80004bc <__aeabi_dcmplt>
 80293f6:	2800      	cmp	r0, #0
 80293f8:	d021      	beq.n	802943e <pow+0xa2>
 80293fa:	f7fd faad 	bl	8026958 <__errno>
 80293fe:	2322      	movs	r3, #34	@ 0x22
 8029400:	e01c      	b.n	802943c <pow+0xa0>
 8029402:	0030      	movs	r0, r6
 8029404:	0039      	movs	r1, r7
 8029406:	f000 f87b 	bl	8029500 <finite>
 802940a:	2800      	cmp	r0, #0
 802940c:	d11b      	bne.n	8029446 <pow+0xaa>
 802940e:	9800      	ldr	r0, [sp, #0]
 8029410:	9901      	ldr	r1, [sp, #4]
 8029412:	f000 f875 	bl	8029500 <finite>
 8029416:	2800      	cmp	r0, #0
 8029418:	d015      	beq.n	8029446 <pow+0xaa>
 802941a:	0020      	movs	r0, r4
 802941c:	0029      	movs	r1, r5
 802941e:	f000 f86f 	bl	8029500 <finite>
 8029422:	2800      	cmp	r0, #0
 8029424:	d00f      	beq.n	8029446 <pow+0xaa>
 8029426:	0032      	movs	r2, r6
 8029428:	003b      	movs	r3, r7
 802942a:	0030      	movs	r0, r6
 802942c:	0039      	movs	r1, r7
 802942e:	f7da f981 	bl	8003734 <__aeabi_dcmpun>
 8029432:	2800      	cmp	r0, #0
 8029434:	d0e1      	beq.n	80293fa <pow+0x5e>
 8029436:	f7fd fa8f 	bl	8026958 <__errno>
 802943a:	2321      	movs	r3, #33	@ 0x21
 802943c:	6003      	str	r3, [r0, #0]
 802943e:	0030      	movs	r0, r6
 8029440:	0039      	movs	r1, r7
 8029442:	b003      	add	sp, #12
 8029444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029446:	2200      	movs	r2, #0
 8029448:	2300      	movs	r3, #0
 802944a:	0030      	movs	r0, r6
 802944c:	0039      	movs	r1, r7
 802944e:	f7d7 f82f 	bl	80004b0 <__aeabi_dcmpeq>
 8029452:	2800      	cmp	r0, #0
 8029454:	d0f3      	beq.n	802943e <pow+0xa2>
 8029456:	9800      	ldr	r0, [sp, #0]
 8029458:	9901      	ldr	r1, [sp, #4]
 802945a:	f000 f851 	bl	8029500 <finite>
 802945e:	2800      	cmp	r0, #0
 8029460:	d0ed      	beq.n	802943e <pow+0xa2>
 8029462:	0020      	movs	r0, r4
 8029464:	0029      	movs	r1, r5
 8029466:	f000 f84b 	bl	8029500 <finite>
 802946a:	e7c4      	b.n	80293f6 <pow+0x5a>
 802946c:	2600      	movs	r6, #0
 802946e:	4f01      	ldr	r7, [pc, #4]	@ (8029474 <pow+0xd8>)
 8029470:	e7e5      	b.n	802943e <pow+0xa2>
 8029472:	46c0      	nop			@ (mov r8, r8)
 8029474:	3ff00000 	.word	0x3ff00000

08029478 <expf>:
 8029478:	b570      	push	{r4, r5, r6, lr}
 802947a:	1c04      	adds	r4, r0, #0
 802947c:	f000 ffb8 	bl	802a3f0 <__ieee754_expf>
 8029480:	1c05      	adds	r5, r0, #0
 8029482:	1c20      	adds	r0, r4, #0
 8029484:	f000 f844 	bl	8029510 <finitef>
 8029488:	2800      	cmp	r0, #0
 802948a:	d00b      	beq.n	80294a4 <expf+0x2c>
 802948c:	490c      	ldr	r1, [pc, #48]	@ (80294c0 <expf+0x48>)
 802948e:	1c20      	adds	r0, r4, #0
 8029490:	f7d7 f862 	bl	8000558 <__aeabi_fcmpgt>
 8029494:	2800      	cmp	r0, #0
 8029496:	d007      	beq.n	80294a8 <expf+0x30>
 8029498:	f7fd fa5e 	bl	8026958 <__errno>
 802949c:	25ff      	movs	r5, #255	@ 0xff
 802949e:	2322      	movs	r3, #34	@ 0x22
 80294a0:	05ed      	lsls	r5, r5, #23
 80294a2:	6003      	str	r3, [r0, #0]
 80294a4:	1c28      	adds	r0, r5, #0
 80294a6:	bd70      	pop	{r4, r5, r6, pc}
 80294a8:	4906      	ldr	r1, [pc, #24]	@ (80294c4 <expf+0x4c>)
 80294aa:	1c20      	adds	r0, r4, #0
 80294ac:	f7d7 f840 	bl	8000530 <__aeabi_fcmplt>
 80294b0:	2800      	cmp	r0, #0
 80294b2:	d0f7      	beq.n	80294a4 <expf+0x2c>
 80294b4:	f7fd fa50 	bl	8026958 <__errno>
 80294b8:	2322      	movs	r3, #34	@ 0x22
 80294ba:	2500      	movs	r5, #0
 80294bc:	6003      	str	r3, [r0, #0]
 80294be:	e7f1      	b.n	80294a4 <expf+0x2c>
 80294c0:	42b17217 	.word	0x42b17217
 80294c4:	c2cff1b5 	.word	0xc2cff1b5

080294c8 <sqrtf>:
 80294c8:	b570      	push	{r4, r5, r6, lr}
 80294ca:	1c05      	adds	r5, r0, #0
 80294cc:	f000 f82a 	bl	8029524 <__ieee754_sqrtf>
 80294d0:	1c29      	adds	r1, r5, #0
 80294d2:	1c04      	adds	r4, r0, #0
 80294d4:	1c28      	adds	r0, r5, #0
 80294d6:	f7d8 f971 	bl	80017bc <__aeabi_fcmpun>
 80294da:	2800      	cmp	r0, #0
 80294dc:	d10e      	bne.n	80294fc <sqrtf+0x34>
 80294de:	2100      	movs	r1, #0
 80294e0:	1c28      	adds	r0, r5, #0
 80294e2:	f7d7 f825 	bl	8000530 <__aeabi_fcmplt>
 80294e6:	2800      	cmp	r0, #0
 80294e8:	d008      	beq.n	80294fc <sqrtf+0x34>
 80294ea:	f7fd fa35 	bl	8026958 <__errno>
 80294ee:	2321      	movs	r3, #33	@ 0x21
 80294f0:	2100      	movs	r1, #0
 80294f2:	6003      	str	r3, [r0, #0]
 80294f4:	1c08      	adds	r0, r1, #0
 80294f6:	f7d7 fbd5 	bl	8000ca4 <__aeabi_fdiv>
 80294fa:	1c04      	adds	r4, r0, #0
 80294fc:	1c20      	adds	r0, r4, #0
 80294fe:	bd70      	pop	{r4, r5, r6, pc}

08029500 <finite>:
 8029500:	4b02      	ldr	r3, [pc, #8]	@ (802950c <finite+0xc>)
 8029502:	0048      	lsls	r0, r1, #1
 8029504:	0840      	lsrs	r0, r0, #1
 8029506:	18c0      	adds	r0, r0, r3
 8029508:	0fc0      	lsrs	r0, r0, #31
 802950a:	4770      	bx	lr
 802950c:	80100000 	.word	0x80100000

08029510 <finitef>:
 8029510:	22ff      	movs	r2, #255	@ 0xff
 8029512:	0043      	lsls	r3, r0, #1
 8029514:	085b      	lsrs	r3, r3, #1
 8029516:	2001      	movs	r0, #1
 8029518:	05d2      	lsls	r2, r2, #23
 802951a:	4293      	cmp	r3, r2
 802951c:	db00      	blt.n	8029520 <finitef+0x10>
 802951e:	2000      	movs	r0, #0
 8029520:	4770      	bx	lr
	...

08029524 <__ieee754_sqrtf>:
 8029524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029526:	21ff      	movs	r1, #255	@ 0xff
 8029528:	0042      	lsls	r2, r0, #1
 802952a:	0003      	movs	r3, r0
 802952c:	1c04      	adds	r4, r0, #0
 802952e:	0852      	lsrs	r2, r2, #1
 8029530:	05c9      	lsls	r1, r1, #23
 8029532:	428a      	cmp	r2, r1
 8029534:	d309      	bcc.n	802954a <__ieee754_sqrtf+0x26>
 8029536:	1c01      	adds	r1, r0, #0
 8029538:	f7d7 fd82 	bl	8001040 <__aeabi_fmul>
 802953c:	1c01      	adds	r1, r0, #0
 802953e:	1c20      	adds	r0, r4, #0
 8029540:	f7d7 f9be 	bl	80008c0 <__aeabi_fadd>
 8029544:	1c04      	adds	r4, r0, #0
 8029546:	1c20      	adds	r0, r4, #0
 8029548:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802954a:	2a00      	cmp	r2, #0
 802954c:	d0fb      	beq.n	8029546 <__ieee754_sqrtf+0x22>
 802954e:	2800      	cmp	r0, #0
 8029550:	da06      	bge.n	8029560 <__ieee754_sqrtf+0x3c>
 8029552:	1c01      	adds	r1, r0, #0
 8029554:	f7d7 fece 	bl	80012f4 <__aeabi_fsub>
 8029558:	1c01      	adds	r1, r0, #0
 802955a:	f7d7 fba3 	bl	8000ca4 <__aeabi_fdiv>
 802955e:	e7f1      	b.n	8029544 <__ieee754_sqrtf+0x20>
 8029560:	0002      	movs	r2, r0
 8029562:	400a      	ands	r2, r1
 8029564:	4208      	tst	r0, r1
 8029566:	d040      	beq.n	80295ea <__ieee754_sqrtf+0xc6>
 8029568:	15c1      	asrs	r1, r0, #23
 802956a:	2280      	movs	r2, #128	@ 0x80
 802956c:	000f      	movs	r7, r1
 802956e:	025b      	lsls	r3, r3, #9
 8029570:	0a5b      	lsrs	r3, r3, #9
 8029572:	0412      	lsls	r2, r2, #16
 8029574:	3f7f      	subs	r7, #127	@ 0x7f
 8029576:	4313      	orrs	r3, r2
 8029578:	07c9      	lsls	r1, r1, #31
 802957a:	d400      	bmi.n	802957e <__ieee754_sqrtf+0x5a>
 802957c:	005b      	lsls	r3, r3, #1
 802957e:	2400      	movs	r4, #0
 8029580:	2180      	movs	r1, #128	@ 0x80
 8029582:	2019      	movs	r0, #25
 8029584:	0026      	movs	r6, r4
 8029586:	107f      	asrs	r7, r7, #1
 8029588:	005b      	lsls	r3, r3, #1
 802958a:	0449      	lsls	r1, r1, #17
 802958c:	1875      	adds	r5, r6, r1
 802958e:	001a      	movs	r2, r3
 8029590:	429d      	cmp	r5, r3
 8029592:	dc02      	bgt.n	802959a <__ieee754_sqrtf+0x76>
 8029594:	186e      	adds	r6, r5, r1
 8029596:	1b5a      	subs	r2, r3, r5
 8029598:	1864      	adds	r4, r4, r1
 802959a:	3801      	subs	r0, #1
 802959c:	0053      	lsls	r3, r2, #1
 802959e:	0849      	lsrs	r1, r1, #1
 80295a0:	2800      	cmp	r0, #0
 80295a2:	d1f3      	bne.n	802958c <__ieee754_sqrtf+0x68>
 80295a4:	2a00      	cmp	r2, #0
 80295a6:	d019      	beq.n	80295dc <__ieee754_sqrtf+0xb8>
 80295a8:	4d16      	ldr	r5, [pc, #88]	@ (8029604 <__ieee754_sqrtf+0xe0>)
 80295aa:	4e17      	ldr	r6, [pc, #92]	@ (8029608 <__ieee754_sqrtf+0xe4>)
 80295ac:	6828      	ldr	r0, [r5, #0]
 80295ae:	6831      	ldr	r1, [r6, #0]
 80295b0:	682b      	ldr	r3, [r5, #0]
 80295b2:	9301      	str	r3, [sp, #4]
 80295b4:	f7d7 fe9e 	bl	80012f4 <__aeabi_fsub>
 80295b8:	1c01      	adds	r1, r0, #0
 80295ba:	9801      	ldr	r0, [sp, #4]
 80295bc:	f7d6 ffc2 	bl	8000544 <__aeabi_fcmple>
 80295c0:	2800      	cmp	r0, #0
 80295c2:	d00b      	beq.n	80295dc <__ieee754_sqrtf+0xb8>
 80295c4:	6828      	ldr	r0, [r5, #0]
 80295c6:	6831      	ldr	r1, [r6, #0]
 80295c8:	f7d7 f97a 	bl	80008c0 <__aeabi_fadd>
 80295cc:	682d      	ldr	r5, [r5, #0]
 80295ce:	1c01      	adds	r1, r0, #0
 80295d0:	1c28      	adds	r0, r5, #0
 80295d2:	f7d6 ffad 	bl	8000530 <__aeabi_fcmplt>
 80295d6:	2800      	cmp	r0, #0
 80295d8:	d010      	beq.n	80295fc <__ieee754_sqrtf+0xd8>
 80295da:	3402      	adds	r4, #2
 80295dc:	23fc      	movs	r3, #252	@ 0xfc
 80295de:	1064      	asrs	r4, r4, #1
 80295e0:	059b      	lsls	r3, r3, #22
 80295e2:	18e3      	adds	r3, r4, r3
 80295e4:	05fc      	lsls	r4, r7, #23
 80295e6:	18e4      	adds	r4, r4, r3
 80295e8:	e7ad      	b.n	8029546 <__ieee754_sqrtf+0x22>
 80295ea:	2080      	movs	r0, #128	@ 0x80
 80295ec:	0400      	lsls	r0, r0, #16
 80295ee:	005b      	lsls	r3, r3, #1
 80295f0:	0011      	movs	r1, r2
 80295f2:	3201      	adds	r2, #1
 80295f4:	4203      	tst	r3, r0
 80295f6:	d0fa      	beq.n	80295ee <__ieee754_sqrtf+0xca>
 80295f8:	4249      	negs	r1, r1
 80295fa:	e7b6      	b.n	802956a <__ieee754_sqrtf+0x46>
 80295fc:	2301      	movs	r3, #1
 80295fe:	3401      	adds	r4, #1
 8029600:	439c      	bics	r4, r3
 8029602:	e7eb      	b.n	80295dc <__ieee754_sqrtf+0xb8>
 8029604:	0802f91c 	.word	0x0802f91c
 8029608:	0802f918 	.word	0x0802f918

0802960c <roundf>:
 802960c:	0dc3      	lsrs	r3, r0, #23
 802960e:	b2db      	uxtb	r3, r3
 8029610:	3b7f      	subs	r3, #127	@ 0x7f
 8029612:	0002      	movs	r2, r0
 8029614:	b510      	push	{r4, lr}
 8029616:	2b16      	cmp	r3, #22
 8029618:	dc13      	bgt.n	8029642 <roundf+0x36>
 802961a:	2b00      	cmp	r3, #0
 802961c:	da07      	bge.n	802962e <roundf+0x22>
 802961e:	0fc2      	lsrs	r2, r0, #31
 8029620:	07d0      	lsls	r0, r2, #31
 8029622:	3301      	adds	r3, #1
 8029624:	d102      	bne.n	802962c <roundf+0x20>
 8029626:	23fe      	movs	r3, #254	@ 0xfe
 8029628:	059b      	lsls	r3, r3, #22
 802962a:	4318      	orrs	r0, r3
 802962c:	bd10      	pop	{r4, pc}
 802962e:	4908      	ldr	r1, [pc, #32]	@ (8029650 <roundf+0x44>)
 8029630:	4119      	asrs	r1, r3
 8029632:	4208      	tst	r0, r1
 8029634:	d0fa      	beq.n	802962c <roundf+0x20>
 8029636:	2080      	movs	r0, #128	@ 0x80
 8029638:	03c0      	lsls	r0, r0, #15
 802963a:	4118      	asrs	r0, r3
 802963c:	1880      	adds	r0, r0, r2
 802963e:	4388      	bics	r0, r1
 8029640:	e7f4      	b.n	802962c <roundf+0x20>
 8029642:	2b80      	cmp	r3, #128	@ 0x80
 8029644:	d1f2      	bne.n	802962c <roundf+0x20>
 8029646:	1c01      	adds	r1, r0, #0
 8029648:	f7d7 f93a 	bl	80008c0 <__aeabi_fadd>
 802964c:	e7ee      	b.n	802962c <roundf+0x20>
 802964e:	46c0      	nop			@ (mov r8, r8)
 8029650:	007fffff 	.word	0x007fffff

08029654 <__ieee754_log>:
 8029654:	2380      	movs	r3, #128	@ 0x80
 8029656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029658:	035b      	lsls	r3, r3, #13
 802965a:	000e      	movs	r6, r1
 802965c:	b08d      	sub	sp, #52	@ 0x34
 802965e:	4299      	cmp	r1, r3
 8029660:	da23      	bge.n	80296aa <__ieee754_log+0x56>
 8029662:	004b      	lsls	r3, r1, #1
 8029664:	085b      	lsrs	r3, r3, #1
 8029666:	4303      	orrs	r3, r0
 8029668:	d107      	bne.n	802967a <__ieee754_log+0x26>
 802966a:	2200      	movs	r2, #0
 802966c:	2300      	movs	r3, #0
 802966e:	2000      	movs	r0, #0
 8029670:	49b4      	ldr	r1, [pc, #720]	@ (8029944 <__ieee754_log+0x2f0>)
 8029672:	f7d8 fd35 	bl	80020e0 <__aeabi_ddiv>
 8029676:	b00d      	add	sp, #52	@ 0x34
 8029678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802967a:	2900      	cmp	r1, #0
 802967c:	da06      	bge.n	802968c <__ieee754_log+0x38>
 802967e:	0002      	movs	r2, r0
 8029680:	000b      	movs	r3, r1
 8029682:	f7d9 fc4d 	bl	8002f20 <__aeabi_dsub>
 8029686:	2200      	movs	r2, #0
 8029688:	2300      	movs	r3, #0
 802968a:	e7f2      	b.n	8029672 <__ieee754_log+0x1e>
 802968c:	4bae      	ldr	r3, [pc, #696]	@ (8029948 <__ieee754_log+0x2f4>)
 802968e:	2200      	movs	r2, #0
 8029690:	f7d9 f960 	bl	8002954 <__aeabi_dmul>
 8029694:	2336      	movs	r3, #54	@ 0x36
 8029696:	000e      	movs	r6, r1
 8029698:	425b      	negs	r3, r3
 802969a:	4aac      	ldr	r2, [pc, #688]	@ (802994c <__ieee754_log+0x2f8>)
 802969c:	4296      	cmp	r6, r2
 802969e:	dd06      	ble.n	80296ae <__ieee754_log+0x5a>
 80296a0:	0002      	movs	r2, r0
 80296a2:	000b      	movs	r3, r1
 80296a4:	f7d8 f956 	bl	8001954 <__aeabi_dadd>
 80296a8:	e7e5      	b.n	8029676 <__ieee754_log+0x22>
 80296aa:	2300      	movs	r3, #0
 80296ac:	e7f5      	b.n	802969a <__ieee754_log+0x46>
 80296ae:	4ca8      	ldr	r4, [pc, #672]	@ (8029950 <__ieee754_log+0x2fc>)
 80296b0:	1532      	asrs	r2, r6, #20
 80296b2:	1912      	adds	r2, r2, r4
 80296b4:	0336      	lsls	r6, r6, #12
 80296b6:	4ca7      	ldr	r4, [pc, #668]	@ (8029954 <__ieee754_log+0x300>)
 80296b8:	18d2      	adds	r2, r2, r3
 80296ba:	0b33      	lsrs	r3, r6, #12
 80296bc:	9302      	str	r3, [sp, #8]
 80296be:	191b      	adds	r3, r3, r4
 80296c0:	2480      	movs	r4, #128	@ 0x80
 80296c2:	0364      	lsls	r4, r4, #13
 80296c4:	4023      	ands	r3, r4
 80296c6:	4ca4      	ldr	r4, [pc, #656]	@ (8029958 <__ieee754_log+0x304>)
 80296c8:	9d02      	ldr	r5, [sp, #8]
 80296ca:	405c      	eors	r4, r3
 80296cc:	151b      	asrs	r3, r3, #20
 80296ce:	189b      	adds	r3, r3, r2
 80296d0:	4325      	orrs	r5, r4
 80296d2:	2200      	movs	r2, #0
 80296d4:	9300      	str	r3, [sp, #0]
 80296d6:	0029      	movs	r1, r5
 80296d8:	4b9f      	ldr	r3, [pc, #636]	@ (8029958 <__ieee754_log+0x304>)
 80296da:	f7d9 fc21 	bl	8002f20 <__aeabi_dsub>
 80296de:	9b02      	ldr	r3, [sp, #8]
 80296e0:	0006      	movs	r6, r0
 80296e2:	3302      	adds	r3, #2
 80296e4:	031b      	lsls	r3, r3, #12
 80296e6:	000f      	movs	r7, r1
 80296e8:	2200      	movs	r2, #0
 80296ea:	0b1b      	lsrs	r3, r3, #12
 80296ec:	2b02      	cmp	r3, #2
 80296ee:	dc64      	bgt.n	80297ba <__ieee754_log+0x166>
 80296f0:	2300      	movs	r3, #0
 80296f2:	f7d6 fedd 	bl	80004b0 <__aeabi_dcmpeq>
 80296f6:	2800      	cmp	r0, #0
 80296f8:	d019      	beq.n	802972e <__ieee754_log+0xda>
 80296fa:	9b00      	ldr	r3, [sp, #0]
 80296fc:	2b00      	cmp	r3, #0
 80296fe:	d100      	bne.n	8029702 <__ieee754_log+0xae>
 8029700:	e11c      	b.n	802993c <__ieee754_log+0x2e8>
 8029702:	0018      	movs	r0, r3
 8029704:	f7da f874 	bl	80037f0 <__aeabi_i2d>
 8029708:	4a94      	ldr	r2, [pc, #592]	@ (802995c <__ieee754_log+0x308>)
 802970a:	4b95      	ldr	r3, [pc, #596]	@ (8029960 <__ieee754_log+0x30c>)
 802970c:	0004      	movs	r4, r0
 802970e:	000d      	movs	r5, r1
 8029710:	f7d9 f920 	bl	8002954 <__aeabi_dmul>
 8029714:	4a93      	ldr	r2, [pc, #588]	@ (8029964 <__ieee754_log+0x310>)
 8029716:	0006      	movs	r6, r0
 8029718:	000f      	movs	r7, r1
 802971a:	4b93      	ldr	r3, [pc, #588]	@ (8029968 <__ieee754_log+0x314>)
 802971c:	0020      	movs	r0, r4
 802971e:	0029      	movs	r1, r5
 8029720:	f7d9 f918 	bl	8002954 <__aeabi_dmul>
 8029724:	0002      	movs	r2, r0
 8029726:	000b      	movs	r3, r1
 8029728:	0030      	movs	r0, r6
 802972a:	0039      	movs	r1, r7
 802972c:	e7ba      	b.n	80296a4 <__ieee754_log+0x50>
 802972e:	4a8f      	ldr	r2, [pc, #572]	@ (802996c <__ieee754_log+0x318>)
 8029730:	4b8f      	ldr	r3, [pc, #572]	@ (8029970 <__ieee754_log+0x31c>)
 8029732:	0030      	movs	r0, r6
 8029734:	0039      	movs	r1, r7
 8029736:	f7d9 f90d 	bl	8002954 <__aeabi_dmul>
 802973a:	0002      	movs	r2, r0
 802973c:	000b      	movs	r3, r1
 802973e:	2000      	movs	r0, #0
 8029740:	498c      	ldr	r1, [pc, #560]	@ (8029974 <__ieee754_log+0x320>)
 8029742:	f7d9 fbed 	bl	8002f20 <__aeabi_dsub>
 8029746:	0032      	movs	r2, r6
 8029748:	0004      	movs	r4, r0
 802974a:	000d      	movs	r5, r1
 802974c:	003b      	movs	r3, r7
 802974e:	0030      	movs	r0, r6
 8029750:	0039      	movs	r1, r7
 8029752:	f7d9 f8ff 	bl	8002954 <__aeabi_dmul>
 8029756:	000b      	movs	r3, r1
 8029758:	0002      	movs	r2, r0
 802975a:	0029      	movs	r1, r5
 802975c:	0020      	movs	r0, r4
 802975e:	f7d9 f8f9 	bl	8002954 <__aeabi_dmul>
 8029762:	9b00      	ldr	r3, [sp, #0]
 8029764:	9002      	str	r0, [sp, #8]
 8029766:	9103      	str	r1, [sp, #12]
 8029768:	2b00      	cmp	r3, #0
 802976a:	d106      	bne.n	802977a <__ieee754_log+0x126>
 802976c:	0002      	movs	r2, r0
 802976e:	000b      	movs	r3, r1
 8029770:	0030      	movs	r0, r6
 8029772:	0039      	movs	r1, r7
 8029774:	f7d9 fbd4 	bl	8002f20 <__aeabi_dsub>
 8029778:	e77d      	b.n	8029676 <__ieee754_log+0x22>
 802977a:	9800      	ldr	r0, [sp, #0]
 802977c:	f7da f838 	bl	80037f0 <__aeabi_i2d>
 8029780:	4a76      	ldr	r2, [pc, #472]	@ (802995c <__ieee754_log+0x308>)
 8029782:	4b77      	ldr	r3, [pc, #476]	@ (8029960 <__ieee754_log+0x30c>)
 8029784:	0004      	movs	r4, r0
 8029786:	000d      	movs	r5, r1
 8029788:	f7d9 f8e4 	bl	8002954 <__aeabi_dmul>
 802978c:	4a75      	ldr	r2, [pc, #468]	@ (8029964 <__ieee754_log+0x310>)
 802978e:	9000      	str	r0, [sp, #0]
 8029790:	9101      	str	r1, [sp, #4]
 8029792:	4b75      	ldr	r3, [pc, #468]	@ (8029968 <__ieee754_log+0x314>)
 8029794:	0020      	movs	r0, r4
 8029796:	0029      	movs	r1, r5
 8029798:	f7d9 f8dc 	bl	8002954 <__aeabi_dmul>
 802979c:	0002      	movs	r2, r0
 802979e:	000b      	movs	r3, r1
 80297a0:	9802      	ldr	r0, [sp, #8]
 80297a2:	9903      	ldr	r1, [sp, #12]
 80297a4:	f7d9 fbbc 	bl	8002f20 <__aeabi_dsub>
 80297a8:	0032      	movs	r2, r6
 80297aa:	003b      	movs	r3, r7
 80297ac:	f7d9 fbb8 	bl	8002f20 <__aeabi_dsub>
 80297b0:	0002      	movs	r2, r0
 80297b2:	000b      	movs	r3, r1
 80297b4:	9800      	ldr	r0, [sp, #0]
 80297b6:	9901      	ldr	r1, [sp, #4]
 80297b8:	e7dc      	b.n	8029774 <__ieee754_log+0x120>
 80297ba:	2380      	movs	r3, #128	@ 0x80
 80297bc:	05db      	lsls	r3, r3, #23
 80297be:	f7d8 f8c9 	bl	8001954 <__aeabi_dadd>
 80297c2:	0002      	movs	r2, r0
 80297c4:	000b      	movs	r3, r1
 80297c6:	0030      	movs	r0, r6
 80297c8:	0039      	movs	r1, r7
 80297ca:	f7d8 fc89 	bl	80020e0 <__aeabi_ddiv>
 80297ce:	9004      	str	r0, [sp, #16]
 80297d0:	9105      	str	r1, [sp, #20]
 80297d2:	9800      	ldr	r0, [sp, #0]
 80297d4:	f7da f80c 	bl	80037f0 <__aeabi_i2d>
 80297d8:	9a04      	ldr	r2, [sp, #16]
 80297da:	9b05      	ldr	r3, [sp, #20]
 80297dc:	9006      	str	r0, [sp, #24]
 80297de:	9107      	str	r1, [sp, #28]
 80297e0:	0010      	movs	r0, r2
 80297e2:	0019      	movs	r1, r3
 80297e4:	f7d9 f8b6 	bl	8002954 <__aeabi_dmul>
 80297e8:	4a63      	ldr	r2, [pc, #396]	@ (8029978 <__ieee754_log+0x324>)
 80297ea:	9b02      	ldr	r3, [sp, #8]
 80297ec:	4694      	mov	ip, r2
 80297ee:	4463      	add	r3, ip
 80297f0:	0002      	movs	r2, r0
 80297f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80297f4:	000b      	movs	r3, r1
 80297f6:	9008      	str	r0, [sp, #32]
 80297f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80297fa:	f7d9 f8ab 	bl	8002954 <__aeabi_dmul>
 80297fe:	0004      	movs	r4, r0
 8029800:	000d      	movs	r5, r1
 8029802:	4a5e      	ldr	r2, [pc, #376]	@ (802997c <__ieee754_log+0x328>)
 8029804:	4b5e      	ldr	r3, [pc, #376]	@ (8029980 <__ieee754_log+0x32c>)
 8029806:	f7d9 f8a5 	bl	8002954 <__aeabi_dmul>
 802980a:	4a5e      	ldr	r2, [pc, #376]	@ (8029984 <__ieee754_log+0x330>)
 802980c:	4b5e      	ldr	r3, [pc, #376]	@ (8029988 <__ieee754_log+0x334>)
 802980e:	f7d8 f8a1 	bl	8001954 <__aeabi_dadd>
 8029812:	0022      	movs	r2, r4
 8029814:	002b      	movs	r3, r5
 8029816:	f7d9 f89d 	bl	8002954 <__aeabi_dmul>
 802981a:	4a5c      	ldr	r2, [pc, #368]	@ (802998c <__ieee754_log+0x338>)
 802981c:	4b5c      	ldr	r3, [pc, #368]	@ (8029990 <__ieee754_log+0x33c>)
 802981e:	f7d8 f899 	bl	8001954 <__aeabi_dadd>
 8029822:	0022      	movs	r2, r4
 8029824:	002b      	movs	r3, r5
 8029826:	f7d9 f895 	bl	8002954 <__aeabi_dmul>
 802982a:	4a5a      	ldr	r2, [pc, #360]	@ (8029994 <__ieee754_log+0x340>)
 802982c:	4b5a      	ldr	r3, [pc, #360]	@ (8029998 <__ieee754_log+0x344>)
 802982e:	f7d8 f891 	bl	8001954 <__aeabi_dadd>
 8029832:	9a08      	ldr	r2, [sp, #32]
 8029834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029836:	f7d9 f88d 	bl	8002954 <__aeabi_dmul>
 802983a:	4a58      	ldr	r2, [pc, #352]	@ (802999c <__ieee754_log+0x348>)
 802983c:	9008      	str	r0, [sp, #32]
 802983e:	9109      	str	r1, [sp, #36]	@ 0x24
 8029840:	4b57      	ldr	r3, [pc, #348]	@ (80299a0 <__ieee754_log+0x34c>)
 8029842:	0020      	movs	r0, r4
 8029844:	0029      	movs	r1, r5
 8029846:	f7d9 f885 	bl	8002954 <__aeabi_dmul>
 802984a:	4a56      	ldr	r2, [pc, #344]	@ (80299a4 <__ieee754_log+0x350>)
 802984c:	4b56      	ldr	r3, [pc, #344]	@ (80299a8 <__ieee754_log+0x354>)
 802984e:	f7d8 f881 	bl	8001954 <__aeabi_dadd>
 8029852:	0022      	movs	r2, r4
 8029854:	002b      	movs	r3, r5
 8029856:	f7d9 f87d 	bl	8002954 <__aeabi_dmul>
 802985a:	4a54      	ldr	r2, [pc, #336]	@ (80299ac <__ieee754_log+0x358>)
 802985c:	4b54      	ldr	r3, [pc, #336]	@ (80299b0 <__ieee754_log+0x35c>)
 802985e:	f7d8 f879 	bl	8001954 <__aeabi_dadd>
 8029862:	0022      	movs	r2, r4
 8029864:	002b      	movs	r3, r5
 8029866:	f7d9 f875 	bl	8002954 <__aeabi_dmul>
 802986a:	0002      	movs	r2, r0
 802986c:	000b      	movs	r3, r1
 802986e:	9808      	ldr	r0, [sp, #32]
 8029870:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029872:	f7d8 f86f 	bl	8001954 <__aeabi_dadd>
 8029876:	9a02      	ldr	r2, [sp, #8]
 8029878:	4b4e      	ldr	r3, [pc, #312]	@ (80299b4 <__ieee754_log+0x360>)
 802987a:	0004      	movs	r4, r0
 802987c:	1a9b      	subs	r3, r3, r2
 802987e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029880:	000d      	movs	r5, r1
 8029882:	4313      	orrs	r3, r2
 8029884:	2b00      	cmp	r3, #0
 8029886:	dd34      	ble.n	80298f2 <__ieee754_log+0x29e>
 8029888:	2200      	movs	r2, #0
 802988a:	4b3a      	ldr	r3, [pc, #232]	@ (8029974 <__ieee754_log+0x320>)
 802988c:	0030      	movs	r0, r6
 802988e:	0039      	movs	r1, r7
 8029890:	f7d9 f860 	bl	8002954 <__aeabi_dmul>
 8029894:	0032      	movs	r2, r6
 8029896:	003b      	movs	r3, r7
 8029898:	f7d9 f85c 	bl	8002954 <__aeabi_dmul>
 802989c:	0002      	movs	r2, r0
 802989e:	000b      	movs	r3, r1
 80298a0:	9002      	str	r0, [sp, #8]
 80298a2:	9103      	str	r1, [sp, #12]
 80298a4:	0020      	movs	r0, r4
 80298a6:	0029      	movs	r1, r5
 80298a8:	f7d8 f854 	bl	8001954 <__aeabi_dadd>
 80298ac:	9a04      	ldr	r2, [sp, #16]
 80298ae:	9b05      	ldr	r3, [sp, #20]
 80298b0:	f7d9 f850 	bl	8002954 <__aeabi_dmul>
 80298b4:	9b00      	ldr	r3, [sp, #0]
 80298b6:	0004      	movs	r4, r0
 80298b8:	000d      	movs	r5, r1
 80298ba:	2b00      	cmp	r3, #0
 80298bc:	d106      	bne.n	80298cc <__ieee754_log+0x278>
 80298be:	0002      	movs	r2, r0
 80298c0:	000b      	movs	r3, r1
 80298c2:	9802      	ldr	r0, [sp, #8]
 80298c4:	9903      	ldr	r1, [sp, #12]
 80298c6:	f7d9 fb2b 	bl	8002f20 <__aeabi_dsub>
 80298ca:	e74f      	b.n	802976c <__ieee754_log+0x118>
 80298cc:	4a23      	ldr	r2, [pc, #140]	@ (802995c <__ieee754_log+0x308>)
 80298ce:	4b24      	ldr	r3, [pc, #144]	@ (8029960 <__ieee754_log+0x30c>)
 80298d0:	9806      	ldr	r0, [sp, #24]
 80298d2:	9907      	ldr	r1, [sp, #28]
 80298d4:	f7d9 f83e 	bl	8002954 <__aeabi_dmul>
 80298d8:	4a22      	ldr	r2, [pc, #136]	@ (8029964 <__ieee754_log+0x310>)
 80298da:	9000      	str	r0, [sp, #0]
 80298dc:	9101      	str	r1, [sp, #4]
 80298de:	9806      	ldr	r0, [sp, #24]
 80298e0:	9907      	ldr	r1, [sp, #28]
 80298e2:	4b21      	ldr	r3, [pc, #132]	@ (8029968 <__ieee754_log+0x314>)
 80298e4:	f7d9 f836 	bl	8002954 <__aeabi_dmul>
 80298e8:	0022      	movs	r2, r4
 80298ea:	002b      	movs	r3, r5
 80298ec:	f7d8 f832 	bl	8001954 <__aeabi_dadd>
 80298f0:	e754      	b.n	802979c <__ieee754_log+0x148>
 80298f2:	0002      	movs	r2, r0
 80298f4:	000b      	movs	r3, r1
 80298f6:	0030      	movs	r0, r6
 80298f8:	0039      	movs	r1, r7
 80298fa:	f7d9 fb11 	bl	8002f20 <__aeabi_dsub>
 80298fe:	9a04      	ldr	r2, [sp, #16]
 8029900:	9b05      	ldr	r3, [sp, #20]
 8029902:	f7d9 f827 	bl	8002954 <__aeabi_dmul>
 8029906:	9b00      	ldr	r3, [sp, #0]
 8029908:	0004      	movs	r4, r0
 802990a:	000d      	movs	r5, r1
 802990c:	2b00      	cmp	r3, #0
 802990e:	d102      	bne.n	8029916 <__ieee754_log+0x2c2>
 8029910:	0002      	movs	r2, r0
 8029912:	000b      	movs	r3, r1
 8029914:	e72c      	b.n	8029770 <__ieee754_log+0x11c>
 8029916:	4a11      	ldr	r2, [pc, #68]	@ (802995c <__ieee754_log+0x308>)
 8029918:	4b11      	ldr	r3, [pc, #68]	@ (8029960 <__ieee754_log+0x30c>)
 802991a:	9806      	ldr	r0, [sp, #24]
 802991c:	9907      	ldr	r1, [sp, #28]
 802991e:	f7d9 f819 	bl	8002954 <__aeabi_dmul>
 8029922:	4a10      	ldr	r2, [pc, #64]	@ (8029964 <__ieee754_log+0x310>)
 8029924:	9000      	str	r0, [sp, #0]
 8029926:	9101      	str	r1, [sp, #4]
 8029928:	9806      	ldr	r0, [sp, #24]
 802992a:	9907      	ldr	r1, [sp, #28]
 802992c:	4b0e      	ldr	r3, [pc, #56]	@ (8029968 <__ieee754_log+0x314>)
 802992e:	f7d9 f811 	bl	8002954 <__aeabi_dmul>
 8029932:	0002      	movs	r2, r0
 8029934:	000b      	movs	r3, r1
 8029936:	0020      	movs	r0, r4
 8029938:	0029      	movs	r1, r5
 802993a:	e733      	b.n	80297a4 <__ieee754_log+0x150>
 802993c:	2000      	movs	r0, #0
 802993e:	2100      	movs	r1, #0
 8029940:	e699      	b.n	8029676 <__ieee754_log+0x22>
 8029942:	46c0      	nop			@ (mov r8, r8)
 8029944:	c3500000 	.word	0xc3500000
 8029948:	43500000 	.word	0x43500000
 802994c:	7fefffff 	.word	0x7fefffff
 8029950:	fffffc01 	.word	0xfffffc01
 8029954:	00095f64 	.word	0x00095f64
 8029958:	3ff00000 	.word	0x3ff00000
 802995c:	fee00000 	.word	0xfee00000
 8029960:	3fe62e42 	.word	0x3fe62e42
 8029964:	35793c76 	.word	0x35793c76
 8029968:	3dea39ef 	.word	0x3dea39ef
 802996c:	55555555 	.word	0x55555555
 8029970:	3fd55555 	.word	0x3fd55555
 8029974:	3fe00000 	.word	0x3fe00000
 8029978:	fff9eb86 	.word	0xfff9eb86
 802997c:	df3e5244 	.word	0xdf3e5244
 8029980:	3fc2f112 	.word	0x3fc2f112
 8029984:	96cb03de 	.word	0x96cb03de
 8029988:	3fc74664 	.word	0x3fc74664
 802998c:	94229359 	.word	0x94229359
 8029990:	3fd24924 	.word	0x3fd24924
 8029994:	55555593 	.word	0x55555593
 8029998:	3fe55555 	.word	0x3fe55555
 802999c:	d078c69f 	.word	0xd078c69f
 80299a0:	3fc39a09 	.word	0x3fc39a09
 80299a4:	1d8e78af 	.word	0x1d8e78af
 80299a8:	3fcc71c5 	.word	0x3fcc71c5
 80299ac:	9997fa04 	.word	0x9997fa04
 80299b0:	3fd99999 	.word	0x3fd99999
 80299b4:	0006b851 	.word	0x0006b851

080299b8 <__ieee754_pow>:
 80299b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80299ba:	b095      	sub	sp, #84	@ 0x54
 80299bc:	9204      	str	r2, [sp, #16]
 80299be:	9305      	str	r3, [sp, #20]
 80299c0:	9b04      	ldr	r3, [sp, #16]
 80299c2:	9f05      	ldr	r7, [sp, #20]
 80299c4:	001a      	movs	r2, r3
 80299c6:	007d      	lsls	r5, r7, #1
 80299c8:	086d      	lsrs	r5, r5, #1
 80299ca:	9002      	str	r0, [sp, #8]
 80299cc:	9103      	str	r1, [sp, #12]
 80299ce:	432a      	orrs	r2, r5
 80299d0:	d11a      	bne.n	8029a08 <__ieee754_pow+0x50>
 80299d2:	2180      	movs	r1, #128	@ 0x80
 80299d4:	9a02      	ldr	r2, [sp, #8]
 80299d6:	9803      	ldr	r0, [sp, #12]
 80299d8:	0309      	lsls	r1, r1, #12
 80299da:	4048      	eors	r0, r1
 80299dc:	0003      	movs	r3, r0
 80299de:	1892      	adds	r2, r2, r2
 80299e0:	415b      	adcs	r3, r3
 80299e2:	4996      	ldr	r1, [pc, #600]	@ (8029c3c <__ieee754_pow+0x284>)
 80299e4:	428b      	cmp	r3, r1
 80299e6:	d806      	bhi.n	80299f6 <__ieee754_pow+0x3e>
 80299e8:	d001      	beq.n	80299ee <__ieee754_pow+0x36>
 80299ea:	f000 fcce 	bl	802a38a <__ieee754_pow+0x9d2>
 80299ee:	2a00      	cmp	r2, #0
 80299f0:	d101      	bne.n	80299f6 <__ieee754_pow+0x3e>
 80299f2:	f000 fcca 	bl	802a38a <__ieee754_pow+0x9d2>
 80299f6:	9a04      	ldr	r2, [sp, #16]
 80299f8:	9b05      	ldr	r3, [sp, #20]
 80299fa:	9802      	ldr	r0, [sp, #8]
 80299fc:	9903      	ldr	r1, [sp, #12]
 80299fe:	f7d7 ffa9 	bl	8001954 <__aeabi_dadd>
 8029a02:	9000      	str	r0, [sp, #0]
 8029a04:	9101      	str	r1, [sp, #4]
 8029a06:	e08e      	b.n	8029b26 <__ieee754_pow+0x16e>
 8029a08:	9a03      	ldr	r2, [sp, #12]
 8029a0a:	9206      	str	r2, [sp, #24]
 8029a0c:	9a02      	ldr	r2, [sp, #8]
 8029a0e:	920a      	str	r2, [sp, #40]	@ 0x28
 8029a10:	9a03      	ldr	r2, [sp, #12]
 8029a12:	0054      	lsls	r4, r2, #1
 8029a14:	4a8a      	ldr	r2, [pc, #552]	@ (8029c40 <__ieee754_pow+0x288>)
 8029a16:	0864      	lsrs	r4, r4, #1
 8029a18:	4294      	cmp	r4, r2
 8029a1a:	d80e      	bhi.n	8029a3a <__ieee754_pow+0x82>
 8029a1c:	d105      	bne.n	8029a2a <__ieee754_pow+0x72>
 8029a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029a20:	2a00      	cmp	r2, #0
 8029a22:	d1e8      	bne.n	80299f6 <__ieee754_pow+0x3e>
 8029a24:	42a5      	cmp	r5, r4
 8029a26:	d8e6      	bhi.n	80299f6 <__ieee754_pow+0x3e>
 8029a28:	e002      	b.n	8029a30 <__ieee754_pow+0x78>
 8029a2a:	4a85      	ldr	r2, [pc, #532]	@ (8029c40 <__ieee754_pow+0x288>)
 8029a2c:	4295      	cmp	r5, r2
 8029a2e:	d804      	bhi.n	8029a3a <__ieee754_pow+0x82>
 8029a30:	4a83      	ldr	r2, [pc, #524]	@ (8029c40 <__ieee754_pow+0x288>)
 8029a32:	4295      	cmp	r5, r2
 8029a34:	d10c      	bne.n	8029a50 <__ieee754_pow+0x98>
 8029a36:	2b00      	cmp	r3, #0
 8029a38:	d00a      	beq.n	8029a50 <__ieee754_pow+0x98>
 8029a3a:	4a82      	ldr	r2, [pc, #520]	@ (8029c44 <__ieee754_pow+0x28c>)
 8029a3c:	9b03      	ldr	r3, [sp, #12]
 8029a3e:	189b      	adds	r3, r3, r2
 8029a40:	9a02      	ldr	r2, [sp, #8]
 8029a42:	4313      	orrs	r3, r2
 8029a44:	d1d7      	bne.n	80299f6 <__ieee754_pow+0x3e>
 8029a46:	2180      	movs	r1, #128	@ 0x80
 8029a48:	9a04      	ldr	r2, [sp, #16]
 8029a4a:	9805      	ldr	r0, [sp, #20]
 8029a4c:	0309      	lsls	r1, r1, #12
 8029a4e:	e7c4      	b.n	80299da <__ieee754_pow+0x22>
 8029a50:	2600      	movs	r6, #0
 8029a52:	9a06      	ldr	r2, [sp, #24]
 8029a54:	9408      	str	r4, [sp, #32]
 8029a56:	42b2      	cmp	r2, r6
 8029a58:	da42      	bge.n	8029ae0 <__ieee754_pow+0x128>
 8029a5a:	4a7b      	ldr	r2, [pc, #492]	@ (8029c48 <__ieee754_pow+0x290>)
 8029a5c:	4295      	cmp	r5, r2
 8029a5e:	d83e      	bhi.n	8029ade <__ieee754_pow+0x126>
 8029a60:	4a7a      	ldr	r2, [pc, #488]	@ (8029c4c <__ieee754_pow+0x294>)
 8029a62:	4295      	cmp	r5, r2
 8029a64:	d910      	bls.n	8029a88 <__ieee754_pow+0xd0>
 8029a66:	497a      	ldr	r1, [pc, #488]	@ (8029c50 <__ieee754_pow+0x298>)
 8029a68:	152a      	asrs	r2, r5, #20
 8029a6a:	1852      	adds	r2, r2, r1
 8029a6c:	2a14      	cmp	r2, #20
 8029a6e:	dd18      	ble.n	8029aa2 <__ieee754_pow+0xea>
 8029a70:	2134      	movs	r1, #52	@ 0x34
 8029a72:	1a89      	subs	r1, r1, r2
 8029a74:	9a04      	ldr	r2, [sp, #16]
 8029a76:	40ca      	lsrs	r2, r1
 8029a78:	0010      	movs	r0, r2
 8029a7a:	4088      	lsls	r0, r1
 8029a7c:	4298      	cmp	r0, r3
 8029a7e:	d103      	bne.n	8029a88 <__ieee754_pow+0xd0>
 8029a80:	2101      	movs	r1, #1
 8029a82:	3602      	adds	r6, #2
 8029a84:	400a      	ands	r2, r1
 8029a86:	1ab6      	subs	r6, r6, r2
 8029a88:	2b00      	cmp	r3, #0
 8029a8a:	d15b      	bne.n	8029b44 <__ieee754_pow+0x18c>
 8029a8c:	2380      	movs	r3, #128	@ 0x80
 8029a8e:	05db      	lsls	r3, r3, #23
 8029a90:	429f      	cmp	r7, r3
 8029a92:	d14c      	bne.n	8029b2e <__ieee754_pow+0x176>
 8029a94:	9a02      	ldr	r2, [sp, #8]
 8029a96:	9b03      	ldr	r3, [sp, #12]
 8029a98:	0010      	movs	r0, r2
 8029a9a:	0019      	movs	r1, r3
 8029a9c:	f7d8 ff5a 	bl	8002954 <__aeabi_dmul>
 8029aa0:	e7af      	b.n	8029a02 <__ieee754_pow+0x4a>
 8029aa2:	2b00      	cmp	r3, #0
 8029aa4:	d14e      	bne.n	8029b44 <__ieee754_pow+0x18c>
 8029aa6:	3314      	adds	r3, #20
 8029aa8:	1a9a      	subs	r2, r3, r2
 8029aaa:	002b      	movs	r3, r5
 8029aac:	4113      	asrs	r3, r2
 8029aae:	0019      	movs	r1, r3
 8029ab0:	4091      	lsls	r1, r2
 8029ab2:	42a9      	cmp	r1, r5
 8029ab4:	d103      	bne.n	8029abe <__ieee754_pow+0x106>
 8029ab6:	2201      	movs	r2, #1
 8029ab8:	2602      	movs	r6, #2
 8029aba:	4013      	ands	r3, r2
 8029abc:	1af6      	subs	r6, r6, r3
 8029abe:	4b65      	ldr	r3, [pc, #404]	@ (8029c54 <__ieee754_pow+0x29c>)
 8029ac0:	429d      	cmp	r5, r3
 8029ac2:	d1e3      	bne.n	8029a8c <__ieee754_pow+0xd4>
 8029ac4:	9b02      	ldr	r3, [sp, #8]
 8029ac6:	9c03      	ldr	r4, [sp, #12]
 8029ac8:	9300      	str	r3, [sp, #0]
 8029aca:	9401      	str	r4, [sp, #4]
 8029acc:	2f00      	cmp	r7, #0
 8029ace:	da2a      	bge.n	8029b26 <__ieee754_pow+0x16e>
 8029ad0:	001a      	movs	r2, r3
 8029ad2:	2000      	movs	r0, #0
 8029ad4:	0023      	movs	r3, r4
 8029ad6:	495f      	ldr	r1, [pc, #380]	@ (8029c54 <__ieee754_pow+0x29c>)
 8029ad8:	f7d8 fb02 	bl	80020e0 <__aeabi_ddiv>
 8029adc:	e791      	b.n	8029a02 <__ieee754_pow+0x4a>
 8029ade:	2602      	movs	r6, #2
 8029ae0:	2b00      	cmp	r3, #0
 8029ae2:	d12f      	bne.n	8029b44 <__ieee754_pow+0x18c>
 8029ae4:	4b56      	ldr	r3, [pc, #344]	@ (8029c40 <__ieee754_pow+0x288>)
 8029ae6:	429d      	cmp	r5, r3
 8029ae8:	d1e9      	bne.n	8029abe <__ieee754_pow+0x106>
 8029aea:	4b56      	ldr	r3, [pc, #344]	@ (8029c44 <__ieee754_pow+0x28c>)
 8029aec:	9a02      	ldr	r2, [sp, #8]
 8029aee:	18e3      	adds	r3, r4, r3
 8029af0:	4313      	orrs	r3, r2
 8029af2:	d101      	bne.n	8029af8 <__ieee754_pow+0x140>
 8029af4:	f000 fc49 	bl	802a38a <__ieee754_pow+0x9d2>
 8029af8:	4b54      	ldr	r3, [pc, #336]	@ (8029c4c <__ieee754_pow+0x294>)
 8029afa:	429c      	cmp	r4, r3
 8029afc:	d909      	bls.n	8029b12 <__ieee754_pow+0x15a>
 8029afe:	9b04      	ldr	r3, [sp, #16]
 8029b00:	9c05      	ldr	r4, [sp, #20]
 8029b02:	9300      	str	r3, [sp, #0]
 8029b04:	9401      	str	r4, [sp, #4]
 8029b06:	2f00      	cmp	r7, #0
 8029b08:	da0d      	bge.n	8029b26 <__ieee754_pow+0x16e>
 8029b0a:	2300      	movs	r3, #0
 8029b0c:	2400      	movs	r4, #0
 8029b0e:	f000 fc3e 	bl	802a38e <__ieee754_pow+0x9d6>
 8029b12:	2f00      	cmp	r7, #0
 8029b14:	daf9      	bge.n	8029b0a <__ieee754_pow+0x152>
 8029b16:	2280      	movs	r2, #128	@ 0x80
 8029b18:	0612      	lsls	r2, r2, #24
 8029b1a:	4694      	mov	ip, r2
 8029b1c:	9b04      	ldr	r3, [sp, #16]
 8029b1e:	9300      	str	r3, [sp, #0]
 8029b20:	9b05      	ldr	r3, [sp, #20]
 8029b22:	4463      	add	r3, ip
 8029b24:	9301      	str	r3, [sp, #4]
 8029b26:	9800      	ldr	r0, [sp, #0]
 8029b28:	9901      	ldr	r1, [sp, #4]
 8029b2a:	b015      	add	sp, #84	@ 0x54
 8029b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8029c58 <__ieee754_pow+0x2a0>)
 8029b30:	429f      	cmp	r7, r3
 8029b32:	d107      	bne.n	8029b44 <__ieee754_pow+0x18c>
 8029b34:	9b06      	ldr	r3, [sp, #24]
 8029b36:	2b00      	cmp	r3, #0
 8029b38:	db04      	blt.n	8029b44 <__ieee754_pow+0x18c>
 8029b3a:	9802      	ldr	r0, [sp, #8]
 8029b3c:	9903      	ldr	r1, [sp, #12]
 8029b3e:	f000 fe03 	bl	802a748 <__ieee754_sqrt>
 8029b42:	e75e      	b.n	8029a02 <__ieee754_pow+0x4a>
 8029b44:	9802      	ldr	r0, [sp, #8]
 8029b46:	9903      	ldr	r1, [sp, #12]
 8029b48:	f000 fc4e 	bl	802a3e8 <fabs>
 8029b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029b4e:	9000      	str	r0, [sp, #0]
 8029b50:	9101      	str	r1, [sp, #4]
 8029b52:	2b00      	cmp	r3, #0
 8029b54:	d12c      	bne.n	8029bb0 <__ieee754_pow+0x1f8>
 8029b56:	9b03      	ldr	r3, [sp, #12]
 8029b58:	4a3e      	ldr	r2, [pc, #248]	@ (8029c54 <__ieee754_pow+0x29c>)
 8029b5a:	009b      	lsls	r3, r3, #2
 8029b5c:	089b      	lsrs	r3, r3, #2
 8029b5e:	4293      	cmp	r3, r2
 8029b60:	d001      	beq.n	8029b66 <__ieee754_pow+0x1ae>
 8029b62:	2c00      	cmp	r4, #0
 8029b64:	d124      	bne.n	8029bb0 <__ieee754_pow+0x1f8>
 8029b66:	2f00      	cmp	r7, #0
 8029b68:	da07      	bge.n	8029b7a <__ieee754_pow+0x1c2>
 8029b6a:	9a00      	ldr	r2, [sp, #0]
 8029b6c:	9b01      	ldr	r3, [sp, #4]
 8029b6e:	2000      	movs	r0, #0
 8029b70:	4938      	ldr	r1, [pc, #224]	@ (8029c54 <__ieee754_pow+0x29c>)
 8029b72:	f7d8 fab5 	bl	80020e0 <__aeabi_ddiv>
 8029b76:	9000      	str	r0, [sp, #0]
 8029b78:	9101      	str	r1, [sp, #4]
 8029b7a:	9b06      	ldr	r3, [sp, #24]
 8029b7c:	2b00      	cmp	r3, #0
 8029b7e:	dad2      	bge.n	8029b26 <__ieee754_pow+0x16e>
 8029b80:	4b30      	ldr	r3, [pc, #192]	@ (8029c44 <__ieee754_pow+0x28c>)
 8029b82:	18e4      	adds	r4, r4, r3
 8029b84:	4334      	orrs	r4, r6
 8029b86:	d108      	bne.n	8029b9a <__ieee754_pow+0x1e2>
 8029b88:	9a00      	ldr	r2, [sp, #0]
 8029b8a:	9b01      	ldr	r3, [sp, #4]
 8029b8c:	0010      	movs	r0, r2
 8029b8e:	0019      	movs	r1, r3
 8029b90:	f7d9 f9c6 	bl	8002f20 <__aeabi_dsub>
 8029b94:	0002      	movs	r2, r0
 8029b96:	000b      	movs	r3, r1
 8029b98:	e79e      	b.n	8029ad8 <__ieee754_pow+0x120>
 8029b9a:	2e01      	cmp	r6, #1
 8029b9c:	d1c3      	bne.n	8029b26 <__ieee754_pow+0x16e>
 8029b9e:	9800      	ldr	r0, [sp, #0]
 8029ba0:	2180      	movs	r1, #128	@ 0x80
 8029ba2:	0002      	movs	r2, r0
 8029ba4:	9801      	ldr	r0, [sp, #4]
 8029ba6:	0609      	lsls	r1, r1, #24
 8029ba8:	1843      	adds	r3, r0, r1
 8029baa:	9200      	str	r2, [sp, #0]
 8029bac:	9301      	str	r3, [sp, #4]
 8029bae:	e7ba      	b.n	8029b26 <__ieee754_pow+0x16e>
 8029bb0:	9b03      	ldr	r3, [sp, #12]
 8029bb2:	0fdb      	lsrs	r3, r3, #31
 8029bb4:	3b01      	subs	r3, #1
 8029bb6:	001a      	movs	r2, r3
 8029bb8:	4332      	orrs	r2, r6
 8029bba:	d102      	bne.n	8029bc2 <__ieee754_pow+0x20a>
 8029bbc:	9a02      	ldr	r2, [sp, #8]
 8029bbe:	9b03      	ldr	r3, [sp, #12]
 8029bc0:	e7e4      	b.n	8029b8c <__ieee754_pow+0x1d4>
 8029bc2:	3e01      	subs	r6, #1
 8029bc4:	2200      	movs	r2, #0
 8029bc6:	431e      	orrs	r6, r3
 8029bc8:	d013      	beq.n	8029bf2 <__ieee754_pow+0x23a>
 8029bca:	4b22      	ldr	r3, [pc, #136]	@ (8029c54 <__ieee754_pow+0x29c>)
 8029bcc:	9206      	str	r2, [sp, #24]
 8029bce:	9307      	str	r3, [sp, #28]
 8029bd0:	2384      	movs	r3, #132	@ 0x84
 8029bd2:	05db      	lsls	r3, r3, #23
 8029bd4:	429d      	cmp	r5, r3
 8029bd6:	d800      	bhi.n	8029bda <__ieee754_pow+0x222>
 8029bd8:	e0fa      	b.n	8029dd0 <__ieee754_pow+0x418>
 8029bda:	4b20      	ldr	r3, [pc, #128]	@ (8029c5c <__ieee754_pow+0x2a4>)
 8029bdc:	429d      	cmp	r5, r3
 8029bde:	d910      	bls.n	8029c02 <__ieee754_pow+0x24a>
 8029be0:	4b1a      	ldr	r3, [pc, #104]	@ (8029c4c <__ieee754_pow+0x294>)
 8029be2:	429c      	cmp	r4, r3
 8029be4:	d807      	bhi.n	8029bf6 <__ieee754_pow+0x23e>
 8029be6:	2f00      	cmp	r7, #0
 8029be8:	da07      	bge.n	8029bfa <__ieee754_pow+0x242>
 8029bea:	2000      	movs	r0, #0
 8029bec:	f000 fd82 	bl	802a6f4 <__math_oflow>
 8029bf0:	e707      	b.n	8029a02 <__ieee754_pow+0x4a>
 8029bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8029c60 <__ieee754_pow+0x2a8>)
 8029bf4:	e7ea      	b.n	8029bcc <__ieee754_pow+0x214>
 8029bf6:	2f00      	cmp	r7, #0
 8029bf8:	dcf7      	bgt.n	8029bea <__ieee754_pow+0x232>
 8029bfa:	2000      	movs	r0, #0
 8029bfc:	f000 fd73 	bl	802a6e6 <__math_uflow>
 8029c00:	e6ff      	b.n	8029a02 <__ieee754_pow+0x4a>
 8029c02:	4b18      	ldr	r3, [pc, #96]	@ (8029c64 <__ieee754_pow+0x2ac>)
 8029c04:	429c      	cmp	r4, r3
 8029c06:	d80a      	bhi.n	8029c1e <__ieee754_pow+0x266>
 8029c08:	9806      	ldr	r0, [sp, #24]
 8029c0a:	9907      	ldr	r1, [sp, #28]
 8029c0c:	2300      	movs	r3, #0
 8029c0e:	2200      	movs	r2, #0
 8029c10:	f7d6 fc54 	bl	80004bc <__aeabi_dcmplt>
 8029c14:	1e43      	subs	r3, r0, #1
 8029c16:	4198      	sbcs	r0, r3
 8029c18:	2f00      	cmp	r7, #0
 8029c1a:	daef      	bge.n	8029bfc <__ieee754_pow+0x244>
 8029c1c:	e7e6      	b.n	8029bec <__ieee754_pow+0x234>
 8029c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8029c54 <__ieee754_pow+0x29c>)
 8029c20:	2200      	movs	r2, #0
 8029c22:	429c      	cmp	r4, r3
 8029c24:	d920      	bls.n	8029c68 <__ieee754_pow+0x2b0>
 8029c26:	9806      	ldr	r0, [sp, #24]
 8029c28:	9907      	ldr	r1, [sp, #28]
 8029c2a:	2300      	movs	r3, #0
 8029c2c:	f7d6 fc46 	bl	80004bc <__aeabi_dcmplt>
 8029c30:	1e43      	subs	r3, r0, #1
 8029c32:	4198      	sbcs	r0, r3
 8029c34:	2f00      	cmp	r7, #0
 8029c36:	dcd9      	bgt.n	8029bec <__ieee754_pow+0x234>
 8029c38:	e7e0      	b.n	8029bfc <__ieee754_pow+0x244>
 8029c3a:	46c0      	nop			@ (mov r8, r8)
 8029c3c:	fff00000 	.word	0xfff00000
 8029c40:	7ff00000 	.word	0x7ff00000
 8029c44:	c0100000 	.word	0xc0100000
 8029c48:	433fffff 	.word	0x433fffff
 8029c4c:	3fefffff 	.word	0x3fefffff
 8029c50:	fffffc01 	.word	0xfffffc01
 8029c54:	3ff00000 	.word	0x3ff00000
 8029c58:	3fe00000 	.word	0x3fe00000
 8029c5c:	43f00000 	.word	0x43f00000
 8029c60:	bff00000 	.word	0xbff00000
 8029c64:	3feffffe 	.word	0x3feffffe
 8029c68:	9800      	ldr	r0, [sp, #0]
 8029c6a:	9901      	ldr	r1, [sp, #4]
 8029c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8029da4 <__ieee754_pow+0x3ec>)
 8029c6e:	f7d9 f957 	bl	8002f20 <__aeabi_dsub>
 8029c72:	22c0      	movs	r2, #192	@ 0xc0
 8029c74:	4b4c      	ldr	r3, [pc, #304]	@ (8029da8 <__ieee754_pow+0x3f0>)
 8029c76:	05d2      	lsls	r2, r2, #23
 8029c78:	0006      	movs	r6, r0
 8029c7a:	000f      	movs	r7, r1
 8029c7c:	f7d8 fe6a 	bl	8002954 <__aeabi_dmul>
 8029c80:	4a4a      	ldr	r2, [pc, #296]	@ (8029dac <__ieee754_pow+0x3f4>)
 8029c82:	9002      	str	r0, [sp, #8]
 8029c84:	9103      	str	r1, [sp, #12]
 8029c86:	4b4a      	ldr	r3, [pc, #296]	@ (8029db0 <__ieee754_pow+0x3f8>)
 8029c88:	0030      	movs	r0, r6
 8029c8a:	0039      	movs	r1, r7
 8029c8c:	f7d8 fe62 	bl	8002954 <__aeabi_dmul>
 8029c90:	2200      	movs	r2, #0
 8029c92:	9000      	str	r0, [sp, #0]
 8029c94:	9101      	str	r1, [sp, #4]
 8029c96:	4b47      	ldr	r3, [pc, #284]	@ (8029db4 <__ieee754_pow+0x3fc>)
 8029c98:	0030      	movs	r0, r6
 8029c9a:	0039      	movs	r1, r7
 8029c9c:	f7d8 fe5a 	bl	8002954 <__aeabi_dmul>
 8029ca0:	0002      	movs	r2, r0
 8029ca2:	000b      	movs	r3, r1
 8029ca4:	4844      	ldr	r0, [pc, #272]	@ (8029db8 <__ieee754_pow+0x400>)
 8029ca6:	4945      	ldr	r1, [pc, #276]	@ (8029dbc <__ieee754_pow+0x404>)
 8029ca8:	f7d9 f93a 	bl	8002f20 <__aeabi_dsub>
 8029cac:	0032      	movs	r2, r6
 8029cae:	003b      	movs	r3, r7
 8029cb0:	f7d8 fe50 	bl	8002954 <__aeabi_dmul>
 8029cb4:	0002      	movs	r2, r0
 8029cb6:	000b      	movs	r3, r1
 8029cb8:	2000      	movs	r0, #0
 8029cba:	4941      	ldr	r1, [pc, #260]	@ (8029dc0 <__ieee754_pow+0x408>)
 8029cbc:	f7d9 f930 	bl	8002f20 <__aeabi_dsub>
 8029cc0:	0032      	movs	r2, r6
 8029cc2:	0004      	movs	r4, r0
 8029cc4:	000d      	movs	r5, r1
 8029cc6:	003b      	movs	r3, r7
 8029cc8:	0030      	movs	r0, r6
 8029cca:	0039      	movs	r1, r7
 8029ccc:	f7d8 fe42 	bl	8002954 <__aeabi_dmul>
 8029cd0:	0002      	movs	r2, r0
 8029cd2:	000b      	movs	r3, r1
 8029cd4:	0020      	movs	r0, r4
 8029cd6:	0029      	movs	r1, r5
 8029cd8:	f7d8 fe3c 	bl	8002954 <__aeabi_dmul>
 8029cdc:	4a39      	ldr	r2, [pc, #228]	@ (8029dc4 <__ieee754_pow+0x40c>)
 8029cde:	4b32      	ldr	r3, [pc, #200]	@ (8029da8 <__ieee754_pow+0x3f0>)
 8029ce0:	f7d8 fe38 	bl	8002954 <__aeabi_dmul>
 8029ce4:	0002      	movs	r2, r0
 8029ce6:	000b      	movs	r3, r1
 8029ce8:	9800      	ldr	r0, [sp, #0]
 8029cea:	9901      	ldr	r1, [sp, #4]
 8029cec:	f7d9 f918 	bl	8002f20 <__aeabi_dsub>
 8029cf0:	0002      	movs	r2, r0
 8029cf2:	000b      	movs	r3, r1
 8029cf4:	0004      	movs	r4, r0
 8029cf6:	000d      	movs	r5, r1
 8029cf8:	9802      	ldr	r0, [sp, #8]
 8029cfa:	9903      	ldr	r1, [sp, #12]
 8029cfc:	f7d7 fe2a 	bl	8001954 <__aeabi_dadd>
 8029d00:	9a02      	ldr	r2, [sp, #8]
 8029d02:	9b03      	ldr	r3, [sp, #12]
 8029d04:	2000      	movs	r0, #0
 8029d06:	9000      	str	r0, [sp, #0]
 8029d08:	9101      	str	r1, [sp, #4]
 8029d0a:	f7d9 f909 	bl	8002f20 <__aeabi_dsub>
 8029d0e:	0002      	movs	r2, r0
 8029d10:	000b      	movs	r3, r1
 8029d12:	0020      	movs	r0, r4
 8029d14:	0029      	movs	r1, r5
 8029d16:	f7d9 f903 	bl	8002f20 <__aeabi_dsub>
 8029d1a:	9c04      	ldr	r4, [sp, #16]
 8029d1c:	9d05      	ldr	r5, [sp, #20]
 8029d1e:	2400      	movs	r4, #0
 8029d20:	0006      	movs	r6, r0
 8029d22:	000f      	movs	r7, r1
 8029d24:	9804      	ldr	r0, [sp, #16]
 8029d26:	9905      	ldr	r1, [sp, #20]
 8029d28:	0022      	movs	r2, r4
 8029d2a:	002b      	movs	r3, r5
 8029d2c:	9402      	str	r4, [sp, #8]
 8029d2e:	9503      	str	r5, [sp, #12]
 8029d30:	f7d9 f8f6 	bl	8002f20 <__aeabi_dsub>
 8029d34:	9a00      	ldr	r2, [sp, #0]
 8029d36:	9b01      	ldr	r3, [sp, #4]
 8029d38:	f7d8 fe0c 	bl	8002954 <__aeabi_dmul>
 8029d3c:	9a04      	ldr	r2, [sp, #16]
 8029d3e:	9b05      	ldr	r3, [sp, #20]
 8029d40:	9008      	str	r0, [sp, #32]
 8029d42:	9109      	str	r1, [sp, #36]	@ 0x24
 8029d44:	0030      	movs	r0, r6
 8029d46:	0039      	movs	r1, r7
 8029d48:	f7d8 fe04 	bl	8002954 <__aeabi_dmul>
 8029d4c:	0002      	movs	r2, r0
 8029d4e:	000b      	movs	r3, r1
 8029d50:	9808      	ldr	r0, [sp, #32]
 8029d52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029d54:	f7d7 fdfe 	bl	8001954 <__aeabi_dadd>
 8029d58:	0022      	movs	r2, r4
 8029d5a:	002b      	movs	r3, r5
 8029d5c:	9004      	str	r0, [sp, #16]
 8029d5e:	9105      	str	r1, [sp, #20]
 8029d60:	9800      	ldr	r0, [sp, #0]
 8029d62:	9901      	ldr	r1, [sp, #4]
 8029d64:	f7d8 fdf6 	bl	8002954 <__aeabi_dmul>
 8029d68:	000b      	movs	r3, r1
 8029d6a:	0002      	movs	r2, r0
 8029d6c:	9000      	str	r0, [sp, #0]
 8029d6e:	9101      	str	r1, [sp, #4]
 8029d70:	9804      	ldr	r0, [sp, #16]
 8029d72:	9905      	ldr	r1, [sp, #20]
 8029d74:	f7d7 fdee 	bl	8001954 <__aeabi_dadd>
 8029d78:	4b13      	ldr	r3, [pc, #76]	@ (8029dc8 <__ieee754_pow+0x410>)
 8029d7a:	0006      	movs	r6, r0
 8029d7c:	000f      	movs	r7, r1
 8029d7e:	9108      	str	r1, [sp, #32]
 8029d80:	4299      	cmp	r1, r3
 8029d82:	dc00      	bgt.n	8029d86 <__ieee754_pow+0x3ce>
 8029d84:	e1c0      	b.n	802a108 <__ieee754_pow+0x750>
 8029d86:	4b11      	ldr	r3, [pc, #68]	@ (8029dcc <__ieee754_pow+0x414>)
 8029d88:	18cb      	adds	r3, r1, r3
 8029d8a:	4303      	orrs	r3, r0
 8029d8c:	42a3      	cmp	r3, r4
 8029d8e:	d100      	bne.n	8029d92 <__ieee754_pow+0x3da>
 8029d90:	e1a1      	b.n	802a0d6 <__ieee754_pow+0x71e>
 8029d92:	9806      	ldr	r0, [sp, #24]
 8029d94:	9907      	ldr	r1, [sp, #28]
 8029d96:	2300      	movs	r3, #0
 8029d98:	2200      	movs	r2, #0
 8029d9a:	f7d6 fb8f 	bl	80004bc <__aeabi_dcmplt>
 8029d9e:	1e43      	subs	r3, r0, #1
 8029da0:	4198      	sbcs	r0, r3
 8029da2:	e723      	b.n	8029bec <__ieee754_pow+0x234>
 8029da4:	3ff00000 	.word	0x3ff00000
 8029da8:	3ff71547 	.word	0x3ff71547
 8029dac:	f85ddf44 	.word	0xf85ddf44
 8029db0:	3e54ae0b 	.word	0x3e54ae0b
 8029db4:	3fd00000 	.word	0x3fd00000
 8029db8:	55555555 	.word	0x55555555
 8029dbc:	3fd55555 	.word	0x3fd55555
 8029dc0:	3fe00000 	.word	0x3fe00000
 8029dc4:	652b82fe 	.word	0x652b82fe
 8029dc8:	408fffff 	.word	0x408fffff
 8029dcc:	bf700000 	.word	0xbf700000
 8029dd0:	4bdc      	ldr	r3, [pc, #880]	@ (802a144 <__ieee754_pow+0x78c>)
 8029dd2:	9903      	ldr	r1, [sp, #12]
 8029dd4:	2200      	movs	r2, #0
 8029dd6:	420b      	tst	r3, r1
 8029dd8:	d10b      	bne.n	8029df2 <__ieee754_pow+0x43a>
 8029dda:	9800      	ldr	r0, [sp, #0]
 8029ddc:	9901      	ldr	r1, [sp, #4]
 8029dde:	2200      	movs	r2, #0
 8029de0:	4bd9      	ldr	r3, [pc, #868]	@ (802a148 <__ieee754_pow+0x790>)
 8029de2:	f7d8 fdb7 	bl	8002954 <__aeabi_dmul>
 8029de6:	2235      	movs	r2, #53	@ 0x35
 8029de8:	9000      	str	r0, [sp, #0]
 8029dea:	9101      	str	r1, [sp, #4]
 8029dec:	9b01      	ldr	r3, [sp, #4]
 8029dee:	4252      	negs	r2, r2
 8029df0:	9308      	str	r3, [sp, #32]
 8029df2:	9b08      	ldr	r3, [sp, #32]
 8029df4:	49d5      	ldr	r1, [pc, #852]	@ (802a14c <__ieee754_pow+0x794>)
 8029df6:	151b      	asrs	r3, r3, #20
 8029df8:	185b      	adds	r3, r3, r1
 8029dfa:	189b      	adds	r3, r3, r2
 8029dfc:	930e      	str	r3, [sp, #56]	@ 0x38
 8029dfe:	9b08      	ldr	r3, [sp, #32]
 8029e00:	4dd3      	ldr	r5, [pc, #844]	@ (802a150 <__ieee754_pow+0x798>)
 8029e02:	031b      	lsls	r3, r3, #12
 8029e04:	4ad3      	ldr	r2, [pc, #844]	@ (802a154 <__ieee754_pow+0x79c>)
 8029e06:	0b1b      	lsrs	r3, r3, #12
 8029e08:	2600      	movs	r6, #0
 8029e0a:	431d      	orrs	r5, r3
 8029e0c:	4293      	cmp	r3, r2
 8029e0e:	dd09      	ble.n	8029e24 <__ieee754_pow+0x46c>
 8029e10:	4ad1      	ldr	r2, [pc, #836]	@ (802a158 <__ieee754_pow+0x7a0>)
 8029e12:	3601      	adds	r6, #1
 8029e14:	4293      	cmp	r3, r2
 8029e16:	dd05      	ble.n	8029e24 <__ieee754_pow+0x46c>
 8029e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029e1a:	199b      	adds	r3, r3, r6
 8029e1c:	2600      	movs	r6, #0
 8029e1e:	930e      	str	r3, [sp, #56]	@ 0x38
 8029e20:	4bce      	ldr	r3, [pc, #824]	@ (802a15c <__ieee754_pow+0x7a4>)
 8029e22:	18ed      	adds	r5, r5, r3
 8029e24:	9800      	ldr	r0, [sp, #0]
 8029e26:	9901      	ldr	r1, [sp, #4]
 8029e28:	0029      	movs	r1, r5
 8029e2a:	4bcd      	ldr	r3, [pc, #820]	@ (802a160 <__ieee754_pow+0x7a8>)
 8029e2c:	00f2      	lsls	r2, r6, #3
 8029e2e:	189b      	adds	r3, r3, r2
 8029e30:	685c      	ldr	r4, [r3, #4]
 8029e32:	681b      	ldr	r3, [r3, #0]
 8029e34:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8029e38:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029e3a:	001a      	movs	r2, r3
 8029e3c:	0023      	movs	r3, r4
 8029e3e:	900c      	str	r0, [sp, #48]	@ 0x30
 8029e40:	910d      	str	r1, [sp, #52]	@ 0x34
 8029e42:	f7d9 f86d 	bl	8002f20 <__aeabi_dsub>
 8029e46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029e48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029e4a:	9010      	str	r0, [sp, #64]	@ 0x40
 8029e4c:	9111      	str	r1, [sp, #68]	@ 0x44
 8029e4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029e50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029e52:	f7d7 fd7f 	bl	8001954 <__aeabi_dadd>
 8029e56:	0002      	movs	r2, r0
 8029e58:	000b      	movs	r3, r1
 8029e5a:	2000      	movs	r0, #0
 8029e5c:	49bc      	ldr	r1, [pc, #752]	@ (802a150 <__ieee754_pow+0x798>)
 8029e5e:	f7d8 f93f 	bl	80020e0 <__aeabi_ddiv>
 8029e62:	0002      	movs	r2, r0
 8029e64:	000b      	movs	r3, r1
 8029e66:	9012      	str	r0, [sp, #72]	@ 0x48
 8029e68:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029e6a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029e6c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029e6e:	f7d8 fd71 	bl	8002954 <__aeabi_dmul>
 8029e72:	9008      	str	r0, [sp, #32]
 8029e74:	9109      	str	r1, [sp, #36]	@ 0x24
 8029e76:	9b08      	ldr	r3, [sp, #32]
 8029e78:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029e7a:	2180      	movs	r1, #128	@ 0x80
 8029e7c:	9302      	str	r3, [sp, #8]
 8029e7e:	9403      	str	r4, [sp, #12]
 8029e80:	2080      	movs	r0, #128	@ 0x80
 8029e82:	2300      	movs	r3, #0
 8029e84:	2200      	movs	r2, #0
 8029e86:	106d      	asrs	r5, r5, #1
 8029e88:	0589      	lsls	r1, r1, #22
 8029e8a:	9302      	str	r3, [sp, #8]
 8029e8c:	4329      	orrs	r1, r5
 8029e8e:	0300      	lsls	r0, r0, #12
 8029e90:	9b02      	ldr	r3, [sp, #8]
 8029e92:	9c03      	ldr	r4, [sp, #12]
 8029e94:	1809      	adds	r1, r1, r0
 8029e96:	9300      	str	r3, [sp, #0]
 8029e98:	9401      	str	r4, [sp, #4]
 8029e9a:	04b6      	lsls	r6, r6, #18
 8029e9c:	198b      	adds	r3, r1, r6
 8029e9e:	9800      	ldr	r0, [sp, #0]
 8029ea0:	9901      	ldr	r1, [sp, #4]
 8029ea2:	0014      	movs	r4, r2
 8029ea4:	001d      	movs	r5, r3
 8029ea6:	f7d8 fd55 	bl	8002954 <__aeabi_dmul>
 8029eaa:	0002      	movs	r2, r0
 8029eac:	000b      	movs	r3, r1
 8029eae:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029eb0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029eb2:	f7d9 f835 	bl	8002f20 <__aeabi_dsub>
 8029eb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029eb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029eba:	0006      	movs	r6, r0
 8029ebc:	000f      	movs	r7, r1
 8029ebe:	0020      	movs	r0, r4
 8029ec0:	0029      	movs	r1, r5
 8029ec2:	f7d9 f82d 	bl	8002f20 <__aeabi_dsub>
 8029ec6:	0002      	movs	r2, r0
 8029ec8:	000b      	movs	r3, r1
 8029eca:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029ecc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029ece:	f7d9 f827 	bl	8002f20 <__aeabi_dsub>
 8029ed2:	9a00      	ldr	r2, [sp, #0]
 8029ed4:	9b01      	ldr	r3, [sp, #4]
 8029ed6:	f7d8 fd3d 	bl	8002954 <__aeabi_dmul>
 8029eda:	0002      	movs	r2, r0
 8029edc:	000b      	movs	r3, r1
 8029ede:	0030      	movs	r0, r6
 8029ee0:	0039      	movs	r1, r7
 8029ee2:	f7d9 f81d 	bl	8002f20 <__aeabi_dsub>
 8029ee6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029ee8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029eea:	f7d8 fd33 	bl	8002954 <__aeabi_dmul>
 8029eee:	9a08      	ldr	r2, [sp, #32]
 8029ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029ef2:	900a      	str	r0, [sp, #40]	@ 0x28
 8029ef4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029ef6:	0010      	movs	r0, r2
 8029ef8:	0019      	movs	r1, r3
 8029efa:	f7d8 fd2b 	bl	8002954 <__aeabi_dmul>
 8029efe:	0006      	movs	r6, r0
 8029f00:	000f      	movs	r7, r1
 8029f02:	4a98      	ldr	r2, [pc, #608]	@ (802a164 <__ieee754_pow+0x7ac>)
 8029f04:	4b98      	ldr	r3, [pc, #608]	@ (802a168 <__ieee754_pow+0x7b0>)
 8029f06:	f7d8 fd25 	bl	8002954 <__aeabi_dmul>
 8029f0a:	4a98      	ldr	r2, [pc, #608]	@ (802a16c <__ieee754_pow+0x7b4>)
 8029f0c:	4b98      	ldr	r3, [pc, #608]	@ (802a170 <__ieee754_pow+0x7b8>)
 8029f0e:	f7d7 fd21 	bl	8001954 <__aeabi_dadd>
 8029f12:	0032      	movs	r2, r6
 8029f14:	003b      	movs	r3, r7
 8029f16:	f7d8 fd1d 	bl	8002954 <__aeabi_dmul>
 8029f1a:	4a96      	ldr	r2, [pc, #600]	@ (802a174 <__ieee754_pow+0x7bc>)
 8029f1c:	4b96      	ldr	r3, [pc, #600]	@ (802a178 <__ieee754_pow+0x7c0>)
 8029f1e:	f7d7 fd19 	bl	8001954 <__aeabi_dadd>
 8029f22:	0032      	movs	r2, r6
 8029f24:	003b      	movs	r3, r7
 8029f26:	f7d8 fd15 	bl	8002954 <__aeabi_dmul>
 8029f2a:	4a94      	ldr	r2, [pc, #592]	@ (802a17c <__ieee754_pow+0x7c4>)
 8029f2c:	4b94      	ldr	r3, [pc, #592]	@ (802a180 <__ieee754_pow+0x7c8>)
 8029f2e:	f7d7 fd11 	bl	8001954 <__aeabi_dadd>
 8029f32:	0032      	movs	r2, r6
 8029f34:	003b      	movs	r3, r7
 8029f36:	f7d8 fd0d 	bl	8002954 <__aeabi_dmul>
 8029f3a:	4a92      	ldr	r2, [pc, #584]	@ (802a184 <__ieee754_pow+0x7cc>)
 8029f3c:	4b92      	ldr	r3, [pc, #584]	@ (802a188 <__ieee754_pow+0x7d0>)
 8029f3e:	f7d7 fd09 	bl	8001954 <__aeabi_dadd>
 8029f42:	0032      	movs	r2, r6
 8029f44:	003b      	movs	r3, r7
 8029f46:	f7d8 fd05 	bl	8002954 <__aeabi_dmul>
 8029f4a:	4a90      	ldr	r2, [pc, #576]	@ (802a18c <__ieee754_pow+0x7d4>)
 8029f4c:	4b90      	ldr	r3, [pc, #576]	@ (802a190 <__ieee754_pow+0x7d8>)
 8029f4e:	f7d7 fd01 	bl	8001954 <__aeabi_dadd>
 8029f52:	0032      	movs	r2, r6
 8029f54:	0004      	movs	r4, r0
 8029f56:	000d      	movs	r5, r1
 8029f58:	003b      	movs	r3, r7
 8029f5a:	0030      	movs	r0, r6
 8029f5c:	0039      	movs	r1, r7
 8029f5e:	f7d8 fcf9 	bl	8002954 <__aeabi_dmul>
 8029f62:	0002      	movs	r2, r0
 8029f64:	000b      	movs	r3, r1
 8029f66:	0020      	movs	r0, r4
 8029f68:	0029      	movs	r1, r5
 8029f6a:	f7d8 fcf3 	bl	8002954 <__aeabi_dmul>
 8029f6e:	9a00      	ldr	r2, [sp, #0]
 8029f70:	9b01      	ldr	r3, [sp, #4]
 8029f72:	0004      	movs	r4, r0
 8029f74:	000d      	movs	r5, r1
 8029f76:	9808      	ldr	r0, [sp, #32]
 8029f78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029f7a:	f7d7 fceb 	bl	8001954 <__aeabi_dadd>
 8029f7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029f82:	f7d8 fce7 	bl	8002954 <__aeabi_dmul>
 8029f86:	0022      	movs	r2, r4
 8029f88:	002b      	movs	r3, r5
 8029f8a:	f7d7 fce3 	bl	8001954 <__aeabi_dadd>
 8029f8e:	9a00      	ldr	r2, [sp, #0]
 8029f90:	9b01      	ldr	r3, [sp, #4]
 8029f92:	900c      	str	r0, [sp, #48]	@ 0x30
 8029f94:	910d      	str	r1, [sp, #52]	@ 0x34
 8029f96:	0010      	movs	r0, r2
 8029f98:	0019      	movs	r1, r3
 8029f9a:	f7d8 fcdb 	bl	8002954 <__aeabi_dmul>
 8029f9e:	2200      	movs	r2, #0
 8029fa0:	4b7c      	ldr	r3, [pc, #496]	@ (802a194 <__ieee754_pow+0x7dc>)
 8029fa2:	0004      	movs	r4, r0
 8029fa4:	000d      	movs	r5, r1
 8029fa6:	f7d7 fcd5 	bl	8001954 <__aeabi_dadd>
 8029faa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029fac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029fae:	f7d7 fcd1 	bl	8001954 <__aeabi_dadd>
 8029fb2:	2000      	movs	r0, #0
 8029fb4:	000f      	movs	r7, r1
 8029fb6:	0006      	movs	r6, r0
 8029fb8:	0002      	movs	r2, r0
 8029fba:	000b      	movs	r3, r1
 8029fbc:	9800      	ldr	r0, [sp, #0]
 8029fbe:	9901      	ldr	r1, [sp, #4]
 8029fc0:	f7d8 fcc8 	bl	8002954 <__aeabi_dmul>
 8029fc4:	2200      	movs	r2, #0
 8029fc6:	9000      	str	r0, [sp, #0]
 8029fc8:	9101      	str	r1, [sp, #4]
 8029fca:	4b72      	ldr	r3, [pc, #456]	@ (802a194 <__ieee754_pow+0x7dc>)
 8029fcc:	0030      	movs	r0, r6
 8029fce:	0039      	movs	r1, r7
 8029fd0:	f7d8 ffa6 	bl	8002f20 <__aeabi_dsub>
 8029fd4:	0022      	movs	r2, r4
 8029fd6:	002b      	movs	r3, r5
 8029fd8:	f7d8 ffa2 	bl	8002f20 <__aeabi_dsub>
 8029fdc:	0002      	movs	r2, r0
 8029fde:	000b      	movs	r3, r1
 8029fe0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029fe2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029fe4:	f7d8 ff9c 	bl	8002f20 <__aeabi_dsub>
 8029fe8:	9a08      	ldr	r2, [sp, #32]
 8029fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029fec:	f7d8 fcb2 	bl	8002954 <__aeabi_dmul>
 8029ff0:	0032      	movs	r2, r6
 8029ff2:	0004      	movs	r4, r0
 8029ff4:	000d      	movs	r5, r1
 8029ff6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029ff8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029ffa:	003b      	movs	r3, r7
 8029ffc:	f7d8 fcaa 	bl	8002954 <__aeabi_dmul>
 802a000:	0002      	movs	r2, r0
 802a002:	000b      	movs	r3, r1
 802a004:	0020      	movs	r0, r4
 802a006:	0029      	movs	r1, r5
 802a008:	f7d7 fca4 	bl	8001954 <__aeabi_dadd>
 802a00c:	0004      	movs	r4, r0
 802a00e:	000d      	movs	r5, r1
 802a010:	0002      	movs	r2, r0
 802a012:	000b      	movs	r3, r1
 802a014:	9800      	ldr	r0, [sp, #0]
 802a016:	9901      	ldr	r1, [sp, #4]
 802a018:	f7d7 fc9c 	bl	8001954 <__aeabi_dadd>
 802a01c:	22e0      	movs	r2, #224	@ 0xe0
 802a01e:	2000      	movs	r0, #0
 802a020:	4b5d      	ldr	r3, [pc, #372]	@ (802a198 <__ieee754_pow+0x7e0>)
 802a022:	0612      	lsls	r2, r2, #24
 802a024:	0006      	movs	r6, r0
 802a026:	000f      	movs	r7, r1
 802a028:	f7d8 fc94 	bl	8002954 <__aeabi_dmul>
 802a02c:	9008      	str	r0, [sp, #32]
 802a02e:	9109      	str	r1, [sp, #36]	@ 0x24
 802a030:	9a00      	ldr	r2, [sp, #0]
 802a032:	9b01      	ldr	r3, [sp, #4]
 802a034:	0030      	movs	r0, r6
 802a036:	0039      	movs	r1, r7
 802a038:	f7d8 ff72 	bl	8002f20 <__aeabi_dsub>
 802a03c:	0002      	movs	r2, r0
 802a03e:	000b      	movs	r3, r1
 802a040:	0020      	movs	r0, r4
 802a042:	0029      	movs	r1, r5
 802a044:	f7d8 ff6c 	bl	8002f20 <__aeabi_dsub>
 802a048:	4a54      	ldr	r2, [pc, #336]	@ (802a19c <__ieee754_pow+0x7e4>)
 802a04a:	4b53      	ldr	r3, [pc, #332]	@ (802a198 <__ieee754_pow+0x7e0>)
 802a04c:	f7d8 fc82 	bl	8002954 <__aeabi_dmul>
 802a050:	4a53      	ldr	r2, [pc, #332]	@ (802a1a0 <__ieee754_pow+0x7e8>)
 802a052:	0004      	movs	r4, r0
 802a054:	000d      	movs	r5, r1
 802a056:	0030      	movs	r0, r6
 802a058:	0039      	movs	r1, r7
 802a05a:	4b52      	ldr	r3, [pc, #328]	@ (802a1a4 <__ieee754_pow+0x7ec>)
 802a05c:	f7d8 fc7a 	bl	8002954 <__aeabi_dmul>
 802a060:	0002      	movs	r2, r0
 802a062:	000b      	movs	r3, r1
 802a064:	0020      	movs	r0, r4
 802a066:	0029      	movs	r1, r5
 802a068:	f7d7 fc74 	bl	8001954 <__aeabi_dadd>
 802a06c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a06e:	4b4e      	ldr	r3, [pc, #312]	@ (802a1a8 <__ieee754_pow+0x7f0>)
 802a070:	189b      	adds	r3, r3, r2
 802a072:	681a      	ldr	r2, [r3, #0]
 802a074:	685b      	ldr	r3, [r3, #4]
 802a076:	f7d7 fc6d 	bl	8001954 <__aeabi_dadd>
 802a07a:	900a      	str	r0, [sp, #40]	@ 0x28
 802a07c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a07e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a080:	f7d9 fbb6 	bl	80037f0 <__aeabi_i2d>
 802a084:	0004      	movs	r4, r0
 802a086:	000d      	movs	r5, r1
 802a088:	9808      	ldr	r0, [sp, #32]
 802a08a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a08c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a08e:	4b47      	ldr	r3, [pc, #284]	@ (802a1ac <__ieee754_pow+0x7f4>)
 802a090:	189b      	adds	r3, r3, r2
 802a092:	681e      	ldr	r6, [r3, #0]
 802a094:	685f      	ldr	r7, [r3, #4]
 802a096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a09a:	f7d7 fc5b 	bl	8001954 <__aeabi_dadd>
 802a09e:	0032      	movs	r2, r6
 802a0a0:	003b      	movs	r3, r7
 802a0a2:	f7d7 fc57 	bl	8001954 <__aeabi_dadd>
 802a0a6:	0022      	movs	r2, r4
 802a0a8:	002b      	movs	r3, r5
 802a0aa:	f7d7 fc53 	bl	8001954 <__aeabi_dadd>
 802a0ae:	2000      	movs	r0, #0
 802a0b0:	0022      	movs	r2, r4
 802a0b2:	002b      	movs	r3, r5
 802a0b4:	9000      	str	r0, [sp, #0]
 802a0b6:	9101      	str	r1, [sp, #4]
 802a0b8:	f7d8 ff32 	bl	8002f20 <__aeabi_dsub>
 802a0bc:	0032      	movs	r2, r6
 802a0be:	003b      	movs	r3, r7
 802a0c0:	f7d8 ff2e 	bl	8002f20 <__aeabi_dsub>
 802a0c4:	9a08      	ldr	r2, [sp, #32]
 802a0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a0c8:	f7d8 ff2a 	bl	8002f20 <__aeabi_dsub>
 802a0cc:	0002      	movs	r2, r0
 802a0ce:	000b      	movs	r3, r1
 802a0d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802a0d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a0d4:	e61f      	b.n	8029d16 <__ieee754_pow+0x35e>
 802a0d6:	4a36      	ldr	r2, [pc, #216]	@ (802a1b0 <__ieee754_pow+0x7f8>)
 802a0d8:	4b36      	ldr	r3, [pc, #216]	@ (802a1b4 <__ieee754_pow+0x7fc>)
 802a0da:	9804      	ldr	r0, [sp, #16]
 802a0dc:	9905      	ldr	r1, [sp, #20]
 802a0de:	f7d7 fc39 	bl	8001954 <__aeabi_dadd>
 802a0e2:	9a00      	ldr	r2, [sp, #0]
 802a0e4:	9b01      	ldr	r3, [sp, #4]
 802a0e6:	0004      	movs	r4, r0
 802a0e8:	000d      	movs	r5, r1
 802a0ea:	0030      	movs	r0, r6
 802a0ec:	0039      	movs	r1, r7
 802a0ee:	f7d8 ff17 	bl	8002f20 <__aeabi_dsub>
 802a0f2:	0002      	movs	r2, r0
 802a0f4:	000b      	movs	r3, r1
 802a0f6:	0020      	movs	r0, r4
 802a0f8:	0029      	movs	r1, r5
 802a0fa:	f7d6 f9f3 	bl	80004e4 <__aeabi_dcmpgt>
 802a0fe:	2800      	cmp	r0, #0
 802a100:	d000      	beq.n	802a104 <__ieee754_pow+0x74c>
 802a102:	e646      	b.n	8029d92 <__ieee754_pow+0x3da>
 802a104:	4b2c      	ldr	r3, [pc, #176]	@ (802a1b8 <__ieee754_pow+0x800>)
 802a106:	e063      	b.n	802a1d0 <__ieee754_pow+0x818>
 802a108:	4a2c      	ldr	r2, [pc, #176]	@ (802a1bc <__ieee754_pow+0x804>)
 802a10a:	004b      	lsls	r3, r1, #1
 802a10c:	085b      	lsrs	r3, r3, #1
 802a10e:	4293      	cmp	r3, r2
 802a110:	d95a      	bls.n	802a1c8 <__ieee754_pow+0x810>
 802a112:	4b2b      	ldr	r3, [pc, #172]	@ (802a1c0 <__ieee754_pow+0x808>)
 802a114:	18cb      	adds	r3, r1, r3
 802a116:	4303      	orrs	r3, r0
 802a118:	d008      	beq.n	802a12c <__ieee754_pow+0x774>
 802a11a:	9806      	ldr	r0, [sp, #24]
 802a11c:	9907      	ldr	r1, [sp, #28]
 802a11e:	2300      	movs	r3, #0
 802a120:	2200      	movs	r2, #0
 802a122:	f7d6 f9cb 	bl	80004bc <__aeabi_dcmplt>
 802a126:	1e43      	subs	r3, r0, #1
 802a128:	4198      	sbcs	r0, r3
 802a12a:	e567      	b.n	8029bfc <__ieee754_pow+0x244>
 802a12c:	9a00      	ldr	r2, [sp, #0]
 802a12e:	9b01      	ldr	r3, [sp, #4]
 802a130:	f7d8 fef6 	bl	8002f20 <__aeabi_dsub>
 802a134:	9a04      	ldr	r2, [sp, #16]
 802a136:	9b05      	ldr	r3, [sp, #20]
 802a138:	f7d6 f9de 	bl	80004f8 <__aeabi_dcmpge>
 802a13c:	2800      	cmp	r0, #0
 802a13e:	d1ec      	bne.n	802a11a <__ieee754_pow+0x762>
 802a140:	4b20      	ldr	r3, [pc, #128]	@ (802a1c4 <__ieee754_pow+0x80c>)
 802a142:	e045      	b.n	802a1d0 <__ieee754_pow+0x818>
 802a144:	7ff00000 	.word	0x7ff00000
 802a148:	43400000 	.word	0x43400000
 802a14c:	fffffc01 	.word	0xfffffc01
 802a150:	3ff00000 	.word	0x3ff00000
 802a154:	0003988e 	.word	0x0003988e
 802a158:	000bb679 	.word	0x000bb679
 802a15c:	fff00000 	.word	0xfff00000
 802a160:	0802f940 	.word	0x0802f940
 802a164:	4a454eef 	.word	0x4a454eef
 802a168:	3fca7e28 	.word	0x3fca7e28
 802a16c:	93c9db65 	.word	0x93c9db65
 802a170:	3fcd864a 	.word	0x3fcd864a
 802a174:	a91d4101 	.word	0xa91d4101
 802a178:	3fd17460 	.word	0x3fd17460
 802a17c:	518f264d 	.word	0x518f264d
 802a180:	3fd55555 	.word	0x3fd55555
 802a184:	db6fabff 	.word	0xdb6fabff
 802a188:	3fdb6db6 	.word	0x3fdb6db6
 802a18c:	33333303 	.word	0x33333303
 802a190:	3fe33333 	.word	0x3fe33333
 802a194:	40080000 	.word	0x40080000
 802a198:	3feec709 	.word	0x3feec709
 802a19c:	dc3a03fd 	.word	0xdc3a03fd
 802a1a0:	145b01f5 	.word	0x145b01f5
 802a1a4:	be3e2fe0 	.word	0xbe3e2fe0
 802a1a8:	0802f920 	.word	0x0802f920
 802a1ac:	0802f930 	.word	0x0802f930
 802a1b0:	652b82fe 	.word	0x652b82fe
 802a1b4:	3c971547 	.word	0x3c971547
 802a1b8:	40900000 	.word	0x40900000
 802a1bc:	4090cbff 	.word	0x4090cbff
 802a1c0:	3f6f3400 	.word	0x3f6f3400
 802a1c4:	4090cc00 	.word	0x4090cc00
 802a1c8:	4a73      	ldr	r2, [pc, #460]	@ (802a398 <__ieee754_pow+0x9e0>)
 802a1ca:	9402      	str	r4, [sp, #8]
 802a1cc:	4293      	cmp	r3, r2
 802a1ce:	d925      	bls.n	802a21c <__ieee754_pow+0x864>
 802a1d0:	4a72      	ldr	r2, [pc, #456]	@ (802a39c <__ieee754_pow+0x9e4>)
 802a1d2:	151b      	asrs	r3, r3, #20
 802a1d4:	189b      	adds	r3, r3, r2
 802a1d6:	2280      	movs	r2, #128	@ 0x80
 802a1d8:	0352      	lsls	r2, r2, #13
 802a1da:	0011      	movs	r1, r2
 802a1dc:	4119      	asrs	r1, r3
 802a1de:	19cb      	adds	r3, r1, r7
 802a1e0:	005c      	lsls	r4, r3, #1
 802a1e2:	496f      	ldr	r1, [pc, #444]	@ (802a3a0 <__ieee754_pow+0x9e8>)
 802a1e4:	4d6f      	ldr	r5, [pc, #444]	@ (802a3a4 <__ieee754_pow+0x9ec>)
 802a1e6:	0d64      	lsrs	r4, r4, #21
 802a1e8:	1864      	adds	r4, r4, r1
 802a1ea:	4125      	asrs	r5, r4
 802a1ec:	401d      	ands	r5, r3
 802a1ee:	031b      	lsls	r3, r3, #12
 802a1f0:	0b1b      	lsrs	r3, r3, #12
 802a1f2:	4313      	orrs	r3, r2
 802a1f4:	2214      	movs	r2, #20
 802a1f6:	1b12      	subs	r2, r2, r4
 802a1f8:	4113      	asrs	r3, r2
 802a1fa:	9302      	str	r3, [sp, #8]
 802a1fc:	9b08      	ldr	r3, [sp, #32]
 802a1fe:	2000      	movs	r0, #0
 802a200:	0029      	movs	r1, r5
 802a202:	2b00      	cmp	r3, #0
 802a204:	da02      	bge.n	802a20c <__ieee754_pow+0x854>
 802a206:	9b02      	ldr	r3, [sp, #8]
 802a208:	425b      	negs	r3, r3
 802a20a:	9302      	str	r3, [sp, #8]
 802a20c:	0002      	movs	r2, r0
 802a20e:	000b      	movs	r3, r1
 802a210:	9800      	ldr	r0, [sp, #0]
 802a212:	9901      	ldr	r1, [sp, #4]
 802a214:	f7d8 fe84 	bl	8002f20 <__aeabi_dsub>
 802a218:	9000      	str	r0, [sp, #0]
 802a21a:	9101      	str	r1, [sp, #4]
 802a21c:	9a04      	ldr	r2, [sp, #16]
 802a21e:	9b05      	ldr	r3, [sp, #20]
 802a220:	9800      	ldr	r0, [sp, #0]
 802a222:	9901      	ldr	r1, [sp, #4]
 802a224:	f7d7 fb96 	bl	8001954 <__aeabi_dadd>
 802a228:	2000      	movs	r0, #0
 802a22a:	2200      	movs	r2, #0
 802a22c:	4b5e      	ldr	r3, [pc, #376]	@ (802a3a8 <__ieee754_pow+0x9f0>)
 802a22e:	0006      	movs	r6, r0
 802a230:	000f      	movs	r7, r1
 802a232:	f7d8 fb8f 	bl	8002954 <__aeabi_dmul>
 802a236:	9a00      	ldr	r2, [sp, #0]
 802a238:	9b01      	ldr	r3, [sp, #4]
 802a23a:	9008      	str	r0, [sp, #32]
 802a23c:	9109      	str	r1, [sp, #36]	@ 0x24
 802a23e:	0030      	movs	r0, r6
 802a240:	0039      	movs	r1, r7
 802a242:	f7d8 fe6d 	bl	8002f20 <__aeabi_dsub>
 802a246:	0002      	movs	r2, r0
 802a248:	000b      	movs	r3, r1
 802a24a:	9804      	ldr	r0, [sp, #16]
 802a24c:	9905      	ldr	r1, [sp, #20]
 802a24e:	f7d8 fe67 	bl	8002f20 <__aeabi_dsub>
 802a252:	4a56      	ldr	r2, [pc, #344]	@ (802a3ac <__ieee754_pow+0x9f4>)
 802a254:	4b56      	ldr	r3, [pc, #344]	@ (802a3b0 <__ieee754_pow+0x9f8>)
 802a256:	f7d8 fb7d 	bl	8002954 <__aeabi_dmul>
 802a25a:	4a56      	ldr	r2, [pc, #344]	@ (802a3b4 <__ieee754_pow+0x9fc>)
 802a25c:	0004      	movs	r4, r0
 802a25e:	000d      	movs	r5, r1
 802a260:	0030      	movs	r0, r6
 802a262:	0039      	movs	r1, r7
 802a264:	4b54      	ldr	r3, [pc, #336]	@ (802a3b8 <__ieee754_pow+0xa00>)
 802a266:	f7d8 fb75 	bl	8002954 <__aeabi_dmul>
 802a26a:	0002      	movs	r2, r0
 802a26c:	000b      	movs	r3, r1
 802a26e:	0020      	movs	r0, r4
 802a270:	0029      	movs	r1, r5
 802a272:	f7d7 fb6f 	bl	8001954 <__aeabi_dadd>
 802a276:	0004      	movs	r4, r0
 802a278:	000d      	movs	r5, r1
 802a27a:	0002      	movs	r2, r0
 802a27c:	000b      	movs	r3, r1
 802a27e:	9808      	ldr	r0, [sp, #32]
 802a280:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a282:	f7d7 fb67 	bl	8001954 <__aeabi_dadd>
 802a286:	9a08      	ldr	r2, [sp, #32]
 802a288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a28a:	0006      	movs	r6, r0
 802a28c:	000f      	movs	r7, r1
 802a28e:	f7d8 fe47 	bl	8002f20 <__aeabi_dsub>
 802a292:	0002      	movs	r2, r0
 802a294:	000b      	movs	r3, r1
 802a296:	0020      	movs	r0, r4
 802a298:	0029      	movs	r1, r5
 802a29a:	f7d8 fe41 	bl	8002f20 <__aeabi_dsub>
 802a29e:	0032      	movs	r2, r6
 802a2a0:	9000      	str	r0, [sp, #0]
 802a2a2:	9101      	str	r1, [sp, #4]
 802a2a4:	003b      	movs	r3, r7
 802a2a6:	0030      	movs	r0, r6
 802a2a8:	0039      	movs	r1, r7
 802a2aa:	f7d8 fb53 	bl	8002954 <__aeabi_dmul>
 802a2ae:	0004      	movs	r4, r0
 802a2b0:	000d      	movs	r5, r1
 802a2b2:	4a42      	ldr	r2, [pc, #264]	@ (802a3bc <__ieee754_pow+0xa04>)
 802a2b4:	4b42      	ldr	r3, [pc, #264]	@ (802a3c0 <__ieee754_pow+0xa08>)
 802a2b6:	f7d8 fb4d 	bl	8002954 <__aeabi_dmul>
 802a2ba:	4a42      	ldr	r2, [pc, #264]	@ (802a3c4 <__ieee754_pow+0xa0c>)
 802a2bc:	4b42      	ldr	r3, [pc, #264]	@ (802a3c8 <__ieee754_pow+0xa10>)
 802a2be:	f7d8 fe2f 	bl	8002f20 <__aeabi_dsub>
 802a2c2:	0022      	movs	r2, r4
 802a2c4:	002b      	movs	r3, r5
 802a2c6:	f7d8 fb45 	bl	8002954 <__aeabi_dmul>
 802a2ca:	4a40      	ldr	r2, [pc, #256]	@ (802a3cc <__ieee754_pow+0xa14>)
 802a2cc:	4b40      	ldr	r3, [pc, #256]	@ (802a3d0 <__ieee754_pow+0xa18>)
 802a2ce:	f7d7 fb41 	bl	8001954 <__aeabi_dadd>
 802a2d2:	0022      	movs	r2, r4
 802a2d4:	002b      	movs	r3, r5
 802a2d6:	f7d8 fb3d 	bl	8002954 <__aeabi_dmul>
 802a2da:	4a3e      	ldr	r2, [pc, #248]	@ (802a3d4 <__ieee754_pow+0xa1c>)
 802a2dc:	4b3e      	ldr	r3, [pc, #248]	@ (802a3d8 <__ieee754_pow+0xa20>)
 802a2de:	f7d8 fe1f 	bl	8002f20 <__aeabi_dsub>
 802a2e2:	0022      	movs	r2, r4
 802a2e4:	002b      	movs	r3, r5
 802a2e6:	f7d8 fb35 	bl	8002954 <__aeabi_dmul>
 802a2ea:	4a3c      	ldr	r2, [pc, #240]	@ (802a3dc <__ieee754_pow+0xa24>)
 802a2ec:	4b3c      	ldr	r3, [pc, #240]	@ (802a3e0 <__ieee754_pow+0xa28>)
 802a2ee:	f7d7 fb31 	bl	8001954 <__aeabi_dadd>
 802a2f2:	0022      	movs	r2, r4
 802a2f4:	002b      	movs	r3, r5
 802a2f6:	f7d8 fb2d 	bl	8002954 <__aeabi_dmul>
 802a2fa:	0002      	movs	r2, r0
 802a2fc:	000b      	movs	r3, r1
 802a2fe:	0030      	movs	r0, r6
 802a300:	0039      	movs	r1, r7
 802a302:	f7d8 fe0d 	bl	8002f20 <__aeabi_dsub>
 802a306:	0004      	movs	r4, r0
 802a308:	000d      	movs	r5, r1
 802a30a:	0002      	movs	r2, r0
 802a30c:	000b      	movs	r3, r1
 802a30e:	0030      	movs	r0, r6
 802a310:	0039      	movs	r1, r7
 802a312:	f7d8 fb1f 	bl	8002954 <__aeabi_dmul>
 802a316:	2380      	movs	r3, #128	@ 0x80
 802a318:	9004      	str	r0, [sp, #16]
 802a31a:	9105      	str	r1, [sp, #20]
 802a31c:	2200      	movs	r2, #0
 802a31e:	0020      	movs	r0, r4
 802a320:	0029      	movs	r1, r5
 802a322:	05db      	lsls	r3, r3, #23
 802a324:	f7d8 fdfc 	bl	8002f20 <__aeabi_dsub>
 802a328:	0002      	movs	r2, r0
 802a32a:	000b      	movs	r3, r1
 802a32c:	9804      	ldr	r0, [sp, #16]
 802a32e:	9905      	ldr	r1, [sp, #20]
 802a330:	f7d7 fed6 	bl	80020e0 <__aeabi_ddiv>
 802a334:	9a00      	ldr	r2, [sp, #0]
 802a336:	9b01      	ldr	r3, [sp, #4]
 802a338:	0004      	movs	r4, r0
 802a33a:	000d      	movs	r5, r1
 802a33c:	0030      	movs	r0, r6
 802a33e:	0039      	movs	r1, r7
 802a340:	f7d8 fb08 	bl	8002954 <__aeabi_dmul>
 802a344:	9a00      	ldr	r2, [sp, #0]
 802a346:	9b01      	ldr	r3, [sp, #4]
 802a348:	f7d7 fb04 	bl	8001954 <__aeabi_dadd>
 802a34c:	0002      	movs	r2, r0
 802a34e:	000b      	movs	r3, r1
 802a350:	0020      	movs	r0, r4
 802a352:	0029      	movs	r1, r5
 802a354:	f7d8 fde4 	bl	8002f20 <__aeabi_dsub>
 802a358:	0032      	movs	r2, r6
 802a35a:	003b      	movs	r3, r7
 802a35c:	f7d8 fde0 	bl	8002f20 <__aeabi_dsub>
 802a360:	0002      	movs	r2, r0
 802a362:	000b      	movs	r3, r1
 802a364:	2000      	movs	r0, #0
 802a366:	491f      	ldr	r1, [pc, #124]	@ (802a3e4 <__ieee754_pow+0xa2c>)
 802a368:	f7d8 fdda 	bl	8002f20 <__aeabi_dsub>
 802a36c:	9b02      	ldr	r3, [sp, #8]
 802a36e:	051b      	lsls	r3, r3, #20
 802a370:	185b      	adds	r3, r3, r1
 802a372:	151a      	asrs	r2, r3, #20
 802a374:	2a00      	cmp	r2, #0
 802a376:	dc06      	bgt.n	802a386 <__ieee754_pow+0x9ce>
 802a378:	9a02      	ldr	r2, [sp, #8]
 802a37a:	f000 f929 	bl	802a5d0 <scalbn>
 802a37e:	9a06      	ldr	r2, [sp, #24]
 802a380:	9b07      	ldr	r3, [sp, #28]
 802a382:	f7ff fb8b 	bl	8029a9c <__ieee754_pow+0xe4>
 802a386:	0019      	movs	r1, r3
 802a388:	e7f9      	b.n	802a37e <__ieee754_pow+0x9c6>
 802a38a:	2300      	movs	r3, #0
 802a38c:	4c15      	ldr	r4, [pc, #84]	@ (802a3e4 <__ieee754_pow+0xa2c>)
 802a38e:	9300      	str	r3, [sp, #0]
 802a390:	9401      	str	r4, [sp, #4]
 802a392:	f7ff fbc8 	bl	8029b26 <__ieee754_pow+0x16e>
 802a396:	46c0      	nop			@ (mov r8, r8)
 802a398:	3fe00000 	.word	0x3fe00000
 802a39c:	fffffc02 	.word	0xfffffc02
 802a3a0:	fffffc01 	.word	0xfffffc01
 802a3a4:	fff00000 	.word	0xfff00000
 802a3a8:	3fe62e43 	.word	0x3fe62e43
 802a3ac:	fefa39ef 	.word	0xfefa39ef
 802a3b0:	3fe62e42 	.word	0x3fe62e42
 802a3b4:	0ca86c39 	.word	0x0ca86c39
 802a3b8:	be205c61 	.word	0xbe205c61
 802a3bc:	72bea4d0 	.word	0x72bea4d0
 802a3c0:	3e663769 	.word	0x3e663769
 802a3c4:	c5d26bf1 	.word	0xc5d26bf1
 802a3c8:	3ebbbd41 	.word	0x3ebbbd41
 802a3cc:	af25de2c 	.word	0xaf25de2c
 802a3d0:	3f11566a 	.word	0x3f11566a
 802a3d4:	16bebd93 	.word	0x16bebd93
 802a3d8:	3f66c16c 	.word	0x3f66c16c
 802a3dc:	5555553e 	.word	0x5555553e
 802a3e0:	3fc55555 	.word	0x3fc55555
 802a3e4:	3ff00000 	.word	0x3ff00000

0802a3e8 <fabs>:
 802a3e8:	0049      	lsls	r1, r1, #1
 802a3ea:	084b      	lsrs	r3, r1, #1
 802a3ec:	0019      	movs	r1, r3
 802a3ee:	4770      	bx	lr

0802a3f0 <__ieee754_expf>:
 802a3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a3f2:	21ff      	movs	r1, #255	@ 0xff
 802a3f4:	0043      	lsls	r3, r0, #1
 802a3f6:	1c04      	adds	r4, r0, #0
 802a3f8:	085b      	lsrs	r3, r3, #1
 802a3fa:	05c9      	lsls	r1, r1, #23
 802a3fc:	428b      	cmp	r3, r1
 802a3fe:	d904      	bls.n	802a40a <__ieee754_expf+0x1a>
 802a400:	1c01      	adds	r1, r0, #0
 802a402:	1c20      	adds	r0, r4, #0
 802a404:	f7d6 fa5c 	bl	80008c0 <__aeabi_fadd>
 802a408:	e00d      	b.n	802a426 <__ieee754_expf+0x36>
 802a40a:	0fc6      	lsrs	r6, r0, #31
 802a40c:	428b      	cmp	r3, r1
 802a40e:	d104      	bne.n	802a41a <__ieee754_expf+0x2a>
 802a410:	2e00      	cmp	r6, #0
 802a412:	d000      	beq.n	802a416 <__ieee754_expf+0x26>
 802a414:	e0ba      	b.n	802a58c <__ieee754_expf+0x19c>
 802a416:	1c20      	adds	r0, r4, #0
 802a418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802a41a:	495d      	ldr	r1, [pc, #372]	@ (802a590 <__ieee754_expf+0x1a0>)
 802a41c:	4288      	cmp	r0, r1
 802a41e:	dd04      	ble.n	802a42a <__ieee754_expf+0x3a>
 802a420:	2000      	movs	r0, #0
 802a422:	f000 f98a 	bl	802a73a <__math_oflowf>
 802a426:	1c04      	adds	r4, r0, #0
 802a428:	e7f5      	b.n	802a416 <__ieee754_expf+0x26>
 802a42a:	2800      	cmp	r0, #0
 802a42c:	da06      	bge.n	802a43c <__ieee754_expf+0x4c>
 802a42e:	4a59      	ldr	r2, [pc, #356]	@ (802a594 <__ieee754_expf+0x1a4>)
 802a430:	4293      	cmp	r3, r2
 802a432:	d903      	bls.n	802a43c <__ieee754_expf+0x4c>
 802a434:	2000      	movs	r0, #0
 802a436:	f000 f97a 	bl	802a72e <__math_uflowf>
 802a43a:	e7f4      	b.n	802a426 <__ieee754_expf+0x36>
 802a43c:	4a56      	ldr	r2, [pc, #344]	@ (802a598 <__ieee754_expf+0x1a8>)
 802a43e:	4293      	cmp	r3, r2
 802a440:	d96e      	bls.n	802a520 <__ieee754_expf+0x130>
 802a442:	4a56      	ldr	r2, [pc, #344]	@ (802a59c <__ieee754_expf+0x1ac>)
 802a444:	00b5      	lsls	r5, r6, #2
 802a446:	4293      	cmp	r3, r2
 802a448:	d84e      	bhi.n	802a4e8 <__ieee754_expf+0xf8>
 802a44a:	4b55      	ldr	r3, [pc, #340]	@ (802a5a0 <__ieee754_expf+0x1b0>)
 802a44c:	1c20      	adds	r0, r4, #0
 802a44e:	5959      	ldr	r1, [r3, r5]
 802a450:	f7d6 ff50 	bl	80012f4 <__aeabi_fsub>
 802a454:	4b53      	ldr	r3, [pc, #332]	@ (802a5a4 <__ieee754_expf+0x1b4>)
 802a456:	1c07      	adds	r7, r0, #0
 802a458:	595b      	ldr	r3, [r3, r5]
 802a45a:	2501      	movs	r5, #1
 802a45c:	4075      	eors	r5, r6
 802a45e:	9300      	str	r3, [sp, #0]
 802a460:	1bad      	subs	r5, r5, r6
 802a462:	9900      	ldr	r1, [sp, #0]
 802a464:	1c38      	adds	r0, r7, #0
 802a466:	f7d6 ff45 	bl	80012f4 <__aeabi_fsub>
 802a46a:	1c04      	adds	r4, r0, #0
 802a46c:	1c21      	adds	r1, r4, #0
 802a46e:	1c20      	adds	r0, r4, #0
 802a470:	f7d6 fde6 	bl	8001040 <__aeabi_fmul>
 802a474:	494c      	ldr	r1, [pc, #304]	@ (802a5a8 <__ieee754_expf+0x1b8>)
 802a476:	1c06      	adds	r6, r0, #0
 802a478:	f7d6 fde2 	bl	8001040 <__aeabi_fmul>
 802a47c:	494b      	ldr	r1, [pc, #300]	@ (802a5ac <__ieee754_expf+0x1bc>)
 802a47e:	f7d6 ff39 	bl	80012f4 <__aeabi_fsub>
 802a482:	1c31      	adds	r1, r6, #0
 802a484:	f7d6 fddc 	bl	8001040 <__aeabi_fmul>
 802a488:	4949      	ldr	r1, [pc, #292]	@ (802a5b0 <__ieee754_expf+0x1c0>)
 802a48a:	f7d6 fa19 	bl	80008c0 <__aeabi_fadd>
 802a48e:	1c31      	adds	r1, r6, #0
 802a490:	f7d6 fdd6 	bl	8001040 <__aeabi_fmul>
 802a494:	4947      	ldr	r1, [pc, #284]	@ (802a5b4 <__ieee754_expf+0x1c4>)
 802a496:	f7d6 ff2d 	bl	80012f4 <__aeabi_fsub>
 802a49a:	1c31      	adds	r1, r6, #0
 802a49c:	f7d6 fdd0 	bl	8001040 <__aeabi_fmul>
 802a4a0:	4945      	ldr	r1, [pc, #276]	@ (802a5b8 <__ieee754_expf+0x1c8>)
 802a4a2:	f7d6 fa0d 	bl	80008c0 <__aeabi_fadd>
 802a4a6:	1c31      	adds	r1, r6, #0
 802a4a8:	f7d6 fdca 	bl	8001040 <__aeabi_fmul>
 802a4ac:	1c01      	adds	r1, r0, #0
 802a4ae:	1c20      	adds	r0, r4, #0
 802a4b0:	f7d6 ff20 	bl	80012f4 <__aeabi_fsub>
 802a4b4:	1c01      	adds	r1, r0, #0
 802a4b6:	1c06      	adds	r6, r0, #0
 802a4b8:	1c20      	adds	r0, r4, #0
 802a4ba:	f7d6 fdc1 	bl	8001040 <__aeabi_fmul>
 802a4be:	9001      	str	r0, [sp, #4]
 802a4c0:	2d00      	cmp	r5, #0
 802a4c2:	d140      	bne.n	802a546 <__ieee754_expf+0x156>
 802a4c4:	2180      	movs	r1, #128	@ 0x80
 802a4c6:	1c30      	adds	r0, r6, #0
 802a4c8:	05c9      	lsls	r1, r1, #23
 802a4ca:	f7d6 ff13 	bl	80012f4 <__aeabi_fsub>
 802a4ce:	1c01      	adds	r1, r0, #0
 802a4d0:	9801      	ldr	r0, [sp, #4]
 802a4d2:	f7d6 fbe7 	bl	8000ca4 <__aeabi_fdiv>
 802a4d6:	1c21      	adds	r1, r4, #0
 802a4d8:	f7d6 ff0c 	bl	80012f4 <__aeabi_fsub>
 802a4dc:	1c01      	adds	r1, r0, #0
 802a4de:	20fe      	movs	r0, #254	@ 0xfe
 802a4e0:	0580      	lsls	r0, r0, #22
 802a4e2:	f7d6 ff07 	bl	80012f4 <__aeabi_fsub>
 802a4e6:	e79e      	b.n	802a426 <__ieee754_expf+0x36>
 802a4e8:	4934      	ldr	r1, [pc, #208]	@ (802a5bc <__ieee754_expf+0x1cc>)
 802a4ea:	1c20      	adds	r0, r4, #0
 802a4ec:	f7d6 fda8 	bl	8001040 <__aeabi_fmul>
 802a4f0:	4b33      	ldr	r3, [pc, #204]	@ (802a5c0 <__ieee754_expf+0x1d0>)
 802a4f2:	5959      	ldr	r1, [r3, r5]
 802a4f4:	f7d6 f9e4 	bl	80008c0 <__aeabi_fadd>
 802a4f8:	f7d7 f976 	bl	80017e8 <__aeabi_f2iz>
 802a4fc:	0005      	movs	r5, r0
 802a4fe:	f7d7 f993 	bl	8001828 <__aeabi_i2f>
 802a502:	4930      	ldr	r1, [pc, #192]	@ (802a5c4 <__ieee754_expf+0x1d4>)
 802a504:	1c06      	adds	r6, r0, #0
 802a506:	f7d6 fd9b 	bl	8001040 <__aeabi_fmul>
 802a50a:	1c01      	adds	r1, r0, #0
 802a50c:	1c20      	adds	r0, r4, #0
 802a50e:	f7d6 fef1 	bl	80012f4 <__aeabi_fsub>
 802a512:	492d      	ldr	r1, [pc, #180]	@ (802a5c8 <__ieee754_expf+0x1d8>)
 802a514:	1c07      	adds	r7, r0, #0
 802a516:	1c30      	adds	r0, r6, #0
 802a518:	f7d6 fd92 	bl	8001040 <__aeabi_fmul>
 802a51c:	9000      	str	r0, [sp, #0]
 802a51e:	e7a0      	b.n	802a462 <__ieee754_expf+0x72>
 802a520:	22d0      	movs	r2, #208	@ 0xd0
 802a522:	0592      	lsls	r2, r2, #22
 802a524:	4293      	cmp	r3, r2
 802a526:	d20c      	bcs.n	802a542 <__ieee754_expf+0x152>
 802a528:	4928      	ldr	r1, [pc, #160]	@ (802a5cc <__ieee754_expf+0x1dc>)
 802a52a:	1c20      	adds	r0, r4, #0
 802a52c:	f7d6 f9c8 	bl	80008c0 <__aeabi_fadd>
 802a530:	21fe      	movs	r1, #254	@ 0xfe
 802a532:	0589      	lsls	r1, r1, #22
 802a534:	f7d6 f810 	bl	8000558 <__aeabi_fcmpgt>
 802a538:	1e05      	subs	r5, r0, #0
 802a53a:	d097      	beq.n	802a46c <__ieee754_expf+0x7c>
 802a53c:	21fe      	movs	r1, #254	@ 0xfe
 802a53e:	0589      	lsls	r1, r1, #22
 802a540:	e75f      	b.n	802a402 <__ieee754_expf+0x12>
 802a542:	2500      	movs	r5, #0
 802a544:	e792      	b.n	802a46c <__ieee754_expf+0x7c>
 802a546:	2080      	movs	r0, #128	@ 0x80
 802a548:	1c31      	adds	r1, r6, #0
 802a54a:	05c0      	lsls	r0, r0, #23
 802a54c:	f7d6 fed2 	bl	80012f4 <__aeabi_fsub>
 802a550:	1c01      	adds	r1, r0, #0
 802a552:	9801      	ldr	r0, [sp, #4]
 802a554:	f7d6 fba6 	bl	8000ca4 <__aeabi_fdiv>
 802a558:	1c01      	adds	r1, r0, #0
 802a55a:	9800      	ldr	r0, [sp, #0]
 802a55c:	f7d6 feca 	bl	80012f4 <__aeabi_fsub>
 802a560:	1c39      	adds	r1, r7, #0
 802a562:	f7d6 fec7 	bl	80012f4 <__aeabi_fsub>
 802a566:	1c01      	adds	r1, r0, #0
 802a568:	20fe      	movs	r0, #254	@ 0xfe
 802a56a:	0580      	lsls	r0, r0, #22
 802a56c:	f7d6 fec2 	bl	80012f4 <__aeabi_fsub>
 802a570:	002b      	movs	r3, r5
 802a572:	337d      	adds	r3, #125	@ 0x7d
 802a574:	db02      	blt.n	802a57c <__ieee754_expf+0x18c>
 802a576:	05ec      	lsls	r4, r5, #23
 802a578:	1824      	adds	r4, r4, r0
 802a57a:	e74c      	b.n	802a416 <__ieee754_expf+0x26>
 802a57c:	21d8      	movs	r1, #216	@ 0xd8
 802a57e:	3564      	adds	r5, #100	@ 0x64
 802a580:	05ed      	lsls	r5, r5, #23
 802a582:	1828      	adds	r0, r5, r0
 802a584:	0509      	lsls	r1, r1, #20
 802a586:	f7d6 fd5b 	bl	8001040 <__aeabi_fmul>
 802a58a:	e74c      	b.n	802a426 <__ieee754_expf+0x36>
 802a58c:	2400      	movs	r4, #0
 802a58e:	e742      	b.n	802a416 <__ieee754_expf+0x26>
 802a590:	42b17217 	.word	0x42b17217
 802a594:	42cff1b5 	.word	0x42cff1b5
 802a598:	3eb17218 	.word	0x3eb17218
 802a59c:	3f851591 	.word	0x3f851591
 802a5a0:	0802f958 	.word	0x0802f958
 802a5a4:	0802f950 	.word	0x0802f950
 802a5a8:	3331bb4c 	.word	0x3331bb4c
 802a5ac:	35ddea0e 	.word	0x35ddea0e
 802a5b0:	388ab355 	.word	0x388ab355
 802a5b4:	3b360b61 	.word	0x3b360b61
 802a5b8:	3e2aaaab 	.word	0x3e2aaaab
 802a5bc:	3fb8aa3b 	.word	0x3fb8aa3b
 802a5c0:	0802f960 	.word	0x0802f960
 802a5c4:	3f317180 	.word	0x3f317180
 802a5c8:	3717f7d1 	.word	0x3717f7d1
 802a5cc:	7149f2ca 	.word	0x7149f2ca

0802a5d0 <scalbn>:
 802a5d0:	004b      	lsls	r3, r1, #1
 802a5d2:	b570      	push	{r4, r5, r6, lr}
 802a5d4:	0d5b      	lsrs	r3, r3, #21
 802a5d6:	0014      	movs	r4, r2
 802a5d8:	000d      	movs	r5, r1
 802a5da:	2b00      	cmp	r3, #0
 802a5dc:	d10f      	bne.n	802a5fe <scalbn+0x2e>
 802a5de:	004b      	lsls	r3, r1, #1
 802a5e0:	085b      	lsrs	r3, r3, #1
 802a5e2:	4303      	orrs	r3, r0
 802a5e4:	d012      	beq.n	802a60c <scalbn+0x3c>
 802a5e6:	4b23      	ldr	r3, [pc, #140]	@ (802a674 <scalbn+0xa4>)
 802a5e8:	2200      	movs	r2, #0
 802a5ea:	f7d8 f9b3 	bl	8002954 <__aeabi_dmul>
 802a5ee:	4b22      	ldr	r3, [pc, #136]	@ (802a678 <scalbn+0xa8>)
 802a5f0:	429c      	cmp	r4, r3
 802a5f2:	da0c      	bge.n	802a60e <scalbn+0x3e>
 802a5f4:	4a21      	ldr	r2, [pc, #132]	@ (802a67c <scalbn+0xac>)
 802a5f6:	4b22      	ldr	r3, [pc, #136]	@ (802a680 <scalbn+0xb0>)
 802a5f8:	f7d8 f9ac 	bl	8002954 <__aeabi_dmul>
 802a5fc:	e006      	b.n	802a60c <scalbn+0x3c>
 802a5fe:	4a21      	ldr	r2, [pc, #132]	@ (802a684 <scalbn+0xb4>)
 802a600:	4293      	cmp	r3, r2
 802a602:	d108      	bne.n	802a616 <scalbn+0x46>
 802a604:	0002      	movs	r2, r0
 802a606:	000b      	movs	r3, r1
 802a608:	f7d7 f9a4 	bl	8001954 <__aeabi_dadd>
 802a60c:	bd70      	pop	{r4, r5, r6, pc}
 802a60e:	000d      	movs	r5, r1
 802a610:	004b      	lsls	r3, r1, #1
 802a612:	0d5b      	lsrs	r3, r3, #21
 802a614:	3b36      	subs	r3, #54	@ 0x36
 802a616:	4a1c      	ldr	r2, [pc, #112]	@ (802a688 <scalbn+0xb8>)
 802a618:	4294      	cmp	r4, r2
 802a61a:	dd0a      	ble.n	802a632 <scalbn+0x62>
 802a61c:	4c1b      	ldr	r4, [pc, #108]	@ (802a68c <scalbn+0xbc>)
 802a61e:	4d1c      	ldr	r5, [pc, #112]	@ (802a690 <scalbn+0xc0>)
 802a620:	2900      	cmp	r1, #0
 802a622:	da01      	bge.n	802a628 <scalbn+0x58>
 802a624:	4c19      	ldr	r4, [pc, #100]	@ (802a68c <scalbn+0xbc>)
 802a626:	4d1b      	ldr	r5, [pc, #108]	@ (802a694 <scalbn+0xc4>)
 802a628:	4a18      	ldr	r2, [pc, #96]	@ (802a68c <scalbn+0xbc>)
 802a62a:	4b19      	ldr	r3, [pc, #100]	@ (802a690 <scalbn+0xc0>)
 802a62c:	0020      	movs	r0, r4
 802a62e:	0029      	movs	r1, r5
 802a630:	e7e2      	b.n	802a5f8 <scalbn+0x28>
 802a632:	18e2      	adds	r2, r4, r3
 802a634:	4b18      	ldr	r3, [pc, #96]	@ (802a698 <scalbn+0xc8>)
 802a636:	429a      	cmp	r2, r3
 802a638:	dcf0      	bgt.n	802a61c <scalbn+0x4c>
 802a63a:	2a00      	cmp	r2, #0
 802a63c:	dd05      	ble.n	802a64a <scalbn+0x7a>
 802a63e:	4b17      	ldr	r3, [pc, #92]	@ (802a69c <scalbn+0xcc>)
 802a640:	0512      	lsls	r2, r2, #20
 802a642:	402b      	ands	r3, r5
 802a644:	4313      	orrs	r3, r2
 802a646:	0019      	movs	r1, r3
 802a648:	e7e0      	b.n	802a60c <scalbn+0x3c>
 802a64a:	0013      	movs	r3, r2
 802a64c:	3335      	adds	r3, #53	@ 0x35
 802a64e:	da08      	bge.n	802a662 <scalbn+0x92>
 802a650:	4c0a      	ldr	r4, [pc, #40]	@ (802a67c <scalbn+0xac>)
 802a652:	4d0b      	ldr	r5, [pc, #44]	@ (802a680 <scalbn+0xb0>)
 802a654:	2900      	cmp	r1, #0
 802a656:	da01      	bge.n	802a65c <scalbn+0x8c>
 802a658:	4c08      	ldr	r4, [pc, #32]	@ (802a67c <scalbn+0xac>)
 802a65a:	4d11      	ldr	r5, [pc, #68]	@ (802a6a0 <scalbn+0xd0>)
 802a65c:	4a07      	ldr	r2, [pc, #28]	@ (802a67c <scalbn+0xac>)
 802a65e:	4b08      	ldr	r3, [pc, #32]	@ (802a680 <scalbn+0xb0>)
 802a660:	e7e4      	b.n	802a62c <scalbn+0x5c>
 802a662:	4b0e      	ldr	r3, [pc, #56]	@ (802a69c <scalbn+0xcc>)
 802a664:	3236      	adds	r2, #54	@ 0x36
 802a666:	401d      	ands	r5, r3
 802a668:	0512      	lsls	r2, r2, #20
 802a66a:	432a      	orrs	r2, r5
 802a66c:	0011      	movs	r1, r2
 802a66e:	4b0d      	ldr	r3, [pc, #52]	@ (802a6a4 <scalbn+0xd4>)
 802a670:	2200      	movs	r2, #0
 802a672:	e7c1      	b.n	802a5f8 <scalbn+0x28>
 802a674:	43500000 	.word	0x43500000
 802a678:	ffff3cb0 	.word	0xffff3cb0
 802a67c:	c2f8f359 	.word	0xc2f8f359
 802a680:	01a56e1f 	.word	0x01a56e1f
 802a684:	000007ff 	.word	0x000007ff
 802a688:	0000c350 	.word	0x0000c350
 802a68c:	8800759c 	.word	0x8800759c
 802a690:	7e37e43c 	.word	0x7e37e43c
 802a694:	fe37e43c 	.word	0xfe37e43c
 802a698:	000007fe 	.word	0x000007fe
 802a69c:	800fffff 	.word	0x800fffff
 802a6a0:	81a56e1f 	.word	0x81a56e1f
 802a6a4:	3c900000 	.word	0x3c900000

0802a6a8 <with_errno>:
 802a6a8:	b570      	push	{r4, r5, r6, lr}
 802a6aa:	000d      	movs	r5, r1
 802a6ac:	0016      	movs	r6, r2
 802a6ae:	0004      	movs	r4, r0
 802a6b0:	f7fc f952 	bl	8026958 <__errno>
 802a6b4:	0029      	movs	r1, r5
 802a6b6:	6006      	str	r6, [r0, #0]
 802a6b8:	0020      	movs	r0, r4
 802a6ba:	bd70      	pop	{r4, r5, r6, pc}

0802a6bc <xflow>:
 802a6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a6be:	0014      	movs	r4, r2
 802a6c0:	001d      	movs	r5, r3
 802a6c2:	2800      	cmp	r0, #0
 802a6c4:	d002      	beq.n	802a6cc <xflow+0x10>
 802a6c6:	2180      	movs	r1, #128	@ 0x80
 802a6c8:	0609      	lsls	r1, r1, #24
 802a6ca:	185b      	adds	r3, r3, r1
 802a6cc:	9200      	str	r2, [sp, #0]
 802a6ce:	9301      	str	r3, [sp, #4]
 802a6d0:	9a00      	ldr	r2, [sp, #0]
 802a6d2:	9b01      	ldr	r3, [sp, #4]
 802a6d4:	0020      	movs	r0, r4
 802a6d6:	0029      	movs	r1, r5
 802a6d8:	f7d8 f93c 	bl	8002954 <__aeabi_dmul>
 802a6dc:	2222      	movs	r2, #34	@ 0x22
 802a6de:	f7ff ffe3 	bl	802a6a8 <with_errno>
 802a6e2:	b003      	add	sp, #12
 802a6e4:	bd30      	pop	{r4, r5, pc}

0802a6e6 <__math_uflow>:
 802a6e6:	2380      	movs	r3, #128	@ 0x80
 802a6e8:	b510      	push	{r4, lr}
 802a6ea:	2200      	movs	r2, #0
 802a6ec:	055b      	lsls	r3, r3, #21
 802a6ee:	f7ff ffe5 	bl	802a6bc <xflow>
 802a6f2:	bd10      	pop	{r4, pc}

0802a6f4 <__math_oflow>:
 802a6f4:	23e0      	movs	r3, #224	@ 0xe0
 802a6f6:	b510      	push	{r4, lr}
 802a6f8:	2200      	movs	r2, #0
 802a6fa:	05db      	lsls	r3, r3, #23
 802a6fc:	f7ff ffde 	bl	802a6bc <xflow>
 802a700:	bd10      	pop	{r4, pc}

0802a702 <with_errnof>:
 802a702:	b570      	push	{r4, r5, r6, lr}
 802a704:	000d      	movs	r5, r1
 802a706:	1c04      	adds	r4, r0, #0
 802a708:	f7fc f926 	bl	8026958 <__errno>
 802a70c:	6005      	str	r5, [r0, #0]
 802a70e:	1c20      	adds	r0, r4, #0
 802a710:	bd70      	pop	{r4, r5, r6, pc}

0802a712 <xflowf>:
 802a712:	b510      	push	{r4, lr}
 802a714:	1c0b      	adds	r3, r1, #0
 802a716:	2800      	cmp	r0, #0
 802a718:	d002      	beq.n	802a720 <xflowf+0xe>
 802a71a:	2380      	movs	r3, #128	@ 0x80
 802a71c:	061b      	lsls	r3, r3, #24
 802a71e:	18cb      	adds	r3, r1, r3
 802a720:	1c18      	adds	r0, r3, #0
 802a722:	f7d6 fc8d 	bl	8001040 <__aeabi_fmul>
 802a726:	2122      	movs	r1, #34	@ 0x22
 802a728:	f7ff ffeb 	bl	802a702 <with_errnof>
 802a72c:	bd10      	pop	{r4, pc}

0802a72e <__math_uflowf>:
 802a72e:	2180      	movs	r1, #128	@ 0x80
 802a730:	b510      	push	{r4, lr}
 802a732:	0549      	lsls	r1, r1, #21
 802a734:	f7ff ffed 	bl	802a712 <xflowf>
 802a738:	bd10      	pop	{r4, pc}

0802a73a <__math_oflowf>:
 802a73a:	21e0      	movs	r1, #224	@ 0xe0
 802a73c:	b510      	push	{r4, lr}
 802a73e:	05c9      	lsls	r1, r1, #23
 802a740:	f7ff ffe7 	bl	802a712 <xflowf>
 802a744:	bd10      	pop	{r4, pc}
	...

0802a748 <__ieee754_sqrt>:
 802a748:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a74a:	000a      	movs	r2, r1
 802a74c:	000d      	movs	r5, r1
 802a74e:	496b      	ldr	r1, [pc, #428]	@ (802a8fc <__ieee754_sqrt+0x1b4>)
 802a750:	0004      	movs	r4, r0
 802a752:	0003      	movs	r3, r0
 802a754:	0008      	movs	r0, r1
 802a756:	b087      	sub	sp, #28
 802a758:	4028      	ands	r0, r5
 802a75a:	4288      	cmp	r0, r1
 802a75c:	d111      	bne.n	802a782 <__ieee754_sqrt+0x3a>
 802a75e:	0022      	movs	r2, r4
 802a760:	002b      	movs	r3, r5
 802a762:	0020      	movs	r0, r4
 802a764:	0029      	movs	r1, r5
 802a766:	f7d8 f8f5 	bl	8002954 <__aeabi_dmul>
 802a76a:	0002      	movs	r2, r0
 802a76c:	000b      	movs	r3, r1
 802a76e:	0020      	movs	r0, r4
 802a770:	0029      	movs	r1, r5
 802a772:	f7d7 f8ef 	bl	8001954 <__aeabi_dadd>
 802a776:	0004      	movs	r4, r0
 802a778:	000d      	movs	r5, r1
 802a77a:	0020      	movs	r0, r4
 802a77c:	0029      	movs	r1, r5
 802a77e:	b007      	add	sp, #28
 802a780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a782:	2d00      	cmp	r5, #0
 802a784:	dc11      	bgt.n	802a7aa <__ieee754_sqrt+0x62>
 802a786:	0069      	lsls	r1, r5, #1
 802a788:	0849      	lsrs	r1, r1, #1
 802a78a:	4321      	orrs	r1, r4
 802a78c:	d0f5      	beq.n	802a77a <__ieee754_sqrt+0x32>
 802a78e:	2000      	movs	r0, #0
 802a790:	4285      	cmp	r5, r0
 802a792:	d010      	beq.n	802a7b6 <__ieee754_sqrt+0x6e>
 802a794:	0022      	movs	r2, r4
 802a796:	002b      	movs	r3, r5
 802a798:	0020      	movs	r0, r4
 802a79a:	0029      	movs	r1, r5
 802a79c:	f7d8 fbc0 	bl	8002f20 <__aeabi_dsub>
 802a7a0:	0002      	movs	r2, r0
 802a7a2:	000b      	movs	r3, r1
 802a7a4:	f7d7 fc9c 	bl	80020e0 <__aeabi_ddiv>
 802a7a8:	e7e5      	b.n	802a776 <__ieee754_sqrt+0x2e>
 802a7aa:	1528      	asrs	r0, r5, #20
 802a7ac:	d115      	bne.n	802a7da <__ieee754_sqrt+0x92>
 802a7ae:	2480      	movs	r4, #128	@ 0x80
 802a7b0:	2100      	movs	r1, #0
 802a7b2:	0364      	lsls	r4, r4, #13
 802a7b4:	e007      	b.n	802a7c6 <__ieee754_sqrt+0x7e>
 802a7b6:	0ada      	lsrs	r2, r3, #11
 802a7b8:	3815      	subs	r0, #21
 802a7ba:	055b      	lsls	r3, r3, #21
 802a7bc:	2a00      	cmp	r2, #0
 802a7be:	d0fa      	beq.n	802a7b6 <__ieee754_sqrt+0x6e>
 802a7c0:	e7f5      	b.n	802a7ae <__ieee754_sqrt+0x66>
 802a7c2:	0052      	lsls	r2, r2, #1
 802a7c4:	3101      	adds	r1, #1
 802a7c6:	4222      	tst	r2, r4
 802a7c8:	d0fb      	beq.n	802a7c2 <__ieee754_sqrt+0x7a>
 802a7ca:	1e4c      	subs	r4, r1, #1
 802a7cc:	1b00      	subs	r0, r0, r4
 802a7ce:	2420      	movs	r4, #32
 802a7d0:	001d      	movs	r5, r3
 802a7d2:	1a64      	subs	r4, r4, r1
 802a7d4:	40e5      	lsrs	r5, r4
 802a7d6:	408b      	lsls	r3, r1
 802a7d8:	432a      	orrs	r2, r5
 802a7da:	4949      	ldr	r1, [pc, #292]	@ (802a900 <__ieee754_sqrt+0x1b8>)
 802a7dc:	0312      	lsls	r2, r2, #12
 802a7de:	1844      	adds	r4, r0, r1
 802a7e0:	2180      	movs	r1, #128	@ 0x80
 802a7e2:	0b12      	lsrs	r2, r2, #12
 802a7e4:	0349      	lsls	r1, r1, #13
 802a7e6:	4311      	orrs	r1, r2
 802a7e8:	07c0      	lsls	r0, r0, #31
 802a7ea:	d403      	bmi.n	802a7f4 <__ieee754_sqrt+0xac>
 802a7ec:	0fda      	lsrs	r2, r3, #31
 802a7ee:	0049      	lsls	r1, r1, #1
 802a7f0:	1851      	adds	r1, r2, r1
 802a7f2:	005b      	lsls	r3, r3, #1
 802a7f4:	2500      	movs	r5, #0
 802a7f6:	1062      	asrs	r2, r4, #1
 802a7f8:	0049      	lsls	r1, r1, #1
 802a7fa:	2480      	movs	r4, #128	@ 0x80
 802a7fc:	9205      	str	r2, [sp, #20]
 802a7fe:	0fda      	lsrs	r2, r3, #31
 802a800:	1852      	adds	r2, r2, r1
 802a802:	2016      	movs	r0, #22
 802a804:	0029      	movs	r1, r5
 802a806:	005b      	lsls	r3, r3, #1
 802a808:	03a4      	lsls	r4, r4, #14
 802a80a:	190e      	adds	r6, r1, r4
 802a80c:	4296      	cmp	r6, r2
 802a80e:	dc02      	bgt.n	802a816 <__ieee754_sqrt+0xce>
 802a810:	1931      	adds	r1, r6, r4
 802a812:	1b92      	subs	r2, r2, r6
 802a814:	192d      	adds	r5, r5, r4
 802a816:	0fde      	lsrs	r6, r3, #31
 802a818:	0052      	lsls	r2, r2, #1
 802a81a:	3801      	subs	r0, #1
 802a81c:	1992      	adds	r2, r2, r6
 802a81e:	005b      	lsls	r3, r3, #1
 802a820:	0864      	lsrs	r4, r4, #1
 802a822:	2800      	cmp	r0, #0
 802a824:	d1f1      	bne.n	802a80a <__ieee754_sqrt+0xc2>
 802a826:	2620      	movs	r6, #32
 802a828:	2780      	movs	r7, #128	@ 0x80
 802a82a:	0004      	movs	r4, r0
 802a82c:	9604      	str	r6, [sp, #16]
 802a82e:	063f      	lsls	r7, r7, #24
 802a830:	183e      	adds	r6, r7, r0
 802a832:	46b4      	mov	ip, r6
 802a834:	428a      	cmp	r2, r1
 802a836:	dc02      	bgt.n	802a83e <__ieee754_sqrt+0xf6>
 802a838:	d114      	bne.n	802a864 <__ieee754_sqrt+0x11c>
 802a83a:	429e      	cmp	r6, r3
 802a83c:	d812      	bhi.n	802a864 <__ieee754_sqrt+0x11c>
 802a83e:	4660      	mov	r0, ip
 802a840:	4666      	mov	r6, ip
 802a842:	19c0      	adds	r0, r0, r7
 802a844:	9100      	str	r1, [sp, #0]
 802a846:	2e00      	cmp	r6, #0
 802a848:	da03      	bge.n	802a852 <__ieee754_sqrt+0x10a>
 802a84a:	43c6      	mvns	r6, r0
 802a84c:	0ff6      	lsrs	r6, r6, #31
 802a84e:	198e      	adds	r6, r1, r6
 802a850:	9600      	str	r6, [sp, #0]
 802a852:	1a52      	subs	r2, r2, r1
 802a854:	4563      	cmp	r3, ip
 802a856:	4189      	sbcs	r1, r1
 802a858:	4249      	negs	r1, r1
 802a85a:	1a52      	subs	r2, r2, r1
 802a85c:	4661      	mov	r1, ip
 802a85e:	1a5b      	subs	r3, r3, r1
 802a860:	9900      	ldr	r1, [sp, #0]
 802a862:	19e4      	adds	r4, r4, r7
 802a864:	0fde      	lsrs	r6, r3, #31
 802a866:	0052      	lsls	r2, r2, #1
 802a868:	1992      	adds	r2, r2, r6
 802a86a:	9e04      	ldr	r6, [sp, #16]
 802a86c:	005b      	lsls	r3, r3, #1
 802a86e:	3e01      	subs	r6, #1
 802a870:	087f      	lsrs	r7, r7, #1
 802a872:	9604      	str	r6, [sp, #16]
 802a874:	2e00      	cmp	r6, #0
 802a876:	d1db      	bne.n	802a830 <__ieee754_sqrt+0xe8>
 802a878:	431a      	orrs	r2, r3
 802a87a:	d01f      	beq.n	802a8bc <__ieee754_sqrt+0x174>
 802a87c:	4e21      	ldr	r6, [pc, #132]	@ (802a904 <__ieee754_sqrt+0x1bc>)
 802a87e:	4f22      	ldr	r7, [pc, #136]	@ (802a908 <__ieee754_sqrt+0x1c0>)
 802a880:	6830      	ldr	r0, [r6, #0]
 802a882:	6871      	ldr	r1, [r6, #4]
 802a884:	683a      	ldr	r2, [r7, #0]
 802a886:	687b      	ldr	r3, [r7, #4]
 802a888:	9200      	str	r2, [sp, #0]
 802a88a:	9301      	str	r3, [sp, #4]
 802a88c:	6832      	ldr	r2, [r6, #0]
 802a88e:	6873      	ldr	r3, [r6, #4]
 802a890:	9202      	str	r2, [sp, #8]
 802a892:	9303      	str	r3, [sp, #12]
 802a894:	9a00      	ldr	r2, [sp, #0]
 802a896:	9b01      	ldr	r3, [sp, #4]
 802a898:	f7d8 fb42 	bl	8002f20 <__aeabi_dsub>
 802a89c:	0002      	movs	r2, r0
 802a89e:	000b      	movs	r3, r1
 802a8a0:	9802      	ldr	r0, [sp, #8]
 802a8a2:	9903      	ldr	r1, [sp, #12]
 802a8a4:	f7d5 fe14 	bl	80004d0 <__aeabi_dcmple>
 802a8a8:	2800      	cmp	r0, #0
 802a8aa:	d007      	beq.n	802a8bc <__ieee754_sqrt+0x174>
 802a8ac:	6830      	ldr	r0, [r6, #0]
 802a8ae:	6871      	ldr	r1, [r6, #4]
 802a8b0:	683a      	ldr	r2, [r7, #0]
 802a8b2:	687b      	ldr	r3, [r7, #4]
 802a8b4:	1c67      	adds	r7, r4, #1
 802a8b6:	d10c      	bne.n	802a8d2 <__ieee754_sqrt+0x18a>
 802a8b8:	9c04      	ldr	r4, [sp, #16]
 802a8ba:	3501      	adds	r5, #1
 802a8bc:	4a13      	ldr	r2, [pc, #76]	@ (802a90c <__ieee754_sqrt+0x1c4>)
 802a8be:	106b      	asrs	r3, r5, #1
 802a8c0:	189b      	adds	r3, r3, r2
 802a8c2:	9a05      	ldr	r2, [sp, #20]
 802a8c4:	07ed      	lsls	r5, r5, #31
 802a8c6:	0864      	lsrs	r4, r4, #1
 802a8c8:	0512      	lsls	r2, r2, #20
 802a8ca:	4325      	orrs	r5, r4
 802a8cc:	0028      	movs	r0, r5
 802a8ce:	18d1      	adds	r1, r2, r3
 802a8d0:	e751      	b.n	802a776 <__ieee754_sqrt+0x2e>
 802a8d2:	f7d7 f83f 	bl	8001954 <__aeabi_dadd>
 802a8d6:	6877      	ldr	r7, [r6, #4]
 802a8d8:	6836      	ldr	r6, [r6, #0]
 802a8da:	0002      	movs	r2, r0
 802a8dc:	000b      	movs	r3, r1
 802a8de:	0030      	movs	r0, r6
 802a8e0:	0039      	movs	r1, r7
 802a8e2:	f7d5 fdeb 	bl	80004bc <__aeabi_dcmplt>
 802a8e6:	2800      	cmp	r0, #0
 802a8e8:	d004      	beq.n	802a8f4 <__ieee754_sqrt+0x1ac>
 802a8ea:	3402      	adds	r4, #2
 802a8ec:	4263      	negs	r3, r4
 802a8ee:	4163      	adcs	r3, r4
 802a8f0:	18ed      	adds	r5, r5, r3
 802a8f2:	e7e3      	b.n	802a8bc <__ieee754_sqrt+0x174>
 802a8f4:	2301      	movs	r3, #1
 802a8f6:	3401      	adds	r4, #1
 802a8f8:	439c      	bics	r4, r3
 802a8fa:	e7df      	b.n	802a8bc <__ieee754_sqrt+0x174>
 802a8fc:	7ff00000 	.word	0x7ff00000
 802a900:	fffffc01 	.word	0xfffffc01
 802a904:	0802f970 	.word	0x0802f970
 802a908:	0802f968 	.word	0x0802f968
 802a90c:	3fe00000 	.word	0x3fe00000

0802a910 <_init>:
 802a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a912:	46c0      	nop			@ (mov r8, r8)
 802a914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a916:	bc08      	pop	{r3}
 802a918:	469e      	mov	lr, r3
 802a91a:	4770      	bx	lr

0802a91c <_fini>:
 802a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a91e:	46c0      	nop			@ (mov r8, r8)
 802a920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a922:	bc08      	pop	{r3}
 802a924:	469e      	mov	lr, r3
 802a926:	4770      	bx	lr
